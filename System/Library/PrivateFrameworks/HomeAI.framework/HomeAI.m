std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_225DC8358(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<cv::Point_<int>>::__append(char **a1, unint64_t a2)
{
  v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    void *v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_225DC87B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::vector<long long>::reserve(void **a1, unint64_t a2)
{
  int8x8_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint8x8_t v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_225DC98AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (__p) {
    operator delete(__p);
  }
  cv::Mat::~Mat((cv::Mat *)&a17, a2);
  cv::Mat::~Mat((cv::Mat *)&a29, v30);
  _Unwind_Resume(a1);
}

void cv::Mat::~Mat(cv::Mat *this, void *a2)
{
  uint64_t v3 = (atomic_uint *)*((void *)this + 3);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate(this, a2);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  if (*((int *)this + 1) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)this + 8);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *((int *)this + 1));
  }
  *((void *)this + 3) = 0;
  uint64_t v6 = (void **)*((void *)this + 9);
  if (v6 != (void **)((char *)this + 80)) {
    cv::fastFree(v6, a2);
  }
}

void sub_225DC9B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __clang_call_terminate(void *a1)
{
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26477B340, MEMORY[0x263F8C060]);
}

void sub_225DC9C48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

__CFString *systemResourceUsageLevelAsString(unint64_t a1)
{
  if (a1 > 3) {
    return @"HMISystemResourceUsageLevelUndefined";
  }
  else {
    return off_26477B7F8[a1];
  }
}

void sub_225DCC904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

__CFString *HMIFaceFilteredStateAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"None";
  }
  else {
    return off_26477B820[a1 - 1];
  }
}

void sub_225DCD698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id HMIFourCCString(unsigned int a1)
{
  uint64_t v1 = objc_msgSend(NSString, "stringWithFormat:", @"%c%c%c%c", HIBYTE(a1), BYTE2(a1), BYTE1(a1), a1);
  v2 = [MEMORY[0x263F08708] whitespaceCharacterSet];
  uint64_t v3 = [v1 stringByTrimmingCharactersInSet:v2];

  return v3;
}

uint64_t HMICMSampleBufferGetMediaType(opaqueCMSampleBuffer *a1)
{
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  return CMFormatDescriptionGetMediaType(FormatDescription);
}

BOOL HMICMSampleBufferIsVideo(opaqueCMSampleBuffer *a1)
{
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  return CMFormatDescriptionGetMediaType(FormatDescription) == 1986618469;
}

BOOL HMICMSampleBufferIsAudio(opaqueCMSampleBuffer *a1)
{
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  return CMFormatDescriptionGetMediaType(FormatDescription) == 1936684398;
}

BOOL HMICMSampleBufferIsSync(opaqueCMSampleBuffer *a1)
{
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  if (!SampleAttachmentsArray) {
    return 1;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
  value = 0;
  return !CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x263F01018], (const void **)&value)
      || value == (void *)*MEMORY[0x263EFFB38];
}

id HMICMSampleBufferShortDescription(opaqueCMSampleBuffer *a1)
{
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  CMMediaType MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
  CMSampleBufferGetDecodeTimeStamp(&time, a1);
  uint64_t v4 = (__CFString *)CMTimeCopyDescription(0, &time);
  CMSampleBufferGetPresentationTimeStamp(&v15, a1);
  uint64_t v5 = (__CFString *)CMTimeCopyDescription(0, &v15);
  CMSampleBufferGetDuration(&v14, a1);
  uint64_t v6 = (__CFString *)CMTimeCopyDescription(0, &v14);
  uint64_t v7 = NSString;
  uint64_t v8 = HMIFourCCString(MediaType);
  CMItemCount NumSamples = CMSampleBufferGetNumSamples(a1);
  BOOL IsSync = HMICMSampleBufferIsSync(a1);
  unint64_t v11 = &stru_26D98B6C8;
  if (IsSync) {
    unint64_t v11 = @"Sync";
  }
  unint64_t v12 = [v7 stringWithFormat:@"Type: %@, DTS: %@, PTS: %@, DUR: %@, NUM: %ld [%@]", v8, v4, v5, v6, NumSamples, v11];

  return v12;
}

uint64_t HMIDurationString(double a1)
{
  double __y = 0.0;
  double v2 = -a1;
  if (a1 >= 0.0) {
    double v2 = a1;
  }
  double v3 = modf(v2 + 0.0005, &__y);
  LODWORD(v4) = (int)__y;
  LODWORD(v5) = (int)__y / 0xE10u;
  if ((int)__y < 3600)
  {
    uint64_t v5 = 0;
  }
  else
  {
    LODWORD(v4) = (int)__y % 0xE10u;
    uint64_t v5 = v5;
  }
  BOOL v6 = (int)v4 < 60;
  LODWORD(v7) = v4 / 0x3C;
  if ((int)v4 >= 60) {
    uint64_t v4 = v4 % 0x3C;
  }
  else {
    uint64_t v4 = v4;
  }
  if (v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v7;
  }
  double v8 = v3 * 1000.0;
  uint64_t v11 = v4;
  uint64_t v9 = 32;
  if (a1 < 0.0) {
    uint64_t v9 = 45;
  }
  return objc_msgSend(NSString, "stringWithFormat:", @"%c%02d:%02d:%02d.%03d", v9, v5, v7, v11, (int)v8);
}

__CFString *HMITimeString(CMTime *a1, int a2, unsigned int a3)
{
  CMTimeFlags flags = a1->flags;
  if ((flags & 1) == 0) {
    goto LABEL_2;
  }
  if ((a1->flags & 0x1D) == 1)
  {
    if (a3) {
      uint64_t v5 = a3;
    }
    else {
      uint64_t v5 = 8;
    }
    uint64_t timescale = a1->timescale;
    uint64_t v7 = NSString;
    CMTimeValue value = a1->value;
    CMTime time = *a1;
    if (timescale == a2)
    {
      double Seconds = CMTimeGetSeconds(&time);
      unint64_t v10 = HMIDurationString(Seconds);
      [v7 stringWithFormat:@"%*lld %@", v5, value, v10, v13];
    }
    else
    {
      double v11 = CMTimeGetSeconds(&time);
      unint64_t v10 = HMIDurationString(v11);
      [v7 stringWithFormat:@"%*lld/%-6d %@", v5, value, timescale, v10];
    }
    uint64_t v4 = (__CFString *)objc_claimAutoreleasedReturnValue();

    goto LABEL_17;
  }
  if ((flags & 4) != 0)
  {
    uint64_t v4 = @"POSITIVE INFINITY";
  }
  else if ((flags & 8) != 0)
  {
    uint64_t v4 = @"NEGATIVE INFINITY";
  }
  else
  {
    if ((flags & 0x10) == 0)
    {
LABEL_2:
      uint64_t v4 = @"  INVALID TIME   ";
      goto LABEL_17;
    }
    uint64_t v4 = @"   INDEFINITE    ";
  }
LABEL_17:
  return v4;
}

id HMICMSampleBufferFormattedDescription(opaqueCMSampleBuffer *a1, int a2)
{
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  CMMediaType MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
  memset(&v18, 0, sizeof(v18));
  CMSampleBufferGetDecodeTimeStamp(&v18, a1);
  memset(&v17, 0, sizeof(v17));
  CMSampleBufferGetPresentationTimeStamp(&v17, a1);
  memset(&v16, 0, sizeof(v16));
  CMSampleBufferGetDuration(&v16, a1);
  CMTime v15 = v18;
  BOOL v6 = HMITimeString(&v15, a2, 0);
  CMTime v15 = v17;
  uint64_t v7 = HMITimeString(&v15, a2, 0);
  CMTime v15 = v16;
  double v8 = HMITimeString(&v15, a2, 0);
  uint64_t v9 = NSString;
  unint64_t v10 = HMIFourCCString(MediaType);
  BOOL IsSync = HMICMSampleBufferIsSync(a1);
  unint64_t v12 = &stru_26D98B6C8;
  if (IsSync) {
    unint64_t v12 = @" S";
  }
  uint64_t v13 = [v9 stringWithFormat:@"%@ DTS %@ PTS %@ dur %@%@", v10, v6, v7, v8, v12];

  return v13;
}

id HMICMSampleBufferTinyDescription(opaqueCMSampleBuffer *a1)
{
  memset(&v4, 0, sizeof(v4));
  CMSampleBufferGetPresentationTimeStamp(&v4, a1);
  CMTime time = v4;
  uint64_t v1 = [NSString stringWithFormat:@"PTS: %.2f", CMTimeGetSeconds(&time)];
  return v1;
}

CMTimeValue HMICMSampleBufferCreateCopyWithTimingOffset(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  double v3 = a1;
  uint64_t v26 = *MEMORY[0x263EF8340];
  CMItemCount timingArrayEntriesNeededOut = 0;
  uint64_t SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(a1, 0, 0, &timingArrayEntriesNeededOut);
  if (timingArrayEntriesNeededOut)
  {
    MEMORY[0x270FA5388](SampleTimingInfoArray, v5);
    uint64_t v7 = (CMSampleTimingInfo *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (!CMSampleBufferGetSampleTimingInfoArray(v3, timingArrayEntriesNeededOut, v7, 0))
    {
      CMItemCount v9 = timingArrayEntriesNeededOut;
      if (timingArrayEntriesNeededOut >= 1)
      {
        CMItemCount v10 = 0;
        p_presentationTimeStamp = &v7->presentationTimeStamp;
        *(void *)&long long v8 = 138543362;
        long long v20 = v8;
        *(void *)&long long v8 = 138543618;
        long long v19 = v8;
        do
        {
          CMTime lhs = *a2;
          CMTime rhs = *p_presentationTimeStamp;
          CMTimeAdd(&time1, &lhs, &rhs);
          CMTime *p_presentationTimeStamp = time1;
          CMTime lhs = *a2;
          CMTime rhs = p_presentationTimeStamp[1];
          CMTimeAdd(&time1, &lhs, &rhs);
          p_presentationTimeStamp[1] = time1;
          CMTimeMake(&time2, 1, 1);
          CMTime time1 = p_presentationTimeStamp[-1];
          if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          {
            unint64_t v12 = (void *)MEMORY[0x22A641C70]();
            uint64_t v13 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              CMTime v14 = HMFGetLogIdentifier();
              LODWORD(time1.value) = v20;
              *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)v14;
              _os_log_impl(&dword_225DC6000, v13, OS_LOG_TYPE_ERROR, "%{public}@Sample has a very large duration, the source video is corrupt.", (uint8_t *)&time1, 0xCu);
            }
            CMTime v15 = (void *)MEMORY[0x22A641C70]();
            CMTime v16 = HMFGetOSLogHandle();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              CMTime v17 = HMFGetLogIdentifier();
              LODWORD(time1.value) = v19;
              *(CMTimeValue *)((char *)&time1.value + 4) = (CMTimeValue)v17;
              LOWORD(time1.flags) = 2112;
              *(void *)((char *)&time1.flags + 2) = v3;
              _os_log_impl(&dword_225DC6000, v16, OS_LOG_TYPE_ERROR, "%{public}@Original Sample Buffer: %@", (uint8_t *)&time1, 0x16u);
            }
          }
          ++v10;
          CMItemCount v9 = timingArrayEntriesNeededOut;
          p_presentationTimeStamp += 3;
        }
        while (v10 < timingArrayEntriesNeededOut);
      }
      time1.CMTimeValue value = 0;
      CMSampleBufferCreateCopyWithNewTiming(0, v3, v9, v7, (CMSampleBufferRef *)&time1);
      return time1.value;
    }
  }
  return (CMTimeValue)v3;
}

CMTimeValue HMICMSampleBufferCreateCopyWithoutEdits(opaqueCMSampleBuffer *a1)
{
  return HMICMSampleBufferCreateCopyWithTimingOffset(a1, MEMORY[0x263F010E0]);
}

CMSampleBufferRef HMICMSampleBufferCreateCopyWithPixelBuffer(opaqueCMSampleBuffer *a1, __CVBuffer *a2)
{
  CMVideoFormatDescriptionRef formatDescriptionOut = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CMVideoFormatDescriptionCreateForImageBuffer((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, &formatDescriptionOut);
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetDuration(&v7.duration, a1);
  CMSampleBufferGetPresentationTimeStamp(&v7.presentationTimeStamp, a1);
  CMSampleBufferGetDecodeTimeStamp(&v7.decodeTimeStamp, a1);
  CMSampleBufferRef sampleBufferOut = 0;
  CMSampleBufferCreateReadyWithImageBuffer(v4, a2, formatDescriptionOut, &v7, &sampleBufferOut);
  CFRelease(formatDescriptionOut);
  return sampleBufferOut;
}

uint64_t HMICMSampleBufferTimeAscendingComparator(opaqueCMSampleBuffer *a1, opaqueCMSampleBuffer *a2)
{
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetPresentationTimeStamp(&v7, a1);
  memset(&v6, 0, sizeof(v6));
  CMSampleBufferGetPresentationTimeStamp(&v6, a2);
  CMTime time1 = v7;
  CMTime v4 = v6;
  return CMTimeCompare(&time1, &v4);
}

__CFString *HMICMTimeDescription(CMTime *a1)
{
  CMTime v3 = *a1;
  uint64_t v1 = (__CFString *)CMTimeCopyDescription(0, &v3);
  return v1;
}

__CFString *HMICMTimeRangeDescription(_OWORD *a1)
{
  long long v1 = a1[1];
  *(_OWORD *)&v4.start.CMTimeValue value = *a1;
  *(_OWORD *)&v4.start.epoch = v1;
  *(_OWORD *)&v4.duration.uint64_t timescale = a1[2];
  double v2 = (__CFString *)CMTimeRangeCopyDescription(0, &v4);
  return v2;
}

CMTimeRange *HMICMSampleBufferGetPresentationTimeRange@<X0>(opaqueCMSampleBuffer *a1@<X0>, CMTimeRange *a2@<X8>)
{
  memset(&v8, 0, sizeof(v8));
  CMSampleBufferGetPresentationTimeStamp(&v8, a1);
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetDuration(&v7, a1);
  CMTime start = v8;
  CMTime v5 = v7;
  return CMTimeRangeMake(a2, &start, &v5);
}

CMTime *HMICMSampleBufferGetPresentationTimeRangeEnd@<X0>(opaqueCMSampleBuffer *a1@<X0>, CMTime *a2@<X8>)
{
  HMICMSampleBufferGetPresentationTimeRange(a1, &v4);
  return CMTimeRangeGetEnd(a2, &v4);
}

BOOL HMIMP4HasFTYP(void *a1)
{
  id v1 = a1;
  double v2 = [[HMIDataReader alloc] initWithData:v1];

  if ([(HMIDataReader *)v2 length] < 8)
  {
    BOOL v3 = 0;
  }
  else
  {
    [(HMIDataReader *)v2 readUInt32];
    BOOL v3 = [(HMIDataReader *)v2 readUInt32] == 1718909296;
  }

  return v3;
}

uint64_t HMIMP4Parse(void *a1, char a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v4 = a1;
  CMTime v5 = a3;
  CMTime v6 = [[HMIDataReader alloc] initWithData:v4];
  *(void *)&long long v7 = 138543618;
  long long v25 = v7;
  while (1)
  {
    unint64_t v8 = [(HMIDataReader *)v6 position];
    if (v8 >= [v4 length])
    {
LABEL_14:
      uint64_t v23 = 1;
      goto LABEL_16;
    }
    uint64_t v9 = [(HMIDataReader *)v6 position];
    unsigned int v10 = [(HMIDataReader *)v6 readUInt32];
    uint64_t v11 = [(HMIDataReader *)v6 readUInt32];
    if (!v10) {
      break;
    }
    uint64_t v12 = v11;
    if (v10 == 1) {
      unint64_t v13 = [(HMIDataReader *)v6 readUInt64];
    }
    else {
      unint64_t v13 = v10;
    }
    uint64_t v14 = [(HMIDataReader *)v6 position];
    [(HMIDataReader *)v6 seek:v9];
    unint64_t v15 = [(HMIDataReader *)v6 position] + v13;
    if (v15 > [(HMIDataReader *)v6 length])
    {
      if (a2) {
        break;
      }
      CMTime v16 = (void *)MEMORY[0x22A641C70]();
      CMTime v17 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        CMTime v18 = HMFGetLogIdentifier();
        *(_DWORD *)buf = v25;
        v28 = v18;
        __int16 v29 = 2048;
        unint64_t v30 = v13;
        _os_log_impl(&dword_225DC6000, v17, OS_LOG_TYPE_ERROR, "%{public}@Bogus atomSize %llu, recovering by adjusting size.", buf, 0x16u);
      }
      uint64_t v19 = [(HMIDataReader *)v6 length];
      unint64_t v13 = v19 - [(HMIDataReader *)v6 position];
    }
    if (v13 < v14 - v9) {
      break;
    }
    long long v20 = [(HMIDataReader *)v6 readData:v13];
    v21 = objc_msgSend(v20, "subdataWithRange:", v14 - v9, v13 - (v14 - v9));
    char v22 = v5[2](v5, v12, v20, v21);

    if ((v22 & 1) == 0) {
      goto LABEL_14;
    }
  }
  uint64_t v23 = 0;
LABEL_16:

  return v23;
}

void HMIMP4ParseMFHD(void *a1, void *a2)
{
  BOOL v3 = a2;
  id v4 = a1;
  CMTime v5 = [[HMIDataReader alloc] initWithData:v4];

  CMTime v6 = v5;
  LODWORD(v4) = [(HMIDataReader *)v6 readUInt32];
  [(HMIDataReader *)v6 readUInt32];
  if (v4 == 1) {
    [(HMIDataReader *)v6 readUInt64];
  }

  [(HMIDataReader *)v6 readUInt32];
  v3[2](v3, [(HMIDataReader *)v6 readUInt32]);
}

id HMIParseDate(void *a1)
{
  id v1 = (objc_class *)MEMORY[0x263F08790];
  id v2 = a1;
  id v3 = objc_alloc_init(v1);
  id v4 = [MEMORY[0x263EFF960] localeWithLocaleIdentifier:@"en_US_POSIX"];
  [v3 setLocale:v4];
  [v3 setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss"];
  CMTime v5 = [v3 dateFromString:v2];

  return v5;
}

uint64_t HMICGSizeDescription(double a1, double a2)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"%.3f x %.3f", *(void *)&a1, *(void *)&a2);
}

id HMICGRectDescription(double a1, double a2, double a3, double a4)
{
  CMTime v6 = NSString;
  long long v7 = objc_msgSend(NSString, "stringWithFormat:", @"%.3f x %.3f", *(void *)&a3, *(void *)&a4);
  unint64_t v8 = [v6 stringWithFormat:@"%.3f, %.3f %@", *(void *)&a1, *(void *)&a2, v7];

  return v8;
}

uint64_t HMINSTimeIntervalDescription(double a1)
{
  return [NSString stringWithFormat:@"%.2f", *(void *)&a1];
}

id HMIUUIDShortDescription(void *a1)
{
  id v1 = [a1 UUIDString];
  id v2 = [v1 substringToIndex:4];

  return v2;
}

id HMISHA1Data(void *a1, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  id v3 = a1;
  CC_SHA1((const void *)[v3 bytes], objc_msgSend(v3, "length"), md);
  id v4 = [MEMORY[0x263F089D8] stringWithCapacity:40];
  if (a2 >= 20) {
    uint64_t v5 = 20;
  }
  else {
    uint64_t v5 = a2;
  }
  if (v5)
  {
    CMTime v6 = md;
    do
    {
      unsigned int v7 = *v6++;
      objc_msgSend(v4, "appendFormat:", @"%02x", v7);
      --v5;
    }
    while (v5);
  }

  return v4;
}

id HMIRandomData(uint64_t a1)
{
  id v1 = [MEMORY[0x263EFF990] dataWithLength:a1];
  CCRandomGenerateBytes((void *)[v1 mutableBytes], objc_msgSend(v1, "length"));
  id v2 = (void *)[v1 copy];

  return v2;
}

BOOL HMIDispatchSyncWait(void *a1, void *a2, double a3)
{
  id v5 = a2;
  uint64_t v16 = 0;
  CMTime v17 = &v16;
  uint64_t v18 = 0x2020000000;
  char v19 = 0;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  v13[2] = __HMIDispatchSyncWait_block_invoke;
  v13[3] = &unk_26477B898;
  id v6 = v5;
  id v14 = v6;
  unint64_t v15 = &v16;
  unsigned int v7 = a1;
  dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_INHERIT_QOS_CLASS, v13);
  dispatch_async(v7, v8);

  dispatch_time_t v9 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
  intptr_t v10 = dispatch_block_wait(v8, v9);
  if (v10) {
    *((unsigned char *)v17 + 24) = 1;
  }
  BOOL v11 = v10 == 0;

  _Block_object_dispose(&v16, 8);
  return v11;
}

uint64_t __HMIDispatchSyncWait_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_225DCF0D4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225DCF1D4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225DCF364(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225DCF550(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225DCF764(_Unwind_Exception *exception_object)
{
}

uint64_t HMISimulateCrash(void *a1, void *a2, int a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v6 = a2;
  if (+[HMIPreference isInternalInstall])
  {
    unsigned int v7 = (void *)HMISimulateCrash_lastCrashReportDate;
    if (!HMISimulateCrash_lastCrashReportDate)
    {
      uint64_t v8 = [MEMORY[0x263EFF910] distantPast];
      dispatch_time_t v9 = (void *)HMISimulateCrash_lastCrashReportDate;
      HMISimulateCrash_lastCrashReportDate = v8;

      unsigned int v7 = (void *)HMISimulateCrash_lastCrashReportDate;
    }
    uint64_t v10 = [v7 timeIntervalSinceNow];
    double v12 = v11;
    if (v11 > -120.0) {
      int v13 = a3;
    }
    else {
      int v13 = 0;
    }
    if (v13 == 1)
    {
      id v14 = (void *)MEMORY[0x22A641C70](v10);
      unint64_t v15 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v5;
        *(_WORD *)&buf[22] = 2048;
        double v29 = -v12;
        _os_log_impl(&dword_225DC6000, v15, OS_LOG_TYPE_ERROR, "%{public}@Not generating crash report for %@ since another report was generated within last %f seconds.", buf, 0x20u);
      }
    }
    else
    {
      uint64_t v18 = getpid();
      id v19 = v6;
      uint64_t v24 = 0;
      long long v25 = &v24;
      uint64_t v26 = 0x2020000000;
      long long v20 = (void (*)(uint64_t, uint64_t, id))getSimulateCrashSymbolLoc_ptr;
      v27 = getSimulateCrashSymbolLoc_ptr;
      if (!getSimulateCrashSymbolLoc_ptr)
      {
        *(void *)buf = MEMORY[0x263EF8330];
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = __getSimulateCrashSymbolLoc_block_invoke;
        double v29 = COERCE_DOUBLE(&unk_26477B968);
        unint64_t v30 = &v24;
        __getSimulateCrashSymbolLoc_block_invoke((uint64_t)buf);
        long long v20 = (void (*)(uint64_t, uint64_t, id))v25[3];
      }
      _Block_object_dispose(&v24, 8);
      if (!v20) {
        HMISimulateCrash_cold_1();
      }
      v20(v18, 186429173, v19);

      uint64_t v21 = objc_msgSend(MEMORY[0x263EFF910], "now", v24);
      char v22 = (void *)HMISimulateCrash_lastCrashReportDate;
      HMISimulateCrash_lastCrashReportDate = v21;
    }
    uint64_t v17 = v13 ^ 1u;
  }
  else
  {
    uint64_t v17 = 0;
  }

  return v17;
}

void sub_225DD028C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void HMIReportMemoryException(void *a1, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v3 = a1;
  if (+[HMIPreference isInternalInstall])
  {
    id v4 = (void *)HMIReportMemoryException_lastReportMemoryExceptionDate;
    if (!HMIReportMemoryException_lastReportMemoryExceptionDate)
    {
      uint64_t v5 = [MEMORY[0x263EFF910] distantPast];
      id v6 = (void *)HMIReportMemoryException_lastReportMemoryExceptionDate;
      HMIReportMemoryException_lastReportMemoryExceptionDate = v5;

      id v4 = (void *)HMIReportMemoryException_lastReportMemoryExceptionDate;
    }
    uint64_t v7 = [v4 timeIntervalSinceNow];
    if (a2 && (double v9 = v8, v8 > -120.0))
    {
      uint64_t v10 = (void *)MEMORY[0x22A641C70](v7);
      double v11 = HMFGetOSLogHandle();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        double v12 = HMFGetLogIdentifier();
        *(_DWORD *)buf = 138543874;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v3;
        *(_WORD *)&buf[22] = 2048;
        double v37 = -v9;
        _os_log_impl(&dword_225DC6000, v11, OS_LOG_TYPE_ERROR, "%{public}@Not generating a memory exception report for %@ since another report was generated within last %f seconds.", buf, 0x20u);
      }
    }
    else
    {
      uint64_t v13 = [MEMORY[0x263EFF910] now];
      id v14 = (void *)HMIReportMemoryException_lastReportMemoryExceptionDate;
      HMIReportMemoryException_lastReportMemoryExceptionDate = v13;

      unint64_t v15 = (ipc_space_t *)MEMORY[0x263EF8960];
      task_read_t v16 = *MEMORY[0x263EF8960];
      mach_port_t corpse_task_port = 0;
      if (task_generate_corpse(v16, &corpse_task_port))
      {
        uint64_t v17 = (void *)MEMORY[0x22A641C70]();
        uint64_t v18 = HMFGetOSLogHandle();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          id v19 = HMFGetLogIdentifier();
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v19;
          _os_log_impl(&dword_225DC6000, v18, OS_LOG_TYPE_INFO, "%{public}@Failed to generate a corpse task for memory exception reporting", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v20 = corpse_task_port;
        uint64_t v21 = [MEMORY[0x263F42618] processInfo];
        char v22 = [v21 executableURL];
        id v23 = [v22 path];
        uint64_t v24 = [v23 UTF8String];
        long long v25 = dispatch_get_global_queue(-32768, 0);
        v29[0] = MEMORY[0x263EF8330];
        v29[1] = 3221225472;
        v29[2] = __HMIReportMemoryException_block_invoke;
        v29[3] = &unk_26477B940;
        id v30 = v3;
        id v26 = v25;
        v27 = v29;
        uint64_t v32 = 0;
        v33 = &v32;
        uint64_t v34 = 0x2020000000;
        v28 = (void (*)(uint64_t, uint64_t, uint64_t, id, void *))getReportMemoryExceptionFromTaskSymbolLoc_ptr;
        v35 = getReportMemoryExceptionFromTaskSymbolLoc_ptr;
        if (!getReportMemoryExceptionFromTaskSymbolLoc_ptr)
        {
          *(void *)buf = MEMORY[0x263EF8330];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = __getReportMemoryExceptionFromTaskSymbolLoc_block_invoke;
          double v37 = COERCE_DOUBLE(&unk_26477B968);
          v38 = &v32;
          __getReportMemoryExceptionFromTaskSymbolLoc_block_invoke((uint64_t)buf);
          v28 = (void (*)(uint64_t, uint64_t, uint64_t, id, void *))v33[3];
        }
        _Block_object_dispose(&v32, 8);
        if (!v28) {
          HMISimulateCrash_cold_1();
        }
        v28(v20, 1, v24, v26, v27);

        mach_port_deallocate(*v15, corpse_task_port);
      }
    }
  }
}

void sub_225DD0658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __HMIReportMemoryException_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = (void *)MEMORY[0x22A641C70]();
  uint64_t v5 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = HMFGetLogIdentifier();
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138543874;
    double v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl(&dword_225DC6000, v5, OS_LOG_TYPE_INFO, "%{public}@Memory exception reporting for %@ completed with error: %@", (uint8_t *)&v8, 0x20u);
  }
}

void *__getSimulateCrashSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!CrashReporterSupportLibraryCore_frameworkLibrary)
  {
    v5[1] = MEMORY[0x263EF8330];
    v5[2] = 3221225472;
    v5[3] = __CrashReporterSupportLibraryCore_block_invoke;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_26477B988;
    uint64_t v7 = 0;
    CrashReporterSupportLibraryCore_frameworkLibrary = _sl_dlopen();
    id v3 = (void *)v5[0];
    id v2 = (void *)CrashReporterSupportLibraryCore_frameworkLibrary;
    if (CrashReporterSupportLibraryCore_frameworkLibrary)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      id v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  id v2 = (void *)CrashReporterSupportLibraryCore_frameworkLibrary;
LABEL_5:
  result = dlsym(v2, "SimulateCrash");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSimulateCrashSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CrashReporterSupportLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CrashReporterSupportLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getReportMemoryExceptionFromTaskSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  uint64_t v8 = 0;
  double v9 = &v8;
  uint64_t v10 = 0x2020000000;
  id v2 = (void *)libMemoryResourceExceptionLibraryCore_frameworkLibrary;
  uint64_t v11 = libMemoryResourceExceptionLibraryCore_frameworkLibrary;
  if (!libMemoryResourceExceptionLibraryCore_frameworkLibrary)
  {
    v5[1] = (void *)MEMORY[0x263EF8330];
    v5[2] = (void *)3221225472;
    v5[3] = __libMemoryResourceExceptionLibraryCore_block_invoke;
    v5[4] = &unk_26477B9E0;
    long long v6 = &v8;
    uint64_t v7 = v5;
    long long v12 = xmmword_26477B9C0;
    uint64_t v13 = 0;
    v9[3] = _sl_dlopen();
    libMemoryResourceExceptionLibraryCore_frameworkLibrary = *(void *)(v6[1] + 24);
    id v2 = (void *)v9[3];
  }
  _Block_object_dispose(&v8, 8);
  id v3 = v5[0];
  if (!v2)
  {
    id v3 = (void *)abort_report_np();
    __break(1u);
    goto LABEL_7;
  }
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "ReportMemoryExceptionFromTask");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getReportMemoryExceptionFromTaskSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_225DD0AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __libMemoryResourceExceptionLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  libMemoryResourceExceptionLibraryCore_frameworkLibrary = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_225DD1A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225DD1FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225DD3028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225DD321C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225DD3894(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225DD4188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225DD4BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225DD4FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HMIPixelBufferTransferOptionsAsString()
{
  return NSPrintF();
}

BOOL HMILessThanOrEqualWithAccuracy(float a1, float a2, float a3)
{
  if (a1 < a2) {
    return 1;
  }
  float v4 = a1 - a2;
  if (v4 < 0.0) {
    float v4 = -v4;
  }
  return v4 < a3;
}

BOOL HMIGreaterThanOrEqualWithAccuracy(float a1, float a2, float a3)
{
  if (a1 > a2) {
    return 1;
  }
  float v4 = a1 - a2;
  if (v4 < 0.0) {
    float v4 = -v4;
  }
  return v4 < a3;
}

void HMICGRectFlipCoordinateSpace(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  HMICGRectNormalizedFromPixel((unint64_t)a5, (unint64_t)a6, a1, a2, a3, a4);
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;
  long long v16 = *(_OWORD *)(MEMORY[0x263F000D0] + 16);
  *(_OWORD *)&v19.a = *MEMORY[0x263F000D0];
  *(_OWORD *)&v19.c = v16;
  *(_OWORD *)&v19.tx = *(_OWORD *)(MEMORY[0x263F000D0] + 32);
  *(_OWORD *)&v18.a = *(_OWORD *)&v19.a;
  *(_OWORD *)&v18.c = v16;
  *(_OWORD *)&v18.tx = *(_OWORD *)&v19.tx;
  CGAffineTransformScale(&v19, &v18, a5, a6);
  CGAffineTransform v17 = v19;
  CGAffineTransformTranslate(&v18, &v17, 0.0, 1.0);
  CGAffineTransform v19 = v18;
  CGAffineTransform v17 = v18;
  CGAffineTransformScale(&v18, &v17, 1.0, -1.0);
  CGAffineTransform v19 = v18;
  v20.origin.x = v9;
  v20.origin.y = v11;
  v20.size.width = v13;
  v20.size.height = v15;
  CGRectApplyAffineTransform(v20, &v18);
}

void HMICGRectFlipCoordinateSpaceNormalized(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  long long v8 = *(_OWORD *)(MEMORY[0x263F000D0] + 16);
  *(_OWORD *)&v11.a = *MEMORY[0x263F000D0];
  *(_OWORD *)&v11.c = v8;
  *(_OWORD *)&v11.tx = *(_OWORD *)(MEMORY[0x263F000D0] + 32);
  *(_OWORD *)&v10.a = *(_OWORD *)&v11.a;
  *(_OWORD *)&v10.c = v8;
  *(_OWORD *)&v10.tx = *(_OWORD *)&v11.tx;
  CGAffineTransformTranslate(&v11, &v10, 0.0, 1.0);
  CGAffineTransform v9 = v11;
  CGAffineTransformScale(&v10, &v9, 1.0, -1.0);
  CGAffineTransform v11 = v10;
  v12.origin.x = a1;
  v12.origin.y = a2;
  v12.size.width = a3;
  v12.size.height = a4;
  CGRectApplyAffineTransform(v12, &v10);
}

CGFloat HMITransformBoundingBoxCoordinatesFromImageSpaceToRoISpace(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  v21.origin.x = 0.0;
  v21.origin.y = 0.0;
  v21.size.width = 1.0;
  v21.size.height = 1.0;
  if (!CGRectEqualToRect(v21, *(CGRect *)&a5))
  {
    v22.origin.x = a1;
    v22.origin.y = a2;
    v22.size.width = a3;
    v22.size.height = a4;
    CGFloat v19 = a4;
    double MinX = CGRectGetMinX(v22);
    v23.origin.x = a5;
    v23.origin.y = a6;
    v23.size.width = a7;
    v23.size.height = a8;
    double v17 = MinX - CGRectGetMinX(v23);
    v24.origin.x = a5;
    v24.origin.y = a6;
    v24.size.width = a7;
    v24.size.height = a8;
    double v20 = v17 / CGRectGetWidth(v24);
    v25.origin.x = a1;
    v25.origin.y = a2;
    v25.size.width = a3;
    v25.size.height = v19;
    CGRectGetMinY(v25);
    v26.origin.x = a5;
    v26.origin.y = a6;
    v26.size.width = a7;
    v26.size.height = a8;
    CGRectGetMinY(v26);
    v27.origin.x = a5;
    v27.origin.y = a6;
    v27.size.width = a7;
    v27.size.height = a8;
    CGRectGetHeight(v27);
    v28.origin.x = a1;
    v28.origin.y = a2;
    v28.size.width = a3;
    v28.size.height = v19;
    CGRectGetMaxX(v28);
    v29.origin.x = a5;
    v29.origin.y = a6;
    v29.size.width = a7;
    v29.size.height = a8;
    CGRectGetMinX(v29);
    v30.origin.x = a5;
    v30.origin.y = a6;
    v30.size.width = a7;
    v30.size.height = a8;
    CGRectGetWidth(v30);
    v31.origin.x = a1;
    v31.origin.y = a2;
    v31.size.width = a3;
    v31.size.height = v19;
    CGRectGetMaxY(v31);
    v32.origin.x = a5;
    v32.origin.y = a6;
    v32.size.width = a7;
    v32.size.height = a8;
    CGRectGetMinY(v32);
    v33.origin.x = a5;
    v33.origin.y = a6;
    v33.size.width = a7;
    v33.size.height = a8;
    CGRectGetHeight(v33);
    return v20;
  }
  return a1;
}

double HMIConvertBoundingBoxCoordinatesFromImageSpaceToRoISpace(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGFloat v8 = HMITransformBoundingBoxCoordinatesFromImageSpaceToRoISpace(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  double v14 = 1.0;
  double v15 = 1.0;
  *(void *)&double result = (unint64_t)CGRectIntersection(*(CGRect *)&v8, *(CGRect *)&v12);
  return result;
}

double HMICGRectSquare(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double Width = CGRectGetWidth(*(CGRect *)&a1);
  v19.origin.x = a1;
  v19.origin.y = a2;
  v19.size.width = a3;
  v19.size.height = a4;
  CGFloat Height = CGRectGetHeight(v19);
  double v10 = (Width + Height) * 0.5;
  double v11 = (Width - v10) * 0.5;
  double v12 = (Height - v10) * 0.5;
  CGFloat v13 = a1;
  CGFloat v14 = a2;
  CGFloat v15 = a3;
  CGFloat v16 = a4;
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&v13, v11, v12);
  return result;
}

void HMICGRectSquareNormalized(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGAffineTransformMakeScale(&v20, a5, a6);
  v21.origin.x = a1;
  v21.origin.y = a2;
  v21.size.width = a3;
  v21.size.height = a4;
  CGRect v22 = CGRectApplyAffineTransform(v21, &v20);
  double v12 = HMICGRectSquare(v22.origin.x, v22.origin.y, v22.size.width, v22.size.height);
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGAffineTransformMakeScale(&v19, 1.0 / a5, 1.0 / a6);
  v23.origin.x = v12;
  v23.origin.y = v14;
  v23.size.width = v16;
  v23.size.height = v18;
  CGRectApplyAffineTransform(v23, &v19);
}

double HMICGRectScaleAroundCenter(double a1, CGFloat a2, CGFloat a3, CGFloat a4, float a5)
{
  double v9 = a1;
  double Width = CGRectGetWidth(*(CGRect *)&a1);
  v17.origin.CGFloat x = v9;
  v17.origin.CGFloat y = a2;
  v17.size.width = a3;
  v17.size.CGFloat height = a4;
  CGFloat v11 = CGRectGetHeight(v17) * a5;
  v18.origin.CGFloat x = v9;
  v18.origin.CGFloat y = a2;
  v18.size.width = a3;
  v18.size.CGFloat height = a4;
  CGRect v19 = CGRectInset(v18, Width * a5, v11);
  CGFloat x = v19.origin.x;
  CGFloat y = v19.origin.y;
  CGFloat v14 = v19.size.width;
  CGFloat height = v19.size.height;
  if (CGRectGetWidth(v19) != 0.0)
  {
    v20.origin.CGFloat x = x;
    v20.origin.CGFloat y = y;
    v20.size.width = v14;
    v20.size.CGFloat height = height;
    if (CGRectGetHeight(v20) != 0.0)
    {
      v21.origin.CGFloat x = x;
      v21.origin.CGFloat y = y;
      v21.size.width = v14;
      v21.size.CGFloat height = height;
      if (!CGRectIsInfinite(v21)) {
        return x;
      }
    }
  }
  return v9;
}

double HMICGRectDivideAlongHeight(double a1, CGFloat a2, CGFloat a3, CGFloat a4, float a5)
{
  double v9 = a1;
  if (!CGRectIsInfinite(*(CGRect *)&a1))
  {
    v14.origin.CGFloat x = v9;
    v14.origin.CGFloat y = a2;
    v14.size.width = a3;
    v14.size.CGFloat height = a4;
    if (!CGRectIsNull(v14))
    {
      v15.origin.CGFloat x = v9;
      v15.origin.CGFloat y = a2;
      v15.size.width = a3;
      v15.size.CGFloat height = a4;
      if (!CGRectIsEmpty(v15))
      {
        memset(&slice, 0, sizeof(slice));
        memset(&v12, 0, sizeof(v12));
        v16.origin.CGFloat x = v9;
        v16.origin.CGFloat y = a2;
        v16.size.width = a3;
        v16.size.CGFloat height = a4;
        CGFloat v10 = CGRectGetHeight(v16) * a5;
        v17.origin.CGFloat x = v9;
        v17.origin.CGFloat y = a2;
        v17.size.width = a3;
        v17.size.CGFloat height = a4;
        CGRectDivide(v17, &slice, &v12, v10, CGRectMinYEdge);
        return slice.origin.x;
      }
    }
  }
  return v9;
}

uint64_t HMILineSgementsIntersect(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a1 >= a3) {
    double v8 = a3;
  }
  else {
    double v8 = a1;
  }
  if (a1 <= a3) {
    double v9 = a3;
  }
  else {
    double v9 = a1;
  }
  if (a2 >= a4) {
    double v10 = a4;
  }
  else {
    double v10 = a2;
  }
  if (a2 <= a4) {
    double v11 = a4;
  }
  else {
    double v11 = a2;
  }
  if (a5 >= a7) {
    double v12 = a7;
  }
  else {
    double v12 = a5;
  }
  if (a5 <= a7) {
    double v13 = a7;
  }
  else {
    double v13 = a5;
  }
  if (a6 >= a8) {
    double v14 = a8;
  }
  else {
    double v14 = a6;
  }
  if (a6 <= a8) {
    double v15 = a8;
  }
  else {
    double v15 = a6;
  }
  double v16 = a1 - a3;
  float v17 = 0.0;
  if (v16 == 0.0)
  {
    float v18 = INFINITY;
    float v19 = 0.0;
  }
  else
  {
    float v18 = (a2 - a4) / v16;
    float v19 = a2 - v18 * a1;
  }
  if (a5 - a7 == 0.0)
  {
    float v20 = INFINITY;
  }
  else
  {
    float v20 = (a6 - a8) / (a5 - a7);
    float v17 = a6 - v20 * a5;
  }
  if (v18 == v20 || v18 == INFINITY && v20 == INFINITY) {
    return 0;
  }
  float v22 = v8;
  float v23 = v9;
  float v24 = v12;
  if (v18 == INFINITY)
  {
    float v25 = v17 + (float)(v20 * v22);
    float v26 = v8;
  }
  else if (v20 == INFINITY)
  {
    float v25 = v19 + (float)(v18 * v24);
    float v26 = v12;
  }
  else
  {
    float v26 = (float)(v19 - v17) / (float)(v20 - v18);
    float v25 = v19 + (float)(v18 * v26);
  }
  float v27 = v13;
  if (v26 < v23) {
    goto LABEL_44;
  }
  float v28 = v26 - v23;
  float v29 = -(float)(v26 - v23);
  if (v28 < 0.0) {
    float v28 = v29;
  }
  if (v28 >= 0.0001)
  {
    BOOL v30 = 0;
  }
  else
  {
LABEL_44:
    if (v26 <= v22)
    {
      float v31 = v26 - v22;
      float v32 = -(float)(v26 - v22);
      if (v31 < 0.0) {
        float v31 = v32;
      }
      BOOL v30 = v31 < 0.0001;
    }
    else
    {
      BOOL v30 = 1;
    }
  }
  float v33 = v11;
  if (v26 < v27) {
    goto LABEL_54;
  }
  float v34 = v26 - v27;
  float v35 = -(float)(v26 - v27);
  if (v34 < 0.0) {
    float v34 = v35;
  }
  if (v34 >= 0.0001)
  {
    BOOL v36 = 0;
  }
  else
  {
LABEL_54:
    if (v26 <= v24)
    {
      float v37 = v26 - v24;
      if (v37 < 0.0) {
        float v37 = -v37;
      }
      BOOL v36 = v37 < 0.0001;
    }
    else
    {
      BOOL v36 = 1;
    }
  }
  float v38 = v15;
  int v39 = v36 && v30;
  if (v25 < v33) {
    goto LABEL_64;
  }
  float v40 = v25 - v33;
  if (v40 < 0.0) {
    float v40 = -v40;
  }
  if (v40 >= 0.0001)
  {
    BOOL v42 = 0;
  }
  else
  {
LABEL_64:
    float v41 = v10;
    if (v25 <= v41)
    {
      float v43 = v25 - v41;
      if (v43 < 0.0) {
        float v43 = -v43;
      }
      BOOL v42 = v43 < 0.0001;
    }
    else
    {
      BOOL v42 = 1;
    }
  }
  int v44 = v39 & v42;
  if (v25 < v38) {
    goto LABEL_74;
  }
  float v45 = v25 - v38;
  if (v45 < 0.0) {
    float v45 = -v45;
  }
  if (v45 >= 0.0001)
  {
    BOOL v47 = 0;
  }
  else
  {
LABEL_74:
    float v46 = v14;
    if (v25 <= v46)
    {
      float v48 = v25 - v46;
      if (v48 < 0.0) {
        float v48 = -v48;
      }
      BOOL v47 = v48 < 0.0001;
    }
    else
    {
      BOOL v47 = 1;
    }
  }
  return v44 & v47;
}

BOOL HMICGRectIntersectsPolygon(void *a1, double a2, double a3, CGFloat a4, CGFloat a5)
{
  id v9 = a1;
  uint64_t v10 = [v9 count];
  CGFloat v30 = a4;
  CGFloat v31 = a5;
  double v11 = a2 + a4;
  double v12 = a3 + a5;
  uint64_t v13 = 1;
  while (v10 != v13)
  {
    double v14 = [v9 objectAtIndexedSubscript:v13 - 1];
    [v14 point];
    double v16 = v15;
    double v18 = v17;

    float v19 = [v9 objectAtIndexedSubscript:v13];
    [v19 point];
    double v21 = v20;
    double v23 = v22;

    if ((HMILineSgementsIntersect(v16, v18, v21, v23, a2, a3, v11, a3) & 1) == 0
      && (HMILineSgementsIntersect(v16, v18, v21, v23, v11, a3, v11, v12) & 1) == 0
      && (HMILineSgementsIntersect(v16, v18, v21, v23, v11, v12, a2, v12) & 1) == 0)
    {
      ++v13;
      if ((HMILineSgementsIntersect(v16, v18, v21, v23, a2, v12, a2, a3) & 1) == 0) {
        continue;
      }
    }
    BOOL v24 = 1;
    goto LABEL_12;
  }
  v34.origin.CGFloat x = a2;
  v34.origin.CGFloat y = a3;
  v34.size.width = v30;
  v34.size.CGFloat height = v31;
  float v25 = CGPathCreateWithRect(v34, 0);
  float v26 = [v9 objectAtIndexedSubscript:0];
  [v26 point];
  BOOL v27 = CGPathContainsPoint(v25, 0, v32, 0);

  if (v27)
  {
    BOOL v24 = 1;
  }
  else
  {
    float v28 = HMICreatePathFromPoints(v9);
    v33.CGFloat x = a2;
    v33.CGFloat y = a3;
    BOOL v24 = CGPathContainsPoint(v28, 0, v33, 0);
    CGPathRelease(v28);
  }
  CGPathRelease(v25);
LABEL_12:

  return v24;
}

CGPath *HMICreatePathFromPoints(void *a1)
{
  id v1 = a1;
  if ((unint64_t)[v1 count] >= 3)
  {
    Mutable = CGPathCreateMutable();
    id v3 = [v1 objectAtIndexedSubscript:0];
    [v3 x];
    CGFloat v5 = v4;
    long long v6 = [v1 objectAtIndexedSubscript:0];
    [v6 y];
    CGPathMoveToPoint(Mutable, 0, v5, v7);

    if ((unint64_t)[v1 count] >= 2)
    {
      unint64_t v8 = 1;
      do
      {
        id v9 = [v1 objectAtIndexedSubscript:v8];
        [v9 x];
        CGFloat v11 = v10;
        double v12 = [v1 objectAtIndexedSubscript:v8];
        [v12 y];
        CGPathAddLineToPoint(Mutable, 0, v11, v13);

        ++v8;
      }
      while ([v1 count] > v8);
    }
  }
  else
  {
    Mutable = 0;
  }

  return Mutable;
}

BOOL HMICGRectIntersectionOverUnion(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  CGRect v9 = CGRectIntersection(*(CGRect *)&a1, *(CGRect *)&a5);
  return CGRectIsNull(v9);
}

BOOL HMICGRectIntersectionOverMinArea(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  CGRect v9 = CGRectIntersection(*(CGRect *)&a1, *(CGRect *)&a5);
  return CGRectIsNull(v9);
}

BOOL HMICGRectIntersectionOverArea(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  CGRect v9 = CGRectIntersection(*(CGRect *)&a1, *(CGRect *)&a5);
  return CGRectIsNull(v9);
}

float HMICGRectGeneralizedIntersectionOverUnion(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGRect v26 = CGRectUnion(*(CGRect *)&a1, *(CGRect *)&a5);
  double height = v26.size.height;
  double width = v26.size.width;
  v26.origin.CGFloat x = a1;
  v26.origin.CGFloat y = a2;
  v26.size.double width = a3;
  v26.size.double height = a4;
  v30.origin.CGFloat x = a5;
  v30.origin.CGFloat y = a6;
  v30.size.double width = a7;
  v30.size.double height = a8;
  CGRect v27 = CGRectIntersection(v26, v30);
  CGFloat y = v27.origin.y;
  CGFloat x = v27.origin.x;
  double v22 = v27.size.height;
  double v23 = v27.size.width;
  v27.origin.CGFloat x = a1;
  v27.origin.CGFloat y = a2;
  v27.size.double width = a3;
  v27.size.double height = a4;
  float v16 = -1.0;
  if (!CGRectIsNull(v27))
  {
    v28.origin.CGFloat x = a5;
    v28.origin.CGFloat y = a6;
    v28.size.double width = a7;
    v28.size.double height = a8;
    if (!CGRectIsNull(v28))
    {
      v29.origin.CGFloat y = y;
      v29.origin.CGFloat x = x;
      v29.size.double width = v23;
      v29.size.double height = v22;
      BOOL IsNull = CGRectIsNull(v29);
      double v18 = v23 * v22;
      if (IsNull) {
        double v18 = 0.0;
      }
      return v18 / (a7 * a8 + a3 * a4 - v18 + 0.000000001)
           - (width * height - (a7 * a8 + a3 * a4 - v18)) / (width * height + 0.000000001);
    }
  }
  return v16;
}

double HMICGPointClampWithSize(double a1, double a2, double a3)
{
  if (a1 >= a3) {
    a1 = a3;
  }
  return fmax(a1, 0.0);
}

BOOL HMICGRectIntersectionOverUnionWithRespectToROI(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, double a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  *(double *)&v29[16] = a7;
  *(double *)&v29[24] = a8;
  *(double *)CGRect v29 = a5;
  *(double *)&v29[8] = a6;
  v31.origin.double x = a9;
  v31.origin.double y = a10;
  v31.size.double width = a11;
  v31.size.double height = a12;
  BOOL result = CGRectIsEmpty(v31);
  if (!result)
  {
    v32.origin.double x = a9;
    v32.origin.double y = a10;
    v32.size.double width = a11;
    v32.size.double height = a12;
    BOOL result = CGRectIsNull(v32);
    if (!result)
    {
      v33.origin.double x = a1;
      v33.origin.double y = a2;
      v33.size.double width = a3;
      v33.size.double height = a4;
      v36.origin.double x = a9;
      v36.origin.double y = a10;
      v36.size.double width = a11;
      v36.size.double height = a12;
      CGRect v34 = CGRectIntersection(v33, v36);
      double x = v34.origin.x;
      double y = v34.origin.y;
      double width = v34.size.width;
      double height = v34.size.height;
      v37.origin.double x = a9;
      v37.origin.double y = a10;
      v37.size.double width = a11;
      v37.size.double height = a12;
      CGRect v35 = CGRectIntersection(*(CGRect *)v29, v37);
      return HMICGRectIntersectionOverUnion(x, y, width, height, v35.origin.x, v35.origin.y, v35.size.width, v35.size.height);
    }
  }
  return result;
}

BOOL HMICGRectIntersectionOverMinAreaWithRespectToROI(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, double a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  *(double *)&v29[16] = a7;
  *(double *)&v29[24] = a8;
  *(double *)CGRect v29 = a5;
  *(double *)&v29[8] = a6;
  v31.origin.double x = a9;
  v31.origin.double y = a10;
  v31.size.double width = a11;
  v31.size.double height = a12;
  BOOL result = CGRectIsEmpty(v31);
  if (!result)
  {
    v32.origin.double x = a9;
    v32.origin.double y = a10;
    v32.size.double width = a11;
    v32.size.double height = a12;
    BOOL result = CGRectIsNull(v32);
    if (!result)
    {
      v33.origin.double x = a1;
      v33.origin.double y = a2;
      v33.size.double width = a3;
      v33.size.double height = a4;
      v36.origin.double x = a9;
      v36.origin.double y = a10;
      v36.size.double width = a11;
      v36.size.double height = a12;
      CGRect v34 = CGRectIntersection(v33, v36);
      double x = v34.origin.x;
      double y = v34.origin.y;
      double width = v34.size.width;
      double height = v34.size.height;
      v37.origin.double x = a9;
      v37.origin.double y = a10;
      v37.size.double width = a11;
      v37.size.double height = a12;
      CGRect v35 = CGRectIntersection(*(CGRect *)v29, v37);
      return HMICGRectIntersectionOverMinArea(x, y, width, height, v35.origin.x, v35.origin.y, v35.size.width, v35.size.height);
    }
  }
  return result;
}

float HMICGRectMinElementwiseDistance(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  float v15 = 0.0;
  if (!CGRectIsNull(*(CGRect *)&a1))
  {
    CGFloat rect = a5;
    v41.origin.double x = a5;
    CGFloat v16 = a6;
    v41.origin.double y = a6;
    CGFloat v17 = a7;
    v41.size.double width = a7;
    v41.size.double height = a8;
    if (!CGRectIsNull(v41))
    {
      v42.origin.double x = a1;
      v42.origin.double y = a2;
      v42.size.double width = a3;
      v42.size.double height = a4;
      if (!CGRectIsEmpty(v42))
      {
        v43.origin.double x = rect;
        v43.origin.double y = v16;
        v43.size.double width = a7;
        v43.size.double height = a8;
        if (!CGRectIsEmpty(v43))
        {
          v44.origin.double x = a1;
          v44.origin.double y = a2;
          v44.size.double width = a3;
          CGFloat v18 = v16;
          v44.size.double height = a4;
          double MinX = CGRectGetMinX(v44);
          v45.origin.double x = rect;
          v45.origin.double y = v16;
          v45.size.double width = v17;
          v45.size.double height = a8;
          double v36 = vabdd_f64(MinX, CGRectGetMinX(v45));
          v46.origin.double x = a1;
          v46.origin.double y = a2;
          CGFloat v38 = a3;
          v46.size.double width = a3;
          CGFloat v19 = a4;
          v46.size.double height = a4;
          double MinY = CGRectGetMinY(v46);
          v47.origin.double x = rect;
          v47.origin.double y = v18;
          v47.size.double width = v17;
          v47.size.double height = a8;
          if (v36 >= vabdd_f64(MinY, CGRectGetMinY(v47)))
          {
            v50.origin.double x = a1;
            CGFloat v22 = a2;
            CGFloat v21 = v38;
            v50.origin.double y = a2;
            v50.size.double width = v38;
            v50.size.double height = v19;
            double v23 = CGRectGetMinY(v50);
            v51.origin.double x = rect;
            v51.origin.double y = v18;
            v51.size.double width = v17;
            v51.size.double height = a8;
            double v24 = CGRectGetMinY(v51);
          }
          else
          {
            v48.origin.double x = a1;
            CGFloat v22 = a2;
            CGFloat v21 = v38;
            v48.origin.double y = a2;
            v48.size.double width = v38;
            v48.size.double height = v19;
            double v23 = CGRectGetMinX(v48);
            v49.origin.double x = rect;
            v49.origin.double y = v18;
            v49.size.double width = v17;
            v49.size.double height = a8;
            double v24 = CGRectGetMinX(v49);
          }
          float v25 = v23 - v24;
          float v34 = fabsf(v25);
          v52.origin.double x = a1;
          v52.origin.double y = v22;
          v52.size.double width = v21;
          v52.size.double height = v19;
          double MaxX = CGRectGetMaxX(v52);
          v53.origin.double x = rect;
          v53.origin.double y = v18;
          v53.size.double width = v17;
          v53.size.double height = a8;
          double v33 = vabdd_f64(MaxX, CGRectGetMaxX(v53));
          v54.origin.double x = a1;
          v54.origin.double y = v22;
          v54.size.double width = v21;
          CGFloat v26 = v19;
          v54.size.double height = v19;
          double MaxY = CGRectGetMaxY(v54);
          v55.origin.double x = rect;
          v55.origin.double y = v18;
          v55.size.double width = v17;
          v55.size.double height = a8;
          if (v33 >= vabdd_f64(MaxY, CGRectGetMaxY(v55)))
          {
            v58.origin.double x = a1;
            v58.origin.double y = a2;
            v58.size.double width = v38;
            v58.size.double height = v26;
            double v28 = CGRectGetMaxY(v58);
            v59.size.double height = a8;
            v59.origin.double x = rect;
            v59.origin.double y = v18;
            v59.size.double width = v17;
            double v29 = CGRectGetMaxY(v59);
          }
          else
          {
            v56.origin.double x = a1;
            v56.origin.double y = a2;
            v56.size.double width = v38;
            v56.size.double height = v26;
            double v28 = CGRectGetMaxX(v56);
            v57.size.double height = a8;
            v57.origin.double x = rect;
            v57.origin.double y = v18;
            v57.size.double width = v17;
            double v29 = CGRectGetMaxX(v57);
          }
          float v30 = v28 - v29;
          float v31 = fabsf(v30);
          if (v34 >= v31) {
            return v31;
          }
          else {
            return v34;
          }
        }
      }
    }
  }
  return v15;
}

float HMICGRectMaxElementwiseDistance(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  float v15 = 0.0;
  if (!CGRectIsNull(*(CGRect *)&a1))
  {
    CGFloat v42 = a4;
    CGFloat v16 = a5;
    v44.origin.double x = a5;
    CGFloat v17 = a6;
    v44.origin.double y = a6;
    CGFloat v18 = a7;
    v44.size.double width = a7;
    v44.size.double height = a8;
    if (!CGRectIsNull(v44))
    {
      v45.size.double height = v42;
      v45.origin.double x = a1;
      v45.origin.double y = a2;
      v45.size.double width = a3;
      if (!CGRectIsEmpty(v45))
      {
        v46.origin.double x = v16;
        v46.origin.double y = v17;
        v46.size.double width = a7;
        v46.size.double height = a8;
        if (!CGRectIsEmpty(v46))
        {
          v47.origin.double x = a1;
          v47.origin.double y = a2;
          v47.size.double width = a3;
          v47.size.double height = v42;
          double MinX = CGRectGetMinX(v47);
          v48.origin.double x = v16;
          v48.origin.double y = v17;
          v48.size.double width = a7;
          v48.size.double height = a8;
          double v19 = MinX - CGRectGetMinX(v48);
          if (v19 < 0.0) {
            double v19 = -v19;
          }
          double v38 = v19;
          CGFloat v41 = a3;
          v49.origin.double x = a1;
          v49.origin.double y = a2;
          v49.size.double width = a3;
          v49.size.double height = v42;
          double MaxX = CGRectGetMaxX(v49);
          v50.origin.double x = v16;
          v50.origin.double y = v17;
          v50.size.double width = a7;
          v50.size.double height = a8;
          double v21 = MaxX - CGRectGetMaxX(v50);
          if (v21 < 0.0) {
            double v21 = -v21;
          }
          CGFloat v22 = v17;
          if (v38 <= v21)
          {
            v53.origin.double x = a1;
            v53.size.double width = a3;
            CGFloat v23 = a2;
            v53.origin.double y = a2;
            v53.size.double height = v42;
            double v24 = CGRectGetMaxX(v53);
            v54.origin.double x = v16;
            v54.origin.double y = v17;
            v54.size.double width = v18;
            v54.size.double height = a8;
            double v25 = CGRectGetMaxX(v54);
          }
          else
          {
            v51.origin.double x = a1;
            v51.size.double width = a3;
            CGFloat v23 = a2;
            v51.origin.double y = a2;
            v51.size.double height = v42;
            double v24 = CGRectGetMinX(v51);
            v52.origin.double x = v16;
            v52.origin.double y = v17;
            v52.size.double width = v18;
            v52.size.double height = a8;
            double v25 = CGRectGetMinX(v52);
          }
          double v26 = v24 - v25;
          if (v26 < 0.0) {
            double v26 = -v26;
          }
          float v27 = v26;
          float v37 = v27;
          v55.origin.double x = a1;
          v55.origin.double y = v23;
          v55.size.double width = v41;
          v55.size.double height = v42;
          double MinY = CGRectGetMinY(v55);
          v56.origin.double x = v16;
          v56.origin.double y = v17;
          v56.size.double width = v18;
          v56.size.double height = a8;
          double v28 = MinY - CGRectGetMinY(v56);
          if (v28 < 0.0) {
            double v28 = -v28;
          }
          double v36 = v28;
          v57.origin.double x = a1;
          v57.origin.double y = v23;
          v57.size.double width = v41;
          v57.size.double height = v42;
          double MaxY = CGRectGetMaxY(v57);
          v58.origin.double x = v16;
          v58.origin.double y = v22;
          v58.size.double width = v18;
          v58.size.double height = a8;
          double v30 = MaxY - CGRectGetMaxY(v58);
          if (v30 < 0.0) {
            double v30 = -v30;
          }
          if (v36 <= v30)
          {
            v61.origin.double x = a1;
            v61.origin.double y = a2;
            v61.size.double width = v41;
            v61.size.double height = v42;
            double v31 = CGRectGetMaxY(v61);
            v62.origin.double x = v16;
            v62.origin.double y = v22;
            v62.size.double width = v18;
            v62.size.double height = a8;
            double v32 = CGRectGetMaxY(v62);
          }
          else
          {
            v59.origin.double x = a1;
            v59.origin.double y = a2;
            v59.size.double width = v41;
            v59.size.double height = v42;
            double v31 = CGRectGetMinY(v59);
            v60.origin.double x = v16;
            v60.origin.double y = v22;
            v60.size.double width = v18;
            v60.size.double height = a8;
            double v32 = CGRectGetMinY(v60);
          }
          double v33 = v31 - v32;
          if (v33 < 0.0) {
            double v33 = -v33;
          }
          float v34 = v33;
          if (v37 <= v34) {
            return v34;
          }
          else {
            return v37;
          }
        }
      }
    }
  }
  return v15;
}

float HMICGRectMaxParallelEdgeDistance(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9, double a10)
{
  float v25 = 0.0;
  if (!CGRectIsNull(*(CGRect *)&a1))
  {
    CGFloat rect = a4;
    CGFloat v26 = a5;
    v53.origin.double x = a5;
    CGFloat v27 = a6;
    v53.origin.double y = a6;
    CGFloat v28 = a7;
    v53.size.double width = a7;
    CGFloat v29 = a8;
    v53.size.double height = a8;
    if (!CGRectIsNull(v53))
    {
      v54.origin.double x = a1;
      v54.origin.double y = a2;
      v54.size.double width = a3;
      v54.size.double height = rect;
      if (!CGRectIsEmpty(v54))
      {
        v55.origin.double x = v26;
        v55.origin.double y = v27;
        CGFloat v30 = v28;
        v55.size.double width = v28;
        CGFloat v50 = v29;
        v55.size.double height = v29;
        if (!CGRectIsEmpty(v55))
        {
          v56.origin.double x = a1;
          v56.origin.double y = a2;
          CGFloat v31 = v26;
          v56.size.double width = a3;
          CGFloat v32 = v27;
          v56.size.double height = rect;
          double MinX = CGRectGetMinX(v56);
          v57.origin.double x = v26;
          v57.origin.double y = v27;
          v57.size.double width = v30;
          v57.size.double height = v50;
          double v48 = vabdd_f64(MinX, CGRectGetMinX(v57));
          v58.origin.double x = a1;
          v58.origin.double y = a2;
          CGFloat v33 = a3;
          v58.size.double width = a3;
          v58.size.double height = rect;
          double MaxX = CGRectGetMaxX(v58);
          v59.origin.double x = v31;
          v59.origin.double y = v27;
          v59.size.double width = v30;
          v59.size.double height = v50;
          if (v48 >= vabdd_f64(MaxX, CGRectGetMaxX(v59)))
          {
            v62.origin.double x = a1;
            CGFloat v35 = a2;
            v62.origin.double y = a2;
            v62.size.double width = v33;
            v62.size.double height = rect;
            double v36 = CGRectGetMaxX(v62);
            v63.origin.double x = v31;
            v63.origin.double y = v27;
            v63.size.double width = v30;
            v63.size.double height = v50;
            double v37 = CGRectGetMaxX(v63);
          }
          else
          {
            v60.origin.double x = a1;
            CGFloat v35 = a2;
            v60.origin.double y = a2;
            v60.size.double width = v33;
            v60.size.double height = rect;
            double v36 = CGRectGetMinX(v60);
            v61.origin.double x = v31;
            v61.origin.double y = v27;
            v61.size.double width = v30;
            v61.size.double height = v50;
            double v37 = CGRectGetMinX(v61);
          }
          float v38 = v36 - v37;
          float v46 = fabsf(v38);
          v64.origin.double x = a1;
          v64.origin.double y = v35;
          v64.size.double width = v33;
          v64.size.double height = rect;
          double MinY = CGRectGetMinY(v64);
          v65.origin.double x = v31;
          v65.origin.double y = v27;
          v65.size.double width = v30;
          v65.size.double height = v50;
          double v45 = vabdd_f64(MinY, CGRectGetMinY(v65));
          v66.origin.double x = a1;
          v66.origin.double y = v35;
          v66.size.double width = v33;
          v66.size.double height = rect;
          double MaxY = CGRectGetMaxY(v66);
          v67.origin.double x = v31;
          v67.origin.double y = v32;
          v67.size.double width = v30;
          v67.size.double height = v50;
          if (v45 >= vabdd_f64(MaxY, CGRectGetMaxY(v67)))
          {
            v70.origin.double x = a1;
            v70.origin.double y = a2;
            v70.size.double width = v33;
            v70.size.double height = rect;
            double v40 = CGRectGetMaxY(v70);
            v71.origin.double x = v31;
            v71.origin.double y = v32;
            v71.size.double width = v30;
            v71.size.double height = v50;
            double v41 = CGRectGetMaxY(v71);
          }
          else
          {
            v68.origin.double x = a1;
            v68.origin.double y = a2;
            v68.size.double width = v33;
            v68.size.double height = rect;
            double v40 = CGRectGetMinY(v68);
            v69.origin.double x = v31;
            v69.origin.double y = v32;
            v69.size.double width = v30;
            v69.size.double height = v50;
            double v41 = CGRectGetMinY(v69);
          }
          float v42 = v40 - v41;
          double v43 = a10 * fabsf(v42);
          if (a9 * v46 > v43) {
            return a9 * v46;
          }
          return v43;
        }
      }
    }
  }
  return v25;
}

float HMICGRectMaxParallelEdgeDistanceRatio(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  float v15 = 0.0;
  if (!CGRectIsNull(*(CGRect *)&a1))
  {
    CGFloat rect_8 = a2;
    double v16 = a5;
    v64.origin.double x = a5;
    double v17 = a6;
    v64.origin.double y = a6;
    CGFloat v18 = a7;
    v64.size.double width = a7;
    CGFloat v19 = a8;
    v64.size.double height = a8;
    if (!CGRectIsNull(v64))
    {
      v65.origin.double x = a1;
      v65.origin.double y = rect_8;
      v65.size.double width = a3;
      v65.size.double height = a4;
      if (!CGRectIsEmpty(v65))
      {
        v66.origin.double x = v16;
        v66.origin.double y = v17;
        CGFloat v20 = v18;
        v66.size.double width = v18;
        v66.size.double height = v19;
        if (!CGRectIsEmpty(v66))
        {
          v67.origin.double x = a1;
          v67.origin.double y = rect_8;
          v67.size.double width = a3;
          v67.size.double height = a4;
          double MinX = CGRectGetMinX(v67);
          v68.origin.double x = v16;
          v68.origin.double y = v17;
          v68.size.double width = v18;
          v68.size.double height = v19;
          double v59 = vabdd_f64(MinX, CGRectGetMinX(v68));
          v69.origin.double x = a1;
          v69.origin.double y = rect_8;
          v69.size.double width = a3;
          v69.size.double height = a4;
          double MaxX = CGRectGetMaxX(v69);
          v70.origin.double x = v16;
          v70.origin.double y = v17;
          v70.size.double width = v18;
          CGFloat v58 = v19;
          v70.size.double height = v19;
          BOOL v22 = v59 < vabdd_f64(MaxX, CGRectGetMaxX(v70));
          CGFloat v60 = v18;
          CGFloat v23 = a1;
          CGFloat v24 = rect_8;
          CGFloat v25 = a3;
          CGFloat v26 = a4;
          if (v22)
          {
            double v27 = CGRectGetMinX(*(CGRect *)&v23);
            v71.origin.double x = v16;
            v71.origin.double y = v17;
            v71.size.double height = v19;
            v71.size.double width = v18;
            double v28 = CGRectGetMinX(v71);
          }
          else
          {
            double v27 = CGRectGetMaxX(*(CGRect *)&v23);
            v72.origin.double x = v16;
            v72.origin.double y = v17;
            v72.size.double height = v19;
            v72.size.double width = v18;
            double v28 = CGRectGetMaxX(v72);
          }
          float v29 = v27 - v28;
          float v57 = fabsf(v29);
          v73.origin.double x = a1;
          v73.origin.double y = rect_8;
          v73.size.double width = a3;
          v73.size.double height = a4;
          double MinY = CGRectGetMinY(v73);
          v74.origin.double x = v16;
          v74.origin.double y = v17;
          v74.size.double width = v18;
          v74.size.double height = v19;
          double v55 = vabdd_f64(MinY, CGRectGetMinY(v74));
          v75.origin.double x = a1;
          v75.origin.double y = rect_8;
          v75.size.double width = a3;
          v75.size.double height = a4;
          double MaxY = CGRectGetMaxY(v75);
          v76.origin.double x = v16;
          v76.origin.double y = v17;
          v76.size.double width = v20;
          v76.size.double height = v19;
          if (v55 >= vabdd_f64(MaxY, CGRectGetMaxY(v76)))
          {
            v79.origin.double x = a1;
            CGFloat v31 = rect_8;
            v79.origin.double y = rect_8;
            v79.size.double width = a3;
            v79.size.double height = a4;
            double v32 = CGRectGetMaxY(v79);
            v80.origin.double x = v16;
            v80.origin.double y = v17;
            v80.size.double height = v58;
            v80.size.double width = v20;
            double v33 = CGRectGetMaxY(v80);
          }
          else
          {
            v77.origin.double x = a1;
            CGFloat v31 = rect_8;
            v77.origin.double y = rect_8;
            v77.size.double width = a3;
            v77.size.double height = a4;
            double v32 = CGRectGetMinY(v77);
            v78.origin.double x = v16;
            v78.origin.double y = v17;
            v78.size.double height = v58;
            v78.size.double width = v20;
            double v33 = CGRectGetMinY(v78);
          }
          float v34 = v32 - v33;
          float v56 = fabsf(v34);
          v81.origin.double x = a1;
          v81.origin.double y = v31;
          v81.size.double width = a3;
          v81.size.double height = a4;
          double Width = CGRectGetWidth(v81);
          v82.origin.double x = v16;
          v82.origin.double y = v17;
          v82.size.double width = v60;
          v82.size.double height = v58;
          CGFloat v35 = CGRectGetWidth(v82);
          BOOL v36 = Width <= v35;
          if (Width <= v35) {
            CGFloat v37 = v16;
          }
          else {
            CGFloat v37 = a1;
          }
          if (v36) {
            double v38 = v17;
          }
          else {
            double v38 = v31;
          }
          if (v36) {
            double v39 = v60;
          }
          else {
            double v39 = a3;
          }
          if (v36) {
            double v40 = v58;
          }
          else {
            double v40 = a4;
          }
          float v41 = CGRectGetWidth(*(CGRect *)&v37);
          float v53 = v41;
          v83.origin.double x = a1;
          v83.origin.double y = v31;
          v83.size.double width = a3;
          v83.size.double height = a4;
          double Height = CGRectGetHeight(v83);
          v84.origin.double x = v16;
          v84.origin.double y = v17;
          v84.size.double width = v60;
          v84.size.double height = v58;
          CGFloat v42 = CGRectGetHeight(v84);
          BOOL v43 = Height <= v42;
          if (Height <= v42) {
            CGFloat v44 = v16;
          }
          else {
            CGFloat v44 = a1;
          }
          if (v43) {
            double v45 = v17;
          }
          else {
            double v45 = v31;
          }
          if (v43) {
            double v46 = v60;
          }
          else {
            double v46 = a3;
          }
          if (v43) {
            double v47 = v58;
          }
          else {
            double v47 = a4;
          }
          float v48 = CGRectGetHeight(*(CGRect *)&v44);
          float v49 = v56 / v48;
          if ((float)(v57 / v53) <= v49) {
            return v49;
          }
          else {
            return v57 / v53;
          }
        }
      }
    }
  }
  return v15;
}

void sub_225DD7BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  __HMISignpostScopeLeave((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_225DD8060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  __HMISignpostScopeLeave((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t HMIAspectRatioMake(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

BOOL HMIAspectRatioIsValid(uint64_t a1)
{
  return (int)a1 > 0 && SHIDWORD(a1) > 0;
}

uint64_t HMIAspectRatioEqualToAspectRatio(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if ((int)a1 < 1 || SHIDWORD(a1) < 1) {
    return (int)a2 < 1 || SHIDWORD(a2) < 1;
  }
  BOOL v3 = SHIDWORD(a2) > 0 && (int)a1 * (uint64_t)SHIDWORD(a2) == (int)a2 * (uint64_t)SHIDWORD(a1);
  return (int)a2 >= 1 && v3;
}

uint64_t kHMIPairwiseMatchDescendingComparator_block_invoke(uint64_t a1, void *a2, void *a3)
{
  double v4 = NSNumber;
  id v5 = a2;
  [a3 score];
  long long v6 = objc_msgSend(v4, "numberWithFloat:");
  CGFloat v7 = NSNumber;
  [v5 score];
  int v9 = v8;

  LODWORD(v10) = v9;
  CGFloat v11 = [v7 numberWithFloat:v10];
  uint64_t v12 = [v6 compare:v11];

  return v12;
}

void sub_225DD93CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225DD96D8(_Unwind_Exception *exception_object)
{
}

uint64_t HMIGetMemoryState()
{
  unint64_t v1 = 0;
  if (!HMIGetMemoryStatistics(0, 0, (unint64_t)&v1, 0)) {
    return 1;
  }
  if (!(v1 >> 24)) {
    return 3;
  }
  if (v1 >> 25) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t HMIGetMemoryStatistics(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a1 | a2)
  {
    memset(v11, 0, 40);
    task_info_outCnt[0] = 10;
    if (task_info(*MEMORY[0x263EF8960], 0x12u, (task_info_t)v11, task_info_outCnt)) {
      return 0;
    }
    if (a1) {
      *(void *)a1 = *(void *)((char *)v11 + 4);
    }
    if (a2) {
      *(void *)a2 = *(void *)((char *)v11 + 12);
    }
  }
  if (a3 | a4)
  {
    *(void *)task_info_outCnt = 0;
    memset(v11, 0, 60);
    host_t v8 = MEMORY[0x22A641B40]();
    mach_msg_type_number_t host_info_outCnt = 15;
    host_page_size(v8, (vm_size_t *)task_info_outCnt);
    if (host_statistics(v8, 2, (host_info_t)v11, &host_info_outCnt)) {
      return 0;
    }
    uint64_t v10 = *(void *)task_info_outCnt;
    if (a3) {
      *(void *)a3 = *(void *)task_info_outCnt * LODWORD(v11[0]);
    }
    if (a4) {
      *(void *)a4 = v10 * LODWORD(v11[0]) + ((DWORD2(v11[0]) + DWORD1(v11[0]) + HIDWORD(v11[0])) * v10);
    }
  }
  return 1;
}

BOOL HMIGetMemoryFootprintForProcessID(int a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v8 = 0u;
  memset(v7, 0, sizeof(v7));
  int v5 = proc_pid_rusage(a1, 6, (rusage_info_t *)v7);
  if (!v5)
  {
    if (a2) {
      *a2 = *((void *)&v8 + 1);
    }
    if (a3) {
      *a3 = v19;
    }
  }
  return v5 == 0;
}

BOOL HMIGetMemoryFootprint(void *a1, void *a2)
{
  pid_t v4 = getpid();
  return HMIGetMemoryFootprintForProcessID(v4, a1, a2);
}

id HMIGetAllProcessIDs()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  v0 = [MEMORY[0x263EFF9A0] dictionary];
  unsigned int v1 = proc_listallpids(0, 0);
  if ((v1 & 0x80000000) != 0) {
    goto LABEL_10;
  }
  int v2 = 4 * v1;
  BOOL v3 = malloc_type_malloc(4 * v1, 0x100004052888210uLL);
  unsigned int v4 = proc_listallpids(v3, v2);
  if ((v4 & 0x80000000) != 0)
  {
    free(v3);
LABEL_10:
    id v9 = (id)MEMORY[0x263EFFA78];
    goto LABEL_11;
  }
  if (v4)
  {
    uint64_t v5 = v4;
    long long v6 = (int *)v3;
    do
    {
      uint64_t v13 = 0;
      memset(v12, 0, sizeof(v12));
      memset(v11, 0, sizeof(v11));
      if (proc_pidinfo(*v6, 3, 0, v11, 136) == 136)
      {
        CGFloat v7 = [NSString stringWithUTF8String:v12];
        long long v8 = [NSNumber numberWithInt:*v6];
        [v0 setObject:v8 forKeyedSubscript:v7];
      }
      ++v6;
      --v5;
    }
    while (v5);
  }
  free(v3);
  id v9 = v0;
LABEL_11:

  return v9;
}

uint64_t HMIGetProcessID(void *a1)
{
  id v1 = a1;
  int v2 = HMIGetAllProcessIDs();
  BOOL v3 = [v2 objectForKeyedSubscript:v1];

  if (v3)
  {
    unsigned int v4 = [v2 objectForKeyedSubscript:v1];
    uint64_t v5 = [v4 integerValue];
  }
  else
  {
    uint64_t v5 = 0xFFFFFFFFLL;
  }

  return v5;
}

uint64_t HMIGetAvailableSpaceForPurgeableAssets(void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  int v2 = (void *)CacheDeleteCopyAvailableSpaceForVolume();
  BOOL v3 = v2;
  if (a1) {
    *a1 = [v2 unsignedLongLongValue];
  }

  return 1;
}

__CFString *HMIThermalPressureLevelAsString(unint64_t a1)
{
  if (a1 > 6) {
    return @"HMIThermalPressureLevelNominal";
  }
  else {
    return off_26477BBB8[a1];
  }
}

uint64_t _mapOSThermalLevelToHMIThermalLevel(uint64_t a1)
{
  if (a1 > 29)
  {
    switch(a1)
    {
      case 30:
        return 4;
      case 40:
        return 5;
      case 50:
        return 6;
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        return 1;
      case 10:
        return 2;
      case 20:
        return 3;
    }
  }
  return 0;
}

void sub_225DDA818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *HMIPeakPowerPressureLevelAsString(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 5) {
    return @"HMIPeakPowerPressureLevelNominal";
  }
  else {
    return off_26477BBF0[a1 + 1];
  }
}

void sub_225DDAD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225DDB68C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __HMISignpostScopeLeave((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_225DDD324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 168), 8);
  _Unwind_Resume(a1);
}

const char *CVML_getStatusDescription(unint64_t a1)
{
  id v1 = "Not supported error";
  switch(a1)
  {
    case 0x59u:
      return v1;
    case 0x5Au:
      id v1 = "General error";
      break;
    case 0x5Bu:
      id v1 = "Espresso error";
      break;
    case 0x5Cu:
      id v1 = "incorrect binserializer key";
      break;
    case 0x5Du:
      id v1 = "small sparsity error";
      break;
    case 0x5Eu:
      id v1 = "feature extraction error";
      break;
    case 0x5Fu:
      id v1 = "initialization error";
      break;
    case 0x60u:
      id v1 = "no saved state to revert";
      break;
    case 0x61u:
      id v1 = "nominal distance not changed";
      break;
    case 0x62u:
      id v1 = "batch size violation";
      break;
    case 0x63u:
      id v1 = "computation kill request was issued";
      break;
    case 0x64u:
      id v1 = "too few IDs to build VIP model";
      break;
    case 0x65u:
      id v1 = "video error";
      break;
    case 0x66u:
      id v1 = "error with projection computation";
      break;
    case 0x67u:
      id v1 = "missing positional parameter";
      break;
    case 0x68u:
      id v1 = "inconsistent state error";
      break;
    case 0x69u:
      id v1 = "warping error";
      break;
    case 0x6Au:
      id v1 = "OpenGL error";
      break;
    case 0x6Bu:
      id v1 = "invalid format";
      break;
    case 0x6Cu:
      id v1 = "out of bounds";
      break;
    case 0x6Du:
      id v1 = "singular point configuration error";
      break;
    case 0x6Eu:
      id v1 = "division by zero";
      break;
    case 0x6Fu:
      id v1 = "LAPACK error";
      break;
    case 0x70u:
      id v1 = "platform endianess not supported";
      break;
    case 0x71u:
      id v1 = "hash already in use";
      break;
    case 0x72u:
      id v1 = "invalid ID";
      break;
    case 0x73u:
      id v1 = "invalid data type";
      break;
    case 0x74u:
      id v1 = "data inconsistency error";
      break;
    case 0x75u:
      id v1 = "I/O error";
      break;
    case 0x76u:
      id v1 = "unknown option";
      break;
    case 0x77u:
      id v1 = "invalid option";
      break;
    case 0x78u:
      id v1 = "missing option";
      break;
    case 0x79u:
      id v1 = "delegate error";
      break;
    case 0x7Au:
      id v1 = "vImage related error";
      break;
    case 0x7Bu:
      id v1 = "memory allocation error";
      break;
    case 0x7Cu:
      id v1 = "invalid parameter";
      break;
    case 0x7Du:
      id v1 = "unexpected null pointer";
      break;
    case 0x7Eu:
      id v1 = "internal error";
      break;
    case 0x7Fu:
      id v1 = "not implemented error";
      break;
    case 0x80u:
      id v1 = "ok";
      break;
    default:
      id v1 = CVML_getStatusDescription_ourSharedDefaultStatusDescription;
      snprintf(CVML_getStatusDescription_ourSharedDefaultStatusDescription, 0x3FuLL, "CVML_status module %d error %lld", a1 >> 8, a1 - 128);
      break;
  }
  return v1;
}

const char *CVML_getModuleDescription(uint64_t a1)
{
  uint64_t v1 = a1 >> 8;
  int v2 = "BinSerializer";
  switch(a1 >> 8)
  {
    case 1:
      return v2;
    case 2:
      int v2 = "ERT";
      break;
    case 3:
      int v2 = "Face3D";
      break;
    case 4:
      int v2 = "FaceDescriptor";
      break;
    case 5:
      int v2 = "FaceFrontalizer";
      break;
    case 6:
      int v2 = "FaceWarper";
      break;
    case 7:
      int v2 = "Geometry2D";
      break;
    case 8:
      int v2 = "Geometry3D";
      break;
    case 9:
      int v2 = "ImageGrouping";
      break;
    case 10:
      int v2 = "ImageQuality";
      break;
    case 11:
      int v2 = "LandmarkDetector";
      break;
    case 12:
      int v2 = "MomentProcessor";
      break;
    case 13:
      int v2 = "FaceboxAligner";
      break;
    case 14:
      int v2 = "ImageDescriptor";
      break;
    case 15:
      int v2 = "ImageClassifier";
      break;
    case 16:
      int v2 = "ImageProcessing";
      break;
    case 17:
      int v2 = "VIPIdentification";
      break;
    case 18:
      int v2 = "ImageRegistration";
      break;
    case 19:
      int v2 = "SimilarityMatrix";
      break;
    case 20:
      int v2 = "Clustering";
      break;
    case 21:
      int v2 = "HumanDetector";
      break;
    case 22:
      int v2 = "FaceRegionMap";
      break;
    case 23:
      int v2 = "ObjectDetector";
      break;
    case 24:
      int v2 = "DML";
      break;
    case 25:
      int v2 = "SGD";
      break;
    case 26:
      int v2 = "ObjectTracker";
      break;
    case 27:
      int v2 = "SRCClassifier";
      break;
    case 28:
      int v2 = "Kmeans";
      break;
    case 29:
      int v2 = "SparseCoding";
      break;
    case 30:
      int v2 = "FaceID";
      break;
    case 31:
      int v2 = "BoostedClassifier";
      break;
    case 32:
      int v2 = "FaceSegmenter";
      break;
    case 33:
      int v2 = "ImageAnalyzer";
      break;
    case 34:
      int v2 = "FaceAttributes";
      break;
    case 35:
      int v2 = "FaceprintAndAttributes";
      break;
    case 36:
      int v2 = "FaceQuality";
      break;
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
LABEL_7:
      int v2 = CVML_getModuleDescription_ourSharedModuleNameString;
      snprintf(CVML_getModuleDescription_ourSharedModuleNameString, 0x1FuLL, "CVML Module %lld", a1 >> 8);
      break;
    case 64:
      int v2 = "Generic";
      break;
    case 65:
      int v2 = "ImageTools";
      break;
    case 66:
      int v2 = "VideoTools";
      break;
    case 67:
      int v2 = "ImageWarper";
      break;
    case 68:
      int v2 = "ThirdParty";
      break;
    case 69:
      int v2 = "BinSerializerProcessor";
      break;
    case 70:
      int v2 = "AppleNetParser";
      break;
    default:
      switch(v1)
      {
        case 128:
          int v2 = "FaceProcessorCLI";
          break;
        case 129:
          int v2 = "ImageClassifierCLI";
          break;
        case 130:
          int v2 = "MPCmdlineClientCLI";
          break;
        case 131:
          int v2 = "ClusteringCLI";
          break;
        case 132:
          int v2 = "ImageProcessorCLI";
          break;
        case 133:
          int v2 = "PhotosProcessorCLI";
          break;
        default:
          if (v1 != 192) {
            goto LABEL_7;
          }
          int v2 = "CVMLEngine";
          break;
      }
      break;
  }
  return v2;
}

void *__HMISignpostScopeLeave(void *result)
{
  if (result)
  {
    BOOL result = (void *)*result;
    if (result) {
      return (void *)[result end];
    }
  }
  return result;
}

__CFString *HMIPersonFaceCropSourceAsString(unint64_t a1)
{
  if (a1 >= 5)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Unknown source: %ld", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_26477BE08[a1];
  }
  return v1;
}

void sub_225DE3744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_225DE41CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE4364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  long long v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)HMIBackgroundEstimator;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_225DE45FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE4868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE494C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_225DE4BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE4E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  if (v17 == v18) {
  if (v14 == v15)
  }

  if (v11 == v12) {
  _Unwind_Resume(a1);
  }
}

void sub_225DE4F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_225DE50B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_225DE51A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_225DE52BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE53BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE5904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE5C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE5FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE6228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE637C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 4_Block_object_dispose(&a9, 8) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_225DE6458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE6858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,void *a36)
{
  _Unwind_Resume(a1);
}

void sub_225DE6A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_225DE6AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_225DE6C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_225DE6D68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE6E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_225DE6F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE708C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE711C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE71E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_225DE72AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE7A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225DE8920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
}

void *std::vector<CGPoint>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<CGPoint>::__vallocate[abi:ne180100](a1, a3);
    long long v6 = (char *)a1[1];
    memmove(v6, a2, 16 * a3);
    a1[1] = &v6[16 * a3];
  }
  return a1;
}

void sub_225DE89FC(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_225DE8D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::deque<CGPoint>::~deque[abi:ne180100](void *a1)
{
  int v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      int v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    CGFloat v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<CGPoint *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<CGPoint *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

char *std::vector<CGPoint>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

__n128 std::deque<CGPoint>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<CGPoint>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void std::deque<CGPoint>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    id v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v5, v33);
      CGFloat v35 = &v34[8 * (v33 >> 2)];
      CGFloat v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        float v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      id v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<CGPoint *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<CGPoint *>::push_front((uint64_t)a1, &v54);
    CGFloat v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    id v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)(a1 + 3), v46);
      CGFloat v35 = &v34[8 * (v46 >> 2)];
      CGFloat v37 = &v34[8 * v47];
      float v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        CGRect v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)CGRect v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      BOOL v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  float v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0x1000uLL);
  std::__split_buffer<CGPoint *>::push_back(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<CGPoint *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_225DE9610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<CGPoint *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      long long v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(a1[4], v16);
      long long v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      unint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<CGPoint *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void sub_225DEA404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  os_unfair_lock_unlock(v7);
  _Unwind_Resume(a1);
}

void sub_225DEA5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  os_unfair_lock_unlock(v21);
  _Unwind_Resume(a1);
}

uint64_t HMIEventClassToCameraVideoAnalyzerEventType(uint64_t a1)
{
  v8[3] = *MEMORY[0x263EF8340];
  v7[0] = objc_opt_class();
  v8[0] = &unk_26D9A91F8;
  v7[1] = objc_opt_class();
  v8[1] = &unk_26D9A9210;
  v7[2] = objc_opt_class();
  v8[2] = &unk_26D9A9228;
  unint64_t v2 = [NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:3];
  BOOL v3 = [v2 objectForKeyedSubscript:a1];
  uint64_t v4 = v3;
  if (v3) {
    uint64_t v5 = [v3 integerValue];
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_225DEAB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_225DEAD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_225DEAFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_225DEB3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_225DEBD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double HMIOpenCVAddPoints(double a1, double a2, double a3)
{
  return (double)((int)a3 + (int)a1);
}

uint64_t HMIOpenCVEcho(int a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v14 = 32;
  *(void *)uint64_t v13 = 0x2000000020;
  *(double *)v6.i64 = (double)a1;
  *(double *)&v6.i64[1] = (double)a1;
  double v7 = (double)a1;
  double v8 = (double)a1;
  uint64_t v10 = (char *)v9 + 8;
  uint64_t v11 = (cv *)v12;
  v12[0] = 0;
  v12[1] = 0;
  LODWORD(v9[0]) = 1124007936;
  memset((char *)v9 + 4, 0, 48);
  v9[3] = 0u;
  cv::Mat::create((cv::Mat *)v9, (cv::Mat *)3, v13, 4);
  cv::Mat::operator=((uint64_t)v9, &v6);
  uint64_t v2 = *(unsigned int *)(*(void *)&v9[1]
                       + 16 * *(void *)v11
                       + 16 * *((void *)v11 + 1)
                       + 16 * *((void *)v11 + 2));
  if (*((void *)&v9[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v9[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v9, v1);
  }
  *(void *)&v9[1] = 0;
  memset(&v9[2], 0, 24);
  if (SDWORD1(v9[0]) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v10;
    do
      *(_DWORD *)&v4[4 * v3++] = 0;
    while (v3 < SDWORD1(v9[0]));
  }
  *((void *)&v9[1] + 1) = 0;
  if (v11 != (cv *)v12) {
    cv::fastFree((void **)v11, v1);
  }
  return v2;
}

void sub_225DECC58(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void homeai::mod::ImageDescriptorBufferFloat32::computeDistancesFrom(homeai::mod::ImageDescriptorBufferFloat32 *this@<X0>, vDSP_Length *lpsrc@<X1>, float **a3@<X8>)
{
  if (!v6) {
    __cxa_bad_cast();
  }
  if (v6 == this)
  {
    uint64_t v9 = *(void (**)(homeai::mod::ImageDescriptorBufferFloat32 *))(*(void *)this + 96);
    v9(this);
  }
  else
  {
    if (*((void *)v6 + 12) != *((void *)this + 12))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = 3708;
      __cxa_throw(exception, MEMORY[0x263F8C290], 0);
    }
    vDSP_Length v7 = *((void *)this + 9);
    vDSP_Length v8 = lpsrc[9];
    std::vector<float>::vector(a3, v8 * v7);
    if (v7 == 1 && v8 == 1)
    {
      **a3 = (*(float (**)(homeai::mod::ImageDescriptorBufferFloat32 *, vDSP_Length *))(*(void *)this + 88))(this, lpsrc);
    }
    else if (v7 == 1)
    {
      DataForKthDescriptor = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor((homeai::mod::ImageDescriptorBufferAbstract *)lpsrc, 0);
      uint64_t v11 = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, 0);
      uint64_t v12 = homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(this, v11, DataForKthDescriptor, v8, *a3);
      if ((v12 & 0x80) == 0)
      {
        uint64_t v13 = __cxa_allocate_exception(8uLL);
        *uint64_t v13 = v12;
        __cxa_throw(v13, MEMORY[0x263F8C290], 0);
      }
    }
    else if (v8 == 1)
    {
      int v14 = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor((homeai::mod::ImageDescriptorBufferAbstract *)lpsrc, 0);
      uint64_t v15 = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, 0);
      uint64_t v16 = homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(this, v14, v15, v7, *a3);
      if ((v16 & 0x80) == 0)
      {
        uint64_t v17 = __cxa_allocate_exception(8uLL);
        void *v17 = v16;
        __cxa_throw(v17, MEMORY[0x263F8C290], 0);
      }
    }
    else
    {
      unint64_t v18 = homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor((homeai::mod::ImageDescriptorBufferAbstract *)lpsrc, 0);
      if ((int)v7 >= 1)
      {
        uint64_t v19 = (const float *)v18;
        unint64_t v20 = 0;
        int v21 = 0;
        uint64_t v22 = v7;
        do
        {
          uint64_t v23 = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, v20);
          uint64_t v24 = homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(this, v23, v19, v8, &(*a3)[v21]);
          if ((v24 & 0x80) == 0)
          {
            unint64_t v25 = __cxa_allocate_exception(8uLL);
            *unint64_t v25 = v24;
            __cxa_throw(v25, MEMORY[0x263F8C290], 0);
          }
          v21 += v8;
          ++v20;
        }
        while (v22 != v20);
      }
    }
  }
}

void sub_225DFBAFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(homeai::mod::ImageDescriptorBufferAbstract *this, unint64_t a2)
{
  if (*((void *)this + 9) <= a2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = 3692;
    __cxa_throw(exception, MEMORY[0x263F8C290], 0);
  }
  return *((void *)this + 7) + *((void *)this + 8) * a2;
}

uint64_t homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(homeai::mod::ImageDescriptorBufferFloat32 *this, const float *__A, const float *a3, vDSP_Length __N, float *__C)
{
  if (!__A || (uint64_t v5 = a3) == 0 || (__Y = __C) == 0)
  {
    uint64_t v12 = &CVML_status_unexpectedNullPointer;
LABEL_10:
    uint64_t v10 = *v12;
    return (v10 + 128) | 0xE00;
  }
  vDSP_Length v7 = __N;
  uint64_t v10 = 0;
  if (__N > 7)
  {
    int v14 = *((_DWORD *)this + 26);
    switch(v14)
    {
      case 3:
        float __Aa = 0.5;
        vDSP_vfill(&__Aa, __C, 1, __N);
        cblas_sgemv(CblasColMajor, CblasTrans, *((_DWORD *)this + 24), v7, 0.5, v5, *((_DWORD *)this + 24), __A, 1, 1.0, __Y, 1);
        return (v10 + 128) | 0xE00;
      case 2:
        float v18 = 0.5;
        vDSP_vfill(&v18, __C, 1, __N);
        cblas_sgemv(CblasColMajor, CblasTrans, *((_DWORD *)this + 24), v7, -0.5, v5, *((_DWORD *)this + 24), __A, 1, 1.0, __Y, 1);
        return (v10 + 128) | 0xE00;
      case 1:
        while (1)
        {
          uint64_t v11 = homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptors(this, __A, v5, __Y);
          if ((v11 & 0x80) == 0) {
            break;
          }
          uint64_t v5 = (const float *)((char *)v5 + *((void *)this + 8));
          ++__Y;
          if (!--v7) {
            return (v10 + 128) | 0xE00;
          }
        }
LABEL_21:
        uint64_t v15 = v11;
        exception = __cxa_allocate_exception(8uLL);
        void *exception = v15;
        __cxa_throw(exception, MEMORY[0x263F8C290], 0);
    }
    uint64_t v12 = &CVML_status_unknownOption;
    goto LABEL_10;
  }
  if (__N)
  {
    while (1)
    {
      uint64_t v11 = homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptors(this, __A, v5, __Y);
      if ((v11 & 0x80) == 0) {
        break;
      }
      uint64_t v5 = (const float *)((char *)v5 + *((void *)this + 8));
      ++__Y;
      if (!--v7) {
        return (v10 + 128) | 0xE00;
      }
    }
    goto LABEL_21;
  }
  return (v10 + 128) | 0xE00;
}

float homeai::mod::ImageDescriptorBufferFloat32::computeDistanceFrom(homeai::mod::ImageDescriptorBufferFloat32 *this, const homeai::mod::ImageDescriptorBufferAbstract *a2)
{
  if (*((void *)this + 9) != 1 || *((void *)a2 + 9) != 1)
  {
    uint64_t v8 = 3708;
    goto LABEL_8;
  }
  DataForKthDescriptor = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, 0);
  int64x2_t v6 = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(a2, 0);
  float __C = 0.0;
  uint64_t v8 = homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptors(this, DataForKthDescriptor, v6, &__C);
  if ((v8 & 0x80) == 0)
  {
LABEL_8:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = v8;
    __cxa_throw(exception, MEMORY[0x263F8C290], 0);
  }
  return __C;
}

uint64_t homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptors(homeai::mod::ImageDescriptorBufferFloat32 *this, const float *__A, const float *a3, float *__C)
{
  if (__A && a3)
  {
    uint64_t v5 = 0;
    *float __C = 0.0;
    int v6 = *((_DWORD *)this + 26);
    switch(v6)
    {
      case 3:
        float __Ca = 0.0;
        vDSP_dotpr(__A, 1, a3, 1, &__Ca, *((void *)this + 12));
        float v7 = (float)(__Ca + 1.0) * 0.5;
        goto LABEL_11;
      case 2:
        float v11 = 0.0;
        vDSP_dotpr(__A, 1, a3, 1, &v11, *((void *)this + 12));
        float v7 = (float)((float)(v11 + 1.0) * -0.5) + 1.0;
        goto LABEL_11;
      case 1:
        vDSP_distancesq(__A, 1, a3, 1, __C, *((void *)this + 12));
        float v7 = sqrtf(*__C);
LABEL_11:
        *float __C = v7;
        return (v5 + 128) | 0xE00;
    }
    uint64_t v8 = &CVML_status_unknownOption;
  }
  else
  {
    uint64_t v8 = &CVML_status_unexpectedNullPointer;
  }
  uint64_t v5 = *v8;
  return (v5 + 128) | 0xE00;
}

uint64_t homeai::mod::ImageDescriptorBufferFloat32::computeSelfDistances@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(this + 72);
  if ((int)v3 > 1)
  {
    uint64_t v4 = (homeai::mod::ImageDescriptorBufferAbstract *)this;
    std::vector<float>::vector(a2, (uint64_t)(int)((v3 - 1) * v3 + (((int)v3 - 1) * (int)v3 < 0)) >> 1);
    DataForKthDescriptor = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(v4, 0);
    uint64_t v6 = 0;
    uint64_t v7 = v3;
    for (unint64_t i = 1; i != v7; ++i)
    {
      uint64_t v9 = (const float *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(v4, i);
      this = homeai::mod::ImageDescriptorBufferFloat32::computeDistanceBetweenDescriptorAndDescriptors(v4, v9, DataForKthDescriptor, i, (float *)(*a2 + 4 * v6));
      if ((this & 0x80) == 0)
      {
        uint64_t v10 = this;
        exception = __cxa_allocate_exception(8uLL);
        void *exception = v10;
        __cxa_throw(exception, MEMORY[0x263F8C290], 0);
      }
      v6 += i;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

void sub_225DFC008(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *homeai::mod::ImageDescriptorBufferFloat32::getRepresentative(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4 != 1)
  {
    if (v4)
    {
      uint64_t v9 = malloc_type_realloc(*(void **)(a1 + 112), 4 * v4, 0x100004052888210uLL);
      *(void *)(a1 + 112) = v9;
      if (v9)
      {
        *(void *)operator new(8uLL) = a3;
        if (malloc_type_malloc(4 * *(void *)(a1 + 96), 0xDF253555uLL)) {
          operator new();
        }
        exception = __cxa_allocate_exception(8uLL);
        void *exception = 3707;
        __cxa_throw(exception, MEMORY[0x263F8C290], 0);
      }
      uint64_t v5 = &CVML_status_memoryAllocationError;
    }
    else
    {
      uint64_t v5 = &CVML_status_internalError;
    }
    uint64_t v10 = *v5 + 128;
    if ((v10 & 0x80) == 0)
    {
      uint64_t v11 = v10 | 0xE00;
      uint64_t v12 = __cxa_allocate_exception(8uLL);
      *uint64_t v12 = v11;
      __cxa_throw(v12, MEMORY[0x263F8C290], 0);
    }
    return 0;
  }
  uint64_t v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (!v6) {
    return 0;
  }
}

void sub_225DFC394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<long long>::__append((char **)a1, a2 - v2);
  }
}

void homeai::mod::ImageDescriptorBufferFloat32::~ImageDescriptorBufferFloat32(void **this)
{
  *this = &unk_26D987370;
  free(this[14]);
  homeai::mod::ImageDescriptorBufferAbstract::~ImageDescriptorBufferAbstract(this);
}

{
  uint64_t vars8;

  *this = &unk_26D987370;
  free(this[14]);
  homeai::mod::ImageDescriptorBufferAbstract::~ImageDescriptorBufferAbstract(this);
  JUMPOUT(0x22A641780);
}

void homeai::mod::ImageDescriptorBufferFloat32::createEmptyCopy(homeai::mod::ImageDescriptorBufferFloat32 *this)
{
}

void sub_225DFC57C(_Unwind_Exception *a1)
{
  MEMORY[0x22A641780](v1, 0x10B1C408DA78774);
  _Unwind_Resume(a1);
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::createDeepCopy(homeai::mod::ImageDescriptorBufferAbstract *this)
{
  uint64_t v2 = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(void *)this + 16))(this);
  *(unsigned char *)(v2 + 8_Block_object_dispose(&a9, 8) = 1;
  *(_OWORD *)(v2 + 64) = *((_OWORD *)this + 4);
  uint64_t v3 = malloc_type_malloc(*((void *)this + 8) * *((void *)this + 9), 0xA64EA27DuLL);
  *(void *)(v2 + 56) = v3;
  uint64_t v4 = *((void *)this + 9);
  *(void *)(v2 + 80) = v4;
  memcpy(v3, *((const void **)this + 7), *((void *)this + 8) * v4);
  uint64_t v5 = (void *)*((void *)this + 1);
  uint64_t v6 = (void *)*((void *)this + 2);
  if (v5 != v6)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>,std::back_insert_iterator<std::vector<long long>>,0>(v5, v6, v2 + 8);
    std::map<long long,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,int>,std::__tree_node<std::__value_type<long long,int>,void *> *,long>>>((uint64_t *)(v2 + 32), *((void **)this + 4), (void *)this + 5);
  }
  return v2;
}

uint64_t homeai::mod::ImageDescriptorBufferFloat32::print(homeai::mod::ImageDescriptorBufferFloat32 *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Descriptor count = ", 19);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  uint64_t v3 = std::locale::use_facet(&v23, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v23);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Descriptor length = ", 20);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" (", 2);
  (*(void (**)(homeai::mod::ImageDescriptorBufferFloat32 *))(*(void *)this + 104))(this);
  uint64_t v5 = (void *)std::ostream::operator<<();
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" bytes", 6);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  uint64_t v8 = std::locale::use_facet(&v23, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v23);
  std::ostream::put();
  std::ostream::flush();
  if (*((void *)this + 9))
  {
    unint64_t v9 = 0;
    uint64_t v10 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" = [", 4);
      if (*((int *)this + 24) >= 2)
      {
        uint64_t v12 = 0;
        do
        {
          homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, v9);
          uint64_t v13 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
          ++v12;
        }
        while (v12 < *((_DWORD *)this + 24) - 1);
      }
      homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, v9);
      int v14 = (void *)std::ostream::operator<<();
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
      uint64_t v16 = std::locale::use_facet(&v23, v10);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v23);
      std::ostream::put();
      std::ostream::flush();
      ++v9;
    }
    while (v9 < *((void *)this + 9));
  }
  std::ostream::flush();
  std::stringbuf::str();
  v19[0] = *MEMORY[0x263F8C2B8];
  uint64_t v17 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v20[0] = v17;
  v20[1] = MEMORY[0x263F8C318] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A641730](&v22);
}

void sub_225DFCAA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 96));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t homeai::mod::ImageDescriptorBufferFloat32::getDescriptorLengthInBytes(homeai::mod::ImageDescriptorBufferFloat32 *this)
{
  return 4 * *((void *)this + 12);
}

int64x2_t homeai::mod::ImageDescriptorBufferAbstract::setToReferenceToKthDescriptor(homeai::mod::ImageDescriptorBufferAbstract *this, homeai::mod::ImageDescriptorBufferAbstract *a2, unint64_t a3)
{
  uint64_t v6 = (char *)a2 + 8;
  *((void *)a2 + 2) = *((void *)a2 + 1);
  uint64_t v7 = (uint64_t **)((char *)a2 + 32);
  uint64_t v8 = (void *)((char *)a2 + 40);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)a2 + 32, *((void **)a2 + 5));
  *((void *)v6 + 3) = v8;
  *((void *)v6 + 5) = 0;
  void *v8 = 0;
  uint64_t v9 = *((void *)this + 1);
  if (v9 != *((void *)this + 2))
  {
    unint64_t v10 = *((void *)a2 + 3);
    uint64_t v11 = (void *)*((void *)a2 + 2);
    if ((unint64_t)v11 >= v10)
    {
      uint64_t v13 = *(void **)v6;
      uint64_t v14 = ((uint64_t)v11 - *(void *)v6) >> 3;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v10 - (void)v13;
      if (v16 >> 2 > v15) {
        unint64_t v15 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        float v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)a2 + 24, v17);
        uint64_t v13 = (void *)*((void *)a2 + 1);
        uint64_t v11 = (void *)*((void *)a2 + 2);
      }
      else
      {
        float v18 = 0;
      }
      uint64_t v19 = &v18[8 * v14];
      unint64_t v20 = &v18[8 * v17];
      *(void *)uint64_t v19 = *(void *)(v9 + 8 * a3);
      uint64_t v12 = v19 + 8;
      while (v11 != v13)
      {
        uint64_t v21 = *--v11;
        *((void *)v19 - 1) = v21;
        v19 -= 8;
      }
      *((void *)a2 + 1) = v19;
      *((void *)a2 + 2) = v12;
      *((void *)a2 + 3) = v20;
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      *uint64_t v11 = *(void *)(v9 + 8 * a3);
      uint64_t v12 = v11 + 1;
    }
    *((void *)a2 + 2) = v12;
    unint64_t v25 = (uint64_t *)(*((void *)this + 1) + 8 * a3);
    *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v7, v25, (uint64_t)&std::piecewise_construct, &v25)+ 10) = 0;
  }
  unint64_t DataForKthDescriptor = homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, a3);
  *((unsigned char *)a2 + 8_Block_object_dispose(&a9, 8) = 0;
  uint64_t v23 = *((void *)this + 8);
  *((void *)a2 + 7) = DataForKthDescriptor;
  *((void *)a2 + _Block_object_dispose(&a9, 8) = v23;
  int64x2_t result = vdupq_n_s64(1uLL);
  *(int64x2_t *)((char *)a2 + 72) = result;
  return result;
}

void homeai::mod::ImageDescriptorBufferAbstract::~ImageDescriptorBufferAbstract(void **this)
{
  *this = &unk_26D987520;
  if (*((unsigned char *)this + 88)) {
    free(this[7]);
  }
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)(this + 4), this[5]);
  uint64_t v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::map<long long,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,int>,std::__tree_node<std::__value_type<long long,int>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      int64x2_t result = std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,int> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>,std::back_insert_iterator<std::vector<long long>>,0>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
    std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint64_t v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)v6, v12);
      uint64_t v8 = *(void **)v4;
      uint64_t v5 = *(void **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = *a2;
    uint64_t v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + _Block_object_dispose(&a9, 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    void *v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + _Block_object_dispose(&a9, 8) = v7;
  return a1;
}

uint64_t *std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,int> const&>(uint64_t **a1, void *a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__find_equal<long long>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__find_equal<long long>(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (uint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    uint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v17 = v16;
          uint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      unint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    unint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          uint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          unint64_t v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        unint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  int64x2_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  uint64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  int v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_225DFD5E0(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x22A641730](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22A641730](a1 + 128);
  return a1;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22A641660](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x22A641670](v13);
  return a1;
}

void sub_225DFD87C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x22A641670](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x225DFD85CLL);
}

void sub_225DFD8D0(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_225DFDA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t **std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, void **a4)
{
  size_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        uint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        size_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        size_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    _OWORD v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_225DFDC50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  int64x2_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    int64x2_t result = std::vector<long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      int64x2_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_225DFDD10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<long long>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    size_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v4, v13);
      size_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    unint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t homeai::clustering::GreedyClusterer::GreedyClusterer(uint64_t this, float a2, float a3, float a4)
{
  *(void *)this = &unk_26D987400;
  *(void *)(this + 20) = 0x13F800000;
  *(unsigned char *)(this + 2_Block_object_dispose(&a9, 8) = 1;
  *(void *)(this + 40) = 0;
  *(void *)(this + 4_Block_object_dispose(&a9, 8) = 0;
  *(void *)(this + 32) = 0;
  *(float *)(this + _Block_object_dispose(&a9, 8) = a2;
  *(float *)(this + 12) = a3;
  *(float *)(this + 16) = a4;
  return this;
}

void homeai::clustering::GreedyClusterer::~GreedyClusterer(homeai::clustering::GreedyClusterer *this)
{
  *(void *)this = &unk_26D987400;
  uint64_t v1 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26D987400;
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x22A641780](this, 0x10A1C40832DF375);
}

void homeai::clustering::GreedyClusterer::performClustering(homeai::clustering::GreedyClusterer *a1, void *a2, uint64_t a3)
{
  v27[0] = 0;
  v27[1] = 0;
  v25[1] = 0;
  uint64_t v26 = (uint64_t *)v27;
  uint64_t v24 = (uint64_t *)v25;
  v25[0] = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v22 = (uint64_t *)v23;
  uint64_t v6 = (float *)a2[7];
  uint64_t v7 = a2[8];
  int v8 = (*(uint64_t (**)(void *))(*a2 + 104))(a2);
  homeai::clustering::GreedyClusterer::addDescriptors(a1, v6, (unint64_t)(int)v7 >> 2, (unint64_t)v8 >> 2, a2[9], &v20);
  uint64_t v9 = *v20;
  unint64_t v10 = v20[1];
  if (*v20 != v10)
  {
    do
    {
      std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>(&v26, v27, v9, v9);
      ++v9;
    }
    while (v9 != v10);
    uint64_t v11 = v20;
    if (v20[1] != *v20)
    {
      unint64_t v12 = 0;
      do
      {
        uint64_t v19 = 0;
        uint64_t v19 = *(void *)(a2[1] + 8 * v12);
        uint64_t v18 = (*v11)[v12];
        uint64_t v13 = v18;
        uint64_t v28 = &v18;
        uint64_t v14 = std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v24, (unint64_t *)&v18, (uint64_t)&std::piecewise_construct, &v28);
        uint64_t v15 = operator new(0x18uLL);
        v15[2] = v19;
        uint64_t v16 = v14[5];
        v14 += 5;
        void *v15 = v16;
        v15[1] = v14;
        *(void *)(v16 + _Block_object_dispose(&a9, 8) = v15;
        uint64_t *v14 = (uint64_t)v15;
        ++v14[2];
        uint64_t v28 = &v19;
        std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v22, &v19, (uint64_t)&std::piecewise_construct, &v28)[5] = v13;
        ++v12;
        uint64_t v11 = v20;
      }
      while (v12 < v20[1] - *v20);
    }
  }
  std::map<unsigned long,std::list<long long>>::map[abi:ne180100](v17, (uint64_t)&v24);
  homeai::clustering::GreedyClusterer::computeDeltaAfterUpdate((uint64_t)a1, a3, &v26, (uint64_t)v17);
  std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy((uint64_t)v17, (void *)v17[1]);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&v22, v23[0]);
  std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&v26, v27[0]);
}

void sub_225DFEBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, void *a17, uint64_t a18, char a19, void *a20,uint64_t a21,char a22,void *a23)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&a16, a17);
  std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy((uint64_t)&a19, a20);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void homeai::clustering::GreedyClusterer::addDescriptors(homeai::clustering::GreedyClusterer *this@<X0>, float *a2@<X1>, int a3@<W2>, int a4@<W3>, unint64_t a5@<X4>, void *a6@<X8>)
{
  int v37 = a4;
  unint64_t v36 = a5;
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x22A641600](exception, "Descriptor vectors nil");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::allocate_shared[abi:ne180100]<std::vector<long long>,std::allocator<std::vector<long long>>,unsigned long &,void>(&v36, a6);
  if (v36)
  {
    uint64_t v10 = 0;
    while (1)
    {
      __B = &a2[v10 * a3];
      uint64_t v11 = *((void *)this + 4);
      if (*((void *)this + 5) == v11) {
        break;
      }
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      float v14 = 0.0;
      int v15 = -1;
      do
      {
        uint64_t v16 = *(const float **)(*(void *)(v11 + v12) + 16);
        float __C = 0.0;
        vDSP_dotpr(v16, 1, __B, 1, &__C, 0x80uLL);
        if ((float)(1.0 - __C) < *((float *)this + 2) && ((float)(1.0 - __C) < v14 || v15 == -1))
        {
          float v14 = 1.0 - __C;
          int v15 = v13;
        }
        ++v13;
        uint64_t v11 = *((void *)this + 4);
        unint64_t v18 = (*((void *)this + 5) - v11) >> 4;
        v12 += 16;
      }
      while (v18 > v13);
      if (v15 == -1) {
        goto LABEL_22;
      }
      uint64_t v19 = (uint64_t *)(v11 + 16 * v15);
      uint64_t v21 = *v19;
      unint64_t v20 = (std::__shared_weak_count *)v19[1];
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v22 = *(_DWORD *)(v21 + 8);
      uint64_t v23 = v37;
      if (v37 >= 1)
      {
        uint64_t v24 = *(float **)(v21 + 16);
        double v25 = (double)v22 + 1.0;
        double v26 = (double)v22 / v25;
        long long v27 = __B;
        double v28 = 1.0 / v25;
        do
        {
          float v29 = *v27++;
          float v30 = v28 * v29 + *v24 * v26;
          *v24++ = v30;
          --v23;
        }
        while (v23);
      }
      *(_DWORD *)(v21 + _Block_object_dispose(&a9, 8) = v22 + 1;
      *(void *)(*(void *)*a6 + 8 * v10) = *(void *)v21;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v36 <= ++v10) {
        return;
      }
    }
    unint64_t v18 = 0;
LABEL_22:
    unint64_t v34 = v18;
    int v32 = 1;
    std::allocate_shared[abi:ne180100]<homeai::clustering::GreedyClusterer::cluster_t,std::allocator<homeai::clustering::GreedyClusterer::cluster_t>,int &,float *&,long long &,int,void>((uint64_t)&v38, (uint64_t)&v37, (uint64_t)&__B, &v34, &v32);
  }
}

void sub_225DFEE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

void homeai::clustering::GreedyClusterer::computeDeltaAfterUpdate(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  int v8 = (std::__shared_weak_count *)operator new(0x30uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D9874D0;
  v8[1].__shared_owners_ = 0;
  v8[1].__shared_weak_owners_ = 0;
  v43[0] = (uint64_t)&v8[1];
  v43[1] = (uint64_t)v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  homeai::clustering::GreedyClusterer::computeMergePairs(a1, a3, a3, v43, 0);
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  v40[0] = v8 + 1;
  v40[1] = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  std::map<unsigned long,std::list<long long>>::map[abi:ne180100](v39, a4);
  homeai::clustering::GreedyClusterer::getClustersFromMergePairs(a1, (uint64_t)v40, (uint64_t)v39, &v41);
  std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy((uint64_t)v39, (void *)v39[1]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  uint64_t v9 = (uint64_t)v8[1].__vftable;
  shared_owners = (uint64_t *)v8[1].__shared_owners_;
  unint64_t v11 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)shared_owners - v9) >> 3));
  if (shared_owners == (uint64_t *)v9) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *,false>(v9, shared_owners, (uint64_t)&v44, v12, 1);
  v38[0] = 0;
  v38[1] = 0;
  int v37 = (uint64_t *)v38;
  uint64_t v13 = v41;
  uint64_t v14 = v42;
  if (v41 != v42)
  {
    do
    {
      int v15 = *(uint64_t **)v13;
      uint64_t v16 = *(uint64_t **)(v13 + 8);
      if (v16 != *(uint64_t **)v13)
      {
        uint64_t v17 = *v15;
        unint64_t v18 = *(uint64_t **)v13;
        do
        {
          uint64_t v20 = *v18++;
          uint64_t v19 = v20;
          if (v20 < v17) {
            uint64_t v17 = v19;
          }
        }
        while (v18 != v16);
        do
        {
          CGFloat v44 = v15;
          std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v37, v15++, (uint64_t)&std::piecewise_construct, &v44)[5] = v17;
        }
        while (v15 != v16);
      }
      v13 += 24;
    }
    while (v13 != v14);
    uint64_t v21 = v37;
    if (v37 != (uint64_t *)v38)
    {
      int v22 = (void *)(a2 + 16);
      uint64_t v23 = *(uint64_t **)(a2 + 8);
      do
      {
        uint64_t v25 = v21[4];
        uint64_t v24 = v21[5];
        if ((unint64_t)v23 >= *v22)
        {
          double v26 = *(uint64_t **)a2;
          uint64_t v27 = ((uint64_t)v23 - *(void *)a2) >> 4;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v29 = *v22 - (void)v26;
          if (v29 >> 3 > v28) {
            unint64_t v28 = v29 >> 3;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            long long v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(a2 + 16, v30);
            double v26 = *(uint64_t **)a2;
            uint64_t v23 = *(uint64_t **)(a2 + 8);
          }
          else
          {
            long long v31 = 0;
          }
          int v32 = (uint64_t *)&v31[16 * v27];
          *int v32 = v25;
          v32[1] = v24;
          unint64_t v33 = v32;
          if (v23 != v26)
          {
            do
            {
              *((_OWORD *)v33 - 1) = *((_OWORD *)v23 - 1);
              v33 -= 2;
              v23 -= 2;
            }
            while (v23 != v26);
            double v26 = *(uint64_t **)a2;
          }
          uint64_t v23 = v32 + 2;
          *(void *)a2 = v33;
          *(void *)(a2 + _Block_object_dispose(&a9, 8) = v32 + 2;
          *(void *)(a2 + 16) = &v31[16 * v30];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *uint64_t v23 = v25;
          v23[1] = v24;
          v23 += 2;
        }
        *(void *)(a2 + _Block_object_dispose(&a9, 8) = v23;
        unint64_t v34 = (uint64_t *)v21[1];
        if (v34)
        {
          do
          {
            CGFloat v35 = v34;
            unint64_t v34 = (uint64_t *)*v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            CGFloat v35 = (uint64_t *)v21[2];
            BOOL v36 = *v35 == (void)v21;
            uint64_t v21 = v35;
          }
          while (!v36);
        }
        uint64_t v21 = v35;
      }
      while (v35 != (uint64_t *)v38);
    }
  }
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&v37, v38[0]);
  int v37 = &v41;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

void sub_225DFF1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  a10 = (void **)&a18;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  int64x2_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)result, v13);
    int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    int64x2_t result = std::__split_buffer<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_225DFF330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void homeai::clustering::GreedyClusterer::computeMergePairs(uint64_t a1, void *a2, void *a3, uint64_t *a4, int a5)
{
  if (*(void *)(a1 + 40) != *(void *)(a1 + 32))
  {
    unint64_t v5 = (void *)*a2;
    float v48 = a2 + 1;
    if ((void *)*a2 != a2 + 1)
    {
      uint64_t v7 = a4;
      uint64_t v9 = a3 + 1;
      do
      {
        uint64_t v10 = (void *)*a3;
        if ((void *)*a3 != v9)
        {
          uint64_t v11 = v5[4];
          do
          {
            uint64_t v12 = v10[4];
            BOOL v13 = v12 <= v11 && a5 == 0;
            if (!v13)
            {
              uint64_t v14 = *(void *)(a1 + 32);
              uint64_t v15 = 16 * v12;
              uint64_t v16 = *(void *)(v14 + 16 * v12);
              if (*(_DWORD *)(v16 + 8))
              {
                long long v17 = *(const float **)(*(void *)(v14 + 16 * v11) + 16);
                unint64_t v18 = *(const float **)(v16 + 16);
                float __C = 0.0;
                vDSP_dotpr(v17, 1, v18, 1, &__C, 0x80uLL);
                float v19 = 1.0 - __C;
                if ((float)(1.0 - __C) < *(float *)(a1 + 12))
                {
                  uint64_t v20 = *(void *)(a1 + 32);
                  uint64_t v21 = **(void **)(v20 + 16 * v11);
                  uint64_t v22 = **(void **)(v20 + v15);
                  if (v21 >= v22) {
                    uint64_t v23 = v22;
                  }
                  else {
                    uint64_t v23 = v21;
                  }
                  if (v21 <= v22) {
                    uint64_t v24 = v22;
                  }
                  else {
                    uint64_t v24 = v21;
                  }
                  uint64_t v25 = (void **)*v7;
                  double v26 = (char *)v25[1];
                  uint64_t v27 = (char *)v25[2];
                  if (v26 >= v27)
                  {
                    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v26 - (unsigned char *)*v25) >> 3);
                    unint64_t v30 = v29 + 1;
                    if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v27 - (unsigned char *)*v25) >> 3);
                    if (2 * v31 > v30) {
                      unint64_t v30 = 2 * v31;
                    }
                    if (v31 >= 0x555555555555555) {
                      unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v32 = v30;
                    }
                    if (v32) {
                      unint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>((uint64_t)(v25 + 2), v32);
                    }
                    else {
                      unint64_t v33 = 0;
                    }
                    unint64_t v34 = &v33[24 * v29];
                    *(void *)unint64_t v34 = v23;
                    *((void *)v34 + 1) = v24;
                    *((float *)v34 + 4) = v19;
                    BOOL v36 = (char *)*v25;
                    CGFloat v35 = (char *)v25[1];
                    int v37 = v34;
                    if (v35 != *v25)
                    {
                      do
                      {
                        long long v38 = *(_OWORD *)(v35 - 24);
                        *((void *)v37 - 1) = *((void *)v35 - 1);
                        *(_OWORD *)(v37 - 24) = v38;
                        v37 -= 24;
                        v35 -= 24;
                      }
                      while (v35 != v36);
                      CGFloat v35 = (char *)*v25;
                    }
                    unint64_t v28 = v34 + 24;
                    *uint64_t v25 = v37;
                    v25[1] = v34 + 24;
                    v25[2] = &v33[24 * v32];
                    if (v35) {
                      operator delete(v35);
                    }
                  }
                  else
                  {
                    *(void *)double v26 = v23;
                    *((void *)v26 + 1) = v24;
                    unint64_t v28 = v26 + 24;
                    *((float *)v26 + 4) = v19;
                  }
                  v25[1] = v28;
                  uint64_t v7 = a4;
                  uint64_t v39 = *(void *)*a4;
                  unint64_t v40 = *(void *)(*a4 + 8);
                  unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - v39) >> 3);
                  if (v41 >= 0x86471)
                  {
                    unint64_t v42 = 126 - 2 * __clz(v41);
                    if (v40 == v39) {
                      uint64_t v43 = 0;
                    }
                    else {
                      uint64_t v43 = v42;
                    }
                    std::__introsort<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*,false>(v39, v40, v43, 1);
                    std::vector<std::tuple<long long,long long,float>>::resize(*a4, 0x7A120uLL);
                  }
                }
              }
            }
            CGFloat v44 = (void *)v10[1];
            if (v44)
            {
              do
              {
                uint64_t v45 = v44;
                CGFloat v44 = (void *)*v44;
              }
              while (v44);
            }
            else
            {
              do
              {
                uint64_t v45 = (void *)v10[2];
                BOOL v13 = *v45 == (void)v10;
                uint64_t v10 = v45;
              }
              while (!v13);
            }
            uint64_t v10 = v45;
          }
          while (v45 != v9);
        }
        unint64_t v46 = (void *)v5[1];
        if (v46)
        {
          do
          {
            uint64_t v47 = v46;
            unint64_t v46 = (void *)*v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            uint64_t v47 = (void *)v5[2];
            BOOL v13 = *v47 == (void)v5;
            unint64_t v5 = v47;
          }
          while (!v13);
        }
        unint64_t v5 = v47;
      }
      while (v47 != v48);
    }
  }
}

void homeai::clustering::GreedyClusterer::getClustersFromMergePairs(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  v49[0] = *(uint64_t **)a2;
  v49[1] = (uint64_t *)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  homeai::clustering::GreedyClusterer::getConnectedComponents(a1, v49, &v50);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v6 = v50;
  uint64_t v40 = v51;
  if (v50 != v51)
  {
    uint64_t v7 = (void *)(a3 + 8);
    do
    {
      unint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v46, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      __p = 0;
      CGFloat v44 = 0;
      uint64_t v45 = 0;
      uint64_t v8 = (unint64_t *)v46;
      if (v46 == v47)
      {
        unint64_t v9 = 0;
      }
      else
      {
        unint64_t v9 = 0;
        do
        {
          if (*v7)
          {
            unint64_t v10 = *v8;
            uint64_t v11 = (void *)(a3 + 8);
            uint64_t v12 = (void *)*v7;
            do
            {
              unint64_t v13 = v12[4];
              BOOL v14 = v13 >= v10;
              if (v13 >= v10) {
                uint64_t v15 = v12;
              }
              else {
                uint64_t v15 = v12 + 1;
              }
              if (v14) {
                uint64_t v11 = v12;
              }
              uint64_t v12 = (void *)*v15;
            }
            while (*v15);
            if (v11 != v7 && v10 >= v11[4]) {
              v9 += v11[7];
            }
          }
          ++v8;
        }
        while (v8 != v47);
      }
      std::vector<long long>::reserve(&__p, v9);
      uint64_t v41 = v6;
      uint64_t v16 = (unint64_t *)v46;
      long long v17 = v47;
      while (v16 != v17)
      {
        unint64_t v18 = (void *)*v7;
        if (*v7)
        {
          unint64_t v19 = *v16;
          uint64_t v20 = (void *)(a3 + 8);
          do
          {
            unint64_t v21 = v18[4];
            BOOL v22 = v21 >= v19;
            if (v21 >= v19) {
              uint64_t v23 = v18;
            }
            else {
              uint64_t v23 = v18 + 1;
            }
            if (v22) {
              uint64_t v20 = v18;
            }
            unint64_t v18 = (void *)*v23;
          }
          while (*v23);
          if (v20 != v7 && v19 >= v20[4])
          {
            uint64_t v24 = v20 + 5;
            uint64_t v25 = (void *)v20[6];
            if (v25 != v20 + 5)
            {
              double v26 = v44;
              do
              {
                uint64_t v27 = v25[2];
                if (v26 >= v45)
                {
                  unint64_t v29 = (char *)__p;
                  uint64_t v30 = (v26 - (unsigned char *)__p) >> 3;
                  unint64_t v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 61) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v32 = v45 - (unsigned char *)__p;
                  if ((v45 - (unsigned char *)__p) >> 2 > v31) {
                    unint64_t v31 = v32 >> 2;
                  }
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v33 = v31;
                  }
                  if (v33)
                  {
                    unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)&v45, v33);
                    unint64_t v29 = (char *)__p;
                    double v26 = v44;
                  }
                  else
                  {
                    unint64_t v34 = 0;
                  }
                  CGFloat v35 = &v34[8 * v30];
                  *(void *)CGFloat v35 = v27;
                  unint64_t v28 = v35 + 8;
                  while (v26 != v29)
                  {
                    uint64_t v36 = *((void *)v26 - 1);
                    v26 -= 8;
                    *((void *)v35 - 1) = v36;
                    v35 -= 8;
                  }
                  __p = v35;
                  CGFloat v44 = v28;
                  uint64_t v45 = &v34[8 * v33];
                  if (v29) {
                    operator delete(v29);
                  }
                }
                else
                {
                  *(void *)double v26 = v27;
                  unint64_t v28 = v26 + 8;
                }
                CGFloat v44 = v28;
                uint64_t v25 = (void *)v25[1];
                double v26 = v28;
              }
              while (v25 != v24);
            }
          }
        }
        ++v16;
      }
      unint64_t v37 = a4[1];
      if (v37 >= a4[2])
      {
        uint64_t v39 = std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(a4, (uint64_t)&__p);
        uint64_t v38 = v41;
      }
      else
      {
        std::vector<std::vector<long long>>::__construct_one_at_end[abi:ne180100]<std::vector<long long> const&>((uint64_t)a4, (uint64_t)&__p);
        uint64_t v38 = v41;
        uint64_t v39 = v37 + 24;
      }
      a4[1] = v39;
      if (__p)
      {
        CGFloat v44 = (char *)__p;
        operator delete(__p);
      }
      if (v46)
      {
        uint64_t v47 = (unint64_t *)v46;
        operator delete(v46);
      }
      uint64_t v6 = v38 + 24;
    }
    while (v6 != v40);
  }
  unint64_t v46 = &v50;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
}

void sub_225DFF920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::tuple<long long,long long,float>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::tuple<long long,long long,float>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)a1 + 24 * a2;
  }
}

uint64_t homeai::clustering::GreedyClusterer::getConnectedComponents@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  {
    homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)const::PCT_CONNECTIONS_NEEDED = *(_DWORD *)(a1 + 16);
  }
  memset(v196, 0, sizeof(v196));
  int v197 = 1065353216;
  uint64_t v6 = (unint64_t *)**a2;
  uint64_t v7 = (unint64_t *)(*a2)[1];
  if (v6 == v7)
  {
    uint64_t v10 = **a2;
  }
  else
  {
    do
    {
      uint64_t v8 = (void *)v6[1];
      v192[0] = *v6;
      p_p = v8;
      v194[0] = v192;
      unint64_t v9 = std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v196, v192, (uint64_t)&std::piecewise_construct, v194);
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>((uint64_t)(v9 + 3), (unint64_t *)&p_p, &p_p);
      v6 += 3;
    }
    while (v6 != v7);
    uint64_t v10 = **a2;
    uint64_t v6 = (unint64_t *)(*a2)[1];
  }
  unint64_t v11 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v10) >> 3));
  if (v6 == (unint64_t *)v10) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  std::__introsort<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)::$_0 &,std::tuple<long long,long long,float>*,false>(v10, (unint64_t)v6, v12, 1);
  unint64_t v13 = (char *)operator new(0x30uLL);
  v172 = a3;
  uint64_t v173 = a1;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = 0;
  BOOL v14 = (uint64_t **)(v13 + 24);
  *(void *)unint64_t v13 = &unk_26D9874D0;
  *((void *)v13 + 4) = 0;
  *((void *)v13 + 5) = 0;
  memset(v194, 0, sizeof(v194));
  int v195 = 1065353216;
  memset(v192, 0, sizeof(v192));
  int v193 = 1065353216;
  unint64_t v191 = 0;
  srand(0x7C0u);
  uint64_t v16 = **a2;
  uint64_t v15 = (*a2)[1];
  if (v16 != v15)
  {
    v175 = (char **)(v13 + 24);
    uint64_t v176 = (uint64_t)(v13 + 40);
    uint64_t v174 = (*a2)[1];
    do
    {
      unint64_t v18 = *(void *)v16;
      unint64_t v17 = *(void *)(v16 + 8);
      float v19 = *(float *)(v16 + 16);
      int v177 = *(_DWORD *)(v16 + 20);
      unint64_t v189 = v17;
      unint64_t v190 = v18;
      uint64_t v20 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(v192, &v190);
      unint64_t v21 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(v192, &v189);
      if (v20)
      {
        uint64_t v22 = v20[3];
        if (!v21) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v22 = -1;
        if (!v21)
        {
LABEL_15:
          uint64_t v23 = -1;
          goto LABEL_16;
        }
      }
      uint64_t v23 = v21[3];
LABEL_16:
      if (v22 == -1 && v23 == -1)
      {
        p_p = &v191;
        uint64_t v24 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v194, &v191, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
        uint64_t v25 = v24;
        double v26 = (char *)v24[4];
        uint64_t v27 = (uint64_t)(v24 + 5);
        unint64_t v28 = v24[5];
        if ((unint64_t)v26 >= v28)
        {
          float v53 = (char *)v24[3];
          uint64_t v54 = (v26 - v53) >> 3;
          if ((unint64_t)(v54 + 1) >> 61) {
            goto LABEL_195;
          }
          unint64_t v55 = v28 - (void)v53;
          unint64_t v56 = (uint64_t)(v28 - (void)v53) >> 2;
          if (v56 <= v54 + 1) {
            unint64_t v56 = v54 + 1;
          }
          if (v55 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v56;
          }
          if (v57)
          {
            CGFloat v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v27, v57);
            float v53 = (char *)v25[3];
            double v26 = (char *)v25[4];
          }
          else
          {
            CGFloat v58 = 0;
          }
          CGRect v77 = &v58[8 * v54];
          *(void *)CGRect v77 = v190;
          unint64_t v29 = v77 + 8;
          while (v26 != v53)
          {
            uint64_t v78 = *((void *)v26 - 1);
            v26 -= 8;
            *((void *)v77 - 1) = v78;
            v77 -= 8;
          }
          v25[3] = v77;
          v25[4] = v29;
          v25[5] = &v58[8 * v57];
          if (v53) {
            operator delete(v53);
          }
        }
        else
        {
          *(void *)double v26 = v190;
          unint64_t v29 = v26 + 8;
        }
        v25[4] = v29;
        p_p = &v191;
        CGRect v79 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v194, &v191, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
        CGRect v80 = v79;
        CGRect v81 = (char *)v79[4];
        uint64_t v82 = (uint64_t)(v79 + 5);
        unint64_t v83 = v79[5];
        if ((unint64_t)v81 >= v83)
        {
          v85 = (char *)v79[3];
          uint64_t v86 = (v81 - v85) >> 3;
          if ((unint64_t)(v86 + 1) >> 61) {
LABEL_195:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          unint64_t v87 = v83 - (void)v85;
          unint64_t v88 = (uint64_t)(v83 - (void)v85) >> 2;
          if (v88 <= v86 + 1) {
            unint64_t v88 = v86 + 1;
          }
          if (v87 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v89 = v88;
          }
          if (v89)
          {
            v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v82, v89);
            v85 = (char *)v80[3];
            CGRect v81 = (char *)v80[4];
          }
          else
          {
            v90 = 0;
          }
          v91 = &v90[8 * v86];
          *(void *)v91 = v189;
          CGRect v84 = v91 + 8;
          while (v81 != v85)
          {
            uint64_t v92 = *((void *)v81 - 1);
            v81 -= 8;
            *((void *)v91 - 1) = v92;
            v91 -= 8;
          }
          v80[3] = v91;
          v80[4] = v84;
          v80[5] = &v90[8 * v89];
          if (v85) {
            operator delete(v85);
          }
        }
        else
        {
          *(void *)CGRect v81 = v189;
          CGRect v84 = v81 + 8;
        }
        v80[4] = v84;
        unint64_t v93 = v191;
        p_p = &v190;
        std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v192, &v190, (uint64_t)&std::piecewise_construct, (void **)&p_p)[3] = v93;
        unint64_t v94 = v191;
        p_p = &v189;
        std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v192, &v189, (uint64_t)&std::piecewise_construct, (void **)&p_p)[3] = v94;
        ++v191;
        unint64_t v96 = *((void *)v13 + 4);
        unint64_t v95 = *((void *)v13 + 5);
        if (v96 >= v95)
        {
          unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - (void)*v14) >> 3);
          unint64_t v98 = v97 + 1;
          if (v97 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - (void)*v14) >> 3);
          if (2 * v99 > v98) {
            unint64_t v98 = 2 * v99;
          }
          if (v99 >= 0x555555555555555) {
            unint64_t v100 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v100 = v98;
          }
          if (v100) {
            v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(v176, v100);
          }
          else {
            v101 = 0;
          }
          v102 = &v101[24 * v97];
          *(void *)v102 = v18;
          *((void *)v102 + 1) = v17;
          *((float *)v102 + 4) = v19;
          *((_DWORD *)v102 + 5) = v177;
          v104 = (uint64_t *)*((void *)v13 + 3);
          v103 = (uint64_t *)*((void *)v13 + 4);
          v105 = v102;
          if (v103 != v104)
          {
            do
            {
              long long v106 = *(_OWORD *)(v103 - 3);
              *((void *)v105 - 1) = *(v103 - 1);
              *(_OWORD *)(v105 - 24) = v106;
              v105 -= 24;
              v103 -= 3;
            }
            while (v103 != v104);
            goto LABEL_179;
          }
          goto LABEL_180;
        }
      }
      else if (v22 == -1)
      {
        __p = 0;
        p_p = &v189;
        __p = (void *)std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v192, &v189, (uint64_t)&std::piecewise_construct, (void **)&p_p)[3];
        p_p = &__p;
        double v59 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v194, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
        CGFloat v60 = v59;
        CGRect v61 = (char *)v59[4];
        uint64_t v62 = (uint64_t)(v59 + 5);
        unint64_t v63 = v59[5];
        if ((unint64_t)v61 >= v63)
        {
          CGRect v71 = (char *)v59[3];
          uint64_t v72 = (v61 - v71) >> 3;
          if ((unint64_t)(v72 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v73 = v63 - (void)v71;
          unint64_t v74 = (uint64_t)(v63 - (void)v71) >> 2;
          if (v74 <= v72 + 1) {
            unint64_t v74 = v72 + 1;
          }
          if (v73 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v75 = v74;
          }
          if (v75)
          {
            CGRect v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v62, v75);
            CGRect v71 = (char *)v60[3];
            CGRect v61 = (char *)v60[4];
          }
          else
          {
            CGRect v76 = 0;
          }
          v113 = &v76[8 * v72];
          *(void *)v113 = v190;
          CGRect v64 = v113 + 8;
          while (v61 != v71)
          {
            uint64_t v114 = *((void *)v61 - 1);
            v61 -= 8;
            *((void *)v113 - 1) = v114;
            v113 -= 8;
          }
          v60[3] = v113;
          v60[4] = v64;
          v60[5] = &v76[8 * v75];
          if (v71) {
            operator delete(v71);
          }
        }
        else
        {
          *(void *)CGRect v61 = v190;
          CGRect v64 = v61 + 8;
        }
        v60[4] = v64;
        v115 = __p;
        p_p = &v190;
        std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v192, &v190, (uint64_t)&std::piecewise_construct, (void **)&p_p)[3] = v115;
        unint64_t v96 = *((void *)v13 + 4);
        unint64_t v116 = *((void *)v13 + 5);
        if (v96 >= v116)
        {
          unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - (void)*v14) >> 3);
          unint64_t v118 = v117 + 1;
          if (v117 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - (void)*v14) >> 3);
          if (2 * v119 > v118) {
            unint64_t v118 = 2 * v119;
          }
          if (v119 >= 0x555555555555555) {
            unint64_t v100 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v100 = v118;
          }
          if (v100) {
            v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(v176, v100);
          }
          else {
            v101 = 0;
          }
          v102 = &v101[24 * v117];
          *(void *)v102 = v18;
          *((void *)v102 + 1) = v17;
          *((float *)v102 + 4) = v19;
          *((_DWORD *)v102 + 5) = v177;
          v120 = (uint64_t *)*((void *)v13 + 3);
          v103 = (uint64_t *)*((void *)v13 + 4);
          v105 = v102;
          if (v103 != v120)
          {
            do
            {
              long long v121 = *(_OWORD *)(v103 - 3);
              *((void *)v105 - 1) = *(v103 - 1);
              *(_OWORD *)(v105 - 24) = v121;
              v105 -= 24;
              v103 -= 3;
            }
            while (v103 != v120);
LABEL_179:
            v103 = *v14;
          }
LABEL_180:
          v160 = v102 + 24;
          *((void *)v13 + 3) = v105;
          *((void *)v13 + 4) = v102 + 24;
          *((void *)v13 + 5) = &v101[24 * v100];
          if (v103) {
            operator delete(v103);
          }
          goto LABEL_182;
        }
      }
      else
      {
        if (v23 != -1)
        {
          unint64_t v188 = 0;
          p_p = &v190;
          unint64_t v30 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v192, &v190, (uint64_t)&std::piecewise_construct, (void **)&p_p)[3];
          unint64_t v187 = 0;
          unint64_t v188 = v30;
          p_p = &v189;
          unint64_t v187 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v192, &v189, (uint64_t)&std::piecewise_construct, (void **)&p_p)[3];
          if (v188 != v187)
          {
            p_p = &v188;
            unint64_t v31 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v194, &v188, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
            uint64_t v33 = v31[3];
            uint64_t v32 = v31[4];
            p_p = &v187;
            unint64_t v34 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v194, &v187, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
            if (v19 <= 0.0) {
              goto LABEL_132;
            }
            uint64_t v36 = v34[3];
            uint64_t v35 = v34[4];
            float v37 = *(float *)&homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)const::PCT_CONNECTIONS_NEEDED;
            __p = &v188;
            uint64_t v38 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v194, &v188, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
            v185 = 0;
            uint64_t v186 = 0;
            p_p = 0;
            std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&p_p, (const void *)v38[3], v38[4], (uint64_t)(v38[4] - v38[3]) >> 3);
            v198[0] = (uint64_t *)&v187;
            uint64_t v39 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v194, &v187, (uint64_t)&std::piecewise_construct, v198);
            v182 = 0;
            uint64_t v183 = 0;
            __p = 0;
            std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&__p, (const void *)v39[3], v39[4], (uint64_t)(v39[4] - v39[3]) >> 3);
            unint64_t v40 = (unint64_t)(float)((float)(v37 * (float)(unint64_t)((v32 - v33) >> 3))
                                          * (float)(unint64_t)((v35 - v36) >> 3));
            if (v40 < 0x32)
            {
              v122 = (unint64_t *)p_p;
              v123 = v185;
              if (p_p == v185)
              {
LABEL_126:
                char v129 = 1;
              }
              else
              {
                uint64_t v124 = 0;
                do
                {
                  unint64_t v180 = 0;
                  unint64_t v180 = *v122;
                  v125 = (unint64_t *)__p;
                  v126 = v182;
                  while (v125 != v126)
                  {
                    unint64_t v179 = 0;
                    unint64_t v179 = *v125;
                    v198[0] = (uint64_t *)&v180;
                    v127 = std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v196, &v180, (uint64_t)&std::piecewise_construct, v198);
                    if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v127 + 3, &v179)|| (v198[0] = (uint64_t *)&v179, v128 = std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v196, &v179, (uint64_t)&std::piecewise_construct, v198), std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v128 + 3, &v180)))
                    {
                      if (++v124 >= v40) {
                        goto LABEL_125;
                      }
                    }
                    ++v125;
                  }
                  ++v122;
                  char v129 = 1;
                }
                while (v122 != v123);
              }
            }
            else
            {
              uint64_t v41 = 0;
              unint64_t v42 = (unint64_t)(float)(*(float *)&homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)const::PCT_CONNECTIONS_NEEDED
                                            * 50.0);
              unint64_t v43 = ((char *)v185 - (unsigned char *)p_p) >> 3;
              unint64_t v44 = ((char *)v182 - (unsigned char *)__p) >> 3;
              int v45 = 50;
              while (1)
              {
                int v46 = rand();
                int v47 = rand();
                unint64_t v48 = v46 % v43;
                unint64_t v180 = 0;
                if (v48 >= ((char *)v185 - (unsigned char *)p_p) >> 3) {
                  std::vector<long long>::__throw_out_of_range[abi:ne180100]();
                }
                unint64_t v49 = v47 % v44;
                unint64_t v50 = *((void *)p_p + v48);
                unint64_t v179 = 0;
                unint64_t v180 = v50;
                if (v49 >= ((char *)v182 - (unsigned char *)__p) >> 3) {
                  std::vector<long long>::__throw_out_of_range[abi:ne180100]();
                }
                unint64_t v179 = *((void *)__p + v49);
                v198[0] = (uint64_t *)&v180;
                uint64_t v51 = std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v196, &v180, (uint64_t)&std::piecewise_construct, v198);
                if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v51 + 3, &v179)|| (v198[0] = (uint64_t *)&v179, uint64_t v52 = std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v196, &v179, (uint64_t)&std::piecewise_construct, v198), std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v52 + 3, &v180)))
                {
                  if (++v41 >= v42) {
                    break;
                  }
                }
                if (!--v45) {
                  goto LABEL_126;
                }
              }
LABEL_125:
              char v129 = 0;
            }
            if (__p)
            {
              v182 = (unint64_t *)__p;
              operator delete(__p);
            }
            uint64_t v15 = v174;
            BOOL v14 = (uint64_t **)(v13 + 24);
            if (p_p)
            {
              v185 = (unint64_t *)p_p;
              operator delete(p_p);
            }
            if ((v129 & 1) == 0)
            {
LABEL_132:
              p_p = &v187;
              v130 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v194, &v187, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
              v131 = (void **)v130[3];
              for (unint64_t i = (void **)v130[4]; v131 != i; ++v131)
              {
                __p = 0;
                __p = *v131;
                p_p = &v188;
                v133 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v194, &v188, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
                v134 = v133;
                v135 = (char *)v133[4];
                uint64_t v136 = (uint64_t)(v133 + 5);
                unint64_t v137 = v133[5];
                if ((unint64_t)v135 >= v137)
                {
                  v139 = (char *)v133[3];
                  uint64_t v140 = (v135 - v139) >> 3;
                  if ((unint64_t)(v140 + 1) >> 61) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v141 = v137 - (void)v139;
                  unint64_t v142 = (uint64_t)(v137 - (void)v139) >> 2;
                  if (v142 <= v140 + 1) {
                    unint64_t v142 = v140 + 1;
                  }
                  if (v141 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v143 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v143 = v142;
                  }
                  if (v143)
                  {
                    v144 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v136, v143);
                    v139 = (char *)v134[3];
                    v135 = (char *)v134[4];
                  }
                  else
                  {
                    v144 = 0;
                  }
                  v145 = (void **)&v144[8 * v140];
                  *v145 = __p;
                  v138 = v145 + 1;
                  while (v135 != v139)
                  {
                    v146 = (void *)*((void *)v135 - 1);
                    v135 -= 8;
                    *--v145 = v146;
                  }
                  v134[3] = v145;
                  v134[4] = v138;
                  v134[5] = &v144[8 * v143];
                  if (v139) {
                    operator delete(v139);
                  }
                }
                else
                {
                  *(void *)v135 = __p;
                  v138 = v135 + 8;
                }
                v134[4] = v138;
                unint64_t v147 = v188;
                p_p = &__p;
                std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v192, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (void **)&p_p)[3] = v147;
              }
              std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__erase_unique<long long>(v194, &v187);
              uint64_t v15 = v174;
              BOOL v14 = (uint64_t **)(v13 + 24);
              unint64_t v149 = *((void *)v13 + 4);
              unint64_t v148 = *((void *)v13 + 5);
              if (v149 >= v148)
              {
                unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - (void)*v175) >> 3);
                unint64_t v152 = v151 + 1;
                if (v151 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v153 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - (void)*v175) >> 3);
                if (2 * v153 > v152) {
                  unint64_t v152 = 2 * v153;
                }
                if (v153 >= 0x555555555555555) {
                  unint64_t v154 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v154 = v152;
                }
                if (v154) {
                  v155 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(v176, v154);
                }
                else {
                  v155 = 0;
                }
                v166 = &v155[24 * v151];
                *(void *)v166 = v18;
                *((void *)v166 + 1) = v17;
                *((float *)v166 + 4) = v19;
                *((_DWORD *)v166 + 5) = v177;
                v168 = (char *)*((void *)v13 + 3);
                v167 = (char *)*((void *)v13 + 4);
                v169 = v166;
                if (v167 != v168)
                {
                  do
                  {
                    long long v170 = *(_OWORD *)(v167 - 24);
                    *((void *)v169 - 1) = *((void *)v167 - 1);
                    *(_OWORD *)(v169 - 24) = v170;
                    v169 -= 24;
                    v167 -= 24;
                  }
                  while (v167 != v168);
                  v167 = *v175;
                }
                v150 = v166 + 24;
                *((void *)v13 + 3) = v169;
                *((void *)v13 + 4) = v166 + 24;
                *((void *)v13 + 5) = &v155[24 * v154];
                if (v167) {
                  operator delete(v167);
                }
              }
              else
              {
                *(void *)unint64_t v149 = v18;
                *(void *)(v149 + _Block_object_dispose(&a9, 8) = v17;
                *(float *)(v149 + 16) = v19;
                v150 = (char *)(v149 + 24);
                *(_DWORD *)(v149 + 20) = v177;
              }
              *((void *)v13 + 4) = v150;
            }
          }
          goto LABEL_183;
        }
        __p = 0;
        p_p = &v190;
        __p = (void *)std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v192, &v190, (uint64_t)&std::piecewise_construct, (void **)&p_p)[3];
        p_p = &__p;
        CGRect v65 = std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v194, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p);
        CGRect v66 = v65;
        CGRect v67 = (char *)v65[4];
        uint64_t v68 = (uint64_t)(v65 + 5);
        unint64_t v69 = v65[5];
        if ((unint64_t)v67 >= v69)
        {
          v107 = (char *)v65[3];
          uint64_t v108 = (v67 - v107) >> 3;
          if ((unint64_t)(v108 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v109 = v69 - (void)v107;
          unint64_t v110 = (uint64_t)(v69 - (void)v107) >> 2;
          if (v110 <= v108 + 1) {
            unint64_t v110 = v108 + 1;
          }
          if (v109 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v111 = v110;
          }
          if (v111)
          {
            v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v68, v111);
            v107 = (char *)v66[3];
            CGRect v67 = (char *)v66[4];
          }
          else
          {
            v112 = 0;
          }
          v156 = &v112[8 * v108];
          *(void *)v156 = v189;
          CGRect v70 = v156 + 8;
          while (v67 != v107)
          {
            uint64_t v157 = *((void *)v67 - 1);
            v67 -= 8;
            *((void *)v156 - 1) = v157;
            v156 -= 8;
          }
          v66[3] = v156;
          v66[4] = v70;
          v66[5] = &v112[8 * v111];
          if (v107) {
            operator delete(v107);
          }
        }
        else
        {
          *(void *)CGRect v67 = v189;
          CGRect v70 = v67 + 8;
        }
        v66[4] = v70;
        v158 = __p;
        p_p = &v189;
        std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v192, &v189, (uint64_t)&std::piecewise_construct, (void **)&p_p)[3] = v158;
        unint64_t v96 = *((void *)v13 + 4);
        unint64_t v159 = *((void *)v13 + 5);
        if (v96 >= v159)
        {
          unint64_t v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - (void)*v14) >> 3);
          unint64_t v162 = v161 + 1;
          if (v161 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v163 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v159 - (void)*v14) >> 3);
          if (2 * v163 > v162) {
            unint64_t v162 = 2 * v163;
          }
          if (v163 >= 0x555555555555555) {
            unint64_t v100 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v100 = v162;
          }
          if (v100) {
            v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(v176, v100);
          }
          else {
            v101 = 0;
          }
          v102 = &v101[24 * v161];
          *(void *)v102 = v18;
          *((void *)v102 + 1) = v17;
          *((float *)v102 + 4) = v19;
          *((_DWORD *)v102 + 5) = v177;
          v164 = (uint64_t *)*((void *)v13 + 3);
          v103 = (uint64_t *)*((void *)v13 + 4);
          v105 = v102;
          if (v103 != v164)
          {
            do
            {
              long long v165 = *(_OWORD *)(v103 - 3);
              *((void *)v105 - 1) = *(v103 - 1);
              *(_OWORD *)(v105 - 24) = v165;
              v105 -= 24;
              v103 -= 3;
            }
            while (v103 != v164);
            goto LABEL_179;
          }
          goto LABEL_180;
        }
      }
      *(void *)unint64_t v96 = v18;
      *(void *)(v96 + _Block_object_dispose(&a9, 8) = v17;
      *(float *)(v96 + 16) = v19;
      v160 = (char *)(v96 + 24);
      *(_DWORD *)(v96 + 20) = v177;
LABEL_182:
      *((void *)v13 + 4) = v160;
LABEL_183:
      v16 += 24;
    }
    while (v16 != v15);
  }
  std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::clear((uint64_t)v196);
  std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::clear((uint64_t)v194);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::clear(v192);
  v178[0] = v14;
  v178[1] = (uint64_t **)v13;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  homeai::clustering::GreedyClusterer::getConnectedComponentsWithoutFiltering(v173, v178, v172);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13);
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)v192);
  std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::~__hash_table((uint64_t)v194);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13);
  return std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::~__hash_table((uint64_t)v196);
}

void sub_225E009E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)&a31);
  std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::~__hash_table((uint64_t)&a37);
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::~__hash_table(v38 - 176);
  _Unwind_Resume(a1);
}

void homeai::clustering::GreedyClusterer::getConnectedComponentsWithoutFiltering(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t *a3@<X8>)
{
  v82[1] = *MEMORY[0x263EF8340];
  std::vector<int>::vector(&v78, (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4);
  std::vector<int>::pointer begin = v78.__begin_;
  std::vector<int>::pointer end = v78.__end_;
  if (v78.__begin_ != v78.__end_)
  {
    int v7 = 0;
    do
      *begin++ = v7++;
    while (begin != end);
  }
  std::vector<std::vector<long long>>::vector(&v76, (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4);
  uint64_t v8 = **a2;
  for (unint64_t i = (*a2)[1]; v8 != i; v8 += 3)
  {
    uint64_t v10 = *v8;
    uint64_t v11 = v8[1];
    uint64_t v12 = v76 + 24 * *v8;
    BOOL v14 = (void **)(v12 + 8);
    unint64_t v13 = *(void **)(v12 + 8);
    uint64_t v16 = (void *)(v12 + 16);
    unint64_t v15 = *(void *)(v12 + 16);
    if ((unint64_t)v13 >= v15)
    {
      unint64_t v18 = *(void **)v12;
      uint64_t v19 = ((uint64_t)v13 - *(void *)v12) >> 3;
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 61) {
        goto LABEL_86;
      }
      uint64_t v21 = v15 - (void)v18;
      if (v21 >> 2 > v20) {
        unint64_t v20 = v21 >> 2;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v20;
      }
      if (v22)
      {
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)v16, v22);
        unint64_t v13 = *v14;
        unint64_t v18 = *(void **)v12;
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v24 = &v23[8 * v19];
      *(void *)uint64_t v24 = v11;
      unint64_t v17 = v24 + 8;
      while (v13 != v18)
      {
        uint64_t v25 = *--v13;
        *((void *)v24 - 1) = v25;
        v24 -= 8;
      }
      *(void *)uint64_t v12 = v24;
      char *v14 = v17;
      void *v16 = &v23[8 * v22];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *unint64_t v13 = v11;
      unint64_t v17 = v13 + 1;
    }
    char *v14 = v17;
    uint64_t v26 = v76 + 24 * v11;
    unint64_t v28 = (void **)(v26 + 8);
    uint64_t v27 = *(void **)(v26 + 8);
    unint64_t v30 = (void *)(v26 + 16);
    unint64_t v29 = *(void *)(v26 + 16);
    if ((unint64_t)v27 >= v29)
    {
      uint64_t v32 = *(void **)v26;
      uint64_t v33 = ((uint64_t)v27 - *(void *)v26) >> 3;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61) {
LABEL_86:
      }
        std::vector<int>::__throw_length_error[abi:ne180100]();
      uint64_t v35 = v29 - (void)v32;
      if (v35 >> 2 > v34) {
        unint64_t v34 = v35 >> 2;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36)
      {
        float v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)v30, v36);
        uint64_t v27 = *v28;
        uint64_t v32 = *(void **)v26;
      }
      else
      {
        float v37 = 0;
      }
      uint64_t v38 = &v37[8 * v33];
      *(void *)uint64_t v38 = v10;
      unint64_t v31 = v38 + 8;
      while (v27 != v32)
      {
        uint64_t v39 = *--v27;
        *((void *)v38 - 1) = v39;
        v38 -= 8;
      }
      *(void *)uint64_t v26 = v38;
      char *v28 = v31;
      void *v30 = &v37[8 * v36];
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      void *v27 = v10;
      unint64_t v31 = v27 + 1;
    }
    char *v28 = v31;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v75[0] = 0;
  v75[1] = 0;
  unint64_t v74 = (uint64_t *)v75;
  CGRect v80 = 0;
  std::list<long long>::list(&v71, (uint64_t)&v80, 1);
  CGRect v80 = 0;
  CGRect v81 = 0;
  v82[0] = 0;
  if (v77 != v76)
  {
    int v40 = 0;
    do
    {
      uint64_t v70 = 0;
      uint64_t v41 = v73;
      if (v73)
      {
        unint64_t v42 = (void **)__p;
        uint64_t v70 = *((void *)__p + 2);
        uint64_t v43 = *(void *)__p;
        *(void *)(v43 + _Block_object_dispose(&a9, 8) = *((void *)__p + 1);
        *v42[1] = v43;
        uint64_t v73 = v41 - 1;
        operator delete(v42);
        goto LABEL_57;
      }
      unint64_t v44 = a3[1];
      if (v44 >= a3[2])
      {
        uint64_t v45 = std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(a3, (uint64_t)&v80);
      }
      else
      {
        std::vector<std::vector<long long>>::__construct_one_at_end[abi:ne180100]<std::vector<long long> const&>((uint64_t)a3, (uint64_t)&v80);
        uint64_t v45 = v44 + 24;
      }
      a3[1] = v45;
      int v46 = v80;
      CGRect v81 = v80;
      unint64_t v47 = v78.__end_ - v78.__begin_;
      if (v47 <= v40) {
        goto LABEL_81;
      }
      uint64_t v48 = v40;
LABEL_47:
      uint64_t v49 = v78.__begin_[v48];
      if (v75[0])
      {
        unint64_t v50 = v75[0];
        while (1)
        {
          uint64_t v51 = v50[4];
          if (v51 <= v49)
          {
            if (v51 >= v49)
            {
              if (v47 <= ++v48) {
                goto LABEL_81;
              }
              goto LABEL_47;
            }
            ++v50;
          }
          unint64_t v50 = (void *)*v50;
          if (!v50)
          {
            int v40 = v48;
            break;
          }
        }
      }
      uint64_t v70 = v78.__begin_[v48];
      ++v40;
LABEL_57:
      CGRect v79 = &v70;
      if (!*((unsigned char *)std::__tree<std::__value_type<long long,BOOL>,std::__map_value_compare<long long,std::__value_type<long long,BOOL>,std::less<long long>,true>,std::allocator<std::__value_type<long long,BOOL>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v74, &v70, (uint64_t)&std::piecewise_construct, &v79)+ 40))
      {
        CGRect v79 = &v70;
        *((unsigned char *)std::__tree<std::__value_type<long long,BOOL>,std::__map_value_compare<long long,std::__value_type<long long,BOOL>,std::less<long long>,true>,std::allocator<std::__value_type<long long,BOOL>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v74, &v70, (uint64_t)&std::piecewise_construct, &v79)+ 40) = 1;
        uint64_t v52 = v81;
        if ((unint64_t)v81 >= v82[0])
        {
          uint64_t v54 = v80;
          uint64_t v55 = (v81 - v80) >> 3;
          unint64_t v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v57 = v82[0] - (void)v80;
          if ((uint64_t)(v82[0] - (void)v80) >> 2 > v56) {
            unint64_t v56 = v57 >> 2;
          }
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v58 = v56;
          }
          if (v58)
          {
            double v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)v82, v58);
            uint64_t v54 = v80;
            uint64_t v52 = v81;
          }
          else
          {
            double v59 = 0;
          }
          CGFloat v60 = &v59[8 * v55];
          *(void *)CGFloat v60 = v70;
          float v53 = v60 + 8;
          while (v52 != v54)
          {
            uint64_t v61 = *((void *)v52 - 1);
            v52 -= 8;
            *((void *)v60 - 1) = v61;
            v60 -= 8;
          }
          CGRect v80 = v60;
          CGRect v81 = v53;
          v82[0] = &v59[8 * v58];
          if (v54) {
            operator delete(v54);
          }
        }
        else
        {
          *(void *)CGRect v81 = v70;
          float v53 = v52 + 8;
        }
        CGRect v81 = v53;
        uint64_t v62 = (uint64_t **)(v76 + 24 * v70);
        unint64_t v63 = *v62;
        CGRect v64 = v62[1];
        while (v63 != v64)
        {
          uint64_t v69 = 0;
          uint64_t v69 = *v63;
          CGRect v79 = &v69;
          if (!*((unsigned char *)std::__tree<std::__value_type<long long,BOOL>,std::__map_value_compare<long long,std::__value_type<long long,BOOL>,std::less<long long>,true>,std::allocator<std::__value_type<long long,BOOL>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v74, &v69, (uint64_t)&std::piecewise_construct, &v79)+ 40))
          {
            CGRect v65 = operator new(0x18uLL);
            uint64_t v66 = v69;
            v65[1] = &v71;
            v65[2] = v66;
            CGRect v67 = v71;
            *CGRect v65 = v71;
            v67[1] = v65;
            CGRect v71 = v65;
            ++v73;
          }
          ++v63;
        }
      }
    }
    while (v77 != v76);
    int v46 = v80;
LABEL_81:
    if (v46)
    {
      CGRect v81 = v46;
      operator delete(v46);
    }
  }
  std::__list_imp<long long>::clear(&v71);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&v74, v75[0]);
  unint64_t v74 = &v76;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (v78.__begin_)
  {
    v78.__end_ = v78.__begin_;
    operator delete(v78.__begin_);
  }
}

void sub_225E01030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, void *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  a15 = a9;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a15 = &a18;
  std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__list_imp<long long>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    int64x2_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + _Block_object_dispose(&a9, 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + _Block_object_dispose(&a9, 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        unint64_t v4 = (void *)result[1];
        operator delete(result);
        int64x2_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void std::vector<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy(a1, a2[1]);
    std::__list_imp<long long>::clear(a2 + 5);
    operator delete(a2);
  }
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t *std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__find_equal<long long>(a1, a2, &v11, &v10, a3);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    int v7 = (uint64_t *)operator new(0x28uLL);
    _OWORD v7[4] = *a4;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  unint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = (uint64_t *)operator new(0x40uLL);
    v14[1] = v7;
    _OWORD v12[4] = **a4;
    v12[5] = (uint64_t)(v12 + 5);
    v12[6] = (uint64_t)(v12 + 5);
    v12[7] = 0;
    char v15 = 1;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__list_imp<long long>::clear(v2 + 5);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<long long,unsigned long>,std::__map_value_compare<long long,std::__value_type<long long,unsigned long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,unsigned long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        uint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (uint64_t *)operator new(0x30uLL);
    _OWORD v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::map<unsigned long,std::list<long long>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned long,std::list<long long>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,std::list<long long>>,std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_225E0155C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long,std::list<long long>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,std::list<long long>>,std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      int64x2_t result = std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,std::list<long long>> const&>(v5, v6, v4 + 4, v4 + 4);
      int v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,std::list<long long>> const&>(uint64_t **a1, void *a2, unint64_t *a3, void *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__find_equal<unsigned long>(a1, a2, &v12, &v11, a3);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__construct_node<std::pair<unsigned long const,std::list<long long>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, v12, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__find_equal<unsigned long>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      unint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    unint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          unint64_t v20 = (void *)*v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        unint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *std::__tree<std::__value_type<unsigned long,std::list<long long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::list<long long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::list<long long>>>>::__construct_node<std::pair<unsigned long const,std::list<long long>> const&>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&a9, 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[4] = *a2;
  int64x2_t result = std::list<long long>::list(v6 + 5, (uint64_t)(a2 + 1));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_225E0189C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::list<long long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::list<long long>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    unint64_t v6 = a1;
    do
    {
      unint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      void *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      unint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_225E0193C(_Unwind_Exception *a1)
{
  std::__list_imp<long long>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<std::vector<long long>,std::allocator<std::vector<long long>>,unsigned long &,void>@<X0>(unint64_t *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x30uLL);
  int64x2_t result = std::__shared_ptr_emplace<std::vector<long long>>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<std::vector<long long>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_225E01998(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::vector<long long>>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<std::vector<long long>>,0>(void *a1, unint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D987430;
  std::vector<long long>::vector(a1 + 3, *a2);
  return a1;
}

void sub_225E019F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D987430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D987430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A641780);
}

void std::__shared_ptr_emplace<std::vector<long long>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *std::vector<long long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_225E01AF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<homeai::clustering::GreedyClusterer::cluster_t,std::allocator<homeai::clustering::GreedyClusterer::cluster_t>,int &,float *&,long long &,int,void>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int *a5)
{
  BOOL v9 = operator new(0x30uLL);
  std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer::cluster_t>::__shared_ptr_emplace[abi:ne180100]<int &,float *&,long long &,int,std::allocator<homeai::clustering::GreedyClusterer::cluster_t>,0>((uint64_t)v9, a2, a3, a4, a5);
}

void sub_225E01B7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer::cluster_t>::__shared_ptr_emplace[abi:ne180100]<int &,float *&,long long &,int,std::allocator<homeai::clustering::GreedyClusterer::cluster_t>,0>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int *a5)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26D987480;
  int v5 = *a5;
  *(void *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 32) = v5;
  operator new[]();
}

void sub_225E01C24(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer::cluster_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D987480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer::cluster_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D987480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A641780);
}

uint64_t std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer::cluster_t>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    JUMPOUT(0x22A641760);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>,std::reverse_iterator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>*>,std::reverse_iterator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>*>,std::reverse_iterator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>,std::reverse_iterator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>*>,std::reverse_iterator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>*>,std::reverse_iterator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>,std::reverse_iterator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>,std::reverse_iterator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>,std::reverse_iterator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>,std::reverse_iterator<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<homeai::clustering::GreedyClusterer::cluster_t>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    unint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void std::__shared_ptr_emplace<std::vector<std::tuple<long long,long long,float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D9874D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::tuple<long long,long long,float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D9874D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A641780);
}

void std::__shared_ptr_emplace<std::vector<std::tuple<long long,long long,float>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::vector<std::vector<long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<long long>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<long long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *,false>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = (float *)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v29 = *(a2 - 3);
          uint64_t v30 = *(void *)v11;
          if (v29 < *(void *)v11
            || v30 >= v29
            && ((uint64_t v31 = *(a2 - 2), v32 = *((void *)v11 + 1), v31 < v32) || v32 >= v31 && *((float *)a2 - 2) < v11[4]))
          {
            *(void *)uint64_t v11 = v29;
            *(a2 - 3) = v30;
            uint64_t v33 = *((void *)v11 + 1);
            *((void *)v11 + 1) = *(a2 - 2);
            *(a2 - 2) = v33;
            int v34 = *((_DWORD *)v11 + 4);
            _OWORD v11[4] = *((float *)a2 - 2);
            *((_DWORD *)a2 - 2) = v34;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)v11, (uint64_t *)v11 + 3, a2 - 3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t)v11, (uint64_t)(v11 + 6), (uint64_t)(v11 + 12), (uint64_t)(a2 - 3));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t)v11, (uint64_t)(v11 + 6), (uint64_t)(v11 + 12), (uint64_t)(v11 + 18), a2 - 3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 575) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (float *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *,std::tuple<long long,long long,float> *>((uint64_t)v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[6 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)v11, (uint64_t *)&v11[6 * (v15 >> 1)], a2 - 3);
      uint64_t v18 = 3 * v16;
      uint64_t v19 = (uint64_t *)&v11[6 * v16 - 6];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)v11 + 3, v19, a2 - 6);
      unint64_t v20 = (uint64_t *)(v11 + 12);
      uint64_t v21 = (uint64_t *)&v11[2 * v18 + 6];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(v20, v21, a2 - 9);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(v19, (uint64_t *)v17, v21);
      long long v22 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v22;
      LODWORD(v22) = *(_DWORD *)(a1 + 16);
      *(float *)(a1 + 16) = v17[4];
      *((_DWORD *)v17 + 4) = v22;
      if (a5) {
        goto LABEL_17;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)&v11[6 * (v15 >> 1)], (uint64_t *)v11, a2 - 3);
      if (a5) {
        goto LABEL_17;
      }
    }
    uint64_t v23 = *(void *)(a1 - 24);
    if (v23 >= *(void *)a1)
    {
      if (*(void *)a1 < v23
        || (v24 = *(void *)(a1 - 16), uint64_t v25 = *(void *)(a1 + 8), v24 >= v25)
        && (v25 < v24 || *(float *)(a1 - 8) >= *(float *)(a1 + 16)))
      {
        uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<long long,long long,float> *,std::__less<void,void> &>((uint64_t *)a1, (float *)a2);
        goto LABEL_22;
      }
    }
LABEL_17:
    unint64_t v26 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<long long,long long,float> *,std::__less<void,void> &>((float *)a1, (unint64_t)a2);
    if ((v27 & 1) == 0) {
      goto LABEL_20;
    }
    BOOL v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, v26);
    uint64_t v11 = (float *)(v26 + 24);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(v26 + 24, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (uint64_t *)v26;
      if (v28) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v28)
    {
LABEL_20:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *,false>(a1, v26, a3, -v13, a5 & 1);
      uint64_t v11 = (float *)(v26 + 24);
LABEL_22:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)v11, a2);
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t *result, uint64_t *a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 3;
  if (result + 3 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = result;
  do
  {
    char v5 = (float *)v4;
    uint64_t v4 = v2;
    uint64_t v6 = *((void *)v5 + 3);
    uint64_t v7 = *(void *)v5;
    if (v6 >= *(void *)v5)
    {
      if (v7 < v6) {
        goto LABEL_23;
      }
      uint64_t v8 = *((void *)v5 + 4);
      uint64_t v15 = *((void *)v5 + 1);
      if (v8 >= v15 && (v15 < v8 || v5[10] >= v5[4])) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v8 = *((void *)v5 + 4);
    }
    float v9 = v5[10];
    *((void *)v5 + 3) = v7;
    v4[1] = *((void *)v5 + 1);
    *((float *)v4 + 4) = v5[4];
    uint64_t v10 = (float *)result;
    if (v5 == (float *)result) {
      goto LABEL_22;
    }
    uint64_t v11 = v3;
    while (1)
    {
      uint64_t v12 = *(uint64_t *)((char *)result + v11 - 24);
      if (v6 < v12)
      {
        uint64_t v13 = *(uint64_t *)((char *)result + v11 - 16);
        goto LABEL_14;
      }
      if (v12 < v6) {
        goto LABEL_21;
      }
      uint64_t v13 = *(uint64_t *)((char *)result + v11 - 16);
      if (v8 >= v13) {
        break;
      }
LABEL_14:
      v5 -= 6;
      uint64_t v14 = (uint64_t)result + v11;
      *(void *)uint64_t v14 = v12;
      *(void *)(v14 + _Block_object_dispose(&a9, 8) = v13;
      *(_DWORD *)(v14 + 16) = *(_DWORD *)((char *)result + v11 - 8);
      v11 -= 24;
      if (!v11)
      {
        uint64_t v10 = (float *)result;
        goto LABEL_22;
      }
    }
    if (v13 >= v8)
    {
      uint64_t v10 = (float *)((char *)result + v11);
      if (v9 >= *(float *)((char *)result + v11 - 8)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
LABEL_21:
    uint64_t v10 = v5;
LABEL_22:
    *(void *)uint64_t v10 = v6;
    *((void *)v10 + 1) = v8;
    v10[4] = v9;
LABEL_23:
    uint64_t v2 = v4 + 3;
    v3 += 24;
  }
  while (v4 + 3 != a2);
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 3;
    if (result + 3 != a2)
    {
      for (uint64_t i = result + 1; ; i += 3)
      {
        uint64_t v4 = (float *)result;
        uint64_t result = v2;
        uint64_t v5 = *((void *)v4 + 3);
        uint64_t v6 = *(void *)v4;
        if (v5 < *(void *)v4) {
          break;
        }
        if (v6 >= v5)
        {
          uint64_t v7 = *((void *)v4 + 4);
          uint64_t v12 = *((void *)v4 + 1);
          if (v7 < v12 || v12 >= v7 && v4[10] < v4[4]) {
            goto LABEL_6;
          }
        }
LABEL_15:
        uint64_t v2 = result + 3;
        if (result + 3 == a2) {
          return result;
        }
      }
      uint64_t v7 = *((void *)v4 + 4);
LABEL_6:
      float v8 = v4[10];
      for (j = i; ; j -= 3)
      {
        uint64_t v10 = *j;
        j[2] = v6;
        j[3] = v10;
        *((_DWORD *)j + _Block_object_dispose(&a9, 8) = *((_DWORD *)j + 2);
        uint64_t v6 = *(j - 4);
        if (v5 >= v6)
        {
          if (v6 < v5) {
            break;
          }
          uint64_t v11 = *(j - 3);
          if (v7 >= v11 && (v11 < v7 || v8 >= *((float *)j - 4))) {
            break;
          }
        }
      }
      *(j - 1) = v5;
      uint64_t *j = v7;
      *((float *)j + 2) = v8;
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  if (*a2 < *a1
    || v4 >= v3 && ((v25 = a2[1], uint64_t v26 = a1[1], v25 < v26) || v26 >= v25 && *((float *)a2 + 4) < *((float *)a1 + 4)))
  {
    uint64_t v5 = *a3;
    if (*a3 < v3
      || v3 >= v5 && ((uint64_t v18 = a3[1], v19 = a2[1], v18 < v19) || v19 >= v18 && *((float *)a3 + 4) < *((float *)a2 + 4)))
    {
      *a1 = v5;
      *a3 = v4;
      uint64_t v6 = a1[1];
      a1[1] = a3[1];
      a3[1] = v6;
      int v7 = *((_DWORD *)a1 + 4);
      *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
      *((_DWORD *)a3 + 4) = v7;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      uint64_t v20 = a1[1];
      a1[1] = a2[1];
      a2[1] = v20;
      float v21 = *((float *)a1 + 4);
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      *((float *)a2 + 4) = v21;
      uint64_t v22 = *a3;
      uint64_t v23 = *a2;
      if (*a3 < *a2 || v23 >= v22 && ((uint64_t v29 = a3[1], v29 < v20) || v20 >= v29 && *((float *)a3 + 4) < v21))
      {
        *a2 = v22;
        *a3 = v23;
        uint64_t v24 = a2[1];
        a2[1] = a3[1];
        a3[1] = v24;
        *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
        *((float *)a3 + 4) = v21;
        return 2;
      }
    }
    return 1;
  }
  uint64_t v9 = *a3;
  if (*a3 < v3
    || v3 >= v9 && ((uint64_t v10 = a3[1], v11 = a2[1], v10 < v11) || v11 >= v10 && *((float *)a3 + 4) < *((float *)a2 + 4)))
  {
    *a2 = v9;
    *a3 = v3;
    uint64_t v12 = a2[1];
    a2[1] = a3[1];
    a3[1] = v12;
    int v13 = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
    *((_DWORD *)a3 + 4) = v13;
    uint64_t v14 = *a2;
    uint64_t v15 = *a1;
    if (*a2 < *a1
      || v15 >= v14 && ((uint64_t v27 = a2[1], v28 = a1[1], v27 < v28) || v28 >= v27 && *((float *)a2 + 4) < *((float *)a1 + 4)))
    {
      *a1 = v14;
      *a2 = v15;
      uint64_t v16 = a1[1];
      a1[1] = a2[1];
      a2[1] = v16;
      int v17 = *((_DWORD *)a1 + 4);
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = v17;
      return 2;
    }
    return 1;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<long long,long long,float> *,std::__less<void,void> &>(uint64_t *a1, float *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  float v4 = *((float *)a1 + 4);
  uint64_t v5 = *((void *)a2 - 3);
  if (*a1 >= v5 && (v5 < v2 || (uint64_t v6 = *((void *)a2 - 2), v3 >= v6) && (v6 < v3 || v4 >= *(a2 - 2))))
  {
    for (uint64_t i = (float *)(a1 + 3); i < a2; i += 6)
    {
      if (v2 < *(void *)i) {
        break;
      }
      if (*(void *)i >= v2)
      {
        uint64_t v23 = *((void *)i + 1);
        if (v3 < v23 || v23 >= v3 && v4 < i[4]) {
          break;
        }
      }
    }
  }
  else
  {
    uint64_t i = (float *)a1;
    while (1)
    {
      uint64_t v9 = *((void *)i + 3);
      i += 6;
      uint64_t v8 = v9;
      if (v2 < v9) {
        break;
      }
      if (v8 >= v2)
      {
        uint64_t v10 = *((void *)i + 1);
        if (v3 < v10 || v10 >= v3 && v4 < i[4]) {
          break;
        }
      }
    }
  }
  if (i < a2)
  {
    for (a2 -= 6; ; a2 -= 6)
    {
      if (v2 >= v5)
      {
        if (v5 < v2) {
          break;
        }
        uint64_t v11 = *((void *)a2 + 1);
        if (v3 >= v11 && (v11 < v3 || v4 >= a2[4])) {
          break;
        }
      }
      uint64_t v12 = *((void *)a2 - 3);
      uint64_t v5 = v12;
    }
  }
  if (i < a2)
  {
    uint64_t v13 = *(void *)i;
    uint64_t v14 = *(void *)a2;
    do
    {
      *(void *)uint64_t i = v14;
      *(void *)a2 = v13;
      uint64_t v15 = *((void *)i + 1);
      *((void *)i + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v15;
      uint64_t v16 = *((void *)i + 3);
      i += 6;
      uint64_t v13 = v16;
      int v17 = *((_DWORD *)i - 2);
      *(i - 2) = a2[4];
      *((_DWORD *)a2 + 4) = v17;
      while (v2 >= v13)
      {
        if (v13 >= v2)
        {
          uint64_t v18 = *((void *)i + 1);
          if (v3 < v18 || v18 >= v3 && v4 < i[4]) {
            break;
          }
        }
        uint64_t v19 = *((void *)i + 3);
        i += 6;
        uint64_t v13 = v19;
      }
      do
      {
        do
        {
          uint64_t v20 = *((void *)a2 - 3);
          a2 -= 6;
          uint64_t v14 = v20;
        }
        while (v2 < v20);
        if (v14 < v2) {
          break;
        }
        uint64_t v21 = *((void *)a2 + 1);
      }
      while (v3 < v21 || v21 >= v3 && v4 < a2[4]);
    }
    while (i < a2);
  }
  if (i - 6 != (float *)a1)
  {
    *a1 = *((void *)i - 3);
    a1[1] = *((void *)i - 2);
    *((float *)a1 + 4) = *(i - 2);
  }
  *((void *)i - 3) = v2;
  *((void *)i - 2) = v3;
  *(i - 2) = v4;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<long long,long long,float> *,std::__less<void,void> &>(float *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *((void *)a1 + 1);
  float v5 = a1[4];
  while (1)
  {
    uint64_t v6 = *(void *)&a1[v2 + 6];
    if (v6 >= v3)
    {
      if (v3 < v6) {
        break;
      }
      uint64_t v7 = *(void *)&a1[v2 + 8];
      if (v7 >= v4 && (v4 < v7 || a1[v2 + 10] >= v5)) {
        break;
      }
    }
    v2 += 6;
  }
  unint64_t v8 = (unint64_t)&a1[v2 + 6];
  if (v2 * 4)
  {
    while (1)
    {
      uint64_t v10 = *(void *)(a2 - 24);
      a2 -= 24;
      uint64_t v9 = v10;
      if (v10 < v3) {
        break;
      }
      if (v3 >= v9)
      {
        uint64_t v11 = *(void *)(a2 + 8);
        if (v11 < v4 || v4 >= v11 && *(float *)(a2 + 16) < v5) {
          break;
        }
      }
    }
  }
  else
  {
LABEL_25:
    if (v8 < a2)
    {
      do
      {
        uint64_t v13 = *(void *)(a2 - 24);
        a2 -= 24;
        uint64_t v12 = v13;
        if (v13 < v3) {
          break;
        }
        if (v3 < v12) {
          goto LABEL_25;
        }
        uint64_t v14 = *(void *)(a2 + 8);
        if (v14 < v4) {
          break;
        }
        if (v4 < v14) {
          goto LABEL_25;
        }
      }
      while (*(float *)(a2 + 16) >= v5 && v8 < a2);
    }
  }
  if (v8 >= a2)
  {
    unint64_t v17 = v8;
  }
  else
  {
    uint64_t v16 = *(void *)a2;
    unint64_t v17 = v8;
    unint64_t v18 = a2;
    do
    {
      *(void *)unint64_t v17 = v16;
      *(void *)unint64_t v18 = v6;
      uint64_t v19 = *(void *)(v17 + 8);
      *(void *)(v17 + _Block_object_dispose(&a9, 8) = *(void *)(v18 + 8);
      *(void *)(v18 + _Block_object_dispose(&a9, 8) = v19;
      int v20 = *(_DWORD *)(v17 + 16);
      *(_DWORD *)(v17 + 16) = *(_DWORD *)(v18 + 16);
      *(_DWORD *)(v18 + 16) = v20;
      do
      {
        do
        {
          uint64_t v21 = *(void *)(v17 + 24);
          v17 += 24;
          uint64_t v6 = v21;
        }
        while (v21 < v3);
        if (v3 < v6) {
          break;
        }
        uint64_t v22 = *(void *)(v17 + 8);
      }
      while (v22 < v4 || v4 >= v22 && *(float *)(v17 + 16) < v5);
      while (1)
      {
        uint64_t v23 = *(void *)(v18 - 24);
        v18 -= 24;
        uint64_t v16 = v23;
        if (v23 < v3) {
          break;
        }
        if (v3 >= v16)
        {
          uint64_t v24 = *(void *)(v18 + 8);
          if (v24 < v4 || v4 >= v24 && *(float *)(v18 + 16) < v5) {
            break;
          }
        }
      }
    }
    while (v17 < v18);
  }
  if ((float *)(v17 - 24) != a1)
  {
    *(void *)a1 = *(void *)(v17 - 24);
    *((void *)a1 + 1) = *(void *)(v17 - 16);
    a1[4] = *(float *)(v17 - 8);
  }
  *(void *)(v17 - 24) = v3;
  *(void *)(v17 - 16) = v4;
  *(float *)(v17 - _Block_object_dispose(&a9, 8) = v5;
  return v17 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(a2 - 24);
      uint64_t v7 = *(void *)a1;
      if (v6 < *(void *)a1
        || v7 >= v6
        && ((v25 = *(void *)(a2 - 16), uint64_t v26 = *(void *)(a1 + 8), v25 < v26)
         || v26 >= v25 && *(float *)(a2 - 8) < *(float *)(a1 + 16)))
      {
        *(void *)a1 = v6;
        *(void *)(a2 - 24) = v7;
        uint64_t v8 = *(void *)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v8;
        int v9 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - _Block_object_dispose(&a9, 8) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, a1 + 24, a1 + 48, a1 + 72, (uint64_t *)(a2 - 24));
      return 1;
    default:
      uint64_t v10 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  do
  {
    uint64_t v14 = *(void *)v11;
    uint64_t v15 = *(void *)v10;
    if (*(void *)v11 >= *(void *)v10)
    {
      if (v15 < v14) {
        goto LABEL_27;
      }
      uint64_t v16 = *(void *)(v11 + 8);
      uint64_t v24 = *(void *)(v10 + 8);
      if (v16 >= v24 && (v24 < v16 || *(float *)(v11 + 16) >= *(float *)(v10 + 16))) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(v11 + 8);
    }
    float v17 = *(float *)(v11 + 16);
    *(void *)uint64_t v11 = v15;
    *(void *)(v11 + _Block_object_dispose(&a9, 8) = *(void *)(v10 + 8);
    *(_DWORD *)(v11 + 16) = *(_DWORD *)(v10 + 16);
    uint64_t v18 = a1;
    if (v10 == a1) {
      goto LABEL_26;
    }
    uint64_t v19 = v12;
    while (1)
    {
      uint64_t v20 = a1 + v19;
      uint64_t v21 = *(void *)(a1 + v19 + 24);
      if (v14 < v21)
      {
        uint64_t v22 = *(void *)(v20 + 32);
        goto LABEL_17;
      }
      if (v21 < v14) {
        goto LABEL_24;
      }
      uint64_t v22 = *(void *)(a1 + v19 + 32);
      if (v16 >= v22)
      {
        if (v22 < v16)
        {
LABEL_24:
          uint64_t v18 = v10;
          goto LABEL_26;
        }
        if (v17 >= *(float *)(a1 + v19 + 40)) {
          break;
        }
      }
LABEL_17:
      v10 -= 24;
      *(void *)(v20 + 4_Block_object_dispose(&a9, 8) = v21;
      uint64_t v23 = a1 + v19;
      *(void *)(v23 + 56) = v22;
      *(_DWORD *)(v23 + 64) = *(_DWORD *)(a1 + v19 + 40);
      v19 -= 24;
      if (v19 == -48)
      {
        uint64_t v18 = a1;
        goto LABEL_26;
      }
    }
    uint64_t v18 = a1 + v19 + 48;
LABEL_26:
    *(void *)uint64_t v18 = v14;
    *(void *)(v18 + _Block_object_dispose(&a9, 8) = v16;
    *(float *)(v18 + 16) = v17;
    if (++v13 == 8) {
      return v11 + 24 == a2;
    }
LABEL_27:
    uint64_t v10 = v11;
    v12 += 24;
    v11 += 24;
  }
  while (v11 != a2);
  return 1;
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  uint64_t v9 = *(void *)a4;
  uint64_t v10 = *(void *)a3;
  if (*(void *)a4 < *(void *)a3
    || v10 >= v9
    && ((uint64_t v11 = *(void *)(a4 + 8), v12 = *(void *)(a3 + 8), v11 < v12)
     || v12 >= v11 && (float result = *(float *)(a4 + 16), result < *(float *)(a3 + 16))))
  {
    *(void *)a3 = v9;
    *(void *)a4 = v10;
    uint64_t v13 = *(void *)(a3 + 8);
    *(void *)(a3 + _Block_object_dispose(&a9, 8) = *(void *)(a4 + 8);
    *(void *)(a4 + _Block_object_dispose(&a9, 8) = v13;
    float result = *(float *)(a3 + 16);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    *(float *)(a4 + 16) = result;
    uint64_t v14 = *(void *)a3;
    uint64_t v15 = *(void *)a2;
    if (*(void *)a3 < *(void *)a2
      || v15 >= v14
      && ((uint64_t v16 = *(void *)(a3 + 8), v17 = *(void *)(a2 + 8), v16 < v17)
       || v17 >= v16 && (float result = *(float *)(a3 + 16), result < *(float *)(a2 + 16))))
    {
      *(void *)a2 = v14;
      *(void *)a3 = v15;
      uint64_t v18 = *(void *)(a2 + 8);
      *(void *)(a2 + _Block_object_dispose(&a9, 8) = *(void *)(a3 + 8);
      *(void *)(a3 + _Block_object_dispose(&a9, 8) = v18;
      float result = *(float *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(float *)(a3 + 16) = result;
      uint64_t v19 = *(void *)a2;
      uint64_t v20 = *(void *)a1;
      if (*(void *)a2 < *(void *)a1
        || v20 >= v19
        && ((v21 = *(void *)(a2 + 8), uint64_t v22 = *(void *)(a1 + 8), v21 < v22)
         || v22 >= v21 && (float result = *(float *)(a2 + 16), result < *(float *)(a1 + 16))))
      {
        *(void *)a1 = v19;
        *(void *)a2 = v20;
        uint64_t v23 = *(void *)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 8);
        *(void *)(a2 + _Block_object_dispose(&a9, 8) = v23;
        float result = *(float *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(float *)(a2 + 16) = result;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  float result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, a2, a3, a4);
  uint64_t v11 = *a5;
  uint64_t v12 = *(void *)a4;
  if (*a5 < *(void *)a4
    || v12 >= v11
    && ((uint64_t v29 = a5[1], v30 = *(void *)(a4 + 8), v29 < v30)
     || v30 >= v29 && (float result = *((float *)a5 + 4), result < *(float *)(a4 + 16))))
  {
    *(void *)a4 = v11;
    *a5 = v12;
    uint64_t v13 = *(void *)(a4 + 8);
    *(void *)(a4 + _Block_object_dispose(&a9, 8) = a5[1];
    a5[1] = v13;
    float result = *(float *)(a4 + 16);
    *(_DWORD *)(a4 + 16) = *((_DWORD *)a5 + 4);
    *((float *)a5 + 4) = result;
    uint64_t v14 = *(void *)a4;
    uint64_t v15 = *(void *)a3;
    if (*(void *)a4 < *(void *)a3
      || v15 >= v14
      && ((uint64_t v16 = *(void *)(a4 + 8), v17 = *(void *)(a3 + 8), v16 < v17)
       || v17 >= v16 && (float result = *(float *)(a4 + 16), result < *(float *)(a3 + 16))))
    {
      *(void *)a3 = v14;
      *(void *)a4 = v15;
      uint64_t v18 = *(void *)(a3 + 8);
      *(void *)(a3 + _Block_object_dispose(&a9, 8) = *(void *)(a4 + 8);
      *(void *)(a4 + _Block_object_dispose(&a9, 8) = v18;
      float result = *(float *)(a3 + 16);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      *(float *)(a4 + 16) = result;
      uint64_t v19 = *(void *)a3;
      uint64_t v20 = *(void *)a2;
      if (*(void *)a3 < *(void *)a2
        || v20 >= v19
        && ((v21 = *(void *)(a3 + 8), uint64_t v22 = *(void *)(a2 + 8), v21 < v22)
         || v22 >= v21 && (float result = *(float *)(a3 + 16), result < *(float *)(a2 + 16))))
      {
        *(void *)a2 = v19;
        *(void *)a3 = v20;
        uint64_t v23 = *(void *)(a2 + 8);
        *(void *)(a2 + _Block_object_dispose(&a9, 8) = *(void *)(a3 + 8);
        *(void *)(a3 + _Block_object_dispose(&a9, 8) = v23;
        float result = *(float *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        *(float *)(a3 + 16) = result;
        uint64_t v24 = *(void *)a2;
        uint64_t v25 = *(void *)a1;
        if (*(void *)a2 < *(void *)a1
          || v25 >= v24
          && ((uint64_t v26 = *(void *)(a2 + 8), v27 = *(void *)(a1 + 8), v26 < v27)
           || v27 >= v26 && (float result = *(float *)(a2 + 16), result < *(float *)(a1 + 16))))
        {
          *(void *)a1 = v24;
          *(void *)a2 = v25;
          uint64_t v28 = *(void *)(a1 + 8);
          *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 8);
          *(void *)(a2 + _Block_object_dispose(&a9, 8) = v28;
          float result = *(float *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          *(float *)(a2 + 16) = result;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *,std::tuple<long long,long long,float> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (float *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, a4, v9, v12);
        v12 -= 6;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = *v14;
        uint64_t v16 = *(void *)a1;
        if (*v14 < *(void *)a1
          || v16 >= v15
          && ((v17 = v14[1], uint64_t v18 = *(void *)(a1 + 8), v17 < v18)
           || v18 >= v17 && *((float *)v14 + 4) < *(float *)(a1 + 16)))
        {
          uint64_t *v14 = v16;
          *(void *)a1 = v15;
          uint64_t v19 = v14[1];
          v14[1] = *(void *)(a1 + 8);
          *(void *)(a1 + _Block_object_dispose(&a9, 8) = v19;
          int v20 = *((_DWORD *)v14 + 4);
          *((_DWORD *)v14 + 4) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 16) = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, a4, v9, (float *)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v21 = v8 / 0x18uLL;
      uint64_t v22 = a2 - 3;
      do
      {
        uint64_t v24 = *(void *)a1;
        uint64_t v23 = *(void *)(a1 + 8);
        int v25 = *(_DWORD *)(a1 + 16);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, a4, v21);
        if (v22 == (uint64_t *)v26)
        {
          *(void *)uint64_t v26 = v24;
          *(void *)(v26 + _Block_object_dispose(&a9, 8) = v23;
          *(_DWORD *)(v26 + 16) = v25;
        }
        else
        {
          *(void *)uint64_t v26 = *v22;
          *(void *)(v26 + _Block_object_dispose(&a9, 8) = v22[1];
          *(_DWORD *)(v26 + 16) = *((_DWORD *)v22 + 4);
          *uint64_t v22 = v24;
          v22[1] = v23;
          *((_DWORD *)v22 + 4) = v25;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(a1, v26 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v26 + 24 - a1) >> 3));
        }
        v22 -= 3;
      }
      while (v21-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 3)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 3)) | 1;
      uint64_t v6 = (float *)(result + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2 < a3)
      {
        uint64_t v7 = *((void *)v6 + 3);
        if (*(void *)v6 < v7
          || v7 >= *(void *)v6
          && ((v8 = *((void *)v6 + 1), uint64_t v9 = *((void *)v6 + 4), v8 < v9) || v9 >= v8 && v6[4] < v6[10]))
        {
          v6 += 6;
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 3) + 2;
        }
      }
      uint64_t v10 = *(void *)v6;
      uint64_t v11 = *(void *)a4;
      if (*(void *)v6 >= *(void *)a4)
      {
        if (v11 >= v10)
        {
          uint64_t v13 = *((void *)v6 + 1);
          uint64_t v12 = *((void *)a4 + 1);
          if (v13 < v12 || v12 >= v13 && v6[4] < a4[4]) {
            return result;
          }
        }
        else
        {
          uint64_t v12 = *((void *)a4 + 1);
        }
        float v14 = a4[4];
        *(void *)a4 = v10;
        *((void *)a4 + 1) = *((void *)v6 + 1);
        a4[4] = v6[4];
        if (v4 >= v5)
        {
          while (1)
          {
            uint64_t v15 = v6;
            uint64_t v16 = 2 * v5;
            uint64_t v5 = (2 * v5) | 1;
            uint64_t v6 = (float *)(result + 24 * v5);
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              uint64_t v18 = *((void *)v6 + 3);
              if (*(void *)v6 < v18
                || v18 >= *(void *)v6
                && ((v19 = *((void *)v6 + 1), uint64_t v20 = *((void *)v6 + 4), v19 < v20) || v20 >= v19 && v6[4] < v6[10]))
              {
                v6 += 6;
                uint64_t v5 = v17;
              }
            }
            uint64_t v21 = *(void *)v6;
            if (*(void *)v6 < v11) {
              break;
            }
            if (v11 >= v21)
            {
              uint64_t v22 = *((void *)v6 + 1);
              if (v22 < v12 || v12 >= v22 && v6[4] < v14) {
                break;
              }
            }
            *(void *)uint64_t v15 = v21;
            *((void *)v15 + 1) = *((void *)v6 + 1);
            v15[4] = v6[4];
            if (v4 < v5) {
              goto LABEL_32;
            }
          }
          uint64_t v6 = v15;
        }
LABEL_32:
        *(void *)uint64_t v6 = v11;
        *((void *)v6 + 1) = v12;
        v6[4] = v14;
      }
    }
  }
  return result;
}

float std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    a1 += 24 * v3 + 24;
    uint64_t v7 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v8 = v7 + 2;
    if (v8 < a3)
    {
      uint64_t v9 = *(void *)(a1 + 24);
      if (*(void *)a1 < v9
        || v9 >= *(void *)a1
        && ((uint64_t v10 = *(void *)(a1 + 8), v11 = *(void *)(a1 + 32), v10 < v11)
         || v11 >= v10 && *(float *)(a1 + 16) < *(float *)(a1 + 40)))
      {
        a1 += 24;
        uint64_t v3 = v8;
      }
    }
    *(void *)uint64_t v6 = *(void *)a1;
    *(void *)(v6 + _Block_object_dispose(&a9, 8) = *(void *)(a1 + 8);
    float result = *(float *)(a1 + 16);
    *(float *)(v6 + 16) = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<long long,long long,float> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return result;
  }
  unint64_t v5 = v4 >> 1;
  uint64_t v6 = (float *)(result + 24 * (v4 >> 1));
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *(void *)(a2 - 24);
  if (*(void *)v6 >= v8)
  {
    if (v8 < v7) {
      return result;
    }
    uint64_t v10 = *((void *)v6 + 1);
    uint64_t v9 = *(void *)(a2 - 16);
    if (v10 >= v9 && (v9 < v10 || v6[4] >= *(float *)(a2 - 8))) {
      return result;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a2 - 16);
  }
  float v11 = *(float *)(a2 - 8);
  *(void *)(a2 - 24) = v7;
  *(void *)(a2 - 16) = *((void *)v6 + 1);
  *(float *)(a2 - _Block_object_dispose(&a9, 8) = v6[4];
  if (v4 < 2) {
    goto LABEL_18;
  }
  while (1)
  {
    uint64_t v12 = v6;
    unint64_t v13 = v5 - 1;
    unint64_t v5 = (v5 - 1) >> 1;
    uint64_t v6 = (float *)(result + 24 * v5);
    uint64_t v14 = *(void *)v6;
    if (*(void *)v6 >= v8) {
      break;
    }
    uint64_t v15 = *((void *)v6 + 1);
LABEL_15:
    *(void *)uint64_t v12 = v14;
    *((void *)v12 + 1) = v15;
    _OWORD v12[4] = v6[4];
    if (v13 <= 1) {
      goto LABEL_18;
    }
  }
  if (v8 >= v14)
  {
    uint64_t v15 = *((void *)v6 + 1);
    if (v15 < v9 || v9 >= v15 && v6[4] < v11) {
      goto LABEL_15;
    }
  }
  uint64_t v6 = v12;
LABEL_18:
  *(void *)uint64_t v6 = v8;
  *((void *)v6 + 1) = v9;
  v6[4] = v11;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = v9;
  while (1)
  {
    unint64_t v9 = v10;
    uint64_t v11 = a2 - v10;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v49 = *(float *)(a2 - 8);
          float v50 = *(float *)(v10 + 16);
          if (v49 < v50)
          {
            uint64_t v51 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)(a2 - 24);
            *(void *)(a2 - 24) = v51;
            uint64_t v52 = *(void *)(v10 + 8);
            *(void *)(v10 + _Block_object_dispose(&a9, 8) = *(void *)(a2 - 16);
            *(void *)(a2 - 16) = v52;
            *(float *)(v10 + 16) = v49;
            *(float *)(a2 - _Block_object_dispose(&a9, 8) = v50;
          }
          break;
        case 3uLL:
          float result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v10, (float *)(v10 + 24), (float *)(a2 - 24));
          break;
        case 4uLL:
          float result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v10, (float *)(v10 + 24), (float *)(v10 + 48), (float *)(a2 - 24));
          break;
        case 5uLL:
          float result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v10, (float *)(v10 + 24), (float *)(v10 + 48), (float *)(v10 + 72));
          float v53 = *(float *)(a2 - 8);
          float v54 = *(float *)(v10 + 88);
          if (v53 < v54)
          {
            uint64_t v55 = *(void *)(v10 + 72);
            *(void *)(v10 + 72) = *(void *)(a2 - 24);
            *(void *)(a2 - 24) = v55;
            uint64_t v56 = *(void *)(v10 + 80);
            *(void *)(v10 + 80) = *(void *)(a2 - 16);
            *(void *)(a2 - 16) = v56;
            *(float *)(v10 + 8_Block_object_dispose(&a9, 8) = v53;
            *(float *)(a2 - _Block_object_dispose(&a9, 8) = v54;
            float v57 = *(float *)(v10 + 88);
            float v58 = *(float *)(v10 + 64);
            if (v57 < v58)
            {
              uint64_t v59 = *(void *)(v10 + 72);
              uint64_t v60 = *(void *)(v10 + 80);
              long long v61 = *(_OWORD *)(v10 + 48);
              *(void *)(v10 + 4_Block_object_dispose(&a9, 8) = v59;
              *(void *)(v10 + 56) = v60;
              *(_OWORD *)(v10 + 72) = v61;
              *(float *)(v10 + 64) = v57;
              *(float *)(v10 + 8_Block_object_dispose(&a9, 8) = v58;
              float v62 = *(float *)(v10 + 40);
              if (v57 < v62)
              {
                long long v63 = *(_OWORD *)(v10 + 24);
                *(void *)(v10 + 24) = v59;
                *(void *)(v10 + 32) = v60;
                *(_OWORD *)(v10 + 4_Block_object_dispose(&a9, 8) = v63;
                *(float *)(v10 + 40) = v57;
                *(float *)(v10 + 64) = v62;
                float v64 = *(float *)(v10 + 16);
                if (v57 < v64)
                {
                  long long v65 = *(_OWORD *)v10;
                  *(void *)unint64_t v10 = v59;
                  *(void *)(v10 + _Block_object_dispose(&a9, 8) = v60;
                  *(_OWORD *)(v10 + 24) = v65;
                  *(float *)(v10 + 16) = v57;
                  *(float *)(v10 + 40) = v64;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 575) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v78 = (v12 - 2) >> 1;
      int64_t v79 = v78;
      do
      {
        int64_t v80 = v79;
        if (v78 >= v79)
        {
          uint64_t v81 = (2 * v79) | 1;
          unint64_t v82 = v10 + 24 * v81;
          if (2 * v80 + 2 < (uint64_t)v12 && *(float *)(v82 + 16) < *(float *)(v82 + 40))
          {
            v82 += 24;
            uint64_t v81 = 2 * v80 + 2;
          }
          unint64_t v83 = v10 + 24 * v80;
          float v84 = *(float *)(v82 + 16);
          float v85 = *(float *)(v83 + 16);
          if (v84 >= v85)
          {
            long long v86 = *(_OWORD *)v83;
            do
            {
              unint64_t v87 = v83;
              unint64_t v83 = v82;
              *(void *)unint64_t v87 = *(void *)v82;
              *(void *)(v87 + _Block_object_dispose(&a9, 8) = *(void *)(v82 + 8);
              *(float *)(v87 + 16) = v84;
              if (v78 < v81) {
                break;
              }
              uint64_t v88 = 2 * v81;
              uint64_t v81 = (2 * v81) | 1;
              unint64_t v82 = v10 + 24 * v81;
              uint64_t v89 = v88 + 2;
              if (v89 < (uint64_t)v12 && *(float *)(v82 + 16) < *(float *)(v82 + 40))
              {
                v82 += 24;
                uint64_t v81 = v89;
              }
              float v84 = *(float *)(v82 + 16);
            }
            while (v84 >= v85);
            *(_OWORD *)unint64_t v83 = v86;
            *(float *)(v83 + 16) = v85;
          }
        }
        int64_t v79 = v80 - 1;
      }
      while (v80);
      int64_t v90 = v11 / 0x18uLL;
      while (2)
      {
        int64_t v91 = 0;
        uint64_t v92 = *(void *)v10;
        uint64_t v93 = *(void *)(v10 + 8);
        float v94 = *(float *)(v10 + 16);
        unint64_t v95 = v10;
        do
        {
          unint64_t v96 = v95;
          v95 += 24 * v91 + 24;
          uint64_t v97 = 2 * v91;
          float result = (2 * v91) | 1;
          int64_t v91 = result;
          uint64_t v98 = v97 + 2;
          if (v98 < v90 && *(float *)(v95 + 16) < *(float *)(v95 + 40))
          {
            v95 += 24;
            int64_t v91 = v98;
          }
          *(void *)unint64_t v96 = *(void *)v95;
          *(void *)(v96 + _Block_object_dispose(&a9, 8) = *(void *)(v95 + 8);
          *(_DWORD *)(v96 + 16) = *(_DWORD *)(v95 + 16);
        }
        while (v91 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
        if (v95 != a2 - 24)
        {
          *(void *)unint64_t v95 = *(void *)(a2 - 24);
          *(void *)(v95 + _Block_object_dispose(&a9, 8) = *(void *)(a2 - 16);
          *(_DWORD *)(v95 + 16) = *(_DWORD *)(a2 - 8);
          *(void *)(a2 - 24) = v92;
          *(void *)(a2 - 16) = v93;
          *(float *)(a2 - _Block_object_dispose(&a9, 8) = v94;
          uint64_t v99 = v95 - v10 + 24;
          if (v99 >= 25)
          {
            unint64_t v100 = (v99 / 0x18uLL - 2) >> 1;
            unint64_t v101 = v10 + 24 * v100;
            float v102 = *(float *)(v101 + 16);
            float v94 = *(float *)(v95 + 16);
            if (v102 < v94)
            {
              long long v103 = *(_OWORD *)v95;
              do
              {
                unint64_t v104 = v95;
                unint64_t v95 = v101;
                *(void *)unint64_t v104 = *(void *)v101;
                *(void *)(v104 + _Block_object_dispose(&a9, 8) = *(void *)(v101 + 8);
                *(float *)(v104 + 16) = v102;
                if (!v100) {
                  break;
                }
                unint64_t v100 = (v100 - 1) >> 1;
                unint64_t v101 = v10 + 24 * v100;
                float v102 = *(float *)(v101 + 16);
              }
              while (v102 < v94);
              *(_OWORD *)unint64_t v95 = v103;
LABEL_117:
              *(float *)(v95 + 16) = v94;
            }
          }
          a2 -= 24;
          if (v90-- <= 2) {
            return result;
          }
          continue;
        }
        break;
      }
      *(void *)unint64_t v95 = v92;
      *(void *)(v95 + _Block_object_dispose(&a9, 8) = v93;
      goto LABEL_117;
    }
    unint64_t v13 = v12 >> 1;
    unint64_t v14 = v10 + 24 * (v12 >> 1);
    if ((unint64_t)v11 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v9, (float *)(v9 + 24 * (v12 >> 1)), (float *)(a2 - 24));
      uint64_t v15 = 3 * v13;
      uint64_t v16 = (float *)(v9 + 24 * v13 - 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)(v9 + 24), v16, (float *)(a2 - 48));
      uint64_t v17 = (float *)(v9 + 24 + 8 * v15);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)(v9 + 48), v17, (float *)(a2 - 72));
      float result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(v16, (float *)v14, v17);
      long long v18 = *(_OWORD *)v9;
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v14;
      *(_OWORD *)unint64_t v14 = v18;
      LODWORD(v1_Block_object_dispose(&a9, 8) = *(_DWORD *)(v9 + 16);
      *(_DWORD *)(v9 + 16) = *(_DWORD *)(v14 + 16);
      *(_DWORD *)(v14 + 16) = v18;
    }
    else
    {
      float result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)(v9 + 24 * (v12 >> 1)), (float *)v9, (float *)(a2 - 24));
    }
    --a3;
    if (a4)
    {
      float v19 = *(float *)(v9 + 16);
LABEL_13:
      uint64_t v20 = 0;
      long long v21 = *(_OWORD *)v9;
      do
      {
        float v22 = *(float *)(v9 + v20 + 40);
        v20 += 24;
      }
      while (v22 < v19);
      unint64_t v23 = v9 + v20;
      unint64_t v24 = a2;
      if (v20 == 24)
      {
        unint64_t v27 = a2;
        while (v23 < v27)
        {
          unint64_t v25 = v27 - 24;
          float v28 = *(float *)(v27 - 8);
          v27 -= 24;
          if (v28 < v19) {
            goto LABEL_23;
          }
        }
        unint64_t v25 = v27;
      }
      else
      {
        do
        {
          unint64_t v25 = v24 - 24;
          float v26 = *(float *)(v24 - 8);
          v24 -= 24;
        }
        while (v26 >= v19);
      }
LABEL_23:
      unint64_t v10 = v23;
      if (v23 < v25)
      {
        unint64_t v29 = v25;
        do
        {
          uint64_t v30 = *(void *)v10;
          *(void *)unint64_t v10 = *(void *)v29;
          *(void *)unint64_t v29 = v30;
          uint64_t v31 = *(void *)(v10 + 8);
          *(void *)(v10 + _Block_object_dispose(&a9, 8) = *(void *)(v29 + 8);
          *(void *)(v29 + _Block_object_dispose(&a9, 8) = v31;
          int v32 = *(_DWORD *)(v10 + 16);
          *(_DWORD *)(v10 + 16) = *(_DWORD *)(v29 + 16);
          *(_DWORD *)(v29 + 16) = v32;
          do
          {
            float v33 = *(float *)(v10 + 40);
            v10 += 24;
          }
          while (v33 < v19);
          do
          {
            float v34 = *(float *)(v29 - 8);
            v29 -= 24;
          }
          while (v34 >= v19);
        }
        while (v10 < v29);
      }
      if (v10 - 24 != v9)
      {
        *(void *)unint64_t v9 = *(void *)(v10 - 24);
        *(void *)(v9 + _Block_object_dispose(&a9, 8) = *(void *)(v10 - 16);
        *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 - 8);
      }
      *(_OWORD *)(v10 - 24) = v21;
      *(float *)(v10 - _Block_object_dispose(&a9, 8) = v19;
      if (v23 < v25) {
        goto LABEL_34;
      }
      BOOL v35 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(v9, v10 - 24);
      float result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(v10, a2);
      if (result)
      {
        a2 = v10 - 24;
        if (v35) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v35)
      {
LABEL_34:
        float result = std::__introsort<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*,false>(v9, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      float v19 = *(float *)(v9 + 16);
      if (*(float *)(v9 - 8) < v19) {
        goto LABEL_13;
      }
      if (v19 >= *(float *)(a2 - 8))
      {
        unint64_t v38 = v9 + 24;
        do
        {
          unint64_t v10 = v38;
          if (v38 >= a2) {
            break;
          }
          float v39 = *(float *)(v38 + 16);
          v38 += 24;
        }
        while (v19 >= v39);
      }
      else
      {
        unint64_t v36 = v9;
        do
        {
          unint64_t v10 = v36 + 24;
          float v37 = *(float *)(v36 + 40);
          v36 += 24;
        }
        while (v19 >= v37);
      }
      unint64_t v40 = a2;
      if (v10 < a2)
      {
        unint64_t v41 = a2;
        do
        {
          unint64_t v40 = v41 - 24;
          float v42 = *(float *)(v41 - 8);
          v41 -= 24;
        }
        while (v19 < v42);
      }
      long long v43 = *(_OWORD *)v9;
      while (v10 < v40)
      {
        uint64_t v44 = *(void *)v10;
        *(void *)unint64_t v10 = *(void *)v40;
        *(void *)unint64_t v40 = v44;
        uint64_t v45 = *(void *)(v10 + 8);
        *(void *)(v10 + _Block_object_dispose(&a9, 8) = *(void *)(v40 + 8);
        *(void *)(v40 + _Block_object_dispose(&a9, 8) = v45;
        int v46 = *(_DWORD *)(v10 + 16);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v40 + 16);
        *(_DWORD *)(v40 + 16) = v46;
        do
        {
          float v47 = *(float *)(v10 + 40);
          v10 += 24;
        }
        while (v19 >= v47);
        do
        {
          float v48 = *(float *)(v40 - 8);
          v40 -= 24;
        }
        while (v19 < v48);
      }
      BOOL v4 = v10 - 24 >= v9;
      BOOL v5 = v10 - 24 == v9;
      if (v10 - 24 != v9)
      {
        *(void *)unint64_t v9 = *(void *)(v10 - 24);
        *(void *)(v9 + _Block_object_dispose(&a9, 8) = *(void *)(v10 - 16);
        *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 - 8);
      }
      a4 = 0;
      *(_OWORD *)(v10 - 24) = v43;
      *(float *)(v10 - _Block_object_dispose(&a9, 8) = v19;
    }
  }
  uint64_t v66 = (_OWORD *)(v10 + 24);
  BOOL v68 = v10 == a2 || v66 == (_OWORD *)a2;
  if (a4)
  {
    if (!v68)
    {
      uint64_t v69 = 0;
      uint64_t v70 = (_OWORD *)v10;
      do
      {
        float v71 = *((float *)v70 + 10);
        float v72 = *((float *)v70 + 4);
        uint64_t v70 = v66;
        if (v71 < v72)
        {
          long long v73 = *v66;
          uint64_t v74 = v69;
          while (1)
          {
            uint64_t v75 = v10 + v74;
            uint64_t v76 = *(void *)(v10 + v74 + 8);
            *(void *)(v75 + 24) = *(void *)(v10 + v74);
            *(void *)(v75 + 32) = v76;
            *(_DWORD *)(v75 + 40) = *(_DWORD *)(v10 + v74 + 16);
            if (!v74) {
              break;
            }
            v74 -= 24;
            if (v71 >= *(float *)(v75 - 8))
            {
              uint64_t v77 = v10 + v74 + 24;
              goto LABEL_85;
            }
          }
          uint64_t v77 = v10;
LABEL_85:
          *(_OWORD *)uint64_t v77 = v73;
          *(float *)(v77 + 16) = v71;
        }
        uint64_t v66 = (_OWORD *)((char *)v70 + 24);
        v69 += 24;
      }
      while ((_OWORD *)((char *)v70 + 24) != (_OWORD *)a2);
    }
  }
  else if (!v68)
  {
    long long v106 = (float *)(v10 + 40);
    do
    {
      float v107 = *(float *)(v9 + 40);
      float v108 = *(float *)(v9 + 16);
      unint64_t v9 = (unint64_t)v66;
      if (v107 < v108)
      {
        long long v109 = *v66;
        unint64_t v110 = v106;
        do
        {
          unint64_t v111 = v110;
          uint64_t v112 = *((void *)v110 - 4);
          *((void *)v110 - 2) = *((void *)v110 - 5);
          *((void *)v110 - 1) = v112;
          int v113 = *((_DWORD *)v110 - 6);
          v110 -= 6;
          *(_DWORD *)unint64_t v111 = v113;
        }
        while (v107 < *(v111 - 12));
        *((_OWORD *)v110 - 1) = v109;
        *unint64_t v110 = v107;
      }
      uint64_t v66 = (_OWORD *)(v9 + 24);
      v106 += 6;
    }
    while (v9 + 24 != a2);
  }
  return result;
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(float *result, float *a2, float *a3)
{
  float v3 = a2[4];
  float v4 = result[4];
  float v5 = a3[4];
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      uint64_t v8 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v8;
      uint64_t v9 = *((void *)a2 + 1);
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v9;
      a2[4] = v5;
      a3[4] = v3;
      float v10 = a2[4];
      float v11 = result[4];
      if (v10 < v11)
      {
        uint64_t v12 = *(void *)result;
        *(void *)float result = *(void *)a2;
        *(void *)a2 = v12;
        uint64_t v13 = *((void *)result + 1);
        *((void *)result + 1) = *((void *)a2 + 1);
        *((void *)a2 + 1) = v13;
        result[4] = v10;
        a2[4] = v11;
      }
    }
  }
  else
  {
    uint64_t v6 = *(void *)result;
    if (v5 >= v3)
    {
      *(void *)float result = *(void *)a2;
      *(void *)a2 = v6;
      uint64_t v14 = *((void *)result + 1);
      *((void *)result + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v14;
      result[4] = v3;
      a2[4] = v4;
      float v15 = a3[4];
      if (v15 >= v4) {
        return result;
      }
      uint64_t v16 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v16;
      uint64_t v17 = *((void *)a2 + 1);
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v17;
      a2[4] = v15;
    }
    else
    {
      *(void *)float result = *(void *)a3;
      *(void *)a3 = v6;
      uint64_t v7 = *((void *)result + 1);
      *((void *)result + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v7;
      result[4] = v5;
    }
    a3[4] = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v6 = *(float *)(a2 - 8);
      float v7 = *(float *)(a1 + 16);
      if (v6 < v7)
      {
        uint64_t v8 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v8;
        uint64_t v9 = *(void *)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v9;
        *(float *)(a1 + 16) = v6;
        *(float *)(a2 - _Block_object_dispose(&a9, 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a1 + 48), (float *)(a2 - 24));
      return 1;
    case 5uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a1 + 48), (float *)(a1 + 72));
      float v20 = *(float *)(a2 - 8);
      float v21 = *(float *)(a1 + 88);
      if (v20 < v21)
      {
        uint64_t v22 = *(void *)(a1 + 72);
        *(void *)(a1 + 72) = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v22;
        uint64_t v23 = *(void *)(a1 + 80);
        *(void *)(a1 + 80) = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v23;
        *(float *)(a1 + 8_Block_object_dispose(&a9, 8) = v20;
        *(float *)(a2 - _Block_object_dispose(&a9, 8) = v21;
        float v24 = *(float *)(a1 + 88);
        float v25 = *(float *)(a1 + 64);
        if (v24 < v25)
        {
          uint64_t v26 = *(void *)(a1 + 72);
          uint64_t v27 = *(void *)(a1 + 80);
          long long v28 = *(_OWORD *)(a1 + 48);
          *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v26;
          *(void *)(a1 + 56) = v27;
          *(_OWORD *)(a1 + 72) = v28;
          *(float *)(a1 + 64) = v24;
          *(float *)(a1 + 8_Block_object_dispose(&a9, 8) = v25;
          float v29 = *(float *)(a1 + 40);
          if (v24 < v29)
          {
            long long v30 = *(_OWORD *)(a1 + 24);
            *(void *)(a1 + 24) = v26;
            *(void *)(a1 + 32) = v27;
            *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = v30;
            *(float *)(a1 + 40) = v24;
            *(float *)(a1 + 64) = v29;
            float v31 = *(float *)(a1 + 16);
            if (v24 < v31)
            {
              long long v32 = *(_OWORD *)a1;
              *(void *)a1 = v26;
              *(void *)(a1 + _Block_object_dispose(&a9, 8) = v27;
              *(_OWORD *)(a1 + 24) = v32;
              *(float *)(a1 + 16) = v24;
              *(float *)(a1 + 40) = v31;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    float v14 = *(float *)(v11 + 16);
    if (v14 < *(float *)(v10 + 16))
    {
      long long v15 = *(_OWORD *)v11;
      uint64_t v16 = v12;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = *(void *)(a1 + v16 + 56);
        *(void *)(v17 + 72) = *(void *)(a1 + v16 + 48);
        *(void *)(v17 + 80) = v18;
        *(_DWORD *)(v17 + 8_Block_object_dispose(&a9, 8) = *(_DWORD *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (v14 >= *(float *)(v17 + 40))
        {
          uint64_t v19 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v19 = a1;
LABEL_13:
      *(_OWORD *)uint64_t v19 = v15;
      *(float *)(v19 + 16) = v14;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(float *a1, float *a2, float *a3, float *a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(a1, a2, a3);
  float v9 = a4[4];
  float v10 = a3[4];
  if (v9 < v10)
  {
    uint64_t v11 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v11;
    uint64_t v12 = *((void *)a3 + 1);
    *((void *)a3 + 1) = *((void *)a4 + 1);
    *((void *)a4 + 1) = v12;
    a3[4] = v9;
    a4[4] = v10;
    float v13 = a3[4];
    float v14 = a2[4];
    if (v13 < v14)
    {
      uint64_t v15 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v15;
      uint64_t v16 = *((void *)a2 + 1);
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v16;
      a2[4] = v13;
      a3[4] = v14;
      float v17 = a2[4];
      float v18 = a1[4];
      if (v17 < v18)
      {
        uint64_t v19 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v19;
        uint64_t v20 = *((void *)a1 + 1);
        *((void *)a1 + 1) = *((void *)a2 + 1);
        *((void *)a2 + 1) = v20;
        a1[4] = v17;
        a2[4] = v18;
      }
    }
  }
  return result;
}

void std::vector<std::tuple<long long,long long,float>>::__append(void **a1, unint64_t a2)
{
  float v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  float v5 = v6;
  float v7 = *(void **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      float v13 = &v7[3 * a2];
      uint64_t v14 = 24 * a2;
      do
      {
        void *v7 = 0;
        v7[1] = 0;
        *((_DWORD *)v7 + 4) = 0;
        v7 += 3;
        v14 -= 24;
      }
      while (v14);
      float v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = &v12[24 * v8];
    uint64_t v16 = &v15[24 * a2];
    uint64_t v17 = 24 * a2;
    float v18 = v15;
    do
    {
      *(void *)float v18 = 0;
      *((void *)v18 + 1) = 0;
      *((_DWORD *)v18 + 4) = 0;
      v18 += 24;
      v17 -= 24;
    }
    while (v17);
    uint64_t v19 = &v12[24 * v11];
    float v21 = (char *)*a1;
    uint64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 24);
        *((void *)v15 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        v15 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
    {
      operator delete(v20);
    }
  }
}

void *std::vector<std::vector<long long>>::__construct_one_at_end[abi:ne180100]<std::vector<long long> const&>(uint64_t a1, uint64_t a2)
{
  float v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  BOOL result = std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v3 + 3;
  return result;
}

void sub_225E04688(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&a9, 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<long long>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_225E04794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - _Block_object_dispose(&a9, 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - _Block_object_dispose(&a9, 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<long long>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<long long>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_225E04A34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<long long>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<long long>>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_225E04AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::vector<long long>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::list<long long>::list(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 8 * a3;
    uint64_t v7 = a1;
    do
    {
      long long v8 = operator new(0x18uLL);
      uint64_t v9 = *(void *)(a2 + 8 * v5);
      v8[1] = a1;
      v8[2] = v9;
      void *v8 = v7;
      v7[1] = v8;
      *a1 = v8;
      a1[2] = ++v5;
      uint64_t v7 = v8;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_225E04BC8(_Unwind_Exception *a1)
{
  std::__list_imp<long long>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,BOOL>,std::__map_value_compare<long long,std::__value_type<long long,BOOL>,std::less<long long>,true>,std::allocator<std::__value_type<long long,BOOL>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        uint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x30uLL);
    _OWORD v11[4] = **a4;
    *((unsigned char *)v11 + 40) = 0;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  long long v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)long long v14 = 0;
  *((void *)v14 + 1) = v7;
  *((void *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  float v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  unint64_t v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::unordered_set<long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::unordered_set<long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_225E04FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::unordered_set<long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::unordered_set<long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::unordered_set<long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::unordered_set<long long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::~__hash_table((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)::$_0 &,std::tuple<long long,long long,float>*,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = v9;
  while (1)
  {
    unint64_t v9 = v10;
    uint64_t v11 = a2 - v10;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v49 = *(float *)(a2 - 8);
          float v50 = *(float *)(v10 + 16);
          if (v49 < v50)
          {
            uint64_t v51 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)(a2 - 24);
            *(void *)(a2 - 24) = v51;
            uint64_t v52 = *(void *)(v10 + 8);
            *(void *)(v10 + _Block_object_dispose(&a9, 8) = *(void *)(a2 - 16);
            *(void *)(a2 - 16) = v52;
            *(float *)(v10 + 16) = v49;
            *(float *)(a2 - _Block_object_dispose(&a9, 8) = v50;
          }
          break;
        case 3uLL:
          uint64_t result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v10, (float *)(v10 + 24), (float *)(a2 - 24));
          break;
        case 4uLL:
          uint64_t result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v10, (float *)(v10 + 24), (float *)(v10 + 48), (float *)(a2 - 24));
          break;
        case 5uLL:
          uint64_t result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v10, (float *)(v10 + 24), (float *)(v10 + 48), (float *)(v10 + 72));
          float v53 = *(float *)(a2 - 8);
          float v54 = *(float *)(v10 + 88);
          if (v53 < v54)
          {
            uint64_t v55 = *(void *)(v10 + 72);
            *(void *)(v10 + 72) = *(void *)(a2 - 24);
            *(void *)(a2 - 24) = v55;
            uint64_t v56 = *(void *)(v10 + 80);
            *(void *)(v10 + 80) = *(void *)(a2 - 16);
            *(void *)(a2 - 16) = v56;
            *(float *)(v10 + 8_Block_object_dispose(&a9, 8) = v53;
            *(float *)(a2 - _Block_object_dispose(&a9, 8) = v54;
            float v57 = *(float *)(v10 + 88);
            float v58 = *(float *)(v10 + 64);
            if (v57 < v58)
            {
              uint64_t v59 = *(void *)(v10 + 72);
              uint64_t v60 = *(void *)(v10 + 80);
              long long v61 = *(_OWORD *)(v10 + 48);
              *(void *)(v10 + 4_Block_object_dispose(&a9, 8) = v59;
              *(void *)(v10 + 56) = v60;
              *(_OWORD *)(v10 + 72) = v61;
              *(float *)(v10 + 64) = v57;
              *(float *)(v10 + 8_Block_object_dispose(&a9, 8) = v58;
              float v62 = *(float *)(v10 + 40);
              if (v57 < v62)
              {
                long long v63 = *(_OWORD *)(v10 + 24);
                *(void *)(v10 + 24) = v59;
                *(void *)(v10 + 32) = v60;
                *(_OWORD *)(v10 + 4_Block_object_dispose(&a9, 8) = v63;
                *(float *)(v10 + 40) = v57;
                *(float *)(v10 + 64) = v62;
                float v64 = *(float *)(v10 + 16);
                if (v57 < v64)
                {
                  long long v65 = *(_OWORD *)v10;
                  *(void *)unint64_t v10 = v59;
                  *(void *)(v10 + _Block_object_dispose(&a9, 8) = v60;
                  *(_OWORD *)(v10 + 24) = v65;
                  *(float *)(v10 + 16) = v57;
                  *(float *)(v10 + 40) = v64;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 575) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v78 = (v12 - 2) >> 1;
      int64_t v79 = v78;
      do
      {
        int64_t v80 = v79;
        if (v78 >= v79)
        {
          uint64_t v81 = (2 * v79) | 1;
          unint64_t v82 = v10 + 24 * v81;
          if (2 * v80 + 2 < (uint64_t)v12 && *(float *)(v82 + 16) < *(float *)(v82 + 40))
          {
            v82 += 24;
            uint64_t v81 = 2 * v80 + 2;
          }
          unint64_t v83 = v10 + 24 * v80;
          float v84 = *(float *)(v82 + 16);
          float v85 = *(float *)(v83 + 16);
          if (v84 >= v85)
          {
            long long v86 = *(_OWORD *)v83;
            do
            {
              unint64_t v87 = v83;
              unint64_t v83 = v82;
              *(void *)unint64_t v87 = *(void *)v82;
              *(void *)(v87 + _Block_object_dispose(&a9, 8) = *(void *)(v82 + 8);
              *(float *)(v87 + 16) = v84;
              if (v78 < v81) {
                break;
              }
              uint64_t v88 = 2 * v81;
              uint64_t v81 = (2 * v81) | 1;
              unint64_t v82 = v10 + 24 * v81;
              uint64_t v89 = v88 + 2;
              if (v89 < (uint64_t)v12 && *(float *)(v82 + 16) < *(float *)(v82 + 40))
              {
                v82 += 24;
                uint64_t v81 = v89;
              }
              float v84 = *(float *)(v82 + 16);
            }
            while (v84 >= v85);
            *(_OWORD *)unint64_t v83 = v86;
            *(float *)(v83 + 16) = v85;
          }
        }
        int64_t v79 = v80 - 1;
      }
      while (v80);
      int64_t v90 = v11 / 0x18uLL;
      while (2)
      {
        int64_t v91 = 0;
        uint64_t v92 = *(void *)v10;
        uint64_t v93 = *(void *)(v10 + 8);
        float v94 = *(float *)(v10 + 16);
        unint64_t v95 = v10;
        do
        {
          unint64_t v96 = v95;
          v95 += 24 * v91 + 24;
          uint64_t v97 = 2 * v91;
          uint64_t result = (2 * v91) | 1;
          int64_t v91 = result;
          uint64_t v98 = v97 + 2;
          if (v98 < v90 && *(float *)(v95 + 16) < *(float *)(v95 + 40))
          {
            v95 += 24;
            int64_t v91 = v98;
          }
          *(void *)unint64_t v96 = *(void *)v95;
          *(void *)(v96 + _Block_object_dispose(&a9, 8) = *(void *)(v95 + 8);
          *(_DWORD *)(v96 + 16) = *(_DWORD *)(v95 + 16);
        }
        while (v91 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
        if (v95 != a2 - 24)
        {
          *(void *)unint64_t v95 = *(void *)(a2 - 24);
          *(void *)(v95 + _Block_object_dispose(&a9, 8) = *(void *)(a2 - 16);
          *(_DWORD *)(v95 + 16) = *(_DWORD *)(a2 - 8);
          *(void *)(a2 - 24) = v92;
          *(void *)(a2 - 16) = v93;
          *(float *)(a2 - _Block_object_dispose(&a9, 8) = v94;
          uint64_t v99 = v95 - v10 + 24;
          if (v99 >= 25)
          {
            unint64_t v100 = (v99 / 0x18uLL - 2) >> 1;
            unint64_t v101 = v10 + 24 * v100;
            float v102 = *(float *)(v101 + 16);
            float v94 = *(float *)(v95 + 16);
            if (v102 < v94)
            {
              long long v103 = *(_OWORD *)v95;
              do
              {
                unint64_t v104 = v95;
                unint64_t v95 = v101;
                *(void *)unint64_t v104 = *(void *)v101;
                *(void *)(v104 + _Block_object_dispose(&a9, 8) = *(void *)(v101 + 8);
                *(float *)(v104 + 16) = v102;
                if (!v100) {
                  break;
                }
                unint64_t v100 = (v100 - 1) >> 1;
                unint64_t v101 = v10 + 24 * v100;
                float v102 = *(float *)(v101 + 16);
              }
              while (v102 < v94);
              *(_OWORD *)unint64_t v95 = v103;
LABEL_117:
              *(float *)(v95 + 16) = v94;
            }
          }
          a2 -= 24;
          if (v90-- <= 2) {
            return result;
          }
          continue;
        }
        break;
      }
      *(void *)unint64_t v95 = v92;
      *(void *)(v95 + _Block_object_dispose(&a9, 8) = v93;
      goto LABEL_117;
    }
    unint64_t v13 = v12 >> 1;
    unint64_t v14 = v10 + 24 * (v12 >> 1);
    if ((unint64_t)v11 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)v9, (float *)(v9 + 24 * (v12 >> 1)), (float *)(a2 - 24));
      uint64_t v15 = 3 * v13;
      float v16 = (float *)(v9 + 24 * v13 - 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)(v9 + 24), v16, (float *)(a2 - 48));
      BOOL v17 = (float *)(v9 + 24 + 8 * v15);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)(v9 + 48), v17, (float *)(a2 - 72));
      uint64_t result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>(v16, (float *)v14, v17);
      long long v18 = *(_OWORD *)v9;
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v14;
      *(_OWORD *)unint64_t v14 = v18;
      LODWORD(v1_Block_object_dispose(&a9, 8) = *(_DWORD *)(v9 + 16);
      *(_DWORD *)(v9 + 16) = *(_DWORD *)(v14 + 16);
      *(_DWORD *)(v14 + 16) = v18;
    }
    else
    {
      uint64_t result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)(v9 + 24 * (v12 >> 1)), (float *)v9, (float *)(a2 - 24));
    }
    --a3;
    if (a4)
    {
      float v19 = *(float *)(v9 + 16);
LABEL_13:
      uint64_t v20 = 0;
      long long v21 = *(_OWORD *)v9;
      do
      {
        float v22 = *(float *)(v9 + v20 + 40);
        v20 += 24;
      }
      while (v22 < v19);
      unint64_t v23 = v9 + v20;
      unint64_t v24 = a2;
      if (v20 == 24)
      {
        unint64_t v27 = a2;
        while (v23 < v27)
        {
          unint64_t v25 = v27 - 24;
          float v28 = *(float *)(v27 - 8);
          v27 -= 24;
          if (v28 < v19) {
            goto LABEL_23;
          }
        }
        unint64_t v25 = v27;
      }
      else
      {
        do
        {
          unint64_t v25 = v24 - 24;
          float v26 = *(float *)(v24 - 8);
          v24 -= 24;
        }
        while (v26 >= v19);
      }
LABEL_23:
      unint64_t v10 = v23;
      if (v23 < v25)
      {
        unint64_t v29 = v25;
        do
        {
          uint64_t v30 = *(void *)v10;
          *(void *)unint64_t v10 = *(void *)v29;
          *(void *)unint64_t v29 = v30;
          uint64_t v31 = *(void *)(v10 + 8);
          *(void *)(v10 + _Block_object_dispose(&a9, 8) = *(void *)(v29 + 8);
          *(void *)(v29 + _Block_object_dispose(&a9, 8) = v31;
          int v32 = *(_DWORD *)(v10 + 16);
          *(_DWORD *)(v10 + 16) = *(_DWORD *)(v29 + 16);
          *(_DWORD *)(v29 + 16) = v32;
          do
          {
            float v33 = *(float *)(v10 + 40);
            v10 += 24;
          }
          while (v33 < v19);
          do
          {
            float v34 = *(float *)(v29 - 8);
            v29 -= 24;
          }
          while (v34 >= v19);
        }
        while (v10 < v29);
      }
      if (v10 - 24 != v9)
      {
        *(void *)unint64_t v9 = *(void *)(v10 - 24);
        *(void *)(v9 + _Block_object_dispose(&a9, 8) = *(void *)(v10 - 16);
        *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 - 8);
      }
      *(_OWORD *)(v10 - 24) = v21;
      *(float *)(v10 - _Block_object_dispose(&a9, 8) = v19;
      if (v23 < v25) {
        goto LABEL_34;
      }
      BOOL v35 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)::$_0 &,std::tuple<long long,long long,float>*>(v9, v10 - 24);
      uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)::$_0 &,std::tuple<long long,long long,float>*>(v10, a2);
      if (result)
      {
        a2 = v10 - 24;
        if (v35) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v35)
      {
LABEL_34:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)::$_0 &,std::tuple<long long,long long,float>*,false>(v9, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      float v19 = *(float *)(v9 + 16);
      if (*(float *)(v9 - 8) < v19) {
        goto LABEL_13;
      }
      if (v19 >= *(float *)(a2 - 8))
      {
        unint64_t v38 = v9 + 24;
        do
        {
          unint64_t v10 = v38;
          if (v38 >= a2) {
            break;
          }
          float v39 = *(float *)(v38 + 16);
          v38 += 24;
        }
        while (v19 >= v39);
      }
      else
      {
        unint64_t v36 = v9;
        do
        {
          unint64_t v10 = v36 + 24;
          float v37 = *(float *)(v36 + 40);
          v36 += 24;
        }
        while (v19 >= v37);
      }
      unint64_t v40 = a2;
      if (v10 < a2)
      {
        unint64_t v41 = a2;
        do
        {
          unint64_t v40 = v41 - 24;
          float v42 = *(float *)(v41 - 8);
          v41 -= 24;
        }
        while (v19 < v42);
      }
      long long v43 = *(_OWORD *)v9;
      while (v10 < v40)
      {
        uint64_t v44 = *(void *)v10;
        *(void *)unint64_t v10 = *(void *)v40;
        *(void *)unint64_t v40 = v44;
        uint64_t v45 = *(void *)(v10 + 8);
        *(void *)(v10 + _Block_object_dispose(&a9, 8) = *(void *)(v40 + 8);
        *(void *)(v40 + _Block_object_dispose(&a9, 8) = v45;
        int v46 = *(_DWORD *)(v10 + 16);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v40 + 16);
        *(_DWORD *)(v40 + 16) = v46;
        do
        {
          float v47 = *(float *)(v10 + 40);
          v10 += 24;
        }
        while (v19 >= v47);
        do
        {
          float v48 = *(float *)(v40 - 8);
          v40 -= 24;
        }
        while (v19 < v48);
      }
      BOOL v4 = v10 - 24 >= v9;
      BOOL v5 = v10 - 24 == v9;
      if (v10 - 24 != v9)
      {
        *(void *)unint64_t v9 = *(void *)(v10 - 24);
        *(void *)(v9 + _Block_object_dispose(&a9, 8) = *(void *)(v10 - 16);
        *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 - 8);
      }
      a4 = 0;
      *(_OWORD *)(v10 - 24) = v43;
      *(float *)(v10 - _Block_object_dispose(&a9, 8) = v19;
    }
  }
  uint64_t v66 = (_OWORD *)(v10 + 24);
  BOOL v68 = v10 == a2 || v66 == (_OWORD *)a2;
  if (a4)
  {
    if (!v68)
    {
      uint64_t v69 = 0;
      uint64_t v70 = (_OWORD *)v10;
      do
      {
        float v71 = *((float *)v70 + 10);
        float v72 = *((float *)v70 + 4);
        uint64_t v70 = v66;
        if (v71 < v72)
        {
          long long v73 = *v66;
          uint64_t v74 = v69;
          while (1)
          {
            uint64_t v75 = v10 + v74;
            uint64_t v76 = *(void *)(v10 + v74 + 8);
            *(void *)(v75 + 24) = *(void *)(v10 + v74);
            *(void *)(v75 + 32) = v76;
            *(_DWORD *)(v75 + 40) = *(_DWORD *)(v10 + v74 + 16);
            if (!v74) {
              break;
            }
            v74 -= 24;
            if (v71 >= *(float *)(v75 - 8))
            {
              uint64_t v77 = v10 + v74 + 24;
              goto LABEL_85;
            }
          }
          uint64_t v77 = v10;
LABEL_85:
          *(_OWORD *)uint64_t v77 = v73;
          *(float *)(v77 + 16) = v71;
        }
        uint64_t v66 = (_OWORD *)((char *)v70 + 24);
        v69 += 24;
      }
      while ((_OWORD *)((char *)v70 + 24) != (_OWORD *)a2);
    }
  }
  else if (!v68)
  {
    long long v106 = (float *)(v10 + 40);
    do
    {
      float v107 = *(float *)(v9 + 40);
      float v108 = *(float *)(v9 + 16);
      unint64_t v9 = (unint64_t)v66;
      if (v107 < v108)
      {
        long long v109 = *v66;
        unint64_t v110 = v106;
        do
        {
          unint64_t v111 = v110;
          uint64_t v112 = *((void *)v110 - 4);
          *((void *)v110 - 2) = *((void *)v110 - 5);
          *((void *)v110 - 1) = v112;
          int v113 = *((_DWORD *)v110 - 6);
          v110 -= 6;
          *(_DWORD *)unint64_t v111 = v113;
        }
        while (v107 < *(v111 - 12));
        *((_OWORD *)v110 - 1) = v109;
        *unint64_t v110 = v107;
      }
      uint64_t v66 = (_OWORD *)(v9 + 24);
      v106 += 6;
    }
    while (v9 + 24 != a2);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::getConnectedComponents(std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>)::$_0 &,std::tuple<long long,long long,float>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v6 = *(float *)(a2 - 8);
      float v7 = *(float *)(a1 + 16);
      if (v6 < v7)
      {
        uint64_t v8 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v8;
        uint64_t v9 = *(void *)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v9;
        *(float *)(a1 + 16) = v6;
        *(float *)(a2 - _Block_object_dispose(&a9, 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a1 + 48), (float *)(a2 - 24));
      return 1;
    case 5uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a1 + 48), (float *)(a1 + 72));
      float v20 = *(float *)(a2 - 8);
      float v21 = *(float *)(a1 + 88);
      if (v20 < v21)
      {
        uint64_t v22 = *(void *)(a1 + 72);
        *(void *)(a1 + 72) = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v22;
        uint64_t v23 = *(void *)(a1 + 80);
        *(void *)(a1 + 80) = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v23;
        *(float *)(a1 + 8_Block_object_dispose(&a9, 8) = v20;
        *(float *)(a2 - _Block_object_dispose(&a9, 8) = v21;
        float v24 = *(float *)(a1 + 88);
        float v25 = *(float *)(a1 + 64);
        if (v24 < v25)
        {
          uint64_t v26 = *(void *)(a1 + 72);
          uint64_t v27 = *(void *)(a1 + 80);
          long long v28 = *(_OWORD *)(a1 + 48);
          *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v26;
          *(void *)(a1 + 56) = v27;
          *(_OWORD *)(a1 + 72) = v28;
          *(float *)(a1 + 64) = v24;
          *(float *)(a1 + 8_Block_object_dispose(&a9, 8) = v25;
          float v29 = *(float *)(a1 + 40);
          if (v24 < v29)
          {
            long long v30 = *(_OWORD *)(a1 + 24);
            *(void *)(a1 + 24) = v26;
            *(void *)(a1 + 32) = v27;
            *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = v30;
            *(float *)(a1 + 40) = v24;
            *(float *)(a1 + 64) = v29;
            float v31 = *(float *)(a1 + 16);
            if (v24 < v31)
            {
              long long v32 = *(_OWORD *)a1;
              *(void *)a1 = v26;
              *(void *)(a1 + _Block_object_dispose(&a9, 8) = v27;
              *(_OWORD *)(a1 + 24) = v32;
              *(float *)(a1 + 16) = v24;
              *(float *)(a1 + 40) = v31;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,homeai::clustering::GreedyClusterer::computeMergePairs(std::set<long long> &,std::set<long long> &,std::shared_ptr<std::vector<std::tuple<long long,long long,float>>>,BOOL)::$_0 &,std::tuple<long long,long long,float>*>((float *)a1, (float *)(a1 + 24), (float *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    float v14 = *(float *)(v11 + 16);
    if (v14 < *(float *)(v10 + 16))
    {
      long long v15 = *(_OWORD *)v11;
      uint64_t v16 = v12;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = *(void *)(a1 + v16 + 56);
        *(void *)(v17 + 72) = *(void *)(a1 + v16 + 48);
        *(void *)(v17 + 80) = v18;
        *(_DWORD *)(v17 + 8_Block_object_dispose(&a9, 8) = *(_DWORD *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (v14 >= *(float *)(v17 + 40))
        {
          uint64_t v19 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v19 = a1;
LABEL_13:
      *(_OWORD *)uint64_t v19 = v15;
      *(float *)(v19 + 16) = v14;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  float v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  BOOL result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      BOOL result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  int v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *int v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_225E05E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::vector<long long>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::vector<long long>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    *size_t v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_225E06104(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<long long>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26477B348, MEMORY[0x263F8C068]);
}

void sub_225E06178(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  BOOL result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  float v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  BOOL result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      BOOL result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__erase_unique<long long>(void *a1, unint64_t *a2)
{
  BOOL result = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::vector<long long>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + _Block_object_dispose(&a9, 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<long long,std::unordered_set<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unordered_set<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unordered_set<long long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<long long,std::vector<long long>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<long long>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<long long>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<long long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    BOOL result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        BOOL result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

double homeai::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract(homeai::mod::ImageDescriptorBufferAbstract *this)
{
  *(void *)this = &unk_26D987520;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = (char *)this + 40;
  double result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((unsigned char *)this + 8_Block_object_dispose(&a9, 8) = 0;
  return result;
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::initBufferWithData(homeai::mod::ImageDescriptorBufferAbstract *this, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a2)
  {
    uint64_t v9 = 0;
    unint64_t v11 = (char *)this + 40;
    uint64_t v10 = (void *)*((void *)this + 5);
    *((void *)this + 2) = *((void *)this + 1);
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)this + 32, v10);
    *((void *)v11 - 1) = v11;
    *(void *)unint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = a2;
    *((void *)v11 + 3) = a3;
    *((void *)v11 + 4) = a4;
    *((void *)v11 + 5) = a4;
    v11[48] = a5;
  }
  else
  {
    uint64_t v9 = -3;
  }
  return (v9 + 128) | 0xE00;
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::ImageDescriptorBufferAbstract(uint64_t a1, void **a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)a1 = &unk_26D987520;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  *(unsigned char *)(a1 + 8_Block_object_dispose(&a9, 8) = a6;
  uint64_t inited = homeai::mod::ImageDescriptorBufferAbstract::initBufferWithData((homeai::mod::ImageDescriptorBufferAbstract *)a1, a3, a4, a5, a6);
  if ((inited & 0x80) == 0)
  {
    uint64_t v11 = inited;
    exception = __cxa_allocate_exception(8uLL);
    void *exception = v11;
    __cxa_throw(exception, MEMORY[0x263F8C290], 0);
  }
  uint64_t v9 = homeai::mod::ImageDescriptorBufferAbstract::resetDescriptorIds((void *)a1, a2);
  if ((v9 & 0x80) == 0)
  {
    float v13 = __cxa_allocate_exception(8uLL);
    *float v13 = v9;
    __cxa_throw(v13, MEMORY[0x263F8C290], 0);
  }
  return a1;
}

void sub_225E06700(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy(v2, *v4);
  uint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::resetDescriptorIds(void *a1, void **a2)
{
  if (a1[9] == a2[1] - *a2)
  {
    uint64_t v4 = (uint64_t)(a1 + 1);
    a1[2] = a1[1];
    uint8x8_t v5 = a1 + 4;
    uint64_t v6 = a1 + 5;
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)(a1 + 4), (void *)a1[5]);
    *(void *)(v4 + 24) = v6;
    *(void *)(v4 + 40) = 0;
    void *v6 = 0;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>,std::back_insert_iterator<std::vector<long long>>,0>(*a2, a2[1], v4);
    BOOL v15 = 0;
    uint64_t v16 = 0;
    __p = 0;
    std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&__p, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3);
    size_t v18 = 0;
    uint64_t v19 = 0;
    unint64_t v17 = (uint64_t *)&v18;
    unint64_t v7 = (char *)__p;
    if ((int)((unint64_t)(v15 - (unsigned char *)__p) >> 3) >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        size_t v20 = &v7[v8];
        *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(&v17, (uint64_t *)&v7[v8], (uint64_t)&std::piecewise_construct, (void **)&v20)+ 10) = v9++;
        unint64_t v7 = (char *)__p;
        v8 += 8;
      }
      while (v9 < (int)((unint64_t)(v15 - (unsigned char *)__p) >> 3));
    }
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)v5, (void *)a1[5]);
    uint64_t v10 = v18;
    a1[4] = v17;
    a1[5] = v10;
    uint64_t v11 = v19;
    a1[6] = v19;
    if (v11)
    {
      v10[2] = v6;
      unint64_t v17 = (uint64_t *)&v18;
      size_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v10 = 0;
    }
    else
    {
      void *v5 = v6;
    }
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::destroy((uint64_t)&v17, v10);
    if (__p)
    {
      BOOL v15 = __p;
      operator delete(__p);
    }
    unint64_t v12 = &CVML_status_ok;
  }
  else
  {
    unint64_t v12 = &CVML_status_invalidParameter;
  }
  return (*v12 + 128) | 0xE00;
}

void sub_225E068B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, void *a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::appendDescriptors(homeai::mod::ImageDescriptorBufferAbstract *this, const homeai::mod::ImageDescriptorBufferAbstract *a2)
{
  if (!*((void *)a2 + 9))
  {
LABEL_41:
    uint64_t v5 = 128;
    return v5 | 0xE00;
  }
  uint64_t v4 = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(void *)this + 104))(this);
  if (v4 != (*(uint64_t (**)(const homeai::mod::ImageDescriptorBufferAbstract *))(*(void *)a2 + 104))(a2))
  {
    uint64_t v5 = 124;
    return v5 | 0xE00;
  }
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *((void *)this + 2);
  if (v6 != v7)
  {
    uint64_t v8 = *((void *)a2 + 1);
    uint64_t v9 = *((void *)a2 + 2);
    if (v8 == v9 && *((void *)a2 + 9) != 0)
    {
      uint64_t v5 = 124;
      return v5 | 0xE00;
    }
    if (*((void *)this + 9) == (v7 - v6) >> 3) {
      goto LABEL_15;
    }
LABEL_14:
    uint64_t v5 = 124;
    return v5 | 0xE00;
  }
  uint64_t v8 = *((void *)a2 + 1);
  uint64_t v9 = *((void *)a2 + 2);
  if (*((void *)this + 9))
  {
    if (v8 == v9)
    {
      uint64_t v11 = *((void *)a2 + 9);
      goto LABEL_19;
    }
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v11 = *((void *)a2 + 9);
  if (v8 != v9 && v11 != (v9 - v8) >> 3)
  {
    uint64_t v5 = 124;
    return v5 | 0xE00;
  }
LABEL_19:
  if (!*((void *)this + 6) || !*((void *)a2 + 6) || (int)v11 < 1)
  {
LABEL_34:
    uint64_t v19 = *((void *)this + 9);
    homeai::mod::ImageDescriptorBufferAbstract::resizeForDescriptorsCount(this, (int)v11 + (int)v19, 1);
    if ((int)v11 >= 1)
    {
      unint64_t v20 = 0;
      do
      {
        unint64_t DataForKthDescriptor = (void *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, (int)v19 + v20);
        uint64_t v22 = (const void *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(a2, v20);
        size_t v23 = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(void *)this + 104))(this);
        memcpy(DataForKthDescriptor, v22, v23);
        ++v20;
      }
      while (v11 != v20);
    }
    float v24 = (void *)*((void *)a2 + 1);
    float v25 = (void *)*((void *)a2 + 2);
    if (v24 != v25)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>,std::back_insert_iterator<std::vector<long long>>,0>(v24, v25, (uint64_t)this + 8);
      if ((int)v11 >= 1)
      {
        uint64_t v26 = 0;
        uint64_t v27 = (uint64_t **)((char *)this + 32);
        do
        {
          float v29 = (uint64_t *)(*((void *)a2 + 1) + v26);
          *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v27, v29, (uint64_t)&std::piecewise_construct, &v29)+ 10) = v19;
          LODWORD(v19) = v19 + 1;
          v26 += 8;
        }
        while (8 * v11 != v26);
      }
    }
    goto LABEL_41;
  }
  uint64_t v12 = 0;
  uint64_t v5 = 124;
  while (1)
  {
    if (*((void *)this + 5))
    {
      uint64_t v13 = *(void *)(v8 + 8 * v12);
      float v14 = (void *)((char *)this + 40);
      BOOL v15 = (void *)*((void *)this + 5);
      do
      {
        uint64_t v16 = v15[4];
        BOOL v17 = v16 < v13;
        if (v16 >= v13) {
          size_t v18 = v15;
        }
        else {
          size_t v18 = v15 + 1;
        }
        if (!v17) {
          float v14 = v15;
        }
        BOOL v15 = (void *)*v18;
      }
      while (*v18);
      if (v14 != (void *)((char *)this + 40) && v13 >= v14[4]) {
        return v5 | 0xE00;
      }
    }
    if (++v12 == v11) {
      goto LABEL_34;
    }
  }
}

void *homeai::mod::ImageDescriptorBufferAbstract::resizeForDescriptorsCount(homeai::mod::ImageDescriptorBufferAbstract *this, unint64_t a2, char a3)
{
  if (!(*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(void *)this + 104))(this))
  {
    uint64_t v6 = 126;
    goto LABEL_21;
  }
  if (*((void *)this + 10) < a2
    || (double result = (void *)(*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(void *)this
                                                                                                 + 104))(this),
        (unint64_t)result > *((void *)this + 8)))
  {
    unint64_t v8 = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(void *)this + 104))(this);
    unint64_t v9 = *((void *)this + 8);
    if (v8 <= v9)
    {
      uint64_t v10 = (void *)*((void *)this + 7);
      if (v10 && (a3 & 1) != 0)
      {
        if (!*((unsigned char *)this + 88))
        {
          uint64_t v12 = malloc_type_malloc(v9 * a2, 0x36ADFC7EuLL);
          *((void *)this + 7) = v12;
          if (!v12) {
            goto LABEL_16;
          }
          double result = memcpy(v12, v10, *((void *)this + 9) * *((void *)this + 8));
LABEL_17:
          *((void *)this + 9) = a2;
          *((void *)this + 10) = a2;
          *((unsigned char *)this + 8_Block_object_dispose(&a9, 8) = 1;
          return result;
        }
        double result = malloc_type_realloc(*((void **)this + 7), v9 * a2, 0xA85CFBA0uLL);
LABEL_15:
        *((void *)this + 7) = result;
        if (!result)
        {
LABEL_16:
          uint64_t v6 = 123;
LABEL_21:
          uint64_t v13 = v6 | 0xE00;
          exception = __cxa_allocate_exception(8uLL);
          void *exception = v13;
          __cxa_throw(exception, MEMORY[0x263F8C290], 0);
        }
        goto LABEL_17;
      }
    }
    else
    {
      *((void *)this + _Block_object_dispose(&a9, 8) = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(void *)this + 104))(this);
      uint64_t v10 = (void *)*((void *)this + 7);
    }
    if (v10)
    {
      if (*((unsigned char *)this + 88)) {
        free(v10);
      }
    }
    uint64_t v11 = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(void *)this + 104))(this);
    *((void *)this + _Block_object_dispose(&a9, 8) = v11;
    double result = malloc_type_malloc(v11 * a2, 0x1C09794BuLL);
    goto LABEL_15;
  }
  *((void *)this + 9) = a2;
  return result;
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::deleteDescriptorAtIndex(homeai::mod::ImageDescriptorBufferAbstract *this, int a2, uint64_t a3)
{
  uint64_t v6 = *((int *)this + 18);
  if ((int)v6 <= a2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = 3708;
    __cxa_throw(exception, MEMORY[0x263F8C290], 0);
  }
  uint64_t v7 = v6 - 1;
  if ((int)v6 - 1 > a2)
  {
    unint64_t DataForKthDescriptor = (void *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, a2);
    unint64_t v9 = (const void *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(this, (int)v7);
    memcpy(DataForKthDescriptor, v9, *((void *)this + 8));
    uint64_t v10 = *((void *)this + 1);
    if (v10 != *((void *)this + 2))
    {
      uint64_t v28 = *(void *)(v10 + 8 * a2);
      uint64_t v27 = *(void *)(v10 + 8 * (int)v7);
      float v29 = &v28;
      *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)this + 4, &v28, (uint64_t)&std::piecewise_construct, &v29)+ 10) = v7;
      float v29 = &v27;
      *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)this + 4, &v27, (uint64_t)&std::piecewise_construct, &v29)+ 10) = a2;
      uint64_t v11 = *((void *)this + 1);
      *(void *)(v11 + 8 * a2) = v27;
      *(void *)(v11 + 8 * (int)v7) = v28;
    }
    if (a3)
    {
      unint64_t v12 = *(void *)(a3 + 16);
      uint64_t v13 = *(int **)(a3 + 8);
      if ((unint64_t)v13 >= v12)
      {
        BOOL v15 = *(int **)a3;
        uint64_t v16 = ((uint64_t)v13 - *(void *)a3) >> 2;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v12 - (void)v15;
        if (v18 >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v19);
          BOOL v15 = *(int **)a3;
          uint64_t v13 = *(int **)(a3 + 8);
        }
        else
        {
          unint64_t v20 = 0;
        }
        unint64_t v21 = (int *)&v20[4 * v16];
        uint64_t v22 = &v20[4 * v19];
        int *v21 = a2;
        float v14 = v21 + 1;
        while (v13 != v15)
        {
          int v23 = *--v13;
          *--unint64_t v21 = v23;
        }
        *(void *)a3 = v21;
        *(void *)(a3 + _Block_object_dispose(&a9, 8) = v14;
        *(void *)(a3 + 16) = v22;
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *uint64_t v13 = a2;
        float v14 = v13 + 1;
      }
      *(void *)(a3 + _Block_object_dispose(&a9, 8) = v14;
    }
  }
  uint64_t v24 = *((void *)this + 1);
  if (v24 != *((void *)this + 2))
  {
    float v29 = *(uint64_t **)(v24 + 8 * v7);
    std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__erase_unique<long long>((uint64_t)this + 32, (uint64_t *)&v29);
    *((void *)this + 2) -= 8;
  }
  --*((void *)this + 9);
  return 3712;
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::deleteDescriptorsAtIndexes(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>,std::back_insert_iterator<std::vector<int>>,0>(*a2, a2[1], (uint64_t)&v12);
  unint64_t v6 = 126 - 2 * __clz(v13 - v12);
  if (v13 == v12) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v12, v13, (uint64_t)&v15, v7, 1);
  unint64_t v8 = v12;
  if ((int)((unint64_t)((char *)v13 - (char *)v12) >> 2) < 1)
  {
    BOOL v10 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v3 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 48))(a1, v8[v9], a3);
      BOOL v10 = (v3 & 0x80) == 0;
      unint64_t v8 = v12;
      if ((v3 & 0x80) == 0) {
        break;
      }
      ++v9;
    }
    while (v9 < (int)((unint64_t)((char *)v13 - (char *)v12) >> 2));
  }
  if (v8)
  {
    uint64_t v13 = v8;
    operator delete(v8);
  }
  if (v10) {
    return v3;
  }
  else {
    return 3712;
  }
}

void sub_225E07164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::deleteDescriptorsWithIds(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*(void *)(a1 + 8) == *(void *)(a1 + 16))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = 3708;
    __cxa_throw(exception, MEMORY[0x263F8C290], 0);
  }
  __p = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v6 = *a2;
  if ((int)((unint64_t)(a2[1] - *a2) >> 3) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v42 = 0;
      uint64_t v42 = *(void *)(v6 + 8 * v7);
      float v39 = &v42;
      unint64_t v8 = std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 32), &v42, (uint64_t)&std::piecewise_construct, (void **)&v39);
      uint64_t v9 = v8;
      BOOL v10 = v44;
      if (v44 >= v45)
      {
        unint64_t v12 = (char *)__p;
        uint64_t v13 = (v44 - (unsigned char *)__p) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v45 - (unsigned char *)__p;
        if ((v45 - (unsigned char *)__p) >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v45, v16);
          unint64_t v12 = (char *)__p;
          BOOL v10 = v44;
        }
        else
        {
          unint64_t v17 = 0;
        }
        uint64_t v18 = &v17[4 * v13];
        *(_DWORD *)uint64_t v18 = *((_DWORD *)v9 + 10);
        uint64_t v11 = v18 + 4;
        while (v10 != v12)
        {
          int v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        __p = v18;
        uint64_t v44 = v11;
        uint64_t v45 = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v44 = *((_DWORD *)v8 + 10);
        uint64_t v11 = v10 + 4;
      }
      uint64_t v44 = v11;
      ++v7;
      uint64_t v6 = *a2;
    }
    while (v7 < (int)((unint64_t)(a2[1] - *a2) >> 3));
  }
  float v39 = 0;
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, void **, void **))(*(void *)a1 + 56))(a1, &__p, &v39);
  if ((v20 & 0x80) != 0)
  {
    if (a3)
    {
      uint64_t v22 = (int *)v39;
      unint64_t v21 = v40;
      if ((int)((unint64_t)(v40 - (unsigned char *)v39) >> 2) >= 1)
      {
        uint64_t v23 = 0;
        do
        {
          uint64_t v24 = v22[v23];
          uint64_t v25 = *(void *)(a1 + 8);
          if ((int)v24 < (int)((unint64_t)(*(void *)(a1 + 16) - v25) >> 3))
          {
            uint64_t v27 = *(void **)(a3 + 8);
            unint64_t v26 = *(void *)(a3 + 16);
            if ((unint64_t)v27 >= v26)
            {
              float v29 = *(void **)a3;
              uint64_t v30 = ((uint64_t)v27 - *(void *)a3) >> 3;
              unint64_t v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v32 = v26 - (void)v29;
              if (v32 >> 2 > v31) {
                unint64_t v31 = v32 >> 2;
              }
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v31;
              }
              if (v33)
              {
                float v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(a3 + 16, v33);
                float v29 = *(void **)a3;
                uint64_t v27 = *(void **)(a3 + 8);
              }
              else
              {
                float v34 = 0;
              }
              BOOL v35 = &v34[8 * v30];
              *(void *)BOOL v35 = *(void *)(v25 + 8 * v24);
              uint64_t v28 = v35 + 8;
              while (v27 != v29)
              {
                uint64_t v36 = *--v27;
                *((void *)v35 - 1) = v36;
                v35 -= 8;
              }
              *(void *)a3 = v35;
              *(void *)(a3 + _Block_object_dispose(&a9, 8) = v28;
              *(void *)(a3 + 16) = &v34[8 * v33];
              if (v29) {
                operator delete(v29);
              }
            }
            else
            {
              void *v27 = *(void *)(v25 + 8 * v24);
              uint64_t v28 = v27 + 1;
            }
            *(void *)(a3 + _Block_object_dispose(&a9, 8) = v28;
            uint64_t v22 = (int *)v39;
            unint64_t v21 = v40;
          }
          ++v23;
        }
        while (v23 < (int)((unint64_t)(v21 - (unsigned char *)v22) >> 2));
      }
    }
    uint64_t v20 = 3712;
  }
  if (v39)
  {
    unint64_t v40 = v39;
    operator delete(v39);
  }
  if (__p)
  {
    uint64_t v44 = (char *)__p;
    operator delete(__p);
  }
  return v20;
}

void sub_225E074C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

float homeai::mod::ImageDescriptorBufferAbstract::computeDistanceFrom(homeai::mod::ImageDescriptorBufferAbstract *this, const homeai::mod::ImageDescriptorBufferAbstract *a2)
{
  if (*((void *)this + 9) != 1 || *((void *)a2 + 9) != 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = 3708;
    __cxa_throw(exception, MEMORY[0x263F8C290], 0);
  }
  (*(void (**)(void **__return_ptr))(*(void *)this + 80))(__p);
  float v3 = *(float *)__p[0];
  __p[1] = __p[0];
  operator delete(__p[0]);
  return v3;
}

homeai::mod::ImageDescriptorBufferAbstract *homeai::mod::ImageDescriptorBufferAbstract::setDescriptorIdForKthDescriptor(homeai::mod::ImageDescriptorBufferAbstract *this, int a2, uint64_t a3)
{
  uint64_t v10 = a3;
  uint64_t v6 = *((void *)this + 1);
  if (v6 == *((void *)this + 2))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = 3708;
    __cxa_throw(exception, MEMORY[0x263F8C290], 0);
  }
  uint64_t v9 = *(void *)(v6 + 8 * a2);
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__erase_unique<long long>((uint64_t)this + 32, &v9);
  *(void *)(*((void *)this + 1) + 8 * a2) = a3;
  uint64_t v11 = &v10;
  *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)this + 4, &v10, (uint64_t)&std::piecewise_construct, &v11)+ 10) = a2;
  return this;
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::createDeepCopyOfSubset(homeai::mod::ImageDescriptorBufferAbstract *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  size_t v5 = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(void *)a1 + 104))(a1);
  uint64_t v6 = (*(uint64_t (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(void *)a1 + 16))(a1);
  *(unsigned char *)(v6 + 8_Block_object_dispose(&a9, 8) = 1;
  *(void *)(v6 + 64) = *((void *)a1 + 8);
  *(void *)(v6 + 72) = v4 >> 3;
  *(void *)(v6 + 56) = malloc_type_malloc(*((void *)a1 + 8) * (v4 >> 3), 0x10BB3D13uLL);
  *(void *)(v6 + 80) = v4 >> 3;
  if (v6 + 8 != a2) {
    std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)(v6 + 8), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  if ((int)((unint64_t)v4 >> 3) >= 1)
  {
    uint64_t v7 = 0;
    unint64_t v8 = (void *)((char *)a1 + 40);
    uint64_t v9 = *(char **)(v6 + 56);
    while (1)
    {
      uint64_t v10 = (void *)*v8;
      if (!*v8) {
        break;
      }
      uint64_t v11 = *(void *)(*(void *)a2 + 8 * v7);
      unint64_t v12 = (void *)((char *)a1 + 40);
      do
      {
        uint64_t v13 = v10[4];
        BOOL v14 = v13 < v11;
        if (v13 >= v11) {
          uint64_t v15 = v10;
        }
        else {
          uint64_t v15 = v10 + 1;
        }
        if (!v14) {
          unint64_t v12 = v10;
        }
        uint64_t v10 = (void *)*v15;
      }
      while (*v15);
      if (v12 == v8 || v11 < v12[4]) {
        break;
      }
      unint64_t DataForKthDescriptor = (const void *)homeai::mod::ImageDescriptorBufferAbstract::getDataForKthDescriptor(a1, *((int *)v12 + 10));
      memcpy(v9, DataForKthDescriptor, v5);
      uint64_t v18 = (uint64_t *)(*(void *)a2 + 8 * v7);
      *((_DWORD *)std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(v6 + 32), v18, (uint64_t)&std::piecewise_construct, &v18)+ 10) = v7++;
      v9 += *((void *)a1 + 8);
      if (v7 == ((unint64_t)v4 >> 3)) {
        return v6;
      }
    }
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      return 0;
    }
  }
  return v6;
}

void homeai::mod::ImageDescriptorBufferAbstract::createEmptyCopy(homeai::mod::ImageDescriptorBufferAbstract *this)
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = 3711;
  __cxa_throw(exception, MEMORY[0x263F8C290], 0);
}

uint64_t homeai::mod::ImageDescriptorBufferAbstract::print(homeai::mod::ImageDescriptorBufferAbstract *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Descriptor count = ", 19);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  float v3 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v13);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Descriptor length = ", 20);
  (*(void (**)(homeai::mod::ImageDescriptorBufferAbstract *))(*(void *)this + 104))(this);
  uint64_t v4 = (void *)std::ostream::operator<<();
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" bytes", 6);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  uint64_t v6 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v13);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v9[0] = *MEMORY[0x263F8C2B8];
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v10[0] = v7;
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A641730](&v12);
}

void sub_225E07B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::locale::~locale((std::locale *)(v9 - 56));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void homeai::mod::ImageDescriptorBufferAbstract::getRepresentative()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = 3711;
  __cxa_throw(exception, MEMORY[0x263F8C290], 0);
}

uint64_t std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__erase_unique<long long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    uint64_t v5 = v2[4];
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<long long,int>,std::__map_value_compare<long long,std::__value_type<long long,int>,std::less<long long>,true>,std::allocator<std::__value_type<long long,int>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      double result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      double result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      std::locale v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + _Block_object_dispose(&a9, 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      int v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *std::locale v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        double result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    uint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      unint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        unint64_t v16 = v7;
      }
      else
      {
        uint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + _Block_object_dispose(&a9, 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      void v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *uint64_t v24 = v23;
      goto LABEL_72;
    }
    unint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    unint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      unint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      double result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  int v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    unint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    int v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  void v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>,std::back_insert_iterator<std::vector<int>>,0>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
    std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  int v5 = *(_DWORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    int v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      std::locale v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v6, v12);
      int v8 = *(_DWORD **)v4;
      int v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      std::locale v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + _Block_object_dispose(&a9, 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + _Block_object_dispose(&a9, 8) = v7;
  return a1;
}

int *std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(int *result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v22 = *(a2 - 1);
          int v23 = *v11;
          if (v22 > *v11)
          {
            *uint64_t v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          int v24 = v11[1];
          int v25 = *(a2 - 1);
          if (v24 <= v25) {
            int v26 = *(a2 - 1);
          }
          else {
            int v26 = v11[1];
          }
          if (v24 >= v25) {
            int v24 = *(a2 - 1);
          }
          *(a2 - 1) = v24;
          v11[1] = v26;
          int v27 = *(a2 - 1);
          if (v27 <= *v11) {
            int v28 = *v11;
          }
          else {
            int v28 = *(a2 - 1);
          }
          if (v27 >= *v11) {
            int v27 = *v11;
          }
          *(a2 - 1) = v27;
          int v30 = *v11;
          int v29 = v11[1];
          if (v28 <= v29) {
            int v30 = v11[1];
          }
          if (v28 < v29) {
            int v29 = v28;
          }
          *uint64_t v11 = v30;
          v11[1] = v29;
          break;
        case 4uLL:
          int v32 = v11[1];
          int v31 = v11[2];
          if (*v11 <= v31) {
            int v33 = v11[2];
          }
          else {
            int v33 = *v11;
          }
          if (*v11 < v31) {
            int v31 = *v11;
          }
          v11[2] = v31;
          *uint64_t v11 = v33;
          int v34 = *(a2 - 1);
          if (v32 <= v34) {
            int v35 = *(a2 - 1);
          }
          else {
            int v35 = v32;
          }
          if (v32 < v34) {
            int v34 = v32;
          }
          *(a2 - 1) = v34;
          int v36 = *v11;
          if (*v11 <= v35) {
            int v37 = v35;
          }
          else {
            int v37 = *v11;
          }
          if (v36 >= v35) {
            int v36 = v35;
          }
          *uint64_t v11 = v37;
          v11[1] = v36;
          int v38 = v11[2];
          int v39 = *(a2 - 1);
          if (v38 <= v39) {
            int v40 = *(a2 - 1);
          }
          else {
            int v40 = v11[2];
          }
          if (v38 >= v39) {
            int v38 = *(a2 - 1);
          }
          *(a2 - 1) = v38;
          int v41 = v11[1];
          if (v41 <= v40) {
            int v42 = v40;
          }
          else {
            int v42 = v11[1];
          }
          if (v41 >= v40) {
            int v41 = v40;
          }
          v11[1] = v42;
          v11[2] = v41;
          break;
        case 5uLL:
          int v43 = *v11;
          int v44 = v11[1];
          if (*v11 <= v44) {
            int v45 = v11[1];
          }
          else {
            int v45 = *v11;
          }
          if (v43 >= v44) {
            int v43 = v11[1];
          }
          *uint64_t v11 = v45;
          v11[1] = v43;
          int v46 = v11[3];
          int v47 = *(a2 - 1);
          if (v46 <= v47) {
            int v48 = *(a2 - 1);
          }
          else {
            int v48 = v11[3];
          }
          if (v46 >= v47) {
            int v46 = *(a2 - 1);
          }
          *(a2 - 1) = v46;
          void v11[3] = v48;
          int v49 = *(a2 - 1);
          int v50 = v11[2];
          if (v49 <= v50) {
            int v51 = v11[2];
          }
          else {
            int v51 = *(a2 - 1);
          }
          if (v49 >= v50) {
            int v49 = v11[2];
          }
          *(a2 - 1) = v49;
          int v53 = v11[2];
          int v52 = v11[3];
          int v54 = v11[1];
          if (v51 <= v52) {
            int v53 = v11[3];
          }
          if (v51 < v52) {
            int v52 = v51;
          }
          v11[2] = v53;
          void v11[3] = v52;
          int v55 = *(a2 - 1);
          if (v54 <= v55) {
            int v56 = *(a2 - 1);
          }
          else {
            int v56 = v54;
          }
          if (v54 < v55) {
            int v55 = v54;
          }
          *(a2 - 1) = v55;
          int v57 = *v11;
          int v59 = v11[2];
          int v58 = v11[3];
          if (v58 <= *v11) {
            int v60 = *v11;
          }
          else {
            int v60 = v11[3];
          }
          if (v58 >= v57) {
            int v58 = *v11;
          }
          if (v60 <= v59) {
            int v57 = v11[2];
          }
          if (v60 < v59) {
            int v59 = v60;
          }
          if (v58 <= v56) {
            int v61 = v56;
          }
          else {
            int v61 = v58;
          }
          if (v58 >= v56) {
            int v58 = v56;
          }
          if (v61 <= v59) {
            int v56 = v59;
          }
          *uint64_t v11 = v57;
          v11[1] = v56;
          if (v61 >= v59) {
            int v62 = v59;
          }
          else {
            int v62 = v61;
          }
          v11[2] = v62;
          void v11[3] = v58;
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *,int *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v17 - 1, v17, &v11[v16 + 1]);
      int v18 = *v11;
      *uint64_t v11 = *v17;
      int *v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(v11 - 1) <= *v11)
    {
      double result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::greater<int> &>(v11, a2);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    int v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::greater<int> &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v11, v19);
    uint64_t v11 = v19 + 1;
    double result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      double result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  long long v63 = v11 + 1;
  BOOL v65 = v11 == a2 || v63 == a2;
  if (a5)
  {
    if (!v65)
    {
      uint64_t v66 = 0;
      CGRect v67 = v11;
      do
      {
        int v69 = *v67;
        int v68 = v67[1];
        CGRect v67 = v63;
        if (v68 > v69)
        {
          uint64_t v70 = v66;
          while (1)
          {
            *(int *)((char *)v11 + v70 + 4) = v69;
            if (!v70) {
              break;
            }
            int v69 = *(int *)((char *)v11 + v70 - 4);
            v70 -= 4;
            if (v68 <= v69)
            {
              float v71 = (int *)((char *)v11 + v70 + 4);
              goto LABEL_125;
            }
          }
          float v71 = v11;
LABEL_125:
          *float v71 = v68;
        }
        long long v63 = v67 + 1;
        v66 += 4;
      }
      while (v67 + 1 != a2);
    }
  }
  else if (!v65)
  {
    do
    {
      int v73 = *v10;
      int v72 = v10[1];
      unint64_t v10 = v63;
      if (v72 > v73)
      {
        do
        {
          *long long v63 = v73;
          int v73 = *(v63 - 2);
          --v63;
        }
        while (v72 > v73);
        *long long v63 = v72;
      }
      long long v63 = v10 + 1;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(int *a1, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *a1;
  int v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    int v6 = *a1;
    if (*a2 <= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::greater<int> &>(int *a1, int *a2)
{
  int v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    int v5 = a1 + 1;
    do
    {
      int v3 = v5;
      if (v5 >= a2) {
        break;
      }
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    int v3 = a1;
    do
    {
      int v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < a2)
  {
    do
      int v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < a2)
  {
    int v7 = *v3;
    int v8 = *a2;
    do
    {
      int *v3 = v8;
      *a2 = v7;
      do
      {
        int v9 = v3[1];
        ++v3;
        int v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        int v10 = *--a2;
        int v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1) {
    *a1 = *(v3 - 1);
  }
  *(v3 - 1) = v2;
  return v3;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,std::greater<int> &>(int *a1, int *a2)
{
  uint64_t v2 = 0;
  int v3 = *a1;
  do
    int v4 = a1[++v2];
  while (v4 > v3);
  int v5 = &a1[v2];
  int v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      int v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      int v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    int v9 = *a2;
    int v10 = &a1[v2];
    uint64_t v11 = a2;
    do
    {
      *int v10 = v9;
      *uint64_t v11 = v4;
      do
      {
        int v12 = v10[1];
        ++v10;
        int v4 = v12;
      }
      while (v12 > v3);
      do
      {
        int v13 = *--v11;
        int v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v10 < v11);
    int v6 = v10 - 1;
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  int *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(_DWORD *a1, int *a2)
{
  uint64_t v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      int v3 = *(a2 - 1);
      int v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      int v20 = a1[1];
      int v21 = *(a2 - 1);
      if (v20 <= v21) {
        int v22 = *(a2 - 1);
      }
      else {
        int v22 = a1[1];
      }
      if (v20 >= v21) {
        int v20 = *(a2 - 1);
      }
      *(a2 - 1) = v20;
      a1[1] = v22;
      int v23 = *(a2 - 1);
      if (v23 <= *a1) {
        int v24 = *a1;
      }
      else {
        int v24 = *(a2 - 1);
      }
      if (v23 >= *a1) {
        int v23 = *a1;
      }
      *(a2 - 1) = v23;
      int v26 = *a1;
      int v25 = a1[1];
      if (v24 <= v25) {
        int v26 = a1[1];
      }
      if (v24 < v25) {
        int v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      int v48 = a1[1];
      int v47 = a1[2];
      if (*a1 <= v47) {
        int v49 = a1[2];
      }
      else {
        int v49 = *a1;
      }
      if (*a1 < v47) {
        int v47 = *a1;
      }
      a1[2] = v47;
      *a1 = v49;
      int v50 = *(a2 - 1);
      if (v48 <= v50) {
        int v51 = *(a2 - 1);
      }
      else {
        int v51 = v48;
      }
      if (v48 < v50) {
        int v50 = v48;
      }
      *(a2 - 1) = v50;
      int v52 = *a1;
      if (*a1 <= v51) {
        int v53 = v51;
      }
      else {
        int v53 = *a1;
      }
      if (v52 >= v51) {
        int v52 = v51;
      }
      *a1 = v53;
      a1[1] = v52;
      int v54 = a1[2];
      int v55 = *(a2 - 1);
      if (v54 <= v55) {
        int v56 = *(a2 - 1);
      }
      else {
        int v56 = a1[2];
      }
      if (v54 >= v55) {
        int v54 = *(a2 - 1);
      }
      *(a2 - 1) = v54;
      int v57 = a1[1];
      if (v57 <= v56) {
        int v58 = v56;
      }
      else {
        int v58 = a1[1];
      }
      if (v57 >= v56) {
        int v57 = v56;
      }
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      int v27 = *a1;
      int v28 = a1[1];
      if (*a1 <= v28) {
        int v29 = a1[1];
      }
      else {
        int v29 = *a1;
      }
      if (v27 >= v28) {
        int v27 = a1[1];
      }
      *a1 = v29;
      a1[1] = v27;
      int v30 = a1[3];
      int v31 = *(a2 - 1);
      if (v30 <= v31) {
        int v32 = *(a2 - 1);
      }
      else {
        int v32 = a1[3];
      }
      if (v30 >= v31) {
        int v30 = *(a2 - 1);
      }
      *(a2 - 1) = v30;
      a1[3] = v32;
      int v33 = *(a2 - 1);
      int v34 = a1[2];
      if (v33 <= v34) {
        int v35 = a1[2];
      }
      else {
        int v35 = *(a2 - 1);
      }
      if (v33 >= v34) {
        int v33 = a1[2];
      }
      *(a2 - 1) = v33;
      int v37 = a1[2];
      int v36 = a1[3];
      int v38 = a1[1];
      if (v35 <= v36) {
        int v37 = a1[3];
      }
      if (v35 < v36) {
        int v36 = v35;
      }
      a1[2] = v37;
      a1[3] = v36;
      int v39 = *(a2 - 1);
      if (v38 <= v39) {
        int v40 = *(a2 - 1);
      }
      else {
        int v40 = v38;
      }
      if (v38 < v39) {
        int v39 = v38;
      }
      *(a2 - 1) = v39;
      int v41 = *a1;
      int v43 = a1[2];
      int v42 = a1[3];
      if (v42 <= *a1) {
        int v44 = *a1;
      }
      else {
        int v44 = a1[3];
      }
      if (v42 >= v41) {
        int v42 = *a1;
      }
      if (v44 <= v43) {
        int v41 = a1[2];
      }
      if (v44 < v43) {
        int v43 = v44;
      }
      if (v42 <= v40) {
        int v45 = v40;
      }
      else {
        int v45 = v42;
      }
      if (v42 >= v40) {
        int v42 = v40;
      }
      if (v45 <= v43) {
        int v40 = v43;
      }
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43) {
        int v46 = v43;
      }
      else {
        int v46 = v45;
      }
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      int v6 = a1 + 2;
      int v5 = a1[2];
      int v8 = *a1;
      int v7 = a1[1];
      if (v7 <= v5) {
        int v9 = a1[2];
      }
      else {
        int v9 = a1[1];
      }
      if (v7 < v5) {
        int v5 = a1[1];
      }
      if (v5 <= v8) {
        int v10 = *a1;
      }
      else {
        int v10 = v5;
      }
      if (v5 >= v8) {
        int v5 = *a1;
      }
      int *v6 = v5;
      if (v10 <= v9) {
        int v11 = v9;
      }
      else {
        int v11 = v8;
      }
      if (v10 >= v9) {
        int v10 = v9;
      }
      *a1 = v11;
      a1[1] = v10;
      int v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    int v15 = *v12;
    int v16 = *v6;
    if (*v12 > v16)
    {
      uint64_t v17 = v14;
      while (1)
      {
        *(_DWORD *)((char *)a1 + v17) = v16;
        uint64_t v18 = v17 - 4;
        if (v17 == 4) {
          break;
        }
        int v16 = *(_DWORD *)((char *)a1 + v17 - 8);
        v17 -= 4;
        if (v15 <= v16)
        {
          int v19 = (_DWORD *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }
      int v19 = a1;
LABEL_27:
      _DWORD *v19 = v15;
      if (++v13 == 8) {
        return v12 + 1 == a2;
      }
    }
    int v6 = v12;
    v14 += 4;
    if (++v12 == a2) {
      return 1;
    }
  }
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *,int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    int v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        int v15 = *v14;
        if (*v14 > *a1)
        {
          int *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v16 = (unint64_t)v8 >> 2;
      do
      {
        uint64_t v17 = 0;
        int v18 = *a1;
        int v19 = a1;
        do
        {
          int v20 = &v19[v17 + 1];
          uint64_t v21 = (2 * v17) | 1;
          uint64_t v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            int v22 = *v20;
            uint64_t v17 = v21;
          }
          else
          {
            int v22 = *v20;
            int v23 = v20[1];
            if (*v20 >= v23) {
              int v22 = v20[1];
            }
            if (*v20 <= v23) {
              uint64_t v17 = v21;
            }
            else {
              ++v20;
            }
          }
          int *v19 = v22;
          int v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *int v20 = v18;
        }
        else
        {
          *int v20 = *v6;
          int *v6 = v18;
          uint64_t v24 = (char *)v20 - (char *)a1 + 4;
          if (v24 >= 5)
          {
            unint64_t v25 = (((unint64_t)v24 >> 2) - 2) >> 1;
            int v26 = &a1[v25];
            int v27 = *v26;
            int v28 = *v20;
            if (*v26 > *v20)
            {
              do
              {
                *int v20 = v27;
                int v20 = v26;
                if (!v25) {
                  break;
                }
                unint64_t v25 = (v25 - 1) >> 1;
                int v26 = &a1[v25];
                int v27 = *v26;
              }
              while (*v26 > v28);
              *int v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) + 1;
      uint64_t v8 = (int *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        int v10 = *v8;
      }
      else
      {
        int v10 = *v8;
        int v11 = v8[1];
        if (*v8 >= v11) {
          int v10 = v8[1];
        }
        if (*v8 > v11)
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }
      int v12 = *a4;
      if (v10 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = (2 * v7) | 1;
          uint64_t v8 = (int *)(result + 4 * v13);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            int v10 = *v8;
            uint64_t v7 = v13;
          }
          else
          {
            int v10 = *v8;
            int v14 = v8[1];
            if (*v8 >= v14) {
              int v10 = v8[1];
            }
            if (*v8 <= v14) {
              uint64_t v7 = v13;
            }
            else {
              ++v8;
            }
          }
        }
        while (v10 <= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

char *std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = std::vector<long long>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    int v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    int v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int v12 = &v9[v17];
  return result;
}

__CFString *HMITaskResultCodeAsString(uint64_t a1)
{
  uint64_t v1 = @"Success";
  if (a1 == 1) {
    uint64_t v1 = @"Canceled";
  }
  if (a1 == 2) {
    return @"Error";
  }
  else {
    return v1;
  }
}

void sub_225E09658(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_225E09944(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E09EE4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_225E0A0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

Class __getVCPHomeKitAnalysisServiceClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MediaAnalysisLibraryCore_frameworkLibrary)
  {
    v4[1] = MEMORY[0x263EF8330];
    v4[2] = 3221225472;
    v4[3] = __MediaAnalysisLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_26477CC60;
    uint64_t v6 = 0;
    MediaAnalysisLibraryCore_frameworkLibrardouble y = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!MediaAnalysisLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("VCPHomeKitAnalysisService");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)__getVCPHomeKitAnalysisServiceClass_block_invoke_cold_1();
LABEL_8:
    free(v2);
  }
  getVCPHomeKitAnalysisServiceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MediaAnalysisLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaAnalysisLibraryCore_frameworkLibrardouble y = result;
  return result;
}

void sub_225E0BBEC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_225E0D164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  __HMISignpostScopeLeave((uint64_t *)va);
  _Unwind_Resume(a1);
}

id HMIConvertNSDateToIsoDateString(void *a1)
{
  uint64_t v1 = (objc_class *)MEMORY[0x263F088C0];
  id v2 = a1;
  id v3 = objc_alloc_init(v1);
  uint64_t v4 = [v3 stringFromDate:v2];

  return v4;
}

void sub_225E148F8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

__CFString *HMIFaceFamiliarityAsString(uint64_t a1)
{
  uint64_t v1 = @"Known";
  if (!a1) {
    uint64_t v1 = @"Unknown";
  }
  if (a1 == 1) {
    return @"Uncertain";
  }
  else {
    return v1;
  }
}

void sub_225E15CC4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E15DF0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E15EF0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E161FC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E163A8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E16624(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E16A78(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E16FE4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E171F0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E175E8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E17A84(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E18224(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E18B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225E18DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225E19484(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

__CFString *HMIConfidenceLevelAsString(uint64_t a1)
{
  uint64_t v1 = @"Low";
  if (a1 == 1) {
    uint64_t v1 = @"Medium";
  }
  if (a1 == 2) {
    return @"High";
  }
  else {
    return v1;
  }
}

__CFString *HMIErrorCodeAsString(uint64_t a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = @"Unexpected error";
  switch(v3)
  {
    case 0:
      goto LABEL_10;
    case 1:
      goto LABEL_9;
    case 2:
      uint64_t v4 = @"Failed to analyze";
      return v4;
    case 3:
      uint64_t v4 = @"Video analyzer in error state";
      return v4;
    case 4:
      uint64_t v4 = @"Model failed to load";
      return v4;
    case 5:
      uint64_t v4 = @"Fragment is invalid";
      return v4;
    case 6:
      uint64_t v4 = @"Failed to read fragment";
      return v4;
    case 7:
      uint64_t v4 = @"Failed to verify fragment";
      return v4;
    case 8:
      uint64_t v4 = @"Failed to transcode fragment";
      return v4;
    default:
      if (a1 == 1001)
      {
        uint64_t v4 = @"No pixel buffer";
      }
      else
      {
LABEL_9:
        objc_msgSend(NSString, "stringWithFormat:", @"Unknown error code %ld", a1);
        uint64_t v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_10:
      }
      return v4;
  }
}

__CFString *HMIErrorCodeName(uint64_t a1)
{
  switch(a1)
  {
    case 1001:
      uint64_t v3 = @"HMIPrivateErrorCodeNilPixelBuffer";
      break;
    case 1002:
      uint64_t v3 = @"HMIPrivateErrorCodeEmptyURL";
      break;
    case 1003:
      uint64_t v3 = @"HMIPrivateErrorCodeAVAssetReaderInitializationFailed";
      break;
    case 1004:
      uint64_t v3 = @"HMIPrivateErrorCodeFailedToLoadProperty";
      break;
    case 1005:
      uint64_t v3 = @"HMIPrivateErrorCodeAssetLoadCancelled";
      break;
    case 1006:
      uint64_t v3 = @"HMIPrivateErrorCodeReadingStartFailed";
      break;
    case 1007:
      uint64_t v3 = @"HMIPrivateErrorCodeNoTrackOutput";
      break;
    case 1008:
      uint64_t v3 = @"HMIPrivateErrorCodeSampleBufferUnavailable";
      break;
    case 1009:
      uint64_t v3 = @"HMIPrivateErrorCodeNoVideoTrackFound";
      break;
    case 1010:
      uint64_t v3 = @"HMIPrivateErrorCodeMultipleVideoTracksFound";
      break;
    case 1011:
      uint64_t v3 = @"HMIPrivateErrorInvalidPresentationTime";
      break;
    case 1012:
      uint64_t v3 = @"HMIPrivateErrorAVAssetReaderNotStarted";
      break;
    case 1013:
      uint64_t v3 = @"HMIPrivateErrorCodeSequentialIntegrityViolated";
      break;
    case 1014:
    case 1016:
    case 1037:
    case 1038:
    case 1039:
    case 1041:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
LABEL_120:
      objc_msgSend(NSString, "stringWithFormat:", @"ERROR_%ld", a1);
      uint64_t v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_121:
      break;
    case 1015:
      uint64_t v3 = @"HMIPrivateErrorCodeInvalidVideoFrameFormatToSave";
      break;
    case 1017:
      uint64_t v3 = @"HMIPrivateErrorCodeAnalysisServiceNoConfiguration";
      break;
    case 1018:
      uint64_t v3 = @"HMIPrivateErrorCodeLoadingCoreMLModelFailed";
      break;
    case 1019:
      uint64_t v3 = @"HMIPrivateErrorCodeCoreMLPredictionFailed";
      break;
    case 1020:
      uint64_t v3 = @"HMIPrivateErrorCodeCoreMLOutputIncorrect";
      break;
    case 1021:
      uint64_t v3 = @"HMIPrivateErrorCodeCropAndResizeFailed";
      break;
    case 1022:
      uint64_t v3 = @"HMIPrivateErrorCodeScalerError";
      break;
    case 1023:
      uint64_t v3 = @"HMIPrivateErrorCodeCodecNotAvailable";
      break;
    case 1024:
      uint64_t v3 = @"HMIPrivateErrorCodeEncodingFailed";
      break;
    case 1025:
      uint64_t v3 = @"HMIPrivateErrorCodeFaceprintingFailed";
      break;
    case 1026:
      uint64_t v3 = @"HMIPrivateErrorCodeUpdatePersonsModelTaskFailed";
      break;
    case 1027:
      uint64_t v3 = @"HMIPrivateErrorCodeRemovePersonsModelTaskFailed";
      break;
    case 1028:
      uint64_t v3 = @"HMIPrivateErrorCodeHomePersonClusteringTaskFailed";
      break;
    case 1029:
      uint64_t v3 = @"HMIPrivateErrorCodeFaceMisclassificationTaskFailed";
      break;
    case 1030:
      uint64_t v3 = @"HMIPrivateErrorCodePersonsModelsSummaryTaskFailed";
      break;
    case 1031:
      uint64_t v3 = @"HMIPrivateErrorCodeExternalPersonSourceDiskError";
      break;
    case 1032:
      uint64_t v3 = @"HMIPrivateErrorCodeLoadPersonsModelsFailed";
      break;
    case 1033:
      uint64_t v3 = @"HMIPrivateErrorCodeUpdatePersonsModelFailed";
      break;
    case 1034:
      uint64_t v3 = @"HMIPrivateErrorCodeRemovePersonsModelFailed";
      break;
    case 1035:
      uint64_t v3 = @"HMIPrivateErrorCodePersonsModelPredictionFailed";
      break;
    case 1036:
      uint64_t v3 = @"HMIPrivateErrorCodeNilDataSource";
      break;
    case 1040:
      uint64_t v3 = @"HMIPrivateErrorCodeCleanupImpureHomePersonsOperationFailed";
      break;
    case 1042:
      uint64_t v3 = @"HMIPrivateErrorCodeUnknownTask";
      break;
    case 1049:
      uint64_t v3 = @"HMIPrivateErrorCodeFeedbackServiceInternalServerError";
      break;
    case 1050:
      uint64_t v3 = @"HMIPrivateErrorCodeFeedbackServiceResourceNotFoundError";
      break;
    default:
      uint64_t v3 = @"HMIErrorCodeUnexpectedError";
      switch(a1)
      {
        case -1:
          goto LABEL_121;
        case 1:
          uint64_t v3 = @"HMIErrorCodeFailedToAnalyze";
          break;
        case 2:
          uint64_t v3 = @"HMIErrorCodeAnalyzerInErrorState";
          break;
        case 3:
          uint64_t v3 = @"HMIErrorCodeModelFailedToLoad";
          break;
        case 4:
          uint64_t v3 = @"HMIErrorCodeFragmentIsInvalid";
          break;
        case 5:
          uint64_t v3 = @"HMIErrorCodeFailedToReadFragment";
          break;
        case 6:
          uint64_t v3 = @"HMIErrorCodeFailedToVerifyFragment";
          break;
        case 7:
          uint64_t v3 = @"HMIErrorcodeFailedToTranscodeFragment";
          break;
        default:
          goto LABEL_120;
      }
      break;
  }
  return v3;
}

void HMIErrorLog(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v3 = a1;
  id v4 = a2;
  long long v5 = (void *)MEMORY[0x22A641C70]();
  id v6 = v3;
  uint64_t v7 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = HMFGetLogIdentifier();
    uint64_t v9 = HMIErrorCodeName([v4 code]);
    int v10 = 138543874;
    unint64_t v11 = v8;
    __int16 v12 = 2112;
    uint64_t v13 = v9;
    __int16 v14 = 2112;
    id v15 = v4;
    _os_log_impl(&dword_225DC6000, v7, OS_LOG_TYPE_ERROR, "%{public}@%@: %@", (uint8_t *)&v10, 0x20u);
  }
}

void HMIErrorLogC(void *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v2 = (void *)MEMORY[0x22A641C70]();
  id v3 = HMFGetOSLogHandle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = HMFGetLogIdentifier();
    long long v5 = HMIErrorCodeName([v1 code]);
    int v6 = 138543874;
    uint64_t v7 = v4;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    id v11 = v1;
    _os_log_impl(&dword_225DC6000, v3, OS_LOG_TYPE_ERROR, "%{public}@%@: %@", (uint8_t *)&v6, 0x20u);
  }
}

void sub_225E1BF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigFormatReaderCopyTrackByType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  __int16 v8 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void))(v7 + 64);
  if (!v8) {
    return 4294954514;
  }
  return v8(a1, 0, a2, a3, 0);
}

uint64_t FigTrackReaderCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  __int16 v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }
  return v10(FigBaseObject, a2, a3, a4);
}

void getTimeRangeAssetTrackProperty(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  CFTypeRef v55 = 0;
  CFTypeRef v56 = 0;
  CFTypeRef v54 = 0;
  memset(v53, 0, sizeof(v53));
  memset(v52, 0, sizeof(v52));
  long long v4 = *(_OWORD *)(MEMORY[0x263F010D0] + 16);
  *(_OWORD *)&v51.start.CMTimeValue value = *MEMORY[0x263F010D0];
  *(_OWORD *)&v51.start.epoch = v4;
  *(_OWORD *)&v51.duration.uint64_t timescale = *(_OWORD *)(MEMORY[0x263F010D0] + 32);
  uint64_t v5 = *MEMORY[0x263EFFB08];
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v8 + 48);
  if (!v9 || (v9(FigBaseObject, *MEMORY[0x263F12470], v5, &v56), (CFTypeRef v10 = v56) == 0))
  {
    long long v47 = *MEMORY[0x263F010E0];
    *(_OWORD *)&v50.start.CMTimeValue value = *MEMORY[0x263F010E0];
    CMTimeEpoch v13 = *(void *)(MEMORY[0x263F010E0] + 16);
    v50.start.epoch = v13;
    v49.start.CMTimeValue value = 0;
    uint64_t v14 = FigTrackReaderGetFigBaseObject();
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    size_t v17 = *(void (**)(uint64_t, void, uint64_t, CMTimeRange *))(v16 + 48);
    if (!v17 || (v17(v14, *MEMORY[0x263F12490], v5, &v49), (int v18 = (const void *)v49.start.value) == 0))
    {
      cf.CMTimeValue value = 0;
      uint64_t v19 = FigFormatReaderGetFigBaseObject();
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      int v22 = *(void (**)(uint64_t, void, uint64_t, CMTime *))(v21 + 48);
      if (v22)
      {
        v22(v19, *MEMORY[0x263F12418], v5, &cf);
        CMTimeValue value = cf.value;
      }
      else
      {
        CMTimeValue value = 0;
      }
      if (value != *MEMORY[0x263EFFB40])
      {
        uint64_t v24 = FigFormatReaderGetFigBaseObject();
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v26 = v25 ? v25 : 0;
        int v27 = *(void (**)(uint64_t, void, uint64_t, CMTimeRange *))(v26 + 48);
        if (v27) {
          v27(v24, *MEMORY[0x263F12410], v5, &v49);
        }
      }
      if (!v49.start.value)
      {
        uint64_t v30 = FigFormatReaderGetFigBaseObject();
        uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v32 = v31 ? v31 : 0;
        int v41 = *(void (**)(uint64_t, void, uint64_t, CMTimeRange *))(v32 + 48);
        if (v41) {
          v41(v30, *MEMORY[0x263F12408], v5, &v49);
        }
      }
      if (cf.value) {
        CFRelease((CFTypeRef)cf.value);
      }
      int v18 = (const void *)v49.start.value;
      if (!v49.start.value) {
        goto LABEL_31;
      }
    }
    CFTypeID v28 = CFGetTypeID(v18);
    if (v28 == CFDictionaryGetTypeID())
    {
      CMTimeMakeFromDictionary(&v50.start, (CFDictionaryRef)v49.start.value);
    }
    else
    {
LABEL_31:
      *(_OWORD *)&v50.start.CMTimeValue value = v47;
      v50.start.epoch = v13;
    }
    if (v49.start.value) {
      CFRelease((CFTypeRef)v49.start.value);
    }
    *(_OWORD *)&v49.start.CMTimeValue value = v47;
    v49.start.epoch = v13;
    CMTime cf = v50.start;
    CMTimeRangeMake(&v51, &v49.start, &cf);
    goto LABEL_35;
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  int v33 = *(void (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(v12 + 8);
  if (v33)
  {
    *(_OWORD *)&v50.start.CMTimeValue value = *MEMORY[0x263F010A0];
    v50.start.epoch = *(void *)(MEMORY[0x263F010A0] + 16);
    v33(v10, &v50, &v55);
  }
  CFTypeRef v34 = v56;
  uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v35) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  int v37 = *(void (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(v36 + 8);
  if (!v37
    || (*(_OWORD *)&v50.start.CMTimeValue value = *MEMORY[0x263F010B8],
        v50.start.epoch = *(void *)(MEMORY[0x263F010B8] + 16),
        v37(v34, &v50, &v54),
        (CFTypeRef v38 = v55) == 0)
    || !v54)
  {
LABEL_35:
    long long v29 = *(_OWORD *)&v51.start.epoch;
    *a3 = *(_OWORD *)&v51.start.value;
    a3[1] = v29;
    a3[2] = *(_OWORD *)&v51.duration.timescale;
    goto LABEL_36;
  }
  uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v39) {
    uint64_t v40 = v39;
  }
  else {
    uint64_t v40 = 0;
  }
  int v42 = *(unsigned int (**)(CFTypeRef, CMTimeRange *))(v40 + 24);
  if (v42 && !v42(v38, v53))
  {
    CFTypeRef v43 = v54;
    uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v45 = v44 ? v44 : 0;
    int v46 = *(unsigned int (**)(CFTypeRef, CMTimeRange *))(v45 + 24);
    if (v46)
    {
      if (!v46(v43, v52))
      {
        CMTimeRange v50 = v53[1];
        CMTimeRange v49 = v52[1];
        CMTimeRangeGetUnion(&v51, &v50, &v49);
        goto LABEL_35;
      }
    }
  }
LABEL_36:
  if (v55) {
    CFRelease(v55);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v56) {
    CFRelease(v56);
  }
}

void sub_225E1D770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_225E1DB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_225E1FE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_225E2057C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_225E21A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225E21E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double HMIExpandFaceRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double v9 = a5 + -1.0;
  CGFloat v10 = -(CGRectGetWidth(*(CGRect *)&a1) * (a5 + -1.0)) * 0.5;
  v18.origin.double x = a1;
  v18.origin.double y = a2;
  v18.size.double width = a3;
  v18.size.double height = a4;
  CGFloat v11 = -(CGRectGetHeight(v18) * v9) * 0.5;
  v19.origin.double x = a1;
  v19.origin.double y = a2;
  v19.size.double width = a3;
  v19.size.double height = a4;
  CGRect v20 = CGRectInset(v19, v10, v11);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  double v14 = 1.0;
  double v15 = 1.0;
  *(void *)&double result = (unint64_t)CGRectIntersection(v20, *(CGRect *)&v12);
  return result;
}

uint64_t getImagePropertiesFromCGImageSource(CGImageSource *a1, int *a2, size_t *a3, size_t *a4)
{
  uint64_t result = 0;
  if (a1 && a2 && a3 && a4)
  {
    context = (void *)MEMORY[0x22A641C70](0);
    ImageAtIndedouble x = CGImageSourceCreateImageAtIndex(a1, 0, 0);
    if (!ImageAtIndex)
    {
      id v17 = [MEMORY[0x263EFF940] exceptionWithName:*MEMORY[0x263EFF488] reason:@"could not create image ref" userInfo:0];
      objc_exception_throw(v17);
    }
    CFDictionaryRef v9 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
    int v10 = 1;
    CGFloat v11 = [(__CFDictionary *)v9 objectForKeyedSubscript:*MEMORY[0x263F0F4C8]];
    uint64_t v12 = v11;
    if (v11) {
      int v10 = [v11 intValue];
    }
    if ((v10 - 9) < 0xFFFFFFF8) {
      int v13 = 1;
    }
    else {
      int v13 = v10;
    }
    if (v13 > 4)
    {
      size_t Height = CGImageGetHeight(ImageAtIndex);
      size_t Width = CGImageGetWidth(ImageAtIndex);
    }
    else
    {
      size_t Height = CGImageGetWidth(ImageAtIndex);
      size_t Width = CGImageGetHeight(ImageAtIndex);
    }
    size_t v16 = Width;

    CGImageRelease(ImageAtIndex);
    *a2 = v13;
    *a3 = Height;
    uint64_t result = 1;
    *a4 = v16;
  }
  return result;
}

void sub_225E26A90(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_225E26ABC()
{
}

void sub_225E26AD0()
{
}

void sub_225E29360(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_225E298E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v10 = objc_begin_catch(exception_object);
      CGFloat v11 = (void *)MEMORY[0x22A641C70]();
      HMFGetOSLogHandle();
      uint64_t v12 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        id v13 = (id)objc_claimAutoreleasedReturnValue();
        double v14 = [v10 reason];
        LODWORD(a9) = 138543618;
        *(void *)((char *)&a9 + 4) = v13;
        WORD6(a9) = 2112;
        *(void *)((char *)&a9 + 14) = v14;
        _os_log_impl(&dword_225DC6000, v12, OS_LOG_TYPE_ERROR, "%{public}@Couldn't retrieve metadata from photos crop:%@", (uint8_t *)&a9, 0x16u);
      }

      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exception_object);
    }
    if (!v9) {
      JUMPOUT(0x225E29804);
    }
    JUMPOUT(0x225E297F8);
  }
  _Unwind_Resume(exception_object);
}

void sub_225E2B584(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_225E3221C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_225E32690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_225E33C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void sub_225E34040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_225E34CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_unfair_lock_t lock)
{
}

void sub_225E355DC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E35940(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E35C88(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E36350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  os_unfair_lock_unlock(v39);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v40 - 240), 8);
  _Block_object_dispose((const void *)(v40 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_225E372B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_unfair_lock_t lock, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void sub_225E37BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_225E37F34(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E38580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_225E38A7C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E38DBC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E3BD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  os_unfair_lock_unlock(v28);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v29 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_225E3C024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_225E3C240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_225E3C368(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E3CEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225E3E2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225E3EA9C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E3EB70(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E3F45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_225E3F740(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E406D8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E411D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_225E41460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225E41708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
  {

    CGRect v20 = __cxa_begin_catch(exception_object);
    uint64_t v21 = (void *)MEMORY[0x22A641C70](v20);
    id v22 = v14;
    HMFGetOSLogHandle();
    int v23 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = HMFGetLogIdentifier();
      *(_DWORD *)(v18 - 12_Block_object_dispose(&a9, 8) = 138543362;
      *(void *)(v17 + 4) = v24;
      _os_log_impl(&dword_225DC6000, v23, OS_LOG_TYPE_ERROR, "%{public}@Clustering error", (uint8_t *)(v18 - 128), 0xCu);
    }
    uint64_t v25 = [MEMORY[0x263F087E8] hmiPrivateErrorWithCode:1047];
    uint64_t v26 = v25;
    if (v13) {
      *id v13 = v25;
    }
    HMIErrorLog(v22, v26);

    __cxa_end_catch();
    JUMPOUT(0x225E4166CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_225E41B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225E41CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225E4213C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<homeai::clustering::GreedyClusterer,std::allocator<homeai::clustering::GreedyClusterer>,float,float,float,void>@<X0>(float *a1@<X1>, float *a2@<X2>, float *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x50uLL);
  uint64_t result = std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer>::__shared_ptr_emplace[abi:ne180100]<float,float,float,std::allocator<homeai::clustering::GreedyClusterer>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_225E422D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer>::__shared_ptr_emplace[abi:ne180100]<float,float,float,std::allocator<homeai::clustering::GreedyClusterer>,0>(void *a1, float *a2, float *a3, float *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D987AE0;
  homeai::clustering::GreedyClusterer::GreedyClusterer((uint64_t)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_225E4233C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D987AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D987AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A641780);
}

uint64_t std::__shared_ptr_emplace<homeai::clustering::GreedyClusterer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_225E42BE4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E42D50(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id camera_recording_log()
{
  if (camera_recording_log__hmf_once_t0 != -1) {
    dispatch_once(&camera_recording_log__hmf_once_t0, &__block_literal_global_28);
  }
  v0 = (void *)camera_recording_log__hmf_once_v1;
  return v0;
}

void __camera_recording_log_block_invoke()
{
  id v2 = [@"camera_recording" stringByReplacingOccurrencesOfString:@"_" withString:@"."];
  uint64_t v0 = HMFCreateOSLogHandle();
  uint64_t v1 = (void *)camera_recording_log__hmf_once_v1;
  camera_recording_log__hmf_once_uint64_t v1 = v0;
}

id camera_recording_analyzer_log()
{
  if (camera_recording_analyzer_log__hmf_once_t2 != -1) {
    dispatch_once(&camera_recording_analyzer_log__hmf_once_t2, &__block_literal_global_9_2);
  }
  uint64_t v0 = (void *)camera_recording_analyzer_log__hmf_once_v3;
  return v0;
}

void __camera_recording_analyzer_log_block_invoke()
{
  id v2 = [@"camera_recording_analyzer" stringByReplacingOccurrencesOfString:@"_" withString:@"."];
  uint64_t v0 = HMFCreateOSLogHandle();
  uint64_t v1 = (void *)camera_recording_analyzer_log__hmf_once_v3;
  camera_recording_analyzer_log__hmf_once_id v3 = v0;
}

id camera_recording_analyzer_media_log()
{
  if (camera_recording_analyzer_media_log__hmf_once_t4 != -1) {
    dispatch_once(&camera_recording_analyzer_media_log__hmf_once_t4, &__block_literal_global_14);
  }
  uint64_t v0 = (void *)camera_recording_analyzer_media_log__hmf_once_v5;
  return v0;
}

void __camera_recording_analyzer_media_log_block_invoke()
{
  id v2 = [@"camera_recording_analyzer_media" stringByReplacingOccurrencesOfString:@"_" withString:@"."];
  uint64_t v0 = HMFCreateOSLogHandle();
  uint64_t v1 = (void *)camera_recording_analyzer_media_log__hmf_once_v5;
  camera_recording_analyzer_media_log__hmf_once_uint64_t v5 = v0;
}

id camera_recording_analyzer_scheduler_log()
{
  if (camera_recording_analyzer_scheduler_log__hmf_once_t6 != -1) {
    dispatch_once(&camera_recording_analyzer_scheduler_log__hmf_once_t6, &__block_literal_global_19);
  }
  uint64_t v0 = (void *)camera_recording_analyzer_scheduler_log__hmf_once_v7;
  return v0;
}

void __camera_recording_analyzer_scheduler_log_block_invoke()
{
  id v2 = [@"camera_recording_analyzer_scheduler" stringByReplacingOccurrencesOfString:@"_" withString:@"."];
  uint64_t v0 = HMFCreateOSLogHandle();
  uint64_t v1 = (void *)camera_recording_analyzer_scheduler_log__hmf_once_v7;
  camera_recording_analyzer_scheduler_log__hmf_once_uint64_t v7 = v0;
}

id camera_recording_analyzer_scheduler_json_log()
{
  if (camera_recording_analyzer_scheduler_json_log__hmf_once_t8 != -1) {
    dispatch_once(&camera_recording_analyzer_scheduler_json_log__hmf_once_t8, &__block_literal_global_24);
  }
  uint64_t v0 = (void *)camera_recording_analyzer_scheduler_json_log__hmf_once_v9;
  return v0;
}

void __camera_recording_analyzer_scheduler_json_log_block_invoke()
{
  id v2 = [@"camera_recording_analyzer_scheduler_json" stringByReplacingOccurrencesOfString:@"_" withString:@"."];
  uint64_t v0 = HMFCreateOSLogHandle();
  uint64_t v1 = (void *)camera_recording_analyzer_scheduler_json_log__hmf_once_v9;
  camera_recording_analyzer_scheduler_json_log__hmf_once_uint64_t v9 = v0;
}

id camera_recording_maintenance_log()
{
  if (camera_recording_maintenance_log__hmf_once_t10 != -1) {
    dispatch_once(&camera_recording_maintenance_log__hmf_once_t10, &__block_literal_global_29);
  }
  uint64_t v0 = (void *)camera_recording_maintenance_log__hmf_once_v11;
  return v0;
}

void __camera_recording_maintenance_log_block_invoke()
{
  id v2 = [@"camera_recording_maintenance" stringByReplacingOccurrencesOfString:@"_" withString:@"."];
  uint64_t v0 = HMFCreateOSLogHandle();
  uint64_t v1 = (void *)camera_recording_maintenance_log__hmf_once_v11;
  camera_recording_maintenance_log__hmf_once_CGFloat v11 = v0;
}

void sub_225E43490(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E43714(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E438C0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E43A84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225E43ED8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  cv::Mat::~Mat((cv::Mat *)&a17, a2);
  cv::Mat::~Mat((cv::Mat *)&a29, v30);
  _Unwind_Resume(a1);
}

void sub_225E443FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

__CFString *HMIVideoAnalyzerDecodeModeAsString(uint64_t a1)
{
  uint64_t v1 = @"None";
  if (a1 == 1) {
    uint64_t v1 = @"IFrameOnly";
  }
  if (a1 == 2) {
    return @"Full";
  }
  else {
    return v1;
  }
}

void sub_225E4BE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_225E4E0B8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E4E144(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E4E1D8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E4E28C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E4E304(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E4E4E4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E4E718(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id objectAsString(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

id objectAsNumber(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = v1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v3 = objc_alloc_init(MEMORY[0x263F08A30]);
      [v3 setNumberStyle:1];
      id v2 = [v3 numberFromString:v1];
    }
    else
    {
      id v2 = 0;
    }
  }

  return v2;
}

void sub_225E4F6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225E53CFC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void sub_225E5727C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

id HMIDispatchQueueNameString(void *a1, void *a2)
{
  id v3 = NSString;
  long long v4 = a2;
  id v5 = a1;
  uint64_t v6 = (objc_class *)objc_opt_class();
  uint64_t v7 = NSStringFromClass(v6);
  if (v4) {
    uint64_t v8 = @".";
  }
  else {
    uint64_t v8 = &stru_26D98B6C8;
  }
  if (v4) {
    uint64_t v9 = v4;
  }
  else {
    uint64_t v9 = &stru_26D98B6C8;
  }
  uint64_t v10 = [v5 hash];

  CGFloat v11 = [v3 stringWithFormat:@"com.apple.HomeAI.%@%@%@.%tu", v7, v8, v9, v10];

  return v11;
}

unint64_t HMIHashCGRect(double a1, double a2, double a3, double a4)
{
  double v7 = -a1;
  if (a1 >= 0.0) {
    double v7 = a1;
  }
  long double v8 = floor(v7 + 0.5);
  double v9 = (v7 - v8) * 1.84467441e19;
  double v10 = fmod(v8, 1.84467441e19);
  unint64_t v11 = 2654435761u * (unint64_t)v10;
  unint64_t v12 = v11 + (unint64_t)v9;
  if (v9 <= 0.0) {
    unint64_t v12 = 2654435761u * (unint64_t)v10;
  }
  unint64_t v13 = v11 - (unint64_t)fabs(v9);
  if (v9 < 0.0) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = v12;
  }
  if (a2 >= 0.0) {
    double v15 = a2;
  }
  else {
    double v15 = -a2;
  }
  long double v16 = floor(v15 + 0.5);
  double v17 = (v15 - v16) * 1.84467441e19;
  double v18 = fmod(v16, 1.84467441e19);
  unint64_t v19 = 2654435761u * (unint64_t)v18;
  unint64_t v20 = v19 + (unint64_t)v17;
  if (v17 <= 0.0) {
    unint64_t v20 = 2654435761u * (unint64_t)v18;
  }
  unint64_t v21 = v19 - (unint64_t)fabs(v17);
  if (v17 < 0.0) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = v20;
  }
  if (a3 >= 0.0) {
    double v23 = a3;
  }
  else {
    double v23 = -a3;
  }
  long double v24 = floor(v23 + 0.5);
  double v25 = (v23 - v24) * 1.84467441e19;
  double v26 = fmod(v24, 1.84467441e19);
  unint64_t v27 = 2654435761u * (unint64_t)v26;
  unint64_t v28 = v27 + (unint64_t)v25;
  if (v25 <= 0.0) {
    unint64_t v28 = 2654435761u * (unint64_t)v26;
  }
  unint64_t v29 = v27 - (unint64_t)fabs(v25);
  if (v25 < 0.0) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = v28;
  }
  if (a4 >= 0.0) {
    double v31 = a4;
  }
  else {
    double v31 = -a4;
  }
  long double v32 = floor(v31 + 0.5);
  double v33 = (v31 - v32) * 1.84467441e19;
  double v34 = fmod(v32, 1.84467441e19);
  unint64_t v35 = 2654435761u * (unint64_t)v34;
  unint64_t v36 = v35 + (unint64_t)v33;
  if (v33 <= 0.0) {
    unint64_t v36 = 2654435761u * (unint64_t)v34;
  }
  unint64_t v37 = v35 - (unint64_t)fabs(v33);
  if (v33 >= 0.0) {
    unint64_t v37 = v36;
  }
  return v22 ^ v14 ^ v30 ^ v37;
}

uint64_t HMIHashCMTime(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 < 0) {
    uint64_t v1 = -v1;
  }
  return 2654435761 * v1;
}

double HMICGRectArea(double a1, double a2, double a3, double a4)
{
  return a3 * a4;
}

double HMICGRectMakeWithSize()
{
  return 0.0;
}

BOOL HMICGSizeIsIntegral(double a1, double a2)
{
  return a2 == (double)(int)a2 && a1 == (double)(int)a1;
}

double HMICGSizeMakeIntegral(double a1)
{
  return (double)(int)a1;
}

double HMICVPixelBufferGetSize(__CVBuffer *a1)
{
  double Width = (double)CVPixelBufferGetWidth(a1);
  CVPixelBufferGetHeight(a1);
  return Width;
}

uint64_t HMICVPixelBufferSetValue(__CVBuffer *a1, int a2)
{
  CVPixelBufferLockBaseAddress(a1, 0);
  if (CVPixelBufferIsPlanar(a1))
  {
    if (CVPixelBufferGetPlaneCount(a1))
    {
      size_t v4 = 0;
      do
      {
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, v4);
        size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v4);
        size_t v7 = CVPixelBufferGetBytesPerRowOfPlane(a1, v4) * HeightOfPlane;
        if (v4) {
          int v8 = -128;
        }
        else {
          int v8 = a2;
        }
        memset(BaseAddressOfPlane, v8, v7);
        ++v4;
      }
      while (v4 < CVPixelBufferGetPlaneCount(a1));
    }
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    size_t Height = CVPixelBufferGetHeight(a1);
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
    memset(BaseAddress, a2, BytesPerRow * Height);
  }
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

id HMIVideoIdForVideoFragment(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 absoluteString];
  int v6 = [v5 hasPrefix:@"HKD://"];

  if (v6)
  {
    size_t v7 = [v4 UUIDString];
  }
  else
  {
    int v8 = [v3 lastPathComponent];
    size_t v7 = [v8 stringByDeletingPathExtension];
  }
  return v7;
}

id HMICGRectCreateArrayRepresentation(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  v14[4] = *MEMORY[0x263EF8340];
  if (CGRectIsNull(*(CGRect *)&a1))
  {
    int v8 = &unk_26D9A9888;
  }
  else
  {
    v16.origin.double x = a1;
    v16.origin.double y = a2;
    v16.size.double width = a3;
    v16.size.double height = a4;
    double v9 = [NSNumber numberWithDouble:CGRectGetMinY(v16)];
    v14[0] = v9;
    v17.origin.double x = a1;
    v17.origin.double y = a2;
    v17.size.double width = a3;
    v17.size.double height = a4;
    double v10 = [NSNumber numberWithDouble:CGRectGetMinX(v17)];
    v14[1] = v10;
    v18.origin.double x = a1;
    v18.origin.double y = a2;
    v18.size.double width = a3;
    v18.size.double height = a4;
    unint64_t v11 = [NSNumber numberWithDouble:CGRectGetMaxY(v18)];
    void v14[2] = v11;
    v19.origin.double x = a1;
    v19.origin.double y = a2;
    v19.size.double width = a3;
    v19.size.double height = a4;
    unint64_t v12 = [NSNumber numberWithDouble:CGRectGetMaxX(v19)];
    v14[3] = v12;
    int v8 = [MEMORY[0x263EFF8C0] arrayWithObjects:v14 count:4];
  }
  return v8;
}

void HMICGRectNormalizedFromPixel(unint64_t a1, unint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  memset(&v11, 0, sizeof(v11));
  CGAffineTransformMakeScale(&v11, 1.0 / (float)a1, 1.0 / (float)a2);
  CGAffineTransform v10 = v11;
  v12.origin.double x = a3;
  v12.origin.double y = a4;
  v12.size.double width = a5;
  v12.size.double height = a6;
  CGRectApplyAffineTransform(v12, &v10);
}

void HMICGRectPixelFromNormalized(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  long long v10 = *(_OWORD *)(MEMORY[0x263F000D0] + 16);
  *(_OWORD *)&v12.a = *MEMORY[0x263F000D0];
  *(_OWORD *)&v12.c = v10;
  *(_OWORD *)&v12.tdouble x = *(_OWORD *)(MEMORY[0x263F000D0] + 32);
  *(_OWORD *)&v11.a = *(_OWORD *)&v12.a;
  *(_OWORD *)&v11.c = v10;
  *(_OWORD *)&v11.tdouble x = *(_OWORD *)&v12.tx;
  CGAffineTransformScale(&v12, &v11, a5, a6);
  CGAffineTransform v11 = v12;
  v13.origin.double x = a1;
  v13.origin.double y = a2;
  v13.size.double width = a3;
  v13.size.double height = a4;
  CGRect v14 = CGRectApplyAffineTransform(v13, &v11);
  CGRectIntegral(v14);
}

double HMICGRectTransferToNewCoordinate(double a1, double a2, double a3, double a4, double a5, double a6, float a7)
{
  return a5 / (a3 + (float)(a7 + a7)) * a7;
}

double HMICGRectExpandWithinLimit(double a1, double a2, double a3, double a4, double a5, double a6, float a7)
{
  float v7 = a3 * (float)(a7 + -1.0) * 0.5;
  if (a1 + a3 + v7 <= a5)
  {
    float v9 = a3 * (float)(a7 + -1.0) * 0.5;
  }
  else
  {
    float v8 = a5 - (a1 + a3);
    float v9 = v8;
  }
  if (a1 - v7 < 0.0)
  {
    float v10 = a1;
    float v7 = v10;
  }
  if (v9 >= v7) {
    float v9 = v7;
  }
  return a1 - v9;
}

double HMICGSizeAreaInPixelsFromNormalized(double a1, double a2, double a3, double a4)
{
  return a1 * a3 * (a2 * a4);
}

id HMIFormatNumber(void *a1, uint64_t a2)
{
  id v3 = (objc_class *)MEMORY[0x263F08A30];
  id v4 = a1;
  id v5 = objc_alloc_init(v3);
  [v5 setMaximumFractionDigits:a2];
  int v6 = [v5 stringFromNumber:v4];

  return v6;
}

id HMIJSONFormattedStringForDate(void *a1)
{
  uint64_t v1 = (objc_class *)MEMORY[0x263F08790];
  id v2 = a1;
  id v3 = objc_alloc_init(v1);
  [v3 setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"];
  id v4 = [MEMORY[0x263EFFA18] timeZoneForSecondsFromGMT:0];
  [v3 setTimeZone:v4];

  id v5 = (void *)[objc_alloc(MEMORY[0x263EFF960]) initWithLocaleIdentifier:@"en_US_POSIX"];
  [v3 setLocale:v5];

  int v6 = [v3 stringFromDate:v2];

  return v6;
}

id HMIJSONDecimalNumberForNumber(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = [MEMORY[0x263F087B8] decimalNumberHandlerWithRoundingMode:0 scale:a2 raiseOnExactness:0 raiseOnOverflow:0 raiseOnUnderflow:0 raiseOnDivideByZero:0];
  id v5 = (void *)MEMORY[0x263F087B0];
  if (v3)
  {
    [v3 decimalValue];
  }
  else
  {
    v9[0] = 0;
    v9[1] = 0;
    int v10 = 0;
  }
  int v6 = [v5 decimalNumberWithDecimal:v9];
  float v7 = [v6 decimalNumberByRoundingAccordingToBehavior:v4];

  return v7;
}

uint64_t HMIIsResidentDevice()
{
  uint64_t v0 = [MEMORY[0x263F42620] productInfo];
  unint64_t v1 = [v0 productClass];

  return (v1 < 7) & (0x58u >> v1);
}

id HMIURLForCacheDirectory(void *a1)
{
  id v2 = [MEMORY[0x263F08850] defaultManager];
  id v8 = 0;
  id v3 = [v2 URLForDirectory:13 inDomain:1 appropriateForURL:0 create:1 error:&v8];
  id v4 = v8;

  if (v3)
  {
    id v5 = [v3 URLByAppendingPathComponent:@"com.apple.HomeAI" isDirectory:1];
    int v6 = [v5 absoluteURL];
  }
  else
  {
    if (a1) {
      *a1 = v4;
    }
    HMIErrorLogC(v4);
    int v6 = 0;
  }

  return v6;
}

id HMIURLForDirectoryPathRelativeToCacheDirectory(void *a1, void *a2)
{
  id v3 = a1;
  id v10 = 0;
  id v4 = HMIURLForCacheDirectory(&v10);
  id v5 = v10;
  int v6 = v5;
  if (v4)
  {
    float v7 = [v4 URLByAppendingPathComponent:v3 isDirectory:1];
    id v8 = [v7 absoluteURL];
  }
  else
  {
    if (a2) {
      *a2 = v5;
    }
    HMIErrorLogC(v6);
    id v8 = 0;
  }

  return v8;
}

uint64_t HMIIsDebug()
{
  return 0;
}

id HMIVersionInformation()
{
  uint64_t v0 = [MEMORY[0x263F089D8] string];
  unint64_t v1 = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.HomeAI"];
  id v2 = [v1 infoDictionary];
  id v3 = [v2 objectForKey:*MEMORY[0x263EFFB70]];
  [v0 appendFormat:@"homeai: %@\n", v3];

  return v0;
}

uint64_t HMIVisionRuntimeVersion()
{
  uint64_t result = NSVersionOfRunTimeLibrary("Vision");
  if (result == -1)
  {
    objc_opt_class();
    return NSVersionOfRunTimeLibrary("Vision");
  }
  return result;
}

id HMIModelUUID(uint64_t a1, uint64_t a2)
{
  id v2 = objc_msgSend(MEMORY[0x263EFF990], "data", a2, a1);
  [v2 appendBytes:&v8 length:8];
  [v2 appendBytes:&v7 length:8];
  id v3 = (void *)MEMORY[0x263F08C38];
  id v4 = objc_msgSend(MEMORY[0x263F08C38], "hmf_zeroUUID");
  id v5 = objc_msgSend(v3, "hmf_UUIDWithNamespace:data:", v4, v2);

  return v5;
}

void sub_225E5A4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225E5A758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225E5AEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v13 - 160));
  _Unwind_Resume(a1);
}

void sub_225E5B44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225E5B780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225E5C008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id *location, id *a19)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v19 - 144));
  _Unwind_Resume(a1);
}

void sub_225E5CE08(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E5D048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225E5D224(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E5D438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void sub_225E5D644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225E5DB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225E601E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_225E632AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_225E65E00(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_225E66280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HMIVideoAnalyzerEventTriggersAsString()
{
  return NSPrintF();
}

void _decoderDidDecodeFrameCallback(void *a1, uint64_t a2, CMTimeFlags a3, uint64_t a4, __CVBuffer *a5, CMTime *a6, uint64_t a7)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v11 = a1;
  uint64_t v12 = [v11 object];
  uint64_t v13 = (void *)v12;
  if (a3)
  {
    CGRect v14 = (void *)MEMORY[0x22A641C70]();
    id v15 = v13;
    CGRect v16 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = HMFGetLogIdentifier();
      LODWORD(buf.duration.value) = 138543618;
      *(CMTimeValue *)((char *)&buf.duration.value + 4) = (CMTimeValue)v17;
      LOWORD(buf.duration.flags) = 1024;
      *(CMTimeFlags *)((char *)&buf.duration.flags + 2) = a3;
      _os_log_impl(&dword_225DC6000, v16, OS_LOG_TYPE_ERROR, "%{public}@Frame decode error %d", (uint8_t *)&buf, 0x12u);
    }
LABEL_5:
    goto LABEL_6;
  }
  if (!v12)
  {
    CGRect v14 = (void *)MEMORY[0x22A641C70]();
    uint64_t v19 = HMFGetOSLogHandle();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      unint64_t v20 = HMFGetLogIdentifier();
      LODWORD(buf.duration.value) = 138543362;
      *(CMTimeValue *)((char *)&buf.duration.value + 4) = (CMTimeValue)v20;
      _os_log_impl(&dword_225DC6000, v19, OS_LOG_TYPE_ERROR, "%{public}@Decompression session decoded frames after decoder was deallocated, ignoring frames.", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_5;
  }
  if (a5)
  {
    *(_OWORD *)&buf.duration.CMTimeValue value = *(_OWORD *)a7;
    buf.duration.epoch = *(void *)(a7 + 16);
    buf.presentationTimeStamp = *a6;
    buf.decodeTimeStamp = *(CMTime *)*(void *)&MEMORY[0x263F01090];
    CMVideoFormatDescriptionRef formatDescriptionOut = 0;
    CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CMVideoFormatDescriptionCreateForImageBuffer((CFAllocatorRef)*MEMORY[0x263EFFB08], a5, &formatDescriptionOut);
    CFTypeRef cf = 0;
    CMSampleBufferCreateForImageBuffer(v18, a5, 1u, 0, 0, formatDescriptionOut, &buf, (CMSampleBufferRef *)&cf);
    [v13 _didDecodeSampleBuffer:cf];
    CFRelease(cf);
    CFRelease(formatDescriptionOut);
  }
LABEL_6:
}

void sub_225E6BC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2 == 1)
  {
    id v11 = objc_begin_catch(exception_object);
    id v10 = [NSString stringWithFormat:@"Couldn't append sample buffer because, exception %@"];
    [v9 _failWithDescription:v10];

    objc_end_catch();
    JUMPOUT(0x225E6BC1CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_225E6CBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void sub_225E6DA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_225E6DF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_225E6E5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_225E6ECE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225E6EF2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225E6F0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225E6F460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225E6F4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)HMIMotionDetector;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_225E7022C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  CGRect v67 = (void *)STACK[0x3B0];
  if (STACK[0x3B0])
  {
    STACK[0x3B8] = (unint64_t)v67;
    operator delete(v67);
  }
  int v68 = (void *)STACK[0x3C8];
  if (STACK[0x3C8])
  {
    STACK[0x3D0] = (unint64_t)v68;
    operator delete(v68);
  }
  int v69 = (void *)STACK[0x420];
  if (STACK[0x420])
  {
    STACK[0x428] = (unint64_t)v69;
    operator delete(v69);
  }
  uint64_t v70 = (void *)STACK[0x438];
  if (STACK[0x438])
  {
    STACK[0x440] = (unint64_t)v70;
    operator delete(v70);
  }
  a62 = (uint64_t)&STACK[0x458];
  std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x470], v71);
  a62 = v65 - 248;
  std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  cv::Mat::~Mat((cv::Mat *)(v65 - 224), v72);
  __HMISignpostScopeLeave((void *)(v65 - 128));

  _Unwind_Resume(a1);
}

uint64_t cv::MatExpr::operator cv::Mat@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = a2 + 8;
  *(void *)(a2 + 72) = a2 + 80;
  *(void *)(a2 + 8_Block_object_dispose(&a9, 8) = 0;
  *(_DWORD *)a2 = 1124007936;
  *(_OWORD *)(a2 + 4) = 0u;
  *(_OWORD *)(a2 + 20) = 0u;
  *(_OWORD *)(a2 + 36) = 0u;
  *(_OWORD *)(a2 + 4_Block_object_dispose(&a9, 8) = 0u;
  return (*(uint64_t (**)(void, void *, uint64_t, uint64_t))(*(void *)*a1 + 24))(*a1, a1, a2, 0xFFFFFFFFLL);
}

void sub_225E7054C(_Unwind_Exception *a1, void *a2)
{
  cv::Mat::~Mat(v2, a2);
  _Unwind_Resume(a1);
}

void sub_225E70C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225E70EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225E710D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_225E712D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void cv::MatExpr::~MatExpr(cv::MatExpr *this, void *a2)
{
  id v3 = (atomic_uint *)*((void *)this + 29);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::MatExpr *)((char *)this + 208), a2);
  }
  *((void *)this + 2_Block_object_dispose(&a9, 8) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 30) = 0;
  if (*((int *)this + 53) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)this + 34);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *((int *)this + 53));
  }
  *((void *)this + 29) = 0;
  int v6 = (void **)*((void *)this + 35);
  if (v6 != (void **)((char *)this + 288)) {
    cv::fastFree(v6, a2);
  }
  uint64_t v7 = (atomic_uint *)*((void *)this + 17);
  if (v7 && atomic_fetch_add(v7, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::MatExpr *)((char *)this + 112), a2);
  }
  *((void *)this + 16) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 1_Block_object_dispose(&a9, 8) = 0;
  if (*((int *)this + 29) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *((void *)this + 22);
    do
      *(_DWORD *)(v9 + 4 * v8++) = 0;
    while (v8 < *((int *)this + 29));
  }
  *((void *)this + 17) = 0;
  id v10 = (void **)*((void *)this + 23);
  if (v10 != (void **)((char *)this + 192)) {
    cv::fastFree(v10, a2);
  }
  uint64_t v11 = (atomic_uint *)*((void *)this + 5);
  if (v11 && atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::MatExpr *)((char *)this + 16), a2);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + _Block_object_dispose(&a9, 8) = 0;
  *((void *)this + 6) = 0;
  if (*((int *)this + 5) >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *((void *)this + 10);
    do
      *(_DWORD *)(v13 + 4 * v12++) = 0;
    while (v12 < *((int *)this + 5));
  }
  *((void *)this + 5) = 0;
  CGRect v14 = (void **)*((void *)this + 11);
  if (v14 != (void **)((char *)this + 96)) {
    cv::fastFree(v14, a2);
  }
}

void std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (cv::Mat *)**a1;
  if (v2)
  {
    uint64_t v4 = (cv::Mat *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v4 = (cv::Mat *)((char *)v4 - 96);
        std::allocator<cv::Mat>::destroy[abi:ne180100](v1 + 16, v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<cv::Mat>::destroy[abi:ne180100](int a1, cv::Mat *this)
{
  id v3 = (atomic_uint *)*((void *)this + 3);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate(this, this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  if (*((int *)this + 1) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)this + 8);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *((int *)this + 1));
  }
  *((void *)this + 3) = 0;
  int v6 = (void **)*((void *)this + 9);
  if (v6 != (void **)((char *)this + 80)) {
    cv::fastFree(v6, this);
  }
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    int v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_225E71608(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_225E716C8(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<cv::Point_<float>>::__init_with_size[abi:ne180100]<cv::Point_<float>*,cv::Point_<float>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = std::vector<long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_225E7173C(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

cv::Mat *std::vector<cv::Mat>::__init_with_size[abi:ne180100]<cv::Mat*,cv::Mat*>(cv::Mat *result, cv::Mat *a2, cv::Mat *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<cv::Mat>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv::Mat>,cv::Mat*,cv::Mat*,cv::Mat*>((uint64_t)v6 + 16, a2, a3, *((cv::Mat **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_225E717C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + _Block_object_dispose(&a9, 8) = v10;
  std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<cv::Mat>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Mat>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Mat>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

cv::Mat *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv::Mat>,cv::Mat*,cv::Mat*,cv::Mat*>(uint64_t a1, cv::Mat *a2, cv::Mat *a3, cv::Mat *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    int v7 = a1;
    do
    {
      std::allocator<cv::Mat>::construct[abi:ne180100]<cv::Mat,cv::Mat&>(v7, v4, v6);
      int v6 = (cv::Mat *)((char *)v6 + 96);
      uint64_t v4 = (cv::Mat *)((char *)v12 + 96);
      uint64_t v12 = (cv::Mat *)((char *)v12 + 96);
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv::Mat>,cv::Mat*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_225E71914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::allocator<cv::Mat>::construct[abi:ne180100]<cv::Mat,cv::Mat&>(int a1, cv::Mat *this, cv::Mat *a3)
{
  *(_OWORD *)this = *(_OWORD *)a3;
  *((void *)this + 2) = *((void *)a3 + 2);
  long long v3 = *(_OWORD *)((char *)a3 + 24);
  *(_OWORD *)((char *)this + 24) = v3;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a3 + 40);
  *((void *)this + 7) = *((void *)a3 + 7);
  *((void *)this + _Block_object_dispose(&a9, 8) = (char *)this + 8;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 11) = 0;
  if ((void)v3) {
    atomic_fetch_add((atomic_uint *volatile)v3, 1u);
  }
  if (*((int *)a3 + 1) > 2)
  {
    *((_DWORD *)this + 1) = 0;
    cv::Mat::copySize(this, a3);
  }
  else
  {
    uint64_t v4 = (void *)*((void *)a3 + 9);
    uint64_t v5 = (void *)*((void *)this + 9);
    void *v5 = *v4;
    v5[1] = v4[1];
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv::Mat>,cv::Mat*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<cv::Mat>,cv::Mat*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<cv::Mat>,cv::Mat*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (cv::Mat **)a1[1];
  uint64_t v1 = (cv::Mat **)a1[2];
  long long v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      long long v3 = (cv::Mat *)((char *)v3 - 96);
      std::allocator<cv::Mat>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_225E72678(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_225E728D0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

__CFString *HMISessionEntityAssignmentAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @"Unknown";
  }
  else {
    return off_26477EBD0[a1 - 1];
  }
}

void sub_225E76928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,char a21)
{
}

void sub_225E78F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id *location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
}

void sub_225E7BAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void sub_225E7BE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVCPHomeKitAnalysisSessionClass_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MediaAnalysisLibraryCore_frameworkLibrary_0)
  {
    v4[1] = MEMORY[0x263EF8330];
    v4[2] = 3221225472;
    v4[3] = __MediaAnalysisLibraryCore_block_invoke_0;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_26477ED80;
    uint64_t v6 = 0;
    MediaAnalysisLibraryCore_frameworkLibrary_0 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!MediaAnalysisLibraryCore_frameworkLibrary_0)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("VCPHomeKitAnalysisSession");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)__getVCPHomeKitAnalysisSessionClass_block_invoke_cold_1();
LABEL_8:
    free(v2);
  }
  getVCPHomeKitAnalysisSessionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MediaAnalysisLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  MediaAnalysisLibraryCore_frameworkLibrary_0 = result;
  return result;
}

uint64_t cvCreateMemStorage(int a1)
{
  uint64_t v2 = cvAlloc(40);
  if (!v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "");
    std::string::basic_string[abi:ne180100]<0>(v7, "icvInitMemStorage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v9, 4294967269, v8, v7, __p, 86);
    cv::error((cv *)v9, v3);
  }
  if (a1 >= 1) {
    int v4 = a1;
  }
  else {
    int v4 = 65408;
  }
  if (v4 == 0x7FFFFFFF) {
    cvCreateMemStorage_cold_1();
  }
  *(void *)(v2 + 32) = 0;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)uint64_t v2 = 1116274688;
  *(_DWORD *)(v2 + 32) = (v4 + 7) & 0xFFFFFFF8;
  return v2;
}

void sub_225E869D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void cvReleaseMemStorage(void ***a1, void *a2)
{
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    std::string::basic_string[abi:ne180100]<0>(v6, "cvReleaseMemStorage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v8, 4294967269, v7, v6, __p, 177);
    cv::error((cv *)v8, v2);
  }
  long long v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    icvDestroyMemStorage((uint64_t)v3, a2);
    cv::fastFree(v3, v4);
  }
}

void sub_225E86B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t icvDestroyMemStorage(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    std::string::basic_string[abi:ne180100]<0>(v11, "icvDestroyMemStorage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v13, 4294967269, v12, v11, __p, 134);
    cv::error((cv *)v13, v3);
  }
  uint64_t v4 = *(void *)(result + 24);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 16);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)(result + 8);
  for (i = *(void *)(result + 8); i; uint64_t v5 = result)
  {
    uint64_t result = i;
    uint64_t i = *(void *)(i + 8);
    uint64_t v8 = *(void *)(v2 + 24);
    if (v8)
    {
      if (v5)
      {
        *(void *)uint64_t result = v5;
        uint64_t v9 = *(void **)(v5 + 8);
        *(void *)(result + _Block_object_dispose(&a9, 8) = v9;
        if (v9) {
          *uint64_t v9 = result;
        }
        *(void *)(v5 + _Block_object_dispose(&a9, 8) = result;
      }
      else
      {
        *(void *)(v8 + _Block_object_dispose(&a9, 8) = result;
        *(void *)(v8 + 16) = result;
        *(void *)uint64_t result = 0;
        *(void *)(result + _Block_object_dispose(&a9, 8) = 0;
        *(_DWORD *)(v2 + 36) = *(_DWORD *)(v2 + 32) - 16;
      }
    }
    else
    {
      cv::fastFree((void **)result, a2);
      uint64_t result = v5;
    }
  }
  *(_DWORD *)(v2 + 36) = 0;
  void *v6 = 0;
  *(void *)(v2 + 16) = 0;
  return result;
}

void sub_225E86CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvRestoreMemStoragePos(uint64_t result, uint64_t *a2)
{
  if (!result || !a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "");
    std::string::basic_string[abi:ne180100]<0>(v8, "cvRestoreMemStoragePos");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v10, 4294967269, v9, v8, __p, 282);
    cv::error((cv *)v10, v2);
  }
  int v3 = *((_DWORD *)a2 + 2);
  if (v3 > *(_DWORD *)(result + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "");
    std::string::basic_string[abi:ne180100]<0>(v8, "cvRestoreMemStoragePos");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v10, 4294967095, v9, v8, __p, 284);
    cv::error((cv *)v10, v4);
  }
  uint64_t v5 = *a2;
  *(void *)(result + 16) = *a2;
  *(_DWORD *)(result + 36) = v3;
  if (!v5)
  {
    uint64_t v6 = *(void *)(result + 8);
    *(void *)(result + 16) = v6;
    if (v6) {
      LODWORD(v6) = *(_DWORD *)(result + 32) - 16;
    }
    *(_DWORD *)(result + 36) = v6;
  }
  return result;
}

void sub_225E86E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvMemStorageAlloc(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "NULL storage pointer");
    std::string::basic_string[abi:ne180100]<0>(v11, "cvMemStorageAlloc");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v13, 4294967269, v12, v11, __p, 321);
    cv::error((cv *)v13, v4);
  }
  if (a2 >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "Too large memory block is requested");
    std::string::basic_string[abi:ne180100]<0>(v11, "cvMemStorageAlloc");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v13, 4294967085, v12, v11, __p, 324);
    cv::error((cv *)v13, v5);
  }
  int v6 = *(_DWORD *)(a1 + 36);
  if ((v6 & 7) != 0) {
    cvMemStorageAlloc_cold_2();
  }
  uint64_t v7 = v6;
  if (v6 < a2)
  {
    if ((int)((*(_DWORD *)(a1 + 32) & 0xFFFFFFF8) - 16) < a2)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "requested size is negative or too big");
      std::string::basic_string[abi:ne180100]<0>(v11, "cvMemStorageAlloc");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
      cv::Exception::Exception(v13, 4294967085, v12, v11, __p, 332);
      cv::error((cv *)v13, v8);
    }
    icvGoNextMemBlock(a1);
    int v6 = *(_DWORD *)(a1 + 36);
    uint64_t v7 = v6;
  }
  uint64_t result = *(void *)(a1 + 16) + *(int *)(a1 + 32) - v7;
  if ((result & 7) != 0) {
    cvMemStorageAlloc_cold_1();
  }
  *(_DWORD *)(a1 + 36) = (v6 - v2) & 0xFFFFFFF8;
  return result;
}

void sub_225E87140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t icvGoNextMemBlock(uint64_t result)
{
  uint64_t v1 = result;
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    std::string::basic_string[abi:ne180100]<0>(v11, "icvGoNextMemBlock");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(&v13, 4294967269, v12, v11, __p, 212);
    cv::error((cv *)&v13, v2);
  }
  uint64_t v3 = *(void *)(result + 16);
  if (!v3 || (uint64_t v4 = *(void **)(v3 + 8)) == 0)
  {
    uint64_t v5 = *(void *)(result + 24);
    if (v5)
    {
      uint64_t v13 = *(void *)(v5 + 16);
      int v14 = *(_DWORD *)(v5 + 36);
      icvGoNextMemBlock(v5);
      uint64_t v4 = *(void **)(v5 + 16);
      uint64_t result = cvRestoreMemStoragePos(v5, &v13);
      int v6 = *(void **)(v5 + 16);
      if (v4 == v6)
      {
        if (*(void **)(v5 + 8) != v4) {
          icvGoNextMemBlock();
        }
        *(_DWORD *)(v5 + 36) = 0;
        *(void *)(v5 + _Block_object_dispose(&a9, 8) = 0;
        *(void *)(v5 + 16) = 0;
      }
      else
      {
        v6[1] = v4[1];
        uint64_t v7 = (void *)v4[1];
        if (v7) {
          void *v7 = v6;
        }
      }
    }
    else
    {
      uint64_t result = cvAlloc(*(int *)(result + 32));
      uint64_t v4 = (void *)result;
    }
    v4[1] = 0;
    uint64_t v8 = *(void *)(v1 + 16);
    *uint64_t v4 = v8;
    if (!v8) {
      uint64_t v8 = v1;
    }
    *(void *)(v8 + _Block_object_dispose(&a9, 8) = v4;
  }
  *(void *)(v1 + 16) = v4;
  int v9 = *(_DWORD *)(v1 + 32);
  *(_DWORD *)(v1 + 36) = v9 - 16;
  if ((v9 & 7) != 0) {
    icvGoNextMemBlock();
  }
  return result;
}

void sub_225E87340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

_DWORD *cvCreateSeq(unsigned int a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!a4)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "");
    std::string::basic_string[abi:ne180100]<0>(v14, "cvCreateSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v16, 4294967269, v15, v14, __p, 371);
    cv::error((cv *)v16, v8);
  }
  if (a2 < 0x60 || !a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "");
    std::string::basic_string[abi:ne180100]<0>(v14, "cvCreateSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v16, 4294967095, v15, v14, __p, 373);
    cv::error((cv *)v16, v9);
  }
  char v10 = (_DWORD *)cvMemStorageAlloc(a4, a2);
  bzero(v10, a2);
  *char v10 = (unsigned __int16)a1 | 0x42990000;
  v10[1] = a2;
  if ((a1 & 0xFFF) != 0
    && (a1 & 0xFFF) != 7
    && (((a1 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a1 & 7))) & 3) != a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "Specified element size doesn't match to the size of the specified element type (try to use 0 for element type)");
    std::string::basic_string[abi:ne180100]<0>(v14, "cvCreateSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v16, 4294967095, v15, v14, __p, 389);
    cv::error((cv *)v16, v11);
  }
  void v10[11] = a3;
  *((void *)v10 + 9) = a4;
  cvSetSeqBlockSize((uint64_t)v10, 0x400 / a3);
  return v10;
}

void sub_225E87608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvSetSeqBlockSize(uint64_t result, int a2)
{
  int v2 = a2;
  if (!result || !*(void *)(result + 72))
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvSetSeqBlockSize");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v11, 4294967269, v10, v9, __p, 409);
    cv::error((cv *)v11, v3);
  }
  if (a2 < 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvSetSeqBlockSize");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v11, 4294967085, v10, v9, __p, 411);
    cv::error((cv *)v11, v5);
  }
  int v4 = *(_DWORD *)(result + 44);
  if (!a2)
  {
    if (1024 / v4 <= 1) {
      int v2 = 1;
    }
    else {
      int v2 = 1024 / v4;
    }
  }
  signed int v6 = (*(_DWORD *)(*(void *)(result + 72) + 32) & 0xFFFFFFF8) - 48;
  if (v2 * v4 > v6)
  {
    int v2 = v6 / v4;
    if (!(v6 / v4))
    {
      std::string::basic_string[abi:ne180100]<0>(v10, "Storage block size is too small to fit the sequence elements");
      std::string::basic_string[abi:ne180100]<0>(v9, "cvSetSeqBlockSize");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
      cv::Exception::Exception(v11, 4294967085, v10, v9, __p, 427);
      cv::error((cv *)v11, v7);
    }
  }
  *(_DWORD *)(result + 64) = v2;
  return result;
}

void sub_225E878BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvGetSeqElem(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    int v3 = (v2 & (a2 >> 31)) + a2;
    int v4 = v3 >= v2 ? *(_DWORD *)(a1 + 40) : 0;
    a2 = v3 - v4;
    if (v3 - v4 >= v2) {
      return 0;
    }
  }
  uint64_t v5 = *(uint64_t **)(a1 + 88);
  if (v2 >= 2 * a2)
  {
    while (1)
    {
      int v7 = *((_DWORD *)v5 + 5);
      if (a2 < v7) {
        break;
      }
      uint64_t v5 = (uint64_t *)v5[1];
      a2 -= v7;
    }
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)*v5;
      v2 -= *((_DWORD *)v5 + 5);
    }
    while (a2 < v2);
    a2 -= v2;
  }
  return v5[3] + *(int *)(a1 + 44) * (uint64_t)a2;
}

uint64_t cvSliceLength(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 40);
  if (SHIDWORD(a1) <= 0) {
    int v3 = *(_DWORD *)(a2 + 40);
  }
  else {
    int v3 = 0;
  }
  if (HIDWORD(a1) == a1) {
    int v4 = 0;
  }
  else {
    int v4 = v3 + HIDWORD(a1) - ((v2 & ((int)a1 >> 31)) + a1);
  }
  if (v2 <= 1) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = *(_DWORD *)(a2 + 40);
  }
  unsigned int v6 = v4 + v2 * (((v4 & ~(v4 >> 31)) - (v4 + (v4 >> 31))) / v5 + (v4 >> 31));
  if ((int)v6 >= (int)v2) {
    return v2;
  }
  else {
    return v6;
  }
}

char *cvCvtSeqToArray(uint64_t a1, char *a2, uint64_t a3)
{
  int v3 = a3;
  int v4 = a2;
  if (!a1 || !a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    std::string::basic_string[abi:ne180100]<0>(v18, "cvCvtSeqToArray");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v20, 4294967269, v19, v18, __p, 545);
    cv::error((cv *)v20, v6);
  }
  int v7 = *(_DWORD *)(a1 + 44);
  int v8 = cvSliceLength(a3, a1) * v7;
  if (!v8) {
    return 0;
  }
  cvStartReadSeq(a1, (uint64_t)v21, 0);
  cvSetSeqReaderPos(v21, v3, 0);
  int v9 = (int)v24;
  char v10 = v4;
  uint64_t v12 = v22;
  uint64_t v11 = v23;
  do
  {
    int v13 = v9 - v11;
    if (v8 >= v13) {
      int v14 = v13;
    }
    else {
      int v14 = v8;
    }
    memcpy(v10, v11, v14);
    v10 += v14;
    uint64_t v12 = *(void *)(v12 + 8);
    uint64_t v11 = *(char **)(v12 + 24);
    uint64_t v22 = v12;
    double v23 = v11;
    int v9 = v11 + *(_DWORD *)(v12 + 20) * v7;
    uint64_t v24 = &v11[*(int *)(v12 + 20) * (uint64_t)v7];
    BOOL v15 = __OFSUB__(v8, v14);
    v8 -= v14;
  }
  while (!((v8 < 0) ^ v15 | (v8 == 0)));
  return v4;
}

void sub_225E87B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

double cvStartReadSeq(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2 || (*(void *)(a2 + 40) = 0, result = 0.0, *(_OWORD *)(a2 + 24) = 0u, *(_OWORD *)(a2 + _Block_object_dispose(&a9, 8) = 0u, !a1))
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    std::string::basic_string[abi:ne180100]<0>(v12, "cvStartReadSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v14, 4294967269, v13, v12, __p, 939);
    cv::error((cv *)v14, v4);
  }
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + _Block_object_dispose(&a9, 8) = a1;
  unsigned int v5 = *(uint64_t **)(a1 + 88);
  if (v5)
  {
    unsigned int v6 = (uint64_t *)*v5;
    uint64_t v7 = v5[3];
    *(void *)(a2 + 24) = v7;
    uint64_t v8 = *(int *)(a1 + 44);
    uint64_t v9 = v6[3] + (*((int *)v6 + 5) - 1) * v8;
    *(void *)(a2 + 56) = v9;
    *(_DWORD *)(a2 + 4_Block_object_dispose(&a9, 8) = *((_DWORD *)v5 + 4);
    if (a3)
    {
      *(void *)(a2 + 24) = v9;
      *(void *)(a2 + 56) = v7;
      unsigned int v5 = v6;
    }
    *(void *)(a2 + 16) = v5;
    uint64_t v10 = v5[3];
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 40) = v10 + *((int *)v5 + 5) * (uint64_t)(int)v8;
  }
  else
  {
    *(void *)(a2 + 56) = 0;
    double result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_DWORD *)(a2 + 4_Block_object_dispose(&a9, 8) = 0;
  }
  return result;
}

void sub_225E87D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void *cvSetSeqReaderPos(void *result, int a2, int a3)
{
  int v3 = a2;
  if (!result || (uint64_t v4 = result[1]) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    std::string::basic_string[abi:ne180100]<0>(v21, "cvSetSeqReaderPos");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v23, 4294967269, v22, v21, __p, 1039);
    cv::error((cv *)v23, v5);
  }
  int v6 = *(_DWORD *)(v4 + 44);
  if (a3)
  {
    int v7 = v6 * a2;
    uint64_t v8 = (uint64_t **)result[2];
    unint64_t v9 = result[3];
    if (v6 * a2 <= 0)
    {
      unint64_t v15 = result[4];
      unint64_t v11 = v9 + v7;
      if (v11 < v15)
      {
        do
        {
          v7 += v9 - v15;
          uint64_t v8 = (uint64_t **)*v8;
          unint64_t v15 = (unint64_t)v8[3];
          unint64_t v9 = v15 + *((int *)v8 + 5) * (uint64_t)v6;
          unint64_t v11 = v9 + v7;
        }
        while (v11 < v15);
        result[2] = v8;
        result[4] = v15;
        result[5] = v9;
      }
    }
    else
    {
      unint64_t v10 = result[5];
      unint64_t v11 = v9 + v7;
      if (v11 >= v10)
      {
        do
        {
          v7 += v9 - v10;
          uint64_t v8 = (uint64_t **)v8[1];
          unint64_t v9 = (unint64_t)v8[3];
          uint64_t v12 = *((int *)v8 + 5) * (uint64_t)v6;
          unint64_t v10 = v9 + v12;
        }
        while (v7 >= (int)v12);
        result[2] = v8;
        unint64_t v11 = v9 + v7;
        result[4] = v9;
        result[5] = v10;
      }
    }
    result[3] = v11;
  }
  else
  {
    int v13 = *(_DWORD *)(v4 + 40);
    if (a2 < 0)
    {
      if (-v13 > a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v22, "");
        std::string::basic_string[abi:ne180100]<0>(v21, "cvSetSeqReaderPos");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
        cv::Exception::Exception(v23, 4294967085, v22, v21, __p, 1049);
        cv::error((cv *)v23, v16);
      }
      int v3 = v13 + a2;
    }
    else if (a2 >= v13)
    {
      if (a2 - v13 >= v13)
      {
        std::string::basic_string[abi:ne180100]<0>(v22, "");
        std::string::basic_string[abi:ne180100]<0>(v21, "cvSetSeqReaderPos");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
        cv::Exception::Exception(v23, 4294967085, v22, v21, __p, 1056);
        cv::error((cv *)v23, v14);
      }
      int v3 = a2 - v13;
    }
    uint64_t v17 = *(uint64_t **)(result[1] + 88);
    int v18 = *((_DWORD *)v17 + 5);
    if (v3 >= v18)
    {
      if (v13 >= 2 * v3)
      {
        do
        {
          uint64_t v17 = (uint64_t *)v17[1];
          v3 -= v18;
          int v18 = *((_DWORD *)v17 + 5);
        }
        while (v3 >= v18);
      }
      else
      {
        do
        {
          uint64_t v17 = (uint64_t *)*v17;
          int v18 = *((_DWORD *)v17 + 5);
          v13 -= v18;
        }
        while (v3 < v13);
        v3 -= v13;
      }
    }
    uint64_t v19 = v17[3];
    result[3] = v19 + v3 * v6;
    if ((uint64_t *)result[2] != v17)
    {
      result[2] = v17;
      result[4] = v19;
      result[5] = v19 + v18 * v6;
    }
  }
  return result;
}

void sub_225E880BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t icvGrowSeq(uint64_t a1, int a2)
{
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "");
    std::string::basic_string[abi:ne180100]<0>(v27, "icvGrowSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v29, 4294967269, v28, v27, __p, 631);
    cv::error((cv *)v29, v4);
  }
  uint64_t result = *(void *)(a1 + 80);
  if (result)
  {
    *(void *)(a1 + 80) = *(void *)(result + 8);
LABEL_23:
    uint64_t v17 = *(void *)(a1 + 88);
    if (v17)
    {
      *(void *)uint64_t result = *(void *)v17;
      *(void *)(result + _Block_object_dispose(&a9, 8) = v17;
      *(void *)uint64_t v17 = result;
      uint64_t v18 = *(void *)result;
      uint64_t v19 = (void *)(*(void *)result + 8);
    }
    else
    {
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = result;
      *(void *)(result + _Block_object_dispose(&a9, 8) = result;
      uint64_t v19 = (void *)result;
      uint64_t v17 = result;
      uint64_t v18 = result;
    }
    void *v19 = result;
    uint64_t v20 = *(unsigned int *)(result + 20);
    if ((int)v20 < 1 || (v21 = *(_DWORD *)(a1 + 44), int v22 = (int)v20 / v21, (int)v20 % v21)) {
      icvGrowSeq();
    }
    uint64_t v23 = *(void *)(result + 24);
    if (a2)
    {
      uint64_t v24 = v23 + v20;
      *(void *)(result + 24) = v24;
      if (result == v18)
      {
        *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v24;
        *(void *)(a1 + 56) = v24;
      }
      else
      {
        if (*(_DWORD *)(v17 + 16)) {
          icvGrowSeq();
        }
        *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = result;
        uint64_t v17 = result;
      }
      *(_DWORD *)(result + 16) = 0;
      do
      {
        *(_DWORD *)(result + 16) += v22;
        uint64_t result = *(void *)(result + 8);
      }
      while (result != v17);
      uint64_t result = v17;
    }
    else
    {
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v23 + v20;
      *(void *)(a1 + 56) = v23;
      if (result == v18) {
        int v25 = 0;
      }
      else {
        int v25 = *(_DWORD *)(v18 + 20) + *(_DWORD *)(v18 + 16);
      }
      *(_DWORD *)(result + 16) = v25;
    }
    *(_DWORD *)(result + 20) = 0;
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(_DWORD *)(a1 + 44);
  if (*(_DWORD *)(a1 + 40) >= 4 * v6) {
    uint64_t result = cvSetSeqBlockSize(a1, 2 * v6);
  }
  if (!v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "The sequence has NULL storage pointer");
    std::string::basic_string[abi:ne180100]<0>(v27, "icvGrowSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v29, 4294967269, v28, v27, __p, 644);
    cv::error((cv *)v29, v9);
  }
  int v10 = *(_DWORD *)(v7 + 36);
  uint64_t v11 = *(void *)(v7 + 16) + *(int *)(v7 + 32);
  uint64_t v12 = *(void *)(a1 + 48);
  if ((unint64_t)(v11 - v10 - v12) > 7 || a2 || v10 < *(_DWORD *)(a1 + 44))
  {
    int v15 = v6 * v8 + 32;
    if (v10 < v15)
    {
      int v16 = v6 / 3;
      if (v6 <= 5) {
        int v16 = 1;
      }
      if (v10 >= v16 * v8 + 40)
      {
        int v15 = (v10 - 32) / *(_DWORD *)(a1 + 44) * *(_DWORD *)(a1 + 44) + 32;
      }
      else
      {
        icvGoNextMemBlock(v7);
        if (*(_DWORD *)(v7 + 36) < v15) {
          icvGrowSeq();
        }
      }
    }
    uint64_t result = cvMemStorageAlloc(v7, v15);
    *(void *)(result + 24) = (result + 39) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)(result + 20) = v15 - 32;
    *(void *)uint64_t result = 0;
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0;
    goto LABEL_23;
  }
  int v13 = v10 / v8;
  if (v13 >= v6) {
    int v13 = v6;
  }
  uint64_t v14 = v12 + v13 * v8;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v14;
  *(_DWORD *)(v7 + 36) = (v11 - v14) & 0xFFFFFFF8;
  return result;
}

void sub_225E88490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void *cvChangeSeqBlock(void *result, int a2)
{
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvChangeSeqBlock");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v11, 4294967269, v10, v9, __p, 989);
    cv::error((cv *)v11, v2);
  }
  int v3 = (uint64_t *)result[2];
  if (a2 < 1)
  {
    uint64_t v4 = *v3;
    result[2] = v4;
    uint64_t v6 = result[1];
    uint64_t v5 = *(void *)(v4 + 24) + *(int *)(v6 + 44) * (*(int *)(v4 + 20) - 1);
  }
  else
  {
    uint64_t v4 = v3[1];
    result[2] = v4;
    uint64_t v5 = *(void *)(v4 + 24);
    uint64_t v6 = result[1];
  }
  result[3] = v5;
  uint64_t v7 = *(void *)(v4 + 24);
  result[4] = v7;
  result[5] = v7 + *(int *)(v6 + 44) * (uint64_t)*(int *)(v4 + 20);
  return result;
}

void sub_225E88614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvGetSeqReaderPos(uint64_t a1)
{
  if (!a1 || !*(void *)(a1 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    std::string::basic_string[abi:ne180100]<0>(v6, "cvGetSeqReaderPos");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v8, 4294967269, v7, v6, __p, 1014);
    cv::error((cv *)v8, v1);
  }
  uint64_t v2 = *(int *)(*(void *)(a1 + 8) + 44);
  if (int)v2 <= 32 && ((0x8000808BuLL >> (v2 - 1))) {
    uint64_t v3 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 32)) >> icvPower2ShiftTab[v2 - 1];
  }
  else {
    uint64_t v3 = (*(void *)(a1 + 24) - *(void *)(a1 + 32)) / v2;
  }
  return (*(_DWORD *)(*(void *)(a1 + 16) + 16) + v3 - *(_DWORD *)(a1 + 48));
}

void sub_225E88790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

char *cvSeqPush(uint64_t a1, void *__src)
{
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvSeqPush");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v11, 4294967269, v10, v9, __p, 1132);
    cv::error((cv *)v11, v4);
  }
  size_t v5 = *(int *)(a1 + 44);
  uint64_t v6 = *(char **)(a1 + 56);
  if ((unint64_t)v6 >= *(void *)(a1 + 48))
  {
    icvGrowSeq(a1, 0);
    uint64_t v6 = *(char **)(a1 + 56);
    if ((unint64_t)&v6[v5] > *(void *)(a1 + 48)) {
      cvSeqPush_cold_1();
    }
  }
  if (__src) {
    memcpy(v6, __src, v5);
  }
  ++*(_DWORD *)(**(void **)(a1 + 88) + 20);
  ++*(_DWORD *)(a1 + 40);
  *(void *)(a1 + 56) = &v6[v5];
  return v6;
}

void sub_225E88920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t icvFreeSeqBlock(uint64_t result, int a2)
{
  uint64_t v2 = *(void ***)(result + 88);
  uint64_t v3 = v2;
  if (!a2) {
    uint64_t v3 = (void **)*v2;
  }
  if (*((_DWORD *)v3 + 5)) {
    icvFreeSeqBlock();
  }
  uint64_t v4 = (void **)*v2;
  if (v2 == *v2)
  {
    uint64_t v11 = *(void *)(result + 48);
    int v6 = *(_DWORD *)(result + 44);
    int v7 = v11 - *((_DWORD *)v2 + 6) + v6 * *((_DWORD *)v2 + 4);
    *((_DWORD *)v2 + 5) = v7;
    v2[3] = (void *)(v11 - v7);
    *(void *)(result + 8_Block_object_dispose(&a9, 8) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)(result + 4_Block_object_dispose(&a9, 8) = 0;
    *(void *)(result + 56) = 0;
  }
  else
  {
    if (a2)
    {
      int v5 = *((_DWORD *)v2 + 4);
      int v6 = *(_DWORD *)(result + 44);
      int v7 = v6 * v5;
      *((_DWORD *)v2 + 5) = v6 * v5;
      v2[3] = (void *)((char *)v2[3] - v6 * v5);
      int v8 = v2;
      do
      {
        *((_DWORD *)v8 + 4) -= v5;
        int v8 = (void **)v8[1];
      }
      while (v8 != v2);
      unint64_t v9 = v2[1];
      *(void *)(result + 8_Block_object_dispose(&a9, 8) = v9;
      int v10 = v4;
      uint64_t v4 = v2;
    }
    else
    {
      uint64_t v12 = *(void **)(result + 56);
      if (v12 != v4[3]) {
        icvFreeSeqBlock();
      }
      int v6 = *(_DWORD *)(result + 44);
      int v7 = *(_DWORD *)(result + 48) - v12;
      *((_DWORD *)v4 + 5) = v7;
      int v10 = (void **)*v4;
      unint64_t v9 = v4[1];
      uint64_t v13 = (*v4)[3] + v6 * (uint64_t)*((int *)*v4 + 5);
      *(void *)(result + 4_Block_object_dispose(&a9, 8) = v13;
      *(void *)(result + 56) = v13;
      uint64_t v2 = v4;
    }
    v10[1] = v9;
    *v4[1] = v10;
  }
  if (v7 < 1 || v7 % v6) {
    icvFreeSeqBlock();
  }
  v2[1] = *(void **)(result + 80);
  *(void *)(result + 80) = v2;
  return result;
}

int *cvSeqPushMulti(int *result, char *__src, int a3, int a4)
{
  int v4 = a3;
  uint64_t v6 = (uint64_t)result;
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "NULL sequence pointer");
    std::string::basic_string[abi:ne180100]<0>(v17, "cvSeqPushMulti");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v19, 4294967269, v18, v17, __p, 1453);
    cv::error((cv *)v19, v7);
  }
  if (a3 < 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "number of removed elements is negative");
    std::string::basic_string[abi:ne180100]<0>(v17, "cvSeqPushMulti");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v19, 4294967095, v18, v17, __p, 1455);
    cv::error((cv *)v19, v8);
  }
  uint64_t v9 = result[11];
  if (a4)
  {
    if (a3 >= 1)
    {
      uint64_t v10 = *((void *)result + 11);
      do
      {
        if (!v10 || (int v11 = *(_DWORD *)(v10 + 16)) == 0)
        {
          icvGrowSeq(v6, 1);
          uint64_t v10 = *(void *)(v6 + 88);
          int v11 = *(_DWORD *)(v10 + 16);
          if (v11 <= 0) {
            cvSeqPushMulti_cold_1();
          }
        }
        if (v11 >= v4) {
          int v12 = v4;
        }
        else {
          int v12 = v11;
        }
        v4 -= v12;
        int v13 = *(_DWORD *)(v10 + 20) + v12;
        *(_DWORD *)(v10 + 16) = v11 - v12;
        *(_DWORD *)(v10 + 20) = v13;
        *(_DWORD *)(v6 + 40) += v12;
        uint64_t result = (int *)(*(void *)(v10 + 24) - (int)v9 * (uint64_t)v12);
        *(void *)(v10 + 24) = result;
        if (__src) {
          uint64_t result = (int *)memcpy(result, &__src[v4 * (int)v9], (int)v9 * (uint64_t)v12);
        }
      }
      while (v4 > 0);
    }
  }
  else if (a3 >= 1)
  {
    while (1)
    {
      uint64_t result = *(int **)(v6 + 56);
      int v14 = v4 >= (int)((*(void *)(v6 + 48) - (void)result) / v9)
          ? (*(void *)(v6 + 48) - (void)result) / v9
          : v4;
      if (v14 >= 1)
      {
        *(_DWORD *)(**(void **)(v6 + 88) + 20) += v14;
        *(_DWORD *)(v6 + 40) += v14;
        uint64_t v15 = v14 * (int)v9;
        if (__src)
        {
          memcpy(result, __src, v14 * (int)v9);
          __src += v15;
          uint64_t result = *(int **)(v6 + 56);
        }
        v4 -= v14;
        *(void *)(v6 + 56) = (char *)result + v15;
        if (v4 < 1) {
          break;
        }
      }
      icvGrowSeq(v6, 0);
    }
  }
  return result;
}

void sub_225E88D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvSeqPopMulti(uint64_t result, char *__dst, int a3, int a4)
{
  int v4 = a3;
  int v5 = __dst;
  uint64_t v6 = result;
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "NULL sequence pointer");
    std::string::basic_string[abi:ne180100]<0>(v22, "cvSeqPopMulti");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v24, 4294967269, v23, v22, __p, 1522);
    cv::error((cv *)v24, v7);
  }
  if (a3 < 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "number of removed elements is negative");
    std::string::basic_string[abi:ne180100]<0>(v22, "cvSeqPopMulti");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v24, 4294967095, v23, v22, __p, 1524);
    cv::error((cv *)v24, v8);
  }
  if (*(_DWORD *)(result + 40) < a3) {
    int v4 = *(_DWORD *)(result + 40);
  }
  if (a4)
  {
    if (v4 >= 1)
    {
      do
      {
        uint64_t v9 = *(void *)(v6 + 88);
        int v10 = *(_DWORD *)(v9 + 20);
        if (v10 >= v4) {
          int v11 = v4;
        }
        else {
          int v11 = *(_DWORD *)(v9 + 20);
        }
        if (v11 <= 0) {
          cvSeqPopMulti_cold_2();
        }
        int v12 = v10 - v11;
        *(_DWORD *)(v9 + 20) = v12;
        *(_DWORD *)(v6 + 40) -= v11;
        *(_DWORD *)(v9 + 16) += v11;
        uint64_t v13 = *(int *)(v6 + 44) * (uint64_t)v11;
        if (v5)
        {
          uint64_t result = (uint64_t)memcpy(v5, *(const void **)(v9 + 24), (int)v13);
          v5 += (int)v13;
          uint64_t v9 = *(void *)(v6 + 88);
          int v12 = *(_DWORD *)(v9 + 20);
          uint64_t v13 = (int)v13;
        }
        *(void *)(v9 + 24) += v13;
        if (!v12) {
          uint64_t result = icvFreeSeqBlock(v6, 1);
        }
        BOOL v14 = __OFSUB__(v4, v11);
        v4 -= v11;
      }
      while (!((v4 < 0) ^ v14 | (v4 == 0)));
    }
  }
  else
  {
    if (__dst) {
      int v5 = &__dst[*(int *)(result + 44) * (uint64_t)v4];
    }
    if (v4 >= 1)
    {
      do
      {
        uint64_t v15 = **(void **)(v6 + 88);
        int v16 = *(_DWORD *)(v15 + 20);
        if (v16 >= v4) {
          int v17 = v4;
        }
        else {
          int v17 = *(_DWORD *)(v15 + 20);
        }
        if (v17 <= 0) {
          cvSeqPopMulti_cold_1();
        }
        int v18 = v16 - v17;
        *(_DWORD *)(v15 + 20) = v18;
        int v19 = *(_DWORD *)(v6 + 44);
        *(_DWORD *)(v6 + 40) -= v17;
        uint64_t v20 = (const void *)(*(void *)(v6 + 56) - v19 * (uint64_t)v17);
        *(void *)(v6 + 56) = v20;
        if (v5)
        {
          v5 -= v19 * (uint64_t)v17;
          uint64_t result = (uint64_t)memcpy(v5, v20, v19 * (uint64_t)v17);
          int v18 = *(_DWORD *)(**(void **)(v6 + 88) + 20);
        }
        if (!v18) {
          uint64_t result = icvFreeSeqBlock(v6, 0);
        }
        BOOL v14 = __OFSUB__(v4, v17);
        v4 -= v17;
      }
      while (!((v4 < 0) ^ v14 | (v4 == 0)));
    }
  }
  return result;
}

void sub_225E89058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvClearSeq(uint64_t a1)
{
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "");
    std::string::basic_string[abi:ne180100]<0>(v4, "cvClearSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v6, 4294967269, v5, v4, __p, 1590);
    cv::error((cv *)v6, v1);
  }
  return cvSeqPopMulti(a1, 0, *(_DWORD *)(a1 + 40), 0);
}

void sub_225E89190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

int *cvSeqSlice(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = a3;
  int v6 = a2;
  if (!a1 || *(_WORD *)(a1 + 2) != 17049)
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "Invalid sequence header");
    std::string::basic_string[abi:ne180100]<0>(v30, "cvSeqSlice");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v32, 4294967291, v31, v30, __p, 1604);
    cv::error((cv *)v32, v8);
  }
  if (!a3)
  {
    uint64_t v5 = *(void *)(a1 + 72);
    if (!v5)
    {
      std::string::basic_string[abi:ne180100]<0>(v31, "NULL storage pointer");
      std::string::basic_string[abi:ne180100]<0>(v30, "cvSeqSlice");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
      cv::Exception::Exception(v32, 4294967269, v31, v30, __p, 1610);
      cv::error((cv *)v32, v9);
    }
  }
  int64_t v10 = *(int *)(a1 + 44);
  unsigned int v11 = cvSliceLength(a2, a1);
  int v12 = v11;
  unsigned int v13 = *(_DWORD *)(a1 + 40);
  if ((int)v13 <= v6) {
    int v14 = *(_DWORD *)(a1 + 40);
  }
  else {
    int v14 = 0;
  }
  if (v6 >= 0) {
    int v15 = -v14;
  }
  else {
    int v15 = *(_DWORD *)(a1 + 40);
  }
  unsigned int v16 = v15 + v6;
  if (v11 > v13 || (v16 >= v13 ? (BOOL v17 = v11 == 0) : (BOOL v17 = 1), !v17))
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "Bad sequence slice");
    std::string::basic_string[abi:ne180100]<0>(v30, "cvSeqSlice");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v32, 4294967085, v31, v30, __p, 1621);
    cv::error((cv *)v32, v18);
  }
  Seq = cvCreateSeq(*(_DWORD *)a1, *(int *)(a1 + 4), v10, v5);
  if (v12 >= 1)
  {
    cvStartReadSeq(a1, (uint64_t)v33, 0);
    cvSetSeqReaderPos(v33, v16, 0);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    int v22 = v35;
    uint64_t v23 = (v36 - (uint64_t)v35) / v10;
    do
    {
      if ((int)v23 >= v12) {
        int v24 = v12;
      }
      else {
        int v24 = v23;
      }
      if (a4)
      {
        cvSeqPushMulti(Seq, v22, v24, 0);
      }
      else
      {
        uint64_t v25 = cvMemStorageAlloc(v5, 0x20uLL);
        if (v20)
        {
          *(void *)uint64_t v25 = v21;
          *(void *)(v25 + _Block_object_dispose(&a9, 8) = v20;
          *uint64_t v20 = v25;
          *(void *)(v21 + _Block_object_dispose(&a9, 8) = v25;
          int v26 = *(_DWORD *)(v21 + 20) + *(_DWORD *)(v21 + 16);
        }
        else
        {
          int v26 = 0;
          *(void *)uint64_t v25 = v25;
          *(void *)(v25 + _Block_object_dispose(&a9, 8) = v25;
          uint64_t v20 = (void *)v25;
          *((void *)Seq + 11) = v25;
        }
        *(_DWORD *)(v25 + 16) = v26;
        *(void *)(v25 + 24) = v35;
        *(_DWORD *)(v25 + 20) = v24;
        Seq[10] += v24;
        uint64_t v21 = v25;
      }
      uint64_t v23 = *(void *)(v34 + 8);
      int v22 = *(char **)(v23 + 24);
      uint64_t v34 = v23;
      unint64_t v35 = v22;
      LODWORD(v23) = *(_DWORD *)(v23 + 20);
      BOOL v27 = __OFSUB__(v12, v24);
      v12 -= v24;
    }
    while (!((v12 < 0) ^ v27 | (v12 == 0)));
  }
  return Seq;
}

void sub_225E89540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void cvSeqSort(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v172 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v5 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v151, "Bad input sequence");
    std::string::basic_string[abi:ne180100]<0>(v147, "cvSeqSort");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(&v155, v5, v151, v147, __p, 1915);
    cv::error((cv *)&v155, v6);
  }
  if (*(_WORD *)(a1 + 2) != 17049)
  {
    uint64_t v5 = 4294967291;
    goto LABEL_5;
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v151, "Null compare function");
    std::string::basic_string[abi:ne180100]<0>(v147, "cvSeqSort");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(&v155, 4294967269, v151, v147, __p, 1918);
    cv::error((cv *)&v155, v7);
  }
  if (*(int *)(a1 + 40) < 2) {
    return;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 44);
  cvStartReadSeq(a1, (uint64_t)&v163, 0);
  long long v159 = v163;
  long long v160 = v164;
  long long v161 = v165;
  long long v162 = v166;
  v167[0] = v164;
  v167[1] = v165;
  uint64_t v9 = v164;
  unint64_t v10 = *((void *)&v164 + 1) - (int)v8;
  uint64_t v11 = v165;
  if (v10 >= (unint64_t)v165)
  {
    uint64_t v14 = *((void *)&v161 + 1);
  }
  else
  {
    uint64_t v9 = *(void *)v164;
    uint64_t v11 = *(void *)(*(void *)v164 + 24);
    int v12 = *(_DWORD *)(*(void *)v164 + 20);
    int v13 = *(_DWORD *)(*((void *)&v159 + 1) + 44);
    unint64_t v10 = v11 + v13 * (v12 - 1);
    uint64_t v14 = v11 + v12 * v13;
  }
  unsigned int v15 = 0;
  uint64_t v168 = v9;
  unint64_t v169 = v10;
  uint64_t v170 = v11;
  uint64_t v171 = v14;
  do
  {
    unsigned int v16 = &v167[4 * (unint64_t)v15];
    long long v17 = v16[1];
    long long v164 = *v16;
    long long v165 = v17;
    long long v18 = v16[3];
    long long v160 = v16[2];
    long long v161 = v18;
    unsigned int v129 = v15 - 1;
    while (1)
    {
      if ((void)v164 == (void)v160)
      {
        int v20 = v8 + DWORD2(v160) - DWORD2(v164);
      }
      else
      {
        int SeqReaderPos = cvGetSeqReaderPos((uint64_t)&v159);
        int v20 = v8 + v8 * (SeqReaderPos - cvGetSeqReaderPos((uint64_t)&v163));
      }
      if (v20 <= 7 * (int)v8) {
        break;
      }
      long long v139 = v163;
      long long v140 = v164;
      long long v141 = v165;
      long long v142 = v166;
      long long v157 = v165;
      long long v158 = v166;
      long long v155 = v163;
      long long v156 = v164;
      long long v145 = v161;
      long long v146 = v162;
      *(_OWORD *)__p = v159;
      long long v144 = v160;
      long long v149 = v161;
      long long v150 = v162;
      unsigned int v21 = v20 / (int)v8;
      *(_OWORD *)unint64_t v147 = v159;
      long long v148 = v160;
      if (v20 / (int)v8 >= 41)
      {
        int v22 = v21 >> 3;
        uint64_t v23 = *((void *)&v140 + 1);
        cvSetSeqReaderPos(&v139, v21 >> 3, 1);
        uint64_t v133 = *((void *)&v140 + 1);
        cvSetSeqReaderPos(&v139, v21 >> 3, 1);
        uint64_t v24 = *((void *)&v140 + 1);
        int v25 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v23, v133, a3);
        int v26 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v133, v24, a3);
        if (v25 < 0)
        {
          if ((v26 & 0x80000000) == 0)
          {
            if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v23, v24, a3) >= 0) {
              uint64_t v27 = v23;
            }
            else {
              uint64_t v27 = v24;
            }
LABEL_32:
            uint64_t v133 = v27;
          }
        }
        else if (v26 <= 0)
        {
          if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v23, v24, a3) >= 0) {
            uint64_t v27 = v24;
          }
          else {
            uint64_t v27 = v23;
          }
          goto LABEL_32;
        }
        cvSetSeqReaderPos(&v139, (v21 >> 1) - 3 * v22, 1);
        uint64_t v32 = *((void *)&v140 + 1);
        cvSetSeqReaderPos(&v139, v21 >> 3, 1);
        uint64_t v30 = *((void *)&v140 + 1);
        cvSetSeqReaderPos(&v139, v21 >> 3, 1);
        uint64_t v33 = *((void *)&v140 + 1);
        int v34 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v32, v30, a3);
        int v35 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v30, v33, a3);
        if (v34 < 0)
        {
          if ((v35 & 0x80000000) == 0)
          {
            if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v32, v33, a3) >= 0) {
              uint64_t v30 = v32;
            }
            else {
              uint64_t v30 = v33;
            }
          }
        }
        else if (v35 <= 0)
        {
          if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v32, v33, a3) >= 0) {
            uint64_t v30 = v33;
          }
          else {
            uint64_t v30 = v32;
          }
        }
        cvSetSeqReaderPos(&v139, v21 - (v21 >> 1) + ~(3 * v22), 1);
        uint64_t v36 = *((void *)&v140 + 1);
        cvSetSeqReaderPos(&v139, v21 >> 3, 1);
        uint64_t v31 = *((void *)&v140 + 1);
        cvSetSeqReaderPos(&v139, v22, 1);
        uint64_t v37 = *((void *)&v140 + 1);
        int v38 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v36, v31, a3);
        int v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v31, v37, a3);
        if (v38 < 0)
        {
          if ((v39 & 0x80000000) == 0)
          {
            if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v36, v37, a3) >= 0) {
              uint64_t v31 = v36;
            }
            else {
              uint64_t v31 = v37;
            }
          }
        }
        else if (v39 <= 0)
        {
          if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v36, v37, a3) >= 0) {
            uint64_t v31 = v37;
          }
          else {
            uint64_t v31 = v36;
          }
        }
        goto LABEL_51;
      }
      uint64_t v133 = *((void *)&v140 + 1);
      if ((v21 & 0x80000000) == 0) {
        int v28 = v20 / (int)v8;
      }
      else {
        int v28 = v21 + 1;
      }
      int v29 = v28 >> 1;
      cvSetSeqReaderPos(&v139, v28 >> 1, 1);
      uint64_t v30 = *((void *)&v140 + 1);
      cvSetSeqReaderPos(&v139, v21 + ~v29, 1);
      uint64_t v31 = *((void *)&v140 + 1);
LABEL_51:
      int v40 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v133, v30, a3);
      int v41 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2)(v30, v31, a3);
      if (v40 < 0)
      {
        if ((v41 & 0x80000000) == 0)
        {
          if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v133, v31, a3) >= 0) {
            uint64_t v30 = v133;
          }
          else {
            uint64_t v30 = v31;
          }
        }
      }
      else if (v41 <= 0)
      {
        if (((int (*)(uint64_t, uint64_t, uint64_t))a2)(v133, v31, a3) >= 0) {
          uint64_t v30 = v31;
        }
        else {
          uint64_t v30 = v133;
        }
      }
      long long v163 = v155;
      long long v164 = v156;
      long long v165 = v157;
      long long v166 = v158;
      uint64_t v42 = *((void *)&v156 + 1);
      if (v30 != *((void *)&v156 + 1) && (int)v8 >= 1)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          char v44 = *(unsigned char *)(v30 + i);
          *(unsigned char *)(v30 + i) = *(unsigned char *)(*((void *)&v164 + 1) + i);
          *(unsigned char *)(*((void *)&v164 + 1) + i) = v44;
        }
        uint64_t v42 = *((void *)&v164 + 1);
      }
      unint64_t v45 = v42 + (int)v8;
      *((void *)&v164 + 1) = v45;
      if (v45 >= *((void *)&v165 + 1))
      {
        uint64_t v46 = *(void *)(v164 + 8);
        unint64_t v45 = *(void *)(v46 + 24);
        *(void *)&long long v164 = v46;
        *((void *)&v164 + 1) = v45;
        *(void *)&long long v165 = *(void *)(v46 + 24);
        *((void *)&v165 + 1) = v165 + *(int *)(*((void *)&v163 + 1) + 44) * (uint64_t)*(int *)(v46 + 20);
      }
      int v47 = 0;
      *(_OWORD *)unint64_t v151 = v163;
      long long v152 = v164;
      long long v153 = v165;
      long long v154 = v166;
      unint64_t v48 = *((void *)&v160 + 1);
LABEL_68:
      if (v45 == v48)
      {
        unint64_t v56 = v48;
      }
      else
      {
        while (1)
        {
          int v49 = a2();
          if (v49 > 0) {
            break;
          }
          if (!v49)
          {
            uint64_t v50 = *((void *)&v152 + 1);
            if (*((void *)&v152 + 1) != *((void *)&v164 + 1) && (int)v8 >= 1)
            {
              for (uint64_t j = 0; j != v8; ++j)
              {
                char v53 = *(unsigned char *)(*((void *)&v152 + 1) + j);
                *(unsigned char *)(*((void *)&v152 + 1) + j) = *(unsigned char *)(*((void *)&v164 + 1) + j);
                *(unsigned char *)(*((void *)&v164 + 1) + j) = v53;
              }
              uint64_t v50 = *((void *)&v152 + 1);
            }
            *((void *)&v152 + 1) = v50 + (int)v8;
            if (*((void *)&v152 + 1) >= *((void *)&v153 + 1))
            {
              uint64_t v54 = *(void *)(v152 + 8);
              uint64_t v55 = *(void *)(v54 + 24);
              *(void *)&long long v152 = v54;
              *((void *)&v152 + 1) = v55;
              *(void *)&long long v153 = *(void *)(v54 + 24);
              *((void *)&v153 + 1) = v153 + *((int *)v151[1] + 11) * (uint64_t)*(int *)(v54 + 20);
            }
            int v47 = 1;
          }
          unint64_t v56 = *((void *)&v164 + 1) + (int)v8;
          *((void *)&v164 + 1) = v56;
          if (v56 >= *((void *)&v165 + 1))
          {
            uint64_t v57 = *(void *)(v164 + 8);
            unint64_t v56 = *(void *)(v57 + 24);
            *(void *)&long long v164 = v57;
            *((void *)&v164 + 1) = v56;
            *(void *)&long long v165 = *(void *)(v57 + 24);
            *((void *)&v165 + 1) = v165 + *(int *)(*((void *)&v163 + 1) + 44) * (uint64_t)*(int *)(v57 + 20);
          }
          if (v56 == *((void *)&v160 + 1)) {
            goto LABEL_114;
          }
        }
        uint64_t v58 = *((void *)&v164 + 1);
        unint64_t v56 = *((void *)&v160 + 1);
        while (v58 != v56)
        {
          int v59 = a2();
          if (v59 < 0)
          {
            uint64_t v66 = *((void *)&v164 + 1);
            unint64_t v56 = *((void *)&v160 + 1);
            if (*((void *)&v164 + 1) == *((void *)&v160 + 1)) {
              break;
            }
            if ((int)v8 >= 1)
            {
              for (uint64_t k = 0; k != v8; ++k)
              {
                char v68 = *(unsigned char *)(*((void *)&v164 + 1) + k);
                *(unsigned char *)(*((void *)&v164 + 1) + k) = *(unsigned char *)(*((void *)&v160 + 1) + k);
                *(unsigned char *)(*((void *)&v160 + 1) + k) = v68;
              }
              uint64_t v66 = *((void *)&v164 + 1);
            }
            unint64_t v45 = v66 + (int)v8;
            *((void *)&v164 + 1) = v45;
            if (v45 >= *((void *)&v165 + 1))
            {
              uint64_t v69 = *(void *)(v164 + 8);
              unint64_t v45 = *(void *)(v69 + 24);
              *(void *)&long long v164 = v69;
              *((void *)&v164 + 1) = v45;
              *(void *)&long long v165 = *(void *)(v69 + 24);
              *((void *)&v165 + 1) = v165 + *(int *)(*((void *)&v163 + 1) + 44) * (uint64_t)*(int *)(v69 + 20);
            }
            uint64_t v70 = *((void *)&v160 + 1);
            unint64_t v48 = *((void *)&v160 + 1) - (int)v8;
            *((void *)&v160 + 1) = v48;
            if (v48 < (unint64_t)v161)
            {
              *(void *)&long long v160 = *(void *)v160;
              uint64_t v71 = *(int *)(*((void *)&v159 + 1) + 44);
              unint64_t v48 = *(void *)(v160 + 24) + v71 * (*(int *)(v160 + 20) - 1);
              *((void *)&v160 + 1) = v48;
              *(void *)&long long v161 = *(void *)(v160 + 24);
              *((void *)&v161 + 1) = v161 + *(int *)(v160 + 20) * (uint64_t)(int)v71;
            }
            int v47 = 1;
            if (v45 != v70) {
              goto LABEL_68;
            }
            goto LABEL_132;
          }
          if (!v59)
          {
            uint64_t v60 = *((void *)&v144 + 1);
            if (*((void *)&v144 + 1) != *((void *)&v160 + 1) && (int)v8 >= 1)
            {
              for (uint64_t m = 0; m != v8; ++m)
              {
                char v63 = *(unsigned char *)(*((void *)&v144 + 1) + m);
                *(unsigned char *)(*((void *)&v144 + 1) + m) = *(unsigned char *)(*((void *)&v160 + 1) + m);
                *(unsigned char *)(*((void *)&v160 + 1) + m) = v63;
              }
              uint64_t v60 = *((void *)&v144 + 1);
            }
            *((void *)&v144 + 1) = v60 - (int)v8;
            if (*((void *)&v144 + 1) < (unint64_t)v145)
            {
              *(void *)&long long v144 = *(void *)v144;
              uint64_t v64 = *((int *)__p[1] + 11);
              *((void *)&v144 + 1) = *(void *)(v144 + 24) + v64 * (*(int *)(v144 + 20) - 1);
              *(void *)&long long v145 = *(void *)(v144 + 24);
              *((void *)&v145 + 1) = v145 + *(int *)(v144 + 20) * (uint64_t)(int)v64;
            }
            int v47 = 1;
          }
          unint64_t v56 = *((void *)&v160 + 1) - (int)v8;
          *((void *)&v160 + 1) = v56;
          if (v56 < (unint64_t)v161)
          {
            *(void *)&long long v160 = *(void *)v160;
            uint64_t v65 = *(int *)(*((void *)&v159 + 1) + 44);
            unint64_t v56 = *(void *)(v160 + 24) + v65 * (*(int *)(v160 + 20) - 1);
            *((void *)&v160 + 1) = v56;
            *(void *)&long long v161 = *(void *)(v160 + 24);
            *((void *)&v161 + 1) = v161 + *(int *)(v160 + 20) * (uint64_t)(int)v65;
          }
          uint64_t v58 = *((void *)&v164 + 1);
        }
      }
LABEL_114:
      int v72 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))a2)(v56, v42, a3);
      if (!v72)
      {
        uint64_t v73 = *((void *)&v152 + 1);
        if (*((void *)&v152 + 1) != *((void *)&v164 + 1) && (int)v8 >= 1)
        {
          for (uint64_t n = 0; n != v8; ++n)
          {
            char v76 = *(unsigned char *)(*((void *)&v152 + 1) + n);
            *(unsigned char *)(*((void *)&v152 + 1) + n) = *(unsigned char *)(*((void *)&v164 + 1) + n);
            *(unsigned char *)(*((void *)&v164 + 1) + n) = v76;
          }
          uint64_t v73 = *((void *)&v152 + 1);
        }
        *((void *)&v152 + 1) = v73 + (int)v8;
        if (*((void *)&v152 + 1) >= *((void *)&v153 + 1))
        {
          uint64_t v77 = *(void *)(v152 + 8);
          uint64_t v78 = *(void *)(v77 + 24);
          *(void *)&long long v152 = v77;
          *((void *)&v152 + 1) = v78;
          *(void *)&long long v153 = *(void *)(v77 + 24);
          *((void *)&v153 + 1) = v153 + *((int *)v151[1] + 11) * (uint64_t)*(int *)(v77 + 20);
        }
        int v47 = 1;
      }
      if (v72 <= 0)
      {
        *((void *)&v164 + 1) += (int)v8;
        if (*((void *)&v164 + 1) < *((void *)&v165 + 1)) {
          goto LABEL_131;
        }
        uint64_t v80 = *(void *)(v164 + 8);
        uint64_t v83 = *(void *)(v80 + 24);
        *(void *)&long long v164 = v80;
        *((void *)&v164 + 1) = v83;
        uint64_t v81 = *(void *)(v80 + 24);
        *(void *)&long long v165 = v81;
        LODWORD(v80) = *(_DWORD *)(v80 + 20);
        int64_t v79 = (int *)(*((void *)&v163 + 1) + 44);
        unint64_t v82 = (char *)&v165 + 8;
      }
      else
      {
        *((void *)&v160 + 1) -= (int)v8;
        if (*((void *)&v160 + 1) >= (unint64_t)v161) {
          goto LABEL_131;
        }
        *(void *)&long long v160 = *(void *)v160;
        int64_t v79 = (int *)(v160 + 20);
        uint64_t v80 = *(int *)(*((void *)&v159 + 1) + 44);
        *((void *)&v160 + 1) = *(void *)(v160 + 24) + v80 * (*(int *)(v160 + 20) - 1);
        uint64_t v81 = *(void *)(v160 + 24);
        *(void *)&long long v161 = v81;
        unint64_t v82 = (char *)&v161 + 8;
      }
      *(void *)unint64_t v82 = v81 + *v79 * (uint64_t)(int)v80;
LABEL_131:
      if (!v47)
      {
        long long v163 = v155;
        long long v164 = v156;
        long long v165 = v157;
        long long v166 = v158;
        long long v159 = *(_OWORD *)v147;
        long long v160 = v148;
        long long v161 = v149;
        long long v162 = v150;
        break;
      }
LABEL_132:
      int v84 = cvGetSeqReaderPos((uint64_t)&v163);
      if (!v84) {
        int v84 = *(_DWORD *)(a1 + 40);
      }
      int v85 = cvGetSeqReaderPos((uint64_t)&v155);
      int v86 = cvGetSeqReaderPos((uint64_t)v151);
      if (!v86) {
        int v86 = *(_DWORD *)(a1 + 40);
      }
      int v87 = v84 - v86;
      if (v84 - v86 >= v86 - v85) {
        int v88 = v86 - v85;
      }
      else {
        int v88 = v84 - v86;
      }
      if (v88 >= 1)
      {
        long long v139 = v155;
        long long v140 = v156;
        long long v141 = v157;
        long long v142 = v158;
        long long v135 = v163;
        long long v136 = v164;
        long long v137 = v165;
        long long v138 = v166;
        cvSetSeqReaderPos(&v135, -v88, 1);
        for (iuint64_t i = 0; ii != v88; ++ii)
        {
          if ((int)v8 >= 1)
          {
            for (juint64_t j = 0; jj != v8; ++jj)
            {
              char v91 = *(unsigned char *)(*((void *)&v140 + 1) + jj);
              *(unsigned char *)(*((void *)&v140 + 1) + jj) = *(unsigned char *)(*((void *)&v136 + 1) + jj);
              *(unsigned char *)(*((void *)&v136 + 1) + jj) = v91;
            }
          }
          *((void *)&v140 + 1) += (int)v8;
          if (*((void *)&v140 + 1) >= *((void *)&v141 + 1))
          {
            uint64_t v92 = *(void *)(v140 + 8);
            uint64_t v93 = *(void *)(v92 + 24);
            *(void *)&long long v140 = v92;
            *((void *)&v140 + 1) = v93;
            *(void *)&long long v141 = *(void *)(v92 + 24);
            *((void *)&v141 + 1) = v141 + *(int *)(*((void *)&v139 + 1) + 44) * (uint64_t)*(int *)(v92 + 20);
          }
          *((void *)&v136 + 1) += (int)v8;
          if (*((void *)&v136 + 1) >= *((void *)&v137 + 1))
          {
            uint64_t v94 = *(void *)(v136 + 8);
            uint64_t v95 = *(void *)(v94 + 24);
            *(void *)&long long v136 = v94;
            *((void *)&v136 + 1) = v95;
            *(void *)&long long v137 = *(void *)(v94 + 24);
            *((void *)&v137 + 1) = v137 + *(int *)(*((void *)&v135 + 1) + 44) * (uint64_t)*(int *)(v94 + 20);
          }
        }
      }
      int v96 = cvGetSeqReaderPos((uint64_t)&v159);
      int v97 = cvGetSeqReaderPos((uint64_t)v147);
      int v98 = cvGetSeqReaderPos((uint64_t)__p);
      int v99 = v97 - v98;
      int v100 = v98 - v96;
      if (v99 >= v98 - v96) {
        int v101 = v98 - v96;
      }
      else {
        int v101 = v99;
      }
      if (v101 >= 1)
      {
        long long v139 = v163;
        long long v140 = v164;
        long long v141 = v165;
        long long v142 = v166;
        long long v135 = *(_OWORD *)v147;
        long long v136 = v148;
        long long v137 = v149;
        long long v138 = v150;
        cvSetSeqReaderPos(&v135, 1 - v101, 1);
        for (kuint64_t k = 0; kk != v101; ++kk)
        {
          if ((int)v8 >= 1)
          {
            for (muint64_t m = 0; mm != v8; ++mm)
            {
              char v104 = *(unsigned char *)(*((void *)&v140 + 1) + mm);
              *(unsigned char *)(*((void *)&v140 + 1) + mm) = *(unsigned char *)(*((void *)&v136 + 1) + mm);
              *(unsigned char *)(*((void *)&v136 + 1) + mm) = v104;
            }
          }
          *((void *)&v140 + 1) += (int)v8;
          if (*((void *)&v140 + 1) >= *((void *)&v141 + 1))
          {
            uint64_t v105 = *(void *)(v140 + 8);
            uint64_t v106 = *(void *)(v105 + 24);
            *(void *)&long long v140 = v105;
            *((void *)&v140 + 1) = v106;
            *(void *)&long long v141 = *(void *)(v105 + 24);
            *((void *)&v141 + 1) = v141 + *(int *)(*((void *)&v139 + 1) + 44) * (uint64_t)*(int *)(v105 + 20);
          }
          *((void *)&v136 + 1) += (int)v8;
          if (*((void *)&v136 + 1) >= *((void *)&v137 + 1))
          {
            uint64_t v107 = *(void *)(v136 + 8);
            uint64_t v108 = *(void *)(v107 + 24);
            *(void *)&long long v136 = v107;
            *((void *)&v136 + 1) = v108;
            *(void *)&long long v137 = *(void *)(v107 + 24);
            *((void *)&v137 + 1) = v137 + *(int *)(*((void *)&v135 + 1) + 44) * (uint64_t)*(int *)(v107 + 20);
          }
        }
      }
      if (v87 <= 1)
      {
        if (v100 <= 1) {
          goto LABEL_192;
        }
        long long v159 = *(_OWORD *)v147;
        long long v160 = v148;
        long long v161 = v149;
        long long v162 = v150;
        long long v163 = *(_OWORD *)v147;
        long long v164 = v148;
        long long v165 = v149;
        long long v166 = v150;
        cvSetSeqReaderPos(&v163, 1 - v100, 1);
      }
      else if (v100 < 2)
      {
        long long v159 = v155;
        long long v160 = v156;
        long long v161 = v157;
        long long v162 = v158;
        long long v163 = v155;
        long long v164 = v156;
        long long v165 = v157;
        long long v166 = v158;
        cvSetSeqReaderPos(&v159, v87 - 1, 1);
      }
      else
      {
        uint64_t v109 = (int)v129 + 1;
        unint64_t v110 = &v167[4 * v109];
        if (v87 <= v100)
        {
          long long v114 = v149;
          v110[2] = v148;
          v110[3] = v114;
          cvSetSeqReaderPos(v147, 1 - v100, 1);
          long long v115 = v149;
          *unint64_t v110 = v148;
          v110[1] = v115;
          long long v159 = v155;
          long long v160 = v156;
          long long v161 = v157;
          long long v162 = v158;
          long long v165 = v157;
          long long v166 = v158;
          long long v163 = v155;
          long long v164 = v156;
          cvSetSeqReaderPos(&v159, v87 - 1, 1);
        }
        else
        {
          long long v111 = v157;
          *unint64_t v110 = v156;
          v110[1] = v111;
          cvSetSeqReaderPos(&v155, v87 - 1, 1);
          long long v112 = v157;
          int v113 = &v167[4 * v109];
          v113[2] = v156;
          v113[3] = v112;
          long long v159 = *(_OWORD *)v147;
          long long v160 = v148;
          long long v161 = v149;
          long long v162 = v150;
          long long v165 = v149;
          long long v166 = v150;
          long long v163 = *(_OWORD *)v147;
          long long v164 = v148;
          cvSetSeqReaderPos(&v163, 1 - v100, 1);
        }
        ++v129;
      }
    }
    uint64_t v116 = *((void *)&v163 + 1);
    unint64_t v117 = (uint64_t **)v164;
    unint64_t v118 = v165;
    unint64_t v119 = (unsigned char *)(*((void *)&v164 + 1) + (int)v8);
    v132 = (unsigned char *)*((void *)&v165 + 1);
    if ((unint64_t)v119 >= *((void *)&v165 + 1))
    {
      v120 = *(uint64_t **)(v164 + 8);
      unint64_t v119 = (unsigned char *)v120[3];
      v132 = &v119[*(int *)(*((void *)&v163 + 1) + 44) * (uint64_t)*((int *)v120 + 5)];
      long long v121 = v119;
    }
    else
    {
      v120 = (uint64_t *)v164;
      long long v121 = (unsigned char *)v165;
    }
    v122 = (unsigned char *)(*((void *)&v160 + 1) + (int)v8);
    *((void *)&v160 + 1) = v122;
    if ((unint64_t)v122 >= *((void *)&v161 + 1))
    {
      uint64_t v123 = *(void *)(v160 + 8);
      v122 = *(unsigned char **)(v123 + 24);
      *(void *)&long long v160 = v123;
      *((void *)&v160 + 1) = v122;
      *(void *)&long long v161 = *(void *)(v123 + 24);
      *((void *)&v161 + 1) = v161 + *(int *)(*((void *)&v159 + 1) + 44) * (uint64_t)*(int *)(v123 + 20);
    }
    while (v119 != v122)
    {
      v131 = v121;
      if (v117 != (uint64_t **)v120) {
        unint64_t v118 = (unint64_t)v121;
      }
      v134 = v120;
      unint64_t v117 = (uint64_t **)v120;
      uint64_t v124 = v119;
      while (v124 != *((char **)&v164 + 1))
      {
        v125 = v124;
        v124 -= (int)v8;
        if ((unint64_t)v124 < v118)
        {
          unint64_t v117 = (uint64_t **)*v117;
          unint64_t v118 = (unint64_t)v117[3];
          uint64_t v124 = (char *)(v118 + *(int *)(v116 + 44) * (*((int *)v117 + 5) - 1));
        }
        if (((int (*)(char *, char *, uint64_t))a2)(v124, v125, a3) < 1) {
          break;
        }
        if ((int)v8 >= 1)
        {
          uint64_t v126 = v8;
          v127 = v124;
          do
          {
            char v128 = *v127;
            *v127++ = *v125;
            *v125++ = v128;
            --v126;
          }
          while (v126);
        }
      }
      v119 += (int)v8;
      if (v119 >= v132)
      {
        v120 = (uint64_t *)v134[1];
        unint64_t v119 = (unsigned char *)v120[3];
        v132 = &v119[*(int *)(v116 + 44) * (uint64_t)*((int *)v120 + 5)];
        long long v121 = v119;
      }
      else
      {
        v120 = v134;
        long long v121 = v131;
      }
      v122 = (unsigned char *)*((void *)&v160 + 1);
    }
LABEL_192:
    unsigned int v15 = v129;
  }
  while ((v129 & 0x80000000) == 0);
}

void sub_225E8A668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  cv::Exception::~Exception((cv::Exception *)&a68);
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  _Unwind_Resume(a1);
}

_DWORD *cvCreateSet(unsigned int a1, int a2, int a3, uint64_t a4)
{
  if (!a4)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "");
    std::string::basic_string[abi:ne180100]<0>(v8, "cvCreateSet");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v10, 4294967269, v9, v8, __p, 2480);
    cv::error((cv *)v10, v4);
  }
  if (a2 < 112 || a3 < 16 || (a3 & 7) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "");
    std::string::basic_string[abi:ne180100]<0>(v8, "cvCreateSet");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v10, 4294967095, v9, v8, __p, 2484);
    cv::error((cv *)v10, v5);
  }
  uint64_t result = cvCreateSeq(a1, a2, a3, a4);
  *((_WORD *)result + 1) = 17048;
  return result;
}

void sub_225E8A868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvSetAdd(uint64_t a1, void *__src, void *a3)
{
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "");
    std::string::basic_string[abi:ne180100]<0>(v17, "cvSetAdd");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v19, 4294967269, v18, v17, __p, 2501);
    cv::error((cv *)v19, v6);
  }
  int v7 = *(void **)(a1 + 96);
  if (!v7)
  {
    int v8 = *(_DWORD *)(a1 + 40);
    uint64_t v9 = *(int *)(a1 + 44);
    icvGrowSeq(a1, 0);
    unint64_t v10 = *(void *)(a1 + 48);
    int v7 = *(void **)(a1 + 56);
    *(void *)(a1 + 96) = v7;
    if ((unint64_t)v7 + v9 <= v10)
    {
      int v12 = v7;
      do
      {
        uint64_t v11 = (void *)((char *)v12 + v9);
        *(_DWORD *)int v12 = v8 | 0x80000000;
        v12[1] = (char *)v12 + v9;
        ++v8;
        int v13 = (char *)v12 + v9 + v9;
        int v12 = (void *)((char *)v12 + v9);
      }
      while ((unint64_t)v13 <= v10);
    }
    else
    {
      uint64_t v11 = v7;
    }
    if (v8 >= 67108865) {
      cvSetAdd_cold_1();
    }
    *(void *)((char *)v11 - v9 + _Block_object_dispose(&a9, 8) = 0;
    *(_DWORD *)(**(void **)(a1 + 88) + 20) += v8 - *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v8;
    *(void *)(a1 + 56) = v10;
  }
  *(void *)(a1 + 96) = v7[1];
  uint64_t v14 = *(_DWORD *)v7 & 0x3FFFFFF;
  if (__src) {
    memcpy(v7, __src, *(int *)(a1 + 44));
  }
  *(_DWORD *)int v7 = v14;
  ++*(_DWORD *)(a1 + 104);
  if (a3) {
    *a3 = v7;
  }
  return v14;
}

void sub_225E8AA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvClearSet(uint64_t a1)
{
  uint64_t result = cvClearSeq(a1);
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

_DWORD *cvCreateGraph(unsigned int a1, int a2, int a3, int a4, uint64_t a5)
{
  if (a3 < 16 || a2 < 120 || a4 <= 39)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    std::string::basic_string[abi:ne180100]<0>(v11, "cvCreateGraph");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v13, 4294967095, v12, v11, __p, 2579);
    cv::error((cv *)v13, v7);
  }
  Set = cvCreateSet(a1, a2, a3, a5);
  *((void *)Set + 14) = cvCreateSet(0, 112, a4, a5);
  return Set;
}

void sub_225E8AC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvGraphAddVtx(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    std::string::basic_string[abi:ne180100]<0>(v10, "cvGraphAddVtx");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v12, 4294967269, v11, v10, __p, 2613);
    cv::error((cv *)v12, v6);
  }
  int v7 = *(unsigned int **)(a1 + 96);
  v12[0] = v7;
  if (v7)
  {
    *(void *)(a1 + 96) = *((void *)v7 + 1);
    *v7 &= 0x3FFFFFFu;
    ++*(_DWORD *)(a1 + 104);
  }
  else
  {
    cvSetAdd(a1, 0, v12);
    int v7 = (unsigned int *)v12[0];
    if (!v12[0])
    {
      uint64_t result = 0xFFFFFFFFLL;
      if (!a3) {
        return result;
      }
      goto LABEL_9;
    }
  }
  if (a2) {
    memcpy(v7 + 4, (const void *)(a2 + 16), *(int *)(a1 + 44) - 16);
  }
  *((void *)v7 + 1) = 0;
  uint64_t result = *v7;
  if (a3) {
LABEL_9:
  }
    *a3 = v7;
  return result;
}

void sub_225E8ADD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvFindGraphEdgeByPtr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = a3;
  int v4 = a2;
  if (!a1 || !a2 || !a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    std::string::basic_string[abi:ne180100]<0>(v13, "cvFindGraphEdgeByPtr");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v15, 4294967269, v14, v13, __p, 2698);
    cv::error((cv *)v15, v5);
  }
  if (a2 == a3) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 1) & 0x40) == 0)
  {
    unsigned int v6 = *a2 & 0x3FFFFFF;
    unsigned int v7 = *a3 & 0x3FFFFFF;
    BOOL v8 = v6 > v7;
    if (v6 <= v7) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = a3;
    }
    if (v8) {
      uint64_t v3 = a2;
    }
    int v4 = v9;
  }
  for (uint64_t result = *((void *)v4 + 1); result; uint64_t result = *(void *)(result + 8 * (v4 == v11) + 8))
  {
    uint64_t v11 = *(_DWORD **)(result + 32);
    if (v4 != v11 && v4 != *(_DWORD **)(result + 24)) {
      cvFindGraphEdgeByPtr_cold_1();
    }
    if (v11 == v3) {
      break;
    }
  }
  return result;
}

void sub_225E8AF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvGraphAddEdgeByPtr(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v7 = a3;
  BOOL v8 = a2;
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "graph pointer is NULL");
    std::string::basic_string[abi:ne180100]<0>(v25, "cvGraphAddEdgeByPtr");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v27, 4294967269, v26, v25, __p, 2755);
    cv::error((cv *)v27, v10);
  }
  if ((*(unsigned char *)(a1 + 1) & 0x40) == 0)
  {
    unsigned int v11 = *a2 & 0x3FFFFFF;
    unsigned int v12 = *a3 & 0x3FFFFFF;
    BOOL v13 = v11 > v12;
    if (v11 <= v12) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a2;
    }
    if (v13) {
      BOOL v8 = a3;
    }
    unsigned int v7 = v14;
  }
  uint64_t GraphEdgeByPtr = cvFindGraphEdgeByPtr(a1, v8, v7);
  if (GraphEdgeByPtr)
  {
    uint64_t v16 = GraphEdgeByPtr;
    uint64_t result = 0;
    if (!a5) {
      return result;
    }
    goto LABEL_12;
  }
  if (v8 == v7)
  {
    if (v7) {
      uint64_t v18 = 4294967291;
    }
    else {
      uint64_t v18 = 4294967269;
    }
    std::string::basic_string[abi:ne180100]<0>(v26, "vertex pointers coinside (or set to NULL)");
    std::string::basic_string[abi:ne180100]<0>(v25, "cvGraphAddEdgeByPtr");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v27, v18, v26, v25, __p, 2775);
    cv::error((cv *)v27, v19);
  }
  uint64_t v20 = *(void *)(a1 + 112);
  uint64_t v16 = *(void *)(v20 + 96);
  v27[0] = v16;
  if (v16)
  {
    *(void *)(v20 + 96) = *(void *)(v16 + 8);
    *(_DWORD *)v16 &= 0x3FFFFFFu;
    ++*(_DWORD *)(v20 + 104);
  }
  else
  {
    cvSetAdd(v20, 0, v27);
    uint64_t v16 = v27[0];
  }
  if ((*(_DWORD *)v16 & 0x80000000) != 0) {
    cvGraphAddEdgeByPtr_cold_1();
  }
  *(void *)(v16 + 24) = v8;
  *(void *)(v16 + 32) = v7;
  *(void *)(v16 + _Block_object_dispose(&a9, 8) = *((void *)v8 + 1);
  *(void *)(v16 + 16) = *((void *)v7 + 1);
  *((void *)v7 + 1) = v16;
  *((void *)v8 + 1) = v16;
  int v21 = *(_DWORD *)(*(void *)(a1 + 112) + 44);
  size_t v22 = (v21 - 40);
  if (a4)
  {
    if ((int)v22 >= 1) {
      memcpy((void *)(v16 + 40), (const void *)(a4 + 40), v22);
    }
    float v23 = *(float *)(a4 + 4);
  }
  else
  {
    float v23 = 1.0;
    if ((int)v22 >= 1) {
      bzero((void *)(v16 + 40), (v21 - 40));
    }
  }
  *(float *)(v16 + 4) = v23;
  uint64_t result = 1;
  if (a5) {
LABEL_12:
  }
    *a5 = v16;
  return result;
}

void sub_225E8B26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

_DWORD *cvCloneGraph(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a1 || (*(_DWORD *)a1 & 0xFFFF3000) != 0x42981000)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "Invalid graph pointer");
    std::string::basic_string[abi:ne180100]<0>(v34, "cvCloneGraph");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v36, 4294967291, v35, v34, __p, 3255);
    cv::error((cv *)v36, v4);
  }
  if (!a2)
  {
    uint64_t v2 = *(void *)(a1 + 72);
    if (!v2)
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "NULL storage pointer");
      std::string::basic_string[abi:ne180100]<0>(v34, "cvCloneGraph");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
      cv::Exception::Exception(v36, 4294967269, v35, v34, __p, 3261);
      cv::error((cv *)v36, v5);
    }
  }
  int v6 = *(_DWORD *)(a1 + 44);
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(*(void *)(a1 + 112) + 44);
  uint64_t v9 = (void **)cvAlloc(4 * *(int *)(a1 + 40));
  unint64_t v10 = (void **)cvAlloc(8 * *(int *)(a1 + 40));
  Graph = cvCreateGraph(*(_DWORD *)a1, *(_DWORD *)(a1 + 4), v6, v8, v2);
  memcpy(Graph + 3600, (const void *)(a1 + 14400), *(int *)(a1 + 4) - 120);
  cvStartReadSeq(a1, (uint64_t)v37, 0);
  if (*(int *)(a1 + 40) >= 1)
  {
    int v12 = 0;
    int v13 = 0;
    uint64_t v14 = v40;
    do
    {
      if ((*v14 & 0x80000000) == 0)
      {
        v36[0] = 0;
        cvGraphAddVtx((uint64_t)Graph, (uint64_t)v14, v36);
        int v15 = *v14;
        uint64_t v16 = v36[0];
        *(_DWORD *)v36[0] = *v14;
        *((_DWORD *)v9 + v13) = v15;
        _DWORD *v14 = v13;
        v10[v13++] = (void *)v16;
        uint64_t v14 = v40;
      }
      uint64_t v14 = (_DWORD *)((char *)v14 + v7);
      int v40 = v14;
      if ((unint64_t)v14 >= v42)
      {
        uint64_t v17 = *(void *)(v39 + 8);
        uint64_t v14 = *(_DWORD **)(v17 + 24);
        uint64_t v39 = v17;
        int v40 = v14;
        uint64_t v41 = *(void *)(v17 + 24);
        unint64_t v42 = v41 + *(int *)(v38 + 44) * (uint64_t)*(int *)(v17 + 20);
      }
      ++v12;
    }
    while (v12 < *(_DWORD *)(a1 + 40));
  }
  cvStartReadSeq(*(void *)(a1 + 112), (uint64_t)v37, 0);
  if (*(int *)(*(void *)(a1 + 112) + 40) >= 1)
  {
    int v18 = 0;
    uint64_t v19 = v8;
    unint64_t v20 = (unint64_t)v40;
    do
    {
      if ((*(_DWORD *)v20 & 0x80000000) == 0)
      {
        v36[0] = 0;
        cvGraphAddEdgeByPtr((uint64_t)Graph, v10[**(int **)(v20 + 24)], v10[**(int **)(v20 + 32)], v20, v36);
        *(_DWORD *)v36[0] = *(_DWORD *)v20;
        unint64_t v20 = (unint64_t)v40;
      }
      v20 += v19;
      int v40 = (_DWORD *)v20;
      if (v20 >= v42)
      {
        uint64_t v21 = *(void *)(v39 + 8);
        unint64_t v20 = *(void *)(v21 + 24);
        uint64_t v39 = v21;
        int v40 = (_DWORD *)v20;
        uint64_t v41 = *(void *)(v21 + 24);
        unint64_t v42 = v41 + *(int *)(v38 + 44) * (uint64_t)*(int *)(v21 + 20);
      }
      ++v18;
    }
    while (v18 < *(_DWORD *)(*(void *)(a1 + 112) + 40));
  }
  cvStartReadSeq(a1, (uint64_t)v37, 0);
  int v23 = *(_DWORD *)(*(void *)(a1 + 112) + 40);
  if (v23 >= 1)
  {
    int v24 = 0;
    int v25 = 0;
    uint64_t v26 = v38;
    uint64_t v27 = v39;
    unint64_t v28 = v42;
    int v29 = v40;
    do
    {
      if ((*v29 & 0x80000000) == 0)
      {
        int v30 = *((_DWORD *)v9 + v25++);
        *int v29 = v30;
      }
      int v29 = (_DWORD *)((char *)v29 + v7);
      int v40 = v29;
      if ((unint64_t)v29 >= v28)
      {
        uint64_t v27 = *(void *)(v27 + 8);
        int v29 = *(_DWORD **)(v27 + 24);
        uint64_t v39 = v27;
        int v40 = v29;
        uint64_t v41 = *(void *)(v27 + 24);
        unint64_t v28 = v41 + *(int *)(v26 + 44) * (uint64_t)*(int *)(v27 + 20);
        unint64_t v42 = v28;
      }
      ++v24;
    }
    while (v24 < v23);
  }
  cv::fastFree(v9, v22);
  cv::fastFree(v10, v31);
  if ((int)cvGetErrStatus() >= 0) {
    return Graph;
  }
  else {
    return 0;
  }
}

void sub_225E8B6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvInitTreeNodeIterator(uint64_t result, uint64_t a2, int a3)
{
  if (!result || !a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    std::string::basic_string[abi:ne180100]<0>(v6, "cvInitTreeNodeIterator");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v8, 4294967269, v7, v6, __p, 3436);
    cv::error((cv *)v8, v3);
  }
  if (a3 < 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    std::string::basic_string[abi:ne180100]<0>(v6, "cvInitTreeNodeIterator");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v8, 4294967085, v7, v6, __p, 3439);
    cv::error((cv *)v8, v4);
  }
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + _Block_object_dispose(&a9, 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  return result;
}

void sub_225E8B8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvNextTreeNode(uint64_t *a1)
{
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "NULL iterator pointer");
    std::string::basic_string[abi:ne180100]<0>(v10, "cvNextTreeNode");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/datastructs.cpp");
    cv::Exception::Exception(v12, 4294967269, v11, v10, __p, 3455);
    cv::error((cv *)v12, v2);
  }
  uint64_t result = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  if (*a1)
  {
    uint64_t v5 = *(void *)(result + 32);
    if (v5 && (int v6 = v4 + 1, v4 + 1 < *((_DWORD *)a1 + 3)))
    {
LABEL_11:
      int v4 = v6;
    }
    else
    {
      int v6 = (v4 & (v4 >> 31)) - 1;
      uint64_t v7 = *a1;
      while (!*(void *)(v7 + 16))
      {
        uint64_t v7 = *(void *)(v7 + 24);
        BOOL v8 = __OFSUB__(v4--, 1);
        if (v4 < 0 != v8)
        {
          uint64_t v5 = 0;
          goto LABEL_11;
        }
      }
      if (*((_DWORD *)a1 + 3)) {
        uint64_t v5 = *(void *)(v7 + 16);
      }
      else {
        uint64_t v5 = 0;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a1 = v5;
  *((_DWORD *)a1 + 2) = v4;
  return result;
}

void sub_225E8BA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  CMTimeValue value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  size_t v5 = value;
  std::vector<int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      std::vector<int>::pointer begin = this->__begin_;
      std::vector<int>::pointer end = this->__end_;
    }
    else
    {
      uint64_t v14 = 0;
    }
    int v15 = &v14[4 * v11];
    uint64_t v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    uint64_t v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void cvCreateMemStorage_cold_1()
{
  __assert_rtn("cvAlign", "internal.hpp", 450, "(align & (align-1)) == 0 && size < INT_MAX");
}

void cvMemStorageAlloc_cold_1()
{
  __assert_rtn("cvMemStorageAlloc", "datastructs.cpp", 338, "(size_t)ptr % CV_STRUCT_ALIGN == 0");
}

void cvMemStorageAlloc_cold_2()
{
  __assert_rtn("cvMemStorageAlloc", "datastructs.cpp", 326, "storage->free_space % CV_STRUCT_ALIGN == 0");
}

void icvGoNextMemBlock()
{
  __assert_rtn("icvGoNextMemBlock", "datastructs.cpp", 261, "storage->free_space % CV_STRUCT_ALIGN == 0");
}

{
  __assert_rtn("icvGoNextMemBlock", "datastructs.cpp", 235, "parent->bottom == block");
}

void icvGrowSeq()
{
  __assert_rtn("icvGrowSeq", "datastructs.cpp", 678, "storage->free_space >= delta");
}

{
  __assert_rtn("icvGrowSeq", "datastructs.cpp", 711, "block->count % seq->elem_size == 0 && block->count > 0");
}

{
  __assert_rtn("icvGrowSeq", "datastructs.cpp", 727, "seq->first->start_index == 0");
}

void cvSeqPush_cold_1()
{
  __assert_rtn("cvSeqPush", "datastructs.cpp", 1142, "ptr + elem_size <= seq->block_max");
}

void icvFreeSeqBlock()
{
  __assert_rtn("icvFreeSeqBlock", "datastructs.cpp", 799, "block->count > 0 && block->count % seq->elem_size == 0");
}

{
  __assert_rtn("icvFreeSeqBlock", "datastructs.cpp", 770, "seq->ptr == block->data");
}

{
  __assert_rtn("icvFreeSeqBlock", "datastructs.cpp", 755, "(in_front_of ? block : block->prev)->count == 0");
}

void cvSeqPushMulti_cold_1()
{
}

void cvSeqPopMulti_cold_1()
{
}

void cvSeqPopMulti_cold_2()
{
}

void cvSetAdd_cold_1()
{
  __assert_rtn("cvSetAdd", "datastructs.cpp", 2516, "count <= CV_SET_ELEM_IDX_MASK+1");
}

void cvFindGraphEdgeByPtr_cold_1()
{
  __assert_rtn("cvFindGraphEdgeByPtr", "datastructs.cpp", 2714, "ofs == 1 || start_vtx == edge->vtx[0]");
}

void cvGraphAddEdgeByPtr_cold_1()
{
  __assert_rtn("cvGraphAddEdgeByPtr", "datastructs.cpp", 2778, "edge->flags >= 0");
}

uint64_t cv::borderInterpolate(cv *this, int a2, int a3)
{
  unint64_t v3 = (unint64_t)this;
  int v4 = this - a2;
  if (this < a2) {
    return v3;
  }
  uint64_t result = 0xFFFFFFFFLL;
  switch(a3)
  {
    case 0:
      return result;
    case 1:
      if ((v3 & 0x80000000) == 0) {
        return (a2 - 1);
      }
      else {
        return 0;
      }
    case 2:
    case 4:
      if (a2 == 1) {
        return 0;
      }
      LODWORD(result) = v3;
      do
      {
        if ((int)result >= 0) {
          int v7 = ~(result + (a3 == 4));
        }
        else {
          int v7 = a3 == 4;
        }
        if ((int)result < 0) {
          int v8 = ~result;
        }
        else {
          int v8 = 2 * a2;
        }
        uint64_t result = (v8 + v7);
      }
      while (result >= a2);
      return result;
    case 3:
      if ((v3 & 0x80000000) != 0) {
        unint64_t v3 = (~v4 + v3 + (v4 + 1) % a2);
      }
      if ((int)v3 < a2) {
        return v3;
      }
      uint64_t result = ((int)v3 % a2);
      break;
    default:
      std::string::basic_string[abi:ne180100]<0>(v11, "Unknown/unsupported border type");
      std::string::basic_string[abi:ne180100]<0>(v10, "borderInterpolate");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
      cv::Exception::Exception(v12, 4294967291, v11, v10, __p, 94);
      cv::error((cv *)v12, v6);
  }
  return result;
}

void sub_225E8C134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

double cv::BaseRowFilter::BaseRowFilter(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D988210;
  double result = NAN;
  *((void *)this + 1) = -1;
  return result;
}

double cv::BaseColumnFilter::BaseColumnFilter(cv::BaseColumnFilter *this)
{
  *(void *)this = &unk_26D988238;
  double result = NAN;
  *((void *)this + 1) = -1;
  return result;
}

void *cv::BaseFilter::BaseFilter(void *this)
{
  *this = &unk_26D988268;
  this[1] = -1;
  this[2] = -1;
  return this;
}

uint64_t *cv::Ptr<cv::BaseColumnFilter>::~Ptr(uint64_t *a1, void *a2)
{
  unint64_t v3 = (atomic_uint *)a1[1];
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1)
  {
    uint64_t v4 = *a1;
    if (*a1) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    cv::fastFree((void **)a1[1], a2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

uint64_t *cv::Ptr<cv::BaseRowFilter>::~Ptr(uint64_t *a1, void *a2)
{
  unint64_t v3 = (atomic_uint *)a1[1];
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1)
  {
    uint64_t v4 = *a1;
    if (*a1) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    cv::fastFree((void **)a1[1], a2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

uint64_t *cv::Ptr<cv::BaseFilter>::~Ptr(uint64_t *a1, void *a2)
{
  unint64_t v3 = (atomic_uint *)a1[1];
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1)
  {
    uint64_t v4 = *a1;
    if (*a1) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    cv::fastFree((void **)a1[1], a2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

uint64_t cv::FilterEngine::FilterEngine(uint64_t a1, void *a2, void *a3, void *a4, unsigned int a5, __int16 a6, __int16 a7, int a8, int a9, uint64_t a10)
{
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_26D988298;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 2_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 24_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  cv::FilterEngine::init(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

{
  return cv::FilterEngine::FilterEngine(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_225E8C45C(_Unwind_Exception *a1, void *a2)
{
  cv::Ptr<cv::BaseColumnFilter>::~Ptr(v2 + 36, a2);
  cv::Ptr<cv::BaseRowFilter>::~Ptr(v2 + 34, v6);
  cv::Ptr<cv::BaseFilter>::~Ptr(v2 + 32, v7);
  int v8 = (void *)v2[29];
  if (v8)
  {
    v2[30] = (uint64_t)v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)v2[23];
  if (v9)
  {
    v2[24] = (uint64_t)v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)v2[20];
  if (v10)
  {
    v2[21] = (uint64_t)v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)v2[17];
  if (v11)
  {
    v2[18] = (uint64_t)v11;
    operator delete(v11);
  }
  uint64_t v12 = *v4;
  if (*v4)
  {
    v2[15] = (uint64_t)v12;
    operator delete(v12);
  }
  unint64_t v13 = *v3;
  if (*v3)
  {
    v2[11] = (uint64_t)v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

double cv::FilterEngine::init(uint64_t a1, void *a2, void *a3, void *a4, unsigned int a5, __int16 a6, __int16 a7, int a8, int a9, uint64_t a10)
{
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = a5 & 0xFFF;
  *(_DWORD *)(a1 + 12) = a6 & 0xFFF;
  *(_DWORD *)(a1 + 16) = a7 & 0xFFF;
  int v15 = (void *)(a1 + 256);
  if ((void *)(a1 + 256) != a2)
  {
    uint64_t v17 = (atomic_uint *)a2[1];
    if (v17) {
      atomic_fetch_add(v17, 1u);
    }
    int v18 = *(atomic_uint **)(a1 + 264);
    if (v18 && atomic_fetch_add(v18, 0xFFFFFFFF) == 1)
    {
      if (*v15) {
        (*(void (**)(void))(*(void *)*v15 + 8))(*v15);
      }
      cv::fastFree(*(void ***)(a1 + 264), a2);
    }
    void *v15 = 0;
    v15[1] = 0;
    *(void *)(a1 + 256) = *a2;
    *(void *)(a1 + 264) = v17;
  }
  uint64_t v19 = (void *)(a1 + 272);
  if ((void *)(a1 + 272) != a3)
  {
    unint64_t v20 = (atomic_uint *)a3[1];
    if (v20) {
      atomic_fetch_add(v20, 1u);
    }
    uint64_t v21 = *(atomic_uint **)(a1 + 280);
    if (v21 && atomic_fetch_add(v21, 0xFFFFFFFF) == 1)
    {
      if (*v19) {
        (*(void (**)(void))(*(void *)*v19 + 8))(*v19);
      }
      cv::fastFree(*(void ***)(a1 + 280), a2);
    }
    void *v19 = 0;
    *(void *)(a1 + 280) = 0;
    *(void *)(a1 + 272) = *a3;
    *(void *)(a1 + 280) = v20;
  }
  size_t v22 = (void *)(a1 + 288);
  if ((void *)(a1 + 288) != a4)
  {
    int v23 = (atomic_uint *)a4[1];
    if (v23) {
      atomic_fetch_add(v23, 1u);
    }
    int v24 = *(atomic_uint **)(a1 + 296);
    if (v24 && atomic_fetch_add(v24, 0xFFFFFFFF) == 1)
    {
      if (*v22) {
        (*(void (**)(void))(*(void *)*v22 + 8))(*v22);
      }
      cv::fastFree(*(void ***)(a1 + 296), a2);
    }
    *size_t v22 = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 28_Block_object_dispose(&a9, 8) = *a4;
    *(void *)(a1 + 296) = v23;
  }
  if (a9 >= 0) {
    int v25 = a9;
  }
  else {
    int v25 = a8;
  }
  *(_DWORD *)(a1 + 72) = a8;
  *(_DWORD *)(a1 + 76) = v25;
  if (v25 == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v51, "columnBorderType != BORDER_WRAP");
    std::string::basic_string[abi:ne180100]<0>(v50, "init");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v52, 4294967081, v51, v50, __p, 166);
    cv::error((cv *)v52, v26);
  }
  uint64_t v27 = (_DWORD *)*v15;
  if (*v15)
  {
    if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a1 + 8))
    {
      std::string::basic_string[abi:ne180100]<0>(v51, "bufType == srcType");
      std::string::basic_string[abi:ne180100]<0>(v50, "init");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
      cv::Exception::Exception(v52, 4294967081, v51, v50, __p, 176);
      cv::error((cv *)v52, v28);
    }
    int v29 = v27[2];
    *(_DWORD *)(a1 + 20) = v29;
    int v30 = v27[3];
    *(_DWORD *)(a1 + 24) = v30;
    int v31 = v27[4];
    *(_DWORD *)(a1 + 2_Block_object_dispose(&a9, 8) = v31;
    int v32 = v27[5];
  }
  else
  {
    uint64_t v33 = *v19;
    if (!*v19 || (uint64_t v34 = *v22) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v51, "!rowFilter.empty() && !columnFilter.empty()");
      std::string::basic_string[abi:ne180100]<0>(v50, "init");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
      cv::Exception::Exception(v52, 4294967081, v51, v50, __p, 170);
      cv::error((cv *)v52, v35);
    }
    int v29 = *(_DWORD *)(v33 + 8);
    int v30 = *(_DWORD *)(v34 + 8);
    *(_DWORD *)(a1 + 20) = v29;
    *(_DWORD *)(a1 + 24) = v30;
    int v31 = *(_DWORD *)(v33 + 12);
    int v32 = *(_DWORD *)(v34 + 12);
    *(_DWORD *)(a1 + 2_Block_object_dispose(&a9, 8) = v31;
  }
  *(_DWORD *)(a1 + 32) = v32;
  if (v31 < 0 || v31 >= v29 || v32 < 0 || v32 >= v30)
  {
    std::string::basic_string[abi:ne180100]<0>(v51, "0 <= anchor.x && anchor.x < ksize.width && 0 <= anchor.y && anchor.y < ksize.height");
    std::string::basic_string[abi:ne180100]<0>(v50, "init");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v52, 4294967081, v51, v50, __p, 182);
    cv::error((cv *)v52, v36);
  }
  unsigned int v37 = (((a5 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a5 & 7))) & 3);
  unsigned int v38 = v37 >> ((*(_DWORD *)(a1 + 8) >> 1) & 2);
  *(_DWORD *)(a1 + 104) = v38;
  if (v29 <= 2) {
    int v29 = 2;
  }
  int v39 = v29 - 1;
  std::vector<int>::resize((std::vector<int> *)(a1 + 80), (int)((v29 - 1) * v38));
  *(_DWORD *)(a1 + 20_Block_object_dispose(&a9, 8) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)(a1 + 192) = *(void *)(a1 + 184);
  if (!*(_DWORD *)(a1 + 72) || !*(_DWORD *)(a1 + 76))
  {
    unint64_t v40 = (int)(v39 * v37);
    uint64_t v41 = *(void *)(a1 + 160);
    unint64_t v42 = *(void *)(a1 + 168) - v41;
    BOOL v43 = v40 >= v42;
    size_t v44 = v40 - v42;
    if (v44 != 0 && v43)
    {
      std::vector<unsigned char>::__append((unint64_t *)(a1 + 160), v44);
      uint64_t v41 = *(void *)(a1 + 160);
    }
    else if (!v43)
    {
      *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = v41 + v40;
    }
    unsigned int v45 = *(_DWORD *)(a1 + 8);
    int v46 = (v45 >> 3) & 0x1FF;
    if (((v45 >> 3) & 0x1FC) != 0) {
      int v47 = 24;
    }
    else {
      int v47 = 8 * v46;
    }
    cv::scalarToRawData(a10, v41, v47 & 0xFFFFFFF8 | *(_DWORD *)(a1 + 8) & 7, v39 + v39 * v46);
  }
  double result = NAN;
  *(void *)(a1 + 40) = -1;
  return result;
}

void sub_225E8CA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void cv::FilterEngine::~FilterEngine(cv::FilterEngine *this, void *a2)
{
  *(void *)this = &unk_26D988298;
  unint64_t v3 = (void *)((char *)this + 288);
  uint64_t v4 = (atomic_uint *)*((void *)this + 37);
  if (v4 && atomic_fetch_add(v4, 0xFFFFFFFF) == 1)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    cv::fastFree(*((void ***)this + 37), a2);
  }
  void *v3 = 0;
  v3[1] = 0;
  size_t v5 = (void *)((char *)this + 272);
  int v6 = (atomic_uint *)*((void *)this + 35);
  if (v6 && atomic_fetch_add(v6, 0xFFFFFFFF) == 1)
  {
    if (*v5) {
      (*(void (**)(void))(*(void *)*v5 + 8))(*v5);
    }
    cv::fastFree(*((void ***)this + 35), a2);
  }
  void *v5 = 0;
  *((void *)this + 35) = 0;
  int v7 = (void *)((char *)this + 256);
  int v8 = (atomic_uint *)*((void *)this + 33);
  if (v8 && atomic_fetch_add(v8, 0xFFFFFFFF) == 1)
  {
    if (*v7) {
      (*(void (**)(void))(*(void *)*v7 + 8))(*v7);
    }
    cv::fastFree(*((void ***)this + 33), a2);
  }
  void *v7 = 0;
  *((void *)this + 33) = 0;
  uint64_t v9 = (void *)*((void *)this + 29);
  if (v9)
  {
    *((void *)this + 30) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 23);
  if (v10)
  {
    *((void *)this + 24) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 20);
  if (v11)
  {
    *((void *)this + 21) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 17);
  if (v12)
  {
    *((void *)this + 1_Block_object_dispose(&a9, 8) = v12;
    operator delete(v12);
  }
  unint64_t v13 = (void *)*((void *)this + 14);
  if (v13)
  {
    *((void *)this + 15) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 10);
  if (v14)
  {
    *((void *)this + 11) = v14;
    operator delete(v14);
  }
}

{
  uint64_t vars8;

  cv::FilterEngine::~FilterEngine(this, a2);
  JUMPOUT(0x22A641780);
}

uint64_t cv::FilterEngine::start(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  *(void *)&long long v7 = *a2;
  *((void *)&v7 + 1) = v6;
  *(_OWORD *)(a1 + 40) = v7;
  int v8 = *((_DWORD *)a3 + 2);
  *(_DWORD *)(a1 + 56) = v8;
  int v9 = *((_DWORD *)a3 + 3);
  *(_DWORD *)(a1 + 60) = v9;
  if ((v6 & 0x80000000) != 0
    || v6 < 0
    || v8 < 0
    || v9 < 0
    || ((int v10 = v9 + HIDWORD(v6), v8 + (int)v6 <= (int)v5) ? (v11 = v10 <= SHIDWORD(v5)) : (v11 = 0), !v11))
  {
    std::string::basic_string[abi:ne180100]<0>(v81, "roi.x >= 0 && roi.y >= 0 && roi.width >= 0 && roi.height >= 0 && roi.x + roi.width <= wholeSize.width && roi.y + roi.height <= wholeSize.height");
    std::string::basic_string[abi:ne180100]<0>(v80, "start");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v82, 4294967081, v81, v80, __p, 212);
    cv::error((cv *)v82, v12);
  }
  int v13 = (((*(_DWORD *)(a1 + 8) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 8) & 7))) & 3);
  int v14 = (((*(_DWORD *)(a1 + 16) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 16) & 7))) & 3);
  if (*(void *)(a1 + 160) == *(void *)(a1 + 168)) {
    int v15 = 0;
  }
  else {
    int v15 = *(char **)(a1 + 160);
  }
  int v16 = *(_DWORD *)(a1 + 24);
  int v17 = v16 + 3;
  if (a4 >= 0) {
    int v17 = a4;
  }
  int v18 = *(_DWORD *)(a1 + 32);
  int v19 = v16 + ~v18;
  if (v18 > v19) {
    int v19 = *(_DWORD *)(a1 + 32);
  }
  int v20 = (2 * v19) | 1;
  if (v17 > v20) {
    int v20 = v17;
  }
  if (*(_DWORD *)(a1 + 36) < *(_DWORD *)(a1 + 56)
    || v20 != ((*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 3))
  {
    std::vector<unsigned char *>::resize(a1 + 232, v20);
    uint64_t v21 = *(void *)(a1 + 136);
    if (*(_DWORD *)(a1 + 36) <= *(_DWORD *)(a1 + 56)) {
      int v22 = *(_DWORD *)(a1 + 56);
    }
    else {
      int v22 = *(_DWORD *)(a1 + 36);
    }
    *(_DWORD *)(a1 + 36) = v22;
    unint64_t v23 = v13 * (uint64_t)(v22 + *(_DWORD *)(a1 + 20) - 1);
    unint64_t v24 = *(void *)(a1 + 144) - v21;
    if (v23 <= v24)
    {
      if (v23 < v24) {
        *(void *)(a1 + 144) = v21 + v23;
      }
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)(a1 + 136), v23 - v24);
      int v22 = *(_DWORD *)(a1 + 36);
    }
    if (!*(_DWORD *)(a1 + 76))
    {
      uint64_t v25 = *(void *)(a1 + 184);
      int v26 = *(_DWORD *)(a1 + 20);
      unint64_t v27 = ((((*(_DWORD *)(a1 + 16) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 16) & 7))) & 3))
          * (uint64_t)(v22 + v26 + 15);
      unint64_t v28 = *(void *)(a1 + 192) - v25;
      if (v27 <= v28)
      {
        if (v27 < v28) {
          *(void *)(a1 + 192) = v25 + v27;
        }
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)(a1 + 184), v27 - v28);
        uint64_t v25 = *(void *)(a1 + 184);
        int v22 = *(_DWORD *)(a1 + 36);
        int v26 = *(_DWORD *)(a1 + 20);
      }
      unint64_t v29 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
      int v30 = (v22 + v26 - 1) * v13;
      uint64_t v31 = *(void *)(a1 + 256);
      unint64_t v32 = v29;
      if (!v31) {
        unint64_t v32 = *(void *)(a1 + 136);
      }
      if (v30 >= 1)
      {
        int v33 = 0;
        LODWORD(v34) = *(_DWORD *)(a1 + 168) - *(_DWORD *)(a1 + 160);
        do
        {
          if (v30 - v33 >= (int)v34) {
            uint64_t v34 = v34;
          }
          else {
            uint64_t v34 = (v30 - v33);
          }
          if ((int)v34 >= 1)
          {
            int v35 = (unsigned char *)(v32 + v33);
            uint64_t v36 = v34;
            unsigned int v37 = v15;
            do
            {
              char v38 = *v37++;
              *v35++ = v38;
              --v36;
            }
            while (v36);
          }
          v33 += v34;
        }
        while (v33 < v30);
        uint64_t v31 = *(void *)(a1 + 256);
        int v22 = *(_DWORD *)(a1 + 36);
      }
      if (!v31)
      {
        (*(void (**)(void, void))(**(void **)(a1 + 272) + 16))(*(void *)(a1 + 272), *(void *)(a1 + 136));
        int v22 = *(_DWORD *)(a1 + 36);
      }
    }
    uint64_t v39 = *(void *)(a1 + 256);
    if (v39) {
      LODWORD(v39) = *(_DWORD *)(a1 + 20) - 1;
    }
    int v40 = v22 + v39 + 15;
    uint64_t v41 = *(void *)(a1 + 112);
    unint64_t v42 = (int)(v14 * (v40 & 0xFFFFFFF0)) * ((uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 3) + 16;
    unint64_t v43 = *(void *)(a1 + 120) - v41;
    if (v42 <= v43)
    {
      if (v42 < v43) {
        *(void *)(a1 + 120) = v41 + v42;
      }
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)(a1 + 112), v42 - v43);
    }
  }
  int v44 = *(_DWORD *)(a1 + 56);
  uint64_t v45 = *(void *)(a1 + 256);
  int v46 = *(_DWORD *)(a1 + 20);
  int v47 = v46 - 1;
  if (!v45) {
    int v47 = 0;
  }
  *(_DWORD *)(a1 + 20_Block_object_dispose(&a9, 8) = ((v44 + v47 + 15) & 0xFFFFFFF0) * v14;
  int v48 = *(_DWORD *)(a1 + 28);
  int v49 = *(_DWORD *)(a1 + 48);
  int v50 = v48 - v49;
  LODWORD(v51) = v50 & ~(v50 >> 31);
  int v52 = *(_DWORD *)(a1 + 40);
  int v53 = v44 + v49 + ~v48 + v46 - v52;
  int v54 = v53 & ~(v53 >> 31);
  *(_DWORD *)(a1 + 64) = v51;
  *(_DWORD *)(a1 + 6_Block_object_dispose(&a9, 8) = v54;
  if (v48 > v49 || v53 >= 1)
  {
    if (*(_DWORD *)(a1 + 72))
    {
      if (v48 >= v49) {
        int v55 = v49;
      }
      else {
        int v55 = v48;
      }
      int v56 = v55 - v49;
      uint64_t v57 = *(int *)(a1 + 104);
      uint64_t v58 = *(unsigned int *)(a1 + 104);
      uint64_t v59 = *(void *)(a1 + 80);
      if (v50 >= 1)
      {
        uint64_t v60 = 0;
        int v61 = *(_DWORD **)(a1 + 80);
        do
        {
          int v62 = cv::borderInterpolate((cv *)(v60 - v51), v52, *(_DWORD *)(a1 + 72));
          if ((int)v57 >= 1)
          {
            int v63 = (v62 + v56) * v58;
            uint64_t v64 = v58;
            uint64_t v65 = v61;
            do
            {
              *v65++ = v63++;
              --v64;
            }
            while (v64);
          }
          ++v60;
          uint64_t v51 = *(int *)(a1 + 64);
          v61 += v57;
        }
        while (v60 < v51);
        int v54 = *(_DWORD *)(a1 + 68);
      }
      if (v54 >= 1)
      {
        int v66 = 0;
        do
        {
          int v67 = cv::borderInterpolate((cv *)(v66 + v52), v52, *(_DWORD *)(a1 + 72));
          if ((int)v58 >= 1)
          {
            uint64_t v68 = 0;
            do
            {
              *(_DWORD *)(v59 + 4 * (v68 + (int)v58 * (v66 + *(_DWORD *)(a1 + 64)))) = (v67 + v56) * v58 + v68;
              ++v68;
            }
            while (v58 != v68);
          }
          ++v66;
        }
        while (v66 < *(_DWORD *)(a1 + 68));
      }
    }
    else
    {
      if (v45)
      {
        uint64_t v69 = (*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 3;
        if ((int)v69 < 1) {
          goto LABEL_84;
        }
      }
      else
      {
        LODWORD(v69) = 1;
      }
      int v70 = 0;
      do
      {
        if (*(void *)(a1 + 256)) {
          uint64_t v71 = (char *)(((*(void *)(a1 + 112) + 15) & 0xFFFFFFFFFFFFFFF0) + *(int *)(a1 + 208) * (uint64_t)v70);
        }
        else {
          uint64_t v71 = *(char **)(a1 + 136);
        }
        memcpy(v71, v15, *(int *)(a1 + 64) * (uint64_t)v13);
        memcpy(&v71[v13 * (uint64_t)(*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 56) + ~*(_DWORD *)(a1 + 68))], v15, *(_DWORD *)(a1 + 68) * v13);
        ++v70;
      }
      while (v69 != v70);
    }
  }
LABEL_84:
  *(void *)(a1 + 224) = 0;
  int v72 = *(_DWORD *)(a1 + 52);
  int v73 = *(_DWORD *)(a1 + 32);
  int v74 = (v72 - v73) & ~((v72 - v73) >> 31);
  *(_DWORD *)(a1 + 212) = v74;
  *(_DWORD *)(a1 + 216) = v74;
  int v75 = v72 + *(_DWORD *)(a1 + 60) + ~v73 + *(_DWORD *)(a1 + 24);
  if (*(_DWORD *)(a1 + 44) < v75) {
    int v75 = *(_DWORD *)(a1 + 44);
  }
  *(_DWORD *)(a1 + 220) = v75;
  uint64_t v76 = *(void *)(a1 + 288);
  if (v76) {
    (*(void (**)(uint64_t))(*(void *)v76 + 24))(v76);
  }
  uint64_t v77 = *(void *)(a1 + 256);
  if (v77) {
    (*(void (**)(uint64_t))(*(void *)v77 + 24))(v77);
  }
  return *(unsigned int *)(a1 + 212);
}

void sub_225E8D334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned char *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned char *>::__append((void **)a1, a2 - v2);
  }
}

uint64_t cv::FilterEngine::start(_DWORD *a1, uint64_t a2, int *a3, char a4, uint64_t a5)
{
  int v7 = *a3;
  int v8 = a3[1];
  int v10 = a3[2];
  int v9 = a3[3];
  if (*(void *)a3)
  {
LABEL_7:
    if (v7 < 0) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  if (v10 != -1)
  {
    int v8 = 0;
    if (v7 < 0) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  if (v9 != -1)
  {
    int v8 = 0;
    int v10 = -1;
    goto LABEL_7;
  }
  int v8 = 0;
  int v9 = *(_DWORD *)(a2 + 8);
  int v10 = *(_DWORD *)(a2 + 12);
  if (v7 < 0) {
    goto LABEL_13;
  }
LABEL_8:
  if (v8 < 0
    || v10 < 0
    || v9 < 0
    || (signed int v11 = *(_DWORD *)(a2 + 12), v10 + v7 > v11)
    || (signed int v12 = *(_DWORD *)(a2 + 8), v9 + v8 > v12))
  {
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(v21, "srcRoi.x >= 0 && srcRoi.y >= 0 && srcRoi.width >= 0 && srcRoi.height >= 0 && srcRoi.x + srcRoi.width <= src.cols && srcRoi.y + srcRoi.height <= src.rows");
    std::string::basic_string[abi:ne180100]<0>(v20, "start");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v22, 4294967081, v21, v20, __p, 317);
    cv::error((cv *)v22, v13);
  }
  int v14 = 0;
  int v15 = 0;
  v22[0] = 0;
  v21[0] = (void *)__PAIR64__(v12, v11);
  if ((a4 & 1) == 0)
  {
    cv::Mat::locateROI(a2, v21, v22);
    signed int v11 = (signed int)v21[0];
    signed int v12 = HIDWORD(v21[0]);
    int v15 = v22[0];
    int v14 = HIDWORD(v22[0]);
  }
  v18[0] = v11;
  v18[1] = v12;
  v17[0] = v15 + v7;
  v17[1] = v14 + v8;
  v17[2] = v10;
  uint64_t v17[3] = v9;
  (*(void (**)(_DWORD *, _DWORD *, _DWORD *, uint64_t))(*(void *)a1 + 16))(a1, v18, v17, a5);
  return (a1[53] - HIDWORD(v22[0]));
}

void sub_225E8D598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::FilterEngine::proceed(cv::FilterEngine *this, const unsigned __int8 *a2, int a3, int a4, unsigned __int8 *a5, unsigned int a6)
{
  if (*((int *)this + 10) < 1 || *((int *)this + 11) <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v95, "wholeSize.width > 0 && wholeSize.height > 0");
    std::string::basic_string[abi:ne180100]<0>(v94, "proceed");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    int v7 = (cv *)cv::Exception::Exception(v96, 4294967081, v95, v94, __p, 342);
    cv::error(v7, v8);
  }
  int v9 = *((_DWORD *)this + 16);
  int v10 = *((_DWORD *)this + 17);
  if (*((_DWORD *)this + 7) >= *((_DWORD *)this + 12)) {
    int v11 = *((_DWORD *)this + 12);
  }
  else {
    int v11 = *((_DWORD *)this + 7);
  }
  BOOL v92 = (v9 > 0 || v10 >= 1) && *((_DWORD *)this + 18) != 0;
  uint64_t v89 = (int *)*((void *)this + 10);
  uint64_t v90 = *((void *)this + 29);
  unsigned int v84 = *((_DWORD *)this + 14);
  int v12 = *((_DWORD *)this + 26);
  int v71 = *((_DWORD *)this + 6);
  int v72 = *((_DWORD *)this + 8);
  uint64_t v13 = *((void *)this + 32);
  if (*((_DWORD *)this + 55) - (*((_DWORD *)this + 53) + *((_DWORD *)this + 56)) >= a4) {
    int v14 = a4;
  }
  else {
    int v14 = *((_DWORD *)this + 55) - (*((_DWORD *)this + 53) + *((_DWORD *)this + 56));
  }
  if (!a2 || !a5 || v14 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v95, "src && dst && count > 0");
    std::string::basic_string[abi:ne180100]<0>(v94, "proceed");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    int v15 = (cv *)cv::Exception::Exception(v96, 4294967081, v95, v94, __p, 361);
    cv::error(v15, v16);
  }
  unsigned int v81 = 0;
  int v17 = (((*((_DWORD *)this + 2) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)this + 2) & 7))) & 3);
  unint64_t v18 = (unint64_t)(*((void *)this + 30) - v90) >> 3;
  unsigned int v70 = ((*((_DWORD *)this + 4) >> 3) & 0x1FF) + 1;
  int v19 = &a2[-(v11 * v17)];
  uint64_t v20 = (v9 * v17);
  uint64_t v91 = (int)v20;
  int v21 = *((_DWORD *)this + 5) + v84 + ~v10;
  size_t v22 = (v21 - v9) * v17;
  int v87 = 4 * v12;
  int v88 = v17;
  uint64_t v86 = (v10 * v17);
  int v23 = v21 * v17;
  uint64_t v24 = (v9 * v12);
  uint64_t v85 = (v10 * v12);
  uint64_t v25 = a3;
  int v75 = v71 - 1;
  uint64_t v80 = v23;
  uint64_t v82 = v24;
  uint64_t v83 = v20;
  uint64_t v78 = v21 * v12;
  int64_t v79 = &v89[(int)v20];
  uint64_t v77 = &v89[(int)v24];
  uint64_t v26 = a6;
  unint64_t v27 = a5;
  int v28 = v14;
  while (2)
  {
    uint64_t v76 = v27;
    int v29 = *((_DWORD *)this + 13);
    int v30 = v18 - (v72 + *((_DWORD *)this + 53) + *((_DWORD *)this + 56));
    BOOL v31 = __OFADD__(v30, v29);
    int v32 = v30 + v29;
    if ((v32 < 0) ^ v31 | (v32 == 0)) {
      int v32 = v18 - v71 + 1;
    }
    if (v28 >= v32) {
      int v33 = v32;
    }
    else {
      int v33 = v28;
    }
    int v73 = v33;
    int v74 = v28;
    if (v33 >= 1)
    {
      do
      {
        int v34 = *((_DWORD *)this + 53);
        int v35 = *((_DWORD *)this + 56);
        unint64_t v36 = ((*((void *)this + 14) + 15) & 0xFFFFFFFFFFFFFFF0)
            + *((int *)this + 52) * (uint64_t)((v34 - *((_DWORD *)this + 54) + v35) % (int)v18);
        unsigned int v37 = (_DWORD *)v36;
        if (!v13) {
          unsigned int v37 = (_DWORD *)*((void *)this + 17);
        }
        *((_DWORD *)this + 56) = v35 + 1;
        if (v35 >= (int)v18)
        {
          *((_DWORD *)this + 56) = v35;
          *((_DWORD *)this + 53) = v34 + 1;
        }
        memcpy((char *)v37 + v91, v19, v22);
        if (v92)
        {
          if (v87 == v88)
          {
            uint64_t v38 = v82;
            uint64_t v39 = v89;
            int v40 = v37;
            if ((int)v82 >= 1)
            {
              do
              {
                uint64_t v41 = *v39++;
                *v40++ = *(_DWORD *)&v19[4 * v41];
                --v38;
              }
              while (v38);
            }
            if ((int)v85 >= 1)
            {
              unint64_t v42 = v77;
              unint64_t v43 = &v37[v78];
              uint64_t v44 = v85;
              do
              {
                uint64_t v45 = *v42++;
                *v43++ = *(_DWORD *)&v19[4 * v45];
                --v44;
              }
              while (v44);
            }
          }
          else
          {
            uint64_t v46 = v83;
            int v47 = v89;
            int v48 = v37;
            if ((int)v83 >= 1)
            {
              do
              {
                uint64_t v49 = *v47++;
                *v48++ = v19[v49];
                --v46;
              }
              while (v46);
            }
            if ((int)v86 >= 1)
            {
              int v50 = v79;
              uint64_t v51 = (char *)v37 + v80;
              uint64_t v52 = v86;
              do
              {
                uint64_t v53 = *v50++;
                *v51++ = v19[v53];
                --v52;
              }
              while (v52);
            }
          }
        }
        if (!v13) {
          (*(void (**)(void, _DWORD *, unint64_t, void, void))(**((void **)this + 34) + 16))(*((void *)this + 34), v37, v36, v84, ((*((_DWORD *)this + 2) >> 3) & 0x1FFu) + 1);
        }
        v19 += v25;
      }
      while (v33-- > 1);
    }
    uint64_t result = v81;
    int v56 = v75 + *((_DWORD *)this + 15) - (v81 + *((_DWORD *)this + 57));
    if (v56 >= (int)v18) {
      uint64_t v57 = v18;
    }
    else {
      uint64_t v57 = v56;
    }
    if ((int)v57 < 1)
    {
      LODWORD(v57) = 0;
      goto LABEL_63;
    }
    uint64_t v58 = 0;
    while (1)
    {
      int v59 = cv::borderInterpolate((cv *)(v81 - v72 + v58 + *((_DWORD *)this + 13) + *((_DWORD *)this + 57)), *((_DWORD *)this + 11), *((_DWORD *)this + 19));
      if (v59 < 0)
      {
        unint64_t v63 = (*((void *)this + 23) + 15) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_58;
      }
      int v60 = *((_DWORD *)this + 53);
      if (v59 < v60)
      {
        std::string::basic_string[abi:ne180100]<0>(v95, "srcY >= startY");
        std::string::basic_string[abi:ne180100]<0>(v94, "proceed");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
        int v61 = (cv *)cv::Exception::Exception(v96, 4294967081, v95, v94, __p, 417);
        cv::error(v61, v62);
      }
      if (v59 >= *((_DWORD *)this + 56) + v60) {
        break;
      }
      unint64_t v63 = ((*((void *)this + 14) + 15) & 0xFFFFFFFFFFFFFFF0)
          + *((int *)this + 52) * (uint64_t)((v59 - *((_DWORD *)this + 54)) % (int)v18);
LABEL_58:
      *(void *)(v90 + 8 * v58++) = v63;
      if (v57 == v58) {
        goto LABEL_62;
      }
    }
    LODWORD(v57) = v58;
LABEL_62:
    uint64_t v26 = a6;
    uint64_t result = v81;
LABEL_63:
    if ((int)v57 >= v71)
    {
      uint64_t v64 = (v57 - v75);
      uint64_t v65 = *((void *)this + 32);
      if (v65) {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, void, void))(*(void *)v65 + 16))(v65, v90, v76, v26, v64, *((unsigned int *)this + 14), v70);
      }
      else {
        (*(void (**)(void, uint64_t, unsigned __int8 *, uint64_t, uint64_t, void))(**((void **)this + 36)
      }
                                                                                             + 16))(*((void *)this + 36), v90, v76, v26, v64, *((_DWORD *)this + 14) * v70);
      int v28 = v74 - v73;
      unint64_t v27 = &v76[(int)v64 * (int)v26];
      v81 += v64;
      continue;
    }
    break;
  }
  int v66 = *((_DWORD *)this + 57) + result;
  *((_DWORD *)this + 57) = v66;
  if (v66 > *((_DWORD *)this + 15))
  {
    std::string::basic_string[abi:ne180100]<0>(v95, "dstY <= roi.height");
    std::string::basic_string[abi:ne180100]<0>(v94, "proceed");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    int v67 = (cv *)cv::Exception::Exception(v96, 4294967081, v95, v94, __p, 434);
    cv::error(v67, v68);
  }
  return result;
}

void sub_225E8DDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  cv::Exception::~Exception((cv::Exception *)(v47 - 208));
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  _Unwind_Resume(a1);
}

_DWORD *cv::FilterEngine::apply(_DWORD *result, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6)
{
  int v7 = result;
  if ((*(_DWORD *)a2 & 0xFFF) != result[2] || (*a3 & 0xFFF) != result[3])
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "src.type() == srcType && dst.type() == dstType");
    std::string::basic_string[abi:ne180100]<0>(v23, "apply");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v25, 4294967081, v24, v23, __p, 442);
    cv::error((cv *)v25, v8);
  }
  int v9 = a4[1];
  LODWORD(v19) = *a4;
  HIDWORD(v19) = v9;
  int v11 = a4[2];
  int v10 = a4[3];
  int v20 = v11;
  int v21 = v10;
  if (!v19 && !v9 && v11 == -1 && v10 == -1)
  {
    int v10 = *(_DWORD *)(a2 + 8);
    int v11 = *(_DWORD *)(a2 + 12);
    uint64_t v19 = 0;
    int v20 = v11;
    int v21 = v10;
  }
  if (v10 * v11)
  {
    if ((*a5 & 0x80000000) != 0 || (int v12 = a5[1], v12 < 0) || *a5 + v11 > a3[3] || v12 + v10 > a3[2])
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "dstOfs.x >= 0 && dstOfs.y >= 0 && dstOfs.x + srcRoi.width <= dst.cols && dstOfs.y + srcRoi.height <= dst.rows");
      std::string::basic_string[abi:ne180100]<0>(v23, "apply");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
      cv::Exception::Exception(v25, 4294967081, v24, v23, __p, 453);
      cv::error((cv *)v25, v13);
    }
    int v14 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)result + 24))(result, a2, &v19, a6, 0xFFFFFFFFLL);
    int v15 = *(_DWORD *)(a2 + 4);
    BOOL v16 = __OFSUB__(v15, 1);
    int v17 = v15 - 1;
    if (v17 < 0 != v16) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = *(void *)(*(void *)(a2 + 72) + 8 * v17);
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v7 + 32))(v7, *(void *)(a2 + 16) + *(void *)(a2 + 80) * v14 + v18 * (int)v19);
  }
  return result;
}

void sub_225E8E114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::getKernelType(void (***a1)(uint64_t *__return_ptr), _DWORD *a2)
{
  (**a1)(&v28);
  if ((v28 & 0xFF8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "_kernel.channels() == 1");
    std::string::basic_string[abi:ne180100]<0>(v23, "getKernelType");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v24, 4294967081, v21, v23, __p, 472);
    cv::error((cv *)v24, v3);
  }
  int v4 = v29;
  int v5 = v30;
  uint64_t v25 = (char *)v24 + 8;
  uint64_t v26 = (cv *)v27;
  v27[0] = 0;
  v27[1] = 0;
  LODWORD(v24[0]) = 1124007936;
  memset((char *)v24 + 4, 0, 48);
  v24[3] = 0u;
  cv::_OutputArray::_OutputArray((uint64_t)v21, (cv::Mat *)v24);
  cv::Mat::convertTo((cv::Mat *)&v28, (const cv::_OutputArray *)v21, 6, 1.0, 0.0);
  uint64_t v7 = (v5 * v4);
  if (v29 == 1 || v30 == 1)
  {
    unsigned int v8 = 12;
    if (((2 * *a2) | 1) == v30)
    {
      if (((2 * a2[1]) | 1) == v29) {
        unsigned int v8 = 15;
      }
      else {
        unsigned int v8 = 12;
      }
    }
  }
  else
  {
    unsigned int v8 = 12;
  }
  if ((int)v7 < 1)
  {
    double v9 = 0.0;
  }
  else
  {
    double v9 = 0.0;
    int v10 = *(double **)&v24[1];
    do
    {
      double v11 = *v10++;
      double v12 = v11;
      double v9 = v9 + v11;
      double v13 = *(double *)(*(void *)&v24[1] + 8 * (int)--v7);
      unsigned int v14 = v8 & 0xFFFFFFFE;
      if (v11 == v13) {
        unsigned int v14 = v8;
      }
      if (v12 != -v13) {
        v14 &= ~2u;
      }
      uint64_t v15 = (uint64_t)rint(v12);
      if (v12 < 0.0) {
        v14 &= ~4u;
      }
      if (v12 == (double)(int)v15) {
        unsigned int v8 = v14;
      }
      else {
        unsigned int v8 = v14 & 0xFFFFFFF7;
      }
    }
    while (v7);
  }
  if (*((void *)&v24[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v24[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v24, v6);
  }
  *(void *)&v24[1] = 0;
  memset(&v24[2], 0, 24);
  if (SDWORD1(v24[0]) >= 1)
  {
    uint64_t v16 = 0;
    int v17 = v25;
    do
      *(_DWORD *)&v17[4 * v16++] = 0;
    while (v16 < SDWORD1(v24[0]));
  }
  *((void *)&v24[1] + 1) = 0;
  if (v26 != (cv *)v27) {
    cv::fastFree((void **)v26, v6);
  }
  if (v32 && atomic_fetch_add(v32, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v28, v6);
  }
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (SHIDWORD(v28) >= 1)
  {
    uint64_t v18 = 0;
    uint64_t v19 = v36;
    do
      *(_DWORD *)(v19 + 4 * v18++) = 0;
    while (v18 < SHIDWORD(v28));
  }
  int v32 = 0;
  if (v37 != (void **)&v38) {
    cv::fastFree(v37, v6);
  }
  if (fabs(v9 + -1.0) <= (fabs(v9) + 1.0) * 0.00000011920929) {
    return v8;
  }
  else {
    return v8 & 0xFFFFFFFB;
  }
}

void sub_225E8E4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  cv::Exception::~Exception((cv::Exception *)&a29);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  cv::Mat::~Mat((cv::Mat *)(v29 - 160), v31);
  _Unwind_Resume(a1);
}

void cv::getLinearRowFilter(cv *this, uint64_t a2, void (***a3)(uint64_t *__return_ptr, void, uint64_t), const cv::_InputArray *a4, char a5)
{
  (**a3)(&v18, a3, 0xFFFFFFFFLL);
  unsigned int v8 = this & 7;
  unsigned int v9 = a2 & 7;
  if (v8 <= 4) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = this & 7;
  }
  BOOL v11 = v9 >= v10 && (((unsigned __int16)a2 ^ (unsigned __int16)this) & 0xFF8) == 0;
  if (!v11 || (v18 & 0xFFF) != v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "cn == CV_MAT_CN(bufType) && ddepth >= std::max(sdepth, CV_32S) && kernel.type() == ddepth");
    std::string::basic_string[abi:ne180100]<0>(v15, "getLinearRowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v17, 4294967081, v16, v15, __p, 2834);
    cv::error((cv *)v17, v12);
  }
  if ((a5 & 3) != 0 && v20 + v19 <= 6)
  {
    if ((this & 7) == 0 && v9 == 4) {
      operator new();
    }
    if (v8 == 5 && v9 == 5) {
      operator new();
    }
  }
  if ((this & 7) == 0 && v9 == 4) {
    operator new();
  }
  if ((this & 7) == 0 && v9 == 5) {
    operator new();
  }
  if ((this & 7) == 0 && v9 == 6) {
    operator new();
  }
  if (v8 == 2 && v9 == 5) {
    operator new();
  }
  if (v8 == 2 && v9 == 6) {
    operator new();
  }
  if (v8 == 3 && v9 == 5) {
    operator new();
  }
  if (v8 == 3 && v9 == 6) {
    operator new();
  }
  if (v8 == 5 && v9 == 5) {
    operator new();
  }
  if (v8 == 5 && v9 == 6) {
    operator new();
  }
  if (v8 == 6 && v9 == 6) {
    operator new();
  }
  cv::format(v16, this, a2);
  std::string::basic_string[abi:ne180100]<0>(v15, "getLinearRowFilter");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
  cv::Exception::Exception(v17, 4294967083, v16, v15, __p, 2873);
  cv::error((cv *)v17, v13);
}

void sub_225E8EB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  cv::Exception::~Exception((cv::Exception *)&a29);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  cv::Mat::~Mat((cv::Mat *)(v29 - 160), v31);
  _Unwind_Resume(a1);
}

void cv::getLinearColumnFilter(cv *this, uint64_t a2, void (***a3)(uint64_t *__return_ptr, void, uint64_t), const cv::_InputArray *a4, char a5, int a6, double a7)
{
  (**a3)(&v20, a3, 0xFFFFFFFFLL);
  unsigned int v11 = this & 7;
  unsigned int v12 = a2 & 7;
  if (v12 <= 4) {
    unsigned int v13 = 4;
  }
  else {
    unsigned int v13 = a2 & 7;
  }
  if ((((unsigned __int16)a2 ^ (unsigned __int16)this) & 0xFF8) != 0 || v11 < v13 || (v20 & 0xFFF) != v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "cn == CV_MAT_CN(bufType) && sdepth >= std::max(ddepth, CV_32S) && kernel.type() == sdepth");
    std::string::basic_string[abi:ne180100]<0>(v17, "getLinearColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(&v19, 4294967081, v18, v17, __p, 2889);
    cv::error((cv *)&v19, v14);
  }
  if ((a5 & 3) != 0)
  {
    if (v22 + v21 == 4)
    {
      if (v11 == 4 && (a2 & 7) == 0) {
        operator new();
      }
      if (v11 == 4 && v12 == 3 && !a6) {
        operator new();
      }
      if (v11 == 5 && v12 == 5) {
        operator new();
      }
    }
    if (v11 == 4 && (a2 & 7) == 0) {
      operator new();
    }
    if (v11 == 5 && (a2 & 7) == 0) {
      operator new();
    }
    if (v11 == 6 && (a2 & 7) == 0) {
      operator new();
    }
    if (v11 == 5 && v12 == 2) {
      operator new();
    }
    if (v11 == 6 && v12 == 2) {
      operator new();
    }
    if (v11 == 4 && v12 == 3) {
      operator new();
    }
    if (v11 == 5 && v12 == 3) {
      operator new();
    }
    if (v11 == 6 && v12 == 3) {
      operator new();
    }
    if (v11 == 5 && v12 == 5) {
      operator new();
    }
    if (v11 == 6 && v12 == 6) {
      operator new();
    }
  }
  else
  {
    if (v11 == 4 && (a2 & 7) == 0) {
      operator new();
    }
    if (v11 == 5 && (a2 & 7) == 0) {
      operator new();
    }
    if (v11 == 6 && (a2 & 7) == 0) {
      operator new();
    }
    if (v11 == 5 && v12 == 2) {
      operator new();
    }
    if (v11 == 6 && v12 == 2) {
      operator new();
    }
    if (v11 == 5 && v12 == 3) {
      operator new();
    }
    if (v11 == 6 && v12 == 3) {
      operator new();
    }
    if (v11 == 5 && v12 == 5) {
      operator new();
    }
    if (v11 == 6 && v12 == 6) {
      operator new();
    }
  }
  cv::format(v18, this, a2);
  std::string::basic_string[abi:ne180100]<0>(v17, "getLinearColumnFilter");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
  cv::Exception::Exception(&v19, 4294967083, v18, v17, __p, 2970);
  cv::error((cv *)&v19, v15);
}

void sub_225E8F64C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  cv::Mat::~Mat((cv::Mat *)(v29 - 192), a2);
  _Unwind_Resume(a1);
}

void cv::createSeparableLinearFilter(unsigned int a1, unsigned int a2, void (***a3)(uint64_t *__return_ptr, void, uint64_t), void (***a4)(uint64_t *__return_ptr, void, uint64_t), int *a5)
{
  (**a3)(&v50, a3, 0xFFFFFFFFLL);
  (**a4)(&v44, a4, 0xFFFFFFFFLL);
  int v9 = (a1 >> 3) & 0x1FF;
  if (v9 != ((a2 >> 3) & 0x1FF))
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "cn == CV_MAT_CN(_dstType)");
    std::string::basic_string[abi:ne180100]<0>(&v32, "createSeparableLinearFilter");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v40, 4294967081, v33, &v32, &__p, 2988);
    cv::error((cv *)v40, v10);
  }
  if (*a5 < 0)
  {
    int v11 = v51 + HIDWORD(v51);
    if ((int)v51 + HIDWORD(v51) - 1 >= 0) {
      int v11 = v51 + HIDWORD(v51) - 1;
    }
    *a5 = v11 >> 1;
  }
  if (a5[1] < 0) {
    a5[1] = ((int)v45 + HIDWORD(v45) - 1) / 2;
  }
  cv::_InputArray::_InputArray((uint64_t)v40, (const cv::Mat *)&v50);
  int v12 = *a5;
  if (v51 == 1) {
    int v13 = *a5;
  }
  else {
    int v13 = 0;
  }
  if (v51 == 1) {
    int v12 = 0;
  }
  v38[0] = v13;
  v38[1] = v12;
  int KernelType = cv::getKernelType((void (***)(uint64_t *__return_ptr))v40, v38);
  cv::_InputArray::_InputArray((uint64_t)v40, (const cv::Mat *)&v44);
  unsigned int v15 = a5[1];
  if (v45 == 1) {
    unsigned int v16 = a5[1];
  }
  else {
    unsigned int v16 = 0;
  }
  if (v45 == 1) {
    unsigned int v15 = 0;
  }
  v37[0] = v16;
  v37[1] = v15;
  int v17 = cv::getKernelType((void (***)(uint64_t *__return_ptr))v40, v37);
  unsigned int v19 = a2 & 7;
  uint64_t v41 = &v40[8];
  unint64_t v42 = (cv *)v43;
  v43[0] = 0;
  v43[1] = 0;
  *(_DWORD *)int v40 = 1124007936;
  memset(&v40[4], 0, 60);
  uint64_t v34 = &v33[8];
  uint64_t v35 = (cv *)v36;
  v36[0] = 0;
  v36[1] = 0;
  *(_DWORD *)uint64_t v33 = 1124007936;
  memset(&v33[4], 0, 60);
  if ((a1 & 7) <= v19) {
    unsigned int v20 = a2 & 7;
  }
  else {
    unsigned int v20 = a1 & 7;
  }
  if (v20 <= 5) {
    int v21 = 5;
  }
  else {
    int v21 = v20;
  }
  if ((a1 & 7) == 0
    && ((a2 & 7) == 0 && KernelType == 5 && v17 == 5
     || (KernelType & 3) != 0 && (v17 & 3) != 0 && v19 == 3 && (KernelType & v17 & 8) != 0))
  {
    BOOL v24 = v19 == 0;
    cv::_OutputArray::_OutputArray((uint64_t)&v32, (cv::Mat *)v40);
    double v25 = (double)(1 << (8 * v24));
    cv::Mat::convertTo((cv::Mat *)&v50, (const cv::_OutputArray *)&v32, 4, v25, 0.0);
    cv::_OutputArray::_OutputArray((uint64_t)&v32, (cv::Mat *)v33);
    cv::Mat::convertTo((cv::Mat *)&v44, (const cv::_OutputArray *)&v32, 4, v25, 0.0);
    int v21 = 4;
    goto LABEL_68;
  }
  if ((v50 & 0xFFF) != v21)
  {
    cv::_OutputArray::_OutputArray((uint64_t)&v32, (cv::Mat *)v40);
    cv::Mat::convertTo((cv::Mat *)&v50, (const cv::_OutputArray *)&v32, v21, 1.0, 0.0);
    goto LABEL_51;
  }
  if (*((void *)&v52 + 1))
  {
    atomic_fetch_add(*((atomic_uint *volatile *)&v52 + 1), 1u);
    if (*(void *)&v40[24])
    {
      if (atomic_fetch_add(*(atomic_uint *volatile *)&v40[24], 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v40, v18);
      }
    }
  }
  *(void *)&v40[16] = 0;
  memset(&v40[32], 0, 24);
  if (*(uint64_t *)v40 <= 0)
  {
    *(void *)&v40[24] = 0;
    *(_DWORD *)int v40 = v50;
  }
  else
  {
    uint64_t v22 = 0;
    int v23 = v41;
    do
      *(_DWORD *)&v23[4 * v22++] = 0;
    while (v22 < *(int *)&v40[4]);
    *(void *)&v40[24] = 0;
    *(_DWORD *)int v40 = v50;
    if (*(int *)&v40[4] > 2) {
      goto LABEL_49;
    }
  }
  if (SHIDWORD(v50) <= 2)
  {
    *(_DWORD *)&v40[4] = HIDWORD(v50);
    *(void *)&v40[8] = v51;
    uint64_t v26 = v55;
    unint64_t v27 = v42;
    *(void *)unint64_t v42 = *v55;
    *((void *)v27 + 1) = v26[1];
LABEL_50:
    *(_OWORD *)&v40[16] = v52;
    *(_OWORD *)&v40[32] = v53;
    *(_OWORD *)&v40[48] = v54;
LABEL_51:
    if ((v44 & 0xFFF) != v21)
    {
      cv::_OutputArray::_OutputArray((uint64_t)&v32, (cv::Mat *)v33);
      cv::Mat::convertTo((cv::Mat *)&v44, (const cv::_OutputArray *)&v32, v21, 1.0, 0.0);
      goto LABEL_68;
    }
    if (*((void *)&v46 + 1)) {
      atomic_fetch_add(*((atomic_uint *volatile *)&v46 + 1), 1u);
    }
    if (*(void *)&v33[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v33[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v33, v18);
    }
    *(void *)&v33[16] = 0;
    memset(&v33[32], 0, 24);
    if (*(uint64_t *)v33 <= 0)
    {
      *(void *)&v33[24] = 0;
      *(_DWORD *)uint64_t v33 = v44;
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = v34;
      do
        *(_DWORD *)&v29[4 * v28++] = 0;
      while (v28 < *(int *)&v33[4]);
      *(void *)&v33[24] = 0;
      *(_DWORD *)uint64_t v33 = v44;
      if (*(int *)&v33[4] > 2) {
        goto LABEL_66;
      }
    }
    if (SHIDWORD(v44) <= 2)
    {
      *(_DWORD *)&v33[4] = HIDWORD(v44);
      *(void *)&v33[8] = v45;
      int v30 = v49;
      uint64_t v31 = v35;
      *(void *)uint64_t v35 = *(void *)v49;
      *((void *)v31 + 1) = *((void *)v30 + 1);
LABEL_67:
      *(_OWORD *)&v33[32] = v47;
      *(_OWORD *)&v33[16] = v46;
      *(_OWORD *)&v33[48] = v48;
LABEL_68:
      cv::_InputArray::_InputArray((uint64_t)&v32, (const cv::Mat *)v40);
      cv::getLinearRowFilter((cv *)(a1 & 0xFFF), v21 | (8 * v9), (void (***)(uint64_t *__return_ptr, void, uint64_t))&v32, (const cv::_InputArray *)*a5, KernelType);
    }
LABEL_66:
    cv::Mat::copySize((cv::Mat *)v33, (const cv::Mat *)&v44);
    goto LABEL_67;
  }
LABEL_49:
  cv::Mat::copySize((cv::Mat *)v40, (const cv::Mat *)&v50);
  goto LABEL_50;
}

void sub_225E9010C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  cv::Mat::~Mat((cv::Mat *)&a23, a2);
  cv::Mat::~Mat((cv::Mat *)&a46, v63);
  cv::Mat::~Mat((cv::Mat *)&a61, v64);
  cv::Mat::~Mat((cv::Mat *)(v61 - 200), v65);
  _Unwind_Resume(a1);
}

void cv::preprocess2DKernel(cv::Mat *a1, void *a2, unint64_t *a3)
{
  cv::_InputArray::_InputArray((uint64_t)v33, a1);
  unsigned int v7 = cv::countNonZero((cv *)v33, v6);
  unsigned int v8 = *(_DWORD *)a1 & 0xFFF;
  if (v7 <= 1) {
    int v9 = 1;
  }
  else {
    int v9 = v7;
  }
  if (v8 > 6 || ((1 << *(unsigned char *)a1) & 0x71) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "ktype == CV_8U || ktype == CV_32S || ktype == CV_32F || ktype == CV_64F");
    std::string::basic_string[abi:ne180100]<0>(v31, "preprocess2DKernel");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v33, 4294967081, v32, v31, __p, 3055);
    cv::error((cv *)v33, v29);
  }
  std::vector<cv::Point_<int>>::resize((uint64_t)a2, v9);
  unint64_t v11 = (int)(((v8 >> 3) + 1) << ((0xFA50u >> (2 * (v8 & 7))) & 3)) * (uint64_t)v9;
  unint64_t v12 = *a3;
  unint64_t v13 = a3[1] - *a3;
  if (v11 <= v13)
  {
    if (v11 < v13) {
      a3[1] = v12 + v11;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a3, v11 - v13);
    unint64_t v12 = *a3;
  }
  int v14 = *((_DWORD *)a1 + 2);
  if (v14 < 1) {
    return;
  }
  uint64_t v15 = 0;
  int v16 = 0;
  LODWORD(v17) = *((_DWORD *)a1 + 3);
  do
  {
    if ((int)v17 < 1) {
      goto LABEL_30;
    }
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = *((void *)a1 + 2) + *((void *)a1 + 10) * v15;
    do
    {
      if (v8 == 5)
      {
        float v25 = *(float *)(v20 + v18);
        if (v25 == 0.0) {
          goto LABEL_28;
        }
        uint64_t v26 = (_DWORD *)(*a2 + 8 * v16);
        *uint64_t v26 = v19;
        v26[1] = v15;
        *(float *)(v12 + 4 * v16) = v25;
      }
      else if (v8 == 4)
      {
        int v23 = *(_DWORD *)(v20 + v18);
        if (!v23) {
          goto LABEL_28;
        }
        BOOL v24 = (_DWORD *)(*a2 + 8 * v16);
        *BOOL v24 = v19;
        v24[1] = v15;
        *(_DWORD *)(v12 + 4 * v16) = v23;
      }
      else if (v8)
      {
        double v27 = *(double *)(v20 + 8 * v19);
        if (v27 == 0.0) {
          goto LABEL_28;
        }
        uint64_t v28 = (_DWORD *)(*a2 + 8 * v16);
        _DWORD *v28 = v19;
        v28[1] = v15;
        *(double *)(v12 + 8 * v16) = v27;
      }
      else
      {
        char v21 = *(unsigned char *)(v20 + v19);
        if (!v21) {
          goto LABEL_28;
        }
        uint64_t v22 = (_DWORD *)(*a2 + 8 * v16);
        *uint64_t v22 = v19;
        v22[1] = v15;
        *(unsigned char *)(v12 + v16) = v21;
      }
      ++v16;
LABEL_28:
      ++v19;
      uint64_t v17 = *((int *)a1 + 3);
      v18 += 4;
    }
    while (v19 < v17);
    int v14 = *((_DWORD *)a1 + 2);
LABEL_30:
    ++v15;
  }
  while (v15 < v14);
}

void sub_225E90470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void std::vector<cv::Point_<int>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<cv::Point_<int>>::__append((char **)a1, a2 - v2);
  }
}

void cv::getLinearFilter(uint64_t a1, uint64_t a2, void (***a3)(void *__return_ptr, void, uint64_t), uint64_t *a4, char a5)
{
  (**a3)(v32, a3, 0xFFFFFFFFLL);
  unsigned int v9 = a1 & 7;
  unsigned int v10 = a2 & 7;
  if (v10 < v9 || (((unsigned __int16)a2 ^ (unsigned __int16)a1) & 0xFF8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "cn == CV_MAT_CN(dstType) && ddepth >= sdepth");
    std::string::basic_string[abi:ne180100]<0>(v30, "getLinearFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v31, 4294967081, v23, v30, __p, 3185);
    cv::error((cv *)v31, v11);
  }
  uint64_t v12 = *a4;
  int32x2_t v27 = vrev64_s32(*v36);
  uint64_t v28 = v12;
  cv::normalizeAnchor((int *)&v28, (int *)&v27, v31);
  *a4 = *(void *)v31;
  if (v10 == 6 || v9 == 6) {
    int v15 = 6;
  }
  else {
    int v15 = 5;
  }
  BOOL v24 = &v23[8];
  float v25 = (cv *)v26;
  v26[0] = 0;
  v26[1] = 0;
  *(_DWORD *)int v23 = 1124007936;
  memset(&v23[4], 0, 60);
  if ((v32[0] & 0xFFF) != v15)
  {
    cv::_OutputArray::_OutputArray((uint64_t)v31, (cv::Mat *)v23);
    double v18 = 1.0;
    if ((v32[0] & 0xFFF) == 4) {
      double v18 = 1.0 / (double)(1 << a5);
    }
    cv::Mat::convertTo((cv::Mat *)v32, (const cv::_OutputArray *)v31, v15, v18, 0.0);
LABEL_28:
    if (((a2 | a1) & 7) != 0)
    {
      if ((a1 & 7) == 0 && v10 == 2) {
        operator new();
      }
      if ((a1 & 7) == 0 && v10 == 3) {
        operator new();
      }
      if ((a1 & 7) == 0 && v10 == 5) {
        operator new();
      }
      if ((a1 & 7) == 0 && v10 == 6) {
        operator new();
      }
      if (v9 == 2 && v10 == 2) {
        operator new();
      }
      if (v9 == 2 && v10 == 5) {
        operator new();
      }
      if (v9 == 2 && v10 == 6) {
        operator new();
      }
      if (v9 == 3 && v10 == 3) {
        operator new();
      }
      if (v9 == 3 && v10 == 5) {
        operator new();
      }
      if (v9 == 3 && v10 == 6) {
        operator new();
      }
      if (v9 == 5 && v10 == 5) {
        operator new();
      }
      if (v9 == 6 && v10 == 6) {
        operator new();
      }
      cv::format(v30, a1, a2);
      std::string::basic_string[abi:ne180100]<0>(__p, "getLinearFilter");
      std::string::basic_string[abi:ne180100]<0>(v22, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
      cv::Exception::Exception(v31, 4294967083, v30, __p, v22, 3250);
      cv::error((cv *)v31, v21);
    }
    operator new();
  }
  if (*((void *)&v33 + 1))
  {
    atomic_fetch_add(*((atomic_uint *volatile *)&v33 + 1), 1u);
    if (*(void *)&v23[24])
    {
      if (atomic_fetch_add(*(atomic_uint *volatile *)&v23[24], 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v23, v13);
      }
    }
  }
  *(void *)&v23[16] = 0;
  memset(&v23[32], 0, 24);
  if (*(uint64_t *)v23 <= 0)
  {
    *(void *)&v23[24] = 0;
    *(_DWORD *)int v23 = v32[0];
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = v24;
    do
      *(_DWORD *)&v17[4 * v16++] = 0;
    while (v16 < *(int *)&v23[4]);
    *(void *)&v23[24] = 0;
    *(_DWORD *)int v23 = v32[0];
    if (*(int *)&v23[4] > 2) {
      goto LABEL_26;
    }
  }
  if (SHIDWORD(v32[0]) <= 2)
  {
    *(_DWORD *)&v23[4] = HIDWORD(v32[0]);
    *(void *)&v23[8] = v32[1];
    uint64_t v19 = v37;
    uint64_t v20 = v25;
    *(void *)float v25 = *v37;
    *((void *)v20 + 1) = v19[1];
LABEL_27:
    *(_OWORD *)&v23[16] = v33;
    *(_OWORD *)&v23[32] = v34;
    *(_OWORD *)&v23[48] = v35;
    goto LABEL_28;
  }
LABEL_26:
  cv::Mat::copySize((cv::Mat *)v23, (const cv::Mat *)v32);
  goto LABEL_27;
}

void sub_225E90DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60)
{
  cv::Exception::~Exception((cv::Exception *)&a60);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  cv::Mat::~Mat((cv::Mat *)&a31, v62);
  cv::Mat::~Mat((cv::Mat *)(v60 - 192), v63);
  _Unwind_Resume(a1);
}

int *cv::normalizeAnchor@<X0>(int *result@<X0>, int *a2@<X1>, int *a3@<X8>)
{
  int v4 = *result;
  if (*result == -1)
  {
    int v4 = *a2 / 2;
    _DWORD *result = v4;
  }
  int v5 = result[1];
  if (v5 == -1)
  {
    int v5 = a2[1] / 2;
    result[1] = v5;
    if (v4 < 0) {
      goto LABEL_10;
    }
  }
  else if (v4 < 0)
  {
    goto LABEL_10;
  }
  if (v4 >= *a2 || v5 < 0 || v5 >= a2[1])
  {
LABEL_10:
    std::string::basic_string[abi:ne180100]<0>(v9, "anchor.inside(Rect(0, 0, ksize.width, ksize.height))");
    std::string::basic_string[abi:ne180100]<0>(v8, "normalizeAnchor");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/precomp.hpp");
    cv::Exception::Exception(v10, 4294967081, v9, v8, __p, 88);
    cv::error((cv *)v10, v6);
  }
  *a3 = v4;
  a3[1] = v5;
  return result;
}

{
  int v4;
  int v5;
  const cv::Exception *v6;
  void *__p[2];
  void *v8[2];
  void *v9[2];
  unsigned char v10[120];

  int v4 = *result;
  if (*result == -1)
  {
    int v4 = *a2 / 2;
    _DWORD *result = v4;
  }
  int v5 = result[1];
  if (v5 == -1)
  {
    int v5 = a2[1] / 2;
    result[1] = v5;
    if (v4 < 0) {
      goto LABEL_10;
    }
  }
  else if (v4 < 0)
  {
    goto LABEL_10;
  }
  if (v4 >= *a2 || v5 < 0 || v5 >= a2[1])
  {
LABEL_10:
    std::string::basic_string[abi:ne180100]<0>(v9, "anchor.inside(Rect(0, 0, ksize.width, ksize.height))");
    std::string::basic_string[abi:ne180100]<0>(v8, "normalizeAnchor");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/precomp.hpp");
    cv::Exception::Exception(v10, 4294967081, v9, v8, __p, 88);
    cv::error((cv *)v10, v6);
  }
  *a3 = v4;
  a3[1] = v5;
  return result;
}

void sub_225E91098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void cv::createLinearFilter(unsigned __int16 a1, unsigned __int16 a2, void (***a3)(long long *__return_ptr, void, uint64_t), uint64_t *a4)
{
  (**a3)(&v22, a3, 0xFFFFFFFFLL);
  if (((a2 ^ a1) & 0xFF8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "cn == CV_MAT_CN(_dstType)");
    std::string::basic_string[abi:ne180100]<0>(&v13, "createLinearFilter");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(&v14, 4294967081, &v11, &v13, &__p, 3266);
    cv::error((cv *)&v14, v7);
  }
  uint64_t v15 = v23;
  long long v14 = v22;
  long long v16 = v24;
  long long v17 = v25;
  uint64_t v18 = v26;
  uint64_t v19 = (char *)&v14 + 8;
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v20 = (cv *)v21;
  if ((void)v24) {
    atomic_fetch_add((atomic_uint *volatile)v24, 1u);
  }
  if (SDWORD1(v22) > 2)
  {
    DWORD1(v14) = 0;
    cv::Mat::copySize((cv::Mat *)&v14, (const cv::Mat *)&v22);
  }
  else
  {
    unsigned int v8 = v27;
    unsigned int v9 = v20;
    *(void *)uint64_t v20 = *v27;
    *((void *)v9 + 1) = v8[1];
  }
  cv::_InputArray::_InputArray((uint64_t)&v11, (const cv::Mat *)&v14);
  uint64_t v10 = *a4;
  cv::getLinearFilter(a1 & 0xFFF, a2 & 0xFFF, (void (***)(void *__return_ptr, void, uint64_t))&v11, &v10, 0);
}

void sub_225E91530(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  cv::Mat::~Mat((cv::Mat *)(v32 - 208), a2);
  _Unwind_Resume(a1);
}

void cv::filter2D(void (***a1)(void *__return_ptr), uint64_t a2, int a3, void (***a4)(uint64_t *__return_ptr, void, uint64_t), uint64_t *a5, char a6, double a7)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  (**a1)(v59);
  (**a4)(&v48, a4, 0xFFFFFFFFLL);
  if (a3 < 0) {
    LOBYTE(a3) = v59[0];
  }
  int32x2_t v47 = vrev64_s32(*v65);
  (*(void (**)(uint64_t, int32x2_t *, void, uint64_t, void, void))(*(void *)a2 + 128))(a2, &v47, v59[0] & 0xFF8 | a3 & 7u, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void *__return_ptr, uint64_t, uint64_t))a2)(v40, a2, 0xFFFFFFFFLL);
  uint64_t v13 = *a5;
  int32x2_t v38 = vrev64_s32(*v56);
  uint64_t v39 = v13;
  cv::normalizeAnchor((int *)&v39, (int *)&v38, (int *)v34);
  *a5 = *(void *)v34;
  if (v49 * v50 < 50)
  {
    __int16 v17 = v59[0];
    __int16 v18 = v40[0];
    cv::_InputArray::_InputArray((uint64_t)v34, (const cv::Mat *)&v48);
    uint64_t v31 = *a5;
    *(_OWORD *)uint64_t v68 = 0u;
    long long v69 = 0u;
    cv::createLinearFilter(v17 & 0xFFF, v18 & 0xFFF, (void (***)(long long *__return_ptr, void, uint64_t))v34, &v31);
  }
  long long v35 = &v34[8];
  uint64_t v36 = (cv *)v37;
  v37[0] = 0;
  v37[1] = 0;
  *(_DWORD *)long long v34 = 1124007936;
  memset(&v34[4], 0, 60);
  if (v60 == (void)v41)
  {
    *(void *)uint64_t v68 = *v44;
    cv::Mat::create((cv::Mat *)v34, (cv::Mat *)2, v68, v40[0] & 0xFFF);
    goto LABEL_21;
  }
  if (*((void *)&v41 + 1))
  {
    atomic_fetch_add(*((atomic_uint *volatile *)&v41 + 1), 1u);
    if (*(void *)&v34[24])
    {
      if (atomic_fetch_add(*(atomic_uint *volatile *)&v34[24], 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v34, v14);
      }
    }
  }
  *(void *)&v34[16] = 0;
  memset(&v34[32], 0, 24);
  if (*(int *)&v34[4] <= 0)
  {
    *(void *)&v34[24] = 0;
    *(_DWORD *)long long v34 = v40[0];
  }
  else
  {
    uint64_t v15 = 0;
    long long v16 = v35;
    do
      *(_DWORD *)&v16[4 * v15++] = 0;
    while (v15 < *(int *)&v34[4]);
    *(void *)&v34[24] = 0;
    *(_DWORD *)long long v34 = v40[0];
    if (*(int *)&v34[4] > 2) {
      goto LABEL_19;
    }
  }
  if (SHIDWORD(v40[0]) > 2)
  {
LABEL_19:
    cv::Mat::copySize((cv::Mat *)v34, (const cv::Mat *)v40);
    goto LABEL_20;
  }
  *(_DWORD *)&v34[4] = HIDWORD(v40[0]);
  *(void *)&v34[8] = v40[1];
  uint64_t v19 = v45;
  uint64_t v20 = v36;
  *(void *)uint64_t v36 = *(void *)v45;
  *((void *)v20 + 1) = *((void *)v19 + 1);
LABEL_20:
  *(_OWORD *)&v34[16] = v41;
  *(_OWORD *)&v34[32] = v42;
  *(_OWORD *)&v34[48] = v43;
LABEL_21:
  int32x2_t v21 = vrev64_s32(*v65);
  uint64_t v32 = *a5;
  int32x2_t v33 = v21;
  cv::crossCorr((cv::Mat *)v59, (cv::Mat *)&v48, (cv::Mat *)v34, (int *)&v33, v59[0] & 0xFF8 | a3 & 7, &v32, a6, a7);
  if (*(void *)&v34[16] != (void)v41)
  {
    cv::_OutputArray::_OutputArray((uint64_t)v68, (cv::Mat *)v40);
    cv::Mat::copyTo((cv::Mat *)v34, (const cv::_OutputArray *)v68);
  }
  if (*(void *)&v34[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v34[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v34, v22);
  }
  *(void *)&v34[16] = 0;
  memset(&v34[32], 0, 24);
  if (*(int *)&v34[4] >= 1)
  {
    uint64_t v23 = 0;
    long long v24 = v35;
    do
      *(_DWORD *)&v24[4 * v23++] = 0;
    while (v23 < *(int *)&v34[4]);
  }
  *(void *)&v34[24] = 0;
  if (v36 != (cv *)v37) {
    cv::fastFree((void **)v36, v22);
  }
  if (*((void *)&v41 + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v41 + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v40, v22);
  }
  *(void *)&long long v41 = 0;
  long long v42 = 0uLL;
  *(void *)&long long v43 = 0;
  if (SHIDWORD(v40[0]) >= 1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = v44;
    do
      *((_DWORD *)v26 + v25++) = 0;
    while (v25 < SHIDWORD(v40[0]));
  }
  *((void *)&v41 + 1) = 0;
  if (v45 != (cv *)&v46) {
    cv::fastFree((void **)v45, v22);
  }
  if (v52 && atomic_fetch_add(v52, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v48, v22);
  }
  uint64_t v51 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  if (SHIDWORD(v48) >= 1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = v56;
    do
      v28->i32[v27++] = 0;
    while (v27 < SHIDWORD(v48));
  }
  long long v52 = 0;
  if (v57 != (cv *)&v58) {
    cv::fastFree((void **)v57, v22);
  }
  if (v61 && atomic_fetch_add(v61, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v59, v22);
  }
  uint64_t v60 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  if (SHIDWORD(v59[0]) >= 1)
  {
    uint64_t v29 = 0;
    int v30 = v65;
    do
      v30->i32[v29++] = 0;
    while (v29 < SHIDWORD(v59[0]));
  }
  uint64_t v61 = 0;
  if (v66 != (void **)&v67) {
    cv::fastFree(v66, v22);
  }
}

void sub_225E91BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_225E91C70()
{
}

void sub_225E91C78()
{
}

uint64_t *cv::Ptr<cv::FilterEngine>::~Ptr(uint64_t *a1, void *a2)
{
  unint64_t v3 = (atomic_uint *)a1[1];
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1)
  {
    uint64_t v4 = *a1;
    if (*a1) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    cv::fastFree((void **)a1[1], a2);
  }
  *a1 = 0;
  a1[1] = 0;
  return a1;
}

void cv::sepFilter2D(void (***a1)(void *__return_ptr), uint64_t a2, int a3, void (***a4)(cv **__return_ptr, void, uint64_t), void (***a5)(cv **__return_ptr, void, uint64_t), uint64_t *a6)
{
  void (**v15[4])(uint64_t *__return_ptr, void, uint64_t);
  _OWORD v16[2];
  uint64_t v17;
  int32x2_t v18;
  cv *v19[2];
  cv *v20[2];
  void v21[9];

  (**a1)(v21);
  (**a4)(v20, a4, 0xFFFFFFFFLL);
  (**a5)(v19, a5, 0xFFFFFFFFLL);
  if (a3 >= 0) {
    char v11 = a3;
  }
  else {
    char v11 = v21[0];
  }
  __int16 v18 = vrev64_s32(*(int32x2_t *)v21[8]);
  (*(void (**)(uint64_t, int32x2_t *, void, uint64_t, void, void))(*(void *)a2 + 128))(a2, &v18, v21[0] & 0xFF8 | v11 & 7u, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(uint64_t *__return_ptr, uint64_t, uint64_t))a2)(&v17, a2, 0xFFFFFFFFLL);
  __int16 v12 = v21[0];
  __int16 v13 = v17;
  cv::_InputArray::_InputArray((uint64_t)v16, (const cv::Mat *)v20);
  cv::_InputArray::_InputArray((uint64_t)v15, (const cv::Mat *)v19);
  uint64_t v14 = *a6;
  cv::createSeparableLinearFilter(v12 & 0xFFF, v13 & 0xFFF, (void (***)(uint64_t *__return_ptr, void, uint64_t))v16, v15, (int *)&v14);
}

void sub_225E9214C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  cv::Ptr<cv::FilterEngine>::~Ptr(&a26, a2);
  cv::Mat::~Mat((cv::Mat *)&a28, v55);
  cv::Mat::~Mat((cv::Mat *)&a41, v56);
  cv::Mat::~Mat((cv::Mat *)&a53, v57);
  cv::Mat::~Mat((cv::Mat *)(v53 - 176), v58);
  _Unwind_Resume(a1);
}

void sub_225E9219C()
{
}

void sub_225E921A4()
{
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  int v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    unsigned int v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    __int16 v12 = &v7[v11];
    __int16 v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      uint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      int v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::vector<unsigned char *>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  unsigned int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      __int16 v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v4, v12);
    }
    else {
      __int16 v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    char v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    long long v16 = &v14[8 * a2];
    __int16 v18 = (char *)*a1;
    __int16 v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      __int16 v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t cv::SymmRowSmallFilter<unsigned char,int,cv::SymmRowSmallNoVec>::SymmRowSmallFilter(uint64_t a1, cv::Mat *a2, int a3, int a4)
{
  uint64_t v6 = cv::RowFilter<unsigned char,int,cv::SymmRowSmallNoVec>::RowFilter(a1, a2, a3);
  *(void *)uint64_t v6 = &unk_26D988318;
  *(_DWORD *)(v6 + 116) = a4;
  if ((a4 & 3) == 0 || *(int *)(a1 + 8) >= 6)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5");
    std::string::basic_string[abi:ne180100]<0>(v10, "SymmRowSmallFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 2321);
    cv::error((cv *)v12, v7);
  }
  return a1;
}

void sub_225E924F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::RowFilter<unsigned char,int,cv::SymmRowSmallNoVec>::~RowFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<unsigned char,int,cv::SymmRowSmallNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988370;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  unsigned int v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2) {
      goto LABEL_18;
    }
    uint64_t v8 = (atomic_uint *)*((void *)a2 + 3);
    if (v8)
    {
      atomic_fetch_add(v8, 1u);
      unint64_t v9 = *(atomic_uint **)(a1 + 40);
      if (v9)
      {
        if (atomic_fetch_add(v9, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v12 > 2) {
        goto LABEL_16;
      }
    }
    int v13 = *((_DWORD *)a2 + 1);
    if (v13 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v13;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      uint64_t v14 = (void *)*((void *)a2 + 9);
      char v15 = *(void **)(a1 + 88);
      void *v15 = *v14;
      v15[1] = v14[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v6, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v23, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v23);
LABEL_18:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v17 != 1 && v16 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v21, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v23, 4294967081, v22, v21, __p, 2262);
    cv::error((cv *)v23, v18);
  }
  return a1;
}

void sub_225E927D0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<unsigned char,int,cv::SymmRowSmallNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988370;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D988370;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

uint64_t cv::SymmRowSmallFilter<unsigned char,int,cv::SymmRowSmallNoVec>::~SymmRowSmallFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988370;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmRowSmallFilter<unsigned char,int,cv::SymmRowSmallNoVec>::~SymmRowSmallFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988370;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

unint64_t cv::SymmRowSmallFilter<unsigned char,int,cv::SymmRowSmallNoVec>::operator()(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5 = *(_DWORD *)(result + 8);
  if (v5 >= 0) {
    int v6 = *(_DWORD *)(result + 8);
  }
  else {
    int v6 = v5 + 1;
  }
  int v7 = v6 >> 1;
  uint64_t v8 = (uint64_t)v6 >> 1;
  uint64_t v9 = (v6 >> 1) * (uint64_t)a5;
  uint64_t v10 = *(void *)(result + 32);
  uint64_t v11 = (int *)(v10 + 4 * (v6 >> 1));
  uint64_t v12 = (unsigned __int8 *)(a2 + v7 * (uint64_t)a5);
  uint64_t v13 = (a5 * a4);
  if ((*(unsigned char *)(result + 116) & 1) == 0)
  {
    if (v5 == 5)
    {
      if ((int)v13 < 2) {
        goto LABEL_44;
      }
      unint64_t v18 = 0;
      int v19 = v11[1];
      uint64_t result = v11[2];
      uint64_t v20 = (_DWORD *)(a3 + 4);
      uint64_t v21 = a2 + v9 + a5;
      uint64_t v22 = v9 + -2 * a5;
      uint64_t v23 = v9 + 1;
      uint64_t v24 = v9 + a5 + 1;
      uint64_t v25 = v9 + 2 * a5;
      uint64_t v26 = a2 + v9 + 1 - 2 * a5;
      uint64_t v27 = v25 + a2 + 1;
      uint64_t v28 = a2 + v22;
      uint64_t v29 = a2 + v24;
      uint64_t v30 = a2 + v23 - a5;
      do
      {
        int v31 = (*(unsigned __int8 *)(v29 + v18) - *(unsigned __int8 *)(v30 + v18)) * v19
            + (*(unsigned __int8 *)(v27 + v18) - *(unsigned __int8 *)(v26 + v18)) * result;
        *(v20 - 1) = (*(unsigned __int8 *)(v21 + v18) - *(unsigned __int8 *)(v30 + v18 - 1)) * v19
                   + (*(unsigned __int8 *)(v27 + v18 - 1) - *(unsigned __int8 *)(v28 + v18)) * result;
        *uint64_t v20 = v31;
        v18 += 2;
        v20 += 2;
      }
      while (v18 <= (v13 - 2));
      v12 += v18;
    }
    else
    {
      if (v5 != 3) {
        goto LABEL_44;
      }
      int v14 = v11[1];
      if (*v11) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v14 == 1;
      }
      if (!v15)
      {
        if ((int)v13 >= 2)
        {
          unint64_t v16 = 0;
          uint64_t result = -(uint64_t)a5;
          do
          {
            int v17 = (v12[a5 + 1] - v12[1 - a5]) * v14;
            *(_DWORD *)(a3 + 4 * v16) = (v12[a5] - v12[-a5]) * v14;
            *(_DWORD *)(a3 + ((4 * v16) | 4)) = v17;
            v16 += 2;
            v12 += 2;
          }
          while (v16 <= (v13 - 2));
          LODWORD(v1_Block_object_dispose(&a9, 8) = v16;
          goto LABEL_45;
        }
LABEL_44:
        LODWORD(v1_Block_object_dispose(&a9, 8) = 0;
        goto LABEL_45;
      }
      if ((int)v13 < 2) {
        goto LABEL_44;
      }
      unint64_t v18 = 0;
      uint64_t result = a5 + 1;
      do
      {
        int v76 = v12[result] - v12[1 - a5];
        *(_DWORD *)(a3 + 4 * v1_Block_object_dispose(&a9, 8) = v12[a5] - v12[-a5];
        *(_DWORD *)(a3 + ((4 * v18) | 4)) = v76;
        v18 += 2;
        v12 += 2;
      }
      while (v18 <= (v13 - 2));
    }
LABEL_45:
    if ((int)v18 < (int)v13)
    {
      uint64_t v56 = a5;
      uint64_t v57 = (v8 + 1);
      unint64_t v18 = v18;
      uint64_t v58 = v10 + 4 * v8 + 4;
      uint64_t v59 = v57 - 1;
      uint64_t v60 = -(uint64_t)a5;
      do
      {
        uint64_t result = *v12;
        int v61 = *v11 * result;
        if (v5 >= 2)
        {
          uint64_t result = v60;
          uint64_t v62 = v59;
          uint64_t v63 = (int *)v58;
          uint64_t v64 = v56;
          do
          {
            int v65 = *v63++;
            v61 += (v12[v64] - v12[result]) * v65;
            v64 += v56;
            result -= v56;
            --v62;
          }
          while (v62);
        }
        *(_DWORD *)(a3 + 4 * v18++) = v61;
        ++v12;
      }
      while (v18 != v13);
    }
    return result;
  }
  if (v5 == 5)
  {
    int v32 = *v11;
    int v33 = v11[1];
    int v34 = v11[2];
    if (*v11 == -2 && v33 == 0 && v34 == 1)
    {
      if ((int)v13 >= 2)
      {
        uint64_t result = 0;
        int v66 = (int *)(a3 + 4);
        uint64_t v67 = a2 + v9 + -2 * a5;
        uint64_t v68 = v9 + 2 * a5 + a2 + 1;
        uint64_t v69 = v9 - 2 * a5 + a2 + 1;
        do
        {
          int v70 = *(unsigned __int8 *)(v68 + result) - 2 * v12[result + 1] + *(unsigned __int8 *)(v69 + result);
          *(v66 - 1) = *(unsigned __int8 *)(v68 + result - 1) - 2 * v12[result] + *(unsigned __int8 *)(v67 + result);
          *int v66 = v70;
          result += 2;
          v66 += 2;
        }
        while (result <= (v13 - 2));
        goto LABEL_69;
      }
    }
    else if ((int)v13 >= 2)
    {
      uint64_t result = 0;
      uint64_t v37 = v9 + 1;
      int32x2_t v38 = (int *)(a3 + 4);
      uint64_t v39 = v9 + -2 * a5;
      uint64_t v40 = a2 + v9 + 1 - 2 * a5;
      uint64_t v41 = v9 + 2 * a5;
      uint64_t v42 = v9 + a5 + 1;
      uint64_t v43 = a2 + v9 + a5;
      uint64_t v44 = a2 + v39;
      uint64_t v45 = a2 + v41;
      uint64_t v46 = a2 + v37 - a5;
      uint64_t v47 = a2 + v42;
      do
      {
        int v48 = v32 * v12[result + 1]
            + (*(unsigned __int8 *)(v47 + result) + *(unsigned __int8 *)(v46 + result)) * v33
            + (*(unsigned __int8 *)(v45 + result + 1) + *(unsigned __int8 *)(v40 + result)) * v34;
        *(v38 - 1) = v32 * v12[result]
                   + (*(unsigned __int8 *)(v43 + result) + *(unsigned __int8 *)(v46 + result - 1)) * v33
                   + (*(unsigned __int8 *)(v45 + result) + *(unsigned __int8 *)(v44 + result)) * v34;
        int *v38 = v48;
        result += 2;
        v38 += 2;
      }
      while (result <= (v13 - 2));
      goto LABEL_69;
    }
    goto LABEL_63;
  }
  if (v5 == 3)
  {
    int v49 = *v11;
    if (*v11 == -2)
    {
      int v50 = v11[1];
      if (v50 == 1)
      {
        if ((int)v13 >= 2)
        {
          uint64_t result = 0;
          int v71 = (int *)(a3 + 4);
          uint64_t v72 = a2 + v9 + a5 + 1;
          uint64_t v73 = a2 + v9 + a5;
          uint64_t v74 = v9 - a5 + a2 + 1;
          do
          {
            int v75 = *(unsigned __int8 *)(v72 + result) - 2 * v12[result + 1] + *(unsigned __int8 *)(v74 + result);
            *(v71 - 1) = *(unsigned __int8 *)(v73 + result) - 2 * v12[result] + *(unsigned __int8 *)(v74 + result - 1);
            *int v71 = v75;
            result += 2;
            v71 += 2;
          }
          while (result <= (v13 - 2));
          goto LABEL_69;
        }
        goto LABEL_63;
      }
    }
    else if (v49 == 2)
    {
      int v50 = v11[1];
      if (v50 == 1)
      {
        if ((int)v13 >= 2)
        {
          uint64_t result = 0;
          uint64_t v51 = (int *)(a3 + 4);
          uint64_t v52 = a2 + v9 + a5 + 1;
          uint64_t v53 = a2 + v9 + a5;
          uint64_t v54 = v9 - a5 + a2 + 1;
          do
          {
            int v55 = *(unsigned __int8 *)(v54 + result) + 2 * v12[result + 1] + *(unsigned __int8 *)(v52 + result);
            *(v51 - 1) = *(unsigned __int8 *)(v54 + result - 1) + 2 * v12[result] + *(unsigned __int8 *)(v53 + result);
            *uint64_t v51 = v55;
            result += 2;
            v51 += 2;
          }
          while (result <= (v13 - 2));
LABEL_69:
          v12 += result;
          goto LABEL_73;
        }
        goto LABEL_63;
      }
    }
    else
    {
      int v50 = v11[1];
    }
    if ((int)v13 >= 2)
    {
      uint64_t result = 0;
      uint64_t v77 = (int *)(a3 + 4);
      uint64_t v78 = a2 + v9 + a5 + 1;
      uint64_t v79 = a2 + v9 + a5;
      uint64_t v80 = v9 - a5 + a2 + 1;
      do
      {
        int v81 = v49 * v12[result + 1] + (*(unsigned __int8 *)(v78 + result) + *(unsigned __int8 *)(v80 + result)) * v50;
        *(v77 - 1) = v49 * v12[result]
                   + (*(unsigned __int8 *)(v79 + result) + *(unsigned __int8 *)(v80 + result - 1)) * v50;
        *uint64_t v77 = v81;
        result += 2;
        v77 += 2;
      }
      while (result <= (v13 - 2));
      goto LABEL_69;
    }
LABEL_63:
    uint64_t result = 0;
    goto LABEL_73;
  }
  if (v5 != 1 || *v11 != 1) {
    goto LABEL_63;
  }
  if ((int)v13 >= 2)
  {
    uint64_t result = 0;
    do
    {
      int v82 = v12[result + 1];
      uint64_t v83 = (_DWORD *)(a3 + 4 * result);
      *uint64_t v83 = v12[result];
      v83[1] = v82;
      result += 2;
    }
    while (result <= (v13 - 2));
  }
  else
  {
    uint64_t result = 0;
  }
  v12 += result;
LABEL_73:
  if ((int)result < (int)v13)
  {
    uint64_t v84 = a5;
    uint64_t v85 = (v8 + 1);
    uint64_t v86 = result;
    uint64_t v87 = v10 + 4 * v8 + 4;
    uint64_t v88 = v85 - 1;
    uint64_t v89 = -(uint64_t)a5;
    do
    {
      uint64_t result = *v12;
      int v90 = *v11 * result;
      if (v5 >= 2)
      {
        uint64_t result = v89;
        uint64_t v91 = v88;
        BOOL v92 = (int *)v87;
        uint64_t v93 = v84;
        do
        {
          int v94 = *v92++;
          v90 += (v12[result] + v12[v93]) * v94;
          v93 += v84;
          result -= v84;
          --v91;
        }
        while (v91);
      }
      *(_DWORD *)(a3 + 4 * v86++) = v90;
      ++v12;
    }
    while (v86 != v13);
  }
  return result;
}

void cv::RowFilter<unsigned char,int,cv::SymmRowSmallNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988370;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowFilter<unsigned char,int,cv::SymmRowSmallNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int32x4_t a6)
{
  uint64_t v6 = *(unsigned int *)(result + 8);
  int v7 = *(const float **)(result + 32);
  uint64_t v8 = (a5 * a4);
  if ((int)v8 >= 4)
  {
    unint64_t v9 = 0;
    uint64_t v10 = (__int32 *)(a2 + a5);
    do
    {
      a6.i32[0] = *(_DWORD *)(a2 + v9);
      int32x4_t v11 = (int32x4_t)vld1q_dup_f32(v7);
      a6 = vmulq_s32(v11, (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a6.i8)));
      if ((int)v6 >= 2)
      {
        uint64_t v12 = v10;
        uint64_t v13 = v6 - 1;
        int v14 = v7 + 1;
        do
        {
          v11.i32[0] = *v12;
          int32x4_t v11 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v11.i8));
          int32x4_t v15 = (int32x4_t)vld1q_dup_f32(v14++);
          a6 = vmlaq_s32(a6, v15, v11);
          uint64_t v12 = (__int32 *)((char *)v12 + a5);
          --v13;
        }
        while (v13);
      }
      uint64_t result = 4 * v9;
      *(int32x4_t *)(a3 + 4 * v9) = a6;
      v9 += 4;
      ++v10;
    }
    while (v9 <= (v8 - 4));
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((int)v9 < (int)v8)
  {
    unint64_t v9 = v9;
    do
    {
      int v16 = *(_DWORD *)v7 * *(unsigned __int8 *)(a2 + v9);
      if ((int)v6 >= 2)
      {
        uint64_t v17 = a2 + a5;
        uint64_t result = v6 - 1;
        unint64_t v18 = (int *)(v7 + 1);
        do
        {
          int v19 = *v18++;
          v16 += v19 * *(unsigned __int8 *)(v17 + v9);
          v17 += a5;
          --result;
        }
        while (result);
      }
      *(_DWORD *)(a3 + 4 * v9++) = v16;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t cv::SymmRowSmallFilter<float,float,cv::SymmRowSmallNoVec>::SymmRowSmallFilter(uint64_t a1, cv::Mat *a2, int a3, int a4)
{
  uint64_t v6 = cv::RowFilter<float,float,cv::SymmRowSmallNoVec>::RowFilter(a1, a2, a3);
  *(void *)uint64_t v6 = &unk_26D988398;
  *(_DWORD *)(v6 + 116) = a4;
  if ((a4 & 3) == 0 || *(int *)(a1 + 8) >= 6)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5");
    std::string::basic_string[abi:ne180100]<0>(v10, "SymmRowSmallFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 2321);
    cv::error((cv *)v12, v7);
  }
  return a1;
}

void sub_225E93458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::RowFilter<float,float,cv::SymmRowSmallNoVec>::~RowFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<float,float,cv::SymmRowSmallNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D9883F0;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  int v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2) {
      goto LABEL_18;
    }
    uint64_t v8 = (atomic_uint *)*((void *)a2 + 3);
    if (v8)
    {
      atomic_fetch_add(v8, 1u);
      unint64_t v9 = *(atomic_uint **)(a1 + 40);
      if (v9)
      {
        if (atomic_fetch_add(v9, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v12 > 2) {
        goto LABEL_16;
      }
    }
    int v13 = *((_DWORD *)a2 + 1);
    if (v13 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v13;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      int v14 = (void *)*((void *)a2 + 9);
      int32x4_t v15 = *(void **)(a1 + 88);
      void *v15 = *v14;
      v15[1] = v14[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v6, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v23, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v23);
LABEL_18:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v17 != 1 && v16 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v21, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v23, 4294967081, v22, v21, __p, 2262);
    cv::error((cv *)v23, v18);
  }
  return a1;
}

void sub_225E93734(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<float,float,cv::SymmRowSmallNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9883F0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D9883F0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

uint64_t cv::SymmRowSmallFilter<float,float,cv::SymmRowSmallNoVec>::~SymmRowSmallFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9883F0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmRowSmallFilter<float,float,cv::SymmRowSmallNoVec>::~SymmRowSmallFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9883F0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmRowSmallFilter<float,float,cv::SymmRowSmallNoVec>::operator()(uint64_t result, uint64_t a2, float32x2_t *a3, int a4, int a5, double a6, double a7, double a8)
{
  int v8 = *(_DWORD *)(result + 8);
  if (v8 >= 0) {
    int v9 = *(_DWORD *)(result + 8);
  }
  else {
    int v9 = v8 + 1;
  }
  int v10 = (v9 >> 1) * a5;
  uint64_t v11 = *(void *)(result + 32);
  uint64_t v12 = (uint64_t)v9 >> 1;
  int v13 = (float *)(v11 + 4 * (v9 >> 1));
  uint64_t v14 = v10;
  int32x4_t v15 = (float32x2_t *)(a2 + 4 * v10);
  uint64_t v16 = (a5 * a4);
  if ((*(unsigned char *)(result + 116) & 1) == 0)
  {
    if (v8 == 5)
    {
      if ((int)v16 < 2) {
        goto LABEL_42;
      }
      unint64_t v27 = 0;
      unint64_t v19 = 0;
      uint64_t v28 = 4 * v14;
      float v29 = v13[1];
      float v30 = v13[2];
      uint64_t v31 = a2 + 4 * v14 + 4 * a5;
      uint64_t v32 = v28 + 4;
      uint64_t result = a2 + v28 + 4 - 8 * a5;
      uint64_t v33 = v28 + 8 * a5 + a2;
      uint64_t v34 = a2 + v28 + -8 * a5;
      uint64_t v35 = a2 + v28 + 4 * (a5 + 1);
      uint64_t v36 = a2 + v32 - 4 * a5;
      uint64_t v37 = v33 + 4;
      do
      {
        float v38 = (float)(v30 * (float)(*(float *)(v37 + v27) - *(float *)(result + v27)))
            + (float)((float)(*(float *)(v35 + v27) - *(float *)(v36 + v27)) * v29);
        uint64_t v39 = (float *)&a3[v27 / 8] + 1;
        *(v39 - 1) = (float)(v30 * (float)(*(float *)(v37 + v27 - 4) - *(float *)(v34 + v27)))
                   + (float)((float)(*(float *)(v31 + v27) - *(float *)(v36 + v27 - 4)) * v29);
        *uint64_t v39 = v38;
        v19 += 2;
        v27 += 8;
      }
      while (v19 <= (v16 - 2));
      int32x4_t v15 = (float32x2_t *)((char *)v15 + v27);
    }
    else
    {
      if (v8 != 3) {
        goto LABEL_42;
      }
      float v17 = v13[1];
      if (*v13 != 0.0 || v17 != 1.0)
      {
        if ((int)v16 >= 2)
        {
          unint64_t v19 = 0;
          uint64_t v20 = 4 * v14;
          uint64_t v21 = a2 + 4 * v14 + 4 * a5;
          uint64_t v22 = (float32x2_t *)(a2 + v20 - 4 * a5);
          uint64_t result = a2 + v20 + 4 * (a5 + 1);
          uint64_t v23 = a3;
          do
          {
            float32x2_t v24 = *v22++;
            v25.i32[0] = *(_DWORD *)(v21 + 4 * v19);
            v25.i32[1] = *(_DWORD *)(result + 4 * v19);
            *v23++ = vmul_n_f32(vsub_f32(v25, v24), v17);
            v19 += 2;
            ++v15;
          }
          while (v19 <= (v16 - 2));
          goto LABEL_43;
        }
LABEL_42:
        LODWORD(v19) = 0;
        goto LABEL_43;
      }
      if ((int)v16 < 2) {
        goto LABEL_42;
      }
      uint64_t v72 = 0;
      unint64_t v19 = 0;
      uint64_t result = (uint64_t)a3 + 4;
      uint64_t v73 = 4 * v14;
      uint64_t v74 = a2 + 4 * v14 + 4 * a5;
      uint64_t v75 = v73 - 4 * a5 + a2 + 4;
      uint64_t v76 = a2 + v73 + 4 * (a5 + 1);
      do
      {
        float v77 = *(float *)(v76 + v72) - *(float *)(v75 + v72);
        uint64_t v78 = (float *)(result + v72);
        *(v78 - 1) = *(float *)(v74 + v72) - *(float *)(v75 + v72 - 4);
        *uint64_t v78 = v77;
        v19 += 2;
        v72 += 8;
      }
      while (v19 <= (v16 - 2));
      int32x4_t v15 = (float32x2_t *)((char *)v15 + v72);
    }
LABEL_43:
    if ((int)v19 < (int)v16)
    {
      uint64_t v48 = v19;
      uint64_t v49 = v11 + 4 * v12 + 4;
      uint64_t v50 = (v12 + 1) - 1;
      uint64_t v51 = 4 * a5;
      do
      {
        float v52 = *v13 * v15->f32[0];
        if (v8 >= 2)
        {
          uint64_t v53 = -4 * a5;
          uint64_t result = 4 * a5;
          uint64_t v54 = v50;
          int v55 = (float *)v49;
          do
          {
            float v56 = *v55++;
            float v52 = v52
                + (float)(v56 * (float)(*(float *)((char *)v15->f32 + result) - *(float *)((char *)v15->f32 + v53)));
            result += v51;
            v53 -= v51;
            --v54;
          }
          while (v54);
        }
        a3->f32[v48++] = v52;
        int32x4_t v15 = (float32x2_t *)((char *)v15 + 4);
      }
      while (v48 != v16);
    }
    return result;
  }
  if (v8 == 5)
  {
    float v40 = v13[1];
    *(float *)&a8 = v13[2];
    if (*v13 == -2.0 && (v40 == 0.0 ? (BOOL v41 = *(float *)&a8 == 1.0) : (BOOL v41 = 0), v41))
    {
      if ((int)v16 < 2) {
        goto LABEL_69;
      }
      unint64_t v42 = 0;
      unint64_t v26 = 0;
      uint64_t v43 = 4 * v14;
      uint64_t v44 = a2 + 4 * v14 + -8 * a5;
      uint64_t result = a2 + v43 + 8 * a5;
      uint64_t v45 = v43 - 8 * a5 + a2 + 4;
      do
      {
        v46.i32[0] = *(_DWORD *)(v44 + v42);
        v46.i32[1] = *(_DWORD *)(v45 + v42);
        a3[v42 / 8] = vadd_f32(vmla_f32(v46, (float32x2_t)0xC0000000C0000000, v15[v42 / 8]), *(float32x2_t *)(result + v42));
        v26 += 2;
        v42 += 8;
      }
      while (v26 <= (v16 - 2));
    }
    else
    {
      if ((int)v16 < 2) {
        goto LABEL_69;
      }
      unint64_t v42 = 0;
      unint64_t v26 = 0;
      uint64_t v61 = 4 * v14;
      uint64_t v62 = a2 + 4 * v14 - 4 * a5;
      uint64_t v63 = v61 - 8 * a5;
      uint64_t result = a2 + v61 + 4 * a5;
      uint64_t v64 = a2 + v61 + -8 * a5;
      uint64_t v65 = a2 + v61 + 8 * a5;
      uint64_t v66 = a2 + v61 + 4 * (a5 + 1);
      float32x2_t v67 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0);
      *(float *)&a7 = *v13;
      float32x2_t v68 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
      uint64_t v69 = v63 + a2 + 4;
      do
      {
        v70.i32[0] = *(_DWORD *)(result + v42);
        v70.i32[1] = *(_DWORD *)(v66 + v42);
        v71.i32[0] = *(_DWORD *)(v64 + v42);
        v71.i32[1] = *(_DWORD *)(v69 + v42);
        a3[v42 / 8] = vmla_f32(vmla_f32(vmul_n_f32(vadd_f32(*(float32x2_t *)(v62 + v42), v70), v40), v68, v15[v42 / 8]), v67, vadd_f32(v71, *(float32x2_t *)(v65 + v42)));
        v26 += 2;
        v42 += 8;
      }
      while (v26 <= (v16 - 2));
    }
    int32x4_t v15 = (float32x2_t *)((char *)v15 + v42);
    goto LABEL_72;
  }
  if (v8 == 3)
  {
    *(float *)&a7 = *v13;
    if (*v13 == 2.0 && v13[1] == 1.0)
    {
      if ((int)v16 >= 2)
      {
        unint64_t v26 = 0;
        uint64_t result = -4 * a5;
        do
        {
          v47.i32[0] = v15->i32[a5];
          v47.i32[1] = v15->i32[a5 + 1];
          *(float32x2_t *)((char *)a3 + 4 * v26) = vadd_f32(vmla_f32(*(float32x2_t *)((char *)v15 - 4 * a5), (float32x2_t)0x4000000040000000, *v15), v47);
          v26 += 2;
          ++v15;
        }
        while (v26 <= (v16 - 2));
        goto LABEL_72;
      }
    }
    else
    {
      float v57 = v13[1];
      if (*(float *)&a7 == -2.0 && v57 == 1.0)
      {
        if ((int)v16 >= 2)
        {
          unint64_t v26 = 0;
          uint64_t result = -4 * a5;
          do
          {
            v82.i32[0] = v15->i32[a5];
            v82.i32[1] = v15->i32[a5 + 1];
            *(float32x2_t *)((char *)a3 + 4 * v26) = vadd_f32(vmla_f32(*(float32x2_t *)((char *)v15 - 4 * a5), (float32x2_t)0xC0000000C0000000, *v15), v82);
            v26 += 2;
            ++v15;
          }
          while (v26 <= (v16 - 2));
          goto LABEL_72;
        }
      }
      else if ((int)v16 >= 2)
      {
        unint64_t v26 = 0;
        float32x2_t v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
        uint64_t result = -4 * a5;
        do
        {
          v60.i32[0] = v15->i32[a5];
          v60.i32[1] = v15->i32[a5 + 1];
          *(float32x2_t *)((char *)a3 + 4 * v26) = vmla_f32(vmul_n_f32(vadd_f32(*(float32x2_t *)((char *)v15 - 4 * a5), v60), v57), v59, *v15);
          v26 += 2;
          ++v15;
        }
        while (v26 <= (v16 - 2));
        goto LABEL_72;
      }
    }
LABEL_69:
    LODWORD(v26) = 0;
    goto LABEL_72;
  }
  if (v8 != 1 || *v13 != 1.0) {
    goto LABEL_69;
  }
  if ((int)v16 >= 2)
  {
    unint64_t v26 = 0;
    uint64_t v79 = v15;
    uint64_t v80 = a3;
    do
    {
      float32x2_t v81 = *v79++;
      *v80++ = v81;
      v26 += 2;
    }
    while (v26 <= (v16 - 2));
  }
  else
  {
    LODWORD(v26) = 0;
  }
  int32x4_t v15 = (float32x2_t *)((char *)v15 + 4 * v26);
LABEL_72:
  if ((int)v26 < (int)v16)
  {
    uint64_t v83 = v26;
    uint64_t v84 = v11 + 4 * v12 + 4;
    uint64_t v85 = (v12 + 1) - 1;
    uint64_t v86 = 4 * a5;
    do
    {
      float v87 = *v13 * v15->f32[0];
      if (v8 >= 2)
      {
        uint64_t v88 = -4 * a5;
        uint64_t result = 4 * a5;
        uint64_t v89 = v85;
        int v90 = (float *)v84;
        do
        {
          float v91 = *v90++;
          float v87 = v87 + (float)(v91 * (float)(*(float *)((char *)v15->f32 + result) + *(float *)((char *)v15->f32 + v88)));
          result += v86;
          v88 -= v86;
          --v89;
        }
        while (v89);
      }
      a3->f32[v83++] = v87;
      int32x4_t v15 = (float32x2_t *)((char *)v15 + 4);
    }
    while (v83 != v16);
  }
  return result;
}

void cv::RowFilter<float,float,cv::SymmRowSmallNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9883F0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

float32x4_t *cv::RowFilter<float,float,cv::SymmRowSmallNoVec>::operator()(float32x4_t *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5 = result->u32[2];
  uint64_t v6 = (float *)result[2].i64[0];
  uint64_t v7 = (a5 * a4);
  if ((int)v7 >= 4)
  {
    unint64_t v8 = 0;
    int v9 = (float32x4_t *)(a2 + 4 * a5);
    do
    {
      float32x4_t v10 = vmulq_n_f32(*(float32x4_t *)(a2 + 4 * v8), *v6);
      if ((int)v5 >= 2)
      {
        uint64_t result = v9;
        uint64_t v11 = v5 - 1;
        uint64_t v12 = v6 + 1;
        do
        {
          float v13 = *v12++;
          float32x4_t v10 = vmlaq_n_f32(v10, *result, v13);
          uint64_t result = (float32x4_t *)((char *)result + 4 * a5);
          --v11;
        }
        while (v11);
      }
      *(float32x4_t *)(a3 + 4 * v_Block_object_dispose(&a9, 8) = v10;
      v8 += 4;
      ++v9;
    }
    while (v8 <= (v7 - 4));
  }
  else
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = 0;
  }
  if ((int)v8 < (int)v7)
  {
    uint64_t v14 = v8;
    uint64_t v15 = 4 * a5;
    uint64_t v16 = (float *)(a2 + v15 + 4 * v8);
    do
    {
      float v17 = *v6 * *(float *)(a2 + 4 * v14);
      if ((int)v5 >= 2)
      {
        unint64_t v18 = v16;
        uint64_t v19 = v5 - 1;
        uint64_t result = (float32x4_t *)(v6 + 1);
        do
        {
          float v20 = result->f32[0];
          uint64_t result = (float32x4_t *)((char *)result + 4);
          float v17 = v17 + (float)(v20 * *v18);
          unint64_t v18 = (float *)((char *)v18 + v15);
          --v19;
        }
        while (v19);
      }
      *(float *)(a3 + 4 * v14++) = v17;
      ++v16;
    }
    while (v14 != v7);
  }
  return result;
}

uint64_t cv::RowFilter<unsigned char,int,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988418;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2) {
      goto LABEL_18;
    }
    unint64_t v8 = (atomic_uint *)*((void *)a2 + 3);
    if (v8)
    {
      atomic_fetch_add(v8, 1u);
      int v9 = *(atomic_uint **)(a1 + 40);
      if (v9)
      {
        if (atomic_fetch_add(v9, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v12 > 2) {
        goto LABEL_16;
      }
    }
    int v13 = *((_DWORD *)a2 + 1);
    if (v13 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v13;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      uint64_t v14 = (void *)*((void *)a2 + 9);
      uint64_t v15 = *(void **)(a1 + 88);
      void *v15 = *v14;
      v15[1] = v14[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v6, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v23, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v23);
LABEL_18:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v17 != 1 && v16 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v21, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v23, 4294967081, v22, v21, __p, 2262);
    cv::error((cv *)v23, v18);
  }
  return a1;
}

void sub_225E944D0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<unsigned char,int,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988418;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::RowFilter<unsigned char,int,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988418;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowFilter<unsigned char,int,cv::RowNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int32x4_t a6)
{
  uint64_t v6 = *(unsigned int *)(result + 8);
  uint64_t v7 = *(const float **)(result + 32);
  uint64_t v8 = (a5 * a4);
  if ((int)v8 >= 4)
  {
    unint64_t v9 = 0;
    uint64_t v10 = (__int32 *)(a2 + a5);
    do
    {
      a6.i32[0] = *(_DWORD *)(a2 + v9);
      int32x4_t v11 = (int32x4_t)vld1q_dup_f32(v7);
      a6 = vmulq_s32(v11, (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a6.i8)));
      if ((int)v6 >= 2)
      {
        uint64_t v12 = v10;
        uint64_t v13 = v6 - 1;
        uint64_t v14 = v7 + 1;
        do
        {
          v11.i32[0] = *v12;
          int32x4_t v11 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v11.i8));
          int32x4_t v15 = (int32x4_t)vld1q_dup_f32(v14++);
          a6 = vmlaq_s32(a6, v15, v11);
          uint64_t v12 = (__int32 *)((char *)v12 + a5);
          --v13;
        }
        while (v13);
      }
      uint64_t result = 4 * v9;
      *(int32x4_t *)(a3 + 4 * v9) = a6;
      v9 += 4;
      ++v10;
    }
    while (v9 <= (v8 - 4));
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((int)v9 < (int)v8)
  {
    unint64_t v9 = v9;
    do
    {
      int v16 = *(_DWORD *)v7 * *(unsigned __int8 *)(a2 + v9);
      if ((int)v6 >= 2)
      {
        uint64_t v17 = a2 + a5;
        uint64_t result = v6 - 1;
        unint64_t v18 = (int *)(v7 + 1);
        do
        {
          int v19 = *v18++;
          v16 += v19 * *(unsigned __int8 *)(v17 + v9);
          v17 += a5;
          --result;
        }
        while (result);
      }
      *(_DWORD *)(a3 + 4 * v9++) = v16;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t cv::RowFilter<unsigned char,float,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988458;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2) {
      goto LABEL_18;
    }
    uint64_t v8 = (atomic_uint *)*((void *)a2 + 3);
    if (v8)
    {
      atomic_fetch_add(v8, 1u);
      unint64_t v9 = *(atomic_uint **)(a1 + 40);
      if (v9)
      {
        if (atomic_fetch_add(v9, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v12 > 2) {
        goto LABEL_16;
      }
    }
    int v13 = *((_DWORD *)a2 + 1);
    if (v13 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v13;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      uint64_t v14 = (void *)*((void *)a2 + 9);
      int32x4_t v15 = *(void **)(a1 + 88);
      void *v15 = *v14;
      v15[1] = v14[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v6, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v23, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v23);
LABEL_18:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v17 != 1 && v16 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v21, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v23, 4294967081, v22, v21, __p, 2262);
    cv::error((cv *)v23, v18);
  }
  return a1;
}

void sub_225E94A2C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<unsigned char,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988458;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::RowFilter<unsigned char,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988458;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowFilter<unsigned char,float,cv::RowNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, float32x4_t a6, float a7, float32x4_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 8);
  unint64_t v9 = *(float **)(result + 32);
  uint64_t v10 = (a5 * a4);
  if ((int)v10 >= 4)
  {
    unint64_t v11 = 0;
    uint64_t v12 = (unsigned __int32 *)(a2 + a5);
    do
    {
      a6.i32[0] = *(_DWORD *)(a2 + v11);
      a7 = *v9;
      a6 = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a6.f32))), *v9);
      if ((int)v8 >= 2)
      {
        int v13 = v12;
        uint64_t v14 = v8 - 1;
        int32x4_t v15 = v9 + 1;
        do
        {
          float v16 = *v15++;
          a7 = v16;
          a8.i32[0] = *v13;
          a8 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a8.f32)));
          a6 = vmlaq_n_f32(a6, a8, v16);
          int v13 = (unsigned __int32 *)((char *)v13 + a5);
          --v14;
        }
        while (v14);
      }
      uint64_t result = 4 * v11;
      *(float32x4_t *)(a3 + 4 * v11) = a6;
      v11 += 4;
      ++v12;
    }
    while (v11 <= (v10 - 4));
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((int)v11 < (int)v10)
  {
    unint64_t v11 = v11;
    do
    {
      LOBYTE(a7) = *(unsigned char *)(a2 + v11);
      a7 = (float)LODWORD(a7);
      float v17 = *v9 * a7;
      if ((int)v8 >= 2)
      {
        uint64_t v18 = a2 + a5;
        uint64_t v19 = v8 - 1;
        uint64_t result = (uint64_t)(v9 + 1);
        do
        {
          float v20 = *(float *)result;
          result += 4;
          a7 = v20;
          a8.i8[0] = *(unsigned char *)(v18 + v11);
          a8.f32[0] = (float)a8.u32[0];
          float v17 = v17 + (float)(v20 * a8.f32[0]);
          v18 += a5;
          --v19;
        }
        while (v19);
      }
      *(float *)(a3 + 4 * v11++) = v17;
    }
    while (v11 != v10);
  }
  return result;
}

uint64_t cv::RowFilter<unsigned char,double,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988498;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2) {
      goto LABEL_18;
    }
    uint64_t v8 = (atomic_uint *)*((void *)a2 + 3);
    if (v8)
    {
      atomic_fetch_add(v8, 1u);
      unint64_t v9 = *(atomic_uint **)(a1 + 40);
      if (v9)
      {
        if (atomic_fetch_add(v9, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v12 > 2) {
        goto LABEL_16;
      }
    }
    int v13 = *((_DWORD *)a2 + 1);
    if (v13 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v13;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      uint64_t v14 = (void *)*((void *)a2 + 9);
      int32x4_t v15 = *(void **)(a1 + 88);
      void *v15 = *v14;
      v15[1] = v14[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v6, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v23, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v23);
LABEL_18:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v17 != 1 && v16 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v21, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v23, 4294967081, v22, v21, __p, 2262);
    cv::error((cv *)v23, v18);
  }
  return a1;
}

void sub_225E94F98(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<unsigned char,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988498;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::RowFilter<unsigned char,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988498;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowFilter<unsigned char,double,cv::RowNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11 = *(unsigned int *)(result + 8);
  uint64_t v12 = *(double **)(result + 32);
  uint64_t v13 = (a5 * a4);
  if ((int)v13 >= 4)
  {
    unint64_t v14 = 0;
    uint64_t v15 = a2 + a5 + 3;
    do
    {
      LOBYTE(a6) = *(unsigned char *)(a2 + v14);
      a6 = *v12 * (double)*(unint64_t *)&a6;
      LOBYTE(a7) = *(unsigned char *)(a2 + v14 + 1);
      a7 = *v12 * (double)*(unint64_t *)&a7;
      LOBYTE(a_Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + v14 + 2);
      a8 = *v12 * (double)*(unint64_t *)&a8;
      LOBYTE(a10) = *(unsigned char *)(a2 + v14 + 3);
      a10 = (double)*(unint64_t *)&a10;
      double v16 = *v12 * a10;
      if ((int)v11 >= 2)
      {
        int v17 = (unsigned char *)v15;
        uint64_t v18 = v11 - 1;
        uint64_t v19 = v12 + 1;
        do
        {
          double v20 = *v19++;
          a10 = v20;
          LOBYTE(a11) = *(v17 - 3);
          *(double *)&unint64_t v21 = (double)*(unint64_t *)&a11;
          a6 = a6 + v20 * *(double *)&v21;
          LOBYTE(v21) = *(v17 - 2);
          *(double *)&unint64_t v22 = (double)v21;
          a7 = a7 + v20 * *(double *)&v22;
          LOBYTE(v22) = *(v17 - 1);
          *(double *)&unint64_t v23 = (double)v22;
          a8 = a8 + v20 * *(double *)&v23;
          LOBYTE(v23) = *v17;
          a11 = (double)v23;
          double v16 = v16 + v20 * a11;
          v17 += a5;
          --v18;
        }
        while (v18);
      }
      *(double *)(a3 + 8 * v14) = a6;
      *(double *)(a3 + ((8 * v14) | 8)) = a7;
      *(double *)(a3 + ((8 * v14) | 0x10)) = a8;
      uint64_t result = (8 * v14) | 0x18;
      *(double *)(a3 + result) = v16;
      v14 += 4;
      v15 += 4;
    }
    while (v14 <= (v13 - 4));
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if ((int)v14 < (int)v13)
  {
    unint64_t v14 = v14;
    do
    {
      LOBYTE(a7) = *(unsigned char *)(a2 + v14);
      a7 = (double)*(unint64_t *)&a7;
      double v24 = *v12 * a7;
      if ((int)v11 >= 2)
      {
        uint64_t v25 = a2 + a5;
        uint64_t v26 = v11 - 1;
        uint64_t result = (uint64_t)(v12 + 1);
        do
        {
          double v27 = *(double *)result;
          result += 8;
          a7 = v27;
          LOBYTE(a_Block_object_dispose(&a9, 8) = *(unsigned char *)(v25 + v14);
          a8 = (double)*(unint64_t *)&a8;
          double v24 = v24 + v27 * a8;
          v25 += a5;
          --v26;
        }
        while (v26);
      }
      *(double *)(a3 + 8 * v14++) = v24;
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t cv::RowFilter<unsigned short,float,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D9884D8;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2) {
      goto LABEL_18;
    }
    uint64_t v8 = (atomic_uint *)*((void *)a2 + 3);
    if (v8)
    {
      atomic_fetch_add(v8, 1u);
      unint64_t v9 = *(atomic_uint **)(a1 + 40);
      if (v9)
      {
        if (atomic_fetch_add(v9, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v12 > 2) {
        goto LABEL_16;
      }
    }
    int v13 = *((_DWORD *)a2 + 1);
    if (v13 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v13;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      unint64_t v14 = (void *)*((void *)a2 + 9);
      uint64_t v15 = *(void **)(a1 + 88);
      void *v15 = *v14;
      v15[1] = v14[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v6, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v23, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v23);
LABEL_18:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v17 != 1 && v16 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v21, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v23, 4294967081, v22, v21, __p, 2262);
    cv::error((cv *)v23, v18);
  }
  return a1;
}

void sub_225E95558(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<unsigned short,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9884D8;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::RowFilter<unsigned short,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9884D8;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

float *cv::RowFilter<unsigned short,float,cv::RowNoVec>::operator()(float *result, uint64_t a2, uint64_t a3, int a4, int a5, double a6, float32x4_t a7, float32x4_t a8)
{
  uint64_t v8 = *((unsigned int *)result + 2);
  unint64_t v9 = (float *)*((void *)result + 4);
  uint64_t v10 = (a5 * a4);
  if ((int)v10 >= 4)
  {
    unint64_t v11 = 0;
    uint64_t v12 = (uint16x4_t *)(a2 + 2 * a5);
    do
    {
      a7 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)(a2 + 2 * v11)));
      float32x4_t v13 = vmulq_n_f32(a7, *v9);
      if ((int)v8 >= 2)
      {
        unint64_t v14 = v12;
        uint64_t result = (float *)(v8 - 1);
        uint64_t v15 = v9 + 1;
        do
        {
          float v16 = *v15++;
          a7.i16[1] = HIWORD(v16);
          a8 = vcvtq_f32_u32(vmovl_u16(*v14));
          float32x4_t v13 = vmlaq_n_f32(v13, a8, v16);
          unint64_t v14 = (uint16x4_t *)((char *)v14 + 2 * a5);
          uint64_t result = (float *)((char *)result - 1);
        }
        while (result);
      }
      *(float32x4_t *)(a3 + 4 * v11) = v13;
      v11 += 4;
      ++v12;
    }
    while (v11 <= (v10 - 4));
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((int)v11 < (int)v10)
  {
    uint64_t v17 = v11;
    uint64_t v18 = 2 * a5;
    uint64_t v19 = (unsigned __int16 *)(a2 + v18 + 2 * v11);
    do
    {
      a7.i16[0] = *(_WORD *)(a2 + 2 * v17);
      a7.f32[0] = (float)a7.u32[0];
      float v20 = *v9 * a7.f32[0];
      if ((int)v8 >= 2)
      {
        unint64_t v21 = v19;
        uint64_t v22 = v8 - 1;
        uint64_t result = v9 + 1;
        do
        {
          float v23 = *result++;
          a7.i16[1] = HIWORD(v23);
          a8.i16[0] = *v21;
          a8.f32[0] = (float)a8.u32[0];
          float v20 = v20 + (float)(v23 * a8.f32[0]);
          unint64_t v21 = (unsigned __int16 *)((char *)v21 + v18);
          --v22;
        }
        while (v22);
      }
      *(float *)(a3 + 4 * v17++) = v20;
      ++v19;
    }
    while (v17 != v10);
  }
  return result;
}

uint64_t cv::RowFilter<unsigned short,double,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988518;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2) {
      goto LABEL_18;
    }
    uint64_t v8 = (atomic_uint *)*((void *)a2 + 3);
    if (v8)
    {
      atomic_fetch_add(v8, 1u);
      unint64_t v9 = *(atomic_uint **)(a1 + 40);
      if (v9)
      {
        if (atomic_fetch_add(v9, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v12 > 2) {
        goto LABEL_16;
      }
    }
    int v13 = *((_DWORD *)a2 + 1);
    if (v13 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v13;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      unint64_t v14 = (void *)*((void *)a2 + 9);
      uint64_t v15 = *(void **)(a1 + 88);
      void *v15 = *v14;
      v15[1] = v14[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v6, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v23, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v23);
LABEL_18:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v17 != 1 && v16 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v21, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v23, 4294967081, v22, v21, __p, 2262);
    cv::error((cv *)v23, v18);
  }
  return a1;
}

void sub_225E95AC8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<unsigned short,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988518;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::RowFilter<unsigned short,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988518;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowFilter<unsigned short,double,cv::RowNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11 = *(unsigned int *)(result + 8);
  uint64_t v12 = *(double **)(result + 32);
  uint64_t v13 = (a5 * a4);
  if ((int)v13 >= 4)
  {
    unint64_t v14 = 0;
    uint64_t v15 = a2 + 2 * a5 + 4;
    do
    {
      int v16 = (_WORD *)(a2 + 2 * v14);
      LOWORD(a6) = *v16;
      a6 = *v12 * (double)*(unint64_t *)&a6;
      LOWORD(a7) = v16[1];
      a7 = *v12 * (double)*(unint64_t *)&a7;
      LOWORD(a_Block_object_dispose(&a9, 8) = v16[2];
      a8 = *v12 * (double)*(unint64_t *)&a8;
      LOWORD(a10) = v16[3];
      a10 = (double)*(unint64_t *)&a10;
      double v17 = *v12 * a10;
      if ((int)v11 >= 2)
      {
        uint64_t v18 = (_WORD *)v15;
        uint64_t v19 = v11 - 1;
        float v20 = v12 + 1;
        do
        {
          double v21 = *v20++;
          a10 = v21;
          LOWORD(a11) = *(v18 - 2);
          *(double *)&unint64_t v22 = (double)*(unint64_t *)&a11;
          a6 = a6 + v21 * *(double *)&v22;
          LOWORD(v22) = *(v18 - 1);
          *(double *)&unint64_t v23 = (double)v22;
          a7 = a7 + v21 * *(double *)&v23;
          LOWORD(v23) = *v18;
          *(double *)&unint64_t v24 = (double)v23;
          a8 = a8 + v21 * *(double *)&v24;
          LOWORD(v24) = v18[1];
          a11 = (double)v24;
          double v17 = v17 + v21 * a11;
          v18 += a5;
          --v19;
        }
        while (v19);
      }
      *(double *)(a3 + 8 * v14) = a6;
      *(double *)(a3 + ((8 * v14) | 8)) = a7;
      uint64_t result = (8 * v14) | 0x10;
      *(double *)(a3 + result) = a8;
      *(double *)(a3 + ((8 * v14) | 0x18)) = v17;
      v14 += 4;
      v15 += 8;
    }
    while (v14 <= (v13 - 4));
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if ((int)v14 < (int)v13)
  {
    uint64_t v25 = v14;
    uint64_t v26 = 2 * a5;
    double v27 = (_WORD *)(a2 + v26 + 2 * v14);
    do
    {
      LOWORD(a7) = *(_WORD *)(a2 + 2 * v25);
      a7 = (double)*(unint64_t *)&a7;
      double v28 = *v12 * a7;
      if ((int)v11 >= 2)
      {
        float v29 = v27;
        uint64_t v30 = v11 - 1;
        uint64_t result = (uint64_t)(v12 + 1);
        do
        {
          double v31 = *(double *)result;
          result += 8;
          a7 = v31;
          LOWORD(a_Block_object_dispose(&a9, 8) = *v29;
          a8 = (double)*(unint64_t *)&a8;
          double v28 = v28 + v31 * a8;
          float v29 = (_WORD *)((char *)v29 + v26);
          --v30;
        }
        while (v30);
      }
      *(double *)(a3 + 8 * v25++) = v28;
      ++v27;
    }
    while (v25 != v13);
  }
  return result;
}

uint64_t cv::RowFilter<short,float,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988558;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2) {
      goto LABEL_18;
    }
    uint64_t v8 = (atomic_uint *)*((void *)a2 + 3);
    if (v8)
    {
      atomic_fetch_add(v8, 1u);
      unint64_t v9 = *(atomic_uint **)(a1 + 40);
      if (v9)
      {
        if (atomic_fetch_add(v9, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v12 > 2) {
        goto LABEL_16;
      }
    }
    int v13 = *((_DWORD *)a2 + 1);
    if (v13 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v13;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      unint64_t v14 = (void *)*((void *)a2 + 9);
      uint64_t v15 = *(void **)(a1 + 88);
      void *v15 = *v14;
      v15[1] = v14[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v6, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v23, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v23);
LABEL_18:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v17 != 1 && v16 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v21, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v23, 4294967081, v22, v21, __p, 2262);
    cv::error((cv *)v23, v18);
  }
  return a1;
}

void sub_225E96094(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<short,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988558;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::RowFilter<short,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988558;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

float *cv::RowFilter<short,float,cv::RowNoVec>::operator()(float *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5 = *((unsigned int *)result + 2);
  uint64_t v6 = (float *)*((void *)result + 4);
  uint64_t v7 = (a5 * a4);
  if ((int)v7 >= 4)
  {
    unint64_t v8 = 0;
    unint64_t v9 = (int16x4_t *)(a2 + 2 * a5);
    do
    {
      float32x4_t v10 = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)(a2 + 2 * v8))), *v6);
      if ((int)v5 >= 2)
      {
        uint64_t v11 = v9;
        uint64_t result = (float *)(v5 - 1);
        uint64_t v12 = v6 + 1;
        do
        {
          float v13 = *v12++;
          float32x4_t v10 = vmlaq_n_f32(v10, vcvtq_f32_s32(vmovl_s16(*v11)), v13);
          uint64_t v11 = (int16x4_t *)((char *)v11 + 2 * a5);
          uint64_t result = (float *)((char *)result - 1);
        }
        while (result);
      }
      *(float32x4_t *)(a3 + 4 * v_Block_object_dispose(&a9, 8) = v10;
      v8 += 4;
      ++v9;
    }
    while (v8 <= (v7 - 4));
  }
  else
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = 0;
  }
  if ((int)v8 < (int)v7)
  {
    uint64_t v14 = v8;
    uint64_t v15 = 2 * a5;
    int v16 = (__int16 *)(a2 + v15 + 2 * v8);
    do
    {
      float v17 = *v6 * (float)*(__int16 *)(a2 + 2 * v14);
      if ((int)v5 >= 2)
      {
        uint64_t v18 = v16;
        uint64_t v19 = v5 - 1;
        uint64_t result = v6 + 1;
        do
        {
          float v20 = *result++;
          float v17 = v17 + (float)(v20 * (float)*v18);
          uint64_t v18 = (__int16 *)((char *)v18 + v15);
          --v19;
        }
        while (v19);
      }
      *(float *)(a3 + 4 * v14++) = v17;
      ++v16;
    }
    while (v14 != v7);
  }
  return result;
}

uint64_t cv::RowFilter<short,double,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988598;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2) {
      goto LABEL_18;
    }
    unint64_t v8 = (atomic_uint *)*((void *)a2 + 3);
    if (v8)
    {
      atomic_fetch_add(v8, 1u);
      unint64_t v9 = *(atomic_uint **)(a1 + 40);
      if (v9)
      {
        if (atomic_fetch_add(v9, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v12 > 2) {
        goto LABEL_16;
      }
    }
    int v13 = *((_DWORD *)a2 + 1);
    if (v13 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v13;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      uint64_t v14 = (void *)*((void *)a2 + 9);
      uint64_t v15 = *(void **)(a1 + 88);
      void *v15 = *v14;
      v15[1] = v14[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v6, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v23, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v23);
LABEL_18:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v17 != 1 && v16 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v21, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v23, 4294967081, v22, v21, __p, 2262);
    cv::error((cv *)v23, v18);
  }
  return a1;
}

void sub_225E96604(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<short,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988598;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::RowFilter<short,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988598;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowFilter<short,double,cv::RowNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5 = *(unsigned int *)(result + 8);
  uint64_t v6 = *(double **)(result + 32);
  uint64_t v7 = (a5 * a4);
  if ((int)v7 >= 4)
  {
    unint64_t v8 = 0;
    uint64_t v9 = a2 + 2 * a5 + 4;
    do
    {
      uint64_t v10 = (__int16 *)(a2 + 2 * v8);
      double v11 = *v6 * (double)*v10;
      double v12 = *v6 * (double)v10[1];
      double v13 = *v6 * (double)v10[2];
      double v14 = *v6 * (double)v10[3];
      if ((int)v5 >= 2)
      {
        uint64_t v15 = (__int16 *)v9;
        uint64_t v16 = v5 - 1;
        int v17 = v6 + 1;
        do
        {
          double v18 = *v17++;
          double v11 = v11 + v18 * (double)*(v15 - 2);
          double v12 = v12 + v18 * (double)*(v15 - 1);
          double v13 = v13 + v18 * (double)*v15;
          double v14 = v14 + v18 * (double)v15[1];
          v15 += a5;
          --v16;
        }
        while (v16);
      }
      *(double *)(a3 + 8 * v_Block_object_dispose(&a9, 8) = v11;
      *(double *)(a3 + ((8 * v8) | 8)) = v12;
      uint64_t result = (8 * v8) | 0x10;
      *(double *)(a3 + result) = v13;
      *(double *)(a3 + ((8 * v8) | 0x18)) = v14;
      v8 += 4;
      v9 += 8;
    }
    while (v8 <= (v7 - 4));
  }
  else
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = 0;
  }
  if ((int)v8 < (int)v7)
  {
    uint64_t v19 = v8;
    uint64_t v20 = 2 * a5;
    double v21 = (__int16 *)(a2 + v20 + 2 * v8);
    do
    {
      double v22 = *v6 * (double)*(__int16 *)(a2 + 2 * v19);
      if ((int)v5 >= 2)
      {
        unint64_t v23 = v21;
        uint64_t v24 = v5 - 1;
        uint64_t result = (uint64_t)(v6 + 1);
        do
        {
          double v25 = *(double *)result;
          result += 8;
          double v22 = v22 + v25 * (double)*v23;
          unint64_t v23 = (__int16 *)((char *)v23 + v20);
          --v24;
        }
        while (v24);
      }
      *(double *)(a3 + 8 * v19++) = v22;
      ++v21;
    }
    while (v19 != v7);
  }
  return result;
}

uint64_t cv::RowFilter<float,float,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D9885D8;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2) {
      goto LABEL_18;
    }
    unint64_t v8 = (atomic_uint *)*((void *)a2 + 3);
    if (v8)
    {
      atomic_fetch_add(v8, 1u);
      uint64_t v9 = *(atomic_uint **)(a1 + 40);
      if (v9)
      {
        if (atomic_fetch_add(v9, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v12 > 2) {
        goto LABEL_16;
      }
    }
    int v13 = *((_DWORD *)a2 + 1);
    if (v13 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v13;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      double v14 = (void *)*((void *)a2 + 9);
      uint64_t v15 = *(void **)(a1 + 88);
      void *v15 = *v14;
      v15[1] = v14[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v6, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v23, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v23);
LABEL_18:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v17 != 1 && v16 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v21, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v23, 4294967081, v22, v21, __p, 2262);
    cv::error((cv *)v23, v18);
  }
  return a1;
}

void sub_225E96BD0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<float,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9885D8;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::RowFilter<float,float,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9885D8;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

float32x4_t *cv::RowFilter<float,float,cv::RowNoVec>::operator()(float32x4_t *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5 = result->u32[2];
  uint64_t v6 = (float *)result[2].i64[0];
  uint64_t v7 = (a5 * a4);
  if ((int)v7 >= 4)
  {
    unint64_t v8 = 0;
    uint64_t v9 = (float32x4_t *)(a2 + 4 * a5);
    do
    {
      float32x4_t v10 = vmulq_n_f32(*(float32x4_t *)(a2 + 4 * v8), *v6);
      if ((int)v5 >= 2)
      {
        uint64_t result = v9;
        uint64_t v11 = v5 - 1;
        uint64_t v12 = v6 + 1;
        do
        {
          float v13 = *v12++;
          float32x4_t v10 = vmlaq_n_f32(v10, *result, v13);
          uint64_t result = (float32x4_t *)((char *)result + 4 * a5);
          --v11;
        }
        while (v11);
      }
      *(float32x4_t *)(a3 + 4 * v_Block_object_dispose(&a9, 8) = v10;
      v8 += 4;
      ++v9;
    }
    while (v8 <= (v7 - 4));
  }
  else
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = 0;
  }
  if ((int)v8 < (int)v7)
  {
    uint64_t v14 = v8;
    uint64_t v15 = 4 * a5;
    int v16 = (float *)(a2 + v15 + 4 * v8);
    do
    {
      float v17 = *v6 * *(float *)(a2 + 4 * v14);
      if ((int)v5 >= 2)
      {
        double v18 = v16;
        uint64_t v19 = v5 - 1;
        uint64_t result = (float32x4_t *)(v6 + 1);
        do
        {
          float v20 = result->f32[0];
          uint64_t result = (float32x4_t *)((char *)result + 4);
          float v17 = v17 + (float)(v20 * *v18);
          double v18 = (float *)((char *)v18 + v15);
          --v19;
        }
        while (v19);
      }
      *(float *)(a3 + 4 * v14++) = v17;
      ++v16;
    }
    while (v14 != v7);
  }
  return result;
}

uint64_t cv::RowFilter<float,double,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988618;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2) {
      goto LABEL_18;
    }
    unint64_t v8 = (atomic_uint *)*((void *)a2 + 3);
    if (v8)
    {
      atomic_fetch_add(v8, 1u);
      uint64_t v9 = *(atomic_uint **)(a1 + 40);
      if (v9)
      {
        if (atomic_fetch_add(v9, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v12 > 2) {
        goto LABEL_16;
      }
    }
    int v13 = *((_DWORD *)a2 + 1);
    if (v13 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v13;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      uint64_t v14 = (void *)*((void *)a2 + 9);
      uint64_t v15 = *(void **)(a1 + 88);
      void *v15 = *v14;
      v15[1] = v14[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v6, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v23, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v23);
LABEL_18:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v17 != 1 && v16 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v21, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v23, 4294967081, v22, v21, __p, 2262);
    cv::error((cv *)v23, v18);
  }
  return a1;
}

void sub_225E97124(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<float,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988618;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::RowFilter<float,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988618;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

double *cv::RowFilter<float,double,cv::RowNoVec>::operator()(double *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5 = *((unsigned int *)result + 2);
  uint64_t v6 = (double *)*((void *)result + 4);
  uint64_t v7 = (a5 * a4);
  if ((int)v7 >= 4)
  {
    unint64_t v8 = 0;
    uint64_t v9 = a2 + 4 * a5 + 8;
    do
    {
      uint64_t v10 = (float32x2_t *)(a2 + 4 * v8);
      float64x2_t v11 = vmulq_n_f64(vcvtq_f64_f32(*v10), *v6);
      float64x2_t v12 = vmulq_n_f64(vcvtq_f64_f32(v10[1]), *v6);
      if ((int)v5 >= 2)
      {
        int v13 = (float32x2_t *)v9;
        uint64_t result = (double *)(v5 - 1);
        uint64_t v14 = v6 + 1;
        do
        {
          float64x2_t v15 = vld1q_dup_f64(v14++);
          float64x2_t v11 = vmlaq_f64(v11, vcvtq_f64_f32(v13[-1]), v15);
          float64x2_t v12 = vmlaq_f64(v12, vcvtq_f64_f32(*v13), v15);
          int v13 = (float32x2_t *)((char *)v13 + 4 * a5);
          uint64_t result = (double *)((char *)result - 1);
        }
        while (result);
      }
      *(float64x2_t *)(a3 + 8 * v_Block_object_dispose(&a9, 8) = v11;
      *(float64x2_t *)(a3 + ((8 * v8) | 0x10)) = v12;
      v8 += 4;
      v9 += 16;
    }
    while (v8 <= (v7 - 4));
  }
  else
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = 0;
  }
  if ((int)v8 < (int)v7)
  {
    uint64_t v16 = v8;
    uint64_t v17 = 4 * a5;
    double v18 = (float *)(a2 + v17 + 4 * v8);
    do
    {
      double v19 = *v6 * *(float *)(a2 + 4 * v16);
      if ((int)v5 >= 2)
      {
        float v20 = v18;
        uint64_t v21 = v5 - 1;
        uint64_t result = v6 + 1;
        do
        {
          double v22 = *result++;
          double v19 = v19 + v22 * *v20;
          float v20 = (float *)((char *)v20 + v17);
          --v21;
        }
        while (v21);
      }
      *(double *)(a3 + 8 * v16++) = v19;
      ++v18;
    }
    while (v16 != v7);
  }
  return result;
}

uint64_t cv::RowFilter<double,double,cv::RowNoVec>::RowFilter(uint64_t a1, cv::Mat *a2, int a3)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988658;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v6 == a2) {
      goto LABEL_18;
    }
    unint64_t v8 = (atomic_uint *)*((void *)a2 + 3);
    if (v8)
    {
      atomic_fetch_add(v8, 1u);
      uint64_t v9 = *(atomic_uint **)(a1 + 40);
      if (v9)
      {
        if (atomic_fetch_add(v9, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v12 > 2) {
        goto LABEL_16;
      }
    }
    int v13 = *((_DWORD *)a2 + 1);
    if (v13 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v13;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      uint64_t v14 = (void *)*((void *)a2 + 9);
      float64x2_t v15 = *(void **)(a1 + 88);
      void *v15 = *v14;
      v15[1] = v14[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v6, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v23, v6);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v23);
LABEL_18:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v17 != 1 && v16 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v21, "RowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v23, 4294967081, v22, v21, __p, 2262);
    cv::error((cv *)v23, v18);
  }
  return a1;
}

void sub_225E976AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::RowFilter<double,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988658;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::RowFilter<double,double,cv::RowNoVec>::~RowFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988658;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

double *cv::RowFilter<double,double,cv::RowNoVec>::operator()(double *result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5 = *((unsigned int *)result + 2);
  uint64_t v6 = (double *)*((void *)result + 4);
  uint64_t v7 = (a5 * a4);
  if ((int)v7 >= 4)
  {
    unint64_t v8 = 0;
    uint64_t v9 = a2 + 8 * a5 + 16;
    do
    {
      uint64_t v10 = (float64x2_t *)(a2 + 8 * v8);
      float64x2_t v11 = vmulq_n_f64(*v10, *v6);
      float64x2_t v12 = vmulq_n_f64(v10[1], *v6);
      if ((int)v5 >= 2)
      {
        int v13 = (float64x2_t *)v9;
        uint64_t result = (double *)(v5 - 1);
        uint64_t v14 = v6 + 1;
        do
        {
          float64x2_t v15 = vld1q_dup_f64(v14++);
          float64x2_t v11 = vmlaq_f64(v11, v13[-1], v15);
          float64x2_t v12 = vmlaq_f64(v12, *v13, v15);
          int v13 = (float64x2_t *)((char *)v13 + 8 * a5);
          uint64_t result = (double *)((char *)result - 1);
        }
        while (result);
      }
      *(float64x2_t *)(a3 + 8 * v_Block_object_dispose(&a9, 8) = v11;
      *(float64x2_t *)(a3 + ((8 * v8) | 0x10)) = v12;
      v8 += 4;
      v9 += 32;
    }
    while (v8 <= (v7 - 4));
  }
  else
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = 0;
  }
  if ((int)v8 < (int)v7)
  {
    uint64_t v16 = v8;
    uint64_t v17 = 8 * a5;
    double v18 = (double *)(a2 + v17 + 8 * v8);
    do
    {
      double v19 = *v6 * *(double *)(a2 + 8 * v16);
      if ((int)v5 >= 2)
      {
        float v20 = v18;
        uint64_t v21 = v5 - 1;
        uint64_t result = v6 + 1;
        do
        {
          double v22 = *result++;
          double v19 = v19 + v22 * *v20;
          float v20 = (double *)((char *)v20 + v17);
          --v21;
        }
        while (v21);
      }
      *(double *)(a3 + 8 * v16++) = v19;
      ++v18;
    }
    while (v16 != v7);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, void *a4, double a5)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v10 = (cv::Mat *)(a1 + 16);
  *(void *)a1 = &unk_26D988698;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  float64x2_t v11 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v10 == a2) {
      goto LABEL_18;
    }
    float64x2_t v12 = (atomic_uint *)*((void *)a2 + 3);
    if (v12)
    {
      atomic_fetch_add(v12, 1u);
      int v13 = *(atomic_uint **)(a1 + 40);
      if (v13)
      {
        if (atomic_fetch_add(v13, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v15 + 4 * v14++) = 0;
        uint64_t v16 = *v11;
      }
      while (v14 < v16);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v16 > 2) {
        goto LABEL_16;
      }
    }
    int v17 = *((_DWORD *)a2 + 1);
    if (v17 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v17;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      double v18 = (void *)*((void *)a2 + 9);
      double v19 = *(void **)(a1 + 88);
      void *v19 = *v18;
      v19[1] = v18[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v10, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v27, v10);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v27);
LABEL_18:
  int v21 = *(_DWORD *)(a1 + 24);
  int v20 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v21 + v20 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 124) = (uint64_t)rint(a5);
  *(void *)(a1 + 112) = *a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v21 != 1 && v20 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v25, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v27, 4294967081, v26, v25, __p, 2460);
    cv::error((cv *)v27, v22);
  }
  return a1;
}

void sub_225E97C48(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988698;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D988698;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::ColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988698;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::ColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::operator()(uint64_t result, void *a2, uint64_t a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = *(const float **)(result + 32);
    unsigned int v7 = *(_DWORD *)(result + 124);
    unsigned int v8 = *(_DWORD *)(result + 112);
    unsigned int v9 = *(_DWORD *)(result + 116);
    uint64_t v10 = *(unsigned int *)(result + 8);
    uint64_t v11 = a4;
    int32x4_t v12 = vdupq_n_s32(v7);
    int32x4_t v13 = vdupq_n_s32(v9);
    int32x4_t v14 = vnegq_s32(vdupq_n_s32(v8));
    v15.i64[0] = 0xFF000000FFLL;
    v15.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v16 = 0;
        do
        {
          uint64_t result = 4 * v16;
          int32x4_t v17 = (int32x4_t)vld1q_dup_f32(v6);
          int32x4_t v18 = vmlaq_s32(v12, *(int32x4_t *)(*a2 + 4 * v16), v17);
          if ((int)v10 >= 2)
          {
            for (uint64_t i = 1; i != v10; ++i)
            {
              int v20 = &v6[i];
              int32x4_t v21 = (int32x4_t)vld1q_dup_f32(v20);
              int32x4_t v18 = vmlaq_s32(v18, *(int32x4_t *)(a2[i] + 4 * v16), v21);
            }
          }
          int16x8_t v22 = (int16x8_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(v18, v13), v14), (int32x4_t)0), v15);
          *(int16x4_t *)v22.i8 = vmovn_s32((int32x4_t)v22);
          *(_DWORD *)(a3 + v16) = vmovn_s16(v22).u32[0];
          v16 += 4;
        }
        while (v16 <= a6 - 4);
        uint64_t v16 = v16;
      }
      else
      {
        uint64_t v16 = 0;
      }
      if ((int)v16 < a6)
      {
        do
        {
          unsigned int v23 = v7 + *(_DWORD *)(*a2 + 4 * v16) * *(_DWORD *)v6;
          if ((int)v10 >= 2)
          {
            for (uint64_t j = 1; j != v10; ++j)
              v23 += *(_DWORD *)(a2[j] + 4 * v16) * LODWORD(v6[j]);
          }
          LODWORD(result) = ((int)(v23 + v9) >> v8) & ~((int)(v23 + v9) >> v8 >> 31);
          if ((int)result >= 255) {
            uint64_t result = 255;
          }
          else {
            uint64_t result = result;
          }
          *(unsigned char *)(a3 + v16++) = result;
        }
        while (v16 != a6);
      }
      a3 += v11;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D9886E0;
  *(_DWORD *)(a1 + 16) = 1124007936;
  unsigned int v8 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  unsigned int v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2) {
      goto LABEL_18;
    }
    uint64_t v10 = (atomic_uint *)*((void *)a2 + 3);
    if (v10)
    {
      atomic_fetch_add(v10, 1u);
      uint64_t v11 = *(atomic_uint **)(a1 + 40);
      if (v11)
      {
        if (atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v14 > 2) {
        goto LABEL_16;
      }
    }
    int v15 = *((_DWORD *)a2 + 1);
    if (v15 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v15;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      uint64_t v16 = (void *)*((void *)a2 + 9);
      int32x4_t v17 = *(void **)(a1 + 88);
      void *v17 = *v16;
      v17[1] = v16[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v8, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_18:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  float v20 = a4;
  *(float *)(a1 + 116) = v20;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v19 != 1 && v18 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2460);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_225E982AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9886E0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D9886E0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::ColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9886E0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::ColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::operator()(uint64_t result, void *a2, uint64_t a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = *(float **)(result + 32);
    float v7 = *(float *)(result + 116);
    uint64_t v8 = *(unsigned int *)(result + 8);
    v9.i64[0] = 0xFF000000FFLL;
    v9.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v10 = 0;
        do
        {
          uint64_t v11 = (float *)(*a2 + 4 * v10);
          float v12 = v7 + (float)(*v6 * *v11);
          float v13 = v7 + (float)(*v6 * v11[1]);
          float v14 = v7 + (float)(*v6 * v11[2]);
          float v15 = v7 + (float)(*v6 * v11[3]);
          if ((int)v8 >= 2)
          {
            for (uint64_t i = 1; i != v8; ++i)
            {
              int32x4_t v17 = (float *)(a2[i] + 4 * v10);
              float v18 = v6[i];
              float v12 = v12 + (float)(v18 * *v17);
              float v13 = v13 + (float)(v18 * v17[1]);
              float v14 = v14 + (float)(v18 * v17[2]);
              float v15 = v15 + (float)(v18 * v17[3]);
            }
          }
          uint64_t result = (uint64_t)rint(v15);
          v19.i32[0] = (uint64_t)rint(v12);
          v19.i32[1] = (uint64_t)rint(v13);
          v19.i32[2] = (uint64_t)rint(v14);
          v19.i32[3] = result;
          int16x8_t v20 = (int16x8_t)vminq_s32(vmaxq_s32(v19, (int32x4_t)0), v9);
          *(int16x4_t *)v20.i8 = vmovn_s32((int32x4_t)v20);
          *(_DWORD *)(a3 + v10) = vmovn_s16(v20).u32[0];
          v10 += 4;
        }
        while (v10 <= a6 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < a6)
      {
        do
        {
          float v21 = v7 + (float)(*v6 * *(float *)(*a2 + 4 * v10));
          if ((int)v8 >= 2)
          {
            for (uint64_t j = 1; j != v8; ++j)
              float v21 = v21 + (float)(v6[j] * *(float *)(a2[j] + 4 * v10));
          }
          double v23 = rint(v21);
          int v24 = (uint64_t)v23 & ~((int)(uint64_t)v23 >> 31);
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          *(unsigned char *)(a3 + v10++) = v24;
        }
        while (v10 != a6);
      }
      a3 += a4;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988728;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v8 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  int32x4_t v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2) {
      goto LABEL_18;
    }
    uint64_t v10 = (atomic_uint *)*((void *)a2 + 3);
    if (v10)
    {
      atomic_fetch_add(v10, 1u);
      uint64_t v11 = *(atomic_uint **)(a1 + 40);
      if (v11)
      {
        if (atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v14 > 2) {
        goto LABEL_16;
      }
    }
    int v15 = *((_DWORD *)a2 + 1);
    if (v15 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v15;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      uint64_t v16 = (void *)*((void *)a2 + 9);
      int32x4_t v17 = *(void **)(a1 + 88);
      void *v17 = *v16;
      v17[1] = v16[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v8, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v25, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v25);
LABEL_18:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v19 != 1 && v18 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v23, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v25, 4294967081, v24, v23, __p, 2460);
    cv::error((cv *)v25, v20);
  }
  return a1;
}

void sub_225E98950(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988728;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D988728;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::ColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988728;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::ColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::operator()(uint64_t result, void *a2, uint64_t a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = *(double **)(result + 32);
    double v7 = *(double *)(result + 120);
    uint64_t v8 = *(unsigned int *)(result + 8);
    uint64_t v9 = 8 * v8;
    v10.i64[0] = 0xFF000000FFLL;
    v10.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v11 = 0;
        do
        {
          uint64_t v12 = (double *)(*a2 + 8 * v11);
          double v13 = v7 + *v6 * *v12;
          double v14 = v7 + *v6 * v12[1];
          double v15 = v7 + *v6 * v12[2];
          double v16 = v7 + *v6 * v12[3];
          if ((int)v8 >= 2)
          {
            uint64_t v17 = 8;
            do
            {
              int v18 = (double *)(a2[(unint64_t)v17 / 8] + 8 * v11);
              double v19 = v6[(unint64_t)v17 / 8];
              double v13 = v13 + v19 * *v18;
              double v14 = v14 + v19 * v18[1];
              double v15 = v15 + v19 * v18[2];
              double v16 = v16 + v19 * v18[3];
              v17 += 8;
            }
            while (v9 != v17);
          }
          uint64_t v20 = (uint64_t)rint(v14);
          uint64_t result = (uint64_t)rint(v15);
          v21.i32[0] = (uint64_t)rint(v13);
          v21.i32[1] = v20;
          v21.i64[1] = __PAIR64__((uint64_t)rint(v16), result);
          int16x8_t v22 = (int16x8_t)vminq_s32(vmaxq_s32(v21, (int32x4_t)0), v10);
          *(int16x4_t *)v22.i8 = vmovn_s32((int32x4_t)v22);
          *(_DWORD *)(a3 + v11) = vmovn_s16(v22).u32[0];
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < a6)
      {
        do
        {
          double v23 = v7 + *v6 * *(double *)(*a2 + 8 * v11);
          if ((int)v8 >= 2)
          {
            uint64_t v24 = 8;
            do
            {
              double v23 = v23 + v6[(unint64_t)v24 / 8] * *(double *)(a2[(unint64_t)v24 / 8] + 8 * v11);
              v24 += 8;
            }
            while (v9 != v24);
          }
          double v25 = rint(v23);
          int v26 = (uint64_t)v25 & ~((int)(uint64_t)v25 >> 31);
          if (v26 >= 255) {
            LOBYTE(v26) = -1;
          }
          *(unsigned char *)(a3 + v11++) = v26;
        }
        while (v11 != a6);
      }
      a3 += a4;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988770;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v8 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2) {
      goto LABEL_18;
    }
    int32x4_t v10 = (atomic_uint *)*((void *)a2 + 3);
    if (v10)
    {
      atomic_fetch_add(v10, 1u);
      uint64_t v11 = *(atomic_uint **)(a1 + 40);
      if (v11)
      {
        if (atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v14 > 2) {
        goto LABEL_16;
      }
    }
    int v15 = *((_DWORD *)a2 + 1);
    if (v15 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v15;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      double v16 = (void *)*((void *)a2 + 9);
      uint64_t v17 = *(void **)(a1 + 88);
      void *v17 = *v16;
      v17[1] = v16[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v8, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_18:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  float v20 = a4;
  *(float *)(a1 + 116) = v20;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v19 != 1 && v18 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2460);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_225E98FE8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988770;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D988770;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::ColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988770;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::ColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = *(float **)(result + 32);
    float v7 = *(float *)(result + 116);
    uint64_t v8 = *(unsigned int *)(result + 8);
    uint64_t v9 = a4;
    v10.i64[0] = 0xFFFF0000FFFFLL;
    v10.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v11 = 0;
        float v12 = *v6;
        uint64_t v13 = *a2;
        do
        {
          uint64_t v14 = (float *)(v13 + 4 * v11);
          float v15 = v7 + (float)(v12 * *v14);
          float v16 = v7 + (float)(v12 * v14[1]);
          float v17 = v7 + (float)(v12 * v14[2]);
          float v18 = v7 + (float)(v12 * v14[3]);
          if ((int)v8 >= 2)
          {
            for (uint64_t i = 1; i != v8; ++i)
            {
              float v20 = (float *)(a2[i] + 4 * v11);
              float v21 = v6[i];
              float v15 = v15 + (float)(v21 * *v20);
              float v16 = v16 + (float)(v21 * v20[1]);
              float v17 = v17 + (float)(v21 * v20[2]);
              float v18 = v18 + (float)(v21 * v20[3]);
            }
          }
          uint64_t result = (uint64_t)rint(v17);
          uint64_t v22 = (uint64_t)rint(v18);
          v23.i32[0] = (uint64_t)rint(v15);
          v23.i32[1] = (uint64_t)rint(v16);
          v23.i64[1] = __PAIR64__(v22, result);
          *(int16x4_t *)(a3 + 2 * v11) = vmovn_s32(vminq_s32(vmaxq_s32(v23, (int32x4_t)0), v10));
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < a6)
      {
        float v24 = *v6;
        uint64_t v25 = *a2;
        do
        {
          float v26 = v7 + (float)(v24 * *(float *)(v25 + 4 * v11));
          if ((int)v8 >= 2)
          {
            for (uint64_t j = 1; j != v8; ++j)
              float v26 = v26 + (float)(v6[j] * *(float *)(a2[j] + 4 * v11));
          }
          double v28 = rint(v26);
          int v29 = (uint64_t)v28 & ~((int)(uint64_t)v28 >> 31);
          if (v29 >= 0xFFFF) {
            LOWORD(v29) = -1;
          }
          *(_WORD *)(a3 + 2 * v11++) = v29;
        }
        while (v11 != a6);
      }
      a3 += v9;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D9887B8;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v8 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2) {
      goto LABEL_18;
    }
    int32x4_t v10 = (atomic_uint *)*((void *)a2 + 3);
    if (v10)
    {
      atomic_fetch_add(v10, 1u);
      uint64_t v11 = *(atomic_uint **)(a1 + 40);
      if (v11)
      {
        if (atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v14 > 2) {
        goto LABEL_16;
      }
    }
    int v15 = *((_DWORD *)a2 + 1);
    if (v15 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v15;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      float v16 = (void *)*((void *)a2 + 9);
      float v17 = *(void **)(a1 + 88);
      void *v17 = *v16;
      v17[1] = v16[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v8, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v25, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v25);
LABEL_18:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v19 != 1 && v18 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v23, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v25, 4294967081, v24, v23, __p, 2460);
    cv::error((cv *)v25, v20);
  }
  return a1;
}

void sub_225E9968C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9887B8;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D9887B8;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::ColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9887B8;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::ColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = *(double **)(result + 32);
    double v7 = *(double *)(result + 120);
    uint64_t v8 = *(unsigned int *)(result + 8);
    uint64_t v9 = 8 * v8;
    v10.i64[0] = 0xFFFF0000FFFFLL;
    v10.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v11 = 0;
        double v12 = *v6;
        uint64_t v13 = *a2;
        do
        {
          uint64_t v14 = (double *)(v13 + 8 * v11);
          double v15 = v7 + v12 * *v14;
          double v16 = v7 + v12 * v14[1];
          double v17 = v7 + v12 * v14[2];
          double v18 = v7 + v12 * v14[3];
          if ((int)v8 >= 2)
          {
            uint64_t v19 = 8;
            do
            {
              float v20 = (double *)(a2[(unint64_t)v19 / 8] + 8 * v11);
              double v21 = v6[(unint64_t)v19 / 8];
              double v15 = v15 + v21 * *v20;
              double v16 = v16 + v21 * v20[1];
              double v17 = v17 + v21 * v20[2];
              double v18 = v18 + v21 * v20[3];
              v19 += 8;
            }
            while (v9 != v19);
          }
          uint64_t result = (uint64_t)rint(v16);
          v22.i32[0] = (uint64_t)rint(v15);
          v22.i32[1] = result;
          v22.i64[1] = __PAIR64__((uint64_t)rint(v18), (uint64_t)rint(v17));
          *(int16x4_t *)(a3 + 2 * v11) = vmovn_s32(vminq_s32(vmaxq_s32(v22, (int32x4_t)0), v10));
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < a6)
      {
        double v23 = *v6;
        uint64_t v24 = *a2;
        do
        {
          double v25 = v7 + v23 * *(double *)(v24 + 8 * v11);
          if ((int)v8 >= 2)
          {
            uint64_t v26 = 8;
            do
            {
              uint64_t result = a2[(unint64_t)v26 / 8];
              double v25 = v25 + v6[(unint64_t)v26 / 8] * *(double *)(result + 8 * v11);
              v26 += 8;
            }
            while (v9 != v26);
          }
          double v27 = rint(v25);
          int v28 = (uint64_t)v27 & ~((int)(uint64_t)v27 >> 31);
          if (v28 >= 0xFFFF) {
            LOWORD(v2_Block_object_dispose(&a9, 8) = -1;
          }
          *(_WORD *)(a3 + 2 * v11++) = v28;
        }
        while (v11 != a6);
      }
      a3 += a4;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988800;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v8 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2) {
      goto LABEL_18;
    }
    int32x4_t v10 = (atomic_uint *)*((void *)a2 + 3);
    if (v10)
    {
      atomic_fetch_add(v10, 1u);
      uint64_t v11 = *(atomic_uint **)(a1 + 40);
      if (v11)
      {
        if (atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v14 > 2) {
        goto LABEL_16;
      }
    }
    int v15 = *((_DWORD *)a2 + 1);
    if (v15 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v15;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      double v16 = (void *)*((void *)a2 + 9);
      double v17 = *(void **)(a1 + 88);
      void *v17 = *v16;
      v17[1] = v16[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v8, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_18:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  float v20 = a4;
  *(float *)(a1 + 116) = v20;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v19 != 1 && v18 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2460);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_225E99D24(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988800;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D988800;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::ColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988800;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::ColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = *(float **)(result + 32);
    float v7 = *(float *)(result + 116);
    uint64_t v8 = *(unsigned int *)(result + 8);
    do
    {
      if (a6 >= 4)
      {
        uint64_t v9 = 0;
        float v10 = *v6;
        uint64_t v11 = *a2;
        do
        {
          uint64_t v12 = (float *)(v11 + 4 * v9);
          float v13 = v7 + (float)(v10 * *v12);
          float v14 = v7 + (float)(v10 * v12[1]);
          float v15 = v7 + (float)(v10 * v12[2]);
          float v16 = v7 + (float)(v10 * v12[3]);
          if ((int)v8 >= 2)
          {
            for (uint64_t i = 1; i != v8; ++i)
            {
              int v18 = (float *)(a2[i] + 4 * v9);
              float v19 = v6[i];
              float v13 = v13 + (float)(v19 * *v18);
              float v14 = v14 + (float)(v19 * v18[1]);
              float v15 = v15 + (float)(v19 * v18[2]);
              float v16 = v16 + (float)(v19 * v18[3]);
            }
          }
          uint64_t result = (uint64_t)rint(v14);
          uint64_t v20 = (uint64_t)rint(v16);
          v21.i32[0] = (uint64_t)rint(v13);
          v21.i32[1] = result;
          v21.i32[2] = (uint64_t)rint(v15);
          v21.i32[3] = v20;
          *(int16x4_t *)(a3 + 2 * v9) = vqmovn_s32(v21);
          v9 += 4;
        }
        while (v9 <= a6 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < a6)
      {
        float v22 = *v6;
        uint64_t v23 = *a2;
        do
        {
          float v24 = v7 + (float)(v22 * *(float *)(v23 + 4 * v9));
          if ((int)v8 >= 2)
          {
            for (uint64_t j = 1; j != v8; ++j)
            {
              uint64_t result = a2[j];
              float v24 = v24 + (float)(v6[j] * *(float *)(result + 4 * v9));
            }
          }
          uint64_t v26 = (uint64_t)rint(v24);
          if ((int)v26 <= -32768) {
            LODWORD(v26) = -32768;
          }
          if ((int)v26 >= 0x7FFF) {
            LOWORD(v26) = 0x7FFF;
          }
          *(_WORD *)(a3 + 2 * v9++) = v26;
        }
        while (v9 != a6);
      }
      a3 += a4;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988848;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v8 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2) {
      goto LABEL_18;
    }
    float v10 = (atomic_uint *)*((void *)a2 + 3);
    if (v10)
    {
      atomic_fetch_add(v10, 1u);
      uint64_t v11 = *(atomic_uint **)(a1 + 40);
      if (v11)
      {
        if (atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v14 > 2) {
        goto LABEL_16;
      }
    }
    int v15 = *((_DWORD *)a2 + 1);
    if (v15 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v15;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      float v16 = (void *)*((void *)a2 + 9);
      double v17 = *(void **)(a1 + 88);
      void *v17 = *v16;
      v17[1] = v16[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v8, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v25, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v25);
LABEL_18:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v19 != 1 && v18 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v23, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v25, 4294967081, v24, v23, __p, 2460);
    cv::error((cv *)v25, v20);
  }
  return a1;
}

void sub_225E9A3C0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988848;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D988848;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::ColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988848;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::ColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = *(double **)(result + 32);
    double v7 = *(double *)(result + 120);
    uint64_t v8 = a4;
    uint64_t v9 = *(unsigned int *)(result + 8);
    uint64_t v10 = 8 * v9;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v11 = 0;
        double v12 = *v6;
        uint64_t v13 = *a2;
        do
        {
          uint64_t v14 = (double *)(v13 + 8 * v11);
          double v15 = v7 + v12 * *v14;
          double v16 = v7 + v12 * v14[1];
          double v17 = v7 + v12 * v14[2];
          double v18 = v7 + v12 * v14[3];
          if ((int)v9 >= 2)
          {
            uint64_t v19 = 8;
            do
            {
              uint64_t v20 = (double *)(a2[(unint64_t)v19 / 8] + 8 * v11);
              double v21 = v6[(unint64_t)v19 / 8];
              double v15 = v15 + v21 * *v20;
              double v16 = v16 + v21 * v20[1];
              double v17 = v17 + v21 * v20[2];
              double v18 = v18 + v21 * v20[3];
              v19 += 8;
            }
            while (v10 != v19);
          }
          uint64_t v22 = (uint64_t)rint(v16);
          v23.i32[0] = (uint64_t)rint(v15);
          v23.i32[1] = v22;
          v23.i64[1] = __PAIR64__((uint64_t)rint(v18), (uint64_t)rint(v17));
          uint64_t result = 2 * v11;
          *(int16x4_t *)(a3 + 2 * v11) = vqmovn_s32(v23);
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < a6)
      {
        double v24 = *v6;
        uint64_t v25 = *a2;
        do
        {
          double v26 = v7 + v24 * *(double *)(v25 + 8 * v11);
          if ((int)v9 >= 2)
          {
            uint64_t v27 = 8;
            do
            {
              double v26 = v26 + v6[(unint64_t)v27 / 8] * *(double *)(a2[(unint64_t)v27 / 8] + 8 * v11);
              v27 += 8;
            }
            while (v10 != v27);
          }
          uint64_t result = (uint64_t)rint(v26);
          if ((int)result <= -32768) {
            LODWORD(result) = -32768;
          }
          if ((int)result >= 0x7FFF) {
            uint64_t result = 0x7FFFLL;
          }
          else {
            uint64_t result = result;
          }
          *(_WORD *)(a3 + 2 * v11++) = result;
        }
        while (v11 != a6);
      }
      a3 += v8;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988890;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v8 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2) {
      goto LABEL_18;
    }
    uint64_t v10 = (atomic_uint *)*((void *)a2 + 3);
    if (v10)
    {
      atomic_fetch_add(v10, 1u);
      uint64_t v11 = *(atomic_uint **)(a1 + 40);
      if (v11)
      {
        if (atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v14 > 2) {
        goto LABEL_16;
      }
    }
    int v15 = *((_DWORD *)a2 + 1);
    if (v15 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v15;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      double v16 = (void *)*((void *)a2 + 9);
      double v17 = *(void **)(a1 + 88);
      void *v17 = *v16;
      v17[1] = v16[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v8, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_18:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  float v20 = a4;
  *(float *)(a1 + 116) = v20;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v19 != 1 && v18 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2460);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_225E9AA50(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988890;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D988890;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::ColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988890;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::ColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  if (a5)
  {
    double v7 = *(float **)(result + 32);
    LODWORD(a7) = *(_DWORD *)(result + 116);
    uint64_t v8 = *(unsigned int *)(result + 8);
    float32x4_t v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    do
    {
      if (a6 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *a2;
        do
        {
          float32x4_t v12 = vmlaq_n_f32(v9, *(float32x4_t *)(v11 + 4 * v10), *v7);
          if ((int)v8 >= 2)
          {
            for (uint64_t i = 1; i != v8; ++i)
              float32x4_t v12 = vmlaq_n_f32(v12, *(float32x4_t *)(a2[i] + 4 * v10), v7[i]);
          }
          *(float32x4_t *)(a3 + 4 * v10) = v12;
          v10 += 4;
        }
        while (v10 <= a6 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < a6)
      {
        uint64_t v14 = *a2;
        do
        {
          float v15 = *(float *)&a7 + (float)(*v7 * *(float *)(v14 + 4 * v10));
          if ((int)v8 >= 2)
          {
            for (uint64_t j = 1; j != v8; ++j)
              float v15 = v15 + (float)(v7[j] * *(float *)(a2[j] + 4 * v10));
          }
          *(float *)(a3 + 4 * v10++) = v15;
        }
        while (v10 != a6);
      }
      a3 += a4;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D9888D8;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v8 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  float32x4_t v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2) {
      goto LABEL_18;
    }
    uint64_t v10 = (atomic_uint *)*((void *)a2 + 3);
    if (v10)
    {
      atomic_fetch_add(v10, 1u);
      uint64_t v11 = *(atomic_uint **)(a1 + 40);
      if (v11)
      {
        if (atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v14 > 2) {
        goto LABEL_16;
      }
    }
    int v15 = *((_DWORD *)a2 + 1);
    if (v15 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v15;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      double v16 = (void *)*((void *)a2 + 9);
      double v17 = *(void **)(a1 + 88);
      void *v17 = *v16;
      v17[1] = v16[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v8, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v25, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v25);
LABEL_18:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v19 != 1 && v18 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v23, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v25, 4294967081, v24, v23, __p, 2460);
    cv::error((cv *)v25, v20);
  }
  return a1;
}

void sub_225E9B064(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9888D8;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D9888D8;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::ColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9888D8;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::ColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = *(double **)(result + 32);
    uint64_t v7 = *(uint64_t *)(result + 120);
    uint64_t v8 = *(unsigned int *)(result + 8);
    float64x2_t v9 = (float64x2_t)vdupq_lane_s64(v7, 0);
    uint64_t v10 = 8 * v8;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *a2;
        do
        {
          uint64_t v13 = v12 + 8 * v11;
          double v14 = *(double *)&v7 + *v6 * *(double *)v13;
          float64x2_t v15 = vmlaq_n_f64(v9, *(float64x2_t *)(v13 + 8), *v6);
          double v16 = *(double *)&v7 + *v6 * *(double *)(v13 + 24);
          if ((int)v8 >= 2)
          {
            uint64_t v17 = 8;
            do
            {
              uint64_t v18 = a2[(unint64_t)v17 / 8] + 8 * v11;
              double v19 = v6[(unint64_t)v17 / 8];
              double v14 = v14 + v19 * *(double *)v18;
              float64x2_t v15 = vmlaq_n_f64(v15, *(float64x2_t *)(v18 + 8), v19);
              double v16 = v16 + v19 * *(double *)(v18 + 24);
              v17 += 8;
            }
            while (v10 != v17);
          }
          *(double *)(a3 + 8 * v11) = v14;
          *(float64x2_t *)(a3 + ((8 * v11) | 8)) = v15;
          *(double *)(a3 + ((8 * v11) | 0x18)) = v16;
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < a6)
      {
        uint64_t v20 = *a2;
        do
        {
          double v21 = *(double *)&v7 + *v6 * *(double *)(v20 + 8 * v11);
          if ((int)v8 >= 2)
          {
            uint64_t v22 = 8;
            do
            {
              double v21 = v21 + v6[(unint64_t)v22 / 8] * *(double *)(a2[(unint64_t)v22 / 8] + 8 * v11);
              v22 += 8;
            }
            while (v10 != v22);
          }
          *(double *)(a3 + 8 * v11++) = v21;
        }
        while (v11 != a6);
      }
      a3 += a4;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnSmallFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::SymmColumnSmallFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, void *a5, double a6)
{
  uint64_t v7 = cv::SymmColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::SymmColumnFilter(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v7 = &unk_26D988920;
  if (*(_DWORD *)(v7 + 8) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "this->ksize == 3");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnSmallFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2629);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_225E9B518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::SymmColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~SymmColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, void *a5, double a6)
{
  uint64_t v8 = cv::ColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5, a6);
  *(void *)uint64_t v8 = &unk_26D988980;
  *(_DWORD *)(v8 + 12_Block_object_dispose(&a9, 8) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v12, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v14, 4294967081, v13, v12, __p, 2523);
    cv::error((cv *)v14, v9);
  }
  return a1;
}

void sub_225E9B674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::ColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988698;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D988698;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

uint64_t cv::SymmColumnSmallFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~SymmColumnSmallFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988698;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmColumnSmallFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~SymmColumnSmallFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988698;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmColumnSmallFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0) {
    int v7 = *(_DWORD *)(result + 8);
  }
  else {
    int v7 = v6 + 1;
  }
  uint64_t v8 = (unsigned int *)(*(void *)(result + 32) + 4 * (v7 >> 1));
  unsigned int v9 = *v8;
  if (*v8 == -2)
  {
    BOOL v12 = 0;
    signed int v11 = v8[1];
    BOOL v10 = v11 == 1;
  }
  else if (v9 == 2)
  {
    BOOL v10 = 0;
    signed int v11 = v8[1];
    BOOL v12 = v11 == 1;
  }
  else
  {
    BOOL v12 = 0;
    BOOL v10 = 0;
    signed int v11 = v8[1];
  }
  if (v11 == 1 || v11 == -1)
  {
    if (v11 + *(v8 - 1)) {
      BOOL v14 = 0;
    }
    else {
      BOOL v14 = v9 == 0;
    }
    int v15 = v14;
    if (a5) {
      goto LABEL_23;
    }
  }
  else
  {
    int v15 = 0;
    if (a5)
    {
LABEL_23:
      uint64_t v16 = (uint64_t)v7 >> 1;
      uint64_t v17 = *(void *)(result + 112);
      uint64_t v18 = (int32x2_t **)(a2 + 8 * v16);
      int v19 = *(_DWORD *)(result + 128);
      unsigned int v20 = *(_DWORD *)(result + 124) + HIDWORD(v17);
      uint64_t result = a4;
      uint64_t v21 = a6 - 4;
      int32x2_t v22 = vdup_n_s32(v11);
      int32x2_t v23 = vdup_n_s32(v9);
      int32x2_t v24 = vdup_n_s32(v20);
      int32x2_t v25 = vneg_s32(vdup_n_s32(v17));
      do
      {
        double v26 = *(v18 - 1);
        uint64_t v27 = *v18;
        int v29 = v18[1];
        ++v18;
        int v28 = v29;
        if (v19)
        {
          uint64_t v32 = 0;
          if (!v12)
          {
            if (v10)
            {
              if (a6 >= 4)
              {
                float32x2_t v47 = v27 + 1;
                uint64_t v48 = v26 + 1;
                uint64_t v49 = v28 + 1;
                do
                {
                  int32x2_t v50 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vsub_s32(vadd_s32(v24, v48[-1]), vadd_s32(v47[-1], v47[-1])), v49[-1]), v25), 0), (int32x2_t)0xFF000000FFLL);
                  uint64_t v51 = (unsigned char *)(a3 + v32);
                  v51[1] = v50.i8[4];
                  *uint64_t v51 = v50.i8[0];
                  int32x2_t v52 = *v48;
                  v48 += 2;
                  int32x2_t v53 = v52;
                  int32x2_t v54 = *v47;
                  v47 += 2;
                  int32x2_t v55 = v54;
                  int32x2_t v56 = *v49;
                  v49 += 2;
                  int32x2_t v57 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vsub_s32(vadd_s32(v24, v53), vadd_s32(v55, v55)), v56), v25), 0), (int32x2_t)0xFF000000FFLL);
                  v51[3] = v57.i8[4];
                  v32 += 4;
                  v51[2] = v57.i8[0];
                }
                while (v32 <= v21);
                uint64_t v32 = v32;
              }
              if ((int)v32 < a6)
              {
                do
                {
                  int v58 = (int)(v20 + v26->i32[v32] - 2 * v27->i32[v32] + v28->i32[v32]) >> v17;
                  int v59 = v58 & ~(v58 >> 31);
                  if (v59 >= 255) {
                    LOBYTE(v59) = -1;
                  }
                  *(unsigned char *)(a3 + v32++) = v59;
                }
                while (a6 != v32);
                goto LABEL_95;
              }
            }
            else
            {
              if (a6 >= 4)
              {
                float32x2_t v70 = v28 + 1;
                float32x2_t v71 = v26 + 1;
                uint64_t v72 = v27 + 1;
                do
                {
                  int32x2_t v73 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(vmla_s32(v24, v72[-1], v23), vadd_s32(v70[-1], v71[-1]), v22), v25), 0), (int32x2_t)0xFF000000FFLL);
                  uint64_t v74 = (unsigned char *)(a3 + v32);
                  v74[1] = v73.i8[4];
                  *uint64_t v74 = v73.i8[0];
                  int32x2_t v75 = *v71;
                  v71 += 2;
                  int32x2_t v76 = v75;
                  int32x2_t v77 = *v70;
                  v70 += 2;
                  int32x2_t v78 = vadd_s32(v77, v76);
                  int32x2_t v79 = *v72;
                  v72 += 2;
                  int32x2_t v80 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(vmla_s32(v24, v79, v23), v78, v22), v25), 0), (int32x2_t)0xFF000000FFLL);
                  v74[3] = v80.i8[4];
                  v32 += 4;
                  v74[2] = v80.i8[0];
                }
                while (v32 <= v21);
                uint64_t v32 = v32;
              }
              if ((int)v32 < a6)
              {
                do
                {
                  int v81 = (int)(v20 + v27->i32[v32] * v9 + (v28->i32[v32] + v26->i32[v32]) * v11) >> v17;
                  int v82 = v81 & ~(v81 >> 31);
                  if (v82 >= 255) {
                    LOBYTE(v82) = -1;
                  }
                  *(unsigned char *)(a3 + v32++) = v82;
                }
                while (a6 != v32);
                goto LABEL_95;
              }
            }
LABEL_73:
            if ((int)v32 < a6)
            {
              do
              {
                int v83 = (int)(v20 + v27->i32[v32] * v9 + (v28->i32[v32] + v26->i32[v32]) * v11) >> v17;
                int v84 = v83 & ~(v83 >> 31);
                if (v84 >= 255) {
                  LOBYTE(v84) = -1;
                }
                *(unsigned char *)(a3 + v32++) = v84;
              }
              while (a6 != v32);
            }
            goto LABEL_95;
          }
          if (a6 >= 4)
          {
            uint64_t v33 = v27 + 1;
            uint64_t v34 = v26 + 1;
            uint64_t v35 = v28 + 1;
            do
            {
              int32x2_t v36 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vadd_s32(vadd_s32(v24, v34[-1]), vadd_s32(v33[-1], v33[-1])), v35[-1]), v25), 0), (int32x2_t)0xFF000000FFLL);
              uint64_t v37 = (unsigned char *)(a3 + v32);
              v37[1] = v36.i8[4];
              *uint64_t v37 = v36.i8[0];
              int32x2_t v38 = *v34;
              v34 += 2;
              int32x2_t v39 = v38;
              int32x2_t v40 = *v33;
              v33 += 2;
              int32x2_t v41 = vadd_s32(v40, v40);
              int32x2_t v42 = *v35;
              v35 += 2;
              int32x2_t v43 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vadd_s32(vadd_s32(v24, v39), v41), v42), v25), 0), (int32x2_t)0xFF000000FFLL);
              void v37[3] = v43.i8[4];
              v32 += 4;
              _DWORD v37[2] = v43.i8[0];
            }
            while (v32 <= v21);
            uint64_t v32 = v32;
          }
          if ((int)v32 >= a6) {
            goto LABEL_73;
          }
          do
          {
            int v44 = (int)(v20 + v26->i32[v32] + 2 * v27->i32[v32] + v28->i32[v32]) >> v17;
            int v45 = v44 & ~(v44 >> 31);
            if (v45 >= 255) {
              LOBYTE(v45) = -1;
            }
            *(unsigned char *)(a3 + v32++) = v45;
          }
          while (a6 != v32);
        }
        else if (v15)
        {
          if (v11 >= 0) {
            uint64_t v30 = v26;
          }
          else {
            uint64_t v30 = v28;
          }
          if (v11 >= 0) {
            double v26 = v28;
          }
          if (a6 >= 4)
          {
            uint64_t v31 = 0;
            float32x2_t v60 = v26 + 1;
            uint64_t v61 = v30 + 1;
            do
            {
              uint64_t v62 = (unsigned char *)(a3 + v31);
              int32x2_t v63 = vmin_s32(vmax_s32(vshl_s32(vsub_s32(vadd_s32(v24, v60[-1]), v61[-1]), v25), 0), (int32x2_t)0xFF000000FFLL);
              v62[1] = v63.i8[4];
              *uint64_t v62 = v63.i8[0];
              int32x2_t v64 = *v60;
              v60 += 2;
              int32x2_t v65 = v64;
              int32x2_t v66 = *v61;
              v61 += 2;
              int32x2_t v67 = vmin_s32(vmax_s32(vshl_s32(vsub_s32(vadd_s32(v24, v65), v66), v25), 0), (int32x2_t)0xFF000000FFLL);
              v62[3] = v67.i8[4];
              v62[2] = v67.i8[0];
              v31 += 4;
            }
            while (v31 <= v21);
            uint64_t v31 = v31;
          }
          else
          {
            uint64_t v31 = 0;
          }
          if ((int)v31 < a6)
          {
            do
            {
              int v68 = (int)(v20 + v26->i32[v31] - v30->i32[v31]) >> v17;
              int v69 = v68 & ~(v68 >> 31);
              if (v69 >= 255) {
                LOBYTE(v69) = -1;
              }
              *(unsigned char *)(a3 + v31++) = v69;
            }
            while (a6 != v31);
          }
        }
        else if (*v8)
        {
          if (a6 >= 4)
          {
            uint64_t v46 = 0;
            uint64_t v86 = v27 + 1;
            float v87 = v28 + 1;
            uint64_t v88 = v26 + 1;
            do
            {
              uint64_t v89 = (unsigned char *)(a3 + v46);
              int32x2_t v90 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(vmla_s32(v24, v86[-1], v23), vsub_s32(v87[-1], v88[-1]), v22), v25), 0), (int32x2_t)0xFF000000FFLL);
              v89[1] = v90.i8[4];
              *uint64_t v89 = v90.i8[0];
              int v91 = v86->i32[0];
              v86 += 2;
              unsigned int v92 = v20 + v91 * v9;
              int32x2_t v93 = *v87;
              v87 += 2;
              int32x2_t v94 = v93;
              int32x2_t v95 = *v88;
              v88 += 2;
              int32x2_t v96 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(vdup_n_s32(v92), vsub_s32(v94, v95), v22), v25), 0), (int32x2_t)0xFF000000FFLL);
              v89[3] = v96.i8[4];
              v46 += 4;
              v89[2] = v96.i8[0];
            }
            while (v46 <= v21);
            uint64_t v46 = v46;
          }
          else
          {
            uint64_t v46 = 0;
          }
          if ((int)v46 < a6)
          {
            do
            {
              int v97 = (int)(v20 + v27->i32[v46] * v9 + (v28->i32[v46] - v26->i32[v46]) * v11) >> v17;
              int v98 = v97 & ~(v97 >> 31);
              if (v98 >= 255) {
                LOBYTE(v9_Block_object_dispose(&a9, 8) = -1;
              }
              *(unsigned char *)(a3 + v46++) = v98;
            }
            while (a6 != v46);
          }
        }
        else
        {
          if (a6 >= 4)
          {
            uint64_t v85 = 0;
            int v99 = v28 + 1;
            int v100 = v26 + 1;
            do
            {
              int v101 = (unsigned char *)(a3 + v85);
              int32x2_t v102 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(v24, vsub_s32(v99[-1], v100[-1]), v22), v25), 0), (int32x2_t)0xFF000000FFLL);
              v101[1] = v102.i8[4];
              unsigned char *v101 = v102.i8[0];
              int32x2_t v103 = *v99;
              v99 += 2;
              int32x2_t v104 = v103;
              int32x2_t v105 = *v100;
              v100 += 2;
              int32x2_t v106 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(v24, vsub_s32(v104, v105), v22), v25), 0), (int32x2_t)0xFF000000FFLL);
              v101[3] = v106.i8[4];
              v101[2] = v106.i8[0];
              v85 += 4;
            }
            while (v85 <= v21);
            uint64_t v85 = v85;
          }
          else
          {
            uint64_t v85 = 0;
          }
          if ((int)v85 < a6)
          {
            do
            {
              int v107 = (int)(v20 + (v28->i32[v85] - v26->i32[v85]) * v11) >> v17;
              int v108 = v107 & ~(v107 >> 31);
              if (v108 >= 255) {
                LOBYTE(v10_Block_object_dispose(&a9, 8) = -1;
              }
              *(unsigned char *)(a3 + v85++) = v108;
            }
            while (a6 != v85);
          }
        }
LABEL_95:
        a3 += a4;
        --a5;
      }
      while (a5);
    }
  }
  return result;
}

void cv::SymmColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988698;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmColumnFilter<cv::FixedPtCastEx<int,unsigned char>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0) {
    int v7 = *(_DWORD *)(result + 8);
  }
  else {
    int v7 = v6 + 1;
  }
  int v8 = v7 >> 1;
  uint64_t v9 = (uint64_t)v7 >> 1;
  BOOL v10 = (const float *)(*(void *)(result + 32) + 4 * (v7 >> 1));
  unsigned int v11 = *(_DWORD *)(result + 124);
  unsigned int v12 = *(_DWORD *)(result + 112);
  unsigned int v13 = *(_DWORD *)(result + 116);
  BOOL v14 = (void *)(a2 + 8 * v8);
  if (*(unsigned char *)(result + 128))
  {
    if (a5)
    {
      uint64_t v34 = a4;
      uint64_t v35 = (v9 + 1);
      int32x4_t v36 = vdupq_n_s32(v11);
      int32x4_t v37 = vdupq_n_s32(v13);
      uint64_t result = a2 + 8 * v9 - 8;
      int32x4_t v38 = vnegq_s32(vdupq_n_s32(v12));
      v39.i64[0] = 0xFF000000FFLL;
      v39.i64[1] = 0xFF000000FFLL;
      do
      {
        if (a6 >= 4)
        {
          uint64_t v40 = 0;
          do
          {
            int32x4_t v41 = (int32x4_t)vld1q_dup_f32(v10);
            int32x4_t v42 = vmlaq_s32(v36, *(int32x4_t *)(*v14 + 4 * v40), v41);
            if (v6 >= 2)
            {
              int32x2_t v43 = (uint64_t *)result;
              uint64_t v44 = 1;
              do
              {
                uint64_t v45 = *v43--;
                uint64_t v46 = &v10[v44];
                int32x4_t v47 = (int32x4_t)vld1q_dup_f32(v46);
                int32x4_t v42 = vmlaq_s32(v42, vaddq_s32(*(int32x4_t *)(v45 + 4 * v40), *(int32x4_t *)(v14[v44++] + 4 * v40)), v47);
              }
              while (v35 != v44);
            }
            int16x8_t v48 = (int16x8_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(v42, v37), v38), (int32x4_t)0), v39);
            *(int16x4_t *)v48.i8 = vmovn_s32((int32x4_t)v48);
            *(_DWORD *)(a3 + v40) = vmovn_s16(v48).u32[0];
            v40 += 4;
          }
          while (v40 <= a6 - 4);
          uint64_t v40 = v40;
        }
        else
        {
          uint64_t v40 = 0;
        }
        if ((int)v40 < a6)
        {
          do
          {
            unsigned int v49 = v11 + *(_DWORD *)(*v14 + 4 * v40) * *(_DWORD *)v10;
            if (v6 >= 2)
            {
              int32x2_t v50 = (uint64_t *)result;
              uint64_t v51 = 1;
              do
              {
                uint64_t v52 = *v50--;
                v49 += (*(_DWORD *)(v52 + 4 * v40) + *(_DWORD *)(v14[v51] + 4 * v40)) * LODWORD(v10[v51]);
                ++v51;
              }
              while (v35 != v51);
            }
            int v53 = ((int)(v49 + v13) >> v12) & ~((int)(v49 + v13) >> v12 >> 31);
            if (v53 >= 255) {
              LOBYTE(v53) = -1;
            }
            *(unsigned char *)(a3 + v40++) = v53;
          }
          while (v40 != a6);
        }
        a3 += v34;
        ++v14;
        result += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    uint64_t v15 = a4;
    uint64_t v16 = (v9 + 1);
    int32x4_t v17 = vdupq_n_s32(v11);
    int32x4_t v18 = vdupq_n_s32(v13);
    uint64_t result = a2 + 8 * v9 - 8;
    int32x4_t v19 = vnegq_s32(vdupq_n_s32(v12));
    v20.i64[0] = 0xFF000000FFLL;
    v20.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v21 = 0;
        do
        {
          int32x4_t v22 = v17;
          if (v6 >= 2)
          {
            int32x2_t v23 = (uint64_t *)result;
            uint64_t v24 = 1;
            int32x4_t v22 = v17;
            do
            {
              uint64_t v25 = *v23--;
              double v26 = &v10[v24];
              int32x4_t v27 = (int32x4_t)vld1q_dup_f32(v26);
              int32x4_t v22 = vmlaq_s32(v22, vsubq_s32(*(int32x4_t *)(v14[v24++] + 4 * v21), *(int32x4_t *)(v25 + 4 * v21)), v27);
            }
            while (v16 != v24);
          }
          int16x8_t v28 = (int16x8_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(v22, v18), v19), (int32x4_t)0), v20);
          *(int16x4_t *)v28.i8 = vmovn_s32((int32x4_t)v28);
          *(_DWORD *)(a3 + v21) = vmovn_s16(v28).u32[0];
          v21 += 4;
        }
        while (v21 <= a6 - 4);
        uint64_t v21 = v21;
      }
      else
      {
        uint64_t v21 = 0;
      }
      if ((int)v21 < a6)
      {
        do
        {
          unsigned int v29 = v11;
          if (v6 >= 2)
          {
            uint64_t v30 = (uint64_t *)result;
            uint64_t v31 = 1;
            unsigned int v29 = v11;
            do
            {
              uint64_t v32 = *v30--;
              v29 += (*(_DWORD *)(v14[v31] + 4 * v21) - *(_DWORD *)(v32 + 4 * v21)) * LODWORD(v10[v31]);
              ++v31;
            }
            while (v16 != v31);
          }
          int v33 = ((int)(v29 + v13) >> v12) & ~((int)(v29 + v13) >> v12 >> 31);
          if (v33 >= 255) {
            LOBYTE(v33) = -1;
          }
          *(unsigned char *)(a3 + v21++) = v33;
        }
        while (v21 != a6);
      }
      a3 += v15;
      ++v14;
      result += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnSmallFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::SymmColumnSmallFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v6 = cv::SymmColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::SymmColumnFilter(a1, a2, a3, a4, a5);
  *(void *)uint64_t v6 = &unk_26D9889B0;
  if (*(_DWORD *)(v6 + 8) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "this->ksize == 3");
    std::string::basic_string[abi:ne180100]<0>(v10, "SymmColumnSmallFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 2629);
    cv::error((cv *)v12, v7);
  }
  return a1;
}

void sub_225E9C4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::SymmColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~SymmColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7 = cv::ColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(void *)uint64_t v7 = &unk_26D988A28;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_225E9C62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::ColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988A58;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D988A58;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

uint64_t cv::SymmColumnSmallFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~SymmColumnSmallFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988A58;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmColumnSmallFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~SymmColumnSmallFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988A58;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

int32x4_t *cv::SymmColumnSmallFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::operator()(int32x4_t *result, uint64_t a2, int16x4_t *a3, int a4, int a5, int a6, double a7, double a8, double a9, int32x4_t a10, int32x4_t a11, int32x4_t a12)
{
  int v12 = result->i32[2];
  if (v12 >= 0) {
    int v13 = result->i32[2];
  }
  else {
    int v13 = v12 + 1;
  }
  BOOL v14 = (unsigned int *)(result[2].i64[0] + 4 * (v13 >> 1));
  unsigned int v15 = *v14;
  if (*v14 == -2)
  {
    BOOL v18 = 0;
    signed int v17 = v14[1];
    BOOL v16 = v17 == 1;
  }
  else if (v15 == 2)
  {
    BOOL v16 = 0;
    signed int v17 = v14[1];
    BOOL v18 = v17 == 1;
  }
  else
  {
    BOOL v18 = 0;
    BOOL v16 = 0;
    signed int v17 = v14[1];
  }
  if (v17 == 1 || v17 == -1)
  {
    if (v17 + *(v14 - 1)) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v15 == 0;
    }
    int v21 = v20;
    if (a5) {
      goto LABEL_23;
    }
  }
  else
  {
    int v21 = 0;
    if (a5)
    {
LABEL_23:
      uint64_t v22 = (uint64_t)v13 >> 1;
      unsigned int v24 = result[7].u32[1];
      int v23 = result[7].i32[2];
      uint64_t v25 = (int32x4_t **)(a2 + 8 * v22);
      uint64_t v26 = a6 - 4;
      uint64_t result = *v25;
      a10.i64[0] = __PAIR64__(v24, v17);
      int32x4_t v27 = vdupq_n_s32(v17);
      int32x4_t v28 = vdupq_n_s32(v15);
      int32x4_t v29 = vdupq_n_s32(v24);
      int32x4_t v30 = vzip1q_s32(a10, a10);
      v30.i32[2] = v17;
      do
      {
        uint64_t v31 = result;
        uint64_t v32 = v25[1];
        ++v25;
        uint64_t result = v32;
        int v33 = *(v25 - 2);
        if (v23)
        {
          uint64_t v36 = 0;
          if (!v18)
          {
            if (v16)
            {
              if (a6 >= 4)
              {
                uint64_t v46 = *(v25 - 2);
                int32x4_t v47 = v31;
                int16x8_t v48 = result;
                unsigned int v49 = a3;
                do
                {
                  int32x4_t v50 = *v46++;
                  int32x4_t v51 = v50;
                  int32x4_t v52 = *v47++;
                  int32x4_t v53 = v52;
                  int32x4_t v54 = *v48++;
                  a12 = vaddq_s32(v53, v53);
                  a11 = vaddq_s32(vsubq_s32(vaddq_s32(v51, v29), a12), v54);
                  *v49++ = vqmovn_s32(a11);
                  v36 += 4;
                }
                while (v36 <= v26);
                uint64_t v36 = v36;
              }
              if ((int)v36 < a6)
              {
                do
                {
                  int v55 = v33->i32[v36] + v24 - 2 * v31->i32[v36] + result->i32[v36];
                  if (v55 <= -32768) {
                    int v55 = -32768;
                  }
                  if (v55 >= 0x7FFF) {
                    LOWORD(v55) = 0x7FFF;
                  }
                  a3->i16[v36++] = v55;
                }
                while (a6 != v36);
                goto LABEL_108;
              }
            }
            else
            {
              if (a6 >= 4)
              {
                int32x2_t v63 = *(v25 - 2);
                int32x2_t v64 = result;
                int32x2_t v65 = v31;
                int32x2_t v66 = a3;
                do
                {
                  int32x4_t v67 = *v63++;
                  int32x4_t v68 = v67;
                  int32x4_t v69 = *v64++;
                  a11 = vaddq_s32(v69, v68);
                  int32x4_t v70 = *v65++;
                  a12.i32[3] = v70.i32[3];
                  *v66++ = vqmovn_s32(vmlaq_s32(vmlaq_s32(v29, v70, v28), a11, v27));
                  v36 += 4;
                }
                while (v36 <= v26);
                uint64_t v36 = v36;
              }
              if ((int)v36 < a6)
              {
                do
                {
                  int v71 = v24 + v31->i32[v36] * v15 + (result->i32[v36] + v33->i32[v36]) * v17;
                  if (v71 <= -32768) {
                    int v71 = -32768;
                  }
                  if (v71 >= 0x7FFF) {
                    LOWORD(v71) = 0x7FFF;
                  }
                  a3->i16[v36++] = v71;
                }
                while (a6 != v36);
                goto LABEL_108;
              }
            }
LABEL_82:
            if ((int)v36 < a6)
            {
              do
              {
                int v72 = v24 + v31->i32[v36] * v15 + (result->i32[v36] + v33->i32[v36]) * v17;
                if (v72 <= -32768) {
                  int v72 = -32768;
                }
                if (v72 >= 0x7FFF) {
                  LOWORD(v72) = 0x7FFF;
                }
                a3->i16[v36++] = v72;
              }
              while (a6 != v36);
            }
            goto LABEL_108;
          }
          if (a6 >= 4)
          {
            int32x4_t v37 = *(v25 - 2);
            int32x4_t v38 = v31;
            int32x4_t v39 = result;
            uint64_t v40 = a3;
            do
            {
              int32x4_t v41 = *v37++;
              int32x4_t v42 = v41;
              int32x4_t v43 = *v38++;
              a12 = vaddq_s32(v43, v43);
              int32x4_t v44 = *v39++;
              a11 = vaddq_s32(vaddq_s32(vaddq_s32(v42, v29), a12), v44);
              *v40++ = vqmovn_s32(a11);
              v36 += 4;
            }
            while (v36 <= v26);
            uint64_t v36 = v36;
          }
          if ((int)v36 >= a6) {
            goto LABEL_82;
          }
          do
          {
            int v45 = v33->i32[v36] + v24 + 2 * v31->i32[v36] + result->i32[v36];
            if (v45 <= -32768) {
              int v45 = -32768;
            }
            if (v45 >= 0x7FFF) {
              LOWORD(v45) = 0x7FFF;
            }
            a3->i16[v36++] = v45;
          }
          while (a6 != v36);
        }
        else if (v21)
        {
          if (v17 >= 0) {
            uint64_t v34 = *(v25 - 2);
          }
          else {
            uint64_t v34 = result;
          }
          if (v17 >= 0) {
            int v33 = result;
          }
          if (a6 >= 4)
          {
            uint64_t v35 = 0;
            int32x2_t v56 = v33;
            int32x2_t v57 = v34;
            int v58 = a3;
            do
            {
              int32x4_t v59 = *v56++;
              int32x4_t v60 = v59;
              int32x4_t v61 = *v57++;
              a12.i32[3] = v61.i32[3];
              a11 = vsubq_s32(vaddq_s32(v60, v29), v61);
              *v58++ = vqmovn_s32(a11);
              v35 += 4;
            }
            while (v35 <= v26);
            uint64_t v35 = v35;
          }
          else
          {
            uint64_t v35 = 0;
          }
          if ((int)v35 < a6)
          {
            do
            {
              int v62 = v33->i32[v35] + v24 - v34->i32[v35];
              if (v62 <= -32768) {
                int v62 = -32768;
              }
              if (v62 >= 0x7FFF) {
                LOWORD(v62) = 0x7FFF;
              }
              a3->i16[v35++] = v62;
            }
            while (a6 != v35);
          }
        }
        else if (v15)
        {
          if (a6 < 4)
          {
            uint64_t v82 = 0;
          }
          else
          {
            uint64_t v81 = 0;
            uint64_t v82 = 0;
            int v83 = a3;
            do
            {
              a11.i64[0] = result[v81].i64[0];
              a12.i64[0] = v33[v81].i64[0];
              a11.i32[2] = result[v81].i32[2];
              a12.i32[2] = v33[v81].i32[2];
              int32x4_t v84 = vsubq_s32(a11, a12);
              a11.i32[3] = v31[v81].i32[2];
              a12.i32[3] = v15;
              *(int32x2_t *)v85.i8 = vmla_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v31[v81].i8, *(int32x2_t *)v28.i8);
              int32x4_t v86 = vmulq_s32(v84, v30);
              v86.i32[3] = vmlaq_s32(v30, a11, a12).i32[3];
              v85.i32[2] = v86.i32[3];
              v85.i32[3] = (result[v81].i32[3] - v33[v81].i32[3]) * v17;
              a11 = vaddq_s32(v86, v85);
              *v83++ = vqmovn_s32(a11);
              v82 += 4;
              ++v81;
            }
            while (v82 <= v26);
            uint64_t v82 = v82;
          }
          if ((int)v82 < a6)
          {
            do
            {
              int v87 = v24 + v31->i32[v82] * v15 + (result->i32[v82] - v33->i32[v82]) * v17;
              if (v87 <= -32768) {
                int v87 = -32768;
              }
              if (v87 >= 0x7FFF) {
                LOWORD(v87) = 0x7FFF;
              }
              a3->i16[v82++] = v87;
            }
            while (a6 != v82);
          }
        }
        else
        {
          uint64_t v73 = 0;
          if (a6 >= 4)
          {
            uint64_t v74 = result;
            int32x2_t v75 = *(v25 - 2);
            int32x2_t v76 = a3;
            do
            {
              int32x4_t v77 = *v74++;
              int32x4_t v78 = v77;
              int32x4_t v79 = *v75++;
              a11 = vsubq_s32(v78, v79);
              a12 = vmlaq_s32(v29, a11, v27);
              *v76++ = vqmovn_s32(a12);
              v73 += 4;
            }
            while (v73 <= v26);
            uint64_t v73 = v73;
          }
          if ((int)v73 < a6)
          {
            do
            {
              int v80 = v24 + (result->i32[v73] - v33->i32[v73]) * v17;
              if (v80 <= -32768) {
                int v80 = -32768;
              }
              if (v80 >= 0x7FFF) {
                LOWORD(v80) = 0x7FFF;
              }
              a3->i16[v73++] = v80;
            }
            while (a6 != v73);
          }
        }
LABEL_108:
        a3 = (int16x4_t *)((char *)a3 + a4);
        --a5;
      }
      while (a5);
    }
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988A58;
  *(_DWORD *)(a1 + 16) = 1124007936;
  int v8 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2) {
      goto LABEL_18;
    }
    BOOL v10 = (atomic_uint *)*((void *)a2 + 3);
    if (v10)
    {
      atomic_fetch_add(v10, 1u);
      unsigned int v11 = *(atomic_uint **)(a1 + 40);
      if (v11)
      {
        if (atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v14 > 2) {
        goto LABEL_16;
      }
    }
    int v15 = *((_DWORD *)a2 + 1);
    if (v15 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v15;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      BOOL v16 = (void *)*((void *)a2 + 9);
      signed int v17 = *(void **)(a1 + 88);
      void *v17 = *v16;
      v17[1] = v16[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v8, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v25, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v25);
LABEL_18:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 116) = (uint64_t)rint(a4);
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v19 != 1 && v18 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v23, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v25, 4294967081, v24, v23, __p, 2460);
    cv::error((cv *)v25, v20);
  }
  return a1;
}

void sub_225E9D054(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988A58;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D988A58;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988A58;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0) {
    int v7 = *(_DWORD *)(result + 8);
  }
  else {
    int v7 = v6 + 1;
  }
  int v8 = v7 >> 1;
  uint64_t v9 = (uint64_t)v7 >> 1;
  BOOL v10 = (const float *)(*(void *)(result + 32) + 4 * (v7 >> 1));
  unsigned int v11 = *(_DWORD *)(result + 116);
  uint64_t v12 = (uint64_t *)(a2 + 8 * v8);
  if (*(unsigned char *)(result + 120))
  {
    if (a5)
    {
      uint64_t v28 = a4;
      uint64_t v29 = (v9 + 1);
      int32x4_t v30 = vdupq_n_s32(v11);
      uint64_t v31 = a2 + 8 * v9 - 8;
      uint64_t result = 0x7FFFLL;
      do
      {
        if (a6 >= 4)
        {
          uint64_t v32 = 0;
          uint64_t v33 = *v12;
          int32x4_t v34 = (int32x4_t)vld1q_dup_f32(v10);
          do
          {
            int32x4_t v35 = vmlaq_s32(v30, *(int32x4_t *)(v33 + 4 * v32), v34);
            if (v6 >= 2)
            {
              uint64_t v36 = (uint64_t *)v31;
              uint64_t v37 = 1;
              do
              {
                uint64_t v38 = *v36--;
                int32x4_t v39 = &v10[v37];
                int32x4_t v40 = (int32x4_t)vld1q_dup_f32(v39);
                int32x4_t v35 = vmlaq_s32(v35, vaddq_s32(*(int32x4_t *)(v38 + 4 * v32), *(int32x4_t *)(v12[v37++] + 4 * v32)), v40);
              }
              while (v29 != v37);
            }
            *(int16x4_t *)(a3 + 2 * v32) = vqmovn_s32(v35);
            v32 += 4;
          }
          while (v32 <= a6 - 4);
          uint64_t v32 = v32;
        }
        else
        {
          uint64_t v32 = 0;
        }
        if ((int)v32 < a6)
        {
          float v41 = *v10;
          uint64_t v42 = *v12;
          do
          {
            int v43 = v11 + *(_DWORD *)(v42 + 4 * v32) * LODWORD(v41);
            if (v6 >= 2)
            {
              int32x4_t v44 = (uint64_t *)v31;
              uint64_t v45 = 1;
              do
              {
                uint64_t v46 = *v44--;
                v43 += (*(_DWORD *)(v46 + 4 * v32) + *(_DWORD *)(v12[v45] + 4 * v32)) * LODWORD(v10[v45]);
                ++v45;
              }
              while (v29 != v45);
            }
            if (v43 <= -32768) {
              int v43 = -32768;
            }
            if (v43 >= 0x7FFF) {
              LOWORD(v43) = 0x7FFF;
            }
            *(_WORD *)(a3 + 2 * v32++) = v43;
          }
          while (v32 != a6);
        }
        a3 += v28;
        ++v12;
        v31 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    uint64_t v13 = a4;
    uint64_t v14 = (v9 + 1);
    int32x4_t v15 = vdupq_n_s32(v11);
    uint64_t v16 = a2 + 8 * v9 - 8;
    uint64_t result = 0x7FFFLL;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v17 = 0;
        do
        {
          int32x4_t v18 = v15;
          if (v6 >= 2)
          {
            int v19 = (uint64_t *)v16;
            uint64_t v20 = 1;
            int32x4_t v18 = v15;
            do
            {
              uint64_t v21 = *v19--;
              uint64_t v22 = &v10[v20];
              int32x4_t v23 = (int32x4_t)vld1q_dup_f32(v22);
              int32x4_t v18 = vmlaq_s32(v18, vsubq_s32(*(int32x4_t *)(v12[v20++] + 4 * v17), *(int32x4_t *)(v21 + 4 * v17)), v23);
            }
            while (v14 != v20);
          }
          *(int16x4_t *)(a3 + 2 * v17) = vqmovn_s32(v18);
          v17 += 4;
        }
        while (v17 <= a6 - 4);
        uint64_t v17 = v17;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if ((int)v17 < a6)
      {
        do
        {
          int v24 = v11;
          if (v6 >= 2)
          {
            uint64_t v25 = (uint64_t *)v16;
            uint64_t v26 = 1;
            int v24 = v11;
            do
            {
              uint64_t v27 = *v25--;
              v24 += (*(_DWORD *)(v12[v26] + 4 * v17) - *(_DWORD *)(v27 + 4 * v17)) * LODWORD(v10[v26]);
              ++v26;
            }
            while (v14 != v26);
          }
          if (v24 <= -32768) {
            int v24 = -32768;
          }
          if (v24 >= 0x7FFF) {
            LOWORD(v24) = 0x7FFF;
          }
          *(_WORD *)(a3 + 2 * v17++) = v24;
        }
        while (v17 != a6);
      }
      a3 += v13;
      ++v12;
      v16 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void cv::ColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988A58;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::ColumnFilter<cv::Cast<int,short>,cv::SymmColumnSmallNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  if (a5)
  {
    int v6 = *(const float **)(result + 32);
    unsigned int v7 = *(_DWORD *)(result + 116);
    uint64_t v8 = *(unsigned int *)(result + 8);
    uint64_t v9 = a4;
    int32x4_t v10 = vdupq_n_s32(v7);
    do
    {
      if (a6 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *a2;
        int32x4_t v13 = (int32x4_t)vld1q_dup_f32(v6);
        do
        {
          int32x4_t v14 = vmlaq_s32(v10, *(int32x4_t *)(v12 + 4 * v11), v13);
          if ((int)v8 >= 2)
          {
            for (uint64_t i = 1; i != v8; ++i)
            {
              uint64_t v16 = &v6[i];
              int32x4_t v17 = (int32x4_t)vld1q_dup_f32(v16);
              int32x4_t v14 = vmlaq_s32(v14, *(int32x4_t *)(a2[i] + 4 * v11), v17);
            }
          }
          uint64_t result = 2 * v11;
          *(int16x4_t *)(a3 + 2 * v11) = vqmovn_s32(v14);
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < a6)
      {
        float v18 = *v6;
        uint64_t result = *a2;
        do
        {
          int v19 = v7 + *(_DWORD *)(result + 4 * v11) * LODWORD(v18);
          if ((int)v8 >= 2)
          {
            for (uint64_t j = 1; j != v8; ++j)
              v19 += *(_DWORD *)(a2[j] + 4 * v11) * LODWORD(v6[j]);
          }
          if (v19 <= -32768) {
            int v19 = -32768;
          }
          if (v19 >= 0x7FFF) {
            LOWORD(v19) = 0x7FFF;
          }
          *(_WORD *)(a3 + 2 * v11++) = v19;
        }
        while (v11 != a6);
      }
      a3 += v9;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnSmallFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::SymmColumnSmallFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v6 = cv::SymmColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::SymmColumnFilter(a1, a2, a3, a4, a5);
  *(void *)uint64_t v6 = &unk_26D988A88;
  if (*(_DWORD *)(v6 + 8) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "this->ksize == 3");
    std::string::basic_string[abi:ne180100]<0>(v10, "SymmColumnSmallFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 2629);
    cv::error((cv *)v12, v7);
  }
  return a1;
}

void sub_225E9D918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::SymmColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~SymmColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7 = cv::ColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(void *)uint64_t v7 = &unk_26D988B00;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_225E9DA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::ColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988B30;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D988B30;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

uint64_t cv::SymmColumnSmallFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~SymmColumnSmallFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988B30;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmColumnSmallFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~SymmColumnSmallFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988B30;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmColumnSmallFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7, double a8, double a9)
{
  int v9 = *(_DWORD *)(result + 8);
  if (v9 >= 0) {
    int v10 = *(_DWORD *)(result + 8);
  }
  else {
    int v10 = v9 + 1;
  }
  uint64_t v11 = (float *)(*(void *)(result + 32) + 4 * (v10 >> 1));
  float v12 = *v11;
  BOOL v13 = *v11 == 2.0 && v11[1] == 1.0;
  BOOL v14 = v12 == -2.0;
  *(float *)&a8 = v11[1];
  if (*(float *)&a8 == 1.0)
  {
    BOOL v15 = 1;
  }
  else
  {
    BOOL v14 = 0;
    BOOL v15 = *(float *)&a8 == -1.0;
  }
  if (!v15 || *(float *)&a8 != (float)-*(v11 - 1))
  {
    BOOL v16 = 0;
    if (!a5) {
      return result;
    }
    goto LABEL_16;
  }
  BOOL v16 = v12 == 0.0;
  if (a5)
  {
LABEL_16:
    uint64_t v17 = (uint64_t)v10 >> 1;
    int v18 = *(_DWORD *)(result + 120);
    LODWORD(a9) = *(_DWORD *)(result + 116);
    int v19 = (uint64_t *)(a2 + 8 * v17);
    uint64_t v20 = a4;
    uint64_t v21 = a6 - 4;
    uint64_t v22 = *v19;
    float32x2_t v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0);
    float32x2_t v24 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
    do
    {
      uint64_t v25 = v22;
      uint64_t v26 = v19[1];
      ++v19;
      uint64_t v22 = v26;
      uint64_t result = *(v19 - 2);
      if (v18)
      {
        if (v13)
        {
          if (a6 < 4)
          {
            uint64_t v33 = 0;
          }
          else
          {
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            do
            {
              int32x4_t v34 = (float32x2_t *)(a3 + v32);
              *int32x4_t v34 = vadd_f32(v24, vadd_f32(vmla_f32(*(float32x2_t *)(result + v32), (float32x2_t)0x4000000040000000, *(float32x2_t *)(v25 + v32)), *(float32x2_t *)(v22 + v32)));
              v34[1] = vadd_f32(v24, vadd_f32(vmla_f32(*(float32x2_t *)(result + v32 + 8), (float32x2_t)0x4000000040000000, *(float32x2_t *)(v25 + 8 + v32)), *(float32x2_t *)(v22 + 8 + v32)));
              v33 += 4;
              v32 += 16;
            }
            while (v33 <= v21);
            uint64_t v33 = v33;
          }
          if ((int)v33 >= a6) {
            goto LABEL_69;
          }
          do
          {
            *(float *)(a3 + 4 * v33) = *(float *)&a9
                                     + (float)((float)(*(float *)(result + 4 * v33)
                                                     + (float)(*(float *)(v25 + 4 * v33) * 2.0))
                                             + *(float *)(v22 + 4 * v33));
            ++v33;
          }
          while (a6 != v33);
        }
        else if (v14)
        {
          if (a6 < 4)
          {
            uint64_t v33 = 0;
          }
          else
          {
            uint64_t v38 = 0;
            uint64_t v33 = 0;
            do
            {
              int32x4_t v39 = (float32x2_t *)(a3 + v38);
              *int32x4_t v39 = vadd_f32(v24, vadd_f32(vmls_f32(*(float32x2_t *)(result + v38), (float32x2_t)0x4000000040000000, *(float32x2_t *)(v25 + v38)), *(float32x2_t *)(v22 + v38)));
              v39[1] = vadd_f32(v24, vadd_f32(vmls_f32(*(float32x2_t *)(result + v38 + 8), (float32x2_t)0x4000000040000000, *(float32x2_t *)(v25 + 8 + v38)), *(float32x2_t *)(v22 + 8 + v38)));
              v33 += 4;
              v38 += 16;
            }
            while (v33 <= v21);
            uint64_t v33 = v33;
          }
          if ((int)v33 >= a6) {
            goto LABEL_69;
          }
          do
          {
            *(float *)(a3 + 4 * v33) = *(float *)&a9
                                     + (float)((float)(*(float *)(result + 4 * v33)
                                                     + (float)(*(float *)(v25 + 4 * v33) * -2.0))
                                             + *(float *)(v22 + 4 * v33));
            ++v33;
          }
          while (a6 != v33);
        }
        else
        {
          if (a6 < 4)
          {
            uint64_t v33 = 0;
          }
          else
          {
            uint64_t v40 = 0;
            uint64_t v33 = 0;
            do
            {
              float v41 = (float32x2_t *)(a3 + v40);
              *float v41 = vadd_f32(v24, vmla_f32(vmul_n_f32(*(float32x2_t *)(v25 + v40), v12), v23, vadd_f32(*(float32x2_t *)(result + v40), *(float32x2_t *)(v22 + v40))));
              v41[1] = vadd_f32(v24, vmla_f32(vmul_n_f32(*(float32x2_t *)(v25 + 8 + v40), v12), v23, vadd_f32(*(float32x2_t *)(result + v40 + 8), *(float32x2_t *)(v22 + 8 + v40))));
              v33 += 4;
              v40 += 16;
            }
            while (v33 <= v21);
            uint64_t v33 = v33;
          }
          if ((int)v33 >= a6)
          {
LABEL_69:
            if ((int)v33 < a6)
            {
              do
              {
                *(float *)(a3 + 4 * v33) = *(float *)&a9
                                         + (float)((float)(v12 * *(float *)(v25 + 4 * v33))
                                                 + (float)((float)(*(float *)(result + 4 * v33)
                                                                 + *(float *)(v22 + 4 * v33))
                                                         * *(float *)&a8));
                ++v33;
              }
              while (a6 != v33);
            }
            goto LABEL_77;
          }
          do
          {
            *(float *)(a3 + 4 * v33) = *(float *)&a9
                                     + (float)((float)(v12 * *(float *)(v25 + 4 * v33))
                                             + (float)((float)(*(float *)(result + 4 * v33) + *(float *)(v22 + 4 * v33))
                                                     * *(float *)&a8));
            ++v33;
          }
          while (a6 != v33);
        }
      }
      else if (v16)
      {
        if (*(float *)&a8 >= 0.0) {
          uint64_t v27 = *(v19 - 2);
        }
        else {
          uint64_t v27 = v22;
        }
        if (*(float *)&a8 >= 0.0) {
          uint64_t result = v22;
        }
        if (a6 >= 4)
        {
          uint64_t v30 = 0;
          uint64_t v28 = 0;
          do
          {
            uint64_t v31 = (float32x2_t *)(a3 + v30);
            *uint64_t v31 = vadd_f32(v24, vsub_f32(*(float32x2_t *)(result + v30), *(float32x2_t *)(v27 + v30)));
            v31[1] = vadd_f32(v24, vsub_f32(*(float32x2_t *)(result + v30 + 8), *(float32x2_t *)(v27 + v30 + 8)));
            v28 += 4;
            v30 += 16;
          }
          while (v28 <= v21);
          uint64_t v28 = v28;
        }
        else
        {
          uint64_t v28 = 0;
        }
        if ((int)v28 < a6)
        {
          do
          {
            *(float *)(a3 + 4 * v2_Block_object_dispose(&a9, 8) = *(float *)&a9 + (float)(*(float *)(result + 4 * v28) - *(float *)(v27 + 4 * v28));
            ++v28;
          }
          while (a6 != v28);
        }
      }
      else if (*v11 == 0.0)
      {
        if (a6 >= 4)
        {
          uint64_t v36 = 0;
          uint64_t v29 = 0;
          do
          {
            uint64_t v37 = (float32x2_t *)(a3 + v36);
            *uint64_t v37 = vmla_f32(v24, v23, vsub_f32(*(float32x2_t *)(v22 + v36), *(float32x2_t *)(result + v36)));
            v37[1] = vmla_f32(v24, v23, vsub_f32(*(float32x2_t *)(v22 + v36 + 8), *(float32x2_t *)(result + v36 + 8)));
            v29 += 4;
            v36 += 16;
          }
          while (v29 <= v21);
          uint64_t v29 = v29;
        }
        else
        {
          uint64_t v29 = 0;
        }
        if ((int)v29 < a6)
        {
          do
          {
            *(float *)(a3 + 4 * v29) = *(float *)&a9
                                     + (float)((float)(*(float *)(v22 + 4 * v29) - *(float *)(result + 4 * v29))
                                             * *(float *)&a8);
            ++v29;
          }
          while (a6 != v29);
        }
      }
      else
      {
        if (a6 >= 4)
        {
          uint64_t v42 = 0;
          uint64_t v35 = 0;
          do
          {
            int v43 = (float32x2_t *)(a3 + v42);
            int32x2_t v44 = (int32x2_t)vadd_f32(v24, vmla_f32(vmul_n_f32(*(float32x2_t *)(v25 + v42), v12), v23, vsub_f32(*(float32x2_t *)(v22 + v42), *(float32x2_t *)(result + v42))));
            *int v43 = (float32x2_t)v44;
            *(float *)v44.i32 = v12 * *(float *)(v25 + v42 + 8);
            v43[1] = vadd_f32(v24, vmla_f32((float32x2_t)vdup_lane_s32(v44, 0), v23, vsub_f32(*(float32x2_t *)(v22 + 8 + v42), *(float32x2_t *)(result + 8 + v42))));
            v35 += 4;
            v42 += 16;
          }
          while (v35 <= v21);
          uint64_t v35 = v35;
        }
        else
        {
          uint64_t v35 = 0;
        }
        if ((int)v35 < a6)
        {
          do
          {
            *(float *)(a3 + 4 * v35) = *(float *)&a9
                                     + (float)((float)(v12 * *(float *)(v25 + 4 * v35))
                                             + (float)((float)(*(float *)(v22 + 4 * v35) - *(float *)(result + 4 * v35))
                                                     * *(float *)&a8));
            ++v35;
          }
          while (a6 != v35);
        }
      }
LABEL_77:
      a3 += v20;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::ColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988B30;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v8 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  int v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2) {
      goto LABEL_18;
    }
    int v10 = (atomic_uint *)*((void *)a2 + 3);
    if (v10)
    {
      atomic_fetch_add(v10, 1u);
      uint64_t v11 = *(atomic_uint **)(a1 + 40);
      if (v11)
      {
        if (atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v14 > 2) {
        goto LABEL_16;
      }
    }
    int v15 = *((_DWORD *)a2 + 1);
    if (v15 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v15;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      BOOL v16 = (void *)*((void *)a2 + 9);
      uint64_t v17 = *(void **)(a1 + 88);
      void *v17 = *v16;
      v17[1] = v16[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v8, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v26, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v26);
LABEL_18:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  float v20 = a4;
  *(float *)(a1 + 116) = v20;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v19 != 1 && v18 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v24, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 2460);
    cv::error((cv *)v26, v21);
  }
  return a1;
}

void sub_225E9E4E0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988B30;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D988B30;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988B30;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  int v7 = *(_DWORD *)(result + 8);
  if (v7 >= 0) {
    int v8 = *(_DWORD *)(result + 8);
  }
  else {
    int v8 = v7 + 1;
  }
  int v9 = v8 >> 1;
  uint64_t v10 = (uint64_t)v8 >> 1;
  uint64_t v11 = (float *)(*(void *)(result + 32) + 4 * (v8 >> 1));
  LODWORD(a7) = *(_DWORD *)(result + 116);
  uint64_t v12 = (uint64_t *)(a2 + 8 * v9);
  if (*(unsigned char *)(result + 120))
  {
    if (a5)
    {
      uint64_t v23 = a4;
      uint64_t v24 = (v10 + 1);
      float32x4_t v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      uint64_t v26 = a2 + 8 * v10 - 8;
      do
      {
        if (a6 >= 4)
        {
          uint64_t v27 = 0;
          uint64_t v28 = *v12;
          do
          {
            uint64_t result = 4 * v27;
            float32x4_t v29 = vmlaq_n_f32(v25, *(float32x4_t *)(v28 + 4 * v27), *v11);
            if (v7 >= 2)
            {
              uint64_t v30 = (uint64_t *)v26;
              uint64_t v31 = 1;
              do
              {
                uint64_t v32 = *v30--;
                float32x4_t v29 = vmlaq_n_f32(v29, vaddq_f32(*(float32x4_t *)(v12[v31] + 4 * v27), *(float32x4_t *)(v32 + 4 * v27)), v11[v31]);
                ++v31;
              }
              while (v24 != v31);
            }
            *(float32x4_t *)(a3 + 4 * v27) = v29;
            v27 += 4;
          }
          while (v27 <= a6 - 4);
          uint64_t v27 = v27;
        }
        else
        {
          uint64_t v27 = 0;
        }
        if ((int)v27 < a6)
        {
          uint64_t v33 = *v12;
          do
          {
            float v34 = *(float *)&a7 + (float)(*v11 * *(float *)(v33 + 4 * v27));
            if (v7 >= 2)
            {
              uint64_t result = v26;
              uint64_t v35 = 1;
              do
              {
                uint64_t v36 = *(void *)result;
                result -= 8;
                float v34 = v34 + (float)(v11[v35] * (float)(*(float *)(v12[v35] + 4 * v27) + *(float *)(v36 + 4 * v27)));
                ++v35;
              }
              while (v24 != v35);
            }
            *(float *)(a3 + 4 * v27++) = v34;
          }
          while (v27 != a6);
        }
        a3 += v23;
        ++v12;
        v26 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    uint64_t v13 = (v10 + 1);
    int32x4_t v14 = vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    uint64_t v15 = a2 + 8 * v10 - 8;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v16 = 0;
        do
        {
          float32x4_t v17 = (float32x4_t)v14;
          if (v7 >= 2)
          {
            uint64_t result = v15;
            uint64_t v18 = 1;
            float32x4_t v17 = (float32x4_t)v14;
            do
            {
              uint64_t v19 = *(void *)result;
              result -= 8;
              float32x4_t v17 = vmlaq_n_f32(v17, vsubq_f32(*(float32x4_t *)(v12[v18] + 4 * v16), *(float32x4_t *)(v19 + 4 * v16)), v11[v18]);
              ++v18;
            }
            while (v13 != v18);
          }
          *(float32x4_t *)(a3 + 4 * v16) = v17;
          v16 += 4;
        }
        while (v16 <= a6 - 4);
        uint64_t v16 = v16;
      }
      else
      {
        uint64_t v16 = 0;
      }
      if ((int)v16 < a6)
      {
        do
        {
          float v20 = *(float *)&a7;
          if (v7 >= 2)
          {
            uint64_t v21 = (uint64_t *)v15;
            uint64_t result = 1;
            float v20 = *(float *)&a7;
            do
            {
              uint64_t v22 = *v21--;
              float v20 = v20 + (float)(v11[result] * (float)(*(float *)(v12[result] + 4 * v16) - *(float *)(v22 + 4 * v16)));
              ++result;
            }
            while (v13 != result);
          }
          *(float *)(a3 + 4 * v16++) = v20;
        }
        while (v16 != a6);
      }
      a3 += a4;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void cv::ColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988B30;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::ColumnFilter<cv::Cast<float,float>,cv::SymmColumnSmallNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  if (a5)
  {
    int v7 = *(float **)(result + 32);
    LODWORD(a7) = *(_DWORD *)(result + 116);
    uint64_t v8 = *(unsigned int *)(result + 8);
    float32x4_t v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    do
    {
      if (a6 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *a2;
        do
        {
          float32x4_t v12 = vmlaq_n_f32(v9, *(float32x4_t *)(v11 + 4 * v10), *v7);
          if ((int)v8 >= 2)
          {
            for (uint64_t i = 1; i != v8; ++i)
              float32x4_t v12 = vmlaq_n_f32(v12, *(float32x4_t *)(a2[i] + 4 * v10), v7[i]);
          }
          *(float32x4_t *)(a3 + 4 * v10) = v12;
          v10 += 4;
        }
        while (v10 <= a6 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < a6)
      {
        uint64_t v14 = *a2;
        do
        {
          float v15 = *(float *)&a7 + (float)(*v7 * *(float *)(v14 + 4 * v10));
          if ((int)v8 >= 2)
          {
            for (uint64_t j = 1; j != v8; ++j)
              float v15 = v15 + (float)(v7[j] * *(float *)(a2[j] + 4 * v10));
          }
          *(float *)(a3 + 4 * v10++) = v15;
        }
        while (v10 != a6);
      }
      a3 += a4;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7 = cv::ColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(void *)uint64_t v7 = &unk_26D988B60;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_225E9ED24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::ColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9886E0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9886E0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,unsigned char>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  int v7 = *(_DWORD *)(result + 8);
  if (v7 >= 0) {
    int v8 = *(_DWORD *)(result + 8);
  }
  else {
    int v8 = v7 + 1;
  }
  int v9 = v8 >> 1;
  uint64_t v10 = (uint64_t)v8 >> 1;
  uint64_t v11 = (float *)(*(void *)(result + 32) + 4 * (v8 >> 1));
  LODWORD(a7) = *(_DWORD *)(result + 116);
  float32x4_t v12 = (void *)(a2 + 8 * v9);
  if (*(unsigned char *)(result + 120))
  {
    if (a5)
    {
      uint64_t v36 = a4;
      uint64_t v37 = (v10 + 1);
      float32x4_t v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      uint64_t v39 = a2 + 8 * v10 - 8;
      v40.i64[0] = 0xFF000000FFLL;
      v40.i64[1] = 0xFF000000FFLL;
      do
      {
        if (a6 >= 4)
        {
          uint64_t v41 = 0;
          do
          {
            float32x4_t v42 = vmlaq_n_f32(v38, *(float32x4_t *)(*v12 + 4 * v41), *v11);
            if (v7 >= 2)
            {
              int v43 = (uint64_t *)v39;
              uint64_t v44 = 1;
              do
              {
                uint64_t v45 = *v43--;
                float32x4_t v42 = vmlaq_n_f32(v42, vaddq_f32(*(float32x4_t *)(v12[v44] + 4 * v41), *(float32x4_t *)(v45 + 4 * v41)), v11[v44]);
                ++v44;
              }
              while (v37 != v44);
            }
            uint64_t result = (uint64_t)rint(v42.f32[0]);
            v42.i32[0] = result;
            v42.i32[1] = (uint64_t)rint(v42.f32[1]);
            v42.i32[2] = (uint64_t)rint(v42.f32[2]);
            v42.i32[3] = (uint64_t)rint(v42.f32[3]);
            int16x8_t v46 = (int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v42, (int32x4_t)0), v40);
            *(int16x4_t *)v46.i8 = vmovn_s32((int32x4_t)v46);
            *(_DWORD *)(a3 + v41) = vmovn_s16(v46).u32[0];
            v41 += 4;
          }
          while (v41 <= a6 - 4);
          uint64_t v41 = v41;
        }
        else
        {
          uint64_t v41 = 0;
        }
        if ((int)v41 < a6)
        {
          do
          {
            float v47 = *(float *)&a7 + (float)(*v11 * *(float *)(*v12 + 4 * v41));
            if (v7 >= 2)
            {
              int16x8_t v48 = (uint64_t *)v39;
              uint64_t v49 = 1;
              do
              {
                uint64_t v50 = *v48--;
                float v47 = v47 + (float)(v11[v49] * (float)(*(float *)(v12[v49] + 4 * v41) + *(float *)(v50 + 4 * v41)));
                ++v49;
              }
              while (v37 != v49);
            }
            double v51 = rint(v47);
            LODWORD(result) = (uint64_t)v51 & ~((int)(uint64_t)v51 >> 31);
            if ((int)result >= 255) {
              uint64_t result = 255;
            }
            else {
              uint64_t result = result;
            }
            *(unsigned char *)(a3 + v41++) = result;
          }
          while (v41 != a6);
        }
        a3 += v36;
        ++v12;
        v39 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    uint64_t v13 = a4;
    uint64_t v14 = (v10 + 1);
    uint64_t v15 = a2 + 8 * v10 - 8;
    v16.i64[0] = 0xFF000000FFLL;
    v16.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v17 = 0;
        do
        {
          float v18 = *(float *)&a7;
          float v19 = *(float *)&a7;
          float v20 = *(float *)&a7;
          float v21 = *(float *)&a7;
          if (v7 >= 2)
          {
            uint64_t v22 = (uint64_t *)v15;
            uint64_t v23 = 1;
            float v21 = *(float *)&a7;
            float v20 = *(float *)&a7;
            float v19 = *(float *)&a7;
            float v18 = *(float *)&a7;
            do
            {
              uint64_t v24 = (float *)(v12[v23] + 4 * v17);
              uint64_t v25 = *v22--;
              uint64_t v26 = (float *)(v25 + 4 * v17);
              float v27 = v11[v23];
              float v18 = v18 + (float)(v27 * (float)(*v24 - *v26));
              float v19 = v19 + (float)(v27 * (float)(v24[1] - v26[1]));
              float v20 = v20 + (float)(v27 * (float)(v24[2] - v26[2]));
              float v21 = v21 + (float)(v27 * (float)(v24[3] - v26[3]));
              ++v23;
            }
            while (v14 != v23);
          }
          uint64_t result = (uint64_t)rint(v18);
          uint64_t v28 = (uint64_t)rint(v21);
          v29.i32[0] = result;
          v29.i32[1] = (uint64_t)rint(v19);
          v29.i32[2] = (uint64_t)rint(v20);
          v29.i32[3] = v28;
          int16x8_t v30 = (int16x8_t)vminq_s32(vmaxq_s32(v29, (int32x4_t)0), v16);
          *(int16x4_t *)v30.i8 = vmovn_s32((int32x4_t)v30);
          *(_DWORD *)(a3 + v17) = vmovn_s16(v30).u32[0];
          v17 += 4;
        }
        while (v17 <= a6 - 4);
        uint64_t v17 = v17;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if ((int)v17 < a6)
      {
        do
        {
          float v31 = *(float *)&a7;
          if (v7 >= 2)
          {
            uint64_t v32 = (uint64_t *)v15;
            uint64_t v33 = 1;
            float v31 = *(float *)&a7;
            do
            {
              uint64_t v34 = *v32--;
              float v31 = v31 + (float)(v11[v33] * (float)(*(float *)(v12[v33] + 4 * v17) - *(float *)(v34 + 4 * v17)));
              ++v33;
            }
            while (v14 != v33);
          }
          double v35 = rint(v31);
          LODWORD(result) = (uint64_t)v35 & ~((int)(uint64_t)v35 >> 31);
          if ((int)result >= 255) {
            uint64_t result = 255;
          }
          else {
            uint64_t result = result;
          }
          *(unsigned char *)(a3 + v17++) = result;
        }
        while (v17 != a6);
      }
      a3 += v13;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7 = cv::ColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(void *)uint64_t v7 = &unk_26D988BA8;
  *(_DWORD *)(v7 + 12_Block_object_dispose(&a9, 8) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_225E9F36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::ColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988728;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988728;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,unsigned char>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0) {
    int v7 = *(_DWORD *)(result + 8);
  }
  else {
    int v7 = v6 + 1;
  }
  int v8 = v7 >> 1;
  uint64_t v9 = (uint64_t)v7 >> 1;
  uint64_t v10 = (double *)(*(void *)(result + 32) + 8 * (v7 >> 1));
  double v11 = *(double *)(result + 120);
  float32x4_t v12 = (void *)(a2 + 8 * v8);
  if (*(unsigned char *)(result + 128))
  {
    if (a5)
    {
      uint64_t v37 = a4;
      unsigned int v38 = v9 + 1;
      uint64_t v39 = a2 + 8 * v9 - 8;
      uint64_t v40 = 8 * v38;
      v41.i64[0] = 0xFF000000FFLL;
      v41.i64[1] = 0xFF000000FFLL;
      do
      {
        if (a6 >= 4)
        {
          uint64_t v42 = 0;
          do
          {
            int v43 = (double *)(*v12 + 8 * v42);
            double v44 = v11 + *v10 * *v43;
            double v45 = v11 + *v10 * v43[1];
            double v46 = v11 + *v10 * v43[2];
            double v47 = v11 + *v10 * v43[3];
            if (v6 >= 2)
            {
              uint64_t v48 = 8;
              uint64_t v49 = (uint64_t *)v39;
              do
              {
                uint64_t v50 = (double *)(v12[(unint64_t)v48 / 8] + 8 * v42);
                uint64_t v51 = *v49--;
                int32x4_t v52 = (double *)(v51 + 8 * v42);
                double v53 = v10[(unint64_t)v48 / 8];
                double v44 = v44 + v53 * (*v50 + *v52);
                double v45 = v45 + v53 * (v50[1] + v52[1]);
                double v46 = v46 + v53 * (v50[2] + v52[2]);
                double v47 = v47 + v53 * (v50[3] + v52[3]);
                v48 += 8;
              }
              while (v40 != v48);
            }
            uint64_t result = (uint64_t)rint(v44);
            v54.i64[0] = __PAIR64__((uint64_t)rint(v45), result);
            v54.i64[1] = __PAIR64__((uint64_t)rint(v47), (uint64_t)rint(v46));
            int16x8_t v55 = (int16x8_t)vminq_s32(vmaxq_s32(v54, (int32x4_t)0), v41);
            *(int16x4_t *)v55.i8 = vmovn_s32((int32x4_t)v55);
            *(_DWORD *)(a3 + v42) = vmovn_s16(v55).u32[0];
            v42 += 4;
          }
          while (v42 <= a6 - 4);
          uint64_t v42 = v42;
        }
        else
        {
          uint64_t v42 = 0;
        }
        if ((int)v42 < a6)
        {
          do
          {
            double v56 = v11 + *v10 * *(double *)(*v12 + 8 * v42);
            if (v6 >= 2)
            {
              uint64_t v57 = 8;
              int v58 = (uint64_t *)v39;
              do
              {
                uint64_t v59 = *v58--;
                double v56 = v56
                    + v10[(unint64_t)v57 / 8]
                    * (*(double *)(v12[(unint64_t)v57 / 8] + 8 * v42) + *(double *)(v59 + 8 * v42));
                v57 += 8;
              }
              while (v40 != v57);
            }
            double v60 = rint(v56);
            LODWORD(result) = (uint64_t)v60 & ~((int)(uint64_t)v60 >> 31);
            if ((int)result >= 255) {
              uint64_t result = 255;
            }
            else {
              uint64_t result = result;
            }
            *(unsigned char *)(a3 + v42++) = result;
          }
          while (v42 != a6);
        }
        a3 += v37;
        ++v12;
        v39 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    uint64_t v13 = a4;
    unsigned int v14 = v9 + 1;
    uint64_t v15 = a2 + 8 * v9 - 8;
    uint64_t v16 = 8 * v14;
    v17.i64[0] = 0xFF000000FFLL;
    v17.i64[1] = 0xFF000000FFLL;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v18 = 0;
        do
        {
          double v19 = v11;
          double v20 = v11;
          double v21 = v11;
          double v22 = v11;
          if (v6 >= 2)
          {
            uint64_t v23 = 8;
            uint64_t v24 = (uint64_t *)v15;
            double v22 = v11;
            double v21 = v11;
            double v20 = v11;
            double v19 = v11;
            do
            {
              uint64_t v25 = (double *)(v12[(unint64_t)v23 / 8] + 8 * v18);
              uint64_t v26 = *v24--;
              uint64_t v27 = (double *)(v26 + 8 * v18);
              double v28 = v10[(unint64_t)v23 / 8];
              double v19 = v19 + v28 * (*v25 - *v27);
              double v20 = v20 + v28 * (v25[1] - v27[1]);
              double v21 = v21 + v28 * (v25[2] - v27[2]);
              double v22 = v22 + v28 * (v25[3] - v27[3]);
              v23 += 8;
            }
            while (v16 != v23);
          }
          uint64_t result = (uint64_t)rint(v19);
          uint64_t v29 = (uint64_t)rint(v22);
          v30.i32[0] = result;
          v30.i32[1] = (uint64_t)rint(v20);
          v30.i32[2] = (uint64_t)rint(v21);
          v30.i32[3] = v29;
          int16x8_t v31 = (int16x8_t)vminq_s32(vmaxq_s32(v30, (int32x4_t)0), v17);
          *(int16x4_t *)v31.i8 = vmovn_s32((int32x4_t)v31);
          *(_DWORD *)(a3 + v1_Block_object_dispose(&a9, 8) = vmovn_s16(v31).u32[0];
          v18 += 4;
        }
        while (v18 <= a6 - 4);
        uint64_t v18 = v18;
      }
      else
      {
        uint64_t v18 = 0;
      }
      if ((int)v18 < a6)
      {
        do
        {
          double v32 = v11;
          if (v6 >= 2)
          {
            uint64_t v33 = 8;
            uint64_t v34 = (uint64_t *)v15;
            double v32 = v11;
            do
            {
              uint64_t v35 = *v34--;
              double v32 = v32
                  + v10[(unint64_t)v33 / 8]
                  * (*(double *)(v12[(unint64_t)v33 / 8] + 8 * v18) - *(double *)(v35 + 8 * v18));
              v33 += 8;
            }
            while (v16 != v33);
          }
          double v36 = rint(v32);
          LODWORD(result) = (uint64_t)v36 & ~((int)(uint64_t)v36 >> 31);
          if ((int)result >= 255) {
            uint64_t result = 255;
          }
          else {
            uint64_t result = result;
          }
          *(unsigned char *)(a3 + v18++) = result;
        }
        while (v18 != a6);
      }
      a3 += v13;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7 = cv::ColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(void *)uint64_t v7 = &unk_26D988BF0;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_225E9F9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::ColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988770;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988770;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,unsigned short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  int v7 = *(_DWORD *)(result + 8);
  if (v7 >= 0) {
    int v8 = *(_DWORD *)(result + 8);
  }
  else {
    int v8 = v7 + 1;
  }
  int v9 = v8 >> 1;
  uint64_t v10 = (uint64_t)v8 >> 1;
  double v11 = (const float *)(*(void *)(result + 32) + 4 * (v8 >> 1));
  LODWORD(a7) = *(_DWORD *)(result + 116);
  float32x4_t v12 = (uint64_t *)(a2 + 8 * v9);
  if (*(unsigned char *)(result + 120))
  {
    if (a5)
    {
      uint64_t v35 = a4;
      uint64_t v36 = (v10 + 1);
      float32x4_t v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      uint64_t v38 = a2 + 8 * v10 - 8;
      v39.i64[0] = 0xFFFF0000FFFFLL;
      v39.i64[1] = 0xFFFF0000FFFFLL;
      do
      {
        if (a6 >= 4)
        {
          uint64_t v40 = 0;
          uint64_t result = *v12;
          float32x4_t v41 = vld1q_dup_f32(v11);
          do
          {
            float32x4_t v42 = vmlaq_f32(v37, *(float32x4_t *)(result + 4 * v40), v41);
            if (v7 >= 2)
            {
              int v43 = (uint64_t *)v38;
              uint64_t v44 = 1;
              do
              {
                uint64_t v45 = *v43--;
                float32x4_t v42 = vmlaq_n_f32(v42, vaddq_f32(*(float32x4_t *)(v12[v44] + 4 * v40), *(float32x4_t *)(v45 + 4 * v40)), v11[v44]);
                ++v44;
              }
              while (v36 != v44);
            }
            v42.i32[0] = (uint64_t)rint(v42.f32[0]);
            v42.i32[1] = (uint64_t)rint(v42.f32[1]);
            v42.i32[2] = (uint64_t)rint(v42.f32[2]);
            v42.i32[3] = (uint64_t)rint(v42.f32[3]);
            *(int16x4_t *)(a3 + 2 * v40) = vmovn_s32(vminq_s32(vmaxq_s32((int32x4_t)v42, (int32x4_t)0), v39));
            v40 += 4;
          }
          while (v40 <= a6 - 4);
          uint64_t v40 = v40;
        }
        else
        {
          uint64_t v40 = 0;
        }
        if ((int)v40 < a6)
        {
          float v46 = *v11;
          uint64_t result = *v12;
          do
          {
            float v47 = *(float *)&a7 + (float)(v46 * *(float *)(result + 4 * v40));
            if (v7 >= 2)
            {
              uint64_t v48 = (uint64_t *)v38;
              uint64_t v49 = 1;
              do
              {
                uint64_t v50 = *v48--;
                float v47 = v47 + (float)(v11[v49] * (float)(*(float *)(v12[v49] + 4 * v40) + *(float *)(v50 + 4 * v40)));
                ++v49;
              }
              while (v36 != v49);
            }
            double v51 = rint(v47);
            int v52 = (uint64_t)v51 & ~((int)(uint64_t)v51 >> 31);
            if (v52 >= 0xFFFF) {
              LOWORD(v52) = -1;
            }
            *(_WORD *)(a3 + 2 * v40++) = v52;
          }
          while (v40 != a6);
        }
        a3 += v35;
        ++v12;
        v38 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    uint64_t v13 = a4;
    uint64_t v14 = (v10 + 1);
    uint64_t v15 = a2 + 8 * v10 - 8;
    v16.i64[0] = 0xFFFF0000FFFFLL;
    v16.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v17 = 0;
        do
        {
          float v18 = *(float *)&a7;
          float v19 = *(float *)&a7;
          float v20 = *(float *)&a7;
          float v21 = *(float *)&a7;
          if (v7 >= 2)
          {
            double v22 = (uint64_t *)v15;
            uint64_t v23 = 1;
            float v21 = *(float *)&a7;
            float v20 = *(float *)&a7;
            float v19 = *(float *)&a7;
            float v18 = *(float *)&a7;
            do
            {
              uint64_t v24 = (float *)(v12[v23] + 4 * v17);
              uint64_t v25 = *v22--;
              uint64_t v26 = (float *)(v25 + 4 * v17);
              float v27 = v11[v23];
              float v18 = v18 + (float)(v27 * (float)(*v24 - *v26));
              float v19 = v19 + (float)(v27 * (float)(v24[1] - v26[1]));
              float v20 = v20 + (float)(v27 * (float)(v24[2] - v26[2]));
              float v21 = v21 + (float)(v27 * (float)(v24[3] - v26[3]));
              ++v23;
            }
            while (v14 != v23);
          }
          uint64_t v28 = (uint64_t)rint(v21);
          v29.i32[0] = (uint64_t)rint(v18);
          v29.i32[1] = (uint64_t)rint(v19);
          uint64_t result = 2 * v17;
          v29.i32[2] = (uint64_t)rint(v20);
          v29.i32[3] = v28;
          *(int16x4_t *)(a3 + 2 * v17) = vmovn_s32(vminq_s32(vmaxq_s32(v29, (int32x4_t)0), v16));
          v17 += 4;
        }
        while (v17 <= a6 - 4);
        uint64_t v17 = v17;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if ((int)v17 < a6)
      {
        do
        {
          float v30 = *(float *)&a7;
          if (v7 >= 2)
          {
            int16x8_t v31 = (uint64_t *)v15;
            uint64_t v32 = 1;
            float v30 = *(float *)&a7;
            do
            {
              uint64_t v33 = *v31--;
              float v30 = v30 + (float)(v11[v32] * (float)(*(float *)(v12[v32] + 4 * v17) - *(float *)(v33 + 4 * v17)));
              ++v32;
            }
            while (v14 != v32);
          }
          double v34 = rint(v30);
          LODWORD(result) = (uint64_t)v34 & ~((int)(uint64_t)v34 >> 31);
          if ((int)result >= 0xFFFF) {
            uint64_t result = 0xFFFFLL;
          }
          else {
            uint64_t result = result;
          }
          *(_WORD *)(a3 + 2 * v17++) = result;
        }
        while (v17 != a6);
      }
      a3 += v13;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7 = cv::ColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(void *)uint64_t v7 = &unk_26D988C38;
  *(_DWORD *)(v7 + 12_Block_object_dispose(&a9, 8) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_225EA0008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::ColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9887B8;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9887B8;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,unsigned short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0) {
    int v7 = *(_DWORD *)(result + 8);
  }
  else {
    int v7 = v6 + 1;
  }
  int v8 = v7 >> 1;
  uint64_t v9 = (uint64_t)v7 >> 1;
  uint64_t v10 = (double *)(*(void *)(result + 32) + 8 * (v7 >> 1));
  double v11 = *(double *)(result + 120);
  float32x4_t v12 = (uint64_t *)(a2 + 8 * v8);
  if (*(unsigned char *)(result + 128))
  {
    if (a5)
    {
      uint64_t v36 = a4;
      unsigned int v37 = v9 + 1;
      uint64_t v38 = a2 + 8 * v9 - 8;
      uint64_t v39 = 8 * v37;
      v40.i64[0] = 0xFFFF0000FFFFLL;
      v40.i64[1] = 0xFFFF0000FFFFLL;
      do
      {
        if (a6 >= 4)
        {
          uint64_t v41 = 0;
          double v42 = *v10;
          uint64_t result = *v12;
          do
          {
            int v43 = (double *)(result + 8 * v41);
            double v44 = v11 + v42 * *v43;
            double v45 = v11 + v42 * v43[1];
            double v46 = v11 + v42 * v43[2];
            double v47 = v11 + v42 * v43[3];
            if (v6 >= 2)
            {
              uint64_t v48 = 8;
              uint64_t v49 = (uint64_t *)v38;
              do
              {
                uint64_t v50 = (double *)(v12[(unint64_t)v48 / 8] + 8 * v41);
                uint64_t v51 = *v49--;
                int v52 = (double *)(v51 + 8 * v41);
                double v53 = v10[(unint64_t)v48 / 8];
                double v44 = v44 + v53 * (*v50 + *v52);
                double v45 = v45 + v53 * (v50[1] + v52[1]);
                double v46 = v46 + v53 * (v50[2] + v52[2]);
                double v47 = v47 + v53 * (v50[3] + v52[3]);
                v48 += 8;
              }
              while (v39 != v48);
            }
            uint64_t v54 = (uint64_t)rint(v45);
            v55.i32[0] = (uint64_t)rint(v44);
            v55.i32[1] = v54;
            v55.i64[1] = __PAIR64__((uint64_t)rint(v47), (uint64_t)rint(v46));
            *(int16x4_t *)(a3 + 2 * v41) = vmovn_s32(vminq_s32(vmaxq_s32(v55, (int32x4_t)0), v40));
            v41 += 4;
          }
          while (v41 <= a6 - 4);
          uint64_t v41 = v41;
        }
        else
        {
          uint64_t v41 = 0;
        }
        if ((int)v41 < a6)
        {
          double v56 = *v10;
          uint64_t result = *v12;
          do
          {
            double v57 = v11 + v56 * *(double *)(result + 8 * v41);
            if (v6 >= 2)
            {
              uint64_t v58 = 8;
              uint64_t v59 = (uint64_t *)v38;
              do
              {
                uint64_t v60 = *v59--;
                double v57 = v57
                    + v10[(unint64_t)v58 / 8]
                    * (*(double *)(v12[(unint64_t)v58 / 8] + 8 * v41) + *(double *)(v60 + 8 * v41));
                v58 += 8;
              }
              while (v39 != v58);
            }
            double v61 = rint(v57);
            int v62 = (uint64_t)v61 & ~((int)(uint64_t)v61 >> 31);
            if (v62 >= 0xFFFF) {
              LOWORD(v62) = -1;
            }
            *(_WORD *)(a3 + 2 * v41++) = v62;
          }
          while (v41 != a6);
        }
        a3 += v36;
        ++v12;
        v38 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    uint64_t v13 = a4;
    unsigned int v14 = v9 + 1;
    uint64_t v15 = a2 + 8 * v9 - 8;
    uint64_t v16 = 8 * v14;
    v17.i64[0] = 0xFFFF0000FFFFLL;
    v17.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v18 = 0;
        do
        {
          double v19 = v11;
          double v20 = v11;
          double v21 = v11;
          double v22 = v11;
          if (v6 >= 2)
          {
            uint64_t v23 = 8;
            uint64_t v24 = (uint64_t *)v15;
            double v22 = v11;
            double v21 = v11;
            double v20 = v11;
            double v19 = v11;
            do
            {
              uint64_t v25 = (double *)(v12[(unint64_t)v23 / 8] + 8 * v18);
              uint64_t v26 = *v24--;
              uint64_t v27 = (double *)(v26 + 8 * v18);
              double v28 = v10[(unint64_t)v23 / 8];
              double v19 = v19 + v28 * (*v25 - *v27);
              double v20 = v20 + v28 * (v25[1] - v27[1]);
              double v21 = v21 + v28 * (v25[2] - v27[2]);
              double v22 = v22 + v28 * (v25[3] - v27[3]);
              v23 += 8;
            }
            while (v16 != v23);
          }
          uint64_t v29 = (uint64_t)rint(v22);
          v30.i32[0] = (uint64_t)rint(v19);
          v30.i32[1] = (uint64_t)rint(v20);
          uint64_t result = 2 * v18;
          v30.i32[2] = (uint64_t)rint(v21);
          v30.i32[3] = v29;
          *(int16x4_t *)(a3 + 2 * v1_Block_object_dispose(&a9, 8) = vmovn_s32(vminq_s32(vmaxq_s32(v30, (int32x4_t)0), v17));
          v18 += 4;
        }
        while (v18 <= a6 - 4);
        uint64_t v18 = v18;
      }
      else
      {
        uint64_t v18 = 0;
      }
      if ((int)v18 < a6)
      {
        do
        {
          double v31 = v11;
          if (v6 >= 2)
          {
            uint64_t v32 = 8;
            uint64_t v33 = (uint64_t *)v15;
            double v31 = v11;
            do
            {
              uint64_t v34 = *v33--;
              double v31 = v31
                  + v10[(unint64_t)v32 / 8]
                  * (*(double *)(v12[(unint64_t)v32 / 8] + 8 * v18) - *(double *)(v34 + 8 * v18));
              v32 += 8;
            }
            while (v16 != v32);
          }
          double v35 = rint(v31);
          LODWORD(result) = (uint64_t)v35 & ~((int)(uint64_t)v35 >> 31);
          if ((int)result >= 0xFFFF) {
            uint64_t result = 0xFFFFLL;
          }
          else {
            uint64_t result = result;
          }
          *(_WORD *)(a3 + 2 * v18++) = result;
        }
        while (v18 != a6);
      }
      a3 += v13;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7 = cv::ColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(void *)uint64_t v7 = &unk_26D988C80;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_225EA0654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::ColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::ColumnFilter(uint64_t a1, cv::Mat *a2, int a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)a1 = &unk_26D988CE0;
  *(_DWORD *)(a1 + 16) = 1124007936;
  int v8 = (cv::Mat *)(a1 + 16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((*((unsigned char *)a2 + 1) & 0x40) != 0)
  {
    if (v8 == a2) {
      goto LABEL_18;
    }
    uint64_t v10 = (atomic_uint *)*((void *)a2 + 3);
    if (v10)
    {
      atomic_fetch_add(v10, 1u);
      double v11 = *(atomic_uint **)(a1 + 40);
      if (v11)
      {
        if (atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
        }
      }
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
      if ((int)v14 > 2) {
        goto LABEL_16;
      }
    }
    int v15 = *((_DWORD *)a2 + 1);
    if (v15 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v15;
      *(void *)(a1 + 24) = *((void *)a2 + 1);
      uint64_t v16 = (void *)*((void *)a2 + 9);
      int32x4_t v17 = *(void **)(a1 + 88);
      void *v17 = *v16;
      v17[1] = v16[1];
LABEL_17:
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 64) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 72) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v8, a2);
    goto LABEL_17;
  }
  cv::_OutputArray::_OutputArray((uint64_t)v25, v8);
  cv::Mat::copyTo(a2, (const cv::_OutputArray *)v25);
LABEL_18:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 116) = (uint64_t)rint(a4);
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v19 != 1 && v18 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)");
    std::string::basic_string[abi:ne180100]<0>(v23, "ColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v25, 4294967081, v24, v23, __p, 2460);
    cv::error((cv *)v25, v20);
  }
  return a1;
}

void sub_225EA0948(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Mat::~Mat(v27, a2);
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988CE0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(void *)a1 = &unk_26D988CE0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

uint64_t cv::SymmColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988CE0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988CE0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0) {
    int v7 = *(_DWORD *)(result + 8);
  }
  else {
    int v7 = v6 + 1;
  }
  int v8 = v7 >> 1;
  uint64_t v9 = (uint64_t)v7 >> 1;
  uint64_t v10 = (const float *)(*(void *)(result + 32) + 4 * (v7 >> 1));
  unsigned int v11 = *(_DWORD *)(result + 116);
  uint64_t v12 = (uint64_t *)(a2 + 8 * v8);
  if (*(unsigned char *)(result + 120))
  {
    if (a5)
    {
      uint64_t v28 = a4;
      uint64_t v29 = (v9 + 1);
      int32x4_t v30 = vdupq_n_s32(v11);
      uint64_t v31 = a2 + 8 * v9 - 8;
      uint64_t result = 0x7FFFLL;
      do
      {
        if (a6 >= 4)
        {
          uint64_t v32 = 0;
          uint64_t v33 = *v12;
          int32x4_t v34 = (int32x4_t)vld1q_dup_f32(v10);
          do
          {
            int32x4_t v35 = vmlaq_s32(v30, *(int32x4_t *)(v33 + 4 * v32), v34);
            if (v6 >= 2)
            {
              uint64_t v36 = (uint64_t *)v31;
              uint64_t v37 = 1;
              do
              {
                uint64_t v38 = *v36--;
                uint64_t v39 = &v10[v37];
                int32x4_t v40 = (int32x4_t)vld1q_dup_f32(v39);
                int32x4_t v35 = vmlaq_s32(v35, vaddq_s32(*(int32x4_t *)(v38 + 4 * v32), *(int32x4_t *)(v12[v37++] + 4 * v32)), v40);
              }
              while (v29 != v37);
            }
            *(int16x4_t *)(a3 + 2 * v32) = vqmovn_s32(v35);
            v32 += 4;
          }
          while (v32 <= a6 - 4);
          uint64_t v32 = v32;
        }
        else
        {
          uint64_t v32 = 0;
        }
        if ((int)v32 < a6)
        {
          float v41 = *v10;
          uint64_t v42 = *v12;
          do
          {
            int v43 = v11 + *(_DWORD *)(v42 + 4 * v32) * LODWORD(v41);
            if (v6 >= 2)
            {
              double v44 = (uint64_t *)v31;
              uint64_t v45 = 1;
              do
              {
                uint64_t v46 = *v44--;
                v43 += (*(_DWORD *)(v46 + 4 * v32) + *(_DWORD *)(v12[v45] + 4 * v32)) * LODWORD(v10[v45]);
                ++v45;
              }
              while (v29 != v45);
            }
            if (v43 <= -32768) {
              int v43 = -32768;
            }
            if (v43 >= 0x7FFF) {
              LOWORD(v43) = 0x7FFF;
            }
            *(_WORD *)(a3 + 2 * v32++) = v43;
          }
          while (v32 != a6);
        }
        a3 += v28;
        ++v12;
        v31 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    uint64_t v13 = a4;
    uint64_t v14 = (v9 + 1);
    int32x4_t v15 = vdupq_n_s32(v11);
    uint64_t v16 = a2 + 8 * v9 - 8;
    uint64_t result = 0x7FFFLL;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v17 = 0;
        do
        {
          int32x4_t v18 = v15;
          if (v6 >= 2)
          {
            int v19 = (uint64_t *)v16;
            uint64_t v20 = 1;
            int32x4_t v18 = v15;
            do
            {
              uint64_t v21 = *v19--;
              double v22 = &v10[v20];
              int32x4_t v23 = (int32x4_t)vld1q_dup_f32(v22);
              int32x4_t v18 = vmlaq_s32(v18, vsubq_s32(*(int32x4_t *)(v12[v20++] + 4 * v17), *(int32x4_t *)(v21 + 4 * v17)), v23);
            }
            while (v14 != v20);
          }
          *(int16x4_t *)(a3 + 2 * v17) = vqmovn_s32(v18);
          v17 += 4;
        }
        while (v17 <= a6 - 4);
        uint64_t v17 = v17;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if ((int)v17 < a6)
      {
        do
        {
          int v24 = v11;
          if (v6 >= 2)
          {
            uint64_t v25 = (uint64_t *)v16;
            uint64_t v26 = 1;
            int v24 = v11;
            do
            {
              uint64_t v27 = *v25--;
              v24 += (*(_DWORD *)(v12[v26] + 4 * v17) - *(_DWORD *)(v27 + 4 * v17)) * LODWORD(v10[v26]);
              ++v26;
            }
            while (v14 != v26);
          }
          if (v24 <= -32768) {
            int v24 = -32768;
          }
          if (v24 >= 0x7FFF) {
            LOWORD(v24) = 0x7FFF;
          }
          *(_WORD *)(a3 + 2 * v17++) = v24;
        }
        while (v17 != a6);
      }
      a3 += v13;
      ++v12;
      v16 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void cv::ColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::~ColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988CE0;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::ColumnFilter<cv::Cast<int,short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  if (a5)
  {
    int v6 = *(const float **)(result + 32);
    unsigned int v7 = *(_DWORD *)(result + 116);
    uint64_t v8 = *(unsigned int *)(result + 8);
    uint64_t v9 = a4;
    int32x4_t v10 = vdupq_n_s32(v7);
    do
    {
      if (a6 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *a2;
        int32x4_t v13 = (int32x4_t)vld1q_dup_f32(v6);
        do
        {
          int32x4_t v14 = vmlaq_s32(v10, *(int32x4_t *)(v12 + 4 * v11), v13);
          if ((int)v8 >= 2)
          {
            for (uint64_t i = 1; i != v8; ++i)
            {
              uint64_t v16 = &v6[i];
              int32x4_t v17 = (int32x4_t)vld1q_dup_f32(v16);
              int32x4_t v14 = vmlaq_s32(v14, *(int32x4_t *)(a2[i] + 4 * v11), v17);
            }
          }
          uint64_t result = 2 * v11;
          *(int16x4_t *)(a3 + 2 * v11) = vqmovn_s32(v14);
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < a6)
      {
        float v18 = *v6;
        uint64_t result = *a2;
        do
        {
          int v19 = v7 + *(_DWORD *)(result + 4 * v11) * LODWORD(v18);
          if ((int)v8 >= 2)
          {
            for (uint64_t j = 1; j != v8; ++j)
              v19 += *(_DWORD *)(a2[j] + 4 * v11) * LODWORD(v6[j]);
          }
          if (v19 <= -32768) {
            int v19 = -32768;
          }
          if (v19 >= 0x7FFF) {
            LOWORD(v19) = 0x7FFF;
          }
          *(_WORD *)(a3 + 2 * v11++) = v19;
        }
        while (v11 != a6);
      }
      a3 += v9;
      ++a2;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7 = cv::ColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(void *)uint64_t v7 = &unk_26D988D10;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_225EA1218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::ColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988800;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988800;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  int v7 = *(_DWORD *)(result + 8);
  if (v7 >= 0) {
    int v8 = *(_DWORD *)(result + 8);
  }
  else {
    int v8 = v7 + 1;
  }
  int v9 = v8 >> 1;
  uint64_t v10 = (uint64_t)v8 >> 1;
  uint64_t v11 = (const float *)(*(void *)(result + 32) + 4 * (v8 >> 1));
  LODWORD(a7) = *(_DWORD *)(result + 116);
  uint64_t v12 = (uint64_t *)(a2 + 8 * v9);
  if (*(unsigned char *)(result + 120))
  {
    if (a5)
    {
      uint64_t v33 = a4;
      uint64_t v34 = (v10 + 1);
      float32x4_t v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      uint64_t v36 = a2 + 8 * v10 - 8;
      do
      {
        if (a6 >= 4)
        {
          uint64_t result = 0;
          uint64_t v37 = *v12;
          float32x4_t v38 = vld1q_dup_f32(v11);
          do
          {
            float32x4_t v39 = vmlaq_f32(v35, *(float32x4_t *)(v37 + 4 * result), v38);
            if (v7 >= 2)
            {
              int32x4_t v40 = (uint64_t *)v36;
              uint64_t v41 = 1;
              do
              {
                uint64_t v42 = *v40--;
                float32x4_t v39 = vmlaq_n_f32(v39, vaddq_f32(*(float32x4_t *)(v12[v41] + 4 * result), *(float32x4_t *)(v42 + 4 * result)), v11[v41]);
                ++v41;
              }
              while (v34 != v41);
            }
            v39.i32[0] = (uint64_t)rint(v39.f32[0]);
            v39.i32[1] = (uint64_t)rint(v39.f32[1]);
            v39.i32[2] = (uint64_t)rint(v39.f32[2]);
            v39.i32[3] = (uint64_t)rint(v39.f32[3]);
            *(int16x4_t *)(a3 + 2 * result) = vqmovn_s32((int32x4_t)v39);
            result += 4;
          }
          while (result <= a6 - 4);
          uint64_t result = result;
        }
        else
        {
          uint64_t result = 0;
        }
        if ((int)result < a6)
        {
          float v43 = *v11;
          uint64_t v44 = *v12;
          do
          {
            float v45 = *(float *)&a7 + (float)(v43 * *(float *)(v44 + 4 * result));
            if (v7 >= 2)
            {
              uint64_t v46 = (uint64_t *)v36;
              uint64_t v47 = 1;
              do
              {
                uint64_t v48 = *v46--;
                float v45 = v45
                    + (float)(v11[v47] * (float)(*(float *)(v12[v47] + 4 * result) + *(float *)(v48 + 4 * result)));
                ++v47;
              }
              while (v34 != v47);
            }
            uint64_t v49 = (uint64_t)rint(v45);
            if ((int)v49 <= -32768) {
              LODWORD(v49) = -32768;
            }
            if ((int)v49 >= 0x7FFF) {
              LOWORD(v49) = 0x7FFF;
            }
            *(_WORD *)(a3 + 2 * result++) = v49;
          }
          while (result != a6);
        }
        a3 += v33;
        ++v12;
        v36 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    uint64_t v13 = a4;
    uint64_t v14 = (v10 + 1);
    uint64_t v15 = a2 + 8 * v10 - 8;
    do
    {
      if (a6 >= 4)
      {
        uint64_t result = 0;
        do
        {
          float v16 = *(float *)&a7;
          float v17 = *(float *)&a7;
          float v18 = *(float *)&a7;
          float v19 = *(float *)&a7;
          if (v7 >= 2)
          {
            uint64_t v20 = (uint64_t *)v15;
            uint64_t v21 = 1;
            float v19 = *(float *)&a7;
            float v18 = *(float *)&a7;
            float v17 = *(float *)&a7;
            float v16 = *(float *)&a7;
            do
            {
              double v22 = (float *)(v12[v21] + 4 * result);
              uint64_t v23 = *v20--;
              int v24 = (float *)(v23 + 4 * result);
              float v25 = v11[v21];
              float v16 = v16 + (float)(v25 * (float)(*v22 - *v24));
              float v17 = v17 + (float)(v25 * (float)(v22[1] - v24[1]));
              float v18 = v18 + (float)(v25 * (float)(v22[2] - v24[2]));
              float v19 = v19 + (float)(v25 * (float)(v22[3] - v24[3]));
              ++v21;
            }
            while (v14 != v21);
          }
          uint64_t v26 = (uint64_t)rint(v19);
          v27.i32[0] = (uint64_t)rint(v16);
          v27.i32[1] = (uint64_t)rint(v17);
          v27.i32[2] = (uint64_t)rint(v18);
          v27.i32[3] = v26;
          *(int16x4_t *)(a3 + 2 * result) = vqmovn_s32(v27);
          result += 4;
        }
        while (result <= a6 - 4);
        uint64_t result = result;
      }
      else
      {
        uint64_t result = 0;
      }
      if ((int)result < a6)
      {
        do
        {
          float v28 = *(float *)&a7;
          if (v7 >= 2)
          {
            uint64_t v29 = (uint64_t *)v15;
            uint64_t v30 = 1;
            float v28 = *(float *)&a7;
            do
            {
              uint64_t v31 = *v29--;
              float v28 = v28 + (float)(v11[v30] * (float)(*(float *)(v12[v30] + 4 * result) - *(float *)(v31 + 4 * result)));
              ++v30;
            }
            while (v14 != v30);
          }
          uint64_t v32 = (uint64_t)rint(v28);
          if ((int)v32 <= -32768) {
            LODWORD(v32) = -32768;
          }
          if ((int)v32 >= 0x7FFF) {
            LOWORD(v32) = 0x7FFF;
          }
          *(_WORD *)(a3 + 2 * result++) = v32;
        }
        while (result != a6);
      }
      a3 += v13;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7 = cv::ColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(void *)uint64_t v7 = &unk_26D988D58;
  *(_DWORD *)(v7 + 12_Block_object_dispose(&a9, 8) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_225EA1858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::ColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988848;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988848;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,short>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0) {
    int v7 = *(_DWORD *)(result + 8);
  }
  else {
    int v7 = v6 + 1;
  }
  int v8 = v7 >> 1;
  uint64_t v9 = (uint64_t)v7 >> 1;
  uint64_t v10 = (double *)(*(void *)(result + 32) + 8 * (v7 >> 1));
  double v11 = *(double *)(result + 120);
  uint64_t v12 = (uint64_t *)(a2 + 8 * v8);
  if (*(unsigned char *)(result + 128))
  {
    if (a5)
    {
      uint64_t v34 = a4;
      unsigned int v35 = v9 + 1;
      uint64_t v36 = a2 + 8 * v9 - 8;
      uint64_t v37 = 8 * v35;
      do
      {
        if (a6 >= 4)
        {
          uint64_t result = 0;
          double v38 = *v10;
          uint64_t v39 = *v12;
          do
          {
            int32x4_t v40 = (double *)(v39 + 8 * result);
            double v41 = v11 + v38 * *v40;
            double v42 = v11 + v38 * v40[1];
            double v43 = v11 + v38 * v40[2];
            double v44 = v11 + v38 * v40[3];
            if (v6 >= 2)
            {
              uint64_t v45 = 8;
              uint64_t v46 = (uint64_t *)v36;
              do
              {
                uint64_t v47 = (double *)(v12[(unint64_t)v45 / 8] + 8 * result);
                uint64_t v48 = *v46--;
                uint64_t v49 = (double *)(v48 + 8 * result);
                double v50 = v10[(unint64_t)v45 / 8];
                double v41 = v41 + v50 * (*v47 + *v49);
                double v42 = v42 + v50 * (v47[1] + v49[1]);
                double v43 = v43 + v50 * (v47[2] + v49[2]);
                double v44 = v44 + v50 * (v47[3] + v49[3]);
                v45 += 8;
              }
              while (v37 != v45);
            }
            uint64_t v51 = (uint64_t)rint(v42);
            v52.i32[0] = (uint64_t)rint(v41);
            v52.i32[1] = v51;
            v52.i64[1] = __PAIR64__((uint64_t)rint(v44), (uint64_t)rint(v43));
            *(int16x4_t *)(a3 + 2 * result) = vqmovn_s32(v52);
            result += 4;
          }
          while (result <= a6 - 4);
          uint64_t result = result;
        }
        else
        {
          uint64_t result = 0;
        }
        if ((int)result < a6)
        {
          double v53 = *v10;
          uint64_t v54 = *v12;
          do
          {
            double v55 = v11 + v53 * *(double *)(v54 + 8 * result);
            if (v6 >= 2)
            {
              uint64_t v56 = 8;
              double v57 = (uint64_t *)v36;
              do
              {
                uint64_t v58 = *v57--;
                double v55 = v55
                    + v10[(unint64_t)v56 / 8]
                    * (*(double *)(v12[(unint64_t)v56 / 8] + 8 * result) + *(double *)(v58 + 8 * result));
                v56 += 8;
              }
              while (v37 != v56);
            }
            uint64_t v59 = (uint64_t)rint(v55);
            if ((int)v59 <= -32768) {
              LODWORD(v59) = -32768;
            }
            if ((int)v59 >= 0x7FFF) {
              LOWORD(v59) = 0x7FFF;
            }
            *(_WORD *)(a3 + 2 * result++) = v59;
          }
          while (result != a6);
        }
        a3 += v34;
        ++v12;
        v36 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    uint64_t v13 = a4;
    unsigned int v14 = v9 + 1;
    uint64_t v15 = a2 + 8 * v9 - 8;
    uint64_t v16 = 8 * v14;
    do
    {
      if (a6 >= 4)
      {
        uint64_t result = 0;
        do
        {
          double v17 = v11;
          double v18 = v11;
          double v19 = v11;
          double v20 = v11;
          if (v6 >= 2)
          {
            uint64_t v21 = 8;
            double v22 = (uint64_t *)v15;
            double v20 = v11;
            double v19 = v11;
            double v18 = v11;
            double v17 = v11;
            do
            {
              uint64_t v23 = (double *)(v12[(unint64_t)v21 / 8] + 8 * result);
              uint64_t v24 = *v22--;
              float v25 = (double *)(v24 + 8 * result);
              double v26 = v10[(unint64_t)v21 / 8];
              double v17 = v17 + v26 * (*v23 - *v25);
              double v18 = v18 + v26 * (v23[1] - v25[1]);
              double v19 = v19 + v26 * (v23[2] - v25[2]);
              double v20 = v20 + v26 * (v23[3] - v25[3]);
              v21 += 8;
            }
            while (v16 != v21);
          }
          uint64_t v27 = (uint64_t)rint(v20);
          v28.i32[0] = (uint64_t)rint(v17);
          v28.i32[1] = (uint64_t)rint(v18);
          v28.i32[2] = (uint64_t)rint(v19);
          v28.i32[3] = v27;
          *(int16x4_t *)(a3 + 2 * result) = vqmovn_s32(v28);
          result += 4;
        }
        while (result <= a6 - 4);
        uint64_t result = result;
      }
      else
      {
        uint64_t result = 0;
      }
      if ((int)result < a6)
      {
        do
        {
          double v29 = v11;
          if (v6 >= 2)
          {
            uint64_t v30 = 8;
            uint64_t v31 = (uint64_t *)v15;
            double v29 = v11;
            do
            {
              uint64_t v32 = *v31--;
              double v29 = v29
                  + v10[(unint64_t)v30 / 8]
                  * (*(double *)(v12[(unint64_t)v30 / 8] + 8 * result) - *(double *)(v32 + 8 * result));
              v30 += 8;
            }
            while (v16 != v30);
          }
          uint64_t v33 = (uint64_t)rint(v29);
          if ((int)v33 <= -32768) {
            LODWORD(v33) = -32768;
          }
          if ((int)v33 >= 0x7FFF) {
            LOWORD(v33) = 0x7FFF;
          }
          *(_WORD *)(a3 + 2 * result++) = v33;
        }
        while (result != a6);
      }
      a3 += v13;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7 = cv::ColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(void *)uint64_t v7 = &unk_26D988DA0;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_225EA1E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::ColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988890;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D988890;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmColumnFilter<cv::Cast<float,float>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  int v7 = *(_DWORD *)(result + 8);
  if (v7 >= 0) {
    int v8 = *(_DWORD *)(result + 8);
  }
  else {
    int v8 = v7 + 1;
  }
  int v9 = v8 >> 1;
  uint64_t v10 = (uint64_t)v8 >> 1;
  double v11 = (float *)(*(void *)(result + 32) + 4 * (v8 >> 1));
  LODWORD(a7) = *(_DWORD *)(result + 116);
  uint64_t v12 = (uint64_t *)(a2 + 8 * v9);
  if (*(unsigned char *)(result + 120))
  {
    if (a5)
    {
      uint64_t v23 = a4;
      uint64_t v24 = (v10 + 1);
      float32x4_t v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      uint64_t v26 = a2 + 8 * v10 - 8;
      do
      {
        if (a6 >= 4)
        {
          uint64_t v27 = 0;
          uint64_t v28 = *v12;
          do
          {
            uint64_t result = 4 * v27;
            float32x4_t v29 = vmlaq_n_f32(v25, *(float32x4_t *)(v28 + 4 * v27), *v11);
            if (v7 >= 2)
            {
              uint64_t v30 = (uint64_t *)v26;
              uint64_t v31 = 1;
              do
              {
                uint64_t v32 = *v30--;
                float32x4_t v29 = vmlaq_n_f32(v29, vaddq_f32(*(float32x4_t *)(v12[v31] + 4 * v27), *(float32x4_t *)(v32 + 4 * v27)), v11[v31]);
                ++v31;
              }
              while (v24 != v31);
            }
            *(float32x4_t *)(a3 + 4 * v27) = v29;
            v27 += 4;
          }
          while (v27 <= a6 - 4);
          uint64_t v27 = v27;
        }
        else
        {
          uint64_t v27 = 0;
        }
        if ((int)v27 < a6)
        {
          uint64_t v33 = *v12;
          do
          {
            float v34 = *(float *)&a7 + (float)(*v11 * *(float *)(v33 + 4 * v27));
            if (v7 >= 2)
            {
              uint64_t result = v26;
              uint64_t v35 = 1;
              do
              {
                uint64_t v36 = *(void *)result;
                result -= 8;
                float v34 = v34 + (float)(v11[v35] * (float)(*(float *)(v12[v35] + 4 * v27) + *(float *)(v36 + 4 * v27)));
                ++v35;
              }
              while (v24 != v35);
            }
            *(float *)(a3 + 4 * v27++) = v34;
          }
          while (v27 != a6);
        }
        a3 += v23;
        ++v12;
        v26 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    uint64_t v13 = (v10 + 1);
    int32x4_t v14 = vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    uint64_t v15 = a2 + 8 * v10 - 8;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v16 = 0;
        do
        {
          float32x4_t v17 = (float32x4_t)v14;
          if (v7 >= 2)
          {
            uint64_t result = v15;
            uint64_t v18 = 1;
            float32x4_t v17 = (float32x4_t)v14;
            do
            {
              uint64_t v19 = *(void *)result;
              result -= 8;
              float32x4_t v17 = vmlaq_n_f32(v17, vsubq_f32(*(float32x4_t *)(v12[v18] + 4 * v16), *(float32x4_t *)(v19 + 4 * v16)), v11[v18]);
              ++v18;
            }
            while (v13 != v18);
          }
          *(float32x4_t *)(a3 + 4 * v16) = v17;
          v16 += 4;
        }
        while (v16 <= a6 - 4);
        uint64_t v16 = v16;
      }
      else
      {
        uint64_t v16 = 0;
      }
      if ((int)v16 < a6)
      {
        do
        {
          float v20 = *(float *)&a7;
          if (v7 >= 2)
          {
            uint64_t v21 = (uint64_t *)v15;
            uint64_t result = 1;
            float v20 = *(float *)&a7;
            do
            {
              uint64_t v22 = *v21--;
              float v20 = v20 + (float)(v11[result] * (float)(*(float *)(v12[result] + 4 * v16) - *(float *)(v22 + 4 * v16)));
              ++result;
            }
            while (v13 != result);
          }
          *(float *)(a3 + 4 * v16++) = v20;
        }
        while (v16 != a6);
      }
      a3 += a4;
      ++v12;
      v15 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::SymmColumnFilter(uint64_t a1, cv::Mat *a2, int a3, int a4, double a5)
{
  uint64_t v7 = cv::ColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::ColumnFilter(a1, a2, a3, a5);
  *(void *)uint64_t v7 = &unk_26D988DE8;
  *(_DWORD *)(v7 + 12_Block_object_dispose(&a9, 8) = a4;
  if ((a4 & 3) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0");
    std::string::basic_string[abi:ne180100]<0>(v11, "SymmColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 2523);
    cv::error((cv *)v13, v8);
  }
  return a1;
}

void sub_225EA23B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::ColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::~ColumnFilter(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9888D8;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  return a1;
}

void cv::SymmColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::~SymmColumnFilter(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26D9888D8;
  unint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 20));
  }
  *(void *)(a1 + 40) = 0;
  int v6 = *(void ***)(a1 + 88);
  if (v6 != (void **)(a1 + 96)) {
    cv::fastFree(v6, a2);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::SymmColumnFilter<cv::Cast<double,double>,cv::ColumnNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0) {
    int v7 = *(_DWORD *)(result + 8);
  }
  else {
    int v7 = v6 + 1;
  }
  int v8 = v7 >> 1;
  uint64_t v9 = (uint64_t)v7 >> 1;
  uint64_t v10 = (double *)(*(void *)(result + 32) + 8 * (v7 >> 1));
  uint64_t v11 = *(uint64_t *)(result + 120);
  uint64_t v12 = (uint64_t *)(a2 + 8 * v8);
  if (*(unsigned char *)(result + 128))
  {
    if (a5)
    {
      uint64_t v31 = a4;
      unsigned int v32 = v9 + 1;
      float64x2_t v33 = (float64x2_t)vdupq_lane_s64(v11, 0);
      uint64_t v34 = a2 + 8 * v9 - 8;
      uint64_t v35 = 8 * v32;
      do
      {
        if (a6 >= 4)
        {
          uint64_t v36 = 0;
          uint64_t v37 = *v12;
          do
          {
            double v38 = (float64x2_t *)(v37 + 8 * v36);
            float64x2_t v39 = vmlaq_n_f64(v33, *v38, *v10);
            float64x2_t v40 = vmlaq_n_f64(v33, v38[1], *v10);
            if (v6 >= 2)
            {
              uint64_t v41 = 8;
              double v42 = (uint64_t *)v34;
              do
              {
                double v43 = (float64x2_t *)(v12[(unint64_t)v41 / 8] + 8 * v36);
                uint64_t v44 = *v42--;
                uint64_t v45 = (float64x2_t *)(v44 + 8 * v36);
                double v46 = v10[(unint64_t)v41 / 8];
                float64x2_t v39 = vmlaq_n_f64(v39, vaddq_f64(*v43, *v45), v46);
                float64x2_t v40 = vmlaq_n_f64(v40, vaddq_f64(v43[1], v45[1]), v46);
                v41 += 8;
              }
              while (v35 != v41);
            }
            *(float64x2_t *)(a3 + 8 * v36) = v39;
            uint64_t result = (8 * v36) | 0x10;
            *(float64x2_t *)(a3 + result) = v40;
            v36 += 4;
          }
          while (v36 <= a6 - 4);
          uint64_t v36 = v36;
        }
        else
        {
          uint64_t v36 = 0;
        }
        if ((int)v36 < a6)
        {
          uint64_t v47 = *v12;
          do
          {
            double v48 = *(double *)&v11 + *v10 * *(double *)(v47 + 8 * v36);
            if (v6 >= 2)
            {
              uint64_t result = 8;
              uint64_t v49 = (uint64_t *)v34;
              do
              {
                uint64_t v50 = *v49--;
                double v48 = v48
                    + *(double *)((char *)v10 + result)
                    * (*(double *)(*(uint64_t *)((char *)v12 + result) + 8 * v36) + *(double *)(v50 + 8 * v36));
                result += 8;
              }
              while (v35 != result);
            }
            *(double *)(a3 + 8 * v36++) = v48;
          }
          while (v36 != a6);
        }
        a3 += v31;
        ++v12;
        v34 += 8;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    uint64_t v13 = a4;
    unsigned int v14 = v9 + 1;
    int64x2_t v15 = vdupq_lane_s64(v11, 0);
    uint64_t v16 = a2 + 8 * v9 - 8;
    uint64_t v17 = 8 * v14;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v18 = 0;
        do
        {
          double v19 = *(double *)&v11;
          double v20 = *(double *)&v11;
          float64x2_t v21 = (float64x2_t)v15;
          if (v6 >= 2)
          {
            uint64_t v22 = 8;
            uint64_t v23 = (uint64_t *)v16;
            double v20 = *(double *)&v11;
            double v19 = *(double *)&v11;
            float64x2_t v21 = (float64x2_t)v15;
            do
            {
              uint64_t v24 = *v23--;
              uint64_t v25 = v12[(unint64_t)v22 / 8] + 8 * v18;
              uint64_t v26 = v24 + 8 * v18;
              double v27 = v10[(unint64_t)v22 / 8];
              double v19 = v19 + v27 * (*(double *)v25 - *(double *)v26);
              float64x2_t v21 = vmlaq_n_f64(v21, vsubq_f64(*(float64x2_t *)(v25 + 8), *(float64x2_t *)(v26 + 8)), v27);
              double v20 = v20 + v27 * (*(double *)(v25 + 24) - *(double *)(v26 + 24));
              v22 += 8;
            }
            while (v17 != v22);
          }
          *(double *)(a3 + 8 * v1_Block_object_dispose(&a9, 8) = v19;
          uint64_t result = (8 * v18) | 8;
          *(float64x2_t *)(a3 + result) = v21;
          *(double *)(a3 + ((8 * v18) | 0x18)) = v20;
          v18 += 4;
        }
        while (v18 <= a6 - 4);
        uint64_t v18 = v18;
      }
      else
      {
        uint64_t v18 = 0;
      }
      if ((int)v18 < a6)
      {
        do
        {
          double v28 = *(double *)&v11;
          if (v6 >= 2)
          {
            uint64_t v29 = 8;
            uint64_t result = v16;
            double v28 = *(double *)&v11;
            do
            {
              uint64_t v30 = *(void *)result;
              result -= 8;
              double v28 = v28
                  + v10[(unint64_t)v29 / 8]
                  * (*(double *)(v12[(unint64_t)v29 / 8] + 8 * v18) - *(double *)(v30 + 8 * v18));
              v29 += 8;
            }
            while (v17 != v29);
          }
          *(double *)(a3 + 8 * v18++) = v28;
        }
        while (v18 != a6);
      }
      a3 += v13;
      ++v12;
      v16 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<float,unsigned char>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, void *a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)(a1 + 16) = -1;
  *(void *)a1 = &unk_26D988E30;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + _Block_object_dispose(&a9, 8) = vrev64_s32(*a2[8]);
  float v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (void *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  return a1;
}

void sub_225EA29C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  unsigned int v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  float64x2_t v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  uint64_t v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *cv::Filter2D<unsigned char,cv::Cast<float,unsigned char>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D988E30;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned char,cv::Cast<float,unsigned char>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D988E30;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<float,unsigned char>,cv::FilterNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  if (a5 >= 1)
  {
    float v14 = *(float *)(result + 96);
    int64x2_t v15 = *(_DWORD **)(result + 48);
    uint64_t v16 = *(void **)(result + 72);
    uint64_t v17 = (a7 * a6);
    uint64_t v18 = *(void *)(result + 24);
    unint64_t v19 = (unint64_t)(*(void *)(result + 32) - v18) >> 3;
    uint64_t v20 = a4;
    uint64_t v21 = v18 + 4;
    v22.i64[0] = 0xFF000000FFLL;
    v22.i64[1] = 0xFF000000FFLL;
    do
    {
      uint64_t v23 = v19;
      uint64_t result = v21;
      uint64_t v24 = v16;
      if ((int)v19 >= 1)
      {
        do
        {
          *v24++ = *(void *)(a2 + 8 * *(int *)result) + *(int *)(result - 4) * (uint64_t)a7;
          result += 8;
          --v23;
        }
        while (v23);
      }
      if ((int)v17 >= 4)
      {
        uint64_t v25 = 0;
        do
        {
          float v26 = v14;
          float v27 = v14;
          float v28 = v14;
          float v29 = v14;
          if ((int)v19 >= 1)
          {
            uint64_t v30 = v19;
            uint64_t v31 = v16;
            unsigned int v32 = v15;
            float v29 = v14;
            float v28 = v14;
            float v27 = v14;
            float v26 = v14;
            do
            {
              uint64_t v33 = *v31++;
              uint64_t v34 = (unsigned char *)(v33 + v25);
              LODWORD(v33) = *v32++;
              LOBYTE(v13) = *v34;
              *(float *)&unsigned int v35 = (float)LODWORD(v13);
              float v26 = v26 + (float)(*(float *)&v33 * *(float *)&v35);
              LOBYTE(v35) = v34[1];
              *(float *)&unsigned int v36 = (float)v35;
              float v27 = v27 + (float)(*(float *)&v33 * *(float *)&v36);
              LOBYTE(v36) = v34[2];
              *(float *)&unsigned int v37 = (float)v36;
              float v28 = v28 + (float)(*(float *)&v33 * *(float *)&v37);
              LOBYTE(v37) = v34[3];
              float v13 = (float)v37;
              float v29 = v29 + (float)(*(float *)&v33 * v13);
              --v30;
            }
            while (v30);
          }
          uint64_t result = (uint64_t)rint(v26);
          a13 = rint(v27);
          uint64_t v38 = (uint64_t)rint(v29);
          v39.i32[0] = result;
          v39.i32[1] = (uint64_t)a13;
          v39.i32[2] = (uint64_t)rint(v28);
          v39.i32[3] = v38;
          int16x8_t v40 = (int16x8_t)vminq_s32(vmaxq_s32(v39, (int32x4_t)0), v22);
          *(int16x4_t *)v40.i8 = vmovn_s32((int32x4_t)v40);
          *(_DWORD *)(a3 + v25) = vmovn_s16(v40).u32[0];
          v25 += 4;
        }
        while (v25 <= (int)v17 - 4);
        uint64_t v25 = v25;
      }
      else
      {
        uint64_t v25 = 0;
      }
      if ((int)v25 < (int)v17)
      {
        do
        {
          float v41 = v14;
          if ((int)v19 >= 1)
          {
            uint64_t v42 = v19;
            double v43 = (float *)v15;
            uint64_t v44 = v16;
            float v41 = v14;
            do
            {
              float v45 = *v43++;
              float v46 = v45;
              uint64_t v47 = *v44++;
              LOBYTE(a13) = *(unsigned char *)(v47 + v25);
              *(float *)&a13 = (float)LODWORD(a13);
              float v41 = v41 + (float)(v46 * *(float *)&a13);
              --v42;
            }
            while (v42);
          }
          double v48 = rint(v41);
          LODWORD(result) = (uint64_t)v48 & ~((int)(uint64_t)v48 >> 31);
          if ((int)result >= 255) {
            uint64_t result = 255;
          }
          else {
            uint64_t result = result;
          }
          *(unsigned char *)(a3 + v25++) = result;
        }
        while (v25 != v17);
      }
      a3 += v20;
      a2 += 8;
      BOOL v49 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v49 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<float,unsigned short>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, void *a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)(a1 + 16) = -1;
  *(void *)a1 = &unk_26D988E78;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + _Block_object_dispose(&a9, 8) = vrev64_s32(*a2[8]);
  float v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (void *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  return a1;
}

void sub_225EA2EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  unsigned int v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  uint64_t v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  uint64_t v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *cv::Filter2D<unsigned char,cv::Cast<float,unsigned short>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D988E78;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned char,cv::Cast<float,unsigned short>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D988E78;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<float,unsigned short>,cv::FilterNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  if (a5 >= 1)
  {
    float v14 = *(float *)(result + 96);
    int64x2_t v15 = *(_DWORD **)(result + 48);
    uint64_t v16 = *(void **)(result + 72);
    uint64_t v17 = (a7 * a6);
    uint64_t v18 = *(void *)(result + 24);
    unint64_t v19 = (unint64_t)(*(void *)(result + 32) - v18) >> 3;
    uint64_t v20 = a4;
    uint64_t v21 = v18 + 4;
    v22.i64[0] = 0xFFFF0000FFFFLL;
    v22.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      uint64_t v23 = v19;
      uint64_t result = v21;
      uint64_t v24 = v16;
      if ((int)v19 >= 1)
      {
        do
        {
          *v24++ = *(void *)(a2 + 8 * *(int *)result) + *(int *)(result - 4) * (uint64_t)a7;
          result += 8;
          --v23;
        }
        while (v23);
      }
      if ((int)v17 >= 4)
      {
        uint64_t v25 = 0;
        do
        {
          float v26 = v14;
          float v27 = v14;
          float v28 = v14;
          float v29 = v14;
          if ((int)v19 >= 1)
          {
            uint64_t v30 = v19;
            uint64_t v31 = v16;
            unsigned int v32 = v15;
            float v29 = v14;
            float v28 = v14;
            float v27 = v14;
            float v26 = v14;
            do
            {
              uint64_t v33 = *v31++;
              uint64_t v34 = (unsigned char *)(v33 + v25);
              LODWORD(v33) = *v32++;
              LOBYTE(v13) = *v34;
              *(float *)&unsigned int v35 = (float)LODWORD(v13);
              float v26 = v26 + (float)(*(float *)&v33 * *(float *)&v35);
              LOBYTE(v35) = v34[1];
              *(float *)&unsigned int v36 = (float)v35;
              float v27 = v27 + (float)(*(float *)&v33 * *(float *)&v36);
              LOBYTE(v36) = v34[2];
              *(float *)&unsigned int v37 = (float)v36;
              float v28 = v28 + (float)(*(float *)&v33 * *(float *)&v37);
              LOBYTE(v37) = v34[3];
              float v13 = (float)v37;
              float v29 = v29 + (float)(*(float *)&v33 * v13);
              --v30;
            }
            while (v30);
          }
          a13 = rint(v27);
          uint64_t v38 = (uint64_t)rint(v29);
          v39.i32[0] = (uint64_t)rint(v26);
          v39.i32[1] = (uint64_t)a13;
          uint64_t result = 2 * v25;
          v39.i32[2] = (uint64_t)rint(v28);
          v39.i32[3] = v38;
          *(int16x4_t *)(a3 + 2 * v25) = vmovn_s32(vminq_s32(vmaxq_s32(v39, (int32x4_t)0), v22));
          v25 += 4;
        }
        while (v25 <= (int)v17 - 4);
        uint64_t v25 = v25;
      }
      else
      {
        uint64_t v25 = 0;
      }
      if ((int)v25 < (int)v17)
      {
        do
        {
          float v40 = v14;
          if ((int)v19 >= 1)
          {
            uint64_t v41 = v19;
            uint64_t v42 = (float *)v15;
            double v43 = v16;
            float v40 = v14;
            do
            {
              float v44 = *v42++;
              float v45 = v44;
              uint64_t v46 = *v43++;
              LOBYTE(a13) = *(unsigned char *)(v46 + v25);
              *(float *)&a13 = (float)LODWORD(a13);
              float v40 = v40 + (float)(v45 * *(float *)&a13);
              --v41;
            }
            while (v41);
          }
          double v47 = rint(v40);
          LODWORD(result) = (uint64_t)v47 & ~((int)(uint64_t)v47 >> 31);
          if ((int)result >= 0xFFFF) {
            uint64_t result = 0xFFFFLL;
          }
          else {
            uint64_t result = result;
          }
          *(_WORD *)(a3 + 2 * v25++) = result;
        }
        while (v25 != v17);
      }
      a3 += v20;
      a2 += 8;
      BOOL v48 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v48 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<float,short>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, void *a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)(a1 + 16) = -1;
  *(void *)a1 = &unk_26D988EC0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + _Block_object_dispose(&a9, 8) = vrev64_s32(*a2[8]);
  float v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (void *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  return a1;
}

void sub_225EA3380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  unsigned int v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  uint64_t v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  uint64_t v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *cv::Filter2D<unsigned char,cv::Cast<float,short>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D988EC0;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned char,cv::Cast<float,short>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D988EC0;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<float,short>,cv::FilterNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13, float a14)
{
  if (a5 >= 1)
  {
    float v14 = *(float *)(result + 96);
    int64x2_t v15 = *(_DWORD **)(result + 48);
    uint64_t v16 = (a7 * a6);
    uint64_t v17 = *(void *)(result + 24);
    unint64_t v18 = (unint64_t)(*(void *)(result + 32) - v17) >> 3;
    uint64_t v19 = a4;
    uint64_t v20 = *(void **)(result + 72);
    uint64_t v21 = (int *)(v17 + 4);
    do
    {
      uint64_t v22 = v18;
      uint64_t v23 = v21;
      uint64_t v24 = v20;
      if ((int)v18 >= 1)
      {
        do
        {
          *v24++ = *(void *)(a2 + 8 * *v23) + *(v23 - 1) * (uint64_t)a7;
          v23 += 2;
          --v22;
        }
        while (v22);
      }
      if ((int)v16 >= 4)
      {
        uint64_t result = 0;
        do
        {
          float v25 = v14;
          float v26 = v14;
          float v27 = v14;
          float v28 = v14;
          if ((int)v18 >= 1)
          {
            uint64_t v29 = v18;
            uint64_t v30 = v20;
            uint64_t v31 = v15;
            float v28 = v14;
            float v27 = v14;
            float v26 = v14;
            float v25 = v14;
            do
            {
              uint64_t v32 = *v30++;
              uint64_t v33 = (unsigned char *)(v32 + result);
              LODWORD(v32) = *v31++;
              LOBYTE(a14) = *v33;
              *(float *)&unsigned int v34 = (float)LODWORD(a14);
              float v25 = v25 + (float)(*(float *)&v32 * *(float *)&v34);
              LOBYTE(v34) = v33[1];
              *(float *)&unsigned int v35 = (float)v34;
              float v26 = v26 + (float)(*(float *)&v32 * *(float *)&v35);
              LOBYTE(v35) = v33[2];
              *(float *)&unsigned int v36 = (float)v35;
              float v27 = v27 + (float)(*(float *)&v32 * *(float *)&v36);
              LOBYTE(v36) = v33[3];
              a14 = (float)v36;
              float v28 = v28 + (float)(*(float *)&v32 * a14);
              --v29;
            }
            while (v29);
          }
          a11 = rint(v26);
          uint64_t v37 = (uint64_t)rint(v28);
          v38.i32[0] = (uint64_t)rint(v25);
          v38.i32[1] = (uint64_t)a11;
          v38.i32[2] = (uint64_t)rint(v27);
          v38.i32[3] = v37;
          *(int16x4_t *)(a3 + 2 * result) = vqmovn_s32(v38);
          result += 4;
        }
        while (result <= (int)v16 - 4);
        uint64_t result = result;
      }
      else
      {
        uint64_t result = 0;
      }
      if ((int)result < (int)v16)
      {
        do
        {
          float v39 = v14;
          if ((int)v18 >= 1)
          {
            uint64_t v40 = v18;
            uint64_t v41 = (float *)v15;
            uint64_t v42 = v20;
            float v39 = v14;
            do
            {
              float v43 = *v41++;
              float v44 = v43;
              uint64_t v45 = *v42++;
              LOBYTE(a11) = *(unsigned char *)(v45 + result);
              *(float *)&a11 = (float)LODWORD(a11);
              float v39 = v39 + (float)(v44 * *(float *)&a11);
              --v40;
            }
            while (v40);
          }
          uint64_t v46 = (uint64_t)rint(v39);
          if ((int)v46 <= -32768) {
            LODWORD(v46) = -32768;
          }
          if ((int)v46 >= 0x7FFF) {
            LOWORD(v46) = 0x7FFF;
          }
          *(_WORD *)(a3 + 2 * result++) = v46;
        }
        while (result != v16);
      }
      a3 += v19;
      a2 += 8;
      BOOL v47 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v47 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<float,float>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, void *a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)(a1 + 16) = -1;
  *(void *)a1 = &unk_26D988F08;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + _Block_object_dispose(&a9, 8) = vrev64_s32(*a2[8]);
  float v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (void *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  return a1;
}

void sub_225EA3860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  uint64_t v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  uint64_t v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  unsigned int v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *cv::Filter2D<unsigned char,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D988F08;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned char,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D988F08;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22A641780);
}

uint64_t *cv::Filter2D<unsigned char,cv::Cast<float,float>,cv::FilterNoVec>::operator()(uint64_t *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, float32x4_t a12)
{
  if (a5 >= 1)
  {
    LODWORD(a_Block_object_dispose(&a9, 8) = *((_DWORD *)result + 24);
    uint64_t v12 = (_DWORD *)result[6];
    float v13 = (uint64_t *)result[9];
    uint64_t v14 = (a7 * a6);
    uint64_t v15 = result[3];
    unint64_t v16 = (unint64_t)(result[4] - v15) >> 3;
    uint64_t v17 = a4;
    int32x4_t v18 = vdupq_lane_s32(*(int32x2_t *)&a8, 0);
    uint64_t v19 = (int *)(v15 + 4);
    do
    {
      uint64_t v20 = v16;
      uint64_t v21 = v19;
      uint64_t result = v13;
      if ((int)v16 >= 1)
      {
        do
        {
          *result++ = *(void *)(a2 + 8 * *v21) + *(v21 - 1) * (uint64_t)a7;
          v21 += 2;
          --v20;
        }
        while (v20);
      }
      if ((int)v14 >= 4)
      {
        uint64_t v22 = 0;
        do
        {
          float32x4_t v23 = (float32x4_t)v18;
          if ((int)v16 >= 1)
          {
            uint64_t v24 = v16;
            uint64_t result = v13;
            float v25 = v12;
            float32x4_t v23 = (float32x4_t)v18;
            do
            {
              uint64_t v27 = *result++;
              uint64_t v26 = v27;
              LODWORD(v27) = *v25++;
              a12.i32[0] = *(_DWORD *)(v26 + v22);
              a12 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a12.f32)));
              float32x4_t v23 = vmlaq_n_f32(v23, a12, *(float *)&v27);
              --v24;
            }
            while (v24);
          }
          *(float32x4_t *)(a3 + 4 * v22) = v23;
          v22 += 4;
        }
        while (v22 <= (int)v14 - 4);
        uint64_t v22 = v22;
      }
      else
      {
        uint64_t v22 = 0;
      }
      if ((int)v22 < (int)v14)
      {
        do
        {
          float v28 = *(float *)&a8;
          if ((int)v16 >= 1)
          {
            uint64_t v29 = v16;
            uint64_t result = (uint64_t *)v12;
            uint64_t v30 = v13;
            float v28 = *(float *)&a8;
            do
            {
              float v31 = *(float *)result;
              uint64_t result = (uint64_t *)((char *)result + 4);
              float v32 = v31;
              uint64_t v33 = *v30++;
              a12.i8[0] = *(unsigned char *)(v33 + v22);
              a12.f32[0] = (float)a12.u32[0];
              float v28 = v28 + (float)(v32 * a12.f32[0]);
              --v29;
            }
            while (v29);
          }
          *(float *)(a3 + 4 * v22++) = v28;
        }
        while (v22 != v14);
      }
      a3 += v17;
      a2 += 8;
      BOOL v34 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v34 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<unsigned char,cv::Cast<double,double>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, void *a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)(a1 + 16) = -1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = &unk_26D988F50;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + _Block_object_dispose(&a9, 8) = vrev64_s32(*a2[8]);
  *(double *)(a1 + 96) = a4;
  if ((*(_DWORD *)a2 & 0xFFF) != 6)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v9, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v11, 4294967081, v10, v9, __p, 3116);
    cv::error((cv *)v11, v6);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (void *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  return a1;
}

void sub_225EA3C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  float v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  uint64_t v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  BOOL v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *cv::Filter2D<unsigned char,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D988F50;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned char,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D988F50;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22A641780);
}

double *cv::Filter2D<unsigned char,cv::Cast<double,double>,cv::FilterNoVec>::operator()(double *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  if (a5 >= 1)
  {
    double v14 = result[12];
    uint64_t v15 = (double *)*((void *)result + 6);
    unint64_t v16 = (double *)*((void *)result + 9);
    uint64_t v17 = (a7 * a6);
    uint64_t v18 = *((void *)result + 3);
    unint64_t v19 = (unint64_t)(*((void *)result + 4) - v18) >> 3;
    uint64_t v20 = a4;
    uint64_t v21 = (int *)(v18 + 4);
    do
    {
      uint64_t v22 = v19;
      float32x4_t v23 = v21;
      uint64_t result = v16;
      if ((int)v19 >= 1)
      {
        do
        {
          *(void *)result++ = *(void *)(a2 + 8 * *v23) + *(v23 - 1) * (uint64_t)a7;
          v23 += 2;
          --v22;
        }
        while (v22);
      }
      if ((int)v17 >= 4)
      {
        uint64_t v24 = 0;
        do
        {
          double v25 = v14;
          a11 = v14;
          double v26 = v14;
          double v27 = v14;
          if ((int)v19 >= 1)
          {
            uint64_t v28 = v19;
            uint64_t v29 = v16;
            uint64_t v30 = v15;
            double v27 = v14;
            double v26 = v14;
            a11 = v14;
            double v25 = v14;
            do
            {
              uint64_t v31 = *(void *)v29++;
              float v32 = (unsigned char *)(v31 + v24);
              double v33 = *v30++;
              LOBYTE(a14) = *v32;
              *(double *)&unint64_t v34 = (double)*(unint64_t *)&a14;
              double v25 = v25 + v33 * *(double *)&v34;
              LOBYTE(v34) = v32[1];
              *(double *)&unint64_t v35 = (double)v34;
              a11 = a11 + v33 * *(double *)&v35;
              LOBYTE(v35) = v32[2];
              *(double *)&unint64_t v36 = (double)v35;
              double v26 = v26 + v33 * *(double *)&v36;
              LOBYTE(v36) = v32[3];
              a14 = (double)v36;
              double v27 = v27 + v33 * a14;
              --v28;
            }
            while (v28);
          }
          *(double *)(a3 + 8 * v24) = v25;
          *(double *)(a3 + ((8 * v24) | 8)) = a11;
          uint64_t result = (double *)((8 * v24) | 0x10);
          *(double *)((char *)result + a3) = v26;
          *(double *)(a3 + ((8 * v24) | 0x18)) = v27;
          v24 += 4;
        }
        while (v24 <= (int)v17 - 4);
        uint64_t v24 = v24;
      }
      else
      {
        uint64_t v24 = 0;
      }
      if ((int)v24 < (int)v17)
      {
        do
        {
          double v37 = v14;
          if ((int)v19 >= 1)
          {
            uint64_t v38 = v19;
            uint64_t result = v15;
            float v39 = v16;
            double v37 = v14;
            do
            {
              double v40 = *result++;
              double v41 = v40;
              uint64_t v42 = *(void *)v39++;
              LOBYTE(a11) = *(unsigned char *)(v42 + v24);
              a11 = (double)*(unint64_t *)&a11;
              double v37 = v37 + v41 * a11;
              --v38;
            }
            while (v38);
          }
          *(double *)(a3 + 8 * v24++) = v37;
        }
        while (v24 != v17);
      }
      a3 += v20;
      a2 += 8;
      BOOL v43 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v43 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<unsigned short,cv::Cast<float,unsigned short>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, void *a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)(a1 + 16) = -1;
  *(void *)a1 = &unk_26D988F98;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + _Block_object_dispose(&a9, 8) = vrev64_s32(*a2[8]);
  float v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (void *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  return a1;
}

void sub_225EA4120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  float v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  double v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  unint64_t v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *cv::Filter2D<unsigned short,cv::Cast<float,unsigned short>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D988F98;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned short,cv::Cast<float,unsigned short>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D988F98;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::Filter2D<unsigned short,cv::Cast<float,unsigned short>,cv::FilterNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  if (a5 >= 1)
  {
    float v14 = *(float *)(result + 96);
    uint64_t v15 = *(_DWORD **)(result + 48);
    unint64_t v16 = *(void **)(result + 72);
    uint64_t v17 = (a7 * a6);
    uint64_t v18 = *(void *)(result + 24);
    unint64_t v19 = (unint64_t)(*(void *)(result + 32) - v18) >> 3;
    uint64_t v20 = a4;
    uint64_t v21 = v18 + 4;
    v22.i64[0] = 0xFFFF0000FFFFLL;
    v22.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      uint64_t v23 = v19;
      uint64_t result = v21;
      uint64_t v24 = v16;
      if ((int)v19 >= 1)
      {
        do
        {
          *v24++ = *(void *)(a2 + 8 * *(int *)result) + 2 * *(_DWORD *)(result - 4) * a7;
          result += 8;
          --v23;
        }
        while (v23);
      }
      if ((int)v17 >= 4)
      {
        uint64_t v25 = 0;
        do
        {
          float v26 = v14;
          float v27 = v14;
          float v28 = v14;
          float v29 = v14;
          if ((int)v19 >= 1)
          {
            uint64_t v30 = v19;
            uint64_t v31 = v16;
            float v32 = v15;
            float v29 = v14;
            float v28 = v14;
            float v27 = v14;
            float v26 = v14;
            do
            {
              uint64_t v33 = *v31++;
              unint64_t v34 = (_WORD *)(v33 + 2 * v25);
              LODWORD(v33) = *v32++;
              LOWORD(v13) = *v34;
              *(float *)&unsigned int v35 = (float)LODWORD(v13);
              float v26 = v26 + (float)(*(float *)&v33 * *(float *)&v35);
              LOWORD(v35) = v34[1];
              *(float *)&unsigned int v36 = (float)v35;
              float v27 = v27 + (float)(*(float *)&v33 * *(float *)&v36);
              LOWORD(v36) = v34[2];
              *(float *)&unsigned int v37 = (float)v36;
              float v28 = v28 + (float)(*(float *)&v33 * *(float *)&v37);
              LOWORD(v37) = v34[3];
              float v13 = (float)v37;
              float v29 = v29 + (float)(*(float *)&v33 * v13);
              --v30;
            }
            while (v30);
          }
          a13 = rint(v27);
          uint64_t v38 = (uint64_t)rint(v29);
          v39.i32[0] = (uint64_t)rint(v26);
          v39.i32[1] = (uint64_t)a13;
          uint64_t result = 2 * v25;
          v39.i32[2] = (uint64_t)rint(v28);
          v39.i32[3] = v38;
          *(int16x4_t *)(a3 + 2 * v25) = vmovn_s32(vminq_s32(vmaxq_s32(v39, (int32x4_t)0), v22));
          v25 += 4;
        }
        while (v25 <= (int)v17 - 4);
        uint64_t v25 = v25;
      }
      else
      {
        uint64_t v25 = 0;
      }
      if ((int)v25 < (int)v17)
      {
        do
        {
          float v40 = v14;
          if ((int)v19 >= 1)
          {
            uint64_t v41 = v19;
            uint64_t v42 = (float *)v15;
            BOOL v43 = v16;
            float v40 = v14;
            do
            {
              float v44 = *v42++;
              float v45 = v44;
              uint64_t v46 = *v43++;
              LOWORD(a13) = *(_WORD *)(v46 + 2 * v25);
              *(float *)&a13 = (float)LODWORD(a13);
              float v40 = v40 + (float)(v45 * *(float *)&a13);
              --v41;
            }
            while (v41);
          }
          double v47 = rint(v40);
          LODWORD(result) = (uint64_t)v47 & ~((int)(uint64_t)v47 >> 31);
          if ((int)result >= 0xFFFF) {
            uint64_t result = 0xFFFFLL;
          }
          else {
            uint64_t result = result;
          }
          *(_WORD *)(a3 + 2 * v25++) = result;
        }
        while (v25 != v17);
      }
      a3 += v20;
      a2 += 8;
      BOOL v48 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v48 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<unsigned short,cv::Cast<float,float>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, void *a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)(a1 + 16) = -1;
  *(void *)a1 = &unk_26D988FE0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + _Block_object_dispose(&a9, 8) = vrev64_s32(*a2[8]);
  float v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (void *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  return a1;
}

void sub_225EA4608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  float v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  uint64_t v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  unint64_t v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *cv::Filter2D<unsigned short,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D988FE0;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned short,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D988FE0;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22A641780);
}

uint64_t *cv::Filter2D<unsigned short,cv::Cast<float,float>,cv::FilterNoVec>::operator()(uint64_t *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, float32x4_t a12)
{
  if (a5 >= 1)
  {
    LODWORD(a_Block_object_dispose(&a9, 8) = *((_DWORD *)result + 24);
    uint64_t v12 = (_DWORD *)result[6];
    float v13 = (uint64_t *)result[9];
    uint64_t v14 = (a7 * a6);
    uint64_t v15 = result[3];
    unint64_t v16 = (unint64_t)(result[4] - v15) >> 3;
    uint64_t v17 = a4;
    int32x4_t v18 = vdupq_lane_s32(*(int32x2_t *)&a8, 0);
    unint64_t v19 = (int *)(v15 + 4);
    do
    {
      uint64_t v20 = v16;
      uint64_t v21 = v19;
      uint64_t result = v13;
      if ((int)v16 >= 1)
      {
        do
        {
          *result++ = *(void *)(a2 + 8 * *v21) + 2 * *(v21 - 1) * a7;
          v21 += 2;
          --v20;
        }
        while (v20);
      }
      if ((int)v14 >= 4)
      {
        uint64_t v22 = 0;
        do
        {
          float32x4_t v23 = (float32x4_t)v18;
          if ((int)v16 >= 1)
          {
            uint64_t v24 = v16;
            uint64_t result = v13;
            uint64_t v25 = v12;
            float32x4_t v23 = (float32x4_t)v18;
            do
            {
              uint64_t v27 = *result++;
              uint64_t v26 = v27;
              LODWORD(v27) = *v25++;
              a12 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)(v26 + 2 * v22)));
              float32x4_t v23 = vmlaq_n_f32(v23, a12, *(float *)&v27);
              --v24;
            }
            while (v24);
          }
          *(float32x4_t *)(a3 + 4 * v22) = v23;
          v22 += 4;
        }
        while (v22 <= (int)v14 - 4);
        uint64_t v22 = v22;
      }
      else
      {
        uint64_t v22 = 0;
      }
      if ((int)v22 < (int)v14)
      {
        do
        {
          float v28 = *(float *)&a8;
          if ((int)v16 >= 1)
          {
            uint64_t v29 = v16;
            uint64_t result = (uint64_t *)v12;
            uint64_t v30 = v13;
            float v28 = *(float *)&a8;
            do
            {
              float v31 = *(float *)result;
              uint64_t result = (uint64_t *)((char *)result + 4);
              float v32 = v31;
              uint64_t v33 = *v30++;
              a12.i16[0] = *(_WORD *)(v33 + 2 * v22);
              a12.f32[0] = (float)a12.u32[0];
              float v28 = v28 + (float)(v32 * a12.f32[0]);
              --v29;
            }
            while (v29);
          }
          *(float *)(a3 + 4 * v22++) = v28;
        }
        while (v22 != v14);
      }
      a3 += v17;
      a2 += 8;
      BOOL v34 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v34 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<unsigned short,cv::Cast<double,double>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, void *a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)(a1 + 16) = -1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = &unk_26D989028;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + _Block_object_dispose(&a9, 8) = vrev64_s32(*a2[8]);
  *(double *)(a1 + 96) = a4;
  if ((*(_DWORD *)a2 & 0xFFF) != 6)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v9, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v11, 4294967081, v10, v9, __p, 3116);
    cv::error((cv *)v11, v6);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (void *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  return a1;
}

void sub_225EA4A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  float v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  uint64_t v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  BOOL v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *cv::Filter2D<unsigned short,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D989028;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<unsigned short,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D989028;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22A641780);
}

double *cv::Filter2D<unsigned short,cv::Cast<double,double>,cv::FilterNoVec>::operator()(double *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  if (a5 >= 1)
  {
    double v14 = result[12];
    uint64_t v15 = (double *)*((void *)result + 6);
    unint64_t v16 = (double *)*((void *)result + 9);
    uint64_t v17 = (a7 * a6);
    uint64_t v18 = *((void *)result + 3);
    unint64_t v19 = (unint64_t)(*((void *)result + 4) - v18) >> 3;
    uint64_t v20 = a4;
    uint64_t v21 = (int *)(v18 + 4);
    do
    {
      uint64_t v22 = v19;
      float32x4_t v23 = v21;
      uint64_t result = v16;
      if ((int)v19 >= 1)
      {
        do
        {
          *(void *)result++ = *(void *)(a2 + 8 * *v23) + 2 * *(v23 - 1) * a7;
          v23 += 2;
          --v22;
        }
        while (v22);
      }
      if ((int)v17 >= 4)
      {
        uint64_t v24 = 0;
        do
        {
          double v25 = v14;
          a11 = v14;
          double v26 = v14;
          double v27 = v14;
          if ((int)v19 >= 1)
          {
            uint64_t v28 = v19;
            uint64_t v29 = v16;
            uint64_t v30 = v15;
            double v27 = v14;
            double v26 = v14;
            a11 = v14;
            double v25 = v14;
            do
            {
              uint64_t v31 = *(void *)v29++;
              float v32 = (_WORD *)(v31 + 2 * v24);
              double v33 = *v30++;
              LOWORD(a14) = *v32;
              *(double *)&unint64_t v34 = (double)*(unint64_t *)&a14;
              double v25 = v25 + v33 * *(double *)&v34;
              LOWORD(v34) = v32[1];
              *(double *)&unint64_t v35 = (double)v34;
              a11 = a11 + v33 * *(double *)&v35;
              LOWORD(v35) = v32[2];
              *(double *)&unint64_t v36 = (double)v35;
              double v26 = v26 + v33 * *(double *)&v36;
              LOWORD(v36) = v32[3];
              a14 = (double)v36;
              double v27 = v27 + v33 * a14;
              --v28;
            }
            while (v28);
          }
          *(double *)(a3 + 8 * v24) = v25;
          *(double *)(a3 + ((8 * v24) | 8)) = a11;
          uint64_t result = (double *)((8 * v24) | 0x10);
          *(double *)((char *)result + a3) = v26;
          *(double *)(a3 + ((8 * v24) | 0x18)) = v27;
          v24 += 4;
        }
        while (v24 <= (int)v17 - 4);
        uint64_t v24 = v24;
      }
      else
      {
        uint64_t v24 = 0;
      }
      if ((int)v24 < (int)v17)
      {
        do
        {
          double v37 = v14;
          if ((int)v19 >= 1)
          {
            uint64_t v38 = v19;
            uint64_t result = v15;
            int32x4_t v39 = v16;
            double v37 = v14;
            do
            {
              double v40 = *result++;
              double v41 = v40;
              uint64_t v42 = *(void *)v39++;
              LOWORD(a11) = *(_WORD *)(v42 + 2 * v24);
              a11 = (double)*(unint64_t *)&a11;
              double v37 = v37 + v41 * a11;
              --v38;
            }
            while (v38);
          }
          *(double *)(a3 + 8 * v24++) = v37;
        }
        while (v24 != v17);
      }
      a3 += v20;
      a2 += 8;
      BOOL v43 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v43 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<short,cv::Cast<float,short>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, void *a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)(a1 + 16) = -1;
  *(void *)a1 = &unk_26D989070;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + _Block_object_dispose(&a9, 8) = vrev64_s32(*a2[8]);
  float v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (void *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  return a1;
}

void sub_225EA4ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  float v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  double v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  unint64_t v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *cv::Filter2D<short,cv::Cast<float,short>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D989070;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<short,cv::Cast<float,short>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D989070;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22A641780);
}

uint64_t cv::Filter2D<short,cv::Cast<float,short>,cv::FilterNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    float v7 = *(float *)(result + 96);
    int v8 = *(_DWORD **)(result + 48);
    uint64_t v9 = (a7 * a6);
    uint64_t v10 = *(void *)(result + 24);
    unint64_t v11 = (unint64_t)(*(void *)(result + 32) - v10) >> 3;
    uint64_t v12 = a4;
    float v13 = *(void **)(result + 72);
    double v14 = (int *)(v10 + 4);
    do
    {
      uint64_t v15 = v11;
      unint64_t v16 = v14;
      uint64_t v17 = v13;
      if ((int)v11 >= 1)
      {
        do
        {
          *v17++ = *(void *)(a2 + 8 * *v16) + 2 * *(v16 - 1) * a7;
          v16 += 2;
          --v15;
        }
        while (v15);
      }
      if ((int)v9 >= 4)
      {
        uint64_t result = 0;
        do
        {
          float v18 = v7;
          float v19 = v7;
          float v20 = v7;
          float v21 = v7;
          if ((int)v11 >= 1)
          {
            uint64_t v22 = v11;
            float32x4_t v23 = v13;
            uint64_t v24 = v8;
            float v21 = v7;
            float v20 = v7;
            float v19 = v7;
            float v18 = v7;
            do
            {
              uint64_t v26 = *v23++;
              uint64_t v25 = v26;
              LODWORD(v26) = *v24++;
              double v27 = (__int16 *)(v25 + 2 * result);
              float v18 = v18 + (float)(*(float *)&v26 * (float)*v27);
              float v19 = v19 + (float)(*(float *)&v26 * (float)v27[1]);
              float v20 = v20 + (float)(*(float *)&v26 * (float)v27[2]);
              float v21 = v21 + (float)(*(float *)&v26 * (float)v27[3]);
              --v22;
            }
            while (v22);
          }
          uint64_t v28 = (uint64_t)rint(v21);
          v29.i32[0] = (uint64_t)rint(v18);
          v29.i32[1] = (uint64_t)rint(v19);
          v29.i32[2] = (uint64_t)rint(v20);
          v29.i32[3] = v28;
          *(int16x4_t *)(a3 + 2 * result) = vqmovn_s32(v29);
          result += 4;
        }
        while (result <= (int)v9 - 4);
        uint64_t result = result;
      }
      else
      {
        uint64_t result = 0;
      }
      if ((int)result < (int)v9)
      {
        do
        {
          float v30 = v7;
          if ((int)v11 >= 1)
          {
            uint64_t v31 = v11;
            float v32 = (float *)v8;
            double v33 = v13;
            float v30 = v7;
            do
            {
              float v34 = *v32++;
              float v35 = v34;
              uint64_t v36 = *v33++;
              float v30 = v30 + (float)(v35 * (float)*(__int16 *)(v36 + 2 * result));
              --v31;
            }
            while (v31);
          }
          uint64_t v37 = (uint64_t)rint(v30);
          if ((int)v37 <= -32768) {
            LODWORD(v37) = -32768;
          }
          if ((int)v37 >= 0x7FFF) {
            LOWORD(v37) = 0x7FFF;
          }
          *(_WORD *)(a3 + 2 * result++) = v37;
        }
        while (result != v9);
      }
      a3 += v12;
      a2 += 8;
      BOOL v38 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v38 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<short,cv::Cast<float,float>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, void *a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)(a1 + 16) = -1;
  *(void *)a1 = &unk_26D9890B8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + _Block_object_dispose(&a9, 8) = vrev64_s32(*a2[8]);
  float v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (void *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  return a1;
}

void sub_225EA53C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  float v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  double v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  float v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *cv::Filter2D<short,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D9890B8;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<short,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D9890B8;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22A641780);
}

uint64_t *cv::Filter2D<short,cv::Cast<float,float>,cv::FilterNoVec>::operator()(uint64_t *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8)
{
  if (a5 >= 1)
  {
    LODWORD(a_Block_object_dispose(&a9, 8) = *((_DWORD *)result + 24);
    int v8 = (_DWORD *)result[6];
    uint64_t v9 = (uint64_t *)result[9];
    uint64_t v10 = (a7 * a6);
    uint64_t v11 = result[3];
    unint64_t v12 = (unint64_t)(result[4] - v11) >> 3;
    uint64_t v13 = a4;
    int32x4_t v14 = vdupq_lane_s32(*(int32x2_t *)&a8, 0);
    uint64_t v15 = (int *)(v11 + 4);
    do
    {
      uint64_t v16 = v12;
      uint64_t v17 = v15;
      uint64_t result = v9;
      if ((int)v12 >= 1)
      {
        do
        {
          *result++ = *(void *)(a2 + 8 * *v17) + 2 * *(v17 - 1) * a7;
          v17 += 2;
          --v16;
        }
        while (v16);
      }
      if ((int)v10 >= 4)
      {
        uint64_t v18 = 0;
        do
        {
          float32x4_t v19 = (float32x4_t)v14;
          if ((int)v12 >= 1)
          {
            uint64_t v20 = v12;
            uint64_t result = v9;
            float v21 = v8;
            float32x4_t v19 = (float32x4_t)v14;
            do
            {
              uint64_t v23 = *result++;
              uint64_t v22 = v23;
              LODWORD(v23) = *v21++;
              float32x4_t v19 = vmlaq_n_f32(v19, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)(v22 + 2 * v18))), *(float *)&v23);
              --v20;
            }
            while (v20);
          }
          *(float32x4_t *)(a3 + 4 * v1_Block_object_dispose(&a9, 8) = v19;
          v18 += 4;
        }
        while (v18 <= (int)v10 - 4);
        uint64_t v18 = v18;
      }
      else
      {
        uint64_t v18 = 0;
      }
      if ((int)v18 < (int)v10)
      {
        do
        {
          float v24 = *(float *)&a8;
          if ((int)v12 >= 1)
          {
            uint64_t v25 = v12;
            uint64_t result = (uint64_t *)v8;
            uint64_t v26 = v9;
            float v24 = *(float *)&a8;
            do
            {
              float v27 = *(float *)result;
              uint64_t result = (uint64_t *)((char *)result + 4);
              float v28 = v27;
              uint64_t v29 = *v26++;
              float v24 = v24 + (float)(v28 * (float)*(__int16 *)(v29 + 2 * v18));
              --v25;
            }
            while (v25);
          }
          *(float *)(a3 + 4 * v18++) = v24;
        }
        while (v18 != v10);
      }
      a3 += v13;
      a2 += 8;
      BOOL v30 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v30 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<short,cv::Cast<double,double>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, void *a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)(a1 + 16) = -1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = &unk_26D989100;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + _Block_object_dispose(&a9, 8) = vrev64_s32(*a2[8]);
  *(double *)(a1 + 96) = a4;
  if ((*(_DWORD *)a2 & 0xFFF) != 6)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v9, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v11, 4294967081, v10, v9, __p, 3116);
    cv::error((cv *)v11, v6);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (void *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  return a1;
}

void sub_225EA5800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  float v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  double v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  float v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *cv::Filter2D<short,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D989100;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<short,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D989100;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22A641780);
}

double *cv::Filter2D<short,cv::Cast<double,double>,cv::FilterNoVec>::operator()(double *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    double v7 = result[12];
    int v8 = (double *)*((void *)result + 6);
    uint64_t v9 = (double *)*((void *)result + 9);
    uint64_t v10 = (a7 * a6);
    uint64_t v11 = *((void *)result + 3);
    unint64_t v12 = (unint64_t)(*((void *)result + 4) - v11) >> 3;
    uint64_t v13 = a4;
    int32x4_t v14 = (int *)(v11 + 4);
    do
    {
      uint64_t v15 = v12;
      uint64_t v16 = v14;
      uint64_t result = v9;
      if ((int)v12 >= 1)
      {
        do
        {
          *(void *)result++ = *(void *)(a2 + 8 * *v16) + 2 * *(v16 - 1) * a7;
          v16 += 2;
          --v15;
        }
        while (v15);
      }
      if ((int)v10 >= 4)
      {
        uint64_t v17 = 0;
        do
        {
          double v18 = v7;
          double v19 = v7;
          double v20 = v7;
          double v21 = v7;
          if ((int)v12 >= 1)
          {
            uint64_t v22 = v12;
            uint64_t v23 = v9;
            float v24 = v8;
            double v21 = v7;
            double v20 = v7;
            double v19 = v7;
            double v18 = v7;
            do
            {
              uint64_t v26 = *(void *)v23++;
              uint64_t v25 = v26;
              double v27 = *v24++;
              float v28 = (__int16 *)(v25 + 2 * v17);
              double v18 = v18 + v27 * (double)*v28;
              double v19 = v19 + v27 * (double)v28[1];
              double v20 = v20 + v27 * (double)v28[2];
              double v21 = v21 + v27 * (double)v28[3];
              --v22;
            }
            while (v22);
          }
          *(double *)(a3 + 8 * v17) = v18;
          *(double *)(a3 + ((8 * v17) | 8)) = v19;
          uint64_t result = (double *)((8 * v17) | 0x10);
          *(double *)((char *)result + a3) = v20;
          *(double *)(a3 + ((8 * v17) | 0x18)) = v21;
          v17 += 4;
        }
        while (v17 <= (int)v10 - 4);
        uint64_t v17 = v17;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if ((int)v17 < (int)v10)
      {
        do
        {
          double v29 = v7;
          if ((int)v12 >= 1)
          {
            uint64_t v30 = v12;
            uint64_t result = v8;
            uint64_t v31 = v9;
            double v29 = v7;
            do
            {
              double v32 = *result++;
              double v33 = v32;
              uint64_t v34 = *(void *)v31++;
              double v29 = v29 + v33 * (double)*(__int16 *)(v34 + 2 * v17);
              --v30;
            }
            while (v30);
          }
          *(double *)(a3 + 8 * v17++) = v29;
        }
        while (v17 != v10);
      }
      a3 += v13;
      a2 += 8;
      BOOL v35 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v35 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<float,cv::Cast<float,float>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, void *a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)(a1 + 16) = -1;
  *(void *)a1 = &unk_26D989148;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + _Block_object_dispose(&a9, 8) = vrev64_s32(*a2[8]);
  float v6 = a4;
  *(float *)(a1 + 96) = v6;
  if ((*(_DWORD *)a2 & 0xFFF) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v10, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v12, 4294967081, v11, v10, __p, 3116);
    cv::error((cv *)v12, v7);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (void *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  return a1;
}

void sub_225EA5C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  double v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  double v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  uint64_t v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *cv::Filter2D<float,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D989148;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<float,cv::Cast<float,float>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D989148;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22A641780);
}

unint64_t cv::Filter2D<float,cv::Cast<float,float>,cv::FilterNoVec>::operator()(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, double a8)
{
  if (a5 >= 1)
  {
    LODWORD(a_Block_object_dispose(&a9, 8) = *(_DWORD *)(result + 96);
    int v8 = *(_DWORD **)(result + 48);
    uint64_t v9 = *(uint64_t **)(result + 72);
    uint64_t v10 = (a7 * a6);
    uint64_t v11 = *(void *)(result + 24);
    unint64_t v12 = (unint64_t)(*(void *)(result + 32) - v11) >> 3;
    uint64_t v13 = a4;
    int32x4_t v14 = vdupq_lane_s32(*(int32x2_t *)&a8, 0);
    uint64_t v15 = (int *)(v11 + 4);
    do
    {
      uint64_t v16 = v12;
      uint64_t v17 = v15;
      uint64_t result = (unint64_t)v9;
      if ((int)v12 >= 1)
      {
        do
        {
          *(void *)uint64_t result = *(void *)(a2 + 8 * *v17) + 4 * *(v17 - 1) * a7;
          result += 8;
          v17 += 2;
          --v16;
        }
        while (v16);
      }
      if ((int)v10 >= 4)
      {
        uint64_t v18 = 0;
        do
        {
          float32x4_t v19 = (float32x4_t)v14;
          if ((int)v12 >= 1)
          {
            uint64_t result = v12;
            double v20 = v9;
            double v21 = v8;
            float32x4_t v19 = (float32x4_t)v14;
            do
            {
              uint64_t v23 = *v20++;
              uint64_t v22 = v23;
              LODWORD(v23) = *v21++;
              float32x4_t v19 = vmlaq_n_f32(v19, *(float32x4_t *)(v22 + 4 * v18), *(float *)&v23);
              --result;
            }
            while (result);
          }
          *(float32x4_t *)(a3 + 4 * v1_Block_object_dispose(&a9, 8) = v19;
          v18 += 4;
        }
        while (v18 <= (int)v10 - 4);
        uint64_t v18 = v18;
      }
      else
      {
        uint64_t v18 = 0;
      }
      if ((int)v18 < (int)v10)
      {
        do
        {
          float v24 = *(float *)&a8;
          if ((int)v12 >= 1)
          {
            uint64_t v25 = v12;
            uint64_t result = (unint64_t)v8;
            uint64_t v26 = v9;
            float v24 = *(float *)&a8;
            do
            {
              float v27 = *(float *)result;
              result += 4;
              float v28 = v27;
              uint64_t v29 = *v26++;
              float v24 = v24 + (float)(v28 * *(float *)(v29 + 4 * v18));
              --v25;
            }
            while (v25);
          }
          *(float *)(a3 + 4 * v18++) = v24;
        }
        while (v18 != v10);
      }
      a3 += v13;
      a2 += 8;
      BOOL v30 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v30 | (a5 == 0)));
  }
  return result;
}

uint64_t cv::Filter2D<double,cv::Cast<double,double>,cv::FilterNoVec>::Filter2D(uint64_t a1, int32x2_t **a2, void *a3, double a4)
{
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = -1;
  *(void *)(a1 + 16) = -1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = &unk_26D989190;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = a1 + 72;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = *a3;
  *(int32x2_t *)(a1 + _Block_object_dispose(&a9, 8) = vrev64_s32(*a2[8]);
  *(double *)(a1 + 96) = a4;
  if ((*(_DWORD *)a2 & 0xFFF) != 6)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "_kernel.type() == DataType<KT>::type");
    std::string::basic_string[abi:ne180100]<0>(v9, "Filter2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/filter.cpp");
    cv::Exception::Exception(v11, 4294967081, v10, v9, __p, 3116);
    cv::error((cv *)v11, v6);
  }
  cv::preprocess2DKernel((cv::Mat *)a2, (void *)(a1 + 24), (unint64_t *)(a1 + 48));
  std::vector<unsigned char *>::resize(v5, (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  return a1;
}

void sub_225EA60C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  double v32 = *v30;
  if (*v30)
  {
    v27[10] = v32;
    operator delete(v32);
  }
  double v33 = *v29;
  if (*v29)
  {
    v27[7] = v33;
    operator delete(v33);
  }
  uint64_t v34 = *v28;
  if (*v28)
  {
    v27[4] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *cv::Filter2D<double,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D989190;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void cv::Filter2D<double,cv::Cast<double,double>,cv::FilterNoVec>::~Filter2D(void *a1)
{
  *a1 = &unk_26D989190;
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x22A641780);
}

double *cv::Filter2D<double,cv::Cast<double,double>,cv::FilterNoVec>::operator()(double *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    double v7 = result[12];
    int v8 = (double *)*((void *)result + 6);
    uint64_t v9 = (double *)*((void *)result + 9);
    uint64_t v10 = (a7 * a6);
    uint64_t v11 = *((void *)result + 3);
    unint64_t v12 = (unint64_t)(*((void *)result + 4) - v11) >> 3;
    uint64_t v13 = a4;
    int32x4_t v14 = (int *)(v11 + 4);
    do
    {
      uint64_t v15 = v12;
      uint64_t v16 = v14;
      uint64_t result = v9;
      if ((int)v12 >= 1)
      {
        do
        {
          *(void *)result++ = *(void *)(a2 + 8 * *v16) + 8 * *(v16 - 1) * a7;
          v16 += 2;
          --v15;
        }
        while (v15);
      }
      if ((int)v10 >= 4)
      {
        uint64_t v17 = 0;
        do
        {
          double v18 = v7;
          double v19 = v7;
          double v20 = v7;
          double v21 = v7;
          if ((int)v12 >= 1)
          {
            uint64_t v22 = v12;
            uint64_t v23 = v9;
            float v24 = v8;
            double v21 = v7;
            double v20 = v7;
            double v19 = v7;
            double v18 = v7;
            do
            {
              uint64_t v25 = *(void *)v23++;
              uint64_t v26 = (double *)(v25 + 8 * v17);
              double v27 = *v24++;
              double v18 = v18 + v27 * *v26;
              double v19 = v19 + v27 * v26[1];
              double v20 = v20 + v27 * v26[2];
              double v21 = v21 + v27 * v26[3];
              --v22;
            }
            while (v22);
          }
          *(double *)(a3 + 8 * v17) = v18;
          *(double *)(a3 + ((8 * v17) | 8)) = v19;
          uint64_t result = (double *)((8 * v17) | 0x10);
          *(double *)((char *)result + a3) = v20;
          *(double *)(a3 + ((8 * v17) | 0x18)) = v21;
          v17 += 4;
        }
        while (v17 <= (int)v10 - 4);
        uint64_t v17 = v17;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if ((int)v17 < (int)v10)
      {
        do
        {
          double v28 = v7;
          if ((int)v12 >= 1)
          {
            uint64_t v29 = v12;
            uint64_t result = v8;
            BOOL v30 = v9;
            double v28 = v7;
            do
            {
              double v31 = *result++;
              double v32 = v31;
              uint64_t v33 = *(void *)v30++;
              double v28 = v28 + v32 * *(double *)(v33 + 8 * v17);
              --v29;
            }
            while (v29);
          }
          *(double *)(a3 + 8 * v17++) = v28;
        }
        while (v17 != v10);
      }
      a3 += v13;
      a2 += 8;
      BOOL v34 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v34 | (a5 == 0)));
  }
  return result;
}

unint64_t cv::fastMalloc(cv *this)
{
  unint64_t v2 = malloc_type_malloc((size_t)this + 24, 0x583E1841uLL);
  if (!v2)
  {
    cv::format(v7, this);
    std::string::basic_string[abi:ne180100]<0>(v6, "OutOfMemoryError");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/alloc.cpp");
    cv::Exception::Exception(v8, 4294967292, v7, v6, __p, 52);
    cv::error((cv *)v8, v3);
  }
  *(void *)((((unint64_t)v2 + 23) & 0xFFFFFFFFFFFFFFF0) - _Block_object_dispose(&a9, 8) = v2;
  return ((unint64_t)v2 + 23) & 0xFFFFFFFFFFFFFFF0;
}

void sub_225EA64B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void cv::fastFree(void **this, void *a2)
{
  if (this) {
    free(*(this - 1));
  }
}

void cv::pyrDown(void (***a1)(void **__return_ptr, void, uint64_t), uint64_t a2, int *a3, uint64_t a4)
{
  if (!a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v32, "borderType != BORDER_CONSTANT");
    std::string::basic_string[abi:ne180100]<0>(__p, "pyrDown");
    std::string::basic_string[abi:ne180100]<0>(&v43, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    double v7 = (cv *)cv::Exception::Exception(v44, 4294967081, &v32, __p, &v43, 422);
    cv::error(v7, v8);
  }
  (**a1)(&v32, a1, 0xFFFFFFFFLL);
  int v9 = *a3;
  int v10 = a3[1];
  if (!*(void *)a3)
  {
    if (v34 >= -1) {
      int v11 = v34 + 1;
    }
    else {
      int v11 = v34 + 2;
    }
    int v9 = v11 >> 1;
    if (v33 >= -1) {
      int v12 = v33 + 1;
    }
    else {
      int v12 = v33 + 2;
    }
    int v10 = v12 >> 1;
  }
  v31[0] = v9;
  v31[1] = v10;
  (*(void (**)(uint64_t, _DWORD *, void, uint64_t, void, void))(*(void *)a2 + 128))(a2, v31, (unsigned __int16)v32 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void **__return_ptr, uint64_t, uint64_t))a2)(__p, a2, 0xFFFFFFFFLL);
  uint64_t v13 = v32 & 7;
  if (v13 == 7 || ((0x6Du >> v13) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v43, "");
    std::string::basic_string[abi:ne180100]<0>(&v22, "pyrDown");
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    double v19 = (cv *)cv::Exception::Exception(v44, 4294967086, &v43, &v22, &v21, 447);
    cv::error(v19, v20);
  }
  ((void (*)(void **, void **, uint64_t))off_26D9891C8[v13])(&v32, __p, a4);
  if (v24 && atomic_fetch_add(v24, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)__p, v14);
  }
  __p[2] = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if (SHIDWORD(__p[0]) >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v28;
    do
      *(_DWORD *)(v16 + 4 * v15++) = 0;
    while (v15 < SHIDWORD(__p[0]));
  }
  float v24 = 0;
  if (v29 != (cv *)&v30) {
    cv::fastFree((void **)v29, v14);
  }
  if (v36 && atomic_fetch_add(v36, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v32, v14);
  }
  uint64_t v35 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  if (SHIDWORD(v32) >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = v40;
    do
      *(_DWORD *)(v18 + 4 * v17++) = 0;
    while (v17 < SHIDWORD(v32));
  }
  uint64_t v36 = 0;
  if (v41 != (cv *)&v42) {
    cv::fastFree((void **)v41, v14);
  }
}

void sub_225EA6850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  cv::Exception::~Exception((cv::Exception *)(v43 - 168));
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v43 - 169) < 0) {
    operator delete(*(void **)(v43 - 192));
  }
  cv::Mat::~Mat((cv::Mat *)&a22, v45);
  cv::Mat::~Mat((cv::Mat *)&a38, v46);
  _Unwind_Resume(a1);
}

void *cv::pyrDown_<cv::FixPtCast<unsigned char,8>,cv::NoVec<int,unsigned char>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unsigned int *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v92 = v3;
  uint64_t v126 = *MEMORY[0x263EF8340];
  if (!*((void *)v2 + 2)) {
    goto LABEL_7;
  }
  uint64_t v5 = v2[1];
  if ((int)v5 >= 3)
  {
    double v7 = (int *)*((void *)v2 + 8);
    uint64_t v6 = 1;
    do
    {
      uint64_t v8 = *v7++;
      v6 *= v8;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = (int)v2[3] * (uint64_t)(int)v2[2];
  }
  if (!v6)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(v124, "!_src.empty()");
    std::string::basic_string[abi:ne180100]<0>(&v118, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v125, 4294967081, v124, &v118, &__p, 194);
    cv::error((cv *)v125, v9);
  }
  int v109 = *(_DWORD *)(*((void *)v2 + 8) + 4);
  int v101 = **((_DWORD **)v2 + 8);
  int v10 = *(_DWORD *)(*(void *)(v3 + 64) + 4);
  uint64_t v93 = **(unsigned int **)(v3 + 64);
  unint64_t v102 = *v2;
  uint64_t v11 = (v102 >> 3) & 0x1FF;
  uint64_t v12 = ((v11 + 1) * v10);
  int64_t v13 = 0x500000000 * (((int)v12 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x1000000000;
  unint64_t v118 = v120;
  uint64_t v119 = 1032;
  if ((unint64_t)v13 >= 0x40800000001)
  {
    uint64_t v119 = v13 >> 32;
    operator new[]();
  }
  __p = v117;
  uint64_t v116 = 1032;
  if (v12 >= 0x409)
  {
    uint64_t v116 = (int)v12;
    operator new[]();
  }
  uint64_t v123 = 0;
  long long v122 = 0u;
  long long v121 = 0u;
  int v14 = 2 * v10 - v109;
  if (v14 < 0) {
    int v14 = v109 - 2 * v10;
  }
  if (v14 > 2) {
    goto LABEL_18;
  }
  int v15 = 2 * v93 - v101;
  if (v15 < 0) {
    int v15 = v101 - 2 * v93;
  }
  if (v15 >= 3)
  {
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(v113, "std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2");
    std::string::basic_string[abi:ne180100]<0>(v112, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(v111, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v114, 4294967081, v113, v112, v111, 208);
    cv::error((cv *)v114, v16);
  }
  int v104 = (v12 + 15) & 0xFFFFFFF0;
  int v100 = v2;
  int v105 = v4;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = v109 - 3;
  if (v109 < 3) {
    int v19 = v109 - 2;
  }
  int v20 = v19 >> 1;
  if (v10 >= v20 + 1) {
    int v21 = v20 + 1;
  }
  else {
    int v21 = v10;
  }
  int v99 = v21;
  int v107 = 2 * v21 - 2;
  unsigned int v106 = v11 + 1;
  do
  {
    int v22 = cv::borderInterpolate((cv *)(v18 - 2), v109, v105);
    int v23 = cv::borderInterpolate((cv *)(v107 + v18), v109, v105);
    int v24 = v22 * v106;
    uint64_t v25 = v11 + 1;
    uint64_t v26 = v17;
    int v27 = v23 * v106;
    do
    {
      *(_DWORD *)&v125[v26] = v24;
      *(_DWORD *)((char *)v124 + v26) = v27;
      v26 += 4;
      ++v27;
      ++v24;
      --v25;
    }
    while (v25);
    ++v18;
    v17 += 4 * ((v102 >> 3) & 0x1FF) + 4;
  }
  while (v18 != 7);
  if ((int)v12 >= 1)
  {
    for (uint64_t i = 0; i != v12; ++i)
      *(_DWORD *)&v117[4 * i] = i % v106 + 2 * v106 * (i / v106);
  }
  if ((int)v93 < 1) {
    goto LABEL_72;
  }
  int v98 = 0;
  uint64_t v29 = 0;
  int v30 = v106 * v99;
  uint64_t v31 = (v102 >> 3) & 0x1FF;
  uint64_t v108 = 12 * v31 + 12;
  *(void *)unint64_t v110 = 16 * v31 + 16;
  uint64_t v32 = v31;
  uint64_t v33 = 8 * v31 + 8;
  uint64_t v34 = 4294967294;
  int v96 = 2;
  do
  {
    uint64_t v94 = *(void *)(v92 + 80);
    uint64_t v95 = *(void *)(v92 + 16);
    uint64_t v97 = v29;
    if (2 * v29 + 2 < (int)v34) {
      goto LABEL_66;
    }
    int v35 = v96;
    if ((int)v34 > v96) {
      int v35 = v34;
    }
    int v103 = v35;
    unsigned int v91 = v35 + 1;
    while (2)
    {
      int v36 = cv::borderInterpolate((cv *)v34, v101, v105);
      int v37 = 0;
      uint64_t v38 = ((int)v34 + 2) % 5 * v104;
      uint64_t v39 = *((void *)v100 + 2) + *((void *)v100 + 10) * v36;
      uint64_t v40 = &v120[4 * v38];
      double v41 = &v120[4 * v38 + 8];
      uint64_t v42 = &v120[4 * v38 + 4];
      uint64_t v43 = v125;
      for (int j = v11 + 1; ; int j = v12)
      {
        if (v37 < j)
        {
          uint64_t v45 = 0;
          uint64_t v46 = &v43[4 * v37];
          double v47 = &v40[4 * v37];
          uint64_t v48 = (uint64_t)&v43[4 * v32 + 4 + 4 * v37];
          uint64_t v49 = j - (uint64_t)v37;
          do
          {
            *(_DWORD *)&v47[4 * v45] = 6 * *(unsigned __int8 *)(v39 + *(int *)&v46[4 * v45 + v33])
                                     + 4
                                     * (*(unsigned __int8 *)(v39 + *(int *)&v46[4 * v45 + v108])
                                      + *(unsigned __int8 *)(v39 + *(int *)(v48 + 4 * v45)))
                                     + *(unsigned __int8 *)(v39 + *(int *)&v46[4 * v45])
                                     + *(unsigned __int8 *)(v39 + *(int *)&v46[4 * v45 + *(void *)v110]);
            ++v45;
          }
          while (v49 != v45);
          int v37 = j;
        }
        if (v37 == v12) {
          break;
        }
        switch(v11)
        {
          case 0:
            if (v37 >= v30) {
              goto LABEL_62;
            }
            int v62 = 2 * v37;
            int32x2_t v63 = &v40[4 * v37];
            uint64_t v64 = v30 - (uint64_t)v37;
            do
            {
              int v65 = *(unsigned __int8 *)(v39 + v62);
              int v66 = *(unsigned __int8 *)(v39 + v62 + 1) + *(unsigned __int8 *)(v39 + v62 - 1);
              int v67 = *(unsigned __int8 *)(v39 + v62 - 2);
              v62 += 2;
              *v63++ = v67 + 6 * v65 + 4 * v66 + *(unsigned __int8 *)(v39 + v62);
              --v64;
            }
            while (v64);
            goto LABEL_61;
          case 2:
            if (v37 >= v30) {
              goto LABEL_62;
            }
            uint64_t v50 = 0;
            uint64_t v51 = v37;
            int v57 = 2 * v37;
            uint64_t v58 = (int *)&v42[4 * v37];
            do
            {
              uint64_t v59 = (unsigned __int8 *)(v39 + v57);
              int v60 = *(v59 - 6) + 6 * *v59 + 4 * (v59[3] + *(v59 - 3)) + v59[6];
              int v61 = *(v59 - 5) + 6 * v59[1] + 4 * (v59[4] + *(v59 - 2)) + v59[7];
              LODWORD(v59) = *(v59 - 4) + 6 * v59[2] + 4 * (v59[5] + *(v59 - 1)) + v59[8];
              *(v58 - 1) = v60;
              *uint64_t v58 = v61;
              v58[1] = (int)v59;
              v57 += 6;
              v50 += 3;
              v58 += 3;
            }
            while (v51 + v50 < v30);
            goto LABEL_53;
          case 3:
            if (v37 >= v30) {
              goto LABEL_62;
            }
            uint64_t v50 = 0;
            uint64_t v51 = v37;
            int v52 = 2 * v37;
            double v53 = (int *)&v41[4 * v37];
            do
            {
              uint64_t v54 = (unsigned __int8 *)(v39 + v52);
              int v55 = *(v54 - 7) + 6 * v54[1] + 4 * (v54[5] + *(v54 - 3)) + v54[9];
              *(v53 - 2) = *(v54 - 8) + 6 * *v54 + 4 * (v54[4] + *(v54 - 4)) + v54[8];
              *(v53 - 1) = v55;
              int v56 = *(v54 - 6) + 6 * v54[2] + 4 * (v54[6] + *(v54 - 2)) + v54[10];
              LODWORD(v54) = *(v54 - 5) + 6 * v54[3] + 4 * (v54[7] + *(v54 - 1)) + v54[11];
              *double v53 = v56;
              v53[1] = (int)v54;
              v53 += 4;
              v52 += 8;
              v50 += 4;
            }
            while (v51 + v50 < v30);
LABEL_53:
            int v37 = v51 + v50;
            goto LABEL_62;
        }
        if (v37 < v30)
        {
          int32x4_t v68 = (int *)&v117[4 * v37];
          int32x4_t v69 = &v40[4 * v37];
          uint64_t v70 = v30 - (uint64_t)v37;
          do
          {
            uint64_t v71 = *v68++;
            *v69++ = *(unsigned __int8 *)(v39 + v71 - 2 * v106)
                   + 6 * *(unsigned __int8 *)(v39 + v71)
                   + 4 * (*(unsigned __int8 *)(v39 + v71 + v106) + *(unsigned __int8 *)(v39 + v71 - v106))
                   + *(unsigned __int8 *)(v39 + v71 + 2 * v106);
            --v70;
          }
          while (v70);
LABEL_61:
          int v37 = v106 * v99;
        }
LABEL_62:
        uint64_t v43 = (char *)v124 - 4 * v37;
      }
      BOOL v72 = v34 == v103;
      uint64_t v34 = (v34 + 1);
      if (!v72) {
        continue;
      }
      break;
    }
    uint64_t v34 = v91;
LABEL_66:
    for (uint64_t k = 0; k != 5; ++k)
      *((void *)&v121 + k) = &v120[4 * (v98 + (int)k) % 5 * v104];
    if ((int)v12 >= 1)
    {
      int32x2_t v75 = (int *)*((void *)&v121 + 1);
      uint64_t v74 = (int *)v121;
      int32x4_t v77 = (int *)*((void *)&v122 + 1);
      int32x2_t v76 = (int *)v122;
      int32x4_t v78 = (unsigned char *)(v95 + v94 * v97);
      uint64_t v79 = 4 * v12;
      int v80 = v123;
      do
      {
        int v82 = *v76++;
        __int16 v81 = v82;
        int v84 = *v75++;
        __int16 v83 = v84;
        int v85 = *v77++;
        __int16 v86 = v85 + v83;
        int v88 = *v74++;
        __int16 v87 = v88;
        int v89 = *v80++;
        *v78++ = (unsigned __int16)(v87 + 6 * v81 + 4 * v86 + v89 + 128) >> 8;
        v79 -= 4;
      }
      while (v79);
    }
    uint64_t v29 = v97 + 1;
    v96 += 2;
    v98 += 2;
  }
  while (v97 + 1 != v93);
LABEL_72:
  if (__p != v117 && __p) {
    MEMORY[0x22A641760]();
  }
  uint64_t result = v118;
  if (v118 != v120 && v118) {
    return (void *)MEMORY[0x22A641760]();
  }
  return result;
}

void sub_225EA7300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (STACK[0x11C0] != a11 && STACK[0x11C0] != 0) {
    MEMORY[0x22A641760]();
  }
  _Unwind_Resume(a1);
}

void *cv::pyrDown_<cv::FixPtCast<short,8>,cv::NoVec<int,short>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unsigned int *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v90 = v3;
  uint64_t v122 = *MEMORY[0x263EF8340];
  if (!*((void *)v2 + 2)) {
    goto LABEL_7;
  }
  uint64_t v5 = v2[1];
  if ((int)v5 >= 3)
  {
    double v7 = (int *)*((void *)v2 + 8);
    uint64_t v6 = 1;
    do
    {
      uint64_t v8 = *v7++;
      v6 *= v8;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = (int)v2[3] * (uint64_t)(int)v2[2];
  }
  if (!v6)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(v120, "!_src.empty()");
    std::string::basic_string[abi:ne180100]<0>(&v114, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v121, 4294967081, v120, &v114, &__p, 194);
    cv::error((cv *)v121, v9);
  }
  int v105 = *(_DWORD *)(*((void *)v2 + 8) + 4);
  int v100 = **((_DWORD **)v2 + 8);
  int v10 = *(_DWORD *)(*(void *)(v3 + 64) + 4);
  uint64_t v91 = **(unsigned int **)(v3 + 64);
  unint64_t v98 = *v2;
  uint64_t v11 = (v98 >> 3) & 0x1FF;
  unsigned int v12 = v11 + 1;
  uint64_t v13 = ((v11 + 1) * v10);
  int64_t v14 = 0x500000000 * (((int)v13 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x1000000000;
  long long v114 = v116;
  uint64_t v115 = 1032;
  if ((unint64_t)v14 >= 0x40800000001)
  {
    uint64_t v115 = v14 >> 32;
    operator new[]();
  }
  __p = v113;
  uint64_t v112 = 1032;
  if (v13 >= 0x409)
  {
    uint64_t v112 = (int)v13;
    operator new[]();
  }
  uint64_t v119 = 0;
  long long v118 = 0u;
  long long v117 = 0u;
  int v15 = 2 * v10 - v105;
  if (v15 < 0) {
    int v15 = v105 - 2 * v10;
  }
  if (v15 > 2) {
    goto LABEL_18;
  }
  int v16 = 2 * v91 - v100;
  if (v16 < 0) {
    int v16 = v100 - 2 * v91;
  }
  if (v16 >= 3)
  {
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(v109, "std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2");
    std::string::basic_string[abi:ne180100]<0>(v108, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(v107, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v110, 4294967081, v109, v108, v107, 208);
    cv::error((cv *)v110, v17);
  }
  int v102 = (v13 + 15) & 0xFFFFFFF0;
  int v99 = v2;
  int v103 = v4;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v20 = v105 - 3;
  if (v105 < 3) {
    int v20 = v105 - 2;
  }
  int v21 = v20 >> 1;
  if (v10 >= v21 + 1) {
    int v22 = v21 + 1;
  }
  else {
    int v22 = v10;
  }
  int v95 = v22;
  int v104 = 2 * v22 - 2;
  do
  {
    int v23 = cv::borderInterpolate((cv *)(v19 - 2), v105, v103);
    int v24 = cv::borderInterpolate((cv *)(v104 + v19), v105, v103);
    int v25 = v23 * v12;
    uint64_t v26 = v11 + 1;
    uint64_t v27 = v18;
    int v28 = v24 * v12;
    do
    {
      *(_DWORD *)&v121[v27] = v25;
      *(_DWORD *)((char *)v120 + v27) = v28;
      v27 += 4;
      ++v28;
      ++v25;
      --v26;
    }
    while (v26);
    ++v19;
    v18 += 4 * ((v98 >> 3) & 0x1FF) + 4;
  }
  while (v19 != 7);
  int v29 = 2 * v12;
  if ((int)v13 >= 1)
  {
    for (uint64_t i = 0; i != v13; ++i)
      *(_DWORD *)&v113[4 * i] = i % v12 + v29 * (i / v12);
  }
  if ((int)v91 < 1) {
    goto LABEL_72;
  }
  uint64_t v31 = 0;
  int v32 = v12 * v95;
  uint64_t v33 = (v98 >> 3) & 0x1FF;
  *(void *)unsigned int v106 = 16 * v33 + 16;
  uint64_t v34 = 8 * v33 + 8;
  int v97 = 0;
  uint64_t v35 = 4294967294;
  int v94 = 2;
  do
  {
    uint64_t v92 = *(void *)(v90 + 80);
    uint64_t v93 = *(void *)(v90 + 16);
    uint64_t v96 = v31;
    if (2 * v31 + 2 < (int)v35) {
      goto LABEL_66;
    }
    int v36 = v94;
    if ((int)v35 > v94) {
      int v36 = v35;
    }
    int v101 = v36;
    unsigned int v89 = v36 + 1;
    while (2)
    {
      int v37 = cv::borderInterpolate((cv *)v35, v100, v103);
      int v38 = 0;
      uint64_t v39 = ((int)v35 + 2) % 5 * v102;
      uint64_t v40 = *((void *)v99 + 2) + *((void *)v99 + 10) * v37;
      double v41 = &v116[4 * v39];
      uint64_t v42 = &v116[4 * v39 + 4];
      uint64_t v43 = v121;
      for (int j = v11 + 1; ; int j = (v11 + 1) * v10)
      {
        if (v38 < j)
        {
          uint64_t v45 = 0;
          uint64_t v46 = &v43[4 * v38];
          double v47 = &v41[4 * v38];
          uint64_t v48 = (uint64_t)&v43[4 * ((v98 >> 3) & 0x1FF) + 4 + 4 * v38];
          uint64_t v49 = j - (uint64_t)v38;
          do
          {
            *(_DWORD *)&v47[4 * v45] = 6 * *(__int16 *)(v40 + 2 * *(int *)&v46[4 * v45 + v34])
                                     + 4
                                     * (*(__int16 *)(v40 + 2 * *(int *)&v46[12 * ((v98 >> 3) & 0x1FF) + 12 + 4 * v45])
                                      + *(__int16 *)(v40 + 2 * *(int *)(v48 + 4 * v45)))
                                     + *(__int16 *)(v40 + 2 * *(int *)&v46[4 * v45])
                                     + *(__int16 *)(v40 + 2 * *(int *)&v46[4 * v45 + *(void *)v106]);
            ++v45;
          }
          while (v49 != v45);
          int v38 = j;
        }
        if (v38 == v13) {
          break;
        }
        switch(v11)
        {
          case 0:
            if (v38 >= v32) {
              goto LABEL_62;
            }
            int v60 = 2 * v38;
            int v61 = &v41[4 * v38];
            uint64_t v62 = v32 - (uint64_t)v38;
            do
            {
              int v63 = *(__int16 *)(v40 + 2 * v60);
              int v64 = *(__int16 *)(v40 + 2 * (v60 + 1)) + *(__int16 *)(v40 + 2 * (v60 - 1));
              int v65 = *(__int16 *)(v40 + 2 * (v60 - 2));
              v60 += 2;
              *v61++ = v65 + 6 * v63 + 4 * v64 + *(__int16 *)(v40 + 2 * v60);
              --v62;
            }
            while (v62);
            goto LABEL_61;
          case 2:
            if (v38 >= v32) {
              goto LABEL_62;
            }
            uint64_t v50 = 0;
            uint64_t v51 = v38;
            int v55 = 2 * v38;
            int v56 = (int *)&v42[4 * v38];
            do
            {
              int v57 = (__int16 *)(v40 + 2 * v55);
              int v58 = *(v57 - 6) + 6 * *v57 + 4 * (v57[3] + *(v57 - 3)) + v57[6];
              int v59 = *(v57 - 5) + 6 * v57[1] + 4 * (v57[4] + *(v57 - 2)) + v57[7];
              LODWORD(v57) = *(v57 - 4) + 6 * v57[2] + 4 * (v57[5] + *(v57 - 1)) + v57[8];
              *(v56 - 1) = v58;
              *int v56 = v59;
              v56[1] = (int)v57;
              v55 += 6;
              v50 += 3;
              v56 += 3;
            }
            while (v51 + v50 < v32);
            goto LABEL_53;
          case 3:
            if (v38 >= v32) {
              goto LABEL_62;
            }
            uint64_t v50 = 0;
            uint64_t v51 = v38;
            int v52 = 2 * v38;
            double v53 = (int32x4_t *)&v41[4 * v38];
            do
            {
              uint64_t v54 = (int16x4_t *)(v40 + 2 * v52);
              *v53++ = vaddw_s16(vaddq_s32(vaddw_s16(vmull_s16(*v54, (int16x4_t)0x6000600060006), v54[-2]), vshlq_n_s32(vaddl_s16(v54[1], v54[-1]), 2uLL)), v54[2]);
              v52 += 8;
              v50 += 4;
            }
            while (v51 + v50 < v32);
LABEL_53:
            int v38 = v51 + v50;
            goto LABEL_62;
        }
        if (v38 < v32)
        {
          int v66 = (int *)&v113[4 * v38];
          int v67 = &v41[4 * v38];
          uint64_t v68 = v32 - (uint64_t)v38;
          do
          {
            uint64_t v69 = *v66++;
            *v67++ = *(__int16 *)(v40 + 2 * ((int)v69 - v29))
                   + 6 * *(__int16 *)(v40 + 2 * v69)
                   + 4 * (*(__int16 *)(v40 + 2 * (int)(v69 + v12)) + *(__int16 *)(v40 + 2 * (int)(v69 - v12)))
                   + *(__int16 *)(v40 + 2 * ((int)v69 + v29));
            --v68;
          }
          while (v68);
LABEL_61:
          int v38 = v32;
        }
LABEL_62:
        uint64_t v43 = (char *)v120 - 4 * v38;
      }
      BOOL v70 = v35 == v101;
      uint64_t v35 = (v35 + 1);
      if (!v70) {
        continue;
      }
      break;
    }
    uint64_t v35 = v89;
LABEL_66:
    for (uint64_t k = 0; k != 5; ++k)
      *((void *)&v117 + k) = &v116[4 * (v97 + (int)k) % 5 * v102];
    if ((int)v13 >= 1)
    {
      uint64_t v73 = (int *)*((void *)&v117 + 1);
      BOOL v72 = (int *)v117;
      int32x2_t v75 = (int *)*((void *)&v118 + 1);
      uint64_t v74 = (int *)v118;
      int32x2_t v76 = (_WORD *)(v93 + v92 * v96);
      uint64_t v77 = 2 * ((v11 + 1) * v10);
      int32x4_t v78 = v119;
      do
      {
        int v80 = *v74++;
        int v79 = v80;
        int v82 = *v73++;
        int v81 = v82;
        int v83 = *v75++;
        int v84 = v83 + v81;
        int v86 = *v72++;
        int v85 = v86;
        int v87 = *v78++;
        *v76++ = (v85 + 6 * v79 + 4 * v84 + v87 + 128) >> 8;
        v77 -= 2;
      }
      while (v77);
    }
    uint64_t v31 = v96 + 1;
    v94 += 2;
    v97 += 2;
  }
  while (v96 + 1 != v91);
LABEL_72:
  if (__p != v113 && __p) {
    MEMORY[0x22A641760]();
  }
  uint64_t result = v114;
  if (v114 != v116 && v114) {
    return (void *)MEMORY[0x22A641760]();
  }
  return result;
}

void sub_225EA7D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (STACK[0x11B0] != a11 && STACK[0x11B0] != 0) {
    MEMORY[0x22A641760]();
  }
  _Unwind_Resume(a1);
}

void *cv::pyrDown_<cv::FixPtCast<unsigned short,8>,cv::NoVec<int,unsigned short>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unsigned int *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v90 = v3;
  uint64_t v122 = *MEMORY[0x263EF8340];
  if (!*((void *)v2 + 2)) {
    goto LABEL_7;
  }
  uint64_t v5 = v2[1];
  if ((int)v5 >= 3)
  {
    double v7 = (int *)*((void *)v2 + 8);
    uint64_t v6 = 1;
    do
    {
      uint64_t v8 = *v7++;
      v6 *= v8;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = (int)v2[3] * (uint64_t)(int)v2[2];
  }
  if (!v6)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(v120, "!_src.empty()");
    std::string::basic_string[abi:ne180100]<0>(&v114, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v121, 4294967081, v120, &v114, &__p, 194);
    cv::error((cv *)v121, v9);
  }
  int v105 = *(_DWORD *)(*((void *)v2 + 8) + 4);
  int v100 = **((_DWORD **)v2 + 8);
  int v10 = *(_DWORD *)(*(void *)(v3 + 64) + 4);
  uint64_t v91 = **(unsigned int **)(v3 + 64);
  unint64_t v98 = *v2;
  uint64_t v11 = (v98 >> 3) & 0x1FF;
  unsigned int v12 = v11 + 1;
  uint64_t v13 = ((v11 + 1) * v10);
  int64_t v14 = 0x500000000 * (((int)v13 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x1000000000;
  long long v114 = v116;
  uint64_t v115 = 1032;
  if ((unint64_t)v14 >= 0x40800000001)
  {
    uint64_t v115 = v14 >> 32;
    operator new[]();
  }
  __p = v113;
  uint64_t v112 = 1032;
  if (v13 >= 0x409)
  {
    uint64_t v112 = (int)v13;
    operator new[]();
  }
  uint64_t v119 = 0;
  long long v118 = 0u;
  long long v117 = 0u;
  int v15 = 2 * v10 - v105;
  if (v15 < 0) {
    int v15 = v105 - 2 * v10;
  }
  if (v15 > 2) {
    goto LABEL_18;
  }
  int v16 = 2 * v91 - v100;
  if (v16 < 0) {
    int v16 = v100 - 2 * v91;
  }
  if (v16 >= 3)
  {
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(v109, "std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2");
    std::string::basic_string[abi:ne180100]<0>(v108, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(v107, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v110, 4294967081, v109, v108, v107, 208);
    cv::error((cv *)v110, v17);
  }
  int v102 = (v13 + 15) & 0xFFFFFFF0;
  int v99 = v2;
  int v103 = v4;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v20 = v105 - 3;
  if (v105 < 3) {
    int v20 = v105 - 2;
  }
  int v21 = v20 >> 1;
  if (v10 >= v21 + 1) {
    int v22 = v21 + 1;
  }
  else {
    int v22 = v10;
  }
  int v95 = v22;
  int v104 = 2 * v22 - 2;
  do
  {
    int v23 = cv::borderInterpolate((cv *)(v19 - 2), v105, v103);
    int v24 = cv::borderInterpolate((cv *)(v104 + v19), v105, v103);
    int v25 = v23 * v12;
    uint64_t v26 = v11 + 1;
    uint64_t v27 = v18;
    int v28 = v24 * v12;
    do
    {
      *(_DWORD *)&v121[v27] = v25;
      *(_DWORD *)((char *)v120 + v27) = v28;
      v27 += 4;
      ++v28;
      ++v25;
      --v26;
    }
    while (v26);
    ++v19;
    v18 += 4 * ((v98 >> 3) & 0x1FF) + 4;
  }
  while (v19 != 7);
  int v29 = 2 * v12;
  if ((int)v13 >= 1)
  {
    for (uint64_t i = 0; i != v13; ++i)
      *(_DWORD *)&v113[4 * i] = i % v12 + v29 * (i / v12);
  }
  if ((int)v91 < 1) {
    goto LABEL_72;
  }
  uint64_t v31 = 0;
  int v32 = v12 * v95;
  uint64_t v33 = (v98 >> 3) & 0x1FF;
  *(void *)unsigned int v106 = 16 * v33 + 16;
  uint64_t v34 = 8 * v33 + 8;
  int v97 = 0;
  uint64_t v35 = 4294967294;
  int v94 = 2;
  do
  {
    uint64_t v92 = *(void *)(v90 + 80);
    uint64_t v93 = *(void *)(v90 + 16);
    uint64_t v96 = v31;
    if (2 * v31 + 2 < (int)v35) {
      goto LABEL_66;
    }
    int v36 = v94;
    if ((int)v35 > v94) {
      int v36 = v35;
    }
    int v101 = v36;
    unsigned int v89 = v36 + 1;
    while (2)
    {
      int v37 = cv::borderInterpolate((cv *)v35, v100, v103);
      int v38 = 0;
      uint64_t v39 = ((int)v35 + 2) % 5 * v102;
      uint64_t v40 = *((void *)v99 + 2) + *((void *)v99 + 10) * v37;
      double v41 = &v116[4 * v39];
      uint64_t v42 = &v116[4 * v39 + 4];
      uint64_t v43 = v121;
      for (int j = v11 + 1; ; int j = (v11 + 1) * v10)
      {
        if (v38 < j)
        {
          uint64_t v45 = 0;
          uint64_t v46 = &v43[4 * v38];
          double v47 = &v41[4 * v38];
          uint64_t v48 = (uint64_t)&v43[4 * ((v98 >> 3) & 0x1FF) + 4 + 4 * v38];
          uint64_t v49 = j - (uint64_t)v38;
          do
          {
            *(_DWORD *)&v47[4 * v45] = 6 * *(unsigned __int16 *)(v40 + 2 * *(int *)&v46[4 * v45 + v34])
                                     + 4
                                     * (*(unsigned __int16 *)(v40
                                                            + 2
                                                            * *(int *)&v46[12 * ((v98 >> 3) & 0x1FF) + 12 + 4 * v45])
                                      + *(unsigned __int16 *)(v40 + 2 * *(int *)(v48 + 4 * v45)))
                                     + *(unsigned __int16 *)(v40 + 2 * *(int *)&v46[4 * v45])
                                     + *(unsigned __int16 *)(v40 + 2 * *(int *)&v46[4 * v45 + *(void *)v106]);
            ++v45;
          }
          while (v49 != v45);
          int v38 = j;
        }
        if (v38 == v13) {
          break;
        }
        switch(v11)
        {
          case 0:
            if (v38 >= v32) {
              goto LABEL_62;
            }
            int v60 = 2 * v38;
            int v61 = &v41[4 * v38];
            uint64_t v62 = v32 - (uint64_t)v38;
            do
            {
              int v63 = *(unsigned __int16 *)(v40 + 2 * v60);
              int v64 = *(unsigned __int16 *)(v40 + 2 * (v60 + 1)) + *(unsigned __int16 *)(v40 + 2 * (v60 - 1));
              int v65 = *(unsigned __int16 *)(v40 + 2 * (v60 - 2));
              v60 += 2;
              *v61++ = v65 + 6 * v63 + 4 * v64 + *(unsigned __int16 *)(v40 + 2 * v60);
              --v62;
            }
            while (v62);
            goto LABEL_61;
          case 2:
            if (v38 >= v32) {
              goto LABEL_62;
            }
            uint64_t v50 = 0;
            uint64_t v51 = v38;
            int v55 = 2 * v38;
            int v56 = (int *)&v42[4 * v38];
            do
            {
              int v57 = (unsigned __int16 *)(v40 + 2 * v55);
              int v58 = *(v57 - 6) + 6 * *v57 + 4 * (v57[3] + *(v57 - 3)) + v57[6];
              int v59 = *(v57 - 5) + 6 * v57[1] + 4 * (v57[4] + *(v57 - 2)) + v57[7];
              LODWORD(v57) = *(v57 - 4) + 6 * v57[2] + 4 * (v57[5] + *(v57 - 1)) + v57[8];
              *(v56 - 1) = v58;
              *int v56 = v59;
              v56[1] = (int)v57;
              v55 += 6;
              v50 += 3;
              v56 += 3;
            }
            while (v51 + v50 < v32);
            goto LABEL_53;
          case 3:
            if (v38 >= v32) {
              goto LABEL_62;
            }
            uint64_t v50 = 0;
            uint64_t v51 = v38;
            int v52 = 2 * v38;
            double v53 = (uint32x4_t *)&v41[4 * v38];
            do
            {
              uint64_t v54 = (uint16x4_t *)(v40 + 2 * v52);
              *v53++ = vaddw_u16((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*v54, (uint16x4_t)0x6000600060006), v54[-2]), vshlq_n_s32((int32x4_t)vaddl_u16(v54[1], v54[-1]), 2uLL)), v54[2]);
              v52 += 8;
              v50 += 4;
            }
            while (v51 + v50 < v32);
LABEL_53:
            int v38 = v51 + v50;
            goto LABEL_62;
        }
        if (v38 < v32)
        {
          int v66 = (int *)&v113[4 * v38];
          int v67 = &v41[4 * v38];
          uint64_t v68 = v32 - (uint64_t)v38;
          do
          {
            uint64_t v69 = *v66++;
            *v67++ = *(unsigned __int16 *)(v40 + 2 * ((int)v69 - v29))
                   + 6 * *(unsigned __int16 *)(v40 + 2 * v69)
                   + 4
                   * (*(unsigned __int16 *)(v40 + 2 * (int)(v69 + v12))
                    + *(unsigned __int16 *)(v40 + 2 * (int)(v69 - v12)))
                   + *(unsigned __int16 *)(v40 + 2 * ((int)v69 + v29));
            --v68;
          }
          while (v68);
LABEL_61:
          int v38 = v32;
        }
LABEL_62:
        uint64_t v43 = (char *)v120 - 4 * v38;
      }
      BOOL v70 = v35 == v101;
      uint64_t v35 = (v35 + 1);
      if (!v70) {
        continue;
      }
      break;
    }
    uint64_t v35 = v89;
LABEL_66:
    for (uint64_t k = 0; k != 5; ++k)
      *((void *)&v117 + k) = &v116[4 * (v97 + (int)k) % 5 * v102];
    if ((int)v13 >= 1)
    {
      uint64_t v73 = (int *)*((void *)&v117 + 1);
      BOOL v72 = (int *)v117;
      int32x2_t v75 = (int *)*((void *)&v118 + 1);
      uint64_t v74 = (int *)v118;
      int32x2_t v76 = (_WORD *)(v93 + v92 * v96);
      uint64_t v77 = 2 * ((v11 + 1) * v10);
      int32x4_t v78 = v119;
      do
      {
        int v80 = *v74++;
        int v79 = v80;
        int v82 = *v73++;
        int v81 = v82;
        int v83 = *v75++;
        int v84 = v83 + v81;
        int v86 = *v72++;
        int v85 = v86;
        int v87 = *v78++;
        *v76++ = (v85 + 6 * v79 + 4 * v84 + v87 + 128) >> 8;
        v77 -= 2;
      }
      while (v77);
    }
    uint64_t v31 = v96 + 1;
    v94 += 2;
    v97 += 2;
  }
  while (v96 + 1 != v91);
LABEL_72:
  if (__p != v113 && __p) {
    MEMORY[0x22A641760]();
  }
  uint64_t result = v114;
  if (v114 != v116 && v114) {
    return (void *)MEMORY[0x22A641760]();
  }
  return result;
}

void sub_225EA87F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (STACK[0x11B0] != a11 && STACK[0x11B0] != 0) {
    MEMORY[0x22A641760]();
  }
  _Unwind_Resume(a1);
}

void *cv::pyrDown_<cv::FltCast<float,8>,cv::NoVec<float,float>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unsigned int *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v92 = v3;
  uint64_t v124 = *MEMORY[0x263EF8340];
  if (!*((void *)v2 + 2)) {
    goto LABEL_7;
  }
  uint64_t v5 = v2[1];
  if ((int)v5 >= 3)
  {
    double v7 = (int *)*((void *)v2 + 8);
    uint64_t v6 = 1;
    do
    {
      uint64_t v8 = *v7++;
      v6 *= v8;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = (int)v2[3] * (uint64_t)(int)v2[2];
  }
  if (!v6)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(v122, "!_src.empty()");
    std::string::basic_string[abi:ne180100]<0>(&v116, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v123, 4294967081, v122, &v116, &__p, 194);
    cv::error((cv *)v123, v9);
  }
  int v107 = *(_DWORD *)(*((void *)v2 + 8) + 4);
  int v102 = **((_DWORD **)v2 + 8);
  int v10 = *(_DWORD *)(*(void *)(v3 + 64) + 4);
  uint64_t v93 = **(unsigned int **)(v3 + 64);
  unint64_t v100 = *v2;
  uint64_t v11 = (v100 >> 3) & 0x1FF;
  unsigned int v12 = v11 + 1;
  uint64_t v13 = ((v11 + 1) * v10);
  int64_t v14 = 0x500000000 * (((int)v13 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x1000000000;
  uint64_t v116 = v118;
  uint64_t v117 = 1032;
  if ((unint64_t)v14 >= 0x40800000001)
  {
    uint64_t v117 = v14 >> 32;
    operator new[]();
  }
  __p = v115;
  uint64_t v114 = 1032;
  if (v13 >= 0x409)
  {
    uint64_t v114 = (int)v13;
    operator new[]();
  }
  long long v121 = 0;
  long long v120 = 0u;
  long long v119 = 0u;
  int v15 = 2 * v10 - v107;
  if (v15 < 0) {
    int v15 = v107 - 2 * v10;
  }
  if (v15 > 2) {
    goto LABEL_18;
  }
  int v16 = 2 * v93 - v102;
  if (v16 < 0) {
    int v16 = v102 - 2 * v93;
  }
  if (v16 >= 3)
  {
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(v111, "std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2");
    std::string::basic_string[abi:ne180100]<0>(v110, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(v109, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v112, 4294967081, v111, v110, v109, 208);
    cv::error((cv *)v112, v17);
  }
  int v104 = (v13 + 15) & 0xFFFFFFF0;
  int v101 = v2;
  int v105 = v4;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v20 = v107 - 3;
  if (v107 < 3) {
    int v20 = v107 - 2;
  }
  int v21 = v20 >> 1;
  if (v10 >= v21 + 1) {
    int v22 = v21 + 1;
  }
  else {
    int v22 = v10;
  }
  int v97 = v22;
  int v106 = 2 * v22 - 2;
  do
  {
    int v23 = cv::borderInterpolate((cv *)(v19 - 2), v107, v105);
    int v24 = cv::borderInterpolate((cv *)(v106 + v19), v107, v105);
    int v25 = v23 * v12;
    uint64_t v26 = v11 + 1;
    uint64_t v27 = v18;
    int v28 = v24 * v12;
    do
    {
      *(_DWORD *)&v123[v27] = v25;
      *(_DWORD *)((char *)v122 + v27) = v28;
      v27 += 4;
      ++v28;
      ++v25;
      --v26;
    }
    while (v26);
    ++v19;
    v18 += 4 * ((v100 >> 3) & 0x1FF) + 4;
  }
  while (v19 != 7);
  int v29 = 2 * v12;
  if ((int)v13 >= 1)
  {
    for (uint64_t i = 0; i != v13; ++i)
      *(_DWORD *)&v115[4 * i] = i % v12 + v29 * (i / v12);
  }
  if ((int)v93 < 1) {
    goto LABEL_72;
  }
  uint64_t v31 = 0;
  int v32 = v12 * v97;
  uint64_t v33 = (v100 >> 3) & 0x1FF;
  *(void *)uint64_t v108 = 16 * v33 + 16;
  uint64_t v34 = 8 * v33 + 8;
  int v99 = 0;
  uint64_t v35 = 4294967294;
  int v96 = 2;
  __asm
  {
    FMOV            V10.2S, #4.0
    FMOV            V11.2S, #6.0
  }
  do
  {
    uint64_t v94 = *(void *)(v92 + 80);
    uint64_t v95 = *(void *)(v92 + 16);
    uint64_t v98 = v31;
    if (2 * v31 + 2 < (int)v35) {
      goto LABEL_66;
    }
    int v42 = v96;
    if ((int)v35 > v96) {
      int v42 = v35;
    }
    int v103 = v42;
    unsigned int v91 = v42 + 1;
    while (2)
    {
      int v43 = cv::borderInterpolate((cv *)v35, v102, v105);
      int v44 = 0;
      uint64_t v45 = ((int)v35 + 2) % 5 * v104;
      uint64_t v46 = *((void *)v101 + 2) + *((void *)v101 + 10) * v43;
      double v47 = &v118[v45];
      uint64_t v48 = &v118[v45 + 2];
      uint64_t v49 = v123;
      for (int j = v11 + 1; ; int j = (v11 + 1) * v10)
      {
        if (v44 < j)
        {
          uint64_t v51 = 0;
          int v52 = &v49[4 * v44];
          double v53 = &v47[v44];
          uint64_t v54 = (uint64_t)&v49[4 * ((v100 >> 3) & 0x1FF) + 4 + 4 * v44];
          uint64_t v55 = j - (uint64_t)v44;
          do
          {
            *(float *)&v53[v51] = (float)(*(float *)(v46 + 4 * *(int *)&v52[4 * v51])
                                        + (float)((float)((float)(*(float *)(v46 + 4 * *(int *)(v54 + 4 * v51))
                                                                + *(float *)(v46
                                                                           + 4
                                                                           * *(int *)&v52[12 * ((v100 >> 3) & 0x1FF)
                                                                                        + 12
                                                                                        + 4 * v51]))
                                                        * 4.0)
                                                + (float)(*(float *)(v46 + 4 * *(int *)&v52[4 * v51 + v34]) * 6.0)))
                                + *(float *)(v46 + 4 * *(int *)&v52[4 * v51 + *(void *)v108]);
            ++v51;
          }
          while (v55 != v51);
          int v44 = j;
        }
        if (v44 == v13) {
          break;
        }
        switch(v11)
        {
          case 0:
            if (v44 >= v32) {
              goto LABEL_62;
            }
            int v65 = 2 * v44;
            int v66 = (float *)&v47[v44];
            uint64_t v67 = v32 - (uint64_t)v44;
            do
            {
              float v68 = *(float *)(v46 + 4 * (v65 - 2))
                  + (float)((float)((float)(*(float *)(v46 + 4 * (v65 - 1)) + *(float *)(v46 + 4 * (v65 + 1))) * 4.0)
                          + (float)(*(float *)(v46 + 4 * v65) * 6.0));
              v65 += 2;
              *v66++ = *(float *)(v46 + 4 * v65) + v68;
              --v67;
            }
            while (v67);
            goto LABEL_61;
          case 2:
            if (v44 >= v32) {
              goto LABEL_62;
            }
            uint64_t v56 = 0;
            uint64_t v57 = v44;
            int v61 = 2 * v44;
            uint64_t v62 = (float *)&v48[v44];
            do
            {
              uint64_t v63 = v46 + 4 * v61;
              float v64 = *(float *)(v63 + 32)
                  + (float)(*(float *)(v63 - 16)
                          + (float)((float)((float)(*(float *)(v63 - 4) + *(float *)(v63 + 20)) * 4.0)
                                  + (float)(*(float *)(v63 + 8) * 6.0)));
              *((float32x2_t *)v62 - 1) = vadd_f32(*(float32x2_t *)(v63 + 24), vadd_f32(*(float32x2_t *)(v63 - 24), vmla_f32(vmul_f32(vadd_f32(*(float32x2_t *)(v63 - 12), *(float32x2_t *)(v63 + 12)), _D10), _D11, *(float32x2_t *)v63)));
              *uint64_t v62 = v64;
              v62 += 3;
              v61 += 6;
              v56 += 3;
            }
            while (v57 + v56 < v32);
            goto LABEL_53;
          case 3:
            if (v44 >= v32) {
              goto LABEL_62;
            }
            uint64_t v56 = 0;
            uint64_t v57 = v44;
            int v58 = 2 * v44;
            int v59 = (float32x2_t *)&v48[v44];
            do
            {
              int v60 = (float32x2_t *)(v46 + 4 * v58);
              v59[-1] = vadd_f32(v60[4], vadd_f32(v60[-4], vmla_f32(vmul_f32(vadd_f32(v60[-2], v60[2]), _D10), _D11, *v60)));
              *int v59 = vadd_f32(v60[5], vadd_f32(v60[-3], vmla_f32(vmul_f32(vadd_f32(v60[-1], v60[3]), _D10), _D11, v60[1])));
              v59 += 2;
              v58 += 8;
              v56 += 4;
            }
            while (v57 + v56 < v32);
LABEL_53:
            int v44 = v57 + v56;
            goto LABEL_62;
        }
        if (v44 < v32)
        {
          uint64_t v69 = (int *)&v115[4 * v44];
          BOOL v70 = (float *)&v47[v44];
          uint64_t v71 = v32 - (uint64_t)v44;
          do
          {
            uint64_t v72 = *v69++;
            *v70++ = *(float *)(v46 + 4 * ((int)v72 + v29))
                   + (float)(*(float *)(v46 + 4 * ((int)v72 - v29))
                           + (float)((float)((float)(*(float *)(v46 + 4 * (int)(v72 - v12))
                                                   + *(float *)(v46 + 4 * (int)(v72 + v12)))
                                           * 4.0)
                                   + (float)(*(float *)(v46 + 4 * v72) * 6.0)));
            --v71;
          }
          while (v71);
LABEL_61:
          int v44 = v32;
        }
LABEL_62:
        uint64_t v49 = (char *)v122 - 4 * v44;
      }
      _ZF = v35 == v103;
      uint64_t v35 = (v35 + 1);
      if (!_ZF) {
        continue;
      }
      break;
    }
    uint64_t v35 = v91;
LABEL_66:
    for (uint64_t k = 0; k != 5; ++k)
      *((void *)&v119 + k) = &v118[(v99 + (int)k) % 5 * v104];
    if ((int)v13 >= 1)
    {
      int32x2_t v75 = (float *)*((void *)&v119 + 1);
      uint64_t v74 = (float *)v119;
      uint64_t v77 = (float *)*((void *)&v120 + 1);
      int32x2_t v76 = (float *)v120;
      int32x4_t v78 = (float *)(v95 + v94 * v98);
      uint64_t v79 = 4 * ((v11 + 1) * v10);
      int v80 = v121;
      do
      {
        float v81 = *v76++;
        float v82 = v81;
        float v83 = *v75++;
        float v84 = v83;
        float v85 = *v77++;
        float v86 = (float)((float)(v84 + v85) * 4.0) + (float)(v82 * 6.0);
        float v87 = *v74++;
        float v88 = v87 + v86;
        float v89 = *v80++;
        *v78++ = (float)(v89 + v88) * 0.0039062;
        v79 -= 4;
      }
      while (v79);
    }
    uint64_t v31 = v98 + 1;
    v96 += 2;
    v99 += 2;
  }
  while (v98 + 1 != v93);
LABEL_72:
  if (__p != v115 && __p) {
    MEMORY[0x22A641760]();
  }
  uint64_t result = v116;
  if (v116 != v118 && v116) {
    return (void *)MEMORY[0x22A641760]();
  }
  return result;
}

void sub_225EA92A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (STACK[0x11B0] != a11 && STACK[0x11B0] != 0) {
    MEMORY[0x22A641760]();
  }
  _Unwind_Resume(a1);
}

void *cv::pyrDown_<cv::FltCast<double,8>,cv::NoVec<double,double>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unsigned int *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v94 = v3;
  uint64_t v129 = *MEMORY[0x263EF8340];
  if (!*((void *)v2 + 2)) {
    goto LABEL_7;
  }
  uint64_t v5 = v2[1];
  if ((int)v5 >= 3)
  {
    double v7 = (int *)*((void *)v2 + 8);
    uint64_t v6 = 1;
    do
    {
      uint64_t v8 = *v7++;
      v6 *= v8;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = (int)v2[3] * (uint64_t)(int)v2[2];
  }
  if (!v6)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(v127, "!_src.empty()");
    std::string::basic_string[abi:ne180100]<0>(&v121, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v128, 4294967081, v127, &v121, &__p, 194);
    cv::error((cv *)v128, v9);
  }
  int v112 = *(_DWORD *)(*((void *)v2 + 8) + 4);
  int v102 = **((_DWORD **)v2 + 8);
  int v10 = *(_DWORD *)(*(void *)(v3 + 64) + 4);
  uint64_t v95 = **(unsigned int **)(v3 + 64);
  unint64_t v107 = *v2;
  uint64_t v11 = (v107 >> 3) & 0x1FF;
  unsigned int v12 = v11 + 1;
  uint64_t v13 = ((v11 + 1) * v10);
  int64_t v14 = 0x500000000 * (((int)v13 + 15) & 0xFFFFFFFFFFFFFFF0) + 0x1000000000;
  long long v121 = v123;
  uint64_t v122 = 520;
  if ((unint64_t)v14 >= 0x20800000001)
  {
    uint64_t v122 = v14 >> 32;
    operator new[]();
  }
  __p = v120;
  uint64_t v119 = 1032;
  if (v13 >= 0x409)
  {
    uint64_t v119 = (int)v13;
    operator new[]();
  }
  uint64_t v126 = 0;
  long long v125 = 0u;
  long long v124 = 0u;
  int v15 = 2 * v10 - v112;
  if (v15 < 0) {
    int v15 = v112 - 2 * v10;
  }
  if (v15 > 2) {
    goto LABEL_18;
  }
  int v16 = 2 * v95 - v102;
  if (v16 < 0) {
    int v16 = v102 - 2 * v95;
  }
  if (v16 >= 3)
  {
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(v116, "std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2");
    std::string::basic_string[abi:ne180100]<0>(v115, "pyrDown_");
    std::string::basic_string[abi:ne180100]<0>(v114, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/pyramids.cpp");
    cv::Exception::Exception(v117, 4294967081, v116, v115, v114, 208);
    cv::error((cv *)v117, v17);
  }
  int v105 = (v13 + 15) & 0xFFFFFFF0;
  int v101 = v2;
  int v106 = v4;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v20 = v112 - 3;
  if (v112 < 3) {
    int v20 = v112 - 2;
  }
  int v21 = v20 >> 1;
  if (v10 >= v21 + 1) {
    int v22 = v21 + 1;
  }
  else {
    int v22 = v10;
  }
  int v103 = v22;
  int v110 = 2 * v22 - 2;
  do
  {
    int v23 = cv::borderInterpolate((cv *)(v19 - 2), v112, v106);
    int v24 = cv::borderInterpolate((cv *)(v110 + v19), v112, v106);
    int v25 = v23 * v12;
    uint64_t v26 = v11 + 1;
    uint64_t v27 = v18;
    int v28 = v24 * v12;
    do
    {
      *(_DWORD *)&v128[v27] = v25;
      *(_DWORD *)((char *)v127 + v27) = v28;
      v27 += 4;
      ++v28;
      ++v25;
      --v26;
    }
    while (v26);
    ++v19;
    v18 += 4 * ((v107 >> 3) & 0x1FF) + 4;
  }
  while (v19 != 7);
  int v29 = 2 * v12;
  if ((int)v13 >= 1)
  {
    for (uint64_t i = 0; i != v13; ++i)
      *(_DWORD *)&v120[4 * i] = i % v12 + v29 * (i / v12);
  }
  if ((int)v95 < 1) {
    goto LABEL_72;
  }
  uint64_t v31 = 0;
  int v32 = v12 * v103;
  uint64_t v33 = (v107 >> 3) & 0x1FF;
  uint64_t v111 = 12 * v33 + 12;
  *(void *)int v113 = 16 * v33 + 16;
  uint64_t v34 = v33;
  uint64_t v35 = 8 * v33 + 8;
  int v100 = 0;
  uint64_t v36 = 4294967294;
  int v98 = 2;
  __asm
  {
    FMOV            V1.2D, #4.0
    FMOV            V0.2D, #6.0
  }
  float64x2_t v108 = _Q0;
  float64x2_t v109 = _Q1;
  do
  {
    uint64_t v96 = *(void *)(v94 + 80);
    uint64_t v97 = *(void *)(v94 + 16);
    uint64_t v99 = v31;
    if (2 * v31 + 2 < (int)v36) {
      goto LABEL_66;
    }
    int v43 = v98;
    if ((int)v36 > v98) {
      int v43 = v36;
    }
    int v104 = v43;
    unsigned int v93 = v43 + 1;
    while (2)
    {
      int v44 = cv::borderInterpolate((cv *)v36, v102, v106);
      int v45 = 0;
      uint64_t v46 = ((int)v36 + 2) % 5 * v105;
      uint64_t v47 = *((void *)v101 + 2) + *((void *)v101 + 10) * v44;
      uint64_t v48 = &v123[v46];
      uint64_t v49 = &v123[v46 + 2];
      uint64_t v50 = v128;
      for (int j = v11 + 1; ; int j = (v11 + 1) * v10)
      {
        if (v45 < j)
        {
          uint64_t v52 = 0;
          double v53 = &v50[4 * v45];
          uint64_t v54 = &v48[v45];
          uint64_t v55 = (uint64_t)&v50[4 * v34 + 4 + 4 * v45];
          uint64_t v56 = j - (uint64_t)v45;
          do
          {
            *(double *)&v54[v52] = *(double *)(v47 + 8 * *(int *)&v53[4 * v52])
                                 + (*(double *)(v47 + 8 * *(int *)(v55 + 4 * v52))
                                  + *(double *)(v47 + 8 * *(int *)&v53[4 * v52 + v111]))
                                 * 4.0
                                 + *(double *)(v47 + 8 * *(int *)&v53[4 * v52 + v35]) * 6.0
                                 + *(double *)(v47 + 8 * *(int *)&v53[4 * v52 + *(void *)v113]);
            ++v52;
          }
          while (v56 != v52);
          int v45 = j;
        }
        if (v45 == v13) {
          break;
        }
        switch(v11)
        {
          case 0:
            if (v45 >= v32) {
              goto LABEL_62;
            }
            int v66 = 2 * v45;
            uint64_t v67 = (double *)&v48[v45];
            uint64_t v68 = v32 - (uint64_t)v45;
            do
            {
              double v69 = (*(double *)(v47 + 8 * (v66 - 1)) + *(double *)(v47 + 8 * (v66 + 1))) * 4.0
                  + *(double *)(v47 + 8 * v66) * 6.0;
              int v70 = v66 - 2;
              v66 += 2;
              *v67++ = *(double *)(v47 + 8 * v66) + *(double *)(v47 + 8 * v70) + v69;
              --v68;
            }
            while (v68);
            goto LABEL_61;
          case 2:
            if (v45 >= v32) {
              goto LABEL_62;
            }
            uint64_t v57 = 0;
            uint64_t v58 = v45;
            int v62 = 2 * v45;
            uint64_t v63 = (double *)&v49[v45];
            do
            {
              uint64_t v64 = v47 + 8 * v62;
              double v65 = *(double *)(v64 + 64)
                  + *(double *)(v64 - 32)
                  + (*(double *)(v64 - 8) + *(double *)(v64 + 40)) * 4.0
                  + *(double *)(v64 + 16) * 6.0;
              *((float64x2_t *)v63 - 1) = vaddq_f64(*(float64x2_t *)(v64 + 48), vaddq_f64(*(float64x2_t *)(v64 - 48), vmlaq_f64(vmulq_f64(vaddq_f64(*(float64x2_t *)(v64 - 24), *(float64x2_t *)(v64 + 24)), v109), v108, *(float64x2_t *)v64)));
              *uint64_t v63 = v65;
              v63 += 3;
              v62 += 6;
              v57 += 3;
            }
            while (v58 + v57 < v32);
            goto LABEL_53;
          case 3:
            if (v45 >= v32) {
              goto LABEL_62;
            }
            uint64_t v57 = 0;
            uint64_t v58 = v45;
            int v59 = 2 * v45;
            int v60 = (float64x2_t *)&v49[v45];
            do
            {
              int v61 = (float64x2_t *)(v47 + 8 * v59);
              v60[-1] = vaddq_f64(v61[4], vaddq_f64(v61[-4], vmlaq_f64(vmulq_f64(vaddq_f64(v61[-2], v61[2]), v109), v108, *v61)));
              *int v60 = vaddq_f64(v61[5], vaddq_f64(v61[-3], vmlaq_f64(vmulq_f64(vaddq_f64(v61[-1], v61[3]), v109), v108, v61[1])));
              v60 += 2;
              v59 += 8;
              v57 += 4;
            }
            while (v58 + v57 < v32);
LABEL_53:
            int v45 = v58 + v57;
            goto LABEL_62;
        }
        if (v45 < v32)
        {
          uint64_t v71 = (int *)&v120[4 * v45];
          uint64_t v72 = (double *)&v48[v45];
          uint64_t v73 = v32 - (uint64_t)v45;
          do
          {
            uint64_t v74 = *v71++;
            *v72++ = *(double *)(v47 + 8 * ((int)v74 + v29))
                   + *(double *)(v47 + 8 * ((int)v74 - v29))
                   + (*(double *)(v47 + 8 * (int)(v74 - v12)) + *(double *)(v47 + 8 * (int)(v74 + v12))) * 4.0
                   + *(double *)(v47 + 8 * v74) * 6.0;
            --v73;
          }
          while (v73);
LABEL_61:
          int v45 = v32;
        }
LABEL_62:
        uint64_t v50 = (char *)v127 - 4 * v45;
      }
      _ZF = v36 == v104;
      uint64_t v36 = (v36 + 1);
      if (!_ZF) {
        continue;
      }
      break;
    }
    uint64_t v36 = v93;
LABEL_66:
    for (uint64_t k = 0; k != 5; ++k)
      *((void *)&v124 + k) = &v123[(v100 + (int)k) % 5 * v105];
    if ((int)v13 >= 1)
    {
      uint64_t v77 = (double *)*((void *)&v124 + 1);
      int32x2_t v76 = (double *)v124;
      uint64_t v79 = (double *)*((void *)&v125 + 1);
      int32x4_t v78 = (double *)v125;
      int v80 = (double *)(v97 + v96 * v99);
      uint64_t v81 = 8 * ((v11 + 1) * v10);
      float v82 = v126;
      do
      {
        double v83 = *v78++;
        double v84 = v83;
        double v85 = *v77++;
        double v86 = v85;
        double v87 = *v79++;
        double v88 = (v86 + v87) * 4.0 + v84 * 6.0;
        double v89 = *v76++;
        double v90 = v89 + v88;
        double v91 = *v82++;
        *v80++ = (v91 + v90) * 0.00390625;
        v81 -= 8;
      }
      while (v81);
    }
    uint64_t v31 = v99 + 1;
    v98 += 2;
    v100 += 2;
  }
  while (v99 + 1 != v95);
LABEL_72:
  if (__p != v120 && __p) {
    MEMORY[0x22A641760]();
  }
  uint64_t result = v121;
  if (v121 != v123 && v121) {
    return (void *)MEMORY[0x22A641760]();
  }
  return result;
}

void sub_225EA9D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (STACK[0x11C0] != a10 && STACK[0x11C0] != 0) {
    MEMORY[0x22A641760]();
  }
  _Unwind_Resume(a1);
}

void cv::GlBuffer::GlBuffer(uint64_t a1, int a2)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  *(_DWORD *)(a1 + 12) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::string::basic_string[abi:ne180100]<0>(v5, "This function in deprecated, do not use it");
  std::string::basic_string[abi:ne180100]<0>(v4, "GlBuffer");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/opengl_interop_deprecated.cpp");
  cv::Exception::Exception(v6, 4294967083, v5, v4, __p, 68);
  cv::error((cv *)v6, v2);
}

void sub_225EA9F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::Ptr<cv::GlBuffer::Impl>::~Ptr(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::Ptr<cv::GlBuffer::Impl>::~Ptr(uint64_t a1, void *a2)
{
  uint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1)
  {
    if (*(void *)a1) {
      MEMORY[0x22A641780]();
    }
    cv::fastFree(*(void ***)(a1 + 8), a2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  return a1;
}

void cv::GlTexture::GlTexture(cv::GlTexture *this)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  cv::GlBuffer::GlBuffer((uint64_t)this + 32, 35052);
}

void sub_225EAA104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::GlBuffer::~GlBuffer(v28, v30);
  cv::Ptr<cv::GlTexture::Impl>::~Ptr(v27, v31);
  _Unwind_Resume(a1);
}

void sub_225EAA178()
{
}

void cv::GlBuffer::~GlBuffer(cv::GlBuffer *this, void *a2)
{
  uint64_t v3 = (void *)((char *)this + 16);
  int v4 = (atomic_uint *)*((void *)this + 3);
  if (v4 && atomic_fetch_add(v4, 0xFFFFFFFF) == 1)
  {
    if (*v3) {
      MEMORY[0x22A641780](*v3, 0xC400A2AC0F1);
    }
    cv::fastFree(*((void ***)this + 3), a2);
  }
  void *v3 = 0;
  v3[1] = 0;
}

uint64_t cv::Ptr<cv::GlTexture::Impl>::~Ptr(uint64_t a1, void *a2)
{
  uint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1)
  {
    if (*(void *)a1) {
      MEMORY[0x22A641780]();
    }
    cv::fastFree(*(void ***)(a1 + 8), a2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

const char *cvAttrValue(const char *result, char *__s1)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = 1;
    while (1)
    {
      uint64_t v5 = *(const char ***)v3;
      if (!*(void *)v3) {
        return 0;
      }
      if (*v5)
      {
        if (!strcmp(__s1, *v5)) {
          return v5[v4];
        }
        LODWORD(v6) = 1;
        while (1)
        {
          std::string::size_type v7 = v5[(v6 + 1)];
          if (!v7) {
            break;
          }
          uint64_t v6 = (v6 + 2);
          if (!strcmp(__s1, v7))
          {
            uint64_t v4 = v6;
            return v5[v4];
          }
        }
      }
      uint64_t v3 = *(void *)(v3 + 8);
      if (!v3) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t cvGetFileNodeByName(uint64_t a1, uint64_t a2, unsigned char *__s2)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v26, "cvGetFileNodeByName");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v28, 4294967291, v27, v26, __p, 740);
    cv::error((cv *)v28, v6);
  }
  if (!__s2)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "Null element name");
    std::string::basic_string[abi:ne180100]<0>(v26, "cvGetFileNodeByName");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v28, 4294967269, v27, v26, __p, 743);
    cv::error((cv *)v28, v7);
  }
  int v8 = *__s2;
  if (*__s2)
  {
    size_t v9 = 0;
    int v10 = 0;
    do
    {
      int v10 = 33 * v10 + v8;
      int v8 = __s2[++v9];
    }
    while (v8);
    unsigned int v11 = v10 & 0x7FFFFFFF;
    int v12 = v9;
    if (a2) {
      goto LABEL_10;
    }
  }
  else
  {
    int v12 = 0;
    unsigned int v11 = 0;
    size_t v9 = 0;
    if (a2)
    {
LABEL_10:
      int v13 = 1;
      goto LABEL_11;
    }
  }
  uint64_t v22 = *(void *)(a1 + 48);
  if (!v22) {
    return 0;
  }
  int v13 = *(_DWORD *)(v22 + 40);
  if (v13 < 1) {
    return 0;
  }
LABEL_11:
  int v14 = 0;
  while (1)
  {
    SeqEleuint64_t m = a2;
    if (!a2) {
      SeqEleuint64_t m = cvGetSeqElem(*(void *)(a1 + 48), v14);
    }
    int v16 = *(_DWORD *)SeqElem & 7;
    if (v16 != 6)
    {
      if (v16 && (v16 != 5 || *(_DWORD *)(*(void *)(SeqElem + 16) + 40)))
      {
        std::string::basic_string[abi:ne180100]<0>(v27, "The node is neither a map nor an empty collection");
        std::string::basic_string[abi:ne180100]<0>(v26, "cvGetFileNodeByName");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v28, 4294967294, v27, v26, __p, 770);
        cv::error((cv *)v28, v23);
      }
      return 0;
    }
    uint64_t v17 = *(void *)(SeqElem + 16);
    unsigned int v18 = *(_DWORD *)(v17 + 108);
    unsigned int v19 = (v18 & (v18 - 1)) != 0 ? v11 % v18 : (v18 - 1) & v11;
    uint64_t v20 = *(void *)(*(void *)(v17 + 112) + 8 * v19);
    if (v20) {
      break;
    }
LABEL_23:
    if (++v14 == v13) {
      return 0;
    }
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v20 + 32);
    if (*(_DWORD *)v21 == v11 && *(_DWORD *)(v21 + 8) == v12 && !memcmp(*(const void **)(v21 + 16), __s2, v9)) {
      return v20;
    }
    uint64_t v20 = *(void *)(v20 + 40);
    if (!v20) {
      goto LABEL_23;
    }
  }
}

void sub_225EAA6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void icvPuts(uint64_t a1, char *__s)
{
  unint64_t v2 = __s;
  uint64_t v3 = *(void **)(a1 + 376);
  if (v3)
  {
    size_t v4 = strlen(__s);
    if (v4)
    {
      size_t v5 = v4;
      do
      {
        std::deque<char>::push_back(v3, v2++);
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    uint64_t v6 = *(FILE **)(a1 + 104);
    if (!v6)
    {
      std::string::basic_string[abi:ne180100]<0>(v10, "The storage is not opened");
      std::string::basic_string[abi:ne180100]<0>(v9, "icvPuts");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v11, 4294967294, v10, v9, __p, 286);
      cv::error((cv *)v11, v7);
    }
    fputs(v2, v6);
  }
}

void sub_225EAA858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvStartWriteStruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    uint64_t v4 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v10, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvStartWriteStruct");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v11, v4, v10, v9, __p, 2963);
    cv::error((cv *)v11, v5);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    uint64_t v4 = 4294967291;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "The file storage is opened for reading");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvStartWriteStruct");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v11, 4294967294, v10, v9, __p, 2963);
    cv::error((cv *)v11, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 296))(a1, a2, a3, a4);
}

void sub_225EAAA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvEndWriteStruct(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v1 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v6, "cvEndWriteStruct");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v8, v1, v7, v6, __p, 2971);
    cv::error((cv *)v8, v2);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    uint64_t v1 = 4294967291;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "The file storage is opened for reading");
    std::string::basic_string[abi:ne180100]<0>(v6, "cvEndWriteStruct");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v8, 4294967294, v7, v6, __p, 2971);
    cv::error((cv *)v8, v3);
  }
  return (*(uint64_t (**)(uint64_t))(a1 + 304))(a1);
}

void sub_225EAAC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvWriteInt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    uint64_t v3 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v9, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v8, "cvWriteInt");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v10, v3, v9, v8, __p, 2979);
    cv::error((cv *)v10, v4);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    uint64_t v3 = 4294967291;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "The file storage is opened for reading");
    std::string::basic_string[abi:ne180100]<0>(v8, "cvWriteInt");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v10, 4294967294, v9, v8, __p, 2979);
    cv::error((cv *)v10, v5);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 312))(a1, a2, a3);
}

void sub_225EAAE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvWriteString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    uint64_t v4 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v10, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvWriteString");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v11, v4, v10, v9, __p, 2995);
    cv::error((cv *)v11, v5);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    uint64_t v4 = 4294967291;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "The file storage is opened for reading");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvWriteString");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v11, 4294967294, v10, v9, __p, 2995);
    cv::error((cv *)v11, v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 328))(a1, a2, a3, a4);
}

void sub_225EAB040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void *cvWriteRawData(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  int v43 = a3;
  v52[128] = *MEMORY[0x263EF8340];
  *(_OWORD *)__dst = 0u;
  memset(v51, 0, sizeof(v51));
  if (!a1)
  {
    uint64_t v5 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v48, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v47, "cvWriteRawData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v49, v5, v48, v47, __p, 3131);
    cv::error((cv *)v49, v6);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    uint64_t v5 = 4294967291;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "The file storage is opened for reading");
    std::string::basic_string[abi:ne180100]<0>(v47, "cvWriteRawData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v49, 4294967294, v48, v47, __p, 3131);
    cv::error((cv *)v49, v7);
  }
  if (a3 < 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "Negative number of elements");
    std::string::basic_string[abi:ne180100]<0>(v47, "cvWriteRawData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v49, 4294967085, v48, v47, __p, 3134);
    cv::error((cv *)v49, v10);
  }
  uint64_t result = (void *)icvDecodeFormat(a4, (int *)v52);
  int v42 = (int)result;
  if (v43)
  {
    if (!a2)
    {
      std::string::basic_string[abi:ne180100]<0>(v48, "Null data pointer");
      std::string::basic_string[abi:ne180100]<0>(v47, "cvWriteRawData");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v49, 4294967269, v48, v47, __p, 3142);
      cv::error((cv *)v49, v11);
    }
    if (result == 1)
    {
      LODWORD(v52[0]) *= v43;
      int v43 = 1;
    }
    int v12 = 0;
    do
    {
      if (v42 >= 1)
      {
        uint64_t v13 = 0;
        do
        {
          if (v12 == 0x7FFFFFFF
            || (int v14 = (int *)&v52[v13],
                unsigned int v15 = v14[1],
                v9.i32[0] = (((v15 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v15 & 7))) & 3),
                int8x8_t v9 = vcnt_s8(v9),
                v9.i16[0] = vaddlv_u8((uint8x8_t)v9),
                v9.i32[0] >= 2u))
          {
            cvCreateMemStorage_cold_1();
          }
          int v17 = *v14;
          int v16 = (((v15 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v15 & 7))) & 3);
          unsigned int v18 = (double *)(a2 + ((v12 + v16 - 1) & -v16));
          uint64_t v44 = v13;
          if (*v14 >= 1)
          {
            if (v15 > 7) {
              cvWriteRawData_cold_2();
            }
            int v19 = 0;
            while (1)
            {
              switch(v15)
              {
                case 0u:
                  unsigned int v20 = *(unsigned __int8 *)v18;
                  BYTE7(v51[0]) = 0;
                  uint64_t v21 = (char *)v51 + 7;
                  do
                  {
                    *--uint64_t v21 = v20 % 0xA + 48;
                    BOOL v22 = v20 >= 0xA;
                    v20 /= 0xAu;
                  }
                  while (v22);
                  goto LABEL_74;
                case 1u:
                  int v31 = *(char *)v18;
                  if (v31 >= 0) {
                    unsigned int v32 = *(char *)v18;
                  }
                  else {
                    unsigned int v32 = -v31;
                  }
                  BYTE7(v51[0]) = 0;
                  uint64_t v21 = (char *)v51 + 6;
                  do
                  {
                    *v21-- = v32 % 0xA + 48;
                    BOOL v25 = v32 > 9;
                    v32 /= 0xAu;
                  }
                  while (v25);
                  if (v31 < 0) {
                    char *v21 = 45;
                  }
                  else {
                    ++v21;
                  }
LABEL_74:
                  uint64_t v37 = 1;
                  goto LABEL_84;
                case 2u:
                  unsigned int v26 = *(unsigned __int16 *)v18;
                  BYTE7(v51[0]) = 0;
                  uint64_t v21 = (char *)v51 + 7;
                  do
                  {
                    *--uint64_t v21 = v26 % 0xA + 48;
                    BOOL v22 = v26 >= 0xA;
                    v26 /= 0xAu;
                  }
                  while (v22);
                  goto LABEL_70;
                case 3u:
                  int v27 = *(__int16 *)v18;
                  if (v27 >= 0) {
                    unsigned int v28 = *(__int16 *)v18;
                  }
                  else {
                    unsigned int v28 = -v27;
                  }
                  BYTE7(v51[0]) = 0;
                  uint64_t v21 = (char *)v51 + 6;
                  do
                  {
                    *v21-- = v28 % 0xA + 48;
                    BOOL v25 = v28 > 9;
                    v28 /= 0xAu;
                  }
                  while (v25);
                  if (v27 < 0) {
                    char *v21 = 45;
                  }
                  else {
                    ++v21;
                  }
LABEL_70:
                  uint64_t v37 = 2;
                  goto LABEL_84;
                case 4u:
                  int v23 = *(_DWORD *)v18;
                  if (*(int *)v18 >= 0) {
                    unsigned int v24 = *(_DWORD *)v18;
                  }
                  else {
                    unsigned int v24 = -v23;
                  }
                  BYTE7(v51[0]) = 0;
                  uint64_t v21 = (char *)v51 + 6;
                  do
                  {
                    *v21-- = v24 % 0xA + 48;
                    BOOL v25 = v24 > 9;
                    v24 /= 0xAu;
                  }
                  while (v25);
                  if (v23 < 0) {
                    char *v21 = 45;
                  }
                  else {
                    ++v21;
                  }
                  goto LABEL_83;
                case 5u:
                  float v33 = *(float *)v18;
                  int v34 = *(_DWORD *)v18;
                  if ((~*(_DWORD *)v18 & 0x7F800000) != 0)
                  {
                    uint64_t v36 = (uint64_t)rint(v33);
                    if (v33 == (float)(int)v36)
                    {
                      uint64_t v21 = __dst;
                      sprintf(__dst, "%d.", v36);
                      goto LABEL_83;
                    }
                    int v38 = __dst;
                    sprintf(__dst, "%.8e", v33);
                    if (__dst[0] == 45 || __dst[0] == 43) {
                      int v38 = &__dst[1];
                    }
                    do
                    {
                      int v40 = *v38++;
                      int v39 = v40;
                    }
                    while ((v40 - 48) < 0xA);
                    if (v39 == 44) {
                      *(v38 - 1) = 46;
                    }
                    goto LABEL_82;
                  }
                  if ((v34 & 0x7FFFFFFF) != 0x7F800000)
                  {
                    strcpy(__dst, ".Nan");
LABEL_82:
                    uint64_t v21 = __dst;
                    goto LABEL_83;
                  }
                  if (v34 >= 0) {
                    uint64_t v35 = ".Inf";
                  }
                  else {
                    uint64_t v35 = "-.Inf";
                  }
                  uint64_t v21 = __dst;
                  strcpy(__dst, v35);
LABEL_83:
                  uint64_t v37 = 4;
LABEL_84:
                  if (*(_DWORD *)(a1 + 4) == 8)
                  {
                    int v41 = strlen(v21);
                    uint64_t result = icvXMLWriteScalar(a1, 0, v21, v41);
                  }
                  else
                  {
                    uint64_t result = icvYMLWrite((char *)a1, 0, v21);
                  }
                  unsigned int v18 = (double *)((char *)v18 + v37);
                  if (++v19 == v17) {
                    goto LABEL_88;
                  }
                  break;
                case 6u:
                  uint64_t v21 = __dst;
                  icvDoubleToString(__dst, *v18);
                  goto LABEL_72;
                default:
                  int v29 = *(_DWORD *)v18;
                  if (*(int *)v18 >= 0) {
                    unsigned int v30 = *(_DWORD *)v18;
                  }
                  else {
                    unsigned int v30 = -v29;
                  }
                  BYTE7(v51[0]) = 0;
                  uint64_t v21 = (char *)v51 + 6;
                  do
                  {
                    *v21-- = v30 % 0xA + 48;
                    BOOL v25 = v30 > 9;
                    v30 /= 0xAu;
                  }
                  while (v25);
                  if (v29 < 0) {
                    char *v21 = 45;
                  }
                  else {
                    ++v21;
                  }
LABEL_72:
                  uint64_t v37 = 8;
                  goto LABEL_84;
              }
            }
          }
LABEL_88:
          int v12 = v18 - a2;
          uint64_t v13 = v44 + 1;
        }
        while (v44 + 1 != v42);
      }
      --v43;
    }
    while (v43);
  }
  return result;
}

void sub_225EAB814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

const char *icvDecodeFormat(const char *result, int *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    int v4 = strlen(result);
    int v5 = v4;
    if (v4)
    {
      if (!a2) {
        icvDecodeFormat();
      }
      *a2 = 0;
      if (v4 < 1)
      {
        int v7 = 0;
      }
      else
      {
        int v6 = 0;
        int v7 = 0;
        do
        {
          int v8 = &v3[v6];
          int v9 = *(unsigned __int8 *)v8;
          int v10 = v9 - 48;
          if ((v9 - 48) > 9)
          {
            int v12 = memchr("ucwsifdr", (char)v9, 9uLL);
            if (!v12)
            {
              std::string::basic_string[abi:ne180100]<0>(v20, "Invalid data type specification");
              std::string::basic_string[abi:ne180100]<0>(v19, "icvDecodeFormat");
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
              cv::Exception::Exception(__endptr, 4294967291, v20, v19, __p, 3062);
              cv::error((cv *)__endptr, v13);
            }
            int v14 = a2[v7];
            if (!v14)
            {
              int v14 = 1;
              a2[v7] = 1;
            }
            int v15 = v12 - "ucwsifdr";
            a2[v7 + 1] = v15;
            if (v7 <= 0)
            {
              int v10 = 0;
              v7 += 2;
            }
            else if (v15 == a2[v7 - 1])
            {
              int v10 = 0;
              a2[v7 - 2] += v14;
            }
            else
            {
              if (v7 >= 0xFE)
              {
                std::string::basic_string[abi:ne180100]<0>(v20, "Too long data type specification");
                std::string::basic_string[abi:ne180100]<0>(v19, "icvDecodeFormat");
                std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
                cv::Exception::Exception(__endptr, 4294967291, v20, v19, __p, 3072);
                cv::error((cv *)__endptr, v16);
              }
              int v10 = 0;
              v7 += 2;
            }
          }
          else
          {
            if (v3[v6 + 1] - 48 <= 9)
            {
              __endptr[0] = 0;
              int v10 = strtol(v8, __endptr, 10);
              int v6 = ~v3 + LODWORD(__endptr[0]);
            }
            if (v10 <= 0)
            {
              std::string::basic_string[abi:ne180100]<0>(v20, "Invalid data type specification");
              std::string::basic_string[abi:ne180100]<0>(v19, "icvDecodeFormat");
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
              cv::Exception::Exception(__endptr, 4294967291, v20, v19, __p, 3054);
              cv::error((cv *)__endptr, v11);
            }
          }
          a2[v7] = v10;
          ++v6;
        }
        while (v6 < v5);
      }
      if (v7 >= 0) {
        int v17 = v7;
      }
      else {
        int v17 = v7 + 1;
      }
      return (const char *)(v17 >> 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_225EABBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

char *icvDoubleToString(char *__dst, double a2)
{
  if ((~HIDWORD(a2) & 0x7FF00000) != 0)
  {
    uint64_t v4 = (uint64_t)rint(a2);
    if ((double)(int)v4 == a2)
    {
      sprintf(__dst, "%d.", v4);
    }
    else
    {
      sprintf(__dst, "%.16e", a2);
      int v6 = *__dst;
      if (v6 == 45 || (int v7 = __dst, v6 == 43)) {
        int v7 = __dst + 1;
      }
      do
      {
        int v9 = *v7++;
        int v8 = v9;
      }
      while ((v9 - 48) < 0xA);
      if (v8 == 44) {
        *(v7 - 1) = 46;
      }
    }
  }
  else
  {
    unsigned int v3 = HIDWORD(a2) & 0x7FFFFFFF;
    if (LODWORD(a2)) {
      ++v3;
    }
    if (v3 < 0x7FF00001)
    {
      if (a2 >= 0.0) {
        int v5 = ".Inf";
      }
      else {
        int v5 = "-.Inf";
      }
      strcpy(__dst, v5);
    }
    else
    {
      strcpy(__dst, ".Nan");
    }
  }
  return __dst;
}

void *icvXMLWriteScalar(uint64_t a1, const char *a2, const void *a3, int a4)
{
  if ((*(_DWORD *)(a1 + 68) & 7) == 6 || a2 && (*(_DWORD *)(a1 + 68) & 7u) <= 4)
  {
    icvXMLWriteTag(a1, a2, 1, 0, 0);
    int v8 = *(char **)(a1 + 120);
    size_t v9 = a4;
    unint64_t v10 = *(void *)(a1 + 136);
    if ((unint64_t)&v8[a4] >= v10)
    {
      uint64_t v11 = *(void *)(a1 + 128);
      int v12 = v8 - v11;
      unint64_t v13 = (3 * (v10 - v11) + (((3 * (v10 - v11)) & 0x8000000000000000) != 0)) >> 1;
      if (v12 + a4 <= (int)v13) {
        int v14 = v13;
      }
      else {
        int v14 = v12 + a4;
      }
      int v15 = (char *)cvAlloc(v14 + 256);
      int v16 = v15;
      int v17 = *(const void **)(a1 + 128);
      *(void *)(a1 + 120) = &v15[*(void *)(a1 + 120) - (void)v17];
      if (v12 >= 1) {
        memcpy(v15, v17, v12);
      }
      *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = v16;
      *(void *)(a1 + 136) = &v16[v14];
      int v8 = &v16[v12];
    }
    memcpy(v8, a3, v9);
    *(void *)(a1 + 120) = &v8[v9];
    return (void *)icvXMLWriteTag(a1, a2, 2, 0, 0);
  }
  else
  {
    int v19 = *(unsigned char **)(a1 + 120);
    if (a2)
    {
      std::string::basic_string[abi:ne180100]<0>(v25, "elements with keys can not be written to sequence");
      std::string::basic_string[abi:ne180100]<0>(v24, "icvXMLWriteScalar");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v26, 4294967291, v25, v24, __p, 2489);
      cv::error((cv *)v26, v20);
    }
    int v21 = v19 - *(_DWORD *)(a1 + 128) + a4;
    *(_DWORD *)(a1 + 6_Block_object_dispose(&a9, 8) = 5;
    if (v21 > *(_DWORD *)(a1 + 144) && v21 - *(_DWORD *)(a1 + 64) > 10
      || (unint64_t v22 = *(void *)(a1 + 128), (unint64_t)v19 > v22) && *(v19 - 1) == 62)
    {
      int v19 = (unsigned char *)icvFSFlush(a1);
    }
    else if ((unint64_t)v19 > v22 + *(int *)(a1 + 64) && *(v19 - 1) != 62)
    {
      *v19++ = 32;
    }
    uint64_t result = memcpy(v19, a3, a4);
    *(void *)(a1 + 120) = &v19[a4];
  }
  return result;
}

void sub_225EAC00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

char *icvYMLWrite(char *result, const char *a2, const char *a3)
{
  uint64_t v4 = (uint64_t)result;
  int v5 = *((_DWORD *)result + 17);
  if (a2)
  {
    if (*a2) {
      int v6 = a2;
    }
    else {
      int v6 = 0;
    }
  }
  else
  {
    int v6 = 0;
  }
  if ((*((_DWORD *)result + 17) & 7u) < 5)
  {
    *((_DWORD *)result + 3) = 0;
    if (v6) {
      int v5 = 38;
    }
    else {
      int v5 = 37;
    }
  }
  else if (((*((_DWORD *)result + 17) & 7) == 6) != (v6 != 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v44, "An attempt to add element without a key to a map, or add element with key to sequence");
    std::string::basic_string[abi:ne180100]<0>(v43, "icvYMLWrite");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v45, 4294967291, v44, v43, __p, 1459);
    cv::error((cv *)v45, v7);
  }
  if (v6)
  {
    uint64_t result = (char *)strlen(v6);
    if (!result)
    {
      std::string::basic_string[abi:ne180100]<0>(v44, "The key is an empty");
      std::string::basic_string[abi:ne180100]<0>(v43, "icvYMLWrite");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v45, 4294967291, v44, v43, __p, 1471);
      cv::error((cv *)v45, v10);
    }
    int v8 = (int)result;
    if ((int)result > 4096)
    {
      std::string::basic_string[abi:ne180100]<0>(v44, "The key is too long");
      std::string::basic_string[abi:ne180100]<0>(v43, "icvYMLWrite");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v45, 4294967291, v44, v43, __p, 1474);
      cv::error((cv *)v45, v9);
    }
  }
  else
  {
    int v8 = 0;
  }
  if (a3)
  {
    uint64_t result = (char *)strlen(a3);
    int v11 = (int)result;
    if ((v5 & 8) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    int v11 = 0;
    if ((v5 & 8) == 0)
    {
LABEL_20:
      uint64_t result = (char *)icvFSFlush(v4);
      int v12 = result;
      if ((v5 & 7) != 6)
      {
        void *result = 45;
        if (a3)
        {
          result[1] = 32;
          int v12 = result + 2;
          if (!v6) {
            goto LABEL_58;
          }
        }
        else
        {
          int v12 = result + 1;
          if (!v6) {
            goto LABEL_58;
          }
        }
        goto LABEL_33;
      }
LABEL_32:
      if (!v6) {
        goto LABEL_58;
      }
      goto LABEL_33;
    }
  }
  unint64_t v13 = *(unsigned char **)(v4 + 120);
  if ((v5 & 0x20) == 0) {
    *v13++ = 44;
  }
  int v14 = v11 + v8 + v13 - *(_DWORD *)(v4 + 128);
  if (v14 <= *(_DWORD *)(v4 + 144) || v14 - *(_DWORD *)(v4 + 64) < 11)
  {
    *unint64_t v13 = 32;
    int v12 = v13 + 1;
    goto LABEL_32;
  }
  *(void *)(v4 + 120) = v13;
  uint64_t result = (char *)icvFSFlush(v4);
  int v12 = result;
  if (!v6) {
    goto LABEL_58;
  }
LABEL_33:
  int v15 = *(unsigned __int8 *)v6;
  if (v15 != 95 && (v15 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    std::string::basic_string[abi:ne180100]<0>(v44, "Key must start with a letter or _");
    std::string::basic_string[abi:ne180100]<0>(v43, "icvYMLWrite");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v45, 4294967291, v44, v43, __p, 1509);
    cv::error((cv *)v45, v16);
  }
  unint64_t v17 = *(void *)(v4 + 136);
  if ((unint64_t)&v12[v8] >= v17)
  {
    uint64_t v18 = *(void *)(v4 + 128);
    int v19 = v12 - v18;
    unint64_t v20 = (3 * (v17 - v18) + (((3 * (v17 - v18)) & 0x8000000000000000) != 0)) >> 1;
    if (v8 + (int)v12 - (int)v18 <= (int)v20) {
      int v21 = v20;
    }
    else {
      int v21 = v8 + v19;
    }
    uint64_t result = (char *)cvAlloc(v21 + 256);
    unint64_t v22 = result;
    int v23 = *(const void **)(v4 + 128);
    *(void *)(v4 + 120) = &result[*(void *)(v4 + 120) - (void)v23];
    if (v19 >= 1) {
      uint64_t result = (char *)memcpy(result, v23, v19);
    }
    *(void *)(v4 + 12_Block_object_dispose(&a9, 8) = v22;
    *(void *)(v4 + 136) = (char *)v22 + v21;
    int v12 = (char *)v22 + v19;
  }
  if (v8 >= 1)
  {
    uint64_t v24 = v8;
    BOOL v25 = v12;
    do
    {
      char v27 = *v6++;
      unsigned __int8 v26 = v27;
      *BOOL v25 = v27;
      if ((v27 - 58) <= 0xF5u && ((v26 & 0xDF) - 91) <= 0xE5u)
      {
        unsigned int v28 = v26 - 32;
        BOOL v29 = v28 > 0x3F;
        unint64_t v30 = (1 << v28) & 0x8000000000002001;
        if (v29 || v30 == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(v44, "Key names may only contain alphanumeric characters [a-zA-Z0-9], '-', '_' and ' '");
          std::string::basic_string[abi:ne180100]<0>(v43, "icvYMLWrite");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
          cv::Exception::Exception(v45, 4294967291, v44, v43, __p, 1519);
          cv::error((cv *)v45, v32);
        }
      }
      ++v25;
      --v24;
    }
    while (v24);
  }
  float v33 = &v12[v8];
  char *v33 = 58;
  int v12 = v33 + 1;
  if (!a3 || (v5 & 8) != 0)
  {
LABEL_58:
    if (!a3) {
      goto LABEL_67;
    }
    goto LABEL_59;
  }
  int v12 = v33 + 2;
  v33[1] = 32;
LABEL_59:
  unint64_t v34 = *(void *)(v4 + 136);
  if ((unint64_t)&v12[v11] >= v34)
  {
    uint64_t v35 = *(void *)(v4 + 128);
    int v36 = v12 - v35;
    unint64_t v37 = (3 * (v34 - v35) + (((3 * (v34 - v35)) & 0x8000000000000000) != 0)) >> 1;
    if (v11 + (int)v12 - (int)v35 <= (int)v37) {
      int v38 = v37;
    }
    else {
      int v38 = v11 + v36;
    }
    int v39 = (char *)cvAlloc(v38 + 256);
    int v40 = v39;
    int v41 = *(const void **)(v4 + 128);
    *(void *)(v4 + 120) = &v39[*(void *)(v4 + 120) - (void)v41];
    if (v36 >= 1) {
      memcpy(v39, v41, v36);
    }
    *(void *)(v4 + 12_Block_object_dispose(&a9, 8) = v40;
    *(void *)(v4 + 136) = &v40[v38];
    int v12 = &v40[v36];
  }
  uint64_t result = (char *)memcpy(v12, a3, v11);
  v12 += v11;
LABEL_67:
  *(void *)(v4 + 120) = v12;
  *(_DWORD *)(v4 + 6_Block_object_dispose(&a9, 8) = v5 & 0xFFFFFFDF;
  return result;
}

void sub_225EAC688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

double cvStartReadRawData(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    uint64_t v3 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v11, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v10, "cvStartReadRawData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v12, v3, v11, v10, __p, 3222);
    cv::error((cv *)v12, v4);
  }
  if (*a1 != 1280131417)
  {
    uint64_t v3 = 4294967291;
    goto LABEL_5;
  }
  if (!a2 || !a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "Null pointer to source file node or reader");
    std::string::basic_string[abi:ne180100]<0>(v10, "cvStartReadRawData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v12, 4294967269, v11, v10, __p, 3225);
    cv::error((cv *)v12, v5);
  }
  int v6 = *(_DWORD *)a2 & 7;
  if ((v6 - 1) > 1)
  {
    if (v6)
    {
      if (v6 != 5)
      {
        std::string::basic_string[abi:ne180100]<0>(v11, "The file node should be a numerical scalar or a sequence");
        std::string::basic_string[abi:ne180100]<0>(v10, "cvStartReadRawData");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v12, 4294967291, v11, v10, __p, 3245);
        cv::error((cv *)v12, v8);
      }
      return cvStartReadSeq(*(void *)(a2 + 16), a3, 0);
    }
    else
    {
      double result = 0.0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 4_Block_object_dispose(&a9, 8) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  else
  {
    *(void *)(a3 + 32) = a2;
    *(void *)(a3 + 40) = a2 + 64;
    *(void *)(a3 + 24) = a2;
    *(void *)(a3 + _Block_object_dispose(&a9, 8) = 0;
  }
  return result;
}

void sub_225EAC988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void *cvReadRawDataSlice(_DWORD *a1, void *a2, int a3, uint64_t a4, char *a5)
{
  int v30 = a3;
  v36[128] = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v6 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v34, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v33, "cvReadRawDataSlice");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v35, v6, v34, v33, __p, 3257);
    cv::error((cv *)v35, v7);
  }
  if (*a1 != 1280131417)
  {
    uint64_t v6 = 4294967291;
    goto LABEL_5;
  }
  if (!a2 || !a4)
  {
    std::string::basic_string[abi:ne180100]<0>(v34, "Null pointer to reader or destination array");
    std::string::basic_string[abi:ne180100]<0>(v33, "cvReadRawDataSlice");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v35, 4294967269, v34, v33, __p, 3260);
    cv::error((cv *)v35, v8);
  }
  if (a3 != 1 && !a2[1])
  {
    std::string::basic_string[abi:ne180100]<0>(v34, "The readed sequence is a scalar, thus len must be 1");
    std::string::basic_string[abi:ne180100]<0>(v33, "cvReadRawDataSlice");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v35, 4294967095, v34, v33, __p, 3263);
    cv::error((cv *)v35, v9);
  }
  double result = (void *)icvDecodeFormat(a5, (int *)v36);
  int v12 = 0;
  uint64_t v13 = result;
  uint64_t v29 = result;
LABEL_13:
  while ((int)v13 < 1)
    ;
  uint64_t v14 = 0;
  while (1)
  {
    if (v12 == 0x7FFFFFFF
      || (int v15 = (int *)&v36[v14],
          unsigned int v16 = v15[1],
          LODWORD(v11) = (((v16 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v16 & 7))) & 3),
          double v11 = COERCE_DOUBLE(vcnt_s8(*(int8x8_t *)&v11)),
          LOWORD(v11) = vaddlv_u8(*(uint8x8_t *)&v11),
          LODWORD(v11) >= 2))
    {
      cvCreateMemStorage_cold_1();
    }
    int v18 = *v15;
    int v17 = (((v16 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v16 & 7))) & 3);
    int v19 = (_WORD *)(a4 + ((v12 + v17 - 1) & -v17));
    if (*v15 >= 1) {
      break;
    }
LABEL_56:
    int v12 = v19 - a4;
    if (++v14 == v13) {
      goto LABEL_13;
    }
  }
  int v20 = 0;
  while (1)
  {
    uint64_t v21 = a2[3];
    if ((*(_DWORD *)v21 & 7) != 2)
    {
      if ((*(_DWORD *)v21 & 7) == 1)
      {
        LODWORD(v21) = *(_DWORD *)(v21 + 16);
        switch(v16)
        {
          case 0u:
            goto LABEL_25;
          case 1u:
            goto LABEL_43;
          case 2u:
            goto LABEL_30;
          case 3u:
            goto LABEL_34;
          case 4u:
            goto LABEL_28;
          case 5u:
            float v22 = (float)(int)v21;
            goto LABEL_50;
          case 6u:
            double v11 = (double)(int)v21;
            goto LABEL_32;
          case 7u:
            goto LABEL_41;
          default:
            cvReadRawDataSlice_cold_2();
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v34, "The sequence element is not a numerical scalar");
      std::string::basic_string[abi:ne180100]<0>(v33, "cvReadRawDataSlice");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v35, 4294967294, v34, v33, __p, 3377);
      cv::error((cv *)v35, v25);
    }
    double v11 = *(double *)(v21 + 16);
    switch(v16)
    {
      case 0u:
        double v11 = rint(v11);
        uint64_t v21 = (uint64_t)v11;
LABEL_25:
        LODWORD(v21) = v21 & ~((int)v21 >> 31);
        BOOL v23 = (int)v21 < 255;
        char v24 = -1;
        goto LABEL_46;
      case 1u:
        double v11 = rint(v11);
        uint64_t v21 = (uint64_t)v11;
LABEL_43:
        if ((int)v21 <= -128) {
          LODWORD(v21) = -128;
        }
        BOOL v23 = (int)v21 < 127;
        char v24 = 127;
LABEL_46:
        if (!v23) {
          LOBYTE(v21) = v24;
        }
        *(unsigned char *)int v19 = v21;
        int v19 = (_WORD *)((char *)v19 + 1);
        break;
      case 2u:
        double v11 = rint(v11);
        uint64_t v21 = (uint64_t)v11;
LABEL_30:
        LODWORD(v21) = v21 & ~((int)v21 >> 31);
        int v26 = 0xFFFF;
        goto LABEL_37;
      case 3u:
        double v11 = rint(v11);
        uint64_t v21 = (uint64_t)v11;
LABEL_34:
        if ((int)v21 <= -32768) {
          LODWORD(v21) = -32768;
        }
        int v26 = 0x7FFF;
LABEL_37:
        if ((int)v21 >= v26) {
          LOWORD(v21) = v26;
        }
        *v19++ = v21;
        break;
      case 4u:
        double v11 = rint(v11);
        uint64_t v21 = (uint64_t)v11;
LABEL_28:
        *(_DWORD *)int v19 = v21;
        v19 += 2;
        break;
      case 5u:
        float v22 = v11;
LABEL_50:
        *(float *)int v19 = v22;
        v19 += 2;
        break;
      case 6u:
LABEL_32:
        *(double *)int v19 = v11;
        v19 += 4;
        break;
      case 7u:
        double v11 = rint(v11);
        uint64_t v21 = (uint64_t)v11;
LABEL_41:
        *(void *)int v19 = (int)v21;
        v19 += 4;
        break;
      default:
        cvReadRawDataSlice_cold_3();
    }
    unint64_t v27 = a2[3] + 32;
    a2[3] = v27;
    if (v27 >= a2[5]) {
      double result = cvChangeSeqBlock(a2, 1);
    }
    if (v30 - 1 == v20) {
      break;
    }
    if (v18 == ++v20)
    {
      v30 -= v18;
      uint64_t v13 = v29;
      goto LABEL_56;
    }
  }
  if (v30 != v18 || v29 - 1 != v14)
  {
    std::string::basic_string[abi:ne180100]<0>(v34, "The sequence slice does not fit an integer number of records");
    std::string::basic_string[abi:ne180100]<0>(v33, "cvReadRawDataSlice");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v35, 4294967095, v34, v33, __p, 3391);
    cv::error((cv *)v35, v28);
  }
  if (!a2[1]) {
    a2[3] -= 32;
  }
  return result;
}

void sub_225EAD028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void *cvReadRawData(_DWORD *a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (!a2 || !a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "Null pointers to source file node or destination array");
    std::string::basic_string[abi:ne180100]<0>(v12, "cvReadRawData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v14, 4294967269, v13, v12, __p, 3405);
    cv::error((cv *)v14, v8);
  }
  cvStartReadRawData(a1, a2, (uint64_t)v15);
  if ((*(_DWORD *)a2 & 7) == 5) {
    int v9 = *(_DWORD *)(*(void *)(a2 + 16) + 40);
  }
  else {
    int v9 = 1;
  }
  return cvReadRawDataSlice(a1, v15, v9, a3, a4);
}

void sub_225EAD228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void *cvRegisterType(uint64_t a1)
{
  if (!a1 || *(_DWORD *)(a1 + 4) != 72)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "Invalid type info");
    std::string::basic_string[abi:ne180100]<0>(v22, "cvRegisterType");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v24, 4294967095, v23, v22, __p, 4851);
    cv::error((cv *)v24, v2);
  }
  if (!*(void *)(a1 + 32) || !*(void *)(a1 + 40) || !*(void *)(a1 + 48) || !*(void *)(a1 + 56))
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "Some of required function pointers (is_instance, release, read or write) are NULL");
    std::string::basic_string[abi:ne180100]<0>(v22, "cvRegisterType");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v24, 4294967269, v23, v22, __p, 4857);
    cv::error((cv *)v24, v3);
  }
  uint64_t v4 = *(const char **)(a1 + 24);
  int v5 = *(unsigned __int8 *)v4;
  if (v5 != 95 && (v5 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "Type name should start with a letter or _");
    std::string::basic_string[abi:ne180100]<0>(v22, "cvRegisterType");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v24, 4294967291, v23, v22, __p, 4861);
    cv::error((cv *)v24, v7);
  }
  int v8 = strlen(v4);
  int v9 = v8;
  if (v8 >= 1)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      char v11 = *(unsigned char *)(*(void *)(a1 + 24) + i);
      if ((v11 - 58) <= 0xF5u && ((v11 & 0xDF) - 91) <= 0xE5u)
      {
        int v12 = *(unsigned __int8 *)(*(void *)(a1 + 24) + i);
        if (v12 != 45 && v12 != 95)
        {
          std::string::basic_string[abi:ne180100]<0>(v23, "Type name should contain only letters, digits, - and _");
          std::string::basic_string[abi:ne180100]<0>(v22, "cvRegisterType");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
          cv::Exception::Exception(v24, 4294967291, v23, v22, __p, 4870);
          cv::error((cv *)v24, v13);
        }
      }
    }
  }
  uint64_t v14 = cvAlloc(v8 + 73);
  long long v16 = *(_OWORD *)(a1 + 32);
  long long v15 = *(_OWORD *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 64);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
  *(void *)(v14 + 64) = v17;
  *(_OWORD *)(v14 + 32) = v16;
  *(_OWORD *)(v14 + 4_Block_object_dispose(&a9, 8) = v15;
  *(void *)(v14 + 24) = v14 + 72;
  double result = memcpy((void *)(v14 + 72), *(const void **)(a1 + 24), v9 + 1);
  *(_DWORD *)uint64_t v14 = 0;
  uint64_t v19 = CvType::first;
  *(void *)(v14 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(v14 + 16) = v19;
  if (v19) {
    int v20 = (uint64_t *)(v19 + 8);
  }
  else {
    int v20 = (uint64_t *)&CvType::last;
  }
  *int v20 = v14;
  CvType::first = v14;
  return result;
}

void sub_225EAD628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

BOOL icvIsSeq(BOOL result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 2) == 17049;
  }
  return result;
}

void *icvReleaseSeq(void *result)
{
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "NULL double pointer");
    std::string::basic_string[abi:ne180100]<0>(v3, "icvReleaseSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v5, 4294967269, v4, v3, __p, 4026);
    cv::error((cv *)v5, v1);
  }
  void *result = 0;
  return result;
}

void sub_225EAD788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

int *icvReadSeq(uint64_t a1, uint64_t a2)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  __endptr = 0;
  uint64_t FileNodeByName = cvGetFileNodeByName(a1, a2, "flags");
  if (FileNodeByName && (*(_DWORD *)FileNodeByName & 7) == 3) {
    int v5 = *(char **)(FileNodeByName + 24);
  }
  else {
    int v5 = 0;
  }
  uint64_t v6 = cvGetFileNodeByName(a1, a2, "count");
  if (v6)
  {
    if ((*(_DWORD *)v6 & 7) == 2)
    {
      uint64_t v7 = (uint64_t)rint(*(double *)(v6 + 16));
    }
    else if ((*(_DWORD *)v6 & 7) == 1)
    {
      LODWORD(v7) = *(_DWORD *)(v6 + 16);
    }
    else
    {
      LODWORD(v7) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v7) = -1;
  }
  int v54 = v7;
  uint64_t v8 = cvGetFileNodeByName(a1, a2, "dt");
  if (!v8 || (*(_DWORD *)v8 & 7) != 3 || (int v9 = *(char **)(v8 + 24), !v5) || v54 == -1 || !v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "Some of essential sequence attributes are absent");
    std::string::basic_string[abi:ne180100]<0>(v56, "icvReadSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v58, 4294967294, v57, v56, __p, 4250);
    cv::error((cv *)v58, v10);
  }
  if (*v5 - 48 > 9)
  {
    if (strstr(v5, "curve")) {
      int v15 = 1117327360;
    }
    else {
      int v15 = 1117323264;
    }
    if (strstr(v5, "closed")) {
      v15 |= 0x4000u;
    }
    if (strstr(v5, "hole")) {
      unsigned int v14 = v15 | 0x8000;
    }
    else {
      unsigned int v14 = v15;
    }
    if (!strstr(v5, "untyped")) {
      v14 |= icvDecodeSimpleFormat(v9);
    }
  }
  else
  {
    unsigned int v11 = strtol(v5, &__endptr, 16);
    if (__endptr == v5 || (v11 & 0xFFFF0000) != 0x42990000)
    {
      std::string::basic_string[abi:ne180100]<0>(v57, "The sequence flags are invalid");
      std::string::basic_string[abi:ne180100]<0>(v56, "icvReadSeq");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v58, 4294967294, v57, v56, __p, 4267);
      cv::error((cv *)v58, v12);
    }
    if ((v11 & 0xE00) == 0x200) {
      int v13 = 1117327360;
    }
    else {
      int v13 = 1117323264;
    }
    unsigned int v14 = v11 & 0x81FF | (((v11 >> 12) & 1) << 14) | v13;
  }
  uint64_t v16 = cvGetFileNodeByName(a1, a2, "header_dt");
  if (v16 && (*(_DWORD *)v16 & 7) == 3) {
    uint64_t v17 = *(char **)(v16 + 24);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = cvGetFileNodeByName(a1, a2, "header_user_data");
  BOOL v19 = v18 != 0;
  if ((v17 != 0) != v19)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "One of \"header_dt\" and \"header_user_data\" is there, while the other is not");
    std::string::basic_string[abi:ne180100]<0>(v56, "icvReadSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v58, 4294967294, v57, v56, __p, 4301);
    cv::error((cv *)v58, v20);
  }
  uint64_t v21 = cvGetFileNodeByName(a1, a2, "rect");
  uint64_t v22 = cvGetFileNodeByName(a1, a2, "origin");
  uint64_t v23 = v22;
  if (v21) {
    unsigned int v24 = v19 + 1;
  }
  else {
    unsigned int v24 = v18 != 0;
  }
  if (v22) {
    ++v24;
  }
  if (v24 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "Only one of \"header_user_data\", \"rect\" and \"origin\" tags may occur");
    std::string::basic_string[abi:ne180100]<0>(v56, "icvReadSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v58, 4294967294, v57, v56, __p, 4307);
    cv::error((cv *)v58, v25);
  }
  if (v17)
  {
    int v26 = icvCalcElemSize(v17, 96);
  }
  else
  {
    if (v22) {
      int v27 = 104;
    }
    else {
      int v27 = 96;
    }
    if (v21) {
      int v26 = 128;
    }
    else {
      int v26 = v27;
    }
  }
  int v28 = icvCalcElemSize(v9, 0);
  Seq = cvCreateSeq(v14, v26, v28, *(void *)(a1 + 24));
  int v30 = Seq;
  if (v18)
  {
    cvReadRawData((_DWORD *)a1, v18, (uint64_t)(Seq + 24), v17);
  }
  else if (v21)
  {
    uint64_t v31 = cvGetFileNodeByName(a1, v21, "x");
    if (v31)
    {
      if ((*(_DWORD *)v31 & 7) == 2)
      {
        uint64_t v32 = (uint64_t)rint(*(double *)(v31 + 16));
      }
      else if ((*(_DWORD *)v31 & 7) == 1)
      {
        LODWORD(v32) = *(_DWORD *)(v31 + 16);
      }
      else
      {
        LODWORD(v32) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v32) = 0;
    }
    v30[24] = v32;
    uint64_t v35 = cvGetFileNodeByName(a1, v21, "y");
    if (v35)
    {
      if ((*(_DWORD *)v35 & 7) == 2)
      {
        uint64_t v36 = (uint64_t)rint(*(double *)(v35 + 16));
      }
      else if ((*(_DWORD *)v35 & 7) == 1)
      {
        LODWORD(v36) = *(_DWORD *)(v35 + 16);
      }
      else
      {
        LODWORD(v36) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v36) = 0;
    }
    v30[25] = v36;
    uint64_t v37 = cvGetFileNodeByName(a1, v21, "width");
    if (v37)
    {
      if ((*(_DWORD *)v37 & 7) == 2)
      {
        uint64_t v38 = (uint64_t)rint(*(double *)(v37 + 16));
      }
      else if ((*(_DWORD *)v37 & 7) == 1)
      {
        LODWORD(v3_Block_object_dispose(&a9, 8) = *(_DWORD *)(v37 + 16);
      }
      else
      {
        LODWORD(v3_Block_object_dispose(&a9, 8) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v3_Block_object_dispose(&a9, 8) = 0;
    }
    v30[26] = v38;
    uint64_t v39 = cvGetFileNodeByName(a1, v21, "height");
    if (v39)
    {
      if ((*(_DWORD *)v39 & 7) == 2)
      {
        uint64_t v40 = (uint64_t)rint(*(double *)(v39 + 16));
      }
      else if ((*(_DWORD *)v39 & 7) == 1)
      {
        LODWORD(v40) = *(_DWORD *)(v39 + 16);
      }
      else
      {
        LODWORD(v40) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v40) = 0;
    }
    v30[27] = v40;
    uint64_t v41 = cvGetFileNodeByName(a1, a2, "color");
    if (v41)
    {
      if ((*(_DWORD *)v41 & 7) == 2)
      {
        uint64_t v42 = (uint64_t)rint(*(double *)(v41 + 16));
      }
      else if ((*(_DWORD *)v41 & 7) == 1)
      {
        LODWORD(v42) = *(_DWORD *)(v41 + 16);
      }
      else
      {
        LODWORD(v42) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v42) = 0;
    }
    v30[28] = v42;
  }
  else if (v23)
  {
    uint64_t v33 = cvGetFileNodeByName(a1, v23, "x");
    if (v33)
    {
      if ((*(_DWORD *)v33 & 7) == 2)
      {
        uint64_t v34 = (uint64_t)rint(*(double *)(v33 + 16));
      }
      else if ((*(_DWORD *)v33 & 7) == 1)
      {
        LODWORD(v34) = *(_DWORD *)(v33 + 16);
      }
      else
      {
        LODWORD(v34) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v34) = 0;
    }
    v30[24] = v34;
    uint64_t v43 = cvGetFileNodeByName(a1, v23, "y");
    if (v43)
    {
      if ((*(_DWORD *)v43 & 7) == 2)
      {
        uint64_t v44 = (uint64_t)rint(*(double *)(v43 + 16));
      }
      else if ((*(_DWORD *)v43 & 7) == 1)
      {
        LODWORD(v44) = *(_DWORD *)(v43 + 16);
      }
      else
      {
        LODWORD(v44) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v44) = 0;
    }
    v30[25] = v44;
  }
  cvSeqPushMulti(v30, 0, v54, 0);
  int v45 = icvDecodeFormat(v9, v61);
  if (v45 < 1)
  {
    int v47 = 0;
  }
  else
  {
    unint64_t v46 = 0;
    int v47 = 0;
    do
    {
      v47 += v61[v46];
      v46 += 2;
    }
    while (v46 < (2 * v45));
  }
  uint64_t v48 = cvGetFileNodeByName(a1, a2, "data");
  if (!v48)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "The image data is not found in file storage");
    std::string::basic_string[abi:ne180100]<0>(v56, "icvReadSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v58, 4294967294, v57, v56, __p, 4349);
    cv::error((cv *)v58, v49);
  }
  if ((*(_DWORD *)v48 & 7u) < 5) {
    int v50 = (*(_DWORD *)v48 & 7) != 0;
  }
  else {
    int v50 = *(_DWORD *)(*(void *)(v48 + 16) + 40);
  }
  if (v50 != v47 * v54)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "The number of stored elements does not match to \"count\"");
    std::string::basic_string[abi:ne180100]<0>(v56, "icvReadSeq");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v58, 4294967294, v57, v56, __p, 4352);
    cv::error((cv *)v58, v51);
  }
  cvStartReadRawData((_DWORD *)a1, v48, (uint64_t)v60);
  for (uint64_t i = *((void *)v30 + 11); i; uint64_t i = *(void *)(i + 8))
  {
    cvReadRawDataSlice((_DWORD *)a1, v60, *(_DWORD *)(i + 20) * v47, *(void *)(i + 24), v9);
    if (i == **((void **)v30 + 11)) {
      break;
    }
  }
  return v30;
}

void sub_225EAE1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x225EADAF4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t icvWriteSeqTree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  unint64_t v10 = cvAttrValue((const char *)&v16, "recursive");
  BOOL v12 = v10
     && (unsigned int v11 = v10, strcmp(v10, "0"))
     && strcmp(v11, "false")
     && strcmp(v11, "False")
     && strcmp(v11, "FALSE") != 0;
  if (!a3 || *(_WORD *)(a3 + 2) != 17049) {
    icvWriteSeqTree();
  }
  if (!v12) {
    return icvWriteSeq(a1, a2, (int *)a3, a4, a5, 0xFFFFFFFFLL);
  }
  cvStartWriteStruct(a1, a2, 6, (uint64_t)"opencv-sequence-tree");
  cvStartWriteStruct(a1, (uint64_t)"sequences", 5, 0);
  cvInitTreeNodeIterator((uint64_t)&v14, a3, 0x7FFFFFFF);
  while (v14)
  {
    icvWriteSeq(a1, 0, v14, v16, v17, v15);
    cvNextTreeNode((uint64_t *)&v14);
  }
  cvEndWriteStruct(a1);
  return cvEndWriteStruct(a1);
}

int *icvCloneSeq(uint64_t a1)
{
  return cvSeqSlice(a1, 0x3FFFFFFF00000000, 0, 1);
}

uint64_t icvReadSeqTree(_DWORD *a1, uint64_t a2)
{
  uint64_t FileNodeByName = cvGetFileNodeByName((uint64_t)a1, a2, "sequences");
  if (!FileNodeByName || (*(_DWORD *)FileNodeByName & 7) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "opencv-sequence-tree instance should contain a field \"sequences\" that should be a sequence");
    std::string::basic_string[abi:ne180100]<0>(v19, "icvReadSeqTree");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v21, 4294967084, v20, v19, __p, 4383);
    cv::error((cv *)v21, v4);
  }
  uint64_t v5 = *(void *)(FileNodeByName + 16);
  int v6 = *(_DWORD *)(v5 + 40);
  cvStartReadSeq(v5, (uint64_t)v22, 0);
  if (v6 >= 1)
  {
    int v7 = 0;
    int v8 = 0;
    int v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = v23;
      uint64_t v13 = cvRead(a1, v23, 0);
      uint64_t v14 = cvGetFileNodeByName((uint64_t)a1, v12, "level");
      if (!v14)
      {
LABEL_10:
        std::string::basic_string[abi:ne180100]<0>(v20, "All the sequence tree nodes should contain \"level\" field");
        std::string::basic_string[abi:ne180100]<0>(v19, "icvReadSeqTree");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v21, 4294967084, v20, v19, __p, 4397);
        cv::error((cv *)v21, v16);
      }
      if ((*(_DWORD *)v14 & 7) == 2)
      {
        uint64_t v15 = (uint64_t)rint(*(double *)(v14 + 16));
        if ((v15 & 0x80000000) != 0) {
          goto LABEL_10;
        }
      }
      else if ((*(_DWORD *)v14 & 7) == 1)
      {
        LODWORD(v15) = *(_DWORD *)(v14 + 16);
        if ((v15 & 0x80000000) != 0) {
          goto LABEL_10;
        }
      }
      else
      {
        LODWORD(v15) = 0x7FFFFFFF;
      }
      if (!v11) {
        uint64_t v11 = v13;
      }
      if ((int)v15 > v7)
      {
        if (v15 != v7 + 1) {
          icvReadSeqTree();
        }
        if (v9) {
          _OWORD v9[4] = v13;
        }
        *(void *)(v13 + _Block_object_dispose(&a9, 8) = 0;
        unint64_t v10 = v9;
        goto LABEL_26;
      }
      if ((int)v15 < v7) {
        break;
      }
      *(void *)(v13 + _Block_object_dispose(&a9, 8) = v9;
      if (v9) {
        goto LABEL_25;
      }
LABEL_26:
      *(void *)(v13 + 24) = v10;
      v23 += *(int *)(v5 + 44);
      if (v23 >= v24) {
        cvChangeSeqBlock(v22, 1);
      }
      ++v8;
      int v7 = v15;
      int v9 = (void *)v13;
      if (v8 == v6) {
        return v11;
      }
    }
    do
    {
      int v9 = (void *)v9[3];
      --v7;
    }
    while (v7 > (int)v15);
    unint64_t v10 = (void *)v9[3];
    *(void *)(v13 + _Block_object_dispose(&a9, 8) = v9;
LABEL_25:
    void v9[2] = v13;
    goto LABEL_26;
  }
  return 0;
}

void sub_225EAE718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

_DWORD *icvIsGraph(_DWORD *result)
{
  if (result)
  {
    if (HIWORD(*result) == 17048) {
      return (_DWORD *)((*result & 0x3000) == 4096);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *icvReleaseGraph(void *result)
{
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "NULL double pointer");
    std::string::basic_string[abi:ne180100]<0>(v3, "icvReleaseGraph");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v5, 4294967269, v4, v3, __p, 4440);
    cv::error((cv *)v5, v1);
  }
  void *result = 0;
  return result;
}

void sub_225EAE864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

_DWORD *icvReadGraph(uint64_t a1, uint64_t a2)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  __endptr = 0;
  uint64_t FileNodeByName = cvGetFileNodeByName(a1, a2, "flags");
  if (FileNodeByName && (*(_DWORD *)FileNodeByName & 7) == 3) {
    uint64_t v4 = *(char **)(FileNodeByName + 24);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = cvGetFileNodeByName(a1, a2, "vertex_dt");
  if (v5 && (*(_DWORD *)v5 & 7) == 3) {
    int v6 = *(char **)(v5 + 24);
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = cvGetFileNodeByName(a1, a2, "edge_dt");
  if (v7 && (*(_DWORD *)v7 & 7) == 3) {
    uint64_t v81 = *(char **)(v7 + 24);
  }
  else {
    uint64_t v81 = 0;
  }
  uint64_t v8 = cvGetFileNodeByName(a1, a2, "vertex_count");
  if (v8)
  {
    if ((*(_DWORD *)v8 & 7) == 2)
    {
      uint64_t v9 = (uint64_t)rint(*(double *)(v8 + 16));
    }
    else if ((*(_DWORD *)v8 & 7) == 1)
    {
      LODWORD(v9) = *(_DWORD *)(v8 + 16);
    }
    else
    {
      LODWORD(v9) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v9) = -1;
  }
  unsigned int v88 = v9;
  uint64_t v10 = cvGetFileNodeByName(a1, a2, "edge_count");
  if (v10)
  {
    if ((*(_DWORD *)v10 & 7) == 2)
    {
      uint64_t v11 = (uint64_t)rint(*(double *)(v10 + 16));
    }
    else if ((*(_DWORD *)v10 & 7) == 1)
    {
      LODWORD(v11) = *(_DWORD *)(v10 + 16);
    }
    else
    {
      LODWORD(v11) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v11) = -1;
  }
  unsigned int v77 = v11;
  int v80 = v6;
  if (!v4 || v88 == -1 || v11 == -1 || !v81)
  {
    std::string::basic_string[abi:ne180100]<0>(v93, "Some of essential graph attributes are absent");
    std::string::basic_string[abi:ne180100]<0>(v95, "icvReadGraph");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v97, 4294967294, v93, v95, __p, 4619);
    cv::error((cv *)v97, v12);
  }
  if ((*v4 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * *v4 + 60) & 0x10000) != 0)
  {
    int v14 = strtol(v4, &__endptr, 16);
    if (__endptr == v4 || (v14 & 0xFFFF0000) != 0x42980000)
    {
      std::string::basic_string[abi:ne180100]<0>(v93, "The sequence flags are invalid");
      std::string::basic_string[abi:ne180100]<0>(v95, "icvReadGraph");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v97, 4294967294, v93, v95, __p, 4632);
      cv::error((cv *)v97, v15);
    }
    BOOL v13 = (v14 & 0x1000) == 0;
  }
  else
  {
    BOOL v13 = strstr(v4, "oriented") == 0;
  }
  if (v13) {
    unsigned int v17 = 1117261824;
  }
  else {
    unsigned int v17 = 1117278208;
  }
  uint64_t v18 = cvGetFileNodeByName(a1, a2, "header_dt");
  if (v18 && (*(_DWORD *)v18 & 7) == 3) {
    BOOL v19 = *(char **)(v18 + 24);
  }
  else {
    BOOL v19 = 0;
  }
  uint64_t v20 = cvGetFileNodeByName(a1, a2, "header_user_data");
  if ((v19 != 0) != (v20 != 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v93, "One of \"header_dt\" and \"header_user_data\" is there, while the other is not");
    std::string::basic_string[abi:ne180100]<0>(v95, "icvReadGraph");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v97, 4294967294, v93, v95, __p, 4647);
    cv::error((cv *)v97, v21);
  }
  if (v19) {
    int v22 = icvCalcElemSize(v19, 120);
  }
  else {
    int v22 = 120;
  }
  if (v80)
  {
    int v79 = icvCalcElemSize(v80, 0);
    int v23 = icvCalcElemSize(v80, 16);
    int v24 = icvDecodeFormat(v81, v98);
    if (v24 < 1)
    {
      int v76 = 0;
    }
    else
    {
      unint64_t v25 = 0;
      int v26 = 0;
      do
      {
        v26 += v98[v25];
        v25 += 2;
      }
      while (v25 < (2 * v24));
      int v76 = v26;
    }
  }
  else
  {
    int v79 = 0;
    int v76 = 0;
    int v23 = 16;
  }
  int v27 = icvDecodeFormat(v81, v98);
  if (v27 < 2
    || (v98[0] == 2 ? (BOOL v28 = v98[1] == 4) : (BOOL v28 = 0),
        v28 ? (BOOL v29 = v98[2] < 1) : (BOOL v29 = 1),
        !v29 ? (BOOL v30 = v98[3] == 5) : (BOOL v30 = 0),
        !v30))
  {
    std::string::basic_string[abi:ne180100]<0>(v95, "Graph edges should start with 2 integers and a float");
    std::string::basic_string[abi:ne180100]<0>(__p, "icvReadGraph");
    std::string::basic_string[abi:ne180100]<0>(v92, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v93, 4294967291, v95, __p, v92, 4673);
    cv::error((cv *)v93, v31);
  }
  if (v27 < 3)
  {
    unsigned int v32 = 4;
  }
  else if ((((v99 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v99 & 7))) & 3) >= 8)
  {
    unsigned int v32 = 8;
  }
  else
  {
    unsigned int v32 = 4;
  }
  unint64_t v33 = 0;
  int v34 = 0;
  do
  {
    v34 += v98[v33];
    v33 += 2;
  }
  while (v33 < (2 * v27));
  int v75 = v34;
  int v35 = v81[2];
  if (v35 == 102 || v35 == 49 && v81[3] == 102)
  {
    BOOL v65 = (v35 - 48) >= 0xA;
    uint64_t v36 = v81;
    if (!v65) {
      uint64_t v36 = v81 + 1;
    }
    uint64_t v37 = v36 + 3;
  }
  else
  {
    int v38 = strtol(v81 + 2, &__endptr, 10);
    uint64_t v37 = v97;
    sprintf(v97, "%df%s", v38 - 1, __endptr);
  }
  int v84 = icvCalcElemSize(v37, 40);
  int v78 = icvCalcElemSize(v81, 0);
  Graph = cvCreateGraph(v17, v22, v23, v84, *(void *)(a1 + 24));
  if (v20) {
    cvReadRawData((_DWORD *)a1, v20, (uint64_t)(Graph + 30), v19);
  }
  int v39 = 3 * v79;
  if (3 * v79 <= 3 * v78) {
    int v39 = 3 * v78;
  }
  if (v39 <= 0x10000) {
    uint64_t v40 = 0x10000;
  }
  else {
    uint64_t v40 = v39;
  }
  unsigned int v72 = v40;
  double v90 = (void **)cvAlloc(v40);
  double v85 = (void **)cvAlloc(8 * (int)v88);
  uint64_t v73 = cvGetFileNodeByName(a1, a2, "vertices");
  uint64_t v74 = cvGetFileNodeByName(a1, a2, "edges");
  if (!v74)
  {
    std::string::basic_string[abi:ne180100]<0>(v93, "No edges data");
    std::string::basic_string[abi:ne180100]<0>(v95, "icvReadGraph");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v97, 4294967291, v93, v95, __p, 4709);
    cv::error((cv *)v97, v42);
  }
  uint64_t v43 = v80;
  if (v80 && !v73)
  {
    std::string::basic_string[abi:ne180100]<0>(v93, "No vertices data");
    std::string::basic_string[abi:ne180100]<0>(v95, "icvReadGraph");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v97, 4294967291, v93, v95, __p, 4711);
    cv::error((cv *)v97, v44);
  }
  uint64_t v82 = -v32;
  uint64_t v83 = v32 - 1;
  char v45 = 1;
  do
  {
    char v46 = v45;
    BOOL v47 = (v45 & 1) == 0;
    if (v45) {
      uint64_t v48 = v43;
    }
    else {
      uint64_t v48 = v81;
    }
    if (v45) {
      int v49 = v79;
    }
    else {
      int v49 = v78;
    }
    int v50 = v76;
    if (v47) {
      int v50 = v75;
    }
    int v87 = v50;
    if (v47) {
      uint64_t v51 = v77;
    }
    else {
      uint64_t v51 = v88;
    }
    if (v49 <= 1) {
      unsigned int v52 = 1;
    }
    else {
      unsigned int v52 = v49;
    }
    if (v48)
    {
      if (v46) {
        uint64_t v53 = v73;
      }
      else {
        uint64_t v53 = v74;
      }
      cvStartReadRawData((_DWORD *)a1, v53, (uint64_t)v93);
    }
    if ((int)v51 >= 1)
    {
      int v54 = 0;
      uint64_t v55 = v49;
      uint64_t v56 = v85;
      uint64_t v57 = v90;
      int v58 = v72 / v52;
      while (1)
      {
        if (v48 && !v54)
        {
          if ((int)v51 >= v58) {
            int v59 = v58;
          }
          else {
            int v59 = v51;
          }
          int v54 = v59 * v87;
          cvReadRawDataSlice((_DWORD *)a1, v93, v59 * v87, (uint64_t)v90, v48);
          uint64_t v57 = v90;
        }
        if ((v46 & 1) == 0) {
          break;
        }
        *(void *)uint64_t v97 = 0;
        cvGraphAddVtx((uint64_t)Graph, 0, v97);
        *uint64_t v56 = *(void **)v97;
        if (v48)
        {
          int v60 = (void *)(*(void *)v97 + 16);
          int v61 = v57;
          size_t v62 = v79;
LABEL_141:
          memcpy(v60, v61, v62);
        }
LABEL_142:
        uint64_t v57 = (void **)((char *)v57 + v55);
        --v54;
        ++v56;
        if (!--v51) {
          goto LABEL_143;
        }
      }
      uint64_t v91 = 0;
      unsigned int v63 = *((_DWORD *)v57 + 1);
      uint64_t v64 = *(int *)v57;
      BOOL v65 = v64 >= v88 || v63 >= v88;
      if (v65)
      {
        std::string::basic_string[abi:ne180100]<0>(v95, "Some of stored vertex indices are out of range");
        std::string::basic_string[abi:ne180100]<0>(__p, "icvReadGraph");
        std::string::basic_string[abi:ne180100]<0>(v92, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v97, 4294967085, v95, __p, v92, 4756);
        cv::error((cv *)v97, v66);
      }
      if (!cvGraphAddEdgeByPtr((uint64_t)Graph, v85[v64], v85[v63], 0, &v91))
      {
        std::string::basic_string[abi:ne180100]<0>(v95, "Duplicated edge has occured");
        std::string::basic_string[abi:ne180100]<0>(__p, "icvReadGraph");
        std::string::basic_string[abi:ne180100]<0>(v92, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v97, 4294967291, v95, __p, v92, 4762);
        cv::error((cv *)v97, v68);
      }
      uint64_t v69 = v91;
      *(_DWORD *)(v91 + 4) = *((_DWORD *)v57 + 2);
      if (v84 < 41) {
        goto LABEL_142;
      }
      int v61 = (const void *)(((unint64_t)v57 + v83 + 12) & v82);
      int v60 = (void *)(v69 + 40);
      size_t v62 = v84 - 40;
      goto LABEL_141;
    }
LABEL_143:
    char v45 = 0;
    uint64_t v43 = v80;
  }
  while ((v46 & 1) != 0);
  cv::fastFree(v90, v41);
  cv::fastFree(v85, v70);
  return Graph;
}

void sub_225EAF464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  cv::Exception::~Exception((cv::Exception *)&a66);
  if (a58 < 0) {
    operator delete(__p);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

void icvWriteGraph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  v59[0] = a4;
  v59[1] = a5;
  if (!a3 || (uint64_t v5 = a3, (*(_DWORD *)a3 & 0xFFFF3000) != 0x42981000)) {
    icvWriteGraph();
  }
  uint64_t v8 = *(int *)(a3 + 104);
  uint64_t v9 = *(unsigned int *)(*(void *)(a3 + 112) + 104);
  uint64_t v10 = cvAlloc(4 * v8);
  cvStartReadSeq(v5, (uint64_t)v56, 0);
  if (*(int *)(v5 + 40) >= 1)
  {
    int v11 = 0;
    int v12 = 0;
    do
    {
      BOOL v13 = v57;
      if ((*(_DWORD *)v57 & 0x80000000) == 0)
      {
        *(_DWORD *)(v10 + 4 * v12) = *(_DWORD *)v57;
        *BOOL v13 = v12++;
      }
      uint64_t v57 = (char *)v13 + *(int *)(v5 + 44);
      if ((unint64_t)v57 >= v58) {
        cvChangeSeqBlock(v56, 1);
      }
      ++v11;
    }
    while (v11 < *(_DWORD *)(v5 + 40));
  }
  uint64_t v48 = (void **)v10;
  cvStartWriteStruct(a1, a2, 6, (uint64_t)"opencv-graph");
  if ((*(_DWORD *)v5 & 0x4000) != 0) {
    int v14 = "oriented";
  }
  else {
    int v14 = "";
  }
  cvWriteString(a1, (uint64_t)"flags", (uint64_t)v14, 1);
  cvWriteInt(a1, (uint64_t)"vertex_count", v8);
  Format = icvGetFormat((_DWORD *)v5, "vertex_dt", (const char *)v59, 16, v63);
  if (Format) {
    cvWriteString(a1, (uint64_t)"vertex_dt", (uint64_t)Format, 0);
  }
  cvWriteInt(a1, (uint64_t)"edge_count", v9);
  uint64_t v16 = icvGetFormat(*(_DWORD **)(v5 + 112), "edge_dt", (const char *)v59, 40, v64);
  if (v16) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = "";
  }
  sprintf(v62, "2if%s", v17);
  cvWriteString(a1, (uint64_t)"edge_dt", (uint64_t)v62, 0);
  icvWriteHeaderData(a1, (int *)v5, (const char *)v59, 120);
  int v18 = *(_DWORD *)(v5 + 44);
  if (v18 >= 21846) {
    int v19 = 3 * v18;
  }
  else {
    int v19 = 0x10000;
  }
  int v20 = 3 * *(_DWORD *)(*(void *)(v5 + 112) + 44);
  if (v20 <= v19) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v20;
  }
  int v50 = v21;
  int v22 = (void **)cvAlloc(v21);
  char v23 = 0;
  char v24 = 1;
  uint64_t v49 = v5;
  uint64_t v51 = Format;
  do
  {
    char v25 = v24;
    if (v24) {
      int v26 = Format;
    }
    else {
      int v26 = v62;
    }
    if (v26)
    {
      uint64_t v27 = v5;
      if ((v24 & 1) == 0) {
        uint64_t v27 = *(void *)(v5 + 112);
      }
      uint64_t v55 = *(unsigned int *)(v27 + 44);
      int v28 = icvCalcElemSize(v26, 0);
      if ((v23 & 1) != 0 && (int)icvDecodeFormat(v26, v60) >= 3)
      {
        if ((((v61 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v61 & 7))) & 3) >= 8) {
          int v29 = 8;
        }
        else {
          int v29 = 4;
        }
      }
      else
      {
        int v29 = 4;
      }
      if (v25) {
        BOOL v30 = "vertices";
      }
      else {
        BOOL v30 = "edges";
      }
      cvStartWriteStruct(a1, (uint64_t)v30, 13, 0);
      double Seq = cvStartReadSeq(v27, (uint64_t)v56, 0);
      uint64_t v32 = a1;
      if (*(int *)(v27 + 40) >= 1)
      {
        int v33 = 0;
        int v34 = 0;
        LODWORD(Seq) = v29;
        uint8x8_t v35 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&Seq);
        v35.i16[0] = vaddlv_u8(v35);
        unsigned int v54 = v35.i32[0];
        uint64_t v53 = (v29 - 1);
        uint64_t v52 = -v29;
        uint64_t v36 = v22;
        while (1)
        {
          uint64_t v37 = v57;
          if ((*(_DWORD *)v57 & 0x80000000) == 0) {
            break;
          }
LABEL_52:
          v57 += *(int *)(v27 + 44);
          if ((unint64_t)v57 >= v58) {
            cvChangeSeqBlock(v56, 1);
          }
          if (++v33 >= *(_DWORD *)(v27 + 40))
          {
            uint64_t v5 = v49;
            if (v34 >= 1) {
              cvWriteRawData(v32, (uint64_t)v22, v34, v26);
            }
            goto LABEL_57;
          }
        }
        if (v25)
        {
          int v38 = v57 + 16;
          int v39 = v36;
          size_t v40 = v28;
          goto LABEL_48;
        }
        uint64_t v36 = (_DWORD *)(((unint64_t)v36 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        *uint64_t v36 = **((_DWORD **)v57 + 3);
        v36[1] = **((_DWORD **)v37 + 4);
        void v36[2] = *((_DWORD *)v37 + 1);
        if ((int)v55 >= 41)
        {
          if (v54 >= 2) {
            icvWriteGraph();
          }
          int v39 = (void *)(((unint64_t)v36 + v53 + 12) & v52);
          int v38 = v37 + 40;
          size_t v40 = v55 - 40;
LABEL_48:
          memcpy(v39, v38, v40);
        }
        if (++v34 >= v50 / v28)
        {
          cvWriteRawData(v32, (uint64_t)v22, v34, v26);
          int v34 = 0;
          uint64_t v36 = v22;
        }
        else
        {
          uint64_t v36 = (_DWORD *)((char *)v36 + v28);
        }
        goto LABEL_52;
      }
LABEL_57:
      cvEndWriteStruct(v32);
      a1 = v32;
      Format = v51;
    }
    char v24 = 0;
    char v23 = 1;
  }
  while ((v25 & 1) != 0);
  cvEndWriteStruct(a1);
  cvStartReadSeq(v5, (uint64_t)v56, 0);
  int v42 = *(_DWORD *)(v5 + 40);
  if (v42 >= 1)
  {
    int v43 = 0;
    int v44 = 0;
    do
    {
      char v45 = v57;
      if ((*(_DWORD *)v57 & 0x80000000) == 0)
      {
        int v46 = *((_DWORD *)v48 + v44++);
        *(_DWORD *)uint64_t v57 = v46;
      }
      uint64_t v57 = &v45[*(int *)(v5 + 44)];
      if ((unint64_t)v57 >= v58)
      {
        cvChangeSeqBlock(v56, 1);
        int v42 = *(_DWORD *)(v5 + 40);
      }
      ++v43;
    }
    while (v43 < v42);
  }
  cv::fastFree(v22, v41);
  cv::fastFree(v48, v47);
}

_DWORD *icvCloneGraph(uint64_t a1)
{
  return cvCloneGraph(a1, 0);
}

BOOL icvIsSparseMat(BOOL result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 2) == 16964;
  }
  return result;
}

uint64_t icvReadSparseMat(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t FileNodeByName = cvGetFileNodeByName(v2, v3, "sizes");
  uint8x8_t v35 = (_DWORD *)v5;
  uint64_t v7 = cvGetFileNodeByName(v5, v4, "dt");
  if (!v7 || (*(_DWORD *)v7 & 7) != 3 || (uint64_t v8 = *(const char **)(v7 + 24), !FileNodeByName) || !v8)
  {
    std::string::basic_string[abi:ne180100]<0>(v37, "Some of essential matrix attributes are absent");
    std::string::basic_string[abi:ne180100]<0>(v39, "icvReadSparseMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(__src, 4294967294, v37, v39, __p, 3823);
    cv::error((cv *)__src, v9);
  }
  if ((*(_DWORD *)FileNodeByName & 7) == 5)
  {
    int v10 = *(_DWORD *)(*(void *)(FileNodeByName + 16) + 40);
  }
  else if ((*(_DWORD *)FileNodeByName & 7) == 1)
  {
    int v10 = 1;
  }
  else
  {
    int v10 = -1;
  }
  int v34 = *(char **)(v7 + 24);
  int v31 = v10;
  if ((v10 - 1025) <= 0xFFFFFBFF)
  {
    std::string::basic_string[abi:ne180100]<0>(v37, "Could not determine sparse matrix dimensionality");
    std::string::basic_string[abi:ne180100]<0>(v39, "icvReadSparseMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(__src, 4294967084, v37, v39, __p, 3829);
    cv::error((cv *)__src, v11);
  }
  cvReadRawData(v35, FileNodeByName, (uint64_t)v44, "i");
  unsigned int v12 = icvDecodeSimpleFormat(v8);
  BOOL v13 = (_DWORD *)cvGetFileNodeByName((uint64_t)v35, v4, "data");
  uint64_t v14 = (uint64_t)v13;
  if (!v13 || (*v13 & 7) != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v37, "The matrix data is not found in file storage");
    std::string::basic_string[abi:ne180100]<0>(v39, "icvReadSparseMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(__src, 4294967294, v37, v39, __p, 3836);
    cv::error((cv *)__src, v15);
  }
  uint64_t SparseMat = cvCreateSparseMat(v31, v44, v12);
  uint64_t v16 = *(void *)(v14 + 16);
  cvStartReadRawData(v35, v14, (uint64_t)v40);
  if (*(int *)(v16 + 40) >= 1)
  {
    int v17 = 0;
    int v18 = (v12 >> 3) & 0x1FF;
    int v19 = v18 + 1;
    uint64_t v32 = v31 - 1;
    int v20 = v18 + 2;
    do
    {
      if ((*v41 & 7) != 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v39, "Sparse matrix data is corrupted");
        std::string::basic_string[abi:ne180100]<0>(__p, "icvReadSparseMat");
        std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v37, 4294967084, v39, __p, v36, 3851);
        cv::error((cv *)v37, v21);
      }
      unsigned int v22 = v41[4];
      if (v17 < 1 || (v22 & 0x80000000) != 0)
      {
        if (v17 < 1)
        {
          __src[0] = v41[4];
          int v23 = 1;
        }
        else
        {
          int v23 = v32 + v22;
        }
        int v24 = v31 - v23;
        if (v31 > v23)
        {
          int v17 = v31 + v17 - v23;
          char v25 = &__src[v23];
          do
          {
            int v26 = (_DWORD *)((char *)v41 + *(int *)(v16 + 44));
            uint64_t v41 = v26;
            if ((unint64_t)v26 >= v42)
            {
              cvChangeSeqBlock(v40, 1);
              int v26 = v41;
            }
            if ((*v26 & 7) != 1 || (unsigned int v27 = v26[4], (v27 & 0x80000000) != 0))
            {
              std::string::basic_string[abi:ne180100]<0>(v39, "Sparse matrix data is corrupted");
              std::string::basic_string[abi:ne180100]<0>(__p, "icvReadSparseMat");
              std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
              cv::Exception::Exception(v37, 4294967084, v39, __p, v36, 3867);
              cv::error((cv *)v37, v28);
            }
            *v25++ = v27;
            --v24;
          }
          while (v24);
        }
      }
      else
      {
        __src[v32] = v22;
      }
      uint64_t v41 = (_DWORD *)((char *)v41 + *(int *)(v16 + 44));
      if ((unint64_t)v41 >= v42) {
        cvChangeSeqBlock(v40, 1);
      }
      uint64_t v29 = cvPtrND(SparseMat, __src, 0, 1, 0);
      cvReadRawDataSlice(v35, v40, v19, v29, v34);
      v17 += v20;
    }
    while (v17 < *(_DWORD *)(v16 + 40));
  }
  return SparseMat;
}

void sub_225EB00A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void icvWriteSparseMat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!a3 || *(_WORD *)(a3 + 2) != 16964) {
    icvWriteSparseMat();
  }
  MemStorage = (void **)cvCreateMemStorage(0);
  cvStartWriteStruct(a1, a2, 6, (uint64_t)"opencv-sparse-matrix");
  int Dims = cvGetDims(a3, 0);
  cvStartWriteStruct(a1, (uint64_t)"sizes", 13, 0);
  cvWriteRawData(a1, a3 + 52, Dims, "i");
  cvEndWriteStruct(a1);
  int v6 = icvEncodeFormat(*(_DWORD *)a3 & 0xFFF, v31);
  cvWriteString(a1, (uint64_t)"dt", (uint64_t)v6, 0);
  cvStartWriteStruct(a1, (uint64_t)"data", 13, 0);
  double Seq = cvCreateSeq(7u, 0x60uLL, 8uLL, (uint64_t)MemStorage);
  uint64_t inited = cvInitSparseMatIterator(a3, (uint64_t)&v27);
  if (inited)
  {
    while (1)
    {
      __src[0] = inited + *(int *)(a3 + 48);
      cvSeqPush((uint64_t)Seq, __src);
      uint64_t inited = *(void *)(v28 + 8);
      if (!inited)
      {
        uint64_t v9 = v29;
        int v10 = v29 + 1;
        int v29 = v10;
        int v11 = *(_DWORD *)(v27 + 40);
        if (v10 >= v11) {
          break;
        }
        unsigned int v12 = (uint64_t *)(*(void *)(v27 + 32) + 8 * v9 + 8);
        while (1)
        {
          uint64_t inited = *v12;
          if (*v12) {
            break;
          }
          ++v10;
          ++v12;
          if (v11 == v10) {
            goto LABEL_12;
          }
        }
        int v29 = v10;
      }
      uint64_t v28 = inited;
    }
  }
LABEL_12:
  cvSeqSort((uint64_t)Seq, (uint64_t (*)(void))icvSortIdxCmpFunc, (uint64_t)&Dims);
  cvStartReadSeq((uint64_t)Seq, (uint64_t)__src, 0);
  if ((int)Seq[10] >= 1)
  {
    int v13 = 0;
    uint64_t v14 = 0;
    do
    {
      if (*(_DWORD *)(__src[1] + 44) != 8) {
        icvWriteSparseMat();
      }
      uint64_t v15 = *v25++;
      if ((unint64_t)v25 >= v26) {
        cvChangeSeqBlock(__src, 1);
      }
      int v16 = Dims;
      if (v13)
      {
        if (*v15 == *v14)
        {
          uint64_t v17 = 0;
          int v18 = v14 + 1;
          do
          {
            if ((Dims & ~(Dims >> 31)) == v17) {
              icvWriteSparseMat();
            }
            LODWORD(v19) = v17 + 1;
            int v20 = v15[v17 + 1];
            int v21 = v18[v17++];
          }
          while (v20 == v21);
        }
        else
        {
          LODWORD(v19) = 0;
        }
        if ((int)v19 < Dims - 1)
        {
          (*(void (**)(uint64_t, void, void))(a1 + 312))(a1, 0, (v19 - Dims + 1));
          int v16 = Dims;
        }
      }
      else
      {
        LODWORD(v19) = 0;
      }
      if ((int)v19 < v16)
      {
        uint64_t v19 = v19;
        do
          (*(void (**)(uint64_t, void, void))(a1 + 312))(a1, 0, v15[v19++]);
        while (Dims > (int)v19);
      }
      cvWriteRawData(a1, (uint64_t)v15 + *(int *)(a3 + 44) - *(int *)(a3 + 48), 1, v31);
      ++v13;
      uint64_t v14 = v15;
    }
    while (v13 < Seq[10]);
  }
  cvEndWriteStruct(a1);
  cvEndWriteStruct(a1);
  cvReleaseMemStorage(&MemStorage, v22);
}

_DWORD *icvIsImage(_DWORD *result)
{
  if (result) {
    return (_DWORD *)(*result == 144);
  }
  return result;
}

uint64_t icvReadImage(_DWORD *a1, uint64_t a2)
{
  uint64_t FileNodeByName = cvGetFileNodeByName((uint64_t)a1, a2, "width");
  if (FileNodeByName)
  {
    if ((*(_DWORD *)FileNodeByName & 7) == 2)
    {
      unint64_t v5 = (uint64_t)rint(*(double *)(FileNodeByName + 16));
    }
    else if ((*(_DWORD *)FileNodeByName & 7) == 1)
    {
      LODWORD(v5) = *(_DWORD *)(FileNodeByName + 16);
    }
    else
    {
      LODWORD(v5) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  uint64_t v6 = cvGetFileNodeByName((uint64_t)a1, a2, "height");
  if (v6)
  {
    if ((*(_DWORD *)v6 & 7) == 2)
    {
      unint64_t v7 = (uint64_t)rint(*(double *)(v6 + 16));
    }
    else if ((*(_DWORD *)v6 & 7) == 1)
    {
      unint64_t v7 = *(unsigned int *)(v6 + 16);
    }
    else
    {
      unint64_t v7 = 0x7FFFFFFFLL;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = cvGetFileNodeByName((uint64_t)a1, a2, "dt");
  if (v8 && (*(_DWORD *)v8 & 7) == 3) {
    uint64_t v9 = *(char **)(v8 + 24);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = cvGetFileNodeByName((uint64_t)a1, a2, "origin");
  if (v10 && (*(_DWORD *)v10 & 7) == 3)
  {
    uint64_t v11 = *(void *)(v10 + 24);
    if (!v5) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (!v5) {
      goto LABEL_27;
    }
  }
  if (!v7 || !v9 || !v11)
  {
LABEL_27:
    std::string::basic_string[abi:ne180100]<0>(v51, "Some of essential image attributes are absent");
    std::string::basic_string[abi:ne180100]<0>(v50, "icvReadImage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v52, 4294967294, v51, v50, __p, 3963);
    cv::error((cv *)v52, v12);
  }
  unsigned int v13 = icvDecodeSimpleFormat(v9);
  uint64_t v14 = cvGetFileNodeByName((uint64_t)a1, a2, "layout");
  if (v14) {
    uint64_t v15 = *(const char **)(v14 + 24);
  }
  else {
    uint64_t v15 = "interleaved";
  }
  if (strcmp(v15, "interleaved"))
  {
    std::string::basic_string[abi:ne180100]<0>(v51, "Only interleaved images can be read");
    std::string::basic_string[abi:ne180100]<0>(v50, "icvReadImage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v52, 4294967294, v51, v50, __p, 3968);
    cv::error((cv *)v52, v16);
  }
  uint64_t v17 = cvGetFileNodeByName((uint64_t)a1, a2, "data");
  if (!v17)
  {
    std::string::basic_string[abi:ne180100]<0>(v51, "The image data is not found in file storage");
    std::string::basic_string[abi:ne180100]<0>(v50, "icvReadImage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v52, 4294967294, v51, v50, __p, 3972);
    cv::error((cv *)v52, v18);
  }
  if ((*(_DWORD *)v17 & 7u) < 5) {
    int v19 = (*(_DWORD *)v17 & 7) != 0;
  }
  else {
    int v19 = *(_DWORD *)(*(void *)(v17 + 16) + 40);
  }
  int v20 = v7 * v5;
  int v21 = ((v13 >> 3) & 0x1FF) + 1;
  if (v19 != v21 * v7 * v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v51, "The matrix size does not match to the number of stored elements");
    std::string::basic_string[abi:ne180100]<0>(v50, "icvReadImage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v52, 4294967087, v51, v50, __p, 3976);
    cv::error((cv *)v52, v22);
  }
  if ((v13 & 7) == 4 || (v13 & 5) == 1) {
    unsigned int v24 = 0x80000000;
  }
  else {
    unsigned int v24 = 0;
  }
  uint64_t Image = cvCreateImage(v5 | (v7 << 32), (0x442211088uLL >> (4 * (v13 & 7))) & 0x78 | v24, ((v13 >> 3) & 0x1FF) + 1);
  uint64_t v26 = cvGetFileNodeByName((uint64_t)a1, a2, "roi");
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = cvGetFileNodeByName((uint64_t)a1, v26, "x");
    int v48 = v5;
    if (v28)
    {
      if ((*(_DWORD *)v28 & 7) == 2)
      {
        uint64_t v29 = (uint64_t)rint(*(double *)(v28 + 16));
      }
      else if ((*(_DWORD *)v28 & 7) == 1)
      {
        LODWORD(v29) = *(_DWORD *)(v28 + 16);
      }
      else
      {
        LODWORD(v29) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v29) = 0;
    }
    uint64_t v30 = v29;
    uint64_t v31 = cvGetFileNodeByName((uint64_t)a1, v27, "y");
    int v47 = v7;
    if (v31)
    {
      if ((*(_DWORD *)v31 & 7) == 2)
      {
        uint64_t v32 = (uint64_t)rint(*(double *)(v31 + 16));
      }
      else if ((*(_DWORD *)v31 & 7) == 1)
      {
        uint64_t v32 = *(unsigned int *)(v31 + 16);
      }
      else
      {
        uint64_t v32 = 0x7FFFFFFFLL;
      }
    }
    else
    {
      uint64_t v32 = 0;
    }
    uint64_t v33 = cvGetFileNodeByName((uint64_t)a1, v27, "width");
    if (v33)
    {
      if ((*(_DWORD *)v33 & 7) == 2)
      {
        uint64_t v34 = (uint64_t)rint(*(double *)(v33 + 16));
      }
      else if ((*(_DWORD *)v33 & 7) == 1)
      {
        LODWORD(v34) = *(_DWORD *)(v33 + 16);
      }
      else
      {
        LODWORD(v34) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v34) = 0;
    }
    unint64_t v5 = v30 | (v32 << 32);
    uint64_t v35 = v34;
    uint64_t v36 = cvGetFileNodeByName((uint64_t)a1, v27, "height");
    if (v36)
    {
      if ((*(_DWORD *)v36 & 7) == 2)
      {
        uint64_t v37 = (uint64_t)rint(*(double *)(v36 + 16));
      }
      else if ((*(_DWORD *)v36 & 7) == 1)
      {
        uint64_t v37 = *(unsigned int *)(v36 + 16);
      }
      else
      {
        uint64_t v37 = 0x7FFFFFFFLL;
      }
    }
    else
    {
      uint64_t v37 = 0;
    }
    unint64_t v7 = v35 | (v37 << 32);
    uint64_t v38 = cvGetFileNodeByName((uint64_t)a1, v27, "coi");
    if (v38)
    {
      if ((*(_DWORD *)v38 & 7) == 2)
      {
        uint64_t v39 = (uint64_t)rint(*(double *)(v38 + 16));
      }
      else if ((*(_DWORD *)v38 & 7) == 1)
      {
        LODWORD(v39) = *(_DWORD *)(v38 + 16);
      }
      else
      {
        LODWORD(v39) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v39) = 0;
    }
    cvSetImageROI((_DWORD *)Image, v5, v7);
    cvSetImageCOI((_DWORD *)Image, v39);
    LODWORD(v7) = v47;
    LODWORD(v5) = v48;
  }
  int v40 = (v21 << ((0xFA50u >> (2 * (v13 & 7))) & 3)) * v5;
  int v41 = *(_DWORD *)(Image + 96);
  if (v40 == v41) {
    int v42 = v20;
  }
  else {
    int v42 = v5;
  }
  if (v40 == v41) {
    int v43 = 1;
  }
  else {
    int v43 = v7;
  }
  cvStartReadRawData(a1, v17, (uint64_t)v53);
  if (v43 >= 1)
  {
    int v44 = 0;
    int v45 = v42 * v21;
    do
      cvReadRawDataSlice(a1, v53, v45, *(void *)(Image + 88) + *(int *)(Image + 96) * (uint64_t)v44++, v9);
    while (v43 != v44);
  }
  return Image;
}

void sub_225EB0BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t icvWriteImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!a3 || *(_DWORD *)a3 != 144 || !*(void *)(a3 + 88)) {
    icvWriteImage();
  }
  if (*(_DWORD *)(a3 + 28) == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "Images with planar data layout are not supported");
    std::string::basic_string[abi:ne180100]<0>(v20, "icvWriteImage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v22, 4294967086, v21, v20, __p, 3904);
    cv::error((cv *)v22, v5);
  }
  cvStartWriteStruct(a1, a2, 6, (uint64_t)"opencv-image");
  cvWriteInt(a1, (uint64_t)"width", *(unsigned int *)(a3 + 40));
  cvWriteInt(a1, (uint64_t)"height", *(unsigned int *)(a3 + 44));
  if (*(_DWORD *)(a3 + 32)) {
    uint64_t v6 = "bottom-left";
  }
  else {
    uint64_t v6 = "top-left";
  }
  cvWriteString(a1, (uint64_t)"origin", (uint64_t)v6, 0);
  if (*(_DWORD *)(a3 + 28) == 1) {
    unint64_t v7 = "planar";
  }
  else {
    unint64_t v7 = "interleaved";
  }
  cvWriteString(a1, (uint64_t)"layout", (uint64_t)v7, 0);
  if (*(void *)(a3 + 48))
  {
    cvStartWriteStruct(a1, (uint64_t)"roi", 14, 0);
    cvWriteInt(a1, (uint64_t)"x", *(unsigned int *)(*(void *)(a3 + 48) + 4));
    cvWriteInt(a1, (uint64_t)"y", *(unsigned int *)(*(void *)(a3 + 48) + 8));
    cvWriteInt(a1, (uint64_t)"width", *(unsigned int *)(*(void *)(a3 + 48) + 12));
    cvWriteInt(a1, (uint64_t)"height", *(unsigned int *)(*(void *)(a3 + 48) + 16));
    cvWriteInt(a1, (uint64_t)"coi", **(unsigned int **)(a3 + 48));
    cvEndWriteStruct(a1);
  }
  uint64_t v8 = (0x43160520u >> (((*(_DWORD *)(a3 + 16) >> 2) & 0x3C) + ((*(int *)(a3 + 16) >> 31) & 0x14))) & 7;
  uint64_t v9 = &v23;
  sprintf(&v23, "%d%c", *(_DWORD *)(a3 + 8), icvTypeSymbol[v8]);
  if (v24[1]) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v23 == 49;
  }
  if (v10) {
    uint64_t v9 = v24;
  }
  cvWriteString(a1, (uint64_t)"dt", (uint64_t)v9, 0);
  int v11 = *(_DWORD *)(a3 + 40);
  int v12 = (*(_DWORD *)(a3 + 8) * v11) << ((0xFA50u >> (2 * v8)) & 3);
  int v13 = *(_DWORD *)(a3 + 96);
  if (v12 == v13) {
    int v14 = *(_DWORD *)(a3 + 44);
  }
  else {
    int v14 = 1;
  }
  if (v12 == v13) {
    int v15 = 1;
  }
  else {
    int v15 = *(_DWORD *)(a3 + 44);
  }
  cvStartWriteStruct(a1, (uint64_t)"data", 13, 0);
  if (v15 >= 1)
  {
    int v16 = 0;
    int v17 = v14 * v11;
    do
      cvWriteRawData(a1, *(void *)(a3 + 88) + *(int *)(a3 + 96) * (uint64_t)v16++, v17, v9);
    while (v15 != v16);
  }
  cvEndWriteStruct(a1);
  return cvEndWriteStruct(a1);
}

void sub_225EB0FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

BOOL icvIsMat(BOOL result)
{
  if (result) {
    return *(_WORD *)(result + 2) == 16962
  }
        && (*(_DWORD *)(result + 36) & 0x80000000) == 0
        && *(_DWORD *)(result + 32) >= 0;
  return result;
}

uint64_t icvReadMat(_DWORD *a1, uint64_t a2)
{
  uint64_t FileNodeByName = cvGetFileNodeByName((uint64_t)a1, a2, "rows");
  if (FileNodeByName)
  {
    if ((*(_DWORD *)FileNodeByName & 7) == 2)
    {
      uint64_t v5 = (uint64_t)rint(*(double *)(FileNodeByName + 16));
    }
    else if ((*(_DWORD *)FileNodeByName & 7) == 1)
    {
      LODWORD(v5) = *(_DWORD *)(FileNodeByName + 16);
    }
    else
    {
      LODWORD(v5) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v5) = -1;
  }
  uint64_t v6 = cvGetFileNodeByName((uint64_t)a1, a2, "cols");
  if (v6)
  {
    if ((*(_DWORD *)v6 & 7) == 2)
    {
      uint64_t v7 = (uint64_t)rint(*(double *)(v6 + 16));
    }
    else if ((*(_DWORD *)v6 & 7) == 1)
    {
      LODWORD(v7) = *(_DWORD *)(v6 + 16);
    }
    else
    {
      LODWORD(v7) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v7) = -1;
  }
  uint64_t v8 = cvGetFileNodeByName((uint64_t)a1, a2, "dt");
  if (!v8
    || (*(_DWORD *)v8 & 7) != 3
    || (uint64_t v9 = *(char **)(v8 + 24), (v5 & 0x80000000) != 0)
    || (v7 & 0x80000000) != 0
    || !v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "Some of essential matrix attributes are absent");
    std::string::basic_string[abi:ne180100]<0>(v21, "icvReadMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v23, 4294967294, v22, v21, __p, 3585);
    cv::error((cv *)v23, v10);
  }
  unsigned int v11 = icvDecodeSimpleFormat(v9);
  uint64_t v12 = cvGetFileNodeByName((uint64_t)a1, a2, "data");
  if (!v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "The matrix data is not found in file storage");
    std::string::basic_string[abi:ne180100]<0>(v21, "icvReadMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v23, 4294967294, v22, v21, __p, 3591);
    cv::error((cv *)v23, v13);
  }
  if ((*(_DWORD *)v12 & 7u) < 5) {
    int v14 = (*(_DWORD *)v12 & 7) != 0;
  }
  else {
    int v14 = *(_DWORD *)(*(void *)(v12 + 16) + 40);
  }
  if (v14 < 1)
  {
    if (v5 | v7)
    {
      int v17 = v5;
      int v18 = v7;
    }
    else
    {
      int v17 = 0;
      int v18 = 1;
    }
    return cvCreateMatHeader(v17, v18, v11);
  }
  else
  {
    if (v14 != v7 * v5 + v7 * v5 * ((v11 >> 3) & 0x1FF))
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "The matrix size does not match to the number of stored elements");
      std::string::basic_string[abi:ne180100]<0>(v21, "icvReadMat");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v23, 4294967087, v22, v21, __p, 3596);
      cv::error((cv *)v23, v15);
    }
    uint64_t Mat = cvCreateMat(v5, v7, v11);
    cvReadRawData(a1, v12, *(void *)(Mat + 24), v9);
  }
  return Mat;
}

void sub_225EB1408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t icvWriteMat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a3
    || *(_WORD *)(a3 + 2) != 16962
    || (*(_DWORD *)(a3 + 36) & 0x80000000) != 0
    || (*(_DWORD *)(a3 + 32) & 0x80000000) != 0)
  {
    icvWriteMat();
  }
  cvStartWriteStruct(a1, a2, 6, (uint64_t)"opencv-matrix");
  cvWriteInt(a1, (uint64_t)"rows", *(unsigned int *)(a3 + 32));
  cvWriteInt(a1, (uint64_t)"cols", *(unsigned int *)(a3 + 36));
  uint64_t v5 = icvEncodeFormat(*(_DWORD *)a3 & 0xFFF, v12);
  cvWriteString(a1, (uint64_t)"dt", (uint64_t)v5, 0);
  cvStartWriteStruct(a1, (uint64_t)"data", 13, 0);
  unint64_t Size = cvGetSize(a3);
  if ((int)Size >= 1 && SHIDWORD(Size) >= 1 && *(void *)(a3 + 24))
  {
    uint64_t v7 = 0;
    if ((*(_DWORD *)a3 & 0x4000) != 0) {
      int v8 = HIDWORD(Size);
    }
    else {
      int v8 = 1;
    }
    int v9 = v8 * Size;
    if ((*(_DWORD *)a3 & 0x4000) != 0) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = HIDWORD(Size);
    }
    do
    {
      cvWriteRawData(a1, *(void *)(a3 + 24) + v7 * *(int *)(a3 + 4), v9, v12);
      ++v7;
    }
    while (v10 != v7);
  }
  cvEndWriteStruct(a1);
  return cvEndWriteStruct(a1);
}

BOOL icvIsMatND(BOOL result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 2) == 16963;
  }
  return result;
}

uint64_t icvReadMatND(_DWORD *a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t FileNodeByName = cvGetFileNodeByName((uint64_t)a1, a2, "sizes");
  uint64_t v5 = cvGetFileNodeByName((uint64_t)a1, a2, "dt");
  if (!v5 || (*(_DWORD *)v5 & 7) != 3 || (uint64_t v6 = *(char **)(v5 + 24), !FileNodeByName) || !v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "Some of essential matrix attributes are absent");
    std::string::basic_string[abi:ne180100]<0>(v23, "icvReadMatND");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v25, 4294967294, v24, v23, __p, 3670);
    cv::error((cv *)v25, v7);
  }
  if ((*(_DWORD *)FileNodeByName & 7) == 5)
  {
    signed int v8 = *(_DWORD *)(*(void *)(FileNodeByName + 16) + 40);
  }
  else if ((*(_DWORD *)FileNodeByName & 7) == 1)
  {
    signed int v8 = 1;
  }
  else
  {
    signed int v8 = -1;
  }
  if ((v8 - 33) <= 0xFFFFFFDF)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "Could not determine the matrix dimensionality");
    std::string::basic_string[abi:ne180100]<0>(v23, "icvReadMatND");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v25, 4294967084, v24, v23, __p, 3676);
    cv::error((cv *)v25, v9);
  }
  cvReadRawData(a1, FileNodeByName, (uint64_t)v26, "i");
  unsigned int v10 = icvDecodeSimpleFormat(v6);
  uint64_t v11 = cvGetFileNodeByName((uint64_t)a1, a2, "data");
  if (!v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "The matrix data is not found in file storage");
    std::string::basic_string[abi:ne180100]<0>(v23, "icvReadMatND");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v25, 4294967294, v24, v23, __p, 3683);
    cv::error((cv *)v25, v12);
  }
  int v13 = ((v10 >> 3) & 0x1FF) + 1;
  if (v8 >= 1)
  {
    uint64_t v14 = v8;
    int v15 = (int *)v26;
    do
    {
      int v16 = *v15++;
      v13 *= v16;
      --v14;
    }
    while (v14);
  }
  if ((*(_DWORD *)v11 & 7u) < 5) {
    int v17 = (*(_DWORD *)v11 & 7) != 0;
  }
  else {
    int v17 = *(_DWORD *)(*(void *)(v11 + 16) + 40);
  }
  if (v17 >= 1 && v17 != v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "The matrix size does not match to the number of stored elements");
    std::string::basic_string[abi:ne180100]<0>(v23, "icvReadMatND");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v25, 4294967087, v24, v23, __p, 3694);
    cv::error((cv *)v25, v20);
  }
  if (v17 < 1) {
    return cvCreateMatNDHeader(v8, (uint64_t)v26, v10);
  }
  uint64_t MatND = cvCreateMatND(v8, (uint64_t)v26, v10);
  cvReadRawData(a1, v11, *(void *)(MatND + 24), v6);
  return MatND;
}

void sub_225EB1A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t icvWriteMatND(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v12 = a3;
  if (!a3 || *(_WORD *)(a3 + 2) != 16963) {
    icvWriteMatND();
  }
  cvStartWriteStruct(a1, a2, 6, (uint64_t)"opencv-nd-matrix");
  int Dims = cvGetDims(a3, __dst);
  cvStartWriteStruct(a1, (uint64_t)"sizes", 13, 0);
  cvWriteRawData(a1, (uint64_t)__dst, Dims, "i");
  cvEndWriteStruct(a1);
  unsigned int ElemType = cvGetElemType((int *)a3);
  uint64_t v7 = icvEncodeFormat(ElemType, v13);
  cvWriteString(a1, (uint64_t)"dt", (uint64_t)v7, 0);
  cvStartWriteStruct(a1, (uint64_t)"data", 13, 0);
  if (*(int *)(a3 + 32) >= 1 && *(void *)(a3 + 24))
  {
    cvInitNArrayIterator(1u, (uint64_t)&v12, 0, (uint64_t)v11, (uint64_t)v9, 0);
    do
      cvWriteRawData(a1, *(uint64_t *)v10, v9[2], v13);
    while (cvNextNArraySlice(v9));
  }
  cvEndWriteStruct(a1);
  return cvEndWriteStruct(a1);
}

uint64_t cvRead(_DWORD *a1, uint64_t a2, void *a3)
{
  if (!a1)
  {
    uint64_t v4 = 4294967269;
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v11, "Invalid pointer to file storage");
    std::string::basic_string[abi:ne180100]<0>(v10, "cvRead");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v12, v4, v11, v10, __p, 5000);
    cv::error((cv *)v12, v5);
  }
  if (*a1 != 1280131417)
  {
    uint64_t v4 = 4294967291;
    goto LABEL_5;
  }
  if (!a2) {
    return 0;
  }
  if ((*(unsigned char *)a2 & 0x10) == 0 || (uint64_t v6 = *(void *)(a2 + 8)) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "The node does not represent a user object (unknown type?)");
    std::string::basic_string[abi:ne180100]<0>(v10, "cvRead");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v12, 4294967294, v11, v10, __p, 5006);
    cv::error((cv *)v12, v7);
  }
  uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t))(v6 + 48))(a1, a2);
  if (a3)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_225EB1DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t icvFSFlush(uint64_t a1)
{
  uint64_t v3 = *(_WORD **)(a1 + 120);
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v4 = *(int *)(a1 + 88);
  if ((unint64_t)v3 > v2 + v4)
  {
    _WORD *v3 = 10;
    icvPuts(a1, *(char **)(a1 + 128));
    uint64_t v2 = *(void *)(a1 + 128);
    LODWORD(v4) = *(_DWORD *)(a1 + 88);
  }
  int v5 = *(_DWORD *)(a1 + 64);
  if (v5 == v4)
  {
    int v5 = v4;
  }
  else
  {
    if (v5 > (int)v4)
    {
      memset((void *)(v2 + (int)v4), 32, v5 - (int)v4);
      uint64_t v2 = *(void *)(a1 + 128);
    }
    *(_DWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = v5;
  }
  uint64_t result = v2 + v5;
  *(void *)(a1 + 120) = result;
  return result;
}

void std::deque<char>::push_back(void *a1, unsigned char *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 9) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<char>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(unsigned char *)(*(void *)(v5 + ((v7 >> 9) & 0x7FFFFFFFFFFFF8)) + (v7 & 0xFFF)) = *a2;
  ++a1[5];
}

void std::deque<char>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1000;
  unint64_t v4 = v2 - 4096;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    signed int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)signed int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      signed int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        signed int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      int v9 = (char *)a1[1];
    }
    signed int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<CGPoint *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<CGPoint *>::push_front((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    signed int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      signed int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        signed int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        signed int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<CGPoint *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<CGPoint *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_225EB2218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t icvXMLWriteTag(uint64_t a1, const char *a2, int a3, void **a4, uint64_t a5)
{
  int v9 = *(unsigned char **)(a1 + 120);
  int v10 = *(_DWORD *)(a1 + 68);
  if (a2)
  {
    if (*a2) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (a3 == 1)
  {
    if ((*(_DWORD *)(a1 + 68) & 7u) < 5)
    {
      if (v11) {
        int v10 = 38;
      }
      else {
        int v10 = 37;
      }
      *(_DWORD *)(a1 + 12) = 0;
    }
    else if (((*(_DWORD *)(a1 + 68) & 7) == 6) != (v11 != 0))
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "An attempt to add element without a key to a map, or add element with key to sequence");
      std::string::basic_string[abi:ne180100]<0>(v53, "icvXMLWriteTag");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v55, 4294967291, v54, v53, __p, 2316);
      cv::error((cv *)v55, v12);
    }
    if ((v10 & 0x20) == 0) {
      int v9 = (unsigned char *)icvFSFlush(a1);
    }
  }
  int v50 = v10;
  if (v11)
  {
    if (*v11 == 95 && !v11[1])
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "A single _ is a reserved tag name");
      std::string::basic_string[abi:ne180100]<0>(v53, "icvXMLWriteTag");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v55, 4294967291, v54, v53, __p, 2331);
      cv::error((cv *)v55, v13);
    }
  }
  else
  {
    uint64_t v11 = "_";
  }
  uint64_t result = strlen(v11);
  LODWORD(v15) = result;
  *int v9 = 60;
  uint64_t v16 = v9 + 1;
  if (a3 == 2)
  {
    if (a4)
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "Closing tag should not include any attributes");
      std::string::basic_string[abi:ne180100]<0>(v53, "icvXMLWriteTag");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v55, 4294967291, v54, v53, __p, 2338);
      cv::error((cv *)v55, v17);
    }
    uint64_t v16 = v9 + 2;
    v9[1] = 47;
  }
  int v18 = *(unsigned __int8 *)v11;
  if (v18 != 95 && (v18 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    std::string::basic_string[abi:ne180100]<0>(v54, "Key should start with a letter or _");
    std::string::basic_string[abi:ne180100]<0>(v53, "icvXMLWriteTag");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v55, 4294967291, v54, v53, __p, 2343);
    cv::error((cv *)v55, v20);
  }
  unint64_t v21 = *(void *)(a1 + 136);
  if ((unint64_t)&v16[(int)result] >= v21)
  {
    uint64_t v22 = *(void *)(a1 + 128);
    int v23 = v16 - v22;
    unint64_t v24 = (3 * (v21 - v22) + (((3 * (v21 - v22)) & 0x8000000000000000) != 0)) >> 1;
    if ((int)v16 - (int)v22 + (int)result <= (int)v24) {
      int v25 = v24;
    }
    else {
      int v25 = v23 + result;
    }
    uint64_t result = cvAlloc(v25 + 256);
    uint64_t v26 = (char *)result;
    uint64_t v27 = *(const void **)(a1 + 128);
    *(void *)(a1 + 120) = result + *(void *)(a1 + 120) - (void)v27;
    if (v23 >= 1) {
      uint64_t result = (uint64_t)memcpy((void *)result, v27, v23);
    }
    *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = v26;
    *(void *)(a1 + 136) = &v26[v25];
    uint64_t v16 = &v26[v23];
  }
  int v28 = v15;
  if ((int)v15 >= 1)
  {
    uint64_t v15 = v15;
    uint64_t v29 = v16;
    do
    {
      char v31 = *v11++;
      char v30 = v31;
      if ((v31 - 58) <= 0xF5u
        && ((v30 & 0xDF) - 91) <= 0xE5u
        && v30 != 45
        && v30 != 95)
      {
        std::string::basic_string[abi:ne180100]<0>(v54, "Key name may only contain alphanumeric characters [a-zA-Z0-9], '-' and '_'");
        std::string::basic_string[abi:ne180100]<0>(v53, "icvXMLWriteTag");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v55, 4294967291, v54, v53, __p, 2350);
        cv::error((cv *)v55, v32);
      }
      *v29++ = v30;
      --v15;
    }
    while (v15);
  }
  unint64_t v33 = &v16[v28];
  while (1)
  {
    uint64_t v51 = a5;
    if (a4)
    {
      uint64_t result = (uint64_t)*a4;
      if (*a4)
      {
        uint64_t v34 = a4 + 1;
        do
        {
          int v35 = strlen((const char *)result);
          int v36 = strlen((const char *)*v34);
          int v37 = v35 + v36 + 4;
          unint64_t v38 = *(void *)(a1 + 136);
          if ((unint64_t)&v33[v37] >= v38)
          {
            uint64_t v39 = *(void *)(a1 + 128);
            int v40 = v33 - v39;
            unint64_t v41 = (3 * (v38 - v39) + (((3 * (v38 - v39)) & 0x8000000000000000) != 0)) >> 1;
            int v42 = v37 + v33 - v39;
            if (v42 <= (int)v41) {
              int v43 = v41;
            }
            else {
              int v43 = v42;
            }
            int v44 = (char *)cvAlloc(v43 + 256);
            uint64_t v45 = v44;
            unint64_t v46 = *(const void **)(a1 + 128);
            *(void *)(a1 + 120) = &v44[*(void *)(a1 + 120) - (void)v46];
            if (v40 >= 1) {
              memcpy(v44, v46, v40);
            }
            *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = v45;
            *(void *)(a1 + 136) = &v45[v43];
            unint64_t v33 = &v45[v40];
          }
          char *v33 = 32;
          uint64_t v47 = v33 + 1;
          memcpy(v47, *(v34 - 1), v35);
          int v48 = &v47[v35];
          *(_WORD *)int v48 = 8765;
          v48 += 2;
          memcpy(v48, *v34, v36);
          uint64_t v49 = &v48[v36];
          *uint64_t v49 = 34;
          unint64_t v33 = v49 + 1;
          uint64_t result = (uint64_t)v34[1];
          v34 += 2;
        }
        while (result);
      }
    }
    if (!v51) {
      break;
    }
    a4 = *(void ***)v51;
    a5 = *(void *)(v51 + 8);
  }
  char *v33 = 62;
  *(void *)(a1 + 120) = v33 + 1;
  *(_DWORD *)(a1 + 6_Block_object_dispose(&a9, 8) = v50 & 0xFFFFFFDF;
  return result;
}

void sub_225EB285C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t icvDecodeSimpleFormat(const char *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (icvDecodeFormat(a1, &v8) != 1 || v8 >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "Too complex format for the matrix");
    std::string::basic_string[abi:ne180100]<0>(v5, "icvDecodeSimpleFormat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
    cv::Exception::Exception(v7, 4294967294, v6, v5, __p, 3115);
    cv::error((cv *)v7, v2);
  }
  return (v9 & 7 | (8 * v8)) - 8;
}

void sub_225EB29FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t icvCalcElemSize(const char *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v3 = icvDecodeFormat(a1, &v11);
  uint64_t result = a2;
  if (v3 >= 1)
  {
    unint64_t v6 = 0;
    unint64_t v7 = (2 * v3);
    LODWORD(result) = a2;
    do
    {
      if (result == 0x7FFFFFFF
        || (v4.i32[0] = (((*(&v11 + v6 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(&v11 + v6 + 1) & 7))) & 3),
            int8x8_t v4 = vcnt_s8(v4),
            v4.i16[0] = vaddlv_u8((uint8x8_t)v4),
            v4.i32[0] >= 2u))
      {
        cvCreateMemStorage_cold_1();
      }
      unsigned int v8 = (((*(&v11 + v6 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(&v11 + v6 + 1) & 7))) & 3);
      uint64_t result = ((result + v8 - 1) & -v8) + *(&v11 + v6) * v8;
      v6 += 2;
    }
    while (v6 < v7);
  }
  if (!a2)
  {
    if (result == 0x7FFFFFFF
      || (v4.i32[0] = (((v12 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v12 & 7))) & 3),
          uint8x8_t v10 = (uint8x8_t)vcnt_s8(v4),
          v10.i16[0] = vaddlv_u8(v10),
          v10.i32[0] >= 2u))
    {
      cvCreateMemStorage_cold_1();
    }
    int v9 = (((v12 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v12 & 7))) & 3);
    return (result + v9 - 1) & -v9;
  }
  return result;
}

uint64_t icvWriteSeq(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  v14[0] = a4;
  v14[1] = a5;
  if (!a3 || *((_WORD *)a3 + 1) != 17049) {
    icvWriteSeq();
  }
  cvStartWriteStruct(a1, a2, 6, (uint64_t)"opencv-sequence");
  if ((a6 & 0x80000000) == 0) {
    cvWriteInt(a1, (uint64_t)"level", a6);
  }
  Format = icvGetFormat(a3, "dt", (const char *)v14, 0, v15);
  __s[0] = 0;
  int v10 = *a3;
  if ((*a3 & 0x4000) != 0) {
    *(void *)&__s[strlen(__s)] = 0x6465736F6C6320;
  }
  if ((v10 & 0x8000) != 0) {
    strcat(__s, " hole");
  }
  if ((v10 & 0x3000) == 0x1000) {
    strcat(__s, " curve");
  }
  if ((v10 & 0xFFF) == 0 && a3[11] != 1) {
    strcat(__s, " untyped");
  }
  if (__s[0]) {
    int v11 = &__s[1];
  }
  else {
    int v11 = __s;
  }
  cvWriteString(a1, (uint64_t)"flags", (uint64_t)v11, 1);
  cvWriteInt(a1, (uint64_t)"count", a3[10]);
  cvWriteString(a1, (uint64_t)"dt", (uint64_t)Format, 0);
  icvWriteHeaderData(a1, a3, (const char *)v14, 96);
  cvStartWriteStruct(a1, (uint64_t)"data", 13, 0);
  for (uint64_t i = *((void *)a3 + 11); i; uint64_t i = *(void *)(i + 8))
  {
    cvWriteRawData(a1, *(void *)(i + 24), *(_DWORD *)(i + 20), Format);
    if (i == **((void **)a3 + 11)) {
      break;
    }
  }
  cvEndWriteStruct(a1);
  return cvEndWriteStruct(a1);
}

char *icvGetFormat(_DWORD *a1, char *a2, const char *a3, uint64_t a4, char *a5)
{
  unsigned int v8 = cvAttrValue(a3, a2);
  if (v8)
  {
    int v9 = v8;
    if (icvCalcElemSize(v8, a4) != a1[11])
    {
      std::string::basic_string[abi:ne180100]<0>(v18, "The size of element calculated from \"dt\" and the elem_size do not match");
      std::string::basic_string[abi:ne180100]<0>(v17, "icvGetFormat");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v19, 4294967087, v18, v17, __p, 4116);
      cv::error((cv *)v19, v10);
    }
  }
  else
  {
    int v11 = a1[11];
    if ((*a1 & 0xFFF) != 0 || v11 == 1)
    {
      if ((((*a1 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*a1 & 7))) & 3) != v11)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "Size of sequence element (elem_size) is inconsistent with seq->flags");
        std::string::basic_string[abi:ne180100]<0>(v17, "icvGetFormat");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
        cv::Exception::Exception(v19, 4294967087, v18, v17, __p, 4122);
        cv::error((cv *)v19, v12);
      }
      return icvEncodeFormat(*a1 & 0xFFF, a5);
    }
    else
    {
      BOOL v14 = __OFSUB__(v11, a4);
      int v15 = v11 - a4;
      if ((v15 < 0) ^ v14 | (v15 == 0))
      {
        return 0;
      }
      else
      {
        if ((v15 & 3) != 0) {
          sprintf(a5, "%uu");
        }
        else {
          sprintf(a5, "%ui");
        }
        return a5;
      }
    }
  }
  return (char *)v9;
}

void sub_225EB301C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

const char *icvWriteHeaderData(uint64_t a1, int *a2, const char *a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t result = cvAttrValue(a3, "header_dt");
  if (result)
  {
    unsigned int v8 = (char *)result;
    if ((int)icvCalcElemSize(result, a4) > a2[1])
    {
      std::string::basic_string[abi:ne180100]<0>(v18, "The size of header calculated from \"header_dt\" is greater than header_size");
      std::string::basic_string[abi:ne180100]<0>(v17, "icvWriteHeaderData");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/persistence.cpp");
      cv::Exception::Exception(v19, 4294967087, v18, v17, __p, 4052);
      cv::error((cv *)v19, v9);
    }
LABEL_22:
    cvWriteString(a1, (uint64_t)"header_dt", (uint64_t)v8, 0);
    cvStartWriteStruct(a1, (uint64_t)"header_user_data", 13, 0);
    cvWriteRawData(a1, (uint64_t)(a2 + 24), 1, v8);
    return (const char *)cvEndWriteStruct(a1);
  }
  int v10 = a2[1];
  unsigned int v11 = v10 - a4;
  if (v10 <= (int)a4) {
    return result;
  }
  int v12 = *a2;
  if (HIWORD(*a2) != 17049) {
    goto LABEL_18;
  }
  if (v10 == 128 && (*a2 & 0xFFE) == 0xC && a2[11] == 8)
  {
    cvStartWriteStruct(a1, (uint64_t)"rect", 14, 0);
    cvWriteInt(a1, (uint64_t)"x", a2[24]);
    cvWriteInt(a1, (uint64_t)"y", a2[25]);
    cvWriteInt(a1, (uint64_t)"width", a2[26]);
    cvWriteInt(a1, (uint64_t)"height", a2[27]);
    cvEndWriteStruct(a1);
    uint64_t v13 = a2[28];
    return (const char *)cvWriteInt(a1, (uint64_t)"color", v13);
  }
  if ((v12 & 0xFFFF3000) != 0x42991000 || (v12 & 0xFFF) != 0 || a2[11] != 1)
  {
LABEL_18:
    if ((v11 & 3) != 0)
    {
      uint64_t v15 = (v10 - a4);
      BOOL v14 = "%uu";
    }
    else
    {
      uint64_t v15 = v11 >> 2;
      BOOL v14 = "%ui";
    }
    unsigned int v8 = v20;
    sprintf(v20, v14, v15);
    goto LABEL_22;
  }
  cvStartWriteStruct(a1, (uint64_t)"origin", 14, 0);
  cvWriteInt(a1, (uint64_t)"x", a2[24]);
  cvWriteInt(a1, (uint64_t)"y", a2[25]);
  return (const char *)cvEndWriteStruct(a1);
}

void sub_225EB33DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

char *icvEncodeFormat(unsigned int a1, char *a2)
{
  sprintf(a2, "%d%c", ((a1 >> 3) & 0x1FF) + 1, icvTypeSymbol[a1 & 7]);
  if (a2[2]) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = *a2 == 49;
  }
  return &a2[v3];
}

uint64_t icvSortIdxCmpFunc(int **a1, int **a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((int)v3 < 1) {
    return 0;
  }
  int8x8_t v4 = *a1;
  uint64_t v5 = *a2;
  while (1)
  {
    int v7 = *v4++;
    int v6 = v7;
    int v8 = *v5++;
    uint64_t result = (v6 - v8);
    if (v6 != v8) {
      break;
    }
    if (!--v3) {
      return 0;
    }
  }
  return result;
}

void cvWriteRawData_cold_2()
{
}

void icvDecodeFormat()
{
  __assert_rtn("icvDecodeFormat", "persistence.cpp", 3035, "fmt_pairs != 0 && max_len > 0");
}

void cvReadRawDataSlice_cold_2()
{
}

void cvReadRawDataSlice_cold_3()
{
}

void icvWriteSeqTree()
{
}

void icvReadSeqTree()
{
  __assert_rtn("icvReadSeqTree", "persistence.cpp", 4402, "level == prev_level + 1");
}

void icvWriteGraph()
{
}

{
  __assert_rtn("cvAlignPtr", "internal.hpp", 444, "(align & (align-1)) == 0");
}

void icvWriteSparseMat()
{
}

{
  __assert_rtn("icvWriteSparseMat", "persistence.cpp", 3786, "k < dims");
}

{
  __assert_rtn("icvWriteSparseMat", "persistence.cpp", 3782, "(reader).seq->elem_size == sizeof(idx)");
}

void icvWriteImage()
{
}

void icvWriteMat()
{
}

void icvWriteMatND()
{
}

void icvWriteSeq()
{
}

void *_GLOBAL__sub_I_persistence_cpp()
{
  uint64_t v1 = 0x4800000000;
  uint64_t v3 = 0;
  int8x8_t v4 = "opencv-sequence";
  uint64_t v2 = 0;
  uint64_t v5 = icvIsSeq;
  int v6 = (uint64_t (*)())icvReleaseSeq;
  int v9 = icvCloneSeq;
  int v7 = icvReadSeq;
  int v8 = icvWriteSeqTree;
  cvRegisterType((uint64_t)&v1);
  seq_type = CvType::first;
  uint64_t v1 = 0x4800000000;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  int8x8_t v4 = "opencv-sequence-tree";
  uint64_t v5 = icvIsSeq;
  int v8 = icvWriteSeqTree;
  int v9 = icvCloneSeq;
  int v6 = (uint64_t (*)())icvReleaseSeq;
  int v7 = icvReadSeqTree;
  cvRegisterType((uint64_t)&v1);
  seq_tree_type = CvType::first;
  uint64_t v1 = 0x4800000000;
  uint64_t v3 = 0;
  int8x8_t v4 = "opencv-graph";
  uint64_t v2 = 0;
  uint64_t v5 = icvIsGraph;
  int v6 = (uint64_t (*)())icvReleaseGraph;
  int v9 = icvCloneGraph;
  int v7 = icvReadGraph;
  int v8 = icvWriteGraph;
  cvRegisterType((uint64_t)&v1);
  seq_graph_type = CvType::first;
  uint64_t v1 = 0x4800000000;
  uint64_t v3 = 0;
  int8x8_t v4 = "opencv-sparse-matrix";
  uint64_t v2 = 0;
  uint64_t v5 = icvIsSparseMat;
  int v6 = (uint64_t (*)())cvReleaseSparseMat;
  int v9 = cvCloneSparseMat;
  int v7 = icvReadSparseMat;
  int v8 = icvWriteSparseMat;
  cvRegisterType((uint64_t)&v1);
  sparse_mat_type = CvType::first;
  uint64_t v1 = 0x4800000000;
  uint64_t v3 = 0;
  int8x8_t v4 = "opencv-image";
  uint64_t v2 = 0;
  uint64_t v5 = icvIsImage;
  int v6 = (uint64_t (*)())cvReleaseImage;
  int v9 = cvCloneImage;
  int v7 = icvReadImage;
  int v8 = icvWriteImage;
  cvRegisterType((uint64_t)&v1);
  image_type = CvType::first;
  uint64_t v1 = 0x4800000000;
  uint64_t v3 = 0;
  int8x8_t v4 = "opencv-matrix";
  uint64_t v2 = 0;
  uint64_t v5 = icvIsMat;
  int v6 = (uint64_t (*)())cvReleaseMat;
  int v9 = cvCloneMat;
  int v7 = icvReadMat;
  int v8 = icvWriteMat;
  cvRegisterType((uint64_t)&v1);
  mat_type = CvType::first;
  uint64_t v1 = 0x4800000000;
  uint64_t v3 = 0;
  int8x8_t v4 = "opencv-nd-matrix";
  uint64_t v2 = 0;
  uint64_t v5 = icvIsMatND;
  int v6 = cvReleaseMatND;
  int v9 = cvCloneMatND;
  int v7 = icvReadMatND;
  int v8 = icvWriteMatND;
  uint64_t result = cvRegisterType((uint64_t)&v1);
  matnd_type = CvType::first;
  return result;
}

uint64_t cv::dft(cv *this, const cv::_InputArray *a2, const cv::_OutputArray *a3)
{
  void (***v3)(long long *__return_ptr);
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  cv *v9;
  cv *v10;
  char v11;
  BOOL v12;
  int v13;
  int v14;
  Mat *v15;
  int *v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  const cv::Exception *v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  int *v30;
  int v31;
  int v32;
  BOOL v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  signed int v38;
  signed int v39;
  BOOL v40;
  BOOL v41;
  signed int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  _OWORD *v47;
  BOOL v48;
  cv *v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  _DWORD *v54;
  cv *v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  BOOL v59;
  int v60;
  double v61;
  int v62;
  unint64_t v63;
  char *v64;
  int v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  unsigned int v70;
  char v71;
  int v72;
  int v73;
  _DWORD *v74;
  BOOL v75;
  BOOL v76;
  int v77;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  double v84;
  int v85;
  int v86;
  unint64_t v88;
  Mat *v89;
  int v90;
  uint64_t (*v91)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, int);
  size_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  int v96;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int32x2_t *v101;
  int v102;
  uint64_t v103;
  _OWORD *v104;
  _DWORD *v105;
  _DWORD *v106;
  unsigned __int8 *v107;
  cv *v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  void *v112;
  void *v113;
  int *v114;
  void *v115;
  void *v116;
  _DWORD *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  void *v123;
  cv *v124;
  unint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  uint64_t v129;
  int *v130;
  _DWORD *v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t *v145;
  cv *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD *v150;
  int *v151;
  cv *v152;
  uint64_t v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  int32x2_t *v158;
  cv *v159;
  cv *v160;
  BOOL v161;
  int v162;
  BOOL v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int32x2_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t result;
  const cv::Exception *v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int v177;
  int v178;
  char v179;
  BOOL v180;
  BOOL v181;
  int v182;
  int v183;
  uint64_t v184;
  char *v185;
  cv *v186;
  Mat *v187;
  uint64_t v188;
  int v189;
  uint64_t (*v190)(int, int, int, int, int, int, int, int, uint64_t, uint64_t, int);
  char *v191;
  _DWORD *v192;
  uint64_t *__src;
  unsigned __int8 *v194;
  int v195;
  int v196;
  _DWORD *v197;
  _OWORD *v198;
  unsigned int v199;
  int *v200;
  _DWORD *v201;
  int v202;
  cv *v203;
  int v204;
  uint64_t v205;
  void *__p[2];
  void *v207;
  cv *v208;
  long long v209;
  long long v210;
  long long v211;
  uint64_t v212;
  cv *v213;
  unsigned __int8 *v214;
  int32x2_t v215;
  int32x2_t v216;
  int32x2_t v217;
  void *v218[2];
  void *v219[2];
  unsigned char v220[120];
  long long v221;
  unsigned char v222[48];
  int32x2_t *v223;
  cv *v224;
  unsigned __int8 *v225[2];
  long long v226;
  uint64_t v227;
  long long v228;
  long long v229;
  uint64_t v230;
  uint64_t v231;
  cv *v232;
  uint64_t v233;
  unsigned int v234[34];
  int v235[2];
  unint64_t v236;
  void v237[518];

  uint64_t v3 = (void (***)(long long *__return_ptr))MEMORY[0x270FA5388](this, a2);
  LODWORD(v187) = v4;
  int v6 = v5;
  int v8 = v7;
  v237[515] = *MEMORY[0x263EF8340];
  *(void *)v235 = v237;
  v236 = 4104;
  (**v3)(&v226);
  v221 = v226;
  *(_OWORD *)&v222[8] = v228;
  *(_OWORD *)&v222[24] = v229;
  *(void *)v222 = v227;
  *(void *)&v222[40] = v230;
  v223 = (int32x2_t *)&v221 + 1;
  v224 = (cv *)v225;
  v225[1] = 0;
  v225[0] = 0;
  if ((void)v228) {
    atomic_fetch_add((atomic_uint *volatile)v228, 1u);
  }
  if (SDWORD1(v226) > 2)
  {
    DWORD1(v221) = 0;
    cv::Mat::copySize((cv::Mat *)&v221, (const cv::Mat *)&v226);
  }
  else
  {
    int v9 = v232;
    int v10 = v224;
    *(void *)v224 = *(void *)v232;
    *((void *)v10 + 1) = *((void *)v9 + 1);
  }
  unsigned int v11 = v221;
  int v12 = (~v6 & 0x21) == 0;
  if ((v221 & 0xFF8) == 0) {
    int v12 = 1;
  }
  unint64_t v180 = v12;
  if (((unsigned __int16)v221 & 0xFFFu) > 0xE || ((1 << v221) & 0x6060) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v207, "type == CV_32FC1 || type == CV_32FC2 || type == CV_64FC1 || type == CV_64FC2");
    std::string::basic_string[abi:ne180100]<0>(v219, "dft");
    std::string::basic_string[abi:ne180100]<0>(v218, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/dxt.cpp");
    cv::Exception::Exception(v220, 4294967081, &v207, v219, v218, 1546);
    cv::error((cv *)v220, v172);
  }
  uint64_t v13 = v221 & 7;
  BOOL v14 = v6 & 1;
  if (v6)
  {
    if ((v6 & 0x20) != 0 && (v221 & 0xFF8) == 8)
    {
      v216 = vrev64_s32(*v223);
      (*(void (**)(uint64_t, int32x2_t *, void, uint64_t, void, void))(*(void *)v8 + 128))(v8, &v216, v221 & 7, 0xFFFFFFFFLL, 0, 0);
      goto LABEL_18;
    }
  }
  else if ((v6 & 0x10) != 0 && (v221 & 0xFF8) == 0)
  {
    v217 = vrev64_s32(*v223);
    (*(void (**)(uint64_t, int32x2_t *, void, uint64_t, void, void))(*(void *)v8 + 128))(v8, &v217, v13 | 8u, 0xFFFFFFFFLL, 0, 0);
    goto LABEL_18;
  }
  v215 = vrev64_s32(*v223);
  (*(void (**)(uint64_t, int32x2_t *, void, uint64_t, void, void))(*(void *)v8 + 128))(v8, &v215, v221 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
LABEL_18:
  (**(void (***)(void **__return_ptr, uint64_t, uint64_t))v8)(&v207, v8, 0xFFFFFFFFLL);
  int v18 = (0x88442211uLL >> (4 * (v11 & 7u))) & 0xF;
  int v19 = 2 * v18;
  v175 = v18;
  if (v180) {
    int64_t v20 = v18;
  }
  else {
    int64_t v20 = 2 * v18;
  }
  uint64_t v174 = v20;
  if ((int)v187 >= 1 && HIDWORD(v221) == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v219, "This mode (using nonzero_rows with a single-column matrix) breaks the function's logic, so it is prohibited.\nFor fast convolution/correlation use 2-column matrix or single-row matrix instead");
    std::string::basic_string[abi:ne180100]<0>(v218, "dft");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/dxt.cpp");
    cv::Exception::Exception(v220, 4294967083, v219, v218, __p, 1563);
    cv::error((cv *)v220, v21);
  }
  uint64_t v22 = 0;
  if ((v6 & 4) != 0 || SDWORD2(v221) < 2) {
    goto LABEL_35;
  }
  if (HIDWORD(v221) != 1)
  {
    uint64_t v22 = 0;
    int v23 = v180;
    if (SHIDWORD(v221) <= 1) {
      int v23 = 0;
    }
    if ((v6 & 1) == 0 || !v23) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if ((BYTE1(v221) & 0x40) == 0 || (BYTE1(v207) & 0x40) == 0)
  {
LABEL_34:
    uint64_t v22 = 1;
    goto LABEL_35;
  }
  uint64_t v22 = 0;
LABEL_35:
  v199 = 0;
  unint64_t v188 = (4 * v18);
  v178 = v19 + 4;
  if (v13 == 6) {
    unint64_t v24 = 3;
  }
  else {
    unint64_t v24 = 0;
  }
  int v25 = (v6 & 1) != 0 && v180;
  v181 = v25;
  uint64_t v26 = 1;
  if (v6) {
    uint64_t v26 = 2;
  }
  if (!v180) {
    uint64_t v26 = 0;
  }
  uint64_t v173 = v26 + v24;
  uint64_t v176 = v24;
  int v177 = v6;
  unint64_t v189 = v6 & 1;
  v194 = (unsigned __int8 *)(2 * v18);
  uint64_t v27 = v22;
  if (!v22) {
    goto LABEL_49;
  }
LABEL_46:
  int v28 = 0;
  uint64_t v29 = v208;
  char v30 = (int *)&v208 + 1;
  if (!v14) {
    char v30 = (int *)((unint64_t)&v226 | 0xC);
  }
  char v31 = *v30;
  long long v32 = v188 * v208;
  while (1)
  {
    v204 = v31;
    if (v29) {
      v199 = cv::DFTFactorize((cv *)v29, v234, v16);
    }
    unint64_t v38 = v234[0];
    uint64_t v39 = v234[v199 - 1];
    int v40 = (v234[0] & 1) != 0 || (int)v199 <= 1;
    unint64_t v41 = !v40;
    int v42 = v234[v41];
    int v43 = ((v42 > 5) & v42) != 0 ? v19 + v19 * v42 : 0;
    int v44 = v32 + v29 * v178 + v43;
    if (v27)
    {
      uint64_t v45 = 1;
      if (v27 == 1 && v234[0] != v39) {
        goto LABEL_78;
      }
    }
    else
    {
      if (*(void *)v222 == (void)v209 && v234[0] != v39 || v28)
      {
LABEL_78:
        uint64_t v45 = 0;
        v44 += v29 * v19;
        goto LABEL_80;
      }
      uint64_t v45 = 1;
    }
LABEL_80:
    v203 = (cv *)v29;
    unint64_t v46 = v44 + 32;
    uint64_t v47 = *(_OWORD **)v235;
    if (v236 >= v44 + 32)
    {
      uint64_t v49 = v203;
    }
    else
    {
      if (*(void **)v235 != v237)
      {
        if (*(void *)v235) {
          MEMORY[0x22A641760](*(void *)v235, 0x1000C8077774924);
        }
        *(void *)v235 = v237;
      }
      v236 = (int)v46;
      uint64_t v47 = v237;
      int v48 = v46 >= 0x1009;
      uint64_t v49 = v203;
      if (v48) {
        operator new[]();
      }
    }
    v200 = (int *)((char *)v47 + (int)v19 * (uint64_t)(int)v49);
    int v50 = v181;
    if (v38 == v39) {
      int v50 = 0;
    }
    v198 = v47;
    if (v49 || v50)
    {
      if (v27) {
        uint64_t v51 = 0;
      }
      else {
        uint64_t v51 = v181;
      }
      cv::DFTInit(v49, v199, (signed int *)v234, v200, (int *)v19, v47, (void *)v51, v17);
    }
    uint64_t v52 = (int)v19 * (uint64_t)(int)v49;
    uint64_t v53 = (char *)(((unint64_t)&v200[(int)v49 + 3] + 3) & 0xFFFFFFFFFFFFFFF0);
    if (!v27) {
      break;
    }
    long long v54 = *(_DWORD **)v222;
    int v197 = (_DWORD *)v209;
    long long v55 = (cv *)&v53[v52 + v52];
    if (v45) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = (int)v19 * (uint64_t)(int)v49;
    }
    unint64_t v191 = (char *)v55 + v56;
    v192 = (_DWORD *)(((unint64_t)&v200[(int)v49 + 3] + 3) & 0xFFFFFFFFFFFFFFF0);
    if (v45) {
      uint64_t v57 = ((unint64_t)&v200[(int)v49 + 3] + 3) & 0xFFFFFFFFFFFFFFF0;
    }
    else {
      uint64_t v57 = (unint64_t)&v53[v52];
    }
    __src = (uint64_t *)v57;
    if (v45) {
      long long v55 = (cv *)&v53[v52];
    }
    v185 = &v53[v52];
    uint64_t v186 = v55;
    unint64_t v190 = cv::dft(cv::_InputArray const&,cv::_OutputArray const&,int,int)::dft_tbl[v176];
    v184 = (int)v19 * (uint64_t)(int)v49;
    if (v180 && v14 && SHIDWORD(v221) >= 2)
    {
      unint64_t v58 = 0;
      int v59 = (v204 & 1) == 0;
      int v60 = v204 + 2;
      if (v204 >= -1) {
        int v60 = v204 + 1;
      }
      int v195 = v60 >> 1;
      unsigned int v61 = 1.0;
      unint64_t v179 = 1;
      unsigned int v63 = v175;
      size_t v62 = v175;
      uint64_t v64 = v185;
      goto LABEL_119;
    }
    unsigned int v61 = 1.0;
    if ((v6 & 2) != 0) {
      unsigned int v61 = 1.0 / (double)(v204 * (int)v49);
    }
    if (v180)
    {
      int v59 = (v204 & 1) == 0;
      uint64_t v65 = v204 + 2;
      if (v204 >= -1) {
        uint64_t v65 = v204 + 1;
      }
      int v195 = v65 >> 1;
      size_t v62 = v175;
      uint64_t v64 = &v53[v52];
      if (!v14)
      {
        bzero(v53, (int)v19 * (uint64_t)(int)v49);
        unsigned int v63 = v175;
        cv::CopyColumn(v54, (unint64_t)v225[0], (_DWORD *)(((unint64_t)&v200[(int)v49 + 3] + 3) & 0xFFFFFFFFFFFFFFF0), v19, (int)v49, v175);
        int v66 = (char *)v54 + v175 + v175 * ((v207 >> 3) & 0x1FF);
        if (v204)
        {
          unint64_t v179 = 0;
          int v59 = 0;
          unint64_t v58 = 1;
          int v104 = v198;
          BOOL v14 = v189;
          goto LABEL_196;
        }
        bzero(v185, (int)v19 * (uint64_t)(int)v49);
        cv::CopyColumn(&v66[(v204 - 2) * v175], (unint64_t)v225[0], v185, v19, (int)v49, v175);
        unint64_t v179 = 0;
        unint64_t v58 = 1;
        BOOL v14 = v189;
        goto LABEL_191;
      }
      unint64_t v179 = 0;
      unint64_t v58 = 1;
      unsigned int v63 = v175;
      BOOL v14 = v189;
LABEL_119:
      if ((v221 & 0xFF8) != 0)
      {
        cv::CopyColumn(*(_DWORD **)v222, (unint64_t)v225[0], v192, v19, (int)v49, v19);
        if (!v59)
        {
          int v66 = (char *)v54 + v19;
          goto LABEL_195;
        }
        cv::CopyColumn((_DWORD *)((char *)v54 + (int)v19 * (uint64_t)v195), (unint64_t)v225[0], v64, v19, (int)v49, v19);
        int v66 = (char *)v54 + v19;
      }
      else
      {
        int v103 = *(void *)v222;
        cv::CopyColumn(*(_DWORD **)v222, (unint64_t)v225[0], v192, v63, (int)v49, v63);
        cv::ExpandCCS((uint64_t)v192, (unsigned __int8 *)v49, v62);
        if (!v59)
        {
          int v66 = (char *)(v103 + v63);
          goto LABEL_195;
        }
        cv::CopyColumn((_DWORD *)(v103 + (v204 - 1) * v63), (unint64_t)v225[0], v185, v63, (int)v49, v63);
        cv::ExpandCCS((uint64_t)v185, (unsigned __int8 *)v49, v62);
        int v66 = (char *)(v103 + v63);
        uint64_t v64 = v185;
      }
LABEL_191:
      ((void (*)(char *, cv *, cv *, void, unsigned int *, int *, _OWORD *, cv *, double, void, char *, int))v190)(v64, v186, v49, v199, v234, v200, v198, v49, v61, 0, v191, v14);
      int v59 = 1;
LABEL_195:
      int v104 = v198;
LABEL_196:
      ((void (*)(_DWORD *, uint64_t *, cv *, void, unsigned int *, int *, _OWORD *, cv *, double, void, char *, int))v190)(v192, __src, v49, v199, v234, v200, v104, v49, v61, 0, v191, v14);
      v182 = v58;
      v201 = v66;
      if (((unsigned __int16)v207 & 0xFF8) != 0)
      {
        if (v14) {
          __assert_rtn("dft", "dxt.cpp", 1844, "!inv");
        }
        cv::CopyColumn(__src, v19, v197, (unint64_t)v214, (int)v49, v19);
        uint64_t v73 = v195;
        if (v59) {
          cv::CopyColumn(v186, v19, (_DWORD *)((char *)v197 + (int)v19 * (uint64_t)v195), (unint64_t)v214, (int)v49, v19);
        }
        uint64_t v74 = (_DWORD *)((char *)v197 + v19);
        unsigned int v72 = 1;
        goto LABEL_208;
      }
      if (v14)
      {
        int v105 = v197;
        cv::CopyColumn(__src, v19, v197, (unint64_t)v214, (int)v49, v63);
        if (v59)
        {
          int v106 = (_DWORD *)((char *)v197 + (v204 - 1) * v63);
          unint64_t v107 = v214;
          float64x2_t v108 = v186;
          float64x2_t v109 = v19;
LABEL_206:
          cv::CopyColumn(v108, v109, v106, (unint64_t)v107, (int)v49, v63);
        }
      }
      else
      {
        memcpy((char *)__src + v63, __src, v63);
        int v105 = v197;
        cv::CopyColumn((uint64_t *)((char *)__src + v63), v63, v197, (unint64_t)v214, (int)v49, v63);
        if (v59)
        {
          memcpy((char *)v186 + v63, v186, v63);
          int v106 = (_DWORD *)((char *)v197 + (v204 - 1) * v63);
          unint64_t v107 = v214;
          float64x2_t v108 = (cv *)((char *)v186 + v63);
          float64x2_t v109 = v63;
          goto LABEL_206;
        }
      }
      uint64_t v74 = (_DWORD *)((char *)v105 + v63);
      unsigned int v72 = 1;
      uint64_t v73 = v195;
      goto LABEL_208;
    }
    v201 = *(_DWORD **)v222;
    unint64_t v179 = 0;
    unsigned int v72 = 0;
    v182 = 1;
    uint64_t v73 = v204;
    uint64_t v74 = (_DWORD *)v209;
LABEL_208:
    if (v72 < v73)
    {
      int v110 = v73;
      v205 = 4 * (int)v203;
      uint64_t v111 = (2 * v203);
      int v112 = v201 + 4;
      int v113 = v201 + 2;
      uint64_t v114 = v201 + 1;
      uint64_t v115 = v74 + 4;
      uint64_t v116 = v74 + 2;
      uint64_t v117 = v74 + 1;
      v196 = v110;
      do
      {
        if (v72 + 1 >= v110)
        {
          long long v124 = v203;
          cv::CopyColumn(v201, (unint64_t)v225[0], v192, (unint64_t)v194, (int)v203, (uint64_t)v194);
        }
        else
        {
          long long v118 = (unint64_t)v225[0] >> 2;
          if (v194 == (unsigned __int8 *)4)
          {
            if ((int)v203 >= 1)
            {
              uint64_t v129 = 4 * v118;
              v130 = v114;
              v131 = v192;
              v132 = v203;
              do
              {
                uint64_t v133 = *v130;
                unsigned char *v131 = *(v130 - 1);
                *(_DWORD *)((char *)v131++ + v184) = v133;
                v130 = (int *)((char *)v130 + v129);
                --v132;
              }
              while (v132);
            }
          }
          else if (v194 == (unsigned __int8 *)8)
          {
            if ((int)v203 >= 1)
            {
              long long v125 = 0;
              uint64_t v126 = 4 * v118;
              v127 = v113;
              char v128 = v192;
              do
              {
                void *v128 = *(v127 - 1);
                *(void *)((char *)v128 + v184) = *v127;
                v125 += 2;
                ++v128;
                v127 = (void *)((char *)v127 + v126);
              }
              while (v125 < v111);
            }
          }
          else if (v194 == (unsigned __int8 *)16 && (int)v203 >= 1)
          {
            uint64_t v119 = 0;
            long long v120 = 4 * v118;
            long long v121 = v192 + 2;
            uint64_t v122 = v112;
            do
            {
              *(v121 - 1) = *(v122 - 2);
              *long long v121 = *(v122 - 1);
              uint64_t v123 = (void *)((char *)v121 + v184);
              *(v123 - 1) = *v122;
              int *v123 = v122[1];
              v119 += 4;
              uint64_t v122 = (void *)((char *)v122 + v120);
              v121 += 2;
            }
            while (v119 < v205);
          }
          long long v124 = v203;
          ((void (*)(char *, cv *, cv *, void, unsigned int *, int *, _OWORD *, cv *, double, void, char *, int))v190)(v185, v186, v203, v199, v234, v200, v198, v203, v61, 0, v191, v189);
        }
        ((void (*)(_DWORD *, uint64_t *, cv *, void, unsigned int *, int *, _OWORD *, cv *, double, void, char *, int))v190)(v192, __src, v124, v199, v234, v200, v198, v124, v61, 0, v191, v189);
        if (v72 + 1 >= v196)
        {
          cv::CopyColumn(__src, (unint64_t)v194, v74, (unint64_t)v214, (int)v203, (uint64_t)v194);
        }
        else
        {
          v134 = (unint64_t)v214 >> 2;
          if (v194 == (unsigned __int8 *)4)
          {
            if ((int)v203 >= 1)
            {
              long long v149 = 4 * v134;
              long long v150 = v117;
              unint64_t v151 = (int *)__src;
              long long v152 = v186;
              long long v153 = v203;
              do
              {
                long long v155 = *v151++;
                long long v154 = v155;
                long long v156 = *(_DWORD *)v152;
                long long v152 = (cv *)((char *)v152 + 4);
                *(v150 - 1) = v154;
                char *v150 = v156;
                long long v150 = (_DWORD *)((char *)v150 + v149);
                --v153;
              }
              while (v153);
            }
          }
          else if (v194 == (unsigned __int8 *)8)
          {
            if ((int)v203 >= 1)
            {
              long long v142 = 0;
              unint64_t v143 = 4 * v134;
              long long v144 = v116;
              long long v145 = __src;
              long long v146 = v186;
              do
              {
                unint64_t v147 = *v145++;
                *(v144 - 1) = v147;
                long long v148 = *(void *)v146;
                long long v146 = (cv *)((char *)v146 + 8);
                char *v144 = v148;
                v142 += 2;
                long long v144 = (void *)((char *)v144 + v143);
              }
              while (v142 < v111);
            }
          }
          else if (v194 == (unsigned __int8 *)16 && (int)v203 >= 1)
          {
            long long v135 = 0;
            long long v136 = 4 * v134;
            long long v137 = __src + 1;
            long long v138 = (uint64_t *)((char *)v186 + 8);
            long long v139 = v115;
            do
            {
              *(v139 - 2) = *(v137 - 1);
              long long v140 = *v137;
              v137 += 2;
              *(v139 - 1) = v140;
              char *v139 = *(v138 - 1);
              v135 += 4;
              long long v141 = *v138;
              v138 += 2;
              v139[1] = v141;
              long long v139 = (void *)((char *)v139 + v136);
            }
            while (v135 < v205);
          }
        }
        v201 = (_DWORD *)((char *)v201 + v188);
        uint64_t v74 = (_DWORD *)((char *)v74 + v188);
        v72 += 2;
        int v112 = (void *)((char *)v112 + v188);
        int v113 = (void *)((char *)v113 + v188);
        uint64_t v114 = (int *)((char *)v114 + v188);
        uint64_t v115 = (void *)((char *)v115 + v188);
        uint64_t v116 = (void *)((char *)v116 + v188);
        uint64_t v117 = (_DWORD *)((char *)v117 + v188);
        int v110 = v196;
      }
      while (v72 < v196);
    }
    if ((v179 & 1) == 0)
    {
      long long v161 = v180;
      if (v189) {
        long long v161 = 0;
      }
      uint64_t v15 = (Mat *)v203;
      if (v161 && (int)v203 >= 2 && ((unsigned __int16)v207 & 0xFF8) == 8)
      {
        long long v162 = 2;
LABEL_274:
        cv::complementComplexOutput((uint64_t)&v207, v15, v162);
        goto LABEL_275;
      }
      goto LABEL_275;
    }
    BOOL v14 = v189;
    if (*((void *)&v209 + 1)) {
      atomic_fetch_add(*((atomic_uint *volatile *)&v209 + 1), 1u);
    }
    int v6 = v177;
    int v19 = (uint64_t)v194;
    uint64_t v27 = v182;
    if (*(void *)&v222[8] && atomic_fetch_add(*(atomic_uint *volatile *)&v222[8], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v221, v15);
    }
    *(void *)v222 = 0;
    memset(&v222[16], 0, 24);
    if ((uint64_t)v221 <= 0)
    {
      *(void *)&v222[8] = 0;
      LODWORD(v221) = v207;
    }
    else
    {
      long long v157 = 0;
      long long v158 = v223;
      do
        v158->i32[v157++] = 0;
      while (v157 < SDWORD1(v221));
      *(void *)&v222[8] = 0;
      LODWORD(v221) = v207;
      if (SDWORD1(v221) > 2) {
        goto LABEL_260;
      }
    }
    int v102 = HIDWORD(v207);
    if (SHIDWORD(v207) <= 2)
    {
LABEL_259:
      DWORD1(v221) = v102;
      *((void *)&v221 + 1) = v208;
      long long v159 = v213;
      long long v160 = v224;
      *(void *)v224 = *(void *)v213;
      *((void *)v160 + 1) = *((void *)v159 + 1);
      goto LABEL_261;
    }
LABEL_260:
    cv::Mat::copySize((cv::Mat *)&v221, (const cv::Mat *)&v207);
LABEL_261:
    *(_OWORD *)v222 = v209;
    *(_OWORD *)&v222[16] = v210;
    uint64_t v17 = *(double *)&v211;
    *(_OWORD *)&v222[32] = v211;
    if (v27) {
      goto LABEL_46;
    }
LABEL_49:
    long long v32 = 0;
    unint64_t v33 = (v6 & 4) == 0;
    uint64_t v34 = (unsigned int *)&v208 + 1;
    if (!v14) {
      uint64_t v34 = (unsigned int *)((unint64_t)&v221 | 0xC);
    }
    int v35 = *v34;
    int v36 = v208;
    if (!v14) {
      int v36 = DWORD2(v221);
    }
    int v37 = v35 == 1;
    if (v33 && v37) {
      uint64_t v29 = v36;
    }
    else {
      uint64_t v29 = v35;
    }
    if (v33 && v37) {
      char v31 = 1;
    }
    else {
      char v31 = DWORD2(v221);
    }
    int v28 = v180 & v29;
  }
  if (v45)
  {
    uint64_t v67 = ((unint64_t)&v200[(int)v49 + 3] + 3) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    int v70 = v174;
    uint64_t v71 = (char)v203;
  }
  else
  {
    uint64_t v68 = ((unint64_t)&v200[(int)v49 + 3] + 3) & 0xFFFFFFFFFFFFFFF0;
    int v70 = v174;
    if ((((unsigned __int16)v207 ^ (unsigned __int16)v221) & 0xFF8) != 0) {
      uint64_t v69 = 0;
    }
    else {
      uint64_t v69 = v174;
    }
    uint64_t v71 = (char)v203;
    if (v28) {
      int v75 = (int)v203 < 2;
    }
    else {
      int v75 = 1;
    }
    int v76 = !v75 && v14 == 0;
    uint64_t v67 = (unint64_t)&v53[v52];
    if (!v76) {
      uint64_t v69 = 0;
    }
  }
  if (v71) {
    unsigned int v77 = v70;
  }
  else {
    unsigned int v77 = v19;
  }
  if ((((unsigned __int16)v207 ^ (unsigned __int16)v221) & 0xFF8) != 0 && v14 == 0) {
    int v79 = v77;
  }
  else {
    int v79 = 0;
  }
  int v80 = v204;
  if (v204 < 2) {
    uint64_t v81 = 1;
  }
  else {
    uint64_t v81 = (v6 >> 2) & 1;
  }
  uint64_t v82 = v181 | v81;
  uint64_t v83 = (v181 | v81) ^ 1;
  int v84 = 1.0;
  if ((v6 & 2) != 0 && v82)
  {
    uint64_t v83 = 0;
    if ((v6 & 4) != 0) {
      double v85 = 1;
    }
    else {
      double v85 = v204;
    }
    int v84 = 1.0 / (double)(v85 * (int)v203);
  }
  uint64_t v183 = v83;
  double v86 = v79 + v203 * v70;
  if ((int)v187 > v204 || (int)v187 < 1) {
    unsigned int v88 = v204;
  }
  else {
    unsigned int v88 = v187;
  }
  unint64_t v187 = (Mat *)v88;
  if ((int)v88 < 1)
  {
    uint64_t v96 = 0;
  }
  else
  {
    double v89 = 0;
    double v90 = v14 | (((((unsigned __int16)v207 ^ (unsigned __int16)v221) & 0xFF8) != 0) << 9);
    uint64_t v91 = cv::dft(cv::_InputArray const&,cv::_OutputArray const&,int,int)::dft_tbl[v173];
    v202 = v86;
    uint64_t v92 = v86;
    unsigned int v93 = v69;
    do
    {
      uint64_t v94 = (char *)(v209 + (void)v214 * (void)v89);
      if (v68) {
        uint64_t v95 = (char *)v68;
      }
      else {
        uint64_t v95 = (char *)(v209 + (void)v214 * (void)v89);
      }
      ((void (*)(uint64_t, char *, cv *, void, unsigned int *, int *, _OWORD *, cv *, double, void, unint64_t, int))v91)(*(void *)v222 + (uint64_t)v225[0] * (void)v89, v95, v203, v199, v234, v200, v198, v203, v84, 0, v67, v90);
      if (v95 != v94) {
        memcpy(v94, &v95[v93], v92);
      }
      double v89 = (Mat *)((char *)v89 + 1);
    }
    while (v187 != v89);
    uint64_t v96 = (int)v187;
    int v6 = v177;
    BOOL v14 = v189;
    int v19 = (uint64_t)v194;
    int v80 = v204;
    double v86 = v202;
  }
  if (v96 < v80)
  {
    uint64_t v97 = v86;
    int v98 = v96;
    unsigned int v99 = v80;
    do
      bzero((void *)(v209 + (void)v214 * v98++), v97);
    while (v99 != v98);
  }
  if (!v82)
  {
    if (*((void *)&v209 + 1)) {
      atomic_fetch_add(*((atomic_uint *volatile *)&v209 + 1), 1u);
    }
    uint64_t v27 = v183;
    if (*(void *)&v222[8] && atomic_fetch_add(*(atomic_uint *volatile *)&v222[8], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v221, v15);
    }
    *(void *)v222 = 0;
    memset(&v222[16], 0, 24);
    if ((uint64_t)v221 <= 0)
    {
      *(void *)&v222[8] = 0;
      LODWORD(v221) = v207;
    }
    else
    {
      uint64_t v100 = 0;
      int v101 = v223;
      do
        v101->i32[v100++] = 0;
      while (v100 < SDWORD1(v221));
      *(void *)&v222[8] = 0;
      LODWORD(v221) = v207;
      if (SDWORD1(v221) > 2) {
        goto LABEL_260;
      }
    }
    int v102 = HIDWORD(v207);
    if (SHIDWORD(v207) <= 2) {
      goto LABEL_259;
    }
    goto LABEL_260;
  }
  long long v163 = v180;
  if (v14) {
    long long v163 = 0;
  }
  if (v163 && ((unsigned __int16)v207 & 0xFF8) == 8)
  {
    uint64_t v15 = v187;
    long long v162 = 1;
    goto LABEL_274;
  }
LABEL_275:
  if (*((void *)&v209 + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v209 + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v207, v15);
  }
  *(void *)&v209 = 0;
  *(void *)&v211 = 0;
  v210 = 0uLL;
  if (SHIDWORD(v207) >= 1)
  {
    long long v164 = 0;
    long long v165 = v212;
    do
      *(_DWORD *)(v165 + 4 * v164++) = 0;
    while (v164 < SHIDWORD(v207));
  }
  *((void *)&v209 + 1) = 0;
  if (v213 != (cv *)&v214) {
    cv::fastFree((void **)v213, v15);
  }
  if (*(void *)&v222[8] && atomic_fetch_add(*(atomic_uint *volatile *)&v222[8], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v221, v15);
  }
  *(void *)v222 = 0;
  memset(&v222[16], 0, 24);
  if (SDWORD1(v221) >= 1)
  {
    long long v166 = 0;
    v167 = v223;
    do
      v167->i32[v166++] = 0;
    while (v166 < SDWORD1(v221));
  }
  *(void *)&v222[8] = 0;
  if (v224 != (cv *)v225) {
    cv::fastFree((void **)v224, v15);
  }
  if ((void)v228 && atomic_fetch_add((atomic_uint *volatile)v228, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v226, v15);
  }
  v227 = 0;
  v229 = 0uLL;
  *((void *)&v228 + 1) = 0;
  if (SDWORD1(v226) >= 1)
  {
    uint64_t v168 = 0;
    unint64_t v169 = v231;
    do
      *(_DWORD *)(v169 + 4 * v168++) = 0;
    while (v168 < SDWORD1(v226));
  }
  *(void *)&v228 = 0;
  if (v232 != (cv *)&v233) {
    cv::fastFree((void **)v232, v15);
  }
  uint64_t result = *(void *)v235;
  if (*(void **)v235 != v237 && *(void *)v235 != 0) {
    return MEMORY[0x22A641760]();
  }
  return result;
}

void sub_225EB4F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  cv::Exception::~Exception((cv::Exception *)&STACK[0x218]);
  if (a73 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  cv::Mat::~Mat((cv::Mat *)&STACK[0x290], v74);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x2F0], v75);
  if (STACK[0x3E0] != a24 && STACK[0x3E0] != 0) {
    MEMORY[0x22A641760]();
  }
  _Unwind_Resume(a1);
}

uint64_t cv::DFT_32f(uint64_t a1, float32x2_t *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, uint64_t a10, float32x2_t *a11, __int16 a12)
{
  return cv::DFT<float>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12);
}

float *cv::RealDFT_32f(float *a1, float32x2_t *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, uint64_t a10, float32x2_t *a11, unsigned int a12)
{
  return cv::RealDFT<float>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12);
}

float32x2_t *cv::CCSIDFT_32f(float32x2_t *a1, float32x2_t *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, uint64_t a10, float32x2_t *a11, __int16 a12)
{
  return cv::CCSIDFT<float>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12);
}

float64_t cv::DFT_64f(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, float64_t a9, uint64_t a10, float64x2_t *a11, __int16 a12)
{
  return cv::DFT<double>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12);
}

void cv::RealDFT_64f(double *a1, uint64_t a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, uint64_t a10, float64x2_t *a11, unsigned int a12)
{
}

void cv::CCSIDFT_64f(double *a1, double *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, float64_t a9, uint64_t a10, float64x2_t *a11, __int16 a12)
{
}

uint64_t cv::DFTFactorize(cv *this, unsigned int *a2, int *a3)
{
  signed int v3 = (int)this;
  if ((int)this <= 5)
  {
    *a2 = this;
    return 1;
  }
  unsigned int v5 = (this - 1) ^ this;
  if (v5 == 1)
  {
    uint64_t result = 0;
LABEL_8:
    int v7 = 3;
    while (1)
    {
      if (v3 / v7 * v7 == v3)
      {
        a2[(int)result] = v7;
        uint64_t result = (result + 1);
        v3 /= v7;
      }
      else
      {
        v7 += 2;
        if (v7 * v7 > v3)
        {
          a2[(int)result] = v3;
          uint64_t result = (result + 1);
          goto LABEL_15;
        }
      }
      if (v3 <= 1) {
        goto LABEL_15;
      }
    }
  }
  unsigned int v6 = (v5 + 1) >> 1;
  *a2 = v6;
  if (v6 == this)
  {
    uint64_t result = 1;
  }
  else
  {
    signed int v3 = this / v6;
    uint64_t result = 1;
    if (v3 >= 2) {
      goto LABEL_8;
    }
  }
LABEL_15:
  int v8 = !(*(unsigned char *)a2 & 1);
  int v9 = v8 + result + (v8 + (int)result < 0);
  if (v8 < (v8 + (int)result) / 2)
  {
    BOOL v10 = (*a2 & 1) == 0;
    int v11 = ~v10 + result + v8;
    int v12 = &a2[v10];
    uint64_t v13 = (v9 >> 1) - v10;
    do
    {
      unsigned int v14 = *v12;
      *v12++ = a2[v11];
      a2[v11--] = v14;
      --v13;
    }
    while (v13);
  }
  return result;
}

double cv::DFTInit(cv *this, int a2, signed int *a3, int *a4, int *a5, _OWORD *a6, void *a7, double result)
{
  int v9 = (int)a5;
  int v11 = (int)this;
  v90[16] = *MEMORY[0x263EF8340];
  if ((int)this > 5)
  {
    if (a2 >= 34) {
      cv::DFTInit();
    }
    int v15 = (int)a7;
    int v83 = (int)a5;
    unint64_t v17 = *a3;
    v84[a2] = 1;
    *(&v88 + a2) = 0;
    if (a2 >= 1)
    {
      uint64_t v18 = a2;
      bzero(&v88, 4 * a2);
      int v19 = v84[a2];
      uint64_t v20 = 4 * a2 - 4;
      uint64_t v21 = (_DWORD *)((char *)v84 + v20);
      uint64_t v22 = (signed int *)((char *)a3 + v20);
      do
      {
        int v23 = *v22--;
        v19 *= v23;
        *v21-- = v19;
        --v18;
      }
      while (v18);
    }
    unint64_t v24 = a4;
    if (v15)
    {
      if (v17 == a3[a2 - 1]) {
        unint64_t v24 = a4;
      }
      else {
        unint64_t v24 = (int *)a6;
      }
    }
    if (v17)
    {
      int v30 = 0;
      *unint64_t v24 = 0;
      int v31 = v85;
      uint64_t v32 = 1;
      int v9 = v83;
      do
      {
        v30 += v31;
        if (++v88 >= *a3)
        {
          unint64_t v33 = &v89;
          uint64_t v34 = a3 + 1;
          int v35 = &v86;
          do
          {
            int v30 = *v35 + v30 - *(v35 - 2);
            int v36 = *v33 + 1;
            *(v33 - 1) = 0;
            int *v33 = v36;
            int v37 = *v34++;
            ++v35;
            ++v33;
          }
          while (v36 >= v37);
        }
        v24[v32++] = v30;
      }
      while (v32 != v11);
      int v13 = 0;
    }
    else
    {
      int v25 = 0;
      int v26 = v85;
      int v27 = (v85 * (int)v17) >> 1;
      do
        unsigned int v28 = 1 << v25++;
      while (v28 < v17);
      int v13 = v25 - 1;
      if ((int)v17 > 2)
      {
        int v38 = (v85 * (int)v17) >> 2;
        if (v17 > 0x100)
        {
          uint64_t v45 = 0;
          unint64_t v46 = 0;
          char v47 = 35 - v25;
          do
          {
            unsigned int v48 = (((cv::bitrevTab[v45] << 24) | (cv::bitrevTab[(v46 >> 10)] << 16) | (cv::bitrevTab[(v46 >> 18)] << 8) | cv::bitrevTab[v46 >> 26]) >> v47)
                * v26;
            uint64_t v49 = (unsigned int *)&v24[v46];
            *uint64_t v49 = v48;
            v49[1] = v48 + v27;
            v49[2] = v48 + v38;
            v49[3] = v48 + v27 + v38;
            v46 += 4;
            ++v45;
          }
          while (v46 < v17);
        }
        else if (v17 >= 4)
        {
          unint64_t v39 = 0;
          char v40 = 11 - v25;
          unint64_t v41 = cv::bitrevTab;
          do
          {
            unsigned int v42 = *v41++;
            int v43 = (v42 >> v40) * v26;
            int v44 = &v24[v39];
            *int v44 = v43;
            v44[1] = v43 + v27;
            v44[2] = v43 + v38;
            v44[3] = v43 + v27 + v38;
            v39 += 4;
          }
          while (v39 <= (v17 - 4));
        }
      }
      else
      {
        *unint64_t v24 = 0;
        v24[1] = v27;
      }
      ++v89;
      if (a2 >= 2 && (int)v17 < v11)
      {
        int v50 = v86;
        uint64_t v51 = (int)v17;
        uint64_t v52 = (int)v17;
        int v53 = v86;
        while (1)
        {
          if ((int)v17 >= 1)
          {
            unint64_t v54 = v17;
            long long v55 = v24;
            do
            {
              v55[v51] = *v55 + v53;
              ++v55;
              --v54;
            }
            while (v54);
          }
          v52 += (int)v17;
          if (v52 >= v11) {
            break;
          }
          v53 += v50;
          if (++v89 >= a3[1])
          {
            uint64_t v56 = (int *)v90;
            uint64_t v57 = a3 + 2;
            unint64_t v58 = &v87;
            do
            {
              int v53 = *v58 + v53 - *(v58 - 2);
              int v59 = *v56 + 1;
              *(v56 - 1) = 0;
              *uint64_t v56 = v59;
              int v60 = *v57++;
              ++v58;
              ++v56;
            }
            while (v59 >= v60);
          }
          v51 += (int)v17;
        }
      }
      int v9 = v83;
    }
    if (v24 != a4)
    {
      *a4 = 0;
      uint64_t v61 = v11 & 1;
      do
      {
        size_t v62 = &v24[v61];
        uint64_t v64 = *v62;
        uint64_t v63 = v62[1];
        a4[v64] = v61;
        a4[v63] = v61 + 1;
        v61 += 2;
      }
      while (v61 < v11);
    }
    goto LABEL_51;
  }
  *a4 = 0;
  uint64_t v12 = (this - 1);
  a4[(int)v12] = v12;
  if (this == 4)
  {
    *(void *)(a4 + 1) = 0x100000002;
    int v13 = 2;
LABEL_51:
    if ((v11 & (v11 - 1)) != 0)
    {
      uint64_t result = sin(-6.28318531 / (double)v11);
      double v66 = sqrt(1.0 - result * result);
    }
    else
    {
      uint64_t v65 = (double *)((char *)&cv::DFTTab + 16 * v13);
      double v66 = *v65;
      uint64_t result = -v65[1];
    }
    int v67 = v11 + 2;
    if (v11 >= -1) {
      int v67 = v11 + 1;
    }
    LODWORD(v6_Block_object_dispose(&a9, 8) = v67 >> 1;
    if (v9 == 16)
    {
      *a6 = xmmword_225F2DE10;
      if ((v11 & 1) == 0) {
        a6[(int)v68] = xmmword_225F2DDC0;
      }
      if (v11 >= 3)
      {
        if ((int)v68 <= 2) {
          uint64_t v68 = 2;
        }
        else {
          uint64_t v68 = v68;
        }
        uint64_t v69 = v68 - 1;
        int v70 = (double *)&a6[v11 - 1] + 1;
        uint64_t v71 = (double *)a6 + 3;
        double v72 = v66;
        double v73 = result;
        do
        {
          *(v71 - 1) = v72;
          *uint64_t v71 = v73;
          *(v70 - 1) = v72;
          *int v70 = -v73;
          long double v74 = -(v73 * result);
          double v73 = v66 * v73 + v72 * result;
          double v72 = v74 + v72 * v66;
          v70 -= 2;
          v71 += 2;
          --v69;
        }
        while (v69);
      }
    }
    else
    {
      if (v9 != 8) {
        cv::DFTInit();
      }
      *(void *)a6 = 1065353216;
      if ((v11 & 1) == 0) {
        *((void *)a6 + (int)v6_Block_object_dispose(&a9, 8) = 3212836864;
      }
      if (v11 >= 3)
      {
        if ((int)v68 <= 2) {
          uint64_t v68 = 2;
        }
        else {
          uint64_t v68 = v68;
        }
        uint64_t v75 = v68 - 1;
        int v76 = (float *)a6 + 2 * v11 - 1;
        unsigned int v77 = (float *)a6 + 3;
        double v78 = v66;
        double v79 = result;
        do
        {
          float v80 = v78;
          float v81 = v79;
          *(v77 - 1) = v80;
          *unsigned int v77 = v81;
          *(v76 - 1) = v80;
          *int v76 = -v81;
          long double v82 = -(v79 * result);
          double v79 = v66 * v79 + v78 * result;
          double v78 = v82 + v78 * v66;
          v76 -= 2;
          v77 += 2;
          --v75;
        }
        while (v75);
      }
    }
    return result;
  }
  if ((int)this >= 3)
  {
    uint64_t v29 = 1;
    do
    {
      a4[v29] = v29;
      ++v29;
    }
    while (v12 != v29);
    if (this == 5)
    {
      if (a5 == 16)
      {
        uint64_t result = 1.0;
        *a6 = xmmword_225F2DE10;
      }
      else
      {
        *(void *)&uint64_t result = 1065353216;
        *(void *)a6 = 1065353216;
      }
    }
  }
  return result;
}

uint64_t cv::complementComplexOutput(uint64_t this, Mat *a2, int a3)
{
  int v3 = *(_DWORD *)(this + 12);
  uint64_t v4 = *(void *)(this + 16);
  unint64_t v5 = *(void *)(this + 80);
  if (((0x88442211uLL >> (4 * (*(_DWORD *)this & 7u))) & 0xF) == 4)
  {
    if ((int)a2 >= 1)
    {
      uint64_t v6 = 0;
      unint64_t v7 = v5 >> 2;
      int v8 = v3 + 2;
      if (v3 >= -1) {
        int v8 = v3 + 1;
      }
      int v9 = v8 >> 1;
      if (v9 <= 2) {
        uint64_t v10 = 2;
      }
      else {
        uint64_t v10 = v9;
      }
      uint64_t v11 = v10 - 1;
      do
      {
        BOOL v13 = 2 * v6 == a2 || v6 == 0 || a3 == 1;
        uint64_t v14 = v4 + 4 * v7 * v6;
        uint64_t v15 = v4 + 4 * v7 * (a2 - v6);
        if (v13) {
          uint64_t v15 = v4 + 4 * v7 * v6;
        }
        if (v3 >= 3)
        {
          uint64_t v16 = (float *)(v15 + 12);
          uint64_t v17 = v11;
          LODWORD(this) = 2 * v3 - 1;
          do
          {
            *(float *)(v14 + 4 * ((int)this - 1)) = *(v16 - 1);
            float v18 = *v16;
            v16 += 2;
            *(float *)(v14 + 4 * (int)this) = -v18;
            this = (this - 2);
            --v17;
          }
          while (v17);
        }
        ++v6;
      }
      while (v6 != a2);
    }
  }
  else if ((int)a2 >= 1)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v5 >> 3;
    int v21 = v3 + 2;
    if (v3 >= -1) {
      int v21 = v3 + 1;
    }
    int v22 = v21 >> 1;
    if (v22 <= 2) {
      uint64_t v23 = 2;
    }
    else {
      uint64_t v23 = v22;
    }
    uint64_t v24 = v23 - 1;
    do
    {
      BOOL v26 = 2 * v19 == a2 || v19 == 0 || a3 == 1;
      uint64_t v27 = v4 + 8 * v20 * v19;
      uint64_t v28 = v4 + 8 * v20 * (a2 - v19);
      if (v26) {
        uint64_t v28 = v4 + 8 * v20 * v19;
      }
      if (v3 >= 3)
      {
        uint64_t v29 = (double *)(v28 + 24);
        uint64_t v30 = v24;
        LODWORD(this) = 2 * v3 - 1;
        do
        {
          *(double *)(v27 + 8 * ((int)this - 1)) = *(v29 - 1);
          double v31 = *v29;
          v29 += 2;
          *(double *)(v27 + 8 * (int)this) = -v31;
          this = (this - 2);
          --v30;
        }
        while (v30);
      }
      ++v19;
    }
    while (v19 != a2);
  }
  return this;
}

_DWORD *cv::CopyColumn(_DWORD *this, unint64_t a2, _DWORD *a3, unint64_t a4, int a5, uint64_t a6)
{
  unint64_t v6 = a2 >> 2;
  unint64_t v7 = a4 >> 2;
  if (a6 == 4)
  {
    if (a5 >= 1)
    {
      uint64_t v12 = 4 * v7;
      uint64_t v13 = 4 * v6;
      do
      {
        *a3 = *this;
        a3 = (_DWORD *)((char *)a3 + v12);
        this = (_DWORD *)((char *)this + v13);
        --a5;
      }
      while (a5);
    }
  }
  else if (a6 == 8)
  {
    if (a5 >= 1)
    {
      uint64_t v14 = 4 * v7;
      uint64_t v15 = 4 * v6;
      do
      {
        *(void *)a3 = *(void *)this;
        a3 = (_DWORD *)((char *)a3 + v14);
        this = (_DWORD *)((char *)this + v15);
        --a5;
      }
      while (a5);
    }
  }
  else if (a6 == 16 && a5 >= 1)
  {
    int v8 = a3 + 2;
    uint64_t v9 = 4 * v7;
    uint64_t v10 = this + 2;
    uint64_t v11 = 4 * v6;
    do
    {
      *(v8 - 1) = *(v10 - 1);
      void *v8 = *v10;
      int v8 = (void *)((char *)v8 + v9);
      uint64_t v10 = (void *)((char *)v10 + v11);
      --a5;
    }
    while (a5);
  }
  return this;
}

uint64_t cv::ExpandCCS(uint64_t this, unsigned __int8 *a2, int a3)
{
  uint64_t v3 = (int)a2;
  uint64_t v4 = (int)a2 + 1;
  if (a3 == 4)
  {
    if ((int)a2 >= 3)
    {
      int v5 = 2 * a2 - 1;
      unint64_t v6 = (float *)(this + 8);
      uint64_t v7 = (v4 >> 1) - 1;
      do
      {
        *(float *)(this + 4 * (v5 - 1)) = *(v6 - 1);
        float v8 = *v6;
        v6 += 2;
        *(float *)(this + 4 * v5) = -v8;
        v5 -= 2;
        --v7;
      }
      while (v7);
    }
    if ((a2 & 1) == 0)
    {
      LODWORD(a2) = a2 - 1;
      *(_DWORD *)(this + 4 * v3) = *(_DWORD *)(this + 4 * (v3 - 1));
      *(_DWORD *)(this + 4 * v4) = 0;
    }
    if ((int)a2 >= 2)
    {
      unint64_t v9 = a2;
      do
      {
        *(_DWORD *)(this + 4 * v9) = *(_DWORD *)(this + 4 * (v9 - 1));
        BOOL v10 = v9-- > 2;
      }
      while (v10);
    }
    *(_DWORD *)(this + 4) = 0;
  }
  else
  {
    if ((int)a2 >= 3)
    {
      int v11 = 2 * a2 - 1;
      uint64_t v12 = (double *)(this + 16);
      uint64_t v13 = (v4 >> 1) - 1;
      do
      {
        *(double *)(this + 8 * (v11 - 1)) = *(v12 - 1);
        double v14 = *v12;
        v12 += 2;
        *(double *)(this + 8 * v11) = -v14;
        v11 -= 2;
        --v13;
      }
      while (v13);
    }
    if ((a2 & 1) == 0)
    {
      LODWORD(a2) = a2 - 1;
      *(void *)(this + 8 * v3) = *(void *)(this + 8 * (v3 - 1));
      *(void *)(this + 8 * (int)v4) = 0;
    }
    if ((int)a2 >= 2)
    {
      unint64_t v15 = a2;
      do
      {
        *(void *)(this + 8 * v15) = *(void *)(this + 8 * (v15 - 1));
        BOOL v10 = v15-- > 2;
      }
      while (v10);
    }
    *(void *)(this + _Block_object_dispose(&a9, 8) = 0;
  }
  return this;
}

void cv::mulSpectrums(void (***this)(uint64_t *__return_ptr), const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, char a5)
{
  char v6 = (char)a4;
  (**this)(&v423);
  (**(void (***)(void *__return_ptr, const cv::_InputArray *, uint64_t))a2)(v415, a2, 0xFFFFFFFFLL);
  unint64_t v9 = v423;
  uint64_t v11 = (int)v424;
  uint64_t v10 = (int)v425;
  if ((v423 & 0xFFF) != (v415[0] & 0xFFF) || (v431[1] == v420[1] ? (BOOL v12 = *v431 == *v420) : (BOOL v12 = 0), !v12))
  {
    std::string::basic_string[abi:ne180100]<0>(v401, "type == srcB.type() && srcA.size() == srcB.size()");
    std::string::basic_string[abi:ne180100]<0>(v434, "mulSpectrums");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/dxt.cpp");
    cv::Exception::Exception(v406, 4294967081, v401, v434, __p, 2020);
    cv::error((cv *)v406, v13);
  }
  if (((unsigned __int16)v423 & 0xFFFu) > 0xE || ((1 << v423) & 0x6060) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v401, "type == CV_32FC1 || type == CV_32FC2 || type == CV_64FC1 || type == CV_64FC2");
    std::string::basic_string[abi:ne180100]<0>(v434, "mulSpectrums");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/dxt.cpp");
    cv::Exception::Exception(v406, 4294967081, v401, v434, __p, 2021);
    cv::error((cv *)v406, v17);
  }
  (*(void (**)(const cv::_InputArray *, void, void, uint64_t, uint64_t, void, void))(*(void *)a3 + 136))(a3, v424, v425, v423 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void *__return_ptr, const cv::_InputArray *, uint64_t))a3)(v406, a3, 0xFFFFFFFFLL);
  if (v407 == v416)
  {
    v402 = (char *)v401 + 8;
    v403 = (cv *)v404;
    v404[0] = 0;
    v404[1] = 0;
    LODWORD(v401[0]) = 1124007936;
    memset((char *)v401 + 4, 0, 48);
    v401[3] = 0u;
    cv::_OutputArray::_OutputArray((uint64_t)v434, (cv::Mat *)v401);
    cv::Mat::copyTo((cv::Mat *)v415, (const cv::_OutputArray *)v434);
    if (*((void *)&v401[1] + 1)) {
      atomic_fetch_add(*((atomic_uint *volatile *)&v401[1] + 1), 1u);
    }
    if ((void)v417 && atomic_fetch_add((atomic_uint *volatile)v417, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v415, v14);
    }
    v416 = 0;
    *((void *)&v417 + 1) = 0;
    long long v418 = 0uLL;
    if (v415[0] <= 0)
    {
      *(void *)&long long v417 = 0;
      LODWORD(v415[0]) = v401[0];
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = v420;
      do
        v16[v15++] = 0;
      while (v15 < SHIDWORD(v415[0]));
      *(void *)&long long v417 = 0;
      LODWORD(v415[0]) = v401[0];
      if (SHIDWORD(v415[0]) > 2) {
        goto LABEL_24;
      }
    }
    if (SDWORD1(v401[0]) <= 2)
    {
      HIDWORD(v415[0]) = DWORD1(v401[0]);
      v415[1] = *((void *)&v401[0] + 1);
      float v18 = v403;
      uint64_t v19 = v421;
      *(void *)v421 = *(void *)v403;
      *((void *)v19 + 1) = *((void *)v18 + 1);
      goto LABEL_25;
    }
LABEL_24:
    cv::Mat::copySize((cv::Mat *)v415, (const cv::Mat *)v401);
LABEL_25:
    long long v418 = *(_OWORD *)((char *)&v401[2] + 8);
    long long v417 = *(_OWORD *)((char *)&v401[1] + 8);
    v416 = *(float **)&v401[1];
    uint64_t v419 = *((void *)&v401[3] + 1);
    if (*((void *)&v401[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v401[1] + 1), 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v401, v14);
    }
    *(void *)&v401[1] = 0;
    memset(&v401[2], 0, 24);
    if (SDWORD1(v401[0]) >= 1)
    {
      uint64_t v20 = 0;
      int v21 = v402;
      do
        *(_DWORD *)&v21[4 * v20++] = 0;
      while (v20 < SDWORD1(v401[0]));
    }
    *((void *)&v401[1] + 1) = 0;
    if (v403 != (cv *)v404) {
      cv::fastFree((void **)v403, v14);
    }
  }
  uint64_t v22 = (v9 >> 3) & 0x1FF;
  int v23 = 1;
  if ((v6 & 4) == 0 && v11 != 1)
  {
    if (v10 == 1 && (v423 & 0x4000) != 0 && (v415[0] & 0x4000) != 0) {
      int v23 = (BYTE1(v406[0]) >> 6) & 1;
    }
    else {
      int v23 = 0;
    }
  }
  int v24 = v23 ^ 1 | ((v6 & 4) >> 2);
  uint64_t v25 = v11 - 1;
  BOOL v26 = v24 == 0;
  if (v24) {
    uint64_t v27 = v11;
  }
  else {
    uint64_t v27 = 1;
  }
  if (!v26) {
    uint64_t v25 = 0;
  }
  uint64_t v28 = v25 + v10;
  unint64_t v29 = v22 == 0;
  if (v22) {
    char v30 = 1;
  }
  else {
    char v30 = v23;
  }
  BOOL v31 = (v28 & 1) == 0;
  BOOL v32 = (v28 & 1) == 0 && v22 == 0;
  unint64_t v33 = v28 * (v22 + 1) - v32;
  uint64_t v34 = v426;
  uint64_t v35 = v433;
  int v36 = v416;
  uint64_t v37 = v422;
  uint64_t v38 = (uint64_t)v407;
  uint64_t v39 = v414;
  if ((v9 & 7) == 5)
  {
    if (a5)
    {
      if (v426 != v407)
      {
        if ((v30 & 1) == 0)
        {
          float *v407 = *v426 * *v416;
          unint64_t v40 = v27 - 2;
          if (v27 == 2) {
            goto LABEL_58;
          }
          unint64_t v41 = 1;
          unsigned int v42 = v34;
          int v43 = v36;
          int v44 = (_DWORD *)v38;
          do
          {
            double v45 = *(float *)((char *)v42 + v35);
            unsigned int v42 = (float *)((char *)v42 + 2 * v35);
            double v46 = *v42;
            double v47 = *(float *)((char *)v43 + v37);
            int v43 = (float *)((char *)v43 + 2 * v37);
            double v48 = *v43;
            double v49 = v46 * v48 + v45 * v47;
            double v50 = v46 * v47;
            *(float *)&double v47 = v49;
            *(_DWORD *)((char *)v44 + v39) = LODWORD(v47);
            *(float *)&double v45 = v50 - v45 * v48;
            int v44 = (_DWORD *)((char *)v44 + 2 * v39);
            *int v44 = LODWORD(v45);
            v41 += 2;
          }
          while (v41 <= v40);
          if ((v27 & 1) == 0) {
LABEL_58:
          }
            *(float *)(v38 + v39 * (v27 - 1)) = *(float *)((char *)v34 + v35 * (v27 - 1))
                                              * *(float *)((char *)v36 + v37 * (v27 - 1));
          if ((v28 & 1) == 0)
          {
            uint64_t v51 = &v34[v28];
            float v53 = *(v51 - 1);
            uint64_t v52 = v51 - 1;
            float v54 = v53;
            long long v55 = &v36[v28];
            float v57 = *(v55 - 1);
            uint64_t v56 = v55 - 1;
            unint64_t v58 = (float *)(v38 + 4 * v28);
            *(v58 - 1) = v54 * v57;
            int v59 = v58 - 1;
            if (v27 != 2)
            {
              uint64_t v60 = 2 * v39;
              uint64_t v61 = v39 + v38 - 4;
              uint64_t v62 = (uint64_t)v36 + v37 - 4;
              uint64_t v63 = v38 + 2 * v39 - 4;
              uint64_t v64 = (uint64_t)v36 + 2 * v37 - 4;
              uint64_t v65 = (uint64_t)v34 + 2 * v35 - 4;
              uint64_t v66 = 2 * v37;
              uint64_t v67 = 2 * v35;
              uint64_t v68 = (uint64_t)v34 + v35 - 4;
              unint64_t v69 = 1;
              do
              {
                double v70 = *(float *)(v68 + 4 * v28);
                double v71 = *(float *)(v65 + 4 * v28);
                double v72 = *(float *)(v62 + 4 * v28);
                double v73 = *(float *)(v64 + 4 * v28);
                double v74 = v71 * v73 + v70 * v72;
                double v75 = v71 * v72;
                *(float *)&double v72 = v74;
                *(_DWORD *)(v61 + 4 * v2_Block_object_dispose(&a9, 8) = LODWORD(v72);
                *(float *)&double v70 = v75 - v70 * v73;
                *(_DWORD *)(v63 + 4 * v2_Block_object_dispose(&a9, 8) = LODWORD(v70);
                v69 += 2;
                v61 += v60;
                v62 += v66;
                v63 += v60;
                v64 += v66;
                v65 += v67;
                v68 += v67;
              }
              while (v69 <= v40);
              if (v27)
              {
                BOOL v31 = 1;
LABEL_66:
                if (v22) {
                  int v76 = 0;
                }
                else {
                  int v76 = v23;
                }
                do
                {
                  if (v76)
                  {
                    *(float *)uint64_t v38 = *v34 * *v36;
                    if (v33 > v29)
                    {
                      uint64_t v77 = 4 * v29 + 4;
                      unint64_t v78 = v29;
                      do
                      {
                        double v79 = *(float *)((char *)v34 + v77 - 4);
                        double v80 = *(float *)((char *)v34 + v77);
                        double v81 = *(float *)((char *)v36 + v77 - 4);
                        double v82 = *(float *)((char *)v36 + v77);
                        double v83 = v80 * v82 + v79 * v81;
                        double v84 = v80 * v81 - v79 * v82;
                        *(float *)&double v80 = v83;
                        int v85 = (_DWORD *)(v38 + v77);
                        *(float *)&double v84 = v84;
                        *(v85 - 1) = LODWORD(v80);
                        _DWORD *v85 = LODWORD(v84);
                        v78 += 2;
                        v77 += 8;
                      }
                      while (v78 < v33);
                    }
                    if ((v76 & v31) != 0) {
                      *(float *)(v38 + 4 * v33) = v34[v33] * v36[v33];
                    }
                  }
                  else if (v33 > v29)
                  {
                    uint64_t v86 = 4 * v29 + 4;
                    unint64_t v87 = v29;
                    do
                    {
                      double v88 = *(float *)((char *)v34 + v86 - 4);
                      double v89 = *(float *)((char *)v34 + v86);
                      double v90 = *(float *)((char *)v36 + v86 - 4);
                      double v91 = *(float *)((char *)v36 + v86);
                      double v92 = v89 * v91 + v88 * v90;
                      double v93 = v89 * v90 - v88 * v91;
                      *(float *)&double v89 = v92;
                      uint64_t v94 = (_DWORD *)(v38 + v86);
                      *(float *)&double v93 = v93;
                      *(v94 - 1) = LODWORD(v89);
                      *uint64_t v94 = LODWORD(v93);
                      v87 += 2;
                      v86 += 8;
                    }
                    while (v87 < v33);
                  }
                  uint64_t v34 = (float *)((char *)v34 + v35);
                  int v36 = (float *)((char *)v36 + v37);
                  v38 += v39;
                  --v27;
                }
                while (v27);
                goto LABEL_276;
              }
            }
            *(float *)((char *)v59 + v39 * (v27 - 1)) = *(float *)((char *)v52 + v35 * (v27 - 1))
                                                      * *(float *)((char *)v56 + v37 * (v27 - 1));
          }
        }
        if (!v27) {
          goto LABEL_276;
        }
        goto LABEL_66;
      }
      if ((v30 & 1) == 0)
      {
        float *v426 = *v426 * *v416;
        uint64_t v38 = v27 - 2;
        if (v27 == 2) {
          goto LABEL_170;
        }
        unint64_t v234 = 1;
        v235 = v34;
        v236 = v36;
        do
        {
          double v237 = *(float *)((char *)v235 + v39);
          double v238 = *(float *)((char *)v235 + 2 * v39);
          double v239 = *(float *)((char *)v236 + v37);
          v236 = (float *)((char *)v236 + 2 * v37);
          double v240 = *v236;
          double v241 = v238 * v240 + v237 * v239;
          double v242 = v238 * v239;
          *(float *)&double v239 = v241;
          *(float *)((char *)v235 + v39) = *(float *)&v239;
          *(float *)&double v237 = v242 - v237 * v240;
          *(float *)((char *)v235 + 2 * v39) = *(float *)&v237;
          v234 += 2;
          v235 = (float *)((char *)v235 + 2 * v39);
        }
        while (v234 <= v38);
        if ((v27 & 1) == 0) {
LABEL_170:
        }
          *(float *)((char *)v34 + v39 * (v27 - 1)) = *(float *)((char *)v34 + v39 * (v27 - 1))
                                                    * *(float *)((char *)v36 + v37 * (v27 - 1));
        if ((v28 & 1) == 0)
        {
          v243 = &v36[v28];
          float v245 = *(v243 - 1);
          v244 = v243 - 1;
          float v246 = v245;
          v247 = &v34[v28];
          float v249 = *(v247 - 1);
          v248 = v247 - 1;
          float *v248 = v249 * v246;
          if (v27 != 2)
          {
            unint64_t v250 = 1;
            v251 = v248;
            v252 = v244;
            do
            {
              double v253 = *(float *)((char *)v251 + v39);
              double v254 = *(float *)((char *)v251 + 2 * v39);
              double v255 = *(float *)((char *)v252 + v37);
              v252 = (float *)((char *)v252 + 2 * v37);
              double v256 = *v252;
              double v257 = v254 * v256 + v253 * v255;
              double v258 = v254 * v255;
              *(float *)&double v255 = v257;
              *(float *)((char *)v251 + v39) = *(float *)&v255;
              *(float *)&double v253 = v258 - v253 * v256;
              *(float *)((char *)v251 + 2 * v39) = *(float *)&v253;
              v250 += 2;
              v251 = (float *)((char *)v251 + 2 * v39);
            }
            while (v250 <= v38);
            if (v27)
            {
              BOOL v31 = 1;
LABEL_178:
              if (v22) {
                int v259 = 0;
              }
              else {
                int v259 = v23;
              }
              uint64_t v38 = (uint64_t)v34;
              do
              {
                if (v259)
                {
                  *(float *)uint64_t v38 = *v34 * *v36;
                  if (v33 > v29)
                  {
                    uint64_t v260 = 4 * v29 + 4;
                    unint64_t v261 = v29;
                    do
                    {
                      v262 = (_DWORD *)(v38 + v260);
                      double v263 = *(float *)(v38 + v260 - 4);
                      double v264 = *(float *)(v38 + v260);
                      double v265 = *(float *)((char *)v36 + v260 - 4);
                      double v266 = *(float *)((char *)v36 + v260);
                      double v267 = v264 * v266 + v263 * v265;
                      double v268 = v264 * v265 - v263 * v266;
                      *(float *)&double v264 = v267;
                      *(float *)&double v268 = v268;
                      *(v262 - 1) = LODWORD(v264);
                      _DWORD *v262 = LODWORD(v268);
                      v261 += 2;
                      v260 += 8;
                    }
                    while (v261 < v33);
                  }
                  if ((v259 & v31) != 0) {
                    *(float *)(v38 + 4 * v33) = v34[v33] * v36[v33];
                  }
                }
                else if (v33 > v29)
                {
                  uint64_t v269 = 4 * v29 + 4;
                  unint64_t v270 = v29;
                  do
                  {
                    v271 = (_DWORD *)(v38 + v269);
                    double v272 = *(float *)(v38 + v269 - 4);
                    double v273 = *(float *)(v38 + v269);
                    double v274 = *(float *)((char *)v36 + v269 - 4);
                    double v275 = *(float *)((char *)v36 + v269);
                    double v276 = v273 * v275 + v272 * v274;
                    double v277 = v273 * v274 - v272 * v275;
                    *(float *)&double v273 = v276;
                    *(float *)&double v277 = v277;
                    *(v271 - 1) = LODWORD(v273);
                    _DWORD *v271 = LODWORD(v277);
                    v270 += 2;
                    v269 += 8;
                  }
                  while (v270 < v33);
                }
                uint64_t v34 = (float *)((char *)v34 + v35);
                int v36 = (float *)((char *)v36 + v37);
                v38 += v39;
                --v27;
              }
              while (v27);
              goto LABEL_276;
            }
          }
          uint64_t v38 = v37 * (v27 - 1);
          *(float *)((char *)v248 + v39 * (v27 - 1)) = *(float *)((char *)v248 + v39 * (v27 - 1))
                                                     * *(float *)((char *)v244 + v38);
        }
      }
      if (!v27) {
        goto LABEL_276;
      }
      goto LABEL_178;
    }
    if (v426 != v407)
    {
      if ((v30 & 1) == 0)
      {
        float *v407 = *v426 * *v416;
        unint64_t v142 = v27 - 2;
        if (v27 == 2) {
          goto LABEL_115;
        }
        unint64_t v143 = 1;
        long long v144 = v34;
        long long v145 = v36;
        long long v146 = (_DWORD *)v38;
        do
        {
          double v147 = *(float *)((char *)v144 + v35);
          long long v144 = (float *)((char *)v144 + 2 * v35);
          double v148 = *v144;
          double v149 = *(float *)((char *)v145 + v37);
          long long v145 = (float *)((char *)v145 + 2 * v37);
          double v150 = *v145;
          double v151 = v147 * v149 - v148 * v150;
          double v152 = v148 * v149;
          *(float *)&double v149 = v151;
          *(_DWORD *)((char *)v146 + v39) = LODWORD(v149);
          *(float *)&double v147 = v152 + v147 * v150;
          long long v146 = (_DWORD *)((char *)v146 + 2 * v39);
          _DWORD *v146 = LODWORD(v147);
          v143 += 2;
        }
        while (v143 <= v142);
        if ((v27 & 1) == 0) {
LABEL_115:
        }
          *(float *)(v38 + v39 * (v27 - 1)) = *(float *)((char *)v34 + v35 * (v27 - 1))
                                            * *(float *)((char *)v36 + v37 * (v27 - 1));
        if ((v28 & 1) == 0)
        {
          long long v153 = &v34[v28];
          float v155 = *(v153 - 1);
          long long v154 = v153 - 1;
          float v156 = v155;
          long long v157 = &v36[v28];
          float v159 = *(v157 - 1);
          long long v158 = v157 - 1;
          long long v160 = (float *)(v38 + 4 * v28);
          *(v160 - 1) = v156 * v159;
          long long v161 = v160 - 1;
          if (v27 != 2)
          {
            uint64_t v162 = 2 * v39;
            uint64_t v163 = v39 + v38 - 4;
            uint64_t v164 = (uint64_t)v36 + v37 - 4;
            uint64_t v165 = v38 + 2 * v39 - 4;
            uint64_t v166 = (uint64_t)v36 + 2 * v37 - 4;
            uint64_t v167 = (uint64_t)v34 + 2 * v35 - 4;
            uint64_t v168 = 2 * v37;
            uint64_t v169 = 2 * v35;
            uint64_t v170 = (uint64_t)v34 + v35 - 4;
            unint64_t v171 = 1;
            do
            {
              double v172 = *(float *)(v170 + 4 * v28);
              double v173 = *(float *)(v167 + 4 * v28);
              double v174 = *(float *)(v164 + 4 * v28);
              double v175 = *(float *)(v166 + 4 * v28);
              double v176 = v172 * v174 - v173 * v175;
              double v177 = v173 * v174;
              *(float *)&double v174 = v176;
              *(_DWORD *)(v163 + 4 * v2_Block_object_dispose(&a9, 8) = LODWORD(v174);
              *(float *)&double v172 = v177 + v172 * v175;
              *(_DWORD *)(v165 + 4 * v2_Block_object_dispose(&a9, 8) = LODWORD(v172);
              v171 += 2;
              v163 += v162;
              v164 += v168;
              v165 += v162;
              v166 += v168;
              v167 += v169;
              v170 += v169;
            }
            while (v171 <= v142);
            if (v27)
            {
              BOOL v31 = 1;
LABEL_123:
              if (v22) {
                int v178 = 0;
              }
              else {
                int v178 = v23;
              }
              do
              {
                if (v178)
                {
                  *(float *)uint64_t v38 = *v34 * *v36;
                  if (v33 > v29)
                  {
                    uint64_t v179 = v29;
                    unint64_t v180 = v29;
                    do
                    {
                      v181.f64[0] = -v34[v179 + 1];
                      float64x2_t v182 = vcvtq_f64_f32(*(float32x2_t *)&v36[v179]);
                      v181.f64[1] = v34[v179 + 1];
                      *(float32x2_t *)(v38 + v179 * 4) = vcvt_f32_f64(vmlaq_n_f64(vmulq_f64(v181, (float64x2_t)vextq_s8((int8x16_t)v182, (int8x16_t)v182, 8uLL)), v182, v34[v179]));
                      v180 += 2;
                      v179 += 2;
                    }
                    while (v180 < v33);
                  }
                  if ((v178 & v31) != 0) {
                    *(float *)(v38 + 4 * v33) = v34[v33] * v36[v33];
                  }
                }
                else if (v33 > v29)
                {
                  uint64_t v183 = v29;
                  unint64_t v184 = v29;
                  do
                  {
                    v185.f64[0] = -v34[v183 + 1];
                    float64x2_t v186 = vcvtq_f64_f32(*(float32x2_t *)&v36[v183]);
                    v185.f64[1] = v34[v183 + 1];
                    *(float32x2_t *)(v38 + v183 * 4) = vcvt_f32_f64(vmlaq_n_f64(vmulq_f64(v185, (float64x2_t)vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL)), v186, v34[v183]));
                    v184 += 2;
                    v183 += 2;
                  }
                  while (v184 < v33);
                }
                uint64_t v34 = (float *)((char *)v34 + v35);
                int v36 = (float *)((char *)v36 + v37);
                v38 += v39;
                --v27;
              }
              while (v27);
              goto LABEL_276;
            }
          }
          *(float *)((char *)v161 + v39 * (v27 - 1)) = *(float *)((char *)v154 + v35 * (v27 - 1))
                                                     * *(float *)((char *)v158 + v37 * (v27 - 1));
        }
      }
      if (!v27) {
        goto LABEL_276;
      }
      goto LABEL_123;
    }
    if ((v30 & 1) == 0)
    {
      float *v426 = *v426 * *v416;
      uint64_t v38 = v27 - 2;
      if (v27 == 2) {
        goto LABEL_226;
      }
      unint64_t v316 = 1;
      v317 = v34;
      v318 = v36;
      do
      {
        double v319 = *(float *)((char *)v317 + v39);
        double v320 = *(float *)((char *)v317 + 2 * v39);
        double v321 = *(float *)((char *)v318 + v37);
        v318 = (float *)((char *)v318 + 2 * v37);
        double v322 = *v318;
        double v323 = v319 * v321 - v320 * v322;
        double v324 = v320 * v321;
        *(float *)&double v321 = v323;
        *(float *)((char *)v317 + v39) = *(float *)&v321;
        *(float *)&double v319 = v324 + v319 * v322;
        *(float *)((char *)v317 + 2 * v39) = *(float *)&v319;
        v316 += 2;
        v317 = (float *)((char *)v317 + 2 * v39);
      }
      while (v316 <= v38);
      if ((v27 & 1) == 0) {
LABEL_226:
      }
        *(float *)((char *)v34 + v39 * (v27 - 1)) = *(float *)((char *)v34 + v39 * (v27 - 1))
                                                  * *(float *)((char *)v36 + v37 * (v27 - 1));
      if ((v28 & 1) == 0)
      {
        v325 = &v36[v28];
        float v327 = *(v325 - 1);
        v326 = v325 - 1;
        float v328 = v327;
        v329 = &v34[v28];
        float v331 = *(v329 - 1);
        v330 = v329 - 1;
        float *v330 = v331 * v328;
        if (v27 != 2)
        {
          unint64_t v332 = 1;
          v333 = v330;
          v334 = v326;
          do
          {
            double v335 = *(float *)((char *)v333 + v39);
            double v336 = *(float *)((char *)v333 + 2 * v39);
            double v337 = *(float *)((char *)v334 + v37);
            v334 = (float *)((char *)v334 + 2 * v37);
            double v338 = *v334;
            double v339 = v335 * v337 - v336 * v338;
            double v340 = v336 * v337;
            *(float *)&double v337 = v339;
            *(float *)((char *)v333 + v39) = *(float *)&v337;
            *(float *)&double v335 = v340 + v335 * v338;
            *(float *)((char *)v333 + 2 * v39) = *(float *)&v335;
            v332 += 2;
            v333 = (float *)((char *)v333 + 2 * v39);
          }
          while (v332 <= v38);
          if (v27)
          {
            BOOL v31 = 1;
LABEL_234:
            if (v22) {
              int v341 = 0;
            }
            else {
              int v341 = v23;
            }
            uint64_t v38 = (uint64_t)&v36[v29];
            v342 = v34;
            do
            {
              if (v341)
              {
                float *v342 = *v34 * *v36;
                if (v33 > v29)
                {
                  uint64_t v343 = v29;
                  v344 = (float32x2_t *)v38;
                  unint64_t v345 = v29;
                  do
                  {
                    v346 = &v342[v345];
                    v347.f64[0] = -v346[1];
                    float32x2_t v348 = *v344++;
                    float64x2_t v349 = vcvtq_f64_f32(v348);
                    v347.f64[1] = v346[1];
                    *(float32x2_t *)&v342[v343] = vcvt_f32_f64(vmlaq_n_f64(vmulq_f64(v347, (float64x2_t)vextq_s8((int8x16_t)v349, (int8x16_t)v349, 8uLL)), v349, v342[v343]));
                    v345 += 2;
                    v343 += 2;
                  }
                  while (v345 < v33);
                }
                if ((v341 & v31) != 0) {
                  v342[v33] = v34[v33] * v36[v33];
                }
              }
              else if (v33 > v29)
              {
                uint64_t v350 = v29;
                v351 = (float32x2_t *)v38;
                unint64_t v352 = v29;
                do
                {
                  v353 = &v342[v352];
                  v354.f64[0] = -v353[1];
                  float32x2_t v355 = *v351++;
                  float64x2_t v356 = vcvtq_f64_f32(v355);
                  v354.f64[1] = v353[1];
                  *(float32x2_t *)&v342[v350] = vcvt_f32_f64(vmlaq_n_f64(vmulq_f64(v354, (float64x2_t)vextq_s8((int8x16_t)v356, (int8x16_t)v356, 8uLL)), v356, v342[v350]));
                  v352 += 2;
                  v350 += 2;
                }
                while (v352 < v33);
              }
              uint64_t v34 = (float *)((char *)v34 + v35);
              int v36 = (float *)((char *)v36 + v37);
              v342 = (float *)((char *)v342 + v39);
              v38 += v37;
              --v27;
            }
            while (v27);
            goto LABEL_276;
          }
        }
        uint64_t v38 = v37 * (v27 - 1);
        *(float *)((char *)v330 + v39 * (v27 - 1)) = *(float *)((char *)v330 + v39 * (v27 - 1))
                                                   * *(float *)((char *)v326 + v38);
      }
    }
    if (!v27) {
      goto LABEL_276;
    }
    goto LABEL_234;
  }
  if (a5)
  {
    if (v426 != v407)
    {
      if ((v30 & 1) == 0)
      {
        *(double *)v407 = *(double *)v426 * *(double *)v416;
        unint64_t v95 = v27 - 2;
        if (v27 == 2) {
          goto LABEL_87;
        }
        unint64_t v96 = 1;
        uint64_t v97 = (double *)v34;
        int v98 = (double *)v36;
        unsigned int v99 = (double *)v38;
        do
        {
          double v100 = *(double *)((char *)v97 + v35);
          uint64_t v97 = (double *)((char *)v97 + 2 * v35);
          double v101 = *(double *)((char *)v98 + v37);
          int v98 = (double *)((char *)v98 + 2 * v37);
          double v102 = *v97 * *v98 + v100 * v101;
          double v103 = *v97 * v101 - v100 * *v98;
          *(double *)((char *)v99 + v39) = v102;
          unsigned int v99 = (double *)((char *)v99 + 2 * v39);
          *unsigned int v99 = v103;
          v96 += 2;
        }
        while (v96 <= v95);
        if ((v27 & 1) == 0) {
LABEL_87:
        }
          *(double *)(v38 + v39 * (v27 - 1)) = *(double *)((char *)v34 + v35 * (v27 - 1))
                                             * *(double *)((char *)v36 + v37 * (v27 - 1));
        if ((v28 & 1) == 0)
        {
          int v104 = &v34[2 * v28];
          double v106 = *((double *)v104 - 1);
          int v105 = v104 - 2;
          double v107 = v106;
          float64x2_t v108 = &v36[2 * v28];
          double v110 = *((double *)v108 - 1);
          float64x2_t v109 = v108 - 2;
          uint64_t v111 = (float *)(v38 + 8 * v28);
          *((double *)v111 - 1) = v107 * v110;
          int v112 = v111 - 2;
          if (v27 != 2)
          {
            uint64_t v113 = 2 * v39;
            uint64_t v114 = v39 + v38 - 8;
            uint64_t v115 = (uint64_t)v36 + v37 - 8;
            uint64_t v116 = v38 + 2 * v39 - 8;
            uint64_t v117 = (uint64_t)v36 + 2 * v37 - 8;
            uint64_t v118 = (uint64_t)v34 + 2 * v35 - 8;
            uint64_t v119 = 2 * v37;
            uint64_t v120 = 2 * v35;
            uint64_t v121 = (uint64_t)v34 + v35 - 8;
            unint64_t v122 = 1;
            do
            {
              double v123 = *(double *)(v121 + 8 * v28);
              double v124 = *(double *)(v118 + 8 * v28);
              double v125 = *(double *)(v115 + 8 * v28);
              double v126 = *(double *)(v117 + 8 * v28);
              *(double *)(v114 + 8 * v2_Block_object_dispose(&a9, 8) = v124 * v126 + v123 * v125;
              *(double *)(v116 + 8 * v2_Block_object_dispose(&a9, 8) = v124 * v125 - v123 * v126;
              v122 += 2;
              v114 += v113;
              v115 += v119;
              v116 += v113;
              v117 += v119;
              v118 += v120;
              v121 += v120;
            }
            while (v122 <= v95);
            if (v27)
            {
              BOOL v31 = 1;
LABEL_95:
              if (v22) {
                int v127 = 0;
              }
              else {
                int v127 = v23;
              }
              do
              {
                if (v127)
                {
                  *(double *)uint64_t v38 = *(double *)v34 * *(double *)v36;
                  if (v33 > v29)
                  {
                    uint64_t v128 = 8 * v29 + 8;
                    unint64_t v129 = v29;
                    do
                    {
                      double v130 = *(double *)((char *)v34 + v128 - 8);
                      double v131 = *(double *)((char *)v34 + v128);
                      double v132 = *(double *)((char *)v36 + v128 - 8);
                      double v133 = *(double *)((char *)v36 + v128);
                      v134 = (double *)(v38 + v128);
                      *(v134 - 1) = v131 * v133 + v130 * v132;
                      double *v134 = v131 * v132 - v130 * v133;
                      v129 += 2;
                      v128 += 16;
                    }
                    while (v129 < v33);
                  }
                  if ((v127 & v31) != 0) {
                    *(double *)(v38 + 8 * v33) = *(double *)&v34[2 * v33] * *(double *)&v36[2 * v33];
                  }
                }
                else if (v33 > v29)
                {
                  uint64_t v135 = 8 * v29 + 8;
                  unint64_t v136 = v29;
                  do
                  {
                    double v137 = *(double *)((char *)v34 + v135 - 8);
                    double v138 = *(double *)((char *)v34 + v135);
                    double v139 = *(double *)((char *)v36 + v135 - 8);
                    double v140 = *(double *)((char *)v36 + v135);
                    long long v141 = (double *)(v38 + v135);
                    *(v141 - 1) = v138 * v140 + v137 * v139;
                    *long long v141 = v138 * v139 - v137 * v140;
                    v136 += 2;
                    v135 += 16;
                  }
                  while (v136 < v33);
                }
                uint64_t v34 = (float *)((char *)v34 + v35);
                int v36 = (float *)((char *)v36 + v37);
                v38 += v39;
                --v27;
              }
              while (v27);
              goto LABEL_276;
            }
          }
          *(double *)((char *)v112 + v39 * (v27 - 1)) = *(double *)((char *)v105 + v35 * (v27 - 1))
                                                      * *(double *)((char *)v109 + v37 * (v27 - 1));
        }
      }
      if (!v27) {
        goto LABEL_276;
      }
      goto LABEL_95;
    }
    if ((v30 & 1) == 0)
    {
      *(double *)v426 = *(double *)v426 * *(double *)v416;
      uint64_t v38 = v27 - 2;
      if (v27 == 2) {
        goto LABEL_198;
      }
      unint64_t v278 = 1;
      v279 = v34;
      v280 = (double *)v36;
      do
      {
        double v281 = *(double *)((char *)v279 + v39);
        double v282 = *(double *)((char *)v279 + 2 * v39);
        double v283 = *(double *)((char *)v280 + v37);
        v280 = (double *)((char *)v280 + 2 * v37);
        double v284 = v282 * *v280 + v281 * v283;
        double v285 = v282 * v283 - v281 * *v280;
        *(double *)((char *)v279 + v39) = v284;
        *(double *)((char *)v279 + 2 * v39) = v285;
        v278 += 2;
        v279 = (float *)((char *)v279 + 2 * v39);
      }
      while (v278 <= v38);
      if ((v27 & 1) == 0) {
LABEL_198:
      }
        *(double *)((char *)v34 + v39 * (v27 - 1)) = *(double *)((char *)v34 + v39 * (v27 - 1))
                                                   * *(double *)((char *)v36 + v37 * (v27 - 1));
      if ((v28 & 1) == 0)
      {
        v286 = &v36[2 * v28];
        double v288 = *((double *)v286 - 1);
        v287 = (double *)(v286 - 2);
        double v289 = v288;
        v290 = &v34[2 * v28];
        double v292 = *((double *)v290 - 1);
        v291 = (double *)(v290 - 2);
        double *v291 = v292 * v289;
        if (v27 != 2)
        {
          unint64_t v293 = 1;
          v294 = v291;
          v295 = v287;
          do
          {
            double v296 = *(double *)((char *)v294 + v39);
            double v297 = *(double *)((char *)v294 + 2 * v39);
            double v298 = *(double *)((char *)v295 + v37);
            v295 = (double *)((char *)v295 + 2 * v37);
            double v299 = v297 * *v295 + v296 * v298;
            double v300 = v297 * v298 - v296 * *v295;
            *(double *)((char *)v294 + v39) = v299;
            *(double *)((char *)v294 + 2 * v39) = v300;
            v293 += 2;
            v294 = (double *)((char *)v294 + 2 * v39);
          }
          while (v293 <= v38);
          if (v27)
          {
            BOOL v31 = 1;
LABEL_206:
            if (v22) {
              int v301 = 0;
            }
            else {
              int v301 = v23;
            }
            uint64_t v38 = (uint64_t)v34;
            do
            {
              if (v301)
              {
                *(double *)uint64_t v38 = *(double *)v34 * *(double *)v36;
                if (v33 > v29)
                {
                  uint64_t v302 = 8 * v29 + 8;
                  unint64_t v303 = v29;
                  do
                  {
                    v304 = (double *)(v38 + v302);
                    double v305 = *(double *)(v38 + v302 - 8);
                    double v306 = *(double *)(v38 + v302);
                    double v307 = *(double *)((char *)v36 + v302 - 8);
                    double v308 = *(double *)((char *)v36 + v302);
                    *(v304 - 1) = v306 * v308 + v305 * v307;
                    double *v304 = v306 * v307 - v305 * v308;
                    v303 += 2;
                    v302 += 16;
                  }
                  while (v303 < v33);
                }
                if ((v301 & v31) != 0) {
                  *(double *)(v38 + 8 * v33) = *(double *)&v34[2 * v33] * *(double *)&v36[2 * v33];
                }
              }
              else if (v33 > v29)
              {
                uint64_t v309 = 8 * v29 + 8;
                unint64_t v310 = v29;
                do
                {
                  v311 = (double *)(v38 + v309);
                  double v312 = *(double *)(v38 + v309 - 8);
                  double v313 = *(double *)(v38 + v309);
                  double v314 = *(double *)((char *)v36 + v309 - 8);
                  double v315 = *(double *)((char *)v36 + v309);
                  *(v311 - 1) = v313 * v315 + v312 * v314;
                  double *v311 = v313 * v314 - v312 * v315;
                  v310 += 2;
                  v309 += 16;
                }
                while (v310 < v33);
              }
              uint64_t v34 = (float *)((char *)v34 + v35);
              int v36 = (float *)((char *)v36 + v37);
              v38 += v39;
              --v27;
            }
            while (v27);
            goto LABEL_276;
          }
        }
        uint64_t v38 = v37 * (v27 - 1);
        *(double *)((char *)v291 + v39 * (v27 - 1)) = *(double *)((char *)v291 + v39 * (v27 - 1))
                                                    * *(double *)((char *)v287 + v38);
      }
    }
    if (!v27) {
      goto LABEL_276;
    }
    goto LABEL_206;
  }
  if (v426 != v407)
  {
    if ((v30 & 1) == 0)
    {
      *(double *)v407 = *(double *)v426 * *(double *)v416;
      unint64_t v187 = v27 - 2;
      if (v27 == 2) {
        goto LABEL_143;
      }
      unint64_t v188 = 1;
      unint64_t v189 = (double *)v34;
      unint64_t v190 = (double *)v36;
      unint64_t v191 = (double *)v38;
      do
      {
        double v192 = *(double *)((char *)v189 + v35);
        unint64_t v189 = (double *)((char *)v189 + 2 * v35);
        double v193 = *(double *)((char *)v190 + v37);
        unint64_t v190 = (double *)((char *)v190 + 2 * v37);
        double v194 = v192 * v193 - *v189 * *v190;
        double v195 = *v189 * v193 + v192 * *v190;
        *(double *)((char *)v191 + v39) = v194;
        unint64_t v191 = (double *)((char *)v191 + 2 * v39);
        *unint64_t v191 = v195;
        v188 += 2;
      }
      while (v188 <= v187);
      if ((v27 & 1) == 0) {
LABEL_143:
      }
        *(double *)(v38 + v39 * (v27 - 1)) = *(double *)((char *)v34 + v35 * (v27 - 1))
                                           * *(double *)((char *)v36 + v37 * (v27 - 1));
      if ((v28 & 1) == 0)
      {
        v196 = &v34[2 * v28];
        double v198 = *((double *)v196 - 1);
        int v197 = v196 - 2;
        double v199 = v198;
        v200 = &v36[2 * v28];
        double v202 = *((double *)v200 - 1);
        v201 = v200 - 2;
        v203 = (float *)(v38 + 8 * v28);
        *((double *)v203 - 1) = v199 * v202;
        v204 = v203 - 2;
        if (v27 != 2)
        {
          uint64_t v205 = 2 * v39;
          uint64_t v206 = v39 + v38 - 8;
          uint64_t v207 = (uint64_t)v36 + v37 - 8;
          uint64_t v208 = v38 + 2 * v39 - 8;
          uint64_t v209 = (uint64_t)v36 + 2 * v37 - 8;
          uint64_t v210 = (uint64_t)v34 + 2 * v35 - 8;
          uint64_t v211 = 2 * v37;
          uint64_t v212 = 2 * v35;
          uint64_t v213 = (uint64_t)v34 + v35 - 8;
          unint64_t v214 = 1;
          do
          {
            double v215 = *(double *)(v213 + 8 * v28);
            double v216 = *(double *)(v210 + 8 * v28);
            double v217 = *(double *)(v207 + 8 * v28);
            double v218 = *(double *)(v209 + 8 * v28);
            *(double *)(v206 + 8 * v2_Block_object_dispose(&a9, 8) = v215 * v217 - v216 * v218;
            *(double *)(v208 + 8 * v2_Block_object_dispose(&a9, 8) = v216 * v217 + v215 * v218;
            v214 += 2;
            v206 += v205;
            v207 += v211;
            v208 += v205;
            v209 += v211;
            v210 += v212;
            v213 += v212;
          }
          while (v214 <= v187);
          if (v27)
          {
            BOOL v31 = 1;
LABEL_151:
            if (v22) {
              int v219 = 0;
            }
            else {
              int v219 = v23;
            }
            do
            {
              if (v219)
              {
                *(double *)uint64_t v38 = *(double *)v34 * *(double *)v36;
                if (v33 > v29)
                {
                  uint64_t v220 = 8 * v29 + 8;
                  unint64_t v221 = v29;
                  do
                  {
                    double v222 = *(double *)((char *)v34 + v220 - 8);
                    double v223 = *(double *)((char *)v34 + v220);
                    double v224 = *(double *)((char *)v36 + v220 - 8);
                    double v225 = *(double *)((char *)v36 + v220);
                    v226 = (double *)(v38 + v220);
                    *(v226 - 1) = v222 * v224 - v223 * v225;
                    double *v226 = v223 * v224 + v222 * v225;
                    v221 += 2;
                    v220 += 16;
                  }
                  while (v221 < v33);
                }
                if ((v219 & v31) != 0) {
                  *(double *)(v38 + 8 * v33) = *(double *)&v34[2 * v33] * *(double *)&v36[2 * v33];
                }
              }
              else if (v33 > v29)
              {
                uint64_t v227 = 8 * v29 + 8;
                unint64_t v228 = v29;
                do
                {
                  double v229 = *(double *)((char *)v34 + v227 - 8);
                  double v230 = *(double *)((char *)v34 + v227);
                  double v231 = *(double *)((char *)v36 + v227 - 8);
                  double v232 = *(double *)((char *)v36 + v227);
                  v233 = (double *)(v38 + v227);
                  *(v233 - 1) = v229 * v231 - v230 * v232;
                  double *v233 = v230 * v231 + v229 * v232;
                  v228 += 2;
                  v227 += 16;
                }
                while (v228 < v33);
              }
              uint64_t v34 = (float *)((char *)v34 + v35);
              int v36 = (float *)((char *)v36 + v37);
              v38 += v39;
              --v27;
            }
            while (v27);
            goto LABEL_276;
          }
        }
        *(double *)((char *)v204 + v39 * (v27 - 1)) = *(double *)((char *)v197 + v35 * (v27 - 1))
                                                    * *(double *)((char *)v201 + v37 * (v27 - 1));
      }
    }
    if (!v27) {
      goto LABEL_276;
    }
    goto LABEL_151;
  }
  if (v30) {
    goto LABEL_261;
  }
  *(double *)v426 = *(double *)v426 * *(double *)v416;
  uint64_t v38 = v27 - 2;
  if (v27 == 2) {
    goto LABEL_254;
  }
  unint64_t v357 = 1;
  v358 = v34;
  v359 = (double *)v36;
  do
  {
    double v360 = *(double *)((char *)v358 + v39);
    double v361 = *(double *)((char *)v358 + 2 * v39);
    double v362 = *(double *)((char *)v359 + v37);
    v359 = (double *)((char *)v359 + 2 * v37);
    double v363 = v360 * v362 - v361 * *v359;
    double v364 = v361 * v362 + v360 * *v359;
    *(double *)((char *)v358 + v39) = v363;
    *(double *)((char *)v358 + 2 * v39) = v364;
    v357 += 2;
    v358 = (float *)((char *)v358 + 2 * v39);
  }
  while (v357 <= v38);
  if ((v27 & 1) == 0) {
LABEL_254:
  }
    *(double *)((char *)v34 + v39 * (v27 - 1)) = *(double *)((char *)v34 + v39 * (v27 - 1))
                                               * *(double *)((char *)v36 + v37 * (v27 - 1));
  if (v28) {
    goto LABEL_261;
  }
  v365 = &v36[2 * v28];
  double v367 = *((double *)v365 - 1);
  v366 = (double *)(v365 - 2);
  double v368 = v367;
  v369 = &v34[2 * v28];
  double v371 = *((double *)v369 - 1);
  v370 = (double *)(v369 - 2);
  double *v370 = v371 * v368;
  if (v27 == 2) {
    goto LABEL_260;
  }
  unint64_t v372 = 1;
  v373 = v370;
  v374 = v366;
  do
  {
    double v375 = *(double *)((char *)v373 + v39);
    double v376 = *(double *)((char *)v373 + 2 * v39);
    double v377 = *(double *)((char *)v374 + v37);
    v374 = (double *)((char *)v374 + 2 * v37);
    double v378 = v375 * v377 - v376 * *v374;
    double v379 = v376 * v377 + v375 * *v374;
    *(double *)((char *)v373 + v39) = v378;
    *(double *)((char *)v373 + 2 * v39) = v379;
    v372 += 2;
    v373 = (double *)((char *)v373 + 2 * v39);
  }
  while (v372 <= v38);
  if ((v27 & 1) == 0)
  {
LABEL_260:
    uint64_t v38 = v37 * (v27 - 1);
    *(double *)((char *)v370 + v39 * (v27 - 1)) = *(double *)((char *)v370 + v39 * (v27 - 1))
                                                * *(double *)((char *)v366 + v38);
LABEL_261:
    if (!v27) {
      goto LABEL_276;
    }
    goto LABEL_262;
  }
  BOOL v31 = 1;
LABEL_262:
  if (v22) {
    int v380 = 0;
  }
  else {
    int v380 = v23;
  }
  uint64_t v38 = (uint64_t)v34;
  do
  {
    if (v380)
    {
      *(double *)uint64_t v38 = *(double *)v34 * *(double *)v36;
      if (v33 > v29)
      {
        uint64_t v381 = 8 * v29 + 8;
        unint64_t v382 = v29;
        do
        {
          v383 = (double *)(v38 + v381);
          double v384 = *(double *)(v38 + v381 - 8);
          double v385 = *(double *)(v38 + v381);
          double v386 = *(double *)((char *)v36 + v381 - 8);
          double v387 = *(double *)((char *)v36 + v381);
          *(v383 - 1) = v384 * v386 - v385 * v387;
          double *v383 = v385 * v386 + v384 * v387;
          v382 += 2;
          v381 += 16;
        }
        while (v382 < v33);
      }
      if ((v380 & v31) != 0) {
        *(double *)(v38 + 8 * v33) = *(double *)&v34[2 * v33] * *(double *)&v36[2 * v33];
      }
    }
    else if (v33 > v29)
    {
      uint64_t v388 = 8 * v29 + 8;
      unint64_t v389 = v29;
      do
      {
        v390 = (double *)(v38 + v388);
        double v391 = *(double *)(v38 + v388 - 8);
        double v392 = *(double *)(v38 + v388);
        double v393 = *(double *)((char *)v36 + v388 - 8);
        double v394 = *(double *)((char *)v36 + v388);
        *(v390 - 1) = v391 * v393 - v392 * v394;
        double *v390 = v392 * v393 + v391 * v394;
        v389 += 2;
        v388 += 16;
      }
      while (v389 < v33);
    }
    uint64_t v34 = (float *)((char *)v34 + v35);
    int v36 = (float *)((char *)v36 + v37);
    v38 += v39;
    --v27;
  }
  while (v27);
LABEL_276:
  if (v408 && atomic_fetch_add(v408, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v406, (void *)v38);
  }
  v407 = 0;
  uint64_t v409 = 0;
  uint64_t v410 = 0;
  uint64_t v411 = 0;
  if (SHIDWORD(v406[0]) >= 1)
  {
    uint64_t v395 = 0;
    uint64_t v396 = v412;
    do
      *(_DWORD *)(v396 + 4 * v395++) = 0;
    while (v395 < SHIDWORD(v406[0]));
  }
  v408 = 0;
  if (v413 != (cv *)&v414) {
    cv::fastFree((void **)v413, (void *)v38);
  }
  if ((void)v417 && atomic_fetch_add((atomic_uint *volatile)v417, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v415, (void *)v38);
  }
  v416 = 0;
  *((void *)&v417 + 1) = 0;
  long long v418 = 0uLL;
  if (SHIDWORD(v415[0]) >= 1)
  {
    uint64_t v397 = 0;
    v398 = v420;
    do
      v398[v397++] = 0;
    while (v397 < SHIDWORD(v415[0]));
  }
  *(void *)&long long v417 = 0;
  if (v421 != (cv *)&v422) {
    cv::fastFree((void **)v421, (void *)v38);
  }
  if (v427 && atomic_fetch_add(v427, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v423, (void *)v38);
  }
  v426 = 0;
  uint64_t v428 = 0;
  uint64_t v429 = 0;
  uint64_t v430 = 0;
  if (SHIDWORD(v423) >= 1)
  {
    uint64_t v399 = 0;
    v400 = v431;
    do
      v400[v399++] = 0;
    while (v399 < SHIDWORD(v423));
  }
  v427 = 0;
  if (v432 != (void **)&v433) {
    cv::fastFree(v432, (void *)v38);
  }
}

void sub_225EB74E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  cv::Exception::~Exception((cv::Exception *)&a30);
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v45 - 89) < 0) {
    operator delete(*(void **)(v45 - 112));
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  cv::Mat::~Mat((cv::Mat *)&a45, v47);
  cv::Mat::~Mat((cv::Mat *)(v45 - 208), v48);
  _Unwind_Resume(a1);
}

void sub_225EB75A4()
{
}

uint64_t cv::getOptimalDFTSize(cv *this)
{
  if (this > 0x7EB4959F) {
    return 0xFFFFFFFFLL;
  }
  int v2 = 0;
  int v3 = 1650;
  do
  {
    int v4 = (v3 + v2) >> 1;
    if ((int)cv::optimalDFTSizeTab[v4] >= (int)this) {
      int v3 = (v3 + v2) >> 1;
    }
    else {
      int v2 = v4 + 1;
    }
  }
  while (v2 < v3);
  return cv::optimalDFTSizeTab[v3];
}

uint64_t cv::DFT<float>(uint64_t result, float32x2_t *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, float32x2_t *a10, __int16 a11)
{
  int v15 = a4;
  int v16 = a3;
  uint64_t v17 = a2;
  __int16 v18 = a11;
  if (a8 == a3)
  {
    int v19 = 1;
  }
  else
  {
    if (a8 == 2 * a3) {
      int v19 = 2;
    }
    else {
      int v19 = a8 / a3;
    }
    __int16 v18 = a11;
  }
  if (a2 == (float32x2_t *)result)
  {
    if ((v18 & 0x100) == 0)
    {
      if (*a5 != a5[a4 - 1])
      {
        std::string::basic_string[abi:ne180100]<0>(v348, "factors[0] == factors[nf-1]");
        std::string::basic_string[abi:ne180100]<0>(v347, "DFT");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/dxt.cpp");
        int v21 = (cv *)cv::Exception::Exception(v349, 4294967081, v348, v347, __p, 599);
        cv::error(v21, v22);
      }
      if (a4 == 1)
      {
        if ((a3 & 3) == 0)
        {
          int v23 = a3 >= 0 ? a3 : a3 + 1;
          if (a3 >= 2)
          {
            uint64_t v24 = 0;
            int v25 = v23 >> 1;
            uint64_t v26 = (uint64_t)v23 >> 1;
            uint64_t v27 = &a2[v25];
            uint64_t v28 = (uint64_t)&a2[v26 + 1];
            do
            {
              uint64_t v29 = *a6;
              if (v29 >= v26) {
                cv::DFT<float>();
              }
              char v30 = &a2[v24];
              float32x2_t v31 = v30[1];
              v30[1] = v27[v29];
              v27[v29] = v31;
              if (v24 < v29)
              {
                float32x2_t v32 = a2[v24];
                a2[v24] = a2[v29];
                a2[v29] = v32;
                float32x2_t v33 = *(float32x2_t *)(v28 + 8 * v24);
                int v34 = v29 + 1;
                *(float32x2_t *)(v28 + 8 * v24) = v27[v34];
                v27[v34] = v33;
              }
              v24 += 2;
              a6 += 2 * v19;
            }
            while (v24 < v26);
          }
        }
      }
      else if (a3 >= 1)
      {
        for (uint64_t i = 0; i != a3; ++i)
        {
          uint64_t v54 = *a6;
          if (v54 >= a3) {
            cv::DFT<float>();
          }
          if (i < v54)
          {
            float32x2_t v55 = a2[i];
            a2[i] = a2[v54];
            a2[v54] = v55;
          }
          a6 += v19;
        }
      }
    }
    if (a11)
    {
      if (a3 >= 2)
      {
        unint64_t v56 = 0;
        float v57 = (float *)&a2[1] + 1;
        do
        {
          float v58 = -*v57;
          *(v57 - 2) = -*(v57 - 2);
          *float v57 = v58;
          v57 += 4;
          v56 += 2;
        }
        while (v56 <= (a3 - 2));
      }
      else
      {
        LODWORD(v56) = 0;
      }
      if ((int)v56 < a3) {
        a2[a3 - 1].f32[1] = -a2[a3 - 1].f32[1];
      }
    }
  }
  else
  {
    if ((v18 & 0x100) != 0) {
      cv::DFT<float>();
    }
    int v20 = a3 - 2;
    if (v18)
    {
      int v35 = 0;
      if (a3 >= 2)
      {
        int v36 = a2 + 1;
        do
        {
          uint64_t v37 = *a6;
          unsigned int v38 = a6[v19];
          if (v37 >= a3 || v38 >= a3) {
            cv::DFT<float>();
          }
          a6 += 2 * v19;
          uint64_t v40 = result + 8 * v37;
          float32_t v41 = -*(float *)(v40 + 4);
          v36[-1].i32[0] = *(_DWORD *)v40;
          v36[-1].f32[1] = v41;
          uint64_t v42 = result + 8 * (int)v38;
          float32_t v43 = -*(float *)(v42 + 4);
          v36->i32[0] = *(_DWORD *)v42;
          v36->f32[1] = v43;
          v36 += 2;
          v35 += 2;
        }
        while (v20 >= v35);
      }
      if (v35 < a3)
      {
        uint64_t v44 = result + 8 * a3;
        __int32 v45 = *(_DWORD *)(v44 - 8);
        float32_t v46 = -*(float *)(v44 - 4);
        double v47 = &a2[v35];
        v47->i32[0] = v45;
        v47->f32[1] = v46;
      }
    }
    else
    {
      if (a3 < 2)
      {
        LODWORD(v4_Block_object_dispose(&a9, 8) = 0;
      }
      else
      {
        uint64_t v48 = 0;
        do
        {
          uint64_t v49 = *a6;
          unsigned int v50 = a6[v19];
          if (v49 >= a3 || v50 >= a3) {
            cv::DFT<float>();
          }
          a6 += 2 * v19;
          uint64_t v52 = &a2[v48];
          *uint64_t v52 = *(float32x2_t *)(result + 8 * v49);
          v52[1] = *(float32x2_t *)(result + 8 * (int)v50);
          v48 += 2;
        }
        while (v20 >= (int)v48);
      }
      if ((int)v48 < a3) {
        a2[a3 - 1] = *(float32x2_t *)(result + 8 * a3 - 8);
      }
    }
  }
  int v59 = *a5;
  if (*a5)
  {
    int v62 = 1;
    int v327 = a8;
  }
  else
  {
    if (v59 >= 4 && (uint64_t result = cv::checkHardwareSupport((cv *)4), v59 = *a5, *a5 >= 4))
    {
      int v339 = v15;
      uint64_t v63 = v16;
      uint64_t v342 = a7 + 4;
      int v60 = 1;
      int v64 = 4;
      int v61 = a8;
      int v343 = *a5;
      do
      {
        int v65 = v60;
        int v60 = v64;
        v61 /= 4;
        if (v16 >= 1)
        {
          uint64_t v66 = 0;
          uint64_t result = 24 * v61;
          uint64_t v67 = &v17[v65];
          uint64_t v68 = 8 * v60;
          unint64_t v69 = &v17[3 * v65];
          double v70 = v17;
          double v71 = &v17[2 * v65];
          do
          {
            double v72 = (float *)&v17[v66];
            double v73 = &v72[4 * v65];
            float v74 = v73[1];
            double v75 = &v73[2 * v65];
            float v76 = v75[1];
            float v77 = *v73 + *v75;
            float v78 = v74 + v76;
            float v79 = v74 - v76;
            float v80 = *v75 - *v73;
            float v81 = v72[1];
            double v82 = &v72[2 * v65];
            float v83 = v82[1];
            float v84 = *v72 + *v82;
            float v85 = v81 + v83;
            float v86 = *v72 - *v82;
            float v87 = v81 - v83;
            *double v72 = v77 + v84;
            v72[1] = v78 + v85;
            *double v73 = v84 - v77;
            v73[1] = v85 - v78;
            *double v82 = v79 + v86;
            v82[1] = v80 + v87;
            *double v75 = v86 - v79;
            v75[1] = v87 - v80;
            if (v65 >= 2)
            {
              unint64_t v88 = 0;
              int v89 = 2 * v61;
              double v90 = (float *)(v342 + 8 * v61);
              double v91 = (float *)(v342 + 24 * v61);
              do
              {
                double v92 = &v70[v88 / 8];
                double v93 = &v71[v88 / 8];
                uint64_t v94 = &v67[v88 / 8];
                unint64_t v95 = (float *)(a7 + 8 * v89);
                float v96 = v67[v88 / 8 + 1].f32[0];
                float v97 = v67[v88 / 8 + 1].f32[1];
                float v98 = v95[1];
                float v99 = (float)(v96 * *v95) - (float)(v97 * v98);
                float v100 = (float)(*v95 * v97) + (float)(v96 * v98);
                float v101 = *(v90 - 1);
                float v102 = v71[v88 / 8 + 1].f32[0];
                float v103 = v71[v88 / 8 + 1].f32[1];
                float v104 = (float)(v103 * v101) + (float)(v102 * *v90);
                float v105 = (float)(v102 * v101) - (float)(v103 * *v90);
                double v106 = &v69[v88 / 8];
                float v107 = *(v91 - 1);
                float v108 = v69[v88 / 8 + 1].f32[0];
                float v109 = v69[v88 / 8 + 1].f32[1];
                float v110 = (float)(v109 * v107) + (float)(v108 * *v91);
                float v111 = (float)(v108 * v107) - (float)(v109 * *v91);
                float v112 = v105 + v111;
                float v113 = v104 + v110;
                float v114 = v104 - v110;
                float v115 = v111 - v105;
                float v116 = v70[v88 / 8 + 1].f32[0];
                float v117 = v70[v88 / 8 + 1].f32[1];
                float v118 = v99 + v116;
                float v119 = v100 + v117;
                float v120 = v116 - v99;
                float v121 = v117 - v100;
                v92[1].f32[0] = v118 + v112;
                v92[1].f32[1] = v119 + v113;
                v93[1].f32[0] = v118 - v112;
                v93[1].f32[1] = v119 - v113;
                v94[1].f32[0] = v120 + v114;
                v94[1].f32[1] = v115 + v121;
                v106[1].f32[0] = v120 - v114;
                v106[1].f32[1] = v121 - v115;
                double v91 = (float *)((char *)v91 + result);
                v90 += 2 * v61;
                v89 += 2 * v61;
                v88 += 8;
              }
              while (8 * v65 - 8 != v88);
            }
            v66 += v60;
            uint64_t v67 = (float32x2_t *)((char *)v67 + v68);
            unint64_t v69 = (float32x2_t *)((char *)v69 + v68);
            double v71 = (float32x2_t *)((char *)v71 + v68);
            double v70 = (float32x2_t *)((char *)v70 + v68);
            uint64_t v17 = a2;
          }
          while (v66 < v63);
        }
        int v64 = 4 * v60;
        int v59 = v343;
        int v16 = a3;
      }
      while (4 * v60 <= v343);
      int v15 = v339;
    }
    else
    {
      int v60 = 1;
      int v61 = a8;
    }
    while (v60 < v59)
    {
      int v122 = v60;
      v60 *= 2;
      if (v61 >= 0) {
        int v123 = v61;
      }
      else {
        int v123 = v61 + 1;
      }
      int v61 = v123 >> 1;
      if (v16 >= 1)
      {
        uint64_t v124 = 0;
        uint64_t result = 8 * v61;
        uint64_t v125 = 2 * v122;
        double v126 = v17 + 1;
        do
        {
          int v127 = (float *)&v17[v124];
          uint64_t v128 = &v127[2 * v122];
          float v129 = v127[1];
          float v130 = v128[1];
          float v131 = *v127 - *v128;
          float *v127 = *v127 + *v128;
          v127[1] = v129 + v130;
          float *v128 = v131;
          v128[1] = v129 - v130;
          if (v122 >= 2)
          {
            double v132 = (float *)v126;
            uint64_t v133 = v122 - 1;
            v134 = (float *)(a7 + 4 + 8 * v61);
            do
            {
              uint64_t v135 = &v132[v125];
              float v136 = *(v134 - 1);
              float v137 = v132[2 * v122];
              float v138 = v132[v125 + 1];
              float v139 = (float)(v137 * v136) - (float)(v138 * *v134);
              float v140 = (float)(v137 * *v134) + (float)(v138 * v136);
              float v141 = *v132;
              float v142 = v132[1];
              float *v132 = *v132 + v139;
              v132[1] = v142 + v140;
              v132 += 2;
              float *v135 = v141 - v139;
              v135[1] = v142 - v140;
              v134 = (float *)((char *)v134 + result);
              --v133;
            }
            while (v133);
          }
          v124 += v60;
          v126 += v60;
        }
        while (v124 < v16);
      }
    }
    int v327 = v61;
    int v62 = v60;
  }
  v143.f32[0] = a9;
  if (!(v59 & 1) < v15)
  {
    uint64_t v336 = v16;
    uint64_t v144 = (v59 & 1) == 0;
    double v321 = v17 + 1;
    uint64_t v322 = v15;
    double v320 = (char *)v17 + 4;
    do
    {
      uint64_t v325 = v144;
      int v145 = a5[v144];
      int v326 = v145 * v62;
      v327 /= v145;
      if (v145 == 3)
      {
        if (v16 >= 1)
        {
          uint64_t v209 = 0;
          uint64_t v210 = 4 * v62;
          uint64_t result = 8 * v62;
          uint64_t v211 = (float *)v321;
          do
          {
            uint64_t v212 = (float *)&v17[v209];
            uint64_t v213 = &v212[2 * v62];
            unint64_t v214 = &v212[4 * v62];
            float v215 = v213[1];
            float v216 = v214[1];
            float v217 = *v213 + *v214;
            float v218 = v215 + v216;
            float v219 = *v212;
            float v220 = v212[1];
            float v221 = (float)(v215 - v216) * 0.86603;
            float v222 = (float)(*v214 - *v213) * 0.86603;
            *uint64_t v212 = v217 + *v212;
            v212[1] = v218 + v220;
            float v223 = v219 + (float)(v217 * -0.5);
            float v224 = v220 + (float)(v218 * -0.5);
            *uint64_t v213 = v223 + v221;
            v213[1] = v222 + v224;
            *unint64_t v214 = v223 - v221;
            v214[1] = v224 - v222;
            if (v62 >= 2)
            {
              double v225 = v211;
              uint64_t v226 = v62 - 1;
              int v227 = 2 * v327;
              unint64_t v228 = (float *)(a7 + 4 + 8 * v327);
              do
              {
                double v229 = (float *)((char *)v225 + result);
                float v230 = *(v228 - 1);
                float v231 = v225[2 * v62];
                float v232 = *(float *)((char *)v225 + result + 4);
                float v233 = (float)(v231 * v230) - (float)(v232 * *v228);
                float v234 = (float)(v230 * v232) + (float)(v231 * *v228);
                v235 = &v225[v210];
                v236 = (float *)(a7 + 8 * v227);
                float v237 = v225[4 * v62];
                float v238 = v225[v210 + 1];
                float v239 = v236[1];
                float v240 = (float)(v237 * *v236) - (float)(v238 * v239);
                float v241 = (float)(*v236 * v238) + (float)(v237 * v239);
                float v242 = v233 + v240;
                float v243 = v234 + v241;
                float v244 = (float)(v234 - v241) * 0.86603;
                float v245 = (float)(v240 - v233) * 0.86603;
                float v246 = *v225;
                float v247 = v225[1];
                *double v225 = *v225 + v242;
                v225[1] = v247 + v243;
                v225 += 2;
                float v248 = v246 + (float)(v242 * -0.5);
                float v249 = v247 + (float)(v243 * -0.5);
                *double v229 = v244 + v248;
                v229[1] = v249 + v245;
                float *v235 = v248 - v244;
                v235[1] = v249 - v245;
                v228 += 2 * v327;
                v227 += 2 * v327;
                --v226;
              }
              while (v226);
            }
            v209 += v326;
            v211 += 2 * v326;
          }
          while (v209 < v336);
        }
      }
      else if (v145 == 5)
      {
        if (v16 >= 1)
        {
          uint64_t v146 = 0;
          uint64_t v147 = 8 * v62;
          double v148 = &v17[2 * v62];
          uint64_t v340 = 8 * v326;
          uint64_t result = (uint64_t)&v17[4 * v62];
          double v149 = &v17[2 * v62 + v62];
          double v150 = v17;
          double v151 = &v17[v62];
          int v329 = v62;
          do
          {
            uint64_t v344 = v146;
            if (v62 >= 1)
            {
              unint64_t v152 = 0;
              int v153 = 0;
              int v154 = 0;
              float v155 = (float *)(a7 + 4);
              float v156 = (float *)(a7 + 4);
              do
              {
                long long v157 = (float *)&v150[v152 / 8];
                long long v158 = (float *)&v148[v152 / 8];
                float v159 = (float *)(result + v152);
                long long v160 = (float *)&v151[v152 / 8];
                float v161 = *(v156 - 1);
                float v162 = v151[v152 / 8].f32[0];
                float v163 = v151[v152 / 8].f32[1];
                float v164 = (float)(v162 * v161) - (float)(v163 * *v156);
                uint64_t v165 = (float *)(a7 + 8 * v154);
                float v166 = (float)(v161 * v163) + (float)(v162 * *v156);
                float v168 = *(float *)(result + v152);
                float v167 = *(float *)(result + v152 + 4);
                float v169 = v165[1];
                float v170 = (float)(v168 * *v165) - (float)(v167 * v169);
                float v171 = (float)(*v165 * v167) + (float)(v168 * v169);
                float v172 = v164 + v170;
                double v173 = (float *)&v149[v152 / 8];
                float v174 = *(v155 - 1);
                float v175 = v149[v152 / 8].f32[0];
                float v176 = v149[v152 / 8].f32[1];
                float v177 = v166 + v171;
                float v178 = (float)(v175 * v174) - (float)(v176 * *v155);
                float v179 = v164 - v170;
                float v180 = (float)(v174 * v176) + (float)(v175 * *v155);
                float64x2_t v181 = (float *)(a7 + 8 * v153);
                float v182 = v148[v152 / 8].f32[0];
                float v183 = v148[v152 / 8].f32[1];
                float v184 = v166 - v171;
                float v185 = v181[1];
                float v186 = (float)(v182 * *v181) - (float)(v183 * v185);
                float v187 = (float)(*v181 * v183) + (float)(v182 * v185);
                float v188 = v178 + v186;
                float v189 = v180 + v187;
                float v190 = v178 - v186;
                float v191 = v180 - v187;
                float v192 = v150[v152 / 8].f32[0];
                float v193 = v150[v152 / 8].f32[1];
                float v194 = v192 + (float)(v172 + v188);
                float v195 = v193 + (float)(v177 + v189);
                float v196 = v192 + (float)((float)(v172 + v188) * -0.25);
                float v197 = v172 - v188;
                float v198 = v193 + (float)((float)(v177 + v189) * -0.25);
                float v199 = v197 * 0.55902;
                float v200 = (float)(v177 - v189) * 0.55902;
                float v201 = (float)(v184 + v191) * 0.95106;
                float v202 = (float)(v179 + v190) * -0.95106;
                *long long v157 = v194;
                v157[1] = v195;
                float v203 = v201 - (float)(v184 * 0.36327);
                float v204 = (float)(v179 * 0.36327) + v202;
                float v205 = v201 - (float)(v191 * 1.5388);
                float v206 = v202 + (float)(v190 * 1.5388);
                float v207 = v196 + v199;
                float v208 = v196 - v199;
                float *v160 = v205 + v207;
                v160[1] = (float)(v198 + v200) + v206;
                *float v159 = v207 - v205;
                v159[1] = (float)(v198 + v200) - v206;
                float *v158 = v203 + v208;
                v158[1] = (float)(v198 - v200) + v204;
                *double v173 = v208 - v203;
                v173[1] = (float)(v198 - v200) - v204;
                v155 += 6 * v327;
                v156 += 2 * v327;
                v154 += 4 * v327;
                v153 += 2 * v327;
                v152 += 8;
              }
              while (v147 != v152);
            }
            v146 += v326;
            double v148 = (float32x2_t *)((char *)v148 + v340);
            result += v340;
            double v149 = (float32x2_t *)((char *)v149 + v340);
            double v151 = (float32x2_t *)((char *)v151 + v340);
            double v150 = (float32x2_t *)((char *)v150 + v340);
            uint64_t v17 = a2;
            int v62 = v329;
          }
          while (v344 + v326 < v336);
        }
      }
      else
      {
        uint64_t v250 = v145;
        BOOL v251 = __OFSUB__(v145, 1);
        int v252 = v145 - 1;
        int v345 = v250;
        if (v252 < 0 != v251) {
          int v252 = v250;
        }
        if (v16 >= 1)
        {
          uint64_t v253 = (uint64_t)v252 >> 1;
          uint64_t v254 = v62;
          if ((int)v253 <= 1) {
            uint64_t v255 = 1;
          }
          else {
            uint64_t v255 = v253;
          }
          uint64_t v328 = 8 * v326;
          uint64_t v256 = v328 - 8 * v62;
          v334 = (float *)&v320[v256];
          uint64_t v335 = 0;
          uint64_t v341 = (8 * v250 - 8) * v327;
          v333 = (float32x2_t *)((char *)v17 + v256);
          uint64_t v257 = 8 * v62;
          uint64_t v258 = 8 * v327;
          uint64_t v338 = v62;
          uint64_t v259 = -8 * v62;
          float v331 = &v17[(unint64_t)v257 / 8];
          unint64_t v332 = (float *)&v320[v257];
          int v260 = a8 / (int)v250;
          int v330 = v62;
          while (v62 < 1)
          {
LABEL_127:
            v334 = (float *)((char *)v334 + v328);
            v335 += v326;
            unint64_t v332 = (float *)((char *)v332 + v328);
            int v62 = v330;
            float v331 = (float32x2_t *)((char *)v331 + v328);
            v333 = (float32x2_t *)((char *)v333 + v328);
            uint64_t v17 = a2;
            if (v335 >= v336) {
              goto LABEL_128;
            }
          }
          uint64_t v261 = 0;
          uint64_t v262 = 0;
          uint64_t v263 = 0;
          double v264 = v332;
          double v265 = v333;
          double v266 = v331;
          double v267 = (float *)(a7 + 4);
          double v268 = (float *)(a7 + 4);
          uint64_t v269 = v334;
          while (2)
          {
            unint64_t v270 = (float *)&a2[v335 + v263];
            float v271 = *v270;
            float v272 = v270[1];
            if (v263)
            {
              if (v345 >= 3)
              {
                double v273 = v268;
                double v274 = v267;
                uint64_t v275 = v255;
                double v276 = (float *)a10 + 1;
                double v277 = v264;
                unint64_t v278 = v269;
                float v279 = *v270;
                float v280 = v270[1];
                do
                {
                  float v281 = *(v277 - 1);
                  float v282 = *(v273 - 1);
                  float v283 = (float)(v281 * v282) - (float)(*v277 * *v273);
                  float v284 = (float)(v282 * *v277) + (float)(v281 * *v273);
                  float v285 = *(v278 - 1);
                  float v286 = *(v274 - 1);
                  float v287 = (float)(v285 * v286) - (float)(*v278 * *v274);
                  float v288 = (float)(v286 * *v278) + (float)(v285 * *v274);
                  float v289 = v284 - v288;
                  float v290 = v284 + v288;
                  float v279 = v279 + (float)(v283 + v287);
                  float v280 = v280 + v290;
                  *(v276 - 1) = v283 + v287;
                  *double v276 = v289;
                  v291 = &v276[2 * v253];
                  unint64_t v278 = (float *)((char *)v278 + v259);
                  double v277 = (float *)((char *)v277 + v257);
                  *(v291 - 1) = v283 - v287;
                  float *v291 = v290;
                  v276 += 2;
                  double v274 = (float *)((char *)v274 + v262);
                  double v273 = (float *)((char *)v273 + v261);
                  --v275;
                }
                while (v275);
LABEL_118:
                *unint64_t v270 = v279;
                v270[1] = v280;
                LODWORD(result) = 1;
                uint64_t v298 = v254;
                do
                {
                  int v299 = result * v260;
                  uint64_t v300 = v255;
                  int v301 = a10;
                  float v302 = v271;
                  float v303 = v272;
                  float v304 = v271;
                  float v305 = v272;
                  int v306 = result * v260;
                  do
                  {
                    float32x2_t v307 = *(float32x2_t *)(a7 + 8 * v306);
                    float32x2_t v308 = vmul_f32(v307, *v301);
                    float32x2_t v309 = vmul_f32(v307, (float32x2_t)vrev64_s32((int32x2_t)v301[v253]));
                    float v302 = v302 + vaddv_f32(v308);
                    float v304 = v304 + (float)(v308.f32[0] - v308.f32[1]);
                    float v303 = v303 + (float)(v309.f32[0] - v309.f32[1]);
                    float v305 = v305 + vaddv_f32(v309);
                    int v310 = v306 + v299;
                    if (v306 + v299 >= a8) {
                      int v311 = a8;
                    }
                    else {
                      int v311 = 0;
                    }
                    int v306 = v310 - v311;
                    ++v301;
                    --v300;
                  }
                  while (v300);
                  double v312 = &v270[2 * v298];
                  *double v312 = v304;
                  v312[1] = v305;
                  double v313 = &v270[2 * (v326 - v298)];
                  *double v313 = v302;
                  v313[1] = v303;
                  v298 += v254;
                  BOOL v314 = result == v255;
                  uint64_t result = (result + 1);
                }
                while (!v314);
              }
            }
            else if (v345 >= 3)
            {
              double v292 = v265;
              unint64_t v293 = v266;
              uint64_t v294 = v255;
              v295 = a10;
              float v279 = *v270;
              float v280 = v270[1];
              do
              {
                float32x2_t v296 = vadd_f32(*v293, *v292);
                float32x2_t v297 = vsub_f32(*v293, *v292);
                float32x2_t *v295 = (float32x2_t)__PAIR64__(v297.u32[1], v296.u32[0]);
                v297.i32[1] = v296.i32[1];
                v295[v253] = v297;
                float v279 = v279 + v296.f32[0];
                float v280 = v280 + v296.f32[1];
                ++v295;
                unint64_t v293 = (float32x2_t *)((char *)v293 + v257);
                double v292 = (float32x2_t *)((char *)v292 + v259);
                --v294;
              }
              while (v294);
              goto LABEL_118;
            }
            ++v263;
            v269 += 2;
            v264 += 2;
            double v267 = (float *)((char *)v267 + v341);
            v262 -= v258;
            double v268 = (float *)((char *)v268 + v258);
            v261 += v258;
            ++v266;
            ++v265;
            if (v263 == v338) {
              goto LABEL_127;
            }
            continue;
          }
        }
      }
LABEL_128:
      uint64_t v144 = v325 + 1;
      int v62 = v326;
      int v16 = a3;
    }
    while (v325 + 1 != v322);
  }
  if (v143.f32[0] == 1.0)
  {
    if (a11)
    {
      if (v16 >= 2)
      {
        unint64_t v317 = 0;
        v318 = (float *)&v17[1] + 1;
        do
        {
          float v319 = -*v318;
          *(v318 - 2) = -*(v318 - 2);
          float *v318 = v319;
          v318 += 4;
          v317 += 2;
        }
        while (v317 <= (v16 - 2));
      }
      else
      {
        LODWORD(v317) = 0;
      }
      if ((int)v317 < v16) {
        v17[v16 - 1].f32[1] = -v17[v16 - 1].f32[1];
      }
    }
  }
  else if (v16 >= 1)
  {
    float v315 = -v143.f32[0];
    if ((a11 & 1) == 0) {
      float v315 = a9;
    }
    uint64_t v316 = v16;
    v143.f32[1] = v315;
    do
    {
      float32x2_t *v17 = vmul_f32(*v17, v143);
      ++v17;
      --v316;
    }
    while (v316);
  }
  return result;
}

void sub_225EB852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  cv::Exception::~Exception((cv::Exception *)(v51 - 224));
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(a1);
}

float *cv::RealDFT<float>(float *result, float32x2_t *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, float32x2_t *a10, unsigned int a11)
{
  if (a8 != a3) {
    cv::RealDFT<float>();
  }
  BOOL v12 = a2;
  uint64_t v13 = (a11 >> 9) & 1;
  float v14 = a9;
  int v15 = (float *)a2 + v13;
  int v16 = a3 - 1;
  if (a3 == 1)
  {
    float *v15 = *result * v14;
LABEL_6:
    if ((a11 & 0x200) == 0) {
      return result;
    }
    BOOL v19 = (a3 & 1) == 0;
    BOOL v12 = (float32x2_t *)v15;
    goto LABEL_8;
  }
  if (a3 == 2)
  {
    float v17 = result[1];
    float v18 = (float)(*result - v17) * v14;
    float *v15 = (float)(*result + v17) * v14;
    v15[1] = v18;
    goto LABEL_6;
  }
  if ((a3 & 1) == 0)
  {
    int v22 = a3 >> 1;
    int v23 = *a5 >> 1;
    *a5 = v23;
    uint64_t result = (float *)cv::DFT<float>((uint64_t)result, (float32x2_t *)((char *)a2 + 4 * v13), a3 >> 1, a4 - (v23 == 1), &a5[v23 == 1], a6, a7, a3, 1.0, a10, 0);
    *a5 *= 2;
    float v24 = v15[1];
    float v25 = (float)(*v15 - v24) * v14;
    float *v15 = (float)(*v15 + v24) * v14;
    v15[1] = v25;
    float v26 = v15[v22];
    float v27 = v15[v16];
    v15[v16] = v25;
    if (a3 < 6)
    {
      LODWORD(v33) = 2;
    }
    else
    {
      uint64_t v28 = (_DWORD *)v12 + v13;
      float v29 = v14 * 0.5;
      char v30 = (float *)&v28[a3 - 3];
      float32x2_t v31 = (float *)(a7 + 12);
      float32x2_t v32 = (float *)(v28 + 2);
      uint64_t v33 = 2;
      do
      {
        float v34 = v32[1];
        float v35 = v29 * (float)(v27 + v34);
        float v36 = v34 - v27;
        float v27 = *v30;
        float v37 = v30[1];
        float v38 = v29 * (float)(v37 - *v32);
        float v39 = v37 + *v32;
        float v40 = *(v31 - 1);
        float v41 = (float)(v35 * v40) - (float)(v38 * *v31);
        float v42 = v29 * v39;
        float v43 = v29 * v36;
        float v44 = (float)(v40 * v38) + (float)(v35 * *v31);
        *(v32 - 1) = v42 + v41;
        float *v30 = v42 - v41;
        *float32x2_t v32 = v43 + v44;
        v32 += 2;
        v33 += 2;
        v30[1] = v44 - v43;
        v30 -= 2;
        v31 += 2;
      }
      while (v33 < v22);
    }
    if ((int)v33 <= v22)
    {
      uint64_t v49 = &v15[v22];
      *(v49 - 1) = v26 * v14;
      *uint64_t v49 = -(float)(v27 * v14);
    }
    goto LABEL_6;
  }
  a2->f32[0] = *result * v14;
  a2->i32[1] = 0;
  if (a3 >= 2)
  {
    __int32 v45 = a6 + 2;
    float32_t v46 = (float *)&a2[2] + 1;
    for (unint64_t i = 1; i < a3; i += 2)
    {
      float v48 = result[*v45] * v14;
      *(v46 - 3) = result[*(v45 - 1)] * v14;
      *(v46 - 2) = 0.0;
      *(v46 - 1) = v48;
      *float32_t v46 = 0.0;
      v46 += 4;
      v45 += 2;
    }
  }
  uint64_t result = (float *)cv::DFT<float>((uint64_t)a2, a2, a3, a4, a5, a6, a7, a3, 1.0, a10, 256);
  if ((a11 & 0x200) == 0)
  {
    v12->i32[1] = v12->i32[0];
    return result;
  }
  BOOL v19 = 0;
LABEL_8:
  if (a3 == 1 || v19)
  {
    v12[-1].i32[1] = v12->i32[0];
    v12->i32[0] = 0;
    if (a3 >= 2) {
      v12->i32[a3] = 0;
    }
  }
  return result;
}

float32x2_t *cv::CCSIDFT<float>(float32x2_t *result, float32x2_t *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, float32x2_t *a10, __int16 a11)
{
  if (a8 != a3) {
    cv::CCSIDFT<float>();
  }
  uint64_t v13 = a2;
  float v14 = (float *)result;
  __int32 v15 = 0;
  if ((a11 & 0x200) != 0)
  {
    if (result == a2) {
      cv::CCSIDFT<float>();
    }
    float v14 = (float *)result + 1;
    __int32 v15 = result->i32[1];
    result->i32[1] = result->i32[0];
  }
  float v16 = a9;
  if (a3 == 2)
  {
    float v19 = v14[1];
    float v18 = *v14 + v19;
    a2->f32[1] = (float)(*v14 - v19) * v16;
    goto LABEL_9;
  }
  int v17 = a3 - 1;
  if (a3 == 1)
  {
    float v18 = *v14;
LABEL_9:
    a2->f32[0] = v18 * v16;
    goto LABEL_10;
  }
  int v20 = (a3 + 1) >> 1;
  float v73 = a9;
  if (a3)
  {
    a2->f32[0] = *v14;
    a2->i32[1] = 0;
    if (a3 > 2)
    {
      if (v20 <= 2) {
        uint64_t v49 = 2;
      }
      else {
        uint64_t v49 = v20;
      }
      unsigned int v50 = &a6[a3 - 1];
      uint64_t v51 = (float32x2_t *)(v14 + 1);
      uint64_t v52 = a6 + 1;
      uint64_t v53 = v49 - 1;
      do
      {
        uint64_t v55 = *v52++;
        uint64_t v54 = v55;
        uint64_t v57 = *v50--;
        uint64_t v56 = v57;
        float v58 = &a2[v54];
        float32x2_t v59 = *v51++;
        v58->i32[0] = v59.i32[0];
        v58->f32[1] = -v59.f32[1];
        a2[v56] = v59;
        --v53;
      }
      while (v53);
    }
    uint64_t result = (float32x2_t *)cv::DFT<float>((uint64_t)a2, a2, a3, a4, a5, a6, a7, a3, 1.0, a10, 256);
    v13->f32[0] = v13->f32[0] * v73;
    if (a3 >= 2)
    {
      uint64_t v60 = 0;
      int v61 = (float *)&v13[2];
      do
      {
        float v62 = *(v61 - 2) * v73;
        float v63 = *v61;
        v61 += 4;
        uint64_t v64 = (uint64_t)&v13[v60 + 2];
        *(float *)(v64 - 12) = v62;
        *(float *)(v64 - _Block_object_dispose(&a9, 8) = v63 * v73;
        unint64_t v65 = v60 * 2 + 3;
        ++v60;
      }
      while (v65 < a3);
    }
  }
  else
  {
    float v21 = v14[v17];
    float v22 = v14[1];
    float32_t v23 = *v14 + v21;
    float32_t v24 = v21 - *v14;
    a2->f32[0] = v23;
    a2->f32[1] = v24;
    if (a3 < 5)
    {
      LODWORD(v30) = 2;
    }
    else
    {
      unint64_t v25 = 0;
      float v26 = &v14[a3 - 3];
      uint64_t v27 = a7 + 8;
      uint64_t v28 = a6 + 1;
      float v29 = &a6[v20 - 1];
      uint64_t v30 = 2;
      uint64_t v31 = a3;
      do
      {
        float v32 = v26[1];
        float v33 = v22 + *v26;
        float v34 = v22 - *v26;
        float v35 = v14[v25 / 4 + 2];
        float v22 = v14[v25 / 4 + 3];
        float v36 = v35 - v32;
        float v37 = v35 + v32;
        float v38 = *(float *)(v27 + v25);
        float v39 = *(float *)(v27 + v25 + 4);
        float v40 = (float)(v37 * v39) + (float)(v34 * v38);
        float v41 = (float)(v37 * v38) - (float)(v34 * v39);
        float v42 = v33 - v41;
        float v43 = (float)-v36 - v40;
        float v44 = v33 + v41;
        if (v14 == (float *)a2)
        {
          float v48 = &a2[v25 / 8];
          v48[1].f32[0] = v42;
          v48[1].f32[1] = v43;
          a2[-1].f32[v31] = v44;
          uint64_t v47 = v31 - 1;
        }
        else
        {
          __int32 v45 = (float *)a2 + *v28;
          *__int32 v45 = v42;
          v45[1] = v43;
          uint64_t v46 = *v29;
          a2->f32[v46] = v44;
          uint64_t v47 = v46 + 1;
        }
        a2->f32[v47] = v36 - v40;
        v30 += 2;
        v26 -= 2;
        v31 -= 2;
        v25 += 8;
        ++v28;
        --v29;
      }
      while (v30 < v20);
    }
    if ((int)v30 <= v20)
    {
      float v66 = v22 + v22;
      float v67 = v14[v20] + v14[v20];
      if (v14 == (float *)a2)
      {
        a2->f32[v20] = v66;
        int v69 = v20 + 1;
      }
      else
      {
        uint64_t v68 = a6[v20];
        a2[v68].f32[0] = v66;
        int v69 = (2 * v68) | 1;
      }
      a2->f32[v69] = v67;
    }
    int v70 = *a5 >> 1;
    *a5 = v70;
    uint64_t result = (float32x2_t *)cv::DFT<float>((uint64_t)a2, a2, v20, a4 - (v70 == 1), &a5[v70 == 1], a6, a7, a3, 1.0, a10, (v14 != (float *)a2) << 8);
    *a5 *= 2;
    v71.f32[0] = v73;
    if (a3 >= 1)
    {
      unint64_t v72 = 0;
      do
      {
        v71.f32[1] = -v73;
        *uint64_t v13 = vmul_f32(*v13, v71);
        ++v13;
        v72 += 2;
      }
      while (v72 < a3);
    }
  }
LABEL_10:
  if ((a11 & 0x200) != 0) {
    *(_DWORD *)float v14 = v15;
  }
  return result;
}

float64_t cv::DFT<double>(uint64_t a1, uint64_t a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, float64_t a9, float64x2_t *a10, __int16 a11)
{
  v11.f64[0] = a9;
  int v15 = a4;
  int v16 = a3;
  int v17 = (float64x2_t *)a2;
  __int16 v18 = a11;
  if (a8 == a3)
  {
    int v19 = 1;
  }
  else
  {
    if (a8 == 2 * a3) {
      int v19 = 2;
    }
    else {
      int v19 = a8 / a3;
    }
    __int16 v18 = a11;
  }
  if (a2 == a1)
  {
    if ((v18 & 0x100) == 0)
    {
      if (*a5 != a5[a4 - 1])
      {
        std::string::basic_string[abi:ne180100]<0>(v355, "factors[0] == factors[nf-1]");
        std::string::basic_string[abi:ne180100]<0>(v354, "DFT");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/dxt.cpp");
        float v26 = (cv *)cv::Exception::Exception(v356, 4294967081, v355, v354, __p, 599);
        cv::error(v26, v27);
      }
      if (a4 == 1)
      {
        if ((a3 & 3) == 0)
        {
          int v28 = a3 >= 0 ? a3 : a3 + 1;
          if (a3 >= 2)
          {
            uint64_t v29 = 0;
            int v30 = v28 >> 1;
            uint64_t v31 = (uint64_t)v28 >> 1;
            float v32 = (long long *)(a2 + 16);
            uint64_t v33 = a2 + 16 * v30;
            do
            {
              uint64_t v34 = *a6;
              if (v34 >= v31) {
                cv::DFT<float>();
              }
              long long v35 = *v32;
              *float v32 = *(_OWORD *)(v33 + 16 * v34);
              *(_OWORD *)(v33 + 16 * v34) = v35;
              if (v29 < v34)
              {
                long long v36 = *(v32 - 1);
                *(v32 - 1) = *(_OWORD *)(a2 + 16 * v34);
                *(_OWORD *)(a2 + 16 * v34) = v36;
                int v37 = v34 + 1;
                long long v38 = v32[v31];
                v32[v31] = *(_OWORD *)(v33 + 16 * v37);
                *(_OWORD *)(v33 + 16 * v37) = v38;
              }
              v29 += 2;
              v32 += 2;
              a6 += 2 * v19;
            }
            while (v29 < v31);
          }
        }
      }
      else if (a3 >= 1)
      {
        uint64_t v52 = 0;
        uint64_t v53 = (long long *)a2;
        do
        {
          uint64_t v54 = *a6;
          if (v54 >= a3) {
            cv::DFT<float>();
          }
          if (v52 < v54)
          {
            long long v55 = *v53;
            *uint64_t v53 = *(_OWORD *)(a2 + 16 * v54);
            *(_OWORD *)(a2 + 16 * v54) = v55;
          }
          ++v52;
          ++v53;
          a6 += v19;
        }
        while (a3 != v52);
      }
    }
    if (a11)
    {
      if (a3 >= 2)
      {
        unint64_t v56 = 0;
        uint64_t v57 = (double *)(a2 + 24);
        do
        {
          double v58 = -*v57;
          *(v57 - 2) = -*(v57 - 2);
          *uint64_t v57 = v58;
          v57 += 4;
          v56 += 2;
        }
        while (v56 <= (a3 - 2));
      }
      else
      {
        LODWORD(v56) = 0;
      }
      if ((int)v56 < a3) {
        *(double *)(a2 + 16 * a3 - _Block_object_dispose(&a9, 8) = -*(double *)(a2 + 16 * a3 - 8);
      }
    }
  }
  else
  {
    if ((v18 & 0x100) != 0) {
      cv::DFT<float>();
    }
    int v20 = a3 - 2;
    if (v18)
    {
      int v39 = 0;
      if (a3 >= 2)
      {
        uint64_t v40 = a2 + 16;
        do
        {
          uint64_t v41 = *a6;
          unsigned int v42 = a6[v19];
          if (v41 >= a3 || v42 >= a3) {
            cv::DFT<float>();
          }
          a6 += 2 * v19;
          uint64_t v44 = a1 + 16 * v41;
          double v45 = -*(double *)(v44 + 8);
          *(void *)(v40 - 16) = *(void *)v44;
          *(double *)(v40 - _Block_object_dispose(&a9, 8) = v45;
          uint64_t v46 = a1 + 16 * (int)v42;
          double v47 = -*(double *)(v46 + 8);
          *(void *)uint64_t v40 = *(void *)v46;
          *(double *)(v40 + _Block_object_dispose(&a9, 8) = v47;
          v40 += 32;
          v39 += 2;
        }
        while (v20 >= v39);
      }
      if (v39 < a3)
      {
        uint64_t v48 = a1 + 16 * a3;
        uint64_t v49 = *(void *)(v48 - 16);
        double v50 = -*(double *)(v48 - 8);
        uint64_t v51 = a2 + 16 * v39;
        *(void *)uint64_t v51 = v49;
        *(double *)(v51 + _Block_object_dispose(&a9, 8) = v50;
      }
    }
    else
    {
      int v21 = 0;
      if (a3 >= 2)
      {
        float v22 = (_OWORD *)(a2 + 16);
        do
        {
          uint64_t v23 = *a6;
          unsigned int v24 = a6[v19];
          if (v23 >= a3 || v24 >= a3) {
            cv::DFT<float>();
          }
          a6 += 2 * v19;
          *(v22 - 1) = *(_OWORD *)(a1 + 16 * v23);
          *float v22 = *(_OWORD *)(a1 + 16 * (int)v24);
          v22 += 2;
          v21 += 2;
        }
        while (v20 >= v21);
      }
      if (v21 < a3) {
        *(_OWORD *)(a2 + 16 * a3 - 16) = *(_OWORD *)(a1 + 16 * a3 - 16);
      }
    }
  }
  int v59 = *a5;
  if (*a5)
  {
    int v62 = 1;
    int v333 = a8;
  }
  else
  {
    if (v59 < 4)
    {
      int v60 = 1;
      int v61 = a8;
    }
    else
    {
      float64_t v346 = v11.f64[0];
      cv::checkHardwareSupport((cv *)4);
      int v59 = *a5;
      if (*a5 >= 4)
      {
        int v344 = v15;
        uint64_t v63 = v16;
        uint64_t v349 = a7 + 8;
        int v60 = 1;
        int v64 = 4;
        int v61 = a8;
        v11.f64[0] = v346;
        int v350 = *a5;
        do
        {
          int v65 = v60;
          int v60 = v64;
          v61 /= 4;
          if (v16 >= 1)
          {
            uint64_t v66 = 0;
            float v67 = &v17[v65];
            uint64_t v68 = 16 * v60;
            int v69 = &v17[3 * v65];
            int v70 = v17;
            float32x2_t v71 = &v17[2 * v65];
            do
            {
              f64 = v17[v66].f64;
              float v73 = &f64[4 * v65];
              double v74 = v73[1];
              double v75 = &v73[2 * v65];
              double v76 = v75[1];
              double v77 = *v73 + *v75;
              double v78 = v74 + v76;
              double v79 = v74 - v76;
              double v80 = *v75 - *v73;
              double v81 = f64[1];
              double v82 = &f64[2 * v65];
              double v83 = v82[1];
              double v84 = *f64 + *v82;
              double v85 = v81 + v83;
              double v86 = *f64 - *v82;
              double v87 = v81 - v83;
              double *f64 = v77 + v84;
              f64[1] = v78 + v85;
              *float v73 = v84 - v77;
              v73[1] = v85 - v78;
              *double v82 = v79 + v86;
              v82[1] = v80 + v87;
              *double v75 = v86 - v79;
              v75[1] = v87 - v80;
              if (v65 >= 2)
              {
                unint64_t v88 = 0;
                int v89 = 2 * v61;
                double v90 = (double *)(v349 + 16 * v61);
                double v91 = (double *)(v349 + 48 * v61);
                do
                {
                  double v92 = &v70[v88 / 0x10];
                  double v93 = &v71[v88 / 0x10];
                  uint64_t v94 = &v67[v88 / 0x10];
                  unint64_t v95 = (double *)(a7 + 16 * v89);
                  double v96 = v67[v88 / 0x10 + 1].f64[0];
                  double v97 = v67[v88 / 0x10 + 1].f64[1];
                  double v98 = v95[1];
                  double v99 = v96 * *v95 - v97 * v98;
                  double v100 = *v95 * v97 + v96 * v98;
                  double v101 = *(v90 - 1);
                  double v102 = v71[v88 / 0x10 + 1].f64[0];
                  double v103 = v71[v88 / 0x10 + 1].f64[1];
                  double v104 = v103 * v101 + v102 * *v90;
                  double v105 = v102 * v101 - v103 * *v90;
                  double v106 = &v69[v88 / 0x10];
                  double v107 = *(v91 - 1);
                  double v108 = v69[v88 / 0x10 + 1].f64[0];
                  double v109 = v69[v88 / 0x10 + 1].f64[1];
                  double v110 = v109 * v107 + v108 * *v91;
                  double v111 = v108 * v107 - v109 * *v91;
                  double v112 = v105 + v111;
                  double v113 = v104 + v110;
                  double v114 = v104 - v110;
                  double v115 = v111 - v105;
                  double v116 = v70[v88 / 0x10 + 1].f64[0];
                  double v117 = v70[v88 / 0x10 + 1].f64[1];
                  double v118 = v99 + v116;
                  double v119 = v100 + v117;
                  double v120 = v116 - v99;
                  double v121 = v117 - v100;
                  v92[1].f64[0] = v118 + v112;
                  v92[1].f64[1] = v119 + v113;
                  v93[1].f64[0] = v118 - v112;
                  v93[1].f64[1] = v119 - v113;
                  v94[1].f64[0] = v120 + v114;
                  v94[1].f64[1] = v115 + v121;
                  v106[1].f64[0] = v120 - v114;
                  v106[1].f64[1] = v121 - v115;
                  v91 += 6 * v61;
                  v90 += 2 * v61;
                  v89 += 2 * v61;
                  v88 += 16;
                }
                while (16 * v65 - 16 != v88);
              }
              v66 += v60;
              float v67 = (float64x2_t *)((char *)v67 + v68);
              int v69 = (float64x2_t *)((char *)v69 + v68);
              float32x2_t v71 = (float64x2_t *)((char *)v71 + v68);
              int v70 = (float64x2_t *)((char *)v70 + v68);
              int v17 = (float64x2_t *)a2;
            }
            while (v66 < v63);
          }
          int v64 = 4 * v60;
          int v59 = v350;
          int v16 = a3;
        }
        while (4 * v60 <= v350);
        int v15 = v344;
      }
      else
      {
        int v60 = 1;
        int v61 = a8;
        v11.f64[0] = v346;
      }
    }
    while (v60 < v59)
    {
      int v122 = v60;
      v60 *= 2;
      if (v61 >= 0) {
        int v123 = v61;
      }
      else {
        int v123 = v61 + 1;
      }
      int v61 = v123 >> 1;
      if (v16 >= 1)
      {
        uint64_t v124 = 0;
        uint64_t v125 = 2 * v122;
        double v126 = v17 + 1;
        do
        {
          int v127 = v17[v124].f64;
          uint64_t v128 = &v127[2 * v122];
          double v129 = v127[1];
          double v130 = v128[1];
          double v131 = *v127 - *v128;
          double *v127 = *v127 + *v128;
          v127[1] = v129 + v130;
          double *v128 = v131;
          v128[1] = v129 - v130;
          if (v122 >= 2)
          {
            double v132 = (double *)v126;
            uint64_t v133 = v122 - 1;
            v134 = (double *)(a7 + 8 + 16 * v61);
            do
            {
              uint64_t v135 = &v132[v125];
              double v136 = *(v134 - 1);
              double v137 = v132[2 * v122];
              double v138 = v132[v125 + 1];
              double v139 = v137 * v136 - v138 * *v134;
              double v140 = v137 * *v134 + v138 * v136;
              double v141 = *v132;
              double v142 = v132[1];
              double *v132 = *v132 + v139;
              v132[1] = v142 + v140;
              v132 += 2;
              double *v135 = v141 - v139;
              v135[1] = v142 - v140;
              v134 += 2 * v61;
              --v133;
            }
            while (v133);
          }
          v124 += v60;
          v126 += v60;
        }
        while (v124 < v16);
      }
    }
    int v333 = v61;
    int v62 = v60;
  }
  if (!(v59 & 1) < v15)
  {
    uint64_t v342 = v16;
    uint64_t v143 = (v59 & 1) == 0;
    int v327 = v17 + 1;
    uint64_t v328 = v15;
    int v326 = &v17->f64[1];
    do
    {
      uint64_t v331 = v143;
      int v144 = a5[v143];
      int v332 = v144 * v62;
      v333 /= v144;
      if (v144 == 3)
      {
        if (v16 >= 1)
        {
          uint64_t v209 = 0;
          uint64_t v210 = 4 * v62;
          uint64_t v211 = 2 * v62;
          uint64_t v212 = (double *)v327;
          do
          {
            uint64_t v213 = v17[v209].f64;
            unint64_t v214 = &v213[2 * v62];
            float v215 = &v213[4 * v62];
            double v216 = v214[1];
            double v217 = v215[1];
            double v218 = *v214 + *v215;
            double v219 = v216 + v217;
            double v220 = *v213;
            double v221 = v213[1];
            double v222 = (v216 - v217) * 0.866025404;
            double v223 = (*v215 - *v214) * 0.866025404;
            *uint64_t v213 = v218 + *v213;
            v213[1] = v219 + v221;
            double v224 = v220 + v218 * -0.5;
            double v225 = v221 + v219 * -0.5;
            *unint64_t v214 = v224 + v222;
            v214[1] = v223 + v225;
            *float v215 = v224 - v222;
            v215[1] = v225 - v223;
            if (v62 >= 2)
            {
              uint64_t v226 = v212;
              uint64_t v227 = v62 - 1;
              int v228 = 2 * v333;
              double v229 = (double *)(a7 + 8 + 16 * v333);
              do
              {
                float v230 = &v226[v211];
                double v231 = *(v229 - 1);
                double v232 = v226[2 * v62];
                double v233 = v226[v211 + 1];
                double v234 = v232 * v231 - v233 * *v229;
                double v235 = v231 * v233 + v232 * *v229;
                v236 = &v226[v210];
                float v237 = (double *)(a7 + 16 * v228);
                double v238 = v226[4 * v62];
                double v239 = v226[v210 + 1];
                double v240 = v237[1];
                double v241 = v238 * *v237 - v239 * v240;
                double v242 = *v237 * v239 + v238 * v240;
                double v243 = v234 + v241;
                double v244 = v235 + v242;
                double v245 = (v235 - v242) * 0.866025404;
                double v246 = (v241 - v234) * 0.866025404;
                double v247 = *v226;
                double v248 = v226[1];
                double *v226 = *v226 + v243;
                v226[1] = v248 + v244;
                v226 += 2;
                double v249 = v247 + v243 * -0.5;
                double v250 = v248 + v244 * -0.5;
                *float v230 = v245 + v249;
                v230[1] = v250 + v246;
                double *v236 = v249 - v245;
                v236[1] = v250 - v246;
                v229 += 2 * v333;
                v228 += 2 * v333;
                --v227;
              }
              while (v227);
            }
            v209 += v332;
            v212 += 2 * v332;
          }
          while (v209 < v342);
        }
      }
      else if (v144 == 5)
      {
        if (v16 >= 1)
        {
          uint64_t v145 = 0;
          uint64_t v146 = 16 * v62;
          uint64_t v147 = &v17[2 * v62];
          uint64_t v347 = 16 * v332;
          double v148 = &v17[4 * v62];
          double v149 = &v17[2 * v62 + v62];
          double v150 = v17;
          double v151 = &v17[v62];
          int v335 = v62;
          do
          {
            uint64_t v351 = v145;
            if (v62 >= 1)
            {
              unint64_t v152 = 0;
              int v153 = 0;
              int v154 = 0;
              float v155 = (double *)(a7 + 8);
              float v156 = (double *)(a7 + 8);
              do
              {
                long long v157 = v150[v152 / 0x10].f64;
                long long v158 = v147[v152 / 0x10].f64;
                float v159 = v148[v152 / 0x10].f64;
                long long v160 = v151[v152 / 0x10].f64;
                double v161 = *(v156 - 1);
                double v162 = v151[v152 / 0x10].f64[0];
                double v163 = v151[v152 / 0x10].f64[1];
                double v164 = v162 * v161 - v163 * *v156;
                uint64_t v165 = (double *)(a7 + 16 * v154);
                double v166 = v161 * v163 + v162 * *v156;
                double v168 = v148[v152 / 0x10].f64[0];
                double v167 = v148[v152 / 0x10].f64[1];
                double v169 = v165[1];
                double v170 = v168 * *v165 - v167 * v169;
                double v171 = *v165 * v167 + v168 * v169;
                double v172 = v164 + v170;
                double v173 = v149[v152 / 0x10].f64;
                double v174 = *(v155 - 1);
                double v175 = v149[v152 / 0x10].f64[0];
                double v176 = v149[v152 / 0x10].f64[1];
                double v177 = v166 + v171;
                double v178 = v175 * v174 - v176 * *v155;
                double v179 = v164 - v170;
                double v180 = v174 * v176 + v175 * *v155;
                float64x2_t v181 = (double *)(a7 + 16 * v153);
                double v182 = v147[v152 / 0x10].f64[0];
                double v183 = v147[v152 / 0x10].f64[1];
                double v184 = v166 - v171;
                double v185 = v181[1];
                double v186 = v182 * *v181 - v183 * v185;
                double v187 = *v181 * v183 + v182 * v185;
                double v188 = v178 + v186;
                double v189 = v180 + v187;
                double v190 = v178 - v186;
                double v191 = v180 - v187;
                double v192 = v150[v152 / 0x10].f64[0];
                double v193 = v150[v152 / 0x10].f64[1];
                double v194 = v192 + v172 + v188;
                double v195 = v193 + v177 + v189;
                double v196 = v192 + (v172 + v188) * -0.25;
                double v197 = v172 - v188;
                double v198 = v193 + (v177 + v189) * -0.25;
                double v199 = v197 * 0.559016994;
                double v200 = (v177 - v189) * 0.559016994;
                double v201 = (v184 + v191) * 0.951056516;
                double v202 = (v179 + v190) * -0.951056516;
                *long long v157 = v194;
                v157[1] = v195;
                double v203 = v201 - v184 * 0.363271264;
                double v204 = v179 * 0.363271264 + v202;
                double v205 = v201 - v191 * 1.53884177;
                double v206 = v202 + v190 * 1.53884177;
                double v207 = v196 + v199;
                double v208 = v196 - v199;
                double *v160 = v205 + v207;
                v160[1] = v198 + v200 + v206;
                *float v159 = v207 - v205;
                v159[1] = v198 + v200 - v206;
                double *v158 = v203 + v208;
                v158[1] = v198 - v200 + v204;
                *double v173 = v208 - v203;
                v173[1] = v198 - v200 - v204;
                v155 += 6 * v333;
                v156 += 2 * v333;
                v154 += 4 * v333;
                v153 += 2 * v333;
                v152 += 16;
              }
              while (v146 != v152);
            }
            v145 += v332;
            uint64_t v147 = (float64x2_t *)((char *)v147 + v347);
            double v148 = (float64x2_t *)((char *)v148 + v347);
            double v149 = (float64x2_t *)((char *)v149 + v347);
            double v151 = (float64x2_t *)((char *)v151 + v347);
            double v150 = (float64x2_t *)((char *)v150 + v347);
            int v17 = (float64x2_t *)a2;
            int v62 = v335;
          }
          while (v351 + v332 < v342);
        }
      }
      else
      {
        uint64_t v251 = v144;
        BOOL v252 = __OFSUB__(v144, 1);
        int v253 = v144 - 1;
        int v352 = v251;
        if (v253 < 0 != v252) {
          int v253 = v251;
        }
        if (v16 >= 1)
        {
          uint64_t v254 = (uint64_t)v253 >> 1;
          uint64_t v255 = v62;
          if ((int)v254 <= 1) {
            uint64_t v256 = 1;
          }
          else {
            uint64_t v256 = v254;
          }
          uint64_t v334 = 16 * v332;
          uint64_t v257 = v334 - 16 * v62;
          uint64_t v340 = (float64_t *)((char *)v326 + v257);
          uint64_t v341 = 0;
          uint64_t v348 = (16 * v251 - 16) * v333;
          int v339 = (float64x2_t *)((char *)v17 + v257);
          uint64_t v258 = 2 * v62;
          uint64_t v259 = 16 * v333;
          uint64_t v345 = v62;
          uint64_t v260 = -16 * v62;
          double v337 = &v17[(unint64_t)v258 / 2];
          uint64_t v338 = &v326[v258];
          int v261 = a8 / (int)v251;
          int v336 = v62;
          while (v62 < 1)
          {
LABEL_127:
            uint64_t v340 = (double *)((char *)v340 + v334);
            v341 += v332;
            uint64_t v338 = (double *)((char *)v338 + v334);
            int v62 = v336;
            double v337 = (float64x2_t *)((char *)v337 + v334);
            int v339 = (float64x2_t *)((char *)v339 + v334);
            int v17 = (float64x2_t *)a2;
            if (v341 >= v342) {
              goto LABEL_128;
            }
          }
          uint64_t v262 = 0;
          uint64_t v263 = 0;
          uint64_t v264 = 0;
          double v265 = v338;
          double v266 = v339;
          double v267 = v337;
          double v268 = (double *)(a7 + 8);
          uint64_t v269 = (double *)(a7 + 8);
          unint64_t v270 = v340;
          while (2)
          {
            float v271 = (double *)(a2 + 16 * v341 + 16 * v264);
            double v272 = *v271;
            double v273 = v271[1];
            if (v264)
            {
              if (v352 >= 3)
              {
                double v274 = v269;
                uint64_t v275 = v268;
                uint64_t v276 = v256;
                double v277 = &a10->f64[1];
                unint64_t v278 = v265;
                float v279 = v270;
                double v280 = *v271;
                double v281 = v271[1];
                do
                {
                  double v282 = *(v278 - 1);
                  double v283 = *(v274 - 1);
                  double v284 = v282 * v283 - *v278 * *v274;
                  double v285 = v283 * *v278 + v282 * *v274;
                  double v286 = *(v279 - 1);
                  double v287 = *(v275 - 1);
                  double v288 = v286 * v287 - *v279 * *v275;
                  double v289 = v287 * *v279 + v286 * *v275;
                  double v290 = v285 - v289;
                  double v291 = v285 + v289;
                  double v280 = v280 + v284 + v288;
                  double v281 = v281 + v291;
                  *(v277 - 1) = v284 + v288;
                  *double v277 = v290;
                  double v292 = &v277[2 * v254];
                  float v279 = (double *)((char *)v279 + v260);
                  unint64_t v278 = (double *)((char *)v278 + v258 * 8);
                  *(v292 - 1) = v284 - v288;
                  *double v292 = v291;
                  v277 += 2;
                  uint64_t v275 = (double *)((char *)v275 + v263);
                  double v274 = (double *)((char *)v274 + v262);
                  --v276;
                }
                while (v276);
LABEL_118:
                double *v271 = v280;
                v271[1] = v281;
                int v300 = 1;
                uint64_t v301 = v255;
                do
                {
                  int v302 = v300 * v261;
                  uint64_t v303 = v256;
                  float v304 = a10;
                  double v305 = v272;
                  double v306 = v273;
                  double v307 = v272;
                  double v308 = v273;
                  int v309 = v300 * v261;
                  do
                  {
                    float64x2_t v310 = *(float64x2_t *)(a7 + 16 * v309);
                    float64x2_t v311 = vmulq_f64(v310, *v304);
                    float64x2_t v312 = vmulq_f64(v310, (float64x2_t)vextq_s8((int8x16_t)v304[v254], (int8x16_t)v304[v254], 8uLL));
                    double v305 = v305 + vaddvq_f64(v311);
                    double v307 = v307 + v311.f64[0] - v311.f64[1];
                    double v306 = v306 + v312.f64[0] - v312.f64[1];
                    double v308 = v308 + vaddvq_f64(v312);
                    int v313 = v309 + v302;
                    if (v309 + v302 >= a8) {
                      int v314 = a8;
                    }
                    else {
                      int v314 = 0;
                    }
                    int v309 = v313 - v314;
                    ++v304;
                    --v303;
                  }
                  while (v303);
                  float v315 = &v271[2 * v301];
                  *float v315 = v307;
                  v315[1] = v308;
                  uint64_t v316 = &v271[2 * (v332 - v301)];
                  *uint64_t v316 = v305;
                  v316[1] = v306;
                  v301 += v255;
                }
                while (v300++ != v256);
              }
            }
            else if (v352 >= 3)
            {
              unint64_t v293 = v266;
              uint64_t v294 = v267;
              uint64_t v295 = v256;
              float32x2_t v296 = a10;
              double v280 = *v271;
              double v281 = v271[1];
              do
              {
                float64x2_t v297 = vaddq_f64(*v294, *v293);
                float64x2_t v298 = vsubq_f64(*v294, *v293);
                v299.f64[0] = v297.f64[0];
                v299.f64[1] = v298.f64[1];
                *float32x2_t v296 = v299;
                v298.f64[1] = v297.f64[1];
                v296[v254] = v298;
                double v280 = v280 + v297.f64[0];
                double v281 = v281 + v297.f64[1];
                ++v296;
                uint64_t v294 = (float64x2_t *)((char *)v294 + v258 * 8);
                unint64_t v293 = (float64x2_t *)((char *)v293 + v260);
                --v295;
              }
              while (v295);
              goto LABEL_118;
            }
            ++v264;
            v270 += 2;
            v265 += 2;
            double v268 = (double *)((char *)v268 + v348);
            v263 -= v259;
            uint64_t v269 = (double *)((char *)v269 + v259);
            v262 += v259;
            ++v267;
            ++v266;
            if (v264 == v345) {
              goto LABEL_127;
            }
            continue;
          }
        }
      }
LABEL_128:
      uint64_t v143 = v331 + 1;
      int v62 = v332;
      int v16 = a3;
    }
    while (v331 + 1 != v328);
  }
  v318.f64[0] = 1.0;
  if (v11.f64[0] == 1.0)
  {
    if (a11)
    {
      if (v16 >= 2)
      {
        unint64_t v321 = 0;
        uint64_t v322 = &v17[1].f64[1];
        do
        {
          v318.f64[0] = -*(v322 - 2);
          double v323 = -*v322;
          *(v322 - 2) = v318.f64[0];
          *uint64_t v322 = v323;
          v322 += 4;
          v321 += 2;
        }
        while (v321 <= (v16 - 2));
      }
      else
      {
        LODWORD(v321) = 0;
      }
      if ((int)v321 < v16)
      {
        double v324 = &v17[v16];
        v318.f64[0] = -v324[-1].f64[1];
        v324[-1].f64[1] = v318.f64[0];
      }
    }
  }
  else if (v16 >= 1)
  {
    double v319 = -v11.f64[0];
    if ((a11 & 1) == 0) {
      double v319 = v11.f64[0];
    }
    uint64_t v320 = v16;
    v11.f64[1] = v319;
    do
    {
      float64x2_t v318 = vmulq_f64(v11, *v17);
      *v17++ = v318;
      --v320;
    }
    while (v320);
  }
  return v318.f64[0];
}

void sub_225EB9ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  cv::Exception::~Exception((cv::Exception *)(v47 - 208));
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (*(char *)(v47 - 209) < 0) {
    operator delete(*(void **)(v47 - 232));
  }
  _Unwind_Resume(a1);
}

void cv::RealDFT<double>(double *a1, uint64_t a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, double a9, float64x2_t *a10, unsigned int a11)
{
  if (a8 != a3) {
    cv::RealDFT<float>();
  }
  uint64_t v13 = (void *)a2;
  uint64_t v14 = (a11 >> 9) & 1;
  int v15 = (double *)(a2 + 8 * v14);
  int v16 = a3 - 1;
  if (a3 == 1)
  {
    double *v15 = *a1 * a9;
LABEL_6:
    if ((a11 & 0x200) == 0) {
      return;
    }
    BOOL v20 = (a3 & 1) == 0;
    uint64_t v13 = v15;
    goto LABEL_8;
  }
  if (a3 == 2)
  {
    double v17 = a1[1];
    double v18 = (*a1 + v17) * a9;
    double v19 = (*a1 - v17) * a9;
    double *v15 = v18;
    v15[1] = v19;
    goto LABEL_6;
  }
  if ((a3 & 1) == 0)
  {
    int v23 = a3 >> 1;
    int v24 = *a5 >> 1;
    *a5 = v24;
    cv::DFT<double>((uint64_t)a1, a2 + 8 * v14, a3 >> 1, a4 - (v24 == 1), &a5[v24 == 1], a6, a7, a3, 1.0, a10, 0);
    *a5 *= 2;
    double v25 = v15[1];
    double v26 = (*v15 - v25) * a9;
    double *v15 = (*v15 + v25) * a9;
    v15[1] = v26;
    double v27 = v15[v23];
    double v28 = v15[v16];
    v15[v16] = v26;
    if (a3 < 6)
    {
      LODWORD(v34) = 2;
    }
    else
    {
      uint64_t v29 = &v13[v14];
      double v30 = a9 * 0.5;
      uint64_t v31 = (double *)&v29[a3 - 3];
      float v32 = (double *)(a7 + 24);
      uint64_t v33 = (double *)(v29 + 2);
      uint64_t v34 = 2;
      do
      {
        double v35 = v33[1];
        double v36 = v30 * (v28 + v35);
        double v37 = v35 - v28;
        double v28 = *v31;
        double v38 = v31[1];
        double v39 = v30 * (v38 - *v33);
        double v40 = v38 + *v33;
        double v41 = *(v32 - 1);
        double v42 = v36 * v41 - v39 * *v32;
        double v43 = v30 * v40;
        double v44 = v30 * v37;
        double v45 = v41 * v39 + v36 * *v32;
        *(v33 - 1) = v43 + v42;
        *uint64_t v31 = v43 - v42;
        double *v33 = v44 + v45;
        v33 += 2;
        v34 += 2;
        v31[1] = v45 - v44;
        v31 -= 2;
        v32 += 2;
      }
      while (v34 < v23);
    }
    if ((int)v34 <= v23)
    {
      double v50 = &v15[v23];
      *(v50 - 1) = v27 * a9;
      *double v50 = -(v28 * a9);
    }
    goto LABEL_6;
  }
  *(double *)a2 = *a1 * a9;
  *(void *)(a2 + _Block_object_dispose(&a9, 8) = 0;
  if (a3 >= 2)
  {
    uint64_t v46 = a6 + 2;
    uint64_t v47 = (double *)(a2 + 40);
    for (unint64_t i = 1; i < a3; i += 2)
    {
      double v49 = a1[*v46] * a9;
      *(v47 - 3) = a1[*(v46 - 1)] * a9;
      *(v47 - 2) = 0.0;
      *(v47 - 1) = v49;
      *uint64_t v47 = 0.0;
      v47 += 4;
      v46 += 2;
    }
  }
  cv::DFT<double>(a2, a2, a3, a4, a5, a6, a7, a3, 1.0, a10, 256);
  if ((a11 & 0x200) == 0)
  {
    v13[1] = *v13;
    return;
  }
  BOOL v20 = 0;
LABEL_8:
  if (a3 == 1 || v20)
  {
    *(v13 - 1) = *v13;
    *uint64_t v13 = 0;
    if (a3 >= 2) {
      v13[a3] = 0;
    }
  }
}

void cv::CCSIDFT<double>(double *a1, double *a2, int a3, int a4, int *a5, int *a6, uint64_t a7, int a8, float64_t a9, float64x2_t *a10, __int16 a11)
{
  if (a8 != a3) {
    cv::CCSIDFT<float>();
  }
  uint64_t v13 = (float64x2_t *)a2;
  uint64_t v14 = a1;
  uint64_t v15 = 0;
  if ((a11 & 0x200) != 0)
  {
    if (a1 == a2) {
      cv::CCSIDFT<float>();
    }
    uint64_t v14 = a1 + 1;
    uint64_t v15 = *((void *)a1 + 1);
    a1[1] = *a1;
  }
  if (a3 == 2)
  {
    double v18 = v14[1];
    double v17 = *v14 + v18;
    a2[1] = (*v14 - v18) * a9;
    goto LABEL_9;
  }
  int v16 = a3 - 1;
  if (a3 == 1)
  {
    double v17 = *v14;
LABEL_9:
    *a2 = v17 * a9;
    goto LABEL_10;
  }
  int v19 = (a3 + 1) >> 1;
  if (a3)
  {
    *a2 = *v14;
    a2[1] = 0.0;
    if (a3 > 2)
    {
      if (v19 <= 2) {
        uint64_t v48 = 2;
      }
      else {
        uint64_t v48 = v19;
      }
      double v49 = &a6[a3 - 1];
      double v50 = (long long *)(v14 + 1);
      uint64_t v51 = a6 + 1;
      uint64_t v52 = v48 - 1;
      do
      {
        uint64_t v54 = *v51++;
        uint64_t v53 = v54;
        uint64_t v56 = *v49--;
        uint64_t v55 = v56;
        uint64_t v57 = &a2[2 * v53];
        long long v58 = *v50++;
        *(void *)uint64_t v57 = v58;
        v57[1] = -*((double *)&v58 + 1);
        *(_OWORD *)&a2[2 * v55] = v58;
        --v52;
      }
      while (v52);
    }
    cv::DFT<double>((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a3, 1.0, a10, 256);
    v13->f64[0] = v13->f64[0] * a9;
    if (a3 >= 2)
    {
      uint64_t v59 = 0;
      f64 = v13[2].f64;
      do
      {
        double v61 = *(f64 - 2) * a9;
        double v62 = *f64;
        f64 += 4;
        uint64_t v63 = (uint64_t)&v13[v59 + 2];
        *(double *)(v63 - 24) = v61;
        *(double *)(v63 - 16) = v62 * a9;
        unint64_t v64 = v59 * 2 + 3;
        ++v59;
      }
      while (v64 < a3);
    }
  }
  else
  {
    double v20 = v14[v16];
    double v21 = v14[1];
    double v22 = *v14 + v20;
    double v23 = v20 - *v14;
    *a2 = v22;
    a2[1] = v23;
    if (a3 < 5)
    {
      LODWORD(v29) = 2;
    }
    else
    {
      uint64_t v24 = 0;
      double v25 = &v14[a3 - 3];
      uint64_t v26 = a7 + 16;
      double v27 = a6 + 1;
      double v28 = &a6[v19 - 1];
      uint64_t v29 = 2;
      uint64_t v30 = a3;
      do
      {
        double v31 = v25[1];
        double v32 = v21 + *v25;
        double v33 = v21 - *v25;
        double v34 = v14[v24 + 2];
        double v21 = v14[v24 + 3];
        double v35 = v34 - v31;
        double v36 = v34 + v31;
        double v37 = *(double *)(v26 + v24 * 8);
        double v38 = *(double *)(v26 + v24 * 8 + 8);
        double v39 = v36 * v38 + v33 * v37;
        double v40 = v36 * v37 - v33 * v38;
        double v41 = v32 - v40;
        double v42 = -v35 - v39;
        double v43 = v32 + v40;
        if (v14 == a2)
        {
          uint64_t v47 = &a2[v24];
          v47[2] = v41;
          v47[3] = v42;
          a2[v30 - 2] = v43;
          uint64_t v46 = v30 - 1;
        }
        else
        {
          double v44 = &a2[*v27];
          *double v44 = v41;
          v44[1] = v42;
          uint64_t v45 = *v28;
          a2[v45] = v43;
          uint64_t v46 = v45 + 1;
        }
        a2[v46] = v35 - v39;
        v29 += 2;
        v25 -= 2;
        v30 -= 2;
        v24 += 2;
        ++v27;
        --v28;
      }
      while (v29 < v19);
    }
    if ((int)v29 <= v19)
    {
      double v65 = v21 + v21;
      double v66 = v14[v19] + v14[v19];
      if (v14 == a2)
      {
        a2[v19] = v65;
        int v68 = v19 + 1;
      }
      else
      {
        uint64_t v67 = a6[v19];
        a2[2 * v67] = v65;
        int v68 = (2 * v67) | 1;
      }
      a2[v68] = v66;
    }
    int v69 = *a5 >> 1;
    *a5 = v69;
    cv::DFT<double>((uint64_t)a2, (uint64_t)a2, v19, a4 - (v69 == 1), &a5[v69 == 1], a6, a7, a3, 1.0, a10, (v14 != a2) << 8);
    *a5 *= 2;
    v70.f64[0] = a9;
    if (a3 >= 1)
    {
      unint64_t v71 = 0;
      do
      {
        v70.f64[1] = -a9;
        *uint64_t v13 = vmulq_f64(*v13, v70);
        ++v13;
        v71 += 2;
      }
      while (v71 < a3);
    }
  }
LABEL_10:
  if ((a11 & 0x200) != 0) {
    *(void *)uint64_t v14 = v15;
  }
}

void cv::DFTInit()
{
  __assert_rtn("DFTInit", "dxt.cpp", 347, "elem_size == sizeof(Complex<float>)");
}

{
  __assert_rtn("DFTInit", "dxt.cpp", 211, "nf < 34");
}

void cv::DFT<float>()
{
}

{
  __assert_rtn("DFT", "dxt.cpp", 627, "(unsigned)j < (unsigned)n");
}

{
  __assert_rtn("DFT", "dxt.cpp", 569, "(unsigned)k0 < (unsigned)n && (unsigned)k1 < (unsigned)n");
}

{
  __assert_rtn("DFT", "dxt.cpp", 581, "(unsigned)k0 < (unsigned)n && (unsigned)k1 < (unsigned)n");
}

{
  __assert_rtn("DFT", "dxt.cpp", 563, "(flags & DFT_NO_PERMUTE) == 0");
}

void cv::RealDFT<float>()
{
  __assert_rtn("RealDFT", "dxt.cpp", 992, "tab_size == n");
}

void cv::CCSIDFT<float>()
{
  __assert_rtn("CCSIDFT", "dxt.cpp", 1106, "src != dst");
}

{
  __assert_rtn("CCSIDFT", "dxt.cpp", 1102, "tab_size == n");
}

uint64_t cv::copyMask8u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 1)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(unsigned char *)(a3 + i)) {
            *(unsigned char *)(a5 + i) = *(unsigned char *)(result + i);
          }
        }
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask16u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 1)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(unsigned char *)(a3 + i)) {
            *(_WORD *)(a5 + 2 * i) = *(_WORD *)(result + 2 * i);
          }
        }
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask8uC3(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 6;
        do
        {
          if (*(unsigned char *)(a3 + v9))
          {
            uint64_t v11 = a5 + v10;
            __int16 v12 = *(_WORD *)(result + v10 - 6);
            *(unsigned char *)(v11 - 4) = *(unsigned char *)(result + v10 - 4);
            *(_WORD *)(v11 - 6) = v12;
          }
          if (*(unsigned char *)(a3 + v9 + 1))
          {
            uint64_t v13 = a5 + v10;
            __int16 v14 = *(_WORD *)(result + v10 - 3);
            *(unsigned char *)(v13 - 1) = *(unsigned char *)(result + v10 - 1);
            *(_WORD *)(v13 - 3) = v14;
          }
          if (*(unsigned char *)(a3 + v9 + 2))
          {
            uint64_t v15 = a5 + v10;
            __int16 v16 = *(_WORD *)(result + v10);
            *(unsigned char *)(v15 + 2) = *(unsigned char *)(result + v10 + 2);
            *(_WORD *)uint64_t v15 = v16;
          }
          if (*(unsigned char *)(a3 + v9 + 3))
          {
            uint64_t v17 = a5 + v10;
            __int16 v18 = *(_WORD *)(result + v10 + 3);
            *(unsigned char *)(v17 + 5) = *(unsigned char *)(result + v10 + 5);
            *(_WORD *)(v17 + 3) = v18;
          }
          v9 += 4;
          v10 += 12;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        uint64_t v19 = 3 * v9;
        do
        {
          if (*(unsigned char *)(a3 + v9))
          {
            uint64_t v20 = a5 + v19;
            __int16 v21 = *(_WORD *)(result + v19);
            *(unsigned char *)(v20 + 2) = *(unsigned char *)(result + v19 + 2);
            *(_WORD *)uint64_t v20 = v21;
          }
          ++v9;
          v19 += 3;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask32s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 8;
        do
        {
          if (*(unsigned char *)(a3 + v9)) {
            *(_DWORD *)(a5 + v10 - _Block_object_dispose(&a9, 8) = *(_DWORD *)(result + v10 - 8);
          }
          if (*(unsigned char *)(a3 + v9 + 1)) {
            *(_DWORD *)(a5 + v10 - 4) = *(_DWORD *)(result + v10 - 4);
          }
          if (*(unsigned char *)(a3 + v9 + 2)) {
            *(_DWORD *)(a5 + v10) = *(_DWORD *)(result + v10);
          }
          if (*(unsigned char *)(a3 + v9 + 3)) {
            *(_DWORD *)(a5 + v10 + 4) = *(_DWORD *)(result + v10 + 4);
          }
          v9 += 4;
          v10 += 16;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          if (*(unsigned char *)(a3 + v9)) {
            *(_DWORD *)(a5 + 4 * v9) = *(_DWORD *)(result + 4 * v9);
          }
          ++v9;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask16uC3(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 12;
        do
        {
          if (*(unsigned char *)(a3 + v9))
          {
            uint64_t v11 = a5 + v10;
            int v12 = *(_DWORD *)(result + v10 - 12);
            *(_WORD *)(v11 - _Block_object_dispose(&a9, 8) = *(_WORD *)(result + v10 - 8);
            *(_DWORD *)(v11 - 12) = v12;
          }
          if (*(unsigned char *)(a3 + v9 + 1))
          {
            uint64_t v13 = a5 + v10;
            int v14 = *(_DWORD *)(result + v10 - 6);
            *(_WORD *)(v13 - 2) = *(_WORD *)(result + v10 - 2);
            *(_DWORD *)(v13 - 6) = v14;
          }
          if (*(unsigned char *)(a3 + v9 + 2))
          {
            uint64_t v15 = a5 + v10;
            int v16 = *(_DWORD *)(result + v10);
            *(_WORD *)(v15 + 4) = *(_WORD *)(result + v10 + 4);
            *(_DWORD *)uint64_t v15 = v16;
          }
          if (*(unsigned char *)(a3 + v9 + 3))
          {
            uint64_t v17 = a5 + v10;
            int v18 = *(_DWORD *)(result + v10 + 6);
            *(_WORD *)(v17 + 10) = *(_WORD *)(result + v10 + 10);
            *(_DWORD *)(v17 + 6) = v18;
          }
          v9 += 4;
          v10 += 24;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        uint64_t v19 = 6 * v9;
        do
        {
          if (*(unsigned char *)(a3 + v9))
          {
            uint64_t v20 = a5 + v19;
            int v21 = *(_DWORD *)(result + v19);
            *(_WORD *)(v20 + 4) = *(_WORD *)(result + v19 + 4);
            *(_DWORD *)uint64_t v20 = v21;
          }
          ++v9;
          v19 += 6;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask32sC2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 16;
        do
        {
          if (*(unsigned char *)(a3 + v9)) {
            *(void *)(a5 + v10 - 16) = *(void *)(result + v10 - 16);
          }
          if (*(unsigned char *)(a3 + v9 + 1)) {
            *(void *)(a5 + v10 - _Block_object_dispose(&a9, 8) = *(void *)(result + v10 - 8);
          }
          if (*(unsigned char *)(a3 + v9 + 2)) {
            *(void *)(a5 + v10) = *(void *)(result + v10);
          }
          if (*(unsigned char *)(a3 + v9 + 3)) {
            *(void *)(a5 + v10 + _Block_object_dispose(&a9, 8) = *(void *)(result + v10 + 8);
          }
          v9 += 4;
          v10 += 32;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          if (*(unsigned char *)(a3 + v9)) {
            *(void *)(a5 + 8 * v9) = *(void *)(result + 8 * v9);
          }
          ++v9;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask32sC3(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 24;
        do
        {
          if (*(unsigned char *)(a3 + v9))
          {
            uint64_t v11 = a5 + v10;
            uint64_t v12 = *(void *)(result + v10 - 24);
            *(_DWORD *)(v11 - 16) = *(_DWORD *)(result + v10 - 16);
            *(void *)(v11 - 24) = v12;
          }
          if (*(unsigned char *)(a3 + v9 + 1))
          {
            uint64_t v13 = a5 + v10;
            uint64_t v14 = *(void *)(result + v10 - 12);
            *(_DWORD *)(v13 - 4) = *(_DWORD *)(result + v10 - 4);
            *(void *)(v13 - 12) = v14;
          }
          if (*(unsigned char *)(a3 + v9 + 2))
          {
            uint64_t v15 = a5 + v10;
            uint64_t v16 = *(void *)(result + v10);
            *(_DWORD *)(v15 + _Block_object_dispose(&a9, 8) = *(_DWORD *)(result + v10 + 8);
            *(void *)uint64_t v15 = v16;
          }
          if (*(unsigned char *)(a3 + v9 + 3))
          {
            uint64_t v17 = a5 + v10;
            uint64_t v18 = *(void *)(result + v10 + 12);
            *(_DWORD *)(v17 + 20) = *(_DWORD *)(result + v10 + 20);
            *(void *)(v17 + 12) = v18;
          }
          v9 += 4;
          v10 += 48;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        uint64_t v19 = 12 * v9;
        do
        {
          if (*(unsigned char *)(a3 + v9))
          {
            uint64_t v20 = a5 + v19;
            uint64_t v21 = *(void *)(result + v19);
            *(_DWORD *)(v20 + _Block_object_dispose(&a9, 8) = *(_DWORD *)(result + v19 + 8);
            *(void *)uint64_t v20 = v21;
          }
          ++v9;
          v19 += 12;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask32sC4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 32;
        do
        {
          if (*(unsigned char *)(a3 + v9)) {
            *(_OWORD *)(a5 + v10 - 32) = *(_OWORD *)(result + v10 - 32);
          }
          if (*(unsigned char *)(a3 + v9 + 1)) {
            *(_OWORD *)(a5 + v10 - 16) = *(_OWORD *)(result + v10 - 16);
          }
          if (*(unsigned char *)(a3 + v9 + 2)) {
            *(_OWORD *)(a5 + v10) = *(_OWORD *)(result + v10);
          }
          if (*(unsigned char *)(a3 + v9 + 3)) {
            *(_OWORD *)(a5 + v10 + 16) = *(_OWORD *)(result + v10 + 16);
          }
          v9 += 4;
          v10 += 64;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        uint64_t v11 = 16 * v9;
        do
        {
          if (*(unsigned char *)(a3 + v9)) {
            *(_OWORD *)(a5 + v11) = *(_OWORD *)(result + v11);
          }
          ++v9;
          v11 += 16;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask32sC6(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 48;
        do
        {
          if (*(unsigned char *)(a3 + v9))
          {
            uint64_t v11 = a5 + v10;
            long long v12 = *(_OWORD *)(result + v10 - 48);
            *(void *)(v11 - 32) = *(void *)(result + v10 - 32);
            *(_OWORD *)(v11 - 4_Block_object_dispose(&a9, 8) = v12;
          }
          if (*(unsigned char *)(a3 + v9 + 1))
          {
            uint64_t v13 = a5 + v10;
            long long v14 = *(_OWORD *)(result + v10 - 24);
            *(void *)(v13 - _Block_object_dispose(&a9, 8) = *(void *)(result + v10 - 8);
            *(_OWORD *)(v13 - 24) = v14;
          }
          if (*(unsigned char *)(a3 + v9 + 2))
          {
            uint64_t v15 = a5 + v10;
            long long v16 = *(_OWORD *)(result + v10);
            *(void *)(v15 + 16) = *(void *)(result + v10 + 16);
            *(_OWORD *)uint64_t v15 = v16;
          }
          if (*(unsigned char *)(a3 + v9 + 3))
          {
            uint64_t v17 = a5 + v10;
            long long v18 = *(_OWORD *)(result + v10 + 24);
            *(void *)(v17 + 40) = *(void *)(result + v10 + 40);
            *(_OWORD *)(v17 + 24) = v18;
          }
          v9 += 4;
          v10 += 96;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        uint64_t v19 = 24 * v9;
        do
        {
          if (*(unsigned char *)(a3 + v9))
          {
            uint64_t v20 = a5 + v19;
            long long v21 = *(_OWORD *)(result + v19);
            *(void *)(v20 + 16) = *(void *)(result + v19 + 16);
            *(_OWORD *)uint64_t v20 = v21;
          }
          ++v9;
          v19 += 24;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::copyMask32sC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 64;
        do
        {
          if (*(unsigned char *)(a3 + v9))
          {
            uint64_t v11 = a5 + v10;
            long long v12 = *(_OWORD *)(result + v10 - 48);
            *(_OWORD *)(v11 - 64) = *(_OWORD *)(result + v10 - 64);
            *(_OWORD *)(v11 - 4_Block_object_dispose(&a9, 8) = v12;
          }
          if (*(unsigned char *)(a3 + v9 + 1))
          {
            uint64_t v13 = a5 + v10;
            long long v14 = *(_OWORD *)(result + v10 - 16);
            *(_OWORD *)(v13 - 32) = *(_OWORD *)(result + v10 - 32);
            *(_OWORD *)(v13 - 16) = v14;
          }
          if (*(unsigned char *)(a3 + v9 + 2))
          {
            uint64_t v15 = (_OWORD *)(a5 + v10);
            long long v16 = *(_OWORD *)(result + v10 + 16);
            _OWORD *v15 = *(_OWORD *)(result + v10);
            v15[1] = v16;
          }
          if (*(unsigned char *)(a3 + v9 + 3))
          {
            uint64_t v17 = a5 + v10;
            long long v18 = *(_OWORD *)(result + v10 + 48);
            *(_OWORD *)(v17 + 32) = *(_OWORD *)(result + v10 + 32);
            *(_OWORD *)(v17 + 4_Block_object_dispose(&a9, 8) = v18;
          }
          v9 += 4;
          v10 += 128;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        uint64_t v19 = 32 * v9;
        do
        {
          if (*(unsigned char *)(a3 + v9))
          {
            uint64_t v20 = (_OWORD *)(a5 + v19);
            long long v21 = *(_OWORD *)(result + v19 + 16);
            *uint64_t v20 = *(_OWORD *)(result + v19);
            v20[1] = v21;
          }
          ++v9;
          v19 += 32;
        }
        while (v9 < v8);
      }
      a3 += a4;
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t (*cv::getCopyMaskFunc(unint64_t this))(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t *a8)
{
  if (this > 0x20) {
    return cv::copyMaskGeneric;
  }
  if (cv::copyMaskTab[this]) {
    return (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *))cv::copyMaskTab[this];
  }
  return cv::copyMaskGeneric;
}

uint64_t cv::copyMaskGeneric(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t *a8)
{
  uint64_t v8 = *a8;
  int v9 = a7[1];
  int v10 = v9 - 1;
  a7[1] = v9 - 1;
  if (v9)
  {
    int v11 = *a7;
    do
    {
      if (v11 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a5;
        uint64_t v14 = result;
        do
        {
          if (*(unsigned char *)(a3 + v12)) {
            BOOL v15 = v8 == 0;
          }
          else {
            BOOL v15 = 1;
          }
          if (!v15)
          {
            uint64_t v16 = 0;
            do
            {
              *(unsigned char *)(v13 + v16) = *(unsigned char *)(v14 + v16);
              ++v16;
            }
            while (v8 != v16);
            int v11 = *a7;
          }
          ++v12;
          v14 += v8;
          v13 += v8;
        }
        while (v12 < v11);
        int v10 = a7[1];
      }
      int v17 = v10;
      a3 += a4;
      result += a2;
      a5 += a6;
      a7[1] = --v10;
    }
    while (v17);
  }
  return result;
}

void cv::Mat::copyTo(cv::Mat *this, const cv::_OutputArray *a2)
{
  v50[3] = *(cv::Mat **)MEMORY[0x263EF8340];
  int v4 = (*(uint64_t (**)(const cv::_OutputArray *, uint64_t))(*(void *)a2 + 64))(a2, 0xFFFFFFFFLL);
  if ((*(unsigned int (**)(const cv::_OutputArray *))(*(void *)a2 + 104))(a2)
    && v4 != (*(_DWORD *)this & 0xFFF))
  {
    if ((((unsigned __int16)*(_DWORD *)this ^ (unsigned __int16)v4) & 0xFF8) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "channels() == CV_MAT_CN(dtype)");
      std::string::basic_string[abi:ne180100]<0>(v50, "copyTo");
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
      cv::Exception::Exception(v39, 4294967081, __p, v50, &v48, 212);
      cv::error((cv *)v39, v16);
    }
    cv::Mat::convertTo(this, a2, v4, 1.0, 0.0);
  }
  else
  {
    if (!*((void *)this + 2)) {
      goto LABEL_29;
    }
    if (*((int *)this + 1) < 3)
    {
      if (*((int *)this + 3) * (uint64_t)*((int *)this + 2))
      {
        (*(void (**)(const cv::_OutputArray *, void, void, void, uint64_t, void, void))(*(void *)a2 + 136))(a2, *((unsigned int *)this + 2), *((unsigned int *)this + 3), *(_DWORD *)this & 0xFFF, 0xFFFFFFFFLL, 0, 0);
        (**(void (***)(void **__return_ptr, const cv::_OutputArray *, uint64_t))a2)(v39, a2, 0xFFFFFFFFLL);
        char v6 = (char *)*((void *)this + 2);
        int v7 = (char *)__dst;
        if (v6 != __dst)
        {
          int v8 = *((_DWORD *)this + 2);
          if (v8 >= 1)
          {
            LODWORD(v9) = *((_DWORD *)this + 3);
            if ((int)v9 >= 1)
            {
              int v10 = *((_DWORD *)this + 1);
              int v11 = *(_DWORD *)this & (uint64_t)v39[0];
              unint64_t v12 = v9 * (unint64_t)v8;
              if (v12 >> 31)
              {
                LODWORD(v12) = *((_DWORD *)this + 3);
                int v13 = *((_DWORD *)this + 2);
              }
              else
              {
                int v13 = 1;
              }
              if ((v11 & 0x4000) != 0) {
                uint64_t v9 = v12;
              }
              else {
                uint64_t v9 = v9;
              }
              if ((v11 & 0x4000) != 0) {
                int v14 = v13;
              }
              else {
                int v14 = *((_DWORD *)this + 2);
              }
              if (v10 < 1) {
                uint64_t v15 = 0;
              }
              else {
                uint64_t v15 = *(void *)(*((void *)this + 9) + 8 * (v10 - 1));
              }
              size_t v35 = v15 * v9;
              do
              {
                --v14;
                memcpy(v7, v6, v35);
                v6 += *((void *)this + 10);
                v7 += v47[0];
              }
              while (v14);
            }
          }
        }
        if (v41 && atomic_fetch_add(v41, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v39, v5);
        }
        __dst = 0;
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        if (SHIDWORD(v39[0]) >= 1)
        {
          uint64_t v36 = 0;
          uint64_t v37 = v45;
          do
            *(_DWORD *)(v37 + 4 * v36++) = 0;
          while (v36 < SHIDWORD(v39[0]));
        }
        double v41 = 0;
        if (v46 != (cv *)v47) {
          cv::fastFree((void **)v46, v5);
        }
        return;
      }
      goto LABEL_29;
    }
    int v17 = (int *)*((void *)this + 8);
    uint64_t v18 = 1;
    uint64_t v19 = *((unsigned int *)this + 1);
    do
    {
      uint64_t v20 = *v17++;
      v18 *= v20;
      --v19;
    }
    while (v19);
    if (!v18)
    {
LABEL_29:
      uint64_t v24 = *(void (**)(const cv::_OutputArray *))(*(void *)a2 + 152);
      v24(a2);
      return;
    }
    (*(void (**)(const cv::_OutputArray *))(*(void *)a2 + 144))(a2);
    (**(void (***)(void **__return_ptr, const cv::_OutputArray *, uint64_t))a2)(v39, a2, 0xFFFFFFFFLL);
    if (*((void **)this + 2) != __dst)
    {
      uint64_t v22 = *((unsigned int *)this + 1);
      if ((int)v22 >= 3)
      {
        double v25 = (int *)*((void *)this + 8);
        uint64_t v23 = 1;
        do
        {
          uint64_t v26 = *v25++;
          v23 *= v26;
          --v22;
        }
        while (v22);
      }
      else
      {
        uint64_t v23 = *((int *)this + 3) * (uint64_t)*((int *)this + 2);
      }
      if (v23)
      {
        v50[0] = this;
        v50[1] = (cv::Mat *)v39;
        uint64_t v48 = 0;
        double v49 = 0;
        cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)__p, v50, &v48, 2);
        int v27 = *((_DWORD *)this + 1);
        BOOL v28 = __OFSUB__(v27, 1);
        int v29 = v27 - 1;
        if (v29 < 0 != v28) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = *(void *)(*((void *)this + 9) + 8 * v29);
        }
        size_t v31 = v30 * (uint64_t)__p[5];
        uint64_t v32 = -1;
        while ((void *)++v32 < __p[4])
        {
          memcpy(v49, v48, v31);
          cv::NAryMatIterator::operator++((uint64_t)__p);
        }
      }
    }
    if (v41 && atomic_fetch_add(v41, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v39, v21);
    }
    __dst = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    if (SHIDWORD(v39[0]) >= 1)
    {
      uint64_t v33 = 0;
      uint64_t v34 = v45;
      do
        *(_DWORD *)(v34 + 4 * v33++) = 0;
      while (v33 < SHIDWORD(v39[0]));
    }
    double v41 = 0;
    if (v46 != (cv *)v47) {
      cv::fastFree((void **)v46, v21);
    }
  }
}

void sub_225EBB1D0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

void cv::Mat::copyTo(cv::Mat *this, const cv::_OutputArray *a2, const cv::_InputArray *a3)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  (**(void (***)(void *__return_ptr, const cv::_InputArray *, uint64_t))a3)(v52, a3, 0xFFFFFFFFLL);
  if (!v53)
  {
    cv::Mat::copyTo(this, a2);
    goto LABEL_50;
  }
  unint64_t v5 = ((unint64_t)LODWORD(v52[0]) >> 3) & 0x1FF;
  if ((v52[0] & 7) != 0 || (v5 ? (BOOL v6 = v5 == ((*(_DWORD *)this >> 3) & 0x1FF)) : (BOOL v6 = 1), !v6))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "mask.depth() == CV_8U && (mcn == 1 || mcn == cn)");
    std::string::basic_string[abi:ne180100]<0>(v61, "copyTo");
    std::string::basic_string[abi:ne180100]<0>(&v62, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
    cv::Exception::Exception(&v44, 4294967081, __p, v61, &v62, 271);
    cv::error((cv *)&v44, v7);
  }
  unint64_t v43 = 0;
  if (v5)
  {
    unint64_t v8 = (0x88442211uLL >> (4 * (*(_DWORD *)this & 7u))) & 0xF;
LABEL_10:
    unint64_t v43 = v8;
    goto LABEL_11;
  }
  int v24 = *((_DWORD *)this + 1);
  if (v24 <= 0)
  {
    unint64_t v8 = 0;
    goto LABEL_10;
  }
  unint64_t v8 = *(void *)(*((void *)this + 9) + 8 * (v24 - 1));
  unint64_t v43 = v8;
  if (v8 <= 0x20)
  {
LABEL_11:
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *))cv::copyMaskTab[v8];
    if (v9) {
      int v10 = v9;
    }
    else {
      int v10 = cv::copyMaskGeneric;
    }
    goto LABEL_14;
  }
  int v10 = cv::copyMaskGeneric;
LABEL_14:
  (**(void (***)(int64x2_t *__return_ptr, const cv::_OutputArray *, uint64_t))a2)(&v44, a2, 0xFFFFFFFFLL);
  uint64_t v12 = v45;
  if (*((void *)&v45 + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v45 + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v44, v11);
  }
  *(void *)&long long v45 = 0;
  unint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  if (v44.i32[1] >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = v49;
    do
      *(_DWORD *)(v14 + 4 * v13++) = 0;
    while (v13 < v44.i32[1]);
  }
  *((void *)&v45 + 1) = 0;
  if (v50 != (cv *)&v51) {
    cv::fastFree((void **)v50, v11);
  }
  (*(void (**)(const cv::_OutputArray *, void, void, void, uint64_t, void, void))(*(void *)a2 + 144))(a2, *((unsigned int *)this + 1), *((void *)this + 8), *(_DWORD *)this & 0xFFF, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void *__return_ptr, const cv::_OutputArray *, uint64_t))a2)(__p, a2, 0xFFFFFFFFLL);
  if (v35 != v12)
  {
    int64x2_t v44 = 0u;
    long long v45 = 0u;
    cv::Mat::operator=((uint64_t)__p, &v44);
  }
  int v15 = v5 + 1;
  if (*((int *)this + 1) > 2)
  {
    v61[0] = this;
    v61[1] = (cv::Mat *)__p;
    v61[2] = (cv::Mat *)v52;
    v61[3] = 0;
    double v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)&v44, v61, &v62, -1);
    int v22 = v15 * v47;
    uint64_t v23 = -1;
    while (++v23 < v46)
    {
      v31[0] = v22;
      v31[1] = 1;
      v10((uint64_t)v62, 0, v64, 0, v63, 0, v31, (uint64_t *)&v43);
      cv::NAryMatIterator::operator++((uint64_t)&v44);
    }
  }
  else
  {
    if (*(_DWORD *)(*((void *)this + 8) + 4) != v58[1] || **((_DWORD **)this + 8) != *v58)
    {
      std::string::basic_string[abi:ne180100]<0>(v61, "size() == mask.size()");
      std::string::basic_string[abi:ne180100]<0>(&v62, "copyTo");
      std::string::basic_string[abi:ne180100]<0>(v33, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
      cv::Exception::Exception(&v44, 4294967081, v61, &v62, v33, 286);
      cv::error((cv *)&v44, v17);
    }
    int v18 = *((_DWORD *)this + 2);
    int v19 = *((_DWORD *)this + 3);
    if ((*(_DWORD *)this & __p[0] & v52[0] & 0x4000) != 0 && (uint64_t v20 = v19 * (uint64_t)v15 * v18, v20 == (int)v20)) {
      int v18 = 1;
    }
    else {
      LODWORD(v20) = v19 * v15;
    }
    uint64_t v25 = *((void *)this + 2);
    uint64_t v26 = *((void *)this + 10);
    v32[0] = v20;
    v32[1] = v18;
    v10(v25, v26, v53, v60, v35, v42, v32, (uint64_t *)&v43);
  }
  if (v36 && atomic_fetch_add(v36, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)__p, v21);
  }
  uint64_t v35 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  if (SHIDWORD(__p[0]) >= 1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = v40;
    do
      *(_DWORD *)(v28 + 4 * v27++) = 0;
    while (v27 < SHIDWORD(__p[0]));
  }
  uint64_t v36 = 0;
  if (v41 != (cv *)&v42) {
    cv::fastFree((void **)v41, v21);
  }
LABEL_50:
  if (v54 && atomic_fetch_add(v54, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v52, v21);
  }
  uint64_t v53 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  if (SHIDWORD(v52[0]) >= 1)
  {
    uint64_t v29 = 0;
    uint64_t v30 = v58;
    do
      v30[v29++] = 0;
    while (v29 < SHIDWORD(v52[0]));
  }
  uint64_t v54 = 0;
  if (v59 != (void **)&v60) {
    cv::fastFree(v59, v21);
  }
}

void sub_225EBB7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  cv::Exception::~Exception((cv::Exception *)&a33);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (*(char *)(v33 - 89) < 0) {
    operator delete(*(void **)(v33 - 112));
  }
  cv::Mat::~Mat((cv::Mat *)&a17, v35);
  cv::Mat::~Mat((cv::Mat *)(v33 - 208), v36);
  _Unwind_Resume(a1);
}

uint64_t cv::Mat::operator=(uint64_t a1, int64x2_t *a2)
{
  v21[1] = *(cv::Mat **)MEMORY[0x263EF8340];
  v21[0] = (cv::Mat *)a1;
  __dst = 0;
  cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)v16, v21, (unsigned __int8 **)&__dst, 1);
  int v4 = *(_DWORD *)(a1 + 4);
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8 * v6);
  }
  size_t v8 = v7 * v18;
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*a2), (int32x4_t)vceqzq_s64(a2[1]))))))
  {
    if (v17)
    {
      cv::scalarToRawData((uint64_t)a2, (uint64_t)__src, *(_DWORD *)a1 & 0xFFF, 12);
      if (v8)
      {
        size_t v9 = 0;
        unint64_t v10 = 12 * ((0x88442211uLL >> (4 * (*(_DWORD *)a1 & 7u))) & 0xF);
        unint64_t v11 = v8;
        do
        {
          if (v10 >= v11) {
            size_t v12 = v11;
          }
          else {
            size_t v12 = v10;
          }
          memcpy((char *)__dst + v9, __src, v12);
          v9 += v10;
          v11 -= v10;
        }
        while (v9 < v8);
      }
      if (v17 >= 2)
      {
        for (unint64_t i = 1; i < v17; ++i)
        {
          cv::NAryMatIterator::operator++((uint64_t)v16);
          memcpy(__dst, *(const void **)(a1 + 16), v8);
        }
      }
    }
  }
  else if (v17)
  {
    for (unint64_t j = 0; j < v17; ++j)
    {
      bzero(__dst, v8);
      cv::NAryMatIterator::operator++((uint64_t)v16);
    }
  }
  return a1;
}

uint64_t cv::Mat::setTo(cv::Mat *this, const cv::_InputArray *a2, const cv::_InputArray *a3)
{
  void (***v3)(uint64_t *__return_ptr, void, uint64_t);
  void (***v4)(uint64_t *__return_ptr, void, uint64_t);
  uint64_t v5;
  void (***v6)(uint64_t *__return_ptr, void, uint64_t);
  void (***v7)(void *__return_ptr, void, uint64_t);
  unsigned int v8;
  const cv::Exception *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  const cv::Exception *v14;
  int v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  unint64_t v27;
  int v28;
  void *v29;
  char *i;
  int j;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v41;
  int v42;
  int v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  _DWORD v47[2];
  void *__p[5];
  int v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  atomic_uint *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  cv *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  atomic_uint *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  cv *v71;
  uint64_t v72;
  unsigned char *v73;
  uint64_t v74;
  unsigned char v75[4120];
  unsigned __int8 *v76;
  uint64_t v77;
  cv::Mat *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;

  BOOL v5 = MEMORY[0x270FA5388](this, a2);
  double v81 = *MEMORY[0x263EF8340];
  if (!*(void *)(v5 + 16)) {
    return v5;
  }
  int v6 = v4;
  uint64_t v7 = v3;
  (**v3)(&v62, v3, 0xFFFFFFFFLL);
  (**v6)(&v51, v6, 0xFFFFFFFFLL);
  size_t v8 = *(_DWORD *)v5;
  ((void (*)(void (***)(void *__return_ptr, void, uint64_t)))(*v7)[5])(v7);
  if (SHIDWORD(v62) > 2 || v64 != 1 && v63 != 1 || (v62 & 0x4000) == 0) {
    goto LABEL_6;
  }
  double v41 = (v8 >> 3) & 0x1FF;
  uint64_t v42 = *v70;
  unint64_t v43 = v70[1];
  int64x2_t v44 = v43 == v41 + 1;
  if (*v70 != 1) {
    int64x2_t v44 = 0;
  }
  long long v45 = v42 == v41 + 1 || *v70 == 1;
  if (v43 != 1) {
    long long v45 = 0;
  }
  if (!v45 && !v44 && (v43 != 1 || v42 != 4 || v41 > 3 || (v62 & 0xFFF) != 6))
  {
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(__p, "checkScalar(value, type(), _value.kind(), _InputArray::MAT)");
    std::string::basic_string[abi:ne180100]<0>(&v78, "setTo");
    std::string::basic_string[abi:ne180100]<0>(&v76, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
    cv::Exception::Exception(&v73, 4294967081, __p, &v78, &v76, 346);
    cv::error((cv *)&v73, v9);
  }
  if (v54)
  {
    unint64_t v10 = HIDWORD(v51);
    if (SHIDWORD(v51) >= 3)
    {
      size_t v12 = v59;
      unint64_t v11 = 1;
      do
      {
        uint64_t v13 = *v12++;
        v11 *= v13;
        --v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v11 = v53 * (uint64_t)v52;
    }
    if (v11 && (v51 & 0xFFF) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "mask.empty() || mask.type() == CV_8U");
      std::string::basic_string[abi:ne180100]<0>(&v78, "setTo");
      std::string::basic_string[abi:ne180100]<0>(&v76, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
      cv::Exception::Exception(&v73, 4294967081, __p, &v78, &v76, 347);
      cv::error((cv *)&v73, v14);
    }
  }
  double v50 = 0;
  int v15 = *(_DWORD *)(v5 + 4);
  uint64_t v16 = __OFSUB__(v15, 1);
  unint64_t v17 = v15 - 1;
  if (v17 < 0 != v16)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = *(void *)(*(void *)(v5 + 72) + 8 * v17);
    double v50 = v18;
    if (v18 > 0x20)
    {
      int v19 = cv::copyMaskGeneric;
      goto LABEL_22;
    }
  }
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *))cv::copyMaskTab[v18];
  if (v20) {
    int v19 = v20;
  }
  else {
    int v19 = cv::copyMaskGeneric;
  }
LABEL_22:
  double v79 = 0;
  double v80 = 0;
  double v78 = (cv::Mat *)v5;
  if (!v54) {
    goto LABEL_29;
  }
  long long v21 = HIDWORD(v51);
  if (SHIDWORD(v51) >= 3)
  {
    uint64_t v23 = v59;
    int v22 = 1;
    do
    {
      int v24 = *v23++;
      v22 *= v24;
      --v21;
    }
    while (v21);
  }
  else
  {
    int v22 = v53 * (uint64_t)v52;
  }
  if (v22) {
    uint64_t v25 = &v51;
  }
  else {
LABEL_29:
  }
    uint64_t v25 = 0;
  double v79 = v25;
  double v80 = 0;
  double v76 = 0;
  double v77 = 0;
  cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)__p, &v78, &v76, -1);
  uint64_t v26 = v49;
  uint64_t v27 = (v50 + 1023) / v50;
  if ((int)v27 >= v49) {
    LODWORD(v27) = v49;
  }
  uint64_t v28 = v27;
  float v73 = v75;
  double v74 = 4104;
  if (v50 * (int)v27 + 32 >= 0x1009)
  {
    double v74 = v50 * (int)v27 + 32;
    operator new[]();
  }
  unint64_t v46 = v5;
  cv::convertAndUnrollScalar((cv *)&v62, (const cv::Mat *)(*(_DWORD *)v5 & 0xFFF), v75, (unsigned __int8 *)(int)v27);
  for (unint64_t i = 0; i < __p[4]; ++i)
  {
    if (v26 >= 1)
    {
      for (unint64_t j = 0; j < v26; j += v28)
      {
        uint64_t v32 = v26 - j;
        if (v26 - j >= v28) {
          uint64_t v32 = v28;
        }
        uint64_t v33 = v32;
        uint64_t v34 = v50 * v32;
        if (v77)
        {
          v47[0] = v32;
          v47[1] = 1;
          v19((uint64_t)v75, 0, v77, 0, (uint64_t)v76, 0, v47, (uint64_t *)&v50);
          v77 += v33;
        }
        else
        {
          memcpy(v76, v75, v50 * v32);
        }
        v76 += v34;
      }
    }
    cv::NAryMatIterator::operator++((uint64_t)__p);
  }
  if (v73 != v75 && v73 != 0) {
    MEMORY[0x22A641760]();
  }
  BOOL v5 = v46;
  if (v55 && atomic_fetch_add(v55, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v51, v29);
  }
  uint64_t v54 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  long long v58 = 0;
  if (SHIDWORD(v51) >= 1)
  {
    uint64_t v36 = 0;
    uint64_t v37 = v59;
    do
      v37[v36++] = 0;
    while (v36 < SHIDWORD(v51));
  }
  uint64_t v55 = 0;
  if (v60 != (cv *)&v61) {
    cv::fastFree((void **)v60, v29);
  }
  if (v66 && atomic_fetch_add(v66, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v62, v29);
  }
  uint64_t v65 = 0;
  uint64_t v67 = 0;
  int v68 = 0;
  int v69 = 0;
  if (SHIDWORD(v62) >= 1)
  {
    uint64_t v38 = 0;
    uint64_t v39 = v70;
    do
      v39[v38++] = 0;
    while (v38 < SHIDWORD(v62));
  }
  double v66 = 0;
  if (v71 != (cv *)&v72) {
    cv::fastFree((void **)v71, v29);
  }
  return v5;
}

void sub_225EBC0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  cv::Exception::~Exception((cv::Exception *)&a47);
  if (*(char *)(v47 + 23) < 0) {
    operator delete(*(void **)(v48 - 144));
  }
  if (*(char *)(v47 + 47) < 0) {
    operator delete(*(void **)(v48 - 120));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  cv::Mat::~Mat((cv::Mat *)&a23, v50);
  cv::Mat::~Mat((cv::Mat *)&a35, v51);
  _Unwind_Resume(a1);
}

void cv::repeat(void (***this)(uint64_t *__return_ptr), const cv::_InputArray *a2, int a3, uint64_t a4, const cv::_OutputArray *a5)
{
  int v7 = (int)a2;
  (**this)(&v39);
  if (SHIDWORD(v39) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "src.dims <= 2");
    std::string::basic_string[abi:ne180100]<0>(v28, "repeat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
    cv::Exception::Exception(v30, 4294967081, v29, v28, __p, 485);
    cv::error((cv *)v30, v8);
  }
  if (v7 < 1 || a3 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "ny > 0 && nx > 0");
    std::string::basic_string[abi:ne180100]<0>(v28, "repeat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
    cv::Exception::Exception(v30, 4294967081, v29, v28, __p, 486);
    cv::error((cv *)v30, v9);
  }
  (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, void, void))(*(void *)a4 + 136))(a4, (v40 * v7), (v41 * a3), v39 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void *__return_ptr, uint64_t, uint64_t))a4)(v30, a4, 0xFFFFFFFFLL);
  uint64_t v11 = *v47;
  uint64_t v12 = *v36;
  if (SHIDWORD(v39) < 1) {
    LODWORD(v13) = 0;
  }
  else {
    uint64_t v13 = v48[HIDWORD(v39) - 1];
  }
  uint64_t v14 = (int)v36[1] * (uint64_t)(int)v13;
  if ((int)v11 < 1)
  {
    int v18 = 0;
  }
  else
  {
    uint64_t v15 = 0;
    size_t v16 = (int)(v13 * v47[1]);
    do
    {
      if ((int)v14 >= 1)
      {
        uint64_t v17 = 0;
        do
        {
          memcpy((void *)(v31 + v15 * v38 + v17), (const void *)(v42 + v49 * v15), v16);
          v17 += v16;
        }
        while (v17 < v14);
      }
      ++v15;
    }
    while (v15 != v11);
    int v18 = v11;
  }
  if (v18 < (int)v12)
  {
    uint64_t v19 = (int)v11;
    size_t v20 = (int)v14;
    uint64_t v21 = v18;
    uint64_t v22 = -v19;
    do
    {
      memcpy((void *)(v31 + v38 * v21), (const void *)(v31 + v38 * (v22 + v21)), v20);
      ++v21;
    }
    while (v12 != v21);
  }
  if (v32 && atomic_fetch_add(v32, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v30, v10);
  }
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (SHIDWORD(v30[0]) >= 1)
  {
    uint64_t v23 = 0;
    int v24 = v36;
    do
      v24[v23++] = 0;
    while (v23 < SHIDWORD(v30[0]));
  }
  uint64_t v32 = 0;
  if (v37 != (cv *)&v38) {
    cv::fastFree((void **)v37, v10);
  }
  if (v43 && atomic_fetch_add(v43, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v39, v10);
  }
  uint64_t v42 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  if (SHIDWORD(v39) >= 1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = v47;
    do
      v26[v25++] = 0;
    while (v25 < SHIDWORD(v39));
  }
  unint64_t v43 = 0;
  if (v48 != (void **)&v49) {
    cv::fastFree(v48, v10);
  }
}

void sub_225EBC5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::Mat::~Mat((cv::Mat *)(v27 - 160), v29);
  _Unwind_Resume(a1);
}

void cvCopy(uint64_t a1, uint64_t a2, cv *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  v66[5] = *MEMORY[0x263EF8340];
  if (!a1 || !a2 || *(unsigned __int16 *)(a1 + 2) << 16 != 1111752704 || *(_WORD *)(a2 + 2) != 16964)
  {
    cv::cvarrToMat((cv *)a1, 0, 1, (uint64_t)v49);
    cv::cvarrToMat((cv *)v4, 0, 1, (uint64_t)v41);
    if (((LOBYTE(v41[0]) ^ LOBYTE(v49[0])) & 7) == 0)
    {
      unint64_t v20 = *(v54 - 1);
      if (v20 == *(v46 - 1))
      {
        if (v20 == 2)
        {
          if (*v54 == *v46 && v54[1] == v46[1]) {
            goto LABEL_34;
          }
        }
        else
        {
          if ((int)v20 < 1) {
            goto LABEL_34;
          }
          if (*v54 == *v46)
          {
            uint64_t v21 = 1;
            do
            {
              unint64_t v22 = v21;
              if (v20 == v21) {
                break;
              }
              int v23 = v54[v21];
              int v24 = v46[v21++];
            }
            while (v23 == v24);
            if (v22 >= v20)
            {
LABEL_34:
              if (v5)
              {
                if (*(_DWORD *)v5 != 144 || !*(void *)(v5 + 88))
                {
                  LODWORD(v5) = 0;
                  if (!v4)
                  {
LABEL_45:
                    if (v5 | v4)
                    {
                      if (!v5 && ((uint64_t)v49[0] & 0xFF8) != 0 || !v4 && (v41[0] & 0xFF8) != 0)
                      {
                        std::string::basic_string[abi:ne180100]<0>(__p, "(coi1 != 0 || src.channels() == 1) && (coi2 != 0 || dst.channels() == 1)");
                        std::string::basic_string[abi:ne180100]<0>(v38, "cvCopy");
                        std::string::basic_string[abi:ne180100]<0>(v40, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
                        uint64_t v32 = (cv *)cv::Exception::Exception(&v57, 4294967081, __p, v38, v40, 567);
                        cv::error(v32, v33);
                      }
                      int32x2_t v57 = vadd_s32(vmax_s32((int32x2_t)__PAIR64__(v4, v5), (int32x2_t)0x100000001), (int32x2_t)-1);
                      cv::mixChannels((cv *)v49, (const cv::Mat *)1, (unint64_t)v41, (cv::Mat *)1, (unint64_t)&v57, (const int *)1);
                    }
                    else
                    {
                      if (((LOWORD(v41[0]) ^ LOWORD(v49[0])) & 0xFF8) != 0)
                      {
                        std::string::basic_string[abi:ne180100]<0>(__p, "src.channels() == dst.channels()");
                        std::string::basic_string[abi:ne180100]<0>(v38, "cvCopy");
                        std::string::basic_string[abi:ne180100]<0>(v40, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
                        uint64_t v27 = (cv *)cv::Exception::Exception(&v57, 4294967081, __p, v38, v40, 574);
                        cv::error(v27, v28);
                      }
                      if (a3)
                      {
                        cv::_OutputArray::_OutputArray((uint64_t)__p, (cv::Mat *)v41);
                        cv::cvarrToMat(a3, 0, 0, (uint64_t)&v57);
                        cv::_InputArray::_InputArray((uint64_t)v38, (const cv::Mat *)&v57);
                        cv::Mat::copyTo((cv::Mat *)v49, (const cv::_OutputArray *)__p, (const cv::_InputArray *)v38);
                        if (v60 && atomic_fetch_add(v60, 0xFFFFFFFF) == 1) {
                          cv::Mat::deallocate((cv::Mat *)&v57, v29);
                        }
                        uint64_t v59 = 0;
                        uint64_t v61 = 0;
                        uint64_t v62 = 0;
                        uint64_t v63 = 0;
                        if (v57.i32[1] >= 1)
                        {
                          uint64_t v30 = 0;
                          uint64_t v31 = v64;
                          do
                            *(_DWORD *)(v31 + 4 * v30++) = 0;
                          while (v30 < v57.i32[1]);
                        }
                        uint64_t v60 = 0;
                        if (v65 != v66) {
                          cv::fastFree(v65, v29);
                        }
                      }
                      else
                      {
                        cv::_OutputArray::_OutputArray((uint64_t)&v57, (cv::Mat *)v41);
                        cv::Mat::copyTo((cv::Mat *)v49, (const cv::_OutputArray *)&v57);
                      }
                    }
                    if (v42 && atomic_fetch_add(v42, 0xFFFFFFFF) == 1) {
                      cv::Mat::deallocate((cv::Mat *)v41, v29);
                    }
                    v41[2] = 0;
                    uint64_t v43 = 0;
                    uint64_t v44 = 0;
                    uint64_t v45 = 0;
                    if (SHIDWORD(v41[0]) >= 1)
                    {
                      uint64_t v34 = 0;
                      uint64_t v35 = v46;
                      do
                        v35[v34++] = 0;
                      while (v34 < SHIDWORD(v41[0]));
                    }
                    uint64_t v42 = 0;
                    if (v47 != (cv *)&v48) {
                      cv::fastFree((void **)v47, v29);
                    }
                    if (v50 && atomic_fetch_add(v50, 0xFFFFFFFF) == 1) {
                      cv::Mat::deallocate((cv::Mat *)v49, v29);
                    }
                    v49[2] = 0;
                    uint64_t v51 = 0;
                    uint64_t v52 = 0;
                    uint64_t v53 = 0;
                    if (SHIDWORD(v49[0]) >= 1)
                    {
                      uint64_t v36 = 0;
                      uint64_t v37 = v54;
                      do
                        v37[v36++] = 0;
                      while (v36 < SHIDWORD(v49[0]));
                    }
                    double v50 = 0;
                    if (v55 != (cv *)&v56) {
                      cv::fastFree((void **)v55, v29);
                    }
                    return;
                  }
LABEL_41:
                  if (*(_DWORD *)v4 == 144 && *(void *)(v4 + 88)) {
                    LODWORD(v4) = cvGetImageCOI(v4);
                  }
                  else {
                    LODWORD(v4) = 0;
                  }
                  goto LABEL_45;
                }
                LODWORD(v5) = cvGetImageCOI(v5);
              }
              if (!v4) {
                goto LABEL_45;
              }
              goto LABEL_41;
            }
          }
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "src.depth() == dst.depth() && src.size == dst.size");
    std::string::basic_string[abi:ne180100]<0>(v38, "cvCopy");
    std::string::basic_string[abi:ne180100]<0>(v40, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
    uint64_t v25 = (cv *)cv::Exception::Exception(&v57, 4294967081, __p, v38, v40, 556);
    cv::error(v25, v26);
  }
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v49, "maskarr == 0");
    std::string::basic_string[abi:ne180100]<0>(v41, "cvCopy");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/copy.cpp");
    int v6 = (cv *)cv::Exception::Exception(&v57, 4294967081, v49, v41, __p, 522);
    cv::error(v6, v7);
  }
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4);
  memcpy((void *)(a2 + 52), (const void *)(a1 + 52), 4 * *(int *)(a1 + 4));
  *(void *)(v4 + 44) = *(void *)(v5 + 44);
  cvClearSet(*(void *)(v4 + 24));
  int v9 = *(_DWORD *)(v4 + 40);
  unint64_t v10 = *(void ***)(v4 + 32);
  if (*(_DWORD *)(*(void *)(v5 + 24) + 104) >= 3 * v9)
  {
    cv::fastFree(v10, v8);
    uint64_t v11 = *(int *)(v5 + 40);
    *(_DWORD *)(v4 + 40) = v11;
    *(void *)(v4 + 32) = 0;
    unint64_t v10 = (void **)cvAlloc(8 * v11);
    *(void *)(v4 + 32) = v10;
    int v9 = *(_DWORD *)(v4 + 40);
  }
  bzero(v10, 8 * v9);
  uint64_t inited = (_DWORD *)cvInitSparseMatIterator(v5, (uint64_t)&v57);
  if (inited)
  {
    while (1)
    {
      uint64_t v13 = *(void *)(v4 + 24);
      uint64_t v14 = *(void **)(v13 + 96);
      v49[0] = v14;
      if (v14)
      {
        *(void *)(v13 + 96) = v14[1];
        *(_DWORD *)v14 &= 0x3FFFFFFu;
        ++*(_DWORD *)(v13 + 104);
      }
      else
      {
        cvSetAdd(v13, 0, v49);
        uint64_t v14 = v49[0];
        uint64_t v13 = *(void *)(v4 + 24);
      }
      int v15 = (*(_DWORD *)(v4 + 40) - 1) & *inited;
      memcpy(v14, inited, *(int *)(v13 + 44));
      uint64_t v16 = *(void *)(v4 + 32);
      v14[1] = *(void *)(v16 + 8 * v15);
      *(void *)(v16 + 8 * v15) = v14;
      uint64_t inited = (_DWORD *)*((void *)v58 + 1);
      if (!inited)
      {
        int v17 = v59 + 1;
        int v18 = *(_DWORD *)(*(void *)&v57 + 40);
        if ((int)v59 + 1 >= v18) {
          return;
        }
        for (unint64_t i = (_DWORD **)(*(void *)(*(void *)&v57 + 32) + 8 * (int)v59 + 8); ; ++i)
        {
          uint64_t inited = *i;
          if (*i) {
            break;
          }
          if (v18 == ++v17) {
            return;
          }
        }
        LODWORD(v59) = v17;
      }
      long long v58 = inited;
    }
  }
}

void sub_225EBCDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  cv::Exception::~Exception((cv::Exception *)(v50 - 176));
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_225EBCED8()
{
}

void sub_225EBCEE0()
{
}

void anonymous namespace'::throw_nogl(_anonymous_namespace_ *this)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "The library is compiled without OpenGL support");
  std::string::basic_string[abi:ne180100]<0>(v3, "throw_nogl");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/opengl_interop.cpp");
  cv::Exception::Exception(v5, 4294967078, v4, v3, __p, 63);
  cv::error((cv *)v5, v1);
}

void sub_225EBCF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

double cv::threshold(void (***this)(int *__return_ptr), const cv::_InputArray *a2, const cv::_OutputArray *a3, double a4, double a5)
{
  char v5 = (char)a3;
  uint64_t v115 = *MEMORY[0x263EF8340];
  (**this)(&v104);
  if ((v5 & 8) != 0)
  {
    __int16 v11 = v104;
    if ((v104 & 0xFFF) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v93, "src.type() == CV_8UC1");
      std::string::basic_string[abi:ne180100]<0>(v103, "threshold");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/thresh.cpp");
      cv::Exception::Exception(v114, 4294967081, v93, v103, __p, 718);
      cv::error((cv *)v114, v12);
    }
    unsigned int v10 = *v111;
    int v9 = v111[1];
    if ((v104 & 0x4000) != 0) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v10;
    }
    if ((v104 & 0x4000) != 0) {
      int v14 = *v111;
    }
    else {
      int v14 = 1;
    }
    uint64_t v15 = (v14 * v9);
    bzero(v114, 0x400uLL);
    if ((int)v13 >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v107;
      uint64_t v18 = v113;
      do
      {
        if ((int)v15 >= 4)
        {
          uint64_t v19 = 0;
          do
          {
            uint64_t v20 = *(unsigned __int8 *)(v17 + v19 + 1);
            ++v114[*(unsigned __int8 *)(v17 + v19)];
            ++v114[v20];
            uint64_t v21 = *(unsigned __int8 *)(v17 + v19 + 3);
            ++v114[*(unsigned __int8 *)(v17 + v19 + 2)];
            ++v114[v21];
            v19 += 4;
          }
          while (v19 <= (int)v15 - 4);
          uint64_t v19 = v19;
        }
        else
        {
          uint64_t v19 = 0;
        }
        if ((int)v19 < (int)v15)
        {
          do
            ++v114[*(unsigned __int8 *)(v17 + v19++)];
          while (v15 != v19);
        }
        ++v16;
        v17 += v18;
      }
      while (v16 != v13);
    }
    uint64_t v22 = 0;
    double v23 = 0.0;
    do
    {
      double v23 = v23 + (double)(int)v22 * (double)(int)v114[v22];
      ++v22;
    }
    while (v22 != 256);
    uint64_t v24 = 0;
    double v25 = 1.0 / (double)((int)v15 * (int)v13);
    double v26 = v25 * v23;
    a4 = 0.0;
    double v27 = 0.0;
    double v28 = 0.0;
    double v29 = 0.0;
    do
    {
      double v30 = v25 * (double)(int)v114[v24];
      double v28 = v28 * v29;
      double v29 = v29 + v30;
      double v31 = 1.0 - v29;
      if (1.0 - v29 >= v29) {
        double v32 = v29;
      }
      else {
        double v32 = 1.0 - v29;
      }
      if (v32 >= 0.00000011920929)
      {
        double v33 = v29 >= v31 ? v29 : 1.0 - v29;
        if (v33 <= 0.999999881)
        {
          double v28 = (v28 + (double)(int)v24 * v30) / v29;
          double v34 = (v28 - (v26 - v29 * v28) / v31) * (v29 * v31 * (v28 - (v26 - v29 * v28) / v31));
          if (v34 > v27)
          {
            double v27 = v34;
            a4 = (double)(int)v24;
          }
        }
      }
      ++v24;
    }
    while (v24 != 256);
  }
  else
  {
    unsigned int v10 = *v111;
    int v9 = v111[1];
    __int16 v11 = v104;
  }
  v101[0] = v9;
  v101[1] = v10;
  (*(void (**)(const cv::_InputArray *, _DWORD *, void, uint64_t, void, void))(*(void *)a2 + 128))(a2, v101, v11 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void **__return_ptr, const cv::_InputArray *, uint64_t))a2)(v93, a2, 0xFFFFFFFFLL);
  unsigned int v35 = v5 & 7;
  if ((v104 & 7) == 5) {
    goto LABEL_53;
  }
  if ((v104 & 7) == 3)
  {
    int v39 = (int)a4 - (a4 < (double)(int)a4);
    a4 = (double)v39;
    uint64_t v40 = (uint64_t)rint(a5);
    if (v35 == 2) {
      LODWORD(v40) = v39;
    }
    if ((int)v40 <= -32768) {
      LODWORD(v40) = -32768;
    }
    if ((int)v40 >= 0x7FFF) {
      LODWORD(v40) = 0x7FFF;
    }
    if ((v39 + 0x8000) < 0xFFFF)
    {
      a5 = (double)(__int16)v40;
      goto LABEL_53;
    }
    if (v35 < 2
      || (v35 == 3 ? (BOOL v61 = v39 <= 32766) : (BOOL v61 = 1),
          v61 ? (int v62 = 0) : (int v62 = 1),
          v35 != 4 ? (BOOL v63 = v35 == 2) : (BOOL v63 = 1),
          v63 ? (BOOL v64 = v39 < -32768) : (BOOL v64 = 0),
          !v64 ? (BOOL v65 = v62 == 0) : (BOOL v65 = 0),
          !v65))
    {
      if (v35 == 1)
      {
        if (v39 <= 32766) {
          int v66 = 0;
        }
        else {
          int v66 = v40;
        }
      }
      else if (v35)
      {
        int v66 = 0;
      }
      else if (v39 <= 32766)
      {
        int v66 = v40;
      }
      else
      {
        int v66 = 0;
      }
      goto LABEL_152;
    }
LABEL_144:
    cv::_OutputArray::_OutputArray((uint64_t)v114, (cv::Mat *)v93);
    cv::Mat::copyTo((cv::Mat *)&v104, (const cv::_OutputArray *)v114);
    goto LABEL_83;
  }
  if ((v104 & 7) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v103, "");
    std::string::basic_string[abi:ne180100]<0>(__p, "threshold");
    std::string::basic_string[abi:ne180100]<0>(v92, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/thresh.cpp");
    cv::Exception::Exception(v114, 4294967086, v103, __p, v92, 782);
    cv::error((cv *)v114, v41);
  }
  int v36 = (int)a4 - (a4 < (double)(int)a4);
  a4 = (double)v36;
  uint64_t v37 = (uint64_t)rint(a5);
  if (v35 == 2) {
    LODWORD(v37) = v36;
  }
  int v38 = v37 & ~((int)v37 >> 31);
  if (v38 >= 255) {
    int v38 = 255;
  }
  if (v36 >= 0xFF)
  {
    if (v35 < 2
      || (v35 == 3 ? (BOOL v67 = v36 <= 254) : (BOOL v67 = 1),
          v67 ? (int v68 = 0) : (int v68 = 1),
          v35 != 4 ? (BOOL v69 = v35 == 2) : (BOOL v69 = 1),
          v69 ? (BOOL v70 = v36 < 0) : (BOOL v70 = 0),
          !v70 ? (BOOL v71 = v68 == 0) : (BOOL v71 = 0),
          !v71))
    {
      if (v35 == 1)
      {
        if (v36 <= 254) {
          int v66 = 0;
        }
        else {
          int v66 = v38;
        }
      }
      else if (v35)
      {
        int v66 = 0;
      }
      else if (v36 <= 254)
      {
        int v66 = v38;
      }
      else
      {
        int v66 = 0;
      }
LABEL_152:
      *(double *)double v103 = (double)v66;
      cv::_InputArray::_InputArray((cv::_InputArray *)v114, (const double *)v103);
      float v73 = cv::noArray(v72);
      cv::Mat::setTo((cv::Mat *)v93, (const cv::_InputArray *)v114, (const cv::_InputArray *)v73);
      goto LABEL_83;
    }
    goto LABEL_144;
  }
  a5 = (double)v38;
LABEL_53:
  LODWORD(v103[0]) = 0;
  HIDWORD(v103[0]) = v93[1];
  int v82 = v104;
  uint64_t v83 = v105;
  int v84 = v106;
  long long v86 = v108;
  long long v87 = v109;
  uint64_t v85 = v107;
  uint64_t v88 = v110;
  int v89 = (char *)&v83 + 4;
  double v90 = (cv *)v91;
  v91[0] = 0;
  v91[1] = 0;
  if ((void)v108) {
    atomic_fetch_add((atomic_uint *volatile)v108, 1u);
  }
  if ((int)v105 > 2)
  {
    LODWORD(v83) = 0;
    cv::Mat::copySize((cv::Mat *)&v82, (const cv::Mat *)&v104);
  }
  else
  {
    uint64_t v42 = v112;
    uint64_t v43 = v90;
    *(void *)double v90 = *(void *)v112;
    *((void *)v43 + 1) = *((void *)v42 + 1);
  }
  uint64_t v75 = v94;
  long long v74 = *(_OWORD *)v93;
  long long v76 = v95;
  long long v77 = v96;
  uint64_t v78 = v97;
  double v79 = (char *)&v74 + 8;
  v81[0] = 0;
  v81[1] = 0;
  double v80 = (cv *)v81;
  if ((void)v95) {
    atomic_fetch_add((atomic_uint *volatile)v95, 1u);
  }
  if (SHIDWORD(v93[0]) > 2)
  {
    DWORD1(v74) = 0;
    cv::Mat::copySize((cv::Mat *)&v74, (const cv::Mat *)v93);
  }
  else
  {
    uint64_t v44 = v99;
    uint64_t v45 = v80;
    *(void *)double v80 = *(void *)v99;
    *((void *)v45 + 1) = *((void *)v44 + 1);
  }
  cv::ThresholdRunner::ThresholdRunner((uint64_t)v114, &v82, (uint64_t)&v74, v35, a4, a5);
  uint64_t v46 = HIDWORD(v93[0]);
  if (SHIDWORD(v93[0]) >= 3)
  {
    uint64_t v48 = v98;
    uint64_t v47 = 1;
    do
    {
      uint64_t v49 = *v48++;
      v47 *= v49;
      --v46;
    }
    while (v46);
  }
  else
  {
    uint64_t v47 = SHIDWORD(v93[1]) * (uint64_t)SLODWORD(v93[1]);
  }
  cv::parallel_for_((uint64_t *)v103, (uint64_t)v114, (double)(unint64_t)v47 * 0.0000152587891);
  cv::ThresholdRunner::~ThresholdRunner((cv::ThresholdRunner *)v114, v50);
  if ((void)v76 && atomic_fetch_add((atomic_uint *volatile)v76, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v74, v51);
  }
  uint64_t v75 = 0;
  long long v77 = 0uLL;
  *((void *)&v76 + 1) = 0;
  if (SDWORD1(v74) >= 1)
  {
    uint64_t v52 = 0;
    uint64_t v53 = v79;
    do
      *(_DWORD *)&v53[4 * v52++] = 0;
    while (v52 < SDWORD1(v74));
  }
  *(void *)&long long v76 = 0;
  if (v80 != (cv *)v81) {
    cv::fastFree((void **)v80, v51);
  }
  if ((void)v86 && atomic_fetch_add((atomic_uint *volatile)v86, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v82, v51);
  }
  uint64_t v85 = 0;
  long long v87 = 0uLL;
  *((void *)&v86 + 1) = 0;
  if ((int)v83 >= 1)
  {
    uint64_t v54 = 0;
    uint64_t v55 = v89;
    do
      *(_DWORD *)&v55[4 * v54++] = 0;
    while (v54 < (int)v83);
  }
  *(void *)&long long v86 = 0;
  if (v90 != (cv *)v91) {
    cv::fastFree((void **)v90, v51);
  }
LABEL_83:
  if ((void)v95 && atomic_fetch_add((atomic_uint *volatile)v95, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v93, v51);
  }
  uint64_t v94 = 0;
  *((void *)&v95 + 1) = 0;
  long long v96 = 0uLL;
  if (SHIDWORD(v93[0]) >= 1)
  {
    uint64_t v56 = 0;
    int32x2_t v57 = v98;
    do
      v57[v56++] = 0;
    while (v56 < SHIDWORD(v93[0]));
  }
  *(void *)&long long v95 = 0;
  if (v99 != (cv *)&v100) {
    cv::fastFree((void **)v99, v51);
  }
  if ((void)v108 && atomic_fetch_add((atomic_uint *volatile)v108, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v104, v51);
  }
  uint64_t v107 = 0;
  *((void *)&v108 + 1) = 0;
  long long v109 = 0uLL;
  if ((int)v105 >= 1)
  {
    uint64_t v58 = 0;
    uint64_t v59 = v111;
    do
      v59[v58++] = 0;
    while (v58 < (int)v105);
  }
  *(void *)&long long v108 = 0;
  if (v112 != (cv *)&v113) {
    cv::fastFree((void **)v112, v51);
  }
  return a4;
}

void sub_225EBD980(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,char a56)
{
  cv::Mat::~Mat((cv::Mat *)&a37, a2);
  cv::Mat::~Mat((cv::Mat *)&a56, v57);
  _Unwind_Resume(a1);
}

void sub_225EBDABC()
{
}

uint64_t cv::ThresholdRunner::ThresholdRunner(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, double a5, double a6)
{
  *(void *)a1 = &unk_26D989240;
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = 1124007936;
  __int16 v11 = (cv::Mat *)(a1 + 8);
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 12) = 0u;
  uint64_t v12 = (int *)(a1 + 12);
  *(_OWORD *)(a1 + 2_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 104) = 1124007936;
  uint64_t v13 = (cv::Mat *)(a1 + 104);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 10_Block_object_dispose(&a9, 8) = 0u;
  int v14 = (int *)(a1 + 108);
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  if ((_DWORD *)(a1 + 8) != a2)
  {
    uint64_t v16 = (atomic_uint *)*((void *)a2 + 3);
    if (v16)
    {
      atomic_fetch_add(v16, 1u);
      uint64_t v17 = *(atomic_uint **)(a1 + 32);
      if (v17)
      {
        if (atomic_fetch_add(v17, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 8), a2);
        }
      }
    }
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = 0;
    if (*(int *)(a1 + 12) <= 0)
    {
      *(void *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = *a2;
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)(a1 + 72);
      do
      {
        *(_DWORD *)(v19 + 4 * v18++) = 0;
        uint64_t v20 = *v12;
      }
      while (v18 < v20);
      *(void *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = *a2;
      if ((int)v20 > 2) {
        goto LABEL_14;
      }
    }
    int v21 = a2[1];
    if (v21 <= 2)
    {
      *(_DWORD *)(a1 + 12) = v21;
      *(void *)(a1 + 16) = *((void *)a2 + 1);
      uint64_t v22 = (void *)*((void *)a2 + 9);
      double v23 = *(void **)(a1 + 80);
      *double v23 = *v22;
      v23[1] = v22[1];
LABEL_15:
      *(_OWORD *)(a1 + 40) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 56) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 64) = *((void *)a2 + 7);
      goto LABEL_16;
    }
LABEL_14:
    cv::Mat::copySize(v11, (const cv::Mat *)a2);
    goto LABEL_15;
  }
LABEL_16:
  if (v13 != (cv::Mat *)a3)
  {
    uint64_t v24 = *(atomic_uint **)(a3 + 24);
    if (v24) {
      atomic_fetch_add(v24, 1u);
    }
    double v25 = *(atomic_uint **)(a1 + 128);
    if (v25 && atomic_fetch_add(v25, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate(v13, a2);
    }
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 136) = 0;
    if (*(int *)(a1 + 108) <= 0)
    {
      *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = 0;
      *(_DWORD *)(a1 + 104) = *(_DWORD *)a3;
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = *(void *)(a1 + 168);
      do
      {
        *(_DWORD *)(v27 + 4 * v26++) = 0;
        uint64_t v28 = *v14;
      }
      while (v26 < v28);
      *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = 0;
      *(_DWORD *)(a1 + 104) = *(_DWORD *)a3;
      if ((int)v28 > 2) {
        goto LABEL_30;
      }
    }
    int v29 = *(_DWORD *)(a3 + 4);
    if (v29 <= 2)
    {
      *(_DWORD *)(a1 + 10_Block_object_dispose(&a9, 8) = v29;
      *(void *)(a1 + 112) = *(void *)(a3 + 8);
      double v30 = *(void **)(a3 + 72);
      double v31 = *(void **)(a1 + 176);
      *double v31 = *v30;
      v31[1] = v30[1];
LABEL_31:
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
      *(void *)(a1 + 152) = *(void *)(a3 + 48);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
      *(void *)(a1 + 160) = *(void *)(a3 + 56);
      goto LABEL_32;
    }
LABEL_30:
    cv::Mat::copySize(v13, (const cv::Mat *)a3);
    goto LABEL_31;
  }
LABEL_32:
  *(double *)(a1 + 200) = a5;
  *(double *)(a1 + 20_Block_object_dispose(&a9, 8) = a6;
  *(_DWORD *)(a1 + 216) = a4;
  return a1;
}

void sub_225EBDD8C(_Unwind_Exception *a1, void *a2)
{
  cv::Mat::~Mat(v4, a2);
  cv::Mat::~Mat(v3, v6);
  cv::BaseRowFilter::~BaseRowFilter(v2);
  _Unwind_Resume(a1);
}

void cv::ThresholdRunner::~ThresholdRunner(cv::ThresholdRunner *this, void *a2)
{
  cv::ThresholdRunner::~ThresholdRunner(this, a2);
  JUMPOUT(0x22A641780);
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  atomic_uint *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t vars8;

  *(void *)this = &unk_26D989240;
  int v3 = (atomic_uint *)*((void *)this + 16);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::ThresholdRunner *)((char *)this + 104), a2);
  }
  *((void *)this + 15) = 0;
  *((void *)this + 1_Block_object_dispose(&a9, 8) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 17) = 0;
  if (*((int *)this + 27) >= 1)
  {
    uint64_t v4 = 0;
    char v5 = *((void *)this + 21);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *((int *)this + 27));
  }
  *((void *)this + 16) = 0;
  int v6 = (void **)*((void *)this + 22);
  if (v6 != (void **)((char *)this + 184)) {
    cv::fastFree(v6, a2);
  }
  int v7 = (atomic_uint *)*((void *)this + 4);
  if (v7 && atomic_fetch_add(v7, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::ThresholdRunner *)((char *)this + 8), a2);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
  if (*((int *)this + 3) >= 1)
  {
    size_t v8 = 0;
    int v9 = *((void *)this + 9);
    do
      *(_DWORD *)(v9 + 4 * v8++) = 0;
    while (v8 < *((int *)this + 3));
  }
  *((void *)this + 4) = 0;
  unsigned int v10 = (void **)*((void *)this + 10);
  if (v10 != (void **)((char *)this + 88)) {
    cv::fastFree(v10, a2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

void cv::ThresholdRunner::operator()(uint64_t a1, int *a2)
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  int v4 = a2[1];
  int __b = *a2;
  int v3 = __b;
  int v133 = v4;
  v129[0] = (void *)0x7FFFFFFF80000000;
  cv::Mat::Mat(&v118, a1 + 8, &__b, v129);
  int __b = v3;
  int v133 = v4;
  v129[0] = (void *)0x7FFFFFFF80000000;
  cv::Mat::Mat(&v108, a1 + 104, &__b, v129);
  switch(v118 & 7)
  {
    case 5u:
      int v17 = *v125;
      int v18 = v125[1] + v125[1] * ((v118 >> 3) & 0x1FF);
      if ((v118 & 0x4000) != 0)
      {
        if ((v108 & 0x4000) != 0) {
          int v19 = *v125;
        }
        else {
          int v19 = 1;
        }
        if ((v108 & 0x4000) != 0) {
          int v17 = 1;
        }
        v18 *= v19;
      }
      uint64_t v20 = v120;
      uint64_t v21 = v110;
      float v22 = *(double *)(a1 + 200);
      float v23 = *(double *)(a1 + 208);
      unint64_t v24 = v127 >> 2;
      unint64_t v25 = v117 >> 2;
      switch(*(_DWORD *)(a1 + 216))
      {
        case 0:
          if (v17 >= 1)
          {
            int v26 = 0;
            uint64_t v27 = 4 * v25;
            uint64_t v28 = 4 * v24;
            do
            {
              if (v18 >= 1)
              {
                uint64_t v29 = 0;
                do
                {
                  if (*(float *)(v20 + v29) <= v22) {
                    float v30 = 0.0;
                  }
                  else {
                    float v30 = v23;
                  }
                  *(float *)(v21 + v29) = v30;
                  v29 += 4;
                }
                while (4 * v18 != v29);
              }
              ++v26;
              v21 += v27;
              v20 += v28;
            }
            while (v26 != v17);
          }
          break;
        case 1:
          if (v17 >= 1)
          {
            int v67 = 0;
            uint64_t v68 = 4 * v25;
            uint64_t v69 = 4 * v24;
            do
            {
              if (v18 >= 1)
              {
                uint64_t v70 = 0;
                do
                {
                  if (*(float *)(v20 + v70) > v22) {
                    float v71 = 0.0;
                  }
                  else {
                    float v71 = v23;
                  }
                  *(float *)(v21 + v70) = v71;
                  v70 += 4;
                }
                while (4 * v18 != v70);
              }
              ++v67;
              v21 += v68;
              v20 += v69;
            }
            while (v67 != v17);
          }
          break;
        case 2:
          if (v17 >= 1)
          {
            int v72 = 0;
            uint64_t v73 = 4 * v25;
            uint64_t v74 = 4 * v24;
            do
            {
              if (v18 >= 1)
              {
                uint64_t v75 = 0;
                do
                {
                  float v76 = *(float *)(v20 + v75);
                  if (v76 > v22) {
                    float v76 = v22;
                  }
                  *(float *)(v21 + v75) = v76;
                  v75 += 4;
                }
                while (4 * v18 != v75);
              }
              ++v72;
              v21 += v73;
              v20 += v74;
            }
            while (v72 != v17);
          }
          break;
        case 3:
          if (v17 >= 1)
          {
            int v77 = 0;
            uint64_t v78 = 4 * v25;
            uint64_t v79 = 4 * v24;
            do
            {
              if (v18 >= 1)
              {
                uint64_t v80 = 0;
                do
                {
                  float v81 = *(float *)(v20 + v80);
                  if (v81 <= v22) {
                    float v81 = 0.0;
                  }
                  *(float *)(v21 + v80) = v81;
                  v80 += 4;
                }
                while (4 * v18 != v80);
              }
              ++v77;
              v21 += v78;
              v20 += v79;
            }
            while (v77 != v17);
          }
          break;
        case 4:
          if (v17 >= 1)
          {
            int v82 = 0;
            uint64_t v83 = 4 * v25;
            uint64_t v84 = 4 * v24;
            do
            {
              if (v18 >= 1)
              {
                uint64_t v85 = 0;
                do
                {
                  float v86 = *(float *)(v20 + v85);
                  if (v86 > v22) {
                    float v86 = 0.0;
                  }
                  *(float *)(v21 + v85) = v86;
                  v85 += 4;
                }
                while (4 * v18 != v85);
              }
              ++v82;
              v21 += v83;
              v20 += v84;
            }
            while (v82 != v17);
          }
          break;
        default:
          std::string::basic_string[abi:ne180100]<0>(v129, "");
          std::string::basic_string[abi:ne180100]<0>(v131, "thresh_32f");
          std::string::basic_string[abi:ne180100]<0>(v130, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/thresh.cpp");
          cv::Exception::Exception(&__b, 4294967291, v129, v131, v130, 598);
          cv::error((cv *)&__b, v66);
      }
      break;
    case 3u:
      int v31 = *v125;
      int v32 = v125[1] + v125[1] * ((v118 >> 3) & 0x1FF);
      if ((v118 & 0x4000) != 0)
      {
        if ((v108 & 0x4000) != 0) {
          int v33 = *v125;
        }
        else {
          int v33 = 1;
        }
        if ((v108 & 0x4000) != 0) {
          int v31 = 1;
        }
        v32 *= v33;
      }
      uint64_t v34 = v120;
      int v35 = (int)*(double *)(a1 + 200);
      uint64_t v36 = v110;
      unsigned int v37 = (int)*(double *)(a1 + 208);
      unint64_t v38 = v127 >> 1;
      unint64_t v5 = v117 >> 1;
      switch(*(_DWORD *)(a1 + 216))
      {
        case 0:
          if (v31 >= 1)
          {
            int v39 = 0;
            uint64_t v40 = 2 * v5;
            uint64_t v41 = 2 * v38;
            do
            {
              if (v32 >= 1)
              {
                uint64_t v42 = 0;
                do
                {
                  if (*(__int16 *)(v34 + v42) <= v35) {
                    unint64_t v5 = 0;
                  }
                  else {
                    unint64_t v5 = v37;
                  }
                  *(_WORD *)(v36 + v42) = v5;
                  v42 += 2;
                }
                while (2 * v32 != v42);
              }
              ++v39;
              v36 += v40;
              v34 += v41;
            }
            while (v39 != v31);
          }
          break;
        case 1:
          if (v31 >= 1)
          {
            int v88 = 0;
            uint64_t v89 = 2 * v5;
            uint64_t v90 = 2 * v38;
            do
            {
              if (v32 >= 1)
              {
                uint64_t v91 = 0;
                do
                {
                  if (*(__int16 *)(v34 + v91) <= v35) {
                    unint64_t v5 = v37;
                  }
                  else {
                    unint64_t v5 = 0;
                  }
                  *(_WORD *)(v36 + v91) = v5;
                  v91 += 2;
                }
                while (2 * v32 != v91);
              }
              ++v88;
              v36 += v89;
              v34 += v90;
            }
            while (v88 != v31);
          }
          break;
        case 2:
          if (v31 >= 1)
          {
            int v92 = 0;
            uint64_t v93 = 2 * v38;
            do
            {
              if (v32 >= 1)
              {
                uint64_t v94 = 0;
                do
                {
                  int v95 = *(__int16 *)(v34 + v94);
                  if (v95 >= v35) {
                    LOWORD(v95) = v35;
                  }
                  *(_WORD *)(v36 + v94) = v95;
                  v94 += 2;
                }
                while (2 * v32 != v94);
              }
              ++v92;
              v36 += 2 * v5;
              v34 += v93;
            }
            while (v92 != v31);
          }
          break;
        case 3:
          if (v31 >= 1)
          {
            int v96 = 0;
            uint64_t v97 = 2 * v38;
            do
            {
              if (v32 >= 1)
              {
                uint64_t v98 = 0;
                do
                {
                  int v99 = *(__int16 *)(v34 + v98);
                  if (v99 <= v35) {
                    LOWORD(v99) = 0;
                  }
                  *(_WORD *)(v36 + v9_Block_object_dispose(&a9, 8) = v99;
                  v98 += 2;
                }
                while (2 * v32 != v98);
              }
              ++v96;
              v36 += 2 * v5;
              v34 += v97;
            }
            while (v96 != v31);
          }
          break;
        case 4:
          if (v31 >= 1)
          {
            int v100 = 0;
            uint64_t v101 = 2 * v38;
            do
            {
              if (v32 >= 1)
              {
                uint64_t v102 = 0;
                do
                {
                  int v103 = *(__int16 *)(v34 + v102);
                  if (v103 > v35) {
                    LOWORD(v103) = 0;
                  }
                  *(_WORD *)(v36 + v102) = v103;
                  v102 += 2;
                }
                while (2 * v32 != v102);
              }
              ++v100;
              v36 += 2 * v5;
              v34 += v101;
            }
            while (v100 != v31);
          }
          break;
        default:
          std::string::basic_string[abi:ne180100]<0>(v129, "");
          std::string::basic_string[abi:ne180100]<0>(v131, "thresh_16s");
          std::string::basic_string[abi:ne180100]<0>(v130, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/thresh.cpp");
          cv::Exception::Exception(&__b, 4294967291, v129, v131, v130, 426);
          cv::error((cv *)&__b, v87);
      }
      break;
    case 0u:
      int v6 = *(_DWORD *)(a1 + 216);
      int v7 = *v125;
      int v8 = v125[1] + v125[1] * ((v118 >> 3) & 0x1FF);
      if ((v118 & 0x4000) != 0)
      {
        if ((v108 & 0x4000) != 0) {
          int v9 = *v125;
        }
        else {
          int v9 = 1;
        }
        if ((v108 & 0x4000) != 0) {
          int v7 = 1;
        }
        v8 *= v9;
      }
      double v10 = *(double *)(a1 + 200);
      double v11 = *(double *)(a1 + 208);
      uint64_t v12 = (int)v10;
      int v13 = (int)v11;
      switch(v6)
      {
        case 0:
          bzero(&__b, v12 + 1);
          if (v12 == 255) {
            break;
          }
          int v14 = (char *)&__b + v12 + 1;
          size_t v15 = ~(_BYTE)v12;
          int v16 = v13;
          goto LABEL_59;
        case 1:
          memset(&__b, (int)v11, v12 + 1);
          if (v12 == 255) {
            break;
          }
          uint64_t v44 = (char *)&__b + v12 + 1;
          size_t v45 = ~(_BYTE)v12;
          goto LABEL_69;
        case 2:
          uint64_t v46 = 0;
          uint64_t v47 = (v12 + 1);
          do
          {
            *((unsigned char *)&__b + v46) = v46;
            ++v46;
          }
          while (v12 + 1 != v46);
          if ((v46 - 1) > 0xFE) {
            break;
          }
          int v14 = (char *)&__b + v47;
          if (v47 <= 0xFF) {
            LODWORD(v47) = 255;
          }
          size_t v15 = (v47 + ~v12) + 1;
          int v16 = (int)v10;
LABEL_59:
          memset(v14, v16, v15);
          break;
        case 3:
          uint64_t v48 = v12 + 1;
          bzero(&__b, v12 + 1);
          if (v12 != 255)
          {
            do
            {
              *((unsigned char *)&__b + v4_Block_object_dispose(&a9, 8) = v48;
              ++v48;
            }
            while (v48 != 256);
          }
          break;
        case 4:
          uint64_t v49 = 0;
          uint64_t v50 = (v12 + 1);
          do
          {
            *((unsigned char *)&__b + v49) = v49;
            ++v49;
          }
          while (v50 != v49);
          if ((v49 - 1) > 0xFE) {
            break;
          }
          uint64_t v44 = (char *)&__b + v50;
          if (v50 <= 0xFF) {
            LODWORD(v50) = 255;
          }
          size_t v45 = (v50 + ~v12) + 1;
LABEL_69:
          bzero(v44, v45);
          break;
        default:
          std::string::basic_string[abi:ne180100]<0>(v131, "Unknown threshold type");
          std::string::basic_string[abi:ne180100]<0>(v130, "thresh_8u");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/thresh.cpp");
          cv::Exception::Exception(v129, 4294967291, v131, v130, __p, 100);
          cv::error((cv *)v129, v43);
      }
      if (v8 >= 1 && v7 >= 1)
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          uint64_t v52 = v120;
          unint64_t v53 = v127;
          uint64_t v54 = v110;
          unint64_t v55 = v117;
          if (v8 >= 4)
          {
            uint64_t v57 = 0;
            uint64_t v58 = v120 + v127 * i;
            unint64_t v5 = v110 + v117 * i;
            do
            {
              char v59 = *((unsigned char *)&__b + *(unsigned __int8 *)(v58 + v57 + 1));
              uint64_t v60 = (unsigned char *)(v5 + v57);
              *uint64_t v60 = *((unsigned char *)&__b + *(unsigned __int8 *)(v58 + v57));
              v60[1] = v59;
              char v61 = *((unsigned char *)&__b + *(unsigned __int8 *)(v58 + v57 + 3));
              v60[2] = *((unsigned char *)&__b + *(unsigned __int8 *)(v58 + v57 + 2));
              v60[3] = v61;
              v57 += 4;
            }
            while (v57 <= v8 - 4);
            uint64_t v56 = v57;
          }
          else
          {
            uint64_t v56 = 0;
          }
          if ((int)v56 < v8)
          {
            uint64_t v62 = v8 - v56;
            BOOL v63 = (unsigned char *)(v54 + v56 + v55 * i);
            BOOL v64 = (unsigned __int8 *)(v52 + v56 + v53 * i);
            do
            {
              unsigned int v65 = *v64++;
              *v63++ = *((unsigned char *)&__b + v65);
              --v62;
            }
            while (v62);
          }
        }
      }
      break;
  }
  if (v111 && atomic_fetch_add(v111, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v108, (void *)v5);
  }
  uint64_t v110 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  if (v109 >= 1)
  {
    uint64_t v104 = 0;
    uint64_t v105 = v115;
    do
      *(_DWORD *)(v105 + 4 * v104++) = 0;
    while (v104 < v109);
  }
  double v111 = 0;
  if (v116 != (cv *)&v117) {
    cv::fastFree((void **)v116, (void *)v5);
  }
  if (v121 && atomic_fetch_add(v121, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v118, (void *)v5);
  }
  uint64_t v120 = 0;
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  uint64_t v124 = 0;
  if (v119 >= 1)
  {
    uint64_t v106 = 0;
    uint64_t v107 = v125;
    do
      v107[v106++] = 0;
    while (v106 < v119);
  }
  double v121 = 0;
  if (v126 != (cv *)&v127) {
    cv::fastFree((void **)v126, (void *)v5);
  }
}

void sub_225EBE80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  cv::Exception::~Exception((cv::Exception *)&a67);
  if (a60 < 0) {
    operator delete(__p);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  cv::Mat::~Mat((cv::Mat *)&a10, v68);
  cv::Mat::~Mat((cv::Mat *)&a22, v69);
  _Unwind_Resume(a1);
}

uint64_t cv::detail::LKTrackerInvoker::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2);
  int v5 = *(_DWORD *)(v4 + 64);
  int v6 = *(_DWORD *)(v4 + 68);
  int v7 = *(int **)(v4 + 16);
  uint64_t v177 = *(void *)(v4 + 24);
  double v175 = *(unsigned int **)(v4 + 8);
  unint64_t v8 = *v175;
  uint64_t v9 = (v8 >> 3) & 0x1FF;
  uint64_t v10 = v9 + 1;
  unsigned int v11 = 3 * v5 * v6 * (v9 + 1);
  double v204 = v206;
  uint64_t v205 = 2056;
  double v167 = v3;
  if (v11 >= 0x809)
  {
    uint64_t v205 = (int)v11;
    operator new[]();
  }
  unsigned int v12 = 8 * v10 - 5;
  v194[0] = v6;
  v194[1] = v5;
  double v195 = (int16x8_t *)v206;
  double v196 = 0;
  double v201 = v194;
  double v202 = (cv *)v203;
  int v192 = v12 | 0x42FF4000;
  int v193 = 2;
  v203[0] = (int)((v12 >> 2) + 2) * (uint64_t)v5;
  v203[1] = (v12 >> 2) + 2;
  double v199 = &v206[v203[0] * v6];
  uint64_t v200 = 0;
  double v197 = v206;
  double v198 = v199;
  unsigned int v13 = 16 * v10 - 5;
  v182[0] = v6;
  v182[1] = v5;
  double v183 = &v206[2 * v5 * (int)v10 * v6];
  double v184 = 0;
  double v189 = v182;
  double v190 = (cv *)v191;
  int v180 = v13 & 0xFFF | 0x42FF4000;
  int v181 = 2;
  v191[0] = (int)(((v13 >> 2) & 0x3FE) + 2) * (uint64_t)v5;
  v191[1] = ((v13 >> 2) & 0x3FE) + 2;
  double v187 = &v183[v191[0] * v6];
  uint64_t v188 = 0;
  double v185 = v183;
  double v186 = v187;
  uint64_t v14 = *v3;
  if ((int)v14 < v3[1])
  {
    int v15 = 2 * v10;
    float v16 = (float)(v5 - 1) * 0.5;
    float v17 = (float)(v6 - 1) * 0.5;
    int v176 = v9 + 1;
    uint64_t v18 = 4 * ((v8 >> 3) & 0x1FF) + 6;
    v19.i64[0] = 0x800000008;
    v19.i64[1] = 0x800000008;
    v20.i64[0] = 0xD0000000DLL;
    v20.i64[1] = 0xD0000000DLL;
    double v168 = v7;
    while (1)
    {
      int v21 = *(_DWORD *)(v4 + 88);
      float v22 = 1.0 / (double)(1 << v21);
      float32x2_t v23 = vmul_n_f32(*(float32x2_t *)(*(void *)(v4 + 32) + 8 * v14), v22);
      if (v21 != *(_DWORD *)(v4 + 92)) {
        break;
      }
      uint64_t v24 = *(void *)(v4 + 40);
      float32x2_t v25 = v23;
      if ((*(unsigned char *)(v4 + 96) & 4) != 0) {
        goto LABEL_9;
      }
LABEL_10:
      *(float32x2_t *)(v24 + 8 * v14) = v25;
      float v26 = v23.f32[0] - v16;
      v23.f32[0] = v23.f32[1] - v17;
      int v27 = (int)v26 - ((double)(int)v26 > v26);
      int v28 = *(_DWORD *)(v4 + 64);
      if (v27 < -v28
        || v27 >= *(_DWORD *)(v177 + 12)
        || (int v29 = (int)(float)(v23.f32[1] - v17) - ((double)(int)v23.f32[0] > v23.f32[0]),
            LODWORD(v30) = *(_DWORD *)(v4 + 68),
            v29 < -(int)v30)
        || v29 >= *(_DWORD *)(v177 + 8))
      {
        if (!v21)
        {
          uint64_t v70 = *(void *)(v4 + 48);
          if (v70) {
            *(unsigned char *)(v70 + v14) = 0;
          }
          uint64_t v71 = *(void *)(v4 + 56);
          if (v71) {
            *(_DWORD *)(v71 + 4 * v14) = 0;
          }
        }
      }
      else
      {
        unint64_t v31 = *((void *)v7 + 10);
        int v32 = *v7;
        uint64_t v169 = v14;
        if ((int)v30 < 1)
        {
          float32x2_t v45 = 0;
          float v47 = 0.0;
          int32x4_t v49 = 0uLL;
          int32x4_t v48 = 0uLL;
          int32x4_t v46 = 0uLL;
        }
        else
        {
          int v166 = *v7;
          unint64_t v170 = *((void *)v7 + 10);
          uint64_t v33 = 0;
          float v34 = v26 - (float)v27;
          float v35 = v23.f32[0] - (float)v29;
          uint64_t v36 = (uint64_t)rint((float)((float)((float)(1.0 - v34) * (float)(1.0 - v35)) * 16384.0));
          uint64_t v37 = (uint64_t)rint((float)((float)(v34 * (float)(1.0 - v35)) * 16384.0));
          uint64_t v38 = (uint64_t)rint((float)((float)(v35 * (float)(1.0 - v34)) * 16384.0));
          __int32 v39 = 0x4000 - v38 - (v37 + v36);
          v2.i32[0] = v39;
          unint64_t v40 = *(void *)(v177 + 80) / ((0x88442211uLL >> (4 * (*(_DWORD *)v177 & 7u))) & 0xF);
          uint64_t v178 = (int)v10 * (uint64_t)v27;
          uint64_t v173 = v27 * v15;
          uint64_t v41 = (int)v40;
          uint64_t v42 = v15 + (int)v40;
          uint64_t v43 = (int)v40 + 1;
          uint64_t v44 = (int)(*((void *)v175 + 10) / ((0x88442211uLL >> (4 * (*v175 & 7))) & 0xF));
          uint64_t v172 = v29;
          float32x2_t v45 = 0;
          int32x4_t v46 = 0uLL;
          float v47 = 0.0;
          int32x4_t v48 = 0uLL;
          int32x4_t v49 = 0uLL;
          do
          {
            uint64_t v50 = *((void *)v175 + 2) + (v33 + v172) * v44 + v178;
            uint64_t v51 = (const __int16 *)(*(void *)(v177 + 16) + 2 * (v33 + v172) * v41 + 2 * v173);
            uint64_t v52 = v195;
            uint64_t v53 = v203[0];
            uint64_t v54 = (__int16 *)&v183[v191[0] * v33];
            int v55 = v28 * v10;
            if (v28 * (int)v10 >= 4)
            {
              uint64_t v56 = 0;
              uint64_t v57 = (int16x4_t *)&v195->i8[v203[0] * v33];
              uint64_t v58 = (const __int16 *)(*(void *)(v177 + 16) + 2 * (v33 + v172) * v41 + 2 * v173);
              do
              {
                int32x4_t v207 = (int32x4_t)vld2_s16(v58);
                v58 += 8;
                char v59 = &v51[2 * v10];
                int16x4x2_t v208 = vld2_s16(v59);
                *v57++ = vmovn_s32(vqrshlq_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)(v50 + (v10 + v56))), (int16x4_t)v37, 0), (int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)(v50 + v56)), (int16x4_t)v36, 0), (int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)(v50 + v56 + v44)), (int16x4_t)v38, 0), (int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)(v50 + v56 + v44 + v10)), v2, 0), v19));
                uint64_t v60 = &v51[v41];
                int16x4x2_t v209 = vld2_s16(v60);
                char v61 = &v51[v42];
                int16x4x2_t v210 = vld2_s16(v61);
                int32x4_t v62 = vqrshlq_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v208.val[0], (int16x4_t)v37, 0), *(int16x4_t *)v207.i8, (int16x4_t)v36, 0), v209.val[0], (int16x4_t)v38, 0), v210.val[0], v2, 0), v20);
                int32x4_t v207 = vqrshlq_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v208.val[1], (int16x4_t)v37, 0), (int16x4_t)v207.u64[1], (int16x4_t)v36, 0), v209.val[1], (int16x4_t)v38, 0), v210.val[1], v2, 0), v20);
                int32x4_t v46 = vmlaq_s32(v46, v62, v62);
                int32x4_t v48 = vmlaq_s32(v48, v207, v62);
                v207.u64[1] = (unint64_t)vmovn_s32(v62);
                v208.val[0] = vmovn_s32(v207);
                vst2_s16(v54, *(int16x4x2_t *)((char *)&v207 + 8));
                v54 += 8;
                int32x4_t v49 = vmlaq_s32(v49, v207, v207);
                v56 += 4;
                int v28 = *(_DWORD *)(v4 + 64);
                int v55 = v28 * v10;
                uint64_t v51 = v58;
              }
              while (v56 <= v28 * (int)v10 - 4);
            }
            else
            {
              LODWORD(v56) = 0;
            }
            if ((int)v56 < v55)
            {
              uint64_t v63 = v56;
              unsigned int v64 = v176 + v56;
              unsigned int v65 = (__int16 *)((char *)&v52->i16[v56] + v53 * v33);
              unint64_t v66 = v55 - (unint64_t)v56;
              int v67 = v54 + 1;
              do
              {
                int v68 = (*(const __int16 *)((char *)v51 + v18 - 2) * (int)v37
                     + *v51 * (int)v36
                     + v51[v41] * (int)v38
                     + v39 * v51[v42]
                     + 0x2000) >> 14;
                int v69 = *(const __int16 *)((char *)v51 + v18) * v37
                    + v51[1] * v36
                    + v51[v43] * v38
                    + v39 * v51[v42 + 1]
                    + 0x2000;
                *v65++ = (*(unsigned __int8 *)(v50 + v64) * v37
                        + *(unsigned __int8 *)(v50 + v63) * v36
                        + *(unsigned __int8 *)(v50 + v63 + v44) * v38
                        + v39 * *(unsigned __int8 *)(v50 + v63 + v44 + v10)
                        + 256) >> 9;
                *(v67 - 1) = v68;
                *int v67 = v69 >> 14;
                v67 += 2;
                float v47 = v47 + (float)((v69 >> 14) * v68);
                ++v63;
                float32x2_t v45 = vadd_f32(v45, vcvt_f32_s32(vmul_s32((int32x2_t)__PAIR64__(v69 >> 14, v68), (int32x2_t)__PAIR64__(v69 >> 14, v68))));
                v51 += 2;
                ++v64;
                --v66;
              }
              while (v66);
            }
            ++v33;
            uint64_t v30 = *(int *)(v4 + 68);
          }
          while (v33 < v30);
          int v3 = v167;
          int v7 = v168;
          uint64_t v14 = v169;
          unint64_t v31 = v170;
          LOBYTE(v32) = v166;
        }
        int32x2_t v72 = (int32x2_t)vaddq_s32(vaddq_s32(v48, vdupq_lane_s32(*(int32x2_t *)v48.i8, 1)), vaddq_s32(vdupq_laneq_s32(v48, 2), vdupq_laneq_s32(v48, 3))).u64[0];
        *(float *)v72.i32 = (float)(v47 + (float)v72.i32[0]) * 0.00000095367;
        int32x2_t v73 = vadd_s32(vzip1_s32(*(int32x2_t *)v46.i8, *(int32x2_t *)v49.i8), vzip2_s32(*(int32x2_t *)v46.i8, *(int32x2_t *)v49.i8));
        int32x2_t v74 = (int32x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
        int32x2_t v75 = (int32x2_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
        float32x2_t v76 = vadd_f32(v45, vcvt_f32_s32(vadd_s32(vadd_s32(v73, vzip1_s32(v75, v74)), vzip2_s32(v75, v74))));
        float32x2_t v77 = (float32x2_t)vdup_n_s32(0x35800000u);
        float32x2_t v78 = vmul_f32(v76, v77);
        float v79 = (float)(vaddv_f32(v78)
                    - sqrtf((float)(*(float *)v72.i32 * (float)(*(float *)v72.i32 * 4.0))+ (float)((float)(v78.f32[0] - v78.f32[1]) * (float)(v78.f32[0] - v78.f32[1]))))/ (float)(2 * v30 * v28);
        uint64_t v80 = *(void *)(v4 + 56);
        if (v80 && (*(unsigned char *)(v4 + 96) & 8) != 0) {
          *(float *)(v80 + 4 * v14) = v79;
        }
        float v81 = vmlas_n_f32(-(float)(*(float *)v72.i32 * *(float *)v72.i32), v78.f32[1], v78.f32[0]);
        if (v79 < *(float *)(v4 + 100) || v81 < 0.00000011921)
        {
          if (!*(_DWORD *)(v4 + 88))
          {
            uint64_t v83 = *(void *)(v4 + 48);
            if (v83) {
              *(unsigned char *)(v83 + v14) = 0;
            }
          }
        }
        else
        {
          unint64_t v164 = v31 / ((0x88442211uLL >> (4 * (v32 & 7u))) & 0xF);
          int v165 = *(_DWORD *)(v4 + 76);
          if (v165 >= 1)
          {
            int v84 = 0;
            float v85 = v25.f32[1] - v17;
            float v86 = v25.f32[0] - v16;
            double v174 = v195;
            uint64_t v87 = v203[0];
            double v179 = v183;
            uint64_t v88 = v191[0];
            float32x2_t v89 = vneg_f32(v78);
            uint64_t v90 = v28 * (int)v10;
            float32x2_t v91 = (float32x2_t)vdup_lane_s32(v72, 0);
            float32x2_t v92 = 0;
            float v93 = 1.0 / v81;
            while (1)
            {
              float32x2_t v94 = v92;
              int v95 = (int)v86 - ((double)(int)v86 > v86);
              if (v95 < -v28) {
                break;
              }
              int v96 = (int)v85 - ((double)(int)v85 > v85);
              BOOL v97 = v95 >= v7[3] || v96 < -(int)v30;
              if (v97 || v96 >= v7[2]) {
                break;
              }
              int v171 = v84;
              if ((int)v30 < 1)
              {
                float32x2_t v106 = 0;
                int32x4_t v109 = 0uLL;
                int32x4_t v107 = 0uLL;
              }
              else
              {
                uint64_t v98 = 0;
                float v99 = v86 - (float)v95;
                float v100 = v85 - (float)v96;
                uint64_t v101 = (uint64_t)rint((float)((float)((float)(1.0 - v99) * (float)(1.0 - v100)) * 16384.0));
                uint64_t v102 = (uint64_t)rint((float)((float)(v99 * (float)(1.0 - v100)) * 16384.0));
                uint64_t v103 = (uint64_t)rint((float)((float)((float)(1.0 - v99) * v100) * 16384.0));
                v2.i32[0] = 0x4000 - v101 - (v103 + v102);
                uint64_t v104 = *((void *)v7 + 2) + (int)v10 * (uint64_t)v95;
                uint64_t v105 = v96;
                float32x2_t v106 = 0;
                int32x4_t v107 = 0uLL;
                int v108 = v174;
                int32x4_t v109 = 0uLL;
                do
                {
                  uint64_t v110 = v104 + (v98 + v105) * (int)v164;
                  double v111 = (const __int16 *)&v179[v88 * v98];
                  if ((int)v90 >= 8)
                  {
                    uint64_t v113 = 0;
                    uint64_t v114 = v108;
                    do
                    {
                      int16x8_t v115 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v110 + v113));
                      int16x8_t v116 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v110 + (v10 + v113)));
                      int16x8_t v117 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v110 + v113 + (int)v164));
                      int16x8_t v118 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v110 + v113 + (int)v164 + v10));
                      int32x4_t v119 = vmull_lane_s16(*(int16x4_t *)v116.i8, (int16x4_t)v102, 0);
                      int16x8_t v120 = *v114++;
                      int32x4_t v121 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v116, (int16x4_t)v102, 0), v115, (int16x4_t)v101, 0), v117, (int16x4_t)v103, 0), v118, v2, 0);
                      int32x4_t v122 = vqrshlq_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(v119, *(int16x4_t *)v115.i8, (int16x4_t)v101, 0), *(int16x4_t *)v117.i8, (int16x4_t)v103, 0), *(int16x4_t *)v118.i8, v2, 0), v19);
                      int16x8x2_t v211 = vld2q_s16(v111);
                      v111 += 16;
                      int32x4_t v123 = vsubw_s16(v122, *(int16x4_t *)v120.i8);
                      int32x4_t v124 = vsubw_high_s16(vqrshlq_s32(v121, v19), v120);
                      int32x4_t v109 = vmlaq_s32(vmlaq_s32(v109, v124, vmovl_high_s16(v211.val[0])), v123, vmovl_s16(*(int16x4_t *)v211.val[0].i8));
                      int32x4_t v107 = vmlaq_s32(vmlaq_s32(v107, v124, vmovl_high_s16(v211.val[1])), v123, vmovl_s16(*(int16x4_t *)v211.val[1].i8));
                      v113 += 8;
                    }
                    while (v113 <= v28 * (int)v10 - 8);
                    int v112 = ((v28 * v10 - 8) & 0xFFFFFFF8) + 8;
                  }
                  else
                  {
                    int v112 = 0;
                  }
                  if (v112 < (int)v90)
                  {
                    uint64_t v125 = v112;
                    unsigned int v126 = v176 + v112;
                    do
                    {
                      v127.i32[0] = *v111;
                      v127.i32[1] = v111[1];
                      float32x2_t v106 = vadd_f32(v106, vcvt_f32_s32(vmul_s32(vdup_n_s32(((int)(*(unsigned __int8 *)(v110 + v126) * v102+ *(unsigned __int8 *)(v110 + v125) * v101+ *(unsigned __int8 *)(v110 + v125 + (int)v164) * v103+ (0x4000 - v101 - (v103 + v102))* *(unsigned __int8 *)(v110 + v125 + (int)v164 + v10)+ 256) >> 9)- *(__int16 *)((char *)&v174->i16[v125] + v87 * v98)), v127)));
                      ++v125;
                      v111 += 2;
                      ++v126;
                    }
                    while (v90 != v125);
                  }
                  ++v98;
                  int v108 = (int16x8_t *)((char *)v108 + v87);
                }
                while (v98 != v30);
              }
              float32x2_t v128 = vmul_f32(vadd_f32(v106, vcvt_f32_s32((int32x2_t)__PAIR64__(vaddvq_s32(v107), vaddvq_s32(v109)))), v77);
              float32x2_t v92 = vmul_n_f32(vmla_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v128), v89), v128, v91), v93);
              float v86 = v86 + v92.f32[1];
              float v85 = v85 + v92.f32[0];
              uint64_t v129 = *(void *)(v4 + 40);
              int v7 = v168;
              uint64_t v14 = v169;
              double v130 = (float *)(v129 + 8 * v169);
              float *v130 = v16 + v86;
              v130[1] = v17 + v85;
              double v131 = v130 + 1;
              if (v92.f32[0] * v92.f32[0] + v92.f32[1] * v92.f32[1] <= *(double *)(v4 + 80)) {
                goto LABEL_75;
              }
              if (v171)
              {
                float32x2_t v132 = vadd_f32(v94, v92);
                if (fabsf(v132.f32[1]) < 0.01 && fabsf(v132.f32[0]) < 0.01)
                {
                  *(float *)(v129 + 8 * v169) = (float)(v16 + v86) - (float)(v92.f32[1] * 0.5);
                  float *v131 = (float)(v17 + v85) - (float)(v92.f32[0] * 0.5);
                  goto LABEL_75;
                }
              }
              int v84 = v171 + 1;
              if (v171 + 1 == v165) {
                goto LABEL_75;
              }
            }
            if (!*(_DWORD *)(v4 + 88))
            {
              uint64_t v133 = *(void *)(v4 + 48);
              if (v133) {
                *(unsigned char *)(v133 + v14) = 0;
              }
            }
          }
LABEL_75:
          uint64_t v134 = *(void *)(v4 + 48);
          int v3 = v167;
          if (*(unsigned char *)(v134 + v14))
          {
            uint64_t v135 = *(void *)(v4 + 56);
            if (v135)
            {
              if (!*(_DWORD *)(v4 + 88) && (*(unsigned char *)(v4 + 96) & 8) == 0)
              {
                double v136 = (float *)(*(void *)(v4 + 40) + 8 * v14);
                float v137 = *v136 - v16;
                float v138 = v136[1] - v17;
                int v139 = (int)v137 - ((double)(int)v137 > v137);
                int v140 = *(_DWORD *)(v4 + 64);
                if (v139 < -v140
                  || v139 >= v7[3]
                  || (int v141 = (int)v138 - ((double)(int)v138 > v138), v142 = *(unsigned int *)(v4 + 68),
                                                                     v141 < -(int)v142)
                  || v141 >= v7[2])
                {
                  *(unsigned char *)(v134 + v14) = 0;
                }
                else
                {
                  if ((int)v142 < 1)
                  {
                    float v151 = 0.0;
                  }
                  else
                  {
                    uint64_t v143 = 0;
                    float v144 = v137 - (float)v139;
                    float v145 = v138 - (float)v141;
                    uint64_t v146 = (uint64_t)rint((float)((float)((float)(1.0 - v144) * (float)(1.0 - v145)) * 16384.0));
                    uint64_t v147 = (uint64_t)rint((float)((float)(v144 * (float)(1.0 - v145)) * 16384.0));
                    uint64_t v148 = (uint64_t)rint((float)((float)((float)(1.0 - v144) * v145) * 16384.0));
                    uint64_t v149 = *((void *)v7 + 2) + (int)v10 * (uint64_t)v139;
                    double v150 = v195;
                    float v151 = 0.0;
                    do
                    {
                      if (v140 * (int)v10 >= 1)
                      {
                        uint64_t v152 = 0;
                        uint64_t v154 = 2 * (v140 * v10);
                        float v155 = v150;
                        unsigned int v156 = v10;
                        do
                        {
                          int v157 = v155->i16[0];
                          float v155 = (int16x8_t *)((char *)v155 + 2);
                          uint64_t v153 = v149 + (v143 + v141) * (int)v164;
                          float v151 = v151
                               + fabsf((float)(((int)(*(unsigned __int8 *)(v153 + v156) * v147
                                                    + *(unsigned __int8 *)(v153 + v152) * v146
                                                    + *(unsigned __int8 *)(v153 + v152 + (int)v164) * v148
                                                    + (0x4000 - v146 - (v148 + v147))
                                                    * *(unsigned __int8 *)(v153 + v152 + (int)v164 + v10)
                                                    + 256) >> 9)
                                             - v157));
                          ++v152;
                          ++v156;
                          v154 -= 2;
                        }
                        while (v154);
                      }
                      ++v143;
                      double v150 = (int16x8_t *)((char *)v150 + v203[0]);
                    }
                    while (v143 != v142);
                  }
                  int v7 = v168;
                  uint64_t v14 = v169;
                  *(float *)(v135 + 4 * v169) = v151 / (float)(32 * v10 * v140 * v142);
                  int v3 = v167;
                }
              }
            }
          }
        }
      }
      if (++v14 >= v3[1])
      {
        if (v184 && atomic_fetch_add(v184, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)&v180, v3);
        }
        goto LABEL_96;
      }
    }
    uint64_t v24 = *(void *)(v4 + 40);
    float v22 = 2.0;
LABEL_9:
    float32x2_t v25 = vmul_n_f32(*(float32x2_t *)(v24 + 8 * v14), v22);
    goto LABEL_10;
  }
LABEL_96:
  double v183 = 0;
  double v186 = 0;
  double v187 = 0;
  double v185 = 0;
  if (v181 >= 1)
  {
    uint64_t v158 = 0;
    float v159 = v189;
    do
      v159[v158++] = 0;
    while (v158 < v181);
  }
  double v184 = 0;
  if (v190 != (cv *)v191) {
    cv::fastFree((void **)v190, v3);
  }
  if (v196 && atomic_fetch_add(v196, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v192, v3);
  }
  double v195 = 0;
  double v198 = 0;
  double v199 = 0;
  double v197 = 0;
  if (v193 >= 1)
  {
    uint64_t v160 = 0;
    double v161 = v201;
    do
      v161[v160++] = 0;
    while (v160 < v193);
  }
  double v196 = 0;
  if (v202 != (cv *)v203) {
    cv::fastFree((void **)v202, v3);
  }
  uint64_t result = (uint64_t)v204;
  if (v204 != v206 && v204 != 0) {
    return MEMORY[0x22A641760]();
  }
  return result;
}

uint64_t cv::buildOpticalFlowPyramid(void (***a1)(uint64_t *__return_ptr), uint64_t a2, int *a3, unsigned int a4, int a5, int a6, int a7, int a8)
{
  v126[5] = *MEMORY[0x263EF8340];
  (**a1)(&v105);
  if ((v105 & 7) != 0 || *a3 < 3 || a3[1] <= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v99, "img.depth() == CV_8U && winSize.width > 2 && winSize.height > 2");
    std::string::basic_string[abi:ne180100]<0>(v115, "buildOpticalFlowPyramid");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    unsigned int v12 = (cv *)cv::Exception::Exception(v122, 4294967081, v99, v115, __p, 740);
    cv::error(v12, v13);
  }
  (*(void (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, void))(*(void *)a2 + 136))(a2, 1, (a4 + 1) << a5, 0, 0xFFFFFFFFLL, 1, 0);
  unsigned int v14 = v105;
  if (!a8
    || (a6 & 0x10) != 0
    || (v105 & 0x8000) == 0
    || (*(void *)int32x4_t v122 = 0, v99[0] = 0, cv::Mat::locateROI((uint64_t)&v105, v122, v99), SLODWORD(v99[0]) < *a3)
    || (int v15 = a3[1], SHIDWORD(v99[0]) < v15)
    || *a3 + LODWORD(v99[0]) + HIDWORD(v106) > v122[0]
    || v15 + HIDWORD(v99[0]) + (int)v106 > v122[1])
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 120))(a2, 0);
    uint64_t v17 = v16;
    if (*(void *)(v16 + 16))
    {
      uint64_t v18 = *(unsigned int *)(v16 + 4);
      if ((int)v18 >= 3)
      {
        int32x4_t v20 = *(int **)(v16 + 64);
        uint64_t v19 = 1;
        do
        {
          uint64_t v21 = *v20++;
          v19 *= v21;
          --v18;
        }
        while (v18);
      }
      else
      {
        uint64_t v19 = *(int *)(v16 + 12) * (uint64_t)*(int *)(v16 + 8);
      }
      if (v19) {
        cv::Mat::adjustROI((cv::Mat *)v16, a3[1], a3[1], *a3, *a3);
      }
    }
    int v22 = v105 & 0xFFF;
    int v23 = *a3;
    if ((*(_DWORD *)v17 & 0xFFF) == v22)
    {
      int v24 = *(_DWORD *)(v17 + 12);
      int v25 = HIDWORD(v106) + 2 * v23;
      if (v24 == v25 && *(_DWORD *)(v17 + 8) == v106 + 2 * a3[1])
      {
LABEL_29:
        if (a6 == 5)
        {
          v26.i64[0] = *(void *)a3;
          v26.i64[1] = v106;
          int32x4_t v27 = vrev64q_s32(v26);
          v27.i64[0] = *(void *)a3;
          *(int32x4_t *)int16x8_t v115 = v27;
          cv::Mat::Mat(v122, v17, v115);
          cv::_OutputArray::_OutputArray((uint64_t)v99, (const cv::Mat *)v122);
          cv::Mat::copyTo((cv::Mat *)&v105, (const cv::_OutputArray *)v99);
          if (*(void *)&v123[8] && atomic_fetch_add(*(atomic_uint *volatile *)&v123[8], 0xFFFFFFFF) == 1) {
            cv::Mat::deallocate((cv::Mat *)v122, v28);
          }
          *(void *)int32x4_t v123 = 0;
          memset(&v123[16], 0, 24);
          if (v122[1] >= 1)
          {
            uint64_t v29 = 0;
            uint64_t v30 = v124;
            do
              v30[v29++] = 0;
            while (v29 < v122[1]);
          }
          *(void *)&v123[8] = 0;
          if (v125 != v126) {
            cv::fastFree(v125, v28);
          }
        }
        else
        {
          cv::_InputArray::_InputArray((uint64_t)v122, (const cv::Mat *)&v105);
          cv::_OutputArray::_OutputArray((uint64_t)v99, (cv::Mat *)v17);
          *(_OWORD *)int16x8_t v115 = 0u;
          *(_OWORD *)int16x8_t v116 = 0u;
          cv::copyMakeBorder((uint64_t)v122, (uint64_t)v99);
        }
        cv::Mat::adjustROI((cv::Mat *)v17, -a3[1], -a3[1], -*a3, -*a3);
        goto LABEL_40;
      }
    }
    else
    {
      int v24 = *(_DWORD *)(v17 + 12);
      int v25 = HIDWORD(v106) + 2 * v23;
    }
    if ((*(_DWORD *)v17 & 0xFFF) != v22
      || *(int *)(v17 + 4) > 2
      || *(_DWORD *)(v17 + 8) != v106 + 2 * a3[1]
      || v24 != v25
      || !*(void *)(v17 + 16))
    {
      v122[0] = v106 + 2 * a3[1];
      v122[1] = v25;
      cv::Mat::create((cv::Mat *)v17, (cv::Mat *)2, v122, v22);
    }
    goto LABEL_29;
  }
  float32x2_t v92 = (cv::Mat *)(*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 120))(a2, 0);
  cv::Mat::operator=(v92, (cv::Mat *)&v105);
LABEL_40:
  unint64_t v104 = (unint64_t)vrev64_s32(*v112);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 120))(a2, 0);
  int v32 = (void *)v31;
  *(_OWORD *)int32x4_t v122 = *(_OWORD *)v31;
  uint64_t v33 = *(void *)(v31 + 16);
  long long v34 = *(_OWORD *)(v31 + 24);
  *(_OWORD *)&v123[8] = v34;
  *(_OWORD *)&v123[24] = *(_OWORD *)(v31 + 40);
  uint64_t v35 = *(void *)(v31 + 56);
  *(void *)int32x4_t v123 = v33;
  *(void *)&v123[40] = v35;
  int32x4_t v124 = &v122[2];
  uint64_t v125 = (void **)v126;
  v126[0] = 0;
  v126[1] = 0;
  if ((void)v34) {
    atomic_fetch_add((atomic_uint *volatile)v34, 1u);
  }
  if (*(int *)(v31 + 4) > 2)
  {
    v122[1] = 0;
    cv::Mat::copySize((cv::Mat *)v122, (const cv::Mat *)v31);
  }
  else
  {
    uint64_t v36 = *(void *)(v31 + 72);
    uint64_t v37 = v125;
    int *v125 = *(void **)v36;
    v37[1] = *(void **)(v36 + 8);
  }
  *(void *)float v100 = *(void *)v123;
  *(_OWORD *)float v99 = *(_OWORD *)v122;
  *(_OWORD *)&v100[8] = *(_OWORD *)&v123[8];
  *(_OWORD *)&v100[24] = *(_OWORD *)&v123[24];
  *(void *)&v100[40] = *(void *)&v123[40];
  uint64_t v101 = &v99[1];
  v103[0] = 0;
  v103[1] = 0;
  uint64_t v102 = (cv *)v103;
  if (*(void *)&v123[8]) {
    atomic_fetch_add(*(atomic_uint *volatile *)&v123[8], 1u);
  }
  if (v122[1] > 2)
  {
    HIDWORD(v99[0]) = 0;
    cv::Mat::copySize((cv::Mat *)v99, (const cv::Mat *)v122);
  }
  else
  {
    uint64_t v38 = v125;
    __int32 v39 = v102;
    *(void *)uint64_t v102 = *v125;
    *((void *)v39 + 1) = v38[1];
  }
  if ((a4 & 0x80000000) != 0)
  {
    unsigned int v40 = 0;
    goto LABEL_161;
  }
  unsigned int v40 = 0;
  int v93 = (16 * ((v14 >> 3) & 0x1FF)) & 0xFF0 | 0xB;
  while (1)
  {
    if (!v40) {
      goto LABEL_100;
    }
    uint64_t v41 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 120))(a2, v40 << a5);
    uint64_t v42 = v41;
    if (*(void *)(v41 + 16))
    {
      uint64_t v43 = *(unsigned int *)(v41 + 4);
      if ((int)v43 >= 3)
      {
        float32x2_t v45 = *(int **)(v41 + 64);
        uint64_t v44 = 1;
        do
        {
          uint64_t v46 = *v45++;
          v44 *= v46;
          --v43;
        }
        while (v43);
      }
      else
      {
        uint64_t v44 = *(int *)(v41 + 12) * (uint64_t)*(int *)(v41 + 8);
      }
      if (v44) {
        cv::Mat::adjustROI((cv::Mat *)v41, a3[1], a3[1], *a3, *a3);
      }
    }
    int v47 = v105 & 0xFFF;
    if ((*(_DWORD *)v42 & 0xFFF) == v47)
    {
      int v48 = *(_DWORD *)(v42 + 12);
      unsigned int v50 = v104 + 2 * *(void *)a3;
      *(void *)&long long v49 = *(void *)a3;
      *((void *)&v49 + 1) = v104;
      if (*(void *)(v42 + 8) == __PAIR64__(v50, HIDWORD(v104) + 2 * HIDWORD(*(void *)a3)))
      {
        *((void *)&v51 + 1) = v104;
        *(void *)&long long v51 = *(void *)a3;
        long long v49 = v51;
        goto LABEL_75;
      }
    }
    else
    {
      *(void *)&long long v49 = *(void *)a3;
      int v48 = *(_DWORD *)(v42 + 12);
      *((void *)&v49 + 1) = v104;
      unsigned int v50 = v104 + 2 * *(void *)a3;
    }
    if ((*(_DWORD *)v42 & 0xFFF) != v47
      || *(int *)(v42 + 4) > 2
      || (*(_DWORD *)(v42 + 8) == HIDWORD(v49) + 2 * DWORD1(v49) ? (BOOL v52 = v48 == v50) : (BOOL v52 = 0),
          v52 ? (BOOL v53 = *(void *)(v42 + 16) == 0) : (BOOL v53 = 1),
          v53))
    {
      LODWORD(v115[0]) = HIDWORD(v49) + 2 * DWORD1(v49);
      HIDWORD(v115[0]) = v50;
      cv::Mat::create((cv::Mat *)v42, (cv::Mat *)2, (const int *)v115, v47);
      *(void *)&long long v49 = *(void *)a3;
      *((void *)&v49 + 1) = v104;
    }
LABEL_75:
    *(_OWORD *)__p = v49;
    cv::Mat::Mat(v115, v42, __p);
    if (*(void *)&v116[8]) {
      atomic_fetch_add(*(atomic_uint *volatile *)&v116[8], 1u);
    }
    if (*(void *)&v100[8] && atomic_fetch_add(*(atomic_uint *volatile *)&v100[8], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v99, v54);
    }
    *(void *)float v100 = 0;
    memset(&v100[16], 0, 24);
    if ((uint64_t)v99[0] <= 0)
    {
      *(void *)&v100[8] = 0;
      LODWORD(v99[0]) = v115[0];
    }
    else
    {
      uint64_t v55 = 0;
      uint64_t v56 = v101;
      do
        *((_DWORD *)v56 + v55++) = 0;
      while (v55 < SHIDWORD(v99[0]));
      *(void *)&v100[8] = 0;
      LODWORD(v99[0]) = v115[0];
      if (SHIDWORD(v99[0]) > 2) {
        goto LABEL_88;
      }
    }
    if (SHIDWORD(v115[0]) <= 2)
    {
      HIDWORD(v99[0]) = HIDWORD(v115[0]);
      v99[1] = v115[1];
      uint64_t v57 = v120;
      uint64_t v58 = v102;
      *(void *)uint64_t v102 = *(void *)v120;
      *((void *)v58 + 1) = *((void *)v57 + 1);
      goto LABEL_89;
    }
LABEL_88:
    cv::Mat::copySize((cv::Mat *)v99, (const cv::Mat *)v115);
LABEL_89:
    *(void *)float v100 = *(void *)v116;
    *(_OWORD *)&v100[24] = v117;
    *(_OWORD *)&v100[8] = *(_OWORD *)&v116[8];
    *(void *)&v100[40] = v118;
    if (*(void *)&v116[8] && atomic_fetch_add(*(atomic_uint *volatile *)&v116[8], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v115, v54);
    }
    *(void *)int16x8_t v116 = 0;
    long long v117 = 0uLL;
    *(void *)&v116[16] = 0;
    if (SHIDWORD(v115[0]) >= 1)
    {
      uint64_t v59 = 0;
      uint64_t v60 = v119;
      do
        *(_DWORD *)(v60 + 4 * v59++) = 0;
      while (v59 < SHIDWORD(v115[0]));
    }
    *(void *)&v116[8] = 0;
    if (v120 != (cv *)v121) {
      cv::fastFree((void **)v120, v54);
    }
    cv::_InputArray::_InputArray((uint64_t)v115, (const cv::Mat *)v122);
    cv::_OutputArray::_OutputArray((uint64_t)__p, (cv::Mat *)v99);
    cv::pyrDown((void (***)(void **__return_ptr, void, uint64_t))v115, (uint64_t)__p, (int *)&v104, 4);
    if (a6 != 5)
    {
      cv::_InputArray::_InputArray((uint64_t)v115, (const cv::Mat *)v99);
      cv::_OutputArray::_OutputArray((uint64_t)__p, (cv::Mat *)v42);
      memset(v97, 0, sizeof(v97));
      cv::copyMakeBorder((uint64_t)v115, (uint64_t)__p);
    }
    cv::Mat::adjustROI((cv::Mat *)v42, -a3[1], -a3[1], -*a3, -*a3);
LABEL_100:
    if (!a5) {
      goto LABEL_135;
    }
    uint64_t v61 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 120))(a2, (2 * v40) | 1);
    uint64_t v62 = v61;
    if (*(void *)(v61 + 16))
    {
      uint64_t v63 = *(unsigned int *)(v61 + 4);
      if ((int)v63 >= 3)
      {
        unsigned int v65 = *(int **)(v61 + 64);
        uint64_t v64 = 1;
        do
        {
          uint64_t v66 = *v65++;
          v64 *= v66;
          --v63;
        }
        while (v63);
      }
      else
      {
        uint64_t v64 = *(int *)(v61 + 12) * (uint64_t)*(int *)(v61 + 8);
      }
      if (v64) {
        cv::Mat::adjustROI((cv::Mat *)v61, a3[1], a3[1], *a3, *a3);
      }
    }
    if ((*(_DWORD *)v62 & 0xFFF) != ((16 * ((v14 >> 3) & 0x1FF)) | 0xB))
    {
      *(void *)&long long v69 = *(void *)a3;
      int v67 = *(_DWORD *)(v62 + 12);
      *((void *)&v69 + 1) = v104;
      unsigned int v68 = v104 + 2 * *(void *)a3;
LABEL_112:
      if (*(int *)(v62 + 4) > 2
        || (*(_DWORD *)(v62 + 8) == HIDWORD(v69) + 2 * DWORD1(v69) ? (BOOL v71 = v67 == v68) : (BOOL v71 = 0),
            v71 ? (BOOL v72 = (*(_DWORD *)v62 & 0xFFF) == v93) : (BOOL v72 = 0),
            v72 ? (BOOL v73 = *(void *)(v62 + 16) == 0) : (BOOL v73 = 1),
            v73))
      {
        LODWORD(v115[0]) = HIDWORD(v69) + 2 * DWORD1(v69);
        HIDWORD(v115[0]) = v68;
        cv::Mat::create((cv::Mat *)v62, (cv::Mat *)2, (const int *)v115, v93);
        *(void *)&long long v69 = *(void *)a3;
        *((void *)&v69 + 1) = v104;
      }
      goto LABEL_125;
    }
    int v67 = *(_DWORD *)(v62 + 12);
    unsigned int v68 = v104 + 2 * *(void *)a3;
    *(void *)&long long v69 = *(void *)a3;
    *((void *)&v69 + 1) = v104;
    if (*(void *)(v62 + 8) != __PAIR64__(v68, HIDWORD(v104) + 2 * HIDWORD(*(void *)a3))) {
      goto LABEL_112;
    }
    *((void *)&v70 + 1) = v104;
    *(void *)&long long v70 = *(void *)a3;
    long long v69 = v70;
LABEL_125:
    *(_OWORD *)__p = v69;
    cv::Mat::Mat(v115, v62, __p);
    if (a7 != 5)
    {
      cv::_InputArray::_InputArray((uint64_t)__p, (const cv::Mat *)v115);
      cv::_OutputArray::_OutputArray((uint64_t)v97, (cv::Mat *)v62);
      cv::copyMakeBorder((uint64_t)__p, (uint64_t)v97);
    }
    cv::Mat::adjustROI((cv::Mat *)v62, -a3[1], -a3[1], -*a3, -*a3);
    if (*(void *)&v116[8] && atomic_fetch_add(*(atomic_uint *volatile *)&v116[8], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v115, v32);
    }
    *(void *)int16x8_t v116 = 0;
    long long v117 = 0uLL;
    *(void *)&v116[16] = 0;
    if (SHIDWORD(v115[0]) >= 1)
    {
      uint64_t v75 = 0;
      uint64_t v76 = v119;
      do
        *(_DWORD *)(v76 + 4 * v75++) = 0;
      while (v75 < SHIDWORD(v115[0]));
    }
    *(void *)&v116[8] = 0;
    if (v120 != (cv *)v121) {
      cv::fastFree((void **)v120, v32);
    }
LABEL_135:
    if ((int)v104 >= -1) {
      int v77 = v104 + 1;
    }
    else {
      int v77 = v104 + 2;
    }
    int v78 = v77 >> 1;
    int v79 = HIDWORD(v104) + 2;
    if (SHIDWORD(v104) >= -1) {
      int v79 = HIDWORD(v104) + 1;
    }
    int v80 = v79 >> 1;
    unint64_t v104 = __PAIR64__(v80, v78);
    if (v78 <= *a3 || v80 <= a3[1]) {
      break;
    }
    if (*(void *)&v100[8]) {
      atomic_fetch_add(*(atomic_uint *volatile *)&v100[8], 1u);
    }
    if (*(void *)&v123[8] && atomic_fetch_add(*(atomic_uint *volatile *)&v123[8], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v122, v32);
    }
    *(void *)int32x4_t v123 = 0;
    memset(&v123[16], 0, 24);
    if (v122[1] <= 0)
    {
      *(void *)&v123[8] = 0;
      v122[0] = (int)v99[0];
    }
    else
    {
      uint64_t v81 = 0;
      int v82 = v124;
      do
        v82[v81++] = 0;
      while (v81 < v122[1]);
      *(void *)&v123[8] = 0;
      v122[0] = (int)v99[0];
      if (v122[1] > 2)
      {
LABEL_155:
        cv::Mat::copySize((cv::Mat *)v122, (const cv::Mat *)v99);
        goto LABEL_156;
      }
    }
    if (SHIDWORD(v99[0]) > 2) {
      goto LABEL_155;
    }
    v122[1] = HIDWORD(v99[0]);
    *(void **)&v122[2] = v99[1];
    uint64_t v83 = v102;
    int v84 = v125;
    int *v125 = *(void **)v102;
    _DWORD v84[1] = (void *)*((void *)v83 + 1);
LABEL_156:
    *(_OWORD *)int32x4_t v123 = *(_OWORD *)v100;
    *(_OWORD *)&v123[16] = *(_OWORD *)&v100[16];
    *(_OWORD *)&v123[32] = *(_OWORD *)&v100[32];
    BOOL v52 = v40++ == a4;
    if (v52)
    {
      unsigned int v40 = a4 + 1;
      goto LABEL_161;
    }
  }
  (*(void (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, void))(*(void *)a2 + 136))(a2, 1, (v40 + 1) << a5, 0, 0xFFFFFFFFLL, 1, 0);
LABEL_161:
  if (*(void *)&v100[8] && atomic_fetch_add(*(atomic_uint *volatile *)&v100[8], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v99, v32);
  }
  *(void *)float v100 = 0;
  memset(&v100[16], 0, 24);
  if (SHIDWORD(v99[0]) >= 1)
  {
    uint64_t v85 = 0;
    float v86 = v101;
    do
      *((_DWORD *)v86 + v85++) = 0;
    while (v85 < SHIDWORD(v99[0]));
  }
  *(void *)&v100[8] = 0;
  if (v102 != (cv *)v103) {
    cv::fastFree((void **)v102, v32);
  }
  if (*(void *)&v123[8] && atomic_fetch_add(*(atomic_uint *volatile *)&v123[8], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v122, v32);
  }
  *(void *)int32x4_t v123 = 0;
  memset(&v123[16], 0, 24);
  if (v122[1] >= 1)
  {
    uint64_t v87 = 0;
    uint64_t v88 = v124;
    do
      v88[v87++] = 0;
    while (v87 < v122[1]);
  }
  *(void *)&v123[8] = 0;
  if (v125 != v126) {
    cv::fastFree(v125, v32);
  }
  if (v108 && atomic_fetch_add(v108, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v105, v32);
  }
  uint64_t v107 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  if (SHIDWORD(v105) >= 1)
  {
    uint64_t v89 = 0;
    uint64_t v90 = v112;
    do
      v90->i32[v89++] = 0;
    while (v89 < SHIDWORD(v105));
  }
  int v108 = 0;
  if (v113 != (cv *)&v114) {
    cv::fastFree((void **)v113, v32);
  }
  if ((int)v40 >= (int)a4) {
    return a4;
  }
  else {
    return v40;
  }
}

void sub_225EC07DC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

cv::Mat *cv::Mat::operator=(cv::Mat *this, cv::Mat *a2)
{
  if (this != a2)
  {
    uint64_t v4 = (atomic_uint *)*((void *)a2 + 3);
    if (v4) {
      atomic_fetch_add(v4, 1u);
    }
    int v5 = (atomic_uint *)*((void *)this + 3);
    if (v5 && atomic_fetch_add(v5, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate(this, a2);
    }
    *((void *)this + 2) = 0;
    *((void *)this + 5) = 0;
    *((void *)this + 6) = 0;
    *((void *)this + 4) = 0;
    if (*((int *)this + 1) <= 0)
    {
      *((void *)this + 3) = 0;
      *(_DWORD *)this = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = *((void *)this + 8);
      do
      {
        *(_DWORD *)(v7 + 4 * v6++) = 0;
        uint64_t v8 = *((int *)this + 1);
      }
      while (v6 < v8);
      *((void *)this + 3) = 0;
      *(_DWORD *)this = *(_DWORD *)a2;
      if ((int)v8 > 2) {
        goto LABEL_15;
      }
    }
    int v9 = *((_DWORD *)a2 + 1);
    if (v9 <= 2)
    {
      *((_DWORD *)this + 1) = v9;
      *((void *)this + 1) = *((void *)a2 + 1);
      uint64_t v10 = (void *)*((void *)a2 + 9);
      unsigned int v11 = (void *)*((void *)this + 9);
      *unsigned int v11 = *v10;
      v11[1] = v10[1];
LABEL_16:
      *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
      *((void *)this + 6) = *((void *)a2 + 6);
      *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
      *((void *)this + 7) = *((void *)a2 + 7);
      return this;
    }
LABEL_15:
    cv::Mat::copySize(this, a2);
    goto LABEL_16;
  }
  return this;
}

_WORD *anonymous namespace'::calcSharrDeriv(_anonymous_namespace_ *this, const cv::Mat *a2, cv::Mat *a3)
{
  int v3 = (unsigned int *)MEMORY[0x270FA5388](this, a2);
  uint64_t v87 = (cv::Mat *)v4;
  uint64_t v98 = *MEMORY[0x263EF8340];
  uint64_t v8 = v3[2];
  int v9 = v3[3];
  float v86 = v3;
  unint64_t v10 = *v3;
  if ((v10 & 7) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v94, "depth == CV_8U");
    std::string::basic_string[abi:ne180100]<0>(v93, "calcSharrDeriv");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(v95, 4294967081, v94, v93, __p, 53);
    cv::error((cv *)v95, v11);
  }
  uint64_t v12 = (v10 >> 3) & 0x1FF;
  uint64_t v13 = v12 + 1;
  int v14 = (16 * ((_WORD)v12 + 1) + 4091) & 0xFFF;
  BOOL v16 = *(int *)(v4 + 4) <= 2 && *(_DWORD *)(v4 + 8) == v8 && *(_DWORD *)(v4 + 12) == v9;
  if (!v16 || ((*(_DWORD *)v4 & 0xFFF) == v14 ? (BOOL v17 = *(void *)(v4 + 16) == 0) : (BOOL v17 = 1), v17))
  {
    v95[0] = v3[2];
    v95[1] = v9;
    cv::Mat::create((cv::Mat *)v4, (cv::Mat *)2, v95, v14);
  }
  int v18 = (v13 * (v9 + 2) + 15) & 0xFFFFFFF0;
  int v19 = 2 * v18 + 64;
  *(void *)int v95 = v97;
  uint64_t v96 = 2056;
  uint64_t result = v97;
  if (v19 >= 0x809)
  {
    uint64_t v96 = v19;
    operator new[]();
  }
  if ((int)v8 >= 1)
  {
    unint64_t v21 = 0;
    uint64_t v22 = (v13 * v9);
    unint64_t v23 = ((unint64_t)&v97[v13 + 7] + 1) & 0xFFFFFFFFFFFFFFF0;
    unint64_t v24 = v23 + 2 * v18;
    uint64_t v25 = (int)v22 - 8;
    uint64_t v26 = 2 * v18;
    int v27 = v8 - 2;
    unint64_t v84 = (v8 - 1);
    BOOL v83 = v8 != 1;
    if (v8 == 1) {
      int v27 = 0;
    }
    int v82 = v27;
    int v28 = v9 - 2;
    unint64_t v29 = v23 + 2 * (int)v22;
    if (v9 <= 1) {
      int v28 = 0;
    }
    int v30 = v13 * v28;
    if (v9 <= 1) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = v12 + 1;
    }
    unint64_t v32 = v23 + v26 + 2 * (int)v22;
    unint64_t v33 = v23 + v26 + 2 * v30;
    unint64_t v34 = v23 + v26 + 2 * v31;
    uint64_t v35 = 2 * ((v10 >> 3) & 0x1FF);
    unint64_t v36 = v23 + 2 * v30;
    unint64_t v37 = v35 ^ 0xFFFFFFFFFFFFFFFELL;
    unint64_t v38 = v23 + (v35 ^ 0xFFFFFFFFFFFFFFFELL);
    uint64_t v39 = v26 - v35 - 2;
    v5.n128_u64[0] = 0x3000300030003;
    v5.n128_u64[1] = 0x3000300030003;
    v6.n128_u64[0] = 0xA000A000A000ALL;
    v6.n128_u64[1] = 0xA000A000A000ALL;
    v7.n128_u64[0] = 0xA0A0A0A0A0A0A0ALL;
    uint64_t v40 = v35 + 2;
    int v80 = v12 + 1;
    unint64_t v41 = v23 + 2 * v31;
    uint64_t v81 = v18;
    uint64_t v42 = v35 + 2 + 2 * v18;
    uint64_t v91 = v22;
    uint64_t v85 = v8;
    do
    {
      unint64_t v43 = v21;
      int v44 = v21 - 1;
      if (!v21) {
        int v44 = v83;
      }
      uint64_t v45 = *((void *)v86 + 2);
      uint64_t v46 = **((void **)v86 + 9);
      uint64_t v47 = v46 * v44;
      int v48 = v21 + 1;
      unint64_t v90 = v21 + 1;
      if (v21 >= v84) {
        int v48 = v82;
      }
      uint64_t v49 = v46 * v48;
      uint64_t v88 = **((void **)v87 + 9);
      uint64_t v89 = *((void *)v87 + 2);
      if ((int)v22 >= 8)
      {
        uint64_t v51 = 0;
        BOOL v52 = (uint16x8_t *)v23;
        do
        {
          uint8x8_t v53 = *(uint8x8_t *)(v45 + v47 + v51);
          uint8x8_t v54 = *(uint8x8_t *)(v45 + v49 + v51);
          *BOOL v52 = vmlal_u8((uint16x8_t)vmulq_s16((int16x8_t)vaddl_u8(v54, v53), (int16x8_t)v5), *(uint8x8_t *)(v45 + v46 * v43 + v51), (uint8x8_t)0xA0A0A0A0A0A0A0ALL);
          *(uint16x8_t *)((char *)v52 + v26) = vsubl_u8(v54, v53);
          v51 += 8;
          ++v52;
        }
        while (v51 <= v25);
        uint64_t v50 = v51;
        LODWORD(v22) = v91;
      }
      else
      {
        uint64_t v50 = 0;
      }
      if ((int)v50 < (int)v22)
      {
        uint64_t v55 = 0;
        unint64_t v56 = v24 + 2 * v50;
        unint64_t v57 = v23 + 2 * v50;
        uint64_t v58 = v45 + v50 + v46 * v43;
        uint64_t v59 = v45 + v49 + v50;
        uint64_t v60 = v45 + v47 + v50;
        uint64_t v61 = v91 - v50;
        do
        {
          __int16 v62 = *(unsigned __int8 *)(v60 + v55);
          __int16 v63 = *(unsigned __int8 *)(v59 + v55);
          *(_WORD *)(v57 + 2 * v55) = 3 * (v63 + v62) + 10 * *(unsigned __int8 *)(v58 + v55);
          *(_WORD *)(v56 + 2 * v55++) = v63 - v62;
        }
        while (v61 != v55);
      }
      uint64_t v64 = 0;
      uint64_t v65 = v89 + v88 * v43;
      do
      {
        *(_WORD *)(v38 + v64) = *(_WORD *)(v41 + v64);
        *(_WORD *)(v29 + v64) = *(_WORD *)(v36 + v64);
        *(_WORD *)(v23 + v39 + v64) = *(_WORD *)(v34 + v64);
        *(_WORD *)(v32 + v64) = *(_WORD *)(v33 + v64);
        v64 += 2;
      }
      while (v40 != v64);
      LODWORD(v22) = v91;
      if ((int)v91 >= 8)
      {
        uint64_t v66 = 0;
        int v67 = (__int16 *)(v65 + 16);
        unint64_t v68 = v23;
        do
        {
          int16x4x2_t v69 = (int16x4x2_t)vsubq_s16(*(int16x8_t *)(v68 + v40), *(int16x8_t *)(v68 + v37));
          int8x16_t v70 = (int8x16_t)vmlaq_s16(vmulq_s16(*(int16x8_t *)(v68 + v26), (int16x8_t)v6), vaddq_s16(*(int16x8_t *)(v68 + v39), *(int16x8_t *)(v68 + v42)), (int16x8_t)v5);
          v99.val[1] = (int16x4_t)vextq_s8(v70, v70, 8uLL).u64[0];
          v99.val[0] = (int16x4_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u64[0];
          BOOL v71 = v67 - 8;
          vst2_s16(v71, v69);
          vst2_s16(v67, v99);
          v66 += 8;
          v68 += 16;
          v67 += 16;
        }
        while (v66 <= v25);
      }
      else
      {
        LODWORD(v66) = 0;
      }
      if ((int)v66 < (int)v91)
      {
        uint64_t v72 = 0;
        int v73 = 2 * v66;
        unsigned int v74 = v80 + v66;
        unint64_t v75 = v38 + 2 * v66;
        unint64_t v76 = v38 + 2 * (v81 + v66);
        unint64_t v77 = v24 + 2 * v66;
        uint64_t v78 = v91 - v66;
        do
        {
          __int16 v79 = 3 * (*(_WORD *)(v76 + v72) + *(_WORD *)(v24 + 2 * v74)) + 10 * *(_WORD *)(v77 + v72);
          *(_WORD *)(v65 + 2 * (v73 + v72)) = *(_WORD *)(v23 + 2 * v74) - *(_WORD *)(v75 + v72);
          *(_WORD *)(v65 + 2 * (v73 + v72 + 1)) = v79;
          ++v74;
          v72 += 2;
          --v78;
        }
        while (v78);
      }
      unint64_t v21 = v90;
    }
    while (v90 != v85);
    uint64_t result = *(_WORD **)v95;
  }
  if (result != v97)
  {
    if (result) {
      return (_WORD *)MEMORY[0x22A641760](result, 0x1000C80BDFB0063, v5, v6, v7);
    }
  }
  return result;
}

void sub_225EC0F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  _Unwind_Resume(a1);
}

void cv::calcOpticalFlowPyrLK(void (***a1)(uint64_t *__return_ptr), void (***a2)(uint64_t *__return_ptr), void (***a3)(void *__return_ptr, void, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, int32x2_t *a7, signed int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, unsigned int a17, int a18, double a19, int a20)
{
  void (***v45)(uint64_t *__return_ptr);
  int v46;
  const cv::Exception *v47;
  int v48;
  _DWORD *v49;
  unsigned int v50;
  int v51;
  const cv::Exception *v52;
  double v53;
  unsigned int v54;
  unsigned int v55;
  double v56;
  __int16 v57;
  double v58;
  float v59;
  uint64_t v60;
  long long v61;
  int v62;
  void *v63;
  cv::Mat *v64;
  uint64_t v65;
  unsigned char *v66;
  unsigned int v67;
  int32x2_t *v68;
  const cv::Mat *v69;
  atomic_uint *v70;
  uint64_t v71;
  unsigned char *v72;
  cv *v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  int32x2_t **v79;
  int32x2_t *v80;
  int32x2_t v81;
  void **v82;
  int32x2_t *v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  const cv::Exception *v88;
  const cv::Exception *v89;
  uint64_t v90;
  unsigned char *v91;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unsigned char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int32x2_t *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  cv *v107;
  unsigned int v108;
  void *v110[2];
  long long v111;
  void *v112[2];
  uint64_t v113[2];
  uint64_t v114;
  long long v115;
  long long v116;
  uint64_t v117;
  uint64_t v118;
  cv *v119;
  uint64_t v120;
  _OWORD v121[4];
  char *v122;
  cv *v123;
  void v124[2];
  int32x2_t v125;
  int32x2_t v126;
  _DWORD *v127;
  uint64_t v128;
  uint64_t v129;
  int32x2_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned char __p[64];
  unsigned char *v134;
  cv *v135;
  void v136[2];
  void v137[2];
  void *v138;
  atomic_uint *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  cv *v144;
  uint64_t v145;
  void *v146[2];
  uint64_t v147;
  atomic_uint *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  cv *v153;
  uint64_t v154;
  int32x2_t v155;
  int32x2_t **v156;
  int32x2_t *v157;
  _DWORD *v158;
  long long v159;
  long long v160;
  uint64_t v161;
  int32x2_t **v162;
  cv *v163;
  uint64_t v164;
  unint64_t v165;
  int v166;
  float v167;
  void v168[2];
  uint64_t v169;
  atomic_uint *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int32x2_t *v174;
  cv *v175;
  uint64_t v176;
  unsigned char v177[64];
  unsigned char *v178;
  void **v179;
  void v180[5];

  v180[2] = *MEMORY[0x263EF8340];
  (**a3)(v168, a3, 0xFFFFFFFFLL);
  if (a8 < 0 || a7->i32[0] < 3 || a7->i32[1] <= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v146, "maxLevel >= 0 && winSize.width > 2 && winSize.height > 2");
    std::string::basic_string[abi:ne180100]<0>(v137, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v156, 4294967081, v146, v137, __p, 842);
    cv::error((cv *)&v156, v20);
  }
  uint64_t v21 = cv::Mat::checkVector((cv::Mat *)v168, 2, 5, 1);
  uint64_t v22 = v21;
  if ((v21 & 0x80000000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v146, "(npoints = prevPtsMat.checkVector(2, CV_32F, true)) >= 0");
    std::string::basic_string[abi:ne180100]<0>(v137, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v156, 4294967081, v146, v137, __p, 845);
    cv::error((cv *)&v156, v24);
  }
  if (!v21)
  {
    (*(void (**)(uint64_t))(*(void *)a4 + 152))(a4);
    (*(void (**)(uint64_t))(*(void *)a5 + 152))(a5);
    (*(void (**)(uint64_t))(*(void *)a6 + 152))(a6);
    goto LABEL_196;
  }
  if ((a20 & 4) == 0)
  {
    float v155 = vrev64_s32(*v174);
    (*(void (**)(uint64_t, int32x2_t *, void, uint64_t, uint64_t, void))(*(void *)a4 + 128))(a4, &v155, v168[0] & 0xFFF, 0xFFFFFFFFLL, 1, 0);
  }
  (**(void (***)(void **__return_ptr, uint64_t, uint64_t))a4)(v146, a4, 0xFFFFFFFFLL);
  if (cv::Mat::checkVector((cv::Mat *)v146, 2, 5, 1) != v22)
  {
    std::string::basic_string[abi:ne180100]<0>(v137, "nextPtsMat.checkVector(2, CV_32F, true) == npoints");
    std::string::basic_string[abi:ne180100]<0>(__p, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(v121, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v156, 4294967081, v137, __p, v121, 859);
    cv::error((cv *)&v156, v25);
  }
  uint64_t v105 = v147;
  uint64_t v106 = v169;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, void))(*(void *)a5 + 136))(a5, v22, 1, 0, 0xFFFFFFFFLL, 1, 0);
  (**(void (***)(void *__return_ptr, uint64_t, uint64_t))a5)(v137, a5, 0xFFFFFFFFLL);
  uint64_t v134 = &__p[8];
  uint64_t v135 = (cv *)v136;
  v136[1] = 0;
  v136[0] = 0;
  *(_DWORD *)__p = 1124007936;
  memset(&__p[4], 0, 60);
  uint64_t v26 = a7;
  if ((v137[0] & 0x4000) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v121, "statusMat.isContinuous()");
    std::string::basic_string[abi:ne180100]<0>(v177, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(v113, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v156, 4294967081, v121, v177, v113, 866);
    cv::error((cv *)&v156, v27);
  }
  int v28 = v138;
  if ((int)v22 >= 1) {
    memset(v138, 1, v22);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a6 + 112))(a6))
  {
    unint64_t v104 = 0;
    goto LABEL_44;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a6 + 136))(a6, v22, 1, 5, 0xFFFFFFFFLL, 1, 0);
  (**(void (***)(int32x2_t ***__return_ptr, uint64_t, uint64_t))a6)(&v156, a6, 0xFFFFFFFFLL);
  if ((void)v159) {
    atomic_fetch_add((atomic_uint *volatile)v159, 1u);
  }
  if (*(void *)&__p[24] && atomic_fetch_add(*(atomic_uint *volatile *)&__p[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)__p, v29);
  }
  *(void *)&__p[16] = 0;
  memset(&__p[32], 0, 24);
  if (*(uint64_t *)__p <= 0)
  {
    *(void *)&__p[24] = 0;
    *(_DWORD *)__p = v156;
  }
  else
  {
    uint64_t v30 = 0;
    unsigned int v31 = v134;
    do
      *(_DWORD *)&v31[4 * v30++] = 0;
    while (v30 < *(int *)&__p[4]);
    *(void *)&__p[24] = 0;
    *(_DWORD *)__p = v156;
    if (*(int *)&__p[4] > 2) {
      goto LABEL_32;
    }
  }
  if (SHIDWORD(v156) <= 2)
  {
    *(_DWORD *)&__p[4] = HIDWORD(v156);
    *(void *)&__p[8] = v157;
    unint64_t v32 = v163;
    unint64_t v33 = v135;
    *(void *)uint64_t v135 = *(void *)v163;
    *((void *)v33 + 1) = *((void *)v32 + 1);
    goto LABEL_33;
  }
LABEL_32:
  cv::Mat::copySize((cv::Mat *)__p, (const cv::Mat *)&v156);
LABEL_33:
  *(_OWORD *)&__p[40] = v160;
  *(_OWORD *)&__p[24] = v159;
  *(void *)&__p[16] = v158;
  *(void *)&__p[56] = v161;
  if ((void)v159 && atomic_fetch_add((atomic_uint *volatile)v159, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v156, v29);
  }
  uint64_t v158 = 0;
  uint64_t v160 = 0uLL;
  *((void *)&v159 + 1) = 0;
  if (SHIDWORD(v156) >= 1)
  {
    uint64_t v34 = 0;
    uint64_t v35 = v162;
    do
      *((_DWORD *)v35 + v34++) = 0;
    while (v34 < SHIDWORD(v156));
  }
  *(void *)&float v159 = 0;
  if (v163 != (cv *)&v164) {
    cv::fastFree((void **)v163, v29);
  }
  if ((__p[1] & 0x40) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v121, "errMat.isContinuous()");
    std::string::basic_string[abi:ne180100]<0>(v177, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(v113, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v156, 4294967081, v121, v177, v113, 877);
    cv::error((cv *)&v156, v36);
  }
  unint64_t v104 = *(void *)&__p[16];
LABEL_44:
  double v130 = 0;
  double v131 = 0;
  float32x2_t v132 = 0;
  int32x2_t v127 = 0;
  float32x2_t v128 = 0;
  uint64_t v129 = 0;
  if (((unsigned int (*)(void))(*a1)[5])(a1) != 327680)
  {
    int v108 = 1;
    int v39 = -1;
    goto LABEL_62;
  }
  ((void (*)(void (***)(uint64_t *__return_ptr), int32x2_t **))(*a1)[1])(a1, &v130);
  int v37 = -1431655765 * ((unint64_t)(v131 - (void)v130) >> 5);
  if (v37 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v121, "levels1 >= 0");
    std::string::basic_string[abi:ne180100]<0>(v177, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(v113, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v156, 4294967081, v121, v177, v113, 892);
    cv::error((cv *)&v156, v38);
  }
  int v39 = v37 - 1;
  if ((v39 & 0x80000001) == 1)
  {
    uint64_t v40 = v130;
    int v108 = 1;
    if ((v130[12].i32[0] & 7) != 3
      || (((unsigned __int32)v130->i32[0] >> 2) & 0x3FE | 1) != (((unsigned __int32)v130[12].i32[0] >> 3) & 0x1FF))
    {
LABEL_55:
      v112[0] = 0;
      v110[0] = 0;
      cv::Mat::locateROI((uint64_t)&v40[12 * v108], v112, v110);
      if (SLODWORD(v110[0]) < a7->i32[0]
        || (int v42 = a7->i32[1], SHIDWORD(v110[0]) < v42)
        || a7->i32[0] + LODWORD(v110[0]) + v130[12 * v108 + 1].i32[1] > SLODWORD(v112[0])
        || v42 + HIDWORD(v110[0]) + v130[12 * v108 + 1].i32[0] > SHIDWORD(v112[0]))
      {
        std::string::basic_string[abi:ne180100]<0>(v121, "ofs.x >= winSize.width && ofs.y >= winSize.height && ofs.x + prevPyr[lvlStep1].cols + winSize.width <= fullSize.width && ofs.y + prevPyr[lvlStep1].rows + winSize.height <= fullSize.height");
        std::string::basic_string[abi:ne180100]<0>(v177, "calcOpticalFlowPyrLK");
        std::string::basic_string[abi:ne180100]<0>(v113, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
        cv::Exception::Exception(&v156, 4294967081, v121, v177, v113, 908);
        cv::error((cv *)&v156, v43);
      }
      goto LABEL_60;
    }
    int v39 = v39 >> 1;
    int v41 = 2;
  }
  else
  {
    int v41 = 1;
  }
  int v108 = v41;
  if (v39 >= 1)
  {
    uint64_t v40 = v130;
    goto LABEL_55;
  }
LABEL_60:
  if (v39 < a8) {
    a8 = v39;
  }
LABEL_62:
  if (((unsigned int (*)(void))(*a2)[5])(a2) != 327680)
  {
    uint64_t v45 = a2;
    uint64_t v50 = 1;
    int v48 = -1;
    if (v39 < 0) {
      goto LABEL_83;
    }
    goto LABEL_70;
  }
  ((void (*)(void (***)(uint64_t *__return_ptr), _DWORD **))(*a2)[1])(a2, &v127);
  uint64_t v45 = a2;
  uint64_t v46 = -1431655765 * ((unint64_t)(v128 - (void)v127) >> 5);
  if (v46 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v121, "levels2 >= 0");
    std::string::basic_string[abi:ne180100]<0>(v177, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(v113, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v156, 4294967081, v121, v177, v113, 920);
    cv::error((cv *)&v156, v47);
  }
  int v48 = v46 - 1;
  if ((v48 & 0x80000001) == 1)
  {
    uint64_t v49 = v127;
    uint64_t v50 = 1;
    if ((v127[24] & 7) != 3 || ((*v127 >> 2) & 0x3FE | 1) != ((v127[24] >> 3) & 0x1FF)) {
      goto LABEL_75;
    }
    int v48 = v48 >> 1;
    uint64_t v50 = 2;
  }
  else
  {
    uint64_t v50 = 1;
  }
  if (v48 < 1) {
    goto LABEL_80;
  }
  uint64_t v49 = v127;
LABEL_75:
  v112[0] = 0;
  v110[0] = 0;
  cv::Mat::locateROI((uint64_t)&v49[24 * v50], v112, v110);
  if (SLODWORD(v110[0]) < a7->i32[0]
    || (uint64_t v51 = a7->i32[1], SHIDWORD(v110[0]) < v51)
    || a7->i32[0] + LODWORD(v110[0]) + v127[24 * v50 + 3] > SLODWORD(v112[0])
    || v51 + HIDWORD(v110[0]) + v127[24 * v50 + 2] > SHIDWORD(v112[0]))
  {
    std::string::basic_string[abi:ne180100]<0>(v121, "ofs.x >= winSize.width && ofs.y >= winSize.height && ofs.x + nextPyr[lvlStep2].cols + winSize.width <= fullSize.width && ofs.y + nextPyr[lvlStep2].rows + winSize.height <= fullSize.height");
    std::string::basic_string[abi:ne180100]<0>(v177, "calcOpticalFlowPyrLK");
    std::string::basic_string[abi:ne180100]<0>(v113, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
    cv::Exception::Exception(&v156, 4294967081, v121, v177, v113, 936);
    cv::error((cv *)&v156, v52);
  }
LABEL_80:
  if (v48 < a8) {
    a8 = v48;
  }
  if (v39 < 0)
  {
LABEL_83:
    cv::_OutputArray::_OutputArray((uint64_t)&v156, (uint64_t)&v130);
    unsigned int v126 = *a7;
    a8 = cv::buildOpticalFlowPyramid(a1, (uint64_t)&v156, (int *)&v126, a8, 0, 4, 0, 1);
    if ((v48 & 0x80000000) == 0) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
LABEL_70:
  if ((v48 & 0x80000000) == 0) {
    goto LABEL_85;
  }
LABEL_84:
  cv::_OutputArray::_OutputArray((uint64_t)&v156, (uint64_t)&v127);
  uint64_t v125 = *a7;
  a8 = cv::buildOpticalFlowPyramid(v45, (uint64_t)&v156, (int *)&v125, a8, 0, 4, 0, 1);
LABEL_85:
  uint8x8_t v53 = a19;
  uint8x8_t v54 = a18 & ~(a18 >> 31);
  if (v54 >= 0x64) {
    uint8x8_t v54 = 100;
  }
  if (a17) {
    uint64_t v55 = v54;
  }
  else {
    uint64_t v55 = 30;
  }
  if (a19 < 0.0) {
    uint8x8_t v53 = 0.0;
  }
  if (v53 > 10.0) {
    uint8x8_t v53 = 10.0;
  }
  int32x4_t v122 = (char *)v121 + 8;
  int32x4_t v123 = (cv *)v124;
  if ((a17 & 2) != 0) {
    unint64_t v56 = v53;
  }
  else {
    unint64_t v56 = 0.01;
  }
  v124[0] = 0;
  v124[1] = 0;
  LODWORD(v121[0]) = 1124007936;
  memset((char *)v121 + 4, 0, 48);
  v121[3] = 0u;
  if (v108 == 1)
  {
    unint64_t v57 = (16 * ((unsigned __int32)v130->i32[0] >> 3)) | 0xB;
    *(int32x2_t *)uint64_t v177 = vadd_s32(vrev64_s32(vadd_s32(*a7, *a7)), v130[1]);
    cv::Mat::create((cv::Mat *)v121, (cv::Mat *)2, (const int *)v177, v57);
  }
  if ((a8 & 0x80000000) == 0)
  {
    uint64_t v58 = v56 * v56;
    uint64_t v107 = (cv *)(a17 | ((unint64_t)v55 << 32));
    uint64_t v59 = a9;
    uint64_t v60 = a8;
    uint64_t v103 = v28;
    while (1)
    {
      uint64_t v178 = &v177[8];
      double v179 = (void **)v180;
      v180[0] = 0;
      v180[1] = 0;
      *(_DWORD *)uint64_t v177 = 1124007936;
      memset(&v177[4], 0, 60);
      if (v108 == 1)
      {
        *(int32x2_t *)&uint64_t v61 = *v26;
        DWORD2(v61) = HIDWORD(**(void **)&v130[12 * v60 + 8]);
        HIDWORD(v61) = **(void **)&v130[12 * v60 + 8];
        __int16 v62 = DWORD2(v61) + 2 * *(void *)v26;
        LODWORD(v157) = HIDWORD(v61) + 2 * HIDWORD(*(unint64_t *)v26);
        HIDWORD(v157) = v62;
        uint64_t v158 = *(_DWORD **)&v121[1];
        *(void *)&float v159 = 0;
        double v162 = &v157;
        double v163 = (cv *)&v164;
        HIDWORD(v156) = 2;
        LODWORD(v156) = v121[0] & 0xFFF | 0x42FF4000;
        unint64_t v164 = ((((LODWORD(v121[0]) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v121[0] & 7))) & 3)) * (uint64_t)v62;
        int v165 = (((LODWORD(v121[0]) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v121[0] & 7))) & 3);
        double v161 = 0;
        *((void *)&v160 + 1) = *(void *)&v121[1] + v164 * (int)v157;
        *((void *)&v159 + 1) = *(void *)&v121[1];
        *(void *)&uint64_t v160 = *((void *)&v160 + 1);
        *(_OWORD *)int v112 = v61;
        cv::Mat::Mat(v113, &v156, v112);
        if ((void)v115) {
          atomic_fetch_add((atomic_uint *volatile)v115, 1u);
        }
        if (*(void *)&v177[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v177[24], 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v177, v63);
        }
        *(void *)&v177[16] = 0;
        memset(&v177[32], 0, 24);
        if (*(int *)&v177[4] <= 0)
        {
          *(void *)&v177[24] = 0;
          *(_DWORD *)uint64_t v177 = v113[0];
        }
        else
        {
          uint64_t v65 = 0;
          uint64_t v66 = v178;
          do
            *(_DWORD *)&v66[4 * v65++] = 0;
          while (v65 < *(int *)&v177[4]);
          *(void *)&v177[24] = 0;
          *(_DWORD *)uint64_t v177 = v113[0];
          if (*(int *)&v177[4] > 2)
          {
LABEL_125:
            cv::Mat::copySize((cv::Mat *)v177, (const cv::Mat *)v113);
            goto LABEL_126;
          }
        }
        if (SHIDWORD(v113[0]) > 2) {
          goto LABEL_125;
        }
        *(_DWORD *)&v177[4] = HIDWORD(v113[0]);
        *(void *)&v177[8] = v113[1];
        int v73 = v119;
        unsigned int v74 = v179;
        *double v179 = *(void **)v119;
        v74[1] = (void *)*((void *)v73 + 1);
LABEL_126:
        *(_OWORD *)&v177[40] = v116;
        *(_OWORD *)&v177[24] = v115;
        *(void *)&v177[16] = v114;
        *(void *)&v177[56] = v117;
        if ((void)v115 && atomic_fetch_add((atomic_uint *volatile)v115, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v113, v63);
        }
        uint64_t v114 = 0;
        int16x8_t v116 = 0uLL;
        *((void *)&v115 + 1) = 0;
        if (SHIDWORD(v113[0]) >= 1)
        {
          unint64_t v75 = 0;
          unint64_t v76 = v118;
          do
            *(_DWORD *)(v76 + 4 * v75++) = 0;
          while (v75 < SHIDWORD(v113[0]));
        }
        *(void *)&int16x8_t v115 = 0;
        if (v119 != (cv *)&v120) {
          cv::fastFree((void **)v119, v63);
        }
        cv::_InputArray::_InputArray((uint64_t)v113, (const cv::Mat *)v177);
        cv::_OutputArray::_OutputArray((uint64_t)v112, (cv::Mat *)&v156);
        *(_OWORD *)uint64_t v110 = 0u;
        uint64_t v111 = 0u;
        cv::copyMakeBorder((uint64_t)v113, (uint64_t)v112);
        if ((void)v159 && atomic_fetch_add((atomic_uint *volatile)v159, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)&v156, v77);
        }
        uint64_t v158 = 0;
        uint64_t v160 = 0uLL;
        *((void *)&v159 + 1) = 0;
        if (SHIDWORD(v156) >= 1)
        {
          uint64_t v78 = 0;
          __int16 v79 = v162;
          do
            *((_DWORD *)v79 + v78++) = 0;
          while (v78 < SHIDWORD(v156));
        }
        *(void *)&float v159 = 0;
        if (v163 != (cv *)&v164) {
          cv::fastFree((void **)v163, v77);
        }
        goto LABEL_147;
      }
      int v67 = (2 * v60) | 1;
      unint64_t v68 = v130;
      int16x4x2_t v69 = (const cv::Mat *)&v130[12 * v67];
      if (v177 != (unsigned char *)v69) {
        break;
      }
LABEL_147:
      unint64_t v84 = v60 * v108;
      uint64_t v85 = (_DWORD *)v130[12 * v84 + 8];
      float v86 = v60 * v50;
      if (v85[1] != *(_DWORD *)(*(void *)&v127[24 * v86 + 16] + 4)
        || *v85 != **(_DWORD **)&v127[24 * v60 * v50 + 16])
      {
        std::string::basic_string[abi:ne180100]<0>(v113, "prevPyr[level * lvlStep1].size() == nextPyr[level * lvlStep2].size()");
        std::string::basic_string[abi:ne180100]<0>(v112, "calcOpticalFlowPyrLK");
        std::string::basic_string[abi:ne180100]<0>(v110, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
        cv::Exception::Exception(&v156, 4294967081, v113, v112, v110, 979);
        cv::error((cv *)&v156, v88);
      }
      if (((v127[24 * v86] ^ v130[12 * v84].i32[0]) & 0xFFF) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v113, "prevPyr[level * lvlStep1].type() == nextPyr[level * lvlStep2].type()");
        std::string::basic_string[abi:ne180100]<0>(v112, "calcOpticalFlowPyrLK");
        std::string::basic_string[abi:ne180100]<0>(v110, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/video/lkpyramid.cpp");
        cv::Exception::Exception(&v156, 4294967081, v113, v112, v110, 980);
        cv::error((cv *)&v156, v89);
      }
      LODWORD(v113[0]) = 0;
      HIDWORD(v113[0]) = v22;
      unsigned int v156 = (int32x2_t **)&unk_26D989280;
      int v157 = &v130[12 * v84];
      *(void *)&float v159 = v177;
      uint64_t v158 = &v127[24 * v86];
      *((void *)&v159 + 1) = v106;
      *(void *)&uint64_t v160 = v105;
      *((void *)&v160 + 1) = v103;
      double v161 = v104;
      uint64_t v26 = a7;
      double v162 = (int32x2_t **)*a7;
      double v163 = v107;
      unint64_t v164 = *(void *)&v58;
      int v165 = __PAIR64__(a8, v60);
      int v166 = a20;
      double v167 = v59;
      cv::parallel_for_(v113, (uint64_t)&v156, -1.0);
      cv::BaseRowFilter::~BaseRowFilter((cv::BaseRowFilter *)&v156);
      if (*(void *)&v177[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v177[24], 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v177, v44);
      }
      *(void *)&v177[16] = 0;
      memset(&v177[32], 0, 24);
      if (*(int *)&v177[4] >= 1)
      {
        unint64_t v90 = 0;
        uint64_t v91 = v178;
        do
          *(_DWORD *)&v91[4 * v90++] = 0;
        while (v90 < *(int *)&v177[4]);
      }
      *(void *)&v177[24] = 0;
      if (v179 != v180) {
        cv::fastFree(v179, v44);
      }
      if (v60-- <= 0) {
        goto LABEL_164;
      }
    }
    int8x16_t v70 = (atomic_uint *)v130[12 * v67 + 3];
    if (v70)
    {
      atomic_fetch_add(v70, 1u);
      if (*(void *)&v177[24])
      {
        if (atomic_fetch_add(*(atomic_uint *volatile *)&v177[24], 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v177, v44);
        }
      }
    }
    *(void *)&v177[16] = 0;
    memset(&v177[32], 0, 24);
    if (*(int *)&v177[4] <= 0)
    {
      *(void *)&v177[24] = 0;
      *(_DWORD *)uint64_t v177 = *(_DWORD *)v69;
    }
    else
    {
      BOOL v71 = 0;
      uint64_t v72 = v178;
      do
        *(_DWORD *)&v72[4 * v71++] = 0;
      while (v71 < *(int *)&v177[4]);
      *(void *)&v177[24] = 0;
      *(_DWORD *)uint64_t v177 = *(_DWORD *)v69;
      if (*(int *)&v177[4] > 2) {
        goto LABEL_145;
      }
    }
    if (v68[12 * v67].i32[1] <= 2)
    {
      *(_DWORD *)&v177[4] = v68[12 * v67].i32[1];
      int v80 = &v68[12 * v67];
      *(int32x2_t *)&v177[8] = v80[1];
      uint64_t v81 = v80[9];
      int v82 = v179;
      *double v179 = **(void ***)&v81;
      v82[1] = *(void **)(*(void *)&v81 + 8);
LABEL_146:
      BOOL v83 = &v68[12 * v67];
      *(_OWORD *)&v177[32] = *(_OWORD *)v83[4].i8;
      *(int32x2_t *)&v177[48] = v83[6];
      *(_OWORD *)&v177[16] = *(_OWORD *)v83[2].i8;
      *(int32x2_t *)&v177[56] = v83[7];
      goto LABEL_147;
    }
LABEL_145:
    cv::Mat::copySize((cv::Mat *)v177, v69);
    goto LABEL_146;
  }
LABEL_164:
  if (*((void *)&v121[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v121[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v121, v44);
  }
  *(void *)&v121[1] = 0;
  memset(&v121[2], 0, 24);
  if (SDWORD1(v121[0]) >= 1)
  {
    int v93 = 0;
    float32x2_t v94 = v122;
    do
      *(_DWORD *)&v94[4 * v93++] = 0;
    while (v93 < SDWORD1(v121[0]));
  }
  *((void *)&v121[1] + 1) = 0;
  if (v123 != (cv *)v124) {
    cv::fastFree((void **)v123, v44);
  }
  unsigned int v156 = (int32x2_t **)&v127;
  std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
  unsigned int v156 = &v130;
  std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100]((void ***)&v156);
  if (*(void *)&__p[24] && atomic_fetch_add(*(atomic_uint *volatile *)&__p[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)__p, v23);
  }
  *(void *)&__p[16] = 0;
  memset(&__p[32], 0, 24);
  if (*(int *)&__p[4] >= 1)
  {
    int v95 = 0;
    uint64_t v96 = v134;
    do
      *(_DWORD *)&v96[4 * v95++] = 0;
    while (v95 < *(int *)&__p[4]);
  }
  *(void *)&__p[24] = 0;
  if (v135 != (cv *)v136) {
    cv::fastFree((void **)v135, v23);
  }
  if (v139 && atomic_fetch_add(v139, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v137, v23);
  }
  float v138 = 0;
  int v140 = 0;
  uint64_t v142 = 0;
  int v141 = 0;
  if (SHIDWORD(v137[0]) >= 1)
  {
    BOOL v97 = 0;
    uint64_t v98 = v143;
    do
      *(_DWORD *)(v98 + 4 * v97++) = 0;
    while (v97 < SHIDWORD(v137[0]));
  }
  int v139 = 0;
  if (v144 != (cv *)&v145) {
    cv::fastFree((void **)v144, v23);
  }
  if (v148 && atomic_fetch_add(v148, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v146, v23);
  }
  uint64_t v147 = 0;
  uint64_t v149 = 0;
  float v151 = 0;
  double v150 = 0;
  if (SHIDWORD(v146[0]) >= 1)
  {
    int16x4x2_t v99 = 0;
    float v100 = v152;
    do
      *(_DWORD *)(v100 + 4 * v99++) = 0;
    while (v99 < SHIDWORD(v146[0]));
  }
  uint64_t v148 = 0;
  if (v153 != (cv *)&v154) {
    cv::fastFree((void **)v153, v23);
  }
LABEL_196:
  if (v170 && atomic_fetch_add(v170, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v168, v23);
  }
  uint64_t v169 = 0;
  int v171 = 0;
  uint64_t v173 = 0;
  uint64_t v172 = 0;
  if (SHIDWORD(v168[0]) >= 1)
  {
    uint64_t v101 = 0;
    uint64_t v102 = v174;
    do
      v102->i32[v101++] = 0;
    while (v101 < SHIDWORD(v168[0]));
  }
  unint64_t v170 = 0;
  if (v175 != (cv *)&v176) {
    cv::fastFree((void **)v175, v23);
  }
}

void sub_225EC27E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  cv::Exception::~Exception((cv::Exception *)&STACK[0x300]);
  if (a41 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v72 - 193) < 0) {
    operator delete(*(void **)(v72 - 216));
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  STACK[0x300] = (unint64_t)&a68;
  std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  STACK[0x300] = (unint64_t)&a71;
  std::vector<cv::Mat>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  cv::Mat::~Mat((cv::Mat *)&a72, v74);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x238], v75);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x298], v76);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x378], v77);
  _Unwind_Resume(a1);
}

void cv::detail::LKTrackerInvoker::~LKTrackerInvoker(cv::detail::LKTrackerInvoker *this)
{
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

uint64_t cv::convertAndUnrollScalar(cv *this, const cv::Mat *a2, unsigned char *a3, unsigned __int8 *a4)
{
  char v6 = (char)a2;
  uint64_t v8 = *((unsigned int *)this + 1);
  if ((int)v8 >= 3)
  {
    unint64_t v10 = (int *)*((void *)this + 8);
    int v9 = 1;
    do
    {
      int v11 = *v10++;
      v9 *= v11;
      --v8;
    }
    while (v8);
  }
  else
  {
    int v9 = *((_DWORD *)this + 3) * *((_DWORD *)this + 2);
  }
  signed int v12 = (a2 >> 3) & 0x1FF;
  ConvertFunc = (uint64_t (*)(uint64_t, void, void, void, unsigned char *, void, _DWORD *, void))cv::getConvertFunc((cv *)(*(_DWORD *)this & 7), (char)a2);
  uint64_t v14 = *((void *)this + 2);
  if (v12 < v9) {
    int v15 = v12 + 1;
  }
  else {
    int v15 = v9;
  }
  v28[0] = v15;
  v28[1] = 1;
  uint64_t result = ConvertFunc(v14, 0, 0, 0, a3, 0, v28, 0);
  char v17 = v6 & 7;
  unint64_t v18 = (unint64_t)(v12 + 1) << ((0xFA50u >> (2 * (v6 & 7))) & 3);
  if (v12 >= v9)
  {
    if (v9 != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v26, "scn == 1");
      std::string::basic_string[abi:ne180100]<0>(v25, "convertAndUnrollScalar");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
      cv::Exception::Exception(v27, 4294967081, v26, v25, __p, 976);
      cv::error((cv *)v27, v19);
    }
    unint64_t v20 = (0x88442211uLL >> (4 * v17)) & 0xF;
    if (v20 < v18)
    {
      uint64_t v21 = a3;
      unint64_t v22 = v18;
      do
      {
        v21[v20] = *v21;
        --v22;
        ++v21;
      }
      while (v20 != v22);
    }
  }
  if (v18 * (unint64_t)a4 > v18)
  {
    unint64_t v23 = (void)(a4 - 1) * v18;
    do
    {
      a3[v18] = *a3;
      ++a3;
      --v23;
    }
    while (v23);
  }
  return result;
}

void sub_225EC2D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void cv::bitwise_and(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, const cv::_InputArray *a5)
{
}

uint64_t cv::and8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpAnd<unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

void cv::binary_op(uint64_t a1, uint64_t a2)
{
  void (***v13)(uint64_t *__return_ptr, void, uint64_t);
  int v14;
  int v15;
  Mat *v16;
  int v17;
  int v18;
  void *v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, _DWORD *, void);
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v36;
  BOOL v37;
  int v38;
  int v39;
  int v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  const cv::Exception *v44;
  char v45;
  cv *v46;
  unsigned int v47;
  BOOL v48;
  void *v49;
  uint64_t v50;
  _DWORD *v51;
  cv *v52;
  cv *v53;
  uint64_t v54;
  _DWORD *v55;
  const cv::Exception *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  const cv::Exception *v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  BOOL v71;
  BOOL v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  int v76;
  void (*v77)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, _DWORD *, void);
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  cv *v82;
  void *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  unint64_t v99;
  unint64_t v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  unint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  _DWORD *v116;
  uint64_t v117;
  _DWORD *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t (*CopyMaskFunc)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t *);
  int v122;
  _DWORD v123[2];
  _DWORD v124[2];
  _DWORD v125[2];
  _DWORD v126[2];
  void *__p[2];
  long long v128;
  unint64_t v129;
  unint64_t v130;
  void *v131[3];
  atomic_uint *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  cv *v137;
  uint64_t v138;
  unsigned char v139[64];
  _DWORD *v140;
  cv *v141;
  void v142[2];
  cv *v143;
  _DWORD v144[2];
  _DWORD v145[2];
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  atomic_uint *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD *v154;
  cv *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  atomic_uint *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _DWORD *v165;
  cv *v166;
  uint64_t v167;
  unsigned __int8 *v168[2];
  long long v169;
  cv::Mat *v170;
  void **v171;
  void **v172;
  unsigned char *v173;
  uint64_t v174;
  int v175[2];
  unint64_t v176;
  uint64_t v177;
  long long v178;
  long long v179;
  uint64_t v180;
  _DWORD *v181;
  cv *v182;
  void v183[510];

  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  int v4 = v3;
  char v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = (void (***)(uint64_t *__return_ptr, void, uint64_t))v2;
  v183[507] = *MEMORY[0x263EF8340];
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12);
  (**v13)(&v157, v13, 0xFFFFFFFFLL);
  (**(void (***)(uint64_t *__return_ptr, uint64_t, uint64_t))v12)(&v146, v12, 0xFFFFFFFFLL);
  int32x4_t v122 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(v8);
  if (SHIDWORD(v157) > 2) {
    goto LABEL_27;
  }
  if (SHIDWORD(v146) > 2) {
    goto LABEL_27;
  }
  if (v14 != v15) {
    goto LABEL_27;
  }
  if (v165[1] != v154[1]) {
    goto LABEL_27;
  }
  char v17 = *v165;
  if (*v165 != *v154) {
    goto LABEL_27;
  }
  BOOL v16 = (Mat *)(v157 & 0xFFF);
  unint64_t v18 = v122;
  if (v16 != (v146 & 0xFFF)) {
    unint64_t v18 = 0;
  }
  if (v18 != 1)
  {
LABEL_27:
    int v28 = v14 == 0x20000;
    if (v15 == 0x20000) {
      ++v28;
    }
    if (v28 == 1) {
      goto LABEL_42;
    }
    unint64_t v29 = *(v165 - 1);
    if (v29 != *(v154 - 1)) {
      goto LABEL_42;
    }
    if (v29 == 2)
    {
      if (*v165 != *v154 || v165[1] != v154[1]) {
        goto LABEL_42;
      }
    }
    else if ((int)v29 >= 1)
    {
      if (*v165 != *v154) {
        goto LABEL_42;
      }
      uint64_t v30 = 0;
      while (v29 - 1 != v30)
      {
        unsigned int v31 = v165[v30 + 1];
        unint64_t v32 = v154[++v30];
        if (v31 != v32)
        {
          if (v30 < v29) {
            goto LABEL_42;
          }
          break;
        }
      }
    }
    if ((((unsigned __int16)v146 ^ (unsigned __int16)v157) & 0xFFF) == 0)
    {
      uint64_t v45 = 0;
      goto LABEL_81;
    }
LABEL_42:
    unint64_t v33 = v146 & 0xFFF;
    if (SHIDWORD(v157) < 3)
    {
      uint64_t v34 = v157;
      if (v159 == 1 || v158 == 1)
      {
        unint64_t v36 = v14 != 0x20000 && v15 == 0x20000;
        int v37 = v36;
        if ((v157 & 0x4000) != 0 && !v37)
        {
          unint64_t v38 = (v33 >> 3) + 1;
          int v39 = *v165;
          uint64_t v40 = v165[1];
          int v41 = v40 == v38;
          if (*v165 != 1) {
            int v41 = 0;
          }
          int v42 = v39 == v38 || *v165 == 1;
          if (v40 != 1) {
            int v42 = 0;
          }
          if (v42 || v41 || v40 == 1 && v39 == 4 && v33 <= 0x1F && (v157 & 0xFFF) == 6)
          {
            cv::swap((int *)&v157, (Mat *)&v146, v16);
            uint64_t v45 = 1;
            goto LABEL_81;
          }
        }
      }
    }
    else
    {
      uint64_t v34 = v157;
    }
    if (SHIDWORD(v146) > 2) {
      goto LABEL_80;
    }
    unint64_t v43 = v147 == 1 || v148 == 1;
    if (!v43 || (v146 & 0x4000) == 0 || v14 == 0x20000 && v15 != 0x20000) {
      goto LABEL_80;
    }
    unint64_t v68 = (v34 >> 3) & 0x1FF;
    int16x4x2_t v69 = *v154;
    int8x16_t v70 = v154[1];
    BOOL v71 = v70 == v68 + 1;
    if (*v154 != 1) {
      BOOL v71 = 0;
    }
    uint64_t v72 = v69 == v68 + 1 || *v154 == 1;
    if (v70 != 1) {
      uint64_t v72 = 0;
    }
    uint64_t v45 = 1;
    if (!v72 && !v71 && (v70 != 1 || v69 != 4 || v33 != 6 || v68 >= 4))
    {
LABEL_80:
      std::string::basic_string[abi:ne180100]<0>(v139, "The operation is neither 'array op array' (where arrays have the same size and type), nor 'array op scalar', nor 'scalar op array'");
      std::string::basic_string[abi:ne180100]<0>(v131, "binary_op");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
      cv::Exception::Exception(v175, 4294967087, v139, v131, __p, 1029);
      cv::error((cv *)v175, v44);
    }
LABEL_81:
    uint64_t v143 = 0;
    if (SHIDWORD(v157) < 1) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = (cv *)*((void *)v166 + (HIDWORD(v157) - 1));
    }
    v142[1] = 0;
    uint64_t v143 = v46;
    uint64_t v47 = v157;
    int v140 = &v139[8];
    int v141 = (cv *)v142;
    v142[0] = 0;
    *(_DWORD *)int v139 = 1124007936;
    memset(&v139[4], 0, 60);
    if (v122)
    {
      CopyMaskFunc = 0;
      int v48 = 0;
LABEL_157:
      *(void *)double v175 = &v177;
      int v176 = 4104;
      (*(void (**)(uint64_t))(*(void *)v10 + 144))(v10);
      (**(void (***)(void **__return_ptr, uint64_t, uint64_t))v10)(v131, v10, 0xFFFFFFFFLL);
      if (((v122 | !v48) & 1) == 0)
      {
        *(_OWORD *)__p = 0u;
        float32x2_t v128 = 0u;
        cv::Mat::operator=((uint64_t)v131, (int64x2_t *)__p);
      }
      unint64_t v75 = v157 & 7;
      if (v4)
      {
        unint64_t v75 = 0;
        unint64_t v76 = (int)v143;
      }
      else
      {
        unint64_t v76 = ((v47 >> 3) & 0x1FF) + 1;
      }
      unint64_t v77 = v6[v75];
      uint64_t v78 = ((unint64_t)v46 + 1023) / (unint64_t)v46;
      if (v45)
      {
        unint64_t v170 = (cv::Mat *)&v157;
        int v171 = v131;
        uint64_t v172 = (void **)v139;
        uint64_t v173 = 0;
        v168[1] = 0;
        v168[0] = 0;
        *(void *)&uint64_t v169 = 0;
        cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)__p, &v170, v168, -1);
        __int16 v79 = v130;
        if (v78 >= v130) {
          uint64_t v78 = v130;
        }
        int v80 = (v78 << (v122 ^ 1u)) * (void)v143 + 32;
        uint64_t v81 = *(uint64_t **)v175;
        if (v176 < v80)
        {
          if (*(uint64_t **)v175 != &v177)
          {
            if (*(void *)v175) {
              MEMORY[0x22A641760](*(void *)v175, 0x1000C8077774924);
            }
            *(void *)double v175 = &v177;
          }
          int v176 = v80;
          uint64_t v81 = &v177;
          if (v80 >= 0x1009) {
            operator new[]();
          }
        }
        int v82 = v143;
        cv::convertAndUnrollScalar((cv *)&v146, (const cv::Mat *)(v157 & 0xFFF), v81, (unsigned __int8 *)v78);
        unint64_t v84 = 0;
        uint64_t v85 = ((unint64_t)v81 + (void)v82 * v78 + 15) & 0xFFFFFFFFFFFFFFF0;
        while (v84 < v129)
        {
          uint64_t v119 = v84;
          if (v79)
          {
            float v86 = 0;
            uint64_t v87 = v168[0];
            uint64_t v88 = v168[1];
            do
            {
              if (v79 - v86 >= v78) {
                uint64_t v89 = v78;
              }
              else {
                uint64_t v89 = v79 - v86;
              }
              v124[0] = v76 * v89;
              v124[1] = 1;
              if (v122) {
                unint64_t v90 = (unint64_t)v88;
              }
              else {
                unint64_t v90 = v85;
              }
              v77((uint64_t)v87, 0, (uint64_t)v81, 0, v90, 0, v124, 0);
              if (v122)
              {
                uint64_t v91 = v89 << 32;
              }
              else
              {
                v123[0] = v89;
                v123[1] = 1;
                CopyMaskFunc(v85, 0, v169, 0, (uint64_t)v168[1], 0, v123, (uint64_t *)&v143);
                uint64_t v91 = v89 << 32;
                *(void *)&uint64_t v169 = v169 + (int)v89;
              }
              float32x2_t v92 = v91 * (void)v143;
              uint64_t v87 = &v168[0][v92 >> 32];
              uint64_t v88 = &v168[1][v92 >> 32];
              v168[0] = v87;
              v168[1] = v88;
              v86 += v78;
            }
            while (v86 < v79);
          }
          unint64_t v84 = v119 + 1;
          cv::NAryMatIterator::operator++((uint64_t)__p);
        }
      }
      else
      {
        unint64_t v170 = (cv::Mat *)&v157;
        int v171 = (void **)&v146;
        uint64_t v172 = v131;
        uint64_t v173 = v139;
        double v174 = 0;
        *(_OWORD *)double v168 = 0u;
        uint64_t v169 = 0u;
        cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)__p, &v170, v168, -1);
        int v93 = v130;
        float32x2_t v94 = v130;
        if ((v130 * v76) >> 31) {
          float32x2_t v94 = 0x7FFFFFFF / v76;
        }
        if (v122)
        {
          int v95 = 0;
        }
        else
        {
          if (v78 < v94) {
            float32x2_t v94 = ((unint64_t)v46 + 1023) / (unint64_t)v46;
          }
          uint64_t v96 = (void)v143 * v94;
          int v95 = *(uint64_t **)v175;
          if (v176 < (unint64_t)v143 * v94)
          {
            if (*(uint64_t **)v175 != &v177)
            {
              if (*(void *)v175) {
                MEMORY[0x22A641760](*(void *)v175, 0x1000C8077774924);
              }
              *(void *)double v175 = &v177;
            }
            int v176 = v96;
            if (v96 >= 0x1009) {
              operator new[]();
            }
            int v95 = &v177;
          }
        }
        int16x4x2_t v99 = 0;
        while (v99 < v129)
        {
          int16x8_t v120 = v99;
          if (v93)
          {
            float v100 = 0;
            uint64_t v101 = v168[0];
            uint64_t v102 = v168[1];
            uint64_t v103 = v93;
            unint64_t v104 = (uint64_t *)v169;
            do
            {
              uint64_t v105 = v103 - v94;
              if (v103 >= v94) {
                uint64_t v106 = v94;
              }
              else {
                uint64_t v106 = v103;
              }
              v126[0] = v76 * v106;
              v126[1] = 1;
              if (v122) {
                uint64_t v107 = v104;
              }
              else {
                uint64_t v107 = v95;
              }
              v77((uint64_t)v101, 0, (uint64_t)v102, 0, (uint64_t)v107, 0, v126, 0);
              if (v122)
              {
                int v108 = v106 << 32;
              }
              else
              {
                v125[0] = v106;
                v125[1] = 1;
                CopyMaskFunc((uint64_t)v95, 0, *((void *)&v169 + 1), 0, v169, 0, v125, (uint64_t *)&v143);
                int v108 = v106 << 32;
                *((void *)&v169 + 1) += (int)v106;
              }
              uint64_t v109 = v108 * (void)v143;
              uint64_t v101 = &v168[0][v109 >> 32];
              uint64_t v102 = &v168[1][v109 >> 32];
              v168[0] = v101;
              v168[1] = v102;
              unint64_t v104 = (uint64_t *)(v169 + (v109 >> 32));
              *(void *)&uint64_t v169 = v104;
              v100 += v94;
              uint64_t v103 = v105;
            }
            while (v100 < v93);
          }
          int16x4x2_t v99 = v120 + 1;
          cv::NAryMatIterator::operator++((uint64_t)__p);
        }
      }
      if (v132 && atomic_fetch_add(v132, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v131, v83);
      }
      v131[2] = 0;
      uint64_t v133 = 0;
      uint64_t v134 = 0;
      uint64_t v135 = 0;
      if (SHIDWORD(v131[0]) >= 1)
      {
        uint64_t v110 = 0;
        uint64_t v111 = v136;
        do
          *(_DWORD *)(v111 + 4 * v110++) = 0;
        while (v110 < SHIDWORD(v131[0]));
      }
      float32x2_t v132 = 0;
      if (v137 != (cv *)&v138) {
        cv::fastFree((void **)v137, v83);
      }
      if (*(uint64_t **)v175 != &v177 && *(void *)v175 != 0) {
        MEMORY[0x22A641760]();
      }
      if (*(void *)&v139[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v139[24], 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v139, v83);
      }
      *(void *)&v139[16] = 0;
      memset(&v139[32], 0, 24);
      if (*(int *)&v139[4] >= 1)
      {
        uint64_t v113 = 0;
        uint64_t v114 = v140;
        do
          v114[v113++] = 0;
        while (v113 < *(int *)&v139[4]);
      }
      *(void *)&v139[24] = 0;
      if (v141 != (cv *)v142) {
        cv::fastFree((void **)v141, v83);
      }
      goto LABEL_245;
    }
    (**(void (***)(int *__return_ptr, uint64_t, uint64_t))v8)(v175, v8, 0xFFFFFFFFLL);
    if ((void)v178) {
      atomic_fetch_add((atomic_uint *volatile)v178, 1u);
    }
    if (*(void *)&v139[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v139[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v139, v49);
    }
    *(void *)&v139[16] = 0;
    memset(&v139[32], 0, 24);
    if (*(uint64_t *)v139 <= 0)
    {
      *(void *)&v139[24] = 0;
      *(_DWORD *)int v139 = v175[0];
    }
    else
    {
      uint64_t v50 = 0;
      uint64_t v51 = v140;
      do
        v51[v50++] = 0;
      while (v50 < *(int *)&v139[4]);
      *(void *)&v139[24] = 0;
      *(_DWORD *)int v139 = v175[0];
      if (*(int *)&v139[4] > 2) {
        goto LABEL_99;
      }
    }
    if (v175[1] <= 2)
    {
      *(_DWORD *)&v139[4] = v175[1];
      *(void *)&v139[8] = v176;
      BOOL v52 = v182;
      uint8x8_t v53 = v141;
      *(void *)int v141 = *(void *)v182;
      *((void *)v53 + 1) = *((void *)v52 + 1);
LABEL_100:
      *(_OWORD *)&v139[40] = v179;
      *(_OWORD *)&v139[24] = v178;
      *(void *)&v139[16] = v177;
      *(void *)&v139[56] = v180;
      if ((void)v178 && atomic_fetch_add((atomic_uint *volatile)v178, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v175, v49);
      }
      uint64_t v177 = 0;
      double v179 = 0uLL;
      *((void *)&v178 + 1) = 0;
      if (v175[1] >= 1)
      {
        uint8x8_t v54 = 0;
        uint64_t v55 = v181;
        do
          v55[v54++] = 0;
        while (v54 < v175[1]);
      }
      *(void *)&uint64_t v178 = 0;
      if (v182 != (cv *)v183) {
        cv::fastFree((void **)v182, v49);
      }
      if ((*(_WORD *)v139 & 0xFFE) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v131, "(mask.type() == CV_8UC1 || mask.type() == CV_8SC1)");
        std::string::basic_string[abi:ne180100]<0>(__p, "binary_op");
        std::string::basic_string[abi:ne180100]<0>(&v170, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
        cv::Exception::Exception(v175, 4294967081, v131, __p, &v170, 1043);
        cv::error((cv *)v175, v56);
      }
      unint64_t v57 = *(v140 - 1);
      if (v57 == *(v165 - 1))
      {
        if (v57 == 2)
        {
          if (*v140 == *v165 && v140[1] == v165[1]) {
            goto LABEL_122;
          }
        }
        else
        {
          if ((int)v57 < 1) {
            goto LABEL_122;
          }
          if (*v140 == *v165)
          {
            uint64_t v58 = 1;
            do
            {
              uint64_t v59 = v58;
              if (v57 == v58) {
                break;
              }
              uint64_t v60 = v140[v58];
              uint64_t v61 = v165[v58++];
            }
            while (v60 == v61);
            if (v59 >= v57)
            {
LABEL_122:
              CopyMaskFunc = cv::getCopyMaskFunc((unint64_t)v143);
              (**(void (***)(int *__return_ptr, uint64_t, uint64_t))v10)(v175, v10, 0xFFFFFFFFLL);
              uint64_t v64 = *(v181 - 1);
              if (v64 == *(v165 - 1))
              {
                if (v64 == 2)
                {
                  if (*v181 == *v165 && v181[1] == v165[1]) {
                    goto LABEL_148;
                  }
                }
                else
                {
                  if ((int)v64 < 1)
                  {
LABEL_148:
                    int v48 = (((unsigned __int16)v157 ^ LOWORD(v175[0])) & 0xFFF) != 0;
LABEL_149:
                    if ((void)v178 && atomic_fetch_add((atomic_uint *volatile)v178, 0xFFFFFFFF) == 1) {
                      cv::Mat::deallocate((cv::Mat *)v175, v63);
                    }
                    uint64_t v177 = 0;
                    *((void *)&v178 + 1) = 0;
                    double v179 = 0uLL;
                    if (v175[1] >= 1)
                    {
                      int v73 = 0;
                      unsigned int v74 = v181;
                      do
                        v74[v73++] = 0;
                      while (v73 < v175[1]);
                    }
                    *(void *)&uint64_t v178 = 0;
                    if (v182 != (cv *)v183) {
                      cv::fastFree((void **)v182, v63);
                    }
                    goto LABEL_157;
                  }
                  if (*v181 == *v165)
                  {
                    uint64_t v65 = 0;
                    while (v64 - 1 != v65)
                    {
                      uint64_t v66 = v181[v65 + 1];
                      int v67 = v165[++v65];
                      if (v66 != v67)
                      {
                        if (v65 >= v64) {
                          goto LABEL_148;
                        }
                        goto LABEL_133;
                      }
                    }
                    goto LABEL_148;
                  }
                }
              }
LABEL_133:
              int v48 = 1;
              goto LABEL_149;
            }
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v131, "mask.size == src1.size");
      std::string::basic_string[abi:ne180100]<0>(__p, "binary_op");
      std::string::basic_string[abi:ne180100]<0>(&v170, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
      cv::Exception::Exception(v175, 4294967081, v131, __p, &v170, 1044);
      cv::error((cv *)v175, v62);
    }
LABEL_99:
    cv::Mat::copySize((cv::Mat *)v139, (const cv::Mat *)v175);
    goto LABEL_100;
  }
  v145[0] = v165[1];
  v145[1] = v17;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)v10 + 128))(v10, v145);
  (**(void (***)(int *__return_ptr, uint64_t, uint64_t))v10)(v175, v10, 0xFFFFFFFFLL);
  if (v4)
  {
    unint64_t v20 = *v6;
    if (SHIDWORD(v157) < 1) {
      LODWORD(v21) = 0;
    }
    else {
      uint64_t v21 = *((void *)v166 + (HIDWORD(v157) - 1));
    }
    unint64_t v22 = v157;
  }
  else
  {
    unint64_t v22 = v157;
    unint64_t v20 = v6[v157 & 7];
    LODWORD(v21) = ((v157 >> 3) & 0x1FF) + 1;
  }
  unint64_t v23 = v159;
  unint64_t v24 = v158;
  if ((v22 & v146 & v175[0] & 0x4000) != 0 && v158 * v159 == v158 * (uint64_t)v159)
  {
    unint64_t v23 = v158 * v159;
    unint64_t v24 = 1;
  }
  uint64_t v25 = v23 * (uint64_t)(int)v21;
  if (v25 != (int)v25)
  {
    if ((void)v178 && atomic_fetch_add((atomic_uint *volatile)v178, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v175, v19);
    }
    uint64_t v177 = 0;
    *((void *)&v178 + 1) = 0;
    double v179 = 0uLL;
    if (v175[1] >= 1)
    {
      uint64_t v26 = 0;
      int v27 = v181;
      do
        v27[v26++] = 0;
      while (v26 < v175[1]);
    }
    *(void *)&uint64_t v178 = 0;
    if (v182 != (cv *)v183) {
      cv::fastFree((void **)v182, v19);
    }
    goto LABEL_27;
  }
  v144[0] = v25;
  v144[1] = v24;
  v20(v160, v167, v149, v156, v177, v183[0], v144, 0);
  if ((void)v178 && atomic_fetch_add((atomic_uint *volatile)v178, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v175, v83);
  }
  uint64_t v177 = 0;
  *((void *)&v178 + 1) = 0;
  double v179 = 0uLL;
  if (v175[1] >= 1)
  {
    BOOL v97 = 0;
    uint64_t v98 = v181;
    do
      v98[v97++] = 0;
    while (v97 < v175[1]);
  }
  *(void *)&uint64_t v178 = 0;
  if (v182 != (cv *)v183) {
    cv::fastFree((void **)v182, v83);
  }
LABEL_245:
  if (v150 && atomic_fetch_add(v150, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v146, v83);
  }
  uint64_t v149 = 0;
  float v151 = 0;
  uint64_t v152 = 0;
  uint64_t v153 = 0;
  if (SHIDWORD(v146) >= 1)
  {
    int16x8_t v115 = 0;
    int16x8_t v116 = v154;
    do
      v116[v115++] = 0;
    while (v115 < SHIDWORD(v146));
  }
  double v150 = 0;
  if (v155 != (cv *)&v156) {
    cv::fastFree((void **)v155, v83);
  }
  if (v161 && atomic_fetch_add(v161, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v157, v83);
  }
  uint64_t v160 = 0;
  double v162 = 0;
  double v163 = 0;
  unint64_t v164 = 0;
  if (SHIDWORD(v157) >= 1)
  {
    long long v117 = 0;
    uint64_t v118 = v165;
    do
      v118[v117++] = 0;
    while (v117 < SHIDWORD(v157));
  }
  double v161 = 0;
  if (v166 != (cv *)&v167) {
    cv::fastFree((void **)v166, v83);
  }
}

void sub_225EC40A0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void cv::bitwise_or(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, const cv::_InputArray *a5)
{
}

uint64_t cv::or8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpOr<unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

void cv::bitwise_xor(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, const cv::_InputArray *a5)
{
}

uint64_t cv::xor8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpXor<unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

void cv::bitwise_not(cv *this, const cv::_InputArray *a2, const cv::_OutputArray *a3, const cv::_InputArray *a4)
{
}

uint64_t cv::not8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpNot<unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

void cv::max(cv *this, const cv::Mat *a2, const cv::Mat *a3, cv::Mat *a4)
{
  cv::_OutputArray::_OutputArray((uint64_t)v9, a3);
  cv::_InputArray::_InputArray((uint64_t)v8, this);
  char v6 = (cv *)cv::_InputArray::_InputArray((uint64_t)v7, a2);
  cv::noArray(v6);
  cv::binary_op((uint64_t)v8, (uint64_t)v7);
}

void cv::min(cv *this, const cv::Mat *a2, const cv::Mat *a3, cv::Mat *a4)
{
  cv::_OutputArray::_OutputArray((uint64_t)v9, a3);
  cv::_InputArray::_InputArray((uint64_t)v8, this);
  char v6 = (cv *)cv::_InputArray::_InputArray((uint64_t)v7, a2);
  cv::noArray(v6);
  cv::binary_op((uint64_t)v8, (uint64_t)v7);
}

void cv::max(cv *this, const cv::Mat *a2, double a3, cv::Mat *a4)
{
  double v9 = a3;
  cv::_OutputArray::_OutputArray((uint64_t)v8, a2);
  cv::_InputArray::_InputArray((uint64_t)v7, this);
  cv::_InputArray::_InputArray((cv::_InputArray *)v6, &v9);
  cv::noArray(v5);
  cv::binary_op((uint64_t)v7, (uint64_t)v6);
}

void cv::min(cv *this, const cv::Mat *a2, double a3, cv::Mat *a4)
{
  double v9 = a3;
  cv::_OutputArray::_OutputArray((uint64_t)v8, a2);
  cv::_InputArray::_InputArray((uint64_t)v7, this);
  cv::_InputArray::_InputArray((cv::_InputArray *)v6, &v9);
  cv::noArray(v5);
  cv::binary_op((uint64_t)v7, (uint64_t)v6);
}

void cv::add(uint64_t this, uint64_t a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, const cv::_InputArray *a5)
{
}

void cv::arithm_op(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v207 = v3;
  char v5 = v4;
  uint64_t v7 = v6;
  int v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v16 = v2;
  v280[507] = *MEMORY[0x263EF8340];
  int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
  (**(void (***)(uint64_t *__return_ptr, uint64_t, uint64_t))v16)(&v254, v16, 0xFFFFFFFFLL);
  (**(void (***)(uint64_t *__return_ptr, uint64_t, uint64_t))v15)(&v243, v15, 0xFFFFFFFFLL);
  int v198 = (*(uint64_t (**)(cv::Mat *))(*(void *)v11 + 88))(v11);
  double v191 = v11;
  unsigned int v20 = v243 & 0xFFF;
  if (SHIDWORD(v254) < 3)
  {
    BOOL v21 = 0;
    __int16 v22 = v254;
    BOOL v23 = v255 == 1 || v256 == 1;
    if (v23 && (v254 & 0x4000) != 0)
    {
      if (v17 == 0x20000 || v18 != 0x20000)
      {
        int v62 = (v20 >> 3) + 1;
        __int32 v63 = v262->i32[0];
        __int32 v64 = v262->i32[1];
        BOOL v65 = v64 == v62;
        if (v262->i32[0] != 1) {
          BOOL v65 = 0;
        }
        BOOL v66 = v63 == v62 || v262->i32[0] == 1;
        if (v64 != 1) {
          BOOL v66 = 0;
        }
        BOOL v21 = 1;
        if (!v66 && !v65)
        {
          BOOL v21 = 0;
          if (v64 == 1 && v63 == 4) {
            BOOL v21 = v20 < 0x20 && (v254 & 0xFFF) == 6;
          }
        }
      }
      else
      {
        BOOL v21 = 0;
      }
    }
  }
  else
  {
    BOOL v21 = 0;
    __int16 v22 = v254;
  }
  unsigned int v24 = v22 & 0xFFF;
  if (SHIDWORD(v243) > 2) {
    goto LABEL_13;
  }
  BOOL v25 = 0;
  BOOL v26 = v244 == 1 || v245 == 1;
  if (v26 && (v243 & 0x4000) != 0)
  {
    if (v17 == 0x20000 && v18 != 0x20000)
    {
LABEL_13:
      BOOL v25 = 0;
      goto LABEL_14;
    }
    int v27 = (v24 >> 3) + 1;
    int v28 = *v251;
    int v29 = v251[1];
    BOOL v30 = v29 == v27;
    if (*v251 != 1) {
      BOOL v30 = 0;
    }
    BOOL v31 = v28 == v27 || *v251 == 1;
    if (v29 != 1) {
      BOOL v31 = 0;
    }
    BOOL v25 = 1;
    if (!v31 && !v30)
    {
      BOOL v25 = 0;
      if (v29 == 1 && v28 == 4) {
        BOOL v25 = v20 == 6 && v24 < 0x20;
      }
    }
  }
LABEL_14:
  if (v17 == v18)
  {
    if (SHIDWORD(v254) > 2 || SHIDWORD(v243) > 2) {
      goto LABEL_62;
    }
  }
  else if (SHIDWORD(v243) > 2 || SHIDWORD(v254) > 2 || (v22 & 0xFF8) != 0)
  {
    goto LABEL_62;
  }
  BOOL v34 = v262->i32[1] == v251[1] && v262->i32[0] == *v251 && v24 == v20;
  int v35 = v198;
  if (!v34) {
    int v35 = 0;
  }
  if (v35 == 1)
  {
    if (((*(uint64_t (**)(uint64_t))(*(void *)v13 + 104))(v13) & 1) == 0
      && (v9 < 0 || ((v254 ^ v9) & 7) == 0)
      || (*(unsigned int (**)(uint64_t))(*(void *)v13 + 104))(v13)
      && (int v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 64))(v13, 0xFFFFFFFFLL),
          v36 == (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v16 + 64))(v16, 0xFFFFFFFFLL)))
    {
      if (v21 && v25 || !v21 && !v25)
      {
        int32x2_t v242 = vrev64_s32(*v262);
        (*(void (**)(uint64_t, int32x2_t *, uint64_t, uint64_t, void, void))(*(void *)v13 + 128))(v13, &v242, v254 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
        (**(void (***)(uint64_t **__return_ptr, uint64_t, uint64_t))v13)(&v272, v13, 0xFFFFFFFFLL);
        int v77 = v255;
        unint64_t v78 = (((unint64_t)v254 >> 3) & 0x1FF) + 1;
        if ((v254 & v243 & v272 & 0x4000) != 0
          && (uint64_t v79 = v256 * (uint64_t)(int)v78 * v255, v79 == (int)v79))
        {
          int v77 = 1;
        }
        else
        {
          LODWORD(v79) = v256 * v78;
        }
        int v80 = *(void (**)(uint64_t, uint64_t, double *, uint64_t, uint64_t, void, _DWORD *, uint64_t))(v7 + 8 * (v254 & 7));
        v241[0] = v79;
        v241[1] = v77;
        v80(v257, v264, v246, v253, v274, v280[0], v241, v207);
        if ((void)v275 && atomic_fetch_add((atomic_uint *volatile)v275, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)&v272, v81);
        }
        uint64_t v274 = 0;
        *((void *)&v275 + 1) = 0;
        long long v276 = 0uLL;
        if (SHIDWORD(v272) >= 1)
        {
          uint64_t v82 = 0;
          BOOL v83 = v278;
          do
            v83[v82++] = 0;
          while (v82 < SHIDWORD(v272));
        }
        *(void *)&long long v275 = 0;
        if (v279 != (cv *)v280) {
          cv::fastFree((void **)v279, v81);
        }
        goto LABEL_459;
      }
    }
  }
LABEL_62:
  uint64_t v204 = v7;
  unint64_t v37 = v262[-1].u32[1];
  if (v37 != *(v251 - 1)) {
    goto LABEL_74;
  }
  if (v37 == 2)
  {
    if (v262->i32[0] != *v251 || v262->i32[1] != v251[1]) {
      goto LABEL_74;
    }
  }
  else if ((int)v37 >= 1)
  {
    if (v262->i32[0] != *v251) {
      goto LABEL_74;
    }
    unint64_t v38 = 0;
    do
    {
      if (v37 - 1 == v38) {
        goto LABEL_73;
      }
      __int32 v39 = v262->i32[v38 + 1];
      int v40 = v251[++v38];
    }
    while (v39 == v40);
    if (v38 < v37) {
      goto LABEL_74;
    }
  }
LABEL_73:
  unsigned int v41 = v254;
  if ((((unsigned __int16)v254 ^ (unsigned __int16)v243) & 0xFF8) == 0)
  {
    if (v17 != 0x20000
      || (v262->i32[0] != 4 ? (BOOL v73 = v262->i32[0] == 1) : (BOOL v73 = 1),
          !v73 ? (char v74 = 0) : (char v74 = 1),
          v262->i32[1] != 1 || (v74 & 1) == 0))
    {
      uint64_t v49 = v243 & 7;
      if (v18 != 0x20000)
      {
        int v48 = 0;
        int v199 = 0;
        if ((v9 & 0x80000000) == 0) {
          goto LABEL_220;
        }
        goto LABEL_214;
      }
      int v48 = 0;
      BOOL v76 = *v251 == 4 || *v251 == 1;
      if (v251[1] != 1)
      {
        int v199 = 0;
        if ((v9 & 0x80000000) == 0) {
          goto LABEL_220;
        }
        goto LABEL_214;
      }
      int v199 = 0;
      if (!v76)
      {
LABEL_213:
        if ((v9 & 0x80000000) == 0) {
          goto LABEL_220;
        }
        goto LABEL_214;
      }
    }
  }
LABEL_74:
  unsigned int v42 = v243 & 0xFFF;
  if (SHIDWORD(v254) < 3)
  {
    unsigned int v43 = v254;
    BOOL v45 = v255 != 1 && v256 != 1 || (v254 & 0x4000) == 0;
    if (!v45 && (v17 == 0x20000 || v18 != 0x20000))
    {
      int v68 = (v42 >> 3) + 1;
      __int32 v69 = v262->i32[0];
      __int32 v70 = v262->i32[1];
      BOOL v71 = v70 == v68;
      if (v262->i32[0] != 1) {
        BOOL v71 = 0;
      }
      BOOL v72 = v69 == v68 || v262->i32[0] == 1;
      if (v70 != 1) {
        BOOL v72 = 0;
      }
      if (v72 || v71 || v70 == 1 && v69 == 4 && v42 <= 0x1F && (v254 & 0xFFF) == 6)
      {
        cv::swap((int *)&v254, (Mat *)&v243, v19);
        int v199 = 1;
        goto LABEL_88;
      }
    }
  }
  else
  {
    unsigned int v43 = v254;
  }
  if (SHIDWORD(v243) > 2
    || (v244 != 1 ? (BOOL v55 = v245 == 1) : (BOOL v55 = 1), !v55 || (v243 & 0x4000) == 0 || v17 == 0x20000 && v18 != 0x20000))
  {
LABEL_86:
    std::string::basic_string[abi:ne180100]<0>(v236, "The operation is neither 'array op array' (where arrays have the same size and the same number of channels), nor 'array op scalar', nor 'scalar op array'");
    std::string::basic_string[abi:ne180100]<0>(v228, "arithm_op");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
    cv::Exception::Exception(&v272, 4294967087, v236, v228, __p, 1295);
    cv::error((cv *)&v272, v46);
  }
  int v199 = 0;
  unsigned int v56 = (v43 >> 3) & 0x1FF;
  int v57 = *v251;
  int v58 = v251[1];
  BOOL v59 = v58 == v56 + 1;
  if (*v251 != 1) {
    BOOL v59 = 0;
  }
  BOOL v60 = v57 == v56 + 1 || *v251 == 1;
  if (v58 != 1) {
    BOOL v60 = 0;
  }
  if (!v60 && !v59)
  {
    if (v58 != 1 || v57 != 4 || v42 != 6 || v56 >= 4) {
      goto LABEL_86;
    }
    int v199 = 0;
  }
LABEL_88:
  if ((v243 & 0xFFF) != 6 || v244 != 1 && v244 != 4)
  {
    std::string::basic_string[abi:ne180100]<0>(v236, "src2.type() == CV_64F && (src2.rows == 4 || src2.rows == 1)");
    std::string::basic_string[abi:ne180100]<0>(v228, "arithm_op");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
    cv::Exception::Exception(&v272, 4294967081, v236, v228, __p, 1297);
    cv::error((cv *)&v272, v47);
  }
  unsigned int v41 = v254;
  if (v5)
  {
    int v48 = 1;
    uint64_t v49 = 6;
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_220;
    }
  }
  else
  {
    uint64_t v50 = v246;
    unint64_t v51 = (((unint64_t)v254 >> 3) & 0x1FF) + 1;
    int v52 = 0x7FFFFFFF;
    int v53 = 0x80000000;
    while (1)
    {
      uint64_t v54 = (uint64_t)rint(*v50);
      if (*v50 != (double)(int)v54) {
        break;
      }
      if (v53 <= (int)v54) {
        int v53 = v54;
      }
      if (v52 >= (int)v54) {
        int v52 = v54;
      }
      ++v50;
      if (!--v51)
      {
        if ((v52 & 0x80000000) == 0 && v53 < 256)
        {
          uint64_t v49 = 0;
LABEL_212:
          int v48 = 1;
          goto LABEL_213;
        }
        if (v52 >= -128 && v53 < 128)
        {
          uint64_t v49 = 1;
          goto LABEL_212;
        }
        if (v52 < 0 || v53 >= 0x10000)
        {
          if (v53 >= 0x8000 || v52 <= -32769) {
            uint64_t v49 = 4;
          }
          else {
            uint64_t v49 = 3;
          }
          goto LABEL_212;
        }
        int v48 = 1;
        uint64_t v49 = 2;
        if ((v9 & 0x80000000) == 0) {
          goto LABEL_220;
        }
        goto LABEL_214;
      }
    }
    if ((v254 & 7) == 5) {
      unsigned int v61 = 5;
    }
    else {
      unsigned int v61 = 6;
    }
    if ((v254 & 7u) >= 4) {
      uint64_t v49 = v61;
    }
    else {
      uint64_t v49 = 5;
    }
    int v48 = 1;
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_220;
    }
  }
LABEL_214:
  if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 104))(v13))
  {
    LOBYTE(v9) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 64))(v13, 0xFFFFFFFFLL);
  }
  else
  {
    if ((v48 & 1) == 0 && (((unsigned __int16)v243 ^ (unsigned __int16)v254) & 0xFFF) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v236, "When the input arrays in add/subtract/multiply/divide functions have different types, the output array type must be explicitly specified");
      std::string::basic_string[abi:ne180100]<0>(v228, "arithm_op");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
      cv::Exception::Exception(&v272, 4294967291, v236, v228, __p, 1321);
      cv::error((cv *)&v272, v85);
    }
    LOBYTE(v9) = v254;
  }
LABEL_220:
  unsigned int v86 = v41 & 7;
  unsigned int v87 = v9 & 7;
  if (v86 != v49 || (uint64_t v88 = (cv *)v49, v87 != v86))
  {
    if (v5)
    {
      if (v49 <= v86) {
        unsigned int v89 = v41 & 7;
      }
      else {
        unsigned int v89 = v49;
      }
      if (v89 <= v87) {
        unsigned int v89 = v9 & 7;
      }
      BOOL v90 = v89 > 5;
      unsigned int v91 = 5;
    }
    else
    {
      if (v86 > 1 || v49 >= 2)
      {
        if (v86 <= v49) {
          unsigned int v89 = v49;
        }
        else {
          unsigned int v89 = v41 & 7;
        }
        if (v49 < 5 && v86 < 5) {
          unsigned int v89 = 4;
        }
      }
      else
      {
        unsigned int v89 = 3;
      }
      if (v89 <= v87) {
        unsigned int v89 = v9 & 7;
      }
      if (v49 >= 5 && v86 >= 5) {
        unsigned int v91 = v89;
      }
      else {
        unsigned int v91 = 4;
      }
      BOOL v90 = v87 > 4;
    }
    if (v90) {
      uint64_t v88 = (cv *)v89;
    }
    else {
      uint64_t v88 = (cv *)v91;
    }
  }
  if (v86 == v88) {
    uint64_t ConvertFunc = 0;
  }
  else {
    uint64_t ConvertFunc = cv::getConvertFunc((cv *)(v41 & 7), (char)v88);
  }
  int16x4x2_t v208 = (void (*)(uint64_t *, void, void, void, uint64_t *, void, _DWORD *, void))ConvertFunc;
  double v201 = (void (*)(void *, void, void, void, unint64_t, void, _DWORD *, void))ConvertFunc;
  if (v86 != v49)
  {
    if (v49 == v88) {
      double v201 = 0;
    }
    else {
      double v201 = (void (*)(void *, void, void, void, unint64_t, void, _DWORD *, void))cv::getConvertFunc((cv *)v49, (char)v88);
    }
  }
  if (v87 == v88) {
    double v197 = 0;
  }
  else {
    double v197 = (void (*)(void, void, void, void, void, void))cv::getConvertFunc(v88, v9 & 7);
  }
  int v206 = ((v41 >> 3) & 0x1FF) + 1;
  unsigned int v95 = 8 * v206 - 8;
  if (SHIDWORD(v254) < 1) {
    uint64_t v203 = 0;
  }
  else {
    uint64_t v203 = *((void *)v263 + (HIDWORD(v254) - 1));
  }
  int v96 = v87 | v95;
  if (SHIDWORD(v243) < 1) {
    uint64_t v195 = 0;
  }
  else {
    uint64_t v195 = *((void *)v252 + (HIDWORD(v243) - 1));
  }
  int v97 = (v95 >> 3) + 1;
  double v240 = (cv *)(v97 << ((0xFA50u >> (2 * (v96 & 7))) & 3));
  float v237 = &v236[8];
  double v238 = (cv *)v239;
  v239[1] = 0;
  v239[0] = 0;
  *(_DWORD *)v236 = 1124007936;
  memset(&v236[4], 0, 60);
  if (v198)
  {
    int v98 = 8 * v206 - 8;
    int16x4x2_t v99 = 0;
    uint64_t v100 = v13;
    BOOL v101 = 0;
    CopyMaskFunc = 0;
    goto LABEL_328;
  }
  (**(void (***)(uint64_t **__return_ptr))v191)(&v272);
  if ((void)v275) {
    atomic_fetch_add((atomic_uint *volatile)v275, 1u);
  }
  if (*(void *)&v236[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v236[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v236, v102);
  }
  *(void *)&v236[16] = 0;
  memset(&v236[32], 0, 24);
  if (*(uint64_t *)v236 <= 0)
  {
    *(void *)&v236[24] = 0;
    *(_DWORD *)v236 = v272;
  }
  else
  {
    uint64_t v103 = 0;
    unint64_t v104 = v237;
    do
      v104[v103++] = 0;
    while (v103 < *(int *)&v236[4]);
    *(void *)&v236[24] = 0;
    *(_DWORD *)v236 = v272;
    if (*(int *)&v236[4] > 2) {
      goto LABEL_283;
    }
  }
  if (SHIDWORD(v272) > 2)
  {
LABEL_283:
    cv::Mat::copySize((cv::Mat *)v236, (const cv::Mat *)&v272);
    goto LABEL_284;
  }
  *(_DWORD *)&v236[4] = HIDWORD(v272);
  *(void *)&v236[8] = v273;
  uint64_t v105 = v279;
  uint64_t v106 = v238;
  *(void *)double v238 = *(void *)v279;
  *((void *)v106 + 1) = *((void *)v105 + 1);
LABEL_284:
  *(_OWORD *)&v236[24] = v275;
  *(_OWORD *)&v236[40] = v276;
  *(void *)&v236[16] = v274;
  *(void *)&v236[56] = v277;
  if ((void)v275 && atomic_fetch_add((atomic_uint *volatile)v275, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v272, v102);
  }
  uint64_t v274 = 0;
  long long v276 = 0uLL;
  *((void *)&v275 + 1) = 0;
  if (SHIDWORD(v272) >= 1)
  {
    uint64_t v107 = 0;
    int v108 = v278;
    do
      v108[v107++] = 0;
    while (v107 < SHIDWORD(v272));
  }
  *(void *)&long long v275 = 0;
  if (v279 != (cv *)v280) {
    cv::fastFree((void **)v279, v102);
  }
  if ((*(_WORD *)v236 & 0xFFE) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v228, "(mask.type() == CV_8UC1 || mask.type() == CV_8SC1)");
    std::string::basic_string[abi:ne180100]<0>(__p, "arithm_op");
    std::string::basic_string[abi:ne180100]<0>(&v267, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
    cv::Exception::Exception(&v272, 4294967081, v228, __p, &v267, 1363);
    cv::error((cv *)&v272, v109);
  }
  unint64_t v110 = *(v237 - 1);
  if (v110 != v262[-1].i32[1]) {
    goto LABEL_305;
  }
  if (v110 == 2)
  {
    if (*v237 == v262->i32[0] && v237[1] == v262->i32[1]) {
      goto LABEL_306;
    }
LABEL_305:
    std::string::basic_string[abi:ne180100]<0>(v228, "mask.size == src1.size");
    std::string::basic_string[abi:ne180100]<0>(__p, "arithm_op");
    std::string::basic_string[abi:ne180100]<0>(&v267, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
    cv::Exception::Exception(&v272, 4294967081, v228, __p, &v267, 1364);
    cv::error((cv *)&v272, v115);
  }
  if ((int)v110 >= 1)
  {
    if (*v237 != v262->i32[0]) {
      goto LABEL_305;
    }
    uint64_t v111 = 1;
    do
    {
      unint64_t v112 = v111;
      if (v110 == v111) {
        break;
      }
      int v113 = v237[v111];
      __int32 v114 = v262->i32[v111++];
    }
    while (v113 == v114);
    if (v112 < v110) {
      goto LABEL_305;
    }
  }
LABEL_306:
  CopyMaskFunc = cv::getCopyMaskFunc((unint64_t)v240);
  (**(void (***)(uint64_t **__return_ptr, uint64_t, uint64_t))v13)(&v272, v13, 0xFFFFFFFFLL);
  unint64_t v117 = *(v278 - 1);
  if (v117 != v262[-1].i32[1]) {
    goto LABEL_317;
  }
  if (v117 == 2)
  {
    if (*v278 == v262->i32[0] && v278[1] == v262->i32[1]) {
      goto LABEL_318;
    }
LABEL_317:
    uint64_t v100 = v13;
    BOOL v101 = 1;
    goto LABEL_319;
  }
  if ((int)v117 >= 1)
  {
    if (*v278 == v262->i32[0])
    {
      unint64_t v118 = 0;
      while (v117 - 1 != v118)
      {
        int v119 = v278[v118 + 1];
        __int32 v120 = v262->i32[++v118];
        if (v119 != v120)
        {
          if (v118 >= v117) {
            goto LABEL_318;
          }
          goto LABEL_317;
        }
      }
      goto LABEL_318;
    }
    goto LABEL_317;
  }
LABEL_318:
  uint64_t v100 = v13;
  BOOL v101 = ((unsigned __int16)v272 & 0xFFF) != v96;
LABEL_319:
  if ((void)v275 && atomic_fetch_add((atomic_uint *volatile)v275, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v272, v116);
  }
  uint64_t v274 = 0;
  *((void *)&v275 + 1) = 0;
  long long v276 = 0uLL;
  if (SHIDWORD(v272) >= 1)
  {
    uint64_t v121 = 0;
    int32x4_t v122 = v278;
    do
      v122[v121++] = 0;
    while (v121 < SHIDWORD(v272));
  }
  *(void *)&long long v275 = 0;
  if (v279 != (cv *)v280) {
    cv::fastFree((void **)v279, v116);
  }
  int v98 = 8 * v206 - 8;
  int16x4x2_t v99 = v240;
LABEL_328:
  unsigned int v192 = v98 & 0xFFFFFFF8 | v88 & 7;
  uint64_t v123 = (v97 << ((0xFA50u >> (2 * (v88 & 7))) & 3));
  double v272 = &v274;
  unint64_t v273 = 4104;
  if (v208) {
    uint64_t v124 = v123;
  }
  else {
    uint64_t v124 = 0;
  }
  if (v201) {
    int v125 = 1;
  }
  else {
    int v125 = v48;
  }
  if (v125) {
    uint64_t v126 = v123;
  }
  else {
    uint64_t v126 = 0;
  }
  if (v197) {
    uint64_t v127 = v123;
  }
  else {
    uint64_t v127 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v100 + 144))(v100);
  (**(void (***)(void **__return_ptr, uint64_t, uint64_t))v100)(v228, v100, 0xFFFFFFFFLL);
  if (((v198 | !v101) & 1) == 0)
  {
    long long v225 = 0u;
    *(_OWORD *)__p = 0u;
    cv::Mat::operator=((uint64_t)v228, (int64x2_t *)__p);
  }
  unsigned int v128 = v88 & 7;
  char v129 = v198 ^ 1;
  double v130 = (char *)v99 + v124 + v127 + v126;
  uint64_t v205 = *(void (**)(unsigned char *, void, uint64_t *, void, unint64_t, void))(v204 + 8 * v128);
  unint64_t v131 = (unsigned __int16)(v123 + 1023) / (unsigned __int16)v123;
  if (v48)
  {
    double v267 = (cv::Mat *)&v254;
    double v268 = v228;
    uint64_t v269 = (void **)v236;
    unint64_t v270 = 0;
    long long v265 = 0uLL;
    *(void *)&long long v266 = 0;
    cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)__p, &v267, (unsigned __int8 **)&v265, -1);
    float32x2_t v132 = v227;
    if ((unint64_t)v227 >= v131) {
      unint64_t v133 = (unsigned __int16)(v123 + 1023) / (unsigned __int16)v123;
    }
    else {
      unint64_t v133 = (unint64_t)v227;
    }
    unint64_t v134 = v133 * (void)v130 + 64;
    uint64_t v135 = v272;
    if (v273 < v134)
    {
      if (v272 != &v274)
      {
        if (v272) {
          MEMORY[0x22A641760](v272, 0x1000C8077774924);
        }
        double v272 = &v274;
      }
      unint64_t v273 = v134;
      uint64_t v135 = &v274;
      if (v134 >= 0x1009) {
        operator new[]();
      }
    }
    unint64_t v136 = v133 * v123;
    if (v208) {
      float v137 = (unsigned char *)(((unint64_t)v135 + v133 * v123 + 15) & 0xFFFFFFFFFFFFFFF0);
    }
    else {
      float v137 = v135;
    }
    cv::convertAndUnrollScalar((cv *)&v243, (const cv::Mat *)v192, v137, (unsigned __int8 *)v133);
    float v138 = 0;
    unint64_t v202 = (unint64_t)&v137[v136 + 15] & 0xFFFFFFFFFFFFFFF0;
    unint64_t v196 = (v202 + v136 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (v197) {
      char v129 = 1;
    }
    while (1)
    {
      if ((unint64_t)v138 >= v226) {
        goto LABEL_438;
      }
      int v193 = v138;
      if (v132) {
        break;
      }
LABEL_382:
      float v138 = (cv::Mat *)((char *)v193 + 1);
      cv::NAryMatIterator::operator++((uint64_t)__p);
    }
    unint64_t v139 = 0;
    unint64_t v141 = *((void *)&v265 + 1);
    int v140 = (uint64_t *)v265;
    while (1)
    {
      if ((unint64_t)&v132[-v139] >= v133) {
        unint64_t v142 = v133;
      }
      else {
        unint64_t v142 = (unint64_t)&v132[-v139];
      }
      if (v208)
      {
        v215[0] = v206 * v142;
        v215[1] = 1;
        v208(v140, 0, 0, 0, v135, 0, v215, 0);
        int v140 = v135;
      }
      if (v199) {
        uint64_t v143 = v137;
      }
      else {
        uint64_t v143 = v140;
      }
      if (v199) {
        float v144 = v140;
      }
      else {
        float v144 = (uint64_t *)v137;
      }
      if (v129)
      {
        v213[0] = v206 * v142;
        v213[1] = 1;
        ((void (*)(unsigned char *, void, uint64_t *, void, unint64_t, void, _DWORD *, uint64_t))v205)(v143, 0, v144, 0, v202, 0, v213, v207);
        if (!v198)
        {
          if (v197)
          {
            v210[0] = v206 * v142;
            v210[1] = 1;
            ((void (*)(unint64_t, void, void, void, unint64_t, void, _DWORD *, void))v197)(v202, 0, 0, 0, v196, 0, v210, 0);
            uint64_t v147 = v266;
            int v209 = v142;
            uint64_t v148 = &v209;
            unint64_t v149 = v196;
          }
          else
          {
            uint64_t v147 = v266;
            int v211 = v142;
            uint64_t v148 = &v211;
            unint64_t v149 = v202;
          }
          v148[1] = 1;
          ((void (*)(unint64_t, void, uint64_t, void, unint64_t, void))CopyMaskFunc)(v149, 0, v147, 0, v141, 0);
          *(void *)&long long v266 = v266 + v142;
          goto LABEL_381;
        }
        float v144 = 0;
        int v212 = v206 * v142;
        float v145 = &v212;
        uint64_t v143 = (unsigned char *)v202;
        uint64_t v146 = (void (*)(unsigned char *, void, uint64_t *, void, unint64_t, void))v197;
      }
      else
      {
        int v214 = v206 * v142;
        float v145 = &v214;
        uint64_t v146 = v205;
      }
      v145[1] = 1;
      v146(v143, 0, v144, 0, v141, 0);
LABEL_381:
      int v140 = (uint64_t *)(v265 + v142 * v203);
      unint64_t v141 = *((void *)&v265 + 1) + (void)v240 * v142;
      *(void *)&long long v265 = v140;
      *((void *)&v265 + 1) = v141;
      v139 += v133;
      if (v139 >= (unint64_t)v132) {
        goto LABEL_382;
      }
    }
  }
  double v267 = (cv::Mat *)&v254;
  double v268 = (void **)&v243;
  uint64_t v269 = v228;
  unint64_t v270 = v236;
  uint64_t v271 = 0;
  long long v265 = 0u;
  long long v266 = 0u;
  cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)__p, &v267, (unsigned __int8 **)&v265, -1);
  double v150 = v208;
  if (v208) {
    int v151 = 1;
  }
  else {
    int v151 = v198 ^ 1;
  }
  if (v201) {
    int v151 = 1;
  }
  if (v197) {
    int v151 = 1;
  }
  if ((unint64_t)v227 >= v131) {
    uint64_t v152 = (unsigned __int8 *)((unsigned __int16)(v123 + 1023) / (unsigned __int16)v123);
  }
  else {
    uint64_t v152 = v227;
  }
  uint64_t v200 = v227;
  if (v151) {
    uint64_t v153 = v152;
  }
  else {
    uint64_t v153 = v227;
  }
  unint64_t v154 = (void)v153 * (void)v130 + 64;
  float v155 = v272;
  if (v273 < v154)
  {
    if (v272 != &v274)
    {
      if (v272) {
        MEMORY[0x22A641760](v272, 0x1000C8077774924);
      }
      double v272 = &v274;
    }
    unint64_t v273 = v154;
    float v155 = &v274;
    if (v154 >= 0x1009) {
      operator new[]();
    }
  }
  unint64_t v156 = 0;
  uint64_t v157 = (void)v153 * v123;
  unint64_t v158 = ((unint64_t)v155 + (void)v153 * v123 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (!v208) {
    unint64_t v158 = (unint64_t)v155;
  }
  unint64_t v159 = (v158 + v157 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (v201)
  {
    unint64_t v160 = v158;
  }
  else
  {
    unint64_t v159 = v158;
    unint64_t v160 = 0;
  }
  unint64_t v190 = v159;
  unint64_t v187 = (v159 + v157 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v188 = v160;
  if (v197) {
    char v161 = 1;
  }
  else {
    char v161 = v198 ^ 1;
  }
  char v194 = v161;
  while (v156 < v226)
  {
    unint64_t v186 = v156;
    if (v200)
    {
      unint64_t v162 = 0;
      unint64_t v164 = (void *)*((void *)&v265 + 1);
      double v163 = (void *)v265;
      int v165 = v200;
      uint64_t v166 = v266;
      do
      {
        double v167 = (unsigned __int8 *)(v165 - v153);
        if (v165 >= v153) {
          int v168 = (int)v153;
        }
        else {
          int v168 = (int)v165;
        }
        if (v150)
        {
          v223[0] = v206 * v168;
          v223[1] = 1;
          v150(v163, 0, 0, 0, v155, 0, v223, 0);
          uint64_t v169 = (void *)*((void *)&v265 + 1);
          double v163 = (void *)v265;
          unint64_t v170 = v155;
        }
        else
        {
          uint64_t v169 = v164;
          unint64_t v170 = v163;
        }
        if (v163 == v169) {
          int v171 = v170;
        }
        else {
          int v171 = v164;
        }
        if (v163 != v169 && v201)
        {
          v222[0] = v206 * v168;
          v222[1] = 1;
          v201(v164, 0, 0, 0, v188, 0, v222, 0);
          int v171 = (uint64_t *)v188;
        }
        if (v194)
        {
          v220[0] = v206 * v168;
          v220[1] = 1;
          ((void (*)(uint64_t *, void, uint64_t *, void, unint64_t, void, _DWORD *, uint64_t))v205)(v170, 0, v171, 0, v190, 0, v220, v207);
          if (!v198)
          {
            if (v197)
            {
              v217[0] = v206 * v168;
              v217[1] = 1;
              ((void (*)(unint64_t, void, void, void, unint64_t, void, _DWORD *, void))v197)(v190, 0, 0, 0, v187, 0, v217, 0);
              uint64_t v174 = *((void *)&v266 + 1);
              int v216 = v168;
              double v175 = &v216;
              unint64_t v176 = v187;
            }
            else
            {
              uint64_t v174 = *((void *)&v266 + 1);
              int v218 = v168;
              double v175 = &v218;
              unint64_t v176 = v190;
            }
            v175[1] = 1;
            ((void (*)(unint64_t, void, uint64_t, void, uint64_t, void))CopyMaskFunc)(v176, 0, v174, 0, v166, 0);
            *((void *)&v266 + 1) += v168;
            goto LABEL_436;
          }
          int v171 = 0;
          int v219 = v206 * v168;
          uint64_t v172 = &v219;
          unint64_t v170 = (void *)v190;
          uint64_t v173 = (void (*)(void *, void, void *, void, uint64_t, void))v197;
        }
        else
        {
          int v221 = v206 * v168;
          uint64_t v172 = &v221;
          uint64_t v173 = (void (*)(void *, void, void *, void, uint64_t, void))v205;
        }
        v172[1] = 1;
        v173(v170, 0, v171, 0, v166, 0);
LABEL_436:
        double v163 = (void *)(v265 + v168 * v203);
        unint64_t v164 = (void *)(*((void *)&v265 + 1) + v168 * v195);
        *(void *)&long long v265 = v163;
        *((void *)&v265 + 1) = v164;
        uint64_t v166 = v266 + (void)v240 * v168;
        *(void *)&long long v266 = v166;
        v162 += (unint64_t)v153;
        int v165 = v167;
        double v150 = v208;
      }
      while (v162 < (unint64_t)v200);
    }
    unint64_t v156 = v186 + 1;
    cv::NAryMatIterator::operator++((uint64_t)__p);
  }
LABEL_438:
  if (v229 && atomic_fetch_add(v229, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v228, v81);
  }
  v228[2] = 0;
  uint64_t v230 = 0;
  uint64_t v231 = 0;
  uint64_t v232 = 0;
  if (SHIDWORD(v228[0]) >= 1)
  {
    uint64_t v177 = 0;
    uint64_t v178 = v233;
    do
      *(_DWORD *)(v178 + 4 * v177++) = 0;
    while (v177 < SHIDWORD(v228[0]));
  }
  double v229 = 0;
  if (v234 != (cv *)&v235) {
    cv::fastFree((void **)v234, v81);
  }
  if (v272 != &v274 && v272 != 0) {
    MEMORY[0x22A641760]();
  }
  if (*(void *)&v236[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v236[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v236, v81);
  }
  *(void *)&v236[16] = 0;
  memset(&v236[32], 0, 24);
  if (*(int *)&v236[4] >= 1)
  {
    uint64_t v180 = 0;
    int v181 = v237;
    do
      v181[v180++] = 0;
    while (v180 < *(int *)&v236[4]);
  }
  *(void *)&v236[24] = 0;
  if (v238 != (cv *)v239) {
    cv::fastFree((void **)v238, v81);
  }
LABEL_459:
  if (v247 && atomic_fetch_add(v247, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v243, v81);
  }
  double v246 = 0;
  uint64_t v248 = 0;
  uint64_t v250 = 0;
  uint64_t v249 = 0;
  if (SHIDWORD(v243) >= 1)
  {
    uint64_t v182 = 0;
    double v183 = v251;
    do
      v183[v182++] = 0;
    while (v182 < SHIDWORD(v243));
  }
  double v247 = 0;
  if (v252 != (cv *)&v253) {
    cv::fastFree((void **)v252, v81);
  }
  if (v258 && atomic_fetch_add(v258, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v254, v81);
  }
  uint64_t v257 = 0;
  uint64_t v259 = 0;
  uint64_t v261 = 0;
  uint64_t v260 = 0;
  if (SHIDWORD(v254) >= 1)
  {
    uint64_t v184 = 0;
    double v185 = v262;
    do
      v185->i32[v184++] = 0;
    while (v184 < SHIDWORD(v254));
  }
  uint64_t v258 = 0;
  if (v263 != (cv *)&v264) {
    cv::fastFree((void **)v263, v81);
  }
}

void sub_225EC60D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  cv::Exception::~Exception((cv::Exception *)&STACK[0x340]);
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  cv::Mat::~Mat((cv::Mat *)&STACK[0x230], v73);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x290], v74);
  _Unwind_Resume(a1);
}

void cv::subtract(uint64_t this, uint64_t a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, const cv::_InputArray *a5)
{
}

void cv::absdiff(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4)
{
  cv::noArray(this);
  cv::arithm_op((uint64_t)this, (uint64_t)a2);
}

void cv::multiply(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, double a5)
{
}

void cv::divide(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4, double a5)
{
}

void cv::divide(cv *this, double a2, const cv::_InputArray *a3, const cv::_OutputArray *a4)
{
}

void cv::addWeighted(cv *this, const cv::_InputArray *a2, double a3, const cv::_InputArray *a4, double a5, double a6, const cv::_OutputArray *a7)
{
}

void cv::compare(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4)
{
  void (***v9)(uint64_t *__return_ptr, void, uint64_t);
  unsigned int v10;
  const cv::Exception *v11;
  int v12;
  int v13;
  Mat *v14;
  BOOL v16;
  int v17;
  BOOL v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  BOOL v33;
  int v34;
  const cv::Exception *v35;
  char v36;
  char v37;
  void *v38;
  uint64_t v39;
  _DWORD *v40;
  BOOL v41;
  unsigned int v42;
  int v43;
  int v44;
  BOOL v45;
  BOOL v46;
  char v47;
  void **v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _DWORD *v54;
  void **v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  const cv::Mat *v62;
  unint64_t v63;
  uint64_t (*v64)();
  unint64_t v65;
  unint64_t v66;
  void *v67;
  unint64_t i;
  unint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  void (*ConvertFunc)(uint64_t, void, void, void, double *, void, uint64_t *, void);
  BOOL v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  _DWORD *v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t (*v88)();
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t *v93;
  int v94;
  _DWORD v95[2];
  int v96;
  uint64_t v97;
  double v98;
  _DWORD v99[2];
  void *__p[3];
  atomic_uint *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  cv *v106;
  uint64_t v107;
  _DWORD v108[2];
  _DWORD v109[2];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  long long v113;
  long long v114;
  uint64_t v115;
  _DWORD *v116;
  void **v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  long long v122;
  long long v123;
  uint64_t v124;
  _DWORD *v125;
  void **v126;
  uint64_t v127;
  int v128;
  long long v129;
  double v130;
  double v131;
  int *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  void **v137;
  int64x2_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  long long v142;
  long long v143;
  uint64_t v144;
  uint64_t v145;
  void **v146;
  unsigned __int8 *v147[507];
  unsigned __int8 *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unsigned __int8 *v153;
  uint64_t v154;
  cv::Mat *v155[6];

  uint64_t v4 = MEMORY[0x270FA5388](this, a2);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  int v9 = (void (***)(uint64_t *__return_ptr, void, uint64_t))v4;
  v155[3] = *(cv::Mat **)MEMORY[0x263EF8340];
  unsigned int v128 = v10;
  if (v10 >= 6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v119, "op == CMP_LT || op == CMP_LE || op == CMP_EQ || op == CMP_NE || op == CMP_GE || op == CMP_GT");
    std::string::basic_string[abi:ne180100]<0>(&v110, "compare");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
    cv::Exception::Exception(&v139, 4294967081, &v119, &v110, __p, 2464);
    cv::error((cv *)&v139, v11);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
  (**v9)(&v119, v9, 0xFFFFFFFFLL);
  (**(void (***)(uint64_t *__return_ptr, uint64_t, uint64_t))v8)(&v110, v8, 0xFFFFFFFFLL);
  uint64_t v16 = v12 == v13 && SHIDWORD(v119) <= 2 && SHIDWORD(v110) <= 2;
  if (!v16
    || ((v17 = *v125, v125[1] == v116[1]) ? (int v18 = v17 == *v116) : (int v18 = 0),
        !v18 || (((unsigned __int16)v110 ^ (unsigned __int16)v119) & 0xFFF) != 0))
  {
    int v19 = v12 == 0x20000;
    if (v13 == 0x20000) {
      ++v19;
    }
    if (v19 != 1)
    {
      unsigned int v20 = *(v125 - 1);
      if (v20 == *(v116 - 1))
      {
        if (v20 == 2)
        {
          if (*v125 != *v116 || v125[1] != v116[1]) {
            goto LABEL_32;
          }
        }
        else if ((int)v20 >= 1)
        {
          if (*v125 != *v116) {
            goto LABEL_32;
          }
          BOOL v21 = 0;
          while (v20 - 1 != v21)
          {
            __int16 v22 = v125[v21 + 1];
            BOOL v23 = v116[++v21];
            if (v22 != v23)
            {
              if (v21 < v20) {
                goto LABEL_32;
              }
              break;
            }
          }
        }
        if ((((unsigned __int16)v110 ^ (unsigned __int16)v119) & 0xFFF) == 0)
        {
          uint64_t v47 = 0;
          goto LABEL_64;
        }
      }
    }
LABEL_32:
    unsigned int v24 = v110 & 0xFFF;
    if (SHIDWORD(v119) < 3)
    {
      BOOL v25 = v119;
      if (HIDWORD(v120) == 1 || v120 == 1)
      {
        int v27 = v12 != 0x20000 && v13 == 0x20000;
        int v28 = v27;
        if ((v119 & 0x4000) != 0 && !v28)
        {
          int v29 = (v24 >> 3) + 1;
          BOOL v30 = *v125;
          BOOL v31 = v125[1];
          unint64_t v32 = v31 == v29;
          if (*v125 != 1) {
            unint64_t v32 = 0;
          }
          unint64_t v33 = v30 == v29 || *v125 == 1;
          if (v31 != 1) {
            unint64_t v33 = 0;
          }
          if (v33 || v32 || v31 == 1 && v30 == 4 && v24 <= 0x1F && (v119 & 0xFFF) == 6)
          {
            cv::swap((int *)&v119, (Mat *)&v110, v14);
            BOOL v34 = v128;
            if ((v128 - 2) >= 3)
            {
              if (v128 == 1) {
                BOOL v34 = 3;
              }
            }
            else
            {
              BOOL v34 = dword_225F31620[v128 - 2];
            }
            unsigned int v128 = v34;
            uint64_t v47 = 1;
LABEL_64:
            int v36 = v119;
            unint64_t v37 = v110;
            (*(void (**)(uint64_t, void, _DWORD *, uint64_t, uint64_t, void, void))(*(void *)v6 + 144))(v6, HIDWORD(v119), v125, v119 & 0xFF8, 0xFFFFFFFFLL, 0, 0);
            cv::Mat::reshape((cv::Mat *)&v119, 1, 0, (unsigned int *)&v139);
            if ((void)v142) {
              atomic_fetch_add((atomic_uint *volatile)v142, 1u);
            }
            if ((void)v122 && atomic_fetch_add((atomic_uint *volatile)v122, 0xFFFFFFFF) == 1) {
              cv::Mat::deallocate((cv::Mat *)&v119, v38);
            }
            uint64_t v121 = 0;
            uint64_t v123 = 0uLL;
            *((void *)&v122 + 1) = 0;
            if (v119 <= 0)
            {
              *(void *)&int32x4_t v122 = 0;
              LODWORD(v119) = v139;
            }
            else
            {
              __int32 v39 = 0;
              int v40 = v125;
              do
                v40[v39++] = 0;
              while (v39 < SHIDWORD(v119));
              *(void *)&int32x4_t v122 = 0;
              LODWORD(v119) = v139;
              if (SHIDWORD(v119) > 2) {
                goto LABEL_99;
              }
            }
            if (SHIDWORD(v139) <= 2)
            {
              HIDWORD(v119) = HIDWORD(v139);
              __int32 v120 = v140;
              int v48 = v146;
              uint64_t v49 = v126;
              cv *v126 = *v146;
              v49[1] = v48[1];
LABEL_100:
              uint64_t v121 = v141;
              uint64_t v123 = v143;
              int32x4_t v122 = v142;
              uint64_t v124 = v144;
              if ((void)v142 && atomic_fetch_add((atomic_uint *volatile)v142, 0xFFFFFFFF) == 1) {
                cv::Mat::deallocate((cv::Mat *)&v139, v38);
              }
              unint64_t v141 = 0;
              uint64_t v143 = 0uLL;
              *((void *)&v142 + 1) = 0;
              if (SHIDWORD(v139) >= 1)
              {
                uint64_t v50 = 0;
                unint64_t v51 = v145;
                do
                  *(_DWORD *)(v51 + 4 * v50++) = 0;
                while (v50 < SHIDWORD(v139));
              }
              *(void *)&unint64_t v142 = 0;
              if (v146 != (void **)v147) {
                cv::fastFree(v146, v38);
              }
              cv::Mat::reshape((cv::Mat *)&v110, 1, 0, (unsigned int *)&v139);
              if ((void)v142) {
                atomic_fetch_add((atomic_uint *volatile)v142, 1u);
              }
              if ((void)v113 && atomic_fetch_add((atomic_uint *volatile)v113, 0xFFFFFFFF) == 1) {
                cv::Mat::deallocate((cv::Mat *)&v110, v52);
              }
              unint64_t v112 = 0;
              __int32 v114 = 0uLL;
              *((void *)&v113 + 1) = 0;
              if (v110 <= 0)
              {
                *(void *)&int v113 = 0;
                LODWORD(v110) = v139;
              }
              else
              {
                int v53 = 0;
                uint64_t v54 = v116;
                do
                  v54[v53++] = 0;
                while (v53 < SHIDWORD(v110));
                *(void *)&int v113 = 0;
                LODWORD(v110) = v139;
                if (SHIDWORD(v110) > 2) {
                  goto LABEL_121;
                }
              }
              if (SHIDWORD(v139) <= 2)
              {
                HIDWORD(v110) = HIDWORD(v139);
                uint64_t v111 = v140;
                BOOL v55 = v146;
                unsigned int v56 = v117;
                *unint64_t v117 = *v146;
                v56[1] = v55[1];
LABEL_122:
                unint64_t v112 = v141;
                __int32 v114 = v143;
                int v113 = v142;
                int16x8_t v115 = v144;
                if ((void)v142 && atomic_fetch_add((atomic_uint *volatile)v142, 0xFFFFFFFF) == 1) {
                  cv::Mat::deallocate((cv::Mat *)&v139, v52);
                }
                unint64_t v141 = 0;
                uint64_t v143 = 0uLL;
                *((void *)&v142 + 1) = 0;
                if (SHIDWORD(v139) >= 1)
                {
                  int v57 = 0;
                  int v58 = v145;
                  do
                    *(_DWORD *)(v58 + 4 * v57++) = 0;
                  while (v57 < SHIDWORD(v139));
                }
                *(void *)&unint64_t v142 = 0;
                if (v146 != (void **)v147) {
                  cv::fastFree(v146, v52);
                }
                (**(void (***)(uint64_t **__return_ptr, uint64_t, uint64_t))v6)(&v139, v6, 0xFFFFFFFFLL);
                cv::Mat::reshape((cv::Mat *)&v139, 1, 0, (unsigned int *)__p);
                if ((void)v142 && atomic_fetch_add((atomic_uint *volatile)v142, 0xFFFFFFFF) == 1) {
                  cv::Mat::deallocate((cv::Mat *)&v139, v59);
                }
                unint64_t v141 = 0;
                uint64_t v143 = 0uLL;
                *((void *)&v142 + 1) = 0;
                if (SHIDWORD(v139) >= 1)
                {
                  BOOL v60 = 0;
                  unsigned int v61 = v145;
                  do
                    *(_DWORD *)(v61 + 4 * v60++) = 0;
                  while (v60 < SHIDWORD(v139));
                }
                *(void *)&unint64_t v142 = 0;
                if (v146 != (void **)v147) {
                  cv::fastFree(v146, v59);
                }
                int v62 = (const cv::Mat *)(v36 & 7);
                if (SHIDWORD(v119) < 1) {
                  __int32 v63 = 0;
                }
                else {
                  __int32 v63 = (unint64_t)v126[HIDWORD(v119) - 1];
                }
                __int32 v64 = cv::getCmpFunc(int)::cmpTab[(void)v62];
                if ((v47 & 1) == 0)
                {
                  *(void *)&char v129 = &v119;
                  *((void *)&v129 + 1) = &v110;
                  double v130 = COERCE_DOUBLE(__p);
                  unint64_t v131 = 0.0;
                  uint64_t v148 = 0;
                  unint64_t v149 = 0;
                  double v150 = 0;
                  cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)&v139, (const cv::Mat **)&v129, &v148, -1);
                  BOOL v73 = v143;
                  char v74 = -1;
                  while ((unint64_t)++v74 < *((void *)&v142 + 1))
                  {
                    v99[0] = v73;
                    v99[1] = 1;
                    ((void (*)(unsigned __int8 *, void, uint64_t, void, uint64_t, void, _DWORD *, int *))v64)(v148, 0, v149, 0, v150, 0, v99, &v128);
                    cv::NAryMatIterator::operator++((uint64_t)&v139);
                  }
LABEL_181:
                  if (v101 && atomic_fetch_add(v101, 0xFFFFFFFF) == 1) {
                    cv::Mat::deallocate((cv::Mat *)__p, v67);
                  }
                  void __p[2] = 0;
                  uint64_t v102 = 0;
                  uint64_t v103 = 0;
                  unint64_t v104 = 0;
                  if (SHIDWORD(__p[0]) >= 1)
                  {
                    uint64_t v79 = 0;
                    int v80 = v105;
                    do
                      *(_DWORD *)(v80 + 4 * v79++) = 0;
                    while (v79 < SHIDWORD(__p[0]));
                  }
                  BOOL v101 = 0;
                  if (v106 != (cv *)&v107) {
                    cv::fastFree((void **)v106, v67);
                  }
                  goto LABEL_189;
                }
                v155[0] = (cv::Mat *)&v119;
                v155[1] = (cv::Mat *)__p;
                v155[2] = 0;
                uint64_t v153 = 0;
                unint64_t v154 = 0;
                cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)&v148, v155, &v153, -1);
                BOOL v65 = v152;
                if ((v63 + 1023) / v63 >= v152) {
                  BOOL v66 = v152;
                }
                else {
                  BOOL v66 = (v63 + 1023) / v63;
                }
                unint64_t v139 = &v141;
                int v140 = 4104;
                if (v66 * v63 >= 0x1009)
                {
                  int v140 = v66 * v63;
                  operator new[]();
                }
                if (v62 >= 5)
                {
                  cv::convertAndUnrollScalar((cv *)&v110, v62, &v141, (unsigned __int8 *)v66);
LABEL_149:
                  for (uint64_t i = 0; i < v151; ++i)
                  {
                    if (v65)
                    {
                      __int32 v69 = 0;
                      __int32 v70 = v153;
                      BOOL v71 = v154;
                      do
                      {
                        if (v65 - v69 >= v66) {
                          BOOL v72 = v66;
                        }
                        else {
                          BOOL v72 = v65 - v69;
                        }
                        v95[0] = v72;
                        v95[1] = 1;
                        ((void (*)(unsigned __int8 *, void, uint64_t *, void, uint64_t, void, _DWORD *, int *))v64)(v70, 0, &v141, 0, v71, 0, v95, &v128);
                        __int32 v70 = &v153[v72 * v63];
                        BOOL v71 = v154 + v72;
                        uint64_t v153 = v70;
                        unint64_t v154 = v71;
                        v69 += v66;
                      }
                      while (v69 < v65);
                    }
                    cv::NAryMatIterator::operator++((uint64_t)&v148);
                  }
                  if (v139 != &v141 && v139 != 0) {
                    MEMORY[0x22A641760]();
                  }
                  goto LABEL_181;
                }
                int v98 = 0.0;
                uint64_t ConvertFunc = (void (*)(uint64_t, void, void, void, double *, void, uint64_t *, void))cv::getConvertFunc((cv *)(v37 & 7), 6);
                int v97 = 0x100000001;
                ConvertFunc(v112, 0, 0, 0, &v98, 0, &v97, 0);
                if (v98 >= cv::getMinVal(int)::tab[(void)v62])
                {
                  if (v98 <= cv::getMaxVal(int)::tab[(void)v62])
                  {
                    int v96 = (uint64_t)rint(v98);
                    if (v98 != (double)v96)
                    {
                      if ((v128 & 0xFFFFFFFE) == 2)
                      {
                        unsigned int v91 = (int)v98;
                        if (v98 > (double)(int)v98) {
                          ++v91;
                        }
                      }
                      else
                      {
                        if (v128 != 4 && v128 != 1)
                        {
                          if (v128 == 5) {
                            float32x2_t v94 = 255;
                          }
                          else {
                            float32x2_t v94 = 0;
                          }
                          *(double *)&char v129 = (double)v94;
                          *((double *)&v129 + 1) = (double)v94;
                          double v130 = (double)v94;
                          unint64_t v131 = (double)v94;
                          cv::Mat::operator=((uint64_t)__p, (int64x2_t *)&v129);
LABEL_178:
                          if (v139 != &v141 && v139) {
                            MEMORY[0x22A641760](v139, 0x1000C8077774924);
                          }
                          goto LABEL_181;
                        }
                        unsigned int v91 = (int)v98 - (v98 < (double)(int)v98);
                      }
                      int v96 = v91;
                    }
                    double v130 = COERCE_DOUBLE(&v96);
                    unint64_t v131 = 0.0;
                    float32x2_t v132 = &v96;
                    uint64_t v135 = 0;
                    unint64_t v136 = (uint64_t *)&v129 + 1;
                    float v137 = (void **)&v138;
                    char v129 = xmmword_225F31590;
                    float v138 = vdupq_n_s64(4uLL);
                    unint64_t v133 = &v97;
                    unint64_t v134 = &v97;
                    cv::convertAndUnrollScalar((cv *)&v129, v62, &v141, (unsigned __int8 *)v66);
                    if (v131 != 0.0 && atomic_fetch_add(*(atomic_uint *volatile *)&v131, 0xFFFFFFFF) == 1) {
                      cv::Mat::deallocate((cv::Mat *)&v129, v67);
                    }
                    double v130 = 0.0;
                    unint64_t v133 = 0;
                    unint64_t v134 = 0;
                    float32x2_t v132 = 0;
                    if (SDWORD1(v129) >= 1)
                    {
                      float32x2_t v92 = 0;
                      int v93 = v136;
                      do
                        *((_DWORD *)v93 + v92++) = 0;
                      while (v92 < SDWORD1(v129));
                    }
                    unint64_t v131 = 0.0;
                    if (v137 != (void **)&v138) {
                      cv::fastFree(v137, v67);
                    }
                    goto LABEL_149;
                  }
                  unint64_t v78 = 255.0;
                  if ((v128 - 3) >= 3) {
                    unint64_t v78 = 0.0;
                  }
                }
                else
                {
                  int v77 = (v128 - 1) < 2 || v128 == 5;
                  unint64_t v78 = 255.0;
                  if (!v77) {
                    unint64_t v78 = 0.0;
                  }
                }
                *(double *)&char v129 = v78;
                *((double *)&v129 + 1) = v78;
                double v130 = v78;
                unint64_t v131 = v78;
                cv::Mat::operator=((uint64_t)__p, (int64x2_t *)&v129);
                goto LABEL_178;
              }
LABEL_121:
              cv::Mat::copySize((cv::Mat *)&v110, (const cv::Mat *)&v139);
              goto LABEL_122;
            }
LABEL_99:
            cv::Mat::copySize((cv::Mat *)&v119, (const cv::Mat *)&v139);
            goto LABEL_100;
          }
        }
      }
    }
    else
    {
      BOOL v25 = v119;
    }
    if (SHIDWORD(v110) > 2) {
      goto LABEL_63;
    }
    unsigned int v41 = v111 == 1 || HIDWORD(v111) == 1;
    if (!v41 || (v110 & 0x4000) == 0 || v12 == 0x20000 && v13 != 0x20000) {
      goto LABEL_63;
    }
    unsigned int v42 = (v25 >> 3) & 0x1FF;
    unsigned int v43 = *v116;
    int v44 = v116[1];
    BOOL v45 = v44 == v42 + 1;
    if (*v116 != 1) {
      BOOL v45 = 0;
    }
    uint64_t v46 = v43 == v42 + 1 || *v116 == 1;
    if (v44 != 1) {
      uint64_t v46 = 0;
    }
    uint64_t v47 = 1;
    if (!v46 && !v45 && (v44 != 1 || v43 != 4 || v24 != 6 || v42 >= 4))
    {
LABEL_63:
      std::string::basic_string[abi:ne180100]<0>(__p, "The operation is neither 'array op array' (where arrays have the same size and the same type), nor 'array op scalar', nor 'scalar op array'");
      std::string::basic_string[abi:ne180100]<0>(&v129, "compare");
      std::string::basic_string[abi:ne180100]<0>(&v148, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/arithm.cpp");
      cv::Exception::Exception(&v139, 4294967087, __p, &v129, &v148, 2494);
      cv::error((cv *)&v139, v35);
    }
    goto LABEL_64;
  }
  v109[0] = v125[1];
  v109[1] = v17;
  (*(void (**)(uint64_t, _DWORD *, uint64_t, uint64_t, void, void))(*(void *)v6 + 128))(v6, v109, v119 & 0xFF8, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(uint64_t **__return_ptr, uint64_t, uint64_t))v6)(&v139, v6, 0xFFFFFFFFLL);
  uint64_t v85 = v120;
  unsigned int v86 = (((unint64_t)v119 >> 3) & 0x1FF) + 1;
  if ((v119 & v110 & v139 & 0x4000) != 0
    && (unsigned int v87 = SHIDWORD(v120) * (uint64_t)(int)v86 * (int)v120, v87 == (int)v87))
  {
    uint64_t v85 = 1;
  }
  else
  {
    LODWORD(v87) = HIDWORD(v120) * v86;
  }
  uint64_t v88 = cv::getCmpFunc(int)::cmpTab[v119 & 7];
  v108[0] = v87;
  v108[1] = v85;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, _DWORD *, int *))v88)(v121, v127, v112, v118, v141, v147[0], v108, &v128);
  if ((void)v142 && atomic_fetch_add((atomic_uint *volatile)v142, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v139, v67);
  }
  unint64_t v141 = 0;
  uint64_t v143 = 0uLL;
  *((void *)&v142 + 1) = 0;
  if (SHIDWORD(v139) >= 1)
  {
    unsigned int v89 = 0;
    BOOL v90 = v145;
    do
      *(_DWORD *)(v90 + 4 * v89++) = 0;
    while (v89 < SHIDWORD(v139));
  }
  *(void *)&unint64_t v142 = 0;
  if (v146 != (void **)v147) {
    cv::fastFree(v146, v67);
  }
LABEL_189:
  if ((void)v113 && atomic_fetch_add((atomic_uint *volatile)v113, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v110, v67);
  }
  unint64_t v112 = 0;
  __int32 v114 = 0uLL;
  *((void *)&v113 + 1) = 0;
  if (SHIDWORD(v110) >= 1)
  {
    uint64_t v81 = 0;
    uint64_t v82 = v116;
    do
      v82[v81++] = 0;
    while (v81 < SHIDWORD(v110));
  }
  *(void *)&int v113 = 0;
  if (v117 != (void **)&v118) {
    cv::fastFree(v117, v67);
  }
  if ((void)v122 && atomic_fetch_add((atomic_uint *volatile)v122, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v119, v67);
  }
  uint64_t v121 = 0;
  uint64_t v123 = 0uLL;
  *((void *)&v122 + 1) = 0;
  if (SHIDWORD(v119) >= 1)
  {
    BOOL v83 = 0;
    unint64_t v84 = v125;
    do
      v84[v83++] = 0;
    while (v83 < SHIDWORD(v119));
  }
  *(void *)&int32x4_t v122 = 0;
  if (v126 != (void **)&v127) {
    cv::fastFree(v126, v67);
  }
}

void sub_225EC7524(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a68 != a10 && a68 != 0) {
    MEMORY[0x22A641760]();
  }
  cv::Mat::~Mat((cv::Mat *)&__p, a2);
  cv::Mat::~Mat((cv::Mat *)&a30, v70);
  cv::Mat::~Mat((cv::Mat *)&a42, v71);
  _Unwind_Resume(a1);
}

uint64_t cv::vBinOp8<unsigned char,cv::OpAnd<unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 1;
        do
        {
          char v11 = *(unsigned char *)(a3 + v10) & *(unsigned char *)(result + v10);
          uint64_t v12 = (unsigned char *)(a5 + v10);
          *(v12 - 1) = *(unsigned char *)(a3 + v10 - 1) & *(unsigned char *)(result + v10 - 1);
          *uint64_t v12 = v11;
          char v13 = *(unsigned char *)(a3 + v10 + 2) & *(unsigned char *)(result + v10 + 2);
          v12[1] = *(unsigned char *)(a3 + v10 + 1) & *(unsigned char *)(result + v10 + 1);
          void v12[2] = v13;
          uint64_t v8 = *a7;
          uint64_t v14 = v10 + 3;
          v10 += 4;
        }
        while (v14 <= v8 - 4);
        uint64_t v9 = (v10 - 1);
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(unsigned char *)(a5 + v9) = *(unsigned char *)(a3 + v9) & *(unsigned char *)(result + v9);
          ++v9;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v15 = a7[1];
      a7[1] = v15 - 1;
    }
    while (v15);
  }
  return result;
}

uint64_t cv::vBinOp8<unsigned char,cv::OpOr<unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 1;
        do
        {
          char v11 = *(unsigned char *)(a3 + v10) | *(unsigned char *)(result + v10);
          uint64_t v12 = (unsigned char *)(a5 + v10);
          *(v12 - 1) = *(unsigned char *)(a3 + v10 - 1) | *(unsigned char *)(result + v10 - 1);
          *uint64_t v12 = v11;
          char v13 = *(unsigned char *)(a3 + v10 + 2) | *(unsigned char *)(result + v10 + 2);
          v12[1] = *(unsigned char *)(a3 + v10 + 1) | *(unsigned char *)(result + v10 + 1);
          void v12[2] = v13;
          uint64_t v8 = *a7;
          uint64_t v14 = v10 + 3;
          v10 += 4;
        }
        while (v14 <= v8 - 4);
        uint64_t v9 = (v10 - 1);
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(unsigned char *)(a5 + v9) = *(unsigned char *)(a3 + v9) | *(unsigned char *)(result + v9);
          ++v9;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v15 = a7[1];
      a7[1] = v15 - 1;
    }
    while (v15);
  }
  return result;
}

uint64_t cv::vBinOp8<unsigned char,cv::OpXor<unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 1;
        do
        {
          char v11 = *(unsigned char *)(a3 + v10) ^ *(unsigned char *)(result + v10);
          uint64_t v12 = (unsigned char *)(a5 + v10);
          *(v12 - 1) = *(unsigned char *)(a3 + v10 - 1) ^ *(unsigned char *)(result + v10 - 1);
          *uint64_t v12 = v11;
          char v13 = *(unsigned char *)(a3 + v10 + 2) ^ *(unsigned char *)(result + v10 + 2);
          v12[1] = *(unsigned char *)(a3 + v10 + 1) ^ *(unsigned char *)(result + v10 + 1);
          void v12[2] = v13;
          uint64_t v8 = *a7;
          uint64_t v14 = v10 + 3;
          v10 += 4;
        }
        while (v14 <= v8 - 4);
        uint64_t v9 = (v10 - 1);
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(unsigned char *)(a5 + v9) = *(unsigned char *)(a3 + v9) ^ *(unsigned char *)(result + v9);
          ++v9;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v15 = a7[1];
      a7[1] = v15 - 1;
    }
    while (v15);
  }
  return result;
}

uint64_t cv::vBinOp8<unsigned char,cv::OpNot<unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        do
        {
          char v10 = ~*(unsigned char *)(result + v9 + 1);
          char v11 = (unsigned char *)(a5 + v9);
          *char v11 = ~*(unsigned char *)(result + v9);
          v11[1] = v10;
          char v12 = ~*(unsigned char *)(result + v9 + 3);
          v11[2] = ~*(unsigned char *)(result + v9 + 2);
          void v11[3] = v12;
          v9 += 4;
          uint64_t v8 = *a7;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(unsigned char *)(a5 + v9) = ~*(unsigned char *)(result + v9);
          ++v9;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a5 += a6;
      int v13 = a7[1];
      a7[1] = v13 - 1;
    }
    while (v13);
  }
  return result;
}

uint64_t cv::max8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpMax<unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::max8s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp8<signed char,cv::OpMax<signed char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::max16u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp16<unsigned short,cv::OpMax<unsigned short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::max16s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp16<short,cv::OpMax<short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::max32s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp32s<cv::OpMax<int>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::max32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp32f<cv::OpMax<float>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::max64f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp64f<cv::OpMax<double>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::vBinOp8<unsigned char,cv::OpMax<unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 1;
        do
        {
          char v11 = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10) - *(unsigned __int8 *)(result + v10) + 256]
              + *(unsigned char *)(result + v10);
          char v12 = (unsigned char *)(a5 + v10);
          *(v12 - 1) = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10 - 1)
                                      - *(unsigned __int8 *)(result + v10 - 1)
                                      + 256]
                     + *(unsigned char *)(result + v10 - 1);
          *char v12 = v11;
          char v13 = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10 + 2) - *(unsigned __int8 *)(result + v10 + 2) + 256]
              + *(unsigned char *)(result + v10 + 2);
          v12[1] = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10 + 1) - *(unsigned __int8 *)(result + v10 + 1) + 256]
                 + *(unsigned char *)(result + v10 + 1);
          void v12[2] = v13;
          uint64_t v8 = *a7;
          uint64_t v14 = v10 + 3;
          v10 += 4;
        }
        while (v14 <= v8 - 4);
        uint64_t v9 = (v10 - 1);
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(unsigned char *)(a5 + v9) = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v9) - *(unsigned __int8 *)(result + v9) + 256]
                              + *(unsigned char *)(result + v9);
          ++v9;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v15 = a7[1];
      a7[1] = v15 - 1;
    }
    while (v15);
  }
  return result;
}

uint64_t cv::vBinOp8<signed char,cv::OpMax<signed char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 1;
        do
        {
          char v11 = (char *)(result + v10);
          int v12 = *(char *)(result + v10 - 1);
          char v13 = (char *)(a3 + v10);
          if (v12 <= *(char *)(a3 + v10 - 1)) {
            LOBYTE(v12) = *(unsigned char *)(a3 + v10 - 1);
          }
          int v14 = *v11;
          if (v14 <= *v13) {
            LOBYTE(v14) = *v13;
          }
          int v15 = (unsigned char *)(a5 + v10);
          *(v15 - 1) = v12;
          unsigned char *v15 = v14;
          int v16 = v11[1];
          if (v16 <= v13[1]) {
            LOBYTE(v16) = v13[1];
          }
          int v17 = v11[2];
          int v18 = v13[2];
          if (v17 <= v18) {
            LOBYTE(v17) = v18;
          }
          v15[1] = v16;
          v15[2] = v17;
          uint64_t v8 = *a7;
          uint64_t v19 = v10 + 3;
          v10 += 4;
        }
        while (v19 <= v8 - 4);
        uint64_t v9 = (v10 - 1);
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          int v20 = *(char *)(result + v9);
          if (v20 <= *(char *)(a3 + v9)) {
            LOBYTE(v20) = *(unsigned char *)(a3 + v9);
          }
          *(unsigned char *)(a5 + v9++) = v20;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v21 = a7[1];
      a7[1] = v21 - 1;
    }
    while (v21);
  }
  return result;
}

uint64_t cv::vBinOp16<unsigned short,cv::OpMax<unsigned short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 4;
        do
        {
          int v14 = (unsigned __int16 *)(result + v13);
          unsigned int v15 = *(unsigned __int16 *)(result + v13 - 4);
          int v16 = (unsigned __int16 *)(a3 + v13);
          if (v15 <= *(unsigned __int16 *)(a3 + v13 - 4)) {
            LOWORD(v15) = *(_WORD *)(a3 + v13 - 4);
          }
          unsigned int v17 = *(v14 - 1);
          if (v17 <= *(v16 - 1)) {
            LOWORD(v17) = *(v16 - 1);
          }
          int v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v15;
          *(v18 - 1) = v17;
          unsigned int v19 = *v14;
          if (v19 <= *v16) {
            LOWORD(v19) = *v16;
          }
          unsigned int v20 = v14[1];
          unsigned int v21 = v16[1];
          if (v20 <= v21) {
            LOWORD(v20) = v21;
          }
          *int v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          unsigned int v22 = *(unsigned __int16 *)(result + 2 * v12);
          if (v22 <= *(unsigned __int16 *)(a3 + 2 * v12)) {
            LOWORD(v22) = *(_WORD *)(a3 + 2 * v12);
          }
          *(_WORD *)(a5 + 2 * v12++) = v22;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp16<short,cv::OpMax<short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 4;
        do
        {
          int v14 = (__int16 *)(result + v13);
          int v15 = *(__int16 *)(result + v13 - 4);
          int v16 = (__int16 *)(a3 + v13);
          if (v15 <= *(__int16 *)(a3 + v13 - 4)) {
            LOWORD(v15) = *(_WORD *)(a3 + v13 - 4);
          }
          int v17 = *(v14 - 1);
          if (v17 <= *(v16 - 1)) {
            LOWORD(v17) = *(v16 - 1);
          }
          int v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v15;
          *(v18 - 1) = v17;
          int v19 = *v14;
          if (v19 <= *v16) {
            LOWORD(v19) = *v16;
          }
          int v20 = v14[1];
          int v21 = v16[1];
          if (v20 <= v21) {
            LOWORD(v20) = v21;
          }
          *int v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          int v22 = *(__int16 *)(result + 2 * v12);
          if (v22 <= *(__int16 *)(a3 + 2 * v12)) {
            LOWORD(v22) = *(_WORD *)(a3 + 2 * v12);
          }
          *(_WORD *)(a5 + 2 * v12++) = v22;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp32s<cv::OpMax<int>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 8;
        do
        {
          unint64_t v11 = (int32x2_t *)(a5 + v10);
          v11[-1] = vmax_s32(*(int32x2_t *)(result + v10 - 8), *(int32x2_t *)(a3 + v10 - 8));
          *unint64_t v11 = vmax_s32(*(int32x2_t *)(result + v10), *(int32x2_t *)(a3 + v10));
          v9 += 4;
          uint64_t v8 = *a7;
          v10 += 16;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          int v12 = *(_DWORD *)(result + 4 * v9);
          if (v12 <= *(_DWORD *)(a3 + 4 * v9)) {
            int v12 = *(_DWORD *)(a3 + 4 * v9);
          }
          *(_DWORD *)(a5 + 4 * v9++) = v12;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      int v13 = a7[1];
      a7[1] = v13 - 1;
      result += a2 & 0xFFFFFFFFFFFFFFFCLL;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v13);
  }
  return result;
}

uint64_t cv::vBinOp32f<cv::OpMax<float>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 8;
        do
        {
          int v12 = (int8x8_t *)(a5 + v11);
          v12[-1] = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a3 + v11 - 8), *(float32x2_t *)(result + v11 - 8)), *(int8x8_t *)(a3 + v11 - 8), *(int8x8_t *)(result + v11 - 8));
          *int v12 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a3 + v11), *(float32x2_t *)(result + v11)), *(int8x8_t *)(a3 + v11), *(int8x8_t *)(result + v11));
          v10 += 4;
          v11 += 16;
        }
        while (v10 <= (int)v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          float v13 = *(float *)(result + 4 * v10);
          if (v13 < *(float *)(a3 + 4 * v10)) {
            float v13 = *(float *)(a3 + 4 * v10);
          }
          *(float *)(a5 + 4 * v10++) = v13;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp64f<cv::OpMax<double>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 16;
        do
        {
          int v12 = (int8x16_t *)(a5 + v11);
          v12[-1] = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(a3 + v11 - 16), *(float64x2_t *)(result + v11 - 16)), *(int8x16_t *)(a3 + v11 - 16), *(int8x16_t *)(result + v11 - 16));
          *int v12 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(a3 + v11), *(float64x2_t *)(result + v11)), *(int8x16_t *)(a3 + v11), *(int8x16_t *)(result + v11));
          v10 += 4;
          v11 += 32;
        }
        while (v10 <= (int)v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          double v13 = *(double *)(result + 8 * v10);
          if (v13 < *(double *)(a3 + 8 * v10)) {
            double v13 = *(double *)(a3 + 8 * v10);
          }
          *(double *)(a5 + 8 * v10++) = v13;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFF8;
      a3 += a4 & 0xFFFFFFFFFFFFFFF8;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::min8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpMin<unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::min8s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp8<signed char,cv::OpMin<signed char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::min16u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp16<unsigned short,cv::OpMin<unsigned short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::min16s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp16<short,cv::OpMin<short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::min32s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp32s<cv::OpMin<int>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::min32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp32f<cv::OpMin<float>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::min64f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp64f<cv::OpMin<double>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::vBinOp8<unsigned char,cv::OpMin<unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 1;
        do
        {
          char v11 = *(unsigned char *)(result + v10)
              - cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10) | 0x100) - *(unsigned __int8 *)(a3 + v10)];
          int v12 = (unsigned char *)(a5 + v10);
          *(v12 - 1) = *(unsigned char *)(result + v10 - 1)
                     - cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10 - 1) | 0x100)
                                      - *(unsigned __int8 *)(a3 + v10 - 1)];
          *int v12 = v11;
          char v13 = *(unsigned char *)(result + v10 + 2)
              - cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10 + 2) | 0x100) - *(unsigned __int8 *)(a3 + v10 + 2)];
          v12[1] = *(unsigned char *)(result + v10 + 1)
                 - cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10 + 1) | 0x100)
                                  - *(unsigned __int8 *)(a3 + v10 + 1)];
          void v12[2] = v13;
          uint64_t v8 = *a7;
          uint64_t v14 = v10 + 3;
          v10 += 4;
        }
        while (v14 <= v8 - 4);
        uint64_t v9 = (v10 - 1);
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(unsigned char *)(a5 + v9) = *(unsigned char *)(result + v9)
                              - cv::g_Saturate8u[(*(unsigned __int8 *)(result + v9) | 0x100)
                                               - *(unsigned __int8 *)(a3 + v9)];
          ++v9;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v15 = a7[1];
      a7[1] = v15 - 1;
    }
    while (v15);
  }
  return result;
}

uint64_t cv::vBinOp8<signed char,cv::OpMin<signed char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 1;
        do
        {
          char v11 = (char *)(result + v10);
          int v12 = *(char *)(result + v10 - 1);
          char v13 = (char *)(a3 + v10);
          if (*(char *)(a3 + v10 - 1) < v12) {
            LOBYTE(v12) = *(unsigned char *)(a3 + v10 - 1);
          }
          int v14 = *v11;
          if (*v13 < v14) {
            LOBYTE(v14) = *v13;
          }
          int v15 = (unsigned char *)(a5 + v10);
          *(v15 - 1) = v12;
          unsigned char *v15 = v14;
          int v16 = v11[1];
          if (v13[1] < v16) {
            LOBYTE(v16) = v13[1];
          }
          int v17 = v11[2];
          int v18 = v13[2];
          if (v18 < v17) {
            LOBYTE(v17) = v18;
          }
          v15[1] = v16;
          v15[2] = v17;
          uint64_t v8 = *a7;
          uint64_t v19 = v10 + 3;
          v10 += 4;
        }
        while (v19 <= v8 - 4);
        uint64_t v9 = (v10 - 1);
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          int v20 = *(char *)(result + v9);
          if (*(char *)(a3 + v9) < v20) {
            LOBYTE(v20) = *(unsigned char *)(a3 + v9);
          }
          *(unsigned char *)(a5 + v9++) = v20;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v21 = a7[1];
      a7[1] = v21 - 1;
    }
    while (v21);
  }
  return result;
}

uint64_t cv::vBinOp16<unsigned short,cv::OpMin<unsigned short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 4;
        do
        {
          int v14 = (unsigned __int16 *)(result + v13);
          unsigned int v15 = *(unsigned __int16 *)(result + v13 - 4);
          int v16 = (unsigned __int16 *)(a3 + v13);
          if (*(unsigned __int16 *)(a3 + v13 - 4) < v15) {
            LOWORD(v15) = *(_WORD *)(a3 + v13 - 4);
          }
          unsigned int v17 = *(v14 - 1);
          if (*(v16 - 1) < v17) {
            LOWORD(v17) = *(v16 - 1);
          }
          int v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v15;
          *(v18 - 1) = v17;
          unsigned int v19 = *v14;
          if (*v16 < v19) {
            LOWORD(v19) = *v16;
          }
          unsigned int v20 = v14[1];
          unsigned int v21 = v16[1];
          if (v21 < v20) {
            LOWORD(v20) = v21;
          }
          *int v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          unsigned int v22 = *(unsigned __int16 *)(result + 2 * v12);
          if (*(unsigned __int16 *)(a3 + 2 * v12) < v22) {
            LOWORD(v22) = *(_WORD *)(a3 + 2 * v12);
          }
          *(_WORD *)(a5 + 2 * v12++) = v22;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp16<short,cv::OpMin<short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 4;
        do
        {
          int v14 = (__int16 *)(result + v13);
          int v15 = *(__int16 *)(result + v13 - 4);
          int v16 = (__int16 *)(a3 + v13);
          if (*(__int16 *)(a3 + v13 - 4) < v15) {
            LOWORD(v15) = *(_WORD *)(a3 + v13 - 4);
          }
          int v17 = *(v14 - 1);
          if (*(v16 - 1) < v17) {
            LOWORD(v17) = *(v16 - 1);
          }
          int v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v15;
          *(v18 - 1) = v17;
          int v19 = *v14;
          if (*v16 < v19) {
            LOWORD(v19) = *v16;
          }
          int v20 = v14[1];
          int v21 = v16[1];
          if (v21 < v20) {
            LOWORD(v20) = v21;
          }
          *int v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          int v22 = *(__int16 *)(result + 2 * v12);
          if (*(__int16 *)(a3 + 2 * v12) < v22) {
            LOWORD(v22) = *(_WORD *)(a3 + 2 * v12);
          }
          *(_WORD *)(a5 + 2 * v12++) = v22;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp32s<cv::OpMin<int>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 8;
        do
        {
          unint64_t v11 = (int32x2_t *)(a5 + v10);
          v11[-1] = vmin_s32(*(int32x2_t *)(a3 + v10 - 8), *(int32x2_t *)(result + v10 - 8));
          *unint64_t v11 = vmin_s32(*(int32x2_t *)(a3 + v10), *(int32x2_t *)(result + v10));
          v9 += 4;
          uint64_t v8 = *a7;
          v10 += 16;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          int v12 = *(_DWORD *)(result + 4 * v9);
          if (*(_DWORD *)(a3 + 4 * v9) < v12) {
            int v12 = *(_DWORD *)(a3 + 4 * v9);
          }
          *(_DWORD *)(a5 + 4 * v9++) = v12;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      int v13 = a7[1];
      a7[1] = v13 - 1;
      result += a2 & 0xFFFFFFFFFFFFFFFCLL;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v13);
  }
  return result;
}

uint64_t cv::vBinOp32f<cv::OpMin<float>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 8;
        do
        {
          int v12 = (int8x8_t *)(a5 + v11);
          v12[-1] = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(result + v11 - 8), *(float32x2_t *)(a3 + v11 - 8)), *(int8x8_t *)(a3 + v11 - 8), *(int8x8_t *)(result + v11 - 8));
          *int v12 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(result + v11), *(float32x2_t *)(a3 + v11)), *(int8x8_t *)(a3 + v11), *(int8x8_t *)(result + v11));
          v10 += 4;
          v11 += 16;
        }
        while (v10 <= (int)v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          float v13 = *(float *)(result + 4 * v10);
          if (*(float *)(a3 + 4 * v10) < v13) {
            float v13 = *(float *)(a3 + 4 * v10);
          }
          *(float *)(a5 + 4 * v10++) = v13;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp64f<cv::OpMin<double>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 16;
        do
        {
          int v12 = (int8x16_t *)(a5 + v11);
          v12[-1] = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(result + v11 - 16), *(float64x2_t *)(a3 + v11 - 16)), *(int8x16_t *)(a3 + v11 - 16), *(int8x16_t *)(result + v11 - 16));
          *int v12 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(result + v11), *(float64x2_t *)(a3 + v11)), *(int8x16_t *)(a3 + v11), *(int8x16_t *)(result + v11));
          v10 += 4;
          v11 += 32;
        }
        while (v10 <= (int)v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          double v13 = *(double *)(result + 8 * v10);
          if (*(double *)(a3 + 8 * v10) < v13) {
            double v13 = *(double *)(a3 + 8 * v10);
          }
          *(double *)(a5 + 8 * v10++) = v13;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFF8;
      a3 += a4 & 0xFFFFFFFFFFFFFFF8;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::add8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpAdd<unsigned char,unsigned char,unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::add8s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp8<signed char,cv::OpAdd<signed char,signed char,signed char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::add16u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp16<unsigned short,cv::OpAdd<unsigned short,unsigned short,unsigned short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::add16s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp16<short,cv::OpAdd<short,short,short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::add32s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp32s<cv::OpAdd<int,int,int>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::add32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp32f<cv::OpAdd<float,float,float>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::add64f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp64f<cv::OpAdd<double,double,double>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::vBinOp8<unsigned char,cv::OpAdd<unsigned char,unsigned char,unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 1;
        do
        {
          char v11 = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10)
                               + 256
                               + (unint64_t)*(unsigned __int8 *)(result + v10)];
          int v12 = (unsigned char *)(a5 + v10);
          *(v12 - 1) = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10 - 1)
                                      + 256
                                      + (unint64_t)*(unsigned __int8 *)(result + v10 - 1)];
          *int v12 = v11;
          char v13 = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10 + 2)
                               + 256
                               + (unint64_t)*(unsigned __int8 *)(result + v10 + 2)];
          v12[1] = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v10 + 1)
                                  + 256
                                  + (unint64_t)*(unsigned __int8 *)(result + v10 + 1)];
          void v12[2] = v13;
          uint64_t v8 = *a7;
          uint64_t v14 = v10 + 3;
          v10 += 4;
        }
        while (v14 <= v8 - 4);
        uint64_t v9 = (v10 - 1);
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(unsigned char *)(a5 + v9) = cv::g_Saturate8u[*(unsigned __int8 *)(a3 + v9)
                                               + 256
                                               + (unint64_t)*(unsigned __int8 *)(result + v9)];
          ++v9;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v15 = a7[1];
      a7[1] = v15 - 1;
    }
    while (v15);
  }
  return result;
}

uint64_t cv::vBinOp8<signed char,cv::OpAdd<signed char,signed char,signed char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 1;
        do
        {
          char v11 = (char *)(result + v10);
          int v12 = (char *)(a3 + v10);
          int v13 = *(char *)(result + v10 - 1) + *(char *)(a3 + v10 - 1);
          if (v13 >= 127) {
            int v13 = 127;
          }
          if (v13 <= -128) {
            LOBYTE(v13) = 0x80;
          }
          int v14 = *v11 + *v12;
          if (v14 >= 127) {
            int v14 = 127;
          }
          if (v14 <= -128) {
            LOBYTE(v14) = 0x80;
          }
          int v15 = (unsigned char *)(a5 + v10);
          *(v15 - 1) = v13;
          unsigned char *v15 = v14;
          int v16 = v11[1] + v12[1];
          if (v16 >= 127) {
            int v16 = 127;
          }
          int v17 = v11[2];
          int v18 = v12[2];
          if (v16 <= -128) {
            LOBYTE(v16) = 0x80;
          }
          int v19 = v17 + v18;
          if (v19 >= 127) {
            int v19 = 127;
          }
          if (v19 <= -128) {
            LOBYTE(v19) = 0x80;
          }
          v15[1] = v16;
          v15[2] = v19;
          uint64_t v8 = *a7;
          uint64_t v20 = v10 + 3;
          v10 += 4;
        }
        while (v20 <= v8 - 4);
        uint64_t v9 = (v10 - 1);
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          int v21 = *(char *)(result + v9) + *(char *)(a3 + v9);
          if (v21 >= 127) {
            int v21 = 127;
          }
          if (v21 <= -128) {
            LOBYTE(v21) = 0x80;
          }
          *(unsigned char *)(a5 + v9++) = v21;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v22 = a7[1];
      a7[1] = v22 - 1;
    }
    while (v22);
  }
  return result;
}

uint64_t cv::vBinOp16<unsigned short,cv::OpAdd<unsigned short,unsigned short,unsigned short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 4;
        do
        {
          int v14 = (unsigned __int16 *)(result + v13);
          int v15 = (unsigned __int16 *)(a3 + v13);
          int v16 = *(unsigned __int16 *)(a3 + v13 - 4) + *(unsigned __int16 *)(result + v13 - 4);
          if (v16 >= 0xFFFF) {
            LOWORD(v16) = -1;
          }
          int v17 = *(v15 - 1) + *(v14 - 1);
          if (v17 >= 0xFFFF) {
            LOWORD(v17) = -1;
          }
          int v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v16;
          *(v18 - 1) = v17;
          int v19 = *v15 + *v14;
          if (v19 >= 0xFFFF) {
            LOWORD(v19) = -1;
          }
          int v20 = v15[1] + v14[1];
          if (v20 >= 0xFFFF) {
            LOWORD(v20) = -1;
          }
          *int v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          int v21 = *(unsigned __int16 *)(a3 + 2 * v12) + *(unsigned __int16 *)(result + 2 * v12);
          if (v21 >= 0xFFFF) {
            LOWORD(v21) = -1;
          }
          *(_WORD *)(a5 + 2 * v12++) = v21;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp16<short,cv::OpAdd<short,short,short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 4;
        do
        {
          int v14 = (__int16 *)(result + v13);
          int v15 = (__int16 *)(a3 + v13);
          int v16 = *(__int16 *)(result + v13 - 4) + *(__int16 *)(a3 + v13 - 4);
          if (v16 >= 0x7FFF) {
            int v16 = 0x7FFF;
          }
          if (v16 <= -32768) {
            LOWORD(v16) = 0x8000;
          }
          int v17 = *(v14 - 1) + *(v15 - 1);
          if (v17 >= 0x7FFF) {
            int v17 = 0x7FFF;
          }
          if (v17 <= -32768) {
            LOWORD(v17) = 0x8000;
          }
          int v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v16;
          *(v18 - 1) = v17;
          int v19 = *v14 + *v15;
          if (v19 >= 0x7FFF) {
            int v19 = 0x7FFF;
          }
          if (v19 <= -32768) {
            LOWORD(v19) = 0x8000;
          }
          int v20 = v14[1] + v15[1];
          if (v20 >= 0x7FFF) {
            int v20 = 0x7FFF;
          }
          if (v20 <= -32768) {
            LOWORD(v20) = 0x8000;
          }
          *int v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          int v21 = *(__int16 *)(result + 2 * v12) + *(__int16 *)(a3 + 2 * v12);
          if (v21 >= 0x7FFF) {
            int v21 = 0x7FFF;
          }
          if (v21 <= -32768) {
            LOWORD(v21) = 0x8000;
          }
          *(_WORD *)(a5 + 2 * v12++) = v21;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp32s<cv::OpAdd<int,int,int>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 8;
        do
        {
          unint64_t v11 = (int32x2_t *)(a5 + v10);
          v11[-1] = vadd_s32(*(int32x2_t *)(a3 + v10 - 8), *(int32x2_t *)(result + v10 - 8));
          *unint64_t v11 = vadd_s32(*(int32x2_t *)(a3 + v10), *(int32x2_t *)(result + v10));
          v9 += 4;
          uint64_t v8 = *a7;
          v10 += 16;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v9) = *(_DWORD *)(a3 + 4 * v9) + *(_DWORD *)(result + 4 * v9);
          ++v9;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      int v12 = a7[1];
      a7[1] = v12 - 1;
      result += a2 & 0xFFFFFFFFFFFFFFFCLL;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v12);
  }
  return result;
}

uint64_t cv::vBinOp32f<cv::OpAdd<float,float,float>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 8;
        do
        {
          int v12 = (float32x2_t *)(a5 + v11);
          v12[-1] = vadd_f32(*(float32x2_t *)(result + v11 - 8), *(float32x2_t *)(a3 + v11 - 8));
          *int v12 = vadd_f32(*(float32x2_t *)(result + v11), *(float32x2_t *)(a3 + v11));
          v10 += 4;
          v11 += 16;
        }
        while (v10 <= (int)v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          *(float *)(a5 + 4 * v10) = *(float *)(result + 4 * v10) + *(float *)(a3 + 4 * v10);
          ++v10;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp64f<cv::OpAdd<double,double,double>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 16;
        do
        {
          int v12 = (float64x2_t *)(a5 + v11);
          v12[-1] = vaddq_f64(*(float64x2_t *)(result + v11 - 16), *(float64x2_t *)(a3 + v11 - 16));
          *int v12 = vaddq_f64(*(float64x2_t *)(result + v11), *(float64x2_t *)(a3 + v11));
          v10 += 4;
          v11 += 32;
        }
        while (v10 <= (int)v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          *(double *)(a5 + 8 * v10) = *(double *)(result + 8 * v10) + *(double *)(a3 + 8 * v10);
          ++v10;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFF8;
      a3 += a4 & 0xFFFFFFFFFFFFFFF8;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::sub8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpSub<unsigned char,unsigned char,unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::sub8s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp8<signed char,cv::OpSub<signed char,signed char,signed char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::sub16u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp16<unsigned short,cv::OpSub<unsigned short,unsigned short,unsigned short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::sub16s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp16<short,cv::OpSub<short,short,short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::sub32s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp32s<cv::OpSub<int,int,int>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::sub32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp32f<cv::OpSub<float,float,float>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::sub64f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp64f<cv::OpSub<double,double,double>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::vBinOp8<unsigned char,cv::OpSub<unsigned char,unsigned char,unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 1;
        do
        {
          char v11 = cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10) | 0x100) - *(unsigned __int8 *)(a3 + v10)];
          int v12 = (unsigned char *)(a5 + v10);
          *(v12 - 1) = cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10 - 1) | 0x100)
                                      - *(unsigned __int8 *)(a3 + v10 - 1)];
          *int v12 = v11;
          char v13 = cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10 + 2) | 0x100) - *(unsigned __int8 *)(a3 + v10 + 2)];
          v12[1] = cv::g_Saturate8u[(*(unsigned __int8 *)(result + v10 + 1) | 0x100)
                                  - *(unsigned __int8 *)(a3 + v10 + 1)];
          void v12[2] = v13;
          uint64_t v8 = *a7;
          uint64_t v14 = v10 + 3;
          v10 += 4;
        }
        while (v14 <= v8 - 4);
        uint64_t v9 = (v10 - 1);
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(unsigned char *)(a5 + v9) = cv::g_Saturate8u[(*(unsigned __int8 *)(result + v9) | 0x100)
                                               - *(unsigned __int8 *)(a3 + v9)];
          ++v9;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v15 = a7[1];
      a7[1] = v15 - 1;
    }
    while (v15);
  }
  return result;
}

uint64_t cv::vBinOp8<signed char,cv::OpSub<signed char,signed char,signed char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 1;
        do
        {
          char v11 = (char *)(result + v10);
          int v12 = (char *)(a3 + v10);
          int v13 = *(char *)(result + v10 - 1) - *(char *)(a3 + v10 - 1);
          if (v13 >= 127) {
            int v13 = 127;
          }
          if (v13 <= -128) {
            LOBYTE(v13) = 0x80;
          }
          int v14 = *v11 - *v12;
          if (v14 >= 127) {
            int v14 = 127;
          }
          if (v14 <= -128) {
            LOBYTE(v14) = 0x80;
          }
          int v15 = (unsigned char *)(a5 + v10);
          *(v15 - 1) = v13;
          unsigned char *v15 = v14;
          int v16 = v11[1] - v12[1];
          if (v16 >= 127) {
            int v16 = 127;
          }
          int v17 = v11[2];
          int v18 = v12[2];
          if (v16 <= -128) {
            LOBYTE(v16) = 0x80;
          }
          int v19 = v17 - v18;
          if (v19 >= 127) {
            int v19 = 127;
          }
          if (v19 <= -128) {
            LOBYTE(v19) = 0x80;
          }
          v15[1] = v16;
          v15[2] = v19;
          uint64_t v8 = *a7;
          uint64_t v20 = v10 + 3;
          v10 += 4;
        }
        while (v20 <= v8 - 4);
        uint64_t v9 = (v10 - 1);
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          int v21 = *(char *)(result + v9) - *(char *)(a3 + v9);
          if (v21 >= 127) {
            int v21 = 127;
          }
          if (v21 <= -128) {
            LOBYTE(v21) = 0x80;
          }
          *(unsigned char *)(a5 + v9++) = v21;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v22 = a7[1];
      a7[1] = v22 - 1;
    }
    while (v22);
  }
  return result;
}

uint64_t cv::vBinOp16<unsigned short,cv::OpSub<unsigned short,unsigned short,unsigned short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a4 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v10 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 4;
        do
        {
          int v13 = *(unsigned __int16 *)(result + v12 - 4) - *(unsigned __int16 *)(a3 + v12 - 4);
          int v14 = *(unsigned __int16 *)(result + v12 - 2) - *(unsigned __int16 *)(a3 + v12 - 2);
          int v15 = (_WORD *)(a5 + v12);
          *(v15 - 2) = v13 & ~(unsigned __int16)(v13 >> 31);
          *(v15 - 1) = v14 & ~(unsigned __int16)(v14 >> 31);
          int v16 = *(unsigned __int16 *)(result + v12 + 2) - *(unsigned __int16 *)(a3 + v12 + 2);
          _WORD *v15 = (*(_WORD *)(result + v12) - *(_WORD *)(a3 + v12)) & ~(unsigned __int16)((*(unsigned __int16 *)(result + v12)
                                                                                        - *(unsigned __int16 *)(a3 + v12)) >> 31);
          v15[1] = v16 & ~(unsigned __int16)(v16 >> 31);
          v11 += 4;
          v12 += 8;
        }
        while (v11 <= (int)v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v8)
      {
        do
        {
          int v17 = *(unsigned __int16 *)(result + 2 * v11) - *(unsigned __int16 *)(a3 + 2 * v11);
          *(_WORD *)(a5 + 2 * v11++) = v17 & ~(unsigned __int16)(v17 >> 31);
        }
        while (v8 != v11);
      }
      result += a2 & 0xFFFFFFFFFFFFFFFELL;
      a3 += v9;
      a5 += v10;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp16<short,cv::OpSub<short,short,short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 4;
        do
        {
          int v14 = (__int16 *)(result + v13);
          int v15 = (__int16 *)(a3 + v13);
          int v16 = *(__int16 *)(result + v13 - 4) - *(__int16 *)(a3 + v13 - 4);
          if (v16 >= 0x7FFF) {
            int v16 = 0x7FFF;
          }
          if (v16 <= -32768) {
            LOWORD(v16) = 0x8000;
          }
          int v17 = *(v14 - 1) - *(v15 - 1);
          if (v17 >= 0x7FFF) {
            int v17 = 0x7FFF;
          }
          if (v17 <= -32768) {
            LOWORD(v17) = 0x8000;
          }
          int v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v16;
          *(v18 - 1) = v17;
          int v19 = *v14 - *v15;
          if (v19 >= 0x7FFF) {
            int v19 = 0x7FFF;
          }
          if (v19 <= -32768) {
            LOWORD(v19) = 0x8000;
          }
          int v20 = v14[1] - v15[1];
          if (v20 >= 0x7FFF) {
            int v20 = 0x7FFF;
          }
          if (v20 <= -32768) {
            LOWORD(v20) = 0x8000;
          }
          *int v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          int v21 = *(__int16 *)(result + 2 * v12) - *(__int16 *)(a3 + 2 * v12);
          if (v21 >= 0x7FFF) {
            int v21 = 0x7FFF;
          }
          if (v21 <= -32768) {
            LOWORD(v21) = 0x8000;
          }
          *(_WORD *)(a5 + 2 * v12++) = v21;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp32s<cv::OpSub<int,int,int>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 8;
        do
        {
          unint64_t v11 = (int32x2_t *)(a5 + v10);
          v11[-1] = vsub_s32(*(int32x2_t *)(result + v10 - 8), *(int32x2_t *)(a3 + v10 - 8));
          *unint64_t v11 = vsub_s32(*(int32x2_t *)(result + v10), *(int32x2_t *)(a3 + v10));
          v9 += 4;
          uint64_t v8 = *a7;
          v10 += 16;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v9) = *(_DWORD *)(result + 4 * v9) - *(_DWORD *)(a3 + 4 * v9);
          ++v9;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      int v12 = a7[1];
      a7[1] = v12 - 1;
      result += a2 & 0xFFFFFFFFFFFFFFFCLL;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v12);
  }
  return result;
}

uint64_t cv::vBinOp32f<cv::OpSub<float,float,float>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 8;
        do
        {
          int v12 = (float32x2_t *)(a5 + v11);
          v12[-1] = vsub_f32(*(float32x2_t *)(result + v11 - 8), *(float32x2_t *)(a3 + v11 - 8));
          *int v12 = vsub_f32(*(float32x2_t *)(result + v11), *(float32x2_t *)(a3 + v11));
          v10 += 4;
          v11 += 16;
        }
        while (v10 <= (int)v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          *(float *)(a5 + 4 * v10) = *(float *)(result + 4 * v10) - *(float *)(a3 + 4 * v10);
          ++v10;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp64f<cv::OpSub<double,double,double>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 16;
        do
        {
          int v12 = (float64x2_t *)(a5 + v11);
          v12[-1] = vsubq_f64(*(float64x2_t *)(result + v11 - 16), *(float64x2_t *)(a3 + v11 - 16));
          *int v12 = vsubq_f64(*(float64x2_t *)(result + v11), *(float64x2_t *)(a3 + v11));
          v10 += 4;
          v11 += 32;
        }
        while (v10 <= (int)v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          *(double *)(a5 + 8 * v10) = *(double *)(result + 8 * v10) - *(double *)(a3 + 8 * v10);
          ++v10;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFF8;
      a3 += a4 & 0xFFFFFFFFFFFFFFF8;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::absdiff8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp8<unsigned char,cv::OpAbsDiff<unsigned char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::absdiff8s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp8<signed char,cv::OpAbsDiff<signed char>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::absdiff16u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp16<unsigned short,cv::OpAbsDiff<unsigned short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::absdiff16s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp16<short,cv::OpAbsDiff<short>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::absdiff32s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp32s<cv::OpAbsDiff<int>,cv::NOP>(a1, a2, a3, a4, a5, a6, (int *)&v8);
}

uint64_t cv::absdiff32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp32f<cv::OpAbsDiff<float>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::absdiff64f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8 = *a7;
  return cv::vBinOp64f<cv::OpAbsDiff<double>,cv::NOP>(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
}

uint64_t cv::vBinOp8<unsigned char,cv::OpAbsDiff<unsigned char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 2;
        do
        {
          v11.i32[0] = *(unsigned __int8 *)(result + v10 - 2);
          v11.i32[1] = *(unsigned __int8 *)(result + v10 - 1);
          v12.i32[0] = *(unsigned __int8 *)(a3 + v10 - 2);
          v12.i32[1] = *(unsigned __int8 *)(a3 + v10 - 1);
          uint64_t v13 = (unsigned char *)(a5 + v10);
          uint32x2_t v14 = vabd_u32(v11, v12);
          *(v13 - 1) = v14.i8[4];
          *(v13 - 2) = v14.i8[0];
          v14.i32[0] = *(unsigned __int8 *)(result + v10);
          v14.i32[1] = *(unsigned __int8 *)(result + v10 + 1);
          v12.i32[0] = *(unsigned __int8 *)(a3 + v10);
          v12.i32[1] = *(unsigned __int8 *)(a3 + v10 + 1);
          uint32x2_t v15 = vabd_u32(v14, v12);
          v13[1] = v15.i8[4];
          *uint64_t v13 = v15.i8[0];
          uint64_t v8 = *a7;
          uint64_t v16 = v10 + 2;
          v10 += 4;
        }
        while (v16 <= v8 - 4);
        uint64_t v9 = (v10 - 2);
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          int v17 = *(unsigned __int8 *)(result + v9) - *(unsigned __int8 *)(a3 + v9);
          if (v17 < 0) {
            LOBYTE(v17) = *(unsigned char *)(a3 + v9) - *(unsigned char *)(result + v9);
          }
          *(unsigned char *)(a5 + v9++) = v17;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v18 = a7[1];
      a7[1] = v18 - 1;
    }
    while (v18);
  }
  return result;
}

uint64_t cv::vBinOp8<signed char,cv::OpAbsDiff<signed char>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 2;
        do
        {
          v11.i32[0] = *(char *)(result + v10 - 2);
          v11.i32[1] = *(char *)(result + v10 - 1);
          v12.i32[0] = *(char *)(a3 + v10 - 2);
          v12.i32[1] = *(char *)(a3 + v10 - 1);
          uint64_t v13 = (unsigned char *)(a5 + v10);
          int32x2_t v14 = vmin_s32(vabd_s32(v11, v12), (int32x2_t)0x7F0000007FLL);
          *(v13 - 1) = v14.i8[4];
          *(v13 - 2) = v14.i8[0];
          v14.i32[0] = *(char *)(result + v10);
          v14.i32[1] = *(char *)(result + v10 + 1);
          v12.i32[0] = *(char *)(a3 + v10);
          v12.i32[1] = *(char *)(a3 + v10 + 1);
          int32x2_t v15 = vmin_s32(vabd_s32(v14, v12), (int32x2_t)0x7F0000007FLL);
          v13[1] = v15.i8[4];
          *uint64_t v13 = v15.i8[0];
          uint64_t v8 = *a7;
          uint64_t v16 = v10 + 2;
          v10 += 4;
        }
        while (v16 <= v8 - 4);
        uint64_t v9 = (v10 - 2);
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          int v17 = *(char *)(result + v9) - *(char *)(a3 + v9);
          if (v17 < 0) {
            int v17 = *(char *)(a3 + v9) - *(char *)(result + v9);
          }
          if (v17 >= 127) {
            LOBYTE(v17) = 127;
          }
          *(unsigned char *)(a5 + v9++) = v17;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v18 = a7[1];
      a7[1] = v18 - 1;
    }
    while (v18);
  }
  return result;
}

uint64_t cv::vBinOp16<unsigned short,cv::OpAbsDiff<unsigned short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v11 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 4;
        do
        {
          int32x2_t v14 = (unsigned __int16 *)(result + v13);
          int32x2_t v15 = (unsigned __int16 *)(a3 + v13);
          int v16 = *(unsigned __int16 *)(result + v13 - 4) - *(unsigned __int16 *)(a3 + v13 - 4);
          if (v16 < 0) {
            LOWORD(v16) = *(_WORD *)(a3 + v13 - 4) - *(_WORD *)(result + v13 - 4);
          }
          int v17 = *(v14 - 1) - *(v15 - 1);
          if (v17 < 0) {
            LOWORD(v17) = *(v15 - 1) - *(v14 - 1);
          }
          int v18 = (_WORD *)(a5 + v13);
          *(v18 - 2) = v16;
          *(v18 - 1) = v17;
          int v19 = *v14 - *v15;
          if (v19 < 0) {
            LOWORD(v19) = *v15 - *v14;
          }
          int v20 = v14[1] - v15[1];
          if (v20 < 0) {
            int v20 = -v20;
          }
          *int v18 = v19;
          v18[1] = v20;
          v12 += 4;
          v13 += 8;
        }
        while (v12 <= (int)v8 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v8)
      {
        do
        {
          int v21 = *(unsigned __int16 *)(result + 2 * v12) - *(unsigned __int16 *)(a3 + 2 * v12);
          if (v21 < 0) {
            LOWORD(v21) = *(_WORD *)(a3 + 2 * v12) - *(_WORD *)(result + 2 * v12);
          }
          *(_WORD *)(a5 + 2 * v12++) = v21;
        }
        while (v8 != v12);
      }
      result += v9;
      a3 += v10;
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp16<short,cv::OpAbsDiff<short>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 4;
        do
        {
          v12.i32[0] = *(__int16 *)(result + v11 - 4);
          v13.i32[0] = *(__int16 *)(a3 + v11 - 4);
          v12.i32[1] = *(__int16 *)(result + v11 - 2);
          v13.i32[1] = *(__int16 *)(a3 + v11 - 2);
          int32x2_t v14 = vmin_s32(vabd_s32(v12, v13), (int32x2_t)0x7F0000007FLL);
          int32x2_t v15 = (_WORD *)(a5 + v11);
          *(v15 - 1) = v14.i16[2];
          *(v15 - 2) = v14.i16[0];
          v14.i32[0] = *(__int16 *)(result + v11);
          v13.i32[0] = *(__int16 *)(a3 + v11);
          v14.i32[1] = *(__int16 *)(result + v11 + 2);
          v13.i32[1] = *(__int16 *)(a3 + v11 + 2);
          int32x2_t v16 = vmin_s32(vabd_s32(v14, v13), (int32x2_t)0x7F0000007FLL);
          v15[1] = v16.i16[2];
          _WORD *v15 = v16.i16[0];
          v10 += 4;
          v11 += 8;
        }
        while (v10 <= (int)v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          int v17 = *(__int16 *)(result + 2 * v10) - *(__int16 *)(a3 + 2 * v10);
          if (v17 < 0) {
            int v17 = *(__int16 *)(a3 + 2 * v10) - *(__int16 *)(result + 2 * v10);
          }
          if (v17 >= 0x7FFF) {
            LOWORD(v17) = 0x7FFF;
          }
          *(_WORD *)(a5 + 2 * v10++) = v17;
        }
        while (v8 != v10);
      }
      result += a2 & 0xFFFFFFFFFFFFFFFELL;
      a5 += v9;
      a3 += a4 & 0xFFFFFFFFFFFFFFFELL;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp32s<cv::OpAbsDiff<int>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  a7[1] = v7 - 1;
  if (v7)
  {
    LODWORD(v_Block_object_dispose(&a9, 8) = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 8;
        do
        {
          uint64_t v11 = (int32x2_t *)(a5 + v10);
          v11[-1] = vabd_s32(*(int32x2_t *)(result + v10 - 8), *(int32x2_t *)(a3 + v10 - 8));
          *uint64_t v11 = vabd_s32(*(int32x2_t *)(result + v10), *(int32x2_t *)(a3 + v10));
          v9 += 4;
          uint64_t v8 = *a7;
          v10 += 16;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          int v12 = *(_DWORD *)(result + 4 * v9) - *(_DWORD *)(a3 + 4 * v9);
          if (v12 < 0) {
            int v12 = *(_DWORD *)(a3 + 4 * v9) - *(_DWORD *)(result + 4 * v9);
          }
          *(_DWORD *)(a5 + 4 * v9++) = v12;
          uint64_t v8 = *a7;
        }
        while (v9 < v8);
      }
      int v13 = a7[1];
      a7[1] = v13 - 1;
      result += a2 & 0xFFFFFFFFFFFFFFFCLL;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v13);
  }
  return result;
}

uint64_t cv::vBinOp32f<cv::OpAbsDiff<float>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 8;
        do
        {
          int v12 = (float32x2_t *)(a5 + v11);
          v12[-1] = vabd_f32(*(float32x2_t *)(result + v11 - 8), *(float32x2_t *)(a3 + v11 - 8));
          *int v12 = vabd_f32(*(float32x2_t *)(result + v11), *(float32x2_t *)(a3 + v11));
          v10 += 4;
          v11 += 16;
        }
        while (v10 <= (int)v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          *(float *)(a5 + 4 * v10) = vabds_f32(*(float *)(result + 4 * v10), *(float *)(a3 + 4 * v10));
          ++v10;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFFCLL;
      a3 += a4 & 0xFFFFFFFFFFFFFFFCLL;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::vBinOp64f<cv::OpAbsDiff<double>,cv::NOP>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 16;
        do
        {
          int v12 = (float64x2_t *)(a5 + v11);
          v12[-1] = vabdq_f64(*(float64x2_t *)(result + v11 - 16), *(float64x2_t *)(a3 + v11 - 16));
          *int v12 = vabdq_f64(*(float64x2_t *)(result + v11), *(float64x2_t *)(a3 + v11));
          v10 += 4;
          v11 += 32;
        }
        while (v10 <= (int)v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          *(double *)(a5 + 8 * v10) = vabdd_f64(*(double *)(result + 8 * v10), *(double *)(a3 + 8 * v10));
          ++v10;
        }
        while (v8 != v10);
      }
      result += v9;
      a5 += a6 & 0xFFFFFFFFFFFFFFF8;
      a3 += a4 & 0xFFFFFFFFFFFFFFF8;
      --v7;
    }
    while (v7);
  }
  a7[1] = -1;
  return result;
}

uint64_t cv::mul8u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8, double a9, double a10, double a11, double a12, float a13, float a14)
{
  int v14 = a7[1];
  uint64_t v15 = *a7;
  float v16 = *a8;
  int v17 = v14 - 1;
  if (v16 == 1.0)
  {
    if (v14)
    {
      do
      {
        int v18 = v17;
        if ((int)v15 >= 4)
        {
          uint64_t v19 = 0;
          do
          {
            int v20 = (unsigned __int8 *)(result + v19);
            int v21 = (unsigned __int8 *)(a3 + v19);
            int v22 = *(unsigned __int8 *)(a3 + v19) * *(unsigned __int8 *)(result + v19);
            if (v22 >= 255) {
              LOBYTE(v22) = -1;
            }
            int v23 = v21[1] * v20[1];
            if (v23 >= 255) {
              LOBYTE(v23) = -1;
            }
            unsigned int v24 = (unsigned char *)(a5 + v19);
            *unsigned int v24 = v22;
            v24[1] = v23;
            int v25 = v21[2] * v20[2];
            if (v25 >= 255) {
              LOBYTE(v25) = -1;
            }
            int v26 = v21[3] * v20[3];
            if (v26 >= 255) {
              LOBYTE(v26) = -1;
            }
            void v24[2] = v25;
            v24[3] = v26;
            v19 += 4;
          }
          while (v19 <= v15 - 4);
          uint64_t v19 = v19;
        }
        else
        {
          uint64_t v19 = 0;
        }
        if ((int)v19 < (int)v15)
        {
          do
          {
            int v27 = *(unsigned __int8 *)(a3 + v19) * *(unsigned __int8 *)(result + v19);
            if (v27 >= 255) {
              LOBYTE(v27) = -1;
            }
            *(unsigned char *)(a5 + v19++) = v27;
          }
          while (v19 < v15);
        }
        result += a2;
        a3 += a4;
        a5 += a6;
        int v17 = v18 - 1;
      }
      while (v18);
    }
  }
  else if (v14)
  {
    do
    {
      int v28 = v17;
      if ((int)v15 >= 4)
      {
        uint64_t v29 = 0;
        do
        {
          LOBYTE(a12) = *(unsigned char *)(result + v29);
          LOBYTE(a13) = *(unsigned char *)(a3 + v29);
          *(float *)&unsigned int v30 = (float)LODWORD(a13);
          double v31 = (float)((float)(v16 * (float)LODWORD(a12)) * *(float *)&v30);
          LOBYTE(v30) = *(unsigned char *)(result + v29 + 1);
          LOBYTE(a14) = *(unsigned char *)(a3 + v29 + 1);
          *(float *)&unsigned int v32 = (float)LODWORD(a14);
          double v33 = (float)((float)(v16 * (float)v30) * *(float *)&v32);
          int32x2_t v34 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v33), (uint64_t)rint(v31)), 0), (int32x2_t)0xFF000000FFLL);
          int v35 = (unsigned char *)(a5 + v29);
          v35[1] = v34.i8[4];
          unsigned char *v35 = v34.i8[0];
          v34.i8[0] = *(unsigned char *)(result + v29 + 2);
          LOBYTE(v33) = *(unsigned char *)(a3 + v29 + 2);
          *(float *)&double v33 = (float)LODWORD(v33);
          double v36 = (float)((float)(v16 * (float)v34.u32[0]) * *(float *)&v33);
          LOBYTE(v33) = *(unsigned char *)(result + v29 + 3);
          a13 = v16 * (float)LODWORD(v33);
          LOBYTE(v32) = *(unsigned char *)(a3 + v29 + 3);
          a14 = (float)v32;
          a12 = COERCE_DOUBLE(vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(a13 * a14)), (uint64_t)rint(v36)), 0), (int32x2_t)0xFF000000FFLL));
          v35[3] = BYTE4(a12);
          v35[2] = LOBYTE(a12);
          v29 += 4;
        }
        while (v29 <= v15 - 4);
        uint64_t v29 = v29;
      }
      else
      {
        uint64_t v29 = 0;
      }
      if ((int)v29 < (int)v15)
      {
        do
        {
          LOBYTE(a12) = *(unsigned char *)(result + v29);
          LOBYTE(a13) = *(unsigned char *)(a3 + v29);
          a13 = (float)LODWORD(a13);
          a12 = rint((float)((float)(v16 * (float)LODWORD(a12)) * a13));
          int v37 = (uint64_t)a12 & ~((int)(uint64_t)a12 >> 31);
          if (v37 >= 255) {
            LOBYTE(v37) = -1;
          }
          *(unsigned char *)(a5 + v29++) = v37;
        }
        while (v29 < v15);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v17 = v28 - 1;
    }
    while (v28);
  }
  return result;
}

uint64_t cv::mul8s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  uint64_t v9 = *a7;
  float v10 = *a8;
  int v11 = v8 - 1;
  if (v10 == 1.0)
  {
    if (v8)
    {
      do
      {
        int v12 = v11;
        if ((int)v9 >= 4)
        {
          uint64_t v14 = 2;
          do
          {
            v15.i32[0] = *(char *)(result + v14 - 2);
            v15.i32[1] = *(char *)(result + v14 - 1);
            v16.i32[0] = *(char *)(a3 + v14 - 2);
            v16.i32[1] = *(char *)(a3 + v14 - 1);
            int v17 = (unsigned char *)(a5 + v14);
            int32x2_t v18 = vmin_s32(vmax_s32(vmul_s32(v16, v15), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
            *(v17 - 1) = v18.i8[4];
            *(v17 - 2) = v18.i8[0];
            v18.i32[0] = *(char *)(result + v14);
            v18.i32[1] = *(char *)(result + v14 + 1);
            v16.i32[0] = *(char *)(a3 + v14);
            v16.i32[1] = *(char *)(a3 + v14 + 1);
            int32x2_t v19 = vmin_s32(vmax_s32(vmul_s32(v16, v18), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
            v17[1] = v19.i8[4];
            unsigned char *v17 = v19.i8[0];
            uint64_t v20 = v14 + 2;
            v14 += 4;
          }
          while (v20 <= v9 - 4);
          uint64_t v13 = (v14 - 2);
        }
        else
        {
          uint64_t v13 = 0;
        }
        if ((int)v13 < (int)v9)
        {
          do
          {
            int v21 = *(char *)(a3 + v13) * *(char *)(result + v13);
            if (v21 <= -128) {
              int v21 = -128;
            }
            if (v21 >= 127) {
              LOBYTE(v21) = 127;
            }
            *(unsigned char *)(a5 + v13++) = v21;
          }
          while (v13 < v9);
        }
        result += a2;
        a3 += a4;
        a5 += a6;
        int v11 = v12 - 1;
      }
      while (v12);
    }
  }
  else if (v8)
  {
    do
    {
      int v22 = v11;
      if ((int)v9 >= 4)
      {
        uint64_t v23 = 0;
        do
        {
          int32x2_t v24 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)((float)(v10 * (float)*(char *)(result + v23 + 1))* (float)*(char *)(a3 + v23 + 1))), (uint64_t)rint((float)((float)(v10 * (float)*(char *)(result + v23))* (float)*(char *)(a3 + v23)))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          int v25 = (unsigned char *)(a5 + v23);
          v25[1] = v24.i8[4];
          *int v25 = v24.i8[0];
          int32x2_t v26 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)((float)(v10 * (float)*(char *)(result + v23 + 3))* (float)*(char *)(a3 + v23 + 3))), (uint64_t)rint((float)((float)(v10 * (float)*(char *)(result + v23 + 2))* (float)*(char *)(a3 + v23 + 2)))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v25[3] = v26.i8[4];
          v25[2] = v26.i8[0];
          v23 += 4;
        }
        while (v23 <= v9 - 4);
        uint64_t v23 = v23;
      }
      else
      {
        uint64_t v23 = 0;
      }
      if ((int)v23 < (int)v9)
      {
        do
        {
          uint64_t v27 = (uint64_t)rint((float)((float)(v10 * (float)*(char *)(result + v23)) * (float)*(char *)(a3 + v23)));
          if ((int)v27 <= -128) {
            LODWORD(v27) = -128;
          }
          if ((int)v27 >= 127) {
            LOBYTE(v27) = 127;
          }
          *(unsigned char *)(a5 + v23++) = v27;
        }
        while (v23 < v9);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v11 = v22 - 1;
    }
    while (v22);
  }
  return result;
}

uint64_t cv::mul16u(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8, double a9, double a10, float a11)
{
  int v11 = a7[1];
  uint64_t v12 = (int)*a7;
  uint64_t v13 = *a7;
  float v14 = *a8;
  unint64_t v15 = a2 >> 1;
  unint64_t v16 = a4 >> 1;
  unint64_t v17 = a6 >> 1;
  int v18 = v11 - 1;
  LODWORD(v19) = 1.0;
  if (v14 == 1.0)
  {
    if (v11)
    {
      uint64_t v20 = 2 * v17;
      uint64_t v21 = 2 * v16;
      uint64_t v22 = 2 * v15;
      do
      {
        int v23 = v18;
        if ((int)v12 >= 4)
        {
          uint64_t v25 = 0;
          uint64_t v24 = 0;
          do
          {
            int32x2_t v26 = (unsigned __int16 *)(result + v25);
            uint64_t v27 = (unsigned __int16 *)(a3 + v25);
            int v28 = *(unsigned __int16 *)(a3 + v25) * *(unsigned __int16 *)(result + v25);
            if (v28 >= 0xFFFF) {
              LOWORD(v2_Block_object_dispose(&a9, 8) = -1;
            }
            int v29 = v27[1] * v26[1];
            if (v29 >= 0xFFFF) {
              LOWORD(v29) = -1;
            }
            unsigned int v30 = (_WORD *)(a5 + v25);
            _WORD *v30 = v28;
            v30[1] = v29;
            int v31 = v27[2] * v26[2];
            if (v31 >= 0xFFFF) {
              LOWORD(v31) = -1;
            }
            int v32 = v27[3] * v26[3];
            if (v32 >= 0xFFFF) {
              LOWORD(v32) = -1;
            }
            void v30[2] = v31;
            v30[3] = v32;
            v24 += 4;
            v25 += 8;
          }
          while (v24 <= v12 - 4);
          uint64_t v24 = v24;
        }
        else
        {
          uint64_t v24 = 0;
        }
        if ((int)v24 < (int)v13)
        {
          do
          {
            int v33 = *(unsigned __int16 *)(a3 + 2 * v24) * *(unsigned __int16 *)(result + 2 * v24);
            if (v33 >= 0xFFFF) {
              LOWORD(v33) = -1;
            }
            *(_WORD *)(a5 + 2 * v24++) = v33;
          }
          while (v13 != v24);
        }
        int v18 = v23 - 1;
        a5 += v20;
        a3 += v21;
        result += v22;
      }
      while (v23);
    }
  }
  else if (v11)
  {
    uint64_t v34 = 2 * v17;
    uint64_t v35 = 2 * v16;
    uint64_t v36 = 2 * v15;
    do
    {
      int v37 = v18;
      if ((int)v12 >= 4)
      {
        uint64_t v39 = 0;
        uint64_t v38 = 0;
        do
        {
          uint64_t v40 = result + v39;
          LOWORD(v19) = *(_WORD *)(result + v39);
          uint64_t v41 = a3 + v39;
          LOWORD(a11) = *(_WORD *)(a3 + v39);
          *(float *)&unsigned int v42 = (float)LODWORD(a11);
          double v43 = rint((float)((float)(v14 * (float)LODWORD(v19)) * *(float *)&v42));
          uint64_t v44 = (uint64_t)v43;
          LOWORD(v43) = *(_WORD *)(result + v39 + 2);
          int v45 = v44 & ~((int)v44 >> 31);
          LOWORD(v42) = *(_WORD *)(a3 + v39 + 2);
          float v46 = (float)v42;
          double v47 = rint((float)((float)(v14 * (float)LODWORD(v43)) * v46));
          int v48 = (uint64_t)v47 & ~((int)(uint64_t)v47 >> 31);
          if (v45 >= 0xFFFF) {
            LOWORD(v45) = -1;
          }
          if (v48 >= 0xFFFF) {
            LOWORD(v4_Block_object_dispose(&a9, 8) = -1;
          }
          uint64_t v49 = (_WORD *)(a5 + v39);
          *uint64_t v49 = v45;
          v49[1] = v48;
          LOWORD(v47) = *(_WORD *)(v40 + 4);
          LOWORD(v46) = *(_WORD *)(v41 + 4);
          *(float *)&unsigned int v50 = (float)LODWORD(v46);
          double v51 = rint((float)((float)(v14 * (float)LODWORD(v47)) * *(float *)&v50));
          int v52 = (uint64_t)v51 & ~((int)(uint64_t)v51 >> 31);
          LOWORD(v51) = *(_WORD *)(v40 + 6);
          LOWORD(v50) = *(_WORD *)(v41 + 6);
          a11 = (float)v50;
          float v53 = (float)(v14 * (float)LODWORD(v51)) * a11;
          if (v52 >= 0xFFFF) {
            __int16 v54 = -1;
          }
          else {
            __int16 v54 = v52;
          }
          double v19 = rint(v53);
          int v55 = (uint64_t)v19 & ~((int)(uint64_t)v19 >> 31);
          if (v55 >= 0xFFFF) {
            LOWORD(v55) = -1;
          }
          v49[2] = v54;
          v49[3] = v55;
          v38 += 4;
          v39 += 8;
        }
        while (v38 <= v12 - 4);
        uint64_t v38 = v38;
      }
      else
      {
        uint64_t v38 = 0;
      }
      if ((int)v38 < (int)v13)
      {
        do
        {
          LOWORD(v19) = *(_WORD *)(result + 2 * v38);
          LOWORD(a11) = *(_WORD *)(a3 + 2 * v38);
          a11 = (float)LODWORD(a11);
          double v19 = rint((float)((float)(v14 * (float)LODWORD(v19)) * a11));
          int v56 = (uint64_t)v19 & ~((int)(uint64_t)v19 >> 31);
          if (v56 >= 0xFFFF) {
            LOWORD(v56) = -1;
          }
          *(_WORD *)(a5 + 2 * v38++) = v56;
        }
        while (v13 != v38);
      }
      int v18 = v37 - 1;
      a5 += v34;
      a3 += v35;
      result += v36;
    }
    while (v37);
  }
  return result;
}

uint64_t cv::mul16s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  uint64_t v9 = (int)*a7;
  uint64_t v10 = *a7;
  float v11 = *a8;
  unint64_t v12 = a2 >> 1;
  unint64_t v13 = a4 >> 1;
  unint64_t v14 = a6 >> 1;
  int v15 = v8 - 1;
  if (v11 == 1.0)
  {
    if (v8)
    {
      uint64_t v16 = 2 * v14;
      uint64_t v17 = 2 * v13;
      uint64_t v18 = 2 * v12;
      do
      {
        int v19 = v15;
        if ((int)v9 >= 4)
        {
          uint64_t v21 = 0;
          uint64_t v20 = 0;
          do
          {
            uint64_t v22 = (__int16 *)(result + v21);
            int v23 = (__int16 *)(a3 + v21);
            int v24 = *(__int16 *)(a3 + v21) * *(__int16 *)(result + v21);
            if (v24 <= -32768) {
              int v24 = -32768;
            }
            if (v24 >= 0x7FFF) {
              LOWORD(v24) = 0x7FFF;
            }
            int v25 = v23[1] * v22[1];
            if (v25 <= -32768) {
              int v25 = -32768;
            }
            if (v25 >= 0x7FFF) {
              LOWORD(v25) = 0x7FFF;
            }
            int32x2_t v26 = (_WORD *)(a5 + v21);
            *int32x2_t v26 = v24;
            v26[1] = v25;
            int v27 = v23[2] * v22[2];
            if (v27 <= -32768) {
              int v27 = -32768;
            }
            if (v27 >= 0x7FFF) {
              LOWORD(v27) = 0x7FFF;
            }
            int v28 = v23[3] * v22[3];
            if (v28 <= -32768) {
              int v28 = -32768;
            }
            if (v28 >= 0x7FFF) {
              LOWORD(v2_Block_object_dispose(&a9, 8) = 0x7FFF;
            }
            void v26[2] = v27;
            v26[3] = v28;
            v20 += 4;
            v21 += 8;
          }
          while (v20 <= v9 - 4);
          uint64_t v20 = v20;
        }
        else
        {
          uint64_t v20 = 0;
        }
        if ((int)v20 < (int)v10)
        {
          do
          {
            int v29 = *(__int16 *)(a3 + 2 * v20) * *(__int16 *)(result + 2 * v20);
            if (v29 <= -32768) {
              int v29 = -32768;
            }
            if (v29 >= 0x7FFF) {
              LOWORD(v29) = 0x7FFF;
            }
            *(_WORD *)(a5 + 2 * v20++) = v29;
          }
          while (v10 != v20);
        }
        int v15 = v19 - 1;
        a5 += v16;
        a3 += v17;
        result += v18;
      }
      while (v19);
    }
  }
  else if (v8)
  {
    uint64_t v30 = 2 * v14;
    uint64_t v31 = 2 * v13;
    uint64_t v32 = 2 * v12;
    do
    {
      int v33 = v15;
      if ((int)v9 >= 4)
      {
        uint64_t v35 = 0;
        uint64_t v34 = 0;
        do
        {
          uint64_t v36 = (__int16 *)(result + v35);
          int v37 = (__int16 *)(a3 + v35);
          uint64_t v38 = (uint64_t)rint((float)((float)(v11 * (float)*(__int16 *)(result + v35)) * (float)*(__int16 *)(a3 + v35)));
          if ((int)v38 <= -32768) {
            LODWORD(v3_Block_object_dispose(&a9, 8) = -32768;
          }
          if ((int)v38 >= 0x7FFF) {
            LOWORD(v3_Block_object_dispose(&a9, 8) = 0x7FFF;
          }
          uint64_t v39 = (uint64_t)rint((float)((float)(v11 * (float)v36[1]) * (float)v37[1]));
          if ((int)v39 <= -32768) {
            LODWORD(v39) = -32768;
          }
          if ((int)v39 >= 0x7FFF) {
            LOWORD(v39) = 0x7FFF;
          }
          uint64_t v40 = (_WORD *)(a5 + v35);
          *uint64_t v40 = v38;
          v40[1] = v39;
          uint64_t v41 = (uint64_t)rint((float)((float)(v11 * (float)v36[2]) * (float)v37[2]));
          if ((int)v41 <= -32768) {
            LODWORD(v41) = -32768;
          }
          double v42 = (float)((float)(v11 * (float)v36[3]) * (float)v37[3]);
          if ((int)v41 >= 0x7FFF) {
            __int16 v43 = 0x7FFF;
          }
          else {
            __int16 v43 = v41;
          }
          uint64_t v44 = (uint64_t)rint(v42);
          if ((int)v44 <= -32768) {
            LODWORD(v44) = -32768;
          }
          if ((int)v44 >= 0x7FFF) {
            LOWORD(v44) = 0x7FFF;
          }
          void v40[2] = v43;
          void v40[3] = v44;
          v34 += 4;
          v35 += 8;
        }
        while (v34 <= v9 - 4);
        uint64_t v34 = v34;
      }
      else
      {
        uint64_t v34 = 0;
      }
      if ((int)v34 < (int)v10)
      {
        do
        {
          uint64_t v45 = (uint64_t)rint((float)((float)(v11 * (float)*(__int16 *)(result + 2 * v34))
                                    * (float)*(__int16 *)(a3 + 2 * v34)));
          if ((int)v45 <= -32768) {
            LODWORD(v45) = -32768;
          }
          if ((int)v45 >= 0x7FFF) {
            LOWORD(v45) = 0x7FFF;
          }
          *(_WORD *)(a5 + 2 * v34++) = v45;
        }
        while (v10 != v34);
      }
      int v15 = v33 - 1;
      a5 += v30;
      a3 += v31;
      result += v32;
    }
    while (v33);
  }
  return result;
}

uint64_t cv::mul32s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  uint64_t v9 = *a7;
  double v10 = *a8;
  unint64_t v11 = a2 >> 2;
  unint64_t v12 = a4 >> 2;
  unint64_t v13 = a6 >> 2;
  int v14 = v8 - 1;
  if (*a8 == 1.0)
  {
    if (v8)
    {
      uint64_t v15 = 4 * v13;
      uint64_t v16 = 4 * v12;
      uint64_t v17 = 4 * v11;
      do
      {
        int v18 = v14;
        if ((int)v9 >= 4)
        {
          uint64_t v20 = 0;
          uint64_t v19 = 0;
          do
          {
            uint64_t v21 = (int32x2_t *)(a5 + v20);
            int32x2_t *v21 = vmul_s32(*(int32x2_t *)(a3 + v20), *(int32x2_t *)(result + v20));
            v21[1] = vmul_s32(*(int32x2_t *)(a3 + v20 + 8), *(int32x2_t *)(result + v20 + 8));
            v19 += 4;
            v20 += 16;
          }
          while (v19 <= v9 - 4);
          uint64_t v19 = v19;
        }
        else
        {
          uint64_t v19 = 0;
        }
        if ((int)v19 < (int)v9)
        {
          do
          {
            *(_DWORD *)(a5 + 4 * v19) = *(_DWORD *)(a3 + 4 * v19) * *(_DWORD *)(result + 4 * v19);
            ++v19;
          }
          while (v19 < v9);
        }
        int v14 = v18 - 1;
        a5 += v15;
        a3 += v16;
        result += v17;
      }
      while (v18);
    }
  }
  else if (v8)
  {
    uint64_t v22 = 4 * v13;
    uint64_t v23 = 4 * v12;
    uint64_t v24 = 4 * v11;
    do
    {
      int v25 = v14;
      if ((int)v9 >= 4)
      {
        uint64_t v27 = 0;
        uint64_t v26 = 0;
        do
        {
          uint64_t v28 = (uint64_t)rint(v10 * (double)*(int *)(result + v27 + 4) * (double)*(int *)(a3 + v27 + 4));
          int v29 = (_DWORD *)(a5 + v27);
          *int v29 = (uint64_t)rint(v10 * (double)*(int *)(result + v27) * (double)*(int *)(a3 + v27));
          v29[1] = v28;
          uint64_t v30 = (uint64_t)rint(v10 * (double)*(int *)(result + v27 + 12) * (double)*(int *)(a3 + v27 + 12));
          v29[2] = (uint64_t)rint(v10 * (double)*(int *)(result + v27 + 8) * (double)*(int *)(a3 + v27 + 8));
          v29[3] = v30;
          v26 += 4;
          v27 += 16;
        }
        while (v26 <= v9 - 4);
        uint64_t v26 = v26;
      }
      else
      {
        uint64_t v26 = 0;
      }
      if ((int)v26 < (int)v9)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v26) = (uint64_t)rint(v10* (double)*(int *)(result + 4 * v26)* (double)*(int *)(a3 + 4 * v26));
          ++v26;
        }
        while (v26 < v9);
      }
      int v14 = v25 - 1;
      a5 += v22;
      a3 += v23;
      result += v24;
    }
    while (v25);
  }
  return result;
}

uint64_t cv::mul32f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  uint64_t v9 = (int)*a7;
  uint64_t v10 = *a7;
  float v11 = *a8;
  unint64_t v12 = a2 >> 2;
  unint64_t v13 = a4 >> 2;
  unint64_t v14 = a6 >> 2;
  int v15 = v8 - 1;
  if (v11 == 1.0)
  {
    if (v8)
    {
      uint64_t v16 = 4 * v14;
      uint64_t v17 = 4 * v13;
      uint64_t v18 = 4 * v12;
      do
      {
        int v19 = v15;
        if ((int)v9 >= 4)
        {
          uint64_t v21 = 0;
          uint64_t v20 = 0;
          do
          {
            uint64_t v22 = (float32x2_t *)(a5 + v21);
            *uint64_t v22 = vmul_f32(*(float32x2_t *)(result + v21), *(float32x2_t *)(a3 + v21));
            v22[1] = vmul_f32(*(float32x2_t *)(result + v21 + 8), *(float32x2_t *)(a3 + v21 + 8));
            v20 += 4;
            v21 += 16;
          }
          while (v20 <= v9 - 4);
          uint64_t v20 = v20;
        }
        else
        {
          uint64_t v20 = 0;
        }
        if ((int)v20 < (int)v10)
        {
          do
          {
            *(float *)(a5 + 4 * v20) = *(float *)(result + 4 * v20) * *(float *)(a3 + 4 * v20);
            ++v20;
          }
          while (v10 != v20);
        }
        int v15 = v19 - 1;
        a5 += v16;
        a3 += v17;
        result += v18;
      }
      while (v19);
    }
  }
  else if (v8)
  {
    uint64_t v23 = 4 * v14;
    uint64_t v24 = 4 * v13;
    uint64_t v25 = 4 * v12;
    do
    {
      int v26 = v15;
      if ((int)v9 >= 4)
      {
        uint64_t v28 = 0;
        uint64_t v27 = 0;
        do
        {
          int v29 = (float32x2_t *)(a5 + v28);
          *int v29 = vmul_f32(vmul_n_f32(*(float32x2_t *)(result + v28), v11), *(float32x2_t *)(a3 + v28));
          v29[1] = vmul_f32(vmul_n_f32(*(float32x2_t *)(result + v28 + 8), v11), *(float32x2_t *)(a3 + v28 + 8));
          v27 += 4;
          v28 += 16;
        }
        while (v27 <= v9 - 4);
        uint64_t v27 = v27;
      }
      else
      {
        uint64_t v27 = 0;
      }
      if ((int)v27 < (int)v10)
      {
        do
        {
          *(float *)(a5 + 4 * v27) = (float)(*(float *)(result + 4 * v27) * v11) * *(float *)(a3 + 4 * v27);
          ++v27;
        }
        while (v10 != v27);
      }
      int v15 = v26 - 1;
      a5 += v23;
      a3 += v24;
      result += v25;
    }
    while (v26);
  }
  return result;
}

uint64_t cv::mul64f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  uint64_t v9 = (int)*a7;
  uint64_t v10 = *a7;
  double v11 = *a8;
  unint64_t v12 = a2 >> 3;
  unint64_t v13 = a4 >> 3;
  unint64_t v14 = a6 >> 3;
  int v15 = v8 - 1;
  if (*a8 == 1.0)
  {
    if (v8)
    {
      uint64_t v16 = 8 * v14;
      uint64_t v17 = 8 * v13;
      uint64_t v18 = 8 * v12;
      do
      {
        int v19 = v15;
        if ((int)v9 >= 4)
        {
          uint64_t v21 = 0;
          uint64_t v20 = 0;
          do
          {
            uint64_t v22 = (float64x2_t *)(a5 + v21);
            *uint64_t v22 = vmulq_f64(*(float64x2_t *)(result + v21), *(float64x2_t *)(a3 + v21));
            v22[1] = vmulq_f64(*(float64x2_t *)(result + v21 + 16), *(float64x2_t *)(a3 + v21 + 16));
            v20 += 4;
            v21 += 32;
          }
          while (v20 <= v9 - 4);
          uint64_t v20 = v20;
        }
        else
        {
          uint64_t v20 = 0;
        }
        if ((int)v20 < (int)v10)
        {
          do
          {
            *(double *)(a5 + 8 * v20) = *(double *)(result + 8 * v20) * *(double *)(a3 + 8 * v20);
            ++v20;
          }
          while (v10 != v20);
        }
        int v15 = v19 - 1;
        a5 += v16;
        a3 += v17;
        result += v18;
      }
      while (v19);
    }
  }
  else if (v8)
  {
    uint64_t v23 = 8 * v14;
    uint64_t v24 = 8 * v13;
    uint64_t v25 = 8 * v12;
    do
    {
      int v26 = v15;
      if ((int)v9 >= 4)
      {
        uint64_t v28 = 0;
        uint64_t v27 = 0;
        do
        {
          int v29 = (float64x2_t *)(a5 + v28);
          *int v29 = vmulq_f64(vmulq_n_f64(*(float64x2_t *)(result + v28), v11), *(float64x2_t *)(a3 + v28));
          v29[1] = vmulq_f64(vmulq_n_f64(*(float64x2_t *)(result + v28 + 16), v11), *(float64x2_t *)(a3 + v28 + 16));
          v27 += 4;
          v28 += 32;
        }
        while (v27 <= v9 - 4);
        uint64_t v27 = v27;
      }
      else
      {
        uint64_t v27 = 0;
      }
      if ((int)v27 < (int)v10)
      {
        do
        {
          *(double *)(a5 + 8 * v27) = v11 * *(double *)(result + 8 * v27) * *(double *)(a3 + 8 * v27);
          ++v27;
        }
        while (v10 != v27);
      }
      int v15 = v26 - 1;
      a5 += v23;
      a3 += v24;
      result += v25;
    }
    while (v26);
  }
  return result;
}

uint64_t cv::div8u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8, double a9, double a10)
{
  uint64_t v10 = a5;
  int v11 = *a7;
  if (!result)
  {
    int v41 = a7[1];
    v42[0] = *a7;
    v42[1] = v41;
    return cv::recip_<unsigned char>(a3, a4, a5, a6, v42, *a8);
  }
  int v12 = a7[1];
  if (!v12) {
    return result;
  }
  double v13 = *a8;
  do
  {
    if (v11 < 4)
    {
      uint64_t v14 = 0;
      goto LABEL_38;
    }
    uint64_t v15 = 0;
    uint64_t v16 = 3;
    do
    {
      uint64_t v17 = v16;
      uint64_t v18 = a3 + v16;
      int v19 = *(unsigned __int8 *)(a3 + v16 - 3);
      unsigned int v20 = *(unsigned __int8 *)(v18 - 2);
      if (v19)
      {
        if (*(unsigned char *)(v18 - 2))
        {
          unsigned int v21 = *(unsigned __int8 *)(a3 + v17 - 1);
          if (*(unsigned char *)(a3 + v17 - 1))
          {
            unsigned int v22 = *(unsigned __int8 *)(a3 + v17);
            if (*(unsigned char *)(a3 + v17))
            {
              uint64_t v23 = v15 | 2;
              double v24 = (double)v19;
              uint64_t v25 = v15 | 3;
              double v26 = (double)v19 * (double)v20;
              double v27 = (double)v21;
              double v28 = (double)v22;
              double v29 = (double)v21 * (double)v22;
              *(double *)&unint64_t v30 = v13 / (v26 * v29);
              double v31 = v29 * *(double *)&v30;
              double v32 = v26 * *(double *)&v30;
              int v33 = (unsigned char *)(result + v17);
              LOBYTE(v30) = *(unsigned char *)(result + v17 - 3);
              *(double *)&unint64_t v34 = rint(v31 * (double)v30 * (double)v20);
              int v19 = (uint64_t)*(double *)&v34 & ~((int)(uint64_t)*(double *)&v34 >> 31);
              LOBYTE(v34) = *(unsigned char *)(result + v17 - 2);
              double v35 = rint(v31 * (double)v34 * v24);
              if (v19 >= 255) {
                LOBYTE(v19) = -1;
              }
              unsigned int v20 = (uint64_t)v35 & ~((int)(uint64_t)v35 >> 31);
              if ((int)v20 >= 255) {
                LOBYTE(v20) = -1;
              }
              LOBYTE(v35) = *(v33 - 1);
              double v36 = rint(v32 * (double)*(unint64_t *)&v35 * v28);
              int v37 = (uint64_t)v36 & ~((int)(uint64_t)v36 >> 31);
              if (v37 >= 255) {
                LOBYTE(v37) = -1;
              }
              LOBYTE(v36) = *v33;
              a10 = rint(v32 * (double)*(unint64_t *)&v36 * v27);
              int v38 = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
              if (v38 >= 255) {
                LOBYTE(v3_Block_object_dispose(&a9, 8) = -1;
              }
              goto LABEL_36;
            }
          }
        }
        LOBYTE(a10) = *(unsigned char *)(result + v17 - 3);
        a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)v19);
        int v19 = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
        if (v19 >= 255) {
          LOBYTE(v19) = -1;
        }
      }
      if (*(unsigned char *)(v18 - 2))
      {
        LOBYTE(a10) = *(unsigned char *)(result + v17 - 2);
        a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)v20);
        if ((int)((uint64_t)a10 & ~((int)(uint64_t)a10 >> 31)) >= 255) {
          LOBYTE(v20) = -1;
        }
        else {
          LOBYTE(v20) = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
        }
      }
      if (*(unsigned char *)(a3 + v17 - 1))
      {
        LOBYTE(a10) = *(unsigned char *)(result + v17 - 1);
        a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)*(unsigned __int8 *)(a3 + v17 - 1));
        if ((int)((uint64_t)a10 & ~((int)(uint64_t)a10 >> 31)) >= 255) {
          LOBYTE(v37) = -1;
        }
        else {
          LOBYTE(v37) = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
        }
      }
      else
      {
        LOBYTE(v37) = 0;
      }
      uint64_t v23 = v17 - 1;
      if (*(unsigned char *)(a3 + v17))
      {
        LOBYTE(a10) = *(unsigned char *)(result + v17);
        a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)*(unsigned __int8 *)(a3 + v17));
        if ((int)((uint64_t)a10 & ~((int)(uint64_t)a10 >> 31)) >= 255) {
          LOBYTE(v3_Block_object_dispose(&a9, 8) = -1;
        }
        else {
          LOBYTE(v3_Block_object_dispose(&a9, 8) = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
        }
      }
      else
      {
        LOBYTE(v3_Block_object_dispose(&a9, 8) = 0;
      }
      uint64_t v25 = v17;
LABEL_36:
      uint64_t v39 = v10 + v17;
      *(unsigned char *)(v39 - 3) = v19;
      *(unsigned char *)(v39 - 2) = v20;
      *(unsigned char *)(v10 + v23) = v37;
      *(unsigned char *)(v10 + v25) = v38;
      v15 += 4;
      uint64_t v16 = v17 + 4;
    }
    while (v17 + 1 <= v11 - 4);
    uint64_t v14 = (v17 + 1);
LABEL_38:
    if ((int)v14 < v11)
    {
      do
      {
        int v40 = *(unsigned __int8 *)(a3 + v14);
        if (*(unsigned char *)(a3 + v14))
        {
          LOBYTE(a10) = *(unsigned char *)(result + v14);
          a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)v40);
          int v40 = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
          if (v40 >= 255) {
            LOBYTE(v40) = -1;
          }
        }
        *(unsigned char *)(v10 + v14++) = v40;
      }
      while (v14 < v11);
    }
    result += a2;
    a3 += a4;
    v10 += a6;
    --v12;
  }
  while (v12);
  return result;
}

uint64_t cv::div8s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (!v8) {
    return result;
  }
  uint64_t v9 = *a7;
  double v10 = *a8;
  do
  {
    if ((int)v9 < 4)
    {
      uint64_t v11 = 0;
      goto LABEL_53;
    }
    uint64_t v12 = 0;
    uint64_t v13 = 3;
    do
    {
      uint64_t v14 = v13;
      uint64_t v15 = a3 + v13;
      LODWORD(v13) = *(unsigned __int8 *)(a3 + v13 - 3);
      LOBYTE(v16) = *(unsigned char *)(v15 - 2);
      if (v13)
      {
        if (*(unsigned char *)(v15 - 2) && *(unsigned char *)(a3 + v14 - 1) && *(unsigned char *)(a3 + v14))
        {
          uint64_t v17 = v12 | 2;
          uint64_t v18 = v12 | 3;
          double v19 = (double)(char)v13;
          double v20 = (double)(char)v16;
          double v21 = (double)*(char *)(a3 + v14 - 1);
          double v22 = (double)*(char *)(a3 + v14);
          double v23 = v10 / (v19 * v20 * (v21 * v22));
          double v24 = v21 * v22 * v23;
          double v25 = v19 * v20 * v23;
          double v26 = (char *)(result + v14);
          uint64_t v13 = (uint64_t)rint(v24 * (double)*(char *)(result + v14 - 3) * v20);
          if ((int)v13 <= -128) {
            LODWORD(v13) = -128;
          }
          if ((int)v13 >= 127) {
            LOBYTE(v13) = 127;
          }
          uint64_t v16 = (uint64_t)rint(v24 * (double)*(v26 - 2) * v19);
          if ((int)v16 <= -128) {
            LODWORD(v16) = -128;
          }
          if ((int)v16 >= 127) {
            LOBYTE(v16) = 127;
          }
          uint64_t v27 = (uint64_t)rint(v25 * (double)*(v26 - 1) * v22);
          if ((int)v27 <= -128) {
            LODWORD(v27) = -128;
          }
          if ((int)v27 >= 127) {
            LOBYTE(v27) = 127;
          }
          uint64_t v28 = (uint64_t)rint(v25 * (double)*v26 * v21);
          if ((int)v28 <= -128) {
            LODWORD(v2_Block_object_dispose(&a9, 8) = -128;
          }
          if ((int)v28 >= 127) {
            LOBYTE(v2_Block_object_dispose(&a9, 8) = 127;
          }
          goto LABEL_51;
        }
        uint64_t v13 = (uint64_t)rint(v10 * (double)*(char *)(result + v14 - 3) / (double)(char)v13);
        if ((int)v13 <= -128) {
          LODWORD(v13) = -128;
        }
        if ((int)v13 >= 127) {
          LOBYTE(v13) = 127;
        }
      }
      if (*(unsigned char *)(v15 - 2))
      {
        uint64_t v29 = (uint64_t)rint(v10 * (double)*(char *)(result + v14 - 2) / (double)(char)v16);
        if ((int)v29 <= -128) {
          LODWORD(v29) = -128;
        }
        if ((int)v29 >= 127) {
          LOBYTE(v16) = 127;
        }
        else {
          LOBYTE(v16) = v29;
        }
      }
      if (*(unsigned char *)(a3 + v14 - 1))
      {
        uint64_t v30 = (uint64_t)rint(v10 * (double)*(char *)(result + v14 - 1) / (double)*(char *)(a3 + v14 - 1));
        if ((int)v30 <= -128) {
          LODWORD(v30) = -128;
        }
        if ((int)v30 >= 127) {
          LOBYTE(v27) = 127;
        }
        else {
          LOBYTE(v27) = v30;
        }
      }
      else
      {
        LOBYTE(v27) = 0;
      }
      uint64_t v17 = v14 - 1;
      if (*(unsigned char *)(a3 + v14))
      {
        uint64_t v31 = (uint64_t)rint(v10 * (double)*(char *)(result + v14) / (double)*(char *)(a3 + v14));
        if ((int)v31 <= -128) {
          LODWORD(v31) = -128;
        }
        if ((int)v31 >= 127) {
          LOBYTE(v2_Block_object_dispose(&a9, 8) = 127;
        }
        else {
          LOBYTE(v2_Block_object_dispose(&a9, 8) = v31;
        }
      }
      else
      {
        LOBYTE(v2_Block_object_dispose(&a9, 8) = 0;
      }
      uint64_t v18 = v14;
LABEL_51:
      uint64_t v32 = a5 + v14;
      *(unsigned char *)(v32 - 3) = v13;
      *(unsigned char *)(v32 - 2) = v16;
      *(unsigned char *)(a5 + v17) = v27;
      *(unsigned char *)(a5 + v1_Block_object_dispose(&a9, 8) = v28;
      v12 += 4;
      uint64_t v13 = v14 + 4;
    }
    while (v14 + 1 <= v9 - 4);
    uint64_t v11 = (v14 + 1);
LABEL_53:
    if ((int)v11 < (int)v9)
    {
      do
      {
        LOBYTE(v33) = *(unsigned char *)(a3 + v11);
        if ((_BYTE)v33)
        {
          uint64_t v33 = (uint64_t)rint(v10 * (double)*(char *)(result + v11) / (double)(char)v33);
          if ((int)v33 <= -128) {
            LODWORD(v33) = -128;
          }
          if ((int)v33 >= 127) {
            LOBYTE(v33) = 127;
          }
        }
        *(unsigned char *)(a5 + v11++) = v33;
      }
      while (v11 < v9);
    }
    result += a2;
    a3 += a4;
    a5 += a6;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t cv::div16u(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8, double a9, double a10)
{
  int v10 = a7[1];
  if (!v10) {
    return result;
  }
  uint64_t v11 = (int)*a7;
  uint64_t v12 = *a7;
  double v13 = *a8;
  uint64_t v14 = 2 * (a6 >> 1);
  uint64_t v15 = 2 * (a4 >> 1);
  uint64_t v16 = 2 * (a2 >> 1);
  do
  {
    if ((int)v11 < 4)
    {
      uint64_t v17 = 0;
      goto LABEL_34;
    }
    uint64_t v18 = 0;
    uint64_t v17 = 0;
    do
    {
      int v19 = *(unsigned __int16 *)(a3 + v18);
      unsigned int v20 = *(unsigned __int16 *)(a3 + v18 + 2);
      if (*(_WORD *)(a3 + v18))
      {
        if (*(_WORD *)(a3 + v18 + 2))
        {
          uint64_t v21 = a3 + v18;
          unsigned int v22 = *(unsigned __int16 *)(a3 + v18 + 4);
          if (*(_WORD *)(a3 + v18 + 4))
          {
            unsigned int v23 = *(unsigned __int16 *)(v21 + 6);
            if (*(_WORD *)(v21 + 6))
            {
              uint64_t v24 = v17 | 2;
              double v25 = (double)v19;
              uint64_t v26 = v17 | 3;
              double v27 = (double)v19 * (double)v20;
              double v28 = (double)v22;
              double v29 = (double)v23;
              double v30 = (double)v22 * (double)v23;
              *(double *)&unint64_t v31 = v13 / (v27 * v30);
              double v32 = v30 * *(double *)&v31;
              double v33 = v27 * *(double *)&v31;
              uint64_t v34 = result + v18;
              LOWORD(v31) = *(_WORD *)(result + v18);
              *(double *)&unint64_t v35 = rint(v32 * (double)v31 * (double)v20);
              int v19 = (uint64_t)*(double *)&v35 & ~((int)(uint64_t)*(double *)&v35 >> 31);
              LOWORD(v35) = *(_WORD *)(result + v18 + 2);
              double v36 = rint(v32 * (double)v35 * v25);
              if (v19 >= 0xFFFF) {
                LOWORD(v19) = -1;
              }
              unsigned int v20 = (uint64_t)v36 & ~((int)(uint64_t)v36 >> 31);
              if ((int)v20 >= 0xFFFF) {
                LOWORD(v20) = -1;
              }
              LOWORD(v36) = *(_WORD *)(v34 + 4);
              double v37 = rint(v33 * (double)*(unint64_t *)&v36 * v29);
              int v38 = (uint64_t)v37 & ~((int)(uint64_t)v37 >> 31);
              if (v38 >= 0xFFFF) {
                LOWORD(v3_Block_object_dispose(&a9, 8) = -1;
              }
              LOWORD(v37) = *(_WORD *)(v34 + 6);
              double v39 = v33 * (double)*(unint64_t *)&v37 * v28;
              goto LABEL_30;
            }
          }
        }
        LOWORD(a10) = *(_WORD *)(result + v18);
        a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)v19);
        int v19 = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
        if (v19 >= 0xFFFF) {
          LOWORD(v19) = -1;
        }
      }
      if (*(_WORD *)(a3 + v18 + 2))
      {
        LOWORD(a10) = *(_WORD *)(result + v18 + 2);
        a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)v20);
        if ((int)((uint64_t)a10 & ~((int)(uint64_t)a10 >> 31)) >= 0xFFFF) {
          LOWORD(v20) = -1;
        }
        else {
          LOWORD(v20) = (uint64_t)a10 & ~(unsigned __int16)((int)(uint64_t)a10 >> 31);
        }
      }
      if (*(_WORD *)(a3 + v18 + 4))
      {
        LOWORD(a10) = *(_WORD *)(result + v18 + 4);
        a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)*(unsigned __int16 *)(a3 + v18 + 4));
        if ((int)((uint64_t)a10 & ~((int)(uint64_t)a10 >> 31)) >= 0xFFFF) {
          LOWORD(v3_Block_object_dispose(&a9, 8) = -1;
        }
        else {
          LOWORD(v3_Block_object_dispose(&a9, 8) = (uint64_t)a10 & ~(unsigned __int16)((int)(uint64_t)a10 >> 31);
        }
      }
      else
      {
        LOWORD(v3_Block_object_dispose(&a9, 8) = 0;
      }
      uint64_t v24 = v17 + 2;
      uint64_t v26 = v17 + 3;
      int v40 = *(unsigned __int16 *)(a3 + v18 + 6);
      if (*(_WORD *)(a3 + v18 + 6))
      {
        LOWORD(a10) = *(_WORD *)(result + v18 + 6);
        double v39 = v13 * (double)*(unint64_t *)&a10 / (double)v40;
LABEL_30:
        a10 = rint(v39);
        int v40 = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
        if (v40 >= 0xFFFF) {
          LOWORD(v40) = -1;
        }
      }
      int v41 = (_WORD *)(a5 + v18);
      *int v41 = v19;
      v41[1] = v20;
      *(_WORD *)(a5 + 2 * v24) = v38;
      *(_WORD *)(a5 + 2 * v26) = v40;
      v17 += 4;
      v18 += 8;
    }
    while (v17 <= v11 - 4);
    uint64_t v17 = v17;
LABEL_34:
    if ((int)v17 < (int)v12)
    {
      do
      {
        int v42 = *(unsigned __int16 *)(a3 + 2 * v17);
        if (*(_WORD *)(a3 + 2 * v17))
        {
          LOWORD(a10) = *(_WORD *)(result + 2 * v17);
          a10 = rint(v13 * (double)*(unint64_t *)&a10 / (double)v42);
          int v42 = (uint64_t)a10 & ~((int)(uint64_t)a10 >> 31);
          if (v42 >= 0xFFFF) {
            LOWORD(v42) = -1;
          }
        }
        *(_WORD *)(a5 + 2 * v17++) = v42;
      }
      while (v12 != v17);
    }
    a5 += v14;
    a3 += v15;
    result += v16;
    --v10;
  }
  while (v10);
  return result;
}

uint64_t cv::div16s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (!v8) {
    return result;
  }
  uint64_t v9 = (int)*a7;
  uint64_t v10 = *a7;
  uint64_t v11 = 2 * (a6 >> 1);
  double v12 = *a8;
  uint64_t v13 = 2 * (a4 >> 1);
  uint64_t v14 = 2 * (a2 >> 1);
  do
  {
    if ((int)v9 < 4)
    {
      uint64_t v15 = 0;
      goto LABEL_48;
    }
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    do
    {
      LOWORD(v17) = *(_WORD *)(a3 + v16);
      LOWORD(v1_Block_object_dispose(&a9, 8) = *(_WORD *)(a3 + v16 + 2);
      if ((_WORD)v17)
      {
        if (*(_WORD *)(a3 + v16 + 2))
        {
          if (*(_WORD *)(a3 + v16 + 4))
          {
            __int16 v19 = *(_WORD *)(a3 + v16 + 6);
            if (v19)
            {
              uint64_t v20 = v15 | 2;
              uint64_t v21 = v15 | 3;
              double v22 = (double)(__int16)v17;
              double v23 = (double)(__int16)v18;
              double v24 = (double)*(__int16 *)(a3 + v16 + 4);
              double v25 = (double)v19;
              double v26 = v12 / (v22 * v23 * (v24 * v25));
              double v27 = v24 * v25 * v26;
              double v28 = v22 * v23 * v26;
              double v29 = (__int16 *)(result + v16);
              uint64_t v17 = (uint64_t)rint(v27 * (double)*(__int16 *)(result + v16) * v23);
              if ((int)v17 <= -32768) {
                LODWORD(v17) = -32768;
              }
              if ((int)v17 >= 0x7FFF) {
                LOWORD(v17) = 0x7FFF;
              }
              uint64_t v18 = (uint64_t)rint(v27 * (double)v29[1] * v22);
              if ((int)v18 <= -32768) {
                LODWORD(v1_Block_object_dispose(&a9, 8) = -32768;
              }
              if ((int)v18 >= 0x7FFF) {
                LOWORD(v1_Block_object_dispose(&a9, 8) = 0x7FFF;
              }
              uint64_t v30 = (uint64_t)rint(v28 * (double)v29[2] * v25);
              if ((int)v30 <= -32768) {
                LODWORD(v30) = -32768;
              }
              if ((int)v30 >= 0x7FFF) {
                LOWORD(v30) = 0x7FFF;
              }
              double v31 = v28 * (double)v29[3] * v24;
              goto LABEL_42;
            }
          }
        }
        uint64_t v17 = (uint64_t)rint(v12 * (double)*(__int16 *)(result + v16) / (double)(__int16)v17);
        if ((int)v17 <= -32768) {
          LODWORD(v17) = -32768;
        }
        if ((int)v17 >= 0x7FFF) {
          LOWORD(v17) = 0x7FFF;
        }
      }
      if (*(_WORD *)(a3 + v16 + 2))
      {
        uint64_t v32 = (uint64_t)rint(v12 * (double)*(__int16 *)(result + v16 + 2) / (double)(__int16)v18);
        if ((int)v32 <= -32768) {
          LODWORD(v32) = -32768;
        }
        if ((int)v32 >= 0x7FFF) {
          LOWORD(v1_Block_object_dispose(&a9, 8) = 0x7FFF;
        }
        else {
          LOWORD(v1_Block_object_dispose(&a9, 8) = v32;
        }
      }
      if (*(_WORD *)(a3 + v16 + 4))
      {
        uint64_t v33 = (uint64_t)rint(v12 * (double)*(__int16 *)(result + v16 + 4) / (double)*(__int16 *)(a3 + v16 + 4));
        if ((int)v33 <= -32768) {
          LODWORD(v33) = -32768;
        }
        if ((int)v33 >= 0x7FFF) {
          LOWORD(v30) = 0x7FFF;
        }
        else {
          LOWORD(v30) = v33;
        }
      }
      else
      {
        LOWORD(v30) = 0;
      }
      uint64_t v20 = v15 + 2;
      uint64_t v21 = v15 + 3;
      LOWORD(v34) = *(_WORD *)(a3 + v16 + 6);
      if ((_WORD)v34)
      {
        double v31 = v12 * (double)*(__int16 *)(result + v16 + 6) / (double)(__int16)v34;
LABEL_42:
        uint64_t v34 = (uint64_t)rint(v31);
        if ((int)v34 <= -32768) {
          LODWORD(v34) = -32768;
        }
        if ((int)v34 >= 0x7FFF) {
          LOWORD(v34) = 0x7FFF;
        }
      }
      unint64_t v35 = (_WORD *)(a5 + v16);
      _WORD *v35 = v17;
      v35[1] = v18;
      *(_WORD *)(a5 + 2 * v20) = v30;
      *(_WORD *)(a5 + 2 * v21) = v34;
      v15 += 4;
      v16 += 8;
    }
    while (v15 <= v9 - 4);
    uint64_t v15 = v15;
LABEL_48:
    if ((int)v15 < (int)v10)
    {
      do
      {
        LOWORD(v36) = *(_WORD *)(a3 + 2 * v15);
        if ((_WORD)v36)
        {
          uint64_t v36 = (uint64_t)rint(v12 * (double)*(__int16 *)(result + 2 * v15) / (double)(__int16)v36);
          if ((int)v36 <= -32768) {
            LODWORD(v36) = -32768;
          }
          if ((int)v36 >= 0x7FFF) {
            LOWORD(v36) = 0x7FFF;
          }
        }
        *(_WORD *)(a5 + 2 * v15++) = v36;
      }
      while (v10 != v15);
    }
    a5 += v11;
    a3 += v13;
    result += v14;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t cv::div32s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (!v8) {
    return result;
  }
  uint64_t v9 = *a7;
  double v10 = *a8;
  uint64_t v11 = 4 * (a6 >> 2);
  uint64_t v12 = 4 * (a4 >> 2);
  uint64_t v13 = 4 * (a2 >> 2);
  do
  {
    if ((int)v9 < 4)
    {
      uint64_t v14 = 0;
      goto LABEL_21;
    }
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    do
    {
      LODWORD(v16) = *(_DWORD *)(a3 + v15);
      LODWORD(v17) = *(_DWORD *)(a3 + v15 + 4);
      if (v16)
      {
        if (v17)
        {
          int v18 = *(_DWORD *)(a3 + v15 + 8);
          if (v18)
          {
            int v19 = *(_DWORD *)(a3 + v15 + 12);
            if (v19)
            {
              double v20 = (double)v18;
              double v21 = (double)v19;
              double v22 = (double)(int)v16 * (double)(int)v17;
              double v23 = (double)v18 * (double)v19;
              double v24 = v10 / (v22 * v23);
              double v25 = v23 * v24;
              uint64_t v26 = v14 | 2;
              uint64_t v27 = (uint64_t)rint(v25 * (double)*(int *)(result + v15) * (double)(int)v17);
              uint64_t v28 = v14 | 3;
              uint64_t v17 = (uint64_t)rint(v25 * (double)*(int *)(result + v15 + 4) * (double)(int)v16);
              uint64_t v29 = (uint64_t)rint(v22 * v24 * (double)*(int *)(result + v15 + 8) * v21);
              uint64_t v30 = (uint64_t)rint(v22 * v24 * (double)*(int *)(result + v15 + 12) * v20);
              LODWORD(v16) = v27;
              goto LABEL_19;
            }
          }
        }
        uint64_t v16 = (uint64_t)rint(v10 * (double)*(int *)(result + v15) / (double)(int)v16);
      }
      if (v17) {
        uint64_t v17 = (uint64_t)rint(v10 * (double)*(int *)(result + v15 + 4) / (double)(int)v17);
      }
      int v31 = *(_DWORD *)(a3 + v15 + 8);
      if (v31) {
        uint64_t v29 = (uint64_t)rint(v10 * (double)*(int *)(result + v15 + 8) / (double)v31);
      }
      else {
        LODWORD(v29) = 0;
      }
      uint64_t v26 = v14 + 2;
      uint64_t v28 = v14 + 3;
      LODWORD(v30) = *(_DWORD *)(a3 + v15 + 12);
      if (v30) {
        uint64_t v30 = (uint64_t)rint(v10 * (double)*(int *)(result + v15 + 12) / (double)(int)v30);
      }
LABEL_19:
      uint64_t v32 = (_DWORD *)(a5 + v15);
      *uint64_t v32 = v16;
      v32[1] = v17;
      *(_DWORD *)(a5 + 4 * v26) = v29;
      *(_DWORD *)(a5 + 4 * v2_Block_object_dispose(&a9, 8) = v30;
      v14 += 4;
      v15 += 16;
    }
    while (v14 <= v9 - 4);
    uint64_t v14 = v14;
LABEL_21:
    if ((int)v14 < (int)v9)
    {
      do
      {
        LODWORD(v33) = *(_DWORD *)(a3 + 4 * v14);
        if (v33) {
          uint64_t v33 = (uint64_t)rint(v10 * (double)*(int *)(result + 4 * v14) / (double)(int)v33);
        }
        *(_DWORD *)(a5 + 4 * v14++) = v33;
      }
      while (v14 < v9);
    }
    a5 += v11;
    a3 += v12;
    result += v13;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t cv::div32f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (!v8) {
    return result;
  }
  uint64_t v9 = (int)*a7;
  uint64_t v10 = *a7;
  double v11 = *a8;
  uint64_t v12 = 4 * (a2 >> 2);
  uint64_t v13 = 4 * (a4 >> 2);
  do
  {
    if ((int)v9 < 4)
    {
      uint64_t v14 = 0;
      goto LABEL_21;
    }
    uint64_t v14 = 0;
    uint64_t v15 = 8;
    do
    {
      float v17 = *(float *)(a3 + v15 - 8);
      float v16 = *(float *)(a3 + v15 - 4);
      float v18 = 0.0;
      float v19 = 0.0;
      if (v17 != 0.0)
      {
        if (v16 != 0.0)
        {
          float v20 = *(float *)(a3 + v15);
          if (v20 != 0.0)
          {
            float v21 = *(float *)(a3 + v15 + 4);
            if (v21 != 0.0)
            {
              double v22 = v17;
              double v23 = v16;
              double v24 = v17 * v23;
              double v25 = v20;
              double v26 = v21;
              double v27 = v20 * v26;
              double v28 = v11 / (v24 * v27);
              double v29 = v27 * v28;
              double v30 = v24 * v28;
              uint64_t v31 = v14 + 2;
              uint64_t v32 = v14 + 3;
              float v19 = v27 * v28 * *(float *)(result + v15 - 8) * v23;
              float v18 = v29 * *(float *)(result + v15 - 4) * v22;
              float v33 = v30 * *(float *)(result + v15) * v26;
              double v34 = v30 * *(float *)(result + v15 + 4) * v25;
LABEL_18:
              float v36 = v34;
              goto LABEL_19;
            }
          }
        }
        float v19 = v11 * *(float *)(result + v15 - 8) / v17;
      }
      if (v16 != 0.0) {
        float v18 = v11 * *(float *)(result + v15 - 4) / v16;
      }
      float v35 = *(float *)(a3 + v15);
      float v36 = 0.0;
      float v33 = 0.0;
      if (v35 != 0.0) {
        float v33 = v11 * *(float *)(result + v15) / v35;
      }
      uint64_t v31 = v14 | 2;
      uint64_t v32 = v14 | 3;
      float v37 = *(float *)(a3 + v15 + 4);
      if (v37 != 0.0)
      {
        double v34 = v11 * *(float *)(result + v15 + 4) / v37;
        goto LABEL_18;
      }
LABEL_19:
      uint64_t v38 = a5 + v15;
      *(float *)(v38 - _Block_object_dispose(&a9, 8) = v19;
      *(float *)(v38 - 4) = v18;
      *(float *)(a5 + 4 * v31) = v33;
      *(float *)(a5 + 4 * v32) = v36;
      v14 += 4;
      v15 += 16;
    }
    while (v14 <= v9 - 4);
    uint64_t v14 = v14;
LABEL_21:
    if ((int)v14 < (int)v10)
    {
      do
      {
        float v39 = *(float *)(a3 + 4 * v14);
        if (v39 == 0.0) {
          float v40 = 0.0;
        }
        else {
          float v40 = v11 * *(float *)(result + 4 * v14) / v39;
        }
        *(float *)(a5 + 4 * v14++) = v40;
      }
      while (v10 != v14);
    }
    a5 += 4 * (a6 >> 2);
    result += v12;
    a3 += v13;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t cv::div64f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (!v8) {
    return result;
  }
  uint64_t v9 = (int)*a7;
  uint64_t v10 = *a7;
  double v11 = *a8;
  uint64_t v12 = 8 * (a2 >> 3);
  uint64_t v13 = 8 * (a4 >> 3);
  do
  {
    if ((int)v9 < 4)
    {
      uint64_t v14 = 0;
      goto LABEL_20;
    }
    uint64_t v14 = 0;
    uint64_t v15 = 16;
    do
    {
      double v17 = *(double *)(a3 + v15 - 16);
      double v16 = *(double *)(a3 + v15 - 8);
      double v18 = 0.0;
      double v19 = 0.0;
      if (v17 != 0.0)
      {
        if (v16 != 0.0)
        {
          double v20 = *(double *)(a3 + v15);
          if (v20 != 0.0)
          {
            double v21 = *(double *)(a3 + v15 + 8);
            if (v21 != 0.0)
            {
              double v22 = v11 / (v17 * v16 * (v20 * v21));
              double v23 = v20 * v21 * v22;
              double v24 = v17 * v16 * v22;
              double v19 = v16 * (v23 * *(double *)(result + v15 - 16));
              uint64_t v25 = v14 + 2;
              uint64_t v26 = v14 + 3;
              double v18 = v17 * (v23 * *(double *)(result + v15 - 8));
              double v27 = v21 * (v24 * *(double *)(result + v15));
              double v28 = v20 * (v24 * *(double *)(result + v15 + 8));
              goto LABEL_18;
            }
          }
        }
        double v19 = v11 * *(double *)(result + v15 - 16) / v17;
      }
      if (v16 != 0.0) {
        double v18 = v11 * *(double *)(result + v15 - 8) / v16;
      }
      double v29 = *(double *)(a3 + v15);
      double v28 = 0.0;
      double v27 = 0.0;
      if (v29 != 0.0) {
        double v27 = v11 * *(double *)(result + v15) / v29;
      }
      uint64_t v25 = v14 | 2;
      uint64_t v26 = v14 | 3;
      double v30 = *(double *)(a3 + v15 + 8);
      if (v30 != 0.0) {
        double v28 = v11 * *(double *)(result + v15 + 8) / v30;
      }
LABEL_18:
      uint64_t v31 = a5 + v15;
      *(double *)(v31 - 16) = v19;
      *(double *)(v31 - _Block_object_dispose(&a9, 8) = v18;
      *(double *)(a5 + 8 * v25) = v27;
      *(double *)(a5 + 8 * v26) = v28;
      v14 += 4;
      v15 += 32;
    }
    while (v14 <= v9 - 4);
    uint64_t v14 = v14;
LABEL_20:
    if ((int)v14 < (int)v10)
    {
      do
      {
        double v32 = *(double *)(a3 + 8 * v14);
        if (v32 == 0.0) {
          double v33 = 0.0;
        }
        else {
          double v33 = v11 * *(double *)(result + 8 * v14) / v32;
        }
        *(double *)(a5 + 8 * v14++) = v33;
      }
      while (v10 != v14);
    }
    a5 += 8 * (a6 >> 3);
    result += v12;
    a3 += v13;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t cv::recip_<unsigned char>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, double a6)
{
  int v6 = a5[1];
  a5[1] = v6 - 1;
  if (!v6) {
    return result;
  }
  LODWORD(v7) = *a5;
  do
  {
    if ((int)v7 < 4)
    {
      uint64_t v8 = 0;
      goto LABEL_33;
    }
    uint64_t v8 = 0;
    do
    {
      int v9 = *(unsigned __int8 *)(result + v8);
      if (*(unsigned char *)(result + v8))
      {
        uint64_t v10 = result + v8;
        unsigned int v11 = *(unsigned __int8 *)(result + v8 + 1);
        if (*(unsigned char *)(result + v8 + 1))
        {
          unsigned int v12 = *(unsigned __int8 *)(v10 + 2);
          if (*(unsigned char *)(v10 + 2))
          {
            unsigned int v13 = *(unsigned __int8 *)(result + v8 + 3);
            if (*(unsigned char *)(result + v8 + 3))
            {
              uint64_t v14 = v8 | 2;
              uint64_t v15 = v8 | 3;
              double v16 = (double)v9;
              double v17 = (double)v12;
              double v18 = (double)v9 * (double)v11;
              double v19 = (double)v12 * (double)v13;
              double v20 = a6 / (v18 * v19);
              double v21 = v19 * v20;
              double v22 = v18 * v20;
              double v23 = rint(v21 * (double)v11);
              int v9 = (uint64_t)v23 & ~((int)(uint64_t)v23 >> 31);
              uint64_t v24 = (uint64_t)rint(v21 * v16);
              if (v9 >= 255) {
                LOBYTE(v9) = -1;
              }
              int v25 = v24 & ~((int)v24 >> 31);
              if (v25 >= 255) {
                LOBYTE(v25) = -1;
              }
              double v26 = rint(v22 * (double)v13);
              int v27 = (uint64_t)v26 & ~((int)(uint64_t)v26 >> 31);
              if (v27 >= 255) {
                LOBYTE(v27) = -1;
              }
              double v28 = v22 * v17;
              goto LABEL_29;
            }
          }
        }
        double v29 = rint(a6 / (double)v9);
        int v9 = (uint64_t)v29 & ~((int)(uint64_t)v29 >> 31);
        if (v9 >= 255) {
          LOBYTE(v9) = -1;
        }
      }
      int v25 = *(unsigned __int8 *)(result + v8 + 1);
      if (*(unsigned char *)(result + v8 + 1))
      {
        double v30 = rint(a6 / (double)v25);
        int v25 = (uint64_t)v30 & ~((int)(uint64_t)v30 >> 31);
        if (v25 >= 255) {
          LOBYTE(v25) = -1;
        }
      }
      if (*(unsigned char *)(result + v8 + 2))
      {
        double v31 = rint(a6 / (double)*(unsigned __int8 *)(result + v8 + 2));
        if ((int)((uint64_t)v31 & ~((int)(uint64_t)v31 >> 31)) >= 255) {
          LOBYTE(v27) = -1;
        }
        else {
          LOBYTE(v27) = (uint64_t)v31 & ~((int)(uint64_t)v31 >> 31);
        }
      }
      else
      {
        LOBYTE(v27) = 0;
      }
      uint64_t v14 = v8 + 2;
      uint64_t v15 = v8 + 3;
      int v32 = *(unsigned __int8 *)(result + v8 + 3);
      if (*(unsigned char *)(result + v8 + 3))
      {
        double v28 = a6 / (double)v32;
LABEL_29:
        double v33 = rint(v28);
        int v32 = (uint64_t)v33 & ~((int)(uint64_t)v33 >> 31);
        if (v32 >= 255) {
          LOBYTE(v32) = -1;
        }
      }
      double v34 = (unsigned char *)(a3 + v8);
      *double v34 = v9;
      v34[1] = v25;
      *(unsigned char *)(a3 + v14) = v27;
      *(unsigned char *)(a3 + v15) = v32;
      v8 += 4;
      uint64_t v7 = *a5;
    }
    while (v8 <= v7 - 4);
    uint64_t v8 = v8;
LABEL_33:
    if ((int)v8 < (int)v7)
    {
      do
      {
        int v35 = *(unsigned __int8 *)(result + v8);
        if (*(unsigned char *)(result + v8))
        {
          double v36 = rint(a6 / (double)v35);
          int v35 = (uint64_t)v36 & ~((int)(uint64_t)v36 >> 31);
          if (v35 >= 255) {
            LOBYTE(v35) = -1;
          }
        }
        *(unsigned char *)(a3 + v8++) = v35;
        uint64_t v7 = *a5;
      }
      while (v8 < v7);
    }
    result += a2;
    a3 += a4;
    int v37 = a5[1];
    a5[1] = v37 - 1;
  }
  while (v37);
  return result;
}

uint64_t cv::recip8u(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, double *a8)
{
  uint64_t v9 = *a7;
  return cv::recip_<unsigned char>(a3, a4, a5, a6, (int *)&v9, *a8);
}

void cv::recip8s(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (!v8) {
    return;
  }
  uint64_t v9 = *a7;
  double v10 = *a8;
  do
  {
    if ((int)v9 < 4)
    {
      uint64_t v11 = 0;
      goto LABEL_48;
    }
    uint64_t v11 = 0;
    do
    {
      LOBYTE(v12) = *(unsigned char *)(a3 + v11);
      LOBYTE(v13) = *(unsigned char *)(a3 + v11 + 1);
      if ((_BYTE)v12)
      {
        if (*(unsigned char *)(a3 + v11 + 1))
        {
          if (*(unsigned char *)(a3 + v11 + 2))
          {
            char v14 = *(unsigned char *)(a3 + v11 + 3);
            if (v14)
            {
              uint64_t v15 = v11 | 2;
              double v16 = (double)(char)v12;
              uint64_t v17 = v11 | 3;
              double v18 = (double)(char)v13;
              double v19 = (double)*(char *)(a3 + v11 + 2);
              double v20 = (double)v14;
              double v21 = v10 / (v16 * v18 * (v19 * v20));
              double v22 = v19 * v20 * v21;
              double v23 = v16 * v18 * v21;
              uint64_t v12 = (uint64_t)rint(v22 * v18);
              if ((int)v12 <= -128) {
                LODWORD(v12) = -128;
              }
              if ((int)v12 >= 127) {
                LOBYTE(v12) = 127;
              }
              uint64_t v13 = (uint64_t)rint(v22 * v16);
              if ((int)v13 <= -128) {
                LODWORD(v13) = -128;
              }
              if ((int)v13 >= 127) {
                LOBYTE(v13) = 127;
              }
              uint64_t v24 = (uint64_t)rint(v23 * v20);
              if ((int)v24 <= -128) {
                LODWORD(v24) = -128;
              }
              if ((int)v24 >= 127) {
                LOBYTE(v24) = 127;
              }
              double v25 = v23 * v19;
              goto LABEL_42;
            }
          }
        }
        uint64_t v12 = (uint64_t)rint(v10 / (double)(char)v12);
        if ((int)v12 <= -128) {
          LODWORD(v12) = -128;
        }
        if ((int)v12 >= 127) {
          LOBYTE(v12) = 127;
        }
      }
      if (*(unsigned char *)(a3 + v11 + 1))
      {
        uint64_t v26 = (uint64_t)rint(v10 / (double)(char)v13);
        if ((int)v26 <= -128) {
          LODWORD(v26) = -128;
        }
        if ((int)v26 >= 127) {
          LOBYTE(v13) = 127;
        }
        else {
          LOBYTE(v13) = v26;
        }
      }
      if (*(unsigned char *)(a3 + v11 + 2))
      {
        uint64_t v27 = (uint64_t)rint(v10 / (double)*(char *)(a3 + v11 + 2));
        if ((int)v27 <= -128) {
          LODWORD(v27) = -128;
        }
        if ((int)v27 >= 127) {
          LOBYTE(v24) = 127;
        }
        else {
          LOBYTE(v24) = v27;
        }
      }
      else
      {
        LOBYTE(v24) = 0;
      }
      uint64_t v15 = v11 + 2;
      uint64_t v17 = v11 + 3;
      LOBYTE(v2_Block_object_dispose(&a9, 8) = *(unsigned char *)(a3 + v11 + 3);
      if ((_BYTE)v28)
      {
        double v25 = v10 / (double)(char)v28;
LABEL_42:
        uint64_t v28 = (uint64_t)rint(v25);
        if ((int)v28 <= -128) {
          LODWORD(v2_Block_object_dispose(&a9, 8) = -128;
        }
        if ((int)v28 >= 127) {
          LOBYTE(v2_Block_object_dispose(&a9, 8) = 127;
        }
      }
      double v29 = (unsigned char *)(a5 + v11);
      *double v29 = v12;
      v29[1] = v13;
      *(unsigned char *)(a5 + v15) = v24;
      *(unsigned char *)(a5 + v17) = v28;
      v11 += 4;
    }
    while (v11 <= v9 - 4);
    uint64_t v11 = v11;
LABEL_48:
    if ((int)v11 < (int)v9)
    {
      do
      {
        LOBYTE(v30) = *(unsigned char *)(a3 + v11);
        if ((_BYTE)v30)
        {
          uint64_t v30 = (uint64_t)rint(v10 / (double)(char)v30);
          if ((int)v30 <= -128) {
            LODWORD(v30) = -128;
          }
          if ((int)v30 >= 127) {
            LOBYTE(v30) = 127;
          }
        }
        *(unsigned char *)(a5 + v11++) = v30;
      }
      while (v11 < v9);
    }
    a3 += a4;
    a5 += a6;
    --v8;
  }
  while (v8);
}

void cv::recip16u(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (!v8) {
    return;
  }
  uint64_t v9 = (int)*a7;
  uint64_t v10 = *a7;
  double v11 = *a8;
  uint64_t v12 = 2 * (a6 >> 1);
  uint64_t v13 = 2 * (a4 >> 1);
  do
  {
    if ((int)v9 < 4)
    {
      uint64_t v14 = 0;
      goto LABEL_34;
    }
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    do
    {
      int v16 = *(unsigned __int16 *)(a3 + v15);
      unsigned int v17 = *(unsigned __int16 *)(a3 + v15 + 2);
      if (*(_WORD *)(a3 + v15))
      {
        if (*(_WORD *)(a3 + v15 + 2))
        {
          uint64_t v18 = a3 + v15;
          unsigned int v19 = *(unsigned __int16 *)(a3 + v15 + 4);
          if (*(_WORD *)(a3 + v15 + 4))
          {
            unsigned int v20 = *(unsigned __int16 *)(v18 + 6);
            if (*(_WORD *)(v18 + 6))
            {
              uint64_t v21 = v14 | 2;
              uint64_t v22 = v14 | 3;
              double v23 = (double)v16;
              double v24 = (double)v19;
              double v25 = (double)v16 * (double)v17;
              double v26 = (double)v19 * (double)v20;
              double v27 = v11 / (v25 * v26);
              double v28 = v26 * v27;
              double v29 = v25 * v27;
              double v30 = rint(v28 * (double)v17);
              int v16 = (uint64_t)v30 & ~((int)(uint64_t)v30 >> 31);
              uint64_t v31 = (uint64_t)rint(v28 * v23);
              if (v16 >= 0xFFFF) {
                LOWORD(v16) = -1;
              }
              unsigned int v17 = v31 & ~((int)v31 >> 31);
              if ((int)v17 >= 0xFFFF) {
                LOWORD(v17) = -1;
              }
              double v32 = rint(v29 * (double)v20);
              int v33 = (uint64_t)v32 & ~((int)(uint64_t)v32 >> 31);
              if (v33 >= 0xFFFF) {
                LOWORD(v33) = -1;
              }
              double v34 = v29 * v24;
              goto LABEL_30;
            }
          }
        }
        double v35 = rint(v11 / (double)v16);
        int v16 = (uint64_t)v35 & ~((int)(uint64_t)v35 >> 31);
        if (v16 >= 0xFFFF) {
          LOWORD(v16) = -1;
        }
      }
      if (*(_WORD *)(a3 + v15 + 2))
      {
        double v36 = rint(v11 / (double)v17);
        if ((int)((uint64_t)v36 & ~((int)(uint64_t)v36 >> 31)) >= 0xFFFF) {
          LOWORD(v17) = -1;
        }
        else {
          LOWORD(v17) = (uint64_t)v36 & ~(unsigned __int16)((int)(uint64_t)v36 >> 31);
        }
      }
      if (*(_WORD *)(a3 + v15 + 4))
      {
        double v37 = rint(v11 / (double)*(unsigned __int16 *)(a3 + v15 + 4));
        if ((int)((uint64_t)v37 & ~((int)(uint64_t)v37 >> 31)) >= 0xFFFF) {
          LOWORD(v33) = -1;
        }
        else {
          LOWORD(v33) = (uint64_t)v37 & ~(unsigned __int16)((int)(uint64_t)v37 >> 31);
        }
      }
      else
      {
        LOWORD(v33) = 0;
      }
      uint64_t v21 = v14 + 2;
      uint64_t v22 = v14 + 3;
      int v38 = *(unsigned __int16 *)(a3 + v15 + 6);
      if (*(_WORD *)(a3 + v15 + 6))
      {
        double v34 = v11 / (double)v38;
LABEL_30:
        double v39 = rint(v34);
        int v38 = (uint64_t)v39 & ~((int)(uint64_t)v39 >> 31);
        if (v38 >= 0xFFFF) {
          LOWORD(v3_Block_object_dispose(&a9, 8) = -1;
        }
      }
      float v40 = (_WORD *)(a5 + v15);
      *float v40 = v16;
      v40[1] = v17;
      *(_WORD *)(a5 + 2 * v21) = v33;
      *(_WORD *)(a5 + 2 * v22) = v38;
      v14 += 4;
      v15 += 8;
    }
    while (v14 <= v9 - 4);
    uint64_t v14 = v14;
LABEL_34:
    if ((int)v14 < (int)v10)
    {
      do
      {
        int v41 = *(unsigned __int16 *)(a3 + 2 * v14);
        if (*(_WORD *)(a3 + 2 * v14))
        {
          double v42 = rint(v11 / (double)v41);
          int v41 = (uint64_t)v42 & ~((int)(uint64_t)v42 >> 31);
          if (v41 >= 0xFFFF) {
            LOWORD(v41) = -1;
          }
        }
        *(_WORD *)(a5 + 2 * v14++) = v41;
      }
      while (v10 != v14);
    }
    a5 += v12;
    a3 += v13;
    --v8;
  }
  while (v8);
}

void cv::recip16s(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (!v8) {
    return;
  }
  uint64_t v9 = (int)*a7;
  uint64_t v10 = *a7;
  double v11 = *a8;
  uint64_t v12 = 2 * (a6 >> 1);
  uint64_t v13 = 2 * (a4 >> 1);
  do
  {
    if ((int)v9 < 4)
    {
      uint64_t v14 = 0;
      goto LABEL_48;
    }
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    do
    {
      LOWORD(v16) = *(_WORD *)(a3 + v15);
      LOWORD(v17) = *(_WORD *)(a3 + v15 + 2);
      if ((_WORD)v16)
      {
        if (*(_WORD *)(a3 + v15 + 2))
        {
          if (*(_WORD *)(a3 + v15 + 4))
          {
            __int16 v18 = *(_WORD *)(a3 + v15 + 6);
            if (v18)
            {
              uint64_t v19 = v14 | 2;
              double v20 = (double)(__int16)v16;
              uint64_t v21 = v14 | 3;
              double v22 = (double)(__int16)v17;
              double v23 = (double)*(__int16 *)(a3 + v15 + 4);
              double v24 = (double)v18;
              double v25 = v11 / (v20 * v22 * (v23 * v24));
              double v26 = v23 * v24 * v25;
              double v27 = v20 * v22 * v25;
              uint64_t v16 = (uint64_t)rint(v26 * v22);
              if ((int)v16 <= -32768) {
                LODWORD(v16) = -32768;
              }
              if ((int)v16 >= 0x7FFF) {
                LOWORD(v16) = 0x7FFF;
              }
              uint64_t v17 = (uint64_t)rint(v26 * v20);
              if ((int)v17 <= -32768) {
                LODWORD(v17) = -32768;
              }
              if ((int)v17 >= 0x7FFF) {
                LOWORD(v17) = 0x7FFF;
              }
              uint64_t v28 = (uint64_t)rint(v27 * v24);
              if ((int)v28 <= -32768) {
                LODWORD(v2_Block_object_dispose(&a9, 8) = -32768;
              }
              if ((int)v28 >= 0x7FFF) {
                LOWORD(v2_Block_object_dispose(&a9, 8) = 0x7FFF;
              }
              double v29 = v27 * v23;
              goto LABEL_42;
            }
          }
        }
        uint64_t v16 = (uint64_t)rint(v11 / (double)(__int16)v16);
        if ((int)v16 <= -32768) {
          LODWORD(v16) = -32768;
        }
        if ((int)v16 >= 0x7FFF) {
          LOWORD(v16) = 0x7FFF;
        }
      }
      if (*(_WORD *)(a3 + v15 + 2))
      {
        uint64_t v30 = (uint64_t)rint(v11 / (double)(__int16)v17);
        if ((int)v30 <= -32768) {
          LODWORD(v30) = -32768;
        }
        if ((int)v30 >= 0x7FFF) {
          LOWORD(v17) = 0x7FFF;
        }
        else {
          LOWORD(v17) = v30;
        }
      }
      if (*(_WORD *)(a3 + v15 + 4))
      {
        uint64_t v31 = (uint64_t)rint(v11 / (double)*(__int16 *)(a3 + v15 + 4));
        if ((int)v31 <= -32768) {
          LODWORD(v31) = -32768;
        }
        if ((int)v31 >= 0x7FFF) {
          LOWORD(v2_Block_object_dispose(&a9, 8) = 0x7FFF;
        }
        else {
          LOWORD(v2_Block_object_dispose(&a9, 8) = v31;
        }
      }
      else
      {
        LOWORD(v2_Block_object_dispose(&a9, 8) = 0;
      }
      uint64_t v19 = v14 + 2;
      uint64_t v21 = v14 + 3;
      LOWORD(v32) = *(_WORD *)(a3 + v15 + 6);
      if ((_WORD)v32)
      {
        double v29 = v11 / (double)(__int16)v32;
LABEL_42:
        uint64_t v32 = (uint64_t)rint(v29);
        if ((int)v32 <= -32768) {
          LODWORD(v32) = -32768;
        }
        if ((int)v32 >= 0x7FFF) {
          LOWORD(v32) = 0x7FFF;
        }
      }
      int v33 = (_WORD *)(a5 + v15);
      _WORD *v33 = v16;
      v33[1] = v17;
      *(_WORD *)(a5 + 2 * v19) = v28;
      *(_WORD *)(a5 + 2 * v21) = v32;
      v14 += 4;
      v15 += 8;
    }
    while (v14 <= v9 - 4);
    uint64_t v14 = v14;
LABEL_48:
    if ((int)v14 < (int)v10)
    {
      do
      {
        LOWORD(v34) = *(_WORD *)(a3 + 2 * v14);
        if ((_WORD)v34)
        {
          uint64_t v34 = (uint64_t)rint(v11 / (double)(__int16)v34);
          if ((int)v34 <= -32768) {
            LODWORD(v34) = -32768;
          }
          if ((int)v34 >= 0x7FFF) {
            LOWORD(v34) = 0x7FFF;
          }
        }
        *(_WORD *)(a5 + 2 * v14++) = v34;
      }
      while (v10 != v14);
    }
    a5 += v12;
    a3 += v13;
    --v8;
  }
  while (v8);
}

void cv::recip32s(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (!v8) {
    return;
  }
  uint64_t v9 = *a7;
  double v10 = *a8;
  uint64_t v11 = 4 * (a6 >> 2);
  uint64_t v12 = 4 * (a4 >> 2);
  do
  {
    if ((int)v9 < 4)
    {
      uint64_t v13 = 0;
      goto LABEL_21;
    }
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    do
    {
      LODWORD(v15) = *(_DWORD *)(a3 + v14);
      LODWORD(v16) = *(_DWORD *)(a3 + v14 + 4);
      if (v15)
      {
        if (v16)
        {
          int v17 = *(_DWORD *)(a3 + v14 + 8);
          if (v17)
          {
            int v18 = *(_DWORD *)(a3 + v14 + 12);
            if (v18)
            {
              uint64_t v19 = v13 | 2;
              double v20 = (double)(int)v15;
              double v21 = (double)v17;
              double v22 = (double)(int)v15 * (double)(int)v16;
              double v23 = (double)v17 * (double)v18;
              double v24 = v10 / (v22 * v23);
              double v25 = v23 * v24;
              double v26 = v22 * v24;
              uint64_t v15 = (uint64_t)rint(v25 * (double)(int)v16);
              uint64_t v16 = (uint64_t)rint(v25 * v20);
              uint64_t v27 = (uint64_t)rint(v26 * (double)v18);
              uint64_t v28 = v13 | 3;
              uint64_t v29 = (uint64_t)rint(v26 * v21);
              goto LABEL_19;
            }
          }
        }
        uint64_t v15 = (uint64_t)rint(v10 / (double)(int)v15);
      }
      if (v16) {
        uint64_t v16 = (uint64_t)rint(v10 / (double)(int)v16);
      }
      int v30 = *(_DWORD *)(a3 + v14 + 8);
      if (v30) {
        uint64_t v27 = (uint64_t)rint(v10 / (double)v30);
      }
      else {
        LODWORD(v27) = 0;
      }
      uint64_t v19 = v13 + 2;
      uint64_t v28 = v13 + 3;
      LODWORD(v29) = *(_DWORD *)(a3 + v14 + 12);
      if (v29) {
        uint64_t v29 = (uint64_t)rint(v10 / (double)(int)v29);
      }
LABEL_19:
      uint64_t v31 = (_DWORD *)(a5 + v14);
      *uint64_t v31 = v15;
      v31[1] = v16;
      *(_DWORD *)(a5 + 4 * v19) = v27;
      *(_DWORD *)(a5 + 4 * v2_Block_object_dispose(&a9, 8) = v29;
      v13 += 4;
      v14 += 16;
    }
    while (v13 <= v9 - 4);
    uint64_t v13 = v13;
LABEL_21:
    if ((int)v13 < (int)v9)
    {
      do
      {
        LODWORD(v32) = *(_DWORD *)(a3 + 4 * v13);
        if (v32) {
          uint64_t v32 = (uint64_t)rint(v10 / (double)(int)v32);
        }
        *(_DWORD *)(a5 + 4 * v13++) = v32;
      }
      while (v13 < v9);
    }
    a5 += v11;
    a3 += v12;
    --v8;
  }
  while (v8);
}

float *cv::recip32f(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (!v8) {
    return result;
  }
  uint64_t v9 = (int)*a7;
  uint64_t v10 = *a7;
  double v11 = *a8;
  do
  {
    if ((int)v9 < 4)
    {
      uint64_t v12 = 0;
      goto LABEL_21;
    }
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    do
    {
      float v15 = *(float *)(a3 + v13);
      float v14 = *(float *)(a3 + v13 + 4);
      float v16 = 0.0;
      float v17 = 0.0;
      if (v15 != 0.0)
      {
        if (v14 != 0.0)
        {
          float v18 = *(float *)(a3 + v13 + 8);
          if (v18 != 0.0)
          {
            float v19 = *(float *)(a3 + v13 + 12);
            if (v19 != 0.0)
            {
              uint64_t v20 = v12 + 2;
              uint64_t v21 = v12 + 3;
              double v22 = v15;
              double v23 = v14;
              double v24 = v15 * v23;
              double v25 = v18;
              double v26 = v19;
              double v27 = v18 * v26;
              double v28 = v11 / (v24 * v27);
              double v29 = v27 * v28;
              double v30 = v24 * v28;
              float v17 = v29 * v23;
              float v16 = v29 * v22;
              float v31 = v30 * v26;
              double v32 = v30 * v25;
LABEL_18:
              float v34 = v32;
              goto LABEL_19;
            }
          }
        }
        float v17 = v11 / v15;
      }
      if (v14 != 0.0) {
        float v16 = v11 / v14;
      }
      float v33 = *(float *)(a3 + v13 + 8);
      float v34 = 0.0;
      float v31 = 0.0;
      if (v33 != 0.0) {
        float v31 = v11 / v33;
      }
      uint64_t v20 = v12 | 2;
      uint64_t v21 = v12 | 3;
      float v35 = *(float *)(a3 + v13 + 12);
      if (v35 != 0.0)
      {
        double v32 = v11 / v35;
        goto LABEL_18;
      }
LABEL_19:
      uint64_t result = (float *)(a5 + v13);
      float *result = v17;
      result[1] = v16;
      *(float *)(a5 + 4 * v20) = v31;
      *(float *)(a5 + 4 * v21) = v34;
      v12 += 4;
      v13 += 16;
    }
    while (v12 <= v9 - 4);
    uint64_t v12 = v12;
LABEL_21:
    if ((int)v12 < (int)v10)
    {
      do
      {
        float v37 = *(float *)(a3 + 4 * v12);
        if (v37 == 0.0) {
          float v38 = 0.0;
        }
        else {
          float v38 = v11 / v37;
        }
        *(float *)(a5 + 4 * v12++) = v38;
      }
      while (v10 != v12);
    }
    a5 += 4 * (a6 >> 2);
    a3 += 4 * (a4 >> 2);
    --v8;
  }
  while (v8);
  return result;
}

double *cv::recip64f(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (!v8) {
    return result;
  }
  uint64_t v9 = (int)*a7;
  uint64_t v10 = *a7;
  double v11 = *a8;
  do
  {
    if ((int)v9 < 4)
    {
      uint64_t v12 = 0;
      goto LABEL_24;
    }
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v14 = a3 + v13;
      double v16 = *(double *)(a3 + v13);
      double v15 = *(double *)(a3 + v13 + 8);
      if (v16 == 0.0)
      {
        double v24 = 0.0;
      }
      else
      {
        if (v15 != 0.0)
        {
          double v17 = *(double *)(a3 + v13 + 16);
          if (v17 != 0.0)
          {
            double v18 = *(double *)(a3 + v13 + 24);
            if (v18 != 0.0)
            {
              uint64_t v19 = v12 + 2;
              uint64_t v20 = v12 + 3;
              double v21 = v11 / (v16 * v15 * (v17 * v18));
              double v22 = v17 * v18 * v21;
              double v23 = v16 * v15 * v21;
              double v24 = v15 * v22;
              double v25 = v16 * v22;
              double v26 = v18 * v23;
              double v27 = v17 * v23;
              goto LABEL_22;
            }
          }
        }
        double v24 = v11 / v16;
      }
      if (v15 == 0.0) {
        double v25 = 0.0;
      }
      else {
        double v25 = v11 / v15;
      }
      uint64_t v19 = v12 | 2;
      double v28 = *(double *)(v14 + 16);
      double v29 = *(double *)(v14 + 24);
      if (v28 == 0.0) {
        double v26 = 0.0;
      }
      else {
        double v26 = v11 / v28;
      }
      uint64_t v20 = v12 | 3;
      if (v29 == 0.0) {
        double v27 = 0.0;
      }
      else {
        double v27 = v11 / v29;
      }
LABEL_22:
      uint64_t result = (double *)(a5 + v13);
      double *result = v24;
      result[1] = v25;
      *(double *)(a5 + 8 * v19) = v26;
      *(double *)(a5 + 8 * v20) = v27;
      v12 += 4;
      v13 += 32;
    }
    while (v12 <= v9 - 4);
    uint64_t v12 = v12;
LABEL_24:
    if ((int)v12 < (int)v10)
    {
      do
      {
        double v31 = *(double *)(a3 + 8 * v12);
        if (v31 == 0.0) {
          double v32 = 0.0;
        }
        else {
          double v32 = v11 / v31;
        }
        *(double *)(a5 + 8 * v12++) = v32;
      }
      while (v10 != v12);
    }
    a5 += 8 * (a6 >> 3);
    a3 += 8 * (a4 >> 3);
    --v8;
  }
  while (v8);
  return result;
}

uint64_t cv::addWeighted8u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  double v8 = *a8;
  double v9 = a8[1];
  double v10 = a8[2];
  int v11 = a7[1];
  a7[1] = v11 - 1;
  if (v11)
  {
    float v12 = v8;
    float v13 = v9;
    float v14 = v10;
    LODWORD(v15) = *a7;
    do
    {
      if ((int)v15 >= 4)
      {
        uint64_t v16 = 0;
        do
        {
          v17.i32[0] = (uint64_t)rint((float)((float)((float)(cv::g_8x32fTab[*(unsigned __int8 *)(a3 + v16) + 128] * v13)
                                                   + (float)(cv::g_8x32fTab[*(unsigned __int8 *)(result + v16) + 128]
                                                           * v12))
                                           + v14));
          v17.i32[1] = (uint64_t)rint((float)((float)((float)(cv::g_8x32fTab[*(unsigned __int8 *)(a3 + v16 + 1) + 128]
                                                           * v13)
                                                   + (float)(cv::g_8x32fTab[*(unsigned __int8 *)(result + v16 + 1) + 128]
                                                           * v12))
                                           + v14));
          double v18 = (unsigned char *)(a5 + v16);
          int32x2_t v19 = vmin_s32(vmax_s32(v17, 0), (int32x2_t)0xFF000000FFLL);
          v18[1] = v19.i8[4];
          *double v18 = v19.i8[0];
          int32x2_t v20 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)((float)((float)(cv::g_8x32fTab[*(unsigned __int8 *)(a3 + v16 + 3)+ 128]* v13)+ (float)(cv::g_8x32fTab[*(unsigned __int8 *)(result + v16 + 3)+ 128]* v12))+ v14)), (uint64_t)rint((float)((float)((float)(cv::g_8x32fTab[*(unsigned __int8 *)(a3 + v16 + 2)+ 128]* v13)+ (float)(cv::g_8x32fTab[*(unsigned __int8 *)(result + v16 + 2)+ 128]* v12))+ v14))), 0), (int32x2_t)0xFF000000FFLL);
          v18[3] = v20.i8[4];
          _DWORD v18[2] = v20.i8[0];
          v16 += 4;
          uint64_t v15 = *a7;
        }
        while (v16 <= v15 - 4);
        uint64_t v16 = v16;
      }
      else
      {
        uint64_t v16 = 0;
      }
      if ((int)v16 < (int)v15)
      {
        do
        {
          double v21 = rint((float)((float)((float)(cv::g_8x32fTab[*(unsigned __int8 *)(a3 + v16) + 128] * v13)
                                   + (float)(cv::g_8x32fTab[*(unsigned __int8 *)(result + v16) + 128] * v12))
                           + v14));
          int v22 = (uint64_t)v21 & ~((int)(uint64_t)v21 >> 31);
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          *(unsigned char *)(a5 + v16++) = v22;
          uint64_t v15 = *a7;
        }
        while (v16 < v15);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      int v23 = a7[1];
      a7[1] = v23 - 1;
    }
    while (v23);
  }
  return result;
}

uint64_t cv::addWeighted8s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    float v10 = *a8;
    float v11 = a8[1];
    float v12 = a8[2];
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v13 = 0;
        do
        {
          int32x2_t v14 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)((float)((float)(v11 * (float)*(char *)(a3 + v13 + 1))+ (float)((float)*(char *)(result + v13 + 1) * v10))+ v12)), (uint64_t)rint((float)((float)((float)(v11 * (float)*(char *)(a3 + v13))+ (float)((float)*(char *)(result + v13) * v10))+ v12))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          uint64_t v15 = (unsigned char *)(a5 + v13);
          v15[1] = v14.i8[4];
          unsigned char *v15 = v14.i8[0];
          int32x2_t v16 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)((float)((float)(v11 * (float)*(char *)(a3 + v13 + 3))+ (float)((float)*(char *)(result + v13 + 3) * v10))+ v12)), (uint64_t)rint((float)((float)((float)(v11 * (float)*(char *)(a3 + v13 + 2))+ (float)((float)*(char *)(result + v13 + 2) * v10))+ v12))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v15[3] = v16.i8[4];
          v15[2] = v16.i8[0];
          v13 += 4;
        }
        while (v13 <= v9 - 4);
        uint64_t v13 = v13;
      }
      else
      {
        uint64_t v13 = 0;
      }
      if ((int)v13 < (int)v9)
      {
        do
        {
          uint64_t v17 = (uint64_t)rint((float)((float)((float)(v11 * (float)*(char *)(a3 + v13))
                                            + (float)((float)*(char *)(result + v13) * v10))
                                    + v12));
          if ((int)v17 <= -128) {
            LODWORD(v17) = -128;
          }
          if ((int)v17 >= 127) {
            LOBYTE(v17) = 127;
          }
          *(unsigned char *)(a5 + v13++) = v17;
        }
        while (v13 < v9);
      }
      result += a2;
      a3 += a4;
      a5 += a6;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::addWeighted16u(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8, double a9, double a10, double a11, double a12, float a13)
{
  int v13 = a7[1];
  if (v13)
  {
    uint64_t v14 = (int)*a7;
    uint64_t v15 = *a7;
    float v16 = *a8;
    float v17 = a8[1];
    uint64_t v18 = 2 * (a6 >> 1);
    float v19 = a8[2];
    uint64_t v20 = 2 * (a4 >> 1);
    uint64_t v21 = 2 * (a2 >> 1);
    do
    {
      if ((int)v14 >= 4)
      {
        uint64_t v23 = 0;
        uint64_t v22 = 0;
        do
        {
          uint64_t v24 = result + v23;
          LOWORD(a12) = *(_WORD *)(result + v23);
          uint64_t v25 = a3 + v23;
          LOWORD(a13) = *(_WORD *)(a3 + v23);
          *(float *)&unsigned int v26 = v17 * (float)LODWORD(a13);
          double v27 = rint((float)((float)(*(float *)&v26 + (float)((float)LODWORD(a12) * v16)) + v19));
          int v28 = (uint64_t)v27 & ~((int)(uint64_t)v27 >> 31);
          LOWORD(v27) = *(_WORD *)(result + v23 + 2);
          LOWORD(v26) = *(_WORD *)(a3 + v23 + 2);
          float v29 = v17 * (float)v26;
          double v30 = (float)((float)(v29 + (float)((float)LODWORD(v27) * v16)) + v19);
          if (v28 >= 0xFFFF) {
            LOWORD(v2_Block_object_dispose(&a9, 8) = -1;
          }
          double v31 = rint(v30);
          int v32 = (uint64_t)v31 & ~((int)(uint64_t)v31 >> 31);
          if (v32 >= 0xFFFF) {
            LOWORD(v32) = -1;
          }
          float v33 = (_WORD *)(a5 + v23);
          _WORD *v33 = v28;
          v33[1] = v32;
          LOWORD(v31) = *(_WORD *)(v24 + 4);
          LOWORD(v29) = *(_WORD *)(v25 + 4);
          *(float *)&unsigned int v34 = v17 * (float)LODWORD(v29);
          double v35 = rint((float)((float)(*(float *)&v34 + (float)((float)LODWORD(v31) * v16)) + v19));
          int v36 = (uint64_t)v35 & ~((int)(uint64_t)v35 >> 31);
          LOWORD(v35) = *(_WORD *)(v24 + 6);
          LOWORD(v34) = *(_WORD *)(v25 + 6);
          a13 = v17 * (float)v34;
          float v37 = (float)(a13 + (float)((float)LODWORD(v35) * v16)) + v19;
          if (v36 >= 0xFFFF) {
            __int16 v38 = -1;
          }
          else {
            __int16 v38 = v36;
          }
          a12 = rint(v37);
          int v39 = (uint64_t)a12 & ~((int)(uint64_t)a12 >> 31);
          if (v39 >= 0xFFFF) {
            LOWORD(v39) = -1;
          }
          void v33[2] = v38;
          v33[3] = v39;
          v22 += 4;
          v23 += 8;
        }
        while (v22 <= v14 - 4);
        uint64_t v22 = v22;
      }
      else
      {
        uint64_t v22 = 0;
      }
      if ((int)v22 < (int)v15)
      {
        do
        {
          LOWORD(a12) = *(_WORD *)(result + 2 * v22);
          LOWORD(a13) = *(_WORD *)(a3 + 2 * v22);
          a13 = v17 * (float)LODWORD(a13);
          a12 = rint((float)((float)(a13 + (float)((float)LODWORD(a12) * v16)) + v19));
          int v40 = (uint64_t)a12 & ~((int)(uint64_t)a12 >> 31);
          if (v40 >= 0xFFFF) {
            LOWORD(v40) = -1;
          }
          *(_WORD *)(a5 + 2 * v22++) = v40;
        }
        while (v15 != v22);
      }
      a5 += v18;
      a3 += v20;
      result += v21;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t cv::addWeighted16s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    float v11 = *a8;
    float v12 = a8[1];
    uint64_t v13 = 2 * (a6 >> 1);
    float v14 = a8[2];
    uint64_t v15 = 2 * (a4 >> 1);
    uint64_t v16 = 2 * (a2 >> 1);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v18 = 0;
        uint64_t v17 = 0;
        do
        {
          uint64_t v19 = result + v18;
          uint64_t v20 = (__int16 *)(a3 + v18);
          uint64_t v21 = (uint64_t)rint((float)((float)((float)(v12 * (float)*(__int16 *)(a3 + v18))
                                            + (float)((float)*(__int16 *)(result + v18) * v11))
                                    + v14));
          if ((int)v21 <= -32768) {
            LODWORD(v21) = -32768;
          }
          double v22 = rint((float)((float)((float)(v12 * (float)v20[1]) + (float)((float)*(__int16 *)(result + v18 + 2) * v11))
                           + v14));
          if ((int)v21 >= 0x7FFF) {
            LOWORD(v21) = 0x7FFF;
          }
          uint64_t v23 = (uint64_t)v22;
          if ((int)(uint64_t)v22 <= -32768) {
            LODWORD(v23) = -32768;
          }
          if ((int)v23 >= 0x7FFF) {
            LOWORD(v23) = 0x7FFF;
          }
          uint64_t v24 = (_WORD *)(a5 + v18);
          *uint64_t v24 = v21;
          v24[1] = v23;
          uint64_t v25 = (uint64_t)rint((float)((float)((float)(v12 * (float)v20[2]) + (float)((float)*(__int16 *)(v19 + 4) * v11))
                                    + v14));
          float v26 = (float)*(__int16 *)(v19 + 6);
          if ((int)v25 <= -32768) {
            int v27 = -32768;
          }
          else {
            int v27 = v25;
          }
          double v28 = (float)((float)((float)(v12 * (float)v20[3]) + (float)(v26 * v11)) + v14);
          if (v27 >= 0x7FFF) {
            LOWORD(v27) = 0x7FFF;
          }
          uint64_t v29 = (uint64_t)rint(v28);
          if ((int)v29 <= -32768) {
            LODWORD(v29) = -32768;
          }
          if ((int)v29 >= 0x7FFF) {
            LOWORD(v29) = 0x7FFF;
          }
          void v24[2] = v27;
          v24[3] = v29;
          v17 += 4;
          v18 += 8;
        }
        while (v17 <= v9 - 4);
        uint64_t v17 = v17;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if ((int)v17 < (int)v10)
      {
        do
        {
          uint64_t v30 = (uint64_t)rint((float)((float)((float)(v12 * (float)*(__int16 *)(a3 + 2 * v17))
                                            + (float)((float)*(__int16 *)(result + 2 * v17) * v11))
                                    + v14));
          if ((int)v30 <= -32768) {
            LODWORD(v30) = -32768;
          }
          if ((int)v30 >= 0x7FFF) {
            LOWORD(v30) = 0x7FFF;
          }
          *(_WORD *)(a5 + 2 * v17++) = v30;
        }
        while (v10 != v17);
      }
      a5 += v13;
      a3 += v15;
      result += v16;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::addWeighted32s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    double v10 = *a8;
    double v11 = a8[1];
    double v12 = a8[2];
    uint64_t v13 = 4 * (a6 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v15 = 0;
        uint64_t v14 = 0;
        do
        {
          double v16 = rint(v12 + v11 * (double)*(int *)(a3 + v15 + 4) + (double)*(int *)(result + v15 + 4) * v10);
          uint64_t v17 = (_DWORD *)(a5 + v15);
          _DWORD *v17 = (uint64_t)rint(v12 + v11 * (double)*(int *)(a3 + v15) + (double)*(int *)(result + v15) * v10);
          v17[1] = (uint64_t)v16;
          uint64_t v18 = (uint64_t)rint(v12 + v11 * (double)*(int *)(a3 + v15 + 12) + (double)*(int *)(result + v15 + 12) * v10);
          v17[2] = (uint64_t)rint(v12 + v11 * (double)*(int *)(a3 + v15 + 8) + (double)*(int *)(result + v15 + 8) * v10);
          uint64_t v17[3] = v18;
          v14 += 4;
          v15 += 16;
        }
        while (v14 <= v9 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v9)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v14) = (uint64_t)rint(v12+ v11 * (double)*(int *)(a3 + 4 * v14)+ (double)*(int *)(result + 4 * v14) * v10);
          ++v14;
        }
        while (v14 < v9);
      }
      a5 += v13;
      a3 += 4 * (a4 >> 2);
      result += 4 * (a2 >> 2);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::addWeighted32f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, uint64_t a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    double v11 = *(double *)a8;
    double v12 = *(double *)(a8 + 8);
    uint64_t v13 = *(uint64_t *)(a8 + 16);
    float64x2_t v14 = (float64x2_t)vdupq_lane_s64(*(void *)a8, 0);
    float64x2_t v15 = (float64x2_t)vdupq_lane_s64(v13, 0);
    uint64_t v16 = 4 * (a4 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v18 = 0;
        uint64_t v17 = 0;
        do
        {
          uint64_t v19 = (float32x2_t *)(a5 + v18);
          float32x2_t *v19 = vcvt_f32_f64(vaddq_f64(v15, vmlaq_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a3 + v18)), v12), v14, vcvtq_f64_f32(*(float32x2_t *)(result + v18)))));
          v19[1] = vcvt_f32_f64(vaddq_f64(v15, vmlaq_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a3 + v18 + 8)), v12), v14, vcvtq_f64_f32(*(float32x2_t *)(result + v18 + 8)))));
          v17 += 4;
          v18 += 16;
        }
        while (v17 <= v9 - 4);
        uint64_t v17 = v17;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if ((int)v17 < (int)v10)
      {
        do
        {
          float v20 = *(double *)&v13 + v12 * *(float *)(a3 + 4 * v17) + *(float *)(result + 4 * v17) * v11;
          *(float *)(a5 + 4 * v17++) = v20;
        }
        while (v10 != v17);
      }
      a5 += 4 * (a6 >> 2);
      a3 += v16;
      result += 4 * (a2 >> 2);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::addWeighted64f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, uint64_t a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    double v11 = *(double *)a8;
    double v12 = *(double *)(a8 + 8);
    uint64_t v13 = *(uint64_t *)(a8 + 16);
    float64x2_t v14 = (float64x2_t)vdupq_lane_s64(*(void *)a8, 0);
    float64x2_t v15 = (float64x2_t)vdupq_lane_s64(v13, 0);
    uint64_t v16 = 8 * (a4 >> 3);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v18 = 0;
        uint64_t v17 = 0;
        do
        {
          uint64_t v19 = (float64x2_t *)(a5 + v18);
          float64x2_t *v19 = vaddq_f64(v15, vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + v18), v12), v14, *(float64x2_t *)(result + v18)));
          v19[1] = vaddq_f64(v15, vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + v18 + 16), v12), v14, *(float64x2_t *)(result + v18 + 16)));
          v17 += 4;
          v18 += 32;
        }
        while (v17 <= v9 - 4);
        uint64_t v17 = v17;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if ((int)v17 < (int)v10)
      {
        do
        {
          *(double *)(a5 + 8 * v17) = *(double *)&v13
                                    + v12 * *(double *)(a3 + 8 * v17)
                                    + *(double *)(result + 8 * v17) * v11;
          ++v17;
        }
        while (v10 != v17);
      }
      a5 += 8 * (a6 >> 3);
      a3 += v16;
      result += 8 * (a2 >> 3);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cmp8u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  int v8 = *a8;
  if ((*a8 & 0xFFFFFFFE) == 2)
  {
    if (v8 == 2) {
      int v8 = 4;
    }
    else {
      int v8 = 1;
    }
    uint64_t v9 = a2;
    uint64_t v10 = result;
LABEL_12:
    int v12 = a7[1];
    int v13 = v12 - 1;
    a7[1] = v12 - 1;
    if (v12)
    {
      LODWORD(v14) = *a7;
      do
      {
        if ((int)v14 >= 1)
        {
          uint64_t v15 = 0;
          do
          {
            *(unsigned char *)(a5 + v15) = ((v8 == 1) ^ (*(unsigned __int8 *)(a3 + v15) <= *(unsigned __int8 *)(v10 + v15))) << 31 >> 31;
            ++v15;
            uint64_t v14 = *a7;
          }
          while (v15 < v14);
          int v13 = a7[1];
        }
        int v16 = v13;
        a3 += a4;
        v10 += v9;
        a5 += a6;
        a7[1] = --v13;
      }
      while (v16);
    }
    return result;
  }
  if (v8 == 4 || v8 == 1)
  {
    uint64_t v9 = a4;
    uint64_t v10 = a3;
    a4 = a2;
    a3 = result;
    goto LABEL_12;
  }
  if (v8 == 5 || v8 == 0)
  {
    int v18 = a7[1];
    int v19 = v18 - 1;
    a7[1] = v18 - 1;
    if (v18)
    {
      LODWORD(v20) = *a7;
      do
      {
        if ((int)v20 >= 1)
        {
          uint64_t v21 = 0;
          do
          {
            *(unsigned char *)(a5 + v21) = ((v8 == 0) ^ (*(unsigned __int8 *)(result + v21) != *(unsigned __int8 *)(a3 + v21))) << 31 >> 31;
            ++v21;
            uint64_t v20 = *a7;
          }
          while (v21 < v20);
          int v19 = a7[1];
        }
        int v22 = v19;
        result += a2;
        a3 += a4;
        a5 += a6;
        a7[1] = --v19;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t cv::cmp8s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  int v8 = a7[1];
  uint64_t v9 = *a7;
  int v10 = *a8;
  if ((*a8 & 0xFFFFFFFE) == 2)
  {
    if (v10 == 2) {
      int v10 = 4;
    }
    else {
      int v10 = 1;
    }
    uint64_t v11 = a2;
    uint64_t v12 = result;
    a2 = a4;
    uint64_t result = a3;
LABEL_35:
    if (v10 == 1) {
      char v23 = 0;
    }
    else {
      char v23 = -1;
    }
    for (; v8; --v8)
    {
      if ((int)v9 >= 4)
      {
        uint64_t v24 = 0;
        do
        {
          uint64_t v25 = result + v24;
          uint64_t v26 = v12 + v24;
          if (*(char *)(result + v24 + 1) <= *(char *)(v12 + v24 + 1)) {
            char v27 = v23;
          }
          else {
            char v27 = ~v23;
          }
          if (*(char *)(result + v24) <= *(char *)(v12 + v24)) {
            char v28 = v23;
          }
          else {
            char v28 = ~v23;
          }
          uint64_t v29 = (unsigned char *)(a5 + v24);
          *uint64_t v29 = v28;
          v29[1] = v27;
          if (*(char *)(v25 + 3) <= *(char *)(v26 + 3)) {
            char v30 = v23;
          }
          else {
            char v30 = ~v23;
          }
          if (*(char *)(v25 + 2) <= *(char *)(v26 + 2)) {
            char v31 = v23;
          }
          else {
            char v31 = ~v23;
          }
          v29[2] = v31;
          v29[3] = v30;
          v24 += 4;
        }
        while (v24 <= v9 - 4);
        uint64_t v24 = v24;
      }
      else
      {
        uint64_t v24 = 0;
      }
      if ((int)v24 < (int)v9)
      {
        do
        {
          if (*(char *)(result + v24) <= *(char *)(v12 + v24)) {
            char v32 = v23;
          }
          else {
            char v32 = ~v23;
          }
          *(unsigned char *)(a5 + v24++) = v32;
        }
        while (v24 < v9);
      }
      result += a2;
      v12 += v11;
      a5 += a6;
    }
  }
  else
  {
    uint64_t v11 = a4;
    uint64_t v12 = a3;
    switch(v10)
    {
      case 0:
      case 5:
        if (v10) {
          char v13 = -1;
        }
        else {
          char v13 = 0;
        }
        for (; v8; --v8)
        {
          if ((int)v9 >= 4)
          {
            uint64_t v14 = 0;
            do
            {
              uint64_t v15 = result + v14;
              uint64_t v16 = a3 + v14;
              if (*(unsigned __int8 *)(result + v14 + 1) == *(unsigned __int8 *)(a3 + v14 + 1)) {
                char v17 = ~v13;
              }
              else {
                char v17 = v13;
              }
              if (*(unsigned __int8 *)(result + v14) == *(unsigned __int8 *)(a3 + v14)) {
                char v18 = ~v13;
              }
              else {
                char v18 = v13;
              }
              int v19 = (unsigned char *)(a5 + v14);
              unsigned char *v19 = v18;
              v19[1] = v17;
              if (*(unsigned __int8 *)(v15 + 3) == *(unsigned __int8 *)(v16 + 3)) {
                char v20 = ~v13;
              }
              else {
                char v20 = v13;
              }
              if (*(unsigned __int8 *)(v15 + 2) == *(unsigned __int8 *)(v16 + 2)) {
                char v21 = ~v13;
              }
              else {
                char v21 = v13;
              }
              void v19[2] = v21;
              v19[3] = v20;
              v14 += 4;
            }
            while (v14 <= v9 - 4);
            uint64_t v14 = v14;
          }
          else
          {
            uint64_t v14 = 0;
          }
          if ((int)v14 < (int)v9)
          {
            do
            {
              if (*(unsigned __int8 *)(result + v14) == *(unsigned __int8 *)(a3 + v14)) {
                char v22 = ~v13;
              }
              else {
                char v22 = v13;
              }
              *(unsigned char *)(a5 + v14++) = v22;
            }
            while (v14 < v9);
          }
          result += a2;
          a3 += a4;
          a5 += a6;
        }
        break;
      case 1:
      case 4:
        goto LABEL_35;
      default:
        return result;
    }
  }
  return result;
}

uint64_t cv::cmp16u(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  int v8 = a7[1];
  uint64_t v9 = *a7;
  int v10 = *a8;
  unint64_t v11 = a2 >> 1;
  if ((*a8 & 0xFFFFFFFE) == 2)
  {
    if (v10 == 2) {
      int v10 = 4;
    }
    else {
      int v10 = 1;
    }
    unint64_t v12 = a2 >> 1;
    uint64_t v13 = result;
    unint64_t v11 = a4 >> 1;
    uint64_t result = a3;
LABEL_36:
    if (v10 == 1) {
      char v27 = 0;
    }
    else {
      char v27 = -1;
    }
    if (v8)
    {
      uint64_t v28 = 2 * v12;
      uint64_t v29 = 2 * v11;
      do
      {
        if ((int)v9 >= 4)
        {
          uint64_t v31 = 0;
          uint64_t v30 = 0;
          do
          {
            uint64_t v32 = result + v31;
            uint64_t v33 = v13 + v31;
            if (*(unsigned __int16 *)(result + v31 + 2) <= *(unsigned __int16 *)(v13 + v31 + 2)) {
              char v34 = v27;
            }
            else {
              char v34 = ~v27;
            }
            if (*(unsigned __int16 *)(result + v31) <= *(unsigned __int16 *)(v13 + v31)) {
              char v35 = v27;
            }
            else {
              char v35 = ~v27;
            }
            int v36 = (unsigned char *)(a5 + v30);
            *int v36 = v35;
            v36[1] = v34;
            if (*(unsigned __int16 *)(v32 + 6) <= *(unsigned __int16 *)(v33 + 6)) {
              char v37 = v27;
            }
            else {
              char v37 = ~v27;
            }
            if (*(unsigned __int16 *)(v32 + 4) <= *(unsigned __int16 *)(v33 + 4)) {
              char v38 = v27;
            }
            else {
              char v38 = ~v27;
            }
            void v36[2] = v38;
            v36[3] = v37;
            v30 += 4;
            v31 += 8;
          }
          while (v30 <= v9 - 4);
          uint64_t v30 = v30;
        }
        else
        {
          uint64_t v30 = 0;
        }
        if ((int)v30 < (int)v9)
        {
          do
          {
            if (*(unsigned __int16 *)(result + 2 * v30) <= *(unsigned __int16 *)(v13 + 2 * v30)) {
              char v39 = v27;
            }
            else {
              char v39 = ~v27;
            }
            *(unsigned char *)(a5 + v30++) = v39;
          }
          while (v30 < v9);
        }
        a5 += a6;
        v13 += v28;
        result += v29;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    unint64_t v12 = a4 >> 1;
    uint64_t v13 = a3;
    switch(v10)
    {
      case 0:
      case 5:
        if (v10) {
          char v14 = -1;
        }
        else {
          char v14 = 0;
        }
        if (v8)
        {
          uint64_t v15 = 2 * (a4 >> 1);
          uint64_t v16 = 2 * v11;
          do
          {
            if ((int)v9 >= 4)
            {
              uint64_t v18 = 0;
              uint64_t v17 = 0;
              do
              {
                uint64_t v19 = result + v18;
                uint64_t v20 = a3 + v18;
                if (*(unsigned __int16 *)(result + v18 + 2) == *(unsigned __int16 *)(a3 + v18 + 2)) {
                  char v21 = ~v14;
                }
                else {
                  char v21 = v14;
                }
                if (*(unsigned __int16 *)(result + v18) == *(unsigned __int16 *)(a3 + v18)) {
                  char v22 = ~v14;
                }
                else {
                  char v22 = v14;
                }
                char v23 = (unsigned char *)(a5 + v17);
                *char v23 = v22;
                v23[1] = v21;
                if (*(unsigned __int16 *)(v19 + 6) == *(unsigned __int16 *)(v20 + 6)) {
                  char v24 = ~v14;
                }
                else {
                  char v24 = v14;
                }
                if (*(unsigned __int16 *)(v19 + 4) == *(unsigned __int16 *)(v20 + 4)) {
                  char v25 = ~v14;
                }
                else {
                  char v25 = v14;
                }
                v23[2] = v25;
                v23[3] = v24;
                v17 += 4;
                v18 += 8;
              }
              while (v17 <= v9 - 4);
              uint64_t v17 = v17;
            }
            else
            {
              uint64_t v17 = 0;
            }
            if ((int)v17 < (int)v9)
            {
              do
              {
                if (*(unsigned __int16 *)(result + 2 * v17) == *(unsigned __int16 *)(a3 + 2 * v17)) {
                  char v26 = ~v14;
                }
                else {
                  char v26 = v14;
                }
                *(unsigned char *)(a5 + v17++) = v26;
              }
              while (v17 < v9);
            }
            a5 += a6;
            a3 += v15;
            result += v16;
            --v8;
          }
          while (v8);
        }
        break;
      case 1:
      case 4:
        goto LABEL_36;
      default:
        return result;
    }
  }
  return result;
}

uint64_t cv::cmp16s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  int v8 = *a8;
  unint64_t v9 = a4 >> 1;
  if ((*a8 & 0xFFFFFFFE) == 2)
  {
    if (v8 == 2) {
      int v8 = 4;
    }
    else {
      int v8 = 1;
    }
    unint64_t v10 = a2 >> 1;
    uint64_t v11 = result;
LABEL_12:
    int v13 = a7[1];
    int v14 = v13 - 1;
    a7[1] = v13 - 1;
    if (v13)
    {
      LODWORD(v15) = *a7;
      uint64_t v16 = 2 * v10;
      uint64_t v17 = 2 * v9;
      do
      {
        if ((int)v15 >= 1)
        {
          uint64_t v18 = 0;
          do
          {
            *(unsigned char *)(a5 + v1_Block_object_dispose(&a9, 8) = ((v8 == 1) ^ (*(__int16 *)(a3 + 2 * v18) <= *(__int16 *)(v11 + 2 * v18))) << 31 >> 31;
            ++v18;
            uint64_t v15 = *a7;
          }
          while (v18 < v15);
          int v14 = a7[1];
        }
        int v19 = v14;
        a5 += a6;
        a7[1] = --v14;
        v11 += v16;
        a3 += v17;
      }
      while (v19);
    }
    return result;
  }
  if (v8 == 4 || v8 == 1)
  {
    unint64_t v10 = a4 >> 1;
    uint64_t v11 = a3;
    unint64_t v9 = a2 >> 1;
    a3 = result;
    goto LABEL_12;
  }
  if (v8 == 5 || v8 == 0)
  {
    int v21 = a7[1];
    int v22 = v21 - 1;
    a7[1] = v21 - 1;
    if (v21)
    {
      LODWORD(v23) = *a7;
      uint64_t v24 = 2 * v9;
      do
      {
        if ((int)v23 >= 1)
        {
          uint64_t v25 = 0;
          do
          {
            *(unsigned char *)(a5 + v25) = ((v8 == 0) ^ (*(unsigned __int16 *)(result + 2 * v25) != *(unsigned __int16 *)(a3 + 2 * v25))) << 31 >> 31;
            ++v25;
            uint64_t v23 = *a7;
          }
          while (v25 < v23);
          int v22 = a7[1];
        }
        int v26 = v22;
        a5 += a6;
        a7[1] = --v22;
        a3 += v24;
        result += 2 * (a2 >> 1);
      }
      while (v26);
    }
  }
  return result;
}

uint64_t cv::cmp32s(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  int v8 = a7[1];
  uint64_t v9 = *a7;
  int v10 = *a8;
  unint64_t v11 = a2 >> 2;
  if ((*a8 & 0xFFFFFFFE) == 2)
  {
    if (v10 == 2) {
      int v10 = 4;
    }
    else {
      int v10 = 1;
    }
    unint64_t v12 = a2 >> 2;
    uint64_t v13 = result;
    unint64_t v11 = a4 >> 2;
    uint64_t result = a3;
LABEL_24:
    if (v10 == 1) {
      unsigned int v23 = 0;
    }
    else {
      unsigned int v23 = 255;
    }
    if (v8)
    {
      int8x8_t v24 = (int8x8_t)vdup_n_s32(v23);
      uint64_t v25 = 4 * v12;
      uint64_t v26 = 4 * v11;
      do
      {
        if ((int)v9 >= 4)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 8;
          do
          {
            uint64_t v29 = (unsigned char *)(a5 + v27);
            int8x8_t v30 = veor_s8(v24, (int8x8_t)vcgt_s32(*(int32x2_t *)(result + v28 - 8), *(int32x2_t *)(v13 + v28 - 8)));
            v29[1] = v30.i8[4];
            *uint64_t v29 = v30.i8[0];
            int8x8_t v31 = veor_s8(v24, (int8x8_t)vcgt_s32(*(int32x2_t *)(result + v28), *(int32x2_t *)(v13 + v28)));
            v29[3] = v31.i8[4];
            v29[2] = v31.i8[0];
            v27 += 4;
            v28 += 16;
          }
          while (v27 <= v9 - 4);
          uint64_t v27 = v27;
        }
        else
        {
          uint64_t v27 = 0;
        }
        if ((int)v27 < (int)v9)
        {
          do
          {
            if (*(_DWORD *)(result + 4 * v27) <= *(_DWORD *)(v13 + 4 * v27)) {
              char v32 = v23;
            }
            else {
              char v32 = ~(_BYTE)v23;
            }
            *(unsigned char *)(a5 + v27++) = v32;
          }
          while (v27 < v9);
        }
        a5 += a6;
        v13 += v25;
        result += v26;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    unint64_t v12 = a4 >> 2;
    uint64_t v13 = a3;
    switch(v10)
    {
      case 0:
      case 5:
        if (v10) {
          unsigned int v14 = 255;
        }
        else {
          unsigned int v14 = 0;
        }
        if (v8)
        {
          int8x8_t v15 = (int8x8_t)vdup_n_s32(v14);
          uint64_t v16 = 4 * v11;
          do
          {
            if ((int)v9 >= 4)
            {
              uint64_t v17 = 0;
              uint64_t v18 = 8;
              do
              {
                int v19 = (unsigned char *)(a5 + v17);
                int8x8_t v20 = veor_s8(v15, (int8x8_t)vceq_s32(*(int32x2_t *)(result + v18 - 8), *(int32x2_t *)(a3 + v18 - 8)));
                v19[1] = v20.i8[4];
                unsigned char *v19 = v20.i8[0];
                int8x8_t v21 = veor_s8(v15, (int8x8_t)vceq_s32(*(int32x2_t *)(result + v18), *(int32x2_t *)(a3 + v18)));
                v19[3] = v21.i8[4];
                void v19[2] = v21.i8[0];
                v17 += 4;
                v18 += 16;
              }
              while (v17 <= v9 - 4);
              uint64_t v17 = v17;
            }
            else
            {
              uint64_t v17 = 0;
            }
            if ((int)v17 < (int)v9)
            {
              do
              {
                if (*(_DWORD *)(result + 4 * v17) == *(_DWORD *)(a3 + 4 * v17)) {
                  char v22 = ~(_BYTE)v14;
                }
                else {
                  char v22 = v14;
                }
                *(unsigned char *)(a5 + v17++) = v22;
              }
              while (v17 < v9);
            }
            a5 += a6;
            a3 += 4 * (a4 >> 2);
            result += v16;
            --v8;
          }
          while (v8);
        }
        break;
      case 1:
      case 4:
        goto LABEL_24;
      default:
        return result;
    }
  }
  return result;
}

uint64_t cv::cmp32f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  int v8 = a7[1];
  uint64_t v9 = *a7;
  int v10 = *a8;
  unint64_t v11 = a2 >> 2;
  if ((*a8 & 0xFFFFFFFE) == 2)
  {
    if (v10 == 2) {
      int v10 = 4;
    }
    else {
      int v10 = 1;
    }
    unint64_t v12 = a2 >> 2;
    uint64_t v13 = result;
    unint64_t v11 = a4 >> 2;
    uint64_t result = a3;
LABEL_24:
    if (v10 == 1) {
      unsigned int v23 = 0;
    }
    else {
      unsigned int v23 = 255;
    }
    if (v8)
    {
      int8x8_t v24 = (int8x8_t)vdup_n_s32(v23);
      uint64_t v25 = 4 * v12;
      uint64_t v26 = 4 * v11;
      do
      {
        if ((int)v9 >= 4)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 8;
          do
          {
            uint64_t v29 = (unsigned char *)(a5 + v27);
            int8x8_t v30 = veor_s8(v24, (int8x8_t)vcgt_f32(*(float32x2_t *)(result + v28 - 8), *(float32x2_t *)(v13 + v28 - 8)));
            v29[1] = v30.i8[4];
            *uint64_t v29 = v30.i8[0];
            int8x8_t v31 = veor_s8(v24, (int8x8_t)vcgt_f32(*(float32x2_t *)(result + v28), *(float32x2_t *)(v13 + v28)));
            v29[3] = v31.i8[4];
            v29[2] = v31.i8[0];
            v27 += 4;
            v28 += 16;
          }
          while (v27 <= v9 - 4);
          uint64_t v27 = v27;
        }
        else
        {
          uint64_t v27 = 0;
        }
        if ((int)v27 < (int)v9)
        {
          do
          {
            if (*(float *)(result + 4 * v27) <= *(float *)(v13 + 4 * v27)) {
              char v32 = 0;
            }
            else {
              char v32 = -1;
            }
            *(unsigned char *)(a5 + v27++) = v23 ^ v32;
          }
          while (v27 < v9);
        }
        a5 += a6;
        v13 += v25;
        result += v26;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    unint64_t v12 = a4 >> 2;
    uint64_t v13 = a3;
    switch(v10)
    {
      case 0:
      case 5:
        if (v10) {
          unsigned int v14 = 255;
        }
        else {
          unsigned int v14 = 0;
        }
        if (v8)
        {
          int8x8_t v15 = (int8x8_t)vdup_n_s32(v14);
          uint64_t v16 = 4 * v11;
          do
          {
            if ((int)v9 >= 4)
            {
              uint64_t v17 = 0;
              uint64_t v18 = 8;
              do
              {
                int v19 = (unsigned char *)(a5 + v17);
                int8x8_t v20 = veor_s8(v15, (int8x8_t)vceq_f32(*(float32x2_t *)(result + v18 - 8), *(float32x2_t *)(a3 + v18 - 8)));
                v19[1] = v20.i8[4];
                unsigned char *v19 = v20.i8[0];
                int8x8_t v21 = veor_s8(v15, (int8x8_t)vceq_f32(*(float32x2_t *)(result + v18), *(float32x2_t *)(a3 + v18)));
                v19[3] = v21.i8[4];
                void v19[2] = v21.i8[0];
                v17 += 4;
                v18 += 16;
              }
              while (v17 <= v9 - 4);
              uint64_t v17 = v17;
            }
            else
            {
              uint64_t v17 = 0;
            }
            if ((int)v17 < (int)v9)
            {
              do
              {
                if (*(float *)(result + 4 * v17) == *(float *)(a3 + 4 * v17)) {
                  char v22 = -1;
                }
                else {
                  char v22 = 0;
                }
                *(unsigned char *)(a5 + v17++) = v14 ^ v22;
              }
              while (v17 < v9);
            }
            a5 += a6;
            a3 += 4 * (a4 >> 2);
            result += v16;
            --v8;
          }
          while (v8);
        }
        break;
      case 1:
      case 4:
        goto LABEL_24;
      default:
        return result;
    }
  }
  return result;
}

uint64_t cv::cmp64f(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int *a7, int *a8)
{
  int v8 = a7[1];
  uint64_t v9 = *a7;
  int v10 = *a8;
  unint64_t v11 = a2 >> 3;
  if ((*a8 & 0xFFFFFFFE) == 2)
  {
    if (v10 == 2) {
      int v10 = 4;
    }
    else {
      int v10 = 1;
    }
    unint64_t v12 = a2 >> 3;
    uint64_t v13 = result;
    unint64_t v11 = a4 >> 3;
    uint64_t result = a3;
LABEL_24:
    if (v10 == 1) {
      unsigned int v23 = 0;
    }
    else {
      unsigned int v23 = 255;
    }
    if (v8)
    {
      int8x8_t v24 = (int8x8_t)vdup_n_s32(v23);
      uint64_t v25 = 8 * v12;
      uint64_t v26 = 8 * v11;
      do
      {
        if ((int)v9 >= 4)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 16;
          do
          {
            int8x8_t v29 = veor_s8(v24, (int8x8_t)vmovn_s64(vcgtq_f64(*(float64x2_t *)(result + v28 - 16), *(float64x2_t *)(v13 + v28 - 16))));
            int8x8_t v30 = (unsigned char *)(a5 + v27);
            v30[1] = v29.i8[4];
            unsigned char *v30 = v29.i8[0];
            int8x8_t v31 = veor_s8(v24, (int8x8_t)vmovn_s64(vcgtq_f64(*(float64x2_t *)(result + v28), *(float64x2_t *)(v13 + v28))));
            v30[3] = v31.i8[4];
            void v30[2] = v31.i8[0];
            v27 += 4;
            v28 += 32;
          }
          while (v27 <= v9 - 4);
          uint64_t v27 = v27;
        }
        else
        {
          uint64_t v27 = 0;
        }
        if ((int)v27 < (int)v9)
        {
          do
          {
            if (*(double *)(result + 8 * v27) <= *(double *)(v13 + 8 * v27)) {
              char v32 = 0;
            }
            else {
              char v32 = -1;
            }
            *(unsigned char *)(a5 + v27++) = v23 ^ v32;
          }
          while (v27 < v9);
        }
        a5 += a6;
        v13 += v25;
        result += v26;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    unint64_t v12 = a4 >> 3;
    uint64_t v13 = a3;
    switch(v10)
    {
      case 0:
      case 5:
        if (v10) {
          unsigned int v14 = 255;
        }
        else {
          unsigned int v14 = 0;
        }
        if (v8)
        {
          int8x8_t v15 = (int8x8_t)vdup_n_s32(v14);
          uint64_t v16 = 8 * v11;
          do
          {
            if ((int)v9 >= 4)
            {
              uint64_t v17 = 0;
              uint64_t v18 = 16;
              do
              {
                int8x8_t v19 = veor_s8(v15, (int8x8_t)vmovn_s64(vceqq_f64(*(float64x2_t *)(result + v18 - 16), *(float64x2_t *)(a3 + v18 - 16))));
                int8x8_t v20 = (unsigned char *)(a5 + v17);
                v20[1] = v19.i8[4];
                *int8x8_t v20 = v19.i8[0];
                int8x8_t v21 = veor_s8(v15, (int8x8_t)vmovn_s64(vceqq_f64(*(float64x2_t *)(result + v18), *(float64x2_t *)(a3 + v18))));
                v20[3] = v21.i8[4];
                v20[2] = v21.i8[0];
                v17 += 4;
                v18 += 32;
              }
              while (v17 <= v9 - 4);
              uint64_t v17 = v17;
            }
            else
            {
              uint64_t v17 = 0;
            }
            if ((int)v17 < (int)v9)
            {
              do
              {
                if (*(double *)(result + 8 * v17) == *(double *)(a3 + 8 * v17)) {
                  char v22 = -1;
                }
                else {
                  char v22 = 0;
                }
                *(unsigned char *)(a5 + v17++) = v14 ^ v22;
              }
              while (v17 < v9);
            }
            a5 += a6;
            a3 += 8 * (a4 >> 3);
            result += v16;
            --v8;
          }
          while (v8);
        }
        break;
      case 1:
      case 4:
        goto LABEL_24;
      default:
        return result;
    }
  }
  return result;
}

void cv::crossCorr(cv::Mat *a1, cv::Mat *a2, cv::Mat *this, int *a4, unsigned __int16 a5, _DWORD *a6, char a7, double a8)
{
  void (**v237)(uint64_t *__return_ptr);
  unint64_t v238;
  void *v239;
  long long v240;
  long long v241;
  uint64_t v242;
  unint64_t *v243;
  cv *v244;
  uint64_t v245;
  uint64_t v246;
  int64x2_t v247;
  unsigned char v248[24];
  long long v249;
  uint64_t v250;
  uint64_t *v251;
  cv *v252;
  uint64_t v253;
  uint64_t v254;
  int64x2_t v255;
  void *v256;
  long long v257;
  long long v258;
  uint64_t v259;
  __int8 *v260;
  cv *v261;
  uint64_t v262;
  uint64_t v263;
  void *v264[2];
  void *v265;
  long long v266;
  long long v267;
  uint64_t v268;
  void **v269;
  cv *v270;
  uint64_t v271;
  uint64_t v272;
  _OWORD v273[4];
  char *v274;
  cv *v275;
  void v276[2];
  int v277[16];
  int *v278;
  void **v279;
  void v280[8];

  v280[5] = *MEMORY[0x263EF8340];
  uint64_t v235 = 0;
  double v234 = 0;
  uint64_t v236 = 0;
  long long v15 = *(_OWORD *)a2;
  *(_OWORD *)unint64_t v226 = *(_OWORD *)a2;
  uint64_t v16 = (void *)*((void *)a2 + 2);
  long long v17 = *(_OWORD *)((char *)a2 + 24);
  long long v228 = v17;
  long long v229 = *(_OWORD *)((char *)a2 + 40);
  uint64_t v18 = *((void *)a2 + 7);
  uint64_t v227 = v16;
  uint64_t v230 = v18;
  uint64_t v231 = &v226[2];
  uint64_t v232 = (cv *)v233;
  v233[1] = 0;
  v233[0] = 0;
  if ((void)v17)
  {
    atomic_fetch_add((atomic_uint *volatile)v17, 1u);
    int v19 = *((_DWORD *)a2 + 1);
  }
  else
  {
    int v19 = DWORD1(v15);
  }
  if (v19 > 2)
  {
    v226[1] = 0;
    cv::Mat::copySize((cv::Mat *)v226, a2);
  }
  else
  {
    int8x8_t v20 = (void *)*((void *)a2 + 9);
    int8x8_t v21 = v232;
    *(void *)uint64_t v232 = *v20;
    *((void *)v21 + 1) = v20[1];
  }
  unsigned int v22 = v226[0];
  unsigned int v23 = *(_DWORD *)a1;
  if (*((int *)a1 + 1) > 2 || v226[1] > 2 || *((int *)this + 1) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v273, "img.dims <= 2 && templ.dims <= 2 && corr.dims <= 2");
    std::string::basic_string[abi:ne180100]<0>(v264, "crossCorr");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/templmatch.cpp");
    int8x8_t v24 = (cv *)cv::Exception::Exception(v277, 4294967081, v273, v264, __p, 60);
    cv::error(v24, v25);
  }
  double v179 = a1;
  char v177 = a7;
  unsigned int v26 = *(_DWORD *)a1 & 7;
  unsigned int v27 = v26;
  if (v26 != (v226[0] & 7))
  {
    if (v26 <= 5) {
      int v28 = 5;
    }
    else {
      int v28 = *(_DWORD *)a1 & 7;
    }
    unsigned int v27 = v226[0] & 7;
    if (v27 != v28)
    {
      cv::_OutputArray::_OutputArray((uint64_t)v277, (cv::Mat *)v226);
      cv::Mat::convertTo(a2, (const cv::_OutputArray *)v277, v28, 1.0, 0.0);
      unsigned int v27 = v226[0] & 7;
    }
    if (v26 != v27 && v27 != 5)
    {
      std::string::basic_string[abi:ne180100]<0>(v273, "depth == tdepth || tdepth == CV_32F");
      std::string::basic_string[abi:ne180100]<0>(v264, "crossCorr");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/templmatch.cpp");
      int8x8_t v29 = (cv *)cv::Exception::Exception(v277, 4294967081, v273, v264, __p, 68);
      cv::error(v29, v30);
    }
  }
  if (a4[1] >= v226[2] + *((_DWORD *)v179 + 2) || *a4 >= v226[3] + *((_DWORD *)v179 + 3))
  {
    std::string::basic_string[abi:ne180100]<0>(v273, "corrsize.height <= img.rows + templ.rows - 1 && corrsize.width <= img.cols + templ.cols - 1");
    std::string::basic_string[abi:ne180100]<0>(v264, "crossCorr");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/templmatch.cpp");
    int8x8_t v31 = (cv *)cv::Exception::Exception(v277, 4294967081, v273, v264, __p, 70);
    cv::error(v31, v32);
  }
  int v164 = a5 & 0xFF8;
  if ((a5 & 0xFF8) != 0 && a8 != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v273, "ccn == 1 || delta == 0");
    std::string::basic_string[abi:ne180100]<0>(v264, "crossCorr");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/templmatch.cpp");
    uint64_t v33 = (cv *)cv::Exception::Exception(v277, 4294967081, v273, v264, __p, 72);
    cv::error(v33, v34);
  }
  int v35 = *a4;
  int v36 = a4[1];
  int v37 = a5 & 0xFFF;
  if (*((int *)this + 1) > 2
    || *((_DWORD *)this + 2) != v36
    || *((_DWORD *)this + 3) != v35
    || (*(_DWORD *)this & 0xFFF) != v37
    || !*((void *)this + 2))
  {
    v277[0] = a4[1];
    v277[1] = v35;
    cv::Mat::create(this, (cv::Mat *)2, v277, v37);
    int v36 = *((_DWORD *)this + 2);
    int v35 = *((_DWORD *)this + 3);
  }
  unsigned int v38 = a5 & 7;
  int v166 = v38;
  unsigned int v182 = v27;
  if (v27 > v38) {
    unsigned int v38 = v27;
  }
  if (v38 <= 5) {
    unsigned int v38 = 5;
  }
  if (v26 <= 1) {
    int v39 = v38;
  }
  else {
    int v39 = 6;
  }
  int v40 = v226[2];
  uint64_t v41 = (uint64_t)rint((double)v226[3] * 4.5);
  if (257 - v226[3] > (int)v41) {
    LODWORD(v41) = 257 - v226[3];
  }
  if (v35 >= (int)v41) {
    int v35 = v41;
  }
  OptimalDFTunint64_t Size = cv::getOptimalDFTSize((cv *)(v226[3] + v35 - 1));
  int v43 = 257 - v40;
  uint64_t v44 = (uint64_t)rint((double)v40 * 4.5);
  if (257 - v40 <= (int)v44) {
    int v43 = v44;
  }
  if (v36 < v43) {
    int v43 = v36;
  }
  if (OptimalDFTSize <= 2) {
    int v45 = 2;
  }
  else {
    int v45 = OptimalDFTSize;
  }
  int v46 = cv::getOptimalDFTSize((cv *)(v43 + v226[2] - 1));
  if (v46 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v273, "the input arrays are too big");
    std::string::basic_string[abi:ne180100]<0>(v264, "crossCorr");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/templmatch.cpp");
    double v47 = (cv *)cv::Exception::Exception(v277, 4294967085, v273, v264, __p, 89);
    cv::error(v47, v48);
  }
  int v187 = (v22 >> 3) & 0x1FF;
  if (v45 - v226[3] < *((_DWORD *)this + 3)) {
    int v49 = v45 - v226[3] + 1;
  }
  else {
    int v49 = *((_DWORD *)this + 3);
  }
  int v168 = v49;
  if (v46 - v226[2] < *((_DWORD *)this + 2)) {
    int v50 = v46 - v226[2] + 1;
  }
  else {
    int v50 = *((_DWORD *)this + 2);
  }
  int v167 = v50;
  unint64_t v278 = &v277[2];
  float v279 = (void **)v280;
  v280[0] = 0;
  v280[1] = 0;
  v277[0] = 1124007936;
  memset(&v277[1], 0, 60);
  LODWORD(v273[0]) = v46 * (v187 + 1);
  DWORD1(v273[0]) = v45;
  int v51 = v46;
  cv::Mat::create((cv::Mat *)v277, (cv::Mat *)2, (const int *)v273, v39);
  uint64_t v274 = (char *)v273 + 8;
  long long v275 = (cv *)v276;
  v276[1] = 0;
  v276[0] = 0;
  LODWORD(v273[0]) = 1124007936;
  memset((char *)v273 + 4, 0, 48);
  v273[3] = 0u;
  v264[0] = (void *)__PAIR64__(v45, v46);
  cv::Mat::create((cv::Mat *)v273, (cv::Mat *)2, (const int *)v264, v39);
  int v52 = 0;
  int v189 = (v23 >> 3) & 0x1FF;
  char v53 = 2 * v182;
  if (v187 && v182 != v39) {
    int v52 = (v226[2] * v226[3]) << ((0xFA50u >> v53) & 3);
  }
  if (v189 && v26 != v39 && v52 <= ((v167 + v226[2] - 1) * (v168 + v226[3] - 1)) << ((0xFA50u >> (2 * v26)) & 3)) {
    int v52 = ((v167 + v226[2] - 1) * (v168 + v226[3] - 1)) << ((0xFA50u >> (2 * v26)) & 3);
  }
  char v54 = 2 * v166;
  if ((((unsigned __int16)v23 | a5) & 0xFF8) != 0 && v166 != v39 && v52 <= (v167 * v168) << ((0xFA50u >> v54) & 3)) {
    int v52 = (v167 * v168) << ((0xFA50u >> v54) & 3);
  }
  int v171 = this;
  int v181 = v23 & 7;
  int v185 = v46;
  int v186 = v45;
  char v175 = 2 * v166;
  if (v52 <= (unint64_t)(v235 - (unsigned char *)v234))
  {
    if (v52 < (unint64_t)(v235 - (unsigned char *)v234)) {
      uint64_t v235 = (char *)v234 + v52;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)&v234, v52 - (v235 - (unsigned char *)v234));
  }
  unsigned int v55 = 0;
  unsigned int v180 = (0xFA50u >> v53) & 3;
  do
  {
    *(_OWORD *)uint64_t v264 = *(_OWORD *)v226;
    long long v266 = v228;
    double v267 = v229;
    long long v265 = v227;
    double v268 = v230;
    uint64_t v269 = &v264[1];
    unint64_t v270 = (cv *)&v271;
    uint64_t v271 = 0;
    double v272 = 0;
    if ((void)v228) {
      atomic_fetch_add((atomic_uint *volatile)v228, 1u);
    }
    if (v226[1] > 2)
    {
      HIDWORD(v264[0]) = 0;
      cv::Mat::copySize((cv::Mat *)v264, (const cv::Mat *)v226);
    }
    else
    {
      int v56 = v232;
      int v57 = v270;
      *(void *)unint64_t v270 = *(void *)v232;
      *((void *)v57 + 1) = *((void *)v56 + 1);
    }
    v210.i32[0] = 0;
    v210.i32[1] = v55 * v51;
    v210.i64[1] = __PAIR64__(v51, v45);
    cv::Mat::Mat(__p, v277, &v210);
    v255.i32[0] = 0;
    v255.i32[1] = v55 * v51;
    v255.u64[1] = (unint64_t)vrev64_s32(*(int32x2_t *)&v226[2]);
    cv::Mat::Mat(&v210, v277, &v255);
    if (v187)
    {
      if (v182 == v39)
      {
        int v255 = v210;
        uint64_t v257 = v212;
        uint64_t v258 = v213;
        int v256 = v211;
        uint64_t v259 = v214;
        uint64_t v260 = &v255.i8[8];
        uint64_t v261 = (cv *)&v262;
        uint64_t v262 = 0;
        uint64_t v263 = 0;
        if ((void)v212) {
          atomic_fetch_add((atomic_uint *volatile)v212, 1u);
        }
        if (v210.i32[1] > 2)
        {
          v255.i32[1] = 0;
          cv::Mat::copySize((cv::Mat *)&v255, (const cv::Mat *)&v210);
        }
        else
        {
          BOOL v60 = v216;
          unsigned int v61 = v261;
          *(void *)uint64_t v261 = *(void *)v216;
          *((void *)v61 + 1) = *((void *)v60 + 1);
        }
      }
      else
      {
        uint64_t v59 = v231[1];
        v255.i32[2] = *v231;
        v255.i32[3] = v59;
        int v256 = v234;
        *(void *)&uint64_t v257 = 0;
        uint64_t v260 = &v255.i8[8];
        uint64_t v261 = (cv *)&v262;
        v255.i32[1] = 2;
        v255.i32[0] = v182 | 0x42FF4000;
        uint64_t v262 = v59 << v180;
        uint64_t v263 = (1 << ((0xFA50u >> v53) & 3));
        uint64_t v259 = 0;
        *((void *)&v258 + 1) = (char *)v234 + (v59 << v180) * v255.i32[2];
        *((void *)&v257 + 1) = v234;
        *(void *)&uint64_t v258 = *((void *)&v258 + 1);
      }
      if ((void)v257) {
        atomic_fetch_add((atomic_uint *volatile)v257, 1u);
      }
      if ((void)v266 && atomic_fetch_add((atomic_uint *volatile)v266, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v264, v58);
      }
      long long v265 = 0;
      double v267 = 0uLL;
      *((void *)&v266 + 1) = 0;
      if ((uint64_t)v264[0] <= 0)
      {
        *(void *)&long long v266 = 0;
        LODWORD(v264[0]) = v255.i32[0];
      }
      else
      {
        uint64_t v62 = 0;
        __int32 v63 = v269;
        do
          *((_DWORD *)v63 + v62++) = 0;
        while (v62 < SHIDWORD(v264[0]));
        *(void *)&long long v266 = 0;
        LODWORD(v264[0]) = v255.i32[0];
        if (SHIDWORD(v264[0]) > 2) {
          goto LABEL_100;
        }
      }
      if (v255.i32[1] <= 2)
      {
        HIDWORD(v264[0]) = v255.i32[1];
        v264[1] = (void *)v255.i64[1];
        __int32 v64 = v261;
        BOOL v65 = v270;
        *(void *)unint64_t v270 = *(void *)v261;
        *((void *)v65 + 1) = *((void *)v64 + 1);
        goto LABEL_101;
      }
LABEL_100:
      cv::Mat::copySize((cv::Mat *)v264, (const cv::Mat *)&v255);
LABEL_101:
      double v267 = v258;
      long long v266 = v257;
      long long v265 = v256;
      double v268 = v259;
      if ((void)v257 && atomic_fetch_add((atomic_uint *volatile)v257, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)&v255, v58);
      }
      int v256 = 0;
      uint64_t v258 = 0uLL;
      *((void *)&v257 + 1) = 0;
      if (v255.i32[1] >= 1)
      {
        uint64_t v66 = 0;
        int v67 = v260;
        do
          *(_DWORD *)&v67[4 * v66++] = 0;
        while (v66 < v255.i32[1]);
      }
      *(void *)&uint64_t v257 = 0;
      if (v261 != (cv *)&v262) {
        cv::fastFree((void **)v261, v58);
      }
      v255.i64[0] = v55;
      cv::mixChannels((cv *)v226, (const cv::Mat *)1, (unint64_t)v264, (cv::Mat *)1, (unint64_t)&v255, (const int *)1);
    }
    if (v211 != v265)
    {
      cv::_OutputArray::_OutputArray((uint64_t)&v255, (cv::Mat *)&v210);
      cv::Mat::convertTo((cv::Mat *)v264, (const cv::_OutputArray *)&v255, v210.i8[0] & 7, 1.0, 0.0);
    }
    if (SHIDWORD(__p[1]) > v226[3])
    {
      v200.i32[0] = 0;
      v200.i32[1] = v226[2];
      *(void *)&long long v192 = __PAIR64__(HIDWORD(__p[1]), v226[3]);
      cv::Mat::Mat(&v255, __p, &v200, &v192);
      int64x2_t v200 = 0u;
      long long v201 = 0u;
      cv::Mat::operator=((uint64_t)&v255, &v200);
      if ((void)v257 && atomic_fetch_add((atomic_uint *volatile)v257, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)&v255, v68);
      }
      int v256 = 0;
      uint64_t v258 = 0uLL;
      *((void *)&v257 + 1) = 0;
      if (v255.i32[1] >= 1)
      {
        uint64_t v69 = 0;
        __int32 v70 = v260;
        do
          *(_DWORD *)&v70[4 * v69++] = 0;
        while (v69 < v255.i32[1]);
      }
      *(void *)&uint64_t v257 = 0;
      if (v261 != (cv *)&v262) {
        cv::fastFree((void **)v261, v68);
      }
    }
    cv::_InputArray::_InputArray((uint64_t)&v255, (const cv::Mat *)__p);
    cv::_OutputArray::_OutputArray((uint64_t)&v200, (cv::Mat *)__p);
    cv::dft((cv *)&v255, (const cv::_InputArray *)&v200, 0);
    if ((void)v212 && atomic_fetch_add((atomic_uint *volatile)v212, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v210, v71);
    }
    int v211 = 0;
    long long v213 = 0uLL;
    *((void *)&v212 + 1) = 0;
    if (v210.i32[1] >= 1)
    {
      uint64_t v72 = 0;
      uint64_t v73 = v215;
      do
        *(_DWORD *)(v73 + 4 * v72++) = 0;
      while (v72 < v210.i32[1]);
    }
    *(void *)&long long v212 = 0;
    if (v216 != (cv *)v217) {
      cv::fastFree((void **)v216, v71);
    }
    if ((void)v220 && atomic_fetch_add((atomic_uint *volatile)v220, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)__p, v71);
    }
    int v219 = 0;
    long long v221 = 0uLL;
    *((void *)&v220 + 1) = 0;
    if (SHIDWORD(__p[0]) >= 1)
    {
      uint64_t v74 = 0;
      uint64_t v75 = v223;
      do
        *(_DWORD *)(v75 + 4 * v74++) = 0;
      while (v74 < SHIDWORD(__p[0]));
    }
    *(void *)&long long v220 = 0;
    if (v224 != (cv *)v225) {
      cv::fastFree((void **)v224, v71);
    }
    if ((void)v266 && atomic_fetch_add((atomic_uint *volatile)v266, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v264, v71);
    }
    long long v265 = 0;
    double v267 = 0uLL;
    *((void *)&v266 + 1) = 0;
    if (SHIDWORD(v264[0]) >= 1)
    {
      uint64_t v76 = 0;
      int v77 = v269;
      do
        *((_DWORD *)v77 + v76++) = 0;
      while (v76 < SHIDWORD(v264[0]));
    }
    *(void *)&long long v266 = 0;
    if (v270 != (cv *)&v271) {
      cv::fastFree((void **)v270, v71);
    }
    BOOL v78 = v55++ == v187;
  }
  while (!v78);
  uint64_t v79 = this;
  int v81 = *((_DWORD *)this + 2);
  int v80 = *((_DWORD *)this + 3);
  uint64_t v82 = *((void *)v179 + 7);
  int32x2_t v209 = vrev64_s32(**((int32x2_t **)v179 + 8));
  *(void *)int16x4x2_t v208 = 0;
  long long v83 = *(_OWORD *)v179;
  *(_OWORD *)uint64_t v264 = *(_OWORD *)v179;
  long long v84 = *(_OWORD *)((char *)v179 + 24);
  long long v266 = v84;
  double v267 = *(_OWORD *)((char *)v179 + 40);
  long long v265 = (void *)*((void *)v179 + 2);
  double v268 = v82;
  uint64_t v269 = &v264[1];
  unint64_t v270 = (cv *)&v271;
  double v272 = 0;
  uint64_t v271 = 0;
  if ((void)v84)
  {
    atomic_fetch_add((atomic_uint *volatile)v84, 1u);
    int v85 = *((_DWORD *)v179 + 1);
  }
  else
  {
    int v85 = DWORD1(v83);
  }
  if (v85 > 2)
  {
    HIDWORD(v264[0]) = 0;
    cv::Mat::copySize((cv::Mat *)v264, v179);
  }
  else
  {
    unsigned int v86 = (void *)*((void *)v179 + 9);
    unsigned int v87 = v270;
    *(void *)unint64_t v270 = *v86;
    *((void *)v87 + 1) = v86[1];
  }
  if ((v177 & 0x10) == 0)
  {
    cv::Mat::locateROI((uint64_t)v179, &v209, v208);
    cv::Mat::adjustROI((cv::Mat *)v264, v208[1], v209.i32[1] - (v208[1] + *((_DWORD *)v179 + 2)), v208[0], v209.i32[0] - (v208[0] + *((_DWORD *)v179 + 3)));
  }
  int v162 = (v167 + v81 - 1) / v167 * ((v168 + v80 - 1) / v168);
  int v163 = (v168 + v80 - 1) / v168;
  if (v162 >= 1)
  {
    int v88 = 0;
    unint64_t v161 = (0xFA50uLL >> (2 * v181)) & 3;
    unsigned int v160 = (0xFA50u >> v175) & 3;
    uint64_t v174 = (1 << ((0xFA50u >> v175) & 3));
    do
    {
      int v169 = v88;
      int v89 = v88 % v163 * v168;
      int v90 = v88 / v163 * v167;
      int v91 = *((_DWORD *)v79 + 2);
      if (*((_DWORD *)v79 + 3) - v89 >= v168) {
        int v92 = v168;
      }
      else {
        int v92 = *((_DWORD *)v79 + 3) - v89;
      }
      if (v91 - v90 >= v167) {
        int v93 = v167;
      }
      else {
        int v93 = v91 - v90;
      }
      int v188 = v92;
      int v94 = v226[3] + v92 - 1;
      unsigned int v170 = v93;
      int v95 = v226[2] + v93 - 1;
      int v183 = v88 % v163 * v168;
      int v96 = v89 - *a6 + v208[0];
      int v178 = v88 / v163 * v167;
      int v97 = v90 - a6[1] + v208[1];
      int v98 = v97 & ~(v97 >> 31);
      if (v96 + v94 >= SHIDWORD(v264[1])) {
        int v99 = HIDWORD(v264[1]);
      }
      else {
        int v99 = v96 + v94;
      }
      if (v97 + v95 >= SLODWORD(v264[1])) {
        int v100 = (int)v264[1];
      }
      else {
        int v100 = v97 + v95;
      }
      v210.i32[0] = v97 & ~(v97 >> 31);
      v210.i32[1] = v100;
      int v101 = v96 & ~(v96 >> 31);
      v255.i64[0] = __PAIR64__(v99, v101);
      cv::Mat::Mat(__p, v264, &v210, &v255);
      v255.i64[0] = 0;
      v255.i64[1] = __PAIR64__(v95, v94);
      cv::Mat::Mat(&v210, v273, &v255);
      v200.i32[0] = v101 - v96;
      v200.i32[1] = v98 - v97;
      __int32 v173 = v100 - v98;
      v200.i32[2] = v99 - v101;
      v200.i32[3] = v100 - v98;
      cv::Mat::Mat(&v255, v273, &v200);
      *(void *)&long long v192 = __PAIR64__(v178, v183);
      *((void *)&v192 + 1) = __PAIR64__(v170, v188);
      cv::Mat::Mat(&v200, v171, &v192);
      unsigned int v102 = 0;
      uint64_t v172 = ((uint64_t)(v99 - v101) << v161) * v173;
      BOOL v104 = v99 - v101 < v94 || v173 < v95;
      BOOL v184 = v104;
      uint64_t v176 = ((uint64_t)v188 << v160) * (int)v170;
      do
      {
        int v193 = v219;
        long long v192 = *(_OWORD *)__p;
        long long v194 = v220;
        long long v195 = v221;
        uint64_t v196 = v222;
        double v197 = (char *)&v192 + 8;
        int v198 = (cv *)v199;
        v199[0] = 0;
        v199[1] = 0;
        if ((void)v220) {
          atomic_fetch_add((atomic_uint *volatile)v220, 1u);
        }
        if (SHIDWORD(__p[0]) > 2)
        {
          DWORD1(v192) = 0;
          cv::Mat::copySize((cv::Mat *)&v192, (const cv::Mat *)__p);
        }
        else
        {
          uint64_t v105 = v224;
          uint64_t v106 = v198;
          *(void *)int v198 = *(void *)v224;
          *((void *)v106 + 1) = *((void *)v105 + 1);
        }
        *(_OWORD *)uint64_t v248 = 0u;
        double v247 = 0u;
        cv::Mat::operator=((uint64_t)v273, &v247);
        if (v189)
        {
          if (v181 == v39)
          {
            double v247 = v255;
            *(_OWORD *)&v248[8] = v257;
            uint64_t v249 = v258;
            *(void *)uint64_t v248 = v256;
            uint64_t v250 = v259;
            uint64_t v251 = &v247.i64[1];
            BOOL v252 = (cv *)&v253;
            uint64_t v253 = 0;
            uint64_t v254 = 0;
            if ((void)v257) {
              atomic_fetch_add((atomic_uint *volatile)v257, 1u);
            }
            if (v255.i32[1] > 2)
            {
              v247.i32[1] = 0;
              cv::Mat::copySize((cv::Mat *)&v247, (const cv::Mat *)&v255);
            }
            else
            {
              int v108 = v261;
              uint64_t v109 = v252;
              *(void *)BOOL v252 = *(void *)v261;
              *((void *)v109 + 1) = *((void *)v108 + 1);
            }
          }
          else
          {
            v247.i32[2] = v173;
            v247.i32[3] = v99 - v101;
            *(_OWORD *)uint64_t v248 = (unint64_t)v234;
            uint64_t v251 = &v247.i64[1];
            BOOL v252 = (cv *)&v253;
            v247.i32[1] = 2;
            v247.i32[0] = v181 | 0x42FF4000;
            uint64_t v253 = (uint64_t)(v99 - v101) << v161;
            uint64_t v254 = 1 << v161;
            uint64_t v250 = 0;
            *((void *)&v249 + 1) = (char *)v234 + v172;
            *(void *)&v248[16] = v234;
            *(void *)&uint64_t v249 = (char *)v234 + v172;
          }
          if (*(void *)&v248[8]) {
            atomic_fetch_add(*(atomic_uint *volatile *)&v248[8], 1u);
          }
          if ((void)v194 && atomic_fetch_add((atomic_uint *volatile)v194, 0xFFFFFFFF) == 1) {
            cv::Mat::deallocate((cv::Mat *)&v192, v107);
          }
          int v193 = 0;
          long long v195 = 0uLL;
          *((void *)&v194 + 1) = 0;
          if ((uint64_t)v192 <= 0)
          {
            *(void *)&long long v194 = 0;
            LODWORD(v192) = v247.i32[0];
          }
          else
          {
            uint64_t v110 = 0;
            uint64_t v111 = v197;
            do
              *(_DWORD *)&v111[4 * v110++] = 0;
            while (v110 < SDWORD1(v192));
            *(void *)&long long v194 = 0;
            LODWORD(v192) = v247.i32[0];
            if (SDWORD1(v192) > 2)
            {
LABEL_202:
              cv::Mat::copySize((cv::Mat *)&v192, (const cv::Mat *)&v247);
              goto LABEL_203;
            }
          }
          if (v247.i32[1] > 2) {
            goto LABEL_202;
          }
          DWORD1(v192) = v247.i32[1];
          *((void *)&v192 + 1) = v247.i64[1];
          unint64_t v112 = v252;
          int v113 = v198;
          *(void *)int v198 = *(void *)v252;
          *((void *)v113 + 1) = *((void *)v112 + 1);
LABEL_203:
          int v193 = *(void **)v248;
          long long v195 = v249;
          long long v194 = *(_OWORD *)&v248[8];
          uint64_t v196 = v250;
          if (*(void *)&v248[8] && atomic_fetch_add(*(atomic_uint *volatile *)&v248[8], 0xFFFFFFFF) == 1) {
            cv::Mat::deallocate((cv::Mat *)&v247, v107);
          }
          *(void *)uint64_t v248 = 0;
          uint64_t v249 = 0uLL;
          *(void *)&v248[16] = 0;
          if (v247.i32[1] >= 1)
          {
            uint64_t v114 = 0;
            int16x8_t v115 = v251;
            do
              *((_DWORD *)v115 + v114++) = 0;
            while (v114 < v247.i32[1]);
          }
          *(void *)&v248[8] = 0;
          if (v252 != (cv *)&v253) {
            cv::fastFree((void **)v252, v107);
          }
          v247.i64[0] = v102;
          cv::mixChannels((cv *)__p, (const cv::Mat *)1, (unint64_t)&v192, (cv::Mat *)1, (unint64_t)&v247, (const int *)1);
        }
        if (v256 != v193)
        {
          cv::_OutputArray::_OutputArray((uint64_t)&v247, (cv::Mat *)&v255);
          cv::Mat::convertTo((cv::Mat *)&v192, (const cv::_OutputArray *)&v247, v255.i8[0] & 7, 1.0, 0.0);
        }
        if (v184)
        {
          cv::_InputArray::_InputArray((uint64_t)&v247, (const cv::Mat *)&v255);
          cv::_OutputArray::_OutputArray((uint64_t)&v237, (cv::Mat *)&v210);
          memset(v191, 0, sizeof(v191));
          cv::copyMakeBorder((uint64_t)&v247, (uint64_t)&v237);
        }
        cv::_InputArray::_InputArray((uint64_t)&v247, (const cv::Mat *)v273);
        cv::_OutputArray::_OutputArray((uint64_t)&v237, (cv::Mat *)v273);
        cv::dft((cv *)&v247, (const cv::_InputArray *)&v237, 0);
        int v116 = v102 * v185;
        if (!v187) {
          int v116 = 0;
        }
        LODWORD(v237) = 0;
        HIDWORD(v237) = v116;
        double v238 = __PAIR64__(v185, v186);
        cv::Mat::Mat(&v247, v277, &v237);
        cv::_InputArray::_InputArray((uint64_t)&v237, (const cv::Mat *)v273);
        cv::_InputArray::_InputArray((uint64_t)v191, (const cv::Mat *)&v247);
        cv::_OutputArray::_OutputArray((uint64_t)v190, (cv::Mat *)v273);
        cv::mulSpectrums(&v237, (const cv::_InputArray *)v191, (const cv::_InputArray *)v190, 0, 1);
        cv::_InputArray::_InputArray((uint64_t)&v237, (const cv::Mat *)v273);
        cv::_OutputArray::_OutputArray((uint64_t)v191, (cv::Mat *)v273);
        cv::dft((cv *)&v237, (const cv::_InputArray *)v191, (const cv::_OutputArray *)3);
        *(void *)&v191[0] = 0;
        *((void *)&v191[0] + 1) = __PAIR64__(v170, v188);
        cv::Mat::Mat(&v237, v273, v191);
        if ((void)v240) {
          atomic_fetch_add((atomic_uint *volatile)v240, 1u);
        }
        if ((void)v194 && atomic_fetch_add((atomic_uint *volatile)v194, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)&v192, v117);
        }
        int v193 = 0;
        long long v195 = 0uLL;
        *((void *)&v194 + 1) = 0;
        if ((uint64_t)v192 <= 0)
        {
          *(void *)&long long v194 = 0;
          LODWORD(v192) = v237;
        }
        else
        {
          uint64_t v118 = 0;
          int v119 = v197;
          do
            *(_DWORD *)&v119[4 * v118++] = 0;
          while (v118 < SDWORD1(v192));
          *(void *)&long long v194 = 0;
          LODWORD(v192) = v237;
          if (SDWORD1(v192) > 2)
          {
LABEL_231:
            cv::Mat::copySize((cv::Mat *)&v192, (const cv::Mat *)&v237);
            goto LABEL_232;
          }
        }
        if (SHIDWORD(v237) > 2) {
          goto LABEL_231;
        }
        DWORD1(v192) = HIDWORD(v237);
        *((void *)&v192 + 1) = v238;
        __int32 v120 = v244;
        uint64_t v121 = v198;
        *(void *)int v198 = *(void *)v244;
        *((void *)v121 + 1) = *((void *)v120 + 1);
LABEL_232:
        int v193 = v239;
        long long v195 = v241;
        long long v194 = v240;
        uint64_t v196 = v242;
        if ((void)v240 && atomic_fetch_add((atomic_uint *volatile)v240, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)&v237, v117);
        }
        double v239 = 0;
        double v241 = 0uLL;
        *((void *)&v240 + 1) = 0;
        if (SHIDWORD(v237) >= 1)
        {
          uint64_t v122 = 0;
          uint64_t v123 = v243;
          do
            *((_DWORD *)v123 + v122++) = 0;
          while (v122 < SHIDWORD(v237));
        }
        *(void *)&double v240 = 0;
        if (v244 != (cv *)&v245) {
          cv::fastFree((void **)v244, v117);
        }
        if (v164)
        {
          if (v166 != v39)
          {
            double v238 = __PAIR64__(v188, v170);
            double v239 = v234;
            *(void *)&double v240 = 0;
            uint64_t v243 = &v238;
            int v244 = (cv *)&v245;
            HIDWORD(v237) = 2;
            LODWORD(v237) = v166 | 0x42FF4000;
            int v245 = (uint64_t)v188 << v160;
            double v246 = v174;
            int32x2_t v242 = 0;
            *((void *)&v241 + 1) = (char *)v234 + v176;
            *((void *)&v240 + 1) = v234;
            *(void *)&double v241 = (char *)v234 + v176;
            cv::_OutputArray::_OutputArray((uint64_t)v191, (cv::Mat *)&v237);
            cv::Mat::convertTo((cv::Mat *)&v192, (const cv::_OutputArray *)v191, v166, 1.0, a8);
            if ((void)v240) {
              atomic_fetch_add((atomic_uint *volatile)v240, 1u);
            }
            if ((void)v194 && atomic_fetch_add((atomic_uint *volatile)v194, 0xFFFFFFFF) == 1) {
              cv::Mat::deallocate((cv::Mat *)&v192, v124);
            }
            int v193 = 0;
            long long v195 = 0uLL;
            *((void *)&v194 + 1) = 0;
            if ((uint64_t)v192 <= 0)
            {
              *(void *)&long long v194 = 0;
              LODWORD(v192) = v237;
            }
            else
            {
              uint64_t v125 = 0;
              uint64_t v126 = v197;
              do
                *(_DWORD *)&v126[4 * v125++] = 0;
              while (v125 < SDWORD1(v192));
              *(void *)&long long v194 = 0;
              LODWORD(v192) = v237;
              if (SDWORD1(v192) > 2)
              {
LABEL_268:
                cv::Mat::copySize((cv::Mat *)&v192, (const cv::Mat *)&v237);
                goto LABEL_269;
              }
            }
            if (SHIDWORD(v237) > 2) {
              goto LABEL_268;
            }
            DWORD1(v192) = HIDWORD(v237);
            *((void *)&v192 + 1) = v238;
            double v130 = v244;
            unint64_t v131 = v198;
            *(void *)int v198 = *(void *)v244;
            *((void *)v131 + 1) = *((void *)v130 + 1);
LABEL_269:
            int v193 = v239;
            long long v195 = v241;
            long long v194 = v240;
            uint64_t v196 = v242;
            if ((void)v240 && atomic_fetch_add((atomic_uint *volatile)v240, 0xFFFFFFFF) == 1) {
              cv::Mat::deallocate((cv::Mat *)&v237, v124);
            }
            double v239 = 0;
            double v241 = 0uLL;
            *((void *)&v240 + 1) = 0;
            if (SHIDWORD(v237) >= 1)
            {
              uint64_t v132 = 0;
              unint64_t v133 = v243;
              do
                *((_DWORD *)v133 + v132++) = 0;
              while (v132 < SHIDWORD(v237));
            }
            *(void *)&double v240 = 0;
            if (v244 != (cv *)&v245) {
              cv::fastFree((void **)v244, v124);
            }
          }
          LODWORD(v237) = 0;
          HIDWORD(v237) = v102;
          cv::mixChannels((cv *)&v192, (const cv::Mat *)1, (unint64_t)&v200, (cv::Mat *)1, (unint64_t)&v237, (const int *)1);
          goto LABEL_291;
        }
        if (v102)
        {
          if (v166 != v39)
          {
            double v238 = __PAIR64__(v188, v170);
            double v239 = v234;
            *(void *)&double v240 = 0;
            uint64_t v243 = &v238;
            int v244 = (cv *)&v245;
            HIDWORD(v237) = 2;
            LODWORD(v237) = v166 | 0x42FF4000;
            int v245 = (uint64_t)v188 << v160;
            double v246 = v174;
            int32x2_t v242 = 0;
            *((void *)&v241 + 1) = (char *)v234 + v176;
            *((void *)&v240 + 1) = v234;
            *(void *)&double v241 = (char *)v234 + v176;
            cv::_OutputArray::_OutputArray((uint64_t)v191, (cv::Mat *)&v237);
            cv::Mat::convertTo((cv::Mat *)&v192, (const cv::_OutputArray *)v191, v166, 1.0, 0.0);
            if ((void)v240) {
              atomic_fetch_add((atomic_uint *volatile)v240, 1u);
            }
            if ((void)v194 && atomic_fetch_add((atomic_uint *volatile)v194, 0xFFFFFFFF) == 1) {
              cv::Mat::deallocate((cv::Mat *)&v192, v127);
            }
            int v193 = 0;
            long long v195 = 0uLL;
            *((void *)&v194 + 1) = 0;
            if ((uint64_t)v192 <= 0)
            {
              *(void *)&long long v194 = 0;
              LODWORD(v192) = v237;
            }
            else
            {
              uint64_t v128 = 0;
              char v129 = v197;
              do
                *(_DWORD *)&v129[4 * v128++] = 0;
              while (v128 < SDWORD1(v192));
              *(void *)&long long v194 = 0;
              LODWORD(v192) = v237;
              if (SDWORD1(v192) > 2)
              {
LABEL_281:
                cv::Mat::copySize((cv::Mat *)&v192, (const cv::Mat *)&v237);
                goto LABEL_282;
              }
            }
            if (SHIDWORD(v237) > 2) {
              goto LABEL_281;
            }
            DWORD1(v192) = HIDWORD(v237);
            *((void *)&v192 + 1) = v238;
            unint64_t v134 = v244;
            uint64_t v135 = v198;
            *(void *)int v198 = *(void *)v244;
            *((void *)v135 + 1) = *((void *)v134 + 1);
LABEL_282:
            int v193 = v239;
            long long v195 = v241;
            long long v194 = v240;
            uint64_t v196 = v242;
            if ((void)v240 && atomic_fetch_add((atomic_uint *volatile)v240, 0xFFFFFFFF) == 1) {
              cv::Mat::deallocate((cv::Mat *)&v237, v127);
            }
            double v239 = 0;
            double v241 = 0uLL;
            *((void *)&v240 + 1) = 0;
            if (SHIDWORD(v237) >= 1)
            {
              uint64_t v136 = 0;
              float v137 = v243;
              do
                *((_DWORD *)v137 + v136++) = 0;
              while (v136 < SHIDWORD(v237));
            }
            *(void *)&double v240 = 0;
            if (v244 != (cv *)&v245) {
              cv::fastFree((void **)v244, v127);
            }
          }
          cv::_InputArray::_InputArray((uint64_t)&v237, (const cv::Mat *)&v192);
          cv::_InputArray::_InputArray((uint64_t)v191, (const cv::Mat *)&v200);
          float v138 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v190, (cv::Mat *)&v200);
          unint64_t v139 = cv::noArray(v138);
          cv::add((uint64_t)&v237, (uint64_t)v191, (const cv::_InputArray *)v190, (const cv::_OutputArray *)v139, (const cv::_InputArray *)0xFFFFFFFFLL);
          goto LABEL_291;
        }
        cv::_OutputArray::_OutputArray((uint64_t)&v237, (cv::Mat *)&v200);
        cv::Mat::convertTo((cv::Mat *)&v192, (const cv::_OutputArray *)&v237, v166, 1.0, a8);
LABEL_291:
        if (*(void *)&v248[8] && atomic_fetch_add(*(atomic_uint *volatile *)&v248[8], 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)&v247, v71);
        }
        *(void *)uint64_t v248 = 0;
        uint64_t v249 = 0uLL;
        *(void *)&v248[16] = 0;
        if (v247.i32[1] >= 1)
        {
          uint64_t v140 = 0;
          unint64_t v141 = v251;
          do
            *((_DWORD *)v141 + v140++) = 0;
          while (v140 < v247.i32[1]);
        }
        *(void *)&v248[8] = 0;
        if (v252 != (cv *)&v253) {
          cv::fastFree((void **)v252, v71);
        }
        if ((void)v194 && atomic_fetch_add((atomic_uint *volatile)v194, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)&v192, v71);
        }
        int v193 = 0;
        long long v195 = 0uLL;
        *((void *)&v194 + 1) = 0;
        if (SDWORD1(v192) >= 1)
        {
          uint64_t v142 = 0;
          uint64_t v143 = v197;
          do
            *(_DWORD *)&v143[4 * v142++] = 0;
          while (v142 < SDWORD1(v192));
        }
        *(void *)&long long v194 = 0;
        if (v198 != (cv *)v199) {
          cv::fastFree((void **)v198, v71);
        }
        BOOL v78 = v102++ == v189;
      }
      while (!v78);
      uint64_t v79 = v171;
      if (*((void *)&v201 + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v201 + 1), 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)&v200, v71);
      }
      *(void *)&long long v201 = 0;
      uint64_t v203 = 0;
      uint64_t v204 = 0;
      uint64_t v202 = 0;
      if (v200.i32[1] >= 1)
      {
        uint64_t v144 = 0;
        uint64_t v145 = v205;
        do
          *(_DWORD *)(v145 + 4 * v144++) = 0;
        while (v144 < v200.i32[1]);
      }
      *((void *)&v201 + 1) = 0;
      if (v206 != (cv *)&v207) {
        cv::fastFree((void **)v206, v71);
      }
      if ((void)v257 && atomic_fetch_add((atomic_uint *volatile)v257, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)&v255, v71);
      }
      int v256 = 0;
      uint64_t v258 = 0uLL;
      *((void *)&v257 + 1) = 0;
      if (v255.i32[1] >= 1)
      {
        uint64_t v146 = 0;
        uint64_t v147 = v260;
        do
          *(_DWORD *)&v147[4 * v146++] = 0;
        while (v146 < v255.i32[1]);
      }
      *(void *)&uint64_t v257 = 0;
      if (v261 != (cv *)&v262) {
        cv::fastFree((void **)v261, v71);
      }
      if ((void)v212 && atomic_fetch_add((atomic_uint *volatile)v212, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)&v210, v71);
      }
      int v211 = 0;
      long long v213 = 0uLL;
      *((void *)&v212 + 1) = 0;
      if (v210.i32[1] >= 1)
      {
        uint64_t v148 = 0;
        uint64_t v149 = v215;
        do
          *(_DWORD *)(v149 + 4 * v148++) = 0;
        while (v148 < v210.i32[1]);
      }
      *(void *)&long long v212 = 0;
      if (v216 != (cv *)v217) {
        cv::fastFree((void **)v216, v71);
      }
      if ((void)v220 && atomic_fetch_add((atomic_uint *volatile)v220, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)__p, v71);
      }
      int v219 = 0;
      long long v221 = 0uLL;
      *((void *)&v220 + 1) = 0;
      if (SHIDWORD(__p[0]) >= 1)
      {
        uint64_t v150 = 0;
        uint64_t v151 = v223;
        do
          *(_DWORD *)(v151 + 4 * v150++) = 0;
        while (v150 < SHIDWORD(__p[0]));
      }
      *(void *)&long long v220 = 0;
      if (v224 != (cv *)v225) {
        cv::fastFree((void **)v224, v71);
      }
      int v88 = v169 + 1;
    }
    while (v169 + 1 != v162);
  }
  if ((void)v266 && atomic_fetch_add((atomic_uint *volatile)v266, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v264, v71);
  }
  long long v265 = 0;
  double v267 = 0uLL;
  *((void *)&v266 + 1) = 0;
  if (SHIDWORD(v264[0]) >= 1)
  {
    uint64_t v152 = 0;
    uint64_t v153 = v269;
    do
      *((_DWORD *)v153 + v152++) = 0;
    while (v152 < SHIDWORD(v264[0]));
  }
  *(void *)&long long v266 = 0;
  if (v270 != (cv *)&v271) {
    cv::fastFree((void **)v270, v71);
  }
  if (*((void *)&v273[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v273[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v273, v71);
  }
  *(void *)&v273[1] = 0;
  memset(&v273[2], 0, 24);
  if (SDWORD1(v273[0]) >= 1)
  {
    uint64_t v154 = 0;
    float v155 = v274;
    do
      *(_DWORD *)&v155[4 * v154++] = 0;
    while (v154 < SDWORD1(v273[0]));
  }
  *((void *)&v273[1] + 1) = 0;
  if (v275 != (cv *)v276) {
    cv::fastFree((void **)v275, v71);
  }
  if (*(void *)&v277[6] && atomic_fetch_add(*(atomic_uint *volatile *)&v277[6], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v277, v71);
  }
  *(void *)&v277[4] = 0;
  memset(&v277[8], 0, 24);
  if (v277[1] >= 1)
  {
    uint64_t v156 = 0;
    uint64_t v157 = v278;
    do
      v157[v156++] = 0;
    while (v156 < v277[1]);
  }
  *(void *)&v277[6] = 0;
  if (v279 != v280) {
    cv::fastFree(v279, v71);
  }
  if ((void)v228 && atomic_fetch_add((atomic_uint *volatile)v228, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v226, v71);
  }
  uint64_t v227 = 0;
  long long v229 = 0uLL;
  *((void *)&v228 + 1) = 0;
  if (v226[1] >= 1)
  {
    uint64_t v158 = 0;
    unint64_t v159 = v231;
    do
      v159[v158++] = 0;
    while (v158 < v226[1]);
  }
  *(void *)&long long v228 = 0;
  if (v232 != (cv *)v233) {
    cv::fastFree((void **)v232, v71);
  }
  if (v234)
  {
    uint64_t v235 = (char *)v234;
    operator delete(v234);
  }
}

void sub_225ED0838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  cv::Exception::~Exception((cv::Exception *)(v10 - 240));
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  if (SLOBYTE(STACK[0x517]) < 0) {
    operator delete((void *)STACK[0x500]);
  }
  if (SLOBYTE(STACK[0x577]) < 0) {
    operator delete((void *)STACK[0x560]);
  }
  if (STACK[0x378] && atomic_fetch_add((atomic_uint *volatile)STACK[0x378], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&STACK[0x360], v12);
  }
  STACK[0x370] = 0;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (SLODWORD(STACK[0x364]) >= 1)
  {
    uint64_t v13 = 0;
    unint64_t v14 = STACK[0x3A0];
    do
      *(_DWORD *)(v14 + 4 * v13++) = 0;
    while (v13 < SLODWORD(STACK[0x364]));
  }
  STACK[0x378] = 0;
  if (STACK[0x3A8] != a10) {
    cv::fastFree((void **)STACK[0x3A8], v12);
  }
  long long v15 = (void *)STACK[0x3C8];
  if (STACK[0x3C8])
  {
    STACK[0x3D0] = (unint64_t)v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void cv::getRowSumFilter(cv *this, uint64_t a2)
{
  if ((((unsigned __int16)a2 ^ (unsigned __int16)this) & 0xFF8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "CV_MAT_CN(sumType) == CV_MAT_CN(srcType)");
    std::string::basic_string[abi:ne180100]<0>(v7, "getRowSumFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
    cv::Exception::Exception(v9, 4294967081, v8, v7, __p, 619);
    cv::error((cv *)v9, v2);
  }
  int v3 = a2 & 7;
  int v4 = this & 7;
  if ((this & 7) == 0 && v3 == 4) {
    operator new();
  }
  if ((this & 7) == 0 && v3 == 6) {
    operator new();
  }
  if (v4 == 2 && v3 == 4) {
    operator new();
  }
  if (v4 == 2 && v3 == 6) {
    operator new();
  }
  if (v4 == 3 && v3 == 4) {
    operator new();
  }
  if (v4 == 4 && v3 == 4) {
    operator new();
  }
  if (v4 == 3 && v3 == 6) {
    operator new();
  }
  if (v4 == 5 && v3 == 6) {
    operator new();
  }
  if (v4 == 6 && v3 == 6) {
    operator new();
  }
  cv::format(v8, this, a2);
  std::string::basic_string[abi:ne180100]<0>(v7, "getRowSumFilter");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
  cv::Exception::Exception(v9, 4294967083, v8, v7, __p, 645);
  cv::error((cv *)v9, v5);
}

void sub_225ED12F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void cv::getColumnSumFilter(cv *this, uint64_t a2, double a3)
{
  if ((((unsigned __int16)a2 ^ (unsigned __int16)this) & 0xFF8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "CV_MAT_CN(sumType) == CV_MAT_CN(dstType)");
    std::string::basic_string[abi:ne180100]<0>(v8, "getColumnSumFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
    cv::Exception::Exception(v10, 4294967081, v9, v8, __p, 655);
    cv::error((cv *)v10, v3);
  }
  int v4 = this & 7;
  int v5 = a2 & 7;
  if (v4 == 4 && (a2 & 7) == 0) {
    operator new();
  }
  if (v4 == 6 && (a2 & 7) == 0) {
    operator new();
  }
  if (v4 == 4 && v5 == 2) {
    operator new();
  }
  if (v4 == 6 && v5 == 2) {
    operator new();
  }
  if (v4 == 4 && v5 == 3) {
    operator new();
  }
  if (v4 == 6 && v5 == 3) {
    operator new();
  }
  if (v4 == 4 && v5 == 4) {
    operator new();
  }
  if (v4 == 4 && v5 == 5) {
    operator new();
  }
  if (v4 == 6 && v5 == 5) {
    operator new();
  }
  if (v4 == 4 && v5 == 6) {
    operator new();
  }
  if (v4 == 6 && v5 == 6) {
    operator new();
  }
  cv::format(v9, this, a2);
  std::string::basic_string[abi:ne180100]<0>(v8, "getColumnSumFilter");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
  cv::Exception::Exception(v10, 4294967083, v9, v8, __p, 685);
  cv::error((cv *)v10, v6);
}

void sub_225ED18AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void cv::createBoxFilter(cv *this, uint64_t a2, _DWORD *a3, uint64_t a4, int a5)
{
  if ((this & 7u) > 4
    || a5
    && ((this & 7) != 2 ? (int v5 = 0x10000) : (int v5 = 0x8000),
        (this & 7) != 0 ? (int v6 = v5) : (int v6 = 0x800000),
        a3[1] * *a3 > v6))
  {
    int v7 = 6;
  }
  else
  {
    int v7 = 4;
  }
  cv::getRowSumFilter(this, v7 | (unsigned __int16)this & 0xFF8u);
}

void sub_225ED1BCC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  cv::Ptr<cv::BaseFilter>::~Ptr((uint64_t *)va, a2);
  cv::Ptr<cv::BaseColumnFilter>::~Ptr((uint64_t *)va1, v9);
  cv::Ptr<cv::BaseRowFilter>::~Ptr((uint64_t *)va2, v10);
  _Unwind_Resume(a1);
}

void cv::boxFilter(void (***a1)(uint64_t *__return_ptr), uint64_t a2, int a3, _DWORD *a4, uint64_t *a5, int a6, char a7)
{
  (**a1)(&v19);
  char v13 = v19;
  if (a3 >= 0) {
    char v13 = a3;
  }
  int32x2_t v18 = vrev64_s32(*v22);
  (*(void (**)(uint64_t, int32x2_t *, uint64_t, uint64_t, void, void))(*(void *)a2 + 128))(a2, &v18, v19 & 0xFF8 | v13 & 7, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(uint64_t *__return_ptr, uint64_t, uint64_t))a2)(&v17, a2, 0xFFFFFFFFLL);
  if ((a7 & 0x10) != 0 && a6)
  {
    if (v20 == 1) {
      a4[1] = 1;
    }
    if (v21 == 1) {
      *a4 = 1;
    }
  }
  uint64_t v14 = *(void *)a4;
  uint64_t v15 = *a5;
  uint64_t v16 = v14;
  cv::createBoxFilter((cv *)(v19 & 0xFFF), v17 & 0xFFF, &v16, (uint64_t)&v15, a6);
}

void sub_225ED1F14(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  cv::Ptr<cv::FilterEngine>::~Ptr((uint64_t *)va, a2);
  cv::Mat::~Mat((cv::Mat *)va1, v11);
  cv::Mat::~Mat((cv::Mat *)(v9 - 160), v12);
  _Unwind_Resume(a1);
}

void cv::ColumnSum<int,unsigned char>::~ColumnSum(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D989300;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D989300;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void cv::ColumnSum<int,unsigned char>::operator()(uint64_t a1, int **a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v10 = a2;
  uint64_t v14 = *(void **)(a1 + 32);
  unint64_t v12 = (std::vector<int> *)(a1 + 32);
  uint64_t v13 = v14;
  double v15 = *(double *)&v12[-1].__end_;
  if (((unint64_t)((char *)v12->__end_ - (char *)v14) >> 2) == a6)
  {
    int v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      int v17 = *(_DWORD *)(a1 + 8) - 1;
      if (v16 != v17)
      {
        std::string::basic_string[abi:ne180100]<0>(v36, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v35, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v37, 4294967081, v36, v35, __p, 254);
        cv::error((cv *)v37, v18);
      }
      uint64_t v10 = &a2[v17];
      goto LABEL_13;
    }
  }
  else
  {
    std::vector<int>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    uint64_t v13 = *(void **)(a1 + 32);
  }
  bzero(v13, 4 * a6);
  int v19 = *(_DWORD *)(a1 + 24);
  for (int i = *(_DWORD *)(a1 + 8); v19 < i - 1; ++v10)
  {
    if (a6 >= 1)
    {
      int v21 = *v10;
      uint64_t v22 = a6;
      unsigned int v23 = v13;
      do
      {
        int v24 = *v21++;
        *v23++ += v24;
        --v22;
      }
      while (v22);
      int v19 = *(_DWORD *)(a1 + 24);
      int i = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 24) = ++v19;
  }
LABEL_13:
  while (a5)
  {
    uint64_t v25 = *v10;
    unsigned int v26 = v10[1 - *(int *)(a1 + 8)];
    if (v15 == 1.0)
    {
      if (a6 >= 1)
      {
        uint64_t v31 = 0;
        do
        {
          int v32 = v25[v31] + *((_DWORD *)v13 + v31);
          int v33 = v32 & ~(v32 >> 31);
          if (v33 >= 255) {
            LOBYTE(v33) = -1;
          }
          *(unsigned char *)(a3 + v31) = v33;
          *((_DWORD *)v13 + v31) = v32 - v26[v31];
          ++v31;
        }
        while (a6 != v31);
      }
    }
    else if (a6 >= 1)
    {
      uint64_t v27 = 0;
      do
      {
        int v28 = v25[v27] + *((_DWORD *)v13 + v27);
        double v29 = rint(v15 * (double)v28);
        int v30 = (uint64_t)v29 & ~((int)(uint64_t)v29 >> 31);
        if (v30 >= 255) {
          LOBYTE(v30) = -1;
        }
        *(unsigned char *)(a3 + v27) = v30;
        *((_DWORD *)v13 + v27) = v28 - v26[v27];
        ++v27;
      }
      while (a6 != v27);
    }
    a3 += a4;
    ++v10;
    --a5;
  }
}

void sub_225ED22A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<int,unsigned char>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<int,unsigned short>::~ColumnSum(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D989348;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D989348;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void cv::ColumnSum<int,unsigned short>::operator()(uint64_t a1, int **a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v10 = a2;
  uint64_t v14 = *(void **)(a1 + 32);
  unint64_t v12 = (std::vector<int> *)(a1 + 32);
  uint64_t v13 = v14;
  double v15 = *(double *)&v12[-1].__end_;
  if (((unint64_t)((char *)v12->__end_ - (char *)v14) >> 2) == a6)
  {
    int v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      int v17 = *(_DWORD *)(a1 + 8) - 1;
      if (v16 != v17)
      {
        std::string::basic_string[abi:ne180100]<0>(v36, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v35, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v37, 4294967081, v36, v35, __p, 531);
        cv::error((cv *)v37, v18);
      }
      uint64_t v10 = &a2[v17];
      goto LABEL_13;
    }
  }
  else
  {
    std::vector<int>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    uint64_t v13 = *(void **)(a1 + 32);
  }
  bzero(v13, 4 * a6);
  int v19 = *(_DWORD *)(a1 + 24);
  for (int i = *(_DWORD *)(a1 + 8); v19 < i - 1; ++v10)
  {
    if (a6 >= 1)
    {
      int v21 = *v10;
      uint64_t v22 = a6;
      unsigned int v23 = v13;
      do
      {
        int v24 = *v21++;
        *v23++ += v24;
        --v22;
      }
      while (v22);
      int v19 = *(_DWORD *)(a1 + 24);
      int i = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 24) = ++v19;
  }
LABEL_13:
  while (a5)
  {
    uint64_t v25 = *v10;
    unsigned int v26 = v10[1 - *(int *)(a1 + 8)];
    if (v15 == 1.0)
    {
      if (a6 >= 1)
      {
        uint64_t v31 = 0;
        do
        {
          int v32 = v25[v31] + *((_DWORD *)v13 + v31);
          int v33 = v32 & ~(v32 >> 31);
          if (v33 >= 0xFFFF) {
            LOWORD(v33) = -1;
          }
          *(_WORD *)(a3 + 2 * v31) = v33;
          *((_DWORD *)v13 + v31) = v32 - v26[v31];
          ++v31;
        }
        while (a6 != v31);
      }
    }
    else if (a6 >= 1)
    {
      uint64_t v27 = 0;
      do
      {
        int v28 = v25[v27] + *((_DWORD *)v13 + v27);
        double v29 = rint(v15 * (double)v28);
        int v30 = (uint64_t)v29 & ~((int)(uint64_t)v29 >> 31);
        if (v30 >= 0xFFFF) {
          LOWORD(v30) = -1;
        }
        *(_WORD *)(a3 + 2 * v27) = v30;
        *((_DWORD *)v13 + v27) = v28 - v26[v27];
        ++v27;
      }
      while (a6 != v27);
    }
    a3 += a4;
    ++v10;
    --a5;
  }
}

void sub_225ED2660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<int,unsigned short>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<int,short>::~ColumnSum(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D989390;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D989390;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void cv::ColumnSum<int,short>::operator()(uint64_t a1, int **a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v10 = a2;
  uint64_t v14 = *(void **)(a1 + 32);
  unint64_t v12 = (std::vector<int> *)(a1 + 32);
  uint64_t v13 = v14;
  double v15 = *(double *)&v12[-1].__end_;
  if (((unint64_t)((char *)v12->__end_ - (char *)v14) >> 2) == a6)
  {
    int v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      int v17 = *(_DWORD *)(a1 + 8) - 1;
      if (v16 != v17)
      {
        std::string::basic_string[abi:ne180100]<0>(v35, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v34, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v36, 4294967081, v35, v34, __p, 394);
        cv::error((cv *)v36, v18);
      }
      uint64_t v10 = &a2[v17];
      goto LABEL_13;
    }
  }
  else
  {
    std::vector<int>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    uint64_t v13 = *(void **)(a1 + 32);
  }
  bzero(v13, 4 * a6);
  int v19 = *(_DWORD *)(a1 + 24);
  for (int i = *(_DWORD *)(a1 + 8); v19 < i - 1; ++v10)
  {
    if (a6 >= 1)
    {
      int v21 = *v10;
      uint64_t v22 = a6;
      unsigned int v23 = v13;
      do
      {
        int v24 = *v21++;
        *v23++ += v24;
        --v22;
      }
      while (v22);
      int v19 = *(_DWORD *)(a1 + 24);
      int i = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 24) = ++v19;
  }
LABEL_13:
  while (a5)
  {
    uint64_t v25 = *v10;
    unsigned int v26 = v10[1 - *(int *)(a1 + 8)];
    if (v15 == 1.0)
    {
      if (a6 >= 1)
      {
        uint64_t v30 = 0;
        do
        {
          int v31 = v25[v30] + *((_DWORD *)v13 + v30);
          if (v31 <= -32768) {
            int v32 = -32768;
          }
          else {
            int v32 = v25[v30] + *((_DWORD *)v13 + v30);
          }
          if (v32 >= 0x7FFF) {
            LOWORD(v32) = 0x7FFF;
          }
          *(_WORD *)(a3 + 2 * v30) = v32;
          *((_DWORD *)v13 + v30) = v31 - v26[v30];
          ++v30;
        }
        while (a6 != v30);
      }
    }
    else if (a6 >= 1)
    {
      uint64_t v27 = 0;
      do
      {
        int v28 = v25[v27] + *((_DWORD *)v13 + v27);
        uint64_t v29 = (uint64_t)rint(v15 * (double)v28);
        if ((int)v29 <= -32768) {
          LODWORD(v29) = -32768;
        }
        if ((int)v29 >= 0x7FFF) {
          LOWORD(v29) = 0x7FFF;
        }
        *(_WORD *)(a3 + 2 * v27) = v29;
        *((_DWORD *)v13 + v27) = v28 - v26[v27];
        ++v27;
      }
      while (a6 != v27);
    }
    a3 += a4;
    ++v10;
    --a5;
  }
}

void sub_225ED2A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<int,short>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::RowSum<unsigned char,int>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowSum<unsigned char,int>::operator()(uint64_t result, uint64_t a2, int *a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    int v5 = 0;
    uint64_t v6 = *(int *)(result + 8) * (uint64_t)a5;
    uint64_t v7 = (a4 - 1) * a5;
    int v8 = &a3[a5];
    do
    {
      if ((int)v6 < 1)
      {
        int v10 = 0;
      }
      else
      {
        uint64_t v9 = 0;
        int v10 = 0;
        do
        {
          v10 += *(unsigned __int8 *)(a2 + v9);
          v9 += a5;
        }
        while (v9 < v6);
      }
      *a3 = v10;
      if ((int)v7 >= 1)
      {
        for (uint64_t i = 0; i < v7; i += a5)
        {
          int v10 = v10 - *(unsigned __int8 *)(a2 + i) + *(unsigned __int8 *)(a2 + v6 + i);
          v8[i] = v10;
        }
      }
      ++v5;
      ++a2;
      ++a3;
      ++v8;
    }
    while (v5 != a5);
  }
  return result;
}

void cv::RowSum<unsigned char,double>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowSum<unsigned char,double>::operator()(uint64_t result, uint64_t a2, double *a3, int a4, int a5, double a6, double a7)
{
  if (a5 >= 1)
  {
    int v7 = 0;
    uint64_t v8 = *(int *)(result + 8) * (uint64_t)a5;
    uint64_t v9 = (a4 - 1) * a5;
    int v10 = &a3[a5];
    do
    {
      if ((int)v8 < 1)
      {
        double v12 = 0.0;
      }
      else
      {
        uint64_t v11 = 0;
        double v12 = 0.0;
        do
        {
          LOBYTE(a7) = *(unsigned char *)(a2 + v11);
          a7 = (double)*(unint64_t *)&a7;
          double v12 = v12 + a7;
          v11 += a5;
        }
        while (v11 < v8);
      }
      *a3 = v12;
      if ((int)v9 >= 1)
      {
        for (uint64_t i = 0; i < v9; i += a5)
        {
          a7 = (double)(*(unsigned __int8 *)(a2 + v8 + i) - *(unsigned __int8 *)(a2 + i));
          double v12 = v12 + a7;
          v10[i] = v12;
        }
      }
      ++v7;
      ++a2;
      ++a3;
      ++v10;
    }
    while (v7 != a5);
  }
  return result;
}

void cv::RowSum<unsigned short,int>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowSum<unsigned short,int>::operator()(uint64_t result, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    int v5 = 0;
    uint64_t v6 = *(int *)(result + 8) * (uint64_t)a5;
    uint64_t v7 = (a4 - 1) * a5;
    uint64_t v8 = &a3[a5];
    do
    {
      if ((int)v6 < 1)
      {
        int v10 = 0;
      }
      else
      {
        uint64_t v9 = 0;
        int v10 = 0;
        do
        {
          v10 += *(unsigned __int16 *)(a2 + 2 * v9);
          v9 += a5;
        }
        while (v9 < v6);
      }
      *a3 = v10;
      if ((int)v7 >= 1)
      {
        for (uint64_t i = 0; i < v7; i += a5)
        {
          uint64_t result = *(unsigned __int16 *)(a2 + 2 * i);
          int v10 = v10 - result + *(unsigned __int16 *)(a2 + 2 * v6 + 2 * i);
          v8[i] = v10;
        }
      }
      ++v5;
      a2 += 2;
      ++a3;
      ++v8;
    }
    while (v5 != a5);
  }
  return result;
}

void cv::RowSum<unsigned short,double>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowSum<unsigned short,double>::operator()(uint64_t result, uint64_t a2, double *a3, int a4, int a5, double a6, double a7)
{
  if (a5 >= 1)
  {
    int v7 = 0;
    uint64_t v8 = *(int *)(result + 8) * (uint64_t)a5;
    uint64_t v9 = (a4 - 1) * a5;
    int v10 = &a3[a5];
    do
    {
      if ((int)v8 < 1)
      {
        double v12 = 0.0;
      }
      else
      {
        uint64_t v11 = 0;
        double v12 = 0.0;
        do
        {
          LOWORD(a7) = *(_WORD *)(a2 + 2 * v11);
          a7 = (double)*(unint64_t *)&a7;
          double v12 = v12 + a7;
          v11 += a5;
        }
        while (v11 < v8);
      }
      *a3 = v12;
      if ((int)v9 >= 1)
      {
        for (uint64_t i = 0; i < v9; i += a5)
        {
          a7 = (double)(*(unsigned __int16 *)(a2 + 2 * v8 + 2 * i) - *(unsigned __int16 *)(a2 + 2 * i));
          double v12 = v12 + a7;
          v10[i] = v12;
        }
      }
      ++v7;
      a2 += 2;
      ++a3;
      ++v10;
    }
    while (v7 != a5);
  }
  return result;
}

void cv::RowSum<short,int>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowSum<short,int>::operator()(uint64_t result, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    int v5 = 0;
    uint64_t v6 = *(int *)(result + 8) * (uint64_t)a5;
    uint64_t v7 = (a4 - 1) * a5;
    uint64_t v8 = &a3[a5];
    do
    {
      if ((int)v6 < 1)
      {
        int v10 = 0;
      }
      else
      {
        uint64_t v9 = 0;
        int v10 = 0;
        do
        {
          v10 += *(__int16 *)(a2 + 2 * v9);
          v9 += a5;
        }
        while (v9 < v6);
      }
      *a3 = v10;
      if ((int)v7 >= 1)
      {
        for (uint64_t i = 0; i < v7; i += a5)
        {
          uint64_t result = *(__int16 *)(a2 + 2 * i);
          int v10 = v10 - result + *(__int16 *)(a2 + 2 * v6 + 2 * i);
          v8[i] = v10;
        }
      }
      ++v5;
      a2 += 2;
      ++a3;
      ++v8;
    }
    while (v5 != a5);
  }
  return result;
}

void cv::RowSum<int,int>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowSum<int,int>::operator()(uint64_t result, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    int v5 = 0;
    uint64_t v6 = *(int *)(result + 8) * (uint64_t)a5;
    uint64_t v7 = (a4 - 1) * a5;
    uint64_t v8 = &a3[a5];
    do
    {
      if ((int)v6 < 1)
      {
        int v10 = 0;
      }
      else
      {
        uint64_t v9 = 0;
        int v10 = 0;
        do
        {
          v10 += *(_DWORD *)(a2 + 4 * v9);
          v9 += a5;
        }
        while (v9 < v6);
      }
      *a3 = v10;
      if ((int)v7 >= 1)
      {
        for (uint64_t i = 0; i < v7; i += a5)
        {
          uint64_t result = *(unsigned int *)(a2 + 4 * i);
          v10 += *(_DWORD *)(a2 + 4 * v6 + 4 * i) - result;
          v8[i] = v10;
        }
      }
      ++v5;
      a2 += 4;
      ++a3;
      ++v8;
    }
    while (v5 != a5);
  }
  return result;
}

void cv::RowSum<short,double>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowSum<short,double>::operator()(uint64_t result, uint64_t a2, double *a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    int v5 = 0;
    uint64_t v6 = *(int *)(result + 8) * (uint64_t)a5;
    uint64_t v7 = (a4 - 1) * a5;
    uint64_t v8 = &a3[a5];
    do
    {
      if ((int)v6 < 1)
      {
        double v10 = 0.0;
      }
      else
      {
        uint64_t v9 = 0;
        double v10 = 0.0;
        do
        {
          double v10 = v10 + (double)*(__int16 *)(a2 + 2 * v9);
          v9 += a5;
        }
        while (v9 < v6);
      }
      *a3 = v10;
      if ((int)v7 >= 1)
      {
        for (uint64_t i = 0; i < v7; i += a5)
        {
          double v10 = v10 + (double)(*(__int16 *)(a2 + 2 * v6 + 2 * i) - *(__int16 *)(a2 + 2 * i));
          v8[i] = v10;
        }
      }
      ++v5;
      a2 += 2;
      ++a3;
      ++v8;
    }
    while (v5 != a5);
  }
  return result;
}

void cv::RowSum<float,double>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowSum<float,double>::operator()(uint64_t result, uint64_t a2, double *a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    int v5 = 0;
    uint64_t v6 = *(int *)(result + 8) * (uint64_t)a5;
    uint64_t v7 = (a4 - 1) * a5;
    uint64_t v8 = &a3[a5];
    do
    {
      if ((int)v6 < 1)
      {
        double v10 = 0.0;
      }
      else
      {
        uint64_t v9 = 0;
        double v10 = 0.0;
        do
        {
          double v10 = v10 + *(float *)(a2 + 4 * v9);
          v9 += a5;
        }
        while (v9 < v6);
      }
      *a3 = v10;
      if ((int)v7 >= 1)
      {
        for (uint64_t i = 0; i < v7; i += a5)
        {
          double v10 = v10 + (float)(*(float *)(a2 + 4 * v6 + 4 * i) - *(float *)(a2 + 4 * i));
          v8[i] = v10;
        }
      }
      ++v5;
      a2 += 4;
      ++a3;
      ++v8;
    }
    while (v5 != a5);
  }
  return result;
}

void cv::RowSum<double,double>::~RowSum(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::RowSum<double,double>::operator()(uint64_t result, uint64_t a2, double *a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    int v5 = 0;
    uint64_t v6 = *(int *)(result + 8) * (uint64_t)a5;
    uint64_t v7 = (a4 - 1) * a5;
    uint64_t v8 = &a3[a5];
    do
    {
      if ((int)v6 < 1)
      {
        double v10 = 0.0;
      }
      else
      {
        uint64_t v9 = 0;
        double v10 = 0.0;
        do
        {
          double v10 = v10 + *(double *)(a2 + 8 * v9);
          v9 += a5;
        }
        while (v9 < v6);
      }
      *a3 = v10;
      if ((int)v7 >= 1)
      {
        for (uint64_t i = 0; i < v7; i += a5)
        {
          double v10 = v10 + *(double *)(a2 + 8 * v6 + 8 * i) - *(double *)(a2 + 8 * i);
          v8[i] = v10;
        }
      }
      ++v5;
      a2 += 8;
      ++a3;
      ++v8;
    }
    while (v5 != a5);
  }
  return result;
}

void cv::ColumnSum<double,unsigned char>::~ColumnSum(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D989618;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D989618;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void cv::ColumnSum<double,unsigned char>::operator()(uint64_t a1, float64x2_t **a2, uint64_t a3, int a4, int a5, int a6)
{
  double v10 = a2;
  uint64_t v14 = *(float64x2_t **)(a1 + 32);
  uint64_t v12 = a1 + 32;
  uint64_t v13 = v14;
  double v15 = *(double *)(v12 - 16);
  if (((*(void *)(v12 + 8) - (void)v14) >> 3) == a6)
  {
    int v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      int v17 = *(_DWORD *)(a1 + 8) - 1;
      if (v16 != v17)
      {
        std::string::basic_string[abi:ne180100]<0>(v62, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v61, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v63, 4294967081, v62, v61, __p, 145);
        cv::error((cv *)v63, v18);
      }
      double v10 = &a2[v17];
      goto LABEL_21;
    }
  }
  else
  {
    std::vector<cv::Point_<int>>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    uint64_t v13 = *(float64x2_t **)(a1 + 32);
  }
  if (a6 >= 1) {
    bzero(v13, 8 * a6);
  }
  int v19 = *(_DWORD *)(a1 + 8);
  BOOL v20 = __OFSUB__(v19, 1);
  int v21 = v19 - 1;
  if (!((v21 < 0) ^ v20 | (v21 == 0)))
  {
    int v22 = 0;
    do
    {
      unsigned int v23 = *v10;
      if (a6 >= 2)
      {
        uint64_t v25 = 0;
        unsigned int v26 = v13;
        uint64_t v27 = *v10;
        do
        {
          float64x2_t v28 = *v27++;
          *unsigned int v26 = vaddq_f64(*v26, v28);
          ++v26;
          v25 += 2;
        }
        while (v25 <= a6 - 2);
        uint64_t v24 = v25;
      }
      else
      {
        uint64_t v24 = 0;
      }
      if ((int)v24 < a6)
      {
        uint64_t v29 = &v13->f64[v24];
        uint64_t v30 = a6 - v24;
        int v31 = &v23->f64[v24];
        do
        {
          double v32 = *v31++;
          *uint64_t v29 = v32 + *v29;
          ++v29;
          --v30;
        }
        while (v30);
      }
      ++v22;
      ++v10;
    }
    while (v22 != v21);
    *(_DWORD *)(a1 + 24) = v21;
  }
LABEL_21:
  if (a5)
  {
    uint64_t v33 = a6 - 2;
    do
    {
      char v34 = *v10;
      int v35 = v10[1 - *(int *)(a1 + 8)];
      if (v15 == 1.0)
      {
        if (a6 >= 2)
        {
          uint64_t v37 = 0;
          int v49 = v13;
          int v50 = *v10;
          int v51 = v10[1 - *(int *)(a1 + 8)];
          do
          {
            float64x2_t v52 = *v50++;
            float64x2_t v53 = vaddq_f64(*v49, v52);
            int32x2_t v54 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v53.f64[1]), (uint64_t)rint(v53.f64[0])), 0), (int32x2_t)0xFF000000FFLL);
            unsigned int v55 = (unsigned char *)(a3 + v37);
            v55[1] = v54.i8[4];
            *unsigned int v55 = v54.i8[0];
            float64x2_t v56 = *v51++;
            *v49++ = vsubq_f64(v53, v56);
            v37 += 2;
          }
          while (v37 <= v33);
          uint64_t v37 = v37;
        }
        else
        {
          uint64_t v37 = 0;
        }
        if ((int)v37 < a6)
        {
          do
          {
            double v57 = v13->f64[v37] + v34->f64[v37];
            double v58 = rint(v57);
            int v59 = (uint64_t)v58 & ~((int)(uint64_t)v58 >> 31);
            if (v59 >= 255) {
              LOBYTE(v59) = -1;
            }
            *(unsigned char *)(a3 + v37) = v59;
            v13->f64[v37] = v57 - v35->f64[v37];
            ++v37;
          }
          while (a6 != v37);
        }
      }
      else
      {
        if (a6 >= 2)
        {
          uint64_t v36 = 0;
          unsigned int v38 = v13;
          int v39 = *v10;
          int v40 = v10[1 - *(int *)(a1 + 8)];
          do
          {
            float64x2_t v41 = *v39++;
            float64x2_t v42 = vaddq_f64(*v38, v41);
            int32x2_t v43 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(vmuld_lane_f64(v15, v42, 1)), (uint64_t)rint(v15 * v42.f64[0])), 0), (int32x2_t)0xFF000000FFLL);
            uint64_t v44 = (unsigned char *)(a3 + v36);
            v44[1] = v43.i8[4];
            *uint64_t v44 = v43.i8[0];
            float64x2_t v45 = *v40++;
            *v38++ = vsubq_f64(v42, v45);
            v36 += 2;
          }
          while (v36 <= v33);
          uint64_t v36 = v36;
        }
        else
        {
          uint64_t v36 = 0;
        }
        if ((int)v36 < a6)
        {
          do
          {
            double v46 = v13->f64[v36] + v34->f64[v36];
            double v47 = rint(v15 * v46);
            int v48 = (uint64_t)v47 & ~((int)(uint64_t)v47 >> 31);
            if (v48 >= 255) {
              LOBYTE(v4_Block_object_dispose(&a9, 8) = -1;
            }
            *(unsigned char *)(a3 + v36) = v48;
            v13->f64[v36] = v46 - v35->f64[v36];
            ++v36;
          }
          while (a6 != v36);
        }
      }
      a3 += a4;
      ++v10;
      --a5;
    }
    while (a5);
  }
}

void sub_225ED3774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<double,unsigned char>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<double,unsigned short>::~ColumnSum(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D989660;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D989660;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void cv::ColumnSum<double,unsigned short>::operator()(uint64_t a1, float64x2_t **a2, uint64_t a3, int a4, int a5, int a6)
{
  double v10 = a2;
  uint64_t v14 = *(float64x2_t **)(a1 + 32);
  uint64_t v12 = a1 + 32;
  uint64_t v13 = v14;
  double v15 = *(double *)(v12 - 16);
  if (((*(void *)(v12 + 8) - (void)v14) >> 3) == a6)
  {
    int v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      int v17 = *(_DWORD *)(a1 + 8);
      if (v16 != v17 - 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v67, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v66, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v68, 4294967081, v67, v66, __p, 145);
        cv::error((cv *)v68, v18);
      }
      double v10 = &a2[v17 - 1];
      goto LABEL_21;
    }
  }
  else
  {
    std::vector<cv::Point_<int>>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    uint64_t v13 = *(float64x2_t **)(a1 + 32);
  }
  if (a6 >= 1) {
    bzero(v13, 8 * a6);
  }
  int v17 = *(_DWORD *)(a1 + 8);
  int v19 = v17 - 1;
  if (v17 > 1)
  {
    int v20 = 0;
    do
    {
      int v21 = *v10;
      if (a6 >= 2)
      {
        uint64_t v23 = 0;
        uint64_t v24 = v13;
        uint64_t v25 = *v10;
        do
        {
          float64x2_t v26 = *v25++;
          *uint64_t v24 = vaddq_f64(*v24, v26);
          ++v24;
          v23 += 2;
        }
        while (v23 <= a6 - 2);
        uint64_t v22 = v23;
      }
      else
      {
        uint64_t v22 = 0;
      }
      if ((int)v22 < a6)
      {
        uint64_t v27 = &v13->f64[v22];
        uint64_t v28 = a6 - v22;
        uint64_t v29 = &v21->f64[v22];
        do
        {
          double v30 = *v29++;
          double *v27 = v30 + *v27;
          ++v27;
          --v28;
        }
        while (v28);
      }
      ++v20;
      ++v10;
    }
    while (v20 != v19);
    *(_DWORD *)(a1 + 24) = v19;
  }
LABEL_21:
  if (a5)
  {
    uint64_t v31 = 1 - v17;
    uint64_t v32 = a6 - 2;
    do
    {
      uint64_t v33 = *v10;
      char v34 = v10[v31];
      if (v15 == 1.0)
      {
        if (a6 >= 2)
        {
          uint64_t v36 = 0;
          int v51 = v13;
          float64x2_t v52 = *v10;
          float64x2_t v53 = v10[v31];
          do
          {
            int32x2_t v54 = (_WORD *)(a3 + 2 * v36);
            float64x2_t v55 = *v52++;
            float64x2_t v56 = vaddq_f64(*v51, v55);
            double v57 = rint(v56.f64[0]);
            int v58 = (uint64_t)v57 & ~((int)(uint64_t)v57 >> 31);
            if (v58 >= 0xFFFF) {
              LOWORD(v5_Block_object_dispose(&a9, 8) = -1;
            }
            *int32x2_t v54 = v58;
            double v59 = rint(v56.f64[1]);
            int v60 = (uint64_t)v59 & ~((int)(uint64_t)v59 >> 31);
            if (v60 >= 0xFFFF) {
              LOWORD(v60) = -1;
            }
            v54[1] = v60;
            float64x2_t v61 = *v53++;
            *v51++ = vsubq_f64(v56, v61);
            v36 += 2;
          }
          while (v36 <= v32);
          uint64_t v36 = v36;
        }
        else
        {
          uint64_t v36 = 0;
        }
        if ((int)v36 < a6)
        {
          do
          {
            double v62 = v13->f64[v36] + v33->f64[v36];
            double v63 = rint(v62);
            int v64 = (uint64_t)v63 & ~((int)(uint64_t)v63 >> 31);
            if (v64 >= 0xFFFF) {
              LOWORD(v64) = -1;
            }
            *(_WORD *)(a3 + 2 * v36) = v64;
            v13->f64[v36] = v62 - v34->f64[v36];
            ++v36;
          }
          while (a6 != v36);
        }
      }
      else
      {
        if (a6 >= 2)
        {
          uint64_t v35 = 0;
          uint64_t v37 = v13;
          unsigned int v38 = *v10;
          int v39 = v10[v31];
          do
          {
            int v40 = (_WORD *)(a3 + 2 * v35);
            float64x2_t v41 = *v38++;
            float64x2_t v42 = vaddq_f64(*v37, v41);
            double v43 = rint(v15 * v42.f64[0]);
            int v44 = (uint64_t)v43 & ~((int)(uint64_t)v43 >> 31);
            if (v44 >= 0xFFFF) {
              LOWORD(v44) = -1;
            }
            *int v40 = v44;
            double v45 = rint(vmuld_lane_f64(v15, v42, 1));
            int v46 = (uint64_t)v45 & ~((int)(uint64_t)v45 >> 31);
            if (v46 >= 0xFFFF) {
              LOWORD(v46) = -1;
            }
            v40[1] = v46;
            float64x2_t v47 = *v39++;
            *v37++ = vsubq_f64(v42, v47);
            v35 += 2;
          }
          while (v35 <= v32);
          uint64_t v35 = v35;
        }
        else
        {
          uint64_t v35 = 0;
        }
        if ((int)v35 < a6)
        {
          do
          {
            double v48 = v13->f64[v35] + v33->f64[v35];
            double v49 = rint(v15 * v48);
            int v50 = (uint64_t)v49 & ~((int)(uint64_t)v49 >> 31);
            if (v50 >= 0xFFFF) {
              LOWORD(v50) = -1;
            }
            *(_WORD *)(a3 + 2 * v35) = v50;
            v13->f64[v35] = v48 - v34->f64[v35];
            ++v35;
          }
          while (a6 != v35);
        }
      }
      a3 += a4;
      ++v10;
      --a5;
    }
    while (a5);
  }
}

void sub_225ED3C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<double,unsigned short>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<double,short>::~ColumnSum(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D9896A8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D9896A8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void cv::ColumnSum<double,short>::operator()(uint64_t a1, float64x2_t **a2, uint64_t a3, int a4, int a5, int a6)
{
  double v10 = a2;
  uint64_t v14 = *(float64x2_t **)(a1 + 32);
  uint64_t v12 = a1 + 32;
  uint64_t v13 = v14;
  double v15 = *(double *)(v12 - 16);
  if (((*(void *)(v12 + 8) - (void)v14) >> 3) == a6)
  {
    int v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      int v17 = *(_DWORD *)(a1 + 8);
      if (v16 != v17 - 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v61, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v60, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v62, 4294967081, v61, v60, __p, 145);
        cv::error((cv *)v62, v18);
      }
      double v10 = &a2[v17 - 1];
      goto LABEL_21;
    }
  }
  else
  {
    std::vector<cv::Point_<int>>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    uint64_t v13 = *(float64x2_t **)(a1 + 32);
  }
  if (a6 >= 1) {
    bzero(v13, 8 * a6);
  }
  int v17 = *(_DWORD *)(a1 + 8);
  int v19 = v17 - 1;
  if (v17 > 1)
  {
    int v20 = 0;
    do
    {
      int v21 = *v10;
      if (a6 >= 2)
      {
        uint64_t v23 = 0;
        uint64_t v24 = v13;
        uint64_t v25 = *v10;
        do
        {
          float64x2_t v26 = *v25++;
          *uint64_t v24 = vaddq_f64(*v24, v26);
          ++v24;
          v23 += 2;
        }
        while (v23 <= a6 - 2);
        uint64_t v22 = v23;
      }
      else
      {
        uint64_t v22 = 0;
      }
      if ((int)v22 < a6)
      {
        uint64_t v27 = &v13->f64[v22];
        uint64_t v28 = a6 - v22;
        uint64_t v29 = &v21->f64[v22];
        do
        {
          double v30 = *v29++;
          double *v27 = v30 + *v27;
          ++v27;
          --v28;
        }
        while (v28);
      }
      ++v20;
      ++v10;
    }
    while (v20 != v19);
    *(_DWORD *)(a1 + 24) = v19;
  }
LABEL_21:
  if (a5)
  {
    uint64_t v31 = 1 - v17;
    uint64_t v32 = a6 - 2;
    do
    {
      uint64_t v33 = *v10;
      char v34 = v10[v31];
      if (v15 == 1.0)
      {
        if (a6 >= 2)
        {
          uint64_t v36 = 0;
          double v48 = v13;
          double v49 = *v10;
          int v50 = v10[v31];
          do
          {
            int v51 = (_WORD *)(a3 + 2 * v36);
            float64x2_t v52 = *v49++;
            float64x2_t v53 = vaddq_f64(*v48, v52);
            uint64_t v54 = (uint64_t)rint(v53.f64[0]);
            if ((int)v54 <= -32768) {
              LODWORD(v54) = -32768;
            }
            if ((int)v54 >= 0x7FFF) {
              LOWORD(v54) = 0x7FFF;
            }
            *int v51 = v54;
            uint64_t v55 = (uint64_t)rint(v53.f64[1]);
            if ((int)v55 <= -32768) {
              LODWORD(v55) = -32768;
            }
            if ((int)v55 >= 0x7FFF) {
              LOWORD(v55) = 0x7FFF;
            }
            v51[1] = v55;
            float64x2_t v56 = *v50++;
            *v48++ = vsubq_f64(v53, v56);
            v36 += 2;
          }
          while (v36 <= v32);
          uint64_t v36 = v36;
        }
        else
        {
          uint64_t v36 = 0;
        }
        if ((int)v36 < a6)
        {
          do
          {
            double v57 = v13->f64[v36] + v33->f64[v36];
            uint64_t v58 = (uint64_t)rint(v57);
            if ((int)v58 <= -32768) {
              LODWORD(v5_Block_object_dispose(&a9, 8) = -32768;
            }
            if ((int)v58 >= 0x7FFF) {
              LOWORD(v5_Block_object_dispose(&a9, 8) = 0x7FFF;
            }
            *(_WORD *)(a3 + 2 * v36) = v58;
            v13->f64[v36] = v57 - v34->f64[v36];
            ++v36;
          }
          while (a6 != v36);
        }
      }
      else
      {
        if (a6 >= 2)
        {
          uint64_t v35 = 0;
          uint64_t v37 = v13;
          unsigned int v38 = *v10;
          int v39 = v10[v31];
          do
          {
            int v40 = (_WORD *)(a3 + 2 * v35);
            float64x2_t v41 = *v38++;
            float64x2_t v42 = vaddq_f64(*v37, v41);
            uint64_t v43 = (uint64_t)rint(v15 * v42.f64[0]);
            if ((int)v43 <= -32768) {
              LODWORD(v43) = -32768;
            }
            if ((int)v43 >= 0x7FFF) {
              LOWORD(v43) = 0x7FFF;
            }
            *int v40 = v43;
            uint64_t v44 = (uint64_t)rint(vmuld_lane_f64(v15, v42, 1));
            if ((int)v44 <= -32768) {
              LODWORD(v44) = -32768;
            }
            if ((int)v44 >= 0x7FFF) {
              LOWORD(v44) = 0x7FFF;
            }
            v40[1] = v44;
            float64x2_t v45 = *v39++;
            *v37++ = vsubq_f64(v42, v45);
            v35 += 2;
          }
          while (v35 <= v32);
          uint64_t v35 = v35;
        }
        else
        {
          uint64_t v35 = 0;
        }
        if ((int)v35 < a6)
        {
          do
          {
            double v46 = v13->f64[v35] + v33->f64[v35];
            uint64_t v47 = (uint64_t)rint(v15 * v46);
            if ((int)v47 <= -32768) {
              LODWORD(v47) = -32768;
            }
            if ((int)v47 >= 0x7FFF) {
              LOWORD(v47) = 0x7FFF;
            }
            *(_WORD *)(a3 + 2 * v35) = v47;
            v13->f64[v35] = v46 - v34->f64[v35];
            ++v35;
          }
          while (a6 != v35);
        }
      }
      a3 += a4;
      ++v10;
      --a5;
    }
    while (a5);
  }
}

void sub_225ED4198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<double,short>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<int,int>::~ColumnSum(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D9896F0;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D9896F0;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void cv::ColumnSum<int,int>::operator()(uint64_t a1, int32x2_t **a2, uint64_t a3, int a4, int a5, int a6)
{
  double v10 = a2;
  uint64_t v14 = *(int32x2_t **)(a1 + 32);
  uint64_t v12 = (std::vector<int> *)(a1 + 32);
  uint64_t v13 = v14;
  double v15 = *(double *)&v12[-1].__end_;
  if (((unint64_t)((char *)v12->__end_ - (char *)v14) >> 2) == a6)
  {
    int v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      int v17 = *(_DWORD *)(a1 + 8) - 1;
      if (v16 != v17)
      {
        std::string::basic_string[abi:ne180100]<0>(v49, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v48, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v50, 4294967081, v49, v48, __p, 145);
        cv::error((cv *)v50, v18);
      }
      double v10 = &a2[v17];
      goto LABEL_20;
    }
  }
  else
  {
    std::vector<int>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    uint64_t v13 = *(int32x2_t **)(a1 + 32);
  }
  if (a6 < 1)
  {
    int v19 = 0;
  }
  else
  {
    bzero(v13, 4 * a6);
    int v19 = *(_DWORD *)(a1 + 24);
  }
  if (v19 < *(_DWORD *)(a1 + 8) - 1)
  {
    do
    {
      int v20 = *v10;
      if (a6 >= 2)
      {
        uint64_t v22 = 0;
        uint64_t v23 = v13;
        uint64_t v24 = *v10;
        do
        {
          int32x2_t v25 = *v24++;
          *uint64_t v23 = vadd_s32(v25, *v23);
          ++v23;
          v22 += 2;
        }
        while (v22 <= a6 - 2);
        uint64_t v21 = v22;
      }
      else
      {
        uint64_t v21 = 0;
      }
      if ((int)v21 < a6)
      {
        float64x2_t v26 = (_DWORD *)v13 + v21;
        uint64_t v27 = a6 - v21;
        uint64_t v28 = (int *)v20 + v21;
        do
        {
          int v29 = *v28++;
          *v26++ += v29;
          --v27;
        }
        while (v27);
      }
      int v30 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v30;
      ++v10;
    }
    while (v30 < *(_DWORD *)(a1 + 8) - 1);
  }
LABEL_20:
  if (a5)
  {
    uint64_t v31 = a6 - 2;
    do
    {
      uint64_t v32 = *v10;
      uint64_t v33 = v10[1 - *(int *)(a1 + 8)];
      if (v15 == 1.0)
      {
        if (a6 >= 2)
        {
          uint64_t v44 = 0;
          uint64_t v35 = 0;
          do
          {
            int32x2_t v45 = vadd_s32(v32[v44], v13[v44]);
            *(int32x2_t *)(a3 + v44 * _Block_object_dispose(&a9, 8) = v45;
            v13[v44] = vsub_s32(v45, v33[v44]);
            v35 += 2;
            ++v44;
          }
          while (v35 <= v31);
          uint64_t v35 = v35;
        }
        else
        {
          uint64_t v35 = 0;
        }
        if ((int)v35 < a6)
        {
          do
          {
            int v46 = v32->i32[v35] + v13->i32[v35];
            *(_DWORD *)(a3 + 4 * v35) = v46;
            v13->i32[v35] = v46 - v33->i32[v35];
            ++v35;
          }
          while (a6 != v35);
        }
      }
      else
      {
        if (a6 >= 2)
        {
          uint64_t v34 = 0;
          uint64_t v36 = v13;
          uint64_t v37 = *v10;
          unsigned int v38 = v10[1 - *(int *)(a1 + 8)];
          do
          {
            int v39 = (_DWORD *)(a3 + 4 * v34);
            int32x2_t v40 = *v37++;
            int32x2_t v41 = vadd_s32(v40, *v36);
            *int v39 = (uint64_t)rint(v15 * (double)v41.i32[0]);
            v39[1] = (uint64_t)rint(v15 * (double)v41.i32[1]);
            int32x2_t v42 = *v38++;
            *v36++ = vsub_s32(v41, v42);
            v34 += 2;
          }
          while (v34 <= v31);
          uint64_t v34 = v34;
        }
        else
        {
          uint64_t v34 = 0;
        }
        if ((int)v34 < a6)
        {
          do
          {
            int v43 = v32->i32[v34] + v13->i32[v34];
            *(_DWORD *)(a3 + 4 * v34) = (uint64_t)rint(v15 * (double)v43);
            v13->i32[v34] = v43 - v33->i32[v34];
            ++v34;
          }
          while (a6 != v34);
        }
      }
      a3 += a4;
      ++v10;
      --a5;
    }
    while (a5);
  }
}

void sub_225ED4650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<int,int>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<int,float>::~ColumnSum(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D989738;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D989738;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void cv::ColumnSum<int,float>::operator()(uint64_t a1, int32x2_t **a2, uint64_t a3, int a4, int a5, int a6)
{
  double v10 = a2;
  uint64_t v14 = *(int32x2_t **)(a1 + 32);
  uint64_t v12 = (std::vector<int> *)(a1 + 32);
  uint64_t v13 = v14;
  double v15 = *(double *)&v12[-1].__end_;
  if (((unint64_t)((char *)v12->__end_ - (char *)v14) >> 2) == a6)
  {
    int v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      int v17 = *(_DWORD *)(a1 + 8) - 1;
      if (v16 != v17)
      {
        std::string::basic_string[abi:ne180100]<0>(v47, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v46, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v48, 4294967081, v47, v46, __p, 145);
        cv::error((cv *)v48, v18);
      }
      double v10 = &a2[v17];
      goto LABEL_21;
    }
    std::vector<int>::pointer end = v12[-1].__end_;
  }
  else
  {
    std::vector<int>::pointer end = v12[-1].__end_;
    std::vector<int>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    uint64_t v13 = *(int32x2_t **)(a1 + 32);
  }
  if (a6 < 1)
  {
    int v19 = 0;
  }
  else
  {
    bzero(v13, 4 * a6);
    int v19 = *(_DWORD *)(a1 + 24);
  }
  double v15 = *(double *)&end;
  if (v19 < *(_DWORD *)(a1 + 8) - 1)
  {
    do
    {
      int v20 = *v10;
      if (a6 >= 2)
      {
        uint64_t v22 = 0;
        uint64_t v23 = v13;
        uint64_t v24 = *v10;
        do
        {
          int32x2_t v25 = *v24++;
          *uint64_t v23 = vadd_s32(v25, *v23);
          ++v23;
          v22 += 2;
        }
        while (v22 <= a6 - 2);
        uint64_t v21 = v22;
      }
      else
      {
        uint64_t v21 = 0;
      }
      if ((int)v21 < a6)
      {
        float64x2_t v26 = (_DWORD *)v13 + v21;
        uint64_t v27 = a6 - v21;
        uint64_t v28 = (int *)v20 + v21;
        do
        {
          int v29 = *v28++;
          *v26++ += v29;
          --v27;
        }
        while (v27);
      }
      int v30 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v30;
      ++v10;
    }
    while (v30 < *(_DWORD *)(a1 + 8) - 1);
  }
LABEL_21:
  if (a5)
  {
    uint64_t v31 = a6 - 2;
    do
    {
      uint64_t v32 = *v10;
      uint64_t v33 = v10[1 - *(int *)(a1 + 8)];
      if (v15 == 1.0)
      {
        if (a6 >= 2)
        {
          uint64_t v41 = 0;
          uint64_t v35 = 0;
          do
          {
            int32x2_t v42 = vadd_s32(v32[v41], v13[v41]);
            *(float32x2_t *)(a3 + v41 * _Block_object_dispose(&a9, 8) = vcvt_f32_s32(v42);
            v13[v41] = vsub_s32(v42, v33[v41]);
            v35 += 2;
            ++v41;
          }
          while (v35 <= v31);
          uint64_t v35 = v35;
        }
        else
        {
          uint64_t v35 = 0;
        }
        if ((int)v35 < a6)
        {
          do
          {
            int v43 = v32->i32[v35] + v13->i32[v35];
            *(float *)(a3 + 4 * v35) = (float)v43;
            v13->i32[v35] = v43 - v33->i32[v35];
            ++v35;
          }
          while (a6 != v35);
        }
      }
      else
      {
        if (a6 >= 2)
        {
          uint64_t v36 = 0;
          uint64_t v34 = 0;
          do
          {
            int32x2_t v37 = vadd_s32(v32[v36], v13[v36]);
            v38.i64[0] = v37.i32[0];
            v38.i64[1] = v37.i32[1];
            *(float32x2_t *)(a3 + v36 * _Block_object_dispose(&a9, 8) = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_s64(v38), v15));
            v13[v36] = vsub_s32(v37, v33[v36]);
            v34 += 2;
            ++v36;
          }
          while (v34 <= v31);
          uint64_t v34 = v34;
        }
        else
        {
          uint64_t v34 = 0;
        }
        if ((int)v34 < a6)
        {
          do
          {
            int v39 = v32->i32[v34] + v13->i32[v34];
            float v40 = v15 * (double)v39;
            *(float *)(a3 + 4 * v34) = v40;
            v13->i32[v34] = v39 - v33->i32[v34];
            ++v34;
          }
          while (a6 != v34);
        }
      }
      a3 += a4;
      ++v10;
      --a5;
    }
    while (a5);
  }
}

void sub_225ED4AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<int,float>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<double,float>::~ColumnSum(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D989780;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D989780;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void cv::ColumnSum<double,float>::operator()(uint64_t a1, float64x2_t **a2, float32x2_t *a3, int a4, int a5, int a6)
{
  double v10 = a2;
  uint64_t v14 = *(float64x2_t **)(a1 + 32);
  uint64_t v12 = a1 + 32;
  uint64_t v13 = v14;
  double v15 = *(double *)(v12 - 16);
  double v55 = v15;
  if (((*(void *)(v12 + 8) - (void)v14) >> 3) == a6)
  {
    int v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      int v17 = *(_DWORD *)(a1 + 8);
      if (v16 != v17 - 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v58, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v57, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v59, 4294967081, v58, v57, __p, 145);
        cv::error((cv *)v59, v18);
      }
      double v10 = &a2[v17 - 1];
      goto LABEL_21;
    }
  }
  else
  {
    std::vector<cv::Point_<int>>::resize(v12, a6);
    double v15 = v55;
    *(_DWORD *)(a1 + 24) = 0;
    uint64_t v13 = *(float64x2_t **)(a1 + 32);
  }
  if (a6 >= 1)
  {
    bzero(v13, 8 * a6);
    double v15 = v55;
  }
  int v17 = *(_DWORD *)(a1 + 8);
  int v19 = v17 - 1;
  if (v17 > 1)
  {
    int v20 = 0;
    do
    {
      uint64_t v21 = *v10;
      if (a6 >= 2)
      {
        uint64_t v23 = 0;
        uint64_t v24 = v13;
        int32x2_t v25 = *v10;
        do
        {
          float64x2_t v26 = *v25++;
          *uint64_t v24 = vaddq_f64(*v24, v26);
          ++v24;
          v23 += 2;
        }
        while (v23 <= a6 - 2);
        uint64_t v22 = v23;
      }
      else
      {
        uint64_t v22 = 0;
      }
      if ((int)v22 < a6)
      {
        uint64_t v27 = &v13->f64[v22];
        uint64_t v28 = a6 - v22;
        int v29 = &v21->f64[v22];
        do
        {
          double v30 = *v29++;
          double *v27 = v30 + *v27;
          ++v27;
          --v28;
        }
        while (v28);
      }
      ++v20;
      ++v10;
    }
    while (v20 != v19);
    *(_DWORD *)(a1 + 24) = v19;
  }
LABEL_21:
  if (a5)
  {
    uint64_t v31 = 1 - v17;
    uint64_t v32 = a6 - 2;
    do
    {
      uint64_t v33 = *v10;
      uint64_t v34 = v10[v31];
      if (v15 == 1.0)
      {
        if (a6 >= 2)
        {
          uint64_t v36 = 0;
          int v46 = v13;
          uint64_t v47 = *v10;
          double v48 = a3;
          double v49 = v10[v31];
          do
          {
            float64x2_t v50 = *v47++;
            float64x2_t v51 = vaddq_f64(*v46, v50);
            *v48++ = vcvt_f32_f64(v51);
            float64x2_t v52 = *v49++;
            *v46++ = vsubq_f64(v51, v52);
            v36 += 2;
          }
          while (v36 <= v32);
          uint64_t v36 = v36;
        }
        else
        {
          uint64_t v36 = 0;
        }
        if ((int)v36 < a6)
        {
          do
          {
            float64_t v53 = v13->f64[v36] + v33->f64[v36];
            float32_t v54 = v53;
            a3->f32[v36] = v54;
            v13->f64[v36] = v53 - v34->f64[v36];
            ++v36;
          }
          while (a6 != v36);
        }
      }
      else
      {
        if (a6 >= 2)
        {
          uint64_t v35 = 0;
          int32x2_t v37 = v13;
          int64x2_t v38 = *v10;
          int v39 = a3;
          float v40 = v10[v31];
          do
          {
            float64x2_t v41 = *v38++;
            float64x2_t v42 = vaddq_f64(*v37, v41);
            *v39++ = vcvt_f32_f64(vmulq_n_f64(v42, v15));
            float64x2_t v43 = *v40++;
            *v37++ = vsubq_f64(v42, v43);
            v35 += 2;
          }
          while (v35 <= v32);
          uint64_t v35 = v35;
        }
        else
        {
          uint64_t v35 = 0;
        }
        if ((int)v35 < a6)
        {
          do
          {
            float64_t v44 = v13->f64[v35] + v33->f64[v35];
            float32_t v45 = v15 * v44;
            a3->f32[v35] = v45;
            v13->f64[v35] = v44 - v34->f64[v35];
            ++v35;
          }
          while (a6 != v35);
        }
      }
      a3 = (float32x2_t *)((char *)a3 + a4);
      ++v10;
      --a5;
    }
    while (a5);
  }
}

void sub_225ED4F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<double,float>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<int,double>::~ColumnSum(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D9897C8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D9897C8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void cv::ColumnSum<int,double>::operator()(uint64_t a1, int32x2_t **a2, float64x2_t *a3, int a4, int a5, int a6)
{
  double v10 = a2;
  uint64_t v14 = *(int32x2_t **)(a1 + 32);
  uint64_t v12 = (std::vector<int> *)(a1 + 32);
  uint64_t v13 = v14;
  double v15 = *(double *)&v12[-1].__end_;
  if (((unint64_t)((char *)v12->__end_ - (char *)v14) >> 2) == a6)
  {
    int v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      int v17 = *(_DWORD *)(a1 + 8) - 1;
      if (v16 != v17)
      {
        std::string::basic_string[abi:ne180100]<0>(v57, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v56, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v58, 4294967081, v57, v56, __p, 145);
        cv::error((cv *)v58, v18);
      }
      double v10 = &a2[v17];
      goto LABEL_21;
    }
    std::vector<int>::pointer end = v12[-1].__end_;
  }
  else
  {
    std::vector<int>::pointer end = v12[-1].__end_;
    std::vector<int>::resize(v12, a6);
    *(_DWORD *)(a1 + 24) = 0;
    uint64_t v13 = *(int32x2_t **)(a1 + 32);
  }
  if (a6 < 1)
  {
    int v19 = 0;
  }
  else
  {
    bzero(v13, 4 * a6);
    int v19 = *(_DWORD *)(a1 + 24);
  }
  double v15 = *(double *)&end;
  if (v19 < *(_DWORD *)(a1 + 8) - 1)
  {
    do
    {
      int v20 = *v10;
      if (a6 >= 2)
      {
        uint64_t v22 = 0;
        uint64_t v23 = v13;
        uint64_t v24 = *v10;
        do
        {
          int32x2_t v25 = *v24++;
          *uint64_t v23 = vadd_s32(v25, *v23);
          ++v23;
          v22 += 2;
        }
        while (v22 <= a6 - 2);
        uint64_t v21 = v22;
      }
      else
      {
        uint64_t v21 = 0;
      }
      if ((int)v21 < a6)
      {
        float64x2_t v26 = (_DWORD *)v13 + v21;
        uint64_t v27 = a6 - v21;
        uint64_t v28 = (int *)v20 + v21;
        do
        {
          int v29 = *v28++;
          *v26++ += v29;
          --v27;
        }
        while (v27);
      }
      int v30 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v30;
      ++v10;
    }
    while (v30 < *(_DWORD *)(a1 + 8) - 1);
  }
LABEL_21:
  if (a5)
  {
    uint64_t v31 = a6 - 2;
    do
    {
      uint64_t v32 = *v10;
      uint64_t v33 = v10[1 - *(int *)(a1 + 8)];
      if (v15 == 1.0)
      {
        if (a6 >= 2)
        {
          uint64_t v35 = 0;
          float32_t v45 = v13;
          int v46 = *v10;
          uint64_t v47 = a3;
          double v48 = v10[1 - *(int *)(a1 + 8)];
          do
          {
            int32x2_t v49 = *v46++;
            int32x2_t v50 = vadd_s32(v49, *v45);
            v51.i64[0] = v50.i32[0];
            v51.i64[1] = v50.i32[1];
            *v47++ = vcvtq_f64_s64(v51);
            int32x2_t v52 = *v48++;
            *v45++ = vsub_s32(v50, v52);
            v35 += 2;
          }
          while (v35 <= v31);
          uint64_t v35 = v35;
        }
        else
        {
          uint64_t v35 = 0;
        }
        if ((int)v35 < a6)
        {
          do
          {
            int v53 = v32->i32[v35] + v13->i32[v35];
            a3->f64[v35] = (double)v53;
            v13->i32[v35] = v53 - v33->i32[v35];
            ++v35;
          }
          while (a6 != v35);
        }
      }
      else
      {
        if (a6 >= 2)
        {
          uint64_t v34 = 0;
          uint64_t v36 = v13;
          int32x2_t v37 = *v10;
          int64x2_t v38 = a3;
          int v39 = v10[1 - *(int *)(a1 + 8)];
          do
          {
            int32x2_t v40 = *v37++;
            int32x2_t v41 = vadd_s32(v40, *v36);
            v42.i64[0] = v41.i32[0];
            v42.i64[1] = v41.i32[1];
            *v38++ = vmulq_n_f64(vcvtq_f64_s64(v42), v15);
            int32x2_t v43 = *v39++;
            *v36++ = vsub_s32(v41, v43);
            v34 += 2;
          }
          while (v34 <= v31);
          uint64_t v34 = v34;
        }
        else
        {
          uint64_t v34 = 0;
        }
        if ((int)v34 < a6)
        {
          do
          {
            int v44 = v32->i32[v34] + v13->i32[v34];
            a3->f64[v34] = v15 * (double)v44;
            v13->i32[v34] = v44 - v33->i32[v34];
            ++v34;
          }
          while (a6 != v34);
        }
      }
      a3 = (float64x2_t *)((char *)a3 + a4);
      ++v10;
      --a5;
    }
    while (a5);
  }
}

void sub_225ED5444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<int,double>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::ColumnSum<double,double>::~ColumnSum(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D989810;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D989810;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void cv::ColumnSum<double,double>::operator()(uint64_t a1, float64x2_t **a2, uint64_t a3, int a4, int a5, int a6)
{
  double v10 = a2;
  uint64_t v14 = *(float64x2_t **)(a1 + 32);
  uint64_t v12 = a1 + 32;
  uint64_t v13 = v14;
  double v15 = *(double *)(v12 - 16);
  double v43 = v15;
  if (((*(void *)(v12 + 8) - (void)v14) >> 3) == a6)
  {
    int v16 = *(_DWORD *)(a1 + 24);
    if (v16)
    {
      int v17 = *(_DWORD *)(a1 + 8);
      if (v16 != v17 - 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v46, "sumCount == ksize-1");
        std::string::basic_string[abi:ne180100]<0>(v45, "operator()");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/smooth.cpp");
        cv::Exception::Exception(v47, 4294967081, v46, v45, __p, 145);
        cv::error((cv *)v47, v18);
      }
      double v10 = &a2[v17 - 1];
      goto LABEL_21;
    }
  }
  else
  {
    std::vector<cv::Point_<int>>::resize(v12, a6);
    double v15 = v43;
    *(_DWORD *)(a1 + 24) = 0;
    uint64_t v13 = *(float64x2_t **)(a1 + 32);
  }
  if (a6 >= 1)
  {
    bzero(v13, 8 * a6);
    double v15 = v43;
  }
  int v17 = *(_DWORD *)(a1 + 8);
  int v19 = v17 - 1;
  if (v17 > 1)
  {
    int v20 = 0;
    do
    {
      uint64_t v21 = *v10;
      if (a6 >= 2)
      {
        uint64_t v23 = 0;
        uint64_t v24 = v13;
        int32x2_t v25 = *v10;
        do
        {
          float64x2_t v26 = *v25++;
          *uint64_t v24 = vaddq_f64(*v24, v26);
          ++v24;
          v23 += 2;
        }
        while (v23 <= a6 - 2);
        uint64_t v22 = v23;
      }
      else
      {
        uint64_t v22 = 0;
      }
      if ((int)v22 < a6)
      {
        uint64_t v27 = &v13->f64[v22];
        uint64_t v28 = a6 - v22;
        int v29 = &v21->f64[v22];
        do
        {
          double v30 = *v29++;
          double *v27 = v30 + *v27;
          ++v27;
          --v28;
        }
        while (v28);
      }
      ++v20;
      ++v10;
    }
    while (v20 != v19);
    *(_DWORD *)(a1 + 24) = v19;
  }
LABEL_21:
  if (a5)
  {
    uint64_t v31 = 1 - v17;
    uint64_t v32 = a6 - 2;
    do
    {
      uint64_t v33 = *v10;
      uint64_t v34 = v10[v31];
      if (v15 == 1.0)
      {
        if (a6 >= 2)
        {
          uint64_t v40 = 0;
          uint64_t v36 = 0;
          do
          {
            float64x2_t v41 = vaddq_f64(v13[v40], v33[v40]);
            *(float64x2_t *)(a3 + v40 * 16) = v41;
            v13[v40] = vsubq_f64(v41, v34[v40]);
            v36 += 2;
            ++v40;
          }
          while (v36 <= v32);
          uint64_t v36 = v36;
        }
        else
        {
          uint64_t v36 = 0;
        }
        if ((int)v36 < a6)
        {
          do
          {
            float64_t v42 = v13->f64[v36] + v33->f64[v36];
            *(float64_t *)(a3 + 8 * v36) = v42;
            v13->f64[v36] = v42 - v34->f64[v36];
            ++v36;
          }
          while (a6 != v36);
        }
      }
      else
      {
        if (a6 >= 2)
        {
          uint64_t v37 = 0;
          uint64_t v35 = 0;
          do
          {
            float64x2_t v38 = vaddq_f64(v13[v37], v33[v37]);
            *(float64x2_t *)(a3 + v37 * 16) = vmulq_n_f64(v38, v15);
            v13[v37] = vsubq_f64(v38, v34[v37]);
            v35 += 2;
            ++v37;
          }
          while (v35 <= v32);
          uint64_t v35 = v35;
        }
        else
        {
          uint64_t v35 = 0;
        }
        if ((int)v35 < a6)
        {
          do
          {
            float64_t v39 = v13->f64[v35] + v33->f64[v35];
            *(double *)(a3 + 8 * v35) = v15 * v39;
            v13->f64[v35] = v39 - v34->f64[v35];
            ++v35;
          }
          while (a6 != v35);
        }
      }
      a3 += a4;
      ++v10;
      --a5;
    }
    while (a5);
  }
}

void sub_225ED58B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::ColumnSum<double,double>::reset(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void cv::copyMakeBorder(uint64_t a1, uint64_t a2)
{
  void (***v2)(uint64_t *__return_ptr);
  double *v3;
  double *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const cv::Exception *v17;
  __int16 v18;
  double *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  void *v24;
  char *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  double v32;
  int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  int v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  char *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  int *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  int v85;
  const cv::Exception *v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  void *v97;
  char *v98;
  unsigned char *v99;
  uint64_t v100;
  char v101;
  int v102;
  int v103;
  char *v104;
  size_t v105;
  int v106;
  size_t v107;
  size_t v108;
  size_t v109;
  int v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  int *v120;
  int v121;
  int v122;
  char v123;
  char *v124;
  int v125;
  char *v126;
  int v127;
  int v128;
  size_t __n;
  int __na;
  int v131[2];
  uint64_t v132;
  int v133;
  uint64_t v134;
  char *v135;
  int v136;
  unsigned int v137;
  int v138;
  void *v139[2];
  void *v140[2];
  char *v141;
  uint64_t v142;
  _DWORD v143[1044];
  void *v144[2];
  char *v145;
  atomic_uint *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD *v150;
  cv *v151;
  uint64_t v152;
  void *__p[3];
  uint64_t v154;
  int v155;
  int v156;
  void *__src;
  atomic_uint *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int *v162;
  cv *v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  void v167[517];

  uint64_t v2 = (void (***)(uint64_t *__return_ptr))MEMORY[0x270FA5388](a1, a2);
  int v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  double v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  int v16 = v15;
  v167[515] = *MEMORY[0x263EF8340];
  (**v2)(&v154);
  if ((v12 | v14 | v10 | v8) < 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v165, "top >= 0 && bottom >= 0 && left >= 0 && right >= 0");
    std::string::basic_string[abi:ne180100]<0>(v144, "copyMakeBorder");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/utils.cpp");
    cv::Exception::Exception(&v141, 4294967081, &v165, v144, __p, 208);
    cv::error((cv *)&v141, v17);
  }
  int32x2_t v18 = v154;
  if ((v6 & 0x10) == 0 && (v154 & 0x8000) != 0)
  {
    uint64_t v136 = v6;
    int v19 = v4;
    unint64_t v141 = 0;
    int v165 = 0;
    cv::Mat::locateROI((uint64_t)&v154, &v141, &v165);
    if (SHIDWORD(v165) >= v14) {
      int v20 = v14;
    }
    else {
      int v20 = HIDWORD(v165);
    }
    if (HIDWORD(v141) - (HIDWORD(v165) + v155) >= v12) {
      uint64_t v21 = v12;
    }
    else {
      uint64_t v21 = HIDWORD(v141) - (HIDWORD(v165) + v155);
    }
    if ((int)v165 >= v10) {
      uint64_t v22 = v10;
    }
    else {
      uint64_t v22 = (int)v165;
    }
    if ((int)v141 - ((int)v165 + v156) >= v8) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v141 - (v165 + v156);
    }
    cv::Mat::adjustROI((cv::Mat *)&v154, v20, v21, v22, v23);
    v14 -= v20;
    v10 -= v22;
    v12 -= v21;
    v8 -= v23;
    int32x2_t v18 = v154;
    int v4 = v19;
    uint64_t v6 = v136;
  }
  (*(void (**)(uint64_t, void, void, void, uint64_t, void, void))(*(void *)v16 + 136))(v16, (v14 + v12 + v155), (v10 + v8 + v156), v18 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void **__return_ptr, uint64_t, uint64_t))v16)(v144, v16, 0xFFFFFFFFLL);
  if (!v14 && !v10 && !v12 && !v8)
  {
    if (__src != v145 || v164 != v152)
    {
      cv::_OutputArray::_OutputArray((uint64_t)&v141, (cv::Mat *)v144);
      cv::Mat::copyTo((cv::Mat *)&v154, (const cv::_OutputArray *)&v141);
    }
    goto LABEL_111;
  }
  float v137 = v6 & 0xFFFFFFEF;
  uint64_t v128 = v14;
  if ((v6 & 0xFFFFFFEF) != 0)
  {
    unint64_t v134 = v164;
    int32x2_t v25 = (char *)__src;
    float64x2_t v26 = v162[1];
    uint64_t v27 = v152;
    uint64_t v126 = v145;
    uint64_t v28 = v150[1];
    if (SHIDWORD(v154) < 1) {
      LODWORD(v29) = 0;
    }
    else {
      int v29 = *((void *)v163 + (HIDWORD(v154) - 1));
    }
    uint64_t v34 = *v162;
    uint64_t v122 = *v150;
    uint64_t v132 = ((__src | v145 | v164 | v152) | v29) & 3;
    if ((((__src | v145 | v164 | v152) | v29) & 3) != 0) {
      uint64_t v35 = v29;
    }
    else {
      uint64_t v35 = ((int)v29 / 4);
    }
    uint64_t v36 = v35 * (v28 - v26);
    unint64_t v141 = (char *)v143;
    uint64_t v142 = 1032;
    if (v36 >= 0x409)
    {
      uint64_t v142 = (int)v36;
      operator new[]();
    }
    uint64_t v125 = v34;
    if (v10 >= 1)
    {
      uint64_t v37 = 0;
      float64x2_t v38 = v143;
      do
      {
        float64_t v39 = cv::borderInterpolate((cv *)(v37 - v10), v26, v137);
        if ((int)v35 >= 1)
        {
          uint64_t v40 = v39 * v35;
          float64x2_t v41 = v38;
          float64_t v42 = v35;
          do
          {
            *v41++ = v40++;
            --v42;
          }
          while (v42);
        }
        ++v37;
        v38 += (int)v35;
      }
      while (v37 != v10);
    }
    double v43 = (v28 - (v26 + v10));
    if ((int)v43 >= 1)
    {
      int v44 = 0;
      float32_t v45 = &v143[(int)v35 * (uint64_t)v10];
      do
      {
        int v46 = cv::borderInterpolate((cv *)(v26 + v44), v26, v137);
        if ((int)v35 >= 1)
        {
          uint64_t v47 = v46 * v35;
          double v48 = v45;
          int32x2_t v49 = v35;
          do
          {
            *v48++ = v47++;
            --v49;
          }
          while (v49);
        }
        ++v44;
        v45 += (int)v35;
      }
      while (v44 != v43);
    }
    uint64_t v121 = v35 * v28;
    int32x2_t v50 = v27 * v128;
    uint64_t v124 = &v126[v50];
    uint64_t v123 = 2 * (v132 == 0);
    if (v125 >= 1)
    {
      int64x2_t v51 = 0;
      int32x2_t v52 = (v35 * v10);
      int v53 = &v124[v52 << v123];
      float32_t v54 = v35 * v26;
      __uint64_t n = ((int)v35 * v26) << v123;
      double v55 = (v35 * v43);
      float64x2_t v56 = v50 + (int)(v52 << v123);
      double v57 = &v126[v56 - (int)v52];
      uint64_t v58 = &v126[v56 + v54];
      double v59 = &v126[v56 - 4 * (int)v52];
      int v60 = &v126[4 * v54 + v56];
      do
      {
        if (v53 != v25) {
          memcpy(v53, v25, __n);
        }
        if (v132)
        {
          float64x2_t v61 = v143;
          double v62 = v57;
          double v63 = v52;
          if ((int)v52 >= 1)
          {
            do
            {
              int v64 = *v61++;
              *v62++ = v25[v64];
              --v63;
            }
            while (v63);
          }
          BOOL v65 = &v143[(int)v52];
          uint64_t v66 = v58;
          int v67 = v55;
          if ((int)v55 >= 1)
          {
            do
            {
              int v68 = *v65++;
              *v66++ = v25[v68];
              --v67;
            }
            while (v67);
          }
        }
        else
        {
          uint64_t v69 = v143;
          __int32 v70 = v59;
          BOOL v71 = v52;
          if ((int)v52 >= 1)
          {
            do
            {
              uint64_t v72 = *v69++;
              *(_DWORD *)__int32 v70 = *(_DWORD *)&v25[4 * v72];
              v70 += 4;
              --v71;
            }
            while (v71);
          }
          uint64_t v73 = &v143[(int)v52];
          uint64_t v74 = v60;
          uint64_t v75 = v55;
          if ((int)v55 >= 1)
          {
            do
            {
              uint64_t v76 = *v73++;
              *(_DWORD *)uint64_t v74 = *(_DWORD *)&v25[4 * v76];
              v74 += 4;
              --v75;
            }
            while (v75);
          }
        }
        ++v51;
        v53 += v27;
        v25 += v134;
        v57 += v27;
        v58 += v27;
        v59 += v27;
        v60 += v27;
      }
      while (v51 != v125);
    }
    int v77 = v121 << v123;
    if (v128 >= 1)
    {
      BOOL v78 = v126;
      uint64_t v79 = -v128;
      int v80 = v128;
      do
      {
        int v81 = cv::borderInterpolate((cv *)v79, v125, v137);
        memcpy(v78, &v124[v27 * v81], v77);
        v78 += v27;
        uint64_t v79 = (v79 + 1);
        --v80;
      }
      while (v80);
    }
    uint64_t v82 = (v122 - v128 - v125);
    if ((int)v82 >= 1)
    {
      long long v83 = 0;
      long long v84 = &v126[v27 * (v128 + (uint64_t)v125)];
      do
      {
        int v85 = cv::borderInterpolate((cv *)(v125 + v83), v125, v137);
        memcpy(v84, &v124[v27 * v85], v77);
        ++v83;
        v84 += v27;
      }
      while (v82 != v83);
    }
    if (v141 != (char *)v143 && v141 != 0) {
LABEL_110:
    }
      MEMORY[0x22A641760]();
  }
  else
  {
    double v30 = (v154 >> 3) & 0x1FF;
    uint64_t v31 = v30 + 1;
    unint64_t v141 = (char *)v143;
    uint64_t v142 = 520;
    if (v30 < 4)
    {
      uint64_t v33 = v30 + 1;
    }
    else
    {
      uint64_t v32 = *v4;
      if (*v4 != v4[1] || v32 != v4[2] || v32 != v4[3])
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "value[0] == value[1] && value[0] == value[2] && value[0] == value[3]");
        std::string::basic_string[abi:ne180100]<0>(v140, "copyMakeBorder");
        std::string::basic_string[abi:ne180100]<0>(v139, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/utils.cpp");
        cv::Exception::Exception(&v165, 4294967081, __p, v140, v139, 248);
        cv::error((cv *)&v165, v87);
      }
      uint64_t v33 = 1;
    }
    v88.n128_f64[0] = cv::scalarToRawData((uint64_t)v4, (uint64_t)v143, (v154 & 7 | (8 * v33)) - 8, v31);
    int v89 = v150[1];
    if (SHIDWORD(v154) < 1) {
      int v90 = 0;
    }
    else {
      int v90 = *((unsigned int *)v163 + 2 * (HIDWORD(v154) - 1));
    }
    int v91 = (char *)__src;
    int v92 = v164;
    int v93 = v162[1];
    uint64_t v135 = v145;
    float v138 = *v162;
    int v94 = v152;
    __na = *v150;
    int v95 = v141;
    int v165 = v167;
    int v166 = 4104;
    unint64_t v133 = v89 * v90;
    if ((v89 * v90) >= 0x1009)
    {
      int v166 = v133;
      operator new[]();
    }
    if ((int)v89 >= 1)
    {
      int v96 = 0;
      int v97 = v167;
      do
      {
        if ((int)v90 >= 1)
        {
          int v98 = v95;
          int v99 = v97;
          int v100 = v90;
          do
          {
            int v101 = *v98++;
            *v99++ = v101;
            --v100;
          }
          while (v100);
        }
        ++v96;
        int v97 = (void *)((char *)v97 + (int)v90);
      }
      while (v96 != v89);
    }
    uint64_t v127 = v138 + v14;
    *(void *)unint64_t v131 = v14;
    if (v138 >= 1)
    {
      unsigned int v102 = v89 - (v93 + v10);
      uint64_t v103 = v10 * v90;
      BOOL v104 = &v135[v94 * v14];
      uint64_t v105 = v103;
      uint64_t v106 = v93 * v90;
      uint64_t v107 = v102 * (int)v90;
      int v108 = v106;
      uint64_t v109 = v105 + v106;
      uint64_t v110 = v138;
      do
      {
        if (v91 != &v104[v105]) {
          memcpy(&v104[v105], v91, v108);
        }
        memcpy(v104, v167, v105);
        memcpy(&v104[v109], v167, v107);
        v91 += v92;
        v104 += v94;
        --v110;
      }
      while (v110);
    }
    uint64_t v111 = (__na - v127);
    if (v128 >= 1)
    {
      unint64_t v112 = v135;
      int v113 = v128;
      do
      {
        memcpy(v112, v167, v133);
        v112 += v94;
        --v113;
      }
      while (v113);
    }
    if ((int)v111 >= 1)
    {
      uint64_t v114 = &v135[v94 * (*(void *)v131 + v138)];
      do
      {
        memcpy(v114, v167, v133);
        v114 += v94;
        --v111;
      }
      while (v111);
    }
    if (v165 != v167 && v165 != 0) {
      MEMORY[0x22A641760](v88);
    }
    if (v141 != (char *)v143 && v141 != 0) {
      goto LABEL_110;
    }
  }
LABEL_111:
  if (v146 && atomic_fetch_add(v146, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v144, v24);
  }
  uint64_t v145 = 0;
  uint64_t v147 = 0;
  uint64_t v149 = 0;
  uint64_t v148 = 0;
  if (SHIDWORD(v144[0]) >= 1)
  {
    unint64_t v117 = 0;
    uint64_t v118 = v150;
    do
      v118[v117++] = 0;
    while (v117 < SHIDWORD(v144[0]));
  }
  uint64_t v146 = 0;
  if (v151 != (cv *)&v152) {
    cv::fastFree((void **)v151, v24);
  }
  if (v158 && atomic_fetch_add(v158, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v154, v24);
  }
  __src = 0;
  unint64_t v159 = 0;
  unint64_t v161 = 0;
  unsigned int v160 = 0;
  if (SHIDWORD(v154) >= 1)
  {
    int v119 = 0;
    __int32 v120 = v162;
    do
      v120[v119++] = 0;
    while (v119 < SHIDWORD(v154));
  }
  uint64_t v158 = 0;
  if (v163 != (cv *)&v164) {
    cv::fastFree((void **)v163, v24);
  }
}

void sub_225ED64FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37)
{
  cv::Exception::~Exception((cv::Exception *)&STACK[0x11E8]);
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (SLOBYTE(STACK[0x1187]) < 0) {
    operator delete((void *)STACK[0x1170]);
  }
  if (a37 != a20)
  {
    if (a37) {
      MEMORY[0x22A641760]();
    }
  }
  cv::Mat::~Mat((cv::Mat *)&STACK[0x1110], v38);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x1188], v39);
  _Unwind_Resume(a1);
}

void cv::getDerivKernels(cv *this, const cv::_OutputArray *a2, const cv::_OutputArray *a3, int a4, int a5, char a6, unsigned int a7)
{
  if (a5 <= 0) {
    cv::getScharrKernels(this, a2, a3, a4, a6, a7);
  }
  else {
    cv::getSobelKernels(this, a2, a3, a4, a5, a6, a7);
  }
}

void cv::getScharrKernels(cv *this, const cv::_OutputArray *a2, const cv::_OutputArray *a3, int a4, unsigned __int8 a5, unsigned int a6)
{
  int v29 = (int)a3;
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (a6 - 5 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v43, "ktype == CV_32F || ktype == CV_64F");
    std::string::basic_string[abi:ne180100]<0>(&v34, "getScharrKernels");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/deriv.cpp");
    cv::Exception::Exception(&v52, 4294967081, &v43, &v34, __p, 136);
    cv::error((cv *)&v52, v8);
  }
  (*(void (**)(cv *, uint64_t, uint64_t, void, uint64_t, uint64_t, void))(*(void *)this + 136))(this, 3, 1, a6, 0xFFFFFFFFLL, 1, 0);
  (*(void (**)(const cv::_OutputArray *, uint64_t, uint64_t, void, uint64_t, uint64_t, void))(*(void *)a2 + 136))(a2, 3, 1, a6, 0xFFFFFFFFLL, 1, 0);
  (**(void (***)(void **__return_ptr, cv *, uint64_t))this)(&v43, this, 0xFFFFFFFFLL);
  (**(void (***)(void **__return_ptr, const cv::_OutputArray *, uint64_t))a2)(&v34, a2, 0xFFFFFFFFLL);
  if ((a4 | v29) < 0 || a4 + v29 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "dx >= 0 && dy >= 0 && dx+dy == 1");
    std::string::basic_string[abi:ne180100]<0>(&v63, "getScharrKernels");
    std::string::basic_string[abi:ne180100]<0>(v33, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/deriv.cpp");
    cv::Exception::Exception(&v52, 4294967081, __p, &v63, v33, 142);
    cv::error((cv *)&v52, v9);
  }
  char v10 = 1;
  do
  {
    char v11 = v10;
    if (v10) {
      uint64_t v12 = &v43;
    }
    else {
      uint64_t v12 = &v34;
    }
    if (v10) {
      int v13 = v29;
    }
    else {
      int v13 = a4;
    }
    if (v13)
    {
      if (v13 != 1) {
        goto LABEL_18;
      }
      uint64_t v14 = 0xFFFFFFFFLL;
      int v15 = 1;
    }
    else
    {
      int v15 = 3;
      uint64_t v14 = 0xA00000003;
    }
    uint64_t v63 = v14;
    int v64 = v15;
LABEL_18:
    int v16 = &v44;
    if ((v11 & 1) == 0) {
      int v16 = &v35;
    }
    uint64_t v17 = *(int *)v16;
    int32x2_t v18 = (char *)&v44 + 4;
    if ((v11 & 1) == 0) {
      int32x2_t v18 = (char *)&v35 + 4;
    }
    uint64_t v19 = *(int *)v18;
    v53[0] = v17;
    v53[1] = v19;
    float32_t v54 = &v63;
    double v55 = 0;
    int v60 = v53;
    float64x2_t v61 = (cv *)v62;
    uint64_t v52 = 0x242FF4004;
    v62[0] = 4 * v19;
    v62[1] = 4;
    uint64_t v58 = (char *)&v63 + 4 * v19 * v17;
    uint64_t v59 = 0;
    float64x2_t v56 = &v63;
    double v57 = v58;
    cv::_OutputArray::_OutputArray((uint64_t)__p, (cv::Mat *)v12);
    double v20 = 0.03125;
    if (((v13 != 1) & a5) == 0) {
      double v20 = 1.0;
    }
    cv::Mat::convertTo((cv::Mat *)&v52, (const cv::_OutputArray *)__p, a6, v20, 0.0);
    if (v55 && atomic_fetch_add(v55, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v52, v21);
    }
    float32_t v54 = 0;
    double v57 = 0;
    uint64_t v58 = 0;
    float64x2_t v56 = 0;
    if (SHIDWORD(v52) >= 1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = v60;
      do
        v23[v22++] = 0;
      while (v22 < SHIDWORD(v52));
    }
    double v55 = 0;
    if (v61 != (cv *)v62) {
      cv::fastFree((void **)v61, v21);
    }
    char v10 = 0;
  }
  while ((v11 & 1) != 0);
  if (v36 && atomic_fetch_add(v36, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v34, v21);
  }
  *((void *)&v35 + 1) = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  if (SHIDWORD(v34) >= 1)
  {
    uint64_t v24 = 0;
    uint64_t v25 = v40;
    do
      *(_DWORD *)(v25 + 4 * v24++) = 0;
    while (v24 < SHIDWORD(v34));
  }
  uint64_t v36 = 0;
  if (v41 != (cv *)&v42) {
    cv::fastFree((void **)v41, v21);
  }
  if (v45 && atomic_fetch_add(v45, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v43, v21);
  }
  *((void *)&v44 + 1) = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  if (SHIDWORD(v43) >= 1)
  {
    uint64_t v26 = 0;
    uint64_t v27 = v49;
    do
      *(_DWORD *)(v27 + 4 * v26++) = 0;
    while (v26 < SHIDWORD(v43));
  }
  float32_t v45 = 0;
  if (v50 != (cv *)&v51) {
    cv::fastFree((void **)v50, v21);
  }
}

void sub_225ED6BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  cv::Exception::~Exception((cv::Exception *)&a55);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v55 - 129) < 0) {
    operator delete(*(void **)(v55 - 152));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  cv::Mat::~Mat((cv::Mat *)&a25, v57);
  cv::Mat::~Mat((cv::Mat *)&a40, v58);
  _Unwind_Resume(a1);
}

void cv::getSobelKernels(cv *this, const cv::_OutputArray *a2, const cv::_OutputArray *a3, int a4, int a5, int a6, unsigned int a7)
{
  int v57 = (int)a3;
  if ((int)a3 > 0 && a5 == 1) {
    unsigned int v10 = 3;
  }
  else {
    unsigned int v10 = a5;
  }
  if (a4 > 0 && a5 == 1) {
    int v11 = 3;
  }
  else {
    int v11 = a5;
  }
  int v59 = v11;
  signed int v60 = v10;
  if (a7 - 5 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v74, "ktype == CV_32F || ktype == CV_64F");
    std::string::basic_string[abi:ne180100]<0>(&v65, "getSobelKernels");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/deriv.cpp");
    uint64_t v12 = (cv *)cv::Exception::Exception(&v83, 4294967081, &v74, &v65, __p, 171);
    cv::error(v12, v13);
  }
  (*(void (**)(cv *, void, uint64_t, void, uint64_t, uint64_t, void))(*(void *)this + 136))(this, v10, 1, a7, 0xFFFFFFFFLL, 1, 0);
  (*(void (**)(const cv::_OutputArray *, void, uint64_t, void, uint64_t, uint64_t, void))(*(void *)a2 + 136))(a2, v59, 1, a7, 0xFFFFFFFFLL, 1, 0);
  (**(void (***)(void **__return_ptr, cv *, uint64_t))this)(&v74, this, 0xFFFFFFFFLL);
  (**(void (***)(void **__return_ptr, const cv::_OutputArray *, uint64_t))a2)(&v65, a2, 0xFFFFFFFFLL);
  if (a5 > 31 || (a5 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "The kernel size must be odd and not larger than 31");
    std::string::basic_string[abi:ne180100]<0>(&v64, "getSobelKernels");
    std::string::basic_string[abi:ne180100]<0>(v63, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/deriv.cpp");
    uint64_t v14 = (cv *)cv::Exception::Exception(&v83, 4294967085, __p, &v64, v63, 179);
    cv::error(v14, v15);
  }
  signed int v16 = v60;
  if (v60 <= v59) {
    signed int v16 = v59;
  }
  std::vector<int>::vector(&v64, v16 + 1);
  if ((a4 | v57) < 0 || (a4 + v57 < 0) ^ __OFADD__(a4, v57) | (a4 + v57 == 0))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "dx >= 0 && dy >= 0 && dx+dy > 0");
    std::string::basic_string[abi:ne180100]<0>(v63, "getSobelKernels");
    std::string::basic_string[abi:ne180100]<0>(v62, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/deriv.cpp");
    uint64_t v17 = (cv *)cv::Exception::Exception(&v83, 4294967081, __p, v63, v62, 182);
    cv::error(v17, v18);
  }
  char v19 = 1;
  do
  {
    char v20 = v19;
    if (v19) {
      uint64_t v21 = &v74;
    }
    else {
      uint64_t v21 = &v65;
    }
    if (v19) {
      int v22 = v57;
    }
    else {
      int v22 = a4;
    }
    if (v19) {
      int v23 = v60;
    }
    else {
      int v23 = v59;
    }
    if (v23 <= v22)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ksize > order");
      std::string::basic_string[abi:ne180100]<0>(v63, "getSobelKernels");
      std::string::basic_string[abi:ne180100]<0>(v62, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/deriv.cpp");
      uint64_t v24 = (cv *)cv::Exception::Exception(&v83, 4294967081, __p, v63, v62, 190);
      cv::error(v24, v25);
    }
    if (v23 == 3)
    {
      if (v22 == 1)
      {
        std::vector<int>::pointer begin = v64.__begin_;
        std::vector<int>::pointer v42 = v64.__begin_;
        *(void *)v64.__begin_ = 0xFFFFFFFFLL;
        std::vector<int>::pointer v26 = v42 + 2;
      }
      else
      {
        std::vector<int>::pointer begin = v64.__begin_;
        std::vector<int>::pointer v28 = v64.__begin_;
        if (v22) {
          *(void *)v64.__begin_ = 0xFFFFFFFE00000001;
        }
        else {
          *(void *)v64.__begin_ = 0x200000001;
        }
        std::vector<int>::pointer v26 = v28 + 2;
      }
      goto LABEL_53;
    }
    if (v23 == 1)
    {
      std::vector<int>::pointer v26 = v64.__begin_;
      std::vector<int>::pointer begin = v64.__begin_;
LABEL_53:
      *std::vector<int>::pointer v26 = 1;
      goto LABEL_54;
    }
    std::vector<int>::pointer begin = v64.__begin_;
    *v64.__begin_ = 1;
    if (v23 >= 1) {
      bzero(begin + 1, 4 * v23);
    }
    int v29 = v23 + ~v22;
    if (v29 >= 1)
    {
      for (int i = 0; i != v29; ++i)
      {
        if (v23 >= 1)
        {
          int v31 = *begin;
          uint64_t v32 = (v23 + 1) - 1;
          uint64_t v33 = begin + 1;
          int v34 = *begin;
          do
          {
            int v35 = *v33;
            *(v33 - 1) = v34;
            int v34 = v31 + v35;
            ++v33;
            int v31 = v35;
            --v32;
          }
          while (v32);
        }
      }
    }
    if (v22 >= 1)
    {
      for (int j = 0; j != v22; ++j)
      {
        if (v23 >= 1)
        {
          int v37 = *begin;
          int v38 = -*begin;
          uint64_t v39 = (v23 + 1) - 1;
          uint64_t v40 = begin + 1;
          do
          {
            int v41 = *v40;
            *(v40 - 1) = v38;
            int v38 = v37 - v41;
            ++v40;
            int v37 = v41;
            --v39;
          }
          while (v39);
        }
      }
    }
LABEL_54:
    double v43 = &v75;
    if ((v20 & 1) == 0) {
      double v43 = &v66;
    }
    uint64_t v44 = *(int *)v43;
    float32_t v45 = (char *)&v75 + 4;
    if ((v20 & 1) == 0) {
      float32_t v45 = (char *)&v66 + 4;
    }
    uint64_t v46 = *(int *)v45;
    v84[0] = v44;
    _DWORD v84[1] = v46;
    std::vector<int>::pointer v85 = begin;
    unsigned int v86 = 0;
    int v91 = v84;
    int v92 = (void **)v93;
    uint64_t v83 = 0x242FF4004;
    v93[0] = 4 * v46;
    v93[1] = 4;
    int v89 = (char *)begin + 4 * v46 * v44;
    uint64_t v90 = 0;
    std::vector<int>::pointer v87 = begin;
    int v88 = v89;
    double v47 = 1.0;
    if (a6) {
      double v47 = 1.0 / (double)(1 << (v23 + ~(_BYTE)v22));
    }
    cv::_OutputArray::_OutputArray((uint64_t)__p, (cv::Mat *)v21);
    cv::Mat::convertTo((cv::Mat *)&v83, (const cv::_OutputArray *)__p, a7, v47, 0.0);
    if (v86 && atomic_fetch_add(v86, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v83, v48);
    }
    std::vector<int>::pointer v85 = 0;
    int v88 = 0;
    int v89 = 0;
    std::vector<int>::pointer v87 = 0;
    if (SHIDWORD(v83) >= 1)
    {
      uint64_t v49 = 0;
      int32x2_t v50 = v91;
      do
        v50[v49++] = 0;
      while (v49 < SHIDWORD(v83));
    }
    unsigned int v86 = 0;
    if (v92 != v93) {
      cv::fastFree(v92, v48);
    }
    char v19 = 0;
  }
  while ((v20 & 1) != 0);
  if (v64.__begin_)
  {
    v64.__end_ = v64.__begin_;
    operator delete(v64.__begin_);
  }
  if (v67 && atomic_fetch_add(v67, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v65, v48);
  }
  *((void *)&v66 + 1) = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  if (SHIDWORD(v65) >= 1)
  {
    uint64_t v51 = 0;
    uint64_t v52 = v71;
    do
      *(_DWORD *)(v52 + 4 * v51++) = 0;
    while (v51 < SHIDWORD(v65));
  }
  int v67 = 0;
  if (v72 != (cv *)&v73) {
    cv::fastFree((void **)v72, v48);
  }
  if (v76 && atomic_fetch_add(v76, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v74, v48);
  }
  *((void *)&v75 + 1) = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  if (SHIDWORD(v74) >= 1)
  {
    uint64_t v53 = 0;
    uint64_t v54 = v80;
    do
      *(_DWORD *)(v54 + 4 * v53++) = 0;
    while (v53 < SHIDWORD(v74));
  }
  uint64_t v76 = 0;
  if (v81 != (cv *)&v82) {
    cv::fastFree((void **)v81, v48);
  }
}

void sub_225ED746C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  cv::Exception::~Exception((cv::Exception *)(v57 - 256));
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a31) {
    operator delete(a31);
  }
  cv::Mat::~Mat((cv::Mat *)&a37, v59);
  cv::Mat::~Mat((cv::Mat *)&a52, v60);
  _Unwind_Resume(a1);
}

void cv::Sobel(cv *this, const cv::_InputArray *a2, const cv::_OutputArray *a3, const cv::_OutputArray *a4, int a5, int a6, double a7, double a8)
{
  void (**v17[4])(cv **__return_ptr, void, uint64_t);
  void (**v18[4])(cv **__return_ptr, void, uint64_t);
  unsigned char v19[32];
  _DWORD v20[16];
  _DWORD *v21;
  cv *v22;
  void v23[2];
  _DWORD v24[16];
  _DWORD *v25;
  cv *v26;
  void v27[2];
  cv *v28[2];
  int32x2_t v29;
  void v30[9];
  void (**v31[4])(void *__return_ptr);

  int v12 = (int)a3;
  (**(void (***)(void *__return_ptr))this)(v30);
  if (v12 < 0) {
    int v12 = v30[0] & 7;
  }
  int v29 = vrev64_s32(*(int32x2_t *)v30[8]);
  (*(void (**)(const cv::_InputArray *, int32x2_t *, void, uint64_t, void, void))(*(void *)a2 + 128))(a2, &v29, v30[0] & 0xFF8 | v12 & 7u, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(cv **__return_ptr, const cv::_InputArray *, uint64_t))a2)(v28, a2, 0xFFFFFFFFLL);
  unsigned int v14 = v30[0] & 7;
  uint64_t v25 = &v24[2];
  std::vector<int>::pointer v26 = (cv *)v27;
  if (v12 > v14) {
    unsigned int v14 = v12;
  }
  v27[0] = 0;
  v27[1] = 0;
  if (v14 <= 5) {
    unsigned int v15 = 5;
  }
  else {
    unsigned int v15 = v14;
  }
  v24[0] = 1124007936;
  memset(&v24[1], 0, 60);
  uint64_t v21 = &v20[2];
  int v22 = (cv *)v23;
  v23[0] = 0;
  v23[1] = 0;
  v20[0] = 1124007936;
  memset(&v20[1], 0, 60);
  cv::_OutputArray::_OutputArray((uint64_t)v31, (cv::Mat *)v24);
  cv::_OutputArray::_OutputArray((uint64_t)v19, (cv::Mat *)v20);
  cv::getDerivKernels((cv *)v31, (const cv::_OutputArray *)v19, a4, a5, a6, 0, v15);
  if (a7 != 1.0)
  {
    if (a4)
    {
      cv::_OutputArray::_OutputArray((uint64_t)v31, (cv::Mat *)v20);
      cv::Mat::convertTo((cv::Mat *)v20, (const cv::_OutputArray *)v31, -1, a7, 0.0);
    }
    else
    {
      cv::_OutputArray::_OutputArray((uint64_t)v31, (cv::Mat *)v24);
      cv::Mat::convertTo((cv::Mat *)v24, (const cv::_OutputArray *)v31, -1, a7, 0.0);
    }
  }
  cv::_InputArray::_InputArray((uint64_t)v31, (const cv::Mat *)v30);
  cv::_OutputArray::_OutputArray((uint64_t)v19, (cv::Mat *)v28);
  cv::_InputArray::_InputArray((uint64_t)v18, (const cv::Mat *)v24);
  cv::_InputArray::_InputArray((uint64_t)v17, (const cv::Mat *)v20);
  uint64_t v16 = -1;
  cv::sepFilter2D(v31, (uint64_t)v19, v12, v18, v17, &v16);
}

void sub_225ED7A30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  cv::Mat::~Mat((cv::Mat *)&a22, a2);
  cv::Mat::~Mat((cv::Mat *)&a34, v48);
  cv::Mat::~Mat((cv::Mat *)&a46, v49);
  cv::Mat::~Mat((cv::Mat *)(v46 - 224), v50);
  _Unwind_Resume(a1);
}

void cv::Scharr(cv *this, const cv::_InputArray *a2, const cv::_OutputArray *a3, const cv::_OutputArray *a4, int a5, double a6, double a7)
{
  void (**v15[4])(cv **__return_ptr, void, uint64_t);
  void (**v16[4])(cv **__return_ptr, void, uint64_t);
  unsigned char v17[32];
  _DWORD v18[16];
  _DWORD *v19;
  cv *v20;
  void v21[2];
  _DWORD v22[16];
  _DWORD *v23;
  cv *v24;
  void v25[2];
  cv *v26[2];
  int32x2_t v27;
  void v28[9];
  void (**v29[4])(void *__return_ptr);

  int v10 = (int)a3;
  (**(void (***)(void *__return_ptr))this)(v28);
  if (v10 < 0) {
    int v10 = v28[0] & 7;
  }
  uint64_t v27 = vrev64_s32(*(int32x2_t *)v28[8]);
  (*(void (**)(const cv::_InputArray *, int32x2_t *, void, uint64_t, void, void))(*(void *)a2 + 128))(a2, &v27, v28[0] & 0xFF8 | v10 & 7u, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(cv **__return_ptr, const cv::_InputArray *, uint64_t))a2)(v26, a2, 0xFFFFFFFFLL);
  unsigned int v12 = v28[0] & 7;
  int v23 = &v22[2];
  uint64_t v24 = (cv *)v25;
  if (v10 > v12) {
    unsigned int v12 = v10;
  }
  v25[0] = 0;
  v25[1] = 0;
  if (v12 <= 5) {
    unsigned int v13 = 5;
  }
  else {
    unsigned int v13 = v12;
  }
  v22[0] = 1124007936;
  memset(&v22[1], 0, 60);
  char v19 = &v18[2];
  char v20 = (cv *)v21;
  v21[0] = 0;
  v21[1] = 0;
  v18[0] = 1124007936;
  memset(&v18[1], 0, 60);
  cv::_OutputArray::_OutputArray((uint64_t)v29, (cv::Mat *)v22);
  cv::_OutputArray::_OutputArray((uint64_t)v17, (cv::Mat *)v18);
  cv::getScharrKernels((cv *)v29, (const cv::_OutputArray *)v17, a4, a5, 0, v13);
  if (a6 != 1.0)
  {
    if (a4)
    {
      cv::_OutputArray::_OutputArray((uint64_t)v29, (cv::Mat *)v18);
      cv::Mat::convertTo((cv::Mat *)v18, (const cv::_OutputArray *)v29, -1, a6, 0.0);
    }
    else
    {
      cv::_OutputArray::_OutputArray((uint64_t)v29, (cv::Mat *)v22);
      cv::Mat::convertTo((cv::Mat *)v22, (const cv::_OutputArray *)v29, -1, a6, 0.0);
    }
  }
  cv::_InputArray::_InputArray((uint64_t)v29, (const cv::Mat *)v28);
  cv::_OutputArray::_OutputArray((uint64_t)v17, (cv::Mat *)v26);
  cv::_InputArray::_InputArray((uint64_t)v16, (const cv::Mat *)v22);
  cv::_InputArray::_InputArray((uint64_t)v15, (const cv::Mat *)v18);
  uint64_t v14 = -1;
  cv::sepFilter2D(v29, (uint64_t)v17, v10, v16, v15, &v14);
}

void sub_225ED7EC0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  cv::Mat::~Mat((cv::Mat *)&a22, a2);
  cv::Mat::~Mat((cv::Mat *)&a34, v48);
  cv::Mat::~Mat((cv::Mat *)&a46, v49);
  cv::Mat::~Mat((cv::Mat *)(v46 - 208), v50);
  _Unwind_Resume(a1);
}

void cv::Laplacian(cv *this, const cv::_InputArray *a2, const cv::_OutputArray *a3, int a4, char a5, double a6, double a7)
{
  void (**v53)(uint64_t *__return_ptr, void, uint64_t);
  _OWORD v54[4];
  uint64_t v55;
  void *v56;
  void v57[6];

  signed int v11 = (int)a3;
  v57[3] = *MEMORY[0x263EF8340];
  (**(void (***)(void *__return_ptr))this)(v43);
  if (v11 < 0) {
    signed int v11 = v43[0] & 7;
  }
  int32x2_t v42 = vrev64_s32(*v48);
  (*(void (**)(const cv::_InputArray *, int32x2_t *, void, uint64_t, void, void))(*(void *)a2 + 128))(a2, &v42, v43[0] & 0xFF8 | v11 & 7u, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void *__return_ptr, const cv::_InputArray *, uint64_t))a2)(v34, a2, 0xFFFFFFFFLL);
  if ((a4 | 2) != 3)
  {
    __int16 v16 = v43[0];
    int v31 = &v30[8];
    uint64_t v32 = (cv *)&v33;
    if ((v43[0] & 7) < 6) {
      int v17 = 5;
    }
    else {
      int v17 = 6;
    }
    long long v33 = 0uLL;
    BOOL v18 = (v43[0] & 7) == 0 && a4 < 6;
    *(_DWORD *)double v30 = 1124007936;
    *(_OWORD *)&v30[4] = 0u;
    if (v18) {
      int v19 = 3;
    }
    else {
      int v19 = v17;
    }
    *(_OWORD *)&v30[20] = 0uLL;
    if (v11 <= (v43[0] & 7)) {
      unsigned int v20 = v43[0] & 7;
    }
    else {
      unsigned int v20 = v11;
    }
    *(_OWORD *)&v30[36] = 0uLL;
    if (v20 <= 5) {
      unsigned int v21 = 5;
    }
    else {
      unsigned int v21 = v20;
    }
    *(_OWORD *)&v30[48] = 0uLL;
    uint64_t v55 = (uint64_t)v54 + 8;
    float64x2_t v56 = v57;
    v57[0] = 0;
    v57[1] = 0;
    LODWORD(v54[0]) = 1124007936;
    memset((char *)v54 + 4, 0, 60);
    cv::_OutputArray::_OutputArray((uint64_t)&v27, (cv::Mat *)v30);
    cv::_OutputArray::_OutputArray((uint64_t)&v53, (cv::Mat *)v54);
    cv::getSobelKernels((cv *)&v27, (const cv::_OutputArray *)&v53, (const cv::_OutputArray *)2, 0, a4, 0, v21);
    __int16 v22 = v43[0];
    cv::_InputArray::_InputArray((uint64_t)&v27, (const cv::Mat *)v30);
    cv::_InputArray::_InputArray((uint64_t)&v53, (const cv::Mat *)v54);
    uint64_t v28 = -1;
    *(_OWORD *)uint64_t v51 = 0u;
    long long v52 = 0u;
    cv::createSeparableLinearFilter(v22 & 0xFFF, v19 | v16 & 0xFF8, (void (***)(uint64_t *__return_ptr, void, uint64_t))&v27, &v53, (int *)&v28);
  }
  uint64_t v55 = 0x4000000000000000;
  v54[0] = xmmword_225F317E0;
  v54[1] = unk_225F317F0;
  v54[2] = xmmword_225F31800;
  v54[3] = unk_225F31810;
  *(void *)&v30[16] = (char *)v54 + 36 * (a4 == 3);
  *(void *)&v30[24] = 0;
  int v31 = &v30[8];
  uint64_t v32 = (cv *)&v33;
  *(_OWORD *)double v30 = xmmword_225F317C0;
  long long v33 = xmmword_225F317D0;
  *(_OWORD *)&v30[48] = (unint64_t)(*(void *)&v30[16] + 36);
  *(void *)&v30[32] = *(void *)&v30[16];
  *(void *)&v30[40] = *(void *)&v30[16] + 36;
  if (a6 != 1.0)
  {
    cv::_OutputArray::_OutputArray((uint64_t)&v27, (cv::Mat *)v30);
    cv::Mat::convertTo((cv::Mat *)v30, (const cv::_OutputArray *)&v27, -1, a6, 0.0);
  }
  cv::_InputArray::_InputArray((uint64_t)&v27, (const cv::Mat *)v43);
  cv::_OutputArray::_OutputArray((uint64_t)&v53, (cv::Mat *)v34);
  cv::_InputArray::_InputArray((uint64_t)v51, (const cv::Mat *)v30);
  uint64_t v29 = -1;
  cv::filter2D((void (***)(void *__return_ptr))&v27, (uint64_t)&v53, v11, (void (***)(uint64_t *__return_ptr, void, uint64_t))v51, &v29, a5, a7);
  if (*(void *)&v30[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v30[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v30, v13);
  }
  *(void *)&v30[16] = 0;
  memset(&v30[32], 0, 24);
  if (*(int *)&v30[4] >= 1)
  {
    uint64_t v14 = 0;
    unsigned int v15 = v31;
    do
      *(_DWORD *)&v15[4 * v14++] = 0;
    while (v14 < *(int *)&v30[4]);
  }
  *(void *)&v30[24] = 0;
  if (v32 != (cv *)&v33) {
    cv::fastFree((void **)v32, v13);
  }
  if (v35 && atomic_fetch_add(v35, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v34, v13);
  }
  v34[2] = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  if (SHIDWORD(v34[0]) >= 1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = v39;
    do
      *(_DWORD *)(v24 + 4 * v23++) = 0;
    while (v23 < SHIDWORD(v34[0]));
  }
  int v35 = 0;
  if (v40 != (cv *)&v41) {
    cv::fastFree((void **)v40, v13);
  }
  if (v44 && atomic_fetch_add(v44, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v43, v13);
  }
  uint64_t v43[2] = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  if (SHIDWORD(v43[0]) >= 1)
  {
    uint64_t v25 = 0;
    std::vector<int>::pointer v26 = v48;
    do
      v26->i32[v25++] = 0;
    while (v25 < SHIDWORD(v43[0]));
  }
  uint64_t v44 = 0;
  if (v49 != (cv *)&v50) {
    cv::fastFree((void **)v49, v13);
  }
}

void sub_225ED89D8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

const cv::Mat **cv::mixChannels(cv *this, const cv::Mat *a2, unint64_t a3, cv::Mat *a4, unint64_t a5, const int *a6)
{
  uint64_t result = (const cv::Mat **)MEMORY[0x270FA5388](this, a2);
  uint64_t v64 = v7;
  v76[515] = *(const cv::Mat **)MEMORY[0x263EF8340];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v61 = v9;
    if (!result || !v7 || !v8 || !v9 || !v10)
    {
      std::string::basic_string[abi:ne180100]<0>(v70, "src && nsrcs > 0 && dst && ndsts > 0 && fromTo && npairs > 0");
      std::string::basic_string[abi:ne180100]<0>(v73, "mixChannels");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/convert.cpp");
      cv::Exception::Exception(&v74, 4294967081, v70, v73, __p, 460);
      cv::error((cv *)&v74, v13);
    }
    int v14 = *(_DWORD *)v8;
    *(void *)int v59 = v9 + v7;
    uint64_t v74 = v76;
    uint64_t v75 = 4104;
    if (40 * v11 + 16 * (v9 + v7) + 16 >= 0x1009)
    {
      uint64_t v75 = 40 * v11 + 16 * (v9 + v7) + 16;
      operator new[]();
    }
    unint64_t v15 = (0x88442211uLL >> (4 * (v14 & 7u))) & 0xF;
    __int16 v16 = &v76[v7];
    int v17 = (unsigned __int8 **)&v16[v9];
    uint64_t v18 = (uint64_t)&(&v17[v7])[v9];
    uint64_t v19 = v18 + 8 + 8 * v11;
    unint64_t v62 = v19 + 8 * v11;
    unint64_t v20 = v62 + 16 * v11;
    uint64_t v21 = (uint64_t)result;
    __int16 v22 = v76;
    uint64_t v23 = v7;
    do
    {
      *v22++ = (const cv::Mat *)v21;
      v21 += 96;
      --v23;
    }
    while (v23);
    uint64_t v60 = v14 & 7;
    unint64_t v24 = v20 + 4 * v11;
    uint64_t v25 = v9;
    std::vector<int>::pointer v26 = v8;
    uint64_t v27 = v9;
    do
    {
      *v16++ = v26;
      std::vector<int>::pointer v26 = (const cv::Mat *)((char *)v26 + 96);
      --v27;
    }
    while (v27);
    uint64_t v28 = 0;
    v17[*(void *)v59] = 0;
    unint64_t v68 = v11;
    if (v11 <= 1) {
      uint64_t v12 = 1;
    }
    do
    {
      uint64_t v29 = (int *)(v10 + 8 * v28);
      int v30 = *v29;
      int v31 = v29[1];
      uint64_t v66 = v28;
      if (*v29 < 0)
      {
        int v37 = 0;
        *(void *)(v62 + 16 * v2_Block_object_dispose(&a9, 8) = v59[0];
      }
      else
      {
        uint64_t v32 = 0;
        long long v33 = result;
        while (1)
        {
          unsigned int v35 = *(_DWORD *)v33;
          v33 += 12;
          char v34 = v35;
          int v36 = (v35 >> 3) & 0x1FF;
          if (v30 <= v36) {
            break;
          }
          v30 += ~v36;
          if (v7 == ++v32) {
            goto LABEL_23;
          }
        }
        if ((v34 & 7) != v60)
        {
LABEL_23:
          std::string::basic_string[abi:ne180100]<0>(v73, "j < nsrcs && src[j].depth() == depth");
          std::string::basic_string[abi:ne180100]<0>(__p, "mixChannels");
          std::string::basic_string[abi:ne180100]<0>(v69, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/convert.cpp");
          cv::Exception::Exception(v70, 4294967081, v73, __p, v69, 487);
          cv::error((cv *)v70, v38);
        }
        uint64_t v28 = v66;
        uint64_t v39 = (_DWORD *)(v62 + 16 * v66);
        *uint64_t v39 = v32;
        v39[1] = v30 * v15;
        uint64_t v40 = 12 * v32;
        uint64_t v25 = v9;
        int v37 = ((LODWORD(result[v40]) >> 3) & 0x1FF) + 1;
      }
      *(_DWORD *)(v20 + 4 * v2_Block_object_dispose(&a9, 8) = v37;
      uint64_t v41 = 0;
      int32x2_t v42 = v8;
      while (1)
      {
        unsigned int v44 = *(_DWORD *)v42;
        int32x2_t v42 = (const cv::Mat *)((char *)v42 + 96);
        char v43 = v44;
        int v45 = (v44 >> 3) & 0x1FF;
        if (v31 <= v45) {
          break;
        }
        v31 += ~v45;
        if (v25 == ++v41) {
          goto LABEL_31;
        }
      }
      if (v31 < 0 || (v43 & 7) != v60)
      {
LABEL_31:
        std::string::basic_string[abi:ne180100]<0>(v73, "i1 >= 0 && j < ndsts && dst[j].depth() == depth");
        std::string::basic_string[abi:ne180100]<0>(__p, "mixChannels");
        std::string::basic_string[abi:ne180100]<0>(v69, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/convert.cpp");
        cv::Exception::Exception(v70, 4294967081, v73, __p, v69, 500);
        cv::error((cv *)v70, v46);
      }
      unint64_t v47 = v62 + 16 * v66;
      *(_DWORD *)(v47 + _Block_object_dispose(&a9, 8) = v41 + v7;
      *(_DWORD *)(v47 + 12) = v31 * v15;
      *(_DWORD *)(v24 + 4 * v66) = ((*((_DWORD *)v8 + 24 * v41) >> 3) & 0x1FF) + 1;
      uint64_t v28 = v66 + 1;
    }
    while (v66 + 1 != v12);
    cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)v70, v76, v17, v59[0]);
    int v48 = v71;
    int v67 = cv::getMixchFunc(int)::mixchTab[v60];
    if ((int)((v15 + 1023) / v15) >= v71) {
      int v49 = v71;
    }
    else {
      int v49 = (v15 + 1023) / v15;
    }
    unint64_t v50 = v68;
    uint64_t v51 = 0;
    uint64_t v63 = (char *)&v76[2 * v61 + 1] + 16 * v64 + 16 * v68 + 4;
    while (1)
    {
      long long v52 = (int *)v63;
      uint64_t v53 = (void *)(v18 + 8);
      uint64_t v54 = v12;
      if (v51 >= v70[4]) {
        break;
      }
      do
      {
        *uint64_t v53 = &v17[*(v52 - 1)][*v52];
        v53[v50] = &v17[v52[1]][v52[2]];
        ++v53;
        v52 += 4;
        --v54;
      }
      while (v54);
      uint64_t v65 = v51;
      if (v48 >= 1)
      {
        int v55 = 0;
        do
        {
          if (v49 >= v48 - v55) {
            uint64_t v56 = (v48 - v55);
          }
          else {
            uint64_t v56 = v49;
          }
          ((void (*)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))v67)(v18 + 8, v20, v19, v24, v56, v68);
          v55 += v49;
          if (v55 >= v48) {
            break;
          }
          for (uint64_t i = 0; i != v12; ++i)
          {
            *(void *)(v18 + 8 * i + 8) += v15 * *(int *)(v20 + 4 * i) * (uint64_t)v49;
            *(void *)(v19 + 8 * i) += v15 * *(int *)(v24 + 4 * i) * (uint64_t)v49;
          }
        }
        while (v55 < v48);
      }
      uint64_t v51 = v65 + 1;
      cv::NAryMatIterator::operator++((uint64_t)v70);
      unint64_t v50 = v68;
    }
    uint64_t result = v74;
    if (v74 != v76 && v74 != 0) {
      return (const cv::Mat **)MEMORY[0x22A641760]();
    }
  }
  return result;
}

void sub_225ED9128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::getConvertFunc(cv *this, char a2)
{
  return (uint64_t)*(&cv::getConvertFunc(int,int)::cvtTab + 8 * (unint64_t)(a2 & 7) + (this & 7));
}

char *cv::cvt8u(char *__src, uint64_t a2, int a3, int a4, char *__dst, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    unint64_t v11 = __src;
    size_t v12 = *a7;
    do
    {
      --v7;
      __src = (char *)memcpy(__dst, v11, v12);
      v11 += a2;
      __dst += a6;
    }
    while (v7);
  }
  return __src;
}

uint64_t cv::cvt8s8u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        do
        {
          int v10 = *(char *)(result + v9 + 1) & ~(*(char *)(result + v9 + 1) >> 31);
          unint64_t v11 = (unsigned char *)(a5 + v9);
          *unint64_t v11 = *(unsigned char *)(result + v9) & ~(*(char *)(result + v9) >> 7);
          v11[1] = v10;
          int v12 = *(char *)(result + v9 + 3) & ~(*(char *)(result + v9 + 3) >> 31);
          v11[2] = *(unsigned char *)(result + v9 + 2) & ~(*(char *)(result + v9 + 2) >> 31);
          void v11[3] = v12;
          v9 += 4;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          *(unsigned char *)(a5 + v9) = *(unsigned char *)(result + v9) & ~(*(char *)(result + v9) >> 31);
          ++v9;
        }
        while (v9 < v8);
      }
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt16u8u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    uint64_t v9 = (unsigned __int16 *)(result + 4);
    uint64_t v10 = 2 * (a2 >> 1);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        int v12 = v9;
        do
        {
          unsigned int v13 = *(v12 - 2);
          if (v13 >= 0xFF) {
            LOBYTE(v13) = -1;
          }
          unsigned int v14 = *(v12 - 1);
          if (v14 >= 0xFF) {
            LOBYTE(v14) = -1;
          }
          unint64_t v15 = (unsigned char *)(a5 + v11);
          unsigned char *v15 = v13;
          v15[1] = v14;
          unsigned int v16 = *v12;
          if (v16 >= 0xFF) {
            LOBYTE(v16) = -1;
          }
          unsigned int v17 = v12[1];
          if (v17 >= 0xFF) {
            LOBYTE(v17) = -1;
          }
          v15[2] = v16;
          v15[3] = v17;
          v11 += 4;
          v12 += 4;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v8)
      {
        do
        {
          unsigned int v18 = *(unsigned __int16 *)(result + 2 * v11);
          if (v18 >= 0xFF) {
            LOBYTE(v1_Block_object_dispose(&a9, 8) = -1;
          }
          *(unsigned char *)(a5 + v11++) = v18;
        }
        while (v11 < v8);
      }
      a5 += a6;
      uint64_t v9 = (unsigned __int16 *)((char *)v9 + v10);
      result += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt16s8u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    uint64_t v9 = (__int16 *)(result + 4);
    uint64_t v10 = 2 * (a2 >> 1);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        int v12 = v9;
        do
        {
          unsigned int v13 = (unsigned char *)(a5 + v11);
          v14.i32[0] = *(v12 - 2);
          v14.i32[1] = *(v12 - 1);
          int32x2_t v15 = vmin_s32(vmax_s32(v14, 0), (int32x2_t)0xFF000000FFLL);
          v13[1] = v15.i8[4];
          *unsigned int v13 = v15.i8[0];
          v15.i32[0] = *v12;
          v15.i32[1] = v12[1];
          int32x2_t v16 = vmin_s32(vmax_s32(v15, 0), (int32x2_t)0xFF000000FFLL);
          v13[3] = v16.i8[4];
          int v13[2] = v16.i8[0];
          v11 += 4;
          v12 += 4;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v8)
      {
        do
        {
          int v17 = *(__int16 *)(result + 2 * v11) & ~(*(__int16 *)(result + 2 * v11) >> 31);
          if (v17 >= 255) {
            LOBYTE(v17) = -1;
          }
          *(unsigned char *)(a5 + v11++) = v17;
        }
        while (v11 < v8);
      }
      a5 += a6;
      uint64_t v9 = (__int16 *)((char *)v9 + v10);
      result += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

int32x2_t *cv::cvt32s8u(int32x2_t *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    uint64_t v9 = result + 1;
    uint64_t v10 = 4 * (a2 >> 2);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        int v12 = v9;
        do
        {
          unsigned int v13 = (unsigned char *)(a5 + v11);
          int32x2_t v14 = vmin_s32(vmax_s32(v12[-1], 0), (int32x2_t)0xFF000000FFLL);
          v13[1] = v14.i8[4];
          *unsigned int v13 = v14.i8[0];
          int32x2_t v15 = *v12;
          v12 += 2;
          int32x2_t v16 = vmin_s32(vmax_s32(v15, 0), (int32x2_t)0xFF000000FFLL);
          v13[3] = v16.i8[4];
          int v13[2] = v16.i8[0];
          v11 += 4;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v8)
      {
        do
        {
          int v17 = result->i32[v11] & ~(result->i32[v11] >> 31);
          if (v17 >= 255) {
            LOBYTE(v17) = -1;
          }
          *(unsigned char *)(a5 + v11++) = v17;
        }
        while (v11 < v8);
      }
      a5 += a6;
      uint64_t v9 = (int32x2_t *)((char *)v9 + v10);
      uint64_t result = (int32x2_t *)((char *)result + v10);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt32f8u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    uint64_t v9 = result + 8;
    uint64_t v10 = 4 * (a2 >> 2);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v9;
        do
        {
          unsigned int v13 = (unsigned char *)(a5 + v11);
          int32x2_t v14 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(*(float *)(v12 - 4)), (uint64_t)rint(*(float *)(v12 - 8))), 0), (int32x2_t)0xFF000000FFLL);
          v13[1] = v14.i8[4];
          *unsigned int v13 = v14.i8[0];
          v14.i32[0] = *(_DWORD *)v12;
          float v15 = *(float *)(v12 + 4);
          v12 += 16;
          int32x2_t v16 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v15), (uint64_t)rint(*(float *)v14.i32)), 0), (int32x2_t)0xFF000000FFLL);
          v13[3] = v16.i8[4];
          int v13[2] = v16.i8[0];
          v11 += 4;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v8)
      {
        do
        {
          double v17 = rint(*(float *)(result + 4 * v11));
          int v18 = (uint64_t)v17 & ~((int)(uint64_t)v17 >> 31);
          if (v18 >= 255) {
            LOBYTE(v1_Block_object_dispose(&a9, 8) = -1;
          }
          *(unsigned char *)(a5 + v11++) = v18;
        }
        while (v11 < v8);
      }
      a5 += a6;
      v9 += v10;
      result += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt64f8u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    uint64_t v9 = (double *)(result + 16);
    uint64_t v10 = 8 * (a2 >> 3);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v9;
        do
        {
          unsigned int v13 = (unsigned char *)(a5 + v11);
          int32x2_t v14 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(*(v12 - 1)), (uint64_t)rint(*(v12 - 2))), 0), (int32x2_t)0xFF000000FFLL);
          v13[1] = v14.i8[4];
          *unsigned int v13 = v14.i8[0];
          double v15 = *v12;
          double v16 = v12[1];
          v12 += 4;
          int32x2_t v17 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v16), (uint64_t)rint(v15)), 0), (int32x2_t)0xFF000000FFLL);
          v13[3] = v17.i8[4];
          int v13[2] = v17.i8[0];
          v11 += 4;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v8)
      {
        do
        {
          double v18 = rint(*(double *)(result + 8 * v11));
          int v19 = (uint64_t)v18 & ~((int)(uint64_t)v18 >> 31);
          if (v19 >= 255) {
            LOBYTE(v19) = -1;
          }
          *(unsigned char *)(a5 + v11++) = v19;
        }
        while (v11 < v8);
      }
      a5 += a6;
      uint64_t v9 = (double *)((char *)v9 + v10);
      result += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt8u8s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        do
        {
          uint64_t v10 = (unsigned __int8 *)(result + v9);
          unsigned int v11 = *(unsigned __int8 *)(result + v9);
          if (v11 >= 0x7F) {
            LOBYTE(v11) = 127;
          }
          unsigned int v12 = v10[1];
          if (v12 >= 0x7F) {
            LOBYTE(v12) = 127;
          }
          unsigned int v13 = (unsigned char *)(a5 + v9);
          *unsigned int v13 = v11;
          v13[1] = v12;
          unsigned int v14 = v10[2];
          if (v14 >= 0x7F) {
            LOBYTE(v14) = 127;
          }
          unsigned int v15 = v10[3];
          if (v15 >= 0x7F) {
            LOBYTE(v15) = 127;
          }
          int v13[2] = v14;
          v13[3] = v15;
          v9 += 4;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          unsigned int v16 = *(unsigned __int8 *)(result + v9);
          if (v16 >= 0x7F) {
            LOBYTE(v16) = 127;
          }
          *(unsigned char *)(a5 + v9++) = v16;
        }
        while (v9 < v8);
      }
      result += a2;
      a5 += a6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt16u8s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    uint64_t v9 = (unsigned __int16 *)(result + 4);
    uint64_t v10 = 2 * (a2 >> 1);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        unsigned int v12 = v9;
        do
        {
          unsigned int v13 = *(v12 - 2);
          if (v13 >= 0x7F) {
            LOBYTE(v13) = 127;
          }
          unsigned int v14 = *(v12 - 1);
          if (v14 >= 0x7F) {
            LOBYTE(v14) = 127;
          }
          unsigned int v15 = (unsigned char *)(a5 + v11);
          unsigned char *v15 = v13;
          v15[1] = v14;
          unsigned int v16 = *v12;
          if (v16 >= 0x7F) {
            LOBYTE(v16) = 127;
          }
          unsigned int v17 = v12[1];
          if (v17 >= 0x7F) {
            LOBYTE(v17) = 127;
          }
          v15[2] = v16;
          v15[3] = v17;
          v11 += 4;
          v12 += 4;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v8)
      {
        do
        {
          unsigned int v18 = *(unsigned __int16 *)(result + 2 * v11);
          if (v18 >= 0x7F) {
            LOBYTE(v1_Block_object_dispose(&a9, 8) = 127;
          }
          *(unsigned char *)(a5 + v11++) = v18;
        }
        while (v11 < v8);
      }
      a5 += a6;
      uint64_t v9 = (unsigned __int16 *)((char *)v9 + v10);
      result += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt16s8s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    uint64_t v9 = (__int16 *)(result + 4);
    uint64_t v10 = 2 * (a2 >> 1);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        unsigned int v12 = v9;
        do
        {
          int v13 = *(v12 - 2);
          if (v13 <= -128) {
            int v13 = -128;
          }
          if (v13 >= 127) {
            LOBYTE(v13) = 127;
          }
          int v14 = *(v12 - 1);
          if (v14 <= -128) {
            int v14 = -128;
          }
          if (v14 >= 127) {
            LOBYTE(v14) = 127;
          }
          unsigned int v15 = (unsigned char *)(a5 + v11);
          unsigned char *v15 = v13;
          v15[1] = v14;
          int v16 = *v12;
          if (v16 <= -128) {
            int v16 = -128;
          }
          if (v16 >= 127) {
            LOBYTE(v16) = 127;
          }
          int v17 = v12[1];
          if (v17 <= -128) {
            int v17 = -128;
          }
          if (v17 >= 127) {
            LOBYTE(v17) = 127;
          }
          v15[2] = v16;
          v15[3] = v17;
          v11 += 4;
          v12 += 4;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v8)
      {
        do
        {
          int v18 = *(__int16 *)(result + 2 * v11);
          if (v18 <= -128) {
            int v18 = -128;
          }
          if (v18 >= 127) {
            LOBYTE(v1_Block_object_dispose(&a9, 8) = 127;
          }
          *(unsigned char *)(a5 + v11++) = v18;
        }
        while (v11 < v8);
      }
      a5 += a6;
      uint64_t v9 = (__int16 *)((char *)v9 + v10);
      result += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

int32x2_t *cv::cvt32s8s(int32x2_t *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    uint64_t v9 = result + 1;
    uint64_t v10 = 4 * (a2 >> 2);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        unsigned int v12 = v9;
        do
        {
          int v13 = (unsigned char *)(a5 + v11);
          int32x2_t v14 = vmin_s32(vmax_s32(v12[-1], (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v13[1] = v14.i8[4];
          *int v13 = v14.i8[0];
          int32x2_t v15 = *v12;
          v12 += 2;
          int32x2_t v16 = vmin_s32(vmax_s32(v15, (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v13[3] = v16.i8[4];
          int v13[2] = v16.i8[0];
          v11 += 4;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v8)
      {
        do
        {
          int v17 = result->i32[v11];
          if (v17 <= -128) {
            int v17 = -128;
          }
          if (v17 >= 127) {
            LOBYTE(v17) = 127;
          }
          *(unsigned char *)(a5 + v11++) = v17;
        }
        while (v11 < v8);
      }
      a5 += a6;
      uint64_t v9 = (int32x2_t *)((char *)v9 + v10);
      uint64_t result = (int32x2_t *)((char *)result + v10);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt32f8s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    uint64_t v9 = result + 8;
    uint64_t v10 = 4 * (a2 >> 2);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v9;
        do
        {
          int v13 = (unsigned char *)(a5 + v11);
          int32x2_t v14 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(*(float *)(v12 - 4)), (uint64_t)rint(*(float *)(v12 - 8))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v13[1] = v14.i8[4];
          *int v13 = v14.i8[0];
          v14.i32[0] = *(_DWORD *)v12;
          float v15 = *(float *)(v12 + 4);
          v12 += 16;
          int32x2_t v16 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v15), (uint64_t)rint(*(float *)v14.i32)), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v13[3] = v16.i8[4];
          int v13[2] = v16.i8[0];
          v11 += 4;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v8)
      {
        do
        {
          uint64_t v17 = (uint64_t)rint(*(float *)(result + 4 * v11));
          if ((int)v17 <= -128) {
            LODWORD(v17) = -128;
          }
          if ((int)v17 >= 127) {
            LOBYTE(v17) = 127;
          }
          *(unsigned char *)(a5 + v11++) = v17;
        }
        while (v11 < v8);
      }
      a5 += a6;
      v9 += v10;
      result += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt64f8s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    uint64_t v9 = (double *)(result + 16);
    uint64_t v10 = 8 * (a2 >> 3);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v9;
        do
        {
          int v13 = (unsigned char *)(a5 + v11);
          int32x2_t v14 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(*(v12 - 1)), (uint64_t)rint(*(v12 - 2))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v13[1] = v14.i8[4];
          *int v13 = v14.i8[0];
          double v15 = *v12;
          double v16 = v12[1];
          v12 += 4;
          int32x2_t v17 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v16), (uint64_t)rint(v15)), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v13[3] = v17.i8[4];
          int v13[2] = v17.i8[0];
          v11 += 4;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v8)
      {
        do
        {
          uint64_t v18 = (uint64_t)rint(*(double *)(result + 8 * v11));
          if ((int)v18 <= -128) {
            LODWORD(v1_Block_object_dispose(&a9, 8) = -128;
          }
          if ((int)v18 >= 127) {
            LOBYTE(v1_Block_object_dispose(&a9, 8) = 127;
          }
          *(unsigned char *)(a5 + v11++) = v18;
        }
        while (v11 < v8);
      }
      a5 += a6;
      uint64_t v9 = (double *)((char *)v9 + v10);
      result += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt8u16u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = (_WORD *)(a5 + 4);
    uint64_t v11 = 2 * (a6 >> 1);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        int v13 = v10;
        do
        {
          __int16 v14 = *(unsigned __int8 *)(result + v12 + 1);
          *(v13 - 2) = *(unsigned __int8 *)(result + v12);
          *(v13 - 1) = v14;
          __int16 v15 = *(unsigned __int8 *)(result + v12 + 3);
          *int v13 = *(unsigned __int8 *)(result + v12 + 2);
          v13[1] = v15;
          v12 += 4;
          v13 += 4;
        }
        while (v12 <= v8 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v9)
      {
        do
        {
          *(_WORD *)(a5 + 2 * v12) = *(unsigned __int8 *)(result + v12);
          ++v12;
        }
        while (v9 != v12);
      }
      result += a2;
      uint64_t v10 = (_WORD *)((char *)v10 + v11);
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt8s16u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = (_WORD *)(a5 + 4);
    uint64_t v11 = 2 * (a6 >> 1);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        int v13 = v10;
        do
        {
          int v14 = *(char *)(result + v12 + 1) & ~(*(char *)(result + v12 + 1) >> 31);
          *(v13 - 2) = *(char *)(result + v12) & (unsigned __int16)~(unsigned __int16)(*(char *)(result + v12) >> 31);
          *(v13 - 1) = v14;
          int v15 = *(char *)(result + v12 + 3) & ~(*(char *)(result + v12 + 3) >> 31);
          *int v13 = *(char *)(result + v12 + 2) & (unsigned __int16)~(unsigned __int16)(*(char *)(result + v12 + 2) >> 31);
          v13[1] = v15;
          v12 += 4;
          v13 += 4;
        }
        while (v12 <= v8 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v9)
      {
        do
        {
          *(_WORD *)(a5 + 2 * v12) = *(char *)(result + v12) & (unsigned __int16)~(unsigned __int16)(*(char *)(result + v12) >> 31);
          ++v12;
        }
        while (v9 != v12);
      }
      result += a2;
      uint64_t v10 = (_WORD *)((char *)v10 + v11);
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  return result;
}

char *cv::cvt16u(char *__src, unint64_t a2, int a3, int a4, char *__dst, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v9 = __src;
    size_t v10 = 2 * *a7;
    uint64_t v11 = 2 * (a2 >> 1);
    uint64_t v12 = 2 * (a6 >> 1);
    do
    {
      --v7;
      __src = (char *)memcpy(__dst, v9, v10);
      v9 += v11;
      __dst += v12;
    }
    while (v7);
  }
  return __src;
}

uint64_t cv::cvt16s16u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = 2 * (a2 >> 1);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t v11 = 0;
        do
        {
          int v13 = *(__int16 *)(result + v12 + 2) & ~(*(__int16 *)(result + v12 + 2) >> 31);
          int v14 = (_WORD *)(a5 + v12);
          _WORD *v14 = *(_WORD *)(result + v12) & ~(*(__int16 *)(result + v12) >> 15);
          v14[1] = v13;
          int v15 = *(__int16 *)(result + v12 + 6) & ~(*(__int16 *)(result + v12 + 6) >> 31);
          void v14[2] = *(_WORD *)(result + v12 + 4) & ~(*(__int16 *)(result + v12 + 4) >> 15);
          v14[3] = v15;
          v11 += 4;
          v12 += 8;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v9)
      {
        do
        {
          *(_WORD *)(a5 + 2 * v11) = *(_WORD *)(result + 2 * v11) & ~(*(__int16 *)(result + 2 * v11) >> 15);
          ++v11;
        }
        while (v9 != v11);
      }
      a5 += 2 * (a6 >> 1);
      result += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

int32x4_t *cv::cvt32s16u(int32x4_t *result, unint64_t a2, uint64_t a3, uint64_t a4, int16x4_t *a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    v10.i64[0] = 0xFFFF0000FFFFLL;
    v10.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t v12 = result;
        int v13 = a5;
        do
        {
          int32x4_t v14 = *v12++;
          *v13++ = vmovn_s32(vminq_s32(vmaxq_s32(v14, (int32x4_t)0), v10));
          v11 += 4;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v9)
      {
        do
        {
          int v15 = result->i32[v11] & ~(result->i32[v11] >> 31);
          if (v15 >= 0xFFFF) {
            LOWORD(v15) = -1;
          }
          a5->i16[v11++] = v15;
        }
        while (v9 != v11);
      }
      a5 = (int16x4_t *)((char *)a5 + 2 * (a6 >> 1));
      uint64_t result = (int32x4_t *)((char *)result + 4 * (a2 >> 2));
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt32f16u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x4_t *a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = 2 * (a6 >> 1);
    uint64_t v11 = (float *)(result + 8);
    uint64_t v12 = 4 * (a2 >> 2);
    v13.i64[0] = 0xFFFF0000FFFFLL;
    v13.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v14 = 0;
        int v15 = v11;
        double v16 = a5;
        do
        {
          uint64_t v17 = (uint64_t)rint(*(v15 - 2));
          uint64_t v18 = (uint64_t)rint(*(v15 - 1));
          float v20 = *v15;
          float v19 = v15[1];
          v15 += 4;
          uint64_t v21 = (uint64_t)rint(v20);
          v22.i64[0] = __PAIR64__(v18, v17);
          v22.i32[2] = v21;
          v22.i32[3] = (uint64_t)rint(v19);
          *v16++ = vmovn_s32(vminq_s32(vmaxq_s32(v22, (int32x4_t)0), v13));
          v14 += 4;
        }
        while (v14 <= v8 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v9)
      {
        do
        {
          double v23 = rint(*(float *)(result + 4 * v14));
          int v24 = (uint64_t)v23 & ~((int)(uint64_t)v23 >> 31);
          if (v24 >= 0xFFFF) {
            LOWORD(v24) = -1;
          }
          a5->i16[v14++] = v24;
        }
        while (v9 != v14);
      }
      a5 = (int16x4_t *)((char *)a5 + v10);
      uint64_t v11 = (float *)((char *)v11 + v12);
      result += v12;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt64f16u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x4_t *a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = 2 * (a6 >> 1);
    uint64_t v11 = (double *)(result + 16);
    uint64_t v12 = 8 * (a2 >> 3);
    v13.i64[0] = 0xFFFF0000FFFFLL;
    v13.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v14 = 0;
        int v15 = v11;
        double v16 = a5;
        do
        {
          uint64_t v17 = (uint64_t)rint(*(v15 - 2));
          uint64_t v18 = (uint64_t)rint(*(v15 - 1));
          double v19 = *v15;
          double v20 = v15[1];
          v15 += 4;
          uint64_t v21 = (uint64_t)rint(v19);
          double v22 = rint(v20);
          v23.i64[0] = __PAIR64__(v18, v17);
          v23.i32[2] = v21;
          v23.i32[3] = (uint64_t)v22;
          *v16++ = vmovn_s32(vminq_s32(vmaxq_s32(v23, (int32x4_t)0), v13));
          v14 += 4;
        }
        while (v14 <= v8 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v9)
      {
        do
        {
          double v24 = rint(*(double *)(result + 8 * v14));
          int v25 = (uint64_t)v24 & ~((int)(uint64_t)v24 >> 31);
          if (v25 >= 0xFFFF) {
            LOWORD(v25) = -1;
          }
          a5->i16[v14++] = v25;
        }
        while (v9 != v14);
      }
      a5 = (int16x4_t *)((char *)a5 + v10);
      uint64_t v11 = (double *)((char *)v11 + v12);
      result += v12;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt8u16s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = (_WORD *)(a5 + 4);
    uint64_t v11 = 2 * (a6 >> 1);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        int32x4_t v13 = v10;
        do
        {
          __int16 v14 = *(unsigned __int8 *)(result + v12 + 1);
          *(v13 - 2) = *(unsigned __int8 *)(result + v12);
          *(v13 - 1) = v14;
          __int16 v15 = *(unsigned __int8 *)(result + v12 + 3);
          *int32x4_t v13 = *(unsigned __int8 *)(result + v12 + 2);
          v13[1] = v15;
          v12 += 4;
          v13 += 4;
        }
        while (v12 <= v8 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v9)
      {
        do
        {
          *(_WORD *)(a5 + 2 * v12) = *(unsigned __int8 *)(result + v12);
          ++v12;
        }
        while (v9 != v12);
      }
      result += a2;
      uint64_t v10 = (_WORD *)((char *)v10 + v11);
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt8s16s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = (_WORD *)(a5 + 4);
    uint64_t v11 = 2 * (a6 >> 1);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        int32x4_t v13 = v10;
        do
        {
          __int16 v14 = *(char *)(result + v12 + 1);
          *(v13 - 2) = *(char *)(result + v12);
          *(v13 - 1) = v14;
          __int16 v15 = *(char *)(result + v12 + 3);
          *int32x4_t v13 = *(char *)(result + v12 + 2);
          v13[1] = v15;
          v12 += 4;
          v13 += 4;
        }
        while (v12 <= v8 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v9)
      {
        do
        {
          *(_WORD *)(a5 + 2 * v12) = *(char *)(result + v12);
          ++v12;
        }
        while (v9 != v12);
      }
      result += a2;
      uint64_t v10 = (_WORD *)((char *)v10 + v11);
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt16u16s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = 2 * (a2 >> 1);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t v11 = 0;
        do
        {
          int32x4_t v13 = (unsigned __int16 *)(result + v12);
          unsigned int v14 = *(unsigned __int16 *)(result + v12);
          if (v14 >= 0x7FFF) {
            LOWORD(v14) = 0x7FFF;
          }
          unsigned int v15 = v13[1];
          if (v15 >= 0x7FFF) {
            LOWORD(v15) = 0x7FFF;
          }
          double v16 = (_WORD *)(a5 + v12);
          _WORD *v16 = v14;
          v16[1] = v15;
          unsigned int v17 = v13[2];
          if (v17 >= 0x7FFF) {
            LOWORD(v17) = 0x7FFF;
          }
          unsigned int v18 = v13[3];
          if (v18 >= 0x7FFF) {
            LOWORD(v1_Block_object_dispose(&a9, 8) = 0x7FFF;
          }
          v16[2] = v17;
          v16[3] = v18;
          v11 += 4;
          v12 += 8;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v9)
      {
        do
        {
          unsigned int v19 = *(unsigned __int16 *)(result + 2 * v11);
          if (v19 >= 0x7FFF) {
            LOWORD(v19) = 0x7FFF;
          }
          *(_WORD *)(a5 + 2 * v11++) = v19;
        }
        while (v9 != v11);
      }
      a5 += 2 * (a6 >> 1);
      result += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

int32x4_t *cv::cvt32s16s(int32x4_t *result, unint64_t a2, uint64_t a3, uint64_t a4, int16x4_t *a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = 4 * (a2 >> 2);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t v12 = result;
        int32x4_t v13 = a5;
        do
        {
          int32x4_t v14 = *v12++;
          *v13++ = vqmovn_s32(v14);
          v11 += 4;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v9)
      {
        do
        {
          int v15 = result->i32[v11];
          if (v15 <= -32768) {
            int v15 = -32768;
          }
          if (v15 >= 0x7FFF) {
            LOWORD(v15) = 0x7FFF;
          }
          a5->i16[v11++] = v15;
        }
        while (v9 != v11);
      }
      a5 = (int16x4_t *)((char *)a5 + 2 * (a6 >> 1));
      uint64_t result = (int32x4_t *)((char *)result + v10);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt32f16s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 1)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v10 = (uint64_t)rint(*(float *)(result + 4 * i));
          if ((int)v10 <= -32768) {
            LODWORD(v10) = -32768;
          }
          if ((int)v10 >= 0x7FFF) {
            LOWORD(v10) = 0x7FFF;
          }
          *(_WORD *)(a5 + 2 * i) = v10;
        }
      }
      a5 += 2 * (a6 >> 1);
      result += 4 * (a2 >> 2);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt64f16s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x4_t *a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = 2 * (a6 >> 1);
    uint64_t v11 = (double *)(result + 16);
    uint64_t v12 = 8 * (a2 >> 3);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v13 = 0;
        int32x4_t v14 = v11;
        int v15 = a5;
        do
        {
          uint64_t v16 = (uint64_t)rint(*(v14 - 2));
          uint64_t v17 = (uint64_t)rint(*(v14 - 1));
          double v18 = *v14;
          double v19 = v14[1];
          v14 += 4;
          uint64_t v20 = (uint64_t)rint(v18);
          double v21 = rint(v19);
          v22.i64[0] = __PAIR64__(v17, v16);
          v22.i32[2] = v20;
          v22.i32[3] = (uint64_t)v21;
          *v15++ = vqmovn_s32(v22);
          v13 += 4;
        }
        while (v13 <= v8 - 4);
        uint64_t v13 = v13;
      }
      else
      {
        uint64_t v13 = 0;
      }
      if ((int)v13 < (int)v9)
      {
        do
        {
          uint64_t v23 = (uint64_t)rint(*(double *)(result + 8 * v13));
          if ((int)v23 <= -32768) {
            LODWORD(v23) = -32768;
          }
          if ((int)v23 >= 0x7FFF) {
            LOWORD(v23) = 0x7FFF;
          }
          a5->i16[v13++] = v23;
        }
        while (v9 != v13);
      }
      a5 = (int16x4_t *)((char *)a5 + v10);
      uint64_t v11 = (double *)((char *)v11 + v12);
      result += v12;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt8u32s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    uint64_t v9 = (_DWORD *)(a5 + 8);
    uint64_t v10 = 4 * (a6 >> 2);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v9;
        do
        {
          int v13 = *(unsigned __int8 *)(result + v11 + 1);
          *(v12 - 2) = *(unsigned __int8 *)(result + v11);
          *(v12 - 1) = v13;
          int v14 = *(unsigned __int8 *)(result + v11 + 3);
          *uint64_t v12 = *(unsigned __int8 *)(result + v11 + 2);
          v12[1] = v14;
          v12 += 4;
          v11 += 4;
        }
        while (v11 <= v8 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v8)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v11) = *(unsigned __int8 *)(result + v11);
          ++v11;
        }
        while (v11 < v8);
      }
      result += a2;
      uint64_t v9 = (_DWORD *)((char *)v9 + v10);
      a5 += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}