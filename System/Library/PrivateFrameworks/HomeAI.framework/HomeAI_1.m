uint64_t cv::cvt8s32s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = (_DWORD *)(a5 + 8);
    v10 = 4 * (a6 >> 2);
    do
    {
      if ((int)v8 >= 4)
      {
        v11 = 0;
        v12 = v9;
        do
        {
          v13 = *(char *)(result + v11 + 1);
          *(v12 - 2) = *(char *)(result + v11);
          *(v12 - 1) = v13;
          v14 = *(char *)(result + v11 + 3);
          *v12 = *(char *)(result + v11 + 2);
          v12[1] = v14;
          v12 += 4;
          v11 += 4;
        }
        while (v11 <= v8 - 4);
        v11 = v11;
      }
      else
      {
        v11 = 0;
      }
      if ((int)v11 < (int)v8)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v11) = *(char *)(result + v11);
          ++v11;
        }
        while (v11 < v8);
      }
      result += a2;
      v9 = (_DWORD *)((char *)v9 + v10);
      a5 += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint16x4_t *cv::cvt16u32s(uint16x4_t *result, unint64_t a2, uint64_t a3, uint64_t a4, uint32x4_t *a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        v10 = result;
        v11 = a5;
        do
        {
          uint16x4_t v12 = *v10++;
          *v11++ = vmovl_u16(v12);
          v9 += 4;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          a5->i32[v9] = result->u16[v9];
          ++v9;
        }
        while (v9 < v8);
      }
      a5 = (uint32x4_t *)((char *)a5 + 4 * (a6 >> 2));
      result = (uint16x4_t *)((char *)result + 2 * (a2 >> 1));
      --v7;
    }
    while (v7);
  }
  return result;
}

int16x4_t *cv::cvt16s32s(int16x4_t *result, unint64_t a2, uint64_t a3, uint64_t a4, int32x4_t *a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v9 = 0;
        v10 = result;
        v11 = a5;
        do
        {
          int16x4_t v12 = *v10++;
          *v11++ = vmovl_s16(v12);
          v9 += 4;
        }
        while (v9 <= v8 - 4);
        uint64_t v9 = v9;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if ((int)v9 < (int)v8)
      {
        do
        {
          a5->i32[v9] = result->i16[v9];
          ++v9;
        }
        while (v9 < v8);
      }
      a5 = (int32x4_t *)((char *)a5 + 4 * (a6 >> 2));
      result = (int16x4_t *)((char *)result + 2 * (a2 >> 1));
      --v7;
    }
    while (v7);
  }
  return result;
}

char *cv::cvt32s(char *__src, unint64_t a2, int a3, int a4, char *__dst, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v9 = __src;
    size_t v10 = 4 * *a7;
    uint64_t v11 = 4 * (a2 >> 2);
    uint64_t v12 = 4 * (a6 >> 2);
    do
    {
      --v7;
      __src = (char *)memcpy(__dst, v9, v10);
      v9 += v11;
      __dst += v12;
    }
    while (v7);
  }
  return __src;
}

uint64_t cv::cvt32f32s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    uint64_t v9 = 4 * (a2 >> 2);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t v10 = 0;
        do
        {
          uint64_t v12 = (uint64_t)rint(*(float *)(result + v11 + 4));
          uint64_t v13 = (uint64_t)rint(*(float *)(result + v11 + 8));
          v14 = (_DWORD *)(a5 + v11);
          double v15 = rint(*(float *)(result + v11 + 12));
          _DWORD *v14 = (uint64_t)rint(*(float *)(result + v11));
          v14[1] = v12;
          v14[2] = v13;
          v14[3] = (uint64_t)v15;
          v10 += 4;
          v11 += 16;
        }
        while (v10 <= v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v8)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v10) = (uint64_t)rint(*(float *)(result + 4 * v10));
          ++v10;
        }
        while (v10 < v8);
      }
      a5 += 4 * (a6 >> 2);
      result += v9;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt64f32s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    uint64_t v9 = (_DWORD *)(a5 + 8);
    uint64_t v10 = 4 * (a6 >> 2);
    uint64_t v11 = (double *)(result + 16);
    uint64_t v12 = 8 * (a2 >> 3);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v13 = 0;
        v14 = v11;
        double v15 = v9;
        do
        {
          uint64_t v16 = (uint64_t)rint(*(v14 - 2));
          uint64_t v17 = (uint64_t)rint(*(v14 - 1));
          double v18 = *v14;
          double v19 = v14[1];
          v14 += 4;
          *(v15 - 2) = v16;
          *(v15 - 1) = v17;
          *double v15 = (uint64_t)rint(v18);
          v15[1] = (uint64_t)rint(v19);
          v15 += 4;
          v13 += 4;
        }
        while (v13 <= v8 - 4);
        uint64_t v13 = v13;
      }
      else
      {
        uint64_t v13 = 0;
      }
      if ((int)v13 < (int)v8)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v13) = (uint64_t)rint(*(double *)(result + 8 * v13));
          ++v13;
        }
        while (v13 < v8);
      }
      uint64_t v9 = (_DWORD *)((char *)v9 + v10);
      uint64_t v11 = (double *)((char *)v11 + v12);
      a5 += v10;
      result += v12;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt8u32f(uint64_t result, uint64_t a2, float a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unsigned int *a9)
{
  int v9 = a9[1];
  if (v9)
  {
    uint64_t v10 = (int)*a9;
    uint64_t v11 = *a9;
    uint64_t v12 = (float *)(a7 + 8);
    uint64_t v13 = 4 * (a8 >> 2);
    do
    {
      if ((int)v10 >= 4)
      {
        uint64_t v14 = 0;
        double v15 = v12;
        do
        {
          LOBYTE(a3) = *(unsigned char *)(result + v14);
          float v16 = (float)LODWORD(a3);
          LOBYTE(a4) = *(unsigned char *)(result + v14 + 1);
          float v17 = (float)LODWORD(a4);
          *(v15 - 2) = v16;
          *(v15 - 1) = v17;
          LOBYTE(v16) = *(unsigned char *)(result + v14 + 2);
          a3 = (float)LODWORD(v16);
          LOBYTE(v17) = *(unsigned char *)(result + v14 + 3);
          a4 = (float)LODWORD(v17);
          *double v15 = a3;
          v15[1] = a4;
          v15 += 4;
          v14 += 4;
        }
        while (v14 <= v10 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v11)
      {
        do
        {
          LOBYTE(a3) = *(unsigned char *)(result + v14);
          a3 = (float)LODWORD(a3);
          *(float *)(a7 + 4 * v14++) = a3;
        }
        while (v11 != v14);
      }
      result += a2;
      uint64_t v12 = (float *)((char *)v12 + v13);
      a7 += v13;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t cv::cvt8s32f(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = (float *)(a5 + 8);
    uint64_t v11 = 4 * (a6 >> 2);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v10;
        do
        {
          float v14 = (float)*(char *)(result + v12 + 1);
          *(v13 - 2) = (float)*(char *)(result + v12);
          *(v13 - 1) = v14;
          float v15 = (float)*(char *)(result + v12 + 3);
          *uint64_t v13 = (float)*(char *)(result + v12 + 2);
          v13[1] = v15;
          v13 += 4;
          v12 += 4;
        }
        while (v12 <= v8 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v9)
      {
        do
        {
          *(float *)(a5 + 4 * v12) = (float)*(char *)(result + v12);
          ++v12;
        }
        while (v9 != v12);
      }
      result += a2;
      uint64_t v10 = (float *)((char *)v10 + v11);
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint16x4_t *cv::cvt16u32f(uint16x4_t *result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, __n128 *a6, unint64_t a7, unsigned int *a8)
{
  int v8 = a8[1];
  if (v8)
  {
    uint64_t v9 = (int)*a8;
    uint64_t v10 = *a8;
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t v12 = result;
        uint64_t v13 = a6;
        do
        {
          uint16x4_t v14 = *v12++;
          a3 = (__n128)vcvtq_f32_u32(vmovl_u16(v14));
          *v13++ = a3;
          v11 += 4;
        }
        while (v11 <= v9 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < (int)v10)
      {
        do
        {
          a3.n128_u16[0] = result->u16[v11];
          a3.n128_f32[0] = (float)a3.n128_u32[0];
          a6->n128_u32[v11++] = a3.n128_u32[0];
        }
        while (v10 != v11);
      }
      a6 = (__n128 *)((char *)a6 + 4 * (a7 >> 2));
      result = (uint16x4_t *)((char *)result + 2 * (a2 >> 1));
      --v8;
    }
    while (v8);
  }
  return result;
}

int16x4_t *cv::cvt16s32f(int16x4_t *result, unint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = result;
        uint64_t v12 = a5;
        do
        {
          int16x4_t v13 = *v11++;
          *v12++ = vcvtq_f32_s32(vmovl_s16(v13));
          v10 += 4;
        }
        while (v10 <= v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v9)
      {
        do
        {
          a5->f32[v10] = (float)result->i16[v10];
          ++v10;
        }
        while (v9 != v10);
      }
      a5 = (float32x4_t *)((char *)a5 + 4 * (a6 >> 2));
      result = (int16x4_t *)((char *)result + 2 * (a2 >> 1));
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt32s32f(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t v10 = 0;
        do
        {
          *(float32x4_t *)(a5 + v11) = vcvtq_f32_s32(*(int32x4_t *)(result + v11));
          v10 += 4;
          v11 += 16;
        }
        while (v10 <= v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v9)
      {
        do
        {
          *(float *)(a5 + 4 * v10) = (float)*(int *)(result + 4 * v10);
          ++v10;
        }
        while (v9 != v10);
      }
      a5 += 4 * (a6 >> 2);
      result += 4 * (a2 >> 2);
      --v7;
    }
    while (v7);
  }
  return result;
}

float64x2_t *cv::cvt64f32f(float64x2_t *result, unint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v10 = 0;
        uint64_t v11 = result;
        uint64_t v12 = a5;
        do
        {
          float64x2_t v14 = *v11;
          float64x2_t v13 = v11[1];
          v11 += 2;
          *v12++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v14), v13);
          v10 += 4;
        }
        while (v10 <= v8 - 4);
        uint64_t v10 = v10;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if ((int)v10 < (int)v9)
      {
        do
        {
          float32_t v15 = result->f64[v10];
          a5->f32[v10++] = v15;
        }
        while (v9 != v10);
      }
      a5 = (float32x4_t *)((char *)a5 + 4 * (a6 >> 2));
      result = (float64x2_t *)((char *)result + 8 * (a2 >> 3));
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt8u64f(uint64_t result, uint64_t a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unsigned int *a9)
{
  int v9 = a9[1];
  if (v9)
  {
    uint64_t v10 = (int)*a9;
    uint64_t v11 = *a9;
    uint64_t v12 = (double *)(a7 + 16);
    uint64_t v13 = 8 * (a8 >> 3);
    do
    {
      if ((int)v10 >= 4)
      {
        uint64_t v14 = 0;
        float32_t v15 = v12;
        do
        {
          LOBYTE(a3) = *(unsigned char *)(result + v14);
          double v16 = (double)*(unint64_t *)&a3;
          LOBYTE(a4) = *(unsigned char *)(result + v14 + 1);
          double v17 = (double)*(unint64_t *)&a4;
          *(v15 - 2) = v16;
          *(v15 - 1) = v17;
          LOBYTE(v16) = *(unsigned char *)(result + v14 + 2);
          a3 = (double)*(unint64_t *)&v16;
          LOBYTE(v17) = *(unsigned char *)(result + v14 + 3);
          a4 = (double)*(unint64_t *)&v17;
          *float32_t v15 = a3;
          v15[1] = a4;
          v15 += 4;
          v14 += 4;
        }
        while (v14 <= v10 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v11)
      {
        do
        {
          LOBYTE(a3) = *(unsigned char *)(result + v14);
          a3 = (double)*(unint64_t *)&a3;
          *(double *)(a7 + 8 * v14++) = a3;
        }
        while (v11 != v14);
      }
      result += a2;
      uint64_t v12 = (double *)((char *)v12 + v13);
      a7 += v13;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t cv::cvt8s64f(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = (double *)(a5 + 16);
    uint64_t v11 = 8 * (a6 >> 3);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v10;
        do
        {
          double v14 = (double)*(char *)(result + v12 + 1);
          *(v13 - 2) = (double)*(char *)(result + v12);
          *(v13 - 1) = v14;
          double v15 = (double)*(char *)(result + v12 + 3);
          *uint64_t v13 = (double)*(char *)(result + v12 + 2);
          v13[1] = v15;
          v13 += 4;
          v12 += 4;
        }
        while (v12 <= v8 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v9)
      {
        do
        {
          *(double *)(a5 + 8 * v12) = (double)*(char *)(result + v12);
          ++v12;
        }
        while (v9 != v12);
      }
      result += a2;
      uint64_t v10 = (double *)((char *)v10 + v11);
      a5 += v11;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt16u64f(uint64_t result, unint64_t a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unsigned int *a9)
{
  int v9 = a9[1];
  if (v9)
  {
    uint64_t v10 = (int)*a9;
    uint64_t v11 = *a9;
    uint64_t v12 = (double *)(a7 + 16);
    uint64_t v13 = 8 * (a8 >> 3);
    double v14 = (_WORD *)(result + 4);
    uint64_t v15 = 2 * (a2 >> 1);
    do
    {
      if ((int)v10 >= 4)
      {
        uint64_t v16 = 0;
        double v17 = v14;
        double v18 = v12;
        do
        {
          LOWORD(a3) = *(v17 - 2);
          double v19 = (double)*(unint64_t *)&a3;
          LOWORD(a4) = *(v17 - 1);
          double v20 = (double)*(unint64_t *)&a4;
          *(v18 - 2) = v19;
          *(v18 - 1) = v20;
          LOWORD(v19) = *v17;
          a3 = (double)*(unint64_t *)&v19;
          LOWORD(v20) = v17[1];
          a4 = (double)*(unint64_t *)&v20;
          *double v18 = a3;
          v18[1] = a4;
          v18 += 4;
          v16 += 4;
          v17 += 4;
        }
        while (v16 <= v10 - 4);
        uint64_t v16 = v16;
      }
      else
      {
        uint64_t v16 = 0;
      }
      if ((int)v16 < (int)v11)
      {
        do
        {
          LOWORD(a3) = *(_WORD *)(result + 2 * v16);
          a3 = (double)*(unint64_t *)&a3;
          *(double *)(a7 + 8 * v16++) = a3;
        }
        while (v11 != v16);
      }
      uint64_t v12 = (double *)((char *)v12 + v13);
      double v14 = (_WORD *)((char *)v14 + v15);
      a7 += v13;
      result += v15;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t cv::cvt16s64f(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = (double *)(a5 + 16);
    uint64_t v11 = 8 * (a6 >> 3);
    uint64_t v12 = (__int16 *)(result + 4);
    uint64_t v13 = 2 * (a2 >> 1);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v12;
        uint64_t v16 = v10;
        do
        {
          double v17 = (double)*(v15 - 1);
          *(v16 - 2) = (double)*(v15 - 2);
          *(v16 - 1) = v17;
          double v18 = (double)v15[1];
          *uint64_t v16 = (double)*v15;
          v16[1] = v18;
          v16 += 4;
          v14 += 4;
          v15 += 4;
        }
        while (v14 <= v8 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v9)
      {
        do
        {
          *(double *)(a5 + 8 * v14) = (double)*(__int16 *)(result + 2 * v14);
          ++v14;
        }
        while (v9 != v14);
      }
      uint64_t v10 = (double *)((char *)v10 + v11);
      uint64_t v12 = (__int16 *)((char *)v12 + v13);
      a5 += v11;
      result += v13;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t cv::cvt32s64f(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = a5 + 1;
    uint64_t v11 = 8 * (a6 >> 3);
    uint64_t v12 = (uint64_t *)(result + 8);
    uint64_t v13 = 4 * (a2 >> 2);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v12;
        uint64_t v16 = v10;
        do
        {
          uint64_t v17 = *(v15 - 1);
          v18.i64[0] = (int)v17;
          v18.i64[1] = SHIDWORD(v17);
          v16[-1] = vcvtq_f64_s64(v18);
          uint64_t v19 = *v15;
          v15 += 2;
          v18.i64[0] = (int)v19;
          v18.i64[1] = SHIDWORD(v19);
          *uint64_t v16 = vcvtq_f64_s64(v18);
          v16 += 2;
          v14 += 4;
        }
        while (v14 <= v8 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v9)
      {
        do
        {
          a5->f64[v14] = (double)*(int *)(result + 4 * v14);
          ++v14;
        }
        while (v9 != v14);
      }
      uint64_t v10 = (float64x2_t *)((char *)v10 + v11);
      uint64_t v12 = (uint64_t *)((char *)v12 + v13);
      a5 = (float64x2_t *)((char *)a5 + v11);
      result += v13;
      --v7;
    }
    while (v7);
  }
  return result;
}

float32x2_t *cv::cvt32f64f(float32x2_t *result, unint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, unint64_t a6, unsigned int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = (int)*a7;
    uint64_t v9 = *a7;
    uint64_t v10 = a5 + 1;
    uint64_t v11 = 8 * (a6 >> 3);
    uint64_t v12 = result + 1;
    uint64_t v13 = 4 * (a2 >> 2);
    do
    {
      if ((int)v8 >= 4)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v12;
        uint64_t v16 = v10;
        do
        {
          v16[-1] = vcvtq_f64_f32(v15[-1]);
          float32x2_t v17 = *v15;
          v15 += 2;
          *uint64_t v16 = vcvtq_f64_f32(v17);
          v16 += 2;
          v14 += 4;
        }
        while (v14 <= v8 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v9)
      {
        do
        {
          a5->f64[v14] = result->f32[v14];
          ++v14;
        }
        while (v9 != v14);
      }
      uint64_t v10 = (float64x2_t *)((char *)v10 + v11);
      uint64_t v12 = (float32x2_t *)((char *)v12 + v13);
      a5 = (float64x2_t *)((char *)a5 + v11);
      result = (float32x2_t *)((char *)result + v13);
      --v7;
    }
    while (v7);
  }
  return result;
}

char *cv::cvt64s(char *__src, unint64_t a2, int a3, int a4, char *__dst, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v9 = __src;
    size_t v10 = 8 * *a7;
    uint64_t v11 = 8 * (a2 >> 3);
    uint64_t v12 = 8 * (a6 >> 3);
    do
    {
      --v7;
      __src = (char *)memcpy(__dst, v9, v10);
      v9 += v11;
      __dst += v12;
    }
    while (v7);
  }
  return __src;
}

uint64_t cv::cvtScale8u(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, float a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, double *a14)
{
  int v14 = a13[1];
  if (v14)
  {
    uint64_t v15 = *a13;
    float v16 = *a14;
    float v17 = a14[1];
    do
    {
      if ((int)v15 >= 4)
      {
        uint64_t v18 = 0;
        do
        {
          LOBYTE(a7) = *(unsigned char *)(result + v18);
          LOBYTE(a8) = *(unsigned char *)(result + v18 + 1);
          double v19 = (float)(v17 + (float)((float)LODWORD(a8) * v16));
          int32x2_t v20 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v19), (uint64_t)rint((float)(v17 + (float)((float)LODWORD(a7) * v16)))), 0), (int32x2_t)0xFF000000FFLL);
          v21 = (unsigned char *)(a11 + v18);
          v21[1] = v20.i8[4];
          unsigned char *v21 = v20.i8[0];
          v20.i8[0] = *(unsigned char *)(result + v18 + 2);
          LOBYTE(v19) = *(unsigned char *)(result + v18 + 3);
          a8 = (float)LODWORD(v19);
          a7 = COERCE_DOUBLE(vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v17 + (float)(a8 * v16))), (uint64_t)rint((float)(v17 + (float)((float)v20.u32[0] * v16)))), 0), (int32x2_t)0xFF000000FFLL));
          v21[3] = BYTE4(a7);
          v21[2] = LOBYTE(a7);
          v18 += 4;
        }
        while (v18 <= v15 - 4);
        uint64_t v18 = v18;
      }
      else
      {
        uint64_t v18 = 0;
      }
      if ((int)v18 < (int)v15)
      {
        do
        {
          LOBYTE(a7) = *(unsigned char *)(result + v18);
          a7 = rint((float)(v17 + (float)((float)LODWORD(a7) * v16)));
          int v22 = (uint64_t)a7 & ~((int)(uint64_t)a7 >> 31);
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          *(unsigned char *)(a11 + v18++) = v22;
        }
        while (v18 < v15);
      }
      result += a2;
      a11 += a12;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t cv::cvtScale8s8u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    float v10 = *a8;
    float v11 = a8[1];
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v12 = 0;
        do
        {
          v13.i32[0] = (uint64_t)rint((float)(v11 + (float)((float)*(char *)(result + v12) * v10)));
          v13.i32[1] = (uint64_t)rint((float)(v11 + (float)((float)*(char *)(result + v12 + 1) * v10)));
          int v14 = (unsigned char *)(a5 + v12);
          int32x2_t v15 = vmin_s32(vmax_s32(v13, 0), (int32x2_t)0xFF000000FFLL);
          v14[1] = v15.i8[4];
          unsigned char *v14 = v15.i8[0];
          int32x2_t v16 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v11 + (float)((float)*(char *)(result + v12 + 3) * v10))), (uint64_t)rint((float)(v11 + (float)((float)*(char *)(result + v12 + 2) * v10)))), 0), (int32x2_t)0xFF000000FFLL);
          v14[3] = v16.i8[4];
          v14[2] = v16.i8[0];
          v12 += 4;
        }
        while (v12 <= v9 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v9)
      {
        do
        {
          double v17 = rint((float)(v11 + (float)((float)*(char *)(result + v12) * v10)));
          int v18 = (uint64_t)v17 & ~((int)(uint64_t)v17 >> 31);
          if (v18 >= 255) {
            LOBYTE(v18) = -1;
          }
          *(unsigned char *)(a5 + v12++) = v18;
        }
        while (v12 < v9);
      }
      result += a2;
      a5 += a6;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale16u8u(uint64_t result, unint64_t a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int *a12, double *a13)
{
  int v13 = a12[1];
  if (v13)
  {
    uint64_t v14 = *a12;
    float v15 = *a13;
    float v16 = a13[1];
    double v17 = (__int16 *)(result + 4);
    uint64_t v18 = 2 * (a2 >> 1);
    do
    {
      if ((int)v14 >= 4)
      {
        uint64_t v19 = 0;
        int32x2_t v20 = v17;
        do
        {
          LOWORD(a7) = *(v20 - 2);
          double v21 = rint((float)(v16 + (float)((float)LODWORD(a7) * v15)));
          uint64_t v22 = (uint64_t)v21;
          LOWORD(v21) = *(v20 - 1);
          v23 = (unsigned char *)(a10 + v19);
          int32x2_t v24 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v16 + (float)((float)LODWORD(v21) * v15))), v22), 0), (int32x2_t)0xFF000000FFLL);
          v23[1] = v24.i8[4];
          unsigned char *v23 = v24.i8[0];
          v24.i16[0] = *v20;
          double v25 = rint((float)(v16 + (float)((float)v24.u32[0] * v15)));
          uint64_t v26 = (uint64_t)v25;
          LOWORD(v25) = v20[1];
          a7 = COERCE_DOUBLE(vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v16 + (float)((float)LODWORD(v25) * v15))), v26), 0), (int32x2_t)0xFF000000FFLL));
          v23[3] = BYTE4(a7);
          v23[2] = LOBYTE(a7);
          v19 += 4;
          v20 += 4;
        }
        while (v19 <= v14 - 4);
        uint64_t v19 = v19;
      }
      else
      {
        uint64_t v19 = 0;
      }
      if ((int)v19 < (int)v14)
      {
        do
        {
          LOWORD(a7) = *(_WORD *)(result + 2 * v19);
          a7 = rint((float)(v16 + (float)((float)LODWORD(a7) * v15)));
          int v27 = (uint64_t)a7 & ~((int)(uint64_t)a7 >> 31);
          if (v27 >= 255) {
            LOBYTE(v27) = -1;
          }
          *(unsigned char *)(a10 + v19++) = v27;
        }
        while (v19 < v14);
      }
      a10 += a11;
      double v17 = (__int16 *)((char *)v17 + v18);
      result += v18;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t cv::cvtScale16s8u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    float v10 = *a8;
    float v11 = a8[1];
    uint64_t v12 = (__int16 *)(result + 4);
    uint64_t v13 = 2 * (a2 >> 1);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v14 = 0;
        float v15 = v12;
        do
        {
          float v16 = (unsigned char *)(a5 + v14);
          int32x2_t v17 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v11 + (float)((float)*(v15 - 1) * v10))), (uint64_t)rint((float)(v11 + (float)((float)*(v15 - 2) * v10)))), 0), (int32x2_t)0xFF000000FFLL);
          v16[1] = v17.i8[4];
          *float v16 = v17.i8[0];
          int32x2_t v18 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v11 + (float)((float)v15[1] * v10))), (uint64_t)rint((float)(v11 + (float)((float)*v15 * v10)))), 0), (int32x2_t)0xFF000000FFLL);
          v16[3] = v18.i8[4];
          v16[2] = v18.i8[0];
          v14 += 4;
          v15 += 4;
        }
        while (v14 <= v9 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v9)
      {
        do
        {
          double v19 = rint((float)(v11 + (float)((float)*(__int16 *)(result + 2 * v14) * v10)));
          int v20 = (uint64_t)v19 & ~((int)(uint64_t)v19 >> 31);
          if (v20 >= 255) {
            LOBYTE(v20) = -1;
          }
          *(unsigned char *)(a5 + v14++) = v20;
        }
        while (v14 < v9);
      }
      a5 += a6;
      uint64_t v12 = (__int16 *)((char *)v12 + v13);
      result += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale32s8u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    float v10 = *a8;
    float v11 = a8[1];
    uint64_t v12 = (__int32 *)(result + 8);
    uint64_t v13 = 4 * (a2 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v14 = 0;
        float v15 = v12;
        do
        {
          float v16 = (unsigned char *)(a5 + v14);
          int32x2_t v17 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v11 + (float)((float)*(v15 - 1) * v10))), (uint64_t)rint((float)(v11 + (float)((float)*(v15 - 2) * v10)))), 0), (int32x2_t)0xFF000000FFLL);
          v16[1] = v17.i8[4];
          *float v16 = v17.i8[0];
          v17.i32[0] = *v15;
          int v18 = v15[1];
          v15 += 4;
          int32x2_t v19 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v11 + (float)((float)v18 * v10))), (uint64_t)rint((float)(v11 + (float)((float)v17.i32[0] * v10)))), 0), (int32x2_t)0xFF000000FFLL);
          v16[3] = v19.i8[4];
          v16[2] = v19.i8[0];
          v14 += 4;
        }
        while (v14 <= v9 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v9)
      {
        do
        {
          double v20 = rint((float)(v11 + (float)((float)*(int *)(result + 4 * v14) * v10)));
          int v21 = (uint64_t)v20 & ~((int)(uint64_t)v20 >> 31);
          if (v21 >= 255) {
            LOBYTE(v21) = -1;
          }
          *(unsigned char *)(a5 + v14++) = v21;
        }
        while (v14 < v9);
      }
      a5 += a6;
      uint64_t v12 = (__int32 *)((char *)v12 + v13);
      result += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale32f8u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    float v10 = *a8;
    float v11 = a8[1];
    uint64_t v12 = result + 8;
    uint64_t v13 = 4 * (a2 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v12;
        do
        {
          float v16 = (unsigned char *)(a5 + v14);
          int32x2_t v17 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v11 + (float)(*(float *)(v15 - 4) * v10))), (uint64_t)rint((float)(v11 + (float)(*(float *)(v15 - 8) * v10)))), 0), (int32x2_t)0xFF000000FFLL);
          v16[1] = v17.i8[4];
          *float v16 = v17.i8[0];
          v17.i32[0] = *(_DWORD *)v15;
          float v18 = *(float *)(v15 + 4);
          v15 += 16;
          int32x2_t v19 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v11 + (float)(v18 * v10))), (uint64_t)rint((float)(v11 + (float)(*(float *)v17.i32 * v10)))), 0), (int32x2_t)0xFF000000FFLL);
          v16[3] = v19.i8[4];
          v16[2] = v19.i8[0];
          v14 += 4;
        }
        while (v14 <= v9 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v9)
      {
        do
        {
          double v20 = rint((float)(v11 + (float)(*(float *)(result + 4 * v14) * v10)));
          int v21 = (uint64_t)v20 & ~((int)(uint64_t)v20 >> 31);
          if (v21 >= 255) {
            LOBYTE(v21) = -1;
          }
          *(unsigned char *)(a5 + v14++) = v21;
        }
        while (v14 < v9);
      }
      a5 += a6;
      v12 += v13;
      result += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale64f8u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    float v10 = a8[1];
    float v11 = *a8;
    double v12 = v11;
    double v13 = v10;
    uint64_t v14 = (double *)(result + 16);
    uint64_t v15 = 8 * (a2 >> 3);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v16 = 0;
        int32x2_t v17 = v14;
        do
        {
          float v18 = (unsigned char *)(a5 + v16);
          int32x2_t v19 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v13 + *(v17 - 1) * v12), (uint64_t)rint(v13 + *(v17 - 2) * v12)), 0), (int32x2_t)0xFF000000FFLL);
          v18[1] = v19.i8[4];
          *float v18 = v19.i8[0];
          double v20 = *v17;
          double v21 = v17[1];
          v17 += 4;
          int32x2_t v22 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v13 + v21 * v12), (uint64_t)rint(v13 + v20 * v12)), 0), (int32x2_t)0xFF000000FFLL);
          v18[3] = v22.i8[4];
          v18[2] = v22.i8[0];
          v16 += 4;
        }
        while (v16 <= v9 - 4);
        uint64_t v16 = v16;
      }
      else
      {
        uint64_t v16 = 0;
      }
      if ((int)v16 < (int)v9)
      {
        do
        {
          double v23 = rint(v13 + *(double *)(result + 8 * v16) * v12);
          int v24 = (uint64_t)v23 & ~((int)(uint64_t)v23 >> 31);
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          *(unsigned char *)(a5 + v16++) = v24;
        }
        while (v16 < v9);
      }
      a5 += a6;
      uint64_t v14 = (double *)((char *)v14 + v15);
      result += v15;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale8u8s(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, float a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, double *a14)
{
  int v14 = a13[1];
  if (v14)
  {
    uint64_t v15 = *a13;
    float v16 = *a14;
    float v17 = a14[1];
    do
    {
      if ((int)v15 >= 4)
      {
        uint64_t v18 = 0;
        do
        {
          LOBYTE(a7) = *(unsigned char *)(result + v18);
          LOBYTE(a8) = *(unsigned char *)(result + v18 + 1);
          double v19 = (float)(v17 + (float)((float)LODWORD(a8) * v16));
          int32x2_t v20 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v19), (uint64_t)rint((float)(v17 + (float)((float)LODWORD(a7) * v16)))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          double v21 = (unsigned char *)(a11 + v18);
          v21[1] = v20.i8[4];
          unsigned char *v21 = v20.i8[0];
          v20.i8[0] = *(unsigned char *)(result + v18 + 2);
          LOBYTE(v19) = *(unsigned char *)(result + v18 + 3);
          a8 = (float)LODWORD(v19);
          a7 = COERCE_DOUBLE(vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v17 + (float)(a8 * v16))), (uint64_t)rint((float)(v17 + (float)((float)v20.u32[0] * v16)))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL));
          v21[3] = BYTE4(a7);
          v21[2] = LOBYTE(a7);
          v18 += 4;
        }
        while (v18 <= v15 - 4);
        uint64_t v18 = v18;
      }
      else
      {
        uint64_t v18 = 0;
      }
      if ((int)v18 < (int)v15)
      {
        do
        {
          LOBYTE(a7) = *(unsigned char *)(result + v18);
          a7 = rint((float)(v17 + (float)((float)LODWORD(a7) * v16)));
          uint64_t v22 = (uint64_t)a7;
          if ((int)(uint64_t)a7 <= -128) {
            LODWORD(v22) = -128;
          }
          if ((int)v22 >= 127) {
            LOBYTE(v22) = 127;
          }
          *(unsigned char *)(a11 + v18++) = v22;
        }
        while (v18 < v15);
      }
      result += a2;
      a11 += a12;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t cv::cvtScale8s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    float v10 = *a8;
    float v11 = a8[1];
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v12 = 0;
        do
        {
          v13.i32[0] = (uint64_t)rint((float)(v11 + (float)((float)*(char *)(result + v12) * v10)));
          v13.i32[1] = (uint64_t)rint((float)(v11 + (float)((float)*(char *)(result + v12 + 1) * v10)));
          int v14 = (unsigned char *)(a5 + v12);
          int32x2_t v15 = vmin_s32(vmax_s32(v13, (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v14[1] = v15.i8[4];
          unsigned char *v14 = v15.i8[0];
          int32x2_t v16 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v11 + (float)((float)*(char *)(result + v12 + 3) * v10))), (uint64_t)rint((float)(v11 + (float)((float)*(char *)(result + v12 + 2) * v10)))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v14[3] = v16.i8[4];
          v14[2] = v16.i8[0];
          v12 += 4;
        }
        while (v12 <= v9 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < (int)v9)
      {
        do
        {
          uint64_t v17 = (uint64_t)rint((float)(v11 + (float)((float)*(char *)(result + v12) * v10)));
          if ((int)v17 <= -128) {
            LODWORD(v17) = -128;
          }
          if ((int)v17 >= 127) {
            LOBYTE(v17) = 127;
          }
          *(unsigned char *)(a5 + v12++) = v17;
        }
        while (v12 < v9);
      }
      result += a2;
      a5 += a6;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale16u8s(uint64_t result, unint64_t a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int *a12, double *a13)
{
  int v13 = a12[1];
  if (v13)
  {
    uint64_t v14 = *a12;
    float v15 = *a13;
    float v16 = a13[1];
    uint64_t v17 = (__int16 *)(result + 4);
    uint64_t v18 = 2 * (a2 >> 1);
    do
    {
      if ((int)v14 >= 4)
      {
        uint64_t v19 = 0;
        int32x2_t v20 = v17;
        do
        {
          LOWORD(a7) = *(v20 - 2);
          double v21 = rint((float)(v16 + (float)((float)LODWORD(a7) * v15)));
          uint64_t v22 = (uint64_t)v21;
          LOWORD(v21) = *(v20 - 1);
          double v23 = (unsigned char *)(a10 + v19);
          int32x2_t v24 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v16 + (float)((float)LODWORD(v21) * v15))), v22), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v23[1] = v24.i8[4];
          unsigned char *v23 = v24.i8[0];
          v24.i16[0] = *v20;
          double v25 = rint((float)(v16 + (float)((float)v24.u32[0] * v15)));
          uint64_t v26 = (uint64_t)v25;
          LOWORD(v25) = v20[1];
          a7 = COERCE_DOUBLE(vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v16 + (float)((float)LODWORD(v25) * v15))), v26), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL));
          v23[3] = BYTE4(a7);
          v23[2] = LOBYTE(a7);
          v19 += 4;
          v20 += 4;
        }
        while (v19 <= v14 - 4);
        uint64_t v19 = v19;
      }
      else
      {
        uint64_t v19 = 0;
      }
      if ((int)v19 < (int)v14)
      {
        do
        {
          LOWORD(a7) = *(_WORD *)(result + 2 * v19);
          a7 = rint((float)(v16 + (float)((float)LODWORD(a7) * v15)));
          uint64_t v27 = (uint64_t)a7;
          if ((int)(uint64_t)a7 <= -128) {
            LODWORD(v27) = -128;
          }
          if ((int)v27 >= 127) {
            LOBYTE(v27) = 127;
          }
          *(unsigned char *)(a10 + v19++) = v27;
        }
        while (v19 < v14);
      }
      a10 += a11;
      uint64_t v17 = (__int16 *)((char *)v17 + v18);
      result += v18;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t cv::cvtScale16s8s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    float v10 = *a8;
    float v11 = a8[1];
    uint64_t v12 = (__int16 *)(result + 4);
    uint64_t v13 = 2 * (a2 >> 1);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v14 = 0;
        float v15 = v12;
        do
        {
          float v16 = (unsigned char *)(a5 + v14);
          int32x2_t v17 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v11 + (float)((float)*(v15 - 1) * v10))), (uint64_t)rint((float)(v11 + (float)((float)*(v15 - 2) * v10)))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v16[1] = v17.i8[4];
          *float v16 = v17.i8[0];
          int32x2_t v18 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v11 + (float)((float)v15[1] * v10))), (uint64_t)rint((float)(v11 + (float)((float)*v15 * v10)))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v16[3] = v18.i8[4];
          v16[2] = v18.i8[0];
          v14 += 4;
          v15 += 4;
        }
        while (v14 <= v9 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v9)
      {
        do
        {
          uint64_t v19 = (uint64_t)rint((float)(v11 + (float)((float)*(__int16 *)(result + 2 * v14) * v10)));
          if ((int)v19 <= -128) {
            LODWORD(v19) = -128;
          }
          if ((int)v19 >= 127) {
            LOBYTE(v19) = 127;
          }
          *(unsigned char *)(a5 + v14++) = v19;
        }
        while (v14 < v9);
      }
      a5 += a6;
      uint64_t v12 = (__int16 *)((char *)v12 + v13);
      result += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale32s8s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    float v10 = *a8;
    float v11 = a8[1];
    uint64_t v12 = (__int32 *)(result + 8);
    uint64_t v13 = 4 * (a2 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v14 = 0;
        float v15 = v12;
        do
        {
          float v16 = (unsigned char *)(a5 + v14);
          int32x2_t v17 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v11 + (float)((float)*(v15 - 1) * v10))), (uint64_t)rint((float)(v11 + (float)((float)*(v15 - 2) * v10)))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v16[1] = v17.i8[4];
          *float v16 = v17.i8[0];
          v17.i32[0] = *v15;
          int v18 = v15[1];
          v15 += 4;
          int32x2_t v19 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v11 + (float)((float)v18 * v10))), (uint64_t)rint((float)(v11 + (float)((float)v17.i32[0] * v10)))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v16[3] = v19.i8[4];
          v16[2] = v19.i8[0];
          v14 += 4;
        }
        while (v14 <= v9 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v9)
      {
        do
        {
          uint64_t v20 = (uint64_t)rint((float)(v11 + (float)((float)*(int *)(result + 4 * v14) * v10)));
          if ((int)v20 <= -128) {
            LODWORD(v20) = -128;
          }
          if ((int)v20 >= 127) {
            LOBYTE(v20) = 127;
          }
          *(unsigned char *)(a5 + v14++) = v20;
        }
        while (v14 < v9);
      }
      a5 += a6;
      uint64_t v12 = (__int32 *)((char *)v12 + v13);
      result += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale32f8s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    float v10 = *a8;
    float v11 = a8[1];
    uint64_t v12 = result + 8;
    uint64_t v13 = 4 * (a2 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v12;
        do
        {
          float v16 = (unsigned char *)(a5 + v14);
          int32x2_t v17 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v11 + (float)(*(float *)(v15 - 4) * v10))), (uint64_t)rint((float)(v11 + (float)(*(float *)(v15 - 8) * v10)))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v16[1] = v17.i8[4];
          *float v16 = v17.i8[0];
          v17.i32[0] = *(_DWORD *)v15;
          float v18 = *(float *)(v15 + 4);
          v15 += 16;
          int32x2_t v19 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint((float)(v11 + (float)(v18 * v10))), (uint64_t)rint((float)(v11 + (float)(*(float *)v17.i32 * v10)))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v16[3] = v19.i8[4];
          v16[2] = v19.i8[0];
          v14 += 4;
        }
        while (v14 <= v9 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v9)
      {
        do
        {
          uint64_t v20 = (uint64_t)rint((float)(v11 + (float)(*(float *)(result + 4 * v14) * v10)));
          if ((int)v20 <= -128) {
            LODWORD(v20) = -128;
          }
          if ((int)v20 >= 127) {
            LOBYTE(v20) = 127;
          }
          *(unsigned char *)(a5 + v14++) = v20;
        }
        while (v14 < v9);
      }
      a5 += a6;
      v12 += v13;
      result += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale64f8s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    float v10 = a8[1];
    float v11 = *a8;
    double v12 = v11;
    double v13 = v10;
    uint64_t v14 = (double *)(result + 16);
    uint64_t v15 = 8 * (a2 >> 3);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v16 = 0;
        int32x2_t v17 = v14;
        do
        {
          float v18 = (unsigned char *)(a5 + v16);
          int32x2_t v19 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v13 + *(v17 - 1) * v12), (uint64_t)rint(v13 + *(v17 - 2) * v12)), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v18[1] = v19.i8[4];
          *float v18 = v19.i8[0];
          double v20 = *v17;
          double v21 = v17[1];
          v17 += 4;
          int32x2_t v22 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v13 + v21 * v12), (uint64_t)rint(v13 + v20 * v12)), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v18[3] = v22.i8[4];
          v18[2] = v22.i8[0];
          v16 += 4;
        }
        while (v16 <= v9 - 4);
        uint64_t v16 = v16;
      }
      else
      {
        uint64_t v16 = 0;
      }
      if ((int)v16 < (int)v9)
      {
        do
        {
          uint64_t v23 = (uint64_t)rint(v13 + *(double *)(result + 8 * v16) * v12);
          if ((int)v23 <= -128) {
            LODWORD(v23) = -128;
          }
          if ((int)v23 >= 127) {
            LOBYTE(v23) = 127;
          }
          *(unsigned char *)(a5 + v16++) = v23;
        }
        while (v16 < v9);
      }
      a5 += a6;
      uint64_t v14 = (double *)((char *)v14 + v15);
      result += v15;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale8u16u(uint64_t result, uint64_t a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unsigned int *a10, double *a11)
{
  int v11 = a10[1];
  if (v11)
  {
    uint64_t v12 = (int)*a10;
    uint64_t v13 = *a10;
    float v14 = *a11;
    float v15 = a11[1];
    uint64_t v16 = (_WORD *)(a8 + 4);
    uint64_t v17 = 2 * (a9 >> 1);
    do
    {
      if ((int)v12 >= 4)
      {
        uint64_t v18 = 0;
        int32x2_t v19 = v16;
        do
        {
          double v20 = (unsigned char *)(result + v18);
          LOBYTE(a5) = *(unsigned char *)(result + v18);
          double v21 = rint((float)(v15 + (float)((float)LODWORD(a5) * v14)));
          int v22 = (uint64_t)v21 & ~((int)(uint64_t)v21 >> 31);
          if (v22 >= 0xFFFF) {
            LOWORD(v22) = -1;
          }
          LOBYTE(v21) = v20[1];
          double v23 = rint((float)(v15 + (float)((float)LODWORD(v21) * v14)));
          int v24 = (uint64_t)v23 & ~((int)(uint64_t)v23 >> 31);
          if (v24 >= 0xFFFF) {
            LOWORD(v24) = -1;
          }
          *(v19 - 2) = v22;
          *(v19 - 1) = v24;
          LOBYTE(v23) = v20[2];
          double v25 = rint((float)(v15 + (float)((float)LODWORD(v23) * v14)));
          int v26 = (uint64_t)v25 & ~((int)(uint64_t)v25 >> 31);
          if (v26 >= 0xFFFF) {
            LOWORD(v26) = -1;
          }
          LOBYTE(v25) = v20[3];
          a5 = rint((float)(v15 + (float)((float)LODWORD(v25) * v14)));
          int v27 = (uint64_t)a5 & ~((int)(uint64_t)a5 >> 31);
          if (v27 >= 0xFFFF) {
            LOWORD(v27) = -1;
          }
          *int32x2_t v19 = v26;
          v19[1] = v27;
          v18 += 4;
          v19 += 4;
        }
        while (v18 <= v12 - 4);
        uint64_t v18 = v18;
      }
      else
      {
        uint64_t v18 = 0;
      }
      if ((int)v18 < (int)v13)
      {
        do
        {
          LOBYTE(a5) = *(unsigned char *)(result + v18);
          a5 = rint((float)(v15 + (float)((float)LODWORD(a5) * v14)));
          int v28 = (uint64_t)a5 & ~((int)(uint64_t)a5 >> 31);
          if (v28 >= 0xFFFF) {
            LOWORD(v28) = -1;
          }
          *(_WORD *)(a8 + 2 * v18++) = v28;
        }
        while (v13 != v18);
      }
      result += a2;
      uint64_t v16 = (_WORD *)((char *)v16 + v17);
      a8 += v17;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t cv::cvtScale8s16u(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    float v11 = *a8;
    float v12 = a8[1];
    uint64_t v13 = (_WORD *)(a5 + 4);
    uint64_t v14 = 2 * (a6 >> 1);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v15 = 0;
        uint64_t v16 = v13;
        do
        {
          uint64_t v17 = (char *)(result + v15);
          double v18 = rint((float)(v12 + (float)((float)*(char *)(result + v15) * v11)));
          int v19 = (uint64_t)v18 & ~((int)(uint64_t)v18 >> 31);
          if (v19 >= 0xFFFF) {
            LOWORD(v19) = -1;
          }
          double v20 = rint((float)(v12 + (float)((float)v17[1] * v11)));
          int v21 = (uint64_t)v20 & ~((int)(uint64_t)v20 >> 31);
          if (v21 >= 0xFFFF) {
            LOWORD(v21) = -1;
          }
          *(v16 - 2) = v19;
          *(v16 - 1) = v21;
          double v22 = rint((float)(v12 + (float)((float)v17[2] * v11)));
          int v23 = (uint64_t)v22 & ~((int)(uint64_t)v22 >> 31);
          if (v23 >= 0xFFFF) {
            LOWORD(v23) = -1;
          }
          double v24 = rint((float)(v12 + (float)((float)v17[3] * v11)));
          int v25 = (uint64_t)v24 & ~((int)(uint64_t)v24 >> 31);
          if (v25 >= 0xFFFF) {
            LOWORD(v25) = -1;
          }
          *uint64_t v16 = v23;
          v16[1] = v25;
          v15 += 4;
          v16 += 4;
        }
        while (v15 <= v9 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v10)
      {
        do
        {
          double v26 = rint((float)(v12 + (float)((float)*(char *)(result + v15) * v11)));
          int v27 = (uint64_t)v26 & ~((int)(uint64_t)v26 >> 31);
          if (v27 >= 0xFFFF) {
            LOWORD(v27) = -1;
          }
          *(_WORD *)(a5 + 2 * v15++) = v27;
        }
        while (v10 != v15);
      }
      result += a2;
      uint64_t v13 = (_WORD *)((char *)v13 + v14);
      a5 += v14;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale16u(uint64_t result, unint64_t a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unsigned int *a10, double *a11)
{
  int v11 = a10[1];
  if (v11)
  {
    uint64_t v12 = (int)*a10;
    uint64_t v13 = *a10;
    float v14 = *a11;
    float v15 = a11[1];
    uint64_t v16 = 2 * (a2 >> 1);
    do
    {
      if ((int)v12 >= 4)
      {
        uint64_t v18 = 0;
        uint64_t v17 = 0;
        do
        {
          uint64_t v19 = result + v18;
          LOWORD(a5) = *(_WORD *)(result + v18);
          double v20 = rint((float)(v15 + (float)((float)LODWORD(a5) * v14)));
          int v21 = (uint64_t)v20 & ~((int)(uint64_t)v20 >> 31);
          LOWORD(v20) = *(_WORD *)(result + v18 + 2);
          double v22 = rint((float)(v15 + (float)((float)LODWORD(v20) * v14)));
          int v23 = (uint64_t)v22 & ~((int)(uint64_t)v22 >> 31);
          if (v21 >= 0xFFFF) {
            LOWORD(v21) = -1;
          }
          if (v23 >= 0xFFFF) {
            LOWORD(v23) = -1;
          }
          double v24 = (_WORD *)(a8 + v18);
          *double v24 = v21;
          v24[1] = v23;
          LOWORD(v22) = *(_WORD *)(v19 + 4);
          double v25 = rint((float)(v15 + (float)((float)LODWORD(v22) * v14)));
          int v26 = (uint64_t)v25 & ~((int)(uint64_t)v25 >> 31);
          LOWORD(v25) = *(_WORD *)(v19 + 6);
          float v27 = v15 + (float)((float)LODWORD(v25) * v14);
          if (v26 >= 0xFFFF) {
            __int16 v28 = -1;
          }
          else {
            __int16 v28 = v26;
          }
          a5 = rint(v27);
          int v29 = (uint64_t)a5 & ~((int)(uint64_t)a5 >> 31);
          if (v29 >= 0xFFFF) {
            LOWORD(v29) = -1;
          }
          v24[2] = v28;
          v24[3] = v29;
          v17 += 4;
          v18 += 8;
        }
        while (v17 <= v12 - 4);
        uint64_t v17 = v17;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if ((int)v17 < (int)v13)
      {
        do
        {
          LOWORD(a5) = *(_WORD *)(result + 2 * v17);
          a5 = rint((float)(v15 + (float)((float)LODWORD(a5) * v14)));
          int v30 = (uint64_t)a5 & ~((int)(uint64_t)a5 >> 31);
          if (v30 >= 0xFFFF) {
            LOWORD(v30) = -1;
          }
          *(_WORD *)(a8 + 2 * v17++) = v30;
        }
        while (v13 != v17);
      }
      a8 += 2 * (a9 >> 1);
      result += v16;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t cv::cvtScale16s16u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    float v11 = *a8;
    float v12 = a8[1];
    uint64_t v13 = 2 * (a2 >> 1);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v15 = 0;
        uint64_t v14 = 0;
        do
        {
          uint64_t v16 = result + v15;
          double v17 = rint((float)(v12 + (float)((float)*(__int16 *)(result + v15) * v11)));
          int v18 = (uint64_t)v17 & ~((int)(uint64_t)v17 >> 31);
          if (v18 >= 0xFFFF) {
            LOWORD(v18) = -1;
          }
          double v19 = rint((float)(v12 + (float)((float)*(__int16 *)(result + v15 + 2) * v11)));
          int v20 = (uint64_t)v19 & ~((int)(uint64_t)v19 >> 31);
          if (v20 >= 0xFFFF) {
            LOWORD(v20) = -1;
          }
          int v21 = (_WORD *)(a5 + v15);
          _WORD *v21 = v18;
          v21[1] = v20;
          double v22 = rint((float)(v12 + (float)((float)*(__int16 *)(v16 + 4) * v11)));
          int v23 = (uint64_t)v22 & ~((int)(uint64_t)v22 >> 31);
          float v24 = v12 + (float)((float)*(__int16 *)(v16 + 6) * v11);
          if (v23 >= 0xFFFF) {
            __int16 v25 = -1;
          }
          else {
            __int16 v25 = v23;
          }
          double v26 = rint(v24);
          int v27 = (uint64_t)v26 & ~((int)(uint64_t)v26 >> 31);
          if (v27 >= 0xFFFF) {
            LOWORD(v27) = -1;
          }
          v21[2] = v25;
          v21[3] = v27;
          v14 += 4;
          v15 += 8;
        }
        while (v14 <= v9 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v10)
      {
        do
        {
          double v28 = rint((float)(v12 + (float)((float)*(__int16 *)(result + 2 * v14) * v11)));
          int v29 = (uint64_t)v28 & ~((int)(uint64_t)v28 >> 31);
          if (v29 >= 0xFFFF) {
            LOWORD(v29) = -1;
          }
          *(_WORD *)(a5 + 2 * v14++) = v29;
        }
        while (v10 != v14);
      }
      a5 += 2 * (a6 >> 1);
      result += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale32s16u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x4_t *a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    float v11 = *a8;
    float v12 = a8[1];
    uint64_t v13 = (int *)(result + 8);
    uint64_t v14 = 4 * (a2 >> 2);
    v15.i64[0] = 0xFFFF0000FFFFLL;
    v15.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v16 = 0;
        double v17 = v13;
        int v18 = a5;
        do
        {
          double v19 = rint((float)(v12 + (float)((float)*(v17 - 1) * v11)));
          uint64_t v20 = (uint64_t)rint((float)(v12 + (float)((float)*(v17 - 2) * v11)));
          int v22 = *v17;
          int v21 = v17[1];
          v17 += 4;
          v23.i64[0] = __PAIR64__((uint64_t)v19, v20);
          v23.i32[2] = (uint64_t)rint((float)(v12 + (float)((float)v22 * v11)));
          v23.i32[3] = (uint64_t)rint((float)(v12 + (float)((float)v21 * v11)));
          *v18++ = vmovn_s32(vminq_s32(vmaxq_s32(v23, (int32x4_t)0), v15));
          v16 += 4;
        }
        while (v16 <= v9 - 4);
        uint64_t v16 = v16;
      }
      else
      {
        uint64_t v16 = 0;
      }
      if ((int)v16 < (int)v10)
      {
        do
        {
          double v24 = rint((float)(v12 + (float)((float)*(int *)(result + 4 * v16) * v11)));
          int v25 = (uint64_t)v24 & ~((int)(uint64_t)v24 >> 31);
          if (v25 >= 0xFFFF) {
            LOWORD(v25) = -1;
          }
          a5->i16[v16++] = v25;
        }
        while (v10 != v16);
      }
      a5 = (int16x4_t *)((char *)a5 + 2 * (a6 >> 1));
      uint64_t v13 = (int *)((char *)v13 + v14);
      result += v14;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale32f16u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x4_t *a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    float v11 = *a8;
    float v12 = a8[1];
    uint64_t v13 = 2 * (a6 >> 1);
    uint64_t v14 = (float *)(result + 8);
    uint64_t v15 = 4 * (a2 >> 2);
    v16.i64[0] = 0xFFFF0000FFFFLL;
    v16.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v17 = 0;
        int v18 = v14;
        double v19 = a5;
        do
        {
          uint64_t v20 = (uint64_t)rint((float)(v12 + (float)(*(v18 - 2) * v11)));
          double v21 = rint((float)(v12 + (float)(*(v18 - 1) * v11)));
          float v22 = *v18;
          float v23 = v18[1];
          v18 += 4;
          uint64_t v24 = (uint64_t)rint((float)(v12 + (float)(v22 * v11)));
          v25.i32[0] = v20;
          v25.i32[1] = (uint64_t)v21;
          v25.i32[2] = v24;
          v25.i32[3] = (uint64_t)rint((float)(v12 + (float)(v23 * v11)));
          *v19++ = vmovn_s32(vminq_s32(vmaxq_s32(v25, (int32x4_t)0), v16));
          v17 += 4;
        }
        while (v17 <= v9 - 4);
        uint64_t v17 = v17;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if ((int)v17 < (int)v10)
      {
        do
        {
          double v26 = rint((float)(v12 + (float)(*(float *)(result + 4 * v17) * v11)));
          int v27 = (uint64_t)v26 & ~((int)(uint64_t)v26 >> 31);
          if (v27 >= 0xFFFF) {
            LOWORD(v27) = -1;
          }
          a5->i16[v17++] = v27;
        }
        while (v10 != v17);
      }
      a5 = (int16x4_t *)((char *)a5 + v13);
      uint64_t v14 = (float *)((char *)v14 + v15);
      result += v15;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale64f16u(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x4_t *a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    float v11 = a8[1];
    float v12 = *a8;
    double v13 = v12;
    double v14 = v11;
    uint64_t v15 = 2 * (a6 >> 1);
    int32x4_t v16 = (double *)(result + 16);
    uint64_t v17 = 8 * (a2 >> 3);
    v18.i64[0] = 0xFFFF0000FFFFLL;
    v18.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v19 = 0;
        uint64_t v20 = v16;
        double v21 = a5;
        do
        {
          uint64_t v22 = (uint64_t)rint(v14 + *(v20 - 2) * v13);
          uint64_t v23 = (uint64_t)rint(v14 + *(v20 - 1) * v13);
          double v25 = *v20;
          double v24 = v20[1];
          v20 += 4;
          uint64_t v26 = (uint64_t)rint(v14 + v25 * v13);
          v27.i64[0] = __PAIR64__(v23, v22);
          v27.i32[2] = v26;
          v27.i32[3] = (uint64_t)rint(v14 + v24 * v13);
          *v21++ = vmovn_s32(vminq_s32(vmaxq_s32(v27, (int32x4_t)0), v18));
          v19 += 4;
        }
        while (v19 <= v9 - 4);
        uint64_t v19 = v19;
      }
      else
      {
        uint64_t v19 = 0;
      }
      if ((int)v19 < (int)v10)
      {
        do
        {
          double v28 = rint(v14 + *(double *)(result + 8 * v19) * v13);
          int v29 = (uint64_t)v28 & ~((int)(uint64_t)v28 >> 31);
          if (v29 >= 0xFFFF) {
            LOWORD(v29) = -1;
          }
          a5->i16[v19++] = v29;
        }
        while (v10 != v19);
      }
      a5 = (int16x4_t *)((char *)a5 + v15);
      int32x4_t v16 = (double *)((char *)v16 + v17);
      result += v17;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale8u16s(uint64_t result, uint64_t a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unsigned int *a10, double *a11)
{
  int v11 = a10[1];
  if (v11)
  {
    uint64_t v12 = (int)*a10;
    uint64_t v13 = *a10;
    float v14 = *a11;
    float v15 = a11[1];
    int32x4_t v16 = (_WORD *)(a8 + 4);
    uint64_t v17 = 2 * (a9 >> 1);
    do
    {
      if ((int)v12 >= 4)
      {
        uint64_t v18 = 0;
        uint64_t v19 = v16;
        do
        {
          uint64_t v20 = (unsigned char *)(result + v18);
          LOBYTE(a5) = *(unsigned char *)(result + v18);
          double v21 = rint((float)(v15 + (float)((float)LODWORD(a5) * v14)));
          uint64_t v22 = (uint64_t)v21;
          if ((int)(uint64_t)v21 <= -32768) {
            LODWORD(v22) = -32768;
          }
          if ((int)v22 >= 0x7FFF) {
            LOWORD(v22) = 0x7FFF;
          }
          LOBYTE(v21) = v20[1];
          double v23 = rint((float)(v15 + (float)((float)LODWORD(v21) * v14)));
          uint64_t v24 = (uint64_t)v23;
          if ((int)(uint64_t)v23 <= -32768) {
            LODWORD(v24) = -32768;
          }
          if ((int)v24 >= 0x7FFF) {
            LOWORD(v24) = 0x7FFF;
          }
          *(v19 - 2) = v22;
          *(v19 - 1) = v24;
          LOBYTE(v23) = v20[2];
          double v25 = rint((float)(v15 + (float)((float)LODWORD(v23) * v14)));
          uint64_t v26 = (uint64_t)v25;
          if ((int)(uint64_t)v25 <= -32768) {
            LODWORD(v26) = -32768;
          }
          if ((int)v26 >= 0x7FFF) {
            LOWORD(v26) = 0x7FFF;
          }
          LOBYTE(v25) = v20[3];
          a5 = rint((float)(v15 + (float)((float)LODWORD(v25) * v14)));
          uint64_t v27 = (uint64_t)a5;
          if ((int)(uint64_t)a5 <= -32768) {
            LODWORD(v27) = -32768;
          }
          if ((int)v27 >= 0x7FFF) {
            LOWORD(v27) = 0x7FFF;
          }
          *uint64_t v19 = v26;
          v19[1] = v27;
          v18 += 4;
          v19 += 4;
        }
        while (v18 <= v12 - 4);
        uint64_t v18 = v18;
      }
      else
      {
        uint64_t v18 = 0;
      }
      if ((int)v18 < (int)v13)
      {
        do
        {
          LOBYTE(a5) = *(unsigned char *)(result + v18);
          a5 = rint((float)(v15 + (float)((float)LODWORD(a5) * v14)));
          uint64_t v28 = (uint64_t)a5;
          if ((int)(uint64_t)a5 <= -32768) {
            LODWORD(v28) = -32768;
          }
          if ((int)v28 >= 0x7FFF) {
            LOWORD(v28) = 0x7FFF;
          }
          *(_WORD *)(a8 + 2 * v18++) = v28;
        }
        while (v13 != v18);
      }
      result += a2;
      int32x4_t v16 = (_WORD *)((char *)v16 + v17);
      a8 += v17;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t cv::cvtScale8s16s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    float v11 = *a8;
    float v12 = a8[1];
    uint64_t v13 = (_WORD *)(a5 + 4);
    uint64_t v14 = 2 * (a6 >> 1);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v15 = 0;
        int32x4_t v16 = v13;
        do
        {
          uint64_t v17 = (char *)(result + v15);
          uint64_t v18 = (uint64_t)rint((float)(v12 + (float)((float)*(char *)(result + v15) * v11)));
          if ((int)v18 <= -32768) {
            LODWORD(v18) = -32768;
          }
          uint64_t v19 = (uint64_t)rint((float)(v12 + (float)((float)v17[1] * v11)));
          if ((int)v18 >= 0x7FFF) {
            LOWORD(v18) = 0x7FFF;
          }
          if ((int)v19 <= -32768) {
            LODWORD(v19) = -32768;
          }
          if ((int)v19 >= 0x7FFF) {
            LOWORD(v19) = 0x7FFF;
          }
          *(v16 - 2) = v18;
          *(v16 - 1) = v19;
          uint64_t v20 = (uint64_t)rint((float)(v12 + (float)((float)v17[2] * v11)));
          if ((int)v20 <= -32768) {
            LODWORD(v20) = -32768;
          }
          if ((int)v20 >= 0x7FFF) {
            LOWORD(v20) = 0x7FFF;
          }
          uint64_t v21 = (uint64_t)rint((float)(v12 + (float)((float)v17[3] * v11)));
          if ((int)v21 <= -32768) {
            LODWORD(v21) = -32768;
          }
          if ((int)v21 >= 0x7FFF) {
            LOWORD(v21) = 0x7FFF;
          }
          *int32x4_t v16 = v20;
          v16[1] = v21;
          v15 += 4;
          v16 += 4;
        }
        while (v15 <= v9 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v10)
      {
        do
        {
          uint64_t v22 = (uint64_t)rint((float)(v12 + (float)((float)*(char *)(result + v15) * v11)));
          if ((int)v22 <= -32768) {
            LODWORD(v22) = -32768;
          }
          if ((int)v22 >= 0x7FFF) {
            LOWORD(v22) = 0x7FFF;
          }
          *(_WORD *)(a5 + 2 * v15++) = v22;
        }
        while (v10 != v15);
      }
      result += a2;
      uint64_t v13 = (_WORD *)((char *)v13 + v14);
      a5 += v14;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale16u16s(uint64_t result, unint64_t a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unsigned int *a10, double *a11)
{
  int v11 = a10[1];
  if (v11)
  {
    uint64_t v12 = (int)*a10;
    uint64_t v13 = *a10;
    float v14 = *a11;
    float v15 = a11[1];
    uint64_t v16 = 2 * (a9 >> 1);
    uint64_t v17 = 2 * (a2 >> 1);
    do
    {
      if ((int)v12 >= 4)
      {
        uint64_t v19 = 0;
        uint64_t v18 = 0;
        do
        {
          uint64_t v20 = (_WORD *)(result + v19);
          LOWORD(a5) = *(_WORD *)(result + v19);
          double v21 = rint((float)(v15 + (float)((float)LODWORD(a5) * v14)));
          uint64_t v22 = (uint64_t)v21;
          if ((int)(uint64_t)v21 <= -32768) {
            LODWORD(v22) = -32768;
          }
          LOWORD(v21) = v20[1];
          double v23 = rint((float)(v15 + (float)((float)LODWORD(v21) * v14)));
          if ((int)v22 >= 0x7FFF) {
            LOWORD(v22) = 0x7FFF;
          }
          uint64_t v24 = (uint64_t)v23;
          if ((int)(uint64_t)v23 <= -32768) {
            LODWORD(v24) = -32768;
          }
          if ((int)v24 >= 0x7FFF) {
            LOWORD(v24) = 0x7FFF;
          }
          double v25 = (_WORD *)(a8 + v19);
          *double v25 = v22;
          v25[1] = v24;
          LOWORD(v23) = v20[2];
          double v26 = rint((float)(v15 + (float)((float)LODWORD(v23) * v14)));
          uint64_t v27 = (uint64_t)v26;
          if ((int)(uint64_t)v26 <= -32768) {
            LODWORD(v27) = -32768;
          }
          LOWORD(v26) = v20[3];
          double v28 = (float)(v15 + (float)((float)LODWORD(v26) * v14));
          if ((int)v27 >= 0x7FFF) {
            __int16 v29 = 0x7FFF;
          }
          else {
            __int16 v29 = v27;
          }
          a5 = rint(v28);
          uint64_t v30 = (uint64_t)a5;
          if ((int)(uint64_t)a5 <= -32768) {
            LODWORD(v30) = -32768;
          }
          if ((int)v30 >= 0x7FFF) {
            LOWORD(v30) = 0x7FFF;
          }
          v25[2] = v29;
          v25[3] = v30;
          v18 += 4;
          v19 += 8;
        }
        while (v18 <= v12 - 4);
        uint64_t v18 = v18;
      }
      else
      {
        uint64_t v18 = 0;
      }
      if ((int)v18 < (int)v13)
      {
        do
        {
          LOWORD(a5) = *(_WORD *)(result + 2 * v18);
          a5 = rint((float)(v15 + (float)((float)LODWORD(a5) * v14)));
          uint64_t v31 = (uint64_t)a5;
          if ((int)(uint64_t)a5 <= -32768) {
            LODWORD(v31) = -32768;
          }
          if ((int)v31 >= 0x7FFF) {
            LOWORD(v31) = 0x7FFF;
          }
          *(_WORD *)(a8 + 2 * v18++) = v31;
        }
        while (v13 != v18);
      }
      a8 += v16;
      result += v17;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t cv::cvtScale16s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  unsigned int v8 = a7[1];
  if (v8)
  {
    float v9 = *a8;
    uint64_t v10 = *a7;
    float v11 = a8[1];
    do
    {
      if ((int)v10 >= 1)
      {
        uint64_t v12 = 0;
        do
        {
          uint64_t v13 = (uint64_t)rint((float)(v11 + (float)((float)*(__int16 *)(result + v12) * v9)));
          if ((int)v13 <= -32768) {
            LODWORD(v13) = -32768;
          }
          if ((int)v13 >= 0x7FFF) {
            LOWORD(v13) = 0x7FFF;
          }
          *(_WORD *)(a5 + v12) = v13;
          v12 += 2;
        }
        while (2 * v10 != v12);
      }
      a5 += 2 * (a6 >> 1);
      result += 2 * (a2 >> 1);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale32s16s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x4_t *a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    float v11 = *a8;
    float v12 = a8[1];
    uint64_t v13 = (int *)(result + 8);
    uint64_t v14 = 4 * (a2 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v15 = 0;
        uint64_t v16 = v13;
        uint64_t v17 = a5;
        do
        {
          uint64_t v18 = (uint64_t)rint((float)(v12 + (float)((float)*(v16 - 2) * v11)));
          double v19 = rint((float)(v12 + (float)((float)*(v16 - 1) * v11)));
          int v20 = *v16;
          int v21 = v16[1];
          v16 += 4;
          uint64_t v22 = (uint64_t)rint((float)(v12 + (float)((float)v20 * v11)));
          v23.i32[0] = v18;
          v23.i32[1] = (uint64_t)v19;
          v23.i32[2] = v22;
          v23.i32[3] = (uint64_t)rint((float)(v12 + (float)((float)v21 * v11)));
          *v17++ = vqmovn_s32(v23);
          v15 += 4;
        }
        while (v15 <= v9 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v10)
      {
        do
        {
          uint64_t v24 = (uint64_t)rint((float)(v12 + (float)((float)*(int *)(result + 4 * v15) * v11)));
          if ((int)v24 <= -32768) {
            LODWORD(v24) = -32768;
          }
          if ((int)v24 >= 0x7FFF) {
            LOWORD(v24) = 0x7FFF;
          }
          a5->i16[v15++] = v24;
        }
        while (v10 != v15);
      }
      a5 = (int16x4_t *)((char *)a5 + 2 * (a6 >> 1));
      uint64_t v13 = (int *)((char *)v13 + v14);
      result += v14;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale32f16s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x4_t *a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    float v11 = *a8;
    uint64_t v12 = 2 * (a6 >> 1);
    float v13 = a8[1];
    uint64_t v14 = (float *)(result + 8);
    uint64_t v15 = 4 * (a2 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v16 = 0;
        uint64_t v17 = v14;
        uint64_t v18 = a5;
        do
        {
          uint64_t v19 = (uint64_t)rint((float)(v13 + (float)(*(v17 - 2) * v11)));
          uint64_t v20 = (uint64_t)rint((float)(v13 + (float)(*(v17 - 1) * v11)));
          float v22 = *v17;
          float v21 = v17[1];
          v17 += 4;
          uint64_t v23 = (uint64_t)rint((float)(v13 + (float)(v22 * v11)));
          v24.i64[0] = __PAIR64__(v20, v19);
          v24.i32[2] = v23;
          v24.i32[3] = (uint64_t)rint((float)(v13 + (float)(v21 * v11)));
          *v18++ = vqmovn_s32(v24);
          v16 += 4;
        }
        while (v16 <= v9 - 4);
        uint64_t v16 = v16;
      }
      else
      {
        uint64_t v16 = 0;
      }
      if ((int)v16 < (int)v10)
      {
        do
        {
          uint64_t v25 = (uint64_t)rint((float)(v13 + (float)(*(float *)(result + 4 * v16) * v11)));
          if ((int)v25 <= -32768) {
            LODWORD(v25) = -32768;
          }
          if ((int)v25 >= 0x7FFF) {
            LOWORD(v25) = 0x7FFF;
          }
          a5->i16[v16++] = v25;
        }
        while (v10 != v16);
      }
      a5 = (int16x4_t *)((char *)a5 + v12);
      uint64_t v14 = (float *)((char *)v14 + v15);
      result += v15;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale64f16s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x4_t *a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    float v11 = a8[1];
    float v12 = *a8;
    double v13 = v12;
    uint64_t v14 = 2 * (a6 >> 1);
    double v15 = v11;
    uint64_t v16 = (double *)(result + 16);
    uint64_t v17 = 8 * (a2 >> 3);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v18 = 0;
        uint64_t v19 = v16;
        uint64_t v20 = a5;
        do
        {
          uint64_t v21 = (uint64_t)rint(v15 + *(v19 - 2) * v13);
          uint64_t v22 = (uint64_t)rint(v15 + *(v19 - 1) * v13);
          double v23 = *v19;
          double v24 = v19[1];
          v19 += 4;
          uint64_t v25 = (uint64_t)rint(v15 + v23 * v13);
          double v26 = rint(v15 + v24 * v13);
          v27.i64[0] = __PAIR64__(v22, v21);
          v27.i32[2] = v25;
          v27.i32[3] = (uint64_t)v26;
          *v20++ = vqmovn_s32(v27);
          v18 += 4;
        }
        while (v18 <= v9 - 4);
        uint64_t v18 = v18;
      }
      else
      {
        uint64_t v18 = 0;
      }
      if ((int)v18 < (int)v10)
      {
        do
        {
          uint64_t v28 = (uint64_t)rint(v15 + *(double *)(result + 8 * v18) * v13);
          if ((int)v28 <= -32768) {
            LODWORD(v28) = -32768;
          }
          if ((int)v28 >= 0x7FFF) {
            LOWORD(v28) = 0x7FFF;
          }
          a5->i16[v18++] = v28;
        }
        while (v10 != v18);
      }
      a5 = (int16x4_t *)((char *)a5 + v14);
      uint64_t v16 = (double *)((char *)v16 + v17);
      result += v17;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale8u32s(uint64_t result, uint64_t a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, int *a10, double *a11)
{
  int v11 = a10[1];
  if (v11)
  {
    uint64_t v12 = *a10;
    float v13 = *a11;
    float v14 = a11[1];
    double v15 = (_DWORD *)(a8 + 8);
    uint64_t v16 = 4 * (a9 >> 2);
    do
    {
      if ((int)v12 >= 4)
      {
        uint64_t v17 = 0;
        uint64_t v18 = v15;
        do
        {
          LOBYTE(a5) = *(unsigned char *)(result + v17);
          double v19 = rint((float)(v14 + (float)((float)LODWORD(a5) * v13)));
          uint64_t v20 = (uint64_t)v19;
          LOBYTE(v19) = *(unsigned char *)(result + v17 + 1);
          double v21 = rint((float)(v14 + (float)((float)LODWORD(v19) * v13)));
          *(v18 - 2) = v20;
          *(v18 - 1) = (uint64_t)v21;
          LOBYTE(v21) = *(unsigned char *)(result + v17 + 2);
          double v22 = rint((float)(v14 + (float)((float)LODWORD(v21) * v13)));
          uint64_t v23 = (uint64_t)v22;
          LOBYTE(v22) = *(unsigned char *)(result + v17 + 3);
          a5 = rint((float)(v14 + (float)((float)LODWORD(v22) * v13)));
          *uint64_t v18 = v23;
          v18[1] = (uint64_t)a5;
          v18 += 4;
          v17 += 4;
        }
        while (v17 <= v12 - 4);
        uint64_t v17 = v17;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if ((int)v17 < (int)v12)
      {
        do
        {
          LOBYTE(a5) = *(unsigned char *)(result + v17);
          a5 = rint((float)(v14 + (float)((float)LODWORD(a5) * v13)));
          *(_DWORD *)(a8 + 4 * v17++) = (uint64_t)a5;
        }
        while (v17 < v12);
      }
      result += a2;
      double v15 = (_DWORD *)((char *)v15 + v16);
      a8 += v16;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t cv::cvtScale8s32s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    float v10 = *a8;
    float v11 = a8[1];
    uint64_t v12 = (_DWORD *)(a5 + 8);
    uint64_t v13 = 4 * (a6 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v14 = 0;
        double v15 = v12;
        do
        {
          uint64_t v16 = (uint64_t)rint((float)(v11 + (float)((float)*(char *)(result + v14 + 1) * v10)));
          *(v15 - 2) = (uint64_t)rint((float)(v11 + (float)((float)*(char *)(result + v14) * v10)));
          *(v15 - 1) = v16;
          uint64_t v17 = (uint64_t)rint((float)(v11 + (float)((float)*(char *)(result + v14 + 3) * v10)));
          *double v15 = (uint64_t)rint((float)(v11 + (float)((float)*(char *)(result + v14 + 2) * v10)));
          v15[1] = v17;
          v15 += 4;
          v14 += 4;
        }
        while (v14 <= v9 - 4);
        uint64_t v14 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if ((int)v14 < (int)v9)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v14) = (uint64_t)rint((float)(v11 + (float)((float)*(char *)(result + v14) * v10)));
          ++v14;
        }
        while (v14 < v9);
      }
      result += a2;
      uint64_t v12 = (_DWORD *)((char *)v12 + v13);
      a5 += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale16u32s(uint64_t result, unint64_t a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, int *a10, double *a11)
{
  int v11 = a10[1];
  if (v11)
  {
    uint64_t v12 = *a10;
    float v13 = *a11;
    float v14 = a11[1];
    double v15 = (_DWORD *)(a8 + 8);
    uint64_t v16 = 4 * (a9 >> 2);
    uint64_t v17 = (_WORD *)(result + 4);
    uint64_t v18 = 2 * (a2 >> 1);
    do
    {
      if ((int)v12 >= 4)
      {
        uint64_t v19 = 0;
        uint64_t v20 = v17;
        double v21 = v15;
        do
        {
          LOWORD(a5) = *(v20 - 2);
          double v22 = rint((float)(v14 + (float)((float)LODWORD(a5) * v13)));
          uint64_t v23 = (uint64_t)v22;
          LOWORD(v22) = *(v20 - 1);
          double v24 = rint((float)(v14 + (float)((float)LODWORD(v22) * v13)));
          *(v21 - 2) = v23;
          *(v21 - 1) = (uint64_t)v24;
          LOWORD(v24) = *v20;
          double v25 = rint((float)(v14 + (float)((float)LODWORD(v24) * v13)));
          uint64_t v26 = (uint64_t)v25;
          LOWORD(v25) = v20[1];
          a5 = rint((float)(v14 + (float)((float)LODWORD(v25) * v13)));
          _DWORD *v21 = v26;
          v21[1] = (uint64_t)a5;
          v21 += 4;
          v19 += 4;
          v20 += 4;
        }
        while (v19 <= v12 - 4);
        uint64_t v19 = v19;
      }
      else
      {
        uint64_t v19 = 0;
      }
      if ((int)v19 < (int)v12)
      {
        do
        {
          LOWORD(a5) = *(_WORD *)(result + 2 * v19);
          a5 = rint((float)(v14 + (float)((float)LODWORD(a5) * v13)));
          *(_DWORD *)(a8 + 4 * v19++) = (uint64_t)a5;
        }
        while (v19 < v12);
      }
      double v15 = (_DWORD *)((char *)v15 + v16);
      uint64_t v17 = (_WORD *)((char *)v17 + v18);
      a8 += v16;
      result += v18;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t cv::cvtScale16s32s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    float v9 = *a8;
    float v10 = a8[1];
    uint64_t v11 = *a7;
    do
    {
      if ((int)v11 >= 1)
      {
        for (uint64_t i = 0; i != v11; ++i)
          *(_DWORD *)(a5 + 4 * i) = (uint64_t)rint((float)(v10 + (float)((float)*(__int16 *)(result + 2 * i) * v9)));
      }
      a5 += 4 * (a6 >> 2);
      result += 2 * (a2 >> 1);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale32s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    double v10 = *a8;
    double v11 = a8[1];
    uint64_t v12 = 4 * (a2 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v14 = 0;
        uint64_t v13 = 0;
        do
        {
          uint64_t v15 = (uint64_t)rint(v11 + (double)*(int *)(result + v14 + 4) * v10);
          uint64_t v16 = (_DWORD *)(a5 + v14);
          *uint64_t v16 = (uint64_t)rint(v11 + (double)*(int *)(result + v14) * v10);
          v16[1] = v15;
          uint64_t v17 = (uint64_t)rint(v11 + (double)*(int *)(result + v14 + 12) * v10);
          v16[2] = (uint64_t)rint(v11 + (double)*(int *)(result + v14 + 8) * v10);
          v16[3] = v17;
          v13 += 4;
          v14 += 16;
        }
        while (v13 <= v9 - 4);
        uint64_t v13 = v13;
      }
      else
      {
        uint64_t v13 = 0;
      }
      if ((int)v13 < (int)v9)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v13) = (uint64_t)rint(v11 + (double)*(int *)(result + 4 * v13) * v10);
          ++v13;
        }
        while (v13 < v9);
      }
      a5 += 4 * (a6 >> 2);
      result += v12;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale32f32s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    float v10 = *a8;
    float v11 = a8[1];
    uint64_t v12 = 4 * (a2 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v14 = 0;
        uint64_t v13 = 0;
        do
        {
          uint64_t v15 = (uint64_t)rint((float)(v11 + (float)(*(float *)(result + v14 + 4) * v10)));
          uint64_t v16 = (uint64_t)rint((float)(v11 + (float)(*(float *)(result + v14 + 8) * v10)));
          uint64_t v17 = (uint64_t)rint((float)(v11 + (float)(*(float *)(result + v14 + 12) * v10)));
          uint64_t v18 = (_DWORD *)(a5 + v14);
          *uint64_t v18 = (uint64_t)rint((float)(v11 + (float)(*(float *)(result + v14) * v10)));
          v18[1] = v15;
          v18[2] = v16;
          v18[3] = v17;
          v13 += 4;
          v14 += 16;
        }
        while (v13 <= v9 - 4);
        uint64_t v13 = v13;
      }
      else
      {
        uint64_t v13 = 0;
      }
      if ((int)v13 < (int)v9)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v13) = (uint64_t)rint((float)(v11 + (float)(*(float *)(result + 4 * v13) * v10)));
          ++v13;
        }
        while (v13 < v9);
      }
      a5 += 4 * (a6 >> 2);
      result += v12;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale64f32s(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    double v10 = *a8;
    double v11 = a8[1];
    uint64_t v12 = (_DWORD *)(a5 + 8);
    uint64_t v13 = 4 * (a6 >> 2);
    uint64_t v14 = (double *)(result + 16);
    uint64_t v15 = 8 * (a2 >> 3);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v16 = 0;
        uint64_t v17 = v14;
        uint64_t v18 = v12;
        do
        {
          uint64_t v19 = (uint64_t)rint(v11 + *(v17 - 2) * v10);
          uint64_t v20 = (uint64_t)rint(v11 + *(v17 - 1) * v10);
          double v21 = *v17;
          double v22 = v17[1];
          v17 += 4;
          *(v18 - 2) = v19;
          *(v18 - 1) = v20;
          *uint64_t v18 = (uint64_t)rint(v11 + v21 * v10);
          v18[1] = (uint64_t)rint(v11 + v22 * v10);
          v18 += 4;
          v16 += 4;
        }
        while (v16 <= v9 - 4);
        uint64_t v16 = v16;
      }
      else
      {
        uint64_t v16 = 0;
      }
      if ((int)v16 < (int)v9)
      {
        do
        {
          *(_DWORD *)(a5 + 4 * v16) = (uint64_t)rint(v11 + *(double *)(result + 8 * v16) * v10);
          ++v16;
        }
        while (v16 < v9);
      }
      uint64_t v12 = (_DWORD *)((char *)v12 + v13);
      uint64_t v14 = (double *)((char *)v14 + v15);
      a5 += v13;
      result += v15;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale8u32f(uint64_t result, uint64_t a2, double a3, double a4, float a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, unsigned int *a11, double *a12)
{
  int v12 = a11[1];
  if (v12)
  {
    uint64_t v13 = (int)*a11;
    uint64_t v14 = *a11;
    float v15 = *a12;
    float v16 = a12[1];
    uint64_t v17 = (float *)(a9 + 8);
    uint64_t v18 = 4 * (a10 >> 2);
    do
    {
      if ((int)v13 >= 4)
      {
        uint64_t v19 = 0;
        uint64_t v20 = v17;
        do
        {
          LOBYTE(a5) = *(unsigned char *)(result + v19);
          *(float *)&unsigned int v21 = v16 + (float)((float)LODWORD(a5) * v15);
          LOBYTE(a6) = *(unsigned char *)(result + v19 + 1);
          *(float *)&unsigned int v22 = v16 + (float)((float)LODWORD(a6) * v15);
          *(v20 - 2) = *(float *)&v21;
          *(v20 - 1) = *(float *)&v22;
          LOBYTE(v21) = *(unsigned char *)(result + v19 + 2);
          a5 = v16 + (float)((float)v21 * v15);
          LOBYTE(v22) = *(unsigned char *)(result + v19 + 3);
          a6 = v16 + (float)((float)v22 * v15);
          *uint64_t v20 = a5;
          v20[1] = a6;
          v20 += 4;
          v19 += 4;
        }
        while (v19 <= v13 - 4);
        uint64_t v19 = v19;
      }
      else
      {
        uint64_t v19 = 0;
      }
      if ((int)v19 < (int)v14)
      {
        do
        {
          LOBYTE(a5) = *(unsigned char *)(result + v19);
          a5 = v16 + (float)((float)LODWORD(a5) * v15);
          *(float *)(a9 + 4 * v19++) = a5;
        }
        while (v14 != v19);
      }
      result += a2;
      uint64_t v17 = (float *)((char *)v17 + v18);
      a9 += v18;
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t cv::cvtScale8s32f(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    float v11 = *a8;
    float v12 = a8[1];
    uint64_t v13 = (float *)(a5 + 8);
    uint64_t v14 = 4 * (a6 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v15 = 0;
        float v16 = v13;
        do
        {
          float v17 = v12 + (float)((float)*(char *)(result + v15 + 1) * v11);
          *(v16 - 2) = v12 + (float)((float)*(char *)(result + v15) * v11);
          *(v16 - 1) = v17;
          float v18 = v12 + (float)((float)*(char *)(result + v15 + 3) * v11);
          *float v16 = v12 + (float)((float)*(char *)(result + v15 + 2) * v11);
          v16[1] = v18;
          v16 += 4;
          v15 += 4;
        }
        while (v15 <= v9 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v10)
      {
        do
        {
          *(float *)(a5 + 4 * v15) = v12 + (float)((float)*(char *)(result + v15) * v11);
          ++v15;
        }
        while (v10 != v15);
      }
      result += a2;
      uint64_t v13 = (float *)((char *)v13 + v14);
      a5 += v14;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint16x4_t *cv::cvtScale16u32f(uint16x4_t *result, unint64_t a2, double a3, double a4, double a5, double a6, float32x4_t a7, uint64_t a8, uint64_t a9, float32x4_t *a10, unint64_t a11, unsigned int *a12, uint64_t a13)
{
  int v13 = a12[1];
  if (v13)
  {
    uint64_t v14 = (int)*a12;
    uint64_t v15 = *a12;
    int32x2_t v16 = *(int32x2_t *)a13;
    double v17 = *(double *)(a13 + 8);
    *(float *)v16.i32 = *(double *)a13;
    *(float *)&double v17 = v17;
    float32x4_t v18 = (float32x4_t)vdupq_lane_s32(v16, 0);
    float32x4_t v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    do
    {
      if ((int)v14 >= 4)
      {
        uint64_t v20 = 0;
        unsigned int v21 = result;
        unsigned int v22 = a10;
        do
        {
          uint16x4_t v23 = *v21++;
          a7 = vcvtq_f32_u32(vmovl_u16(v23));
          *v22++ = vmlaq_f32(v19, v18, a7);
          v20 += 4;
        }
        while (v20 <= v14 - 4);
        uint64_t v20 = v20;
      }
      else
      {
        uint64_t v20 = 0;
      }
      if ((int)v20 < (int)v15)
      {
        do
        {
          a7.i16[0] = result->i16[v20];
          a7.f32[0] = *(float *)&v17 + (float)((float)a7.u32[0] * *(float *)v16.i32);
          a10->i32[v20++] = a7.i32[0];
        }
        while (v15 != v20);
      }
      a10 = (float32x4_t *)((char *)a10 + 4 * (a11 >> 2));
      result = (uint16x4_t *)((char *)result + 2 * (a2 >> 1));
      --v13;
    }
    while (v13);
  }
  return result;
}

int16x4_t *cv::cvtScale16s32f(int16x4_t *result, unint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, unint64_t a6, unsigned int *a7, uint64_t a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    int32x2_t v11 = *(int32x2_t *)a8;
    double v12 = *(double *)(a8 + 8);
    *(float *)v11.i32 = *(double *)a8;
    *(float *)&double v12 = v12;
    float32x4_t v13 = (float32x4_t)vdupq_lane_s32(v11, 0);
    float32x4_t v14 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v12, 0);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v15 = 0;
        int32x2_t v16 = result;
        double v17 = a5;
        do
        {
          int16x4_t v18 = *v16++;
          *v17++ = vmlaq_f32(v14, v13, vcvtq_f32_s32(vmovl_s16(v18)));
          v15 += 4;
        }
        while (v15 <= v9 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v10)
      {
        do
        {
          a5->f32[v15] = *(float *)&v12 + (float)((float)result->i16[v15] * *(float *)v11.i32);
          ++v15;
        }
        while (v10 != v15);
      }
      a5 = (float32x4_t *)((char *)a5 + 4 * (a6 >> 2));
      result = (int16x4_t *)((char *)result + 2 * (a2 >> 1));
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale32s32f(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, uint64_t a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    double v11 = *(double *)a8;
    uint64_t v12 = *(uint64_t *)(a8 + 8);
    float64x2_t v13 = (float64x2_t)vdupq_lane_s64(*(void *)a8, 0);
    float64x2_t v14 = (float64x2_t)vdupq_lane_s64(v12, 0);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v16 = 0;
        uint64_t v15 = 0;
        do
        {
          long long v17 = *(_OWORD *)(result + v16);
          v18.i64[0] = (int)v17;
          v18.i64[1] = SDWORD1(v17);
          float64x2_t v19 = vcvtq_f64_s64(v18);
          v18.i64[0] = SDWORD2(v17);
          v18.i64[1] = SHIDWORD(v17);
          *(float32x4_t *)(a5 + v16) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v14, v13, v19)), vmlaq_f64(v14, v13, vcvtq_f64_s64(v18)));
          v15 += 4;
          v16 += 16;
        }
        while (v15 <= v9 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v10)
      {
        do
        {
          float v20 = *(double *)&v12 + (double)*(int *)(result + 4 * v15) * v11;
          *(float *)(a5 + 4 * v15++) = v20;
        }
        while (v10 != v15);
      }
      a5 += 4 * (a6 >> 2);
      result += 4 * (a2 >> 2);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale32f(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, uint64_t a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    int32x2_t v11 = *(int32x2_t *)a8;
    double v12 = *(double *)(a8 + 8);
    *(float *)v11.i32 = *(double *)a8;
    *(float *)&double v12 = v12;
    float32x2_t v13 = (float32x2_t)vdup_lane_s32(v11, 0);
    float32x2_t v14 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v12, 0);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v16 = 0;
        uint64_t v15 = 0;
        do
        {
          long long v17 = (float32x2_t *)(a5 + v16);
          *long long v17 = vmla_f32(v14, v13, *(float32x2_t *)(result + v16));
          v17[1] = vmla_f32(v14, v13, *(float32x2_t *)(result + v16 + 8));
          v15 += 4;
          v16 += 16;
        }
        while (v15 <= v9 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v10)
      {
        do
        {
          *(float *)(a5 + 4 * v15) = *(float *)&v12 + (float)(*(float *)(result + 4 * v15) * *(float *)v11.i32);
          ++v15;
        }
        while (v10 != v15);
      }
      a5 += 4 * (a6 >> 2);
      result += 4 * (a2 >> 2);
      --v8;
    }
    while (v8);
  }
  return result;
}

float64x2_t *cv::cvtScale64f32f(float64x2_t *result, unint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, unint64_t a6, unsigned int *a7, uint64_t a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    double v11 = *(double *)a8;
    uint64_t v12 = *(uint64_t *)(a8 + 8);
    float64x2_t v13 = (float64x2_t)vdupq_lane_s64(*(void *)a8, 0);
    float64x2_t v14 = (float64x2_t)vdupq_lane_s64(v12, 0);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v15 = 0;
        uint64_t v16 = result;
        long long v17 = a5;
        do
        {
          float64x2_t v18 = *v16;
          float64x2_t v19 = v16[1];
          v16 += 2;
          *v17++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v14, v13, v18)), vmlaq_f64(v14, v13, v19));
          v15 += 4;
        }
        while (v15 <= v9 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v10)
      {
        do
        {
          float32_t v20 = *(double *)&v12 + result->f64[v15] * v11;
          a5->f32[v15++] = v20;
        }
        while (v10 != v15);
      }
      a5 = (float32x4_t *)((char *)a5 + 4 * (a6 >> 2));
      result = (float64x2_t *)((char *)result + 8 * (a2 >> 3));
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale8u64f(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, unsigned int *a11, double *a12)
{
  int v12 = a11[1];
  if (v12)
  {
    uint64_t v13 = (int)*a11;
    uint64_t v14 = *a11;
    double v15 = *a12;
    double v16 = a12[1];
    long long v17 = (double *)(a9 + 16);
    uint64_t v18 = 8 * (a10 >> 3);
    do
    {
      if ((int)v13 >= 4)
      {
        uint64_t v19 = 0;
        float32_t v20 = v17;
        do
        {
          LOBYTE(a5) = *(unsigned char *)(result + v19);
          double v21 = v16 + (double)*(unint64_t *)&a5 * v15;
          LOBYTE(a6) = *(unsigned char *)(result + v19 + 1);
          double v22 = v16 + (double)*(unint64_t *)&a6 * v15;
          *(v20 - 2) = v21;
          *(v20 - 1) = v22;
          LOBYTE(v21) = *(unsigned char *)(result + v19 + 2);
          a5 = v16 + (double)*(unint64_t *)&v21 * v15;
          LOBYTE(v22) = *(unsigned char *)(result + v19 + 3);
          a6 = v16 + (double)*(unint64_t *)&v22 * v15;
          *float32_t v20 = a5;
          v20[1] = a6;
          v20 += 4;
          v19 += 4;
        }
        while (v19 <= v13 - 4);
        uint64_t v19 = v19;
      }
      else
      {
        uint64_t v19 = 0;
      }
      if ((int)v19 < (int)v14)
      {
        do
        {
          LOBYTE(a5) = *(unsigned char *)(result + v19);
          a5 = v16 + (double)*(unint64_t *)&a5 * v15;
          *(double *)(a9 + 8 * v19++) = a5;
        }
        while (v14 != v19);
      }
      result += a2;
      long long v17 = (double *)((char *)v17 + v18);
      a9 += v18;
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t cv::cvtScale8s64f(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    double v11 = *a8;
    double v12 = a8[1];
    uint64_t v13 = (double *)(a5 + 16);
    uint64_t v14 = 8 * (a6 >> 3);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v15 = 0;
        double v16 = v13;
        do
        {
          double v17 = v12 + (double)*(char *)(result + v15 + 1) * v11;
          *(v16 - 2) = v12 + (double)*(char *)(result + v15) * v11;
          *(v16 - 1) = v17;
          double v18 = v12 + (double)*(char *)(result + v15 + 3) * v11;
          *double v16 = v12 + (double)*(char *)(result + v15 + 2) * v11;
          v16[1] = v18;
          v16 += 4;
          v15 += 4;
        }
        while (v15 <= v9 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v10)
      {
        do
        {
          *(double *)(a5 + 8 * v15) = v12 + (double)*(char *)(result + v15) * v11;
          ++v15;
        }
        while (v10 != v15);
      }
      result += a2;
      uint64_t v13 = (double *)((char *)v13 + v14);
      a5 += v14;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale16u64f(uint64_t result, unint64_t a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, unsigned int *a11, double *a12)
{
  int v12 = a11[1];
  if (v12)
  {
    uint64_t v13 = (int)*a11;
    uint64_t v14 = *a11;
    double v15 = *a12;
    double v16 = a12[1];
    double v17 = (double *)(a9 + 16);
    uint64_t v18 = 8 * (a10 >> 3);
    uint64_t v19 = (_WORD *)(result + 4);
    uint64_t v20 = 2 * (a2 >> 1);
    do
    {
      if ((int)v13 >= 4)
      {
        uint64_t v21 = 0;
        double v22 = v19;
        uint16x4_t v23 = v17;
        do
        {
          LOWORD(a5) = *(v22 - 2);
          double v24 = v16 + (double)*(unint64_t *)&a5 * v15;
          LOWORD(a6) = *(v22 - 1);
          double v25 = v16 + (double)*(unint64_t *)&a6 * v15;
          *(v23 - 2) = v24;
          *(v23 - 1) = v25;
          LOWORD(v24) = *v22;
          a5 = v16 + (double)*(unint64_t *)&v24 * v15;
          LOWORD(v25) = v22[1];
          a6 = v16 + (double)*(unint64_t *)&v25 * v15;
          double *v23 = a5;
          v23[1] = a6;
          v23 += 4;
          v21 += 4;
          v22 += 4;
        }
        while (v21 <= v13 - 4);
        uint64_t v21 = v21;
      }
      else
      {
        uint64_t v21 = 0;
      }
      if ((int)v21 < (int)v14)
      {
        do
        {
          LOWORD(a5) = *(_WORD *)(result + 2 * v21);
          a5 = v16 + (double)*(unint64_t *)&a5 * v15;
          *(double *)(a9 + 8 * v21++) = a5;
        }
        while (v14 != v21);
      }
      double v17 = (double *)((char *)v17 + v18);
      uint64_t v19 = (_WORD *)((char *)v19 + v20);
      a9 += v18;
      result += v20;
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t cv::cvtScale16s64f(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    double v11 = *a8;
    double v12 = a8[1];
    uint64_t v13 = (double *)(a5 + 16);
    uint64_t v14 = 8 * (a6 >> 3);
    double v15 = (__int16 *)(result + 4);
    uint64_t v16 = 2 * (a2 >> 1);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v17 = 0;
        uint64_t v18 = v15;
        uint64_t v19 = v13;
        do
        {
          double v20 = v12 + (double)*(v18 - 1) * v11;
          double v21 = (double)*v18;
          *(v19 - 2) = v12 + (double)*(v18 - 2) * v11;
          *(v19 - 1) = v20;
          double v22 = v12 + (double)v18[1] * v11;
          *uint64_t v19 = v12 + v21 * v11;
          v19[1] = v22;
          v19 += 4;
          v17 += 4;
          v18 += 4;
        }
        while (v17 <= v9 - 4);
        uint64_t v17 = v17;
      }
      else
      {
        uint64_t v17 = 0;
      }
      if ((int)v17 < (int)v10)
      {
        do
        {
          *(double *)(a5 + 8 * v17) = v12 + (double)*(__int16 *)(result + 2 * v17) * v11;
          ++v17;
        }
        while (v10 != v17);
      }
      uint64_t v13 = (double *)((char *)v13 + v14);
      double v15 = (__int16 *)((char *)v15 + v16);
      a5 += v14;
      result += v16;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale32s64f(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, unint64_t a6, unsigned int *a7, uint64_t a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    double v11 = *(double *)a8;
    uint64_t v12 = *(uint64_t *)(a8 + 8);
    float64x2_t v13 = (float64x2_t)vdupq_lane_s64(*(void *)a8, 0);
    float64x2_t v14 = (float64x2_t)vdupq_lane_s64(v12, 0);
    double v15 = a5 + 1;
    uint64_t v16 = 8 * (a6 >> 3);
    uint64_t v17 = (uint64_t *)(result + 8);
    uint64_t v18 = 4 * (a2 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v19 = 0;
        double v20 = v17;
        double v21 = v15;
        do
        {
          uint64_t v22 = *(v20 - 1);
          v23.i64[0] = (int)v22;
          v23.i64[1] = SHIDWORD(v22);
          v21[-1] = vmlaq_f64(v14, v13, vcvtq_f64_s64(v23));
          uint64_t v24 = *v20;
          v20 += 2;
          v23.i64[0] = (int)v24;
          v23.i64[1] = SHIDWORD(v24);
          float64x2_t *v21 = vmlaq_f64(v14, v13, vcvtq_f64_s64(v23));
          v21 += 2;
          v19 += 4;
        }
        while (v19 <= v9 - 4);
        uint64_t v19 = v19;
      }
      else
      {
        uint64_t v19 = 0;
      }
      if ((int)v19 < (int)v10)
      {
        do
        {
          a5->f64[v19] = *(double *)&v12 + (double)*(int *)(result + 4 * v19) * v11;
          ++v19;
        }
        while (v10 != v19);
      }
      double v15 = (float64x2_t *)((char *)v15 + v16);
      uint64_t v17 = (uint64_t *)((char *)v17 + v18);
      a5 = (float64x2_t *)((char *)a5 + v16);
      result += v18;
      --v8;
    }
    while (v8);
  }
  return result;
}

float32x2_t *cv::cvtScale32f64f(float32x2_t *result, unint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, unint64_t a6, unsigned int *a7, uint64_t a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    double v11 = *(double *)a8;
    uint64_t v12 = *(uint64_t *)(a8 + 8);
    float64x2_t v13 = (float64x2_t)vdupq_lane_s64(*(void *)a8, 0);
    float64x2_t v14 = (float64x2_t)vdupq_lane_s64(v12, 0);
    double v15 = a5 + 1;
    uint64_t v16 = 8 * (a6 >> 3);
    uint64_t v17 = result + 1;
    uint64_t v18 = 4 * (a2 >> 2);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v19 = 0;
        double v20 = v17;
        double v21 = v15;
        do
        {
          v21[-1] = vmlaq_f64(v14, v13, vcvtq_f64_f32(v20[-1]));
          float32x2_t v22 = *v20;
          v20 += 2;
          float64x2_t *v21 = vmlaq_f64(v14, v13, vcvtq_f64_f32(v22));
          v21 += 2;
          v19 += 4;
        }
        while (v19 <= v9 - 4);
        uint64_t v19 = v19;
      }
      else
      {
        uint64_t v19 = 0;
      }
      if ((int)v19 < (int)v10)
      {
        do
        {
          a5->f64[v19] = *(double *)&v12 + result->f32[v19] * v11;
          ++v19;
        }
        while (v10 != v19);
      }
      double v15 = (float64x2_t *)((char *)v15 + v16);
      uint64_t v17 = (float32x2_t *)((char *)v17 + v18);
      a5 = (float64x2_t *)((char *)a5 + v16);
      result = (float32x2_t *)((char *)result + v18);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t cv::cvtScale64f(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, uint64_t a8)
{
  int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = (int)*a7;
    uint64_t v10 = *a7;
    double v11 = *(double *)a8;
    uint64_t v12 = *(uint64_t *)(a8 + 8);
    float64x2_t v13 = (float64x2_t)vdupq_lane_s64(*(void *)a8, 0);
    float64x2_t v14 = (float64x2_t)vdupq_lane_s64(v12, 0);
    do
    {
      if ((int)v9 >= 4)
      {
        uint64_t v16 = 0;
        uint64_t v15 = 0;
        do
        {
          uint64_t v17 = (float64x2_t *)(a5 + v16);
          *uint64_t v17 = vmlaq_f64(v14, v13, *(float64x2_t *)(result + v16));
          v17[1] = vmlaq_f64(v14, v13, *(float64x2_t *)(result + v16 + 16));
          v15 += 4;
          v16 += 32;
        }
        while (v15 <= v9 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v10)
      {
        do
        {
          *(double *)(a5 + 8 * v15) = *(double *)&v12 + *(double *)(result + 8 * v15) * v11;
          ++v15;
        }
        while (v10 != v15);
      }
      a5 += 8 * (a6 >> 3);
      result += 8 * (a2 >> 3);
      --v8;
    }
    while (v8);
  }
  return result;
}

void cv::Mat::convertTo(cv::Mat *this, const cv::_OutputArray *a2, int a3, double a4, double a5)
{
  v66[2] = *MEMORY[0x263EF8340];
  BOOL v9 = fabs(a4 + -1.0) >= 2.22044605e-16;
  int v10 = fabs(a5) >= 2.22044605e-16 || v9;
  if (a3 < 0)
  {
    if ((*(unsigned int (**)(const cv::_OutputArray *))(*(void *)a2 + 104))(a2))
    {
      uint64_t v12 = (*(uint64_t (**)(const cv::_OutputArray *, uint64_t))(*(void *)a2 + 64))(a2, 0xFFFFFFFFLL);
      int v11 = *(_DWORD *)this;
    }
    else
    {
      int v11 = *(_DWORD *)this;
      uint64_t v12 = *(_DWORD *)this & 0xFFF;
    }
  }
  else
  {
    int v11 = *(_DWORD *)this;
    uint64_t v12 = *(_DWORD *)this & 0xFF8 | a3 & 7u;
  }
  unsigned int v13 = v11 & 7;
  uint64_t v14 = v12 & 7;
  if (v13 == v14) {
    char v15 = v10;
  }
  else {
    char v15 = 1;
  }
  if (v15)
  {
    uint64_t v16 = *(void *)((char *)this + 4);
    uint64_t v54 = v16;
    int v17 = *((_DWORD *)this + 3);
    int v53 = v11;
    int v55 = v17;
    uint64_t v18 = (unsigned __int8 *)*((void *)this + 2);
    long long v19 = *(_OWORD *)((char *)this + 24);
    long long v57 = v19;
    long long v58 = *(_OWORD *)((char *)this + 40);
    uint64_t v20 = *((void *)this + 7);
    v56 = v18;
    uint64_t v59 = v20;
    v60 = (char *)&v54 + 4;
    v61 = (cv *)v62;
    v62[0] = 0;
    v62[1] = 0;
    if ((void)v19)
    {
      atomic_fetch_add((atomic_uint *volatile)v19, 1u);
      int v21 = *((_DWORD *)this + 1);
    }
    else
    {
      int v21 = v16;
    }
    if (v21 > 2)
    {
      LODWORD(v54) = 0;
      cv::Mat::copySize((cv::Mat *)&v53, this);
    }
    else
    {
      float32x2_t v22 = (void *)*((void *)this + 9);
      int64x2_t v23 = v61;
      *(void *)v61 = *v22;
      *((void *)v23 + 1) = v22[1];
    }
    uint64_t v24 = (uint64_t (**)())&cv::getConvertFunc(int,int)::cvtTab;
    if (v10) {
      uint64_t v24 = cv::getConvertScaleFunc(int,int)::cvtScaleTab;
    }
    double v25 = (void (*)(unsigned __int8 *, void, void, void, uint64_t, void, _DWORD *, void *))*(&v24[8 * v14] + v13);
    *(double *)v66 = a4;
    *(double *)&v66[1] = a5;
    if (!v25)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "func != 0");
      std::string::basic_string[abi:ne180100]<0>(v65, "convertTo");
      std::string::basic_string[abi:ne180100]<0>(&v63, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/convert.cpp");
      cv::Exception::Exception(v44, 4294967081, __p, v65, &v63, 1115);
      cv::error((cv *)v44, v26);
    }
    unint64_t v27 = (((unint64_t)*(unsigned int *)this >> 3) & 0x1FF) + 1;
    if (*((int *)this + 1) > 2)
    {
      (*(void (**)(const cv::_OutputArray *))(*(void *)a2 + 144))(a2);
      (**(void (***)(void *__return_ptr, const cv::_OutputArray *, uint64_t))a2)(v44, a2, 0xFFFFFFFFLL);
      v65[0] = (cv::Mat *)&v53;
      v65[1] = (cv::Mat *)v44;
      v65[2] = 0;
      v63 = 0;
      uint64_t v64 = 0;
      cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)__p, v65, &v63, -1);
      int v31 = v27 * v41;
      uint64_t v32 = -1;
      while ((void *)++v32 < __p[4])
      {
        v39[0] = v31;
        v39[1] = 1;
        v25(v63, 0, 0, 0, v64, 0, v39, v66);
        cv::NAryMatIterator::operator++((uint64_t)__p);
      }
      if (v46 && atomic_fetch_add(v46, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v44, v30);
      }
      uint64_t v45 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      if (SHIDWORD(v44[0]) >= 1)
      {
        uint64_t v33 = 0;
        uint64_t v34 = v50;
        do
          *(_DWORD *)(v34 + 4 * v33++) = 0;
        while (v33 < SHIDWORD(v44[0]));
      }
      v46 = 0;
      if (v51 != (cv *)v52) {
        cv::fastFree((void **)v51, v30);
      }
    }
    else
    {
      int32x2_t v43 = vrev64_s32(**((int32x2_t **)this + 8));
      (*(void (**)(const cv::_OutputArray *, int32x2_t *, uint64_t, uint64_t, void, void))(*(void *)a2 + 128))(a2, &v43, v12, 0xFFFFFFFFLL, 0, 0);
      (**(void (***)(void *__return_ptr, const cv::_OutputArray *, uint64_t))a2)(v44, a2, 0xFFFFFFFFLL);
      int v28 = HIDWORD(v54);
      if ((v53 & v44[0] & 0x4000) != 0 && (uint64_t v29 = v55 * (uint64_t)(int)v27 * SHIDWORD(v54), v29 == (int)v29)) {
        int v28 = 1;
      }
      else {
        LODWORD(v29) = v55 * v27;
      }
      v42[0] = v29;
      v42[1] = v28;
      v25(v56, v62[0], 0, 0, v45, v52[0], v42, v66);
      if (v46 && atomic_fetch_add(v46, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v44, v30);
      }
      uint64_t v45 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      if (SHIDWORD(v44[0]) >= 1)
      {
        uint64_t v35 = 0;
        uint64_t v36 = v50;
        do
          *(_DWORD *)(v36 + 4 * v35++) = 0;
        while (v35 < SHIDWORD(v44[0]));
      }
      v46 = 0;
      if (v51 != (cv *)v52) {
        cv::fastFree((void **)v51, v30);
      }
    }
    if ((void)v57 && atomic_fetch_add((atomic_uint *volatile)v57, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v53, v30);
    }
    v56 = 0;
    long long v58 = 0uLL;
    *((void *)&v57 + 1) = 0;
    if ((int)v54 >= 1)
    {
      uint64_t v37 = 0;
      v38 = v60;
      do
        *(_DWORD *)&v38[4 * v37++] = 0;
      while (v37 < (int)v54);
    }
    *(void *)&long long v57 = 0;
    if (v61 != (cv *)v62) {
      cv::fastFree((void **)v61, v30);
    }
  }
  else
  {
    cv::Mat::copyTo(this, a2);
  }
}

void sub_225EDED6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  cv::Exception::~Exception((cv::Exception *)&a24);
  if (*(char *)(v39 - 145) < 0) {
    operator delete(*(void **)(v39 - 168));
  }
  if (*(char *)(v39 - 121) < 0) {
    operator delete(*(void **)(v39 - 144));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  cv::Mat::~Mat((cv::Mat *)&a39, v41);
  _Unwind_Resume(a1);
}

uint64_t cv::mixChannels8u(uint64_t this, const unsigned __int8 **a2, const int *a3, unsigned __int8 **a4, const int *a5, int a6)
{
  if (a6 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = a5 - 2;
    do
    {
      int v8 = *(unsigned char **)(this + 8 * v6);
      BOOL v9 = *(unsigned char **)&a3[2 * v6];
      uint64_t v10 = *((int *)a4 + v6);
      if (v8)
      {
        if ((int)a5 < 2)
        {
          signed int v11 = 0;
        }
        else
        {
          int v13 = 0;
          uint64_t v14 = *((int *)a2 + v6);
          do
          {
            char v15 = v8[v14];
            *BOOL v9 = *v8;
            v9[v10] = v15;
            v13 += 2;
            v8 += 2 * (int)v14;
            v9 += 2 * v10;
          }
          while (v13 <= v7);
          signed int v11 = (v7 & 0xFFFFFFFE) + 2;
        }
        if (v11 < (int)a5) {
          *BOOL v9 = *v8;
        }
      }
      else
      {
        if ((int)a5 < 2)
        {
          signed int v12 = 0;
        }
        else
        {
          int v16 = 0;
          do
          {
            v9[v10] = 0;
            *BOOL v9 = 0;
            v16 += 2;
            v9 += 2 * (int)v10;
          }
          while (v16 <= v7);
          signed int v12 = (v7 & 0xFFFFFFFE) + 2;
        }
        if (v12 < (int)a5) {
          *BOOL v9 = 0;
        }
      }
      ++v6;
    }
    while (v6 != a6);
  }
  return this;
}

uint64_t cv::mixChannels16u(uint64_t this, const unsigned __int16 **a2, const int *a3, unsigned __int16 **a4, const int *a5, int a6)
{
  if (a6 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = a5 - 2;
    do
    {
      int v8 = *(_WORD **)(this + 8 * v6);
      BOOL v9 = *(_WORD **)&a3[2 * v6];
      uint64_t v10 = *((int *)a4 + v6);
      if (v8)
      {
        if ((int)a5 < 2)
        {
          signed int v11 = 0;
        }
        else
        {
          int v13 = 0;
          uint64_t v14 = *((int *)a2 + v6);
          do
          {
            __int16 v15 = v8[v14];
            *BOOL v9 = *v8;
            v9[v10] = v15;
            v13 += 2;
            v9 += 2 * v10;
            v8 += 2 * (int)v14;
          }
          while (v13 <= v7);
          signed int v11 = (v7 & 0xFFFFFFFE) + 2;
        }
        if (v11 < (int)a5) {
          *BOOL v9 = *v8;
        }
      }
      else
      {
        if ((int)a5 < 2)
        {
          signed int v12 = 0;
        }
        else
        {
          int v16 = 0;
          do
          {
            v9[v10] = 0;
            *BOOL v9 = 0;
            v16 += 2;
            v9 += 2 * (int)v10;
          }
          while (v16 <= v7);
          signed int v12 = (v7 & 0xFFFFFFFE) + 2;
        }
        if (v12 < (int)a5) {
          *BOOL v9 = 0;
        }
      }
      ++v6;
    }
    while (v6 != a6);
  }
  return this;
}

uint64_t cv::mixChannels32s(uint64_t this, const int **a2, const int *a3, int **a4, const int *a5, int a6)
{
  if (a6 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = a5 - 2;
    do
    {
      int v8 = *(_DWORD **)(this + 8 * v6);
      BOOL v9 = *(_DWORD **)&a3[2 * v6];
      uint64_t v10 = *((int *)a4 + v6);
      if (v8)
      {
        if ((int)a5 < 2)
        {
          signed int v11 = 0;
        }
        else
        {
          int v13 = 0;
          uint64_t v14 = *((int *)a2 + v6);
          do
          {
            int v15 = v8[v14];
            *BOOL v9 = *v8;
            v9[v10] = v15;
            v13 += 2;
            v9 += 2 * v10;
            v8 += 2 * (int)v14;
          }
          while (v13 <= v7);
          signed int v11 = (v7 & 0xFFFFFFFE) + 2;
        }
        if (v11 < (int)a5) {
          *BOOL v9 = *v8;
        }
      }
      else
      {
        if ((int)a5 < 2)
        {
          signed int v12 = 0;
        }
        else
        {
          int v16 = 0;
          do
          {
            v9[v10] = 0;
            *BOOL v9 = 0;
            v16 += 2;
            v9 += 2 * (int)v10;
          }
          while (v16 <= v7);
          signed int v12 = (v7 & 0xFFFFFFFE) + 2;
        }
        if (v12 < (int)a5) {
          *BOOL v9 = 0;
        }
      }
      ++v6;
    }
    while (v6 != a6);
  }
  return this;
}

uint64_t cv::mixChannels64s(uint64_t this, const uint64_t **a2, const int *a3, uint64_t **a4, const int *a5, int a6)
{
  if (a6 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = a5 - 2;
    do
    {
      int v8 = *(void **)(this + 8 * v6);
      BOOL v9 = *(void **)&a3[2 * v6];
      uint64_t v10 = *((int *)a4 + v6);
      if (v8)
      {
        if ((int)a5 < 2)
        {
          signed int v11 = 0;
        }
        else
        {
          int v13 = 0;
          uint64_t v14 = *((int *)a2 + v6);
          do
          {
            uint64_t v15 = v8[v14];
            *BOOL v9 = *v8;
            v9[v10] = v15;
            v13 += 2;
            v9 += 2 * v10;
            v8 += 2 * (int)v14;
          }
          while (v13 <= v7);
          signed int v11 = (v7 & 0xFFFFFFFE) + 2;
        }
        if (v11 < (int)a5) {
          *BOOL v9 = *v8;
        }
      }
      else
      {
        if ((int)a5 < 2)
        {
          signed int v12 = 0;
        }
        else
        {
          int v16 = 0;
          do
          {
            v9[v10] = 0;
            *BOOL v9 = 0;
            v16 += 2;
            v9 += 2 * (int)v10;
          }
          while (v16 <= v7);
          signed int v12 = (v7 & 0xFFFFFFFE) + 2;
        }
        if (v12 < (int)a5) {
          *BOOL v9 = 0;
        }
      }
      ++v6;
    }
    while (v6 != a6);
  }
  return this;
}

void cv::gemm(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, double a4, const cv::_InputArray *a5, double a6, const cv::_OutputArray *a7)
{
  void (***v7)(void *__return_ptr);
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  void (***v14)(_OWORD *__return_ptr, void, uint64_t);
  void (***v15)(_OWORD *__return_ptr, void, uint64_t);
  double v16;
  double v17;
  void (***v18)(uint64_t *__return_ptr, void, uint64_t);
  void (***v19)(uint64_t *__return_ptr, void, uint64_t);
  int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  const cv::Exception *v24;
  uint64_t v25;
  const cv::Exception *v26;
  const cv::Exception *v27;
  const cv::Exception *v28;
  uint64_t v29;
  const cv::Exception *v30;
  const cv::Exception *v31;
  uint64_t v32;
  const cv::_OutputArray *v33;
  float *v34;
  unint64_t v35;
  float *v36;
  unint64_t v37;
  float *v38;
  unint64_t v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  float *v44;
  uint64_t v45;
  float *v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  double *v53;
  unint64_t v54;
  double *v55;
  unint64_t v56;
  double *v57;
  unint64_t v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  double *v62;
  double *v63;
  uint64_t v64;
  double *v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  float *v71;
  float *v72;
  uint64_t v73;
  float *v74;
  uint64_t v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  uint64_t v84;
  double *v85;
  double *v86;
  uint64_t v87;
  double *v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  uint64_t v95;
  float *v96;
  float *v97;
  uint64_t v98;
  float *v99;
  uint64_t v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  uint64_t v112;
  double *v113;
  double *v114;
  uint64_t v115;
  double *v116;
  uint64_t v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  double *v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  double *v144;
  double *v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  double *v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  uint64_t v173;
  float v174;
  float v175;
  float v176;
  float v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  double *v184;
  double *v185;
  double *v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  uint64_t v195;
  double v196;
  double v197;
  char v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  const cv::Exception *v203;
  unint64_t v204;
  void **v205;
  BOOL v206;
  unsigned int v207;
  BOOL v210;
  void (**v211)(uint64_t *__return_ptr);
  uint64_t v212;
  unsigned char *v213;
  unsigned int v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  cv *v222;
  cv *v223;
  uint64_t v224;
  unint64_t *v225;
  uint64_t v226;
  unsigned char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int *v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  void (**v248)(uint64_t *__return_ptr);
  char *v249;
  int v250;
  uint64_t v251;
  unsigned char *v252;
  cv *v253;
  cv *v254;
  uint64_t v255;
  unint64_t *v256;
  int v257;
  int v258;
  int v259;
  int v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  int v264;
  int v265;
  int v266;
  uint64_t v267;
  int v268;
  int v269;
  unint64_t v270;
  uint64_t v271;
  char *v272;
  double *v273;
  int v274;
  int v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  void *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  void *v288;
  char *v289;
  int v290;
  int v291;
  uint64_t v292;
  signed int v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  int v301;
  int v302;
  int v303;
  uint64_t (*v304)();
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  cv::Mat *v312;
  int v313;
  uint64_t v314;
  char *v315;
  char *v316;
  uint64_t (*v317)(int, int, int, int, int, int, int, int, int);
  void (*v318)(double, double);
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  signed int v324;
  uint64_t v325;
  char *v326;
  int v327;
  uint64_t v328;
  unint64_t v329;
  void (**v330)(uint64_t *__return_ptr);
  int v331;
  int v332;
  char v333;
  int v334;
  _DWORD v335[2];
  _DWORD v336[2];
  _DWORD v337[2];
  _DWORD v338[6];
  void *v339[2];
  void *v340[2];
  void *v341[2];
  void *v342;
  unint64_t v343;
  void (**v344)(uint64_t *__return_ptr);
  long long v345;
  long long v346;
  uint64_t v347;
  unint64_t *v348;
  cv *v349;
  uint64_t v350;
  uint64_t v351;
  unsigned char __p[64];
  unsigned char *v353;
  cv *v354;
  void v355[2];
  void *v356[2];
  uint64_t v357;
  atomic_uint *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  cv *v363;
  unint64_t v364;
  _OWORD v365[4];
  char *v366;
  cv *v367;
  void v368[2];
  uint64_t v369;
  unsigned int v370;
  unsigned int v371;
  double *v372;
  atomic_uint *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  cv *v378;
  unint64_t v379;
  void v380[2];
  double *v381;
  atomic_uint *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  int *v386;
  cv *v387;
  unint64_t v388;
  void (**v389)(uint64_t *__return_ptr);
  unint64_t v390;
  void v391[517];

  int v7 = (void (***)(void *__return_ptr))MEMORY[0x270FA5388](this, a2);
  BOOL v9 = v8;
  signed int v11 = v10;
  int v13 = v12;
  uint64_t v15 = v14;
  int v17 = v16;
  long long v19 = v18;
  v391[515] = *MEMORY[0x263EF8340];
  (**v7)(v380);
  (**v19)(&v369, v19, 0xFFFFFFFFLL);
  if (v13 == 0.0)
  {
    v366 = (char *)v365 + 8;
    v367 = (cv *)v368;
    v368[1] = 0;
    v368[0] = 0;
    LODWORD(v365[0]) = 1124007936;
    memset((char *)v365 + 4, 0, 48);
    v365[3] = 0u;
  }
  else
  {
    (**v15)(v365, v15, 0xFFFFFFFFLL);
  }
  uint64_t v20 = *v386;
  int v21 = v386[1];
  float32x2_t v22 = v380[0];
  int64x2_t v23 = v380[0] & 0xFFF;
  if (v23 != (v369 & 0xFFF) || (v380[0] & 0xFF7) - 5 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v342, "type == B.type() && (type == CV_32FC1 || type == CV_64FC1 || type == CV_32FC2 || type == CV_64FC2)");
    std::string::basic_string[abi:ne180100]<0>(v356, "gemm");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matmul.cpp");
    cv::Exception::Exception(&v389, 4294967081, &v342, v356, __p, 711);
    cv::error((cv *)&v389, v24);
  }
  switch(v9 & 3)
  {
    case 1:
      double v25 = v371;
      if (v20 != v370)
      {
        std::string::basic_string[abi:ne180100]<0>(&v342, "a_size.height == len");
        std::string::basic_string[abi:ne180100]<0>(v356, "gemm");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matmul.cpp");
        cv::Exception::Exception(&v389, 4294967081, &v342, v356, __p, 723);
        cv::error((cv *)&v389, v30);
      }
      goto LABEL_15;
    case 2:
      double v25 = v370;
      if (v21 != v371)
      {
        std::string::basic_string[abi:ne180100]<0>(&v342, "a_size.width == len");
        std::string::basic_string[abi:ne180100]<0>(v356, "gemm");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matmul.cpp");
        cv::Exception::Exception(&v389, 4294967081, &v342, v356, __p, 728);
        cv::error((cv *)&v389, v28);
      }
      goto LABEL_11;
    case 3:
      double v25 = v370;
      if (v20 != v371)
      {
        std::string::basic_string[abi:ne180100]<0>(&v342, "a_size.height == len");
        std::string::basic_string[abi:ne180100]<0>(v356, "gemm");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matmul.cpp");
        cv::Exception::Exception(&v389, 4294967081, &v342, v356, __p, 733);
        cv::error((cv *)&v389, v27);
      }
LABEL_15:
      v334 = *v386;
      uint64_t v29 = v386[1];
      goto LABEL_18;
    default:
      double v25 = v371;
      if (v21 != v370)
      {
        std::string::basic_string[abi:ne180100]<0>(&v342, "a_size.width == len");
        std::string::basic_string[abi:ne180100]<0>(v356, "gemm");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matmul.cpp");
        cv::Exception::Exception(&v389, 4294967081, &v342, v356, __p, 718);
        cv::error((cv *)&v389, v26);
      }
LABEL_11:
      v334 = v386[1];
      uint64_t v29 = *v386;
LABEL_18:
      if (!*(void *)&v365[1]) {
        goto LABEL_25;
      }
      if ((v365[0] & 0xFFF) != v23) {
        goto LABEL_24;
      }
      if ((v9 & 4) != 0)
      {
        if (*((void *)&v365[0] + 1) == __PAIR64__(v29, v25)) {
          goto LABEL_25;
        }
LABEL_24:
        std::string::basic_string[abi:ne180100]<0>(&v342, "C.type() == type && (((flags&GEMM_3_T) == 0 && C.rows == d_size.height && C.cols == d_size.width) || ((flags&GEMM_3_T) != 0 && C.rows == d_size.width && C.cols == d_size.height))");
        std::string::basic_string[abi:ne180100]<0>(v356, "gemm");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matmul.cpp");
        cv::Exception::Exception(&v389, 4294967081, &v342, v356, __p, 741);
        cv::error((cv *)&v389, v31);
      }
      if (*((void *)&v365[0] + 1) != __PAIR64__(v25, v29)) {
        goto LABEL_24;
      }
LABEL_25:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v11 + 136))(v11, v29, v25, v23, 0xFFFFFFFFLL, 0, 0);
      (**(void (***)(void **__return_ptr, uint64_t, uint64_t))v11)(v356, v11, 0xFFFFFFFFLL);
      if ((v9 & 4) != 0)
      {
        if (*(void *)&v365[1] != v357) {
          goto LABEL_124;
        }
        cv::_InputArray::_InputArray((uint64_t)&v389, (const cv::Mat *)v365);
        cv::_OutputArray::_OutputArray((uint64_t)&v342, (cv::Mat *)v365);
        cv::transpose(&v389, (const cv::_InputArray *)&v342, v33);
        v9 &= ~4u;
      }
      if ((v334 - 2) > 2 || v9) {
        goto LABEL_124;
      }
      if (v334 != v25 && v334 != v29) {
        goto LABEL_123;
      }
      if (v23 == 6)
      {
        int v53 = (double *)v357;
        uint64_t v54 = v364 >> 3;
        int v55 = v381;
        v56 = v388 >> 3;
        long long v57 = v372;
        long long v58 = v379 >> 3;
        uint64_t v59 = *(double **)&v365[1];
        v60 = v368[0] >> 3;
        if (!*(void *)&v365[1])
        {
          v60 = 0;
          uint64_t v59 = (double *)&cv::gemm(cv::_InputArray const&,cv::_InputArray const&,double,cv::_InputArray const&,double,cv::_OutputArray const&,int)::zero;
        }
        if (v334 != 4)
        {
          if (v334 == 3)
          {
            if (v25 != 3 || v372 == (double *)v357)
            {
              if (v381 == (double *)v357) {
                goto LABEL_123;
              }
              if (v59 == (double *)&cv::gemm(cv::_InputArray const&,cv::_InputArray const&,double,cv::_InputArray const&,double,cv::_OutputArray const&,int)::zero) {
                v60 = 1;
              }
              if ((int)v25 >= 1)
              {
                v140 = 0;
                uint64_t v32 = v56 + 1;
                v141 = v357 + 8 * v54;
                v142 = v357 + 16 * v54;
                v143 = 8
                     * (v59 != (double *)&cv::gemm(cv::_InputArray const&,cv::_InputArray const&,double,cv::_InputArray const&,double,cv::_OutputArray const&,int)::zero);
                v144 = &v372[v58];
                v145 = &v372[2 * v58];
                do
                {
                  v146 = v57[v140];
                  v147 = v144[v140];
                  v148 = v145[v140];
                  v149 = v55[1] * v147 + *v55 * v146 + v55[2] * v148;
                  v150 = v147 * v55[v32] + v55[v56] * v146 + v55[v56 + 2] * v148;
                  v151 = v147 * v55[(2 * (v56 & 0x1FFFFFFFFFFFFFFFLL)) | 1]
                       + v55[2 * v56] * v146
                       + v55[2 * v56 + 2] * v148;
                  v53[v140] = *v59 * v13 + v149 * v17;
                  *(double *)(v141 + 8 * v140) = v59[v60] * v13 + v150 * v17;
                  *(double *)(v142 + 8 * v140++) = v59[2 * v60] * v13 + v151 * v17;
                  uint64_t v59 = (double *)((char *)v59 + v143);
                }
                while (v25 != v140);
              }
            }
            else if ((int)v29 >= 1)
            {
              uint64_t v32 = v58 + 2;
              v84 = 8 * v56;
              v85 = v381 + 1;
              v86 = v59 + 1;
              v87 = 8 * v60;
              v88 = (double *)(v357 + 16);
              v89 = 8 * v54;
              do
              {
                v90 = *(v85 - 1);
                v91 = v85[1];
                v92 = *v85 * v57[v58] + v90 * *v57 + v91 * v57[2 * v58];
                v93 = *v85 * v57[v58 + 1] + v90 * v57[1] + v91 * v57[(2 * (v58 & 0x1FFFFFFFFFFFFFFFLL)) | 1];
                v94 = *v85 * v57[v32] + v90 * v57[2] + v91 * v57[2 * v58 + 2];
                *(v88 - 2) = *(v86 - 1) * v13 + v92 * v17;
                *(v88 - 1) = *v86 * v13 + v93 * v17;
                *v88 = v86[1] * v13 + v94 * v17;
                v85 = (double *)((char *)v85 + v84);
                v86 = (double *)((char *)v86 + v87);
                v88 = (double *)((char *)v88 + v89);
                LODWORD(v29) = v29 - 1;
              }
              while (v29);
            }
          }
          else
          {
            if (v334 != 2) {
              goto LABEL_123;
            }
            if (v25 != 2 || v372 == (double *)v357)
            {
              if (v381 == (double *)v357) {
                goto LABEL_123;
              }
              if (v59 == (double *)&cv::gemm(cv::_InputArray const&,cv::_InputArray const&,double,cv::_InputArray const&,double,cv::_OutputArray const&,int)::zero) {
                v60 = 1;
              }
              if ((int)v25 >= 1)
              {
                v195 = 8
                     * (v59 != (double *)&cv::gemm(cv::_InputArray const&,cv::_InputArray const&,double,cv::_InputArray const&,double,cv::_OutputArray const&,int)::zero);
                do
                {
                  v196 = v57[v58];
                  v197 = v196 * v55[v56 + 1] + v55[v56] * *v57;
                  *int v53 = *v59 * v13 + (v55[1] * v196 + *v55 * *v57) * v17;
                  v53[v54] = v59[v60] * v13 + v197 * v17;
                  ++v53;
                  ++v57;
                  uint64_t v59 = (double *)((char *)v59 + v195);
                  LODWORD(v25) = v25 - 1;
                }
                while (v25);
              }
            }
            else if ((int)v29 >= 1)
            {
              v61 = 8 * v54;
              v62 = (double *)(v357 + 8);
              v63 = v59 + 1;
              uint64_t v64 = 8 * v60;
              v65 = v381 + 1;
              v66 = 8 * v56;
              do
              {
                v67 = *(v65 - 1);
                v68 = *v65 * v57[v58] + v67 * *v57;
                v69 = *v65 * v57[v58 + 1] + v67 * v57[1];
                *(v62 - 1) = *(v63 - 1) * v13 + v68 * v17;
                *v62 = *v63 * v13 + v69 * v17;
                v62 = (double *)((char *)v62 + v61);
                v63 = (double *)((char *)v63 + v64);
                v65 = (double *)((char *)v65 + v66);
                LODWORD(v29) = v29 - 1;
              }
              while (v29);
            }
          }
          goto LABEL_219;
        }
        if (v25 == 4 && v372 != (double *)v357)
        {
          if ((int)v29 >= 1)
          {
            uint64_t v32 = (2 * (v379 >> 3)) | 1;
            v112 = 8 * v56;
            v113 = v381 + 2;
            v114 = v59 + 2;
            v115 = 8 * v60;
            v116 = (double *)(v357 + 16);
            v117 = 8 * v54;
            do
            {
              v118 = *(v113 - 2);
              v119 = *(v113 - 1);
              v120 = v113[1];
              v121 = v119 * v57[v58] + v118 * *v57 + *v113 * v57[2 * v58] + v120 * v57[3 * v58];
              v122 = v119 * v57[v58 + 1] + v118 * v57[1] + *v113 * v57[v32] + v120 * v57[3 * v58 + 1];
              v123 = v119 * v57[v58 + 2] + v118 * v57[2] + *v113 * v57[2 * v58 + 2] + v120 * v57[3 * v58 + 2];
              v124 = v119 * v57[v58 + 3] + v118 * v57[3] + *v113 * v57[2 * v58 + 3] + v120 * v57[3 * v58 + 3];
              *(v116 - 2) = *(v114 - 2) * v13 + v121 * v17;
              *(v116 - 1) = *(v114 - 1) * v13 + v122 * v17;
              *v116 = *v114 * v13 + v123 * v17;
              v116[1] = v114[1] * v13 + v124 * v17;
              v113 = (double *)((char *)v113 + v112);
              v114 = (double *)((char *)v114 + v115);
              v116 = (double *)((char *)v116 + v117);
              LODWORD(v29) = v29 - 1;
            }
            while (v29);
          }
          goto LABEL_219;
        }
        LOBYTE(v9) = 0;
        if ((int)v25 <= 16 && v381 != (double *)v357)
        {
          if (v59 == (double *)&cv::gemm(cv::_InputArray const&,cv::_InputArray const&,double,cv::_InputArray const&,double,cv::_OutputArray const&,int)::zero) {
            v60 = 1;
          }
          if ((int)v25 >= 1)
          {
            v178 = 0;
            uint64_t v32 = v56 + 1;
            v179 = 8
                 * (v59 != (double *)&cv::gemm(cv::_InputArray const&,cv::_InputArray const&,double,cv::_InputArray const&,double,cv::_OutputArray const&,int)::zero);
            v180 = v25;
            v181 = v357 + 24 * v54;
            v182 = v357 + 8 * v54;
            v183 = v357 + 16 * v54;
            v184 = &v372[v58];
            v185 = &v372[3 * v58];
            v186 = &v372[2 * v58];
            do
            {
              v187 = v57[v178];
              v188 = v184[v178];
              v189 = v186[v178];
              v190 = v185[v178];
              v191 = v55[1] * v188 + *v55 * v187 + v55[2] * v189 + v55[3] * v190;
              v192 = v188 * v55[v32] + v55[v56] * v187 + v55[v56 + 2] * v189 + v55[v56 + 3] * v190;
              v193 = v188 * v55[(2 * (v56 & 0x1FFFFFFFFFFFFFFFLL)) | 1]
                   + v55[2 * v56] * v187
                   + v55[2 * v56 + 2] * v189
                   + v55[2 * v56 + 3] * v190;
              v194 = v188 * v55[3 * v56 + 1] + v55[3 * v56] * v187 + v55[3 * v56 + 2] * v189 + v55[3 * v56 + 3] * v190;
              v53[v178] = *v59 * v13 + v191 * v17;
              *(double *)(v182 + 8 * v178) = v59[v60] * v13 + v192 * v17;
              *(double *)(v183 + 8 * v178) = v59[2 * v60] * v13 + v193 * v17;
              *(double *)(v181 + 8 * v178++) = v59[3 * v60] * v13 + v194 * v17;
              uint64_t v59 = (double *)((char *)v59 + v179);
            }
            while (v180 != v178);
          }
          goto LABEL_219;
        }
LABEL_124:
        v198 = v22;
        v199 = v20;
        v200 = v379;
        v353 = &__p[8];
        v354 = (cv *)v355;
        v355[1] = 0;
        v355[0] = 0;
        *(_DWORD *)__p = 1124007936;
        memset(&__p[4], 0, 48);
        v201 = v368[0];
        v300 = *(void *)&v365[1];
        if (!*(void *)&v365[1]) {
          v201 = 0;
        }
        v319 = v201;
        v389 = (void (**)(uint64_t *__return_ptr))v391;
        v390 = 4104;
        v202 = v23 - 5;
        *(_OWORD *)&__p[48] = 0uLL;
        if ((v23 - 5) >= 0xA || ((0x303u >> v202) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(v341, "type == CV_64FC2");
          std::string::basic_string[abi:ne180100]<0>(v340, "gemm");
          std::string::basic_string[abi:ne180100]<0>(v339, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matmul.cpp");
          cv::Exception::Exception(&v342, 4294967081, v341, v340, v339, 1041);
          cv::error((cv *)&v342, v203);
        }
        v317 = off_26D989CD8[v202];
        v318 = (void (*)(double, double))off_26D989C88[v202];
        v304 = off_26D989D28[v202];
        if ((double *)v357 == v381 || (double *)v357 == v372)
        {
          v204 = (int)(((v23 >> 3) + 1) << ((0xFA50u >> (2 * (v23 & 7))) & 3))
               * (uint64_t)(int)v29
               * (int)v25;
          v205 = (void **)__p;
        }
        else
        {
          v204 = 0;
          v205 = v356;
        }
        v312 = (cv::Mat *)v205;
        v206 = v25 == 1 || v334 == 1;
        if (v206 && (v9 & 2) == 0 && (v369 & 0x4000) != 0)
        {
          if (v25 == 1) {
            v207 = 0;
          }
          else {
            v207 = ((v23 >> 3) + 1) << ((0xFA50u >> (2 * (v23 & 7))) & 3);
          }
          v200 = v207;
          LOBYTE(v9) = v9 | 2;
        }
        v210 = ((int)v29 < 65 || (int)v25 < 65) && v334 < 10001;
        if (v334 < 11 || v210 || v334 <= 0x80 && (int)v29 <= 128 && (int)v25 <= 128)
        {
          if (!v204)
          {
LABEL_205:
            v338[4] = v21;
            v338[5] = v199;
            v338[2] = v25;
            v338[3] = v29;
            v318(v17, v13);
            goto LABEL_206;
          }
          v211 = v389;
          if (v390 < v204)
          {
            if (v389 != v391)
            {
              if (v389) {
                MEMORY[0x22A641760](v389, 0x1000C8077774924, v372);
              }
              v389 = (void (**)(uint64_t *__return_ptr))v391;
            }
            v390 = v204;
            v211 = (void (**)(uint64_t *__return_ptr))v391;
            if (v204 >= 0x1009) {
              operator new[]();
            }
          }
          v343 = __PAIR64__(v25, v29);
          v344 = v211;
          *(void *)&v345 = 0;
          v348 = &v343;
          v349 = (cv *)&v350;
          HIDWORD(v342) = 2;
          LODWORD(v342) = v23 | 0x42FF4000;
          v350 = (int)(((v23 >> 3) + 1) << ((0xFA50u >> (2 * (v23 & 7))) & 3)) * (uint64_t)(int)v25;
          v351 = ((v23 >> 3) + 1) << ((0xFA50u >> (2 * (v23 & 7))) & 3);
          v347 = 0;
          *((void *)&v346 + 1) = (char *)v211 + v350 * (int)v29;
          *((void *)&v345 + 1) = v211;
          *(void *)&v346 = *((void *)&v346 + 1);
          if (*(void *)&__p[24] && atomic_fetch_add(*(atomic_uint *volatile *)&__p[24], 0xFFFFFFFF) == 1) {
            cv::Mat::deallocate((cv::Mat *)__p, (void *)v32);
          }
          *(void *)&__p[16] = 0;
          memset(&__p[32], 0, 24);
          if (*(uint64_t *)__p <= 0)
          {
            *(void *)&__p[24] = 0;
            *(_DWORD *)__p = v342;
          }
          else
          {
            v212 = 0;
            v213 = v353;
            do
              *(_DWORD *)&v213[4 * v212++] = 0;
            while (v212 < *(int *)&__p[4]);
            *(void *)&__p[24] = 0;
            *(_DWORD *)__p = v342;
            if (*(int *)&__p[4] > 2) {
              goto LABEL_196;
            }
          }
          if (SHIDWORD(v342) <= 2)
          {
            *(_DWORD *)&__p[4] = HIDWORD(v342);
            *(void *)&__p[8] = v343;
            v222 = v349;
            v223 = v354;
            *(void *)v354 = *(void *)v349;
            *((void *)v223 + 1) = *((void *)v222 + 1);
            goto LABEL_197;
          }
LABEL_196:
          cv::Mat::copySize((cv::Mat *)__p, (const cv::Mat *)&v342);
LABEL_197:
          *(_OWORD *)&__p[24] = v345;
          *(_OWORD *)&__p[40] = v346;
          *(void *)&__p[16] = v344;
          *(void *)&__p[56] = v347;
          if ((void)v345 && atomic_fetch_add((atomic_uint *volatile)v345, 0xFFFFFFFF) == 1) {
            cv::Mat::deallocate((cv::Mat *)&v342, (void *)v32);
          }
          v344 = 0;
          v346 = 0uLL;
          *((void *)&v345 + 1) = 0;
          if (SHIDWORD(v342) >= 1)
          {
            v224 = 0;
            v225 = v348;
            do
              *((_DWORD *)v225 + v224++) = 0;
            while (v224 < SHIDWORD(v342));
          }
          *(void *)&v345 = 0;
          if (v349 != (cv *)&v350) {
            cv::fastFree((void **)v349, (void *)v32);
          }
          goto LABEL_205;
        }
        v214 = (v23 >> 3) + 1;
        v215 = v214 << ((0xFA50u >> (2 * (v198 & 7))) & 3);
        if (v9) {
          v216 = v214 << ((0xFA50u >> (2 * (v198 & 7))) & 3);
        }
        else {
          v216 = v388;
        }
        v299 = v216;
        if (v9) {
          v217 = v388;
        }
        else {
          v217 = v214 << ((0xFA50u >> (2 * (v198 & 7))) & 3);
        }
        if ((v9 & 2) != 0) {
          v218 = v214 << ((0xFA50u >> (2 * (v198 & 7))) & 3);
        }
        else {
          v218 = v200;
        }
        v328 = v218;
        v329 = v217;
        if ((v9 & 2) != 0) {
          v219 = v200;
        }
        else {
          v219 = v214 << ((0xFA50u >> (2 * (v198 & 7))) & 3);
        }
        v307 = v219;
        v333 = v9;
        if (*(void *)&v365[1])
        {
          v220 = v368[0];
          if ((v9 & 4) != 0) {
            v221 = v214 << ((0xFA50u >> (2 * (v198 & 7))) & 3);
          }
          else {
            v221 = v368[0];
          }
          v298 = v221;
          if ((v9 & 4) == 0) {
            v220 = v214 << ((0xFA50u >> (2 * (v198 & 7))) & 3);
          }
          v306 = v220;
          LOBYTE(v332) = v9;
        }
        else
        {
          v298 = 0;
          v306 = 0;
          LOBYTE(v332) = v9 & 0xFB;
        }
        if ((int)v29 >= 128) {
          v236 = 128;
        }
        else {
          v236 = v29;
        }
        if ((int)v25 >= 128) {
          v237 = 128;
        }
        else {
          v237 = v25;
        }
        v238 = v237;
        v239 = 0x4000 / v237;
        if (v239 >= 0x4000 / v236) {
          v239 = 0x4000 / v236;
        }
        v327 = v239;
        if (v334 >= v239) {
          v240 = v239;
        }
        else {
          v240 = v334;
        }
        v302 = v236;
        if (v240 * v236 > 0x4000) {
          v302 = (__int16)(0x4000 / (__int16)v240);
        }
        v331 = v25;
        v308 = (v215 << ((v198 & 7) == 5));
        v241 = v238;
        if (v240 * v238 > 0x4000) {
          v241 = (__int16)(0x4000 / (__int16)v240);
        }
        v305 = v241;
        v301 = v29;
        v242 = v240 + ((__int16)(v240 + (((__int16)v240 >> 28) & 7)) >> 3);
        v322 = v242 + 1;
        v324 = ((v241 + v241 / 8) & 0xFFFFFFFE) + 2;
        v243 = v324 * (uint64_t)(v242 + 1);
        v244 = v243 * v215;
        v245 = v243 * v308;
        if (v333)
        {
          v246 = (int)(((v242 & 0xFFFFFFFE) + 2) * v215 + ((v242 & 0xFFFFFFFE) + 2) * v215 * (v302 + v302 / 8));
          LOBYTE(v332) = v332 & 0xFE;
        }
        else
        {
          v246 = 0;
        }
        v247 = v244 + v204 + v245 + v246;
        v248 = v389;
        if (v390 < v247)
        {
          if (v389 != v391)
          {
            if (v389) {
              MEMORY[0x22A641760](v389, 0x1000C8077774924, v372);
            }
            v389 = (void (**)(uint64_t *__return_ptr))v391;
          }
          v390 = v244 + v204 + v245 + v246;
          v248 = (void (**)(uint64_t *__return_ptr))v391;
          if (v247 >= 0x1009) {
            operator new[]();
          }
        }
        v330 = v248;
        v326 = (char *)v248 + v245;
        v316 = (char *)v248 + v245 + v244;
        if (v333) {
          v249 = (char *)v248 + v245 + v244;
        }
        else {
          v249 = 0;
        }
        v315 = v249;
        v250 = v331;
        if (!v204) {
          goto LABEL_302;
        }
        v343 = __PAIR64__(v331, v301);
        v344 = (void (**)(uint64_t *__return_ptr))&v316[v246];
        *(void *)&v345 = 0;
        v348 = &v343;
        v349 = (cv *)&v350;
        HIDWORD(v342) = 2;
        LODWORD(v342) = v23 | 0x42FF4000;
        v350 = (int)(v214 << ((0xFA50u >> (2 * (v23 & 7))) & 3)) * (uint64_t)v331;
        v351 = v214 << ((0xFA50u >> (2 * (v23 & 7))) & 3);
        v347 = 0;
        *((void *)&v346 + 1) = &v316[v246 + v350 * v301];
        *((void *)&v345 + 1) = &v316[v246];
        *(void *)&v346 = *((void *)&v346 + 1);
        if (*(void *)&__p[24] && atomic_fetch_add(*(atomic_uint *volatile *)&__p[24], 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)__p, (void *)v32);
        }
        *(void *)&__p[16] = 0;
        memset(&__p[32], 0, 24);
        if (*(uint64_t *)__p <= 0)
        {
          *(void *)&__p[24] = 0;
          *(_DWORD *)__p = v342;
        }
        else
        {
          v251 = 0;
          v252 = v353;
          do
            *(_DWORD *)&v252[4 * v251++] = 0;
          while (v251 < *(int *)&__p[4]);
          *(void *)&__p[24] = 0;
          *(_DWORD *)__p = v342;
          if (*(int *)&__p[4] > 2) {
            goto LABEL_293;
          }
        }
        if (SHIDWORD(v342) <= 2)
        {
          *(_DWORD *)&__p[4] = HIDWORD(v342);
          *(void *)&__p[8] = v343;
          v253 = v349;
          v254 = v354;
          *(void *)v354 = *(void *)v349;
          *((void *)v254 + 1) = *((void *)v253 + 1);
          goto LABEL_294;
        }
LABEL_293:
        cv::Mat::copySize((cv::Mat *)__p, (const cv::Mat *)&v342);
LABEL_294:
        *(_OWORD *)&__p[24] = v345;
        *(_OWORD *)&__p[40] = v346;
        *(void *)&__p[16] = v344;
        *(void *)&__p[56] = v347;
        if ((void)v345 && atomic_fetch_add((atomic_uint *volatile)v345, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)&v342, (void *)v32);
        }
        v344 = 0;
        v346 = 0uLL;
        *((void *)&v345 + 1) = 0;
        if (SHIDWORD(v342) >= 1)
        {
          v255 = 0;
          v256 = v348;
          do
            *((_DWORD *)v256 + v255++) = 0;
          while (v255 < SHIDWORD(v342));
        }
        *(void *)&v345 = 0;
        if (v349 != (cv *)&v350) {
          cv::fastFree((void **)v349, (void *)v32);
        }
LABEL_302:
        v257 = v301;
        if (v301 < 1) {
          goto LABEL_206;
        }
        v258 = 0;
        v314 = (uint64_t)v330 + ((int)v308 + (int)v215) * (uint64_t)v322 * v324 + 8;
        while (1)
        {
          if (v258 + v302 >= v257 || (v259 = v302, v302 + 8 * (v258 + v302) > 8 * v301)) {
            v259 = v257 - v258;
          }
          v303 = v258;
          if (v250 < 1) {
            goto LABEL_368;
          }
          v260 = 0;
          v309 = v300 + v298 * v258;
          v311 = v258;
          v261 = v299 * v258;
          if (v259 <= 1) {
            v262 = 1;
          }
          else {
            v262 = v259;
          }
          do
          {
            v263 = v260;
            v264 = v305;
            if (v260 + v305 >= v250 || v305 + 8 * (v260 + v305) > 8 * v331) {
              v264 = v250 - v260;
            }
            v265 = 0;
            v310 = v260 * (int)v215;
            v320 = *((void *)v312 + 2) + *((void *)v312 + 10) * v311 + v310;
            v321 = *((void *)v312 + 10);
            v325 = v309 + v306 * v260;
            v266 = v332 & 0xF;
            v323 = v264 * (int)v308;
            v313 = v263;
            v267 = v307 * v263;
            v332 = v266 | 0x10;
            v268 = v334;
            do
            {
              while (1)
              {
                if (v265 + v240 >= v268 || (v269 = v240, v240 + 8 * (v265 + v240) > 8 * v334)) {
                  v269 = v334 - v265;
                }
                v270 = v388;
                v271 = v329 * v265;
                v272 = (char *)v381 + v261 + v271;
                v273 = v372;
                if ((v333 & 1) == 0)
                {
                  v274 = v259;
                  v275 = v269;
LABEL_341:
                  v276 = v388;
                  goto LABEL_342;
                }
                if (!v330)
                {
                  v274 = v269;
                  v275 = v259;
                  goto LABEL_341;
                }
                v276 = (int)v215 * (uint64_t)v269;
                if (v259 < 1)
                {
                  v274 = v259;
                  v275 = v269;
                  v272 = v316;
                }
                else
                {
                  if (v215 > 0x10 || ((1 << v215) & 0x10110) == 0) {
                    __assert_rtn("GEMM_TransposeBlock", "matmul.cpp", 124, "0");
                  }
                  v277 = 0;
                  v278 = (uint64_t)v381 + v261 + v271 + 8;
                  v279 = (void *)v314;
                  v280 = v316;
                  do
                  {
                    if (v215 == 4)
                    {
                      if (v269 >= 1)
                      {
                        v284 = 0;
                        v285 = 0;
                        do
                        {
                          *(_DWORD *)&v280[4 * v285++] = *(_DWORD *)&v272[v284];
                          v284 += v270;
                        }
                        while (v269 != v285);
                      }
                    }
                    else if (v215 == 8)
                    {
                      if (v269 >= 1)
                      {
                        v281 = 0;
                        v282 = 0;
                        v283 = 0;
                        do
                        {
                          *(void *)&v280[v282] = *(void *)&v272[v281];
                          v283 += 2;
                          v282 += 8;
                          v281 += v270;
                        }
                        while (v283 < 2 * v269);
                      }
                    }
                    else if (v269 >= 1)
                    {
                      v286 = 0;
                      v287 = v279;
                      v288 = (void *)v278;
                      do
                      {
                        *(v287 - 1) = *(v288 - 1);
                        *v287 = *v288;
                        v287 += 2;
                        v286 += 4;
                        v288 = (void *)((char *)v288 + v270);
                      }
                      while (v286 < 4 * v269);
                    }
                    ++v277;
                    v280 += v276;
                    v272 += v215;
                    v278 += v215;
                    v279 = (void *)((char *)v279 + v276);
                  }
                  while (v277 != v262);
                  v274 = v259;
                  v275 = v269;
                  v272 = v315;
                }
LABEL_342:
                v289 = (char *)v273 + v328 * v265 + v267;
                if (v264 >= v331)
                {
                  v292 = v200;
                }
                else
                {
                  if ((v333 & 2) != 0) {
                    v290 = v264;
                  }
                  else {
                    v290 = v269;
                  }
                  if ((v333 & 2) != 0) {
                    v291 = v269;
                  }
                  else {
                    v291 = v264;
                  }
                  v292 = (int)v215 * (uint64_t)v291;
                  if (v290)
                  {
                    v293 = v291 * (v215 >> 2);
                    v294 = v326;
                    do
                    {
                      if (v293 >= 4)
                      {
                        v296 = 0;
                        v295 = 0;
                        do
                        {
                          v297 = &v294[v296];
                          *(void *)v297 = *(void *)&v289[v296];
                          *((void *)v297 + 1) = *(void *)&v289[v296 + 8];
                          v295 += 4;
                          v296 += 16;
                        }
                        while (v295 <= v293 - 4);
                        v295 = v295;
                      }
                      else
                      {
                        v295 = 0;
                      }
                      if ((int)v295 < v293)
                      {
                        do
                        {
                          *(_DWORD *)&v294[4 * v295] = *(_DWORD *)&v289[4 * v295];
                          ++v295;
                        }
                        while (v295 < v293);
                      }
                      v289 += v200;
                      v294 += v292;
                      --v290;
                    }
                    while (v290);
                  }
                  v289 = v326;
                }
                if (v334 > v327) {
                  break;
                }
                v336[0] = v275;
                v336[1] = v274;
                v335[0] = v264;
                v335[1] = v259;
                ((void (*)(char *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, _DWORD *, _DWORD *, int))v318)(v272, v276, v289, v292, v325, v319, v320, v321, v17, v13, v336, v335, v266);
                v265 += v269;
                v266 = v332;
                v268 = v334;
                if (v265 >= v334) {
                  goto LABEL_367;
                }
              }
              v338[0] = v275;
              v338[1] = v274;
              v337[0] = v264;
              v337[1] = v259;
              v317((int)v272, v276, (int)v289, v292, (int)v330, v323, (int)v338, (int)v337, v266);
              v265 += v269;
              v266 = v332;
              v268 = v334;
            }
            while (v265 < v334);
            ((void (*)(uint64_t, uint64_t, void (**)(uint64_t *__return_ptr), uint64_t, uint64_t, double, double))v304)(v325, v319, v330, v323, *((void *)v312 + 2) + *((void *)v312 + 10) * v311 + v310, v17, v13);
LABEL_367:
            v260 = v264 + v313;
            v250 = v331;
          }
          while (v264 + v313 < v331);
LABEL_368:
          v258 = v259 + v303;
          v257 = v301;
          if (v259 + v303 >= v301)
          {
LABEL_206:
            if (v312 != (cv::Mat *)v356)
            {
              cv::_OutputArray::_OutputArray((uint64_t)&v342, (cv::Mat *)v356);
              cv::Mat::copyTo(v312, (const cv::_OutputArray *)&v342);
            }
            if (v389 != v391 && v389) {
              MEMORY[0x22A641760]();
            }
            if (*(void *)&__p[24] && atomic_fetch_add(*(atomic_uint *volatile *)&__p[24], 0xFFFFFFFF) == 1) {
              cv::Mat::deallocate((cv::Mat *)__p, (void *)v32);
            }
            *(void *)&__p[16] = 0;
            memset(&__p[32], 0, 24);
            if (*(int *)&__p[4] >= 1)
            {
              v226 = 0;
              v227 = v353;
              do
                *(_DWORD *)&v227[4 * v226++] = 0;
              while (v226 < *(int *)&__p[4]);
            }
            *(void *)&__p[24] = 0;
            if (v354 != (cv *)v355) {
              cv::fastFree((void **)v354, (void *)v32);
            }
            goto LABEL_219;
          }
        }
      }
      if (v23 != 5) {
        goto LABEL_123;
      }
      uint64_t v34 = (float *)v357;
      uint64_t v35 = v364 >> 2;
      uint64_t v36 = (float *)v381;
      uint64_t v37 = v388 >> 2;
      v38 = (float *)v372;
      uint64_t v39 = v379 >> 2;
      v40 = *(float **)&v365[1];
      int v41 = v368[0] >> 2;
      if (!*(void *)&v365[1])
      {
        int v41 = 0;
        v40 = (float *)&cv::gemm(cv::_InputArray const&,cv::_InputArray const&,double,cv::_InputArray const&,double,cv::_OutputArray const&,int)::zerof;
      }
      if (v334 != 4)
      {
        if (v334 != 3)
        {
          if (v334 == 2)
          {
            if (v25 == 2 && v372 != (double *)v357)
            {
              if ((int)v29 >= 1)
              {
                v42 = 4 * v35;
                int32x2_t v43 = (float *)(v357 + 4);
                v44 = (float *)v381 + 1;
                uint64_t v45 = 4 * v37;
                v46 = v40 + 1;
                uint64_t v47 = 4 * v41;
                do
                {
                  uint64_t v48 = *(v44 - 1);
                  uint64_t v49 = (float)(*v44 * v38[v39]) + (float)(v48 * *v38);
                  uint64_t v50 = (float)(*v44 * v38[v39 + 1]) + (float)(v48 * v38[1]);
                  v51 = *(v46 - 1) * v13 + v49 * v17;
                  *(v43 - 1) = v51;
                  v52 = *v46 * v13 + v50 * v17;
                  *int32x2_t v43 = v52;
                  int32x2_t v43 = (float *)((char *)v43 + v42);
                  v44 = (float *)((char *)v44 + v45);
                  v46 = (float *)((char *)v46 + v47);
                  LODWORD(v29) = v29 - 1;
                }
                while (v29);
              }
              goto LABEL_219;
            }
            if (v381 != (double *)v357)
            {
              if (v40 == (float *)&cv::gemm(cv::_InputArray const&,cv::_InputArray const&,double,cv::_InputArray const&,double,cv::_OutputArray const&,int)::zerof) {
                int v41 = 1;
              }
              if ((int)v25 >= 1)
              {
                v173 = 4
                     * (v40 != (float *)&cv::gemm(cv::_InputArray const&,cv::_InputArray const&,double,cv::_InputArray const&,double,cv::_OutputArray const&,int)::zerof);
                do
                {
                  v174 = v38[v39];
                  v175 = (float)(v174 * v36[v37 + 1]) + (float)(v36[v37] * *v38);
                  v176 = *v40 * v13 + (float)((float)(v36[1] * v174) + (float)(*v36 * *v38)) * v17;
                  *uint64_t v34 = v176;
                  v177 = v40[v41] * v13 + v175 * v17;
                  v34[v35] = v177;
                  ++v34;
                  ++v38;
                  v40 = (float *)((char *)v40 + v173);
                  LODWORD(v25) = v25 - 1;
                }
                while (v25);
              }
              goto LABEL_219;
            }
          }
          goto LABEL_123;
        }
        if (v25 == 3 && v372 != (double *)v357)
        {
          if ((int)v29 >= 1)
          {
            uint64_t v32 = v39 + 2;
            v70 = 4 * v41;
            v71 = v40 + 1;
            v72 = (float *)v381 + 1;
            v73 = 4 * v37;
            v74 = (float *)(v357 + 8);
            v75 = 4 * v35;
            do
            {
              v76 = *(v72 - 1);
              v77 = v72[1];
              v78 = (float)((float)(*v72 * v38[v39]) + (float)(v76 * *v38)) + (float)(v77 * v38[2 * v39]);
              v79 = (float)((float)(*v72 * v38[v39 + 1]) + (float)(v76 * v38[1]))
                  + (float)(v77 * v38[(2 * (v39 & 0x3FFFFFFFFFFFFFFFLL)) | 1]);
              v80 = (float)((float)(*v72 * v38[v32]) + (float)(v76 * v38[2])) + (float)(v77 * v38[2 * v39 + 2]);
              v81 = *(v71 - 1) * v13 + v78 * v17;
              *(v74 - 2) = v81;
              v82 = *v71 * v13 + v79 * v17;
              *(v74 - 1) = v82;
              v83 = v71[1] * v13 + v80 * v17;
              *v74 = v83;
              v71 = (float *)((char *)v71 + v70);
              v72 = (float *)((char *)v72 + v73);
              v74 = (float *)((char *)v74 + v75);
              LODWORD(v29) = v29 - 1;
            }
            while (v29);
          }
          goto LABEL_219;
        }
        if (v381 != (double *)v357)
        {
          if (v40 == (float *)&cv::gemm(cv::_InputArray const&,cv::_InputArray const&,double,cv::_InputArray const&,double,cv::_OutputArray const&,int)::zerof) {
            int v41 = 1;
          }
          if ((int)v25 >= 1)
          {
            v125 = 0;
            uint64_t v32 = v37 + 1;
            v126 = v357 + 4 * v35;
            v127 = v357 + 8 * v35;
            v128 = (char *)v372 + 4 * v39;
            v129 = 4
                 * (v40 != (float *)&cv::gemm(cv::_InputArray const&,cv::_InputArray const&,double,cv::_InputArray const&,double,cv::_OutputArray const&,int)::zerof);
            v130 = &v372[v39];
            do
            {
              v131 = v38[v125];
              v132 = *(float *)&v128[4 * v125];
              v133 = *((float *)v130 + v125);
              v134 = (float)((float)(v36[1] * v132) + (float)(*v36 * v131)) + (float)(v36[2] * v133);
              v135 = (float)((float)(v132 * v36[v32]) + (float)(v36[v37] * v131)) + (float)(v36[v37 + 2] * v133);
              v136 = (float)((float)(v132 * v36[(2 * (v37 & 0x3FFFFFFFFFFFFFFFLL)) | 1]) + (float)(v36[2 * v37] * v131))
                   + (float)(v36[2 * v37 + 2] * v133);
              v137 = *v40 * v13 + v134 * v17;
              v34[v125] = v137;
              v138 = v40[v41] * v13 + v135 * v17;
              *(float *)(v126 + 4 * v125) = v138;
              v139 = v40[2 * v41] * v13 + v136 * v17;
              *(float *)(v127 + 4 * v125++) = v139;
              v40 = (float *)((char *)v40 + v129);
            }
            while (v25 != v125);
          }
          goto LABEL_219;
        }
LABEL_123:
        LOBYTE(v9) = 0;
        goto LABEL_124;
      }
      if (v25 != 4 || v372 == (double *)v357)
      {
        if (v381 == (double *)v357) {
          goto LABEL_123;
        }
        if (v40 == (float *)&cv::gemm(cv::_InputArray const&,cv::_InputArray const&,double,cv::_InputArray const&,double,cv::_OutputArray const&,int)::zerof) {
          int v41 = 1;
        }
        if ((int)v25 >= 1)
        {
          v152 = 0;
          uint64_t v32 = v37 + 1;
          v153 = v25;
          v154 = v357 + 4 * v35;
          v155 = v357 + 12 * v35;
          v156 = v357 + 8 * v35;
          v157 = (char *)v372 + 4 * v39;
          v158 = 4
               * (v40 != (float *)&cv::gemm(cv::_InputArray const&,cv::_InputArray const&,double,cv::_InputArray const&,double,cv::_OutputArray const&,int)::zerof);
          v159 = (char *)v372 + 12 * v39;
          v160 = &v372[v39];
          do
          {
            v161 = v38[v152];
            v162 = *(float *)&v157[4 * v152];
            v163 = *((float *)v160 + v152);
            v164 = *(float *)&v159[4 * v152];
            v165 = (float)((float)((float)(v36[1] * v162) + (float)(*v36 * v161)) + (float)(v36[2] * v163))
                 + (float)(v36[3] * v164);
            v166 = (float)((float)((float)(v162 * v36[v32]) + (float)(v36[v37] * v161)) + (float)(v36[v37 + 2] * v163))
                 + (float)(v36[v37 + 3] * v164);
            v167 = (float)((float)((float)(v162 * v36[(2 * (v37 & 0x3FFFFFFFFFFFFFFFLL)) | 1])
                                 + (float)(v36[2 * v37] * v161))
                         + (float)(v36[2 * v37 + 2] * v163))
                 + (float)(v36[2 * v37 + 3] * v164);
            v168 = (float)((float)((float)(v162 * v36[3 * v37 + 1]) + (float)(v36[3 * v37] * v161))
                         + (float)(v36[3 * v37 + 2] * v163))
                 + (float)(v36[3 * v37 + 3] * v164);
            v169 = *v40 * v13 + v165 * v17;
            v34[v152] = v169;
            v170 = v40[v41] * v13 + v166 * v17;
            *(float *)(v154 + 4 * v152) = v170;
            v171 = v40[2 * v41] * v13 + v167 * v17;
            *(float *)(v156 + 4 * v152) = v171;
            v172 = v40[3 * v41] * v13 + v168 * v17;
            *(float *)(v155 + 4 * v152++) = v172;
            v40 = (float *)((char *)v40 + v158);
          }
          while (v153 != v152);
        }
      }
      else if ((int)v29 >= 1)
      {
        uint64_t v32 = (2 * (v379 >> 2)) | 1;
        v95 = 4 * v41;
        v96 = v40 + 2;
        v97 = (float *)(v381 + 1);
        v98 = 4 * v37;
        v99 = (float *)(v357 + 8);
        v100 = 4 * v35;
        do
        {
          v101 = *(v97 - 2);
          v102 = *(v97 - 1);
          v103 = v97[1];
          v104 = (float)((float)((float)(v102 * v38[v39]) + (float)(v101 * *v38)) + (float)(*v97 * v38[2 * v39]))
               + (float)(v103 * v38[3 * v39]);
          v105 = (float)((float)((float)(v102 * v38[v39 + 1]) + (float)(v101 * v38[1])) + (float)(*v97 * v38[v32]))
               + (float)(v103 * v38[3 * v39 + 1]);
          v106 = (float)((float)((float)(v102 * v38[v39 + 2]) + (float)(v101 * v38[2]))
                       + (float)(*v97 * v38[2 * v39 + 2]))
               + (float)(v103 * v38[3 * v39 + 2]);
          v107 = (float)((float)((float)(v102 * v38[v39 + 3]) + (float)(v101 * v38[3]))
                       + (float)(*v97 * v38[2 * v39 + 3]))
               + (float)(v103 * v38[3 * v39 + 3]);
          v108 = *(v96 - 2) * v13 + v104 * v17;
          *(v99 - 2) = v108;
          v109 = *(v96 - 1) * v13 + v105 * v17;
          *(v99 - 1) = v109;
          v110 = *v96 * v13 + v106 * v17;
          *v99 = v110;
          v111 = v96[1] * v13 + v107 * v17;
          v99[1] = v111;
          v96 = (float *)((char *)v96 + v95);
          v97 = (float *)((char *)v97 + v98);
          v99 = (float *)((char *)v99 + v100);
          LODWORD(v29) = v29 - 1;
        }
        while (v29);
      }
LABEL_219:
      if (v358 && atomic_fetch_add(v358, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v356, (void *)v32);
      }
      v357 = 0;
      v359 = 0;
      v361 = 0;
      v360 = 0;
      if (SHIDWORD(v356[0]) >= 1)
      {
        v228 = 0;
        v229 = v362;
        do
          *(_DWORD *)(v229 + 4 * v228++) = 0;
        while (v228 < SHIDWORD(v356[0]));
      }
      v358 = 0;
      if (v363 != (cv *)&v364) {
        cv::fastFree((void **)v363, (void *)v32);
      }
      if (*((void *)&v365[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v365[1] + 1), 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v365, (void *)v32);
      }
      *(void *)&v365[1] = 0;
      memset(&v365[2], 0, 24);
      if (SDWORD1(v365[0]) >= 1)
      {
        v230 = 0;
        v231 = v366;
        do
          *(_DWORD *)&v231[4 * v230++] = 0;
        while (v230 < SDWORD1(v365[0]));
      }
      *((void *)&v365[1] + 1) = 0;
      if (v367 != (cv *)v368) {
        cv::fastFree((void **)v367, (void *)v32);
      }
      if (v373 && atomic_fetch_add(v373, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)&v369, (void *)v32);
      }
      v372 = 0;
      v374 = 0;
      v376 = 0;
      v375 = 0;
      if (SHIDWORD(v369) >= 1)
      {
        v232 = 0;
        v233 = v377;
        do
          *(_DWORD *)(v233 + 4 * v232++) = 0;
        while (v232 < SHIDWORD(v369));
      }
      v373 = 0;
      if (v378 != (cv *)&v379) {
        cv::fastFree((void **)v378, (void *)v32);
      }
      if (v382 && atomic_fetch_add(v382, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v380, (void *)v32);
      }
      v381 = 0;
      v383 = 0;
      v385 = 0;
      v384 = 0;
      if (SHIDWORD(v380[0]) >= 1)
      {
        v234 = 0;
        v235 = v386;
        do
          v235[v234++] = 0;
        while (v234 < SHIDWORD(v380[0]));
      }
      v382 = 0;
      if (v387 != (cv *)&v388) {
        cv::fastFree((void **)v387, (void *)v32);
      }
      return;
  }
}

void sub_225EE14D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  unint64_t v16 = STACK[0x438];
  if (STACK[0x438] != a15 && v16) {
    MEMORY[0x22A641760](v16, 0x1000C8077774924);
  }
  if (STACK[0x270] && atomic_fetch_add((atomic_uint *volatile)STACK[0x270], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&STACK[0x258], a2);
  }
  STACK[0x268] = 0;
  STACK[0x278] = 0;
  STACK[0x288] = 0;
  STACK[0x280] = 0;
  if (SLODWORD(STACK[0x25C]) >= 1)
  {
    uint64_t v17 = 0;
    unint64_t v18 = STACK[0x298];
    do
      *(_DWORD *)(v18 + 4 * v17++) = 0;
    while (v17 < SLODWORD(STACK[0x25C]));
  }
  STACK[0x270] = 0;
  if (STACK[0x2A0] != a13) {
    cv::fastFree((void **)STACK[0x2A0], a2);
  }
  if (STACK[0x2D0] && atomic_fetch_add((atomic_uint *volatile)STACK[0x2D0], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&STACK[0x2B8], a2);
  }
  STACK[0x2C8] = 0;
  STACK[0x2D8] = 0;
  STACK[0x2E8] = 0;
  STACK[0x2E0] = 0;
  if (SLODWORD(STACK[0x2BC]) >= 1)
  {
    uint64_t v19 = 0;
    unint64_t v20 = STACK[0x2F8];
    do
      *(_DWORD *)(v20 + 4 * v19++) = 0;
    while (v19 < SLODWORD(STACK[0x2BC]));
  }
  STACK[0x2D0] = 0;
  if ((unint64_t *)STACK[0x300] != &STACK[0x308]) {
    cv::fastFree((void **)STACK[0x300], a2);
  }
  if (STACK[0x330] && atomic_fetch_add((atomic_uint *volatile)STACK[0x330], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&STACK[0x318], a2);
  }
  STACK[0x328] = 0;
  STACK[0x338] = 0;
  STACK[0x348] = 0;
  STACK[0x340] = 0;
  if (SLODWORD(STACK[0x31C]) >= 1)
  {
    uint64_t v21 = 0;
    unint64_t v22 = STACK[0x358];
    do
      *(_DWORD *)(v22 + 4 * v21++) = 0;
    while (v21 < SLODWORD(STACK[0x31C]));
  }
  STACK[0x330] = 0;
  if ((unint64_t *)STACK[0x360] != &STACK[0x368]) {
    cv::fastFree((void **)STACK[0x360], a2);
  }
  if (STACK[0x390] && atomic_fetch_add((atomic_uint *volatile)STACK[0x390], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&STACK[0x378], a2);
  }
  STACK[0x388] = 0;
  STACK[0x398] = 0;
  STACK[0x3A8] = 0;
  STACK[0x3A0] = 0;
  if (SLODWORD(STACK[0x37C]) >= 1)
  {
    uint64_t v23 = 0;
    unint64_t v24 = STACK[0x3B8];
    do
      *(_DWORD *)(v24 + 4 * v23++) = 0;
    while (v23 < SLODWORD(STACK[0x37C]));
  }
  STACK[0x390] = 0;
  if ((unint64_t *)STACK[0x3C0] != &STACK[0x3C8]) {
    cv::fastFree((void **)STACK[0x3C0], a2);
  }
  if (STACK[0x3F0] && atomic_fetch_add((atomic_uint *volatile)STACK[0x3F0], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&STACK[0x3D8], a2);
  }
  STACK[0x3E8] = 0;
  STACK[0x3F8] = 0;
  STACK[0x408] = 0;
  STACK[0x400] = 0;
  if (SLODWORD(STACK[0x3DC]) >= 1)
  {
    uint64_t v25 = 0;
    unint64_t v26 = STACK[0x418];
    do
      *(_DWORD *)(v26 + 4 * v25++) = 0;
    while (v25 < SLODWORD(STACK[0x3DC]));
  }
  STACK[0x3F0] = 0;
  if ((unint64_t *)STACK[0x420] != &STACK[0x428]) {
    cv::fastFree((void **)STACK[0x420], a2);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::GEMMSingleMul_32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, int *a10, char a11)
{
  uint64_t v11 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v20 = v19;
  uint64_t v21 = v13;
  double v23 = v22;
  double v24 = v18;
  uint64_t v25 = (_DWORD *)v11;
  uint64_t v26 = *a10;
  uint64_t v27 = a10[1];
  int v28 = *a10;
  uint64_t v29 = a10[1];
  int v30 = *a9;
  uint64_t v31 = a9[1];
  uint64_t v32 = v152;
  v150 = v152;
  uint64_t v151 = 1032;
  unint64_t v33 = v12 >> 2;
  unint64_t v34 = v14 >> 2;
  uint64_t v35 = v16 >> 2;
  unint64_t v145 = v17 >> 2;
  if ((a11 & 4) != 0) {
    uint64_t v36 = 1;
  }
  else {
    uint64_t v36 = v16 >> 2;
  }
  if ((a11 & 4) == 0) {
    uint64_t v35 = 1;
  }
  if (v15)
  {
    uint64_t v37 = v35;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
  }
  double v143 = v18;
  if ((a11 & 1) == 0)
  {
    uint64_t v38 = 1;
    uint64_t v39 = v12 >> 2;
    goto LABEL_16;
  }
  uint64_t v39 = 1;
  if (v12 < 8 || (int)v31 < 2)
  {
    int v30 = v31;
    uint64_t v38 = v12 >> 2;
LABEL_16:
    if (v30 == 1)
    {
      if (v12 < 8)
      {
        unint64_t v40 = v17 >> 2;
      }
      else
      {
        unint64_t v40 = v17 >> 2;
        if ((int)v31 >= 2)
        {
          if (v29 >= 0x409)
          {
            uint64_t v151 = v27;
            operator new[]();
          }
          if ((int)v29 >= 1)
          {
            uint64_t v41 = 0;
            do
            {
              *(_DWORD *)&v152[v41] = *v25;
              v41 += 4;
              v25 += v33;
            }
            while (4 * v29 != v41);
          }
          uint64_t v25 = v152;
        }
      }
      if (v14 >= 8)
      {
        if ((unint64_t)(int)v26 > 0x408 && v28 >= 0x409) {
          operator new[]();
        }
        if (v28 >= 1)
        {
          uint64_t v123 = 0;
          do
          {
            *(_DWORD *)&v148[v123] = v21->i32[0];
            v123 += 4;
            uint64_t v21 = (float32x2_t *)((char *)v21 + 4 * v34);
          }
          while (4 * v26 != v123);
        }
        uint64_t v21 = (float32x2_t *)v148;
        unint64_t v40 = v17 >> 2;
      }
      if ((int)v29 >= 1)
      {
        uint64_t v124 = 0;
        uint64_t v125 = 4 * v40;
        do
        {
          double v126 = *(float *)&v25[v124] * v24;
          if (v28 >= 2)
          {
            uint64_t v129 = 0;
            uint64_t v127 = 0;
            v128 = v15;
            do
            {
              double v130 = v126 * v21[v129].f32[0];
              double v131 = v126 * v21[v129].f32[1];
              if (v128)
              {
                float v132 = v130 + *v128 * v23;
                *(float *)(v20 + v129 * 8) = v132;
                double v131 = v131 + v128[v37] * v23;
              }
              else
              {
                float v133 = v130;
                *(float *)(v20 + v129 * 8) = v133;
              }
              float v134 = v131;
              *(float *)(v20 + v129 * 8 + 4) = v134;
              v127 += 2;
              v128 += 2 * v37;
              ++v129;
            }
            while (v127 <= (int)v26 - 2);
            uint64_t v127 = v127;
          }
          else
          {
            uint64_t v127 = 0;
            v128 = v15;
          }
          if ((int)v127 < (int)v26)
          {
            do
            {
              double v135 = v126 * v21->f32[v127];
              if (v128) {
                double v135 = v135 + *v128 * v23;
              }
              float v136 = v135;
              *(float *)(v20 + 4 * v127++) = v136;
              v128 += v37;
            }
            while (v26 != v127);
          }
          ++v124;
          v15 += v36;
          v20 += v125;
        }
        while (v124 != v29);
      }
      goto LABEL_161;
    }
    uint64_t v32 = 0;
    unint64_t v33 = v38;
    LODWORD(v31) = v30;
    if ((a11 & 2) == 0) {
      goto LABEL_26;
    }
    goto LABEL_105;
  }
  if (v31 >= 0x409)
  {
    uint64_t v151 = v31;
    operator new[]();
  }
  uint64_t v39 = 1;
  if ((a11 & 2) == 0)
  {
LABEL_26:
    if ((unint64_t)(4 * (int)v26) > 0x640)
    {
      int v144 = v29;
      if (v28 >= 0x209) {
        operator new[]();
      }
      if ((int)v29 >= 1)
      {
        int v77 = 0;
        uint64_t v78 = 4 * v31;
        uint64_t v79 = 4 * v33;
        uint64_t v80 = 4 * v34;
        if (v32) {
          BOOL v81 = (int)v31 < 1;
        }
        else {
          BOOL v81 = 1;
        }
        uint64_t v142 = 4 * v145;
        char v82 = v81;
        char v141 = v82;
        v138 = v13 + 1;
        uint64_t v139 = v79;
        uint64_t v140 = v36;
        uint64_t v83 = 4 * v37;
        do
        {
          if (v32) {
            v84 = v32;
          }
          else {
            v84 = v25;
          }
          v147 = v15;
          if ((v141 & 1) == 0)
          {
            uint64_t v85 = 0;
            v86 = v25;
            do
            {
              *(_DWORD *)&v32[v85] = *v86;
              v85 += 4;
              v86 = (_DWORD *)((char *)v86 + v79);
            }
            while (v78 != v85);
            v84 = v32;
          }
          if (v28 >= 1)
          {
            int v146 = v77;
            bzero(v148, 8 * v26);
            uint64_t v83 = 4 * v37;
            uint64_t v79 = v139;
            uint64_t v78 = 4 * v31;
            int v77 = v146;
            int v28 = v26;
            double v24 = v143;
          }
          if ((int)v31 >= 1)
          {
            uint64_t v87 = 0;
            v88 = v21;
            v89 = v138;
            do
            {
              *(double *)&uint64_t v90 = *(float *)&v84[4 * v87];
              if ((int)v26 >= 4)
              {
                uint64_t v91 = 0;
                float64x2_t v92 = (float64x2_t)vdupq_lane_s64(v90, 0);
                v93 = (float64x2_t *)&v149;
                v94 = v89;
                do
                {
                  v93[-1] = vmlaq_f64(v93[-1], v92, vcvtq_f64_f32(v94[-1]));
                  float32x2_t v95 = *v94;
                  v94 += 2;
                  float64x2_t *v93 = vmlaq_f64(*v93, v92, vcvtq_f64_f32(v95));
                  v93 += 2;
                  v91 += 4;
                }
                while (v91 <= (int)v26 - 4);
                uint64_t v91 = v91;
              }
              else
              {
                uint64_t v91 = 0;
              }
              if ((int)v91 < v28)
              {
                do
                {
                  *(double *)&v148[8 * v91] = *(double *)&v148[8 * v91] + v88->f32[v91] * *(double *)&v90;
                  ++v91;
                }
                while (v26 != v91);
              }
              ++v87;
              v89 = (float32x2_t *)((char *)v89 + v80);
              v88 = (float32x2_t *)((char *)v88 + v80);
            }
            while (v87 != v31);
          }
          if (v147)
          {
            if (v28 >= 1)
            {
              uint64_t v96 = 0;
              v97 = v147;
              do
              {
                float v98 = *(double *)&v148[8 * v96] * v24 + *v97 * v23;
                *(float *)(v20 + 4 * v96++) = v98;
                v97 = (float *)((char *)v97 + v83);
              }
              while (v26 != v96);
            }
          }
          else if ((int)v26 >= 1)
          {
            for (uint64_t i = 0; i != v26; ++i)
            {
              float v100 = *(double *)&v148[8 * i] * v24;
              *(float *)(v20 + 4 * i) = v100;
            }
          }
          ++v77;
          v25 += v39;
          uint64_t v15 = &v147[v140];
          v20 += v142;
        }
        while (v77 != v144);
      }
    }
    else if ((int)v27 >= 1)
    {
      int v42 = 0;
      if (v32) {
        BOOL v43 = (int)v31 < 1;
      }
      else {
        BOOL v43 = 1;
      }
      uint64_t v44 = 4 * v39;
      char v45 = v43;
      uint64_t v46 = 4 * v33;
      uint64_t v47 = 4 * v34;
      do
      {
        if (v32) {
          uint64_t v48 = (float *)v32;
        }
        else {
          uint64_t v48 = (float *)v25;
        }
        if ((v45 & 1) == 0)
        {
          uint64_t v49 = 0;
          uint64_t v50 = v25;
          do
          {
            *(_DWORD *)&v32[v49] = *v50;
            v49 += 4;
            uint64_t v50 = (_DWORD *)((char *)v50 + v46);
          }
          while (4 * v31 != v49);
          uint64_t v48 = (float *)v32;
        }
        if (v28 >= 4)
        {
          uint64_t v51 = 0;
          int v53 = v21;
          v52 = v15;
          do
          {
            float64x2_t v54 = 0uLL;
            if ((int)v31 < 1)
            {
              double v59 = 0.0;
              double v55 = 0.0;
            }
            else
            {
              double v55 = 0.0;
              v56 = v53;
              long long v57 = v48;
              uint64_t v58 = v31;
              double v59 = 0.0;
              do
              {
                float v60 = *v57++;
                double v59 = v59 + v60 * v56->f32[0];
                float64x2_t v54 = vmlaq_n_f64(v54, vcvtq_f64_f32(*(float32x2_t *)((char *)v56 + 4)), v60);
                double v55 = v55 + v60 * v56[1].f32[1];
                v56 = (float32x2_t *)((char *)v56 + v47);
                --v58;
              }
              while (v58);
            }
            double v61 = v59 * v24;
            uint64_t v62 = 4 * v51;
            if (v52)
            {
              float v63 = v61 + *v52 * v23;
              *(float *)(v20 + 4 * v51) = v63;
              float v64 = v24 * v54.f64[0] + v52[v37] * v23;
              *(float *)(v20 + (v62 | 4)) = v64;
              float v65 = vmuld_lane_f64(v24, v54, 1) + v52[2 * v37] * v23;
              *(float *)(v20 + (v62 | 8)) = v65;
              double v66 = v55 * v24 + v52[3 * v37] * v23;
            }
            else
            {
              float v67 = v61;
              *(float *)(v20 + 4 * v51) = v67;
              *(float32x2_t *)(v20 + (v62 | 4)) = vcvt_f32_f64(vmulq_n_f64(v54, v24));
              double v66 = v55 * v24;
            }
            float v68 = v66;
            *(float *)(v20 + (v62 | 0xC)) = v68;
            v51 += 4;
            v52 += 4 * v37;
            v53 += 2;
          }
          while (v51 <= (int)v26 - 4);
          uint64_t v51 = v51;
        }
        else
        {
          uint64_t v51 = 0;
          v52 = v15;
        }
        if ((int)v51 < (int)v26)
        {
          v69 = (float *)v21 + v51;
          do
          {
            double v70 = 0.0;
            if ((int)v31 >= 1)
            {
              v71 = v69;
              v72 = v48;
              uint64_t v73 = v31;
              do
              {
                float v74 = *v72++;
                double v70 = v70 + v74 * *v71;
                v71 = (float *)((char *)v71 + v47);
                --v73;
              }
              while (v73);
            }
            double v75 = v70 * v24;
            if (v52) {
              double v75 = v75 + *v52 * v23;
            }
            float v76 = v75;
            *(float *)(v20 + 4 * v51++) = v76;
            v52 += v37;
            ++v69;
          }
          while (v51 != v26);
        }
        ++v42;
        uint64_t v25 = (_DWORD *)((char *)v25 + v44);
        int v28 = v26;
        v15 += v36;
        v20 += 4 * v145;
      }
      while (v42 != v29);
    }
    goto LABEL_161;
  }
LABEL_105:
  if ((int)v29 >= 1)
  {
    int v101 = 0;
    if (v32) {
      BOOL v102 = (int)v31 < 1;
    }
    else {
      BOOL v102 = 1;
    }
    char v103 = v102;
    uint64_t v104 = 4 * v33;
    uint64_t v105 = 4 * v34;
    do
    {
      if (v32) {
        v106 = v32;
      }
      else {
        v106 = v25;
      }
      if ((v103 & 1) == 0)
      {
        uint64_t v107 = 0;
        v108 = v25;
        do
        {
          *(_DWORD *)&v32[v107] = *v108;
          v107 += 4;
          v108 = (_DWORD *)((char *)v108 + v104);
        }
        while (4 * v31 != v107);
        v106 = v32;
      }
      if ((int)v26 >= 1)
      {
        uint64_t v109 = 0;
        v110 = v21;
        v111 = v15;
        do
        {
          if ((int)v31 >= 4)
          {
            uint64_t v115 = 0;
            uint64_t v116 = 0;
            float64x2_t v113 = 0uLL;
            float64x2_t v114 = 0uLL;
            do
            {
              float32x4_t v117 = *(float32x4_t *)&v106[v115 * 8];
              float32x4_t v118 = *(float32x4_t *)v110[v115].f32;
              float64x2_t v114 = vmlaq_f64(v114, vcvt_hight_f64_f32(v118), vcvt_hight_f64_f32(v117));
              float64x2_t v113 = vmlaq_f64(v113, vcvtq_f64_f32(*(float32x2_t *)v118.f32), vcvtq_f64_f32(*(float32x2_t *)v117.f32));
              v116 += 4;
              v115 += 2;
            }
            while (v116 <= (int)v31 - 4);
            int v112 = ((v31 - 4) & 0xFFFFFFFC) + 4;
          }
          else
          {
            int v112 = 0;
            float64x2_t v113 = 0uLL;
            float64x2_t v114 = 0uLL;
          }
          if (v112 >= (int)v31)
          {
            double v120 = v113.f64[0];
          }
          else
          {
            uint64_t v119 = v112;
            double v120 = v113.f64[0];
            do
            {
              double v120 = v120 + *(float *)&v106[v119 * 4] * v110->f32[v119];
              ++v112;
              ++v119;
            }
            while ((int)v31 > v112);
          }
          double v121 = (v114.f64[1] + v114.f64[0] + v113.f64[1] + v120) * v24;
          if (v111) {
            double v121 = v121 + *v111 * v23;
          }
          float v122 = v121;
          *(float *)(v20 + 4 * v109++) = v122;
          v111 += v37;
          v110 = (float32x2_t *)((char *)v110 + v105);
        }
        while (v109 != v26);
      }
      ++v101;
      v25 += v39;
      v15 += v36;
      v20 += 4 * v145;
    }
    while (v101 != v27);
  }
LABEL_161:
  uint64_t result = (uint64_t)v150;
  if (v150 != v152)
  {
    if (v150) {
      return MEMORY[0x22A641760]();
    }
  }
  return result;
}

void sub_225EE242C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v11 = STACK[0x10F8];
  if (STACK[0x10F8] != a10)
  {
    if (v11) {
      MEMORY[0x22A641760](v11, 0x1000C8052888210);
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *cv::GEMMBlockMul_32f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v17 = v16;
  double v18 = v11;
  uint64_t v19 = (_DWORD *)v9;
  int v20 = v14[1];
  int v21 = v15[1];
  uint64_t v22 = (int)*v15;
  uint64_t v23 = v10 >> 2;
  if (a9)
  {
    if (v20 >= 0x409) {
      operator new[]();
    }
    uint64_t v26 = 1;
    uint64_t result = v70;
    double v24 = v70;
  }
  else
  {
    double v24 = 0;
    uint64_t result = v70;
    int v20 = *v14;
    uint64_t v26 = v10 >> 2;
    uint64_t v23 = 1;
  }
  uint64_t v27 = *v15;
  unint64_t v28 = v12 >> 2;
  unint64_t v29 = v13 >> 3;
  if ((a9 & 2) != 0)
  {
    if (v21 >= 1)
    {
      int v53 = 0;
      uint64_t v54 = 4 * v26;
      if (v24) {
        BOOL v55 = v20 < 1;
      }
      else {
        BOOL v55 = 1;
      }
      char v56 = v55;
      uint64_t v57 = 4 * v28;
      do
      {
        if (v24) {
          uint64_t v58 = v24;
        }
        else {
          uint64_t v58 = v19;
        }
        if ((v56 & 1) == 0)
        {
          uint64_t v59 = 0;
          float v60 = v19;
          do
          {
            *(_DWORD *)&v24[v59] = *v60;
            v59 += 4;
            v60 += v23;
          }
          while (4 * v20 != v59);
          uint64_t v58 = v24;
        }
        if ((int)v22 >= 1)
        {
          uint64_t v61 = 0;
          uint64_t v62 = v18;
          do
          {
            unint64_t v63 = 0;
            if ((a9 & 0x10) != 0) {
              unint64_t v63 = *(void *)(v17 + 8 * v61);
            }
            float64x2_t v64 = (float64x2_t)v63;
            if (v20 >= 2)
            {
              uint64_t v66 = 0;
              uint64_t v67 = 0;
              do
              {
                float64x2_t v64 = vmlaq_f64(v64, vcvtq_f64_f32(v62[v66]), vcvtq_f64_f32(*(float32x2_t *)&v58[v66 * 8]));
                v67 += 2;
                ++v66;
              }
              while (v67 <= v20 - 2);
              signed int v65 = ((v20 - 2) & 0xFFFFFFFE) + 2;
            }
            else
            {
              signed int v65 = 0;
            }
            if (v65 >= v20)
            {
              double v69 = v64.f64[0];
            }
            else
            {
              uint64_t v68 = v65;
              double v69 = v64.f64[0];
              do
              {
                double v69 = v69 + *(float *)&v58[v68 * 4] * v62->f32[v68];
                ++v65;
                ++v68;
              }
              while (v20 > v65);
            }
            *(double *)(v17 + 8 * v61++) = v64.f64[1] + v69;
            uint64_t v62 = (float32x2_t *)((char *)v62 + v57);
          }
          while (v61 != v27);
        }
        ++v53;
        uint64_t v19 = (_DWORD *)((char *)v19 + v54);
        v17 += 8 * v29;
      }
      while (v53 != v21);
    }
  }
  else if (v21 >= 1)
  {
    int v30 = 0;
    uint64_t v31 = 4 * v26;
    if (v24) {
      BOOL v32 = v20 < 1;
    }
    else {
      BOOL v32 = 1;
    }
    char v33 = v32;
    uint64_t v34 = 4 * v28;
    do
    {
      if (v24) {
        uint64_t v35 = (float *)v24;
      }
      else {
        uint64_t v35 = (float *)v19;
      }
      if ((v33 & 1) == 0)
      {
        uint64_t v36 = 0;
        uint64_t v37 = v19;
        do
        {
          *(_DWORD *)&v24[v36] = *v37;
          v36 += 4;
          v37 += v23;
        }
        while (4 * v20 != v36);
        uint64_t v35 = (float *)v24;
      }
      if ((int)v22 >= 4)
      {
        uint64_t v38 = 0;
        uint64_t v39 = v11 + 1;
        do
        {
          float64x2_t v40 = 0uLL;
          uint64_t v41 = 8 * v38;
          float64x2_t v42 = 0uLL;
          if ((a9 & 0x10) != 0)
          {
            float64x2_t v40 = *(float64x2_t *)(v17 + 8 * v38);
            float64x2_t v42 = *(float64x2_t *)(v17 + (v41 | 0x10));
          }
          if (v20 >= 1)
          {
            BOOL v43 = v39;
            uint64_t v44 = v35;
            uint64_t v45 = v20;
            do
            {
              float v46 = *v44++;
              float64x2_t v40 = vmlaq_n_f64(v40, vcvtq_f64_f32(v43[-1]), v46);
              float64x2_t v42 = vmlaq_n_f64(v42, vcvtq_f64_f32(*v43), v46);
              BOOL v43 = (float32x2_t *)((char *)v43 + v34);
              --v45;
            }
            while (v45);
          }
          *(float64x2_t *)(v17 + 8 * v38) = v40;
          *(float64x2_t *)(v17 + (v41 | 0x10)) = v42;
          v38 += 4;
          v39 += 2;
        }
        while (v38 <= v22 - 4);
        uint64_t v38 = v38;
      }
      else
      {
        uint64_t v38 = 0;
      }
      if ((int)v38 < (int)v22)
      {
        uint64_t v47 = (float *)v11 + v38;
        do
        {
          double v48 = 0.0;
          if ((a9 & 0x10) != 0) {
            double v48 = *(double *)(v17 + 8 * v38);
          }
          if (v20 >= 1)
          {
            uint64_t v49 = v47;
            uint64_t v50 = v35;
            uint64_t v51 = v20;
            do
            {
              float v52 = *v50++;
              double v48 = v48 + v52 * *v49;
              uint64_t v49 = (float *)((char *)v49 + v34);
              --v51;
            }
            while (v51);
          }
          *(double *)(v17 + 8 * v38++) = v48;
          ++v47;
        }
        while (v38 != v27);
      }
      ++v30;
      uint64_t v19 = (_DWORD *)((char *)v19 + v31);
      v17 += 8 * v29;
    }
    while (v30 != v21);
  }
  return result;
}

void sub_225EE2878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10 != a9)
  {
    if (a10) {
      MEMORY[0x22A641760]();
    }
  }
  _Unwind_Resume(exception_object);
}

float *cv::GEMMStore_32f(float *result, unint64_t a2, float64x2_t *a3, unint64_t a4, float32x4_t *a5, unint64_t a6, unsigned int *a7, char a8, double a9, double a10)
{
  unsigned int v10 = a7[1];
  uint64_t v11 = a2 >> 2;
  if ((a8 & 4) != 0) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = a2 >> 2;
  }
  if ((a8 & 4) == 0) {
    uint64_t v11 = 1;
  }
  if (result) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (result) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v10)
  {
    uint64_t v15 = *a7;
    uint64_t v16 = v14;
    unint64_t v17 = (v15 - 4);
    float64x2_t v18 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a10, 0);
    uint64_t v19 = 4 * v13;
    uint64_t v20 = 4 * v14;
    int v21 = (float32x2_t *)&a5->u32[2];
    uint64_t v22 = 4 * (a6 >> 2);
    uint64_t v23 = a3 + 1;
    uint64_t v24 = 8 * (a4 >> 3);
    do
    {
      unint64_t v25 = 0;
      if (result)
      {
        if ((int)v15 < 4)
        {
          uint64_t v26 = result;
        }
        else
        {
          BOOL v32 = v23;
          char v33 = v21;
          uint64_t v34 = (__int32 *)result;
          do
          {
            uint64_t v35 = v34;
            v36.i32[0] = *v34;
            uint64_t v37 = &v34[v16];
            v36.i32[1] = *v37;
            uint64_t v38 = &v37[v16];
            v33[-1] = vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(v32[-1], a9), vcvtq_f64_f32(v36), v18));
            v36.i32[0] = *v38;
            uint64_t v39 = &v38[v16];
            float64x2_t v40 = *v32;
            v32 += 2;
            v36.i32[1] = *v39;
            uint64_t v34 = &v39[v16];
            *char v33 = vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(v40, a9), vcvtq_f64_f32(v36), v18));
            v33 += 2;
            v25 += 4;
          }
          while (v25 <= v17);
          uint64_t v26 = (float *)&v35[v20];
          unint64_t v25 = v25;
        }
        if ((int)v25 < (int)v15)
        {
          do
          {
            float32_t v41 = a3->f64[v25] * a9 + *v26 * a10;
            a5->f32[v25++] = v41;
            uint64_t v26 = (float *)((char *)v26 + v16 * 4);
          }
          while (v15 != v25);
        }
      }
      else
      {
        if ((int)v15 >= 4)
        {
          uint64_t v27 = a3;
          unint64_t v28 = a5;
          do
          {
            float64x2_t v29 = *v27;
            float64x2_t v30 = v27[1];
            v27 += 2;
            *v28++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v29, a9)), vmulq_n_f64(v30, a9));
            v25 += 4;
          }
          while (v25 <= v17);
          unint64_t v25 = v25;
        }
        if ((int)v25 < (int)v15)
        {
          do
          {
            float32_t v31 = a3->f64[v25] * a9;
            a5->f32[v25++] = v31;
          }
          while (v15 != v25);
        }
      }
      uint64_t result = (float *)((char *)result + v19);
      int v21 = (float32x2_t *)((char *)v21 + v22);
      uint64_t v23 = (float64x2_t *)((char *)v23 + v24);
      a5 = (float32x4_t *)((char *)a5 + v22);
      a3 = (float64x2_t *)((char *)a3 + v24);
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t cv::GEMMSingleMul_64f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, int *a10, char a11)
{
  uint64_t v11 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  v128 = v20;
  double v22 = v21;
  double v24 = v23;
  double v130 = (unsigned char *)v11;
  uint64_t v25 = *a10;
  uint64_t v26 = a10[1];
  int v27 = *a10;
  uint64_t v129 = a10[1];
  int v28 = *a9;
  uint64_t v29 = a9[1];
  float64x2_t v30 = v138;
  float v136 = v138;
  uint64_t v137 = 520;
  unint64_t v31 = v12 >> 3;
  unint64_t v32 = v13 >> 3;
  uint64_t v33 = v14 >> 3;
  if ((a11 & 4) != 0) {
    uint64_t v34 = 1;
  }
  else {
    uint64_t v34 = v14 >> 3;
  }
  if ((a11 & 4) == 0) {
    uint64_t v33 = 1;
  }
  if (!v19) {
    uint64_t v34 = 0;
  }
  unint64_t v133 = v15 >> 3;
  if (v19) {
    uint64_t v35 = v33;
  }
  else {
    uint64_t v35 = 0;
  }
  if (a11)
  {
    uint64_t v37 = 1;
    if (v12 >= 0x10 && (int)v29 >= 2)
    {
      if (v29 >= 0x209)
      {
        uint64_t v137 = v29;
        operator new[]();
      }
      uint64_t v37 = 1;
      goto LABEL_61;
    }
    int v28 = v29;
    uint64_t v36 = v12 >> 3;
  }
  else
  {
    uint64_t v36 = 1;
    uint64_t v37 = v12 >> 3;
  }
  if (v28 == 1)
  {
    if (v12 < 0x10)
    {
      uint64_t v58 = v128;
    }
    else
    {
      uint64_t v58 = v128;
      if ((int)v29 >= 2)
      {
        if (v129 >= 0x209)
        {
          uint64_t v137 = v26;
          operator new[]();
        }
        uint64_t v59 = v129;
        if ((int)v129 >= 1)
        {
          uint64_t v60 = 0;
          uint64_t v61 = (void *)v11;
          do
          {
            *(void *)&v138[v60] = *v61;
            v60 += 8;
            v61 += v31;
          }
          while (8 * v129 != v60);
        }
        double v130 = v138;
        goto LABEL_142;
      }
    }
    uint64_t v59 = v129;
LABEL_142:
    if (v13 < 0x10)
    {
      float64x2_t v113 = v130;
    }
    else
    {
      float64x2_t v113 = v130;
      if ((unint64_t)(int)v25 > 0x208 && v27 >= 0x209) {
        operator new[]();
      }
      if (v27 >= 1)
      {
        uint64_t v114 = 0;
        do
        {
          *(void *)&v135[v114] = *v58;
          v114 += 8;
          v58 += v32;
        }
        while (8 * v25 != v114);
      }
      uint64_t v58 = v135;
    }
    if ((int)v59 >= 1)
    {
      for (uint64_t i = 0; i != v59; ++i)
      {
        double v116 = *(double *)&v113[8 * i] * v24;
        if (v27 >= 2)
        {
          uint64_t v119 = 0;
          uint64_t v117 = 0;
          float32x4_t v118 = v19;
          do
          {
            double v120 = v116 * *(double *)&v58[v119];
            double v121 = v116 * *(double *)&v58[v119 + 1];
            if (v118)
            {
              *(double *)(v17 + v119 * 8) = v120 + *v118 * v22;
              double v121 = v121 + v118[v35] * v22;
            }
            else
            {
              *(double *)(v17 + v119 * 8) = v120;
            }
            *(double *)(v17 + v119 * 8 + 8) = v121;
            v117 += 2;
            v118 += 2 * v35;
            v119 += 2;
          }
          while (v117 <= (int)v25 - 2);
          uint64_t v117 = v117;
        }
        else
        {
          uint64_t v117 = 0;
          float32x4_t v118 = v19;
        }
        if ((int)v117 < (int)v25)
        {
          do
          {
            double v122 = v116 * *(double *)&v58[v117];
            if (v118) {
              double v122 = v122 + *v118 * v22;
            }
            *(double *)(v17 + 8 * v117++) = v122;
            v118 += v35;
          }
          while (v25 != v117);
        }
        v19 += v34;
        v17 += 8 * v133;
      }
    }
    goto LABEL_166;
  }
  float64x2_t v30 = 0;
  unint64_t v31 = v36;
  LODWORD(v29) = v28;
LABEL_61:
  uint64_t v57 = (void *)v11;
  if ((a11 & 2) != 0)
  {
    if ((int)v129 >= 1)
    {
      int v38 = 0;
      if (v30) {
        BOOL v39 = (int)v29 < 1;
      }
      else {
        BOOL v39 = 1;
      }
      char v40 = v39;
      uint64_t v41 = 8 * v31;
      uint64_t v42 = 8 * v32;
      do
      {
        if (v30) {
          BOOL v43 = v30;
        }
        else {
          BOOL v43 = v57;
        }
        if ((v40 & 1) == 0)
        {
          uint64_t v44 = 0;
          uint64_t v45 = v57;
          do
          {
            *(void *)&v30[v44] = *v45;
            v44 += 8;
            uint64_t v45 = (void *)((char *)v45 + v41);
          }
          while (8 * v29 != v44);
          BOOL v43 = v30;
        }
        if ((int)v25 >= 1)
        {
          uint64_t v46 = 0;
          uint64_t v47 = v128;
          double v48 = v19;
          do
          {
            if ((int)v29 >= 4)
            {
              uint64_t v52 = 0;
              uint64_t v53 = 0;
              float64x2_t v50 = 0uLL;
              float64x2_t v51 = 0uLL;
              do
              {
                float64x2_t v51 = vmlaq_f64(v51, *(float64x2_t *)&v47[v52 + 2], *(float64x2_t *)&v43[v52 * 8 + 16]);
                float64x2_t v50 = vmlaq_f64(v50, *(float64x2_t *)&v47[v52], *(float64x2_t *)&v43[v52 * 8]);
                v53 += 4;
                v52 += 4;
              }
              while (v53 <= (int)v29 - 4);
              int v49 = ((v29 - 4) & 0xFFFFFFFC) + 4;
            }
            else
            {
              int v49 = 0;
              float64x2_t v50 = 0uLL;
              float64x2_t v51 = 0uLL;
            }
            if (v49 >= (int)v29)
            {
              double v55 = v50.f64[0];
            }
            else
            {
              uint64_t v54 = v49;
              double v55 = v50.f64[0];
              do
              {
                double v55 = v55 + *(double *)&v43[v54 * 8] * *(double *)&v47[v54];
                ++v49;
                ++v54;
              }
              while ((int)v29 > v49);
            }
            double v56 = (v51.f64[1] + v51.f64[0] + v50.f64[1] + v55) * v24;
            if (v48) {
              double v56 = v56 + *v48 * v22;
            }
            *(double *)(v17 + 8 * v46++) = v56;
            v48 += v35;
            uint64_t v47 = (void *)((char *)v47 + v42);
          }
          while (v46 != v25);
        }
        ++v38;
        v57 += v37;
        v19 += v34;
        v17 += 8 * v133;
      }
      while (v38 != v26);
    }
  }
  else if ((unint64_t)(8 * (int)v25) > 0x640)
  {
    if (v27 >= 0x209) {
      operator new[]();
    }
    v93 = (void *)v11;
    if ((int)v129 >= 1)
    {
      int v94 = 0;
      uint64_t v95 = 8 * v25;
      uint64_t v124 = 8 * v31;
      uint64_t v96 = 8 * v32;
      if (v30) {
        BOOL v97 = (int)v29 < 1;
      }
      else {
        BOOL v97 = 1;
      }
      uint64_t v127 = 8 * v133;
      char v98 = v97;
      char v126 = v98;
      uint64_t v99 = 8 * v35;
      uint64_t v125 = v34;
      do
      {
        float v134 = v19;
        if (v30) {
          float v100 = v30;
        }
        else {
          float v100 = v93;
        }
        double v131 = v93;
        if ((v126 & 1) == 0)
        {
          uint64_t v101 = 0;
          do
          {
            *(void *)&v30[v101] = *v93;
            v101 += 8;
            v93 = (void *)((char *)v93 + v124);
          }
          while (8 * v29 != v101);
          float v100 = v30;
        }
        if (v27 >= 1)
        {
          int v132 = v94;
          bzero(v135, 8 * v25);
          uint64_t v99 = 8 * v35;
          int v94 = v132;
          int v27 = v25;
        }
        if ((int)v29 >= 1)
        {
          uint64_t v102 = 0;
          char v103 = v128;
          do
          {
            uint64_t v104 = *(uint64_t *)&v100[8 * v102];
            if ((int)v25 >= 4)
            {
              uint64_t v106 = 0;
              uint64_t v105 = 0;
              float64x2_t v107 = (float64x2_t)vdupq_lane_s64(v104, 0);
              do
              {
                v108 = (float64x2_t *)&v135[v106 * 8];
                float64x2_t v109 = vmlaq_f64(*(float64x2_t *)&v135[v106 * 8 + 16], v107, *(float64x2_t *)&v103[v106 + 2]);
                float64x2_t *v108 = vmlaq_f64(*(float64x2_t *)&v135[v106 * 8], v107, *(float64x2_t *)&v103[v106]);
                v108[1] = v109;
                v105 += 4;
                v106 += 4;
              }
              while (v105 <= (int)v25 - 4);
              uint64_t v105 = v105;
            }
            else
            {
              uint64_t v105 = 0;
            }
            if ((int)v105 < v27)
            {
              do
              {
                *(double *)&v135[8 * v105] = *(double *)&v135[8 * v105] + *(double *)&v103[v105] * *(double *)&v104;
                ++v105;
              }
              while (v25 != v105);
            }
            ++v102;
            char v103 = (void *)((char *)v103 + v96);
          }
          while (v102 != v29);
        }
        if (v134)
        {
          if (v27 >= 1)
          {
            uint64_t v110 = 0;
            v111 = v134;
            do
            {
              *(double *)(v17 + v110) = *(double *)&v135[v110] * v24 + *v111 * v22;
              v110 += 8;
              v111 = (double *)((char *)v111 + v99);
            }
            while (v95 != v110);
          }
        }
        else if ((int)v25 >= 1)
        {
          uint64_t v112 = 0;
          do
          {
            *(double *)(v17 + v112) = *(double *)&v135[v112] * v24;
            v112 += 8;
          }
          while (v95 != v112);
        }
        ++v94;
        v93 = &v131[v37];
        uint64_t v19 = &v134[v125];
        v17 += v127;
      }
      while (v94 != v129);
    }
  }
  else if ((int)v26 >= 1)
  {
    int v62 = 0;
    uint64_t v63 = 8 * v37;
    uint64_t v64 = 8 * v31;
    if (v30) {
      BOOL v65 = (int)v29 < 1;
    }
    else {
      BOOL v65 = 1;
    }
    char v66 = v65;
    uint64_t v67 = 8 * v32;
    do
    {
      if (v30) {
        uint64_t v68 = (double *)v30;
      }
      else {
        uint64_t v68 = (double *)v57;
      }
      if ((v66 & 1) == 0)
      {
        uint64_t v69 = 0;
        double v70 = v57;
        do
        {
          *(void *)&v30[v69] = *v70;
          v69 += 8;
          double v70 = (void *)((char *)v70 + v64);
        }
        while (8 * v29 != v69);
        uint64_t v68 = (double *)v30;
      }
      if (v27 >= 4)
      {
        uint64_t v71 = 0;
        uint64_t v73 = (double *)(v128 + 2);
        v72 = v19;
        do
        {
          if ((int)v29 < 1)
          {
            double v80 = 0.0;
            double v79 = 0.0;
            double v78 = 0.0;
            double v74 = 0.0;
          }
          else
          {
            double v74 = 0.0;
            double v75 = v73;
            float v76 = v68;
            uint64_t v77 = v29;
            double v78 = 0.0;
            double v79 = 0.0;
            double v80 = 0.0;
            do
            {
              double v81 = *v76++;
              double v80 = v80 + v81 * *(v75 - 2);
              double v79 = v79 + v81 * *(v75 - 1);
              double v78 = v78 + v81 * *v75;
              double v74 = v74 + v81 * v75[1];
              double v75 = (double *)((char *)v75 + v67);
              --v77;
            }
            while (v77);
          }
          double v82 = v80 * v24;
          uint64_t v83 = 8 * v71;
          double v84 = v79 * v24;
          if (v72)
          {
            *(double *)(v17 + 8 * v71) = v82 + *v72 * v22;
            *(double *)(v17 + (v83 | 8)) = v84 + v72[v35] * v22;
            *(double *)(v17 + (v83 | 0x10)) = v78 * v24 + v72[2 * v35] * v22;
            double v85 = v74 * v24 + v72[3 * v35] * v22;
          }
          else
          {
            *(double *)(v17 + 8 * v71) = v82;
            *(double *)(v17 + (v83 | 8)) = v84;
            *(double *)(v17 + (v83 | 0x10)) = v78 * v24;
            double v85 = v74 * v24;
          }
          *(double *)(v17 + (v83 | 0x18)) = v85;
          v71 += 4;
          v72 += 4 * v35;
          v73 += 4;
        }
        while (v71 <= (int)v25 - 4);
        uint64_t v71 = v71;
      }
      else
      {
        uint64_t v71 = 0;
        v72 = v19;
      }
      if ((int)v71 < (int)v25)
      {
        v86 = (double *)&v128[v71];
        do
        {
          double v87 = 0.0;
          if ((int)v29 >= 1)
          {
            v88 = v86;
            v89 = v68;
            uint64_t v90 = v29;
            do
            {
              double v91 = *v89++;
              double v87 = v87 + v91 * *v88;
              v88 = (double *)((char *)v88 + v67);
              --v90;
            }
            while (v90);
          }
          double v92 = v87 * v24;
          if (v72) {
            double v92 = v92 + *v72 * v22;
          }
          *(double *)(v17 + 8 * v71++) = v92;
          v72 += v35;
          ++v86;
        }
        while (v71 != v25);
      }
      ++v62;
      uint64_t v57 = (void *)((char *)v57 + v63);
      v19 += v34;
      v17 += 8 * v133;
      int v27 = v25;
    }
    while (v62 != v129);
  }
LABEL_166:
  uint64_t result = (uint64_t)v136;
  if (v136 != v138)
  {
    if (v136) {
      return MEMORY[0x22A641760]();
    }
  }
  return result;
}

void sub_225EE349C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v11 = STACK[0x10D8];
  if (STACK[0x10D8] != a10)
  {
    if (v11) {
      MEMORY[0x22A641760](v11, 0x1000C8000313F17);
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *cv::GEMMBlockMul_64f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v17 = v16;
  float64x2_t v18 = v11;
  uint64_t v19 = (void *)v9;
  int v20 = v14[1];
  int v21 = v15[1];
  uint64_t v22 = (int)*v15;
  uint64_t v23 = v10 >> 3;
  if (a9)
  {
    if (v20 >= 0x209) {
      operator new[]();
    }
    uint64_t v26 = 1;
    uint64_t result = v70;
    double v24 = v70;
  }
  else
  {
    double v24 = 0;
    uint64_t result = v70;
    int v20 = *v14;
    uint64_t v26 = v10 >> 3;
    uint64_t v23 = 1;
  }
  uint64_t v27 = *v15;
  unint64_t v28 = v12 >> 3;
  unint64_t v29 = v13 >> 3;
  if ((a9 & 2) != 0)
  {
    if (v21 >= 1)
    {
      int v53 = 0;
      uint64_t v54 = 8 * v26;
      if (v24) {
        BOOL v55 = v20 < 1;
      }
      else {
        BOOL v55 = 1;
      }
      char v56 = v55;
      uint64_t v57 = 8 * v28;
      do
      {
        if (v24) {
          uint64_t v58 = v24;
        }
        else {
          uint64_t v58 = v19;
        }
        if ((v56 & 1) == 0)
        {
          uint64_t v59 = 0;
          uint64_t v60 = v19;
          do
          {
            *(void *)&v24[v59] = *v60;
            v59 += 8;
            v60 += v23;
          }
          while (8 * v20 != v59);
          uint64_t v58 = v24;
        }
        if ((int)v22 >= 1)
        {
          uint64_t v61 = 0;
          int v62 = v18;
          do
          {
            double v63 = 0.0;
            double v64 = 0.0;
            if ((a9 & 0x10) != 0) {
              double v64 = *(double *)(v17 + 8 * v61);
            }
            if (v20 >= 2)
            {
              unint64_t v66 = 0;
              do
              {
                uint64_t v67 = (double *)&v58[8 * v66];
                f64 = v62[v66 / 2].f64;
                double v64 = v64 + *v67 * *f64;
                double v63 = v63 + v67[1] * f64[1];
                v66 += 2;
              }
              while ((uint64_t)v66 <= v20 - 2);
              signed int v65 = ((v20 - 2) & 0xFFFFFFFE) + 2;
            }
            else
            {
              signed int v65 = 0;
            }
            if (v65 < v20)
            {
              uint64_t v69 = v65;
              do
              {
                double v64 = v64 + *(double *)&v58[v69 * 8] * v62->f64[v69];
                ++v65;
                ++v69;
              }
              while (v20 > v65);
            }
            *(double *)(v17 + 8 * v61++) = v63 + v64;
            int v62 = (float64x2_t *)((char *)v62 + v57);
          }
          while (v61 != v27);
        }
        ++v53;
        uint64_t v19 = (void *)((char *)v19 + v54);
        v17 += 8 * v29;
      }
      while (v53 != v21);
    }
  }
  else if (v21 >= 1)
  {
    int v30 = 0;
    uint64_t v31 = 8 * v26;
    if (v24) {
      BOOL v32 = v20 < 1;
    }
    else {
      BOOL v32 = 1;
    }
    char v33 = v32;
    uint64_t v34 = 8 * v28;
    do
    {
      if (v24) {
        uint64_t v35 = (double *)v24;
      }
      else {
        uint64_t v35 = (double *)v19;
      }
      if ((v33 & 1) == 0)
      {
        uint64_t v36 = 0;
        uint64_t v37 = v19;
        do
        {
          *(void *)&v24[v36] = *v37;
          v36 += 8;
          v37 += v23;
        }
        while (8 * v20 != v36);
        uint64_t v35 = (double *)v24;
      }
      if ((int)v22 >= 4)
      {
        uint64_t v38 = 0;
        BOOL v39 = v11 + 1;
        do
        {
          float64x2_t v40 = 0uLL;
          uint64_t v41 = 8 * v38;
          float64x2_t v42 = 0uLL;
          if ((a9 & 0x10) != 0)
          {
            float64x2_t v40 = *(float64x2_t *)(v17 + 8 * v38);
            float64x2_t v42 = *(float64x2_t *)(v17 + (v41 | 0x10));
          }
          if (v20 >= 1)
          {
            BOOL v43 = v39;
            uint64_t v44 = v35;
            uint64_t v45 = v20;
            do
            {
              float64x2_t v46 = vld1q_dup_f64(v44++);
              float64x2_t v40 = vmlaq_f64(v40, v43[-1], v46);
              float64x2_t v42 = vmlaq_f64(v42, *v43, v46);
              BOOL v43 = (float64x2_t *)((char *)v43 + v34);
              --v45;
            }
            while (v45);
          }
          *(float64x2_t *)(v17 + 8 * v38) = v40;
          *(float64x2_t *)(v17 + (v41 | 0x10)) = v42;
          v38 += 4;
          v39 += 2;
        }
        while (v38 <= v22 - 4);
        uint64_t v38 = v38;
      }
      else
      {
        uint64_t v38 = 0;
      }
      if ((int)v38 < (int)v22)
      {
        uint64_t v47 = &v11->f64[v38];
        do
        {
          double v48 = 0.0;
          if ((a9 & 0x10) != 0) {
            double v48 = *(double *)(v17 + 8 * v38);
          }
          if (v20 >= 1)
          {
            int v49 = v47;
            float64x2_t v50 = v35;
            uint64_t v51 = v20;
            do
            {
              double v52 = *v50++;
              double v48 = v48 + v52 * *v49;
              int v49 = (double *)((char *)v49 + v34);
              --v51;
            }
            while (v51);
          }
          *(double *)(v17 + 8 * v38++) = v48;
          ++v47;
        }
        while (v38 != v27);
      }
      ++v30;
      uint64_t v19 = (void *)((char *)v19 + v31);
      v17 += 8 * v29;
    }
    while (v30 != v21);
  }
  return result;
}

void sub_225EE38B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10 != a9)
  {
    if (a10) {
      MEMORY[0x22A641760]();
    }
  }
  _Unwind_Resume(exception_object);
}

double *cv::GEMMStore_64f(double *result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, char a8, double a9, double a10)
{
  unsigned int v10 = a7[1];
  uint64_t v11 = a2 >> 3;
  if ((a8 & 4) != 0) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = a2 >> 3;
  }
  if ((a8 & 4) == 0) {
    uint64_t v11 = 1;
  }
  if (result) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (result) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v10)
  {
    uint64_t v15 = *a7;
    unint64_t v16 = (v15 - 4);
    uint64_t v17 = 8 * v13;
    uint64_t v18 = 4 * v14;
    uint64_t v19 = 8 * (a4 >> 3);
    uint64_t v20 = v14;
    do
    {
      if (result)
      {
        if ((int)v15 < 4)
        {
          unint64_t v23 = 0;
          int v21 = result;
        }
        else
        {
          uint64_t v22 = 0;
          unint64_t v23 = 0;
          double v24 = result;
          do
          {
            uint64_t v25 = v24;
            double v26 = *(double *)(a3 + v22 + 8) * a9 + a10 * v24[v20];
            uint64_t v27 = (double *)(a5 + v22);
            *uint64_t v27 = *(double *)(a3 + v22) * a9 + a10 * *v24;
            v27[1] = v26;
            unint64_t v28 = &v24[v20 + v20];
            double v29 = *(double *)(a3 + v22 + 16) * a9 + a10 * *v28;
            int v30 = &v28[v20];
            double v31 = *(double *)(a3 + v22 + 24) * a9 + a10 * *v30;
            v27[2] = v29;
            v27[3] = v31;
            v23 += 4;
            v22 += 32;
            double v24 = &v30[v20];
          }
          while (v23 <= v16);
          int v21 = &v25[v18];
          unint64_t v23 = v23;
        }
        if ((int)v23 < (int)v15)
        {
          do
          {
            *(double *)(a5 + 8 * v23) = *(double *)(a3 + 8 * v23) * a9 + *v21 * a10;
            ++v23;
            int v21 = (double *)((char *)v21 + v20 * 8);
          }
          while (v15 != v23);
        }
      }
      else
      {
        if ((int)v15 < 4)
        {
          unint64_t i = 0;
        }
        else
        {
          uint64_t v32 = 0;
          for (unint64_t i = 0; i <= v16; i += 4)
          {
            uint64_t v34 = (float64x2_t *)(a5 + v32);
            *uint64_t v34 = vmulq_n_f64(*(float64x2_t *)(a3 + v32), a9);
            v34[1] = vmulq_n_f64(*(float64x2_t *)(a3 + v32 + 16), a9);
            v32 += 32;
          }
          unint64_t i = i;
        }
        if ((int)i < (int)v15)
        {
          do
          {
            *(double *)(a5 + 8 * i) = *(double *)(a3 + 8 * i) * a9;
            ++i;
          }
          while (v15 != i);
        }
      }
      uint64_t result = (double *)((char *)result + v17);
      a5 += 8 * (a6 >> 3);
      a3 += v19;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t cv::GEMMSingleMul_32fc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, unsigned int *a10, char a11)
{
  uint64_t v11 = MEMORY[0x270FA5388](a1, a2);
  unint64_t v199 = v12;
  unint64_t v202 = v13;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  unint64_t v19 = v18;
  int v21 = v20;
  double v188 = v23;
  double v189 = v22;
  unint64_t v25 = v24;
  v195 = (void *)v11;
  uint64_t v26 = a9[1];
  int v190 = *a9;
  uint64_t v27 = *a10;
  uint64_t v186 = (int)a10[1];
  uint64_t v193 = a10[1];
  int v194 = *a10;
  unint64_t v28 = v209;
  bzero(v209, 0x1050uLL);
  unint64_t v29 = v25;
  int v30 = v17;
  v207 = v209;
  uint64_t v208 = 520;
  uint64_t v31 = v25 >> 3;
  unint64_t v32 = v19 >> 3;
  uint64_t v33 = v199 >> 3;
  if ((a11 & 4) != 0) {
    uint64_t v34 = v199 >> 3;
  }
  else {
    uint64_t v34 = 1;
  }
  if ((a11 & 4) != 0) {
    uint64_t v33 = 1;
  }
  if (v17) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  if (!v17) {
    uint64_t v33 = 0;
  }
  uint64_t v200 = v33;
  unint64_t v203 = v202 >> 3;
  if (a11)
  {
    uint64_t v37 = 1;
    if (v29 < 0x10)
    {
      uint64_t v36 = v31;
      int v40 = v26;
      double v38 = v189;
      BOOL v39 = v195;
    }
    else
    {
      double v38 = v189;
      BOOL v39 = v195;
      if ((int)v26 >= 2)
      {
        if (v26 >= 0x209)
        {
          uint64_t v208 = v26;
          operator new[]();
        }
        uint64_t v37 = 1;
        goto LABEL_30;
      }
      uint64_t v36 = v31;
      int v40 = v26;
    }
  }
  else
  {
    uint64_t v36 = 1;
    uint64_t v37 = v31;
    double v38 = v189;
    BOOL v39 = v195;
    int v40 = v190;
  }
  if (v40 == 1)
  {
    uint64_t v196 = v31;
    unint64_t v41 = v29;
    bzero(v205, 0x1050uLL);
    if (v41 < 0x10)
    {
      uint64_t v45 = v30;
      uint64_t v43 = v193;
      double v46 = v188;
      double v42 = v189;
      unint64_t v44 = (int)v27;
    }
    else
    {
      double v42 = v189;
      uint64_t v43 = v193;
      unint64_t v44 = (int)v27;
      if ((int)v26 < 2)
      {
        uint64_t v45 = v30;
        double v46 = v188;
      }
      else
      {
        if (v193 >= 0x209)
        {
          uint64_t v208 = v186;
          operator new[]();
        }
        uint64_t v45 = v30;
        double v46 = v188;
        if ((int)v193 >= 1)
        {
          uint64_t v47 = 0;
          do
          {
            *(void *)&v209[v47] = *v39;
            v47 += 8;
            v39 += v196;
          }
          while (8 * v193 != v47);
        }
        BOOL v39 = v209;
      }
    }
    if (v19 >= 0x10)
    {
      if (v44 > 0x208) {
        operator new[]();
      }
      if ((int)v44 >= 1)
      {
        for (uint64_t i = 0; i != v44; ++i)
        {
          v205[i] = *v21;
          v21 += v19 >> 3;
        }
      }
      int v21 = (float32x2_t *)v205;
    }
    if ((int)v43 >= 1)
    {
      for (uint64_t j = 0; j != v43; ++j)
      {
        v166 = (float *)&v39[j];
        double v167 = *v166 * v42;
        double v168 = v166[1] * v42;
        v169.f64[0] = -v168;
        if ((int)v44 >= 2)
        {
          uint64_t v172 = 0;
          int64_t v170 = 0;
          float64x2_t v173 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v167, 0);
          v174.f64[0] = -v168;
          v174.f64[1] = v166[1] * v42;
          v171 = v45;
          do
          {
            float64x2_t v175 = vcvtq_f64_f32(v21[v172]);
            float64x2_t v176 = vmlaq_f64(vmulq_f64(v174, (float64x2_t)vextq_s8((int8x16_t)v175, (int8x16_t)v175, 8uLL)), v175, v173);
            float64x2_t v177 = vcvtq_f64_f32(v21[v172 + 1]);
            float64x2_t v178 = vmlaq_f64(vmulq_f64(v174, (float64x2_t)vextq_s8((int8x16_t)v177, (int8x16_t)v177, 8uLL)), v177, v173);
            if (v171)
            {
              *(float32x2_t *)(v15 + v172 * 8) = vcvt_f32_f64(vaddq_f64(v176, vmulq_n_f64(vcvtq_f64_f32(*v171), v46)));
              float64x2_t v178 = vaddq_f64(v178, vmulq_n_f64(vcvtq_f64_f32(v171[v35]), v46));
            }
            else
            {
              *(float32x2_t *)(v15 + v172 * 8) = vcvt_f32_f64(v176);
            }
            *(float32x2_t *)(v15 + v172 * 8 + 8) = vcvt_f32_f64(v178);
            v170 += 2;
            v171 += 2 * v35;
            v172 += 2;
          }
          while (v170 <= (uint64_t)(v44 - 2));
          int64_t v170 = v170;
        }
        else
        {
          int64_t v170 = 0;
          v171 = v45;
        }
        if ((int)v170 < (int)v27)
        {
          float64x2_t v179 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v167, 0);
          v169.f64[1] = v168;
          do
          {
            float64x2_t v180 = vcvtq_f64_f32(v21[v170]);
            float64x2_t v181 = vmlaq_f64(vmulq_f64(v169, (float64x2_t)vextq_s8((int8x16_t)v180, (int8x16_t)v180, 8uLL)), v180, v179);
            if (v171) {
              float64x2_t v181 = vaddq_f64(v181, vmulq_n_f64(vcvtq_f64_f32(*v171), v46));
            }
            *(float32x2_t *)(v15 + 8 * v170++) = vcvt_f32_f64(v181);
            v171 += v35;
          }
          while (v27 != v170);
        }
        v45 += v200;
        v15 += 8 * v203;
      }
    }
    goto LABEL_164;
  }
  unint64_t v28 = 0;
  LODWORD(v26) = v40;
  uint64_t v31 = v36;
LABEL_30:
  if ((a11 & 2) != 0)
  {
    if ((int)v193 >= 1)
    {
      int v89 = 0;
      uint64_t v90 = 8 * v37;
      if (v28) {
        BOOL v91 = (int)v26 < 1;
      }
      else {
        BOOL v91 = 1;
      }
      char v92 = v91;
      uint64_t v93 = 8 * v31;
      uint64_t v94 = 8 * v32;
      do
      {
        if (v28) {
          uint64_t v95 = v28;
        }
        else {
          uint64_t v95 = v39;
        }
        if ((v92 & 1) == 0)
        {
          uint64_t v96 = 0;
          BOOL v97 = v39;
          do
          {
            *(void *)&v28[v96] = *v97;
            v96 += 8;
            BOOL v97 = (void *)((char *)v97 + v93);
          }
          while (8 * v26 != v96);
          uint64_t v95 = v28;
        }
        if ((int)v27 >= 1)
        {
          uint64_t v98 = 0;
          uint64_t v99 = v95 + 28;
          float v100 = v21;
          uint64_t v101 = v30;
          do
          {
            if ((int)v26 >= 4)
            {
              unint64_t v107 = 0;
              uint64_t v108 = 0;
              float64x2_t v103 = 0uLL;
              float64x2_t v104 = 0uLL;
              float64x2_t v105 = 0uLL;
              float64x2_t v106 = 0uLL;
              do
              {
                v109.f64[0] = *(float *)&v99[v107 - 24];
                float64x2_t v110 = vcvtq_f64_f32(v100[v107 / 8]);
                v111.f64[0] = -*(float *)&v99[v107 - 16];
                v109.f64[1] = -v109.f64[0];
                v112.f64[0] = -*(float *)&v99[v107 - 8];
                int8x16_t v113 = (int8x16_t)vmulq_f64(v109, v110);
                v114.f64[0] = -*(float *)&v99[v107];
                float64x2_t v115 = vcvtq_f64_f32(v100[v107 / 8 + 1]);
                v111.f64[1] = *(float *)&v99[v107 - 16];
                float64x2_t v116 = vmlaq_n_f64(vmulq_f64(v111, (float64x2_t)vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL)), v115, *(float *)&v99[v107 - 20]);
                float64x2_t v117 = vcvtq_f64_f32(v100[v107 / 8 + 2]);
                v112.f64[1] = *(float *)&v99[v107 - 8];
                float64x2_t v105 = vaddq_f64(v105, v116);
                float64x2_t v104 = vaddq_f64(v104, vmlaq_n_f64(vmulq_f64(v112, (float64x2_t)vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL)), v117, *(float *)&v99[v107 - 12]));
                float64x2_t v118 = vcvtq_f64_f32(v100[v107 / 8 + 3]);
                v114.f64[1] = *(float *)&v99[v107];
                float64x2_t v106 = vaddq_f64(v106, vmlaq_n_f64((float64x2_t)vextq_s8(v113, v113, 8uLL), v110, *(float *)&v95[v107]));
                float64x2_t v103 = vaddq_f64(v103, vmlaq_n_f64(vmulq_f64(v114, (float64x2_t)vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL)), v118, *(float *)&v99[v107 - 4]));
                v108 += 4;
                v107 += 32;
              }
              while (v108 <= (int)v26 - 4);
              int v102 = ((v26 - 4) & 0xFFFFFFFC) + 4;
            }
            else
            {
              int v102 = 0;
              float64x2_t v103 = 0uLL;
              float64x2_t v104 = 0uLL;
              float64x2_t v105 = 0uLL;
              float64x2_t v106 = 0uLL;
            }
            if (v102 < (int)v26)
            {
              uint64_t v119 = 8 * v102;
              do
              {
                v120.f64[0] = -*(float *)&v95[v119 + 4];
                float64x2_t v121 = vcvtq_f64_f32(v100[(unint64_t)v119 / 8]);
                v120.f64[1] = *(float *)&v95[v119 + 4];
                float64x2_t v106 = vaddq_f64(v106, vmlaq_n_f64(vmulq_f64(v120, (float64x2_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL)), v121, *(float *)&v95[v119]));
                ++v102;
                v119 += 8;
              }
              while ((int)v26 > v102);
            }
            float64x2_t v122 = vmulq_n_f64(vaddq_f64(v103, vaddq_f64(v104, vaddq_f64(v105, v106))), v38);
            if (v101) {
              float64x2_t v122 = vaddq_f64(v122, vmulq_n_f64(vcvtq_f64_f32(*v101), v188));
            }
            *(float32x2_t *)(v15 + 8 * v98++) = vcvt_f32_f64(v122);
            v101 += v35;
            float v100 = (float32x2_t *)((char *)v100 + v94);
          }
          while (v98 != v27);
        }
        ++v89;
        BOOL v39 = (void *)((char *)v39 + v90);
        v30 += v200;
        v15 += 8 * v203;
      }
      while (v89 != v186);
    }
  }
  else if ((unint64_t)(8 * (int)v27) > 0x640)
  {
    uint64_t v191 = v37;
    uint64_t v197 = v31;
    bzero(v205, 0x1090uLL);
    if (v27 >= 0x109) {
      operator new[]();
    }
    int v123 = v193;
    int v124 = v27;
    double v125 = v188;
    double v126 = v189;
    if ((int)v193 >= 1)
    {
      uint64_t v127 = v30;
      v128 = v39;
      int v129 = 0;
      uint64_t v130 = 8 * v197;
      uint64_t v131 = 8 * (v19 >> 3);
      if (v28) {
        BOOL v132 = (int)v26 < 1;
      }
      else {
        BOOL v132 = 1;
      }
      uint64_t v185 = 8 * v203;
      uint64_t v187 = v191;
      char v133 = v132;
      char v184 = v133;
      uint64_t v183 = 8 * v197;
      uint64_t v201 = v200;
      uint64_t v134 = 8 * v35;
      do
      {
        if (v28) {
          double v135 = v28;
        }
        else {
          double v135 = v128;
        }
        v192 = v127;
        v198 = v128;
        if ((v184 & 1) == 0)
        {
          uint64_t v136 = 0;
          do
          {
            *(void *)&v28[v136] = *v128;
            v136 += 8;
            v128 = (void *)((char *)v128 + v130);
          }
          while (8 * v26 != v136);
          double v135 = v28;
        }
        if (v124 >= 1)
        {
          int v204 = v129;
          bzero(v205, 16 * v27);
          uint64_t v134 = 8 * v35;
          uint64_t v130 = v183;
          int v129 = v204;
          int v123 = v193;
          int v124 = v27;
          double v125 = v188;
          double v126 = v189;
        }
        if ((int)v26 >= 1)
        {
          uint64_t v137 = 0;
          v138 = v21;
          uint64_t v139 = (float *)&v21[2];
          do
          {
            float64x2_t v140 = vcvtq_f64_f32(*(float32x2_t *)&v135[8 * v137]);
            if ((int)v27 >= 4)
            {
              uint64_t v142 = 0;
              double v143 = (float64x2_t *)&v206;
              int v144 = v139;
              do
              {
                v145.f64[0] = *(v144 - 3);
                v146.f64[0] = *(v144 - 1);
                v145.f64[1] = -v145.f64[0];
                int8x16_t v147 = (int8x16_t)vmulq_f64(v145, v140);
                v146.f64[1] = -v146.f64[0];
                int8x16_t v148 = (int8x16_t)vmulq_f64(v146, v140);
                v149.f64[0] = v144[1];
                v150.f64[0] = v144[3];
                v149.f64[1] = -v149.f64[0];
                int8x16_t v151 = (int8x16_t)vmulq_f64(v149, v140);
                float64x2_t v152 = vaddq_f64(v143[-1], vmlaq_n_f64((float64x2_t)vextq_s8(v148, v148, 8uLL), v140, *(v144 - 2)));
                v150.f64[1] = -v150.f64[0];
                float64x2_t v153 = vaddq_f64(*v143, vmlaq_n_f64((float64x2_t)vextq_s8(v151, v151, 8uLL), v140, *v144));
                int8x16_t v154 = (int8x16_t)vmulq_f64(v150, v140);
                float64x2_t v155 = vaddq_f64(v143[1], vmlaq_n_f64((float64x2_t)vextq_s8(v154, v154, 8uLL), v140, v144[2]));
                v143[-2] = vaddq_f64(v143[-2], vmlaq_n_f64((float64x2_t)vextq_s8(v147, v147, 8uLL), v140, *(v144 - 4)));
                v143[-1] = v152;
                *double v143 = v153;
                v143[1] = v155;
                v143 += 4;
                v142 += 4;
                v144 += 8;
              }
              while (v142 <= (int)v27 - 4);
              uint64_t v141 = v142;
            }
            else
            {
              uint64_t v141 = 0;
            }
            if ((int)v141 < v124)
            {
              float64x2_t v156 = (float64x2_t)vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL);
              uint64_t v157 = v27 - v141;
              uint64_t v158 = v141;
              v159 = (float64x2_t *)&v205[2 * v141];
              do
              {
                v160.f64[0] = -v138[v158].f32[1];
                v160.f64[1] = v138[v158].f32[1];
                float64x2_t *v159 = vaddq_f64(*v159, vmlaq_n_f64(vmulq_f64(v156, v160), v140, v138[v158].f32[0]));
                ++v159;
                ++v158;
                --v157;
              }
              while (v157);
            }
            ++v137;
            uint64_t v139 = (float *)((char *)v139 + v131);
            v138 = (float32x2_t *)((char *)v138 + v131);
          }
          while (v137 != v26);
        }
        if (v192)
        {
          if (v124 >= 1)
          {
            uint64_t v161 = 0;
            v162 = v192;
            do
            {
              *(float32x2_t *)(v15 + 8 * v161) = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v205[2 * v161], v126), vmulq_n_f64(vcvtq_f64_f32(*v162), v125)));
              ++v161;
              v162 = (float32x2_t *)((char *)v162 + v134);
            }
            while (v27 != v161);
          }
        }
        else if ((int)v27 >= 1)
        {
          for (uint64_t k = 0; k != v27; ++k)
            *(float32x2_t *)(v15 + 8 * k) = vcvt_f32_f64(vmulq_n_f64(*(float64x2_t *)&v205[2 * k], v126));
        }
        ++v129;
        v128 = &v198[v187];
        uint64_t v127 = &v192[v201];
        v15 += v185;
      }
      while (v129 != v123);
    }
  }
  else if ((int)v186 >= 1)
  {
    int v48 = 0;
    uint64_t v49 = 8 * v37;
    uint64_t v50 = 8 * v31;
    if (v28) {
      BOOL v51 = (int)v26 < 1;
    }
    else {
      BOOL v51 = 1;
    }
    uint64_t v52 = 8 * v32;
    char v53 = v51;
    do
    {
      if (v28) {
        uint64_t v54 = v28;
      }
      else {
        uint64_t v54 = v39;
      }
      if ((v53 & 1) == 0)
      {
        uint64_t v55 = 0;
        char v56 = v39;
        do
        {
          *(void *)&v28[v55] = *v56;
          v55 += 8;
          char v56 = (void *)((char *)v56 + v50);
        }
        while (8 * v26 != v55);
        uint64_t v54 = v28;
      }
      if ((int)v27 >= 4)
      {
        uint64_t v57 = 0;
        uint64_t v59 = v21 + 2;
        uint64_t v58 = v30;
        do
        {
          float64x2_t v60 = 0uLL;
          if ((int)v26 < 1)
          {
            float64x2_t v64 = 0uLL;
            float64x2_t v65 = 0uLL;
            float64x2_t v66 = 0uLL;
          }
          else
          {
            uint64_t v61 = (float *)(v54 + 4);
            int v62 = v59;
            uint64_t v63 = v26;
            float64x2_t v64 = 0uLL;
            float64x2_t v65 = 0uLL;
            float64x2_t v66 = 0uLL;
            do
            {
              double v67 = *(v61 - 1);
              v68.f64[0] = -*v61;
              float64x2_t v69 = vcvtq_f64_f32(v62[-2]);
              v68.f64[1] = *v61;
              float64x2_t v70 = vmlaq_n_f64(vmulq_f64(v68, (float64x2_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL)), v69, v67);
              float64x2_t v71 = vcvtq_f64_f32(v62[-1]);
              float64x2_t v64 = vaddq_f64(v64, v70);
              float64x2_t v72 = vmlaq_n_f64(vmulq_f64(v68, (float64x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL)), v71, v67);
              float64x2_t v73 = vcvtq_f64_f32(*v62);
              float64x2_t v65 = vaddq_f64(v65, v72);
              float64x2_t v74 = vmlaq_n_f64(vmulq_f64(v68, (float64x2_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL)), v73, v67);
              float64x2_t v75 = vcvtq_f64_f32(v62[1]);
              float64x2_t v66 = vaddq_f64(v66, v74);
              float64x2_t v60 = vaddq_f64(v60, vmlaq_n_f64(vmulq_f64(v68, (float64x2_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL)), v75, v67));
              int v62 = (float32x2_t *)((char *)v62 + v52);
              v61 += 2;
              --v63;
            }
            while (v63);
          }
          float64x2_t v76 = vmulq_n_f64(v64, v38);
          uint64_t v77 = 8 * v57;
          float64x2_t v78 = vmulq_n_f64(v65, v38);
          if (v58)
          {
            *(float32x2_t *)(v15 + 8 * v57) = vcvt_f32_f64(vaddq_f64(v76, vmulq_n_f64(vcvtq_f64_f32(*v58), v188)));
            *(float32x2_t *)(v15 + (v77 | 8)) = vcvt_f32_f64(vaddq_f64(v78, vmulq_n_f64(vcvtq_f64_f32(v58[v35]), v188)));
            *(float32x2_t *)(v15 + (v77 | 0x10)) = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(v66, v38), vmulq_n_f64(vcvtq_f64_f32(v58[2 * v35]), v188)));
            float64x2_t v79 = vaddq_f64(vmulq_n_f64(v60, v38), vmulq_n_f64(vcvtq_f64_f32(v58[3 * v35]), v188));
          }
          else
          {
            *(float32x2_t *)(v15 + 8 * v57) = vcvt_f32_f64(v76);
            *(float32x2_t *)(v15 + (v77 | 8)) = vcvt_f32_f64(v78);
            *(float32x2_t *)(v15 + (v77 | 0x10)) = vcvt_f32_f64(vmulq_n_f64(v66, v38));
            float64x2_t v79 = vmulq_n_f64(v60, v38);
          }
          *(float32x2_t *)(v15 + (v77 | 0x18)) = vcvt_f32_f64(v79);
          v57 += 4;
          v58 += 4 * v35;
          v59 += 4;
        }
        while (v57 <= (int)v27 - 4);
        uint64_t v57 = v57;
      }
      else
      {
        uint64_t v57 = 0;
        uint64_t v58 = v30;
      }
      if ((int)v57 < (int)v27)
      {
        double v80 = (float *)(v54 + 4);
        double v81 = &v21[v57];
        do
        {
          float64x2_t v82 = 0uLL;
          if ((int)v26 >= 1)
          {
            uint64_t v83 = v81;
            double v84 = v80;
            uint64_t v85 = v26;
            do
            {
              v86.f64[0] = -*v84;
              float64x2_t v87 = vcvtq_f64_f32(*v83);
              v86.f64[1] = *v84;
              float64x2_t v82 = vaddq_f64(v82, vmlaq_n_f64(vmulq_f64(v86, (float64x2_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL)), v87, *(v84 - 1)));
              v84 += 2;
              uint64_t v83 = (float32x2_t *)((char *)v83 + v52);
              --v85;
            }
            while (v85);
          }
          float64x2_t v88 = vmulq_n_f64(v82, v38);
          if (v58) {
            float64x2_t v88 = vaddq_f64(v88, vmulq_n_f64(vcvtq_f64_f32(*v58), v188));
          }
          *(float32x2_t *)(v15 + 8 * v57++) = vcvt_f32_f64(v88);
          v58 += v35;
          ++v81;
        }
        while (v57 != v194);
      }
      ++v48;
      BOOL v39 = (void *)((char *)v39 + v49);
      v30 += v200;
      v15 += 8 * v203;
    }
    while (v48 != v193);
  }
LABEL_164:
  uint64_t result = (uint64_t)v207;
  if (v207 != v209)
  {
    if (v207) {
      return MEMORY[0x22A641760]();
    }
  }
  return result;
}

void sub_225EE483C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v13 = STACK[0x1158];
  if (STACK[0x1158] != a12)
  {
    if (v13) {
      MEMORY[0x22A641760](v13, 0x1000C8000313F17);
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *cv::GEMMBlockMul_32fc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = MEMORY[0x270FA5388](a1, a2);
  unint64_t v90 = v10;
  unint64_t v91 = v11;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  unint64_t v17 = v16;
  unint64_t v18 = (void *)v9;
  int v21 = *v19;
  int v20 = v19[1];
  int v23 = v22[1];
  uint64_t v24 = *v22;
  bzero(v92, 0x1050uLL);
  uint64_t v25 = v17 >> 3;
  if (a9)
  {
    if (v20 >= 0x209) {
      operator new[]();
    }
    uint64_t v27 = 1;
    uint64_t v26 = v92;
  }
  else
  {
    uint64_t v26 = 0;
    int v20 = v21;
    uint64_t v27 = v25;
    uint64_t v25 = 1;
  }
  unint64_t v28 = v90 >> 3;
  unint64_t v29 = v91 >> 4;
  if ((a9 & 2) != 0)
  {
    if (v23 >= 1)
    {
      int v66 = 0;
      uint64_t v67 = 8 * v27;
      if (v26) {
        BOOL v68 = v20 < 1;
      }
      else {
        BOOL v68 = 1;
      }
      char v69 = v68;
      uint64_t v70 = 8 * v28;
      do
      {
        if (v26) {
          float64x2_t v71 = v26;
        }
        else {
          float64x2_t v71 = v18;
        }
        if ((v69 & 1) == 0)
        {
          uint64_t v72 = 0;
          float64x2_t v73 = v18;
          do
          {
            *(void *)&v26[v72] = *v73;
            v72 += 8;
            v73 += v25;
          }
          while (8 * v20 != v72);
          float64x2_t v71 = v26;
        }
        if ((int)v24 >= 1)
        {
          uint64_t v74 = 0;
          float64x2_t v75 = v71 + 8;
          float64x2_t v76 = v15;
          do
          {
            float64x2_t v77 = 0uLL;
            float64x2_t v78 = 0uLL;
            if ((a9 & 0x10) != 0) {
              float64x2_t v78 = *(float64x2_t *)(v13 + 16 * v74);
            }
            if (v20 >= 2)
            {
              unint64_t v80 = 0;
              uint64_t v81 = 0;
              do
              {
                v82.f64[0] = -*(float *)&v75[v80 - 4];
                v83.f64[0] = -*(float *)&v75[v80 + 4];
                float64x2_t v84 = vcvtq_f64_f32(v76[v80 / 8]);
                v82.f64[1] = *(float *)&v75[v80 - 4];
                float64x2_t v85 = vcvtq_f64_f32(v76[v80 / 8 + 1]);
                v83.f64[1] = *(float *)&v75[v80 + 4];
                float64x2_t v78 = vaddq_f64(v78, vmlaq_n_f64(vmulq_f64(v82, (float64x2_t)vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL)), v84, *(float *)&v71[v80]));
                float64x2_t v77 = vaddq_f64(v77, vmlaq_n_f64(vmulq_f64(v83, (float64x2_t)vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL)), v85, *(float *)&v75[v80]));
                v81 += 2;
                v80 += 16;
              }
              while (v81 <= v20 - 2);
              signed int v79 = ((v20 - 2) & 0xFFFFFFFE) + 2;
            }
            else
            {
              signed int v79 = 0;
            }
            if (v79 < v20)
            {
              uint64_t v86 = 8 * v79;
              do
              {
                v87.f64[0] = -*(float *)&v71[v86 + 4];
                float64x2_t v88 = vcvtq_f64_f32(v76[(unint64_t)v86 / 8]);
                v87.f64[1] = *(float *)&v71[v86 + 4];
                float64x2_t v78 = vaddq_f64(v78, vmlaq_n_f64(vmulq_f64(v87, (float64x2_t)vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL)), v88, *(float *)&v71[v86]));
                ++v79;
                v86 += 8;
              }
              while (v20 > v79);
            }
            *(float64x2_t *)(v13 + 16 * v74++) = vaddq_f64(v77, v78);
            float64x2_t v76 = (float32x2_t *)((char *)v76 + v70);
          }
          while (v74 != v24);
        }
        ++v66;
        unint64_t v18 = (void *)((char *)v18 + v67);
        v13 += 16 * v29;
      }
      while (v66 != v23);
    }
  }
  else if (v23 >= 1)
  {
    int v30 = 0;
    uint64_t v31 = 8 * v27;
    if (v26) {
      BOOL v32 = v20 < 1;
    }
    else {
      BOOL v32 = 1;
    }
    char v33 = v32;
    uint64_t v34 = 8 * v25;
    uint64_t v35 = 8 * v28;
    do
    {
      if (v26) {
        uint64_t v36 = v26;
      }
      else {
        uint64_t v36 = v18;
      }
      if ((v33 & 1) == 0)
      {
        uint64_t v37 = 0;
        double v38 = v18;
        do
        {
          *(void *)&v26[v37] = *v38;
          v37 += 8;
          double v38 = (void *)((char *)v38 + v34);
        }
        while (8 * v20 != v37);
        uint64_t v36 = v26;
      }
      if ((int)v24 >= 4)
      {
        uint64_t v39 = 0;
        int v40 = v15 + 2;
        do
        {
          float64x2_t v41 = 0uLL;
          uint64_t v42 = 16 * v39;
          float64x2_t v43 = 0uLL;
          float64x2_t v44 = 0uLL;
          float64x2_t v45 = 0uLL;
          if ((a9 & 0x10) != 0)
          {
            float64x2_t v41 = *(float64x2_t *)(v13 + 16 * v39);
            float64x2_t v43 = *(float64x2_t *)(v13 + (v42 | 0x10));
            float64x2_t v44 = *(float64x2_t *)(v13 + (v42 | 0x20));
            float64x2_t v45 = *(float64x2_t *)(v13 + (v42 | 0x30));
          }
          if (v20 >= 1)
          {
            double v46 = (float *)(v36 + 4);
            uint64_t v47 = v40;
            uint64_t v48 = v20;
            do
            {
              double v49 = *(v46 - 1);
              v50.f64[0] = -*v46;
              float64x2_t v51 = vcvtq_f64_f32(v47[-2]);
              v50.f64[1] = *v46;
              float64x2_t v52 = vmlaq_n_f64(vmulq_f64(v50, (float64x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL)), v51, v49);
              float64x2_t v53 = vcvtq_f64_f32(v47[-1]);
              float64x2_t v41 = vaddq_f64(v41, v52);
              float64x2_t v54 = vmlaq_n_f64(vmulq_f64(v50, (float64x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL)), v53, v49);
              float64x2_t v55 = vcvtq_f64_f32(*v47);
              float64x2_t v43 = vaddq_f64(v43, v54);
              float64x2_t v56 = vmlaq_n_f64(vmulq_f64(v50, (float64x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL)), v55, v49);
              float64x2_t v57 = vcvtq_f64_f32(v47[1]);
              float64x2_t v44 = vaddq_f64(v44, v56);
              float64x2_t v45 = vaddq_f64(v45, vmlaq_n_f64(vmulq_f64(v50, (float64x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL)), v57, v49));
              uint64_t v47 = (float32x2_t *)((char *)v47 + v35);
              v46 += 2;
              --v48;
            }
            while (v48);
          }
          *(float64x2_t *)(v13 + 16 * v39) = v41;
          *(float64x2_t *)(v13 + (v42 | 0x10)) = v43;
          *(float64x2_t *)(v13 + (v42 | 0x20)) = v44;
          *(float64x2_t *)(v13 + (v42 | 0x30)) = v45;
          v39 += 4;
          v40 += 4;
        }
        while (v39 <= v24 - 4);
        uint64_t v39 = v39;
      }
      else
      {
        uint64_t v39 = 0;
      }
      if ((int)v39 < (int)v24)
      {
        uint64_t v58 = (float *)(v36 + 4);
        uint64_t v59 = &v15[v39];
        do
        {
          float64x2_t v60 = 0uLL;
          if ((a9 & 0x10) != 0) {
            float64x2_t v60 = *(float64x2_t *)(v13 + 16 * v39);
          }
          if (v20 >= 1)
          {
            uint64_t v61 = v59;
            int v62 = v58;
            uint64_t v63 = v20;
            do
            {
              v64.f64[0] = -*v62;
              float64x2_t v65 = vcvtq_f64_f32(*v61);
              v64.f64[1] = *v62;
              float64x2_t v60 = vaddq_f64(v60, vmlaq_n_f64(vmulq_f64(v64, (float64x2_t)vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), v65, *(v62 - 1)));
              v62 += 2;
              uint64_t v61 = (float32x2_t *)((char *)v61 + v35);
              --v63;
            }
            while (v63);
          }
          *(float64x2_t *)(v13 + 16 * v39++) = v60;
          ++v59;
        }
        while (v39 != v24);
      }
      ++v30;
      unint64_t v18 = (void *)((char *)v18 + v31);
      v13 += 16 * v29;
    }
    while (v30 != v23);
  }
  return v92;
}

void sub_225EE4D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12 != a9)
  {
    if (a12) {
      MEMORY[0x22A641760]();
    }
  }
  _Unwind_Resume(exception_object);
}

float32x2_t *cv::GEMMStore_32fc(float32x2_t *result, unint64_t a2, float64x2_t *a3, unint64_t a4, float32x4_t *a5, unint64_t a6, unsigned int *a7, char a8, double a9, double a10)
{
  unsigned int v10 = a7[1];
  uint64_t v11 = a2 >> 3;
  if ((a8 & 4) != 0) {
    uint64_t v12 = a2 >> 3;
  }
  else {
    uint64_t v12 = 1;
  }
  if ((a8 & 4) != 0) {
    uint64_t v11 = 1;
  }
  if (result) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (result) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v10)
  {
    uint64_t v15 = *a7;
    unint64_t v16 = (v15 - 4);
    uint64_t v17 = 8 * v14;
    uint64_t v18 = 4 * v13;
    unint64_t v19 = a5 + 1;
    uint64_t v20 = 8 * (a6 >> 3);
    int v21 = a3 + 2;
    uint64_t v22 = 16 * (a4 >> 4);
    uint64_t v23 = v13;
    do
    {
      unint64_t v24 = 0;
      if (result)
      {
        if ((int)v15 < 4)
        {
          uint64_t v25 = result;
        }
        else
        {
          unint64_t v28 = v21;
          unint64_t v29 = v19;
          int v30 = result;
          do
          {
            uint64_t v31 = v30;
            float32x2_t v32 = *v30;
            char v33 = &v30[v23];
            v29[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(v28[-2], a9), vmulq_n_f64(vcvtq_f64_f32(v32), a10))), vaddq_f64(vmulq_n_f64(v28[-1], a9), vmulq_n_f64(vcvtq_f64_f32(*v33), a10)));
            uint64_t v34 = &v33[v23];
            float32x2_t v35 = *v34;
            uint64_t v36 = &v34[v23];
            float64x2_t v38 = *v28;
            float64x2_t v37 = v28[1];
            v28 += 4;
            v24 += 4;
            *unint64_t v29 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(v38, a9), vmulq_n_f64(vcvtq_f64_f32(v35), a10))), vaddq_f64(vmulq_n_f64(v37, a9), vmulq_n_f64(vcvtq_f64_f32(*v36), a10)));
            v29 += 2;
            int v30 = &v36[v23];
          }
          while (v24 <= v16);
          uint64_t v25 = &v31[v18];
          unint64_t v24 = v24;
        }
        if ((int)v24 < (int)v15)
        {
          do
          {
            *(float32x2_t *)&a5->f32[2 * v24] = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(a3[v24], a9), vmulq_n_f64(vcvtq_f64_f32(*v25), a10)));
            ++v24;
            uint64_t v25 = (float32x2_t *)((char *)v25 + v23 * 8);
          }
          while (v15 != v24);
        }
      }
      else
      {
        if ((int)v15 >= 4)
        {
          uint64_t v26 = 0;
          for (unint64_t i = 0; i <= v16; i += 4)
          {
            a5[v26] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(*(float64x2_t *)((char *)a3 + v24), a9)), vmulq_n_f64(*(float64x2_t *)((char *)a3 + v24 + 16), a9));
            v19[v26] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(*(float64x2_t *)((char *)v21 + v24), a9)), vmulq_n_f64(*(float64x2_t *)((char *)v21 + v24 + 16), a9));
            v26 += 2;
            v24 += 64;
          }
          unint64_t v24 = i;
        }
        if ((int)v24 < (int)v15)
        {
          do
          {
            *(float32x2_t *)&a5->f32[2 * v24] = vcvt_f32_f64(vmulq_n_f64(a3[v24], a9));
            ++v24;
          }
          while (v15 != v24);
        }
      }
      uint64_t result = (float32x2_t *)((char *)result + v17);
      unint64_t v19 = (float32x4_t *)((char *)v19 + v20);
      int v21 = (float64x2_t *)((char *)v21 + v22);
      a5 = (float32x4_t *)((char *)a5 + v20);
      a3 = (float64x2_t *)((char *)a3 + v22);
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t cv::GEMMSingleMul_64fc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, unsigned int *a10, char a11)
{
  uint64_t v11 = MEMORY[0x270FA5388](a1, a2);
  unint64_t v13 = v12;
  uint64_t v15 = v14;
  unint64_t v17 = v16;
  unint64_t v19 = v18;
  unint64_t v21 = v20;
  unint64_t v202 = v22;
  double v203 = v24;
  double v204 = v23;
  unint64_t v26 = v25;
  v207 = (_OWORD *)v11;
  uint64_t v27 = a9[1];
  int v198 = *a9;
  uint64_t v28 = *a10;
  uint64_t v201 = (int)a10[1];
  uint64_t v205 = a10[1];
  int v206 = *a10;
  bzero(v217, 0x1090uLL);
  unint64_t v29 = v19;
  v215 = v217;
  uint64_t v216 = 264;
  unint64_t v30 = v26 >> 4;
  unint64_t v31 = v21;
  unint64_t v32 = v21 >> 4;
  uint64_t v33 = v17 >> 4;
  if ((a11 & 4) != 0) {
    uint64_t v34 = v17 >> 4;
  }
  else {
    uint64_t v34 = 1;
  }
  if ((a11 & 4) != 0) {
    uint64_t v33 = 1;
  }
  if (v29) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  if (!v29) {
    uint64_t v33 = 0;
  }
  uint64_t v209 = v33;
  unint64_t v211 = v13 >> 4;
  if (a11)
  {
    uint64_t v37 = 1;
    if (v26 < 0x20)
    {
      uint64_t v36 = v26 >> 4;
      int v39 = v27;
      double v38 = v204;
    }
    else
    {
      double v38 = v204;
      int v40 = v217;
      if ((int)v27 >= 2)
      {
        if (v27 >= 0x109)
        {
          uint64_t v216 = v27;
          operator new[]();
        }
        uint64_t v37 = 1;
        goto LABEL_30;
      }
      uint64_t v36 = v26 >> 4;
      int v39 = v27;
    }
  }
  else
  {
    uint64_t v36 = 1;
    uint64_t v37 = v26 >> 4;
    double v38 = v204;
    int v39 = v198;
  }
  if (v39 == 1)
  {
    unint64_t v199 = v21 >> 4;
    bzero(v214, 0x1090uLL);
    if (v26 < 0x20)
    {
      double v46 = v29;
      double v47 = v203;
      double v41 = v204;
      uint64_t v42 = v202;
      unint64_t v43 = (int)v28;
      float64x2_t v44 = v207;
      uint64_t v45 = v205;
    }
    else
    {
      BOOL v53 = (int)v27 < 2;
      double v41 = v204;
      uint64_t v42 = v202;
      unint64_t v43 = (int)v28;
      float64x2_t v44 = v207;
      uint64_t v45 = v205;
      if (v53)
      {
        double v46 = v29;
        double v47 = v203;
      }
      else
      {
        if (v205 >= 0x109)
        {
          uint64_t v216 = v201;
          operator new[]();
        }
        double v46 = v29;
        double v47 = v203;
        if ((int)v205 >= 1)
        {
          uint64_t v48 = 0;
          do
          {
            *(_OWORD *)&v217[v48] = *v44;
            v48 += 16;
            v44 += v30;
          }
          while (16 * v205 != v48);
        }
        float64x2_t v44 = v217;
      }
    }
    if (v31 >= 0x20)
    {
      if (v43 > 0x108) {
        operator new[]();
      }
      if ((int)v43 >= 1)
      {
        float64x2_t v174 = v214;
        unint64_t v175 = v43;
        do
        {
          *v174++ = *v42;
          v42 += v199;
          --v175;
        }
        while (v175);
      }
      uint64_t v42 = v214;
    }
    if ((int)v45 >= 1)
    {
      for (uint64_t i = 0; i != v45; ++i)
      {
        float64x2_t v177 = (double *)&v44[i];
        double v178 = *v177 * v41;
        v179.f64[0] = v177[1] * v41;
        if ((int)v43 >= 2)
        {
          uint64_t v182 = 0;
          int64_t v180 = 0;
          float64x2_t v183 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v178, 0);
          v184.f64[0] = v177[1] * v41;
          v184.f64[1] = -v179.f64[0];
          float64x2_t v181 = v46;
          do
          {
            float64x2_t v185 = (float64x2_t)v42[v182];
            float64x2_t v186 = (float64x2_t)v42[v182 + 1];
            int8x16_t v187 = (int8x16_t)vmulq_f64(v185, v184);
            float64x2_t v188 = vmlaq_f64((float64x2_t)vextq_s8(v187, v187, 8uLL), v185, v183);
            int8x16_t v189 = (int8x16_t)vmulq_f64(v186, v184);
            float64x2_t v190 = vmlaq_f64((float64x2_t)vextq_s8(v189, v189, 8uLL), v186, v183);
            if (v181)
            {
              *(float64x2_t *)(v15 + v182 * 16) = vaddq_f64(v188, vmulq_n_f64(*v181, v47));
              float64x2_t v190 = vaddq_f64(v190, vmulq_n_f64(v181[v35], v47));
            }
            else
            {
              *(float64x2_t *)(v15 + v182 * 16) = v188;
            }
            *(float64x2_t *)(v15 + v182 * 16 + 16) = v190;
            v180 += 2;
            v182 += 2;
            v181 += 2 * v35;
          }
          while (v180 <= (uint64_t)(v43 - 2));
          int64_t v180 = v180;
        }
        else
        {
          int64_t v180 = 0;
          float64x2_t v181 = v46;
        }
        if ((int)v180 < (int)v28)
        {
          float64x2_t v191 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v178, 0);
          do
          {
            float64x2_t v192 = (float64x2_t)v42[v180];
            v179.f64[1] = -v179.f64[0];
            int8x16_t v193 = (int8x16_t)vmulq_f64(v192, v179);
            float64x2_t v194 = vmlaq_f64((float64x2_t)vextq_s8(v193, v193, 8uLL), v192, v191);
            if (v181) {
              float64x2_t v194 = vaddq_f64(v194, vmulq_n_f64(*v181, v47));
            }
            *(float64x2_t *)(v15 + 16 * v180++) = v194;
            v181 += v35;
          }
          while (v28 != v180);
        }
        v46 += v209;
        v15 += 16 * v211;
      }
    }
    goto LABEL_164;
  }
  int v40 = 0;
  LODWORD(v27) = v39;
  unint64_t v30 = v36;
LABEL_30:
  v213 = v40;
  if ((a11 & 2) != 0)
  {
    char v92 = v207;
    if ((int)v205 >= 1)
    {
      int v93 = 0;
      uint64_t v94 = 16 * v37;
      if (v40) {
        BOOL v95 = (int)v27 < 1;
      }
      else {
        BOOL v95 = 1;
      }
      char v96 = v95;
      uint64_t v97 = 16 * v32;
      do
      {
        if (v40) {
          uint64_t v98 = v40;
        }
        else {
          uint64_t v98 = v92;
        }
        if ((v96 & 1) == 0)
        {
          uint64_t v99 = 0;
          float v100 = v92;
          do
          {
            *(_OWORD *)&v40[v99] = *v100;
            v99 += 16;
            v100 += v30;
          }
          while (16 * v27 != v99);
          uint64_t v98 = v40;
        }
        if ((int)v28 >= 1)
        {
          uint64_t v101 = 0;
          int v102 = v98 + 56;
          float64x2_t v103 = v202;
          float64x2_t v104 = v29;
          do
          {
            if ((int)v27 >= 4)
            {
              unint64_t v110 = 0;
              uint64_t v111 = 0;
              float64x2_t v106 = 0uLL;
              float64x2_t v107 = 0uLL;
              float64x2_t v108 = 0uLL;
              float64x2_t v109 = 0uLL;
              do
              {
                v112.f64[0] = *(float64_t *)&v102[v110 - 48];
                v113.f64[0] = *(float64_t *)&v102[v110 - 32];
                v114.f64[0] = *(float64_t *)&v102[v110 - 16];
                v115.f64[0] = *(float64_t *)&v102[v110];
                v112.f64[1] = -v112.f64[0];
                float64x2_t v116 = (float64x2_t)v103[v110 / 0x10];
                float64x2_t v117 = (float64x2_t)v103[v110 / 0x10 + 1];
                int8x16_t v118 = (int8x16_t)vmulq_f64(v116, v112);
                v113.f64[1] = -v113.f64[0];
                int8x16_t v119 = (int8x16_t)vmulq_f64(v117, v113);
                float64x2_t v109 = vaddq_f64(v109, vmlaq_n_f64((float64x2_t)vextq_s8(v118, v118, 8uLL), v116, *(double *)&v98[v110]));
                v114.f64[1] = -v114.f64[0];
                float64x2_t v120 = (float64x2_t)v103[v110 / 0x10 + 2];
                float64x2_t v121 = (float64x2_t)v103[v110 / 0x10 + 3];
                int8x16_t v122 = (int8x16_t)vmulq_f64(v120, v114);
                float64x2_t v108 = vaddq_f64(v108, vmlaq_n_f64((float64x2_t)vextq_s8(v119, v119, 8uLL), v117, *(double *)&v102[v110 - 40]));
                float64x2_t v123 = vmlaq_n_f64((float64x2_t)vextq_s8(v122, v122, 8uLL), v120, *(double *)&v102[v110 - 24]);
                v115.f64[1] = -v115.f64[0];
                int8x16_t v124 = (int8x16_t)vmulq_f64(v121, v115);
                float64x2_t v107 = vaddq_f64(v107, v123);
                float64x2_t v106 = vaddq_f64(v106, vmlaq_n_f64((float64x2_t)vextq_s8(v124, v124, 8uLL), v121, *(double *)&v102[v110 - 8]));
                v111 += 4;
                v110 += 64;
              }
              while (v111 <= (int)v27 - 4);
              int v105 = ((v27 - 4) & 0xFFFFFFFC) + 4;
            }
            else
            {
              int v105 = 0;
              float64x2_t v106 = 0uLL;
              float64x2_t v107 = 0uLL;
              float64x2_t v108 = 0uLL;
              float64x2_t v109 = 0uLL;
            }
            if (v105 < (int)v27)
            {
              uint64_t v125 = v105;
              do
              {
                v126.f64[0] = *(float64_t *)&v98[v125 * 16 + 8];
                float64x2_t v127 = (float64x2_t)v103[v125];
                v126.f64[1] = -v126.f64[0];
                int8x16_t v128 = (int8x16_t)vmulq_f64(v127, v126);
                float64x2_t v109 = vaddq_f64(v109, vmlaq_n_f64((float64x2_t)vextq_s8(v128, v128, 8uLL), v127, *(double *)&v98[v125 * 16]));
                ++v105;
                ++v125;
              }
              while ((int)v27 > v105);
            }
            float64x2_t v129 = vmulq_n_f64(vaddq_f64(v106, vaddq_f64(v107, vaddq_f64(v108, v109))), v38);
            if (v104) {
              float64x2_t v129 = vaddq_f64(v129, vmulq_n_f64(*v104, v203));
            }
            *(float64x2_t *)(v15 + 16 * v101++) = v129;
            v104 += v35;
            float64x2_t v103 = (_OWORD *)((char *)v103 + v97);
          }
          while (v101 != v28);
        }
        ++v93;
        char v92 = (_OWORD *)((char *)v92 + v94);
        v29 += v209;
        v15 += 16 * v211;
      }
      while (v93 != v201);
    }
  }
  else if ((unint64_t)(16 * (int)v28) > 0x640)
  {
    uint64_t v130 = v37;
    bzero(v214, 0x1090uLL);
    if (v28 >= 0x109) {
      operator new[]();
    }
    int v131 = v28;
    double v132 = v203;
    double v133 = v204;
    uint64_t v134 = v207;
    double v135 = v213;
    if ((int)v205 >= 1)
    {
      uint64_t v136 = v29;
      int v137 = 0;
      uint64_t v138 = 16 * v28;
      uint64_t v139 = 16 * (v21 >> 4);
      if (v213) {
        BOOL v140 = (int)v27 < 1;
      }
      else {
        BOOL v140 = 1;
      }
      uint64_t v200 = 16 * v211;
      char v141 = v140;
      char v197 = v141;
      uint64_t v142 = 16 * v35;
      uint64_t v196 = v209;
      do
      {
        if (v135) {
          double v143 = v135;
        }
        else {
          double v143 = v134;
        }
        v212 = v136;
        uint64_t v208 = v134;
        if ((v197 & 1) == 0)
        {
          uint64_t v144 = 0;
          do
          {
            v135[v144++] = *v134;
            v134 += v30;
          }
          while (v27 != v144);
          double v143 = v135;
        }
        if (v131 >= 1)
        {
          int v210 = v137;
          bzero(v214, 16 * v28);
          uint64_t v142 = 16 * v35;
          int v137 = v210;
          double v135 = v213;
          int v131 = v28;
          double v132 = v203;
          double v133 = v204;
        }
        if ((int)v27 >= 1)
        {
          uint64_t v145 = 0;
          float64x2_t v146 = v202;
          do
          {
            float64x2_t v147 = (float64x2_t)v143[v145];
            if ((int)v28 >= 4)
            {
              uint64_t v149 = 0;
              uint64_t v150 = 0;
              do
              {
                int8x16_t v151 = (float64x2_t *)&v214[v149 * 16 + 48];
                v152.f64[0] = *((float64_t *)&v146[v149] + 1);
                v153.f64[0] = *((float64_t *)&v146[v149 + 1] + 1);
                v152.f64[1] = -v152.f64[0];
                v153.f64[1] = -v153.f64[0];
                int8x16_t v154 = (int8x16_t)vmulq_f64(v147, v152);
                int8x16_t v155 = (int8x16_t)vmulq_f64(v147, v153);
                v156.f64[0] = *((float64_t *)&v146[v149 + 2] + 1);
                v156.f64[1] = -v156.f64[0];
                float64x2_t v157 = vaddq_f64(*(float64x2_t *)&v214[v149 * 16], vmlaq_n_f64((float64x2_t)vextq_s8(v154, v154, 8uLL), v147, *(double *)&v146[v149]));
                v154.i64[0] = *(void *)&v146[v149 + 3];
                v158.f64[0] = *((float64_t *)&v146[v149 + 3] + 1);
                int8x16_t v159 = (int8x16_t)vmulq_f64(v147, v156);
                float64x2_t v160 = vaddq_f64(*(float64x2_t *)&v214[v149 * 16 + 16], vmlaq_n_f64((float64x2_t)vextq_s8(v155, v155, 8uLL), v147, *(double *)&v146[v149 + 1]));
                float64x2_t v161 = vaddq_f64(*(float64x2_t *)&v214[v149 * 16 + 32], vmlaq_n_f64((float64x2_t)vextq_s8(v159, v159, 8uLL), v147, *(double *)&v146[v149 + 2]));
                v151[-3] = v157;
                v151[-2] = v160;
                v158.f64[1] = -v158.f64[0];
                int8x16_t v162 = (int8x16_t)vmulq_f64(v147, v158);
                float64x2_t v163 = vaddq_f64(*(float64x2_t *)&v214[v149 * 16 + 48], vmlaq_n_f64((float64x2_t)vextq_s8(v162, v162, 8uLL), v147, *(double *)v154.i64));
                v151[-1] = v161;
                *int8x16_t v151 = v163;
                v150 += 4;
                v149 += 4;
              }
              while (v150 <= (int)v28 - 4);
              uint64_t v148 = v150;
            }
            else
            {
              uint64_t v148 = 0;
            }
            if ((int)v148 < v131)
            {
              uint64_t v164 = v28 - v148;
              uint64_t v165 = v148;
              do
              {
                double v166 = *(double *)&v146[v165];
                double v167 = *((double *)&v146[v165] + 1);
                double v168 = v166 * v147.f64[0] - v167 * v147.f64[1];
                float64x2_t v169 = (double *)&v214[v165 * 16];
                float64_t v170 = v147.f64[0] * v167 + v166 * v147.f64[1] + *(double *)&v214[v165 * 16 + 8];
                *float64x2_t v169 = *(double *)&v214[v165 * 16] + v168;
                v169[1] = v170;
                ++v165;
                --v164;
              }
              while (v164);
            }
            ++v145;
            float64x2_t v146 = (_OWORD *)((char *)v146 + v139);
          }
          while (v145 != v27);
        }
        if (v212)
        {
          if (v131 >= 1)
          {
            uint64_t v171 = 0;
            uint64_t v172 = v212;
            do
            {
              *(float64x2_t *)(v15 + v171) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v214[v171], v133), vmulq_n_f64(*v172, v132));
              v171 += 16;
              uint64_t v172 = (float64x2_t *)((char *)v172 + v142);
            }
            while (v138 != v171);
          }
        }
        else if ((int)v28 >= 1)
        {
          uint64_t v173 = 0;
          do
          {
            *(float64x2_t *)(v15 + v173) = vmulq_n_f64(*(float64x2_t *)&v214[v173], v133);
            v173 += 16;
          }
          while (v138 != v173);
        }
        ++v137;
        uint64_t v134 = &v208[v130];
        uint64_t v136 = &v212[v196];
        v15 += v200;
      }
      while (v137 != v205);
    }
  }
  else
  {
    double v49 = v207;
    if ((int)v201 >= 1)
    {
      int v50 = 0;
      uint64_t v51 = 16 * v37;
      uint64_t v52 = 16 * v30;
      if (v40) {
        BOOL v53 = (int)v27 < 1;
      }
      else {
        BOOL v53 = 1;
      }
      uint64_t v54 = 16 * v32;
      char v55 = v53;
      do
      {
        if (v40) {
          float64x2_t v56 = v40;
        }
        else {
          float64x2_t v56 = v49;
        }
        if ((v55 & 1) == 0)
        {
          uint64_t v57 = 0;
          uint64_t v58 = v49;
          do
          {
            *(_OWORD *)&v40[v57] = *v58;
            v57 += 16;
            uint64_t v58 = (_OWORD *)((char *)v58 + v52);
          }
          while (16 * v27 != v57);
          float64x2_t v56 = v40;
        }
        if ((int)v28 >= 4)
        {
          uint64_t v59 = 0;
          uint64_t v61 = (float64x2_t *)(v202 + 2);
          float64x2_t v60 = v29;
          do
          {
            float64x2_t v62 = 0uLL;
            if ((int)v27 < 1)
            {
              float64x2_t v66 = 0uLL;
              float64x2_t v67 = 0uLL;
              float64x2_t v68 = 0uLL;
            }
            else
            {
              uint64_t v63 = (float64_t *)(v56 + 8);
              float64x2_t v64 = v61;
              uint64_t v65 = v27;
              float64x2_t v66 = 0uLL;
              float64x2_t v67 = 0uLL;
              float64x2_t v68 = 0uLL;
              do
              {
                v69.f64[0] = *v63;
                v69.f64[1] = -*v63;
                double v70 = *(v63 - 1);
                float64x2_t v71 = v64[-2];
                float64x2_t v72 = v64[-1];
                int8x16_t v73 = (int8x16_t)vmulq_f64(v71, v69);
                float64x2_t v66 = vaddq_f64(v66, vmlaq_n_f64((float64x2_t)vextq_s8(v73, v73, 8uLL), v71, v70));
                int8x16_t v74 = (int8x16_t)vmulq_f64(v72, v69);
                float64x2_t v67 = vaddq_f64(v67, vmlaq_n_f64((float64x2_t)vextq_s8(v74, v74, 8uLL), v72, v70));
                float64x2_t v75 = v64[1];
                int8x16_t v76 = (int8x16_t)vmulq_f64(*v64, v69);
                float64x2_t v68 = vaddq_f64(v68, vmlaq_n_f64((float64x2_t)vextq_s8(v76, v76, 8uLL), *v64, v70));
                int8x16_t v77 = (int8x16_t)vmulq_f64(v75, v69);
                float64x2_t v62 = vaddq_f64(v62, vmlaq_n_f64((float64x2_t)vextq_s8(v77, v77, 8uLL), v75, v70));
                float64x2_t v64 = (float64x2_t *)((char *)v64 + v54);
                v63 += 2;
                --v65;
              }
              while (v65);
            }
            float64x2_t v78 = vmulq_n_f64(v66, v38);
            uint64_t v79 = 16 * v59;
            if (v60)
            {
              *(float64x2_t *)(v15 + 16 * v59) = vaddq_f64(v78, vmulq_n_f64(*v60, v203));
              *(float64x2_t *)(v15 + (v79 | 0x10)) = vaddq_f64(vmulq_n_f64(v67, v38), vmulq_n_f64(v60[v35], v203));
              *(float64x2_t *)(v15 + (v79 | 0x20)) = vaddq_f64(vmulq_n_f64(v68, v38), vmulq_n_f64(v60[2 * v35], v203));
              float64x2_t v80 = vaddq_f64(vmulq_n_f64(v62, v38), vmulq_n_f64(v60[3 * v35], v203));
            }
            else
            {
              *(float64x2_t *)(v15 + 16 * v59) = v78;
              uint64_t v81 = (double *)(v15 + (v79 | 0x10));
              *uint64_t v81 = v38 * v67.f64[0];
              v81[1] = vmuld_lane_f64(v38, v67, 1);
              float64x2_t v82 = (double *)(v15 + (v79 | 0x20));
              *float64x2_t v82 = v38 * v68.f64[0];
              v82[1] = vmuld_lane_f64(v38, v68, 1);
              float64x2_t v80 = vmulq_n_f64(v62, v38);
            }
            *(float64x2_t *)(v15 + (v79 | 0x30)) = v80;
            v59 += 4;
            v60 += 4 * v35;
            v61 += 4;
          }
          while (v59 <= (int)v28 - 4);
          uint64_t v59 = v59;
        }
        else
        {
          uint64_t v59 = 0;
          float64x2_t v60 = v29;
        }
        if ((int)v59 < (int)v28)
        {
          float64x2_t v83 = (float64_t *)(v56 + 8);
          float64x2_t v84 = (float64x2_t *)&v202[v59];
          do
          {
            float64x2_t v85 = 0uLL;
            if ((int)v27 >= 1)
            {
              uint64_t v86 = v84;
              float64x2_t v87 = v83;
              uint64_t v88 = v27;
              do
              {
                v89.f64[0] = *v87;
                v89.f64[1] = -*v87;
                int8x16_t v90 = (int8x16_t)vmulq_f64(*v86, v89);
                float64x2_t v85 = vaddq_f64(v85, vmlaq_n_f64((float64x2_t)vextq_s8(v90, v90, 8uLL), *v86, *(v87 - 1)));
                v87 += 2;
                uint64_t v86 = (float64x2_t *)((char *)v86 + v54);
                --v88;
              }
              while (v88);
            }
            float64x2_t v91 = vmulq_n_f64(v85, v38);
            if (v60) {
              float64x2_t v91 = vaddq_f64(v91, vmulq_n_f64(*v60, v203));
            }
            *(float64x2_t *)(v15 + 16 * v59++) = v91;
            v60 += v35;
            ++v84;
          }
          while (v59 != v206);
        }
        ++v50;
        double v49 = (_OWORD *)((char *)v49 + v51);
        v29 += v209;
        v15 += 16 * v211;
      }
      while (v50 != v205);
    }
  }
LABEL_164:
  uint64_t result = (uint64_t)v215;
  if (v215 != v217)
  {
    if (v215) {
      return MEMORY[0x22A641760]();
    }
  }
  return result;
}

void sub_225EE5CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v13 = STACK[0x1148];
  if (STACK[0x1148] != a12)
  {
    if (v13) {
      MEMORY[0x22A641760](v13, 0x1000C80451B5BE8);
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *cv::GEMMBlockMul_64fc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = MEMORY[0x270FA5388](a1, a2);
  unint64_t v93 = v10;
  unint64_t v94 = v11;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  unint64_t v17 = v16;
  uint64_t v18 = (_OWORD *)v9;
  int v21 = *v19;
  int v20 = v19[1];
  int v23 = v22[1];
  uint64_t v24 = *v22;
  bzero(v95, 0x1090uLL);
  uint64_t v25 = v17 >> 4;
  if (a9)
  {
    if (v20 >= 0x109) {
      operator new[]();
    }
    uint64_t v27 = 1;
    unint64_t v26 = v95;
  }
  else
  {
    unint64_t v26 = 0;
    int v20 = v21;
    uint64_t v27 = v25;
    uint64_t v25 = 1;
  }
  unint64_t v28 = v93 >> 4;
  unint64_t v29 = v94 >> 4;
  if ((a9 & 2) != 0)
  {
    if (v23 >= 1)
    {
      int v66 = 0;
      uint64_t v67 = 16 * v27;
      if (v26) {
        BOOL v68 = v20 < 1;
      }
      else {
        BOOL v68 = 1;
      }
      char v69 = v68;
      uint64_t v70 = 16 * v28;
      do
      {
        if (v26) {
          float64x2_t v71 = v26;
        }
        else {
          float64x2_t v71 = v18;
        }
        if ((v69 & 1) == 0)
        {
          uint64_t v72 = 0;
          int8x16_t v73 = v18;
          do
          {
            *(_OWORD *)&v26[v72] = *v73;
            v72 += 16;
            v73 += v25;
          }
          while (16 * v20 != v72);
          float64x2_t v71 = v26;
        }
        if ((int)v24 >= 1)
        {
          uint64_t v74 = 0;
          float64x2_t v75 = v71 + 16;
          int8x16_t v76 = v15;
          do
          {
            float64x2_t v77 = 0uLL;
            float64x2_t v78 = 0uLL;
            if ((a9 & 0x10) != 0) {
              float64x2_t v78 = *(float64x2_t *)(v13 + 16 * v74);
            }
            if (v20 >= 2)
            {
              unint64_t v80 = 0;
              uint64_t v81 = 0;
              do
              {
                v82.f64[0] = *(float64_t *)&v75[v80 - 8];
                v83.f64[0] = *(float64_t *)&v75[v80 + 8];
                v82.f64[1] = -v82.f64[0];
                float64x2_t v84 = v76[v80 / 0x10];
                float64x2_t v85 = v76[v80 / 0x10 + 1];
                int8x16_t v86 = (int8x16_t)vmulq_f64(v84, v82);
                float64x2_t v78 = vaddq_f64(v78, vmlaq_n_f64((float64x2_t)vextq_s8(v86, v86, 8uLL), v84, *(double *)&v71[v80]));
                v83.f64[1] = -v83.f64[0];
                int8x16_t v87 = (int8x16_t)vmulq_f64(v85, v83);
                float64x2_t v77 = vaddq_f64(v77, vmlaq_n_f64((float64x2_t)vextq_s8(v87, v87, 8uLL), v85, *(double *)&v75[v80]));
                v81 += 2;
                v80 += 32;
              }
              while (v81 <= v20 - 2);
              signed int v79 = ((v20 - 2) & 0xFFFFFFFE) + 2;
            }
            else
            {
              signed int v79 = 0;
            }
            if (v79 < v20)
            {
              uint64_t v88 = v79;
              do
              {
                v89.f64[0] = *(float64_t *)&v71[v88 * 16 + 8];
                float64x2_t v90 = v76[v88];
                v89.f64[1] = -v89.f64[0];
                int8x16_t v91 = (int8x16_t)vmulq_f64(v90, v89);
                float64x2_t v78 = vaddq_f64(v78, vmlaq_n_f64((float64x2_t)vextq_s8(v91, v91, 8uLL), v90, *(double *)&v71[v88 * 16]));
                ++v79;
                ++v88;
              }
              while (v20 > v79);
            }
            *(float64x2_t *)(v13 + 16 * v74++) = vaddq_f64(v77, v78);
            int8x16_t v76 = (float64x2_t *)((char *)v76 + v70);
          }
          while (v74 != v24);
        }
        ++v66;
        uint64_t v18 = (_OWORD *)((char *)v18 + v67);
        v13 += 16 * v29;
      }
      while (v66 != v23);
    }
  }
  else if (v23 >= 1)
  {
    int v30 = 0;
    uint64_t v31 = 16 * v27;
    if (v26) {
      BOOL v32 = v20 < 1;
    }
    else {
      BOOL v32 = 1;
    }
    char v33 = v32;
    uint64_t v34 = 16 * v25;
    uint64_t v35 = 16 * v28;
    do
    {
      if (v26) {
        uint64_t v36 = v26;
      }
      else {
        uint64_t v36 = v18;
      }
      if ((v33 & 1) == 0)
      {
        uint64_t v37 = 0;
        double v38 = v18;
        do
        {
          *(_OWORD *)&v26[v37] = *v38;
          v37 += 16;
          double v38 = (_OWORD *)((char *)v38 + v34);
        }
        while (16 * v20 != v37);
        uint64_t v36 = v26;
      }
      if ((int)v24 >= 4)
      {
        uint64_t v39 = 0;
        int v40 = v15 + 2;
        do
        {
          float64x2_t v41 = 0uLL;
          uint64_t v42 = 16 * v39;
          float64x2_t v43 = 0uLL;
          float64x2_t v44 = 0uLL;
          float64x2_t v45 = 0uLL;
          if ((a9 & 0x10) != 0)
          {
            float64x2_t v41 = *(float64x2_t *)(v13 + 16 * v39);
            float64x2_t v43 = *(float64x2_t *)(v13 + (v42 | 0x10));
            float64x2_t v44 = *(float64x2_t *)(v13 + (v42 | 0x20));
            float64x2_t v45 = *(float64x2_t *)(v13 + (v42 | 0x30));
          }
          if (v20 >= 1)
          {
            double v46 = (float64_t *)(v36 + 8);
            double v47 = v40;
            uint64_t v48 = v20;
            do
            {
              v49.f64[0] = *v46;
              v49.f64[1] = -*v46;
              double v50 = *(v46 - 1);
              float64x2_t v51 = v47[-2];
              float64x2_t v52 = v47[-1];
              int8x16_t v53 = (int8x16_t)vmulq_f64(v51, v49);
              float64x2_t v41 = vaddq_f64(v41, vmlaq_n_f64((float64x2_t)vextq_s8(v53, v53, 8uLL), v51, v50));
              int8x16_t v54 = (int8x16_t)vmulq_f64(v52, v49);
              float64x2_t v43 = vaddq_f64(v43, vmlaq_n_f64((float64x2_t)vextq_s8(v54, v54, 8uLL), v52, v50));
              float64x2_t v55 = v47[1];
              int8x16_t v56 = (int8x16_t)vmulq_f64(*v47, v49);
              float64x2_t v44 = vaddq_f64(v44, vmlaq_n_f64((float64x2_t)vextq_s8(v56, v56, 8uLL), *v47, v50));
              int8x16_t v57 = (int8x16_t)vmulq_f64(v55, v49);
              float64x2_t v45 = vaddq_f64(v45, vmlaq_n_f64((float64x2_t)vextq_s8(v57, v57, 8uLL), v55, v50));
              double v47 = (float64x2_t *)((char *)v47 + v35);
              v46 += 2;
              --v48;
            }
            while (v48);
          }
          *(float64x2_t *)(v13 + 16 * v39) = v41;
          *(float64x2_t *)(v13 + (v42 | 0x10)) = v43;
          *(float64x2_t *)(v13 + (v42 | 0x20)) = v44;
          *(float64x2_t *)(v13 + (v42 | 0x30)) = v45;
          v39 += 4;
          v40 += 4;
        }
        while (v39 <= v24 - 4);
        uint64_t v39 = v39;
      }
      else
      {
        uint64_t v39 = 0;
      }
      if ((int)v39 < (int)v24)
      {
        uint64_t v58 = (float64_t *)(v36 + 8);
        uint64_t v59 = &v15[v39];
        do
        {
          float64x2_t v60 = 0uLL;
          if ((a9 & 0x10) != 0) {
            float64x2_t v60 = *(float64x2_t *)(v13 + 16 * v39);
          }
          if (v20 >= 1)
          {
            uint64_t v61 = v59;
            float64x2_t v62 = v58;
            uint64_t v63 = v20;
            do
            {
              v64.f64[0] = *v62;
              v64.f64[1] = -*v62;
              int8x16_t v65 = (int8x16_t)vmulq_f64(*v61, v64);
              float64x2_t v60 = vaddq_f64(v60, vmlaq_n_f64((float64x2_t)vextq_s8(v65, v65, 8uLL), *v61, *(v62 - 1)));
              v62 += 2;
              uint64_t v61 = (float64x2_t *)((char *)v61 + v35);
              --v63;
            }
            while (v63);
          }
          *(float64x2_t *)(v13 + 16 * v39++) = v60;
          ++v59;
        }
        while (v39 != v24);
      }
      ++v30;
      uint64_t v18 = (_OWORD *)((char *)v18 + v31);
      v13 += 16 * v29;
    }
    while (v30 != v23);
  }
  return v95;
}

void sub_225EE61C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12 != a9)
  {
    if (a12) {
      MEMORY[0x22A641760]();
    }
  }
  _Unwind_Resume(exception_object);
}

float64x2_t *cv::GEMMStore_64fc(float64x2_t *result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, char a8, double a9, double a10)
{
  unsigned int v10 = a7[1];
  uint64_t v11 = a2 >> 4;
  if ((a8 & 4) != 0) {
    uint64_t v12 = a2 >> 4;
  }
  else {
    uint64_t v12 = 1;
  }
  if ((a8 & 4) != 0) {
    uint64_t v11 = 1;
  }
  if (result) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (result) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v10)
  {
    uint64_t v15 = *a7;
    unint64_t v16 = (v15 - 4);
    uint64_t v17 = 16 * v14;
    uint64_t v18 = v13 << 6;
    uint64_t v19 = 16 * (a6 >> 4);
    uint64_t v20 = 16 * (a4 >> 4);
    uint64_t v21 = v13;
    do
    {
      if (result)
      {
        if ((int)v15 < 4)
        {
          unint64_t v24 = 0;
          uint64_t v22 = result;
        }
        else
        {
          uint64_t v23 = 0;
          unint64_t v24 = 0;
          uint64_t v25 = result;
          do
          {
            unint64_t v26 = v25;
            uint64_t v27 = (float64x2_t *)(a5 + v23);
            float64x2_t v28 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + v23 + 16), a9), vmulq_n_f64(v25[v21], a10));
            *uint64_t v27 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + v23), a9), vmulq_n_f64(*v25, a10));
            v27[1] = v28;
            unint64_t v29 = &v25[v21 + v21];
            float64x2_t v30 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + v23 + 32), a9), vmulq_n_f64(*v29, a10));
            uint64_t v31 = &v29[v21];
            float64x2_t v32 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + v23 + 48), a9), vmulq_n_f64(*v31, a10));
            v27[2] = v30;
            v27[3] = v32;
            v24 += 4;
            v23 += 64;
            uint64_t v25 = &v31[v21];
          }
          while (v24 <= v16);
          uint64_t v22 = (float64x2_t *)((char *)v26 + v18);
          unint64_t v24 = v24;
        }
        if ((int)v24 < (int)v15)
        {
          do
          {
            *(float64x2_t *)(a5 + 16 * v24) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 16 * v24), a9), vmulq_n_f64(*v22, a10));
            ++v24;
            uint64_t v22 = (float64x2_t *)((char *)v22 + v21 * 16);
          }
          while (v15 != v24);
        }
      }
      else
      {
        if ((int)v15 < 4)
        {
          unint64_t i = 0;
        }
        else
        {
          uint64_t v33 = 0;
          for (unint64_t i = 0; i <= v16; i += 4)
          {
            uint64_t v35 = (float64x2_t *)(a5 + v33);
            float64x2_t v36 = vmulq_n_f64(*(float64x2_t *)(a3 + v33 + 16), a9);
            *uint64_t v35 = vmulq_n_f64(*(float64x2_t *)(a3 + v33), a9);
            v35[1] = v36;
            float64x2_t v37 = vmulq_n_f64(*(float64x2_t *)(a3 + v33 + 48), a9);
            v35[2] = vmulq_n_f64(*(float64x2_t *)(a3 + v33 + 32), a9);
            v35[3] = v37;
            v33 += 64;
          }
          unint64_t i = i;
        }
        if ((int)i < (int)v15)
        {
          do
          {
            *(float64x2_t *)(a5 + 16 * i) = vmulq_n_f64(*(float64x2_t *)(a3 + 16 * i), a9);
            ++i;
          }
          while (v15 != i);
        }
      }
      uint64_t result = (float64x2_t *)((char *)result + v17);
      a5 += v19;
      a3 += v20;
      --v10;
    }
    while (v10);
  }
  return result;
}

void cv::scaleAdd(cv *this, const cv::_InputArray *a2, double a3, const cv::_InputArray *a4, const cv::_OutputArray *a5)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  double v60 = a3;
  (**(void (***)(uint64_t *__return_ptr))this)(&v49);
  (**(void (***)(void *__return_ptr, const cv::_InputArray *, uint64_t))a2)(v40, a2, 0xFFFFFFFFLL);
  unsigned int v8 = v49;
  if (((LOWORD(v40[0]) ^ (unsigned __int16)v49) & 0xFFF) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "src1.type() == src2.type()");
    std::string::basic_string[abi:ne180100]<0>(v61, "scaleAdd");
    std::string::basic_string[abi:ne180100]<0>(&v62, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matmul.cpp");
    cv::Exception::Exception(v31, 4294967081, __p, v61, &v62, 2079);
    cv::error((cv *)v31, v9);
  }
  unsigned int v10 = v49 & 7;
  if (v10 > 4)
  {
    (*(void (**)(const cv::_InputArray *, void, int *, uint64_t, uint64_t, void, void))(*(void *)a4 + 144))(a4, HIDWORD(v49), v57, v49 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
    (**(void (***)(void *__return_ptr, const cv::_InputArray *, uint64_t))a4)(v31, a4, 0xFFFFFFFFLL);
    int v12 = ((v8 >> 3) & 0x1FF) + 1;
    float v13 = v60;
    float v30 = v13;
    if (v10 == 5) {
      uint64_t v14 = (double *)&v30;
    }
    else {
      uint64_t v14 = &v60;
    }
    if (v10 == 5) {
      uint64_t v15 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double *))cv::scaleAdd_32f;
    }
    else {
      uint64_t v15 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double *))cv::scaleAdd_64f;
    }
    if ((v49 & 0x4000) != 0 && (v40[0] & 0x4000) != 0 && (v31[0] & 0x4000) != 0)
    {
      uint64_t v18 = HIDWORD(v49);
      if (SHIDWORD(v49) >= 3)
      {
        int v19 = 1;
        uint64_t v20 = v57;
        do
        {
          int v21 = *v20++;
          v19 *= v21;
          --v18;
        }
        while (v18);
      }
      else
      {
        int v19 = v51 * v50;
      }
      v15(v52, v41, v32, (v19 * v12), v14);
    }
    else
    {
      v61[0] = (cv::Mat *)&v49;
      v61[1] = (cv::Mat *)v40;
      v61[2] = (cv::Mat *)v31;
      v61[3] = 0;
      float64x2_t v62 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)__p, v61, &v62, -1);
      uint64_t v16 = (v12 * v29);
      uint64_t v17 = -1;
      while ((void *)++v17 < __p[4])
      {
        v15((uint64_t)v62, v63, v64, v16, v14);
        cv::NAryMatIterator::operator++((uint64_t)__p);
      }
    }
    if (v33 && atomic_fetch_add(v33, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v31, v11);
    }
    uint64_t v32 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    if (SHIDWORD(v31[0]) >= 1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = v37;
      do
        *(_DWORD *)(v23 + 4 * v22++) = 0;
      while (v22 < SHIDWORD(v31[0]));
    }
    uint64_t v33 = 0;
    if (v38 != (cv *)&v39) {
      cv::fastFree((void **)v38, v11);
    }
  }
  else
  {
    cv::addWeighted(this, a2, v60, a4, 1.0, 0.0, (const cv::_OutputArray *)(v49 & 7));
  }
  if (v42 && atomic_fetch_add(v42, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v40, v11);
  }
  uint64_t v41 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  if (SHIDWORD(v40[0]) >= 1)
  {
    uint64_t v24 = 0;
    uint64_t v25 = v46;
    do
      *(_DWORD *)(v25 + 4 * v24++) = 0;
    while (v24 < SHIDWORD(v40[0]));
  }
  uint64_t v42 = 0;
  if (v47 != (cv *)&v48) {
    cv::fastFree((void **)v47, v11);
  }
  if (v53 && atomic_fetch_add(v53, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v49, v11);
  }
  uint64_t v52 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  if (SHIDWORD(v49) >= 1)
  {
    uint64_t v26 = 0;
    uint64_t v27 = v57;
    do
      v27[v26++] = 0;
    while (v26 < SHIDWORD(v49));
  }
  int8x16_t v53 = 0;
  if (v58 != (void **)&v59) {
    cv::fastFree(v58, v11);
  }
}

void sub_225EE680C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  cv::Mat::~Mat((cv::Mat *)&a22, a2);
  cv::Mat::~Mat((cv::Mat *)&a37, v39);
  cv::Mat::~Mat((cv::Mat *)(v37 - 216), v40);
  _Unwind_Resume(a1);
}

float32x2_t *cv::scaleAdd_32f(float32x2_t *this, const float *a2, float32x2_t *a3, float *a4, _DWORD *a5, float *a6, double a7)
{
  LODWORD(a7) = *a5;
  if ((int)a4 >= 4)
  {
    unint64_t v7 = 0;
    float32x2_t v8 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
    uint64_t v9 = a3 + 1;
    unsigned int v10 = a2 + 2;
    uint64_t v11 = this + 1;
    do
    {
      v9[-1] = vmla_f32(*(float32x2_t *)(v10 - 2), v8, v11[-1]);
      float32x2_t v12 = *v11;
      v11 += 2;
      float32x2_t v13 = v12;
      float32x2_t v14 = *(float32x2_t *)v10;
      v10 += 4;
      v7 += 4;
      *uint64_t v9 = vmla_f32(v14, v8, v13);
      v9 += 2;
    }
    while (v7 <= (a4 - 4));
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if ((int)v7 < (int)a4)
  {
    uint64_t v15 = (float *)a3 + v7;
    uint64_t v16 = (float *)&a2[v7];
    uint64_t v17 = (float *)this + v7;
    unint64_t v18 = a4 - (unint64_t)v7;
    do
    {
      float v19 = *v17++;
      float v20 = v19;
      float v21 = *v16++;
      *v15++ = v21 + (float)(v20 * *(float *)&a7);
      --v18;
    }
    while (v18);
  }
  return this;
}

float64x2_t *cv::scaleAdd_64f(float64x2_t *this, const double *a2, float64x2_t *a3, double *a4, double *a5, double *a6)
{
  uint64_t v6 = *(uint64_t *)a5;
  if ((int)a4 >= 4)
  {
    unint64_t v7 = 0;
    float64x2_t v8 = (float64x2_t)vdupq_lane_s64(v6, 0);
    uint64_t v9 = a3 + 1;
    unsigned int v10 = a2 + 2;
    uint64_t v11 = this + 1;
    do
    {
      v9[-1] = vmlaq_f64(*(float64x2_t *)(v10 - 2), v8, v11[-1]);
      float64x2_t v12 = *v11;
      v11 += 2;
      float64x2_t v13 = v12;
      float64x2_t v14 = *(float64x2_t *)v10;
      v10 += 4;
      v7 += 4;
      *uint64_t v9 = vmlaq_f64(v14, v8, v13);
      v9 += 2;
    }
    while (v7 <= (a4 - 4));
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if ((int)v7 < (int)a4)
  {
    uint64_t v15 = &a3->f64[v7];
    uint64_t v16 = (double *)&a2[v7];
    uint64_t v17 = &this->f64[v7];
    unint64_t v18 = a4 - (unint64_t)v7;
    do
    {
      double v19 = *v17++;
      double v20 = v19;
      double v21 = *v16++;
      *v15++ = v21 + v20 * *(double *)&v6;
      --v18;
    }
    while (v18);
  }
  return this;
}

void cv::mulTransposed(void (***this)(uint64_t *__return_ptr), const cv::_InputArray *a2, const cv::_OutputArray *a3, void (***a4)(uint64_t *__return_ptr, void, uint64_t), const cv::_InputArray *a5, double a6)
{
  int v6 = (int)a5;
  int v9 = (int)a3;
  (**this)(&v80);
  (**a4)(&v69, a4, 0xFFFFFFFFLL);
  __int16 v11 = v80;
  if (v6 >= 0) {
    char v12 = v6;
  }
  else {
    char v12 = v80;
  }
  unsigned int v13 = v12 & 7;
  if (v13 <= (v69 & 7u)) {
    unsigned int v14 = v69 & 7;
  }
  else {
    unsigned int v14 = v13;
  }
  if (v14 <= 5) {
    uint64_t v15 = 5;
  }
  else {
    uint64_t v15 = v14;
  }
  if ((v80 & 0xFF8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v56, "src.channels() == 1");
    std::string::basic_string[abi:ne180100]<0>(v49, "mulTransposed");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matmul.cpp");
    cv::Exception::Exception(v65, 4294967081, v56, v49, __p, 2542);
    cv::error((cv *)v65, v16);
  }
  if (v72)
  {
    if ((v69 & 0xFF8) != 0 || v70 != 1 && v70 != v81 || v71 != 1 && v71 != HIDWORD(v81))
    {
      std::string::basic_string[abi:ne180100]<0>(v56, "delta.channels() == 1 && (delta.rows == src.rows || delta.rows == 1) && (delta.cols == src.cols || delta.cols == 1)");
      std::string::basic_string[abi:ne180100]<0>(v49, "mulTransposed");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matmul.cpp");
      cv::Exception::Exception(v65, 4294967081, v56, v49, __p, 2548);
      cv::error((cv *)v65, v17);
    }
    if ((v69 & 0xFFF) != v15)
    {
      cv::_OutputArray::_OutputArray((uint64_t)v65, (cv::Mat *)&v69);
      cv::Mat::convertTo((cv::Mat *)&v69, (const cv::_OutputArray *)v65, v15, 1.0, 0.0);
    }
  }
  uint64_t v18 = 8;
  if (v9) {
    uint64_t v18 = 12;
  }
  (*(void (**)(const cv::_InputArray *, void, void, uint64_t, uint64_t, void, void))(*(void *)a2 + 136))(a2, *(unsigned int *)((char *)&v80 + v18), *(unsigned int *)((char *)&v80 + v18), v15, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void **__return_ptr, const cv::_InputArray *, uint64_t))a2)(v56, a2, 0xFFFFFFFFLL);
  if (v82 != v57)
  {
    v19.i64[0] = (uint64_t)v56[1];
    v19.i64[1] = v81;
    int v20 = v11 & 0xFFF;
    v21.i64[0] = 0x6400000064;
    v21.i64[1] = 0x6400000064;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v21, v19))) & 1) != 0 || v20 != v15)
    {
      if ((v11 & 0xFFF) != 0 || v14 > 5)
      {
        if ((v11 & 0xFFF) != 0 || v15 != 6)
        {
          if (v20 == 2 && v14 <= 5)
          {
            BOOL v24 = v9 == 0;
            uint64_t v25 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedL<unsigned short,float>;
            uint64_t v26 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedR<unsigned short,float>;
          }
          else if (v20 == 2 && v15 == 6)
          {
            BOOL v24 = v9 == 0;
            uint64_t v25 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedL<unsigned short,double>;
            uint64_t v26 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedR<unsigned short,double>;
          }
          else if (v20 == 3 && v14 <= 5)
          {
            BOOL v24 = v9 == 0;
            uint64_t v25 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedL<short,float>;
            uint64_t v26 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedR<short,float>;
          }
          else if (v20 == 3 && v15 == 6)
          {
            BOOL v24 = v9 == 0;
            uint64_t v25 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedL<short,double>;
            uint64_t v26 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedR<short,double>;
          }
          else if (v20 == 5 && v14 <= 5)
          {
            BOOL v24 = v9 == 0;
            uint64_t v25 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedL<float,float>;
            uint64_t v26 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedR<float,float>;
          }
          else
          {
            if (v20 != 5 || v15 != 6)
            {
              uint64_t v25 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedL<double,double>;
              if (v9) {
                uint64_t v25 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedR<double,double>;
              }
              if (v20 != 6 || v15 != 6)
              {
                std::string::basic_string[abi:ne180100]<0>(v49, "");
                std::string::basic_string[abi:ne180100]<0>(__p, "mulTransposed");
                std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matmul.cpp");
                cv::Exception::Exception(v65, 4294967086, v49, __p, v54, 2643);
                cv::error((cv *)v65, v47);
              }
              goto LABEL_78;
            }
            BOOL v24 = v9 == 0;
            uint64_t v25 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedL<float,double>;
            uint64_t v26 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedR<float,double>;
          }
        }
        else
        {
          BOOL v24 = v9 == 0;
          uint64_t v25 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedL<unsigned char,double>;
          uint64_t v26 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedR<unsigned char,double>;
        }
      }
      else
      {
        BOOL v24 = v9 == 0;
        uint64_t v25 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedL<unsigned char,float>;
        uint64_t v26 = (void (*)(uint64_t *, void **, uint64_t *, double))cv::MulTransposedR<unsigned char,float>;
      }
      if (!v24) {
        uint64_t v25 = v26;
      }
LABEL_78:
      v25(&v80, v56, &v69, a6);
      cv::_OutputArray::_OutputArray((uint64_t)v65, (cv::Mat *)v56);
      cv::completeSymm((void (***)(uint64_t *__return_ptr))v65, 0);
      goto LABEL_79;
    }
  }
  int v66 = (char *)v65 + 8;
  uint64_t v67 = (cv *)v68;
  v68[0] = 0;
  v68[1] = 0;
  LODWORD(v65[0]) = 1124007936;
  memset((char *)v65 + 4, 0, 48);
  v65[3] = 0u;
  if (v72)
  {
    if (v77[1] == v87[1] && *v77 == *v87)
    {
      cv::_InputArray::_InputArray((uint64_t)v49, (const cv::Mat *)&v80);
      cv::_InputArray::_InputArray((uint64_t)__p, (const cv::Mat *)&v69);
      uint64_t v22 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v54, (cv::Mat *)v65);
      uint64_t v23 = cv::noArray(v22);
      cv::subtract((uint64_t)v49, (uint64_t)__p, (const cv::_InputArray *)v54, (const cv::_OutputArray *)v23, (const cv::_InputArray *)0xFFFFFFFFLL);
    }
    else
    {
      cv::_InputArray::_InputArray((uint64_t)v49, (const cv::Mat *)&v69);
      int v28 = v81;
      int v29 = HIDWORD(v81);
      int v30 = v70;
      int v31 = v71;
      cv::_OutputArray::_OutputArray((uint64_t)__p, (cv::Mat *)v65);
      cv::repeat((void (***)(uint64_t *__return_ptr))v49, (const cv::_InputArray *)(v28 / v30), v29 / v31, (uint64_t)__p, v32);
      cv::_InputArray::_InputArray((uint64_t)v49, (const cv::Mat *)&v80);
      cv::_InputArray::_InputArray((uint64_t)__p, (const cv::Mat *)v65);
      uint64_t v33 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v54, (cv::Mat *)v65);
      uint64_t v34 = cv::noArray(v33);
      cv::subtract((uint64_t)v49, (uint64_t)__p, (const cv::_InputArray *)v54, (const cv::_OutputArray *)v34, (const cv::_InputArray *)0xFFFFFFFFLL);
    }
    uint64_t v27 = (const cv::Mat *)v65;
  }
  else
  {
    uint64_t v27 = (const cv::Mat *)&v80;
  }
  cv::_InputArray::_InputArray((uint64_t)__p, v27);
  cv::_InputArray::_InputArray((uint64_t)v54, v27);
  int v50 = (char *)v49 + 8;
  int v51 = (cv *)v52;
  v52[0] = 0;
  v52[1] = 0;
  LODWORD(v49[0]) = 1124007936;
  memset((char *)v49 + 4, 0, 48);
  v49[3] = 0u;
  cv::_InputArray::_InputArray((uint64_t)v53, (const cv::Mat *)v49);
  cv::_OutputArray::_OutputArray((uint64_t)v48, (cv::Mat *)v56);
  if (v9) {
    uint64_t v35 = 1;
  }
  else {
    uint64_t v35 = 2;
  }
  cv::gemm((cv *)__p, (const cv::_InputArray *)v54, (const cv::_InputArray *)v53, a6, (const cv::_InputArray *)v48, 0.0, (const cv::_OutputArray *)v35);
  if (*((void *)&v49[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v49[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v49, v36);
  }
  *(void *)&v49[1] = 0;
  memset(&v49[2], 0, 24);
  if (SDWORD1(v49[0]) >= 1)
  {
    uint64_t v37 = 0;
    double v38 = v50;
    do
      *(_DWORD *)&v38[4 * v37++] = 0;
    while (v37 < SDWORD1(v49[0]));
  }
  *((void *)&v49[1] + 1) = 0;
  if (v51 != (cv *)v52) {
    cv::fastFree((void **)v51, v36);
  }
  if (*((void *)&v65[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v65[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v65, v36);
  }
  *(void *)&v65[1] = 0;
  memset(&v65[2], 0, 24);
  if (SDWORD1(v65[0]) >= 1)
  {
    uint64_t v39 = 0;
    int v40 = v66;
    do
      *(_DWORD *)&v40[4 * v39++] = 0;
    while (v39 < SDWORD1(v65[0]));
  }
  *((void *)&v65[1] + 1) = 0;
  if (v67 != (cv *)v68) {
    cv::fastFree((void **)v67, v36);
  }
LABEL_79:
  if (v58 && atomic_fetch_add(v58, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v56, v36);
  }
  uint64_t v57 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  if (SHIDWORD(v56[0]) >= 1)
  {
    uint64_t v41 = 0;
    uint64_t v42 = v62;
    do
      *(_DWORD *)(v42 + 4 * v41++) = 0;
    while (v41 < SHIDWORD(v56[0]));
  }
  uint64_t v58 = 0;
  if (v63 != (cv *)&v64) {
    cv::fastFree((void **)v63, v36);
  }
  if (v73 && atomic_fetch_add(v73, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v69, v36);
  }
  uint64_t v72 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  if (SHIDWORD(v69) >= 1)
  {
    uint64_t v43 = 0;
    uint64_t v44 = v77;
    do
      v44[v43++] = 0;
    while (v43 < SHIDWORD(v69));
  }
  int8x16_t v73 = 0;
  if (v78 != (cv *)&v79) {
    cv::fastFree((void **)v78, v36);
  }
  if (v83 && atomic_fetch_add(v83, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v80, v36);
  }
  uint64_t v82 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  if (SHIDWORD(v80) >= 1)
  {
    uint64_t v45 = 0;
    uint64_t v46 = v87;
    do
      v46[v45++] = 0;
    while (v45 < SHIDWORD(v80));
  }
  float64x2_t v83 = 0;
  if (v88 != (void **)&v89) {
    cv::fastFree(v88, v36);
  }
}

_DWORD *cv::MulTransposedR<unsigned char,float>(uint64_t a1, uint64_t a2)
{
  v2 = (void *)MEMORY[0x270FA5388](a1, a2);
  double v10 = *(double *)v5.i64;
  uint64_t v83 = *MEMORY[0x263EF8340];
  __int16 v11 = (__int8 *)v2[2];
  uint64_t v12 = *(void *)(v3 + 16);
  unsigned int v13 = *(const float **)(v4 + 16);
  uint64_t v14 = v2[10];
  int v15 = *(_DWORD *)(v4 + 12);
  if (*(int *)(v4 + 8) <= 1) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *(void *)(v4 + 80) >> 2;
  }
  uint64_t v17 = (unsigned int *)v2[8];
  uint64_t v19 = (int)*v17;
  uint64_t v18 = (int)v17[1];
  uint64_t v20 = *v17;
  if (v13) {
    BOOL v21 = v15 < (int)v18;
  }
  else {
    BOOL v21 = 0;
  }
  char v22 = !v21;
  if (v21)
  {
    if (v15 != 1) {
      __assert_rtn("MulTransposedR", "matmul.cpp", 2360, "delta_cols == 1");
    }
    unsigned int v23 = 20 * v20;
  }
  else
  {
    unsigned int v23 = 4 * v19;
  }
  uint64_t result = v82;
  if (v23 >= 0x1009) {
    operator new[]();
  }
  uint64_t v25 = *(void *)(v3 + 80) >> 2;
  uint64_t v26 = v17[1];
  if ((v22 & 1) == 0)
  {
    uint64_t v27 = (float32x4_t *)&v82[v19];
    if ((int)v19 >= 1)
    {
      uint64_t v29 = v20;
      int v30 = (float32x4_t *)&v82[v19];
      do
      {
        float32x4_t v5 = vld1q_dup_f32(v13);
        uint64_t v28 = 4 * v16;
        unsigned int v13 = (const float *)((char *)v13 + v28);
        *v30++ = v5;
        --v29;
      }
      while (v29);
    }
    uint64_t v16 = 4 * (v16 != 0);
    unsigned int v13 = (const float *)&v82[v19];
    goto LABEL_23;
  }
  if (v13)
  {
    uint64_t v27 = 0;
LABEL_23:
    if ((int)v18 >= 1)
    {
      uint64_t v31 = 0;
      uint64_t v32 = v18 - 4;
      uint64_t v33 = 4 * v16;
      uint64_t v34 = (float *)v13;
      uint64_t v35 = v11;
      do
      {
        if (v27)
        {
          uint64_t v36 = v20;
          uint64_t v37 = v35;
          double v38 = (float *)v27;
          uint64_t v39 = v82;
          if ((int)v19 >= 1)
          {
            do
            {
              v5.i8[0] = *v37;
              v5.f32[0] = (float)v5.u32[0] - *v38;
              *v39++ = v5.i32[0];
              double v38 = (float *)((char *)v38 + v33);
              v37 += v14;
              --v36;
            }
            while (v36);
          }
        }
        else if ((int)v20 >= 1)
        {
          uint64_t v40 = v20;
          uint64_t v41 = v35;
          uint64_t v42 = v34;
          uint64_t v43 = v82;
          do
          {
            v5.i8[0] = *v41;
            v5.f32[0] = (float)v5.u32[0] - *v42;
            *v43++ = v5.i32[0];
            uint64_t v42 = (float *)((char *)v42 + v33);
            v41 += v14;
            --v40;
          }
          while (v40);
        }
        uint64_t v44 = v31;
        if (v31 <= v32)
        {
          do
          {
            if ((int)v19 < 1)
            {
              float64x2_t v47 = 0uLL;
              float64x2_t v50 = 0uLL;
            }
            else
            {
              uint64_t v45 = (float32x4_t *)&v13[v44];
              if (v27) {
                uint64_t v45 = v27;
              }
              uint64_t v46 = &v11[v44];
              float64x2_t v47 = 0uLL;
              uint64_t v48 = v20;
              uint64_t v49 = (float *)v82;
              float64x2_t v50 = 0uLL;
              do
              {
                float v51 = *v49++;
                double v7 = v51;
                LODWORD(v8.f64[0]) = *(_DWORD *)v46;
                float32x4_t v52 = vsubq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&v8.f64[0]))), *v45);
                float64x2_t v53 = vcvtq_f64_f32(*(float32x2_t *)v52.f32);
                float64x2_t v8 = vcvt_hight_f64_f32(v52);
                float64x2_t v50 = vmlaq_n_f64(v50, v8, v51);
                float64x2_t v47 = vmlaq_n_f64(v47, v53, v51);
                v46 += v14;
                uint64_t v45 = (float32x4_t *)((char *)v45 + v33);
                --v48;
              }
              while (v48);
            }
            float32x4_t v5 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v47, v10)), vmulq_n_f64(v50, v10));
            *(float32x4_t *)(v12 + 4 * v44) = v5;
            v44 += 4;
          }
          while ((int)v32 >= (int)v44);
          uint64_t v44 = v44;
        }
        else
        {
          uint64_t v44 = v31;
        }
        for (; (int)v18 > (int)v44; ++v44)
        {
          if ((int)v20 < 1)
          {
            double v55 = 0.0;
          }
          else
          {
            uint64_t v54 = (float *)&v13[v44];
            if (v27) {
              uint64_t v54 = (float *)v27;
            }
            double v55 = 0.0;
            uint64_t v56 = v11;
            uint64_t v57 = v20;
            uint64_t v58 = (float *)v82;
            do
            {
              float v59 = *v58++;
              LOBYTE(v7) = v56[v44];
              double v7 = (float)((float)LODWORD(v7) - *v54);
              double v55 = v55 + v59 * v7;
              uint64_t v54 = (float *)((char *)v54 + v33);
              v56 += v14;
              --v57;
            }
            while (v57);
          }
          v5.f32[0] = v55 * v10;
          *(_DWORD *)(v12 + 4 * v44) = v5.i32[0];
        }
        ++v31;
        v12 += 4 * v25;
        ++v35;
        ++v34;
      }
      while (v31 != v26);
    }
    return result;
  }
  if ((int)v18 >= 1)
  {
    uint64_t v60 = 0;
    uint64_t v61 = v18 - 4;
    uint64_t v62 = v11;
    do
    {
      uint64_t v63 = v19;
      uint64_t v64 = v62;
      uint64_t v65 = v82;
      if ((int)v20 >= 1)
      {
        do
        {
          v6.i8[0] = *v64;
          v6.f32[0] = (float)v6.u32[0];
          *v65++ = v6.i32[0];
          v64 += v14;
          --v63;
        }
        while (v63);
      }
      uint64_t v66 = v60;
      if (v60 <= v61)
      {
        do
        {
          if ((int)v19 < 1)
          {
            float64x2_t v68 = 0uLL;
            float64x2_t v71 = 0uLL;
          }
          else
          {
            uint64_t v67 = &v11[v66];
            float64x2_t v68 = 0uLL;
            uint64_t v69 = v19;
            int v70 = (float *)v82;
            float64x2_t v71 = 0uLL;
            do
            {
              float v72 = *v70++;
              v8.f64[0] = v72;
              LODWORD(v9.f64[0]) = *(_DWORD *)v67;
              int8x16_t v73 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&v9.f64[0]));
              int8x8_t v74 = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL), (int8x8_t)0xFF000000FFLL);
              v75.i64[0] = v74.u32[0];
              v75.i64[1] = v74.u32[1];
              float64x2_t v76 = vcvtq_f64_u64(v75);
              *(int8x8_t *)v73.i8 = vand_s8(*(int8x8_t *)v73.i8, (int8x8_t)0xFF000000FFLL);
              v75.i64[0] = v73.u32[0];
              v75.i64[1] = v73.u32[1];
              float64x2_t v9 = vcvtq_f64_u64(v75);
              float64x2_t v68 = vmlaq_n_f64(v68, v9, v72);
              float64x2_t v71 = vmlaq_n_f64(v71, v76, v72);
              v67 += v14;
              --v69;
            }
            while (v69);
          }
          float32x4_t v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v68, *(double *)v5.i64)), vmulq_n_f64(v71, *(double *)v5.i64));
          *(float32x4_t *)(v12 + 4 * v66) = v6;
          v66 += 4;
        }
        while ((int)v61 >= (int)v66);
        uint64_t v66 = v66;
      }
      else
      {
        uint64_t v66 = v60;
      }
      for (; (int)v18 > (int)v66; ++v66)
      {
        double v77 = 0.0;
        if ((int)v20 >= 1)
        {
          float64x2_t v78 = v11;
          uint64_t v79 = v19;
          uint64_t v80 = (float *)v82;
          do
          {
            float v81 = *v80++;
            LOBYTE(v8.f64[0]) = v78[v66];
            v8.f64[0] = (double)*(unint64_t *)&v8.f64[0];
            double v77 = v77 + v81 * v8.f64[0];
            v78 += v14;
            --v79;
          }
          while (v79);
        }
        v6.f32[0] = v77 * *(double *)v5.i64;
        *(_DWORD *)(v12 + 4 * v66) = v6.i32[0];
      }
      ++v60;
      v12 += 4 * v25;
      ++v62;
    }
    while (v60 != v18);
  }
  return result;
}

uint64_t cv::MulTransposedL<unsigned char,float>(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x270FA5388](a1, a2);
  double v9 = v8;
  uint64_t v80 = *MEMORY[0x263EF8340];
  double v10 = *(unsigned __int8 **)(result + 16);
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = *(void *)(v3 + 16);
  uint64_t v14 = *(void *)(result + 80);
  uint64_t v15 = *(void *)(v11 + 80) >> 2;
  if (*(int *)(v3 + 8) <= 1) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *(void *)(v3 + 80) >> 2;
  }
  uint64_t v17 = *(unsigned int **)(result + 64);
  unint64_t v18 = *v17;
  uint64_t v19 = (int)v17[1];
  uint64_t v20 = v17[1];
  if (v13)
  {
    int v21 = *(_DWORD *)(v3 + 12);
    uint64_t result = (uint64_t)v77;
    if ((unint64_t)(4 * v19) >= 0x1009) {
      operator new[]();
    }
    if ((int)v18 >= 1)
    {
      uint64_t v22 = 0;
      unsigned int v23 = v10 + 3;
      BOOL v24 = *(float **)(v3 + 16);
      do
      {
        if (v21 >= (int)v20)
        {
          uint64_t v27 = v20;
          uint64_t v28 = v10;
          uint64_t v29 = v24;
          int v30 = (float *)v77;
          if ((int)v20 >= 1)
          {
            do
            {
              unsigned int v31 = *v28++;
              float v32 = (float)v31;
              float v33 = *v29++;
              *(float *)&double v4 = v33;
              *v30++ = v32 - v33;
              --v27;
            }
            while (v27);
          }
        }
        else if ((int)v19 >= 1)
        {
          uint64_t v25 = 0;
          float v26 = *(float *)(v13 + 4 * v16 * v22);
          do
          {
            LOBYTE(v4) = v10[v25];
            *(float *)&double v4 = (float)LODWORD(v4) - v26;
            v77[v25++] = LODWORD(v4);
          }
          while (v20 != v25);
        }
        uint64_t v34 = v10;
        uint64_t v35 = v23;
        uint64_t v36 = v22;
        do
        {
          uint64_t v37 = (float32x4_t *)(v13 + 4 * v16 * v36);
          if (v21 < (int)v19)
          {
            float32x4_t v38 = vld1q_dup_f32(v37->f32);
            float32x4_t v79 = v38;
            uint64_t v37 = &v79;
          }
          if ((int)v20 >= 4)
          {
            uint64_t v41 = 0;
            double v40 = 0.0;
            uint64_t v42 = (float *)&v78;
            do
            {
              LOBYTE(v6) = v35[v41 - 3];
              float v43 = v37->f32[0];
              LOBYTE(v43) = v35[v41 - 2];
              double v44 = *(v42 - 1) * (float)((float)LODWORD(v43) - v37->f32[1]);
              double v45 = v44 + *(v42 - 2) * (float)((float)LODWORD(v6) - v37->f32[0]);
              LOBYTE(v44) = v35[v41 - 1];
              float v46 = *v42;
              float v47 = v42[1];
              v42 += 4;
              double v48 = v46;
              double v49 = v45 + v48 * (float)((float)LODWORD(v44) - v37->f32[2]);
              LOBYTE(v48) = v35[v41];
              double v6 = (float)((float)LODWORD(v48) - v37->f32[3]);
              double v4 = v49 + v47 * v6;
              double v40 = v40 + v4;
              v41 += 4;
              v37 += v21 == v19;
            }
            while (v41 <= (int)v20 - 4);
            int v39 = ((v20 - 4) & 0xFFFFFFFC) + 4;
          }
          else
          {
            int v39 = 0;
            double v40 = 0.0;
          }
          if (v39 < (int)v19)
          {
            float64x2_t v50 = &v34[v39];
            float v51 = (float *)&v77[v39];
            do
            {
              float v52 = *v51++;
              float v53 = v52;
              unsigned int v54 = *v50++;
              float v55 = (float)v54;
              float v56 = v37->f32[0];
              uint64_t v37 = (float32x4_t *)((char *)v37 + 4);
              *(float *)&double v6 = v56;
              double v4 = v53;
              double v40 = v40 + v4 * (float)(v55 - v56);
              ++v39;
            }
            while ((int)v19 > v39);
          }
          float v57 = v40 * v9;
          *(float *)(v12 + 4 * v36++) = v57;
          v35 += v14;
          v34 += v14;
        }
        while (v36 != v18);
        v12 += 4 * v15;
        ++v22;
        v24 += v16;
        v10 += v14;
        v23 += v14;
      }
      while (v22 != v18);
    }
  }
  else if ((int)v18 >= 1)
  {
    unint64_t v58 = 0;
    float v59 = v10 + 1;
    do
    {
      uint64_t v60 = v10;
      uint64_t v61 = v59;
      unint64_t v62 = v58;
      do
      {
        if ((int)v19 >= 4)
        {
          uint64_t v65 = 0;
          double v64 = 0.0;
          do
          {
            LOBYTE(v4) = v59[v65 - 1];
            LOBYTE(v5) = v61[v65 - 1];
            LOBYTE(v6) = v59[v65];
            *(double *)&unint64_t v66 = (double)*(unint64_t *)&v5;
            LOBYTE(v7) = v61[v65];
            double v7 = (double)*(unint64_t *)&v7;
            *(double *)&unint64_t v67 = (double)*(unint64_t *)&v6 * v7;
            double v68 = *(double *)&v67 + (double)*(unint64_t *)&v4 * *(double *)&v66;
            LOBYTE(v66) = v59[v65 + 1];
            *(double *)&unint64_t v69 = (double)v66;
            LOBYTE(v67) = v61[v65 + 1];
            *(double *)&unint64_t v70 = (double)v67;
            double v71 = v68 + *(double *)&v69 * *(double *)&v70;
            LOBYTE(v69) = v59[v65 + 2];
            double v5 = (double)v69;
            LOBYTE(v70) = v61[v65 + 2];
            double v6 = (double)v70;
            double v4 = v71 + v5 * v6;
            double v64 = v64 + v4;
            v65 += 4;
          }
          while (v65 <= (int)v20 - 4);
          int v63 = ((v20 - 4) & 0xFFFFFFFC) + 4;
        }
        else
        {
          int v63 = 0;
          double v64 = 0.0;
        }
        if (v63 < (int)v20)
        {
          float v72 = &v60[v63];
          int8x16_t v73 = &v10[v63];
          do
          {
            unsigned int v74 = *v73++;
            double v4 = (double)v74;
            unsigned int v75 = *v72++;
            uint64_t result = v75;
            double v5 = (double)v75;
            double v64 = v64 + v4 * (double)v75;
            ++v63;
          }
          while ((int)v20 > v63);
        }
        float v76 = v64 * v9;
        *(float *)(v12 + 4 * v62++) = v76;
        v61 += v14;
        v60 += v14;
      }
      while (v62 < v18);
      ++v58;
      v12 += 4 * v15;
      v59 += v14;
      v10 += v14;
    }
    while (v58 != v18);
  }
  return result;
}

void *cv::MulTransposedR<unsigned char,double>(uint64_t a1, uint64_t a2)
{
  v2 = (void *)MEMORY[0x270FA5388](a1, a2);
  double v8 = v5;
  v90[515] = *MEMORY[0x263EF8340];
  double v9 = (unsigned char *)v2[2];
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v11 = *(double **)(v4 + 16);
  uint64_t v12 = v2[10];
  int v13 = *(_DWORD *)(v4 + 12);
  if (*(int *)(v4 + 8) <= 1) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *(void *)(v4 + 80) >> 3;
  }
  uint64_t v15 = (unsigned int *)v2[8];
  uint64_t v17 = (int)*v15;
  uint64_t v16 = (int)v15[1];
  uint64_t v18 = *v15;
  if (v11) {
    BOOL v19 = v13 < (int)v16;
  }
  else {
    BOOL v19 = 0;
  }
  char v20 = !v19;
  if (v19)
  {
    if (v13 != 1) {
      __assert_rtn("MulTransposedR", "matmul.cpp", 2360, "delta_cols == 1");
    }
    unsigned int v21 = 40 * v18;
  }
  else
  {
    unsigned int v21 = 8 * v17;
  }
  uint64_t result = v90;
  if (v21 >= 0x1009) {
    operator new[]();
  }
  uint64_t v23 = *(void *)(v3 + 80) >> 3;
  uint64_t v24 = v15[1];
  if ((v20 & 1) == 0)
  {
    uint64_t v25 = (double *)&v90[v17];
    if ((int)v17 >= 1)
    {
      float v26 = v25 + 2;
      uint64_t v27 = v18;
      do
      {
        double v5 = *v11;
        *float v26 = *v11;
        v26[1] = v5;
        *(v26 - 2) = v5;
        *(v26 - 1) = v5;
        v11 += v14;
        v26 += 4;
        --v27;
      }
      while (v27);
    }
    uint64_t v14 = 4 * (v14 != 0);
    uint64_t v11 = (double *)&v90[v17];
    goto LABEL_23;
  }
  if (v11)
  {
    uint64_t v25 = 0;
LABEL_23:
    if ((int)v16 >= 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = v16 - 4;
      uint64_t v30 = 8 * v14;
      unsigned int v31 = v9 + 1;
      float v32 = v11;
      float v33 = v9;
      do
      {
        if (v25)
        {
          uint64_t v34 = v18;
          uint64_t v35 = v33;
          uint64_t v36 = v25;
          uint64_t v37 = (double *)v90;
          if ((int)v17 >= 1)
          {
            do
            {
              LOBYTE(v5) = *v35;
              double v5 = (double)*(unint64_t *)&v5 - *v36;
              *v37++ = v5;
              uint64_t v36 = (double *)((char *)v36 + v30);
              v35 += v12;
              --v34;
            }
            while (v34);
          }
        }
        else if ((int)v18 >= 1)
        {
          uint64_t v38 = v18;
          int v39 = v33;
          double v40 = v32;
          uint64_t v41 = (double *)v90;
          do
          {
            LOBYTE(v5) = *v39;
            double v5 = (double)*(unint64_t *)&v5 - *v40;
            *v41++ = v5;
            double v40 = (double *)((char *)v40 + v30);
            v39 += v12;
            --v38;
          }
          while (v38);
        }
        uint64_t v42 = v31;
        uint64_t v43 = v28;
        if (v28 <= v29)
        {
          do
          {
            if ((int)v17 < 1)
            {
              double v52 = 0.0;
              double v51 = 0.0;
              double v50 = 0.0;
              double v46 = 0.0;
            }
            else
            {
              double v44 = &v11[v43];
              if (v25) {
                double v44 = v25;
              }
              double v45 = v44 + 2;
              double v46 = 0.0;
              float v47 = v42;
              uint64_t v48 = v18;
              double v49 = (double *)v90;
              double v50 = 0.0;
              double v51 = 0.0;
              double v52 = 0.0;
              do
              {
                double v53 = *v49++;
                LOBYTE(v7) = *(v47 - 1);
                *(double *)&unint64_t v54 = (double)*(unint64_t *)&v7 - *(v45 - 2);
                double v52 = v52 + v53 * *(double *)&v54;
                LOBYTE(v54) = *v47;
                *(double *)&unint64_t v55 = (double)v54 - *(v45 - 1);
                double v51 = v51 + v53 * *(double *)&v55;
                LOBYTE(v55) = v47[1];
                *(double *)&unint64_t v56 = (double)v55 - *v45;
                double v50 = v50 + v53 * *(double *)&v56;
                LOBYTE(v56) = v47[2];
                double v7 = (double)v56 - v45[1];
                double v46 = v46 + v53 * v7;
                v47 += v12;
                double v45 = (double *)((char *)v45 + v30);
                --v48;
              }
              while (v48);
            }
            float v57 = (double *)(v10 + 8 * v43);
            double v6 = v51 * v8;
            *float v57 = v52 * v8;
            v57[1] = v6;
            double v5 = v46 * v8;
            v57[2] = v50 * v8;
            v57[3] = v5;
            v43 += 4;
            v42 += 4;
          }
          while ((int)v29 >= (int)v43);
          uint64_t v43 = v43;
        }
        else
        {
          uint64_t v43 = v28;
        }
        for (; (int)v16 > (int)v43; ++v43)
        {
          if ((int)v18 < 1)
          {
            double v59 = 0.0;
          }
          else
          {
            unint64_t v58 = &v11[v43];
            if (v25) {
              unint64_t v58 = v25;
            }
            double v59 = 0.0;
            uint64_t v60 = v9;
            uint64_t v61 = v18;
            unint64_t v62 = (double *)v90;
            do
            {
              double v63 = *v62++;
              LOBYTE(v6) = v60[v43];
              double v6 = (double)*(unint64_t *)&v6 - *v58;
              double v59 = v59 + v63 * v6;
              unint64_t v58 = (double *)((char *)v58 + v30);
              v60 += v12;
              --v61;
            }
            while (v61);
          }
          double v5 = v59 * v8;
          *(double *)(v10 + 8 * v43) = v5;
        }
        v10 += 8 * v23;
        ++v28;
        ++v33;
        ++v32;
        ++v31;
      }
      while (v28 != v24);
    }
    return result;
  }
  if ((int)v16 >= 1)
  {
    uint64_t v64 = 0;
    uint64_t v65 = v16 - 4;
    unint64_t v66 = v9 + 3;
    unint64_t v67 = v9;
    do
    {
      uint64_t v68 = v17;
      unint64_t v69 = v67;
      unint64_t v70 = (double *)v90;
      if ((int)v18 >= 1)
      {
        do
        {
          LOBYTE(v5) = *v69;
          double v5 = (double)*(unint64_t *)&v5;
          *v70++ = v5;
          v69 += v12;
          --v68;
        }
        while (v68);
      }
      double v71 = v66;
      uint64_t v72 = v64;
      if (v64 <= v65)
      {
        do
        {
          if ((int)v17 < 1)
          {
            double v79 = 0.0;
            double v78 = 0.0;
            double v77 = 0.0;
            double v73 = 0.0;
          }
          else
          {
            double v73 = 0.0;
            unsigned int v74 = v71;
            uint64_t v75 = v17;
            float v76 = (double *)v90;
            double v77 = 0.0;
            double v78 = 0.0;
            double v79 = 0.0;
            do
            {
              double v80 = *v76++;
              LOBYTE(v7) = *(v74 - 3);
              *(double *)&unint64_t v81 = (double)*(unint64_t *)&v7;
              double v79 = v79 + v80 * *(double *)&v81;
              LOBYTE(v81) = *(v74 - 2);
              *(double *)&unint64_t v82 = (double)v81;
              double v78 = v78 + v80 * *(double *)&v82;
              LOBYTE(v82) = *(v74 - 1);
              *(double *)&unint64_t v83 = (double)v82;
              double v77 = v77 + v80 * *(double *)&v83;
              LOBYTE(v83) = *v74;
              double v7 = (double)v83;
              double v73 = v73 + v80 * v7;
              v74 += v12;
              --v75;
            }
            while (v75);
          }
          uint64_t v84 = (double *)(v10 + 8 * v72);
          double v6 = v78 * v8;
          double *v84 = v79 * v8;
          v84[1] = v6;
          double v5 = v73 * v8;
          v84[2] = v77 * v8;
          v84[3] = v5;
          v72 += 4;
          v71 += 4;
        }
        while ((int)v65 >= (int)v72);
        uint64_t v72 = v72;
      }
      else
      {
        uint64_t v72 = v64;
      }
      for (; (int)v16 > (int)v72; ++v72)
      {
        double v85 = 0.0;
        if ((int)v18 >= 1)
        {
          uint64_t v86 = v9;
          uint64_t v87 = v17;
          uint64_t v88 = (double *)v90;
          do
          {
            double v89 = *v88++;
            LOBYTE(v6) = v86[v72];
            double v6 = (double)*(unint64_t *)&v6;
            double v85 = v85 + v89 * v6;
            v86 += v12;
            --v87;
          }
          while (v87);
        }
        double v5 = v85 * v8;
        *(double *)(v10 + 8 * v72) = v5;
      }
      ++v64;
      v10 += 8 * v23;
      ++v67;
      ++v66;
    }
    while (v64 != v16);
  }
  return result;
}

uint64_t cv::MulTransposedL<unsigned char,double>(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x270FA5388](a1, a2);
  double v10 = v9;
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v11 = *(unsigned __int8 **)(result + 16);
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = *(void *)(v3 + 16);
  uint64_t v15 = *(void *)(result + 80);
  uint64_t v16 = *(void *)(v12 + 80) >> 3;
  if (*(int *)(v3 + 8) <= 1) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = *(void *)(v3 + 80) >> 3;
  }
  uint64_t v18 = *(unsigned int **)(result + 64);
  unint64_t v19 = *v18;
  uint64_t v20 = (int)v18[1];
  uint64_t v21 = v18[1];
  if (v14)
  {
    int v22 = *(_DWORD *)(v3 + 12);
    uint64_t result = (uint64_t)v71;
    if ((unint64_t)(8 * v20) >= 0x1009) {
      operator new[]();
    }
    if ((int)v19 >= 1)
    {
      uint64_t v23 = 0;
      uint64_t v24 = v11 + 3;
      uint64_t v25 = *(double **)(v3 + 16);
      do
      {
        if (v22 >= (int)v21)
        {
          uint64_t v28 = v21;
          uint64_t v29 = v11;
          uint64_t v30 = v25;
          unsigned int v31 = (double *)v71;
          if ((int)v21 >= 1)
          {
            do
            {
              unsigned int v32 = *v29++;
              double v33 = (double)v32;
              double v34 = *v30++;
              double v4 = v34;
              *v31++ = v33 - v34;
              --v28;
            }
            while (v28);
          }
        }
        else if ((int)v20 >= 1)
        {
          uint64_t v26 = 0;
          double v27 = *(double *)(v14 + 8 * v17 * v23);
          do
          {
            LOBYTE(v4) = v11[v26];
            double v4 = (double)*(unint64_t *)&v4 - v27;
            *(double *)&v71[v26++] = v4;
          }
          while (v21 != v26);
        }
        uint64_t v35 = v11;
        uint64_t v36 = v24;
        uint64_t v37 = v23;
        do
        {
          uint64_t v38 = (double *)(v14 + 8 * v17 * v37);
          if (v22 < (int)v20)
          {
            double v74 = *v38;
            double v75 = v74;
            *(double *)double v73 = v74;
            *(double *)&v73[1] = v74;
            uint64_t v38 = (double *)v73;
          }
          if ((int)v21 >= 4)
          {
            uint64_t v41 = 0;
            double v40 = 0.0;
            uint64_t v42 = (double *)&v72;
            do
            {
              LOBYTE(v4) = v36[v41 - 3];
              double v43 = *(v42 - 2);
              LOBYTE(v8) = v36[v41 - 2];
              double v44 = *(v42 - 1) * ((double)*(unint64_t *)&v8 - v38[1])
                  + v43 * ((double)*(unint64_t *)&v4 - *v38);
              LOBYTE(v43) = v36[v41 - 1];
              *(double *)&unint64_t v45 = (double)*(unint64_t *)&v43 - v38[2];
              double v46 = *v42;
              double v8 = v42[1];
              v42 += 4;
              double v47 = v44 + v46 * *(double *)&v45;
              LOBYTE(v45) = v36[v41];
              double v4 = v47 + v8 * ((double)v45 - v38[3]);
              double v40 = v40 + v4;
              v41 += 4;
              v38 += 4 * (v22 == v20);
            }
            while (v41 <= (int)v21 - 4);
            int v39 = ((v21 - 4) & 0xFFFFFFFC) + 4;
          }
          else
          {
            int v39 = 0;
            double v40 = 0.0;
          }
          if (v39 < (int)v20)
          {
            uint64_t v48 = &v35[v39];
            double v49 = (double *)&v71[v39];
            do
            {
              double v50 = *v49++;
              double v4 = v50;
              LODWORD(v50) = *v48++;
              double v51 = (double)LODWORD(v50);
              double v52 = *v38++;
              double v40 = v40 + v4 * (v51 - v52);
              ++v39;
            }
            while ((int)v20 > v39);
          }
          *(double *)(v13 + 8 * v37++) = v40 * v10;
          v36 += v15;
          v35 += v15;
        }
        while (v37 != v19);
        v13 += 8 * v16;
        ++v23;
        v25 += v17;
        v11 += v15;
        v24 += v15;
      }
      while (v23 != v19);
    }
  }
  else if ((int)v19 >= 1)
  {
    unint64_t v53 = 0;
    unint64_t v54 = v11 + 1;
    do
    {
      unint64_t v55 = v11;
      unint64_t v56 = v54;
      unint64_t v57 = v53;
      do
      {
        if ((int)v20 >= 4)
        {
          uint64_t v60 = 0;
          double v59 = 0.0;
          do
          {
            LOBYTE(v4) = v54[v60 - 1];
            LOBYTE(v5) = v56[v60 - 1];
            LOBYTE(v6) = v54[v60];
            *(double *)&unint64_t v61 = (double)*(unint64_t *)&v5;
            LOBYTE(v7) = v56[v60];
            double v7 = (double)*(unint64_t *)&v7;
            *(double *)&unint64_t v62 = (double)*(unint64_t *)&v6 * v7;
            double v63 = *(double *)&v62 + (double)*(unint64_t *)&v4 * *(double *)&v61;
            LOBYTE(v61) = v54[v60 + 1];
            *(double *)&unint64_t v64 = (double)v61;
            LOBYTE(v62) = v56[v60 + 1];
            *(double *)&unint64_t v65 = (double)v62;
            double v66 = v63 + *(double *)&v64 * *(double *)&v65;
            LOBYTE(v64) = v54[v60 + 2];
            double v5 = (double)v64;
            LOBYTE(v65) = v56[v60 + 2];
            double v6 = (double)v65;
            double v4 = v66 + v5 * v6;
            double v59 = v59 + v4;
            v60 += 4;
          }
          while (v60 <= (int)v21 - 4);
          int v58 = ((v21 - 4) & 0xFFFFFFFC) + 4;
        }
        else
        {
          int v58 = 0;
          double v59 = 0.0;
        }
        if (v58 < (int)v21)
        {
          unint64_t v67 = &v55[v58];
          uint64_t v68 = &v11[v58];
          do
          {
            unsigned int v69 = *v68++;
            double v4 = (double)v69;
            unsigned int v70 = *v67++;
            uint64_t result = v70;
            double v5 = (double)v70;
            double v59 = v59 + v4 * (double)v70;
            ++v58;
          }
          while ((int)v21 > v58);
        }
        *(double *)(v13 + 8 * v57++) = v59 * v10;
        v56 += v15;
        v55 += v15;
      }
      while (v57 < v19);
      ++v53;
      v13 += 8 * v16;
      v54 += v15;
      v11 += v15;
    }
    while (v53 != v19);
  }
  return result;
}

_DWORD *cv::MulTransposedR<unsigned short,float>(uint64_t a1, uint64_t a2)
{
  v2 = (void *)MEMORY[0x270FA5388](a1, a2);
  double v7 = *(double *)v5.i64;
  uint64_t v85 = *MEMORY[0x263EF8340];
  double v8 = (uint16x4_t *)v2[2];
  uint64_t v9 = *(void *)(v3 + 16);
  double v10 = *(const float **)(v4 + 16);
  unint64_t v11 = v2[10];
  int v12 = *(_DWORD *)(v4 + 12);
  if (*(int *)(v4 + 8) <= 1) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)(v4 + 80) >> 2;
  }
  uint64_t v14 = (unsigned int *)v2[8];
  uint64_t v16 = (int)*v14;
  uint64_t v15 = (int)v14[1];
  uint64_t v17 = *v14;
  if (v10) {
    BOOL v18 = v12 < (int)v15;
  }
  else {
    BOOL v18 = 0;
  }
  char v19 = !v18;
  if (v18)
  {
    if (v12 != 1) {
      __assert_rtn("MulTransposedR", "matmul.cpp", 2360, "delta_cols == 1");
    }
    unsigned int v20 = 20 * v17;
  }
  else
  {
    unsigned int v20 = 4 * v16;
  }
  uint64_t result = v84;
  if (v20 >= 0x1009) {
    operator new[]();
  }
  unint64_t v22 = v11 >> 1;
  uint64_t v23 = *(void *)(v3 + 80) >> 2;
  uint64_t v24 = v14[1];
  if ((v19 & 1) == 0)
  {
    uint64_t v25 = (float32x4_t *)&v84[v16];
    if ((int)v16 >= 1)
    {
      uint64_t v27 = v17;
      uint64_t v28 = (float32x4_t *)&v84[v16];
      do
      {
        float32x4_t v5 = vld1q_dup_f32(v10);
        uint64_t v26 = 4 * v13;
        double v10 = (const float *)((char *)v10 + v26);
        *v28++ = v5;
        --v27;
      }
      while (v27);
    }
    uint64_t v13 = 4 * (v13 != 0);
    double v10 = (const float *)&v84[v16];
    goto LABEL_23;
  }
  if (v10)
  {
    uint64_t v25 = 0;
LABEL_23:
    if ((int)v15 >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = v15 - 4;
      uint64_t v31 = 4 * v13;
      uint64_t v32 = 2 * v22;
      double v33 = (float *)v10;
      double v34 = v8;
      do
      {
        if (v25)
        {
          uint64_t v35 = v17;
          uint64_t v36 = (__int16 *)v34;
          uint64_t v37 = (float *)v25;
          uint64_t v38 = v84;
          if ((int)v16 >= 1)
          {
            do
            {
              v5.i16[0] = *v36;
              v5.f32[0] = (float)v5.u32[0] - *v37;
              *v38++ = v5.i32[0];
              uint64_t v37 = (float *)((char *)v37 + v31);
              uint64_t v36 = (__int16 *)((char *)v36 + v32);
              --v35;
            }
            while (v35);
          }
        }
        else if ((int)v17 >= 1)
        {
          uint64_t v39 = v17;
          double v40 = (__int16 *)v34;
          uint64_t v41 = v33;
          uint64_t v42 = v84;
          do
          {
            v5.i16[0] = *v40;
            v5.f32[0] = (float)v5.u32[0] - *v41;
            *v42++ = v5.i32[0];
            uint64_t v41 = (float *)((char *)v41 + v31);
            double v40 = (__int16 *)((char *)v40 + v32);
            --v39;
          }
          while (v39);
        }
        double v43 = v34;
        uint64_t v44 = v29;
        if (v29 <= v30)
        {
          do
          {
            if ((int)v16 < 1)
            {
              float64x2_t v46 = 0uLL;
              float64x2_t v50 = 0uLL;
            }
            else
            {
              unint64_t v45 = (float32x4_t *)&v10[v44];
              if (v25) {
                unint64_t v45 = v25;
              }
              float64x2_t v46 = 0uLL;
              double v47 = v43;
              uint64_t v48 = v17;
              double v49 = (float *)v84;
              float64x2_t v50 = 0uLL;
              do
              {
                float v51 = *v49++;
                double v6 = v51;
                float32x4_t v52 = vsubq_f32(vcvtq_f32_u32(vmovl_u16(*v47)), *v45);
                float64x2_t v50 = vmlaq_n_f64(v50, vcvt_hight_f64_f32(v52), v51);
                float64x2_t v46 = vmlaq_n_f64(v46, vcvtq_f64_f32(*(float32x2_t *)v52.f32), v51);
                unint64_t v45 = (float32x4_t *)((char *)v45 + v31);
                double v47 = (uint16x4_t *)((char *)v47 + v32);
                --v48;
              }
              while (v48);
            }
            float32x4_t v5 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v46, v7)), vmulq_n_f64(v50, v7));
            *(float32x4_t *)(v9 + 4 * v44) = v5;
            v44 += 4;
            ++v43;
          }
          while ((int)v30 >= (int)v44);
          uint64_t v44 = v44;
        }
        else
        {
          uint64_t v44 = v29;
        }
        if ((int)v44 < (int)v15)
        {
          unint64_t v53 = (_WORD *)v8 + v44;
          do
          {
            if ((int)v17 < 1)
            {
              double v55 = 0.0;
            }
            else
            {
              unint64_t v54 = (float *)&v10[v44];
              if (v25) {
                unint64_t v54 = (float *)v25;
              }
              double v55 = 0.0;
              unint64_t v56 = v53;
              uint64_t v57 = v17;
              int v58 = (float *)v84;
              do
              {
                float v59 = *v58++;
                LOWORD(v6) = *v56;
                double v6 = (float)((float)LODWORD(v6) - *v54);
                double v55 = v55 + v59 * v6;
                unint64_t v54 = (float *)((char *)v54 + v31);
                unint64_t v56 = (_WORD *)((char *)v56 + v32);
                --v57;
              }
              while (v57);
            }
            v5.f32[0] = v55 * v7;
            *(_DWORD *)(v9 + 4 * v44++) = v5.i32[0];
            ++v53;
          }
          while ((int)v15 > (int)v44);
        }
        ++v29;
        v9 += 4 * v23;
        double v34 = (uint16x4_t *)((char *)v34 + 2);
        ++v33;
      }
      while (v29 != v24);
    }
    return result;
  }
  if ((int)v15 >= 1)
  {
    uint64_t v60 = 0;
    uint64_t v61 = v15 - 4;
    uint64_t v62 = 2 * v22;
    double v63 = v8;
    do
    {
      uint64_t v64 = v16;
      unint64_t v65 = (__int16 *)v63;
      double v66 = v84;
      if ((int)v17 >= 1)
      {
        do
        {
          v5.i16[0] = *v65;
          v5.f32[0] = (float)v5.u32[0];
          *v66++ = v5.i32[0];
          unint64_t v65 = (__int16 *)((char *)v65 + v62);
          --v64;
        }
        while (v64);
      }
      unint64_t v67 = v63;
      uint64_t v68 = v60;
      if (v60 <= v61)
      {
        do
        {
          float64x2_t v69 = 0uLL;
          if ((int)v16 < 1)
          {
            float64x2_t v73 = 0uLL;
          }
          else
          {
            unsigned int v70 = v67;
            uint64_t v71 = v16;
            uint64_t v72 = (float *)v84;
            float64x2_t v73 = 0uLL;
            do
            {
              float v74 = *v72++;
              double v6 = v74;
              uint32x4_t v75 = vmovl_u16(*v70);
              v76.i64[0] = v75.u32[0];
              v76.i64[1] = v75.u32[1];
              float64x2_t v77 = vcvtq_f64_u64(v76);
              v76.i64[0] = v75.u32[2];
              v76.i64[1] = v75.u32[3];
              float64x2_t v73 = vmlaq_n_f64(v73, vcvtq_f64_u64(v76), v74);
              float64x2_t v69 = vmlaq_n_f64(v69, v77, v74);
              unsigned int v70 = (uint16x4_t *)((char *)v70 + v62);
              --v71;
            }
            while (v71);
          }
          float32x4_t v5 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v69, v7)), vmulq_n_f64(v73, v7));
          *(float32x4_t *)(v9 + 4 * v68) = v5;
          v68 += 4;
          ++v67;
        }
        while ((int)v61 >= (int)v68);
        uint64_t v68 = v68;
      }
      else
      {
        uint64_t v68 = v60;
      }
      if ((int)v68 < (int)v15)
      {
        double v78 = (_WORD *)v8 + v68;
        do
        {
          double v79 = 0.0;
          if ((int)v17 >= 1)
          {
            double v80 = v78;
            uint64_t v81 = v16;
            unint64_t v82 = (float *)v84;
            do
            {
              float v83 = *v82++;
              LOWORD(v6) = *v80;
              double v6 = (double)*(unint64_t *)&v6;
              double v79 = v79 + v83 * v6;
              double v80 = (_WORD *)((char *)v80 + v62);
              --v81;
            }
            while (v81);
          }
          v5.f32[0] = v79 * v7;
          *(_DWORD *)(v9 + 4 * v68++) = v5.i32[0];
          ++v78;
        }
        while ((int)v15 > (int)v68);
      }
      ++v60;
      v9 += 4 * v23;
      double v63 = (uint16x4_t *)((char *)v63 + 2);
    }
    while (v60 != v15);
  }
  return result;
}

unsigned __int16 *cv::MulTransposedL<unsigned short,float>(uint64_t a1, uint64_t a2)
{
  uint64_t result = (unsigned __int16 *)MEMORY[0x270FA5388](a1, a2);
  double v9 = v8;
  uint64_t v83 = *MEMORY[0x263EF8340];
  double v10 = (unsigned __int16 *)*((void *)result + 2);
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = *(void *)(v3 + 16);
  uint64_t v14 = *((void *)result + 10) >> 1;
  uint64_t v15 = *(void *)(v11 + 80) >> 2;
  if (*(int *)(v3 + 8) <= 1) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *(void *)(v3 + 80) >> 2;
  }
  uint64_t v17 = (unsigned int *)*((void *)result + 8);
  unint64_t v18 = *v17;
  uint64_t v19 = (int)v17[1];
  uint64_t v20 = v17[1];
  if (v13)
  {
    int v21 = *(_DWORD *)(v3 + 12);
    uint64_t result = (unsigned __int16 *)v80;
    if ((unint64_t)(4 * v19) >= 0x1009) {
      operator new[]();
    }
    if ((int)v18 >= 1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 2 * v14;
      uint64_t v24 = v10 + 2;
      uint64_t v25 = *(float **)(v3 + 16);
      do
      {
        if (v21 >= (int)v20)
        {
          uint64_t v28 = v20;
          uint64_t v29 = v10;
          uint64_t v30 = v25;
          uint64_t v31 = (float *)v80;
          if ((int)v20 >= 1)
          {
            do
            {
              unsigned int v32 = *v29++;
              float v33 = (float)v32;
              float v34 = *v30++;
              WORD1(v4) = HIWORD(v34);
              *v31++ = v33 - v34;
              --v28;
            }
            while (v28);
          }
        }
        else if ((int)v19 >= 1)
        {
          uint64_t v26 = 0;
          float v27 = *(float *)(v13 + 4 * v16 * v22);
          do
          {
            LOWORD(v4) = v10[v26];
            *(float *)&double v4 = (float)LODWORD(v4) - v27;
            v80[v26++] = LODWORD(v4);
          }
          while (v20 != v26);
        }
        uint64_t v35 = v10;
        uint64_t v36 = v24;
        uint64_t v37 = v22;
        do
        {
          uint64_t v38 = (float32x4_t *)(v13 + 4 * v16 * v37);
          if (v21 < (int)v19)
          {
            float32x4_t v39 = vld1q_dup_f32(v38->f32);
            float32x4_t v82 = v39;
            uint64_t v38 = &v82;
          }
          if ((int)v20 >= 4)
          {
            uint64_t v42 = 0;
            double v41 = 0.0;
            double v43 = v36;
            uint64_t v44 = (float *)&v81;
            do
            {
              LOWORD(v6) = *(v43 - 2);
              float v45 = v38->f32[0];
              LOWORD(v45) = *(v43 - 1);
              double v46 = *(v44 - 1) * (float)((float)LODWORD(v45) - v38->f32[1]);
              double v47 = v46 + *(v44 - 2) * (float)((float)LODWORD(v6) - v38->f32[0]);
              LOWORD(v46) = *v43;
              float v48 = *v44;
              float v49 = v44[1];
              v44 += 4;
              double v50 = v48;
              double v51 = v47 + v50 * (float)((float)LODWORD(v46) - v38->f32[2]);
              LOWORD(v50) = v43[1];
              double v6 = (float)((float)LODWORD(v50) - v38->f32[3]);
              double v4 = v51 + v49 * v6;
              v42 += 4;
              double v41 = v41 + v4;
              v38 += v21 == v19;
              v43 += 4;
            }
            while (v42 <= (int)v20 - 4);
            int v40 = ((v20 - 4) & 0xFFFFFFFC) + 4;
          }
          else
          {
            int v40 = 0;
            double v41 = 0.0;
          }
          if (v40 < (int)v19)
          {
            float32x4_t v52 = &v35[v40];
            unint64_t v53 = (float *)&v80[v40];
            do
            {
              float v54 = *v53++;
              float v55 = v54;
              unsigned int v56 = *v52++;
              float v57 = (float)v56;
              float v58 = v38->f32[0];
              uint64_t v38 = (float32x4_t *)((char *)v38 + 4);
              WORD1(v6) = HIWORD(v58);
              double v4 = v55;
              double v41 = v41 + v4 * (float)(v57 - v58);
              ++v40;
            }
            while ((int)v19 > v40);
          }
          float v59 = v41 * v9;
          *(float *)(v12 + 4 * v37++) = v59;
          uint64_t v36 = (unsigned __int16 *)((char *)v36 + v23);
          uint64_t v35 = (unsigned __int16 *)((char *)v35 + v23);
        }
        while (v37 != v18);
        v12 += 4 * v15;
        ++v22;
        v25 += v16;
        double v10 = (unsigned __int16 *)((char *)v10 + v23);
        uint64_t v24 = (unsigned __int16 *)((char *)v24 + v23);
      }
      while (v22 != v18);
    }
  }
  else if ((int)v18 >= 1)
  {
    unint64_t v60 = 0;
    uint64_t v61 = v10 + 2;
    uint64_t v62 = 2 * v14;
    do
    {
      double v63 = v10;
      uint64_t v64 = v61;
      unint64_t v65 = v60;
      do
      {
        if ((int)v19 >= 4)
        {
          uint64_t v68 = 0;
          double v67 = 0.0;
          float64x2_t v69 = v64;
          uint64_t result = v61;
          do
          {
            LOWORD(v4) = *(result - 2);
            LOWORD(v5) = *(v69 - 2);
            *(double *)&unint64_t v70 = (double)*(unint64_t *)&v5;
            LOWORD(v6) = *(result - 1);
            LOWORD(v7) = *(v69 - 1);
            double v7 = (double)*(unint64_t *)&v7;
            *(double *)&unint64_t v71 = (double)*(unint64_t *)&v6 * v7;
            double v72 = *(double *)&v71 + (double)*(unint64_t *)&v4 * *(double *)&v70;
            LOWORD(v70) = *result;
            LOWORD(v71) = *v69;
            *(double *)&unint64_t v73 = (double)v70;
            *(double *)&unint64_t v74 = (double)v71;
            double v75 = v72 + *(double *)&v73 * *(double *)&v74;
            LOWORD(v73) = result[1];
            double v5 = (double)v73;
            LOWORD(v74) = v69[1];
            double v6 = (double)v74;
            double v4 = v75 + v5 * v6;
            double v67 = v67 + v4;
            v68 += 4;
            result += 4;
            v69 += 4;
          }
          while (v68 <= (int)v20 - 4);
          int v66 = ((v20 - 4) & 0xFFFFFFFC) + 4;
        }
        else
        {
          int v66 = 0;
          double v67 = 0.0;
        }
        if (v66 < (int)v20)
        {
          uint64x2_t v76 = &v63[v66];
          uint64_t result = &v10[v66];
          do
          {
            unsigned int v77 = *result++;
            double v4 = (double)v77;
            unsigned int v78 = *v76++;
            double v5 = (double)v78;
            double v67 = v67 + v4 * (double)v78;
            ++v66;
          }
          while ((int)v20 > v66);
        }
        float v79 = v67 * v9;
        *(float *)(v12 + 4 * v65++) = v79;
        uint64_t v64 = (_WORD *)((char *)v64 + v62);
        double v63 = (unsigned __int16 *)((char *)v63 + v62);
      }
      while (v65 < v18);
      ++v60;
      v12 += 4 * v15;
      uint64_t v61 = (unsigned __int16 *)((char *)v61 + v62);
      double v10 = (unsigned __int16 *)((char *)v10 + v62);
    }
    while (v60 != v18);
  }
  return result;
}

void *cv::MulTransposedR<unsigned short,double>(uint64_t a1, uint64_t a2)
{
  v2 = (void *)MEMORY[0x270FA5388](a1, a2);
  double v8 = v5;
  v95[515] = *MEMORY[0x263EF8340];
  double v9 = (_WORD *)v2[2];
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v11 = *(double **)(v4 + 16);
  unint64_t v12 = v2[10];
  int v13 = *(_DWORD *)(v4 + 12);
  if (*(int *)(v4 + 8) <= 1) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *(void *)(v4 + 80) >> 3;
  }
  uint64_t v15 = (unsigned int *)v2[8];
  uint64_t v17 = (int)*v15;
  uint64_t v16 = (int)v15[1];
  uint64_t v18 = *v15;
  if (v11) {
    BOOL v19 = v13 < (int)v16;
  }
  else {
    BOOL v19 = 0;
  }
  char v20 = !v19;
  if (v19)
  {
    if (v13 != 1) {
      __assert_rtn("MulTransposedR", "matmul.cpp", 2360, "delta_cols == 1");
    }
    unsigned int v21 = 40 * v18;
  }
  else
  {
    unsigned int v21 = 8 * v17;
  }
  uint64_t result = v95;
  if (v21 >= 0x1009) {
    operator new[]();
  }
  unint64_t v23 = v12 >> 1;
  uint64_t v24 = *(void *)(v3 + 80) >> 3;
  uint64_t v25 = v15[1];
  if ((v20 & 1) == 0)
  {
    uint64_t v26 = (double *)&v95[v17];
    if ((int)v17 >= 1)
    {
      float v27 = v26 + 2;
      uint64_t v28 = v18;
      do
      {
        double v5 = *v11;
        *float v27 = *v11;
        v27[1] = v5;
        *(v27 - 2) = v5;
        *(v27 - 1) = v5;
        v11 += v14;
        v27 += 4;
        --v28;
      }
      while (v28);
    }
    uint64_t v14 = 4 * (v14 != 0);
    uint64_t v11 = (double *)&v95[v17];
    goto LABEL_23;
  }
  if (v11)
  {
    uint64_t v26 = 0;
LABEL_23:
    if ((int)v16 >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = v16 - 4;
      uint64_t v31 = 8 * v14;
      uint64_t v32 = 2 * v23;
      float v33 = v9 + 2;
      float v34 = v11;
      uint64_t v35 = v9;
      do
      {
        if (v26)
        {
          uint64_t v36 = v18;
          uint64_t v37 = v35;
          uint64_t v38 = v26;
          float32x4_t v39 = (double *)v95;
          if ((int)v17 >= 1)
          {
            do
            {
              LOWORD(v5) = *v37;
              double v5 = (double)*(unint64_t *)&v5 - *v38;
              *v39++ = v5;
              uint64_t v38 = (double *)((char *)v38 + v31);
              uint64_t v37 = (_WORD *)((char *)v37 + v32);
              --v36;
            }
            while (v36);
          }
        }
        else if ((int)v18 >= 1)
        {
          uint64_t v40 = v18;
          double v41 = v35;
          uint64_t v42 = v34;
          double v43 = (double *)v95;
          do
          {
            LOWORD(v5) = *v41;
            double v5 = (double)*(unint64_t *)&v5 - *v42;
            *v43++ = v5;
            uint64_t v42 = (double *)((char *)v42 + v31);
            double v41 = (_WORD *)((char *)v41 + v32);
            --v40;
          }
          while (v40);
        }
        uint64_t v44 = v33;
        uint64_t v45 = v29;
        if (v29 <= v30)
        {
          do
          {
            if ((int)v17 < 1)
            {
              double v54 = 0.0;
              double v53 = 0.0;
              double v52 = 0.0;
              double v48 = 0.0;
            }
            else
            {
              double v46 = &v11[v45];
              if (v26) {
                double v46 = v26;
              }
              double v47 = v46 + 2;
              double v48 = 0.0;
              float v49 = v44;
              uint64_t v50 = v18;
              double v51 = (double *)v95;
              double v52 = 0.0;
              double v53 = 0.0;
              double v54 = 0.0;
              do
              {
                double v55 = *v51++;
                LOWORD(v7) = *(v49 - 2);
                *(double *)&unint64_t v56 = (double)*(unint64_t *)&v7 - *(v47 - 2);
                double v54 = v54 + v55 * *(double *)&v56;
                LOWORD(v56) = *(v49 - 1);
                *(double *)&unint64_t v57 = (double)v56 - *(v47 - 1);
                double v53 = v53 + v55 * *(double *)&v57;
                LOWORD(v57) = *v49;
                *(double *)&unint64_t v58 = (double)v57 - *v47;
                double v52 = v52 + v55 * *(double *)&v58;
                LOWORD(v58) = v49[1];
                double v7 = (double)v58 - v47[1];
                double v48 = v48 + v55 * v7;
                float v49 = (_WORD *)((char *)v49 + v32);
                double v47 = (double *)((char *)v47 + v31);
                --v50;
              }
              while (v50);
            }
            float v59 = (double *)(v10 + 8 * v45);
            double v6 = v53 * v8;
            *float v59 = v54 * v8;
            v59[1] = v6;
            double v5 = v48 * v8;
            v59[2] = v52 * v8;
            v59[3] = v5;
            v45 += 4;
            v44 += 4;
          }
          while ((int)v30 >= (int)v45);
          uint64_t v45 = v45;
        }
        else
        {
          uint64_t v45 = v29;
        }
        if ((int)v45 < (int)v16)
        {
          unint64_t v60 = &v9[v45];
          do
          {
            if ((int)v18 < 1)
            {
              double v62 = 0.0;
            }
            else
            {
              uint64_t v61 = &v11[v45];
              if (v26) {
                uint64_t v61 = v26;
              }
              double v62 = 0.0;
              double v63 = v60;
              uint64_t v64 = v18;
              unint64_t v65 = (double *)v95;
              do
              {
                double v66 = *v65++;
                LOWORD(v6) = *v63;
                double v6 = (double)*(unint64_t *)&v6 - *v61;
                double v62 = v62 + v66 * v6;
                uint64_t v61 = (double *)((char *)v61 + v31);
                double v63 = (_WORD *)((char *)v63 + v32);
                --v64;
              }
              while (v64);
            }
            double v5 = v62 * v8;
            *(double *)(v10 + 8 * v45++) = v5;
            ++v60;
          }
          while ((int)v16 > (int)v45);
        }
        v10 += 8 * v24;
        ++v29;
        ++v35;
        ++v34;
        ++v33;
      }
      while (v29 != v25);
    }
    return result;
  }
  if ((int)v16 >= 1)
  {
    uint64_t v67 = 0;
    uint64_t v68 = v16 - 4;
    uint64_t v69 = 2 * v23;
    unint64_t v70 = v9 + 2;
    unint64_t v71 = v9;
    do
    {
      uint64_t v72 = v17;
      unint64_t v73 = v71;
      unint64_t v74 = (double *)v95;
      if ((int)v18 >= 1)
      {
        do
        {
          LOWORD(v5) = *v73;
          double v5 = (double)*(unint64_t *)&v5;
          *v74++ = v5;
          unint64_t v73 = (_WORD *)((char *)v73 + v69);
          --v72;
        }
        while (v72);
      }
      double v75 = v70;
      uint64_t v76 = v67;
      if (v67 <= v68)
      {
        do
        {
          if ((int)v17 < 1)
          {
            double v83 = 0.0;
            double v82 = 0.0;
            double v81 = 0.0;
            double v77 = 0.0;
          }
          else
          {
            double v77 = 0.0;
            unsigned int v78 = v75;
            uint64_t v79 = v17;
            double v80 = (double *)v95;
            double v81 = 0.0;
            double v82 = 0.0;
            double v83 = 0.0;
            do
            {
              double v84 = *v80++;
              LOWORD(v7) = *(v78 - 2);
              *(double *)&unint64_t v85 = (double)*(unint64_t *)&v7;
              double v83 = v83 + v84 * *(double *)&v85;
              LOWORD(v85) = *(v78 - 1);
              *(double *)&unint64_t v86 = (double)v85;
              double v82 = v82 + v84 * *(double *)&v86;
              LOWORD(v86) = *v78;
              *(double *)&unint64_t v87 = (double)v86;
              double v81 = v81 + v84 * *(double *)&v87;
              LOWORD(v87) = v78[1];
              double v7 = (double)v87;
              double v77 = v77 + v84 * v7;
              unsigned int v78 = (_WORD *)((char *)v78 + v69);
              --v79;
            }
            while (v79);
          }
          uint64_t v88 = (double *)(v10 + 8 * v76);
          double v6 = v82 * v8;
          double *v88 = v83 * v8;
          v88[1] = v6;
          double v5 = v77 * v8;
          v88[2] = v81 * v8;
          v88[3] = v5;
          v76 += 4;
          v75 += 4;
        }
        while ((int)v68 >= (int)v76);
        uint64_t v76 = v76;
      }
      else
      {
        uint64_t v76 = v67;
      }
      if ((int)v76 < (int)v16)
      {
        double v89 = &v9[v76];
        do
        {
          double v90 = 0.0;
          if ((int)v18 >= 1)
          {
            int8x16_t v91 = v89;
            uint64_t v92 = v17;
            unint64_t v93 = (double *)v95;
            do
            {
              double v94 = *v93++;
              LOWORD(v6) = *v91;
              double v6 = (double)*(unint64_t *)&v6;
              double v90 = v90 + v94 * v6;
              int8x16_t v91 = (_WORD *)((char *)v91 + v69);
              --v92;
            }
            while (v92);
          }
          double v5 = v90 * v8;
          *(double *)(v10 + 8 * v76++) = v5;
          ++v89;
        }
        while ((int)v16 > (int)v76);
      }
      ++v67;
      v10 += 8 * v24;
      ++v71;
      ++v70;
    }
    while (v67 != v16);
  }
  return result;
}

unsigned __int16 *cv::MulTransposedL<unsigned short,double>(uint64_t a1, uint64_t a2)
{
  uint64_t result = (unsigned __int16 *)MEMORY[0x270FA5388](a1, a2);
  double v10 = v9;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v11 = (unsigned __int16 *)*((void *)result + 2);
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = *(void *)(v3 + 16);
  uint64_t v15 = *((void *)result + 10) >> 1;
  uint64_t v16 = *(void *)(v12 + 80) >> 3;
  if (*(int *)(v3 + 8) <= 1) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = *(void *)(v3 + 80) >> 3;
  }
  uint64_t v18 = (unsigned int *)*((void *)result + 8);
  unint64_t v19 = *v18;
  uint64_t v20 = (int)v18[1];
  uint64_t v21 = v18[1];
  if (v14)
  {
    int v22 = *(_DWORD *)(v3 + 12);
    uint64_t result = (unsigned __int16 *)v74;
    if ((unint64_t)(8 * v20) >= 0x1009) {
      operator new[]();
    }
    if ((int)v19 >= 1)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 2 * v15;
      uint64_t v25 = v11 + 2;
      uint64_t v26 = *(double **)(v3 + 16);
      do
      {
        if (v22 >= (int)v21)
        {
          uint64_t v29 = v21;
          uint64_t v30 = v11;
          uint64_t v31 = v26;
          uint64_t v32 = (double *)v74;
          if ((int)v21 >= 1)
          {
            do
            {
              unsigned int v33 = *v30++;
              double v34 = (double)v33;
              double v35 = *v31++;
              double v4 = v35;
              *v32++ = v34 - v35;
              --v29;
            }
            while (v29);
          }
        }
        else if ((int)v20 >= 1)
        {
          uint64_t v27 = 0;
          double v28 = *(double *)(v14 + 8 * v17 * v23);
          do
          {
            LOWORD(v4) = v11[v27];
            double v4 = (double)*(unint64_t *)&v4 - v28;
            *(double *)&v74[v27++] = v4;
          }
          while (v21 != v27);
        }
        uint64_t v36 = v11;
        uint64_t v37 = v25;
        uint64_t v38 = v23;
        do
        {
          float32x4_t v39 = (double *)(v14 + 8 * v17 * v38);
          if (v22 < (int)v20)
          {
            double v77 = *v39;
            double v78 = v77;
            *(double *)uint64_t v76 = v77;
            *(double *)&v76[1] = v77;
            float32x4_t v39 = (double *)v76;
          }
          if ((int)v21 >= 4)
          {
            uint64_t v42 = 0;
            double v41 = 0.0;
            double v43 = v37;
            uint64_t v44 = (double *)&v75;
            do
            {
              LOWORD(v4) = *(v43 - 2);
              LOWORD(v8) = *(v43 - 1);
              *(double *)&unint64_t v45 = *(v44 - 1) * ((double)*(unint64_t *)&v8 - v39[1]);
              double v46 = *(double *)&v45 + *(v44 - 2) * ((double)*(unint64_t *)&v4 - *v39);
              LOWORD(v45) = *v43;
              *(double *)&unint64_t v47 = (double)v45 - v39[2];
              double v48 = *v44;
              double v8 = v44[1];
              v44 += 4;
              double v49 = v46 + v48 * *(double *)&v47;
              LOWORD(v47) = v43[1];
              double v4 = v49 + v8 * ((double)v47 - v39[3]);
              v42 += 4;
              double v41 = v41 + v4;
              v39 += 4 * (v22 == v20);
              v43 += 4;
            }
            while (v42 <= (int)v21 - 4);
            int v40 = ((v21 - 4) & 0xFFFFFFFC) + 4;
          }
          else
          {
            int v40 = 0;
            double v41 = 0.0;
          }
          if (v40 < (int)v20)
          {
            uint64_t v50 = &v36[v40];
            double v51 = (double *)&v74[v40];
            do
            {
              double v52 = *v51++;
              double v4 = v52;
              LODWORD(v52) = *v50++;
              double v53 = (double)LODWORD(v52);
              double v54 = *v39++;
              double v41 = v41 + v4 * (v53 - v54);
              ++v40;
            }
            while ((int)v20 > v40);
          }
          *(double *)(v13 + 8 * v38++) = v41 * v10;
          uint64_t v37 = (unsigned __int16 *)((char *)v37 + v24);
          uint64_t v36 = (unsigned __int16 *)((char *)v36 + v24);
        }
        while (v38 != v19);
        v13 += 8 * v16;
        ++v23;
        v26 += v17;
        uint64_t v11 = (unsigned __int16 *)((char *)v11 + v24);
        uint64_t v25 = (unsigned __int16 *)((char *)v25 + v24);
      }
      while (v23 != v19);
    }
  }
  else if ((int)v19 >= 1)
  {
    unint64_t v55 = 0;
    unint64_t v56 = v11 + 2;
    uint64_t v57 = 2 * v15;
    do
    {
      unint64_t v58 = v11;
      float v59 = v56;
      unint64_t v60 = v55;
      do
      {
        if ((int)v20 >= 4)
        {
          uint64_t v63 = 0;
          double v62 = 0.0;
          uint64_t v64 = v59;
          uint64_t result = v56;
          do
          {
            LOWORD(v4) = *(result - 2);
            LOWORD(v5) = *(v64 - 2);
            *(double *)&unint64_t v65 = (double)*(unint64_t *)&v5;
            LOWORD(v6) = *(result - 1);
            LOWORD(v7) = *(v64 - 1);
            double v7 = (double)*(unint64_t *)&v7;
            *(double *)&unint64_t v66 = (double)*(unint64_t *)&v6 * v7;
            double v67 = *(double *)&v66 + (double)*(unint64_t *)&v4 * *(double *)&v65;
            LOWORD(v65) = *result;
            LOWORD(v66) = *v64;
            *(double *)&unint64_t v68 = (double)v65;
            *(double *)&unint64_t v69 = (double)v66;
            double v70 = v67 + *(double *)&v68 * *(double *)&v69;
            LOWORD(v68) = result[1];
            double v5 = (double)v68;
            LOWORD(v69) = v64[1];
            double v6 = (double)v69;
            double v4 = v70 + v5 * v6;
            double v62 = v62 + v4;
            v63 += 4;
            result += 4;
            v64 += 4;
          }
          while (v63 <= (int)v21 - 4);
          int v61 = ((v21 - 4) & 0xFFFFFFFC) + 4;
        }
        else
        {
          int v61 = 0;
          double v62 = 0.0;
        }
        if (v61 < (int)v21)
        {
          unint64_t v71 = &v58[v61];
          uint64_t result = &v11[v61];
          do
          {
            unsigned int v72 = *result++;
            double v4 = (double)v72;
            unsigned int v73 = *v71++;
            double v5 = (double)v73;
            double v62 = v62 + v4 * (double)v73;
            ++v61;
          }
          while ((int)v21 > v61);
        }
        *(double *)(v13 + 8 * v60++) = v62 * v10;
        float v59 = (_WORD *)((char *)v59 + v57);
        unint64_t v58 = (unsigned __int16 *)((char *)v58 + v57);
      }
      while (v60 < v19);
      ++v55;
      v13 += 8 * v16;
      unint64_t v56 = (unsigned __int16 *)((char *)v56 + v57);
      uint64_t v11 = (unsigned __int16 *)((char *)v11 + v57);
    }
    while (v55 != v19);
  }
  return result;
}

_DWORD *cv::MulTransposedR<short,float>(uint64_t a1, uint64_t a2)
{
  v2 = (void *)MEMORY[0x270FA5388](a1, a2);
  double v6 = v5;
  uint64_t v87 = *MEMORY[0x263EF8340];
  double v7 = (int16x4_t *)v2[2];
  uint64_t v8 = *(void *)(v3 + 16);
  double v9 = *(const float **)(v4 + 16);
  unint64_t v10 = v2[10];
  int v11 = *(_DWORD *)(v4 + 12);
  if (*(int *)(v4 + 8) <= 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(v4 + 80) >> 2;
  }
  uint64_t v13 = (unsigned int *)v2[8];
  uint64_t v15 = (int)*v13;
  uint64_t v14 = (int)v13[1];
  uint64_t v16 = *v13;
  if (v9) {
    BOOL v17 = v11 < (int)v14;
  }
  else {
    BOOL v17 = 0;
  }
  char v18 = !v17;
  if (v17)
  {
    if (v11 != 1) {
      __assert_rtn("MulTransposedR", "matmul.cpp", 2360, "delta_cols == 1");
    }
    unsigned int v19 = 20 * v16;
  }
  else
  {
    unsigned int v19 = 4 * v15;
  }
  uint64_t result = v86;
  if (v19 >= 0x1009) {
    operator new[]();
  }
  unint64_t v21 = v10 >> 1;
  uint64_t v22 = *(void *)(v3 + 80) >> 2;
  uint64_t v23 = v13[1];
  if ((v18 & 1) == 0)
  {
    uint64_t v24 = (float32x4_t *)&v86[v15];
    if ((int)v15 >= 1)
    {
      uint64_t v26 = v16;
      uint64_t v27 = (float32x4_t *)&v86[v15];
      do
      {
        float32x4_t v28 = vld1q_dup_f32(v9);
        uint64_t v25 = 4 * v12;
        double v9 = (const float *)((char *)v9 + v25);
        *v27++ = v28;
        --v26;
      }
      while (v26);
    }
    uint64_t v12 = 4 * (v12 != 0);
    double v9 = (const float *)&v86[v15];
    goto LABEL_23;
  }
  if (v9)
  {
    uint64_t v24 = 0;
LABEL_23:
    if ((int)v14 >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = v14 - 4;
      uint64_t v31 = 4 * v12;
      uint64_t v32 = 2 * v21;
      unsigned int v33 = (float *)v9;
      double v34 = v7;
      do
      {
        if (v24)
        {
          uint64_t v35 = v16;
          uint64_t v36 = v34;
          uint64_t v37 = (float *)v24;
          uint64_t v38 = (float *)v86;
          if ((int)v15 >= 1)
          {
            do
            {
              *v38++ = (float)v36->i16[0] - *v37;
              uint64_t v37 = (float *)((char *)v37 + v31);
              uint64_t v36 = (int16x4_t *)((char *)v36 + v32);
              --v35;
            }
            while (v35);
          }
        }
        else if ((int)v16 >= 1)
        {
          uint64_t v39 = v16;
          int v40 = v34;
          double v41 = v33;
          uint64_t v42 = (float *)v86;
          do
          {
            *v42++ = (float)v40->i16[0] - *v41;
            double v41 = (float *)((char *)v41 + v31);
            int v40 = (int16x4_t *)((char *)v40 + v32);
            --v39;
          }
          while (v39);
        }
        double v43 = v34;
        uint64_t v44 = v29;
        if (v29 <= v30)
        {
          do
          {
            if ((int)v15 < 1)
            {
              float64x2_t v46 = 0uLL;
              float64x2_t v50 = 0uLL;
            }
            else
            {
              unint64_t v45 = (float32x4_t *)&v9[v44];
              if (v24) {
                unint64_t v45 = v24;
              }
              float64x2_t v46 = 0uLL;
              unint64_t v47 = v43;
              uint64_t v48 = v16;
              double v49 = (float *)v86;
              float64x2_t v50 = 0uLL;
              do
              {
                float v51 = *v49++;
                float32x4_t v52 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(*v47)), *v45);
                float64x2_t v50 = vmlaq_n_f64(v50, vcvt_hight_f64_f32(v52), v51);
                float64x2_t v46 = vmlaq_n_f64(v46, vcvtq_f64_f32(*(float32x2_t *)v52.f32), v51);
                unint64_t v45 = (float32x4_t *)((char *)v45 + v31);
                unint64_t v47 = (int16x4_t *)((char *)v47 + v32);
                --v48;
              }
              while (v48);
            }
            *(float32x4_t *)(v8 + 4 * v44) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v46, v6)), vmulq_n_f64(v50, v6));
            v44 += 4;
            ++v43;
          }
          while ((int)v30 >= (int)v44);
          uint64_t v44 = v44;
        }
        else
        {
          uint64_t v44 = v29;
        }
        if ((int)v44 < (int)v14)
        {
          double v53 = (__int16 *)v7 + v44;
          do
          {
            if ((int)v16 < 1)
            {
              double v55 = 0.0;
            }
            else
            {
              double v54 = (float *)&v9[v44];
              if (v24) {
                double v54 = (float *)v24;
              }
              double v55 = 0.0;
              unint64_t v56 = v53;
              uint64_t v57 = v16;
              unint64_t v58 = (float *)v86;
              do
              {
                float v59 = *v58++;
                double v55 = v55 + v59 * (float)((float)*v56 - *v54);
                double v54 = (float *)((char *)v54 + v31);
                unint64_t v56 = (__int16 *)((char *)v56 + v32);
                --v57;
              }
              while (v57);
            }
            float v60 = v55 * v6;
            *(float *)(v8 + 4 * v44++) = v60;
            ++v53;
          }
          while ((int)v14 > (int)v44);
        }
        ++v29;
        v8 += 4 * v22;
        double v34 = (int16x4_t *)((char *)v34 + 2);
        ++v33;
      }
      while (v29 != v23);
    }
    return result;
  }
  if ((int)v14 >= 1)
  {
    uint64_t v61 = 0;
    uint64_t v62 = v14 - 4;
    uint64_t v63 = 2 * v21;
    uint64_t v64 = v7;
    do
    {
      uint64_t v65 = v15;
      unint64_t v66 = v64;
      double v67 = (float *)v86;
      if ((int)v16 >= 1)
      {
        do
        {
          *v67++ = (float)v66->i16[0];
          unint64_t v66 = (int16x4_t *)((char *)v66 + v63);
          --v65;
        }
        while (v65);
      }
      unint64_t v68 = v64;
      uint64_t v69 = v61;
      if (v61 <= v62)
      {
        do
        {
          float64x2_t v70 = 0uLL;
          if ((int)v15 < 1)
          {
            float64x2_t v74 = 0uLL;
          }
          else
          {
            unint64_t v71 = v68;
            uint64_t v72 = v15;
            unsigned int v73 = (float *)v86;
            float64x2_t v74 = 0uLL;
            do
            {
              float v75 = *v73++;
              int32x4_t v76 = vmovl_s16(*v71);
              v77.i64[0] = v76.i32[0];
              v77.i64[1] = v76.i32[1];
              float64x2_t v78 = vcvtq_f64_s64(v77);
              v77.i64[0] = v76.i32[2];
              v77.i64[1] = v76.i32[3];
              float64x2_t v74 = vmlaq_n_f64(v74, vcvtq_f64_s64(v77), v75);
              float64x2_t v70 = vmlaq_n_f64(v70, v78, v75);
              unint64_t v71 = (int16x4_t *)((char *)v71 + v63);
              --v72;
            }
            while (v72);
          }
          *(float32x4_t *)(v8 + 4 * v69) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v70, v6)), vmulq_n_f64(v74, v6));
          v69 += 4;
          ++v68;
        }
        while ((int)v62 >= (int)v69);
        uint64_t v69 = v69;
      }
      else
      {
        uint64_t v69 = v61;
      }
      if ((int)v69 < (int)v14)
      {
        uint64_t v79 = (__int16 *)v7 + v69;
        do
        {
          double v80 = 0.0;
          if ((int)v16 >= 1)
          {
            double v81 = v79;
            uint64_t v82 = v15;
            double v83 = (float *)v86;
            do
            {
              float v84 = *v83++;
              double v80 = v80 + v84 * (double)*v81;
              double v81 = (__int16 *)((char *)v81 + v63);
              --v82;
            }
            while (v82);
          }
          float v85 = v80 * v6;
          *(float *)(v8 + 4 * v69++) = v85;
          ++v79;
        }
        while ((int)v14 > (int)v69);
      }
      ++v61;
      v8 += 4 * v22;
      uint64_t v64 = (int16x4_t *)((char *)v64 + 2);
    }
    while (v61 != v14);
  }
  return result;
}

__int16 *cv::MulTransposedL<short,float>(uint64_t a1, uint64_t a2)
{
  uint64_t result = (__int16 *)MEMORY[0x270FA5388](a1, a2);
  double v5 = v4;
  uint64_t v70 = *MEMORY[0x263EF8340];
  double v6 = (__int16 *)*((void *)result + 2);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *((void *)result + 10) >> 1;
  uint64_t v11 = *(void *)(v7 + 80) >> 2;
  if (*(int *)(v3 + 8) <= 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(v3 + 80) >> 2;
  }
  uint64_t v13 = (unsigned int *)*((void *)result + 8);
  unint64_t v14 = *v13;
  uint64_t v15 = (int)v13[1];
  uint64_t v16 = v13[1];
  if (v9)
  {
    int v17 = *(_DWORD *)(v3 + 12);
    uint64_t result = (__int16 *)v67;
    if ((unint64_t)(4 * v15) >= 0x1009) {
      operator new[]();
    }
    if ((int)v14 >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 2 * v10;
      uint64_t v20 = v6 + 2;
      unint64_t v21 = *(float **)(v3 + 16);
      do
      {
        if (v17 >= (int)v16)
        {
          uint64_t v24 = v16;
          uint64_t v25 = v6;
          uint64_t v26 = v21;
          uint64_t v27 = (float *)v67;
          if ((int)v16 >= 1)
          {
            do
            {
              int v28 = *v25++;
              float v29 = (float)v28;
              float v30 = *v26++;
              *v27++ = v29 - v30;
              --v24;
            }
            while (v24);
          }
        }
        else if ((int)v15 >= 1)
        {
          uint64_t v22 = 0;
          float v23 = *(float *)(v9 + 4 * v12 * v18);
          do
          {
            *(float *)&v67[v22] = (float)v6[v22] - v23;
            ++v22;
          }
          while (v16 != v22);
        }
        uint64_t v31 = v6;
        uint64_t v32 = v20;
        uint64_t v33 = v18;
        do
        {
          double v34 = (float32x4_t *)(v9 + 4 * v12 * v33);
          if (v17 < (int)v15)
          {
            float32x4_t v35 = vld1q_dup_f32(v34->f32);
            float32x4_t v69 = v35;
            double v34 = &v69;
          }
          if ((int)v16 >= 4)
          {
            uint64_t v38 = 0;
            double v37 = 0.0;
            uint64_t v39 = v32;
            int v40 = (float *)&v68;
            do
            {
              double v41 = *(v40 - 1) * (float)((float)*(v39 - 1) - v34->f32[1])
                  + *(v40 - 2) * (float)((float)*(v39 - 2) - v34->f32[0]);
              float v42 = *v40;
              float v43 = v40[1];
              v40 += 4;
              v38 += 4;
              double v37 = v37 + v41 + v42 * (float)((float)*v39 - v34->f32[2]) + v43 * (float)((float)v39[1] - v34->f32[3]);
              v34 += v17 == v15;
              v39 += 4;
            }
            while (v38 <= (int)v16 - 4);
            int v36 = ((v16 - 4) & 0xFFFFFFFC) + 4;
          }
          else
          {
            int v36 = 0;
            double v37 = 0.0;
          }
          if (v36 < (int)v15)
          {
            uint64_t v44 = &v31[v36];
            unint64_t v45 = (float *)&v67[v36];
            do
            {
              float v46 = *v45++;
              float v47 = v46;
              int v48 = *v44++;
              float v49 = (float)v48;
              float v50 = v34->f32[0];
              double v34 = (float32x4_t *)((char *)v34 + 4);
              double v37 = v37 + v47 * (float)(v49 - v50);
              ++v36;
            }
            while ((int)v15 > v36);
          }
          float v51 = v37 * v5;
          *(float *)(v8 + 4 * v33++) = v51;
          uint64_t v32 = (__int16 *)((char *)v32 + v19);
          uint64_t v31 = (__int16 *)((char *)v31 + v19);
        }
        while (v33 != v14);
        v8 += 4 * v11;
        ++v18;
        v21 += v12;
        double v6 = (__int16 *)((char *)v6 + v19);
        uint64_t v20 = (__int16 *)((char *)v20 + v19);
      }
      while (v18 != v14);
    }
  }
  else if ((int)v14 >= 1)
  {
    unint64_t v52 = 0;
    double v53 = v6 + 2;
    uint64_t v54 = 2 * v10;
    do
    {
      double v55 = v6;
      unint64_t v56 = v53;
      unint64_t v57 = v52;
      do
      {
        if ((int)v15 >= 4)
        {
          uint64_t v60 = 0;
          double v59 = 0.0;
          uint64_t v61 = v56;
          uint64_t result = v53;
          do
          {
            double v59 = v59
                + (double)*(result - 1) * (double)*(v61 - 1)
                + (double)*(result - 2) * (double)*(v61 - 2)
                + (double)*result * (double)*v61
                + (double)result[1] * (double)v61[1];
            v60 += 4;
            result += 4;
            v61 += 4;
          }
          while (v60 <= (int)v16 - 4);
          int v58 = ((v16 - 4) & 0xFFFFFFFC) + 4;
        }
        else
        {
          int v58 = 0;
          double v59 = 0.0;
        }
        if (v58 < (int)v16)
        {
          uint64_t v62 = &v55[v58];
          uint64_t result = &v6[v58];
          do
          {
            int v63 = *result++;
            double v64 = (double)v63;
            int v65 = *v62++;
            double v59 = v59 + v64 * (double)v65;
            ++v58;
          }
          while ((int)v16 > v58);
        }
        float v66 = v59 * v5;
        *(float *)(v8 + 4 * v57++) = v66;
        unint64_t v56 = (__int16 *)((char *)v56 + v54);
        double v55 = (__int16 *)((char *)v55 + v54);
      }
      while (v57 < v14);
      ++v52;
      v8 += 4 * v11;
      double v53 = (__int16 *)((char *)v53 + v54);
      double v6 = (__int16 *)((char *)v6 + v54);
    }
    while (v52 != v14);
  }
  return result;
}

void *cv::MulTransposedR<short,double>(uint64_t a1, uint64_t a2)
{
  v2 = (void *)MEMORY[0x270FA5388](a1, a2);
  double v6 = v5;
  v88[515] = *MEMORY[0x263EF8340];
  uint64_t v7 = (__int16 *)v2[2];
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(double **)(v4 + 16);
  unint64_t v10 = v2[10];
  int v11 = *(_DWORD *)(v4 + 12);
  if (*(int *)(v4 + 8) <= 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(v4 + 80) >> 3;
  }
  uint64_t v13 = (unsigned int *)v2[8];
  uint64_t v15 = (int)*v13;
  uint64_t v14 = (int)v13[1];
  uint64_t v16 = *v13;
  if (v9) {
    BOOL v17 = v11 < (int)v14;
  }
  else {
    BOOL v17 = 0;
  }
  char v18 = !v17;
  if (v17)
  {
    if (v11 != 1) {
      __assert_rtn("MulTransposedR", "matmul.cpp", 2360, "delta_cols == 1");
    }
    unsigned int v19 = 40 * v16;
  }
  else
  {
    unsigned int v19 = 8 * v15;
  }
  uint64_t result = v88;
  if (v19 >= 0x1009) {
    operator new[]();
  }
  unint64_t v21 = v10 >> 1;
  uint64_t v22 = *(void *)(v3 + 80) >> 3;
  uint64_t v23 = v13[1];
  if ((v18 & 1) == 0)
  {
    uint64_t v24 = (double *)&v88[v15];
    if ((int)v15 >= 1)
    {
      uint64_t v25 = v24 + 2;
      uint64_t v26 = v16;
      do
      {
        double v27 = *v9;
        *uint64_t v25 = *v9;
        v25[1] = v27;
        *(v25 - 2) = v27;
        *(v25 - 1) = v27;
        v9 += v12;
        v25 += 4;
        --v26;
      }
      while (v26);
    }
    uint64_t v12 = 4 * (v12 != 0);
    uint64_t v9 = (double *)&v88[v15];
    goto LABEL_23;
  }
  if (v9)
  {
    uint64_t v24 = 0;
LABEL_23:
    if ((int)v14 >= 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = v14 - 4;
      uint64_t v30 = 8 * v12;
      uint64_t v31 = 2 * v21;
      uint64_t v32 = v7 + 2;
      uint64_t v33 = v9;
      double v34 = v7;
      do
      {
        if (v24)
        {
          uint64_t v35 = v16;
          int v36 = v34;
          double v37 = v24;
          uint64_t v38 = (double *)v88;
          if ((int)v15 >= 1)
          {
            do
            {
              *v38++ = (double)*v36 - *v37;
              double v37 = (double *)((char *)v37 + v30);
              int v36 = (__int16 *)((char *)v36 + v31);
              --v35;
            }
            while (v35);
          }
        }
        else if ((int)v16 >= 1)
        {
          uint64_t v39 = v16;
          int v40 = v34;
          double v41 = v33;
          float v42 = (double *)v88;
          do
          {
            *v42++ = (double)*v40 - *v41;
            double v41 = (double *)((char *)v41 + v30);
            int v40 = (__int16 *)((char *)v40 + v31);
            --v39;
          }
          while (v39);
        }
        float v43 = v32;
        uint64_t v44 = v28;
        if (v28 <= v29)
        {
          do
          {
            if ((int)v15 < 1)
            {
              double v53 = 0.0;
              double v52 = 0.0;
              double v51 = 0.0;
              double v47 = 0.0;
            }
            else
            {
              unint64_t v45 = &v9[v44];
              if (v24) {
                unint64_t v45 = v24;
              }
              float v46 = v45 + 2;
              double v47 = 0.0;
              int v48 = v43;
              uint64_t v49 = v16;
              float v50 = (double *)v88;
              double v51 = 0.0;
              double v52 = 0.0;
              double v53 = 0.0;
              do
              {
                double v54 = *v50++;
                double v53 = v53 + v54 * ((double)*(v48 - 2) - *(v46 - 2));
                double v52 = v52 + v54 * ((double)*(v48 - 1) - *(v46 - 1));
                double v51 = v51 + v54 * ((double)*v48 - *v46);
                double v47 = v47 + v54 * ((double)v48[1] - v46[1]);
                int v48 = (__int16 *)((char *)v48 + v31);
                float v46 = (double *)((char *)v46 + v30);
                --v49;
              }
              while (v49);
            }
            double v55 = (double *)(v8 + 8 * v44);
            *double v55 = v53 * v6;
            v55[1] = v52 * v6;
            v55[2] = v51 * v6;
            v55[3] = v47 * v6;
            v44 += 4;
            v43 += 4;
          }
          while ((int)v29 >= (int)v44);
          uint64_t v44 = v44;
        }
        else
        {
          uint64_t v44 = v28;
        }
        if ((int)v44 < (int)v14)
        {
          unint64_t v56 = &v7[v44];
          do
          {
            if ((int)v16 < 1)
            {
              double v58 = 0.0;
            }
            else
            {
              unint64_t v57 = &v9[v44];
              if (v24) {
                unint64_t v57 = v24;
              }
              double v58 = 0.0;
              double v59 = v56;
              uint64_t v60 = v16;
              uint64_t v61 = (double *)v88;
              do
              {
                double v62 = *v61++;
                double v58 = v58 + v62 * ((double)*v59 - *v57);
                unint64_t v57 = (double *)((char *)v57 + v30);
                double v59 = (__int16 *)((char *)v59 + v31);
                --v60;
              }
              while (v60);
            }
            *(double *)(v8 + 8 * v44++) = v58 * v6;
            ++v56;
          }
          while ((int)v14 > (int)v44);
        }
        v8 += 8 * v22;
        ++v28;
        ++v34;
        ++v33;
        ++v32;
      }
      while (v28 != v23);
    }
    return result;
  }
  if ((int)v14 >= 1)
  {
    uint64_t v63 = 0;
    uint64_t v64 = v14 - 4;
    uint64_t v65 = 2 * v21;
    float v66 = v7 + 2;
    double v67 = v7;
    do
    {
      uint64_t v68 = v15;
      float32x4_t v69 = v67;
      uint64_t v70 = (double *)v88;
      if ((int)v16 >= 1)
      {
        do
        {
          *v70++ = (double)*v69;
          float32x4_t v69 = (__int16 *)((char *)v69 + v65);
          --v68;
        }
        while (v68);
      }
      unint64_t v71 = v66;
      uint64_t v72 = v63;
      if (v63 <= v64)
      {
        do
        {
          if ((int)v15 < 1)
          {
            double v79 = 0.0;
            double v78 = 0.0;
            double v77 = 0.0;
            double v73 = 0.0;
          }
          else
          {
            double v73 = 0.0;
            float64x2_t v74 = v71;
            uint64_t v75 = v15;
            int32x4_t v76 = (double *)v88;
            double v77 = 0.0;
            double v78 = 0.0;
            double v79 = 0.0;
            do
            {
              double v80 = *v76++;
              double v79 = v79 + v80 * (double)*(v74 - 2);
              double v78 = v78 + v80 * (double)*(v74 - 1);
              double v77 = v77 + v80 * (double)*v74;
              double v73 = v73 + v80 * (double)v74[1];
              float64x2_t v74 = (__int16 *)((char *)v74 + v65);
              --v75;
            }
            while (v75);
          }
          double v81 = (double *)(v8 + 8 * v72);
          *double v81 = v79 * v6;
          v81[1] = v78 * v6;
          v81[2] = v77 * v6;
          v81[3] = v73 * v6;
          v72 += 4;
          v71 += 4;
        }
        while ((int)v64 >= (int)v72);
        uint64_t v72 = v72;
      }
      else
      {
        uint64_t v72 = v63;
      }
      if ((int)v72 < (int)v14)
      {
        uint64_t v82 = &v7[v72];
        do
        {
          double v83 = 0.0;
          if ((int)v16 >= 1)
          {
            float v84 = v82;
            uint64_t v85 = v15;
            unint64_t v86 = (double *)v88;
            do
            {
              double v87 = *v86++;
              double v83 = v83 + v87 * (double)*v84;
              float v84 = (__int16 *)((char *)v84 + v65);
              --v85;
            }
            while (v85);
          }
          *(double *)(v8 + 8 * v72++) = v83 * v6;
          ++v82;
        }
        while ((int)v14 > (int)v72);
      }
      ++v63;
      v8 += 8 * v22;
      ++v67;
      ++v66;
    }
    while (v63 != v14);
  }
  return result;
}

__int16 *cv::MulTransposedL<short,double>(uint64_t a1, uint64_t a2)
{
  uint64_t result = (__int16 *)MEMORY[0x270FA5388](a1, a2);
  double v5 = v4;
  uint64_t v68 = *MEMORY[0x263EF8340];
  double v6 = (__int16 *)*((void *)result + 2);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *((void *)result + 10) >> 1;
  uint64_t v11 = *(void *)(v7 + 80) >> 3;
  if (*(int *)(v3 + 8) <= 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(v3 + 80) >> 3;
  }
  uint64_t v13 = (unsigned int *)*((void *)result + 8);
  unint64_t v14 = *v13;
  uint64_t v15 = (int)v13[1];
  uint64_t v16 = v13[1];
  if (v9)
  {
    int v17 = *(_DWORD *)(v3 + 12);
    uint64_t result = (__int16 *)v63;
    if ((unint64_t)(8 * v15) >= 0x1009) {
      operator new[]();
    }
    if ((int)v14 >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 2 * v10;
      uint64_t v20 = v6 + 2;
      unint64_t v21 = *(double **)(v3 + 16);
      do
      {
        if (v17 >= (int)v16)
        {
          uint64_t v24 = v16;
          uint64_t v25 = v6;
          uint64_t v26 = v21;
          double v27 = (double *)v63;
          if ((int)v16 >= 1)
          {
            do
            {
              int v28 = *v25++;
              double v29 = (double)v28;
              double v30 = *v26++;
              *v27++ = v29 - v30;
              --v24;
            }
            while (v24);
          }
        }
        else if ((int)v15 >= 1)
        {
          uint64_t v22 = 0;
          double v23 = *(double *)(v9 + 8 * v12 * v18);
          do
          {
            *(double *)&v63[v22] = (double)v6[v22] - v23;
            ++v22;
          }
          while (v16 != v22);
        }
        uint64_t v31 = v6;
        uint64_t v32 = v20;
        uint64_t v33 = v18;
        do
        {
          double v34 = (double *)(v9 + 8 * v12 * v33);
          if (v17 < (int)v15)
          {
            double v66 = *v34;
            double v67 = v66;
            *(double *)uint64_t v65 = v66;
            *(double *)&v65[1] = v66;
            double v34 = (double *)v65;
          }
          if ((int)v16 >= 4)
          {
            uint64_t v37 = 0;
            double v36 = 0.0;
            uint64_t v38 = v32;
            uint64_t v39 = (double *)&v64;
            do
            {
              double v40 = *(v39 - 1) * ((double)*(v38 - 1) - v34[1]) + *(v39 - 2) * ((double)*(v38 - 2) - *v34);
              double v41 = *v39;
              double v42 = v39[1];
              v39 += 4;
              v37 += 4;
              double v36 = v36 + v40 + v41 * ((double)*v38 - v34[2]) + v42 * ((double)v38[1] - v34[3]);
              v34 += 4 * (v17 == v15);
              v38 += 4;
            }
            while (v37 <= (int)v16 - 4);
            int v35 = ((v16 - 4) & 0xFFFFFFFC) + 4;
          }
          else
          {
            int v35 = 0;
            double v36 = 0.0;
          }
          if (v35 < (int)v15)
          {
            float v43 = &v31[v35];
            uint64_t v44 = (double *)&v63[v35];
            do
            {
              double v45 = *v44++;
              double v46 = v45;
              LODWORD(v45) = *v43++;
              double v47 = (double)SLODWORD(v45);
              double v48 = *v34++;
              double v36 = v36 + v46 * (v47 - v48);
              ++v35;
            }
            while ((int)v15 > v35);
          }
          *(double *)(v8 + 8 * v33++) = v36 * v5;
          uint64_t v32 = (__int16 *)((char *)v32 + v19);
          uint64_t v31 = (__int16 *)((char *)v31 + v19);
        }
        while (v33 != v14);
        v8 += 8 * v11;
        ++v18;
        v21 += v12;
        double v6 = (__int16 *)((char *)v6 + v19);
        uint64_t v20 = (__int16 *)((char *)v20 + v19);
      }
      while (v18 != v14);
    }
  }
  else if ((int)v14 >= 1)
  {
    unint64_t v49 = 0;
    float v50 = v6 + 2;
    uint64_t v51 = 2 * v10;
    do
    {
      double v52 = v6;
      double v53 = v50;
      unint64_t v54 = v49;
      do
      {
        if ((int)v15 >= 4)
        {
          uint64_t v57 = 0;
          double v56 = 0.0;
          double v58 = v53;
          uint64_t result = v50;
          do
          {
            double v56 = v56
                + (double)*(result - 1) * (double)*(v58 - 1)
                + (double)*(result - 2) * (double)*(v58 - 2)
                + (double)*result * (double)*v58
                + (double)result[1] * (double)v58[1];
            v57 += 4;
            result += 4;
            v58 += 4;
          }
          while (v57 <= (int)v16 - 4);
          int v55 = ((v16 - 4) & 0xFFFFFFFC) + 4;
        }
        else
        {
          int v55 = 0;
          double v56 = 0.0;
        }
        if (v55 < (int)v16)
        {
          double v59 = &v52[v55];
          uint64_t result = &v6[v55];
          do
          {
            int v60 = *result++;
            double v61 = (double)v60;
            int v62 = *v59++;
            double v56 = v56 + v61 * (double)v62;
            ++v55;
          }
          while ((int)v16 > v55);
        }
        *(double *)(v8 + 8 * v54++) = v56 * v5;
        double v53 = (__int16 *)((char *)v53 + v51);
        double v52 = (__int16 *)((char *)v52 + v51);
      }
      while (v54 < v14);
      ++v49;
      v8 += 8 * v11;
      float v50 = (__int16 *)((char *)v50 + v51);
      double v6 = (__int16 *)((char *)v6 + v51);
    }
    while (v49 != v14);
  }
  return result;
}

_DWORD *cv::MulTransposedR<float,float>(uint64_t a1, uint64_t a2)
{
  v2 = (void *)MEMORY[0x270FA5388](a1, a2);
  double v6 = v5;
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v7 = (float *)v2[2];
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(const float **)(v4 + 16);
  unint64_t v10 = v2[10];
  int v11 = *(_DWORD *)(v4 + 12);
  if (*(int *)(v4 + 8) <= 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(v4 + 80) >> 2;
  }
  uint64_t v13 = (unsigned int *)v2[8];
  uint64_t v15 = (int)*v13;
  uint64_t v14 = (int)v13[1];
  uint64_t v16 = *v13;
  if (v9) {
    BOOL v17 = v11 < (int)v14;
  }
  else {
    BOOL v17 = 0;
  }
  char v18 = !v17;
  if (v17)
  {
    if (v11 != 1) {
      __assert_rtn("MulTransposedR", "matmul.cpp", 2360, "delta_cols == 1");
    }
    unsigned int v19 = 20 * v16;
  }
  else
  {
    unsigned int v19 = 4 * v15;
  }
  uint64_t result = v83;
  if (v19 >= 0x1009) {
    operator new[]();
  }
  unint64_t v21 = v10 >> 2;
  uint64_t v22 = *(void *)(v3 + 80) >> 2;
  uint64_t v23 = v13[1];
  if ((v18 & 1) == 0)
  {
    uint64_t v24 = (float32x4_t *)&v83[v15];
    if ((int)v15 >= 1)
    {
      uint64_t v26 = v16;
      double v27 = (float32x4_t *)&v83[v15];
      do
      {
        float32x4_t v28 = vld1q_dup_f32(v9);
        uint64_t v25 = 4 * v12;
        uint64_t v9 = (const float *)((char *)v9 + v25);
        *v27++ = v28;
        --v26;
      }
      while (v26);
    }
    uint64_t v12 = 4 * (v12 != 0);
    uint64_t v9 = (const float *)&v83[v15];
    goto LABEL_23;
  }
  if (v9)
  {
    uint64_t v24 = 0;
LABEL_23:
    if ((int)v14 >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = v14 - 4;
      uint64_t v31 = 4 * v12;
      uint64_t v32 = 4 * v21;
      uint64_t v33 = (float *)v9;
      double v34 = v7;
      do
      {
        if (v24)
        {
          uint64_t v35 = v16;
          double v36 = v34;
          uint64_t v37 = (float *)v24;
          uint64_t v38 = (float *)v83;
          if ((int)v15 >= 1)
          {
            do
            {
              *v38++ = *v36 - *v37;
              uint64_t v37 = (float *)((char *)v37 + v31);
              double v36 = (float *)((char *)v36 + v32);
              --v35;
            }
            while (v35);
          }
        }
        else if ((int)v16 >= 1)
        {
          uint64_t v39 = v16;
          double v40 = v34;
          double v41 = v33;
          double v42 = (float *)v83;
          do
          {
            *v42++ = *v40 - *v41;
            double v41 = (float *)((char *)v41 + v31);
            double v40 = (float *)((char *)v40 + v32);
            --v39;
          }
          while (v39);
        }
        float v43 = (float32x4_t *)v34;
        uint64_t v44 = v29;
        if (v29 <= v30)
        {
          do
          {
            if ((int)v15 < 1)
            {
              float64x2_t v46 = 0uLL;
              float64x2_t v50 = 0uLL;
            }
            else
            {
              double v45 = (float32x4_t *)&v9[v44];
              if (v24) {
                double v45 = v24;
              }
              float64x2_t v46 = 0uLL;
              double v47 = v43;
              uint64_t v48 = v16;
              unint64_t v49 = (float *)v83;
              float64x2_t v50 = 0uLL;
              do
              {
                float v51 = *v49++;
                float32x4_t v52 = vsubq_f32(*v47, *v45);
                float64x2_t v50 = vmlaq_n_f64(v50, vcvt_hight_f64_f32(v52), v51);
                float64x2_t v46 = vmlaq_n_f64(v46, vcvtq_f64_f32(*(float32x2_t *)v52.f32), v51);
                double v45 = (float32x4_t *)((char *)v45 + v31);
                double v47 = (float32x4_t *)((char *)v47 + v32);
                --v48;
              }
              while (v48);
            }
            *(float32x4_t *)(v8 + 4 * v44) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v46, v6)), vmulq_n_f64(v50, v6));
            v44 += 4;
            ++v43;
          }
          while ((int)v30 >= (int)v44);
          uint64_t v44 = v44;
        }
        else
        {
          uint64_t v44 = v29;
        }
        if ((int)v44 < (int)v14)
        {
          double v53 = &v7[v44];
          do
          {
            if ((int)v16 < 1)
            {
              double v55 = 0.0;
            }
            else
            {
              unint64_t v54 = (float *)&v9[v44];
              if (v24) {
                unint64_t v54 = (float *)v24;
              }
              double v55 = 0.0;
              double v56 = v53;
              uint64_t v57 = v16;
              double v58 = (float *)v83;
              do
              {
                float v59 = *v58++;
                double v55 = v55 + v59 * (float)(*v56 - *v54);
                unint64_t v54 = (float *)((char *)v54 + v31);
                double v56 = (float *)((char *)v56 + v32);
                --v57;
              }
              while (v57);
            }
            float v60 = v55 * v6;
            *(float *)(v8 + 4 * v44++) = v60;
            ++v53;
          }
          while ((int)v14 > (int)v44);
        }
        ++v29;
        v8 += 4 * v22;
        ++v34;
        ++v33;
      }
      while (v29 != v23);
    }
    return result;
  }
  if ((int)v14 >= 1)
  {
    uint64_t v61 = 0;
    uint64_t v62 = v14 - 4;
    uint64_t v63 = 4 * v21;
    uint64_t v64 = (float32x4_t *)v7;
    do
    {
      uint64_t v65 = v15;
      double v66 = v64;
      double v67 = v83;
      if ((int)v16 >= 1)
      {
        do
        {
          *v67++ = v66->i32[0];
          double v66 = (float32x4_t *)((char *)v66 + v63);
          --v65;
        }
        while (v65);
      }
      uint64_t v68 = v64;
      uint64_t v69 = v61;
      if (v61 <= v62)
      {
        do
        {
          float64x2_t v70 = 0uLL;
          if ((int)v15 < 1)
          {
            float64x2_t v74 = 0uLL;
          }
          else
          {
            unint64_t v71 = v68;
            uint64_t v72 = v15;
            double v73 = (float *)v83;
            float64x2_t v74 = 0uLL;
            do
            {
              float v75 = *v73++;
              float64x2_t v74 = vmlaq_n_f64(v74, vcvt_hight_f64_f32(*v71), v75);
              float64x2_t v70 = vmlaq_n_f64(v70, vcvtq_f64_f32(*(float32x2_t *)v71->f32), v75);
              unint64_t v71 = (float32x4_t *)((char *)v71 + v63);
              --v72;
            }
            while (v72);
          }
          *(float32x4_t *)(v8 + 4 * v69) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v70, v6)), vmulq_n_f64(v74, v6));
          v69 += 4;
          ++v68;
        }
        while ((int)v62 >= (int)v69);
        uint64_t v69 = v69;
      }
      else
      {
        uint64_t v69 = v61;
      }
      if ((int)v69 < (int)v14)
      {
        int32x4_t v76 = &v7[v69];
        do
        {
          double v77 = 0.0;
          if ((int)v16 >= 1)
          {
            double v78 = v76;
            uint64_t v79 = v15;
            double v80 = (float *)v83;
            do
            {
              float v81 = *v80++;
              double v77 = v77 + v81 * *v78;
              double v78 = (float *)((char *)v78 + v63);
              --v79;
            }
            while (v79);
          }
          float v82 = v77 * v6;
          *(float *)(v8 + 4 * v69++) = v82;
          ++v76;
        }
        while ((int)v14 > (int)v69);
      }
      ++v61;
      v8 += 4 * v22;
      uint64_t v64 = (float32x4_t *)((char *)v64 + 4);
    }
    while (v61 != v14);
  }
  return result;
}

float *cv::MulTransposedL<float,float>(uint64_t a1, uint64_t a2)
{
  uint64_t result = (float *)MEMORY[0x270FA5388](a1, a2);
  double v5 = v4;
  uint64_t v79 = *MEMORY[0x263EF8340];
  double v6 = (float *)*((void *)result + 2);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *((void *)result + 10) >> 2;
  uint64_t v11 = *(void *)(v7 + 80) >> 2;
  if (*(int *)(v3 + 8) <= 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(v3 + 80) >> 2;
  }
  uint64_t v13 = (unsigned int *)*((void *)result + 8);
  unint64_t v14 = *v13;
  uint64_t v15 = (int)v13[1];
  uint64_t v16 = v13[1];
  if (v9)
  {
    int v17 = *(_DWORD *)(v3 + 12);
    uint64_t result = (float *)v76;
    if ((unint64_t)(4 * v15) >= 0x1009) {
      operator new[]();
    }
    if ((int)v14 >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 4 * v10;
      uint64_t v20 = v6 + 2;
      unint64_t v21 = *(float **)(v3 + 16);
      do
      {
        if (v17 >= (int)v16)
        {
          uint64_t v24 = v16;
          uint64_t v25 = v6;
          uint64_t v26 = v21;
          double v27 = (float *)v76;
          if ((int)v16 >= 1)
          {
            do
            {
              float v28 = *v25++;
              float v29 = v28;
              float v30 = *v26++;
              *v27++ = v29 - v30;
              --v24;
            }
            while (v24);
          }
        }
        else if ((int)v15 >= 1)
        {
          uint64_t v22 = 0;
          float v23 = *(float *)(v9 + 4 * v12 * v18);
          do
          {
            *(float *)&v76[v22 * 4] = v6[v22] - v23;
            ++v22;
          }
          while (v16 != v22);
        }
        uint64_t v31 = v6;
        uint64_t v32 = v20;
        uint64_t v33 = v18;
        do
        {
          double v34 = (float32x4_t *)(v9 + 4 * v12 * v33);
          if (v17 < (int)v15)
          {
            float32x4_t v35 = vld1q_dup_f32(v34->f32);
            float32x4_t v78 = v35;
            double v34 = &v78;
          }
          if ((int)v16 >= 4)
          {
            uint64_t v38 = 0;
            double v37 = 0.0;
            uint64_t v39 = v32;
            double v40 = (float *)&v77;
            do
            {
              double v41 = (float)(*(v39 - 2) - v34->f32[0]);
              double v42 = *(v40 - 1) * (float)(*(v39 - 1) - v34->f32[1]);
              float v43 = *v39;
              float v44 = v39[1];
              v39 += 4;
              double v45 = v42 + *(v40 - 2) * v41;
              *(float *)&double v42 = v43 - v34->f32[2];
              float v46 = *v40;
              float v47 = v40[1];
              v40 += 4;
              v38 += 4;
              double v37 = v37 + v45 + v46 * *(float *)&v42 + v47 * (float)(v44 - v34->f32[3]);
              v34 += v17 == v15;
            }
            while (v38 <= (int)v16 - 4);
            int v36 = ((v16 - 4) & 0xFFFFFFFC) + 4;
          }
          else
          {
            int v36 = 0;
            double v37 = 0.0;
          }
          if (v36 < (int)v15)
          {
            uint64_t v48 = &v31[v36];
            unint64_t v49 = (float *)&v76[4 * v36];
            do
            {
              float v50 = *v49++;
              float v51 = v50;
              float v52 = *v48++;
              float v53 = v52;
              float v54 = v34->f32[0];
              double v34 = (float32x4_t *)((char *)v34 + 4);
              double v37 = v37 + v51 * (float)(v53 - v54);
              ++v36;
            }
            while ((int)v15 > v36);
          }
          float v55 = v37 * v5;
          *(float *)(v8 + 4 * v33++) = v55;
          uint64_t v32 = (float *)((char *)v32 + v19);
          uint64_t v31 = (float *)((char *)v31 + v19);
        }
        while (v33 != v14);
        v8 += 4 * v11;
        ++v18;
        v21 += v12;
        double v6 = (float *)((char *)v6 + v19);
        uint64_t v20 = (float *)((char *)v20 + v19);
      }
      while (v18 != v14);
    }
  }
  else if ((int)v14 >= 1)
  {
    unint64_t v56 = 0;
    uint64_t v57 = v6 + 2;
    uint64_t v58 = 4 * v10;
    do
    {
      float v59 = v6;
      float v60 = v57;
      unint64_t v61 = v56;
      do
      {
        if ((int)v15 >= 4)
        {
          uint64_t v64 = 0;
          double v63 = 0.0;
          uint64_t v65 = v60;
          uint64_t result = v57;
          do
          {
            double v66 = *(result - 1) * *(v65 - 1) + *(result - 2) * *(v65 - 2);
            float v67 = *result;
            float v68 = result[1];
            result += 4;
            float v69 = *v65;
            float v70 = v65[1];
            v65 += 4;
            double v63 = v63 + v66 + v67 * v69 + v68 * v70;
            v64 += 4;
          }
          while (v64 <= (int)v16 - 4);
          int v62 = ((v16 - 4) & 0xFFFFFFFC) + 4;
        }
        else
        {
          int v62 = 0;
          double v63 = 0.0;
        }
        if (v62 < (int)v16)
        {
          unint64_t v71 = &v59[v62];
          uint64_t result = &v6[v62];
          do
          {
            float v72 = *result++;
            double v73 = v72;
            float v74 = *v71++;
            double v63 = v63 + v73 * v74;
            ++v62;
          }
          while ((int)v16 > v62);
        }
        float v75 = v63 * v5;
        *(float *)(v8 + 4 * v61++) = v75;
        float v60 = (float *)((char *)v60 + v58);
        float v59 = (float *)((char *)v59 + v58);
      }
      while (v61 < v14);
      ++v56;
      v8 += 4 * v11;
      uint64_t v57 = (float *)((char *)v57 + v58);
      double v6 = (float *)((char *)v6 + v58);
    }
    while (v56 != v14);
  }
  return result;
}

void *cv::MulTransposedR<float,double>(uint64_t a1, uint64_t a2)
{
  v2 = (void *)MEMORY[0x270FA5388](a1, a2);
  double v6 = v5;
  v84[515] = *MEMORY[0x263EF8340];
  uint64_t v7 = (float *)v2[2];
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(double **)(v4 + 16);
  unint64_t v10 = v2[10];
  int v11 = *(_DWORD *)(v4 + 12);
  if (*(int *)(v4 + 8) <= 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(v4 + 80) >> 3;
  }
  uint64_t v13 = (unsigned int *)v2[8];
  uint64_t v15 = (int)*v13;
  uint64_t v14 = (int)v13[1];
  uint64_t v16 = *v13;
  if (v9) {
    BOOL v17 = v11 < (int)v14;
  }
  else {
    BOOL v17 = 0;
  }
  char v18 = !v17;
  if (v17)
  {
    if (v11 != 1) {
      __assert_rtn("MulTransposedR", "matmul.cpp", 2360, "delta_cols == 1");
    }
    unsigned int v19 = 40 * v16;
  }
  else
  {
    unsigned int v19 = 8 * v15;
  }
  uint64_t result = v84;
  if (v19 >= 0x1009) {
    operator new[]();
  }
  unint64_t v21 = v10 >> 2;
  uint64_t v22 = *(void *)(v3 + 80) >> 3;
  uint64_t v23 = v13[1];
  if ((v18 & 1) == 0)
  {
    uint64_t v24 = (float64x2_t *)&v84[v15];
    if ((int)v15 >= 1)
    {
      f64 = v24[1].f64;
      uint64_t v26 = v16;
      do
      {
        double v27 = *v9;
        double *f64 = *v9;
        f64[1] = v27;
        *(f64 - 2) = v27;
        *(f64 - 1) = v27;
        v9 += v12;
        f64 += 4;
        --v26;
      }
      while (v26);
    }
    uint64_t v12 = 4 * (v12 != 0);
    uint64_t v9 = (double *)&v84[v15];
    goto LABEL_23;
  }
  if (v9)
  {
    uint64_t v24 = 0;
LABEL_23:
    if ((int)v14 >= 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = v14 - 4;
      uint64_t v30 = 8 * v12;
      uint64_t v31 = 4 * v21;
      uint64_t v32 = (float32x2_t *)(v7 + 2);
      uint64_t v33 = v9;
      double v34 = v7;
      do
      {
        if (v24)
        {
          uint64_t v35 = v16;
          int v36 = v34;
          double v37 = (double *)v24;
          uint64_t v38 = (double *)v84;
          if ((int)v15 >= 1)
          {
            do
            {
              *v38++ = *v36 - *v37;
              double v37 = (double *)((char *)v37 + v30);
              int v36 = (float *)((char *)v36 + v31);
              --v35;
            }
            while (v35);
          }
        }
        else if ((int)v16 >= 1)
        {
          uint64_t v39 = v16;
          double v40 = v34;
          double v41 = v33;
          double v42 = (double *)v84;
          do
          {
            *v42++ = *v40 - *v41;
            double v41 = (double *)((char *)v41 + v30);
            double v40 = (float *)((char *)v40 + v31);
            --v39;
          }
          while (v39);
        }
        float v43 = v32;
        uint64_t v44 = v28;
        if (v28 <= v29)
        {
          do
          {
            if ((int)v15 < 1)
            {
              float64x2_t v47 = 0uLL;
              float64x2_t v51 = 0uLL;
            }
            else
            {
              double v45 = (float64x2_t *)&v9[v44];
              if (v24) {
                double v45 = v24;
              }
              float v46 = v45 + 1;
              float64x2_t v47 = 0uLL;
              uint64_t v48 = v43;
              uint64_t v49 = v16;
              float v50 = (const double *)v84;
              float64x2_t v51 = 0uLL;
              do
              {
                float64x2_t v52 = vld1q_dup_f64(v50++);
                float64x2_t v47 = vmlaq_f64(v47, vsubq_f64(vcvtq_f64_f32(v48[-1]), v46[-1]), v52);
                float64x2_t v51 = vmlaq_f64(v51, vsubq_f64(vcvtq_f64_f32(*v48), *v46), v52);
                float v46 = (float64x2_t *)((char *)v46 + v30);
                uint64_t v48 = (float32x2_t *)((char *)v48 + v31);
                --v49;
              }
              while (v49);
            }
            float v53 = (float64x2_t *)(v8 + 8 * v44);
            *float v53 = vmulq_n_f64(v47, v6);
            v53[1] = vmulq_n_f64(v51, v6);
            v44 += 4;
            v43 += 2;
          }
          while ((int)v29 >= (int)v44);
          uint64_t v44 = v44;
        }
        else
        {
          uint64_t v44 = v28;
        }
        if ((int)v44 < (int)v14)
        {
          float v54 = &v7[v44];
          do
          {
            if ((int)v16 < 1)
            {
              double v56 = 0.0;
            }
            else
            {
              float v55 = &v9[v44];
              if (v24) {
                float v55 = (double *)v24;
              }
              double v56 = 0.0;
              uint64_t v57 = v54;
              uint64_t v58 = v16;
              float v59 = (double *)v84;
              do
              {
                double v60 = *v59++;
                double v56 = v56 + v60 * (*v57 - *v55);
                float v55 = (double *)((char *)v55 + v30);
                uint64_t v57 = (float *)((char *)v57 + v31);
                --v58;
              }
              while (v58);
            }
            *(double *)(v8 + 8 * v44++) = v56 * v6;
            ++v54;
          }
          while ((int)v14 > (int)v44);
        }
        v8 += 8 * v22;
        ++v28;
        ++v34;
        ++v33;
        uint64_t v32 = (float32x2_t *)((char *)v32 + 4);
      }
      while (v28 != v23);
    }
    return result;
  }
  if ((int)v14 >= 1)
  {
    uint64_t v61 = 0;
    uint64_t v62 = v14 - 4;
    uint64_t v63 = 4 * v21;
    uint64_t v64 = (float32x2_t *)(v7 + 2);
    uint64_t v65 = v7;
    do
    {
      uint64_t v66 = v15;
      float v67 = v65;
      float v68 = (double *)v84;
      if ((int)v16 >= 1)
      {
        do
        {
          *v68++ = *v67;
          float v67 = (float *)((char *)v67 + v63);
          --v66;
        }
        while (v66);
      }
      float v69 = v64;
      uint64_t v70 = v61;
      if (v61 <= v62)
      {
        do
        {
          float64x2_t v71 = 0uLL;
          if ((int)v15 < 1)
          {
            float64x2_t v75 = 0uLL;
          }
          else
          {
            float v72 = v69;
            uint64_t v73 = v15;
            float v74 = (const double *)v84;
            float64x2_t v75 = 0uLL;
            do
            {
              float64x2_t v76 = vld1q_dup_f64(v74++);
              float64x2_t v71 = vmlaq_f64(v71, vcvtq_f64_f32(v72[-1]), v76);
              float64x2_t v75 = vmlaq_f64(v75, vcvtq_f64_f32(*v72), v76);
              float v72 = (float32x2_t *)((char *)v72 + v63);
              --v73;
            }
            while (v73);
          }
          uint64_t v77 = (float64x2_t *)(v8 + 8 * v70);
          *uint64_t v77 = vmulq_n_f64(v71, v6);
          v77[1] = vmulq_n_f64(v75, v6);
          v70 += 4;
          v69 += 2;
        }
        while ((int)v62 >= (int)v70);
        uint64_t v70 = v70;
      }
      else
      {
        uint64_t v70 = v61;
      }
      if ((int)v70 < (int)v14)
      {
        float32x4_t v78 = &v7[v70];
        do
        {
          double v79 = 0.0;
          if ((int)v16 >= 1)
          {
            double v80 = v78;
            uint64_t v81 = v15;
            float v82 = (double *)v84;
            do
            {
              double v83 = *v82++;
              double v79 = v79 + v83 * *v80;
              double v80 = (float *)((char *)v80 + v63);
              --v81;
            }
            while (v81);
          }
          *(double *)(v8 + 8 * v70++) = v79 * v6;
          ++v78;
        }
        while ((int)v14 > (int)v70);
      }
      ++v61;
      v8 += 8 * v22;
      ++v65;
      uint64_t v64 = (float32x2_t *)((char *)v64 + 4);
    }
    while (v61 != v14);
  }
  return result;
}

float *cv::MulTransposedL<float,double>(uint64_t a1, uint64_t a2)
{
  uint64_t result = (float *)MEMORY[0x270FA5388](a1, a2);
  double v5 = v4;
  uint64_t v75 = *MEMORY[0x263EF8340];
  double v6 = (float *)*((void *)result + 2);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *((void *)result + 10) >> 2;
  uint64_t v11 = *(void *)(v7 + 80) >> 3;
  if (*(int *)(v3 + 8) <= 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(v3 + 80) >> 3;
  }
  uint64_t v13 = (unsigned int *)*((void *)result + 8);
  unint64_t v14 = *v13;
  uint64_t v15 = (int)v13[1];
  uint64_t v16 = v13[1];
  if (v9)
  {
    int v17 = *(_DWORD *)(v3 + 12);
    uint64_t result = (float *)v70;
    if ((unint64_t)(8 * v15) >= 0x1009) {
      operator new[]();
    }
    if ((int)v14 >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 4 * v10;
      uint64_t v20 = v6 + 2;
      unint64_t v21 = *(double **)(v3 + 16);
      do
      {
        if (v17 >= (int)v16)
        {
          uint64_t v24 = v16;
          uint64_t v25 = v6;
          uint64_t v26 = v21;
          double v27 = (double *)v70;
          if ((int)v16 >= 1)
          {
            do
            {
              float v28 = *v25++;
              double v29 = v28;
              double v30 = *v26++;
              *v27++ = v29 - v30;
              --v24;
            }
            while (v24);
          }
        }
        else if ((int)v15 >= 1)
        {
          uint64_t v22 = 0;
          double v23 = *(double *)(v9 + 8 * v12 * v18);
          do
          {
            *(double *)&v70[v22] = v6[v22] - v23;
            ++v22;
          }
          while (v16 != v22);
        }
        uint64_t v31 = v6;
        uint64_t v32 = v20;
        uint64_t v33 = v18;
        do
        {
          double v34 = (double *)(v9 + 8 * v12 * v33);
          if (v17 < (int)v15)
          {
            double v73 = *v34;
            double v74 = v73;
            *(double *)float v72 = v73;
            *(double *)&v72[1] = v73;
            double v34 = (double *)v72;
          }
          if ((int)v16 >= 4)
          {
            uint64_t v37 = 0;
            double v36 = 0.0;
            uint64_t v38 = v32;
            uint64_t v39 = (double *)&v71;
            do
            {
              double v40 = *(v39 - 1) * (*(v38 - 1) - v34[1]) + *(v39 - 2) * (*(v38 - 2) - *v34);
              float v41 = *v38;
              float v42 = v38[1];
              v38 += 4;
              double v43 = *v39;
              double v44 = v39[1];
              v39 += 4;
              v37 += 4;
              double v36 = v36 + v40 + v43 * (v41 - v34[2]) + v44 * (v42 - v34[3]);
              v34 += 4 * (v17 == v15);
            }
            while (v37 <= (int)v16 - 4);
            int v35 = ((v16 - 4) & 0xFFFFFFFC) + 4;
          }
          else
          {
            int v35 = 0;
            double v36 = 0.0;
          }
          if (v35 < (int)v15)
          {
            double v45 = &v31[v35];
            float v46 = (double *)&v70[v35];
            do
            {
              double v47 = *v46++;
              double v48 = v47;
              *(float *)&double v47 = *v45++;
              double v49 = *(float *)&v47;
              double v50 = *v34++;
              double v36 = v36 + v48 * (v49 - v50);
              ++v35;
            }
            while ((int)v15 > v35);
          }
          *(double *)(v8 + 8 * v33++) = v36 * v5;
          uint64_t v32 = (float *)((char *)v32 + v19);
          uint64_t v31 = (float *)((char *)v31 + v19);
        }
        while (v33 != v14);
        v8 += 8 * v11;
        ++v18;
        v21 += v12;
        double v6 = (float *)((char *)v6 + v19);
        uint64_t v20 = (float *)((char *)v20 + v19);
      }
      while (v18 != v14);
    }
  }
  else if ((int)v14 >= 1)
  {
    unint64_t v51 = 0;
    float64x2_t v52 = v6 + 2;
    uint64_t v53 = 4 * v10;
    do
    {
      float v54 = v6;
      float v55 = v52;
      unint64_t v56 = v51;
      do
      {
        if ((int)v15 >= 4)
        {
          uint64_t v59 = 0;
          double v58 = 0.0;
          double v60 = v55;
          uint64_t result = v52;
          do
          {
            double v61 = *(result - 1) * *(v60 - 1) + *(result - 2) * *(v60 - 2);
            float v62 = *result;
            float v63 = result[1];
            result += 4;
            float v64 = *v60;
            float v65 = v60[1];
            v60 += 4;
            double v58 = v58 + v61 + v62 * v64 + v63 * v65;
            v59 += 4;
          }
          while (v59 <= (int)v16 - 4);
          int v57 = ((v16 - 4) & 0xFFFFFFFC) + 4;
        }
        else
        {
          int v57 = 0;
          double v58 = 0.0;
        }
        if (v57 < (int)v16)
        {
          uint64_t v66 = &v54[v57];
          uint64_t result = &v6[v57];
          do
          {
            float v67 = *result++;
            double v68 = v67;
            float v69 = *v66++;
            double v58 = v58 + v68 * v69;
            ++v57;
          }
          while ((int)v16 > v57);
        }
        *(double *)(v8 + 8 * v56++) = v58 * v5;
        float v55 = (float *)((char *)v55 + v53);
        float v54 = (float *)((char *)v54 + v53);
      }
      while (v56 < v14);
      ++v51;
      v8 += 8 * v11;
      float64x2_t v52 = (float *)((char *)v52 + v53);
      double v6 = (float *)((char *)v6 + v53);
    }
    while (v51 != v14);
  }
  return result;
}

void *cv::MulTransposedR<double,double>(uint64_t a1, uint64_t a2)
{
  v2 = (void *)MEMORY[0x270FA5388](a1, a2);
  double v6 = v5;
  v84[515] = *MEMORY[0x263EF8340];
  uint64_t v7 = (double *)v2[2];
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(double **)(v4 + 16);
  unint64_t v10 = v2[10];
  int v11 = *(_DWORD *)(v4 + 12);
  if (*(int *)(v4 + 8) <= 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(v4 + 80) >> 3;
  }
  uint64_t v13 = (unsigned int *)v2[8];
  uint64_t v15 = (int)*v13;
  uint64_t v14 = (int)v13[1];
  uint64_t v16 = *v13;
  if (v9) {
    BOOL v17 = v11 < (int)v14;
  }
  else {
    BOOL v17 = 0;
  }
  char v18 = !v17;
  if (v17)
  {
    if (v11 != 1) {
      __assert_rtn("MulTransposedR", "matmul.cpp", 2360, "delta_cols == 1");
    }
    unsigned int v19 = 40 * v16;
  }
  else
  {
    unsigned int v19 = 8 * v15;
  }
  uint64_t result = v84;
  if (v19 >= 0x1009) {
    operator new[]();
  }
  unint64_t v21 = v10 >> 3;
  uint64_t v22 = *(void *)(v3 + 80) >> 3;
  uint64_t v23 = v13[1];
  if ((v18 & 1) == 0)
  {
    uint64_t v24 = (float64x2_t *)&v84[v15];
    if ((int)v15 >= 1)
    {
      f64 = v24[1].f64;
      uint64_t v26 = v16;
      do
      {
        double v27 = *v9;
        double *f64 = *v9;
        f64[1] = v27;
        *(f64 - 2) = v27;
        *(f64 - 1) = v27;
        v9 += v12;
        f64 += 4;
        --v26;
      }
      while (v26);
    }
    uint64_t v12 = 4 * (v12 != 0);
    uint64_t v9 = (double *)&v84[v15];
    goto LABEL_23;
  }
  if (v9)
  {
    uint64_t v24 = 0;
LABEL_23:
    if ((int)v14 >= 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = v14 - 4;
      uint64_t v30 = 8 * v12;
      uint64_t v31 = 8 * v21;
      uint64_t v32 = (float64x2_t *)(v7 + 2);
      uint64_t v33 = v9;
      double v34 = v7;
      do
      {
        if (v24)
        {
          uint64_t v35 = v16;
          double v36 = v34;
          uint64_t v37 = (double *)v24;
          uint64_t v38 = (double *)v84;
          if ((int)v15 >= 1)
          {
            do
            {
              *v38++ = *v36 - *v37;
              uint64_t v37 = (double *)((char *)v37 + v30);
              double v36 = (double *)((char *)v36 + v31);
              --v35;
            }
            while (v35);
          }
        }
        else if ((int)v16 >= 1)
        {
          uint64_t v39 = v16;
          double v40 = v34;
          float v41 = v33;
          float v42 = (double *)v84;
          do
          {
            *v42++ = *v40 - *v41;
            float v41 = (double *)((char *)v41 + v30);
            double v40 = (double *)((char *)v40 + v31);
            --v39;
          }
          while (v39);
        }
        double v43 = v32;
        uint64_t v44 = v28;
        if (v28 <= v29)
        {
          do
          {
            if ((int)v15 < 1)
            {
              float64x2_t v47 = 0uLL;
              float64x2_t v51 = 0uLL;
            }
            else
            {
              double v45 = (float64x2_t *)&v9[v44];
              if (v24) {
                double v45 = v24;
              }
              float v46 = v45 + 1;
              float64x2_t v47 = 0uLL;
              double v48 = v43;
              uint64_t v49 = v16;
              double v50 = (const double *)v84;
              float64x2_t v51 = 0uLL;
              do
              {
                float64x2_t v52 = vld1q_dup_f64(v50++);
                float64x2_t v47 = vmlaq_f64(v47, vsubq_f64(v48[-1], v46[-1]), v52);
                float64x2_t v51 = vmlaq_f64(v51, vsubq_f64(*v48, *v46), v52);
                float v46 = (float64x2_t *)((char *)v46 + v30);
                double v48 = (float64x2_t *)((char *)v48 + v31);
                --v49;
              }
              while (v49);
            }
            uint64_t v53 = (float64x2_t *)(v8 + 8 * v44);
            *uint64_t v53 = vmulq_n_f64(v47, v6);
            v53[1] = vmulq_n_f64(v51, v6);
            v44 += 4;
            v43 += 2;
          }
          while ((int)v29 >= (int)v44);
          uint64_t v44 = v44;
        }
        else
        {
          uint64_t v44 = v28;
        }
        if ((int)v44 < (int)v14)
        {
          float v54 = &v7[v44];
          do
          {
            if ((int)v16 < 1)
            {
              double v56 = 0.0;
            }
            else
            {
              float v55 = &v9[v44];
              if (v24) {
                float v55 = (double *)v24;
              }
              double v56 = 0.0;
              int v57 = v54;
              uint64_t v58 = v16;
              uint64_t v59 = (double *)v84;
              do
              {
                double v60 = *v59++;
                double v56 = v56 + v60 * (*v57 - *v55);
                float v55 = (double *)((char *)v55 + v30);
                int v57 = (double *)((char *)v57 + v31);
                --v58;
              }
              while (v58);
            }
            *(double *)(v8 + 8 * v44++) = v56 * v6;
            ++v54;
          }
          while ((int)v14 > (int)v44);
        }
        v8 += 8 * v22;
        ++v28;
        ++v34;
        ++v33;
        uint64_t v32 = (float64x2_t *)((char *)v32 + 8);
      }
      while (v28 != v23);
    }
    return result;
  }
  if ((int)v14 >= 1)
  {
    uint64_t v61 = 0;
    uint64_t v62 = v14 - 4;
    uint64_t v63 = 8 * v21;
    float v64 = (float64x2_t *)(v7 + 2);
    float v65 = v7;
    do
    {
      uint64_t v66 = v15;
      float v67 = v65;
      double v68 = v84;
      if ((int)v16 >= 1)
      {
        do
        {
          *v68++ = *(void *)v67;
          float v67 = (double *)((char *)v67 + v63);
          --v66;
        }
        while (v66);
      }
      float v69 = v64;
      uint64_t v70 = v61;
      if (v61 <= v62)
      {
        do
        {
          float64x2_t v71 = 0uLL;
          if ((int)v15 < 1)
          {
            float64x2_t v75 = 0uLL;
          }
          else
          {
            float v72 = v69;
            uint64_t v73 = v15;
            double v74 = (const double *)v84;
            float64x2_t v75 = 0uLL;
            do
            {
              float64x2_t v76 = vld1q_dup_f64(v74++);
              float64x2_t v71 = vmlaq_f64(v71, v72[-1], v76);
              float64x2_t v75 = vmlaq_f64(v75, *v72, v76);
              float v72 = (float64x2_t *)((char *)v72 + v63);
              --v73;
            }
            while (v73);
          }
          uint64_t v77 = (float64x2_t *)(v8 + 8 * v70);
          *uint64_t v77 = vmulq_n_f64(v71, v6);
          v77[1] = vmulq_n_f64(v75, v6);
          v70 += 4;
          v69 += 2;
        }
        while ((int)v62 >= (int)v70);
        uint64_t v70 = v70;
      }
      else
      {
        uint64_t v70 = v61;
      }
      if ((int)v70 < (int)v14)
      {
        float32x4_t v78 = &v7[v70];
        do
        {
          double v79 = 0.0;
          if ((int)v16 >= 1)
          {
            double v80 = v78;
            uint64_t v81 = v15;
            float v82 = (double *)v84;
            do
            {
              double v83 = *v82++;
              double v79 = v79 + v83 * *v80;
              double v80 = (double *)((char *)v80 + v63);
              --v81;
            }
            while (v81);
          }
          *(double *)(v8 + 8 * v70++) = v79 * v6;
          ++v78;
        }
        while ((int)v14 > (int)v70);
      }
      ++v61;
      v8 += 8 * v22;
      ++v65;
      float v64 = (float64x2_t *)((char *)v64 + 8);
    }
    while (v61 != v14);
  }
  return result;
}

double *cv::MulTransposedL<double,double>(uint64_t a1, uint64_t a2)
{
  uint64_t result = (double *)MEMORY[0x270FA5388](a1, a2);
  double v5 = v4;
  uint64_t v76 = *MEMORY[0x263EF8340];
  double v6 = (double *)*((void *)result + 2);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *((void *)result + 10) >> 3;
  uint64_t v11 = *(void *)(v7 + 80) >> 3;
  if (*(int *)(v3 + 8) <= 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(v3 + 80) >> 3;
  }
  uint64_t v13 = (unsigned int *)*((void *)result + 8);
  unint64_t v14 = *v13;
  uint64_t v15 = (int)v13[1];
  uint64_t v16 = v13[1];
  if (v9)
  {
    int v17 = *(_DWORD *)(v3 + 12);
    uint64_t result = (double *)v71;
    if ((unint64_t)(8 * v15) >= 0x1009) {
      operator new[]();
    }
    if ((int)v14 >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 8 * v10;
      uint64_t v20 = v6 + 2;
      unint64_t v21 = *(double **)(v3 + 16);
      do
      {
        if (v17 >= (int)v16)
        {
          uint64_t v24 = v16;
          uint64_t v25 = v6;
          uint64_t v26 = v21;
          double v27 = (double *)v71;
          if ((int)v16 >= 1)
          {
            do
            {
              double v28 = *v25++;
              double v29 = v28;
              double v30 = *v26++;
              *v27++ = v29 - v30;
              --v24;
            }
            while (v24);
          }
        }
        else if ((int)v15 >= 1)
        {
          uint64_t v22 = 0;
          double v23 = *(double *)(v9 + 8 * v12 * v18);
          do
          {
            *(double *)&v71[v22 * 8] = v6[v22] - v23;
            ++v22;
          }
          while (v16 != v22);
        }
        uint64_t v31 = v6;
        uint64_t v32 = v20;
        uint64_t v33 = v18;
        do
        {
          double v34 = (double *)(v9 + 8 * v12 * v33);
          if (v17 < (int)v15)
          {
            double v74 = *v34;
            double v75 = v74;
            *(double *)uint64_t v73 = v74;
            *(double *)&v73[1] = v74;
            double v34 = (double *)v73;
          }
          if ((int)v16 >= 4)
          {
            uint64_t v37 = 0;
            double v36 = 0.0;
            uint64_t v38 = v32;
            uint64_t v39 = (double *)&v72;
            do
            {
              double v40 = *(v39 - 1) * (*(v38 - 1) - v34[1]) + *(v39 - 2) * (*(v38 - 2) - *v34);
              double v41 = *v38;
              double v42 = v38[1];
              v38 += 4;
              double v43 = *v39;
              double v44 = v39[1];
              v39 += 4;
              v37 += 4;
              double v36 = v36 + v40 + v43 * (v41 - v34[2]) + v44 * (v42 - v34[3]);
              v34 += 4 * (v17 == v15);
            }
            while (v37 <= (int)v16 - 4);
            int v35 = ((v16 - 4) & 0xFFFFFFFC) + 4;
          }
          else
          {
            int v35 = 0;
            double v36 = 0.0;
          }
          if (v35 < (int)v15)
          {
            double v45 = &v31[v35];
            float v46 = (double *)&v71[8 * v35];
            do
            {
              double v47 = *v46++;
              double v48 = v47;
              double v49 = *v45++;
              double v50 = v49;
              double v51 = *v34++;
              double v36 = v36 + v48 * (v50 - v51);
              ++v35;
            }
            while ((int)v15 > v35);
          }
          *(double *)(v8 + 8 * v33++) = v36 * v5;
          uint64_t v32 = (double *)((char *)v32 + v19);
          uint64_t v31 = (double *)((char *)v31 + v19);
        }
        while (v33 != v14);
        v8 += 8 * v11;
        ++v18;
        v21 += v12;
        double v6 = (double *)((char *)v6 + v19);
        uint64_t v20 = (double *)((char *)v20 + v19);
      }
      while (v18 != v14);
    }
  }
  else if ((int)v14 >= 1)
  {
    unint64_t v52 = 0;
    uint64_t v53 = v6 + 2;
    uint64_t v54 = 8 * v10;
    do
    {
      float v55 = v6;
      double v56 = v53;
      unint64_t v57 = v52;
      do
      {
        if ((int)v15 >= 4)
        {
          uint64_t v60 = 0;
          double v59 = 0.0;
          uint64_t v61 = v56;
          uint64_t result = v53;
          do
          {
            double v62 = *(result - 1) * *(v61 - 1) + *(result - 2) * *(v61 - 2);
            double v63 = *result;
            double v64 = result[1];
            result += 4;
            double v65 = *v61;
            double v66 = v61[1];
            v61 += 4;
            double v59 = v59 + v62 + v63 * v65 + v64 * v66;
            v60 += 4;
          }
          while (v60 <= (int)v16 - 4);
          int v58 = ((v16 - 4) & 0xFFFFFFFC) + 4;
        }
        else
        {
          int v58 = 0;
          double v59 = 0.0;
        }
        if (v58 < (int)v16)
        {
          float v67 = &v55[v58];
          uint64_t result = &v6[v58];
          do
          {
            double v68 = *result++;
            double v69 = v68;
            double v70 = *v67++;
            double v59 = v59 + v69 * v70;
            ++v58;
          }
          while ((int)v16 > v58);
        }
        *(double *)(v8 + 8 * v57++) = v59 * v5;
        double v56 = (double *)((char *)v56 + v54);
        float v55 = (double *)((char *)v55 + v54);
      }
      while (v57 < v14);
      ++v52;
      v8 += 8 * v11;
      uint64_t v53 = (double *)((char *)v53 + v54);
      double v6 = (double *)((char *)v6 + v54);
    }
    while (v52 != v14);
  }
  return result;
}

void cv::mulTransposed(cv::Exception *a1, uint64_t a2, uint64_t a3, void **a4)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  operator delete(*a4);
  __break(1u);
}

uint64_t cv::countNonZero(cv *this, const cv::_InputArray *a2)
{
  v26[3] = *(cv::Mat **)MEMORY[0x263EF8340];
  (**(void (***)(void *__return_ptr))this)(v17);
  uint64_t v2 = v17[0] & 7;
  uint64_t v3 = cv::getCountNonZeroTab(int)::countNonZeroTab[v2];
  if ((v17[0] & 0xFF8) != 0 || v2 == 7)
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "src.channels() == 1 && func != 0");
    std::string::basic_string[abi:ne180100]<0>(v25, "countNonZero");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/stat.cpp");
    cv::Exception::Exception(v14, 4294967081, v26, v25, __p, 549);
    cv::error((cv *)v14, v5);
  }
  v26[0] = (cv::Mat *)v17;
  v26[1] = 0;
  v25[0] = 0;
  cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)v14, v26, v25, -1);
  uint64_t v7 = 0;
  uint64_t v8 = v16;
  uint64_t v9 = -1;
  while (++v9 < v15)
  {
    uint64_t v7 = ((unsigned int (*)(unsigned __int8 *, uint64_t))v3)(v25[0], v8) + v7;
    cv::NAryMatIterator::operator++((uint64_t)v14);
  }
  if (v18 && atomic_fetch_add(v18, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v17, v6);
  }
  v17[2] = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  if (SHIDWORD(v17[0]) >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v22;
    do
      *(_DWORD *)(v11 + 4 * v10++) = 0;
    while (v10 < SHIDWORD(v17[0]));
  }
  uint64_t v18 = 0;
  if (v23 != (cv *)&v24) {
    cv::fastFree((void **)v23, v6);
  }
  return v7;
}

void sub_225EECE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  cv::Exception::~Exception((cv::Exception *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v31 - 81) < 0) {
    operator delete(*(void **)(v31 - 104));
  }
  if (*(char *)(v31 - 57) < 0) {
    operator delete(*(void **)(v31 - 80));
  }
  cv::Mat::~Mat((cv::Mat *)&a31, v33);
  _Unwind_Resume(a1);
}

void cv::mean(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3)
{
  void (***v3)(void *__return_ptr);
  void (***v4)(uint64_t *__return_ptr, void, uint64_t);
  void (***v5)(uint64_t *__return_ptr, void, uint64_t);
  float64x2_t *v6;
  float64x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  const cv::Exception *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  const cv::Exception *v17;
  void *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  void *v24;
  void **v25;
  int v26;
  unint64_t v27;
  unint64_t i;
  int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  int v33;
  void **v34;
  uint64_t v35;
  int *v36;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  float64x2_t *v45;
  unint64_t v46;
  int v47;
  uint64_t (*v48)(unsigned __int8 *, uint64_t, void **, uint64_t, uint64_t);
  void v49[2];
  unsigned char v50[4144];
  void *__p[2];
  float64x2_t v52;
  void *v53[4];
  unint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  atomic_uint *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  cv *v65;
  uint64_t v66;
  void v67[3];
  atomic_uint *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  cv::Mat *v77[6];

  uint64_t v3 = (void (***)(void *__return_ptr))MEMORY[0x270FA5388](this, a2);
  double v5 = v4;
  uint64_t v7 = v6;
  v77[3] = *(cv::Mat **)MEMORY[0x263EF8340];
  (**v3)(v67);
  (**v5)(&v56, v5, 0xFFFFFFFFLL);
  if (v59)
  {
    uint64_t v8 = HIDWORD(v56);
    if (SHIDWORD(v56) >= 3)
    {
      uint64_t v10 = v64;
      uint64_t v9 = 1;
      do
      {
        uint64_t v11 = *v10++;
        v9 *= v11;
        --v8;
      }
      while (v8);
    }
    else
    {
      uint64_t v9 = v58 * (uint64_t)v57;
    }
    if (v9 && (v56 & 0xFFF) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v53, "mask.empty() || mask.type() == CV_8U");
      std::string::basic_string[abi:ne180100]<0>(__p, "mean");
      std::string::basic_string[abi:ne180100]<0>(v77, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/stat.cpp");
      cv::Exception::Exception(v49, 4294967081, v53, __p, v77, 565);
      cv::error((cv *)v49, v12);
    }
  }
  uint64_t v13 = LODWORD(v67[0]);
  unint64_t v14 = ((unint64_t)LODWORD(v67[0]) >> 3) & 0x1FF;
  unint64_t v15 = v67[0] & 7;
  double v48 = (uint64_t (*)(unsigned __int8 *, uint64_t, void **, uint64_t, uint64_t))*(&cv::getSumFunc(int)::sumTab
                                                                                       + (v67[0] & 7));
  if (v15 == 7 || v14 >= 4)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "cn <= 4 && func != 0");
    std::string::basic_string[abi:ne180100]<0>(__p, "mean");
    std::string::basic_string[abi:ne180100]<0>(v77, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/stat.cpp");
    cv::Exception::Exception(v49, 4294967081, v53, __p, v77, 645);
    cv::error((cv *)v49, v17);
  }
  v77[0] = (cv::Mat *)v67;
  v77[1] = (cv::Mat *)&v56;
  _DWORD v77[2] = 0;
  double v75 = 0;
  uint64_t v76 = 0;
  cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)v53, v77, &v75, -1);
  uint64_t v19 = (v14 + 1);
  unint64_t v52 = 0u;
  *(_OWORD *)__p = 0u;
  uint64_t v20 = v55;
  v49[0] = v50;
  v49[1] = 1032;
  double v45 = v7;
  if (v15 > 3)
  {
    double v47 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = __p;
    double v23 = v55;
  }
  else
  {
    uint64_t v21 = v13 >> 3;
    if (v15 >= 2) {
      uint64_t v22 = 0x8000;
    }
    else {
      uint64_t v22 = 0x800000;
    }
    bzero(v50, 4 * (v21 & 0x1FF) + 4);
    double v47 = v22;
    if (v22 >= v20) {
      double v23 = v20;
    }
    else {
      double v23 = v22;
    }
    if (v67[0] <= 0) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = v73[HIDWORD(v67[0]) - 1];
    }
    uint64_t v25 = (void **)v50;
  }
  uint64_t v26 = 0;
  double v27 = 0;
  for (unint64_t i = 0; i < v54; unint64_t i = v46)
  {
    float v46 = i + 1;
    if (v20 >= 1)
    {
      double v29 = 0;
      uint64_t v31 = v75;
      double v30 = v76;
      do
      {
        if (v23 >= v20 - v29) {
          uint64_t v32 = (v20 - v29);
        }
        else {
          uint64_t v32 = v23;
        }
        uint64_t v33 = v48(v31, v30, v25, v32, v19);
        v26 += v33;
        if (v15 <= 3 && (v26 + v23 >= v47 || v46 >= v54 && (int)v32 + v29 >= v20))
        {
          double v34 = __p;
          int v35 = v19;
          double v36 = (int *)v25;
          do
          {
            *(double *)double v34 = *(double *)v34 + (double)*v36;
            ++v34;
            *v36++ = 0;
            --v35;
          }
          while (v35);
          uint64_t v26 = 0;
        }
        uint64_t v31 = &v75[(void)v24 * (int)v32];
        double v75 = v31;
        if (v76)
        {
          double v30 = v76 + (int)v32;
          uint64_t v76 = v30;
        }
        else
        {
          double v30 = 0;
        }
        v27 += v33;
        v29 += v23;
      }
      while (v29 < v20);
    }
    cv::NAryMatIterator::operator++((uint64_t)v53);
  }
  if (v27) {
    uint64_t v37 = 1.0 / (double)v27;
  }
  else {
    uint64_t v37 = 0.0;
  }
  uint64_t v38 = vmulq_n_f64(*(float64x2_t *)__p, v37);
  uint64_t v39 = vmulq_n_f64(v52, v37);
  *double v45 = v38;
  v45[1] = v39;
  if ((unsigned char *)v49[0] != v50 && v49[0] != 0) {
    MEMORY[0x22A641760]();
  }
  if (v60 && atomic_fetch_add(v60, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v56, v18);
  }
  double v59 = 0;
  uint64_t v61 = 0;
  double v63 = 0;
  double v62 = 0;
  if (SHIDWORD(v56) >= 1)
  {
    double v41 = 0;
    double v42 = v64;
    do
      v42[v41++] = 0;
    while (v41 < SHIDWORD(v56));
  }
  uint64_t v60 = 0;
  if (v65 != (cv *)&v66) {
    cv::fastFree((void **)v65, v18);
  }
  if (v68 && atomic_fetch_add(v68, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v67, v18);
  }
  _DWORD v67[2] = 0;
  double v69 = 0;
  double v70 = 0;
  float64x2_t v71 = 0;
  if (SHIDWORD(v67[0]) >= 1)
  {
    double v43 = 0;
    double v44 = v72;
    do
      *(_DWORD *)(v44 + 4 * v43++) = 0;
    while (v43 < SHIDWORD(v67[0]));
  }
  double v68 = 0;
  if (v73 != (void **)&v74) {
    cv::fastFree(v73, v18);
  }
}

void sub_225EED468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  cv::Exception::~Exception((cv::Exception *)va);
  if (v7[327] < 0) {
    operator delete(*(void **)(v8 - 128));
  }
  if (v7[23] < 0) {
    operator delete((void *)STACK[0x1070]);
  }
  if (v7[55] < 0) {
    operator delete((void *)STACK[0x1090]);
  }
  cv::Mat::~Mat((cv::Mat *)&STACK[0x10D0], v10);
  cv::Mat::~Mat((cv::Mat *)(v8 - 240), v11);
  _Unwind_Resume(a1);
}

void cv::minMaxIdx(void (***this)(uint64_t *__return_ptr), const cv::_InputArray *a2, double *a3, double *a4, int *a5, int *a6, const cv::_InputArray *a7)
{
  v95[3] = *(cv::Mat **)MEMORY[0x263EF8340];
  (**this)(&v82);
  (**(void (***)(uint64_t *__return_ptr, int *, uint64_t))a6)(&v71, a6, 0xFFFFFFFFLL);
  unsigned int v12 = (v82 >> 3) & 0x1FF;
  if (v12) {
    goto LABEL_2;
  }
  if (v74)
  {
    uint64_t v15 = HIDWORD(v71);
    if (SHIDWORD(v71) >= 3)
    {
      uint64_t v21 = v79;
      uint64_t v16 = 1;
      do
      {
        uint64_t v22 = *v21++;
        v16 *= v22;
        --v15;
      }
      while (v15);
    }
    else
    {
      uint64_t v16 = v73 * (uint64_t)v72;
    }
    if (v16 && (v71 & 0xFFF) != 0)
    {
LABEL_2:
      if (v74)
      {
        uint64_t v13 = HIDWORD(v71);
        if (SHIDWORD(v71) >= 3)
        {
          uint64_t v18 = v79;
          uint64_t v14 = 1;
          do
          {
            uint64_t v19 = *v18++;
            v14 *= v19;
            --v13;
          }
          while (v13);
        }
        else
        {
          uint64_t v14 = v73 * (uint64_t)v72;
        }
        BOOL v17 = v14 == 0;
        if (a5) {
          goto LABEL_15;
        }
      }
      else
      {
        BOOL v17 = 1;
        if (a5) {
          goto LABEL_15;
        }
      }
      if (!a4 && v17) {
        goto LABEL_20;
      }
LABEL_15:
      std::string::basic_string[abi:ne180100]<0>(v95, "(cn == 1 && (mask.empty() || mask.type() == CV_8U)) || (cn >= 1 && mask.empty() && !minIdx && !maxIdx)");
      std::string::basic_string[abi:ne180100]<0>(&v93, "minMaxIdx");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/stat.cpp");
      cv::Exception::Exception(v68, 4294967081, v95, &v93, __p, 1013);
      cv::error((cv *)v68, v20);
    }
  }
LABEL_20:
  unsigned int v23 = v82 & 7;
  uint64_t v24 = (void (*)(unsigned __int8 *, uint64_t, float *, float *, void **, uint64_t *, uint64_t, uint64_t))*(&cv::getMinmaxTab(int)::minmaxTab + (v82 & 7));
  if (v23 == 7)
  {
    std::string::basic_string[abi:ne180100]<0>(v95, "func != 0");
    std::string::basic_string[abi:ne180100]<0>(&v93, "minMaxIdx");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/stat.cpp");
    cv::Exception::Exception(v68, 4294967081, v95, &v93, __p, 1092);
    cv::error((cv *)v68, v25);
  }
  __b = a5;
  uint64_t v26 = a3;
  v95[0] = (cv::Mat *)&v82;
  v95[1] = (cv::Mat *)&v71;
  v95[2] = 0;
  unint64_t v93 = 0;
  uint64_t v94 = 0;
  cv::NAryMatIterator::NAryMatIterator((cv::NAryMatIterator *)v68, v95, &v93, -1);
  int v64 = 0x80000000;
  int v65 = 0x7FFFFFFF;
  float v62 = -INFINITY;
  float v63 = INFINITY;
  double v28 = (double *)&v65;
  if (v23 == 6) {
    double v28 = &v61;
  }
  double v29 = (unint64_t *)&v64;
  uint64_t v66 = 0;
  __p[0] = 0;
  if (v23 == 6) {
    double v29 = &v60;
  }
  unint64_t v60 = 0xFFF0000000000000;
  double v61 = INFINITY;
  if (v23 == 5) {
    double v30 = &v63;
  }
  else {
    double v30 = (float *)v28;
  }
  if (v23 == 5) {
    uint64_t v31 = &v62;
  }
  else {
    uint64_t v31 = (float *)v29;
  }
  if (v69)
  {
    unint64_t v32 = 0;
    uint64_t v33 = (v12 + 1) * v70;
    uint64_t v34 = 1;
    do
    {
      v24(v93, v94, v30, v31, __p, &v66, v33, v34);
      cv::NAryMatIterator::operator++((uint64_t)v68);
      ++v32;
      v34 += (int)v33;
    }
    while (v32 < v69);
  }
  int v35 = v26;
  if (v85)
  {
    uint64_t v36 = HIDWORD(v82);
    if (SHIDWORD(v82) >= 3)
    {
      uint64_t v38 = v90;
      uint64_t v37 = 1;
      do
      {
        uint64_t v39 = *v38++;
        v37 *= v39;
        --v36;
      }
      while (v36);
    }
    else
    {
      uint64_t v37 = v84 * (uint64_t)v83;
    }
    if (v37)
    {
      if (!v74) {
        goto LABEL_47;
      }
      uint64_t v40 = HIDWORD(v71);
      if (SHIDWORD(v71) >= 3)
      {
        double v42 = v79;
        uint64_t v41 = 1;
        do
        {
          uint64_t v43 = *v42++;
          v41 *= v43;
          --v40;
        }
        while (v40);
      }
      else
      {
        uint64_t v41 = v73 * (uint64_t)v72;
      }
      if (!v41)
      {
LABEL_47:
        if (!__p[0]) {
          __p[0] = (void *)1;
        }
        if (!v66) {
          uint64_t v66 = 1;
        }
      }
    }
  }
  double v44 = (char *)__p[0];
  if (!__p[0])
  {
    unint64_t v60 = 0;
    double v61 = 0.0;
    double v45 = __b;
    goto LABEL_58;
  }
  double v45 = __b;
  if (v23 == 5)
  {
    double v61 = v63;
    double v46 = v62;
  }
  else
  {
    if (v23 > 4) {
      goto LABEL_58;
    }
    double v61 = (double)v65;
    double v46 = (double)v64;
  }
  unint64_t v60 = *(void *)&v46;
LABEL_58:
  if (a2) {
    *(double *)a2 = v61;
  }
  if (v35) {
    *int v35 = v60;
  }
  if (a4)
  {
    if (v44)
    {
      if (SHIDWORD(v82) >= 1)
      {
        unint64_t v47 = (unint64_t)(v44 - 1);
        double v48 = v90;
        unint64_t v49 = HIDWORD(v82) + 1;
        do
        {
          int v50 = v48[(v49 - 2)];
          *((_DWORD *)a4 + (v49-- - 2)) = v47 % v50;
          v47 /= (unint64_t)v50;
        }
        while (v49 > 1);
      }
    }
    else if (SHIDWORD(v82) >= 1)
    {
      memset(a4, 255, 4 * HIDWORD(v82));
    }
  }
  if (v45)
  {
    if (v66)
    {
      if (SHIDWORD(v82) >= 1)
      {
        unint64_t v51 = v66 - 1;
        unint64_t v52 = v90;
        unint64_t v53 = HIDWORD(v82) + 1;
        do
        {
          int v54 = v52[(v53 - 2)];
          v45[(v53-- - 2)] = v51 % v54;
          v51 /= (unint64_t)v54;
        }
        while (v53 > 1);
      }
    }
    else if (SHIDWORD(v82) >= 1)
    {
      memset(v45, 255, 4 * HIDWORD(v82));
    }
  }
  if (v75 && atomic_fetch_add(v75, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v71, v27);
  }
  uint64_t v74 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  if (SHIDWORD(v71) >= 1)
  {
    uint64_t v55 = 0;
    double v56 = v79;
    do
      v56[v55++] = 0;
    while (v55 < SHIDWORD(v71));
  }
  double v75 = 0;
  if (v80 != (cv *)&v81) {
    cv::fastFree((void **)v80, v27);
  }
  if (v86 && atomic_fetch_add(v86, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v82, v27);
  }
  uint64_t v85 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  if (SHIDWORD(v82) >= 1)
  {
    uint64_t v57 = 0;
    int v58 = v90;
    do
      v58[v57++] = 0;
    while (v57 < SHIDWORD(v82));
  }
  unint64_t v86 = 0;
  if (v91 != (void **)&v92) {
    cv::fastFree(v91, v27);
  }
}

void sub_225EEDBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  cv::Exception::~Exception((cv::Exception *)&a23);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (*(char *)(v38 - 97) < 0) {
    operator delete(*(void **)(v38 - 120));
  }
  cv::Mat::~Mat((cv::Mat *)&a38, v40);
  cv::Mat::~Mat((cv::Mat *)(v38 - 240), v41);
  _Unwind_Resume(a1);
}

void cv::minMaxLoc(void (***a1)(uint64_t *__return_ptr), const cv::_InputArray *a2, double *a3, double *a4, int32x2_t *a5, int *a6)
{
  (**a1)(v21);
  if (SHIDWORD(v21[0]) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "img.dims <= 2");
    std::string::basic_string[abi:ne180100]<0>(v18, "minMaxLoc");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/stat.cpp");
    cv::Exception::Exception(v20, 4294967081, v19, v18, __p, 1144);
    cv::error((cv *)v20, v13);
  }
  cv::minMaxIdx(a1, a2, a3, a4, (int *)a5, a6, v12);
  if (a4) {
    *(int32x2_t *)a4 = vrev64_s32(*(int32x2_t *)a4);
  }
  if (a5) {
    *a5 = vrev64_s32(*a5);
  }
  if (v22 && atomic_fetch_add(v22, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v21, v14);
  }
  v21[2] = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if (SHIDWORD(v21[0]) >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v26;
    do
      *(_DWORD *)(v16 + 4 * v15++) = 0;
    while (v15 < SHIDWORD(v21[0]));
  }
  uint64_t v22 = 0;
  if (v27 != (void **)&v28) {
    cv::fastFree(v27, v14);
  }
}

void sub_225EEDE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::Mat::~Mat((cv::Mat *)(v27 - 160), v29);
  _Unwind_Resume(a1);
}

unint64_t cv::sum8u(cv *this, const unsigned __int8 *a2, int32x2_t *a3, unint64_t a4, int a5, double a6, uint8x8_t a7)
{
  if (a2)
  {
    if (a5 == 1)
    {
      __int32 v18 = a3->i32[0];
      if ((int)a4 < 1)
      {
        a4 = 0;
      }
      else
      {
        uint64_t v19 = a4;
        a4 = 0;
        do
        {
          if (*a2++)
          {
            v18 += *(unsigned __int8 *)this;
            a4 = (a4 + 1);
          }
          this = (cv *)((char *)this + 1);
          --v19;
        }
        while (v19);
      }
      a3->i32[0] = v18;
    }
    else if (a5 == 3)
    {
      __int32 v7 = a3->i32[0];
      __int32 v8 = a3->i32[1];
      __int32 v9 = a3[1].i32[0];
      if ((int)a4 < 1)
      {
        a4 = 0;
      }
      else
      {
        uint64_t v10 = a4;
        uint64_t v11 = (unsigned __int8 *)this + 2;
        a4 = 0;
        do
        {
          if (*a2++)
          {
            v7 += *(v11 - 2);
            v8 += *(v11 - 1);
            v9 += *v11;
            a4 = (a4 + 1);
          }
          v11 += 3;
          --v10;
        }
        while (v10);
      }
      a3->i32[0] = v7;
      a3->i32[1] = v8;
      a3[1].i32[0] = v9;
    }
    else if ((int)a4 < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = a4;
      a4 = 0;
      do
      {
        if (a2[v21])
        {
          if (a5 >= 4)
          {
            uint64_t v23 = 0;
            uint64_t v24 = a3 + 1;
            do
            {
              v25.i32[0] = *((unsigned __int8 *)this + v23);
              v25.i32[1] = *((unsigned __int8 *)this + v23 + 1);
              v24[-1] = vadd_s32(v24[-1], v25);
              v26.i32[0] = *((unsigned __int8 *)this + v23 + 2);
              v26.i32[1] = *((unsigned __int8 *)this + v23 + 3);
              *uint64_t v24 = vadd_s32(*v24, v26);
              v24 += 2;
              v23 += 4;
            }
            while (v23 <= a5 - 4);
            uint64_t v23 = v23;
          }
          else
          {
            uint64_t v23 = 0;
          }
          if ((int)v23 < a5)
          {
            do
            {
              a3->i32[v23] += *((unsigned __int8 *)this + v23);
              ++v23;
            }
            while (a5 != v23);
          }
          a4 = (a4 + 1);
        }
        ++v21;
        this = (cv *)((char *)this + a5);
      }
      while (v21 != v22);
    }
  }
  else
  {
    if (a5 <= 0) {
      LODWORD(v13) = -(-a5 & 3);
    }
    else {
      LODWORD(v13) = a5 & 3;
    }
    switch(v13)
    {
      case 3:
        __int32 v27 = a3->i32[0];
        __int32 v28 = a3->i32[1];
        __int32 v29 = a3[1].i32[0];
        if ((int)a4 >= 1)
        {
          double v30 = (unsigned __int8 *)this + 2;
          int v31 = a4;
          do
          {
            v27 += *(v30 - 2);
            v28 += *(v30 - 1);
            v29 += *v30;
            v30 += a5;
            --v31;
          }
          while (v31);
        }
        a3->i32[0] = v27;
        a3->i32[1] = v28;
        a3[1].i32[0] = v29;
        break;
      case 2:
        __int32 v32 = a3->i32[0];
        __int32 v33 = a3->i32[1];
        if ((int)a4 >= 1)
        {
          uint64_t v34 = (unsigned __int8 *)this + 1;
          int v35 = a4;
          do
          {
            v32 += *(v34 - 1);
            v33 += *v34;
            v34 += a5;
            --v35;
          }
          while (v35);
        }
        a3->i32[0] = v32;
        a3->i32[1] = v33;
        break;
      case 1:
        __int32 v14 = a3->i32[0];
        signed int v15 = 0;
        int v16 = a4 - 4;
        if ((int)a4 >= 4)
        {
          uint64_t v36 = 4 * a5;
          uint64_t v37 = this;
          do
          {
            v14 += *(unsigned __int8 *)v37
                 + *((unsigned __int8 *)v37 + a5)
                 + *((unsigned __int8 *)v37 + 2 * a5)
                 + *((unsigned __int8 *)v37 + 3 * a5);
            v15 += 4;
            uint64_t v37 = (cv *)((char *)v37 + v36);
          }
          while (v15 <= v16);
          signed int v15 = (v16 & 0xFFFFFFFC) + 4;
          BOOL v17 = (cv *)((char *)this + ((v16 >> 2) + 1) * v36);
        }
        else
        {
          BOOL v17 = this;
        }
        BOOL v38 = __OFSUB__(a4, v15);
        int v39 = a4 - v15;
        if (!((v39 < 0) ^ v38 | (v39 == 0)))
        {
          do
          {
            v14 += *(unsigned __int8 *)v17;
            BOOL v17 = (cv *)((char *)v17 + a5);
            --v39;
          }
          while (v39);
        }
        a3->i32[0] = v14;
        break;
    }
    if ((int)v13 < a5)
    {
      uint64_t v13 = (int)v13;
      do
      {
        uint64_t v40 = (unsigned __int8 *)a3 + 4 * v13;
        uint32x4_t v41 = *(uint32x4_t *)v40;
        if ((int)a4 >= 1)
        {
          int v42 = a4;
          uint64_t v43 = this;
          do
          {
            a7.i32[0] = *(_DWORD *)((char *)v43 + v13);
            a7 = (uint8x8_t)vmovl_u8(a7).u64[0];
            uint32x4_t v41 = vaddw_u16(v41, (uint16x4_t)a7);
            uint64_t v43 = (cv *)((char *)v43 + a5);
            --v42;
          }
          while (v42);
        }
        *(uint32x4_t *)uint64_t v40 = v41;
        v13 += 4;
      }
      while (v13 < a5);
    }
  }
  return a4;
}

unint64_t cv::sum8s(cv *this, const signed __int8 *a2, int32x2_t *a3, unint64_t a4, int a5, double a6, int8x8_t a7)
{
  if (a2)
  {
    if (a5 == 1)
    {
      __int32 v18 = a3->i32[0];
      if ((int)a4 < 1)
      {
        a4 = 0;
      }
      else
      {
        uint64_t v19 = a4;
        a4 = 0;
        do
        {
          if (*(unsigned __int8 *)a2++)
          {
            v18 += *(char *)this;
            a4 = (a4 + 1);
          }
          this = (cv *)((char *)this + 1);
          --v19;
        }
        while (v19);
      }
      a3->i32[0] = v18;
    }
    else if (a5 == 3)
    {
      __int32 v7 = a3->i32[0];
      __int32 v8 = a3->i32[1];
      __int32 v9 = a3[1].i32[0];
      if ((int)a4 < 1)
      {
        a4 = 0;
      }
      else
      {
        uint64_t v10 = a4;
        uint64_t v11 = (char *)this + 2;
        a4 = 0;
        do
        {
          if (*(unsigned __int8 *)a2++)
          {
            v7 += *(v11 - 2);
            v8 += *(v11 - 1);
            v9 += *v11;
            a4 = (a4 + 1);
          }
          v11 += 3;
          --v10;
        }
        while (v10);
      }
      a3->i32[0] = v7;
      a3->i32[1] = v8;
      a3[1].i32[0] = v9;
    }
    else if ((int)a4 < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = a4;
      a4 = 0;
      do
      {
        if (a2[v21])
        {
          if (a5 >= 4)
          {
            uint64_t v23 = 0;
            uint64_t v24 = a3 + 1;
            do
            {
              v25.i32[0] = *((char *)this + v23);
              v25.i32[1] = *((char *)this + v23 + 1);
              v24[-1] = vadd_s32(v24[-1], v25);
              v26.i32[0] = *((char *)this + v23 + 2);
              v26.i32[1] = *((char *)this + v23 + 3);
              *uint64_t v24 = vadd_s32(*v24, v26);
              v24 += 2;
              v23 += 4;
            }
            while (v23 <= a5 - 4);
            uint64_t v23 = v23;
          }
          else
          {
            uint64_t v23 = 0;
          }
          if ((int)v23 < a5)
          {
            do
            {
              a3->i32[v23] += *((char *)this + v23);
              ++v23;
            }
            while (a5 != v23);
          }
          a4 = (a4 + 1);
        }
        ++v21;
        this = (cv *)((char *)this + a5);
      }
      while (v21 != v22);
    }
  }
  else
  {
    if (a5 <= 0) {
      LODWORD(v13) = -(-a5 & 3);
    }
    else {
      LODWORD(v13) = a5 & 3;
    }
    switch(v13)
    {
      case 3:
        __int32 v27 = a3->i32[0];
        __int32 v28 = a3->i32[1];
        __int32 v29 = a3[1].i32[0];
        if ((int)a4 >= 1)
        {
          double v30 = (char *)this + 2;
          int v31 = a4;
          do
          {
            v27 += *(v30 - 2);
            v28 += *(v30 - 1);
            v29 += *v30;
            v30 += a5;
            --v31;
          }
          while (v31);
        }
        a3->i32[0] = v27;
        a3->i32[1] = v28;
        a3[1].i32[0] = v29;
        break;
      case 2:
        __int32 v32 = a3->i32[0];
        __int32 v33 = a3->i32[1];
        if ((int)a4 >= 1)
        {
          uint64_t v34 = (char *)this + 1;
          int v35 = a4;
          do
          {
            v32 += *(v34 - 1);
            v33 += *v34;
            v34 += a5;
            --v35;
          }
          while (v35);
        }
        a3->i32[0] = v32;
        a3->i32[1] = v33;
        break;
      case 1:
        __int32 v14 = a3->i32[0];
        signed int v15 = 0;
        int v16 = a4 - 4;
        if ((int)a4 >= 4)
        {
          uint64_t v36 = 4 * a5;
          uint64_t v37 = this;
          do
          {
            v14 += *(char *)v37 + *((char *)v37 + a5) + *((char *)v37 + 2 * a5) + *((char *)v37 + 3 * a5);
            v15 += 4;
            uint64_t v37 = (cv *)((char *)v37 + v36);
          }
          while (v15 <= v16);
          signed int v15 = (v16 & 0xFFFFFFFC) + 4;
          BOOL v17 = (cv *)((char *)this + ((v16 >> 2) + 1) * v36);
        }
        else
        {
          BOOL v17 = this;
        }
        BOOL v38 = __OFSUB__(a4, v15);
        int v39 = a4 - v15;
        if (!((v39 < 0) ^ v38 | (v39 == 0)))
        {
          do
          {
            v14 += *(char *)v17;
            BOOL v17 = (cv *)((char *)v17 + a5);
            --v39;
          }
          while (v39);
        }
        a3->i32[0] = v14;
        break;
    }
    if ((int)v13 < a5)
    {
      uint64_t v13 = (int)v13;
      do
      {
        uint64_t v40 = (unsigned __int8 *)a3 + 4 * v13;
        int32x4_t v41 = *(int32x4_t *)v40;
        if ((int)a4 >= 1)
        {
          int v42 = a4;
          uint64_t v43 = this;
          do
          {
            a7.i32[0] = *(_DWORD *)((char *)v43 + v13);
            a7 = (int8x8_t)vmovl_s8(a7).u64[0];
            int32x4_t v41 = vaddw_s16(v41, (int16x4_t)a7);
            uint64_t v43 = (cv *)((char *)v43 + a5);
            --v42;
          }
          while (v42);
        }
        *(int32x4_t *)uint64_t v40 = v41;
        v13 += 4;
      }
      while (v13 < a5);
    }
  }
  return a4;
}

unint64_t cv::sum16u(cv *this, const unsigned __int16 *a2, uint32x4_t *a3, unint64_t a4, int a5)
{
  if (a2)
  {
    if (a5 == 1)
    {
      __int32 v16 = a3->i32[0];
      if ((int)a4 < 1)
      {
        a4 = 0;
      }
      else
      {
        uint64_t v17 = a4;
        a4 = 0;
        do
        {
          int v18 = *(unsigned __int8 *)a2;
          a2 = (const unsigned __int16 *)((char *)a2 + 1);
          if (v18)
          {
            v16 += *(unsigned __int16 *)this;
            a4 = (a4 + 1);
          }
          this = (cv *)((char *)this + 2);
          --v17;
        }
        while (v17);
      }
      a3->i32[0] = v16;
    }
    else if (a5 == 3)
    {
      __int32 v5 = a3->i32[0];
      __int32 v6 = a3->i32[1];
      __int32 v7 = a3->i32[2];
      if ((int)a4 < 1)
      {
        a4 = 0;
      }
      else
      {
        uint64_t v8 = a4;
        __int32 v9 = (unsigned __int16 *)((char *)this + 4);
        a4 = 0;
        do
        {
          int v10 = *(unsigned __int8 *)a2;
          a2 = (const unsigned __int16 *)((char *)a2 + 1);
          if (v10)
          {
            v5 += *(v9 - 2);
            v6 += *(v9 - 1);
            v7 += *v9;
            a4 = (a4 + 1);
          }
          v9 += 3;
          --v8;
        }
        while (v8);
      }
      a3->i32[0] = v5;
      a3->i32[1] = v6;
      a3->i32[2] = v7;
    }
    else if ((int)a4 < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = a4;
      a4 = 0;
      do
      {
        if (*((unsigned char *)a2 + v19))
        {
          if (a5 >= 4)
          {
            uint64_t v21 = 0;
            uint64_t v22 = a3;
            uint64_t v23 = this;
            do
            {
              uint16x4_t v24 = *(uint16x4_t *)v23;
              uint64_t v23 = (cv *)((char *)v23 + 8);
              *uint64_t v22 = vaddw_u16(*v22, v24);
              ++v22;
              v21 += 4;
            }
            while (v21 <= a5 - 4);
            uint64_t v21 = v21;
          }
          else
          {
            uint64_t v21 = 0;
          }
          if ((int)v21 < a5)
          {
            do
            {
              a3->i32[v21] += *((unsigned __int16 *)this + v21);
              ++v21;
            }
            while (a5 != v21);
          }
          a4 = (a4 + 1);
        }
        ++v19;
        this = (cv *)((char *)this + 2 * a5);
      }
      while (v19 != v20);
    }
  }
  else
  {
    if (a5 <= 0) {
      int v11 = -(-a5 & 3);
    }
    else {
      int v11 = a5 & 3;
    }
    switch(v11)
    {
      case 3:
        __int32 v25 = a3->i32[0];
        __int32 v26 = a3->i32[1];
        __int32 v27 = a3->i32[2];
        if ((int)a4 >= 1)
        {
          __int32 v28 = (unsigned __int16 *)((char *)this + 4);
          int v29 = a4;
          do
          {
            v25 += *(v28 - 2);
            v26 += *(v28 - 1);
            v27 += *v28;
            v28 += a5;
            --v29;
          }
          while (v29);
        }
        a3->i32[0] = v25;
        a3->i32[1] = v26;
        a3->i32[2] = v27;
        break;
      case 2:
        __int32 v30 = a3->i32[0];
        __int32 v31 = a3->i32[1];
        if ((int)a4 >= 1)
        {
          __int32 v32 = (unsigned __int16 *)((char *)this + 2);
          int v33 = a4;
          do
          {
            v30 += *(v32 - 1);
            v31 += *v32;
            v32 += a5;
            --v33;
          }
          while (v33);
        }
        a3->i32[0] = v30;
        a3->i32[1] = v31;
        break;
      case 1:
        __int32 v12 = a3->i32[0];
        int v13 = a4 - 4;
        if ((int)a4 >= 4)
        {
          int v34 = 0;
          signed int v15 = this;
          do
          {
            v12 += *(unsigned __int16 *)v15
                 + *((unsigned __int16 *)v15 + a5)
                 + *((unsigned __int16 *)v15 + 2 * a5)
                 + *((unsigned __int16 *)v15 + 3 * a5);
            v34 += 4;
            signed int v15 = (cv *)((char *)v15 + 8 * a5);
          }
          while (v34 <= v13);
          unsigned int v14 = (v13 & 0xFFFFFFFC) + 4;
        }
        else
        {
          unsigned int v14 = 0;
          signed int v15 = this;
        }
        BOOL v35 = __OFSUB__(a4, v14);
        int v36 = a4 - v14;
        if (!((v36 < 0) ^ v35 | (v36 == 0)))
        {
          do
          {
            v12 += *(unsigned __int16 *)v15;
            signed int v15 = (cv *)((char *)v15 + 2 * a5);
            --v36;
          }
          while (v36);
        }
        a3->i32[0] = v12;
        break;
    }
    if (v11 < a5)
    {
      uint64_t v37 = v11;
      BOOL v38 = (uint16x4_t *)((char *)this + 2 * v11);
      do
      {
        int v39 = (unsigned __int8 *)a3 + 4 * v37;
        uint32x4_t v40 = *(uint32x4_t *)v39;
        if ((int)a4 >= 1)
        {
          int v41 = a4;
          int v42 = v38;
          do
          {
            uint32x4_t v40 = vaddw_u16(v40, *v42);
            int v42 = (uint16x4_t *)((char *)v42 + 2 * a5);
            --v41;
          }
          while (v41);
        }
        *(uint32x4_t *)int v39 = v40;
        v37 += 4;
        ++v38;
      }
      while (v37 < a5);
    }
  }
  return a4;
}

unint64_t cv::sum16s(cv *this, const __int16 *a2, int32x4_t *a3, unint64_t a4, int a5)
{
  if (a2)
  {
    if (a5 == 1)
    {
      __int32 v16 = a3->i32[0];
      if ((int)a4 < 1)
      {
        a4 = 0;
      }
      else
      {
        uint64_t v17 = a4;
        a4 = 0;
        do
        {
          int v18 = *(unsigned __int8 *)a2;
          a2 = (const __int16 *)((char *)a2 + 1);
          if (v18)
          {
            v16 += *(__int16 *)this;
            a4 = (a4 + 1);
          }
          this = (cv *)((char *)this + 2);
          --v17;
        }
        while (v17);
      }
      a3->i32[0] = v16;
    }
    else if (a5 == 3)
    {
      __int32 v5 = a3->i32[0];
      __int32 v6 = a3->i32[1];
      __int32 v7 = a3->i32[2];
      if ((int)a4 < 1)
      {
        a4 = 0;
      }
      else
      {
        uint64_t v8 = a4;
        __int32 v9 = (__int16 *)((char *)this + 4);
        a4 = 0;
        do
        {
          int v10 = *(unsigned __int8 *)a2;
          a2 = (const __int16 *)((char *)a2 + 1);
          if (v10)
          {
            v5 += *(v9 - 2);
            v6 += *(v9 - 1);
            v7 += *v9;
            a4 = (a4 + 1);
          }
          v9 += 3;
          --v8;
        }
        while (v8);
      }
      a3->i32[0] = v5;
      a3->i32[1] = v6;
      a3->i32[2] = v7;
    }
    else if ((int)a4 < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = a4;
      a4 = 0;
      do
      {
        if (*((unsigned char *)a2 + v19))
        {
          if (a5 >= 4)
          {
            uint64_t v21 = 0;
            uint64_t v22 = a3;
            uint64_t v23 = this;
            do
            {
              int16x4_t v24 = *(int16x4_t *)v23;
              uint64_t v23 = (cv *)((char *)v23 + 8);
              *uint64_t v22 = vaddw_s16(*v22, v24);
              ++v22;
              v21 += 4;
            }
            while (v21 <= a5 - 4);
            uint64_t v21 = v21;
          }
          else
          {
            uint64_t v21 = 0;
          }
          if ((int)v21 < a5)
          {
            do
            {
              a3->i32[v21] += *((__int16 *)this + v21);
              ++v21;
            }
            while (a5 != v21);
          }
          a4 = (a4 + 1);
        }
        ++v19;
        this = (cv *)((char *)this + 2 * a5);
      }
      while (v19 != v20);
    }
  }
  else
  {
    if (a5 <= 0) {
      int v11 = -(-a5 & 3);
    }
    else {
      int v11 = a5 & 3;
    }
    switch(v11)
    {
      case 3:
        __int32 v25 = a3->i32[0];
        __int32 v26 = a3->i32[1];
        __int32 v27 = a3->i32[2];
        if ((int)a4 >= 1)
        {
          __int32 v28 = (__int16 *)((char *)this + 4);
          int v29 = a4;
          do
          {
            v25 += *(v28 - 2);
            v26 += *(v28 - 1);
            v27 += *v28;
            v28 += a5;
            --v29;
          }
          while (v29);
        }
        a3->i32[0] = v25;
        a3->i32[1] = v26;
        a3->i32[2] = v27;
        break;
      case 2:
        __int32 v30 = a3->i32[0];
        __int32 v31 = a3->i32[1];
        if ((int)a4 >= 1)
        {
          __int32 v32 = (__int16 *)((char *)this + 2);
          int v33 = a4;
          do
          {
            v30 += *(v32 - 1);
            v31 += *v32;
            v32 += a5;
            --v33;
          }
          while (v33);
        }
        a3->i32[0] = v30;
        a3->i32[1] = v31;
        break;
      case 1:
        __int32 v12 = a3->i32[0];
        int v13 = a4 - 4;
        if ((int)a4 >= 4)
        {
          int v34 = 0;
          signed int v15 = this;
          do
          {
            v12 += *(__int16 *)v15 + *((__int16 *)v15 + a5) + *((__int16 *)v15 + 2 * a5) + *((__int16 *)v15 + 3 * a5);
            v34 += 4;
            signed int v15 = (cv *)((char *)v15 + 8 * a5);
          }
          while (v34 <= v13);
          unsigned int v14 = (v13 & 0xFFFFFFFC) + 4;
        }
        else
        {
          unsigned int v14 = 0;
          signed int v15 = this;
        }
        BOOL v35 = __OFSUB__(a4, v14);
        int v36 = a4 - v14;
        if (!((v36 < 0) ^ v35 | (v36 == 0)))
        {
          do
          {
            v12 += *(__int16 *)v15;
            signed int v15 = (cv *)((char *)v15 + 2 * a5);
            --v36;
          }
          while (v36);
        }
        a3->i32[0] = v12;
        break;
    }
    if (v11 < a5)
    {
      uint64_t v37 = v11;
      BOOL v38 = (int16x4_t *)((char *)this + 2 * v11);
      do
      {
        int v39 = (unsigned __int8 *)a3 + 4 * v37;
        int32x4_t v40 = *(int32x4_t *)v39;
        if ((int)a4 >= 1)
        {
          int v41 = a4;
          int v42 = v38;
          do
          {
            int32x4_t v40 = vaddw_s16(v40, *v42);
            int v42 = (int16x4_t *)((char *)v42 + 2 * a5);
            --v41;
          }
          while (v41);
        }
        *(int32x4_t *)int v39 = v40;
        v37 += 4;
        ++v38;
      }
      while (v37 < a5);
    }
  }
  return a4;
}

unint64_t cv::sum32s(cv *this, const int *a2, double *a3, unint64_t a4, int a5)
{
  if (a2)
  {
    if (a5 == 1)
    {
      double v17 = *a3;
      if ((int)a4 < 1)
      {
        a4 = 0;
      }
      else
      {
        uint64_t v18 = a4;
        a4 = 0;
        do
        {
          int v19 = *(unsigned __int8 *)a2;
          a2 = (const int *)((char *)a2 + 1);
          if (v19)
          {
            double v17 = v17 + (double)*(int *)this;
            a4 = (a4 + 1);
          }
          this = (cv *)((char *)this + 4);
          --v18;
        }
        while (v18);
      }
      *a3 = v17;
    }
    else if (a5 == 3)
    {
      float64x2_t v5 = *(float64x2_t *)a3;
      double v6 = a3[2];
      if ((int)a4 < 1)
      {
        a4 = 0;
      }
      else
      {
        uint64_t v7 = a4;
        uint64_t v8 = (int *)((char *)this + 8);
        a4 = 0;
        do
        {
          int v9 = *(unsigned __int8 *)a2;
          a2 = (const int *)((char *)a2 + 1);
          if (v9)
          {
            uint64_t v10 = *((void *)v8 - 1);
            v11.i64[0] = (int)v10;
            v11.i64[1] = SHIDWORD(v10);
            float64x2_t v5 = vaddq_f64(v5, vcvtq_f64_s64(v11));
            double v6 = v6 + (double)*v8;
            a4 = (a4 + 1);
          }
          v8 += 3;
          --v7;
        }
        while (v7);
      }
      *(float64x2_t *)a3 = v5;
      a3[2] = v6;
    }
    else if ((int)a4 < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = 4 * a5;
      uint64_t v22 = (char *)this + 8;
      uint64_t v23 = a4;
      a4 = 0;
      do
      {
        if (*((unsigned char *)a2 + v20))
        {
          if (a5 >= 4)
          {
            uint64_t v24 = 0;
            __int32 v25 = (float64x2_t *)(a3 + 2);
            __int32 v26 = (uint64_t *)v22;
            do
            {
              uint64_t v27 = *(v26 - 1);
              v28.i64[0] = (int)v27;
              v28.i64[1] = SHIDWORD(v27);
              v25[-1] = vaddq_f64(v25[-1], vcvtq_f64_s64(v28));
              uint64_t v29 = *v26;
              v26 += 2;
              v28.i64[0] = (int)v29;
              v28.i64[1] = SHIDWORD(v29);
              *__int32 v25 = vaddq_f64(*v25, vcvtq_f64_s64(v28));
              v25 += 2;
              v24 += 4;
            }
            while (v24 <= a5 - 4);
            uint64_t v24 = v24;
          }
          else
          {
            uint64_t v24 = 0;
          }
          if ((int)v24 < a5)
          {
            do
            {
              a3[v24] = a3[v24] + (double)*((int *)this + v24);
              ++v24;
            }
            while (a5 != v24);
          }
          a4 = (a4 + 1);
        }
        ++v20;
        v22 += v21;
        this = (cv *)((char *)this + v21);
      }
      while (v20 != v23);
    }
  }
  else
  {
    if (a5 <= 0) {
      int v12 = -(-a5 & 3);
    }
    else {
      int v12 = a5 & 3;
    }
    switch(v12)
    {
      case 3:
        float64x2_t v30 = *(float64x2_t *)a3;
        double v31 = a3[2];
        if ((int)a4 >= 1)
        {
          __int32 v32 = (int *)((char *)this + 8);
          int v33 = a4;
          do
          {
            uint64_t v34 = *((void *)v32 - 1);
            v35.i64[0] = (int)v34;
            v35.i64[1] = SHIDWORD(v34);
            float64x2_t v30 = vaddq_f64(v30, vcvtq_f64_s64(v35));
            double v31 = v31 + (double)*v32;
            v32 += a5;
            --v33;
          }
          while (v33);
        }
        *(float64x2_t *)a3 = v30;
        a3[2] = v31;
        break;
      case 2:
        float64x2_t v36 = *(float64x2_t *)a3;
        if ((int)a4 >= 1)
        {
          int v37 = a4;
          BOOL v38 = this;
          do
          {
            v39.i64[0] = (int)*(void *)v38;
            v39.i64[1] = (int)HIDWORD(*(void *)v38);
            float64x2_t v36 = vaddq_f64(v36, vcvtq_f64_s64(v39));
            BOOL v38 = (cv *)((char *)v38 + 4 * a5);
            --v37;
          }
          while (v37);
        }
        *(float64x2_t *)a3 = v36;
        break;
      case 1:
        double v13 = *a3;
        int v14 = a4 - 4;
        if ((int)a4 >= 4)
        {
          int v40 = 0;
          __int32 v16 = this;
          do
          {
            double v13 = v13
                + (double)(*((_DWORD *)v16 + a5) + *(_DWORD *)v16 + *((_DWORD *)v16 + 2 * a5)
                                                                  + *((_DWORD *)v16 + 3 * a5));
            v40 += 4;
            __int32 v16 = (cv *)((char *)v16 + 16 * a5);
          }
          while (v40 <= v14);
          unsigned int v15 = (v14 & 0xFFFFFFFC) + 4;
        }
        else
        {
          unsigned int v15 = 0;
          __int32 v16 = this;
        }
        BOOL v41 = __OFSUB__(a4, v15);
        int v42 = a4 - v15;
        if (!((v42 < 0) ^ v41 | (v42 == 0)))
        {
          do
          {
            double v13 = v13 + (double)*(int *)v16;
            __int32 v16 = (cv *)((char *)v16 + 4 * a5);
            --v42;
          }
          while (v42);
        }
        *a3 = v13;
        break;
    }
    if (v12 < a5)
    {
      uint64_t v43 = v12;
      double v44 = (char *)this + 4 * v12 + 8;
      do
      {
        double v45 = (unsigned __int8 *)&a3[v43];
        float64x2_t v46 = *(float64x2_t *)v45;
        float64x2_t v47 = *((float64x2_t *)v45 + 1);
        if ((int)a4 >= 1)
        {
          int v48 = a4;
          unint64_t v49 = v44;
          do
          {
            uint64_t v50 = *(v49 - 1);
            v51.i64[0] = (int)v50;
            v51.i64[1] = SHIDWORD(v50);
            float64x2_t v46 = vaddq_f64(v46, vcvtq_f64_s64(v51));
            v51.i64[0] = (int)*v49;
            v51.i64[1] = (int)HIDWORD(*v49);
            float64x2_t v47 = vaddq_f64(v47, vcvtq_f64_s64(v51));
            unint64_t v49 = (void *)((char *)v49 + 4 * a5);
            --v48;
          }
          while (v48);
        }
        *(float64x2_t *)double v45 = v46;
        *((float64x2_t *)v45 + 1) = v47;
        v43 += 4;
        v44 += 16;
      }
      while (v43 < a5);
    }
  }
  return a4;
}

unint64_t cv::sum32f(float32x2_t *this, const float *a2, double *a3, unint64_t a4, int a5)
{
  if (a2)
  {
    if (a5 == 1)
    {
      double v15 = *a3;
      if ((int)a4 < 1)
      {
        a4 = 0;
      }
      else
      {
        uint64_t v16 = a4;
        a4 = 0;
        do
        {
          int v17 = *(unsigned __int8 *)a2;
          a2 = (const float *)((char *)a2 + 1);
          if (v17)
          {
            double v15 = v15 + this->f32[0];
            a4 = (a4 + 1);
          }
          this = (float32x2_t *)((char *)this + 4);
          --v16;
        }
        while (v16);
      }
      *a3 = v15;
    }
    else if (a5 == 3)
    {
      float64x2_t v5 = *(float64x2_t *)a3;
      double v6 = a3[2];
      if ((int)a4 < 1)
      {
        a4 = 0;
      }
      else
      {
        uint64_t v7 = a4;
        uint64_t v8 = (float *)&this[1];
        a4 = 0;
        do
        {
          int v9 = *(unsigned __int8 *)a2;
          a2 = (const float *)((char *)a2 + 1);
          if (v9)
          {
            float64x2_t v5 = vaddq_f64(v5, vcvtq_f64_f32(*(float32x2_t *)(v8 - 2)));
            double v6 = v6 + *v8;
            a4 = (a4 + 1);
          }
          v8 += 3;
          --v7;
        }
        while (v7);
      }
      *(float64x2_t *)a3 = v5;
      a3[2] = v6;
    }
    else if ((int)a4 < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v19 = 4 * a5;
      uint64_t v20 = this + 1;
      uint64_t v21 = a4;
      a4 = 0;
      do
      {
        if (*((unsigned char *)a2 + v18))
        {
          if (a5 >= 4)
          {
            uint64_t v22 = 0;
            uint64_t v23 = (float64x2_t *)(a3 + 2);
            uint64_t v24 = v20;
            do
            {
              v23[-1] = vaddq_f64(v23[-1], vcvtq_f64_f32(v24[-1]));
              float32x2_t v25 = *v24;
              v24 += 2;
              float64x2_t *v23 = vaddq_f64(*v23, vcvtq_f64_f32(v25));
              v23 += 2;
              v22 += 4;
            }
            while (v22 <= a5 - 4);
            uint64_t v22 = v22;
          }
          else
          {
            uint64_t v22 = 0;
          }
          if ((int)v22 < a5)
          {
            do
            {
              a3[v22] = a3[v22] + this->f32[v22];
              ++v22;
            }
            while (a5 != v22);
          }
          a4 = (a4 + 1);
        }
        ++v18;
        uint64_t v20 = (float32x2_t *)((char *)v20 + v19);
        this = (float32x2_t *)((char *)this + v19);
      }
      while (v18 != v21);
    }
  }
  else
  {
    if (a5 <= 0) {
      int v10 = -(-a5 & 3);
    }
    else {
      int v10 = a5 & 3;
    }
    switch(v10)
    {
      case 3:
        float64x2_t v26 = *(float64x2_t *)a3;
        double v27 = a3[2];
        if ((int)a4 >= 1)
        {
          int64x2_t v28 = (float *)&this[1];
          int v29 = a4;
          do
          {
            float64x2_t v26 = vaddq_f64(v26, vcvtq_f64_f32(*(float32x2_t *)(v28 - 2)));
            double v27 = v27 + *v28;
            v28 += a5;
            --v29;
          }
          while (v29);
        }
        *(float64x2_t *)a3 = v26;
        a3[2] = v27;
        break;
      case 2:
        float64x2_t v30 = *(float64x2_t *)a3;
        if ((int)a4 >= 1)
        {
          int v31 = a4;
          __int32 v32 = this;
          do
          {
            float64x2_t v30 = vaddq_f64(v30, vcvtq_f64_f32(*v32));
            __int32 v32 = (float32x2_t *)((char *)v32 + 4 * a5);
            --v31;
          }
          while (v31);
        }
        *(float64x2_t *)a3 = v30;
        break;
      case 1:
        double v11 = *a3;
        int v12 = a4 - 4;
        if ((int)a4 >= 4)
        {
          int v33 = 0;
          int v14 = (float *)this;
          do
          {
            double v11 = v11 + (float)((float)((float)(*v14 + v14[a5]) + v14[2 * a5]) + v14[3 * a5]);
            v33 += 4;
            v14 += 4 * a5;
          }
          while (v33 <= v12);
          unsigned int v13 = (v12 & 0xFFFFFFFC) + 4;
        }
        else
        {
          unsigned int v13 = 0;
          int v14 = (float *)this;
        }
        BOOL v34 = __OFSUB__(a4, v13);
        int v35 = a4 - v13;
        if (!((v35 < 0) ^ v34 | (v35 == 0)))
        {
          do
          {
            double v11 = v11 + *v14;
            v14 += a5;
            --v35;
          }
          while (v35);
        }
        *a3 = v11;
        break;
    }
    if (v10 < a5)
    {
      uint64_t v36 = v10;
      int v37 = (float32x2_t *)((char *)this + 4 * v10 + 8);
      do
      {
        BOOL v38 = (unsigned __int8 *)&a3[v36];
        float64x2_t v39 = *(float64x2_t *)v38;
        float64x2_t v40 = *((float64x2_t *)v38 + 1);
        if ((int)a4 >= 1)
        {
          int v41 = a4;
          int v42 = v37;
          do
          {
            float64x2_t v39 = vaddq_f64(v39, vcvtq_f64_f32(v42[-1]));
            float64x2_t v40 = vaddq_f64(v40, vcvtq_f64_f32(*v42));
            int v42 = (float32x2_t *)((char *)v42 + 4 * a5);
            --v41;
          }
          while (v41);
        }
        *(float64x2_t *)BOOL v38 = v39;
        *((float64x2_t *)v38 + 1) = v40;
        v36 += 4;
        v37 += 2;
      }
      while (v36 < a5);
    }
  }
  return a4;
}

unint64_t cv::sum64f(float64x2_t *this, const double *a2, double *a3, unint64_t a4, int a5)
{
  if (a2)
  {
    if (a5 == 1)
    {
      double v15 = *a3;
      if ((int)a4 < 1)
      {
        a4 = 0;
      }
      else
      {
        uint64_t v16 = a4;
        a4 = 0;
        do
        {
          int v17 = *(unsigned __int8 *)a2;
          a2 = (const double *)((char *)a2 + 1);
          if (v17)
          {
            double v15 = v15 + this->f64[0];
            a4 = (a4 + 1);
          }
          this = (float64x2_t *)((char *)this + 8);
          --v16;
        }
        while (v16);
      }
      *a3 = v15;
    }
    else if (a5 == 3)
    {
      float64x2_t v5 = *(float64x2_t *)a3;
      double v6 = a3[2];
      if ((int)a4 < 1)
      {
        a4 = 0;
      }
      else
      {
        uint64_t v7 = a4;
        f64 = this[1].f64;
        a4 = 0;
        do
        {
          int v9 = *(unsigned __int8 *)a2;
          a2 = (const double *)((char *)a2 + 1);
          if (v9)
          {
            float64x2_t v5 = vaddq_f64(v5, *(float64x2_t *)(f64 - 2));
            double v6 = v6 + *f64;
            a4 = (a4 + 1);
          }
          f64 += 3;
          --v7;
        }
        while (v7);
      }
      *(float64x2_t *)a3 = v5;
      a3[2] = v6;
    }
    else if ((int)a4 < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v19 = a4;
      a4 = 0;
      do
      {
        if (*((unsigned char *)a2 + v18))
        {
          if (a5 >= 4)
          {
            unint64_t v21 = 0;
            uint64_t v20 = 0;
            do
            {
              uint64_t v22 = (float64x2_t *)&a3[v21 / 8];
              float64x2_t v23 = *(float64x2_t *)&a3[v21 / 8 + 2];
              *uint64_t v22 = vaddq_f64(*(float64x2_t *)&a3[v21 / 8], this[v21 / 0x10]);
              v22[1] = vaddq_f64(v23, this[v21 / 0x10 + 1]);
              v20 += 4;
              v21 += 32;
            }
            while (v20 <= a5 - 4);
            uint64_t v20 = v20;
          }
          else
          {
            uint64_t v20 = 0;
          }
          if ((int)v20 < a5)
          {
            do
            {
              a3[v20] = this->f64[v20] + a3[v20];
              ++v20;
            }
            while (a5 != v20);
          }
          a4 = (a4 + 1);
        }
        ++v18;
        this = (float64x2_t *)((char *)this + 8 * a5);
      }
      while (v18 != v19);
    }
  }
  else
  {
    if (a5 <= 0) {
      int v10 = -(-a5 & 3);
    }
    else {
      int v10 = a5 & 3;
    }
    switch(v10)
    {
      case 3:
        float64x2_t v24 = *(float64x2_t *)a3;
        double v25 = a3[2];
        if ((int)a4 >= 1)
        {
          float64x2_t v26 = this[1].f64;
          int v27 = a4;
          do
          {
            float64x2_t v24 = vaddq_f64(v24, *(float64x2_t *)(v26 - 2));
            double v25 = v25 + *v26;
            v26 += a5;
            --v27;
          }
          while (v27);
        }
        *(float64x2_t *)a3 = v24;
        a3[2] = v25;
        break;
      case 2:
        float64x2_t v28 = *(float64x2_t *)a3;
        if ((int)a4 >= 1)
        {
          int v29 = a4;
          float64x2_t v30 = this;
          do
          {
            float64x2_t v28 = vaddq_f64(v28, *v30);
            float64x2_t v30 = (float64x2_t *)((char *)v30 + 8 * a5);
            --v29;
          }
          while (v29);
        }
        *(float64x2_t *)a3 = v28;
        break;
      case 1:
        double v11 = *a3;
        int v12 = a4 - 4;
        if ((int)a4 >= 4)
        {
          int v31 = 0;
          int v14 = (double *)this;
          do
          {
            double v11 = v11 + *v14 + v14[a5] + v14[2 * a5] + v14[3 * a5];
            v31 += 4;
            v14 += 4 * a5;
          }
          while (v31 <= v12);
          unsigned int v13 = (v12 & 0xFFFFFFFC) + 4;
        }
        else
        {
          unsigned int v13 = 0;
          int v14 = (double *)this;
        }
        BOOL v32 = __OFSUB__(a4, v13);
        int v33 = a4 - v13;
        if (!((v33 < 0) ^ v32 | (v33 == 0)))
        {
          do
          {
            double v11 = v11 + *v14;
            v14 += a5;
            --v33;
          }
          while (v33);
        }
        *a3 = v11;
        break;
    }
    if (v10 < a5)
    {
      uint64_t v34 = v10;
      int v35 = (float64x2_t *)((char *)this + 8 * v10 + 16);
      do
      {
        uint64_t v36 = (unsigned __int8 *)&a3[v34];
        float64x2_t v37 = *(float64x2_t *)v36;
        float64x2_t v38 = *((float64x2_t *)v36 + 1);
        if ((int)a4 >= 1)
        {
          int v39 = a4;
          float64x2_t v40 = v35;
          do
          {
            float64x2_t v37 = vaddq_f64(v37, v40[-1]);
            float64x2_t v38 = vaddq_f64(v38, *v40);
            float64x2_t v40 = (float64x2_t *)((char *)v40 + 8 * a5);
            --v39;
          }
          while (v39);
        }
        *(float64x2_t *)uint64_t v36 = v37;
        *((float64x2_t *)v36 + 1) = v38;
        v34 += 4;
        v35 += 2;
      }
      while (v34 < a5);
    }
  }
  return a4;
}

unsigned __int8 *cv::countNonZero8u(unsigned __int8 *this, const unsigned __int8 *a2)
{
  if ((int)a2 < 1) {
    return 0;
  }
  uint64_t v2 = this;
  LODWORD(this) = 0;
  uint64_t v3 = a2;
  do
  {
    if (*v2++) {
      this = (unsigned __int8 *)(this + 1);
    }
    else {
      this = (unsigned __int8 *)this;
    }
    --v3;
  }
  while (v3);
  return this;
}

uint64_t cv::countNonZero16u(cv *this, const unsigned __int16 *a2)
{
  unint64_t v3 = (a2 - 4);
  if ((int)a2 >= 4)
  {
    unint64_t v6 = 0;
    LODWORD(result) = 0;
    uint64_t v7 = this;
    do
    {
      int16x4_t v8 = *(int16x4_t *)v7;
      uint64_t v7 = (cv *)((char *)v7 + 8);
      int16x4_t v9 = (int16x4_t)vbic_s8((int8x8_t)0x8000400020001, (int8x8_t)vceqz_s16(v8));
      v9.i32[0] = vaddv_s16(v9) & 0xF;
      uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
      v10.i16[0] = vaddlv_u8(v10);
      uint64_t result = (result + v10.i32[0]);
      v6 += 4;
    }
    while (v6 <= v3);
    int v4 = (v3 & 0xFFFFFFFC) + 4;
  }
  else
  {
    int v4 = 0;
    uint64_t result = 0;
  }
  if (v4 < (int)a2)
  {
    double v11 = (unsigned __int16 *)((char *)this + 2 * v4);
    do
    {
      if (*v11++) {
        uint64_t result = (result + 1);
      }
      else {
        uint64_t result = result;
      }
      ++v4;
    }
    while (v4 < (int)a2);
  }
  return result;
}

uint64_t cv::countNonZero32s(cv *this, const int *a2)
{
  unint64_t v3 = (a2 - 4);
  if ((int)a2 >= 4)
  {
    unint64_t v6 = 0;
    LODWORD(result) = 0;
    uint64_t v7 = this;
    do
    {
      int32x4_t v8 = *(int32x4_t *)v7;
      uint64_t v7 = (cv *)((char *)v7 + 16);
      int32x4_t v9 = (int32x4_t)vbicq_s8((int8x16_t)xmmword_225F31830, (int8x16_t)vceqzq_s32(v8));
      v9.i32[0] = vaddvq_s32(v9) & 0xF;
      *(int8x8_t *)v9.i8 = vcnt_s8(*(int8x8_t *)v9.i8);
      v9.i16[0] = vaddlv_u8(*(uint8x8_t *)v9.i8);
      uint64_t result = (result + v9.i32[0]);
      v6 += 4;
    }
    while (v6 <= v3);
    int v4 = (v3 & 0xFFFFFFFC) + 4;
  }
  else
  {
    int v4 = 0;
    uint64_t result = 0;
  }
  if (v4 < (int)a2)
  {
    uint8x8_t v10 = (_DWORD *)((char *)this + 4 * v4);
    do
    {
      if (*v10++) {
        uint64_t result = (result + 1);
      }
      else {
        uint64_t result = result;
      }
      ++v4;
    }
    while (v4 < (int)a2);
  }
  return result;
}

uint64_t cv::countNonZero32f(cv *this, const float *a2)
{
  unint64_t v3 = (a2 - 4);
  if ((int)a2 >= 4)
  {
    unint64_t v6 = 0;
    LODWORD(result) = 0;
    uint64_t v7 = this;
    do
    {
      float32x4_t v8 = *(float32x4_t *)v7;
      uint64_t v7 = (cv *)((char *)v7 + 16);
      int32x4_t v9 = (int32x4_t)vbicq_s8((int8x16_t)xmmword_225F31830, (int8x16_t)vceqzq_f32(v8));
      v9.i32[0] = vaddvq_s32(v9) & 0xF;
      *(int8x8_t *)v9.i8 = vcnt_s8(*(int8x8_t *)v9.i8);
      v9.i16[0] = vaddlv_u8(*(uint8x8_t *)v9.i8);
      uint64_t result = (result + v9.i32[0]);
      v6 += 4;
    }
    while (v6 <= v3);
    int v4 = (v3 & 0xFFFFFFFC) + 4;
  }
  else
  {
    int v4 = 0;
    uint64_t result = 0;
  }
  if (v4 < (int)a2)
  {
    uint8x8_t v10 = (float *)((char *)this + 4 * v4);
    do
    {
      float v11 = *v10++;
      if (v11 == 0.0) {
        uint64_t result = result;
      }
      else {
        uint64_t result = (result + 1);
      }
      ++v4;
    }
    while (v4 < (int)a2);
  }
  return result;
}

uint64_t cv::countNonZero64f(cv *this, const double *a2)
{
  unint64_t v3 = (a2 - 4);
  if ((int)a2 >= 4)
  {
    unint64_t v6 = 0;
    LODWORD(result) = 0;
    uint64_t v7 = this;
    do
    {
      float64x2_t v8 = *(float64x2_t *)v7;
      float64x2_t v9 = *((float64x2_t *)v7 + 1);
      uint64_t v7 = (cv *)((char *)v7 + 32);
      int32x4_t v10 = (int32x4_t)vbicq_s8((int8x16_t)xmmword_225F31830, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v8), (int32x4_t)vceqzq_f64(v9)));
      v10.i32[0] = vaddvq_s32(v10);
      *(int8x8_t *)v10.i8 = vcnt_s8(*(int8x8_t *)v10.i8);
      v10.i16[0] = vaddlv_u8(*(uint8x8_t *)v10.i8);
      uint64_t result = (result + v10.i32[0]);
      v6 += 4;
    }
    while (v6 <= v3);
    int v4 = (v3 & 0xFFFFFFFC) + 4;
  }
  else
  {
    int v4 = 0;
    uint64_t result = 0;
  }
  if (v4 < (int)a2)
  {
    float v11 = (double *)((char *)this + 8 * v4);
    do
    {
      double v12 = *v11++;
      if (v12 == 0.0) {
        uint64_t result = result;
      }
      else {
        uint64_t result = (result + 1);
      }
      ++v4;
    }
    while (v4 < (int)a2);
  }
  return result;
}

unsigned __int8 *cv::minMaxIdx_8u(unsigned __int8 *this, const unsigned __int8 *a2, unsigned __int8 *a3, int *a4, int *a5, unint64_t *a6, unint64_t *a7, unint64_t a8, unint64_t a9)
{
  int v9 = *(_DWORD *)a3;
  int v10 = *a4;
  unint64_t v11 = *(void *)a5;
  unint64_t v12 = *a6;
  if (a2)
  {
    if ((int)a7 >= 1)
    {
      uint64_t v13 = a7;
      do
      {
        int v15 = *this++;
        int v14 = v15;
        int v17 = *a2++;
        int v16 = v17;
        if (v9 >= v14) {
          int v18 = v14;
        }
        else {
          int v18 = v9;
        }
        if (v9 <= v14) {
          unint64_t v19 = v11;
        }
        else {
          unint64_t v19 = a8;
        }
        BOOL v21 = __OFSUB__(v10, v14);
        BOOL v20 = v10 - v14 < 0;
        if (v10 > v14) {
          int v14 = v10;
        }
        if (v20 != v21) {
          unint64_t v22 = a8;
        }
        else {
          unint64_t v22 = v12;
        }
        if (v16)
        {
          int v9 = v18;
          unint64_t v11 = v19;
          int v10 = v14;
          unint64_t v12 = v22;
        }
        ++a8;
        --v13;
      }
      while (v13);
    }
  }
  else if ((int)a7 >= 1)
  {
    uint64_t v23 = a7;
    do
    {
      int v25 = *this++;
      int v24 = v25;
      BOOL v28 = __OFSUB__(v9, v25);
      BOOL v26 = v9 == v25;
      BOOL v27 = v9 - v25 < 0;
      if (v9 >= v25) {
        int v9 = v24;
      }
      if (!(v27 ^ v28 | v26)) {
        unint64_t v11 = a8;
      }
      BOOL v30 = __OFSUB__(v10, v24);
      BOOL v29 = v10 - v24 < 0;
      if (v10 <= v24) {
        int v10 = v24;
      }
      if (v29 != v30) {
        unint64_t v12 = a8;
      }
      ++a8;
      --v23;
    }
    while (v23);
  }
  *(void *)a5 = v11;
  *a6 = v12;
  *(_DWORD *)a3 = v9;
  *a4 = v10;
  return this;
}

char *cv::minMaxIdx_8s(char *this, const signed __int8 *a2, unsigned __int8 *a3, int *a4, int *a5, unint64_t *a6, unint64_t *a7, unint64_t a8, unint64_t a9)
{
  int v9 = *(_DWORD *)a3;
  int v10 = *a4;
  unint64_t v11 = *(void *)a5;
  unint64_t v12 = *a6;
  if (a2)
  {
    if ((int)a7 >= 1)
    {
      uint64_t v13 = a7;
      do
      {
        int v15 = *this++;
        int v14 = v15;
        int v17 = *(unsigned __int8 *)a2++;
        int v16 = v17;
        if (v9 >= v14) {
          int v18 = v14;
        }
        else {
          int v18 = v9;
        }
        if (v9 <= v14) {
          unint64_t v19 = v11;
        }
        else {
          unint64_t v19 = a8;
        }
        BOOL v21 = __OFSUB__(v10, v14);
        BOOL v20 = v10 - v14 < 0;
        if (v10 > v14) {
          int v14 = v10;
        }
        if (v20 != v21) {
          unint64_t v22 = a8;
        }
        else {
          unint64_t v22 = v12;
        }
        if (v16)
        {
          int v9 = v18;
          unint64_t v11 = v19;
          int v10 = v14;
          unint64_t v12 = v22;
        }
        ++a8;
        --v13;
      }
      while (v13);
    }
  }
  else if ((int)a7 >= 1)
  {
    uint64_t v23 = a7;
    do
    {
      int v25 = *this++;
      int v24 = v25;
      BOOL v28 = __OFSUB__(v9, v25);
      BOOL v26 = v9 == v25;
      BOOL v27 = v9 - v25 < 0;
      if (v9 >= v25) {
        int v9 = v24;
      }
      if (!(v27 ^ v28 | v26)) {
        unint64_t v11 = a8;
      }
      BOOL v30 = __OFSUB__(v10, v24);
      BOOL v29 = v10 - v24 < 0;
      if (v10 <= v24) {
        int v10 = v24;
      }
      if (v29 != v30) {
        unint64_t v12 = a8;
      }
      ++a8;
      --v23;
    }
    while (v23);
  }
  *(void *)a5 = v11;
  *a6 = v12;
  *(_DWORD *)a3 = v9;
  *a4 = v10;
  return this;
}

unsigned __int16 *cv::minMaxIdx_16u(unsigned __int16 *this, const unsigned __int16 *a2, unsigned __int8 *a3, int *a4, int *a5, unint64_t *a6, unint64_t *a7, unint64_t a8, unint64_t a9)
{
  int v9 = *(_DWORD *)a3;
  int v10 = *a4;
  unint64_t v11 = *(void *)a5;
  unint64_t v12 = *a6;
  if (a2)
  {
    if ((int)a7 >= 1)
    {
      uint64_t v13 = a7;
      do
      {
        int v15 = *this++;
        int v14 = v15;
        int v17 = *(unsigned __int8 *)a2;
        a2 = (const unsigned __int16 *)((char *)a2 + 1);
        int v16 = v17;
        if (v9 >= v14) {
          int v18 = v14;
        }
        else {
          int v18 = v9;
        }
        if (v9 <= v14) {
          unint64_t v19 = v11;
        }
        else {
          unint64_t v19 = a8;
        }
        BOOL v21 = __OFSUB__(v10, v14);
        BOOL v20 = v10 - v14 < 0;
        if (v10 > v14) {
          int v14 = v10;
        }
        if (v20 != v21) {
          unint64_t v22 = a8;
        }
        else {
          unint64_t v22 = v12;
        }
        if (v16)
        {
          int v9 = v18;
          unint64_t v11 = v19;
          int v10 = v14;
          unint64_t v12 = v22;
        }
        ++a8;
        --v13;
      }
      while (v13);
    }
  }
  else if ((int)a7 >= 1)
  {
    uint64_t v23 = a7;
    do
    {
      int v25 = *this++;
      int v24 = v25;
      BOOL v28 = __OFSUB__(v9, v25);
      BOOL v26 = v9 == v25;
      BOOL v27 = v9 - v25 < 0;
      if (v9 >= v25) {
        int v9 = v24;
      }
      if (!(v27 ^ v28 | v26)) {
        unint64_t v11 = a8;
      }
      BOOL v30 = __OFSUB__(v10, v24);
      BOOL v29 = v10 - v24 < 0;
      if (v10 <= v24) {
        int v10 = v24;
      }
      if (v29 != v30) {
        unint64_t v12 = a8;
      }
      ++a8;
      --v23;
    }
    while (v23);
  }
  *(void *)a5 = v11;
  *a6 = v12;
  *(_DWORD *)a3 = v9;
  *a4 = v10;
  return this;
}

__int16 *cv::minMaxIdx_16s(__int16 *this, const __int16 *a2, unsigned __int8 *a3, int *a4, int *a5, unint64_t *a6, unint64_t *a7, unint64_t a8, unint64_t a9)
{
  int v9 = *(_DWORD *)a3;
  int v10 = *a4;
  unint64_t v11 = *(void *)a5;
  unint64_t v12 = *a6;
  if (a2)
  {
    if ((int)a7 >= 1)
    {
      uint64_t v13 = a7;
      do
      {
        int v15 = *this++;
        int v14 = v15;
        int v17 = *(unsigned __int8 *)a2;
        a2 = (const __int16 *)((char *)a2 + 1);
        int v16 = v17;
        if (v9 >= v14) {
          int v18 = v14;
        }
        else {
          int v18 = v9;
        }
        if (v9 <= v14) {
          unint64_t v19 = v11;
        }
        else {
          unint64_t v19 = a8;
        }
        BOOL v21 = __OFSUB__(v10, v14);
        BOOL v20 = v10 - v14 < 0;
        if (v10 > v14) {
          int v14 = v10;
        }
        if (v20 != v21) {
          unint64_t v22 = a8;
        }
        else {
          unint64_t v22 = v12;
        }
        if (v16)
        {
          int v9 = v18;
          unint64_t v11 = v19;
          int v10 = v14;
          unint64_t v12 = v22;
        }
        ++a8;
        --v13;
      }
      while (v13);
    }
  }
  else if ((int)a7 >= 1)
  {
    uint64_t v23 = a7;
    do
    {
      int v25 = *this++;
      int v24 = v25;
      BOOL v28 = __OFSUB__(v9, v25);
      BOOL v26 = v9 == v25;
      BOOL v27 = v9 - v25 < 0;
      if (v9 >= v25) {
        int v9 = v24;
      }
      if (!(v27 ^ v28 | v26)) {
        unint64_t v11 = a8;
      }
      BOOL v30 = __OFSUB__(v10, v24);
      BOOL v29 = v10 - v24 < 0;
      if (v10 <= v24) {
        int v10 = v24;
      }
      if (v29 != v30) {
        unint64_t v12 = a8;
      }
      ++a8;
      --v23;
    }
    while (v23);
  }
  *(void *)a5 = v11;
  *a6 = v12;
  *(_DWORD *)a3 = v9;
  *a4 = v10;
  return this;
}

int *cv::minMaxIdx_32s(int *this, const int *a2, unsigned __int8 *a3, int *a4, int *a5, unint64_t *a6, unint64_t *a7, unint64_t a8, unint64_t a9)
{
  int v9 = *(_DWORD *)a3;
  int v10 = *a4;
  unint64_t v11 = *(void *)a5;
  unint64_t v12 = *a6;
  if (a2)
  {
    if ((int)a7 >= 1)
    {
      uint64_t v13 = a7;
      do
      {
        int v15 = *this++;
        int v14 = v15;
        int v16 = *(unsigned __int8 *)a2;
        a2 = (const int *)((char *)a2 + 1);
        BOOL v17 = v16 != 0;
        if (v16 != 0 && v14 < v9)
        {
          int v9 = v14;
          unint64_t v11 = a8;
        }
        if (v17 && v14 > v10)
        {
          int v10 = v14;
          unint64_t v12 = a8;
        }
        ++a8;
        --v13;
      }
      while (v13);
    }
  }
  else if ((int)a7 >= 1)
  {
    uint64_t v18 = a7;
    do
    {
      int v20 = *this++;
      int v19 = v20;
      if (v20 < v9)
      {
        int v9 = v19;
        unint64_t v11 = a8;
      }
      if (v19 > v10)
      {
        int v10 = v19;
        unint64_t v12 = a8;
      }
      ++a8;
      --v18;
    }
    while (v18);
  }
  *(void *)a5 = v11;
  *a6 = v12;
  *(_DWORD *)a3 = v9;
  *a4 = v10;
  return this;
}

float *cv::minMaxIdx_32f(float *this, const float *a2, float *a3, float *a4, float *a5, unint64_t *a6, unint64_t *a7, unint64_t a8, unint64_t a9)
{
  float v9 = *a3;
  float v10 = *a4;
  unint64_t v11 = *(void *)a5;
  unint64_t v12 = *a6;
  if (a2)
  {
    if ((int)a7 >= 1)
    {
      uint64_t v13 = a7;
      do
      {
        float v14 = *this++;
        float v15 = v14;
        int v16 = *(unsigned __int8 *)a2;
        a2 = (const float *)((char *)a2 + 1);
        BOOL v17 = v16 != 0;
        if (v16 != 0 && v15 < v9)
        {
          float v9 = v15;
          unint64_t v11 = a8;
        }
        if (v17 && v15 > v10)
        {
          float v10 = v15;
          unint64_t v12 = a8;
        }
        ++a8;
        --v13;
      }
      while (v13);
    }
  }
  else if ((int)a7 >= 1)
  {
    uint64_t v18 = a7;
    do
    {
      float v19 = *this++;
      float v20 = v19;
      if (v19 < v9)
      {
        float v9 = v20;
        unint64_t v11 = a8;
      }
      if (v20 > v10)
      {
        float v10 = v20;
        unint64_t v12 = a8;
      }
      ++a8;
      --v18;
    }
    while (v18);
  }
  *(void *)a5 = v11;
  *a6 = v12;
  *a3 = v9;
  *a4 = v10;
  return this;
}

double *cv::minMaxIdx_64f(double *this, const double *a2, double *a3, double *a4, double *a5, unint64_t *a6, unint64_t *a7, unint64_t a8, unint64_t a9)
{
  double v9 = *a3;
  double v10 = *a4;
  unint64_t v11 = *(void *)a5;
  unint64_t v12 = *a6;
  if (a2)
  {
    if ((int)a7 >= 1)
    {
      uint64_t v13 = a7;
      do
      {
        double v14 = *this++;
        double v15 = v14;
        LODWORD(v14) = *(unsigned __int8 *)a2;
        a2 = (const double *)((char *)a2 + 1);
        BOOL v16 = LODWORD(v14) != 0;
        if (LODWORD(v14) != 0 && v15 < v9)
        {
          double v9 = v15;
          unint64_t v11 = a8;
        }
        if (v16 && v15 > v10)
        {
          double v10 = v15;
          unint64_t v12 = a8;
        }
        ++a8;
        --v13;
      }
      while (v13);
    }
  }
  else if ((int)a7 >= 1)
  {
    uint64_t v17 = a7;
    do
    {
      double v18 = *this++;
      double v19 = v18;
      if (v18 < v9)
      {
        double v9 = v19;
        unint64_t v11 = a8;
      }
      if (v19 > v10)
      {
        double v10 = v19;
        unint64_t v12 = a8;
      }
      ++a8;
      --v17;
    }
    while (v17);
  }
  *(void *)a5 = v11;
  *a6 = v12;
  *a3 = v9;
  *a4 = v10;
  return this;
}

uint64_t cv::LU(cv *this, unint64_t a2, int a3, int *a4, unint64_t a5, int a6)
{
  unsigned int v6 = a3 - 1;
  if (a3 < 1) {
    return 1;
  }
  uint64_t v7 = 0;
  unint64_t v8 = a2 >> 2;
  unint64_t v9 = a5 >> 2;
  unint64_t v10 = a3;
  if (a4) {
    BOOL v11 = a6 < 1;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = v11;
  uint64_t v13 = 4 * v8;
  uint64_t v14 = 4 * v8 + 4;
  uint64_t v15 = 4 * v9;
  uint64_t v16 = 1;
  uint64_t v17 = a4;
  double v18 = (float *)((char *)this + 4 * v8);
  double v19 = this;
  unint64_t v20 = v10;
  uint64_t v21 = 1;
  unint64_t v22 = (char *)&a4[v9];
  do
  {
    unint64_t v23 = v7 + 1;
    if (v7 + 1 >= v10)
    {
      int v26 = v7;
    }
    else
    {
      int v24 = v18;
      uint64_t v25 = v16;
      int v26 = v7;
      do
      {
        if (fabsf(*v24) > fabsf(*((float *)this + v7 + v8 * v26))) {
          int v26 = v25;
        }
        ++v25;
        int v24 = (float *)((char *)v24 + v13);
      }
      while (v10 != v25);
    }
    unint64_t v27 = v8 * v26;
    if (fabsf(*((float *)this + v27 + v7)) < 0.00000011921) {
      return 0;
    }
    if (v7 != v26)
    {
      BOOL v28 = (_DWORD *)((char *)this + 4 * v7 + 4 * v27);
      BOOL v29 = v19;
      unint64_t v30 = v20;
      do
      {
        int v31 = *(_DWORD *)v29;
        *(_DWORD *)BOOL v29 = *v28;
        BOOL v29 = (cv *)((char *)v29 + 4);
        *v28++ = v31;
        --v30;
      }
      while (v30);
      if ((v12 & 1) == 0)
      {
        BOOL v32 = (int *)((char *)a4 + v15 * v26);
        int v33 = v17;
        uint64_t v34 = a6;
        do
        {
          int v35 = *v33;
          *v33++ = *v32;
          *v32++ = v35;
          --v34;
        }
        while (v34);
      }
      uint64_t v21 = -(int)v21;
    }
    uint64_t v36 = v7 * v8 + v7;
    float v37 = -1.0 / *((float *)this + v36);
    if (v23 < v10)
    {
      float64x2_t v38 = v22;
      int v39 = v18;
      uint64_t v40 = v16;
      do
      {
        float v41 = v37 * *((float *)this + v7 + v40 * v8);
        uint64_t v42 = 1;
        do
        {
          v39[v42] = v39[v42] + (float)(v41 * *((float *)v19 + v42));
          ++v42;
        }
        while (v20 != v42);
        if ((v12 & 1) == 0)
        {
          uint64_t v43 = 0;
          do
          {
            *(float *)&v38[v43 * 4] = *(float *)&v38[v43 * 4] + (float)(v41 * *(float *)&v17[v43]);
            ++v43;
          }
          while (a6 != v43);
        }
        ++v40;
        int v39 = (float *)((char *)v39 + v13);
        v38 += v15;
      }
      while (v40 != v10);
    }
    *((float *)this + v36) = -v37;
    ++v16;
    double v18 = (float *)((char *)v18 + v14);
    --v20;
    double v19 = (cv *)((char *)v19 + v14);
    uint64_t v17 = (int *)((char *)v17 + v15);
    v22 += v15;
    ++v7;
  }
  while (v23 != v10);
  if (a4)
  {
    uint64_t v44 = 0;
    double v45 = (float *)&a4[v9 * v10];
    unint64_t v46 = v8 + 1;
    uint64_t v47 = v10;
    do
    {
      if (a6 >= 1)
      {
        uint64_t v48 = 0;
        unint64_t v49 = (v47 - 1) * v9;
        uint64_t v50 = v45;
        do
        {
          float v51 = *(float *)&a4[v48 + v49];
          if (v47 < (uint64_t)v10)
          {
            unint64_t v52 = v50;
            uint64_t v53 = v44;
            do
            {
              float v51 = v51 - (float)(*(float *)((char *)this + 4 * v10 + 4 * v53 + v13 * v6) * *v52);
              unint64_t v52 = (float *)((char *)v52 + v15);
              ++v53;
            }
            while (v53);
          }
          *(float *)&a4[v48 + v49] = v51 * *((float *)this + (v47 - 1) * v46);
          ++v48;
          ++v50;
        }
        while (v48 != a6);
      }
      --v44;
      v45 -= v9;
      --v6;
      BOOL v11 = v47-- < 2;
    }
    while (!v11);
  }
  return v21;
}

uint64_t cv::LU(cv *this, unint64_t a2, unsigned int a3, uint64_t *a4, unint64_t a5, int a6)
{
  unsigned int v6 = a3 - 1;
  if ((int)a3 < 1) {
    return 1;
  }
  uint64_t v7 = 0;
  unint64_t v8 = a2 >> 3;
  unint64_t v9 = a5 >> 3;
  if (a4) {
    BOOL v10 = a6 < 1;
  }
  else {
    BOOL v10 = 1;
  }
  char v11 = v10;
  uint64_t v12 = 8 * v8;
  uint64_t v13 = 8 * v8 + 8;
  uint64_t v14 = 1;
  uint64_t v15 = 8 * v9;
  uint64_t v16 = a4;
  uint64_t v17 = this;
  uint64_t v18 = a3;
  uint64_t v19 = 1;
  unint64_t v20 = (double *)((char *)this + 8 * v8);
  uint64_t v21 = (char *)&a4[v9];
  do
  {
    unint64_t v22 = v7 + 1;
    if (v7 + 1 >= (unint64_t)a3)
    {
      int v25 = v7;
    }
    else
    {
      unint64_t v23 = v20;
      uint64_t v24 = v14;
      int v25 = v7;
      do
      {
        if (fabs(*v23) > fabs(*((double *)this + v7 + v8 * v25))) {
          int v25 = v24;
        }
        ++v24;
        unint64_t v23 = (double *)((char *)v23 + v12);
      }
      while (a3 != v24);
    }
    unint64_t v26 = v8 * v25;
    if (fabs(*((double *)this + v26 + v7)) < 2.22044605e-16) {
      return 0;
    }
    if (v7 != v25)
    {
      unint64_t v27 = (void *)((char *)this + 8 * v7 + 8 * v26);
      BOOL v28 = v17;
      uint64_t v29 = v18;
      do
      {
        uint64_t v30 = *(void *)v28;
        *(void *)BOOL v28 = *v27;
        BOOL v28 = (cv *)((char *)v28 + 8);
        *v27++ = v30;
        --v29;
      }
      while (v29);
      if ((v11 & 1) == 0)
      {
        int v31 = (uint64_t *)((char *)a4 + v15 * v25);
        BOOL v32 = v16;
        uint64_t v33 = a6;
        do
        {
          uint64_t v34 = *v32;
          *v32++ = *v31;
          *v31++ = v34;
          --v33;
        }
        while (v33);
      }
      uint64_t v19 = -(int)v19;
    }
    uint64_t v35 = v7 * v8 + v7;
    double v36 = -1.0 / *((double *)this + v35);
    if (v22 < a3)
    {
      float v37 = v21;
      float64x2_t v38 = v20;
      uint64_t v39 = v14;
      do
      {
        double v40 = v36 * *((double *)this + v7 + v39 * v8);
        uint64_t v41 = 1;
        do
        {
          v38[v41] = v38[v41] + v40 * *((double *)v17 + v41);
          ++v41;
        }
        while (v18 != v41);
        if ((v11 & 1) == 0)
        {
          uint64_t v42 = 0;
          do
          {
            *(double *)&v37[v42 * 8] = *(double *)&v37[v42 * 8] + v40 * *(double *)&v16[v42];
            ++v42;
          }
          while (a6 != v42);
        }
        ++v39;
        float64x2_t v38 = (double *)((char *)v38 + v12);
        v37 += v15;
      }
      while (v39 != a3);
    }
    *((double *)this + v35) = -v36;
    ++v14;
    unint64_t v20 = (double *)((char *)v20 + v13);
    --v18;
    uint64_t v17 = (cv *)((char *)v17 + v13);
    uint64_t v16 = (uint64_t *)((char *)v16 + v15);
    v21 += v15;
    ++v7;
  }
  while (v22 != a3);
  if (a4)
  {
    uint64_t v43 = 0;
    uint64_t v44 = (double *)&a4[v9 * a3];
    unint64_t v45 = v8 + 1;
    uint64_t v46 = a3;
    do
    {
      if (a6 >= 1)
      {
        uint64_t v47 = 0;
        unint64_t v48 = (v46 - 1) * v9;
        unint64_t v49 = v44;
        do
        {
          double v50 = *(double *)&a4[v47 + v48];
          if (v46 < a3)
          {
            float v51 = v49;
            uint64_t v52 = v43;
            do
            {
              double v50 = v50 - *(double *)((char *)this + 8 * a3 + 8 * v52 + v12 * v6) * *v51;
              float v51 = (double *)((char *)v51 + v15);
              ++v52;
            }
            while (v52);
          }
          *(double *)&a4[v47 + v48] = v50 * *((double *)this + (v46 - 1) * v45);
          ++v47;
          ++v49;
        }
        while (v47 != a6);
      }
      --v43;
      v44 -= v9;
      --v6;
      BOOL v10 = v46-- < 2;
    }
    while (!v10);
  }
  return v19;
}

BOOL cv::Cholesky(cv *this, unint64_t a2, int a3, float *a4, unint64_t a5, int a6)
{
  if (a3 < 1)
  {
    return 1;
  }
  else
  {
    unint64_t v6 = 0;
    BOOL v7 = 0;
    unint64_t v8 = a2 >> 2;
    unint64_t v9 = a5 >> 2;
    unint64_t v10 = (a2 >> 2) + 1;
    unint64_t v11 = 4 * (a2 >> 2);
    uint64_t v12 = this;
    while (1)
    {
      unint64_t v13 = v6 * v8;
      if (v6)
      {
        uint64_t v14 = 0;
        uint64_t v15 = this;
        do
        {
          double v16 = *((float *)this + v14 + v13);
          if (v14)
          {
            for (uint64_t i = 0; i != v14; ++i)
              double v16 = v16 - (float)(*((float *)v12 + i) * *((float *)v15 + i));
          }
          float v18 = v16 * *((float *)this + v14 * v10);
          *((float *)this + v14 + v13) = v18;
          ++v14;
          uint64_t v15 = (cv *)((char *)v15 + v11);
        }
        while (v14 != v6);
        uint64_t v19 = 0;
        unint64_t v20 = (float *)((char *)this + 4 * v13 + 4 * v6);
        double v21 = *v20;
        do
        {
          double v21 = v21 - *((float *)v12 + v19) * *((float *)v12 + v19);
          ++v19;
        }
        while (v6 != v19);
      }
      else
      {
        unint64_t v20 = (float *)((char *)this + 4 * v13);
        double v21 = *v20;
      }
      if (v21 < 0.00000011920929) {
        break;
      }
      float v22 = 1.0 / sqrt(v21);
      *unint64_t v20 = v22;
      ++v6;
      uint64_t v12 = (cv *)((char *)v12 + v11);
      BOOL v7 = v6 >= a3;
      if (v6 == a3)
      {
        BOOL v7 = 1;
        uint64_t v23 = (a3 - 1);
        if (a4)
        {
          uint64_t v24 = 0;
          int v25 = this;
          do
          {
            if (a6 >= 1)
            {
              uint64_t v26 = 0;
              unint64_t v27 = v24 * v9;
              BOOL v28 = a4;
              do
              {
                double v29 = a4[v26 + v27];
                if (v24)
                {
                  uint64_t v30 = 0;
                  int v31 = v28;
                  do
                  {
                    double v29 = v29 - (float)(*((float *)v25 + v30++) * *v31);
                    v31 += v9;
                  }
                  while (v24 != v30);
                }
                float v32 = v29 * *((float *)this + v24 * v10);
                a4[v26 + v27] = v32;
                ++v26;
                ++v28;
              }
              while (v26 != a6);
            }
            ++v24;
            int v25 = (cv *)((char *)v25 + v11);
          }
          while (v24 != a3);
          uint64_t v33 = a3 - 1;
          uint64_t v34 = (a3 - 1);
          do
          {
            if (a6 >= 1)
            {
              uint64_t v35 = 0;
              unint64_t v36 = v34 * v9;
              do
              {
                double v37 = a4[v35 + v36];
                if (v34 < v23)
                {
                  uint64_t v38 = v33;
                  do
                  {
                    double v37 = v37
                        - (float)(*((float *)this + v34 + v8 * v38) * a4[v35 + v9 * v38]);
                    --v38;
                  }
                  while (v34 < v38);
                }
                float v39 = v37 * *((float *)this + v34 * v10);
                a4[v35 + v36] = v39;
                ++v35;
              }
              while (v35 != a6);
            }
          }
          while (v34-- > 0);
          return 1;
        }
        return v7;
      }
    }
  }
  return v7;
}

BOOL cv::Cholesky(cv *this, unint64_t a2, int a3, double *a4, unint64_t a5, int a6)
{
  if (a3 < 1)
  {
    return 1;
  }
  else
  {
    unint64_t v6 = 0;
    BOOL v7 = 0;
    unint64_t v8 = a2 >> 3;
    unint64_t v9 = a5 >> 3;
    unint64_t v10 = (a2 >> 3) + 1;
    unint64_t v11 = 8 * (a2 >> 3);
    uint64_t v12 = this;
    while (1)
    {
      unint64_t v13 = v6 * v8;
      if (v6)
      {
        uint64_t v14 = 0;
        uint64_t v15 = this;
        do
        {
          double v16 = *((double *)this + v14 + v13);
          if (v14)
          {
            for (uint64_t i = 0; i != v14; ++i)
              double v16 = v16 - *((double *)v12 + i) * *((double *)v15 + i);
          }
          *((double *)this + v14 + v13) = v16 * *((double *)this + v14 * v10);
          ++v14;
          uint64_t v15 = (cv *)((char *)v15 + v11);
        }
        while (v14 != v6);
        uint64_t v18 = 0;
        uint64_t v19 = (double *)((char *)this + 8 * v13 + 8 * v6);
        double v20 = *v19;
        do
        {
          double v20 = v20 - *((double *)v12 + v18) * *((double *)v12 + v18);
          ++v18;
        }
        while (v6 != v18);
      }
      else
      {
        uint64_t v19 = (double *)((char *)this + 8 * v13);
        double v20 = *v19;
      }
      if (v20 < 2.22044605e-16) {
        break;
      }
      *uint64_t v19 = 1.0 / sqrt(v20);
      ++v6;
      uint64_t v12 = (cv *)((char *)v12 + v11);
      BOOL v7 = v6 >= a3;
      if (v6 == a3)
      {
        BOOL v7 = 1;
        uint64_t v21 = (a3 - 1);
        if (a4)
        {
          uint64_t v22 = 0;
          uint64_t v23 = this;
          do
          {
            if (a6 >= 1)
            {
              uint64_t v24 = 0;
              unint64_t v25 = v22 * v9;
              uint64_t v26 = a4;
              do
              {
                double v27 = a4[v24 + v25];
                if (v22)
                {
                  uint64_t v28 = 0;
                  double v29 = v26;
                  do
                  {
                    double v27 = v27 - *((double *)v23 + v28++) * *v29;
                    v29 += v9;
                  }
                  while (v22 != v28);
                }
                a4[v24 + v25] = v27 * *((double *)this + v22 * v10);
                ++v24;
                ++v26;
              }
              while (v24 != a6);
            }
            ++v22;
            uint64_t v23 = (cv *)((char *)v23 + v11);
          }
          while (v22 != a3);
          uint64_t v30 = a3 - 1;
          uint64_t v31 = (a3 - 1);
          do
          {
            if (a6 >= 1)
            {
              uint64_t v32 = 0;
              unint64_t v33 = v31 * v9;
              do
              {
                double v34 = a4[v32 + v33];
                if (v31 < v21)
                {
                  uint64_t v35 = v30;
                  do
                  {
                    double v34 = v34 - *((double *)this + v31 + v8 * v35) * a4[v32 + v9 * v35];
                    --v35;
                  }
                  while (v31 < v35);
                }
                a4[v32 + v33] = v34 * *((double *)this + v31 * v10);
                ++v32;
              }
              while (v32 != a6);
            }
          }
          while (v31-- > 0);
          return 1;
        }
        return v7;
      }
    }
  }
  return v7;
}

double cv::invert(cv *this, const cv::_InputArray *a2, const cv::_OutputArray *a3)
{
  void (***v3)(uint64_t *__return_ptr);
  int v4;
  int v5;
  const cv::_InputArray *v6;
  const cv::_InputArray *v7;
  uint64_t v8;
  const cv::Exception *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  const cv::_OutputArray *v13;
  void *v14;
  uint64_t v15;
  unsigned char *v16;
  double v17;
  const cv::Exception *v18;
  unsigned int v19;
  const cv::_OutputArray *v20;
  const cv::_OutputArray *v21;
  const cv::_OutputArray *v22;
  uint64_t v23;
  unsigned char *v24;
  const cv::Exception *v25;
  uint64_t v26;
  float *v27;
  double *v28;
  double v29;
  double v30;
  float *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float *v54;
  float v55;
  float v56;
  float v57;
  float *v58;
  float v59;
  uint64_t v60;
  void **v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  int *v65;
  void **v66;
  unsigned int v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  int *v73;
  uint64_t v75;
  int *v76;
  double v78;
  float *v79;
  double v80;
  double v81;
  double v82;
  float v83;
  float *v84;
  float v85;
  double v86;
  float v87;
  float v88;
  double *v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double *v103;
  double *v104;
  double *v105;
  double v106;
  double v107;
  double v108;
  double *v109;
  double v110;
  uint64_t v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned char v116[64];
  unsigned char *v117;
  cv *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned char v121[32];
  unsigned char v122[32];
  unsigned char v123[32];
  unsigned char v124[32];
  void *__p[2];
  long long v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  void **v131;
  cv *v132;
  double *v133;
  double *v134;
  void *v135;
  unsigned int v136;
  int v137;
  cv *v138;
  atomic_uint *v139;
  cv *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  int *v144;
  cv *v145;
  double *v146;
  unint64_t v147;
  void *v148;
  unsigned int v149;
  unsigned int v150;
  float *v151;
  atomic_uint *v152;
  float *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  int *v157;
  cv *v158;
  double *v159;
  unint64_t v160;
  uint64_t v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  atomic_uint *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  cv *v170;
  uint64_t v171;
  int64x2_t v172;
  _OWORD v173[258];
  uint64_t v174;

  unint64_t v3 = (void (***)(uint64_t *__return_ptr))MEMORY[0x270FA5388](this, a2);
  float64x2_t v5 = v4;
  BOOL v7 = v6;
  float64x2_t v174 = *MEMORY[0x263EF8340];
  (**v3)(&v161);
  unint64_t v8 = v161 & 0xFFF;
  if ((v8 - 5) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v148, "type == CV_32F || type == CV_64F");
    std::string::basic_string[abi:ne180100]<0>(&v135, "invert");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/lapack.cpp");
    cv::Exception::Exception(&v172, 4294967081, &v148, &v135, __p, 938);
    cv::error((cv *)&v172, v9);
  }
  unint64_t v10 = (((unsigned __int16)(v161 & 0xFFF) >> 3) + 1) << ((0xFA50u >> (2 * (v161 & 7))) & 3);
  unint64_t v11 = v163;
  if (v5 == 1)
  {
    if ((int)v163 >= v162) {
      uint64_t v12 = v162;
    }
    else {
      uint64_t v12 = v163;
    }
    v172.i64[0] = (uint64_t)v173;
    v172.i64[1] = 4104;
    if ((unint64_t)((int)v10 * (uint64_t)(int)(v12 + v12 * (v162 + v163)) + 8) >= 0x1009)
    {
      v172.i64[1] = (int)v10 * (uint64_t)(int)(v12 + v12 * (v162 + v163)) + 8;
      operator new[]();
    }
    uint64_t v149 = v162;
    uint64_t v150 = v12;
    int8x16_t v151 = (float *)(((unint64_t)v173 + v10 - 1) & -(int)v10);
    float64x2_t v152 = 0;
    float64x2_t v157 = (int *)&v149;
    float64x2_t v158 = (cv *)&v159;
    HIDWORD(v148) = 2;
    LODWORD(v148) = v8 | 0x42FF4000;
    int8x16_t v159 = (double *)((int)v10 * (uint64_t)(int)v12);
    float64x2_t v160 = (((unsigned __int16)(v161 & 0xFFF) >> 3) + 1) << ((0xFA50u >> (2 * (v161 & 7))) & 3);
    int8x16_t v155 = (char *)v151 + (void)v159 * v162;
    float64x2_t v156 = 0;
    float64x2_t v153 = v151;
    int8x16_t v154 = v155;
    uint64_t v136 = v12;
    int v137 = 1;
    uint64_t v138 = (cv *)((char *)v151 + (int)v10 * (uint64_t)(int)(v12 * v162));
    uint64_t v139 = 0;
    uint64_t v144 = (int *)&v136;
    uint64_t v145 = (cv *)&v146;
    HIDWORD(v135) = 2;
    LODWORD(v135) = v8 | 0x42FF4000;
    float64x2_t v146 = (double *)v160;
    float64x2_t v147 = v160;
    uint64_t v142 = (char *)v159 + (void)v138;
    double v143 = 0;
    BOOL v140 = v138;
    char v141 = (char *)v159 + (void)v138;
    __p[1] = (void *)__PAIR64__(v163, v12);
    float64x2_t v126 = (unint64_t)v159 + (unint64_t)v138;
    int v131 = &__p[1];
    double v132 = (cv *)&v133;
    __p[0] = (void *)(v161 & 0xFFF | 0x242FF4000);
    double v133 = (double *)((int)v163 * (uint64_t)(int)v10);
    uint64_t v134 = (double *)v160;
    float64x2_t v129 = (char *)v159 + (void)v138 + (void)v133 * (int)v12;
    uint64_t v130 = 0;
    float64x2_t v127 = (char *)v159 + (void)v138;
    int8x16_t v128 = v129;
    cv::_InputArray::_InputArray((uint64_t)v116, (const cv::Mat *)&v161);
    cv::_OutputArray::_OutputArray((uint64_t)v124, (cv::Mat *)&v135);
    cv::_OutputArray::_OutputArray((uint64_t)v123, (cv::Mat *)&v148);
    cv::_OutputArray::_OutputArray((uint64_t)v122, (cv::Mat *)__p);
    cv::_SVDcompute((cv *)v116, (const cv::_InputArray *)v124, (const cv::_OutputArray *)v123, (const cv::_OutputArray *)v122, 0);
    cv::_InputArray::_InputArray((uint64_t)v124, (const cv::Mat *)&v135);
    cv::_InputArray::_InputArray((uint64_t)v123, (const cv::Mat *)&v148);
    cv::_InputArray::_InputArray((uint64_t)v122, (const cv::Mat *)__p);
    float64x2_t v117 = &v116[8];
    int8x16_t v118 = (cv *)&v119;
    int8x16_t v119 = 0;
    float64x2_t v120 = 0;
    *(_DWORD *)float64x2_t v116 = 1124007936;
    memset(&v116[4], 0, 60);
    cv::_InputArray::_InputArray((uint64_t)v121, (const cv::Mat *)v116);
    cv::SVD::backSubst((cv::SVD *)v124, (const cv::_InputArray *)v123, (const cv::_InputArray *)v122, (const cv::_InputArray *)v121, v7, v13);
    if (*(void *)&v116[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v116[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v116, v14);
    }
    *(void *)&v116[16] = 0;
    memset(&v116[32], 0, 24);
    if (*(int *)&v116[4] >= 1)
    {
      uint64_t v15 = 0;
      double v16 = v117;
      do
        *(_DWORD *)&v16[4 * v15++] = 0;
      while (v15 < *(int *)&v116[4]);
    }
    *(void *)&v116[24] = 0;
    if (v118 != (cv *)&v119) {
      cv::fastFree((void **)v118, v14);
    }
    if (v8 == 5)
    {
      uint64_t v17 = 0.0;
      if (*(float *)v138 >= 0.00000011921) {
        uint64_t v17 = (float)(*((float *)v138 + (int)v11 - 1) / *(float *)v138);
      }
    }
    else
    {
      uint64_t v17 = 0.0;
      if (*(double *)v138 >= 2.22044605e-16) {
        uint64_t v17 = *((double *)v138 + (int)v11 - 1) / *(double *)v138;
      }
    }
    if (*((void *)&v126 + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v126 + 1), 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)__p, v14);
    }
    *(void *)&float64x2_t v126 = 0;
    int8x16_t v128 = 0;
    float64x2_t v129 = 0;
    float64x2_t v127 = 0;
    if (SHIDWORD(__p[0]) >= 1)
    {
      unint64_t v60 = 0;
      double v61 = v131;
      do
        *((_DWORD *)v61 + v60++) = 0;
      while (v60 < SHIDWORD(__p[0]));
    }
    *((void *)&v126 + 1) = 0;
    if (v132 != (cv *)&v133) {
      cv::fastFree((void **)v132, v14);
    }
    if (v139 && atomic_fetch_add(v139, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v135, v14);
    }
    uint64_t v138 = 0;
    char v141 = 0;
    uint64_t v142 = 0;
    BOOL v140 = 0;
    if (SHIDWORD(v135) >= 1)
    {
      float v62 = 0;
      float v63 = v144;
      do
        v63[v62++] = 0;
      while (v62 < SHIDWORD(v135));
    }
    uint64_t v139 = 0;
    if (v145 != (cv *)&v146) {
      cv::fastFree((void **)v145, v14);
    }
    if (v152 && atomic_fetch_add(v152, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v148, v14);
    }
    int8x16_t v151 = 0;
    int8x16_t v154 = 0;
    int8x16_t v155 = 0;
    float64x2_t v153 = 0;
    if (SHIDWORD(v148) >= 1)
    {
      int v64 = 0;
      int v65 = v157;
      do
        v65[v64++] = 0;
      while (v64 < SHIDWORD(v148));
    }
    float64x2_t v152 = 0;
    uint64_t v66 = (void **)v158;
    if (v158 == (cv *)&v159) {
      goto LABEL_103;
    }
    goto LABEL_102;
  }
  if (v162 != v163)
  {
    std::string::basic_string[abi:ne180100]<0>(&v148, "m == n");
    std::string::basic_string[abi:ne180100]<0>(&v135, "invert");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/lapack.cpp");
    cv::Exception::Exception(&v172, 4294967081, &v148, &v135, __p, 962);
    cv::error((cv *)&v172, v18);
  }
  if (v5 == 2)
  {
    uint64_t v19 = v163 * v163;
    v172.i64[0] = (uint64_t)v173;
    v172.i64[1] = 4104;
    if ((unint64_t)((int)v10 * (uint64_t)(int)(v163 + 2 * v163 * v163) + 8) >= 0x1009)
    {
      v172.i64[1] = (int)v10 * (uint64_t)(int)(v163 + 2 * v19) + 8;
      operator new[]();
    }
    uint64_t v149 = v163;
    uint64_t v150 = v163;
    int8x16_t v151 = (float *)(((unint64_t)v173 + v10 - 1) & -(int)v10);
    float64x2_t v152 = 0;
    float64x2_t v157 = (int *)&v149;
    float64x2_t v158 = (cv *)&v159;
    HIDWORD(v148) = 2;
    LODWORD(v148) = v8 | 0x42FF4000;
    int8x16_t v159 = (double *)((int)v163 * (uint64_t)(int)v10);
    float64x2_t v160 = (((unsigned __int16)(v161 & 0xFFF) >> 3) + 1) << ((0xFA50u >> (2 * (v161 & 7))) & 3);
    int8x16_t v155 = (char *)v151 + (void)v159 * (int)v163;
    float64x2_t v156 = 0;
    float64x2_t v153 = v151;
    int8x16_t v154 = v155;
    uint64_t v136 = v163;
    int v137 = 1;
    uint64_t v138 = (cv *)((char *)v151 + v10 * (unint64_t)v19);
    uint64_t v139 = 0;
    uint64_t v144 = (int *)&v136;
    uint64_t v145 = (cv *)&v146;
    HIDWORD(v135) = 2;
    LODWORD(v135) = v8 | 0x42FF4000;
    float64x2_t v146 = (double *)v160;
    float64x2_t v147 = v160;
    uint64_t v142 = (char *)v159 + (void)v138;
    double v143 = 0;
    BOOL v140 = v138;
    char v141 = (char *)v159 + (void)v138;
    LODWORD(__p[1]) = v163;
    HIDWORD(__p[1]) = v163;
    float64x2_t v126 = (unint64_t)v159 + (unint64_t)v138;
    int v131 = &__p[1];
    double v132 = (cv *)&v133;
    __p[0] = (void *)(v161 & 0xFFF | 0x242FF4000);
    double v133 = v159;
    uint64_t v134 = (double *)v160;
    float64x2_t v129 = (char *)v159 + (void)v138 + (void)v159 * (int)v163;
    uint64_t v130 = 0;
    float64x2_t v127 = (char *)v159 + (void)v138;
    int8x16_t v128 = v129;
    cv::_InputArray::_InputArray((uint64_t)v116, (const cv::Mat *)&v161);
    cv::_OutputArray::_OutputArray((uint64_t)v124, (cv::Mat *)&v135);
    cv::_OutputArray::_OutputArray((uint64_t)v123, (cv::Mat *)__p);
    cv::eigen((cv *)v116, (const cv::_InputArray *)1, (BOOL)v124, (const cv::_OutputArray *)v123, v20);
    cv::_InputArray::_InputArray((uint64_t)v116, (const cv::Mat *)__p);
    cv::_OutputArray::_OutputArray((uint64_t)v124, (cv::Mat *)&v148);
    cv::transpose((void (***)(uint64_t *__return_ptr))v116, (const cv::_InputArray *)v124, v21);
    cv::_InputArray::_InputArray((uint64_t)v124, (const cv::Mat *)&v135);
    cv::_InputArray::_InputArray((uint64_t)v123, (const cv::Mat *)&v148);
    cv::_InputArray::_InputArray((uint64_t)v122, (const cv::Mat *)__p);
    float64x2_t v117 = &v116[8];
    int8x16_t v118 = (cv *)&v119;
    int8x16_t v119 = 0;
    float64x2_t v120 = 0;
    *(_DWORD *)float64x2_t v116 = 1124007936;
    memset(&v116[4], 0, 60);
    cv::_InputArray::_InputArray((uint64_t)v121, (const cv::Mat *)v116);
    cv::SVD::backSubst((cv::SVD *)v124, (const cv::_InputArray *)v123, (const cv::_InputArray *)v122, (const cv::_InputArray *)v121, v7, v22);
    if (*(void *)&v116[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v116[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v116, v14);
    }
    *(void *)&v116[16] = 0;
    memset(&v116[32], 0, 24);
    if (*(int *)&v116[4] >= 1)
    {
      uint64_t v23 = 0;
      uint64_t v24 = v117;
      do
        *(_DWORD *)&v24[4 * v23++] = 0;
      while (v23 < *(int *)&v116[4]);
    }
    *(void *)&v116[24] = 0;
    if (v118 != (cv *)&v119) {
      cv::fastFree((void **)v118, v14);
    }
    if (v8 == 5)
    {
      uint64_t v17 = 0.0;
      if (*(float *)v138 >= 0.00000011921) {
        uint64_t v17 = (float)(*((float *)v138 + (int)v11 - 1) / *(float *)v138);
      }
    }
    else
    {
      uint64_t v17 = 0.0;
      if (*(double *)v138 >= 2.22044605e-16) {
        uint64_t v17 = *((double *)v138 + (int)v11 - 1) / *(double *)v138;
      }
    }
    if (*((void *)&v126 + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v126 + 1), 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)__p, v14);
    }
    *(void *)&float64x2_t v126 = 0;
    int8x16_t v128 = 0;
    float64x2_t v129 = 0;
    float64x2_t v127 = 0;
    if (SHIDWORD(__p[0]) >= 1)
    {
      double v68 = 0;
      unint64_t v69 = v131;
      do
        *((_DWORD *)v69 + v68++) = 0;
      while (v68 < SHIDWORD(__p[0]));
    }
    *((void *)&v126 + 1) = 0;
    if (v132 != (cv *)&v133) {
      cv::fastFree((void **)v132, v14);
    }
    if (v139 && atomic_fetch_add(v139, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v135, v14);
    }
    uint64_t v138 = 0;
    char v141 = 0;
    uint64_t v142 = 0;
    BOOL v140 = 0;
    if (SHIDWORD(v135) >= 1)
    {
      int v70 = 0;
      uint64_t v71 = v144;
      do
        v71[v70++] = 0;
      while (v70 < SHIDWORD(v135));
    }
    uint64_t v139 = 0;
    if (v145 != (cv *)&v146) {
      cv::fastFree((void **)v145, v14);
    }
    if (v152 && atomic_fetch_add(v152, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v148, v14);
    }
    int8x16_t v151 = 0;
    int8x16_t v154 = 0;
    int8x16_t v155 = 0;
    float64x2_t v153 = 0;
    if (SHIDWORD(v148) >= 1)
    {
      int v72 = 0;
      int v73 = v157;
      do
        v73[v72++] = 0;
      while (v72 < SHIDWORD(v148));
    }
    float64x2_t v152 = 0;
    uint64_t v66 = (void **)v158;
    if (v158 == (cv *)&v159) {
      goto LABEL_103;
    }
LABEL_102:
    cv::fastFree(v66, v14);
LABEL_103:
    if ((_OWORD *)v172.i64[0] != v173 && v172.i64[0] != 0) {
      MEMORY[0x22A641760]();
    }
    goto LABEL_153;
  }
  if (v5 && v5 != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v148, "method == DECOMP_LU || method == DECOMP_CHOLESKY");
    std::string::basic_string[abi:ne180100]<0>(&v135, "invert");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/lapack.cpp");
    cv::Exception::Exception(&v172, 4294967081, &v148, &v135, __p, 982);
    cv::error((cv *)&v172, v25);
  }
  (*(void (**)(const cv::_InputArray *, void, void, uint64_t, uint64_t, void, void))(*(void *)v7 + 136))(v7, v163, v163, v8, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void **__return_ptr, const cv::_InputArray *, uint64_t))v7)(&v148, v7, 0xFFFFFFFFLL);
  if ((int)v11 > 3)
  {
    v172.i64[0] = (uint64_t)v173;
    v172.i64[1] = 4104;
    if ((v11 * v11 * v10) >= 0x1009)
    {
      v172.i64[1] = (v11 * v11 * v10);
      operator new[]();
    }
    uint64_t v136 = v11;
    int v137 = v11;
    uint64_t v138 = (cv *)v173;
    uint64_t v139 = 0;
    uint64_t v144 = (int *)&v136;
    uint64_t v145 = (cv *)&v146;
    HIDWORD(v135) = 2;
    LODWORD(v135) = v8 | 0x42FF4000;
    float64x2_t v146 = (double *)(v11 * (unint64_t)v10);
    float64x2_t v147 = ((v8 >> 3) + 1) << ((0xFA50u >> (2 * (v8 & 7))) & 3);
    uint64_t v142 = (char *)v173 + (void)v146 * v11;
    double v143 = 0;
    BOOL v140 = (cv *)v173;
    char v141 = v142;
    cv::_OutputArray::_OutputArray((uint64_t)__p, (cv::Mat *)&v135);
    cv::Mat::copyTo((cv::Mat *)&v161, (const cv::_OutputArray *)__p);
    cv::_OutputArray::_OutputArray((uint64_t)__p, (cv::Mat *)&v148);
    *(void *)float64x2_t v116 = 0x3FF0000000000000;
    memset(&v116[8], 0, 24);
    cv::setIdentity((void (***)(uint64_t *__return_ptr))__p, (int64x2_t *)v116);
    if (v5 || v8 != 5)
    {
      if (v5 || v8 != 6)
      {
        if (v5 == 3 && v8 == 5)
        {
          if (cv::Cholesky(v138, (unint64_t)v146, v11, v151, (unint64_t)v159, v11)) {
            goto LABEL_76;
          }
        }
        else if (cv::Cholesky(v138, (unint64_t)v146, v11, (double *)v151, (unint64_t)v159, v11))
        {
          goto LABEL_76;
        }
      }
      else if (cv::LU(v138, (unint64_t)v146, v11, (uint64_t *)v151, (unint64_t)v159, v11))
      {
        goto LABEL_76;
      }
    }
    else if (cv::LU(v138, (unint64_t)v146, v11, (int *)v151, (unint64_t)v159, v11))
    {
LABEL_76:
      float v67 = 1;
      goto LABEL_112;
    }
    *(_OWORD *)__p = 0u;
    float64x2_t v126 = 0u;
    cv::Mat::operator=((uint64_t)&v148, (int64x2_t *)__p);
    float v67 = 0;
LABEL_112:
    if (v139 && atomic_fetch_add(v139, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v135, v14);
    }
    uint64_t v138 = 0;
    char v141 = 0;
    uint64_t v142 = 0;
    BOOL v140 = 0;
    if (SHIDWORD(v135) >= 1)
    {
      double v75 = 0;
      uint64_t v76 = v144;
      do
        v76[v75++] = 0;
      while (v75 < SHIDWORD(v135));
    }
    uint64_t v139 = 0;
    if (v145 != (cv *)&v146) {
      cv::fastFree((void **)v145, v14);
    }
    if ((_OWORD *)v172.i64[0] != v173 && v172.i64[0] != 0) {
      MEMORY[0x22A641760]();
    }
    goto LABEL_144;
  }
  uint64_t v26 = v164;
  double v27 = v151;
  uint64_t v28 = v159;
  switch(v11)
  {
    case 2:
      if (v8 == 5)
      {
        uint64_t v78 = *(float *)v164;
        double v79 = (float *)(v164 + v171);
        double v80 = *(float *)(v164 + v171 + 4);
        uint64_t v81 = v78 * v80 - *(float *)(v164 + 4) * *(float *)(v164 + v171);
        if (v81 != 0.0)
        {
          uint64_t v82 = 1.0 / v81;
          int v83 = v82 * v78;
          int v84 = (float *)((char *)v159 + (void)v151);
          v84[1] = v83;
          uint64_t v85 = v82 * v80;
          *double v27 = v85;
          unint64_t v86 = v82 * (float)-*v79;
          uint64_t v87 = v82 * (float)-*(float *)(v26 + 4);
          v27[1] = v87;
          uint64_t v88 = v86;
          __int16 *v84 = v88;
          goto LABEL_142;
        }
      }
      else
      {
        int v105 = (double *)(v164 + v171);
        float64x2_t v106 = *(double *)(v164 + v171 + 8);
        float64x2_t v107 = *(double *)v164 * v106 - *(double *)(v164 + 8) * *(double *)(v164 + v171);
        if (v107 != 0.0)
        {
          float64x2_t v108 = 1.0 / v107;
          float64x2_t v109 = (double *)((char *)v159 + (void)v151);
          v109[1] = *(double *)v164 * v108;
          *(double *)double v27 = v106 * v108;
          unint64_t v110 = -(*v105 * v108);
          *((double *)v27 + 1) = -(*(double *)(v26 + 8) * v108);
          *float64x2_t v109 = v110;
          goto LABEL_142;
        }
      }
      break;
    case 3:
      if (v8 == 5)
      {
        double v29 = *(float *)v164;
        uint64_t v30 = *(float *)(v164 + v171 + 4);
        uint64_t v31 = (float *)(v164 + 2 * v171);
        uint64_t v32 = v31[2];
        unint64_t v33 = *(float *)(v164 + v171 + 8);
        double v34 = v31[1];
        uint64_t v35 = v30 * v32 - v33 * v34;
        unint64_t v36 = *(float *)(v164 + 4);
        double v37 = *(float *)(v164 + v171);
        uint64_t v38 = *v31;
        float v39 = *(float *)(v164 + 8);
        double v40 = v37 * v34 - v30 * v38;
        uint64_t v41 = v29 * v35 - (v37 * v32 - v33 * v38) * v36 + v39 * v40;
        if (v41 != 0.0)
        {
          uint64_t v42 = 1.0 / v41;
          uint64_t v43 = (v39 * v34 - v36 * v32) * v42;
          uint64_t v44 = (v36 * v33 - v39 * v30) * v42;
          unint64_t v45 = (v33 * v38 - v37 * v32) * v42;
          uint64_t v46 = (v29 * v32 - v39 * v38) * v42;
          uint64_t v47 = (v39 * v37 - v29 * v33) * v42;
          unint64_t v48 = (v36 * v38 - v29 * v34) * v42;
          unint64_t v49 = (v29 * v30 - v36 * v37) * v42;
          double v50 = v35 * v42;
          float v51 = v43;
          *int8x16_t v151 = v50;
          v27[1] = v51;
          uint64_t v52 = v44;
          v27[2] = v52;
          uint64_t v53 = v45;
          int v54 = (float *)((char *)v28 + (void)v27);
          uint64_t v55 = v46;
          *int v54 = v53;
          v54[1] = v55;
          double v56 = v47;
          v54[2] = v56;
          uint64_t v57 = v40 * v42;
          int v58 = (float *)((char *)v27 + 2 * (void)v28);
          double v59 = v48;
          *int v58 = v57;
          v58[1] = v59;
          *(float *)&unint64_t v49 = v49;
          v58[2] = *(float *)&v49;
LABEL_142:
          float v67 = 1;
          goto LABEL_144;
        }
      }
      else
      {
        uint64_t v89 = (double *)(v164 + 2 * v171);
        double v90 = v89[1];
        int8x16_t v91 = v89[2];
        uint64_t v92 = *(double *)(v164 + v171 + 8);
        unint64_t v93 = *(double *)(v164 + v171 + 16);
        uint64_t v94 = *v89;
        BOOL v95 = *(double *)(v164 + v171);
        char v96 = v92 * v91 - v93 * v90;
        uint64_t v97 = *(double *)v164;
        uint64_t v98 = *(double *)(v164 + 8);
        uint64_t v99 = *(double *)(v164 + 16);
        float v100 = v95 * v90 - v92 * *v89;
        uint64_t v101 = *(double *)v164 * v96 - v98 * (v95 * v91 - v93 * *v89) + v99 * v100;
        if (v101 != 0.0)
        {
          int v102 = 1.0 / v101;
          *(double *)int8x16_t v151 = v96 * v102;
          *((double *)v27 + 1) = (v91 * -v98 + v99 * v90) * v102;
          *((double *)v27 + 2) = (v98 * v93 - v99 * v92) * v102;
          float64x2_t v103 = (double *)((char *)v28 + (void)v27);
          *float64x2_t v103 = (v93 * v94 - v95 * v91) * v102;
          v103[1] = (v97 * v91 - v99 * v94) * v102;
          v103[2] = (v99 * v95 - v97 * v93) * v102;
          float64x2_t v104 = (double *)((char *)v27 + 2 * (void)v28);
          *float64x2_t v104 = v100 * v102;
          v104[1] = (v98 * v94 - v97 * v90) * v102;
          v104[2] = (v95 * -v98 + v97 * v92) * v102;
          goto LABEL_142;
        }
      }
      break;
    case 1:
      if (v8 == 5)
      {
        if (*(float *)v164 != 0.0)
        {
          *int8x16_t v151 = 1.0 / *(float *)v164;
          goto LABEL_142;
        }
      }
      else if (*(double *)v164 != 0.0)
      {
        *(double *)int8x16_t v151 = 1.0 / *(double *)v164;
        goto LABEL_142;
      }
      break;
    default:
      __assert_rtn("invert", "lapack.cpp", 1137, "n == 1");
  }
  uint64_t v172 = 0u;
  v173[0] = 0u;
  cv::Mat::operator=((uint64_t)&v148, &v172);
  float v67 = 0;
LABEL_144:
  if (v152 && atomic_fetch_add(v152, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v148, v14);
  }
  int8x16_t v151 = 0;
  float64x2_t v153 = 0;
  int8x16_t v154 = 0;
  int8x16_t v155 = 0;
  if (SHIDWORD(v148) >= 1)
  {
    uint64_t v111 = 0;
    float64x2_t v112 = v157;
    do
      v112[v111++] = 0;
    while (v111 < SHIDWORD(v148));
  }
  float64x2_t v152 = 0;
  if (v158 != (cv *)&v159) {
    cv::fastFree((void **)v158, v14);
  }
  uint64_t v17 = (double)v67;
LABEL_153:
  if (v165 && atomic_fetch_add(v165, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v161, v14);
  }
  uint64_t v164 = 0;
  double v166 = 0;
  double v168 = 0;
  double v167 = 0;
  if (SHIDWORD(v161) >= 1)
  {
    float64x2_t v113 = 0;
    float64x2_t v114 = v169;
    do
      *(_DWORD *)(v114 + 4 * v113++) = 0;
    while (v113 < SHIDWORD(v161));
  }
  uint64_t v165 = 0;
  if (v170 != (cv *)&v171) {
    cv::fastFree((void **)v170, v14);
  }
  return v17;
}

void sub_225EF18A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  cv::Mat::~Mat((cv::Mat *)&a61, a2);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x200], v62);
  _Unwind_Resume(a1);
}

void cv::SVD::backSubst(cv::SVD *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_InputArray *a4, const cv::_InputArray *a5, const cv::_OutputArray *a6)
{
  void (***v6)(uint64_t *__return_ptr);
  uint64_t v7;
  uint64_t v8;
  void (***v9)(uint64_t *__return_ptr, void, uint64_t);
  void (***v10)(uint64_t *__return_ptr, void, uint64_t);
  void (***v11)(uint64_t *__return_ptr, void, uint64_t);
  void (***v12)(uint64_t *__return_ptr, void, uint64_t);
  void (***v13)(uint64_t *__return_ptr, void, uint64_t);
  void (***v14)(uint64_t *__return_ptr, void, uint64_t);
  uint64_t v15;
  uint64_t v16;
  cv *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  const cv::Exception *v22;
  const cv::Exception *v23;
  int v24;
  int v25;
  const cv::Exception *v26;
  void *v27;
  const cv::Exception *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  double *v40;
  unint64_t v41;
  void *v42[2];
  void *v43[2];
  double *v44;
  atomic_uint *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  cv *v50;
  uint64_t v51;
  void *__p[2];
  void *v53[2];
  unsigned char v54[120];
  uint64_t v55;
  int v56;
  unsigned int v57;
  unint64_t v58;
  atomic_uint *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  cv *v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  BOOL v69[8];
  atomic_uint *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  cv *v75;
  double *v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  unint64_t v80;
  atomic_uint *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  cv *v86;
  double *v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91[2];
  atomic_uint *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  cv *v97;
  uint64_t v98;
  double *v99;
  uint64_t v100;
  void v101[516];

  unint64_t v6 = (void (***)(uint64_t *__return_ptr))MEMORY[0x270FA5388](this, a2);
  unint64_t v8 = v7;
  unint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  v101[515] = *MEMORY[0x263EF8340];
  (**v6)(&v88);
  (**v14)(&v77, v14, 0xFFFFFFFFLL);
  (**v12)(&v66, v12, 0xFFFFFFFFLL);
  (**v10)(&v55, v10, 0xFFFFFFFFLL);
  if (SHIDWORD(v88) < 1) {
    LODWORD(v15) = 0;
  }
  else {
    uint64_t v15 = *((void *)v97 + (HIDWORD(v88) - 1));
  }
  double v16 = v88 & 0xFFF;
  uint64_t v17 = (cv *)v78;
  uint64_t v18 = v68;
  if (v58) {
    uint64_t v19 = v57;
  }
  else {
    uint64_t v19 = v78;
  }
  if ((int)v68 >= (int)v78) {
    double v20 = v78;
  }
  else {
    double v20 = v68;
  }
  if (v89 == 1)
  {
    uint64_t v21 = (int)v15;
  }
  else
  {
    uint64_t v21 = v98;
    if (v90 != 1) {
      uint64_t v21 = v98 + (int)v15;
    }
  }
  uint64_t v99 = (double *)v101;
  float v100 = 4104;
  if ((unint64_t)(8 * (int)v19 + 16) >= 0x1009)
  {
    float v100 = 8 * (int)v19 + 16;
    operator new[]();
  }
  if (v16 != (v77 & 0xFFF) || v16 != (v66 & 0xFFF) || !v80 || !*(void *)v69 || !*(void *)v91)
  {
    std::string::basic_string[abi:ne180100]<0>(v43, "w.type() == u.type() && u.type() == vt.type() && u.data && vt.data && w.data");
    std::string::basic_string[abi:ne180100]<0>(v53, "backSubst");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/lapack.cpp");
    cv::Exception::Exception(v54, 4294967081, v43, v53, __p, 1598);
    cv::error((cv *)v54, v22);
  }
  if (v79 < v20
    || v67 < v20
    || ((uint64_t v24 = *v96, v25 = v96[1], v25 != v20) || v24 != 1) && (v25 != 1 || v24 != v20) && (v25 != v67 || v24 != v79))
  {
    std::string::basic_string[abi:ne180100]<0>(v43, "u.cols >= nm && vt.rows >= nm && (w.size() == Size(nm, 1) || w.size() == Size(1, nm) || w.size() == Size(vt.rows, u.cols))");
    std::string::basic_string[abi:ne180100]<0>(v53, "backSubst");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/lapack.cpp");
    cv::Exception::Exception(v54, 4294967081, v43, v53, __p, 1600);
    cv::error((cv *)v54, v23);
  }
  if (v58 && ((v55 & 0xFFF) != v16 || v56 != v78))
  {
    std::string::basic_string[abi:ne180100]<0>(v43, "rhs.data == 0 || (rhs.type() == type && rhs.rows == m)");
    std::string::basic_string[abi:ne180100]<0>(v53, "backSubst");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/lapack.cpp");
    cv::Exception::Exception(v54, 4294967081, v43, v53, __p, 1601);
    cv::error((cv *)v54, v26);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 136))(v8, v68, v19, v16, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void **__return_ptr, uint64_t, uint64_t))v8)(v43, v8, 0xFFFFFFFFLL);
  if (v16 == 6)
  {
    LODWORD(v40) = v19;
    cv::SVBkSb(v17, v18, *(double **)v91, v21, (double *)v80, (uint64_t)v87, 0, *(uint64_t *)v69, v76, v58, v65, v40, v44, v51, v99, v41, (unsigned __int8 *)v42[0]);
  }
  else
  {
    if (v16 != 5)
    {
      std::string::basic_string[abi:ne180100]<0>(v53, "");
      std::string::basic_string[abi:ne180100]<0>(__p, "backSubst");
      std::string::basic_string[abi:ne180100]<0>(v42, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/lapack.cpp");
      cv::Exception::Exception(v54, 4294967086, v53, __p, v42, 1614);
      cv::error((cv *)v54, v28);
    }
    LODWORD(v40) = v19;
    cv::SVBkSb(v17, v18, *(float **)v91, v21, (float *)v80, (uint64_t)v87, 0, *(uint64_t *)v69, (const float *)v76, v58, v65, (const float *)v40, (float *)v44, v51, (float *)v99, v41, (unsigned __int8 *)v42[0]);
  }
  if (v45 && atomic_fetch_add(v45, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v43, v27);
  }
  uint64_t v44 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  unint64_t v48 = 0;
  if (SHIDWORD(v43[0]) >= 1)
  {
    double v29 = 0;
    uint64_t v30 = v49;
    do
      *(_DWORD *)(v30 + 4 * v29++) = 0;
    while (v29 < SHIDWORD(v43[0]));
  }
  unint64_t v45 = 0;
  if (v50 != (cv *)&v51) {
    cv::fastFree((void **)v50, v27);
  }
  if (v99 != (double *)v101 && v99 != 0) {
    MEMORY[0x22A641760]();
  }
  if (v59 && atomic_fetch_add(v59, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v55, v27);
  }
  int v58 = 0;
  unint64_t v60 = 0;
  double v61 = 0;
  float v62 = 0;
  if (SHIDWORD(v55) >= 1)
  {
    uint64_t v32 = 0;
    unint64_t v33 = v63;
    do
      *(_DWORD *)(v33 + 4 * v32++) = 0;
    while (v32 < SHIDWORD(v55));
  }
  double v59 = 0;
  if (v64 != (cv *)&v65) {
    cv::fastFree((void **)v64, v27);
  }
  if (v70 && atomic_fetch_add(v70, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v66, v27);
  }
  *(void *)unint64_t v69 = 0;
  uint64_t v71 = 0;
  int v72 = 0;
  int v73 = 0;
  if (SHIDWORD(v66) >= 1)
  {
    double v34 = 0;
    uint64_t v35 = v74;
    do
      *(_DWORD *)(v35 + 4 * v34++) = 0;
    while (v34 < SHIDWORD(v66));
  }
  int v70 = 0;
  if (v75 != (cv *)&v76) {
    cv::fastFree((void **)v75, v27);
  }
  if (v81 && atomic_fetch_add(v81, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v77, v27);
  }
  double v80 = 0;
  uint64_t v82 = 0;
  int v84 = 0;
  int v83 = 0;
  if (SHIDWORD(v77) >= 1)
  {
    unint64_t v36 = 0;
    double v37 = v85;
    do
      *(_DWORD *)(v37 + 4 * v36++) = 0;
    while (v36 < SHIDWORD(v77));
  }
  uint64_t v81 = 0;
  if (v86 != (cv *)&v87) {
    cv::fastFree((void **)v86, v27);
  }
  if (v92 && atomic_fetch_add(v92, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v88, v27);
  }
  *(void *)int8x16_t v91 = 0;
  unint64_t v93 = 0;
  BOOL v95 = 0;
  uint64_t v94 = 0;
  if (SHIDWORD(v88) >= 1)
  {
    uint64_t v38 = 0;
    float v39 = v96;
    do
      v39[v38++] = 0;
    while (v38 < SHIDWORD(v88));
  }
  uint64_t v92 = 0;
  if (v97 != (cv *)&v98) {
    cv::fastFree((void **)v97, v27);
  }
}

void sub_225EF22E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  cv::Exception::~Exception((cv::Exception *)&a47);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  cv::Mat::~Mat((cv::Mat *)&a23, v74);
  unint64_t v76 = STACK[0x2E0];
  if (STACK[0x2E0] != v72)
  {
    if (v76) {
      MEMORY[0x22A641760](v76, 0x1000C8077774924);
    }
  }
  cv::Mat::~Mat((cv::Mat *)&a62, v75);
  cv::Mat::~Mat((cv::Mat *)&a72, v77);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x220], v78);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x280], v79);
  _Unwind_Resume(a1);
}

void sub_225EF2450()
{
}

void sub_225EF2458()
{
}

void sub_225EF2460()
{
}

void sub_225EF2468()
{
}

uint64_t cv::solve(cv *this, const cv::_InputArray *a2, const cv::_InputArray *a3, const cv::_OutputArray *a4)
{
  void (***v4)(uint64_t *__return_ptr);
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void (***v9)(int *__return_ptr, void, uint64_t);
  void (***v10)(int *__return_ptr, void, uint64_t);
  unsigned int v11;
  const cv::Exception *v13;
  const cv::Exception *v14;
  void *v15;
  float *v16;
  uint64_t v17;
  double v18;
  double v19;
  float *v20;
  float v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float v37;
  double v38;
  float v39;
  double v40;
  float v41;
  float v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  cv *v49;
  cv *v50;
  const cv::Exception *v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  float **v66;
  cv *v67;
  unint64_t v68;
  int v70;
  unsigned int v71;
  cv *v72;
  uint64_t *v73;
  char *v74;
  void *v75;
  uint64_t v76;
  unsigned char *v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  int v81;
  unsigned int v82;
  char *v83;
  const cv::_OutputArray *v84;
  void *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int *v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  float v98;
  float v99;
  cv *v100;
  cv *v101;
  uint64_t v102;
  unsigned char *v103;
  char *v104;
  unint64_t v105;
  int v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  float *v111;
  void *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  unsigned char *v116;
  uint64_t v117;
  unsigned char *v118;
  cv *v119;
  cv *v120;
  atomic_uint **v121;
  uint64_t *v122;
  char **v123;
  uint64_t *v124;
  float *v125;
  unint64_t *v126;
  cv *v127;
  cv *v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  unsigned char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  unsigned char *v136;
  uint64_t v137;
  unint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  double *v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  double *v176;
  unsigned __int8 *v177;
  uint64_t v178;
  unint64_t v179;
  cv *v180;
  int v181;
  uint64_t v182;
  unsigned char v183[64];
  unsigned char *v184;
  cv *v185;
  double *v186[2];
  unsigned char v187[32];
  _OWORD v188[4];
  char *v189;
  cv *v190;
  uint64_t v191;
  uint64_t v192;
  unsigned char v193[32];
  unsigned char v194[32];
  unsigned char v195[64];
  unsigned char *v196;
  cv *v197;
  double *v198;
  uint64_t v199;
  void *v200;
  unint64_t v201;
  cv *v202;
  atomic_uint *v203;
  unint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  unint64_t *v208;
  cv *v209;
  double *v210;
  uint64_t v211;
  void *__p[2];
  float *v213;
  atomic_uint *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  cv *v219;
  double *v220;
  int v221;
  int v222[3];
  float *v223;
  long long v224;
  long long v225;
  uint64_t v226;
  int *v227;
  cv *v228;
  uint64_t v229[2];
  int v230;
  uint64_t v231;
  int v232;
  float *v233;
  long long v234;
  long long v235;
  uint64_t v236;
  uint64_t v237;
  cv *v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  unsigned int v242;
  uint64_t v243;
  atomic_uint *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  cv *v249;
  uint64_t v250;
  float **v251;
  unint64_t v252;
  float *v253;
  atomic_uint *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  cv *v259;
  void v260[510];

  int v4 = (void (***)(uint64_t *__return_ptr))MEMORY[0x270FA5388](this, a2);
  unint64_t v6 = v5;
  unint64_t v8 = v7;
  unint64_t v10 = v9;
  v260[507] = *MEMORY[0x263EF8340];
  (**v4)(&v240);
  (**v10)(&v230, v10, 0xFFFFFFFFLL);
  unint64_t v11 = v240 & 0xFFF;
  if (v11 != (v230 & 0xFFF) || v11 - 5 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v200, "type == _src2.type() && (type == CV_32F || type == CV_64F)");
    std::string::basic_string[abi:ne180100]<0>(&v221, "solve");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/lapack.cpp");
    cv::Exception::Exception(&v251, 4294967081, &v200, &v221, __p, 1197);
    cv::error((cv *)&v251, v13);
  }
  if (v6 <= 0x13 && ((1 << v6) & 0x90009) != 0)
  {
    if ((v6 & 0x10) == 0 && v241 != v242)
    {
      std::string::basic_string[abi:ne180100]<0>(&v200, "(method != DECOMP_LU && method != DECOMP_CHOLESKY) || is_normal || src.rows == src.cols");
      std::string::basic_string[abi:ne180100]<0>(&v221, "solve");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/lapack.cpp");
      cv::Exception::Exception(&v251, 4294967081, &v200, &v221, __p, 1201);
      cv::error((cv *)&v251, v14);
    }
    if (((1 << v6) & 0x90009) != 0 && (v6 & 0x10) == 0 && v241 <= 3 && v241 == v242 && v232 == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 136))(v8);
      (**(void (***)(float ***__return_ptr, uint64_t, uint64_t))v8)(&v251, v8, 0xFFFFFFFFLL);
      double v16 = v253;
      uint64_t v17 = v260[0];
      switch(v241)
      {
        case 2:
          if (v11 == 5)
          {
            double v90 = *(float *)v243;
            int8x16_t v91 = *(float *)(v243 + v250 + 4);
            uint64_t v92 = *(float *)(v243 + 4);
            unint64_t v93 = *(float *)(v243 + v250);
            uint64_t v94 = v90 * v91 - v92 * v93;
            if (v94 != 0.0)
            {
              BOOL v95 = 1.0 / v94;
              char v96 = *v233;
              uint64_t v97 = *(float *)((char *)v233 + v239);
              uint64_t v98 = v95 * (v96 * v91 - v97 * v92);
              uint64_t v99 = v95 * (v97 * v90 - v96 * v93);
              *(float *)((char *)v253 + v260[0]) = v99;
              *double v16 = v98;
              goto LABEL_290;
            }
          }
          else
          {
            double v168 = *(double *)(v243 + 8);
            float64x2_t v169 = *(double *)(v243 + v250 + 8);
            float64_t v170 = *(double *)v243 * v169 - v168 * *(double *)(v243 + v250);
            if (v170 != 0.0)
            {
              uint64_t v171 = 1.0 / v170;
              uint64_t v172 = *(double *)((char *)v233 + v239);
              uint64_t v173 = v171 * (*(double *)v233 * v169 - v172 * v168);
              *(double *)((char *)v253 + v260[0]) = v171
                                                  * (v172 * *(double *)v243 - *(double *)v233 * *(double *)(v243 + v250));
              *(double *)double v16 = v173;
              goto LABEL_290;
            }
          }
          break;
        case 3:
          if (v11 == 5)
          {
            uint64_t v18 = *(float *)v243;
            uint64_t v19 = *(float *)(v243 + v250 + 4);
            double v20 = (float *)(v243 + 2 * v250);
            uint64_t v21 = v20[2];
            uint64_t v22 = v21;
            uint64_t v23 = *(float *)(v243 + v250 + 8);
            uint64_t v24 = v20[1];
            unint64_t v25 = v19 * v21 - v23 * v24;
            uint64_t v26 = *(float *)(v243 + 4);
            double v27 = *(float *)(v243 + v250);
            uint64_t v28 = *v20;
            double v29 = -(v23 * v28);
            uint64_t v30 = *(float *)(v243 + 8);
            uint64_t v31 = v27 * v24 - v19 * v28;
            uint64_t v32 = v18 * v25 - (v27 * v21 - v23 * v28) * v26 + v30 * v31;
            if (v32 != 0.0)
            {
              unint64_t v33 = -v23;
              double v34 = -(v29 + v27 * v22);
              uint64_t v35 = 1.0 / v32;
              unint64_t v36 = *v233;
              double v37 = *(float *)((char *)v233 + v239);
              uint64_t v38 = *(float *)((char *)v233 + 2 * v239);
              float v39 = v35 * (v36 * v25 - (v33 * v38 + v37 * v22) * v26 + v30 * (-v19 * v38 + v37 * v24));
              double v40 = v27 * v38 - v37 * v28;
              uint64_t v41 = v35 * (v34 * v36 + v18 * ((float)(v21 * v37) + v33 * v38) + v30 * v40);
              uint64_t v42 = v35 * (v18 * (v19 * v38 - v37 * v24) - v40 * v26 + v36 * v31);
              *v253 = v39;
              *(float *)((char *)v16 + v17) = v41;
              *(float *)((char *)v16 + 2 * v17) = v42;
LABEL_290:
              float64x2_t v113 = 1;
              goto LABEL_292;
            }
          }
          else
          {
            uint64_t v149 = (double *)(v243 + 2 * v250);
            uint64_t v150 = v149[1];
            int8x16_t v151 = v149[2];
            float64x2_t v152 = *(double *)(v243 + v250 + 8);
            float64x2_t v153 = *(double *)(v243 + v250 + 16);
            int8x16_t v154 = *v149;
            int8x16_t v155 = *(double *)(v243 + v250);
            float64x2_t v156 = v152 * v151 - v153 * v150;
            float64x2_t v157 = *(double *)v243;
            float64x2_t v158 = *(double *)(v243 + 8);
            int8x16_t v159 = *(double *)(v243 + 16);
            float64x2_t v160 = v155 * v150 - v152 * *v149;
            float64x2_t v161 = *(double *)v243 * v156 - v158 * (v155 * v151 - v153 * *v149) + v159 * v160;
            if (v161 != 0.0)
            {
              int8x16_t v162 = 1.0 / v161;
              float64x2_t v163 = *(double *)((char *)v233 + v239);
              uint64_t v164 = *(double *)((char *)v233 + 2 * v239);
              uint64_t v165 = v162
                   * ((v151 * -v158 + v159 * v150) * v163 + v156 * *(double *)v233 + (v158 * v153 - v159 * v152) * v164);
              double v166 = v162
                   * ((v157 * v151 - v159 * v154) * v163
                    + (v153 * v154 - v155 * v151) * *(double *)v233
                    + (v159 * v155 - v157 * v153) * v164);
              double v167 = v162
                   * ((v158 * v154 - v157 * v150) * v163 + v160 * *(double *)v233 + (v155 * -v158 + v157 * v152) * v164);
              *(double *)v253 = v165;
              *(double *)((char *)v16 + v17) = v166;
              *(double *)((char *)v16 + 2 * v17) = v167;
              goto LABEL_290;
            }
          }
          break;
        case 1:
          if (v11 == 5)
          {
            if (*(float *)v243 != 0.0)
            {
              *v253 = *v233 / *(float *)v243;
              goto LABEL_290;
            }
          }
          else if (*(double *)v243 != 0.0)
          {
            *(double *)v253 = *(double *)v233 / *(double *)v243;
            goto LABEL_290;
          }
          break;
        default:
          __assert_rtn("solve", "lapack.cpp", 1314, "src.rows == 1");
      }
      float64x2_t v113 = 0;
LABEL_292:
      if (v254 && atomic_fetch_add(v254, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)&v251, v15);
      }
      v253 = 0;
      v255 = 0;
      v257 = 0;
      v256 = 0;
      if (SHIDWORD(v251) >= 1)
      {
        float64x2_t v174 = 0;
        unint64_t v175 = v258;
        do
          *(_DWORD *)(v175 + 4 * v174++) = 0;
        while (v174 < SHIDWORD(v251));
      }
      v254 = 0;
      if (v259 != (cv *)v260) {
        cv::fastFree((void **)v259, v15);
      }
      goto LABEL_267;
    }
  }
  if ((v6 & 0xFFFFFFEF) == 4) {
    uint64_t v43 = 1;
  }
  else {
    uint64_t v43 = v6 & 0xFFFFFFEF;
  }
  uint64_t v44 = v43 == 1 && (v6 & 0x10) == 0;
  unint64_t v45 = v241;
  uint64_t v46 = v242;
  v251 = &v253;
  v252 = 4104;
  *(void *)v222 = v231;
  uint64_t v47 = (((unsigned __int16)(v240 & 0xFFF) >> 3) + 1) << ((0xFA50u >> (2 * (v240 & 7))) & 3);
  double v178 = v47 * (uint64_t)(int)v242;
  v221 = v230;
  float64x2_t v181 = v232;
  uint64_t v182 = v47;
  v222[2] = v232;
  v224 = v234;
  float64x2_t v179 = (v178 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (v44) {
    unint64_t v48 = (v241 * (uint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  else {
    unint64_t v48 = (v178 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  v225 = v235;
  v223 = v233;
  v226 = v236;
  v227 = &v222[1];
  v228 = (cv *)v229;
  v229[1] = 0;
  v229[0] = 0;
  if ((void)v234) {
    atomic_fetch_add((atomic_uint *volatile)v234, 1u);
  }
  if ((int)v231 > 2)
  {
    v222[0] = 0;
    cv::Mat::copySize((cv::Mat *)&v221, (const cv::Mat *)&v230);
  }
  else
  {
    unint64_t v49 = v238;
    double v50 = v228;
    *(void *)v228 = *(void *)v238;
    *((void *)v50 + 1) = *((void *)v49 + 1);
  }
  (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, void, void))(*(void *)v8 + 136))(v8, v242, v222[2], v240 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void **__return_ptr, uint64_t, uint64_t))v8)(__p, v8, 0xFFFFFFFFLL);
  if (v45 < (int)v46)
  {
    std::string::basic_string[abi:ne180100]<0>(v195, "The function can not solve under-determined linear systems");
    std::string::basic_string[abi:ne180100]<0>(v188, "solve");
    std::string::basic_string[abi:ne180100]<0>(v183, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/lapack.cpp");
    cv::Exception::Exception(&v200, 4294967291, v195, v188, v183, 1350);
    cv::error((cv *)&v200, v51);
  }
  uint64_t v52 = (v6 >> 4) & 1;
  if (v43 == 1) {
    uint64_t v53 = 2;
  }
  else {
    uint64_t v53 = v43;
  }
  if ((v6 & 0x10) != 0) {
    uint64_t v52 = 1;
  }
  else {
    uint64_t v53 = v43;
  }
  if ((v6 & 0x10) != 0) {
    int v54 = v46;
  }
  else {
    int v54 = v45;
  }
  if (v45 == v46) {
    uint64_t v55 = 0;
  }
  else {
    uint64_t v55 = v52;
  }
  if (v45 == v46)
  {
    uint64_t v53 = v43;
    double v56 = v45;
  }
  else
  {
    double v56 = v54;
  }
  int64_t v180 = (cv *)v56;
  uint64_t v57 = v53;
  int v58 = v53 - 1;
  if (v53 == 1) {
    double v59 = 1;
  }
  else {
    double v59 = v55;
  }
  if (v59) {
    unint64_t v60 = v46;
  }
  else {
    unint64_t v60 = v45;
  }
  double v61 = v48 * v60;
  float v62 = (int)v182 * (uint64_t)(v181 * (int)v46);
  float v63 = v62 + 32;
  if (!v55) {
    float v63 = 32;
  }
  int v64 = v63 + v61;
  if (v58 <= 1) {
    int v65 = 5 * (int)v46 * (uint64_t)(int)v182 + 8 * v181 + v179 * (int)v46 + v64 + 32;
  }
  else {
    int v65 = v64;
  }
  if (v252 >= v65)
  {
    uint64_t v66 = v251;
  }
  else
  {
    uint64_t v66 = &v253;
    if (v251 != &v253)
    {
      if (v251) {
        MEMORY[0x22A641760](v251, 0x1000C8077774924);
      }
      v251 = &v253;
    }
    v252 = v65;
    if (v65 >= 0x1009) {
      operator new[]();
    }
  }
  float v67 = (cv *)(((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v201 = __PAIR64__(v46, v180);
  unint64_t v202 = v67;
  double v203 = 0;
  if (v180 == 1) {
    double v68 = v178;
  }
  else {
    double v68 = v48;
  }
  if (v68 == v178 || v48 == 0) {
    int v70 = 0x4000;
  }
  else {
    int v70 = 0;
  }
  uint64_t v71 = v11 | 0x42FF0000 | v70;
  uint64_t v208 = &v201;
  uint64_t v209 = (cv *)&v210;
  if (!v48) {
    double v68 = v178;
  }
  uint64_t v200 = (void *)(v71 | 0x200000000);
  int v210 = (double *)v68;
  unint64_t v211 = ((v11 >> 3) + 1) << ((0xFA50u >> (2 * (v11 & 7))) & 3);
  v207 = 0;
  int v206 = (char *)v67 + v68 * (int)v180;
  double v204 = ((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v205 = (uint64_t)&v206[v178 - v68];
  if (v55)
  {
    cv::_InputArray::_InputArray((uint64_t)v195, (const cv::Mat *)&v240);
    uint64_t v72 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v188, (cv::Mat *)&v200);
    int v73 = cv::noArray(v72);
    cv::mulTransposed((void (***)(uint64_t *__return_ptr))v195, (const cv::_InputArray *)v188, (const cv::_OutputArray *)1, (void (***)(uint64_t *__return_ptr, void, uint64_t))v73, (const cv::_InputArray *)0xFFFFFFFFLL, 1.0);
    uint64_t v74 = (char *)v67 + v61;
    if (v57 == 3 || !v57)
    {
      cv::_InputArray::_InputArray((uint64_t)v188, (const cv::Mat *)&v240);
      cv::_InputArray::_InputArray((uint64_t)v183, (const cv::Mat *)&v221);
      uint64_t v196 = &v195[8];
      char v197 = (cv *)&v198;
      unint64_t v199 = 0;
      int v198 = 0;
      *(_DWORD *)v195 = 1124007936;
      memset(&v195[4], 0, 60);
      cv::_InputArray::_InputArray((uint64_t)v194, (const cv::Mat *)v195);
      cv::_OutputArray::_OutputArray((uint64_t)v193, (cv::Mat *)__p);
      cv::gemm((cv *)v188, (const cv::_InputArray *)v183, (const cv::_InputArray *)v194, 1.0, (const cv::_InputArray *)v193, 0.0, (const cv::_OutputArray *)1);
      if (*(void *)&v195[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v195[24], 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v195, v75);
      }
      *(void *)&v195[16] = 0;
      memset(&v195[32], 0, 24);
      if (*(int *)&v195[4] >= 1)
      {
        unint64_t v76 = 0;
        uint64_t v77 = v196;
        do
          *(_DWORD *)&v77[4 * v76++] = 0;
        while (v76 < *(int *)&v195[4]);
      }
      *(void *)&v195[24] = 0;
      if (v197 != (cv *)&v198) {
        cv::fastFree((void **)v197, v75);
      }
      goto LABEL_149;
    }
    *(_DWORD *)&v195[8] = v46;
    *(_DWORD *)&v195[12] = v181;
    *(void *)&v195[16] = v74;
    *(void *)&v195[24] = 0;
    uint64_t v196 = &v195[8];
    char v197 = (cv *)&v198;
    *(_DWORD *)&v195[4] = 2;
    *(_DWORD *)v195 = v11 | 0x42FF4000;
    int v198 = (double *)(v181 * (uint64_t)(int)v182);
    unint64_t v199 = ((v11 >> 3) + 1) << ((0xFA50u >> (2 * (v11 & 7))) & 3);
    *(_OWORD *)&v195[48] = (unint64_t)&v74[(void)v198 * (int)v46];
    *(void *)&v195[32] = v74;
    *(void *)&v195[40] = &v74[(void)v198 * (int)v46];
    cv::_InputArray::_InputArray((uint64_t)v183, (const cv::Mat *)&v240);
    cv::_InputArray::_InputArray((uint64_t)v194, (const cv::Mat *)&v221);
    int8x16_t v189 = (char *)v188 + 8;
    float64x2_t v190 = (cv *)&v191;
    float64x2_t v191 = 0;
    float64x2_t v192 = 0;
    LODWORD(v188[0]) = 1124007936;
    memset((char *)v188 + 4, 0, 48);
    v188[3] = 0u;
    cv::_InputArray::_InputArray((uint64_t)v193, (const cv::Mat *)v188);
    cv::_OutputArray::_OutputArray((uint64_t)v187, (cv::Mat *)v195);
    cv::gemm((cv *)v183, (const cv::_InputArray *)v194, (const cv::_InputArray *)v193, 1.0, (const cv::_InputArray *)v187, 0.0, (const cv::_OutputArray *)1);
    if (*((void *)&v188[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v188[1] + 1), 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v188, v85);
    }
    *(void *)&v188[1] = 0;
    memset(&v188[2], 0, 24);
    if (SDWORD1(v188[0]) >= 1)
    {
      unint64_t v86 = 0;
      uint64_t v87 = v189;
      do
        *(_DWORD *)&v87[4 * v86++] = 0;
      while (v86 < SDWORD1(v188[0]));
    }
    *((void *)&v188[1] + 1) = 0;
    if (v190 != (cv *)&v191) {
      cv::fastFree((void **)v190, v85);
    }
    if (*(void *)&v195[24]) {
      atomic_fetch_add(*(atomic_uint *volatile *)&v195[24], 1u);
    }
    if ((void)v224 && atomic_fetch_add((atomic_uint *volatile)v224, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v221, v85);
    }
    v223 = 0;
    v225 = 0uLL;
    *((void *)&v224 + 1) = 0;
    if (v222[0] <= 0)
    {
      *(void *)&v224 = 0;
      v221 = *(_DWORD *)v195;
    }
    else
    {
      uint64_t v88 = 0;
      uint64_t v89 = v227;
      do
        v89[v88++] = 0;
      while (v88 < v222[0]);
      *(void *)&v224 = 0;
      v221 = *(_DWORD *)v195;
      if (v222[0] > 2) {
        goto LABEL_139;
      }
    }
    if (*(int *)&v195[4] <= 2)
    {
      v222[0] = *(_DWORD *)&v195[4];
      *(void *)&v222[1] = *(void *)&v195[8];
      float v100 = v197;
      uint64_t v101 = v228;
      *(void *)v228 = *(void *)v197;
      *((void *)v101 + 1) = *((void *)v100 + 1);
      goto LABEL_140;
    }
LABEL_139:
    cv::Mat::copySize((cv::Mat *)&v221, (const cv::Mat *)v195);
LABEL_140:
    v225 = *(_OWORD *)&v195[40];
    v224 = *(_OWORD *)&v195[24];
    v223 = *(float **)&v195[16];
    v226 = *(void *)&v195[56];
    if (*(void *)&v195[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v195[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v195, v85);
    }
    *(void *)&v195[16] = 0;
    memset(&v195[32], 0, 24);
    if (*(int *)&v195[4] >= 1)
    {
      int v102 = 0;
      float64x2_t v103 = v196;
      do
        *(_DWORD *)&v103[4 * v102++] = 0;
      while (v102 < *(int *)&v195[4]);
    }
    *(void *)&v195[24] = 0;
    if (v197 != (cv *)&v198) {
      cv::fastFree((void **)v197, v85);
    }
    v74 += v62;
    goto LABEL_149;
  }
  if (v57 == 1)
  {
    uint64_t v78 = (int)v180 * (uint64_t)(int)v182;
    if (v46 == 1) {
      double v79 = (int)v180 * (uint64_t)(int)v182;
    }
    else {
      double v79 = v48;
    }
    double v80 = v79 == v78 || v48 == 0;
    *(_DWORD *)&v195[12] = v180;
    *(void *)&v195[16] = ((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF0;
    *(void *)&v195[24] = 0;
    uint64_t v196 = &v195[8];
    char v197 = (cv *)&v198;
    if (v80) {
      uint64_t v81 = 0x4000;
    }
    else {
      uint64_t v81 = 0;
    }
    if (v48) {
      uint64_t v78 = v79;
    }
    uint64_t v82 = v11 | 0x42FF0000 | v81;
    *(_DWORD *)&v195[8] = v46;
    *(_DWORD *)v195 = v82;
    int v198 = (double *)v78;
    unint64_t v199 = ((v11 >> 3) + 1) << ((0xFA50u >> (2 * (v11 & 7))) & 3);
    int v83 = (char *)v67 + v78 * (int)v46;
    *(_OWORD *)&v195[48] = (unint64_t)v83;
    *(void *)&v195[32] = ((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF0;
    *(void *)&v195[40] = &v83[(int)v180 * (uint64_t)(int)v182 - v78];
    uint64_t v200 = (void *)(v82 | 0x200000000);
    uint64_t v201 = __PAIR64__(v180, v46);
    int v210 = (double *)v78;
    unint64_t v211 = v199;
    double v204 = *(void *)&v195[32];
    uint64_t v205 = *(void *)&v195[40];
    unint64_t v202 = *(cv **)&v195[32];
    double v203 = 0;
    int v206 = v83;
    v207 = 0;
    cv::_InputArray::_InputArray((uint64_t)v195, (const cv::Mat *)&v240);
    cv::_OutputArray::_OutputArray((uint64_t)v188, (cv::Mat *)&v200);
    cv::transpose((void (***)(uint64_t *__return_ptr))v195, (const cv::_InputArray *)v188, v84);
  }
  else
  {
    cv::_OutputArray::_OutputArray((uint64_t)v195, (cv::Mat *)&v200);
    cv::Mat::copyTo((cv::Mat *)&v240, (const cv::_OutputArray *)v195);
  }
  uint64_t v74 = (char *)v67 + v61;
  if (v57 == 3 || !v57)
  {
    cv::_OutputArray::_OutputArray((uint64_t)v195, (cv::Mat *)__p);
    cv::Mat::copyTo((cv::Mat *)&v221, (const cv::_OutputArray *)v195);
  }
LABEL_149:
  if (v57 == 3)
  {
    if (v11 == 5)
    {
      if (cv::Cholesky(v202, (unint64_t)v210, v46, v213, (unint64_t)v220, v181)) {
        goto LABEL_237;
      }
    }
    else if (cv::Cholesky(v202, (unint64_t)v210, v46, (double *)v213, (unint64_t)v220, v181))
    {
      goto LABEL_237;
    }
LABEL_175:
    memset(v195, 0, 32);
    cv::Mat::operator=((uint64_t)__p, (int64x2_t *)v195);
    float64x2_t v113 = 0;
    goto LABEL_238;
  }
  if (v57)
  {
    float64x2_t v104 = (char *)((unint64_t)(v74 + 15) & 0xFFFFFFFFFFFFFFF0);
    *(_DWORD *)&v195[8] = v46;
    *(_DWORD *)&v195[12] = v46;
    *(void *)&v195[16] = v104;
    *(void *)&v195[24] = 0;
    uint64_t v196 = &v195[8];
    char v197 = (cv *)&v198;
    if (v46 == 1) {
      int v105 = ((v11 >> 3) + 1) << ((0xFA50u >> (2 * (v11 & 7))) & 3);
    }
    else {
      int v105 = (v178 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (v105 == v178 || v179 == 0) {
      float64x2_t v107 = 0x4000;
    }
    else {
      float64x2_t v107 = 0;
    }
    *(_DWORD *)&v195[4] = 2;
    *(_DWORD *)v195 = v11 | v107 | 0x42FF0000;
    if (v179) {
      float64x2_t v108 = v105;
    }
    else {
      float64x2_t v108 = v178;
    }
    int v198 = (double *)v108;
    unint64_t v199 = ((v11 >> 3) + 1) << ((0xFA50u >> (2 * (v11 & 7))) & 3);
    *(_OWORD *)&v195[48] = (unint64_t)&v104[v108 * (int)v46];
    *(void *)&v195[32] = (unint64_t)(v74 + 15) & 0xFFFFFFFFFFFFFFF0;
    *(void *)&v195[40] = *(void *)&v195[48] - v108 + v178;
    float64x2_t v109 = (uint64_t)&v104[v179 * (int)v46];
    *((void *)&v188[0] + 1) = v46 | 0x100000000;
    v188[1] = (unint64_t)v109;
    int8x16_t v189 = (char *)v188 + 8;
    float64x2_t v190 = (cv *)&v191;
    DWORD1(v188[0]) = 2;
    LODWORD(v188[0]) = v11 | 0x42FF4000;
    float64x2_t v191 = v199;
    float64x2_t v192 = v199;
    v188[3] = (unint64_t)(v109 + v178);
    *(void *)&v188[2] = v109;
    *((void *)&v188[2] + 1) = v109 + v178;
    float64x2_t v184 = &v183[8];
    float64x2_t v185 = (cv *)v186;
    v186[0] = 0;
    v186[1] = 0;
    *(_DWORD *)float64x2_t v183 = 1124007936;
    memset(&v183[4], 0, 60);
    unint64_t v110 = v57;
    uint64_t v111 = (float *)&v104[(v179 + v182) * (int)v46];
    if (v110 == 2)
    {
      if (v11 == 5) {
        cv::JacobiImpl_<float>((uint64_t)v202, (unint64_t)v210, v109, v104, v108, v46, (uint64_t)&v104[(v179 + v182) * (int)v46]);
      }
      else {
        cv::JacobiImpl_<double>((uint64_t)v202, (unint64_t)v210, v109, v104, v108, v46, (uint64_t)&v104[(v179 + v182) * (int)v46]);
      }
      if (*(void *)&v195[24]) {
        atomic_fetch_add(*(atomic_uint *volatile *)&v195[24], 1u);
      }
      if (*(void *)&v183[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v183[24], 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v183, v112);
      }
      *(void *)&v183[16] = 0;
      memset(&v183[32], 0, 24);
      if (*(uint64_t *)v183 <= 0)
      {
        *(void *)&v183[24] = 0;
        *(_DWORD *)float64x2_t v183 = *(_DWORD *)v195;
      }
      else
      {
        float64x2_t v115 = 0;
        float64x2_t v116 = v184;
        do
          *(_DWORD *)&v116[4 * v115++] = 0;
        while (v115 < *(int *)&v183[4]);
        *(void *)&v183[24] = 0;
        *(_DWORD *)float64x2_t v183 = *(_DWORD *)v195;
        if (*(int *)&v183[4] > 2) {
          goto LABEL_203;
        }
      }
      if (*(int *)&v195[4] <= 2)
      {
        *(_DWORD *)&v183[4] = *(_DWORD *)&v195[4];
        *(void *)&v183[8] = *(void *)&v195[8];
        int8x16_t v119 = v197;
        float64x2_t v120 = v185;
        *(void *)float64x2_t v185 = *(void *)v197;
        *((void *)v120 + 1) = *((void *)v119 + 1);
LABEL_204:
        float64x2_t v121 = (atomic_uint **)&v195[24];
        int8x16_t v122 = (uint64_t *)&v195[40];
        float64x2_t v123 = (char **)&v195[48];
        int8x16_t v124 = (uint64_t *)&v195[56];
        uint64_t v125 = *(float **)&v195[16];
        *(void *)&v183[16] = *(void *)&v195[16];
        float64x2_t v126 = (unint64_t *)&v195[32];
LABEL_210:
        float64x2_t v129 = *v126;
        uint64_t v130 = *v123;
        *(void *)&v183[40] = *v122;
        *(void *)&v183[48] = v130;
        *(void *)&v183[24] = *v121;
        *(void *)&v183[32] = v129;
        *(void *)&v183[56] = *v124;
        LODWORD(v176) = v181;
        if (v11 == 5) {
          cv::SVBkSb(v180, v46, *(float **)&v188[1], 0, v125, (uint64_t)v186[0], 1, *(uint64_t *)&v195[16], (const float *)v198, (unint64_t)v223, v229[0], (const float *)v176, v213, (unint64_t)v220, v111, v62, (unsigned __int8 *)&v198);
        }
        else {
          cv::SVBkSb(v180, v46, *(double **)&v188[1], 0, (double *)v125, (uint64_t)v186[0], 1, *(uint64_t *)&v195[16], v198, (unint64_t)v223, v229[0], v176, (double *)v213, (unint64_t)v220, (double *)v111, v62, (unsigned __int8 *)&v198);
        }
        if (*(void *)&v183[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v183[24], 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v183, v15);
        }
        *(void *)&v183[16] = 0;
        memset(&v183[32], 0, 24);
        if (*(int *)&v183[4] >= 1)
        {
          int v131 = 0;
          double v132 = v184;
          do
            *(_DWORD *)&v132[4 * v131++] = 0;
          while (v131 < *(int *)&v183[4]);
        }
        *(void *)&v183[24] = 0;
        if (v185 != (cv *)v186) {
          cv::fastFree((void **)v185, v15);
        }
        if (*((void *)&v188[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v188[1] + 1), 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v188, v15);
        }
        *(void *)&v188[1] = 0;
        memset(&v188[2], 0, 24);
        if (SDWORD1(v188[0]) >= 1)
        {
          double v133 = 0;
          uint64_t v134 = v189;
          do
            *(_DWORD *)&v134[4 * v133++] = 0;
          while (v133 < SDWORD1(v188[0]));
        }
        *((void *)&v188[1] + 1) = 0;
        if (v190 != (cv *)&v191) {
          cv::fastFree((void **)v190, v15);
        }
        if (*(void *)&v195[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v195[24], 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v195, v15);
        }
        *(void *)&v195[16] = 0;
        memset(&v195[32], 0, 24);
        if (*(int *)&v195[4] >= 1)
        {
          double v135 = 0;
          uint64_t v136 = v196;
          do
            *(_DWORD *)&v136[4 * v135++] = 0;
          while (v135 < *(int *)&v195[4]);
        }
        *(void *)&v195[24] = 0;
        if (v197 != (cv *)v177) {
          cv::fastFree((void **)v197, v15);
        }
        goto LABEL_237;
      }
LABEL_203:
      cv::Mat::copySize((cv::Mat *)v183, (const cv::Mat *)v195);
      goto LABEL_204;
    }
    if (v11 == 5) {
      cv::JacobiSVDImpl_<float>((uint64_t)v202, (uint64_t)v210);
    }
    else {
      cv::JacobiSVDImpl_<double>((uint64_t)v202, (uint64_t)v210);
    }
    if (v203) {
      atomic_fetch_add(v203, 1u);
    }
    if (*(void *)&v183[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v183[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v183, v114);
    }
    *(void *)&v183[16] = 0;
    memset(&v183[32], 0, 24);
    if (*(uint64_t *)v183 <= 0)
    {
      *(void *)&v183[24] = 0;
      *(_DWORD *)float64x2_t v183 = v200;
    }
    else
    {
      float64x2_t v117 = 0;
      int8x16_t v118 = v184;
      do
        *(_DWORD *)&v118[4 * v117++] = 0;
      while (v117 < *(int *)&v183[4]);
      *(void *)&v183[24] = 0;
      *(_DWORD *)float64x2_t v183 = v200;
      if (*(int *)&v183[4] > 2) {
        goto LABEL_208;
      }
    }
    if (SHIDWORD(v200) <= 2)
    {
      *(_DWORD *)&v183[4] = HIDWORD(v200);
      *(void *)&v183[8] = v201;
      float64x2_t v127 = v209;
      int8x16_t v128 = v185;
      *(void *)float64x2_t v185 = *(void *)v209;
      *((void *)v128 + 1) = *((void *)v127 + 1);
LABEL_209:
      float64x2_t v121 = &v203;
      int8x16_t v122 = &v205;
      float64x2_t v123 = &v206;
      int8x16_t v124 = &v207;
      uint64_t v125 = (float *)v202;
      *(void *)&v183[16] = v202;
      float64x2_t v126 = &v204;
      goto LABEL_210;
    }
LABEL_208:
    cv::Mat::copySize((cv::Mat *)v183, (const cv::Mat *)&v200);
    goto LABEL_209;
  }
  if (v11 == 5)
  {
    if (!cv::LU(v202, (unint64_t)v210, v46, (int *)v213, (unint64_t)v220, v181)) {
      goto LABEL_175;
    }
  }
  else if (!cv::LU(v202, (unint64_t)v210, v46, (uint64_t *)v213, (unint64_t)v220, v181))
  {
    goto LABEL_175;
  }
LABEL_237:
  float64x2_t v113 = 1;
LABEL_238:
  if (v203 && atomic_fetch_add(v203, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v200, v15);
  }
  unint64_t v202 = 0;
  uint64_t v205 = 0;
  int v206 = 0;
  double v204 = 0;
  if (SHIDWORD(v200) >= 1)
  {
    int v137 = 0;
    uint64_t v138 = v208;
    do
      *((_DWORD *)v138 + v137++) = 0;
    while (v137 < SHIDWORD(v200));
  }
  double v203 = 0;
  if (v209 != (cv *)&v210) {
    cv::fastFree((void **)v209, v15);
  }
  if (v214 && atomic_fetch_add(v214, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)__p, v15);
  }
  v213 = 0;
  v215 = 0;
  v217 = 0;
  uint64_t v216 = 0;
  if (SHIDWORD(__p[0]) >= 1)
  {
    uint64_t v139 = 0;
    BOOL v140 = v218;
    do
      *(_DWORD *)(v140 + 4 * v139++) = 0;
    while (v139 < SHIDWORD(__p[0]));
  }
  v214 = 0;
  if (v219 != (cv *)&v220) {
    cv::fastFree((void **)v219, v15);
  }
  if ((void)v224 && atomic_fetch_add((atomic_uint *volatile)v224, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v221, v15);
  }
  v223 = 0;
  v225 = 0uLL;
  *((void *)&v224 + 1) = 0;
  if (v222[0] >= 1)
  {
    char v141 = 0;
    uint64_t v142 = v227;
    do
      v142[v141++] = 0;
    while (v141 < v222[0]);
  }
  *(void *)&v224 = 0;
  if (v228 != (cv *)v229) {
    cv::fastFree((void **)v228, v15);
  }
  if (v251 != &v253 && v251 != 0) {
    MEMORY[0x22A641760]();
  }
LABEL_267:
  if ((void)v234 && atomic_fetch_add((atomic_uint *volatile)v234, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v230, v15);
  }
  v233 = 0;
  *((void *)&v234 + 1) = 0;
  v235 = 0uLL;
  if ((int)v231 >= 1)
  {
    uint64_t v144 = 0;
    uint64_t v145 = v237;
    do
      *(_DWORD *)(v145 + 4 * v144++) = 0;
    while (v144 < (int)v231);
  }
  *(void *)&v234 = 0;
  if (v238 != (cv *)&v239) {
    cv::fastFree((void **)v238, v15);
  }
  if (v244 && atomic_fetch_add(v244, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v240, v15);
  }
  v243 = 0;
  v245 = 0;
  v247 = 0;
  v246 = 0;
  if (SHIDWORD(v240) >= 1)
  {
    float64x2_t v146 = 0;
    float64x2_t v147 = v248;
    do
      *(_DWORD *)(v147 + 4 * v146++) = 0;
    while (v146 < SHIDWORD(v240));
  }
  v244 = 0;
  if (v249 != (cv *)&v250) {
    cv::fastFree((void **)v249, v15);
  }
  return v113;
}

void sub_225EF3CCC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void cv::SVBkSb(cv *this, int a2, float *a3, uint64_t a4, float *a5, uint64_t a6, int a7, uint64_t a8, const float *a9, unint64_t a10, uint64_t a11, const float *a12, float *a13, unint64_t a14, float *a15, unint64_t a16, unsigned __int8 *a17)
{
  unint64_t v21 = a10;
  unint64_t v93 = a14 >> 2;
  if (a2 >= (int)this) {
    uint64_t v22 = this;
  }
  else {
    uint64_t v22 = a2;
  }
  uint64_t v96 = v22;
  unsigned int v90 = this;
  if (a10) {
    uint64_t v23 = a12;
  }
  else {
    uint64_t v23 = this;
  }
  if (a2 >= 1)
  {
    uint64_t v24 = 0;
    uint64_t v25 = a2;
    do
    {
      if ((int)v23 >= 1)
      {
        bzero((char *)a13 + (v24 >> 30), 4 * v23);
        unint64_t v21 = a10;
      }
      v24 += v93 << 32;
      --v25;
    }
    while (v25);
  }
  uint64_t v26 = a3;
  if ((int)v96 >= 1)
  {
    unsigned int v27 = a2;
    uint64_t v28 = (float64x2_t *)(((unint64_t)a15 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = (int)(a6 >> 2);
    if (a4) {
      uint64_t v30 = (int)(a4 >> 2);
    }
    else {
      uint64_t v30 = 1;
    }
    double v31 = 0.0;
    uint64_t v32 = a3;
    uint64_t v33 = v96;
    do
    {
      double v31 = v31 + *v32;
      v32 += v30;
      --v33;
    }
    while (v33);
    uint64_t v34 = 0;
    uint64_t v35 = (int)v23 - 4;
    uint64_t v36 = v90;
    double v37 = v31 * 4.4408921e-16;
    uint64_t v38 = (int)v93;
    BOOL v39 = a7 == 0;
    uint64_t v40 = (int)((uint64_t)a9 >> 2);
    if (a7) {
      uint64_t v41 = 1;
    }
    else {
      uint64_t v41 = (int)(a6 >> 2);
    }
    uint64_t v89 = v41;
    if (v39) {
      uint64_t v29 = 1;
    }
    uint64_t v42 = 4 * (int)(a11 >> 2);
    uint64_t v92 = v30;
    unint64_t v94 = v21 + 8;
    uint64_t v43 = 4 * v29;
    uint64_t v44 = v28 + 1;
    uint64_t v45 = 4 * v41;
    uint64_t v46 = 4 * v38;
    unsigned int v47 = v27;
    uint64_t v48 = 4 * v27;
    uint64_t v49 = 4 * v40;
    uint64_t v50 = v47;
    uint64_t v87 = v43;
    uint64_t v85 = 4 * v40;
    uint64_t v86 = 4 * v41;
    do
    {
      double v51 = v26[v34 * v30];
      if (fabs(v51) > v37)
      {
        double v52 = 1.0 / v51;
        if (v23 == 1)
        {
          if (v21)
          {
            double v53 = 0.0;
            int v54 = a5;
            uint64_t v55 = (float *)v21;
            uint64_t v56 = v36;
            do
            {
              double v53 = v53 + (float)(*v54 * *v55);
              uint64_t v55 = (float *)((char *)v55 + v42);
              int v54 = (float *)((char *)v54 + v45);
              --v56;
            }
            while (v56);
          }
          else
          {
            double v53 = *a5;
          }
          uint64_t v67 = 0;
          double v68 = v52 * v53;
          unint64_t v69 = a13;
          do
          {
            float v70 = *v69 + v68 * *(float *)(a8 + v67);
            float *v69 = v70;
            v67 += 4;
            unint64_t v69 = (float *)((char *)v69 + v46);
          }
          while (v48 != v67);
        }
        else
        {
          if (v21)
          {
            if ((int)v23 > 0)
            {
              bzero(v28, 8 * v23);
              uint64_t v49 = v85;
              uint64_t v45 = v86;
              uint64_t v44 = v28 + 1;
              uint64_t v43 = v87;
              uint64_t v41 = v89;
              uint64_t v36 = v90;
              uint64_t v30 = v92;
              unint64_t v21 = a10;
              uint64_t v26 = a3;
            }
            uint64_t v57 = 0;
            unint64_t v58 = v21;
            double v59 = (float32x2_t *)v94;
            do
            {
              float v60 = a5[v57 * v41];
              if ((int)v23 >= 4)
              {
                uint64_t v61 = 0;
                float v62 = v44;
                float v63 = v59;
                do
                {
                  v62[-1] = vaddq_f64(v62[-1], vcvtq_f64_f32(vmul_n_f32(v63[-1], v60)));
                  float32x2_t v64 = *v63;
                  v63 += 2;
                  *float v62 = vaddq_f64(*v62, vcvtq_f64_f32(vmul_n_f32(v64, v60)));
                  v62 += 2;
                  v61 += 4;
                }
                while (v61 <= v35);
                uint64_t v61 = v61;
              }
              else
              {
                uint64_t v61 = 0;
              }
              if ((int)v61 < (int)v23)
              {
                do
                {
                  v28->f64[v61] = v28->f64[v61] + (float)(v60 * *(float *)(v58 + 4 * v61));
                  ++v61;
                }
                while (v23 != v61);
              }
              ++v57;
              double v59 = (float32x2_t *)((char *)v59 + v42);
              v58 += v42;
            }
            while (v57 != v36);
            if ((int)v23 >= 1)
            {
              int v65 = (double *)(((unint64_t)a15 + 7) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v66 = v23;
              do
              {
                *int v65 = v52 * *v65;
                ++v65;
                --v66;
              }
              while (v66);
            }
          }
          else if ((int)v23 >= 1)
          {
            uint64_t v71 = a5;
            uint64_t v72 = (double *)(((unint64_t)a15 + 7) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v73 = v23;
            do
            {
              *v72++ = v52 * *v71;
              uint64_t v71 = (float *)((char *)v71 + v45);
              --v73;
            }
            while (v73);
          }
          uint64_t v74 = 0;
          unint64_t v75 = (unint64_t)a13;
          do
          {
            float v76 = *(float *)(a8 + 4 * v74);
            if ((int)v23 >= 4)
            {
              uint64_t v77 = 0;
              float64x2_t v78 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v76), 0);
              double v79 = (float32x2_t *)v75;
              double v80 = (float64x2_t *)(((unint64_t)a15 + 7) & 0xFFFFFFFFFFFFFFF8);
              do
              {
                float64x2_t v81 = *v80;
                float64x2_t v82 = v80[1];
                v80 += 2;
                *(float32x4_t *)v79->f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(*v79), v81, v78)), vmlaq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v79->f32), v82, v78));
                v79 += 2;
                v77 += 4;
              }
              while (v77 <= v35);
              uint64_t v77 = v77;
            }
            else
            {
              uint64_t v77 = 0;
            }
            if ((int)v77 < (int)v23)
            {
              double v83 = v76;
              do
              {
                float v84 = *(float *)(v75 + 4 * v77) + v83 * v28->f64[v77];
                *(float *)(v75 + 4 * v77++) = v84;
              }
              while (v23 != v77);
            }
            ++v74;
            v75 += v46;
          }
          while (v74 != v50);
        }
      }
      ++v34;
      a5 = (float *)((char *)a5 + v43);
      a8 += v49;
    }
    while (v34 != v96);
  }
}

void cv::SVBkSb(cv *this, uint64_t a2, double *a3, uint64_t a4, double *a5, uint64_t a6, int a7, uint64_t a8, const double *a9, unint64_t a10, unint64_t a11, const double *a12, double *a13, unint64_t a14, double *a15, unint64_t a16, unsigned __int8 *a17)
{
  unint64_t v62 = a14 >> 3;
  if (a7) {
    int v21 = 1;
  }
  else {
    int v21 = (unint64_t)a6 >> 3;
  }
  int v56 = v21;
  if ((int)a2 >= (int)this) {
    uint64_t v22 = this;
  }
  else {
    uint64_t v22 = a2;
  }
  uint64_t v60 = v22;
  unsigned int v57 = this;
  if (a10) {
    uint64_t v23 = a12;
  }
  else {
    uint64_t v23 = this;
  }
  if ((int)a2 >= 1)
  {
    uint64_t v24 = 0;
    uint64_t v25 = a2;
    do
    {
      if ((int)v23 >= 1) {
        bzero((char *)a13 + (v24 >> 29), 8 * v23);
      }
      v24 += v62 << 32;
      --v25;
    }
    while (v25);
  }
  uint64_t v26 = v60;
  uint64_t v27 = a10;
  uint64_t v28 = a3;
  if ((int)v60 >= 1)
  {
    int v29 = a7;
    unint64_t v55 = a11 >> 3;
    float32x2_t v64 = (void *)(((unint64_t)a15 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v30 = (int)(a6 >> 3);
    if (a4) {
      uint64_t v31 = (int)(a4 >> 3);
    }
    else {
      uint64_t v31 = 1;
    }
    double v32 = 0.0;
    uint64_t v33 = a3;
    uint64_t v34 = v60;
    do
    {
      double v32 = v32 + *v33;
      v33 += v31;
      --v34;
    }
    while (v34);
    uint64_t v35 = 0;
    if (!v29) {
      uint64_t v30 = 1;
    }
    uint64_t v36 = 8 * v30;
    double v37 = v32 * 4.4408921e-16;
    uint64_t v38 = 8 * v56;
    uint64_t v39 = 8 * (int)((uint64_t)a9 >> 3);
    uint64_t v54 = v31;
    uint64_t v59 = 8 * v30;
    do
    {
      double v40 = v28[v35 * v31];
      if (fabs(v40) > v37)
      {
        double v41 = 1.0 / v40;
        if (v23 == 1)
        {
          if (v27)
          {
            double v42 = 0.0;
            uint64_t v43 = a5;
            uint64_t v44 = (double *)v27;
            uint64_t v45 = v57;
            do
            {
              double v42 = v42 + *v43 * *v44;
              v44 += (int)v55;
              uint64_t v43 = (double *)((char *)v43 + v38);
              --v45;
            }
            while (v45);
          }
          else
          {
            double v42 = *a5;
          }
          uint64_t v48 = 0;
          double v49 = v41 * v42;
          uint64_t v50 = a13;
          do
          {
            *uint64_t v50 = *v50 + v49 * *(double *)(a8 + v48);
            v48 += 8;
            v50 += (int)v62;
          }
          while (8 * a2 != v48);
        }
        else
        {
          if (v27)
          {
            if ((int)v23 <= 0)
            {
              cv::MatrAXPY<double,double,double>(v57, (int)a12, v27, v55, (uint64_t)a5, v56, (uint64_t)v64, 0);
            }
            else
            {
              bzero(v64, 8 * v23);
              cv::MatrAXPY<double,double,double>(v57, (int)a12, v27, v55, (uint64_t)a5, v56, (uint64_t)v64, 0);
              uint64_t v46 = (double *)(((unint64_t)a15 + 7) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v31 = v54;
              uint64_t v47 = v23;
              do
              {
                double *v46 = v41 * *v46;
                ++v46;
                --v47;
              }
              while (v47);
            }
          }
          else if ((int)v23 >= 1)
          {
            double v51 = a5;
            double v52 = (double *)(((unint64_t)a15 + 7) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v53 = v23;
            do
            {
              *v52++ = v41 * *v51;
              double v51 = (double *)((char *)v51 + v38);
              --v53;
            }
            while (v53);
          }
          cv::MatrAXPY<double,double,double>(a2, v23, (uint64_t)v64, 0, a8, 1, (uint64_t)a13, v62);
          uint64_t v27 = a10;
          uint64_t v28 = a3;
          uint64_t v36 = v59;
          uint64_t v26 = v60;
          uint64_t v39 = 8 * (int)((uint64_t)a9 >> 3);
        }
      }
      ++v35;
      a5 = (double *)((char *)a5 + v36);
      a8 += v39;
    }
    while (v35 != v26);
  }
}

uint64_t cv::eigen(cv *this, const cv::_InputArray *a2, BOOL a3, const cv::_OutputArray *a4, const cv::_OutputArray *a5)
{
  void (***v5)(uint64_t *__return_ptr);
  uint64_t v6;
  uint64_t v7;
  cv::_OutputArray *v8;
  cv::_OutputArray *v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  const cv::Exception *v14;
  int v15;
  const cv::Exception *v16;
  void *v17;
  uint64_t v18;
  unsigned char *v19;
  cv *v20;
  cv *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v42;
  unsigned char *v43;
  uint64_t v44;
  uint64_t v45;
  cv::_OutputArray *v47;
  unsigned char v48[17];
  void *__p;
  _DWORD v50[2];
  uint64_t v51;
  atomic_uint *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _DWORD *v57;
  cv *v58;
  void v59[2];
  void *v60;
  _DWORD v61[2];
  long long *v62;
  atomic_uint *v63;
  long long *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _DWORD *v68;
  cv *v69;
  int v70[2];
  uint64_t v71;
  unsigned char v72[64];
  unsigned char *v73;
  cv *v74;
  unint64_t v75[2];
  uint64_t v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  atomic_uint *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  cv *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  long long v90;
  long long v91;
  uint64_t v92;
  uint64_t v93;
  cv *v94;
  void v95[509];

  float64x2_t v5 = (void (***)(uint64_t *__return_ptr))MEMORY[0x270FA5388](this, a2);
  BOOL v7 = v6;
  unint64_t v9 = v8;
  unint64_t v11 = v10;
  v95[507] = *MEMORY[0x263EF8340];
  (**v5)(&v76);
  uint64_t v12 = v76;
  unint64_t v13 = v77;
  if (v77 != v78)
  {
    std::string::basic_string[abi:ne180100]<0>(v72, "src.rows == src.cols");
    std::string::basic_string[abi:ne180100]<0>(&v60, "eigen");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/lapack.cpp");
    cv::Exception::Exception(&v87, 4294967081, v72, &v60, &__p, 1472);
    cv::error((cv *)&v87, v14);
  }
  uint64_t v15 = v76 & 0xFFF;
  if ((v15 - 5) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v72, "type == CV_32F || type == CV_64F");
    std::string::basic_string[abi:ne180100]<0>(&v60, "eigen");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/lapack.cpp");
    cv::Exception::Exception(&v87, 4294967081, v72, &v60, &__p, 1473);
    cv::error((cv *)&v87, v16);
  }
  uint64_t v73 = &v72[8];
  uint64_t v74 = (cv *)v75;
  v75[0] = 0;
  v75[1] = 0;
  *(_DWORD *)uint64_t v72 = 1124007936;
  memset(&v72[4], 0, 60);
  if (v11)
  {
    (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, void, void))(*(void *)v7 + 136))(v7, v77, v77, v76 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
    (**(void (***)(uint64_t **__return_ptr, uint64_t, uint64_t))v7)(&v87, v7, 0xFFFFFFFFLL);
    if ((void)v90) {
      atomic_fetch_add((atomic_uint *volatile)v90, 1u);
    }
    if (*(void *)&v72[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v72[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v72, v17);
    }
    *(void *)&v72[16] = 0;
    memset(&v72[32], 0, 24);
    if (*(uint64_t *)v72 <= 0)
    {
      *(void *)&v72[24] = 0;
      *(_DWORD *)uint64_t v72 = v87;
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v19 = v73;
      do
        *(_DWORD *)&v19[4 * v18++] = 0;
      while (v18 < *(int *)&v72[4]);
      *(void *)&v72[24] = 0;
      *(_DWORD *)uint64_t v72 = v87;
      if (*(int *)&v72[4] > 2) {
        goto LABEL_19;
      }
    }
    if (SHIDWORD(v87) <= 2)
    {
      *(_DWORD *)&v72[4] = HIDWORD(v87);
      *(void *)&v72[8] = v88;
      double v20 = v94;
      int v21 = v74;
      *(void *)uint64_t v74 = *(void *)v94;
      *((void *)v21 + 1) = *((void *)v20 + 1);
      goto LABEL_20;
    }
LABEL_19:
    cv::Mat::copySize((cv::Mat *)v72, (const cv::Mat *)&v87);
LABEL_20:
    *(_OWORD *)&v72[40] = v91;
    *(_OWORD *)&v72[24] = v90;
    *(void *)&v72[16] = v89;
    *(void *)&v72[56] = v92;
    if ((void)v90 && atomic_fetch_add((atomic_uint *volatile)v90, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v87, v17);
    }
    uint64_t v89 = 0;
    int8x16_t v91 = 0uLL;
    *((void *)&v90 + 1) = 0;
    if (SHIDWORD(v87) >= 1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = v93;
      do
        *(_DWORD *)(v23 + 4 * v22++) = 0;
      while (v22 < SHIDWORD(v87));
    }
    *(void *)&unsigned int v90 = 0;
    if (v94 != (cv *)v95) {
      cv::fastFree((void **)v94, v17);
    }
  }
  uint64_t v47 = v9;
  if (SHIDWORD(v76) < 1) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *((void *)v85 + (HIDWORD(v76) - 1));
  }
  uint64_t v25 = v24 * v13;
  uint64_t v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v27 = v26 * v13;
  uint64_t v87 = &v89;
  uint64_t v88 = 4104;
  if (5 * v25 + v27 + 32 >= 0x1009)
  {
    uint64_t v88 = 5 * v13 * v24 + v26 * v13 + 32;
    operator new[]();
  }
  v61[0] = v13;
  v61[1] = v13;
  unint64_t v62 = &v90;
  float v63 = 0;
  double v68 = v61;
  unint64_t v69 = (cv *)v70;
  uint64_t v28 = (((v12 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v15 & 7))) & 3);
  int v29 = v28 * (uint64_t)v13;
  if (v13 == 1) {
    uint64_t v30 = (((v12 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v15 & 7))) & 3);
  }
  else {
    uint64_t v30 = (v24 * v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  if (v30 == v29 || v26 == 0) {
    double v32 = 0x4000;
  }
  else {
    double v32 = 0;
  }
  if (v26) {
    int v29 = v30;
  }
  LODWORD(v60) = v15 | 0x42FF0000 | v32;
  HIDWORD(v60) = 2;
  *(void *)float v70 = v29;
  uint64_t v71 = (((v12 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v15 & 7))) & 3);
  uint64_t v66 = (char *)&v90 + v29 * v13;
  uint64_t v67 = 0;
  float32x2_t v64 = &v90;
  int v65 = (uint64_t)&v66[v28 * (uint64_t)v13 - v29];
  v50[0] = v13;
  v50[1] = 1;
  double v51 = (uint64_t)&v90 + v27;
  double v52 = 0;
  unsigned int v57 = v50;
  unint64_t v58 = (cv *)v59;
  LODWORD(__p) = v15 | 0x42FF4000;
  HIDWORD(__p) = 2;
  v59[0] = v71;
  v59[1] = v71;
  unint64_t v55 = (char *)&v90 + v27 + v28 * (uint64_t)v13;
  int v56 = 0;
  uint64_t v53 = (char *)&v90 + v27;
  uint64_t v54 = v55;
  cv::_OutputArray::_OutputArray((uint64_t)v48, (cv::Mat *)&v60);
  cv::Mat::copyTo((cv::Mat *)&v76, (const cv::_OutputArray *)v48);
  uint64_t v33 = (char *)&v90 + v27 + v25;
  if (v15 == 5) {
    uint64_t v34 = cv::JacobiImpl_<float>((uint64_t)v62, *(unint64_t *)v70, v51, *(char **)&v72[16], v75[0], v13, (uint64_t)v33);
  }
  else {
    uint64_t v34 = cv::JacobiImpl_<double>((uint64_t)v62, *(unint64_t *)v70, v51, *(char **)&v72[16], v75[0], v13, (uint64_t)v33);
  }
  uint64_t v35 = v34;
  cv::Mat::copyTo((cv::Mat *)&__p, v47);
  if (v52 && atomic_fetch_add(v52, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&__p, v36);
  }
  double v51 = 0;
  uint64_t v54 = 0;
  unint64_t v55 = 0;
  uint64_t v53 = 0;
  if (SHIDWORD(__p) >= 1)
  {
    double v37 = 0;
    uint64_t v38 = v57;
    do
      v38[v37++] = 0;
    while (v37 < SHIDWORD(__p));
  }
  double v52 = 0;
  if (v58 != (cv *)v59) {
    cv::fastFree((void **)v58, v36);
  }
  if (v63 && atomic_fetch_add(v63, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v60, v36);
  }
  unint64_t v62 = 0;
  int v65 = 0;
  uint64_t v66 = 0;
  float32x2_t v64 = 0;
  if (SHIDWORD(v60) >= 1)
  {
    uint64_t v39 = 0;
    double v40 = v68;
    do
      v40[v39++] = 0;
    while (v39 < SHIDWORD(v60));
  }
  float v63 = 0;
  if (v69 != (cv *)v70) {
    cv::fastFree((void **)v69, v36);
  }
  if (v87 != &v89 && v87 != 0) {
    MEMORY[0x22A641760]();
  }
  if (*(void *)&v72[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v72[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v72, v36);
  }
  *(void *)&v72[16] = 0;
  memset(&v72[32], 0, 24);
  if (*(int *)&v72[4] >= 1)
  {
    double v42 = 0;
    uint64_t v43 = v73;
    do
      *(_DWORD *)&v43[4 * v42++] = 0;
    while (v42 < *(int *)&v72[4]);
  }
  *(void *)&v72[24] = 0;
  if (v74 != (cv *)v75) {
    cv::fastFree((void **)v74, v36);
  }
  if (v80 && atomic_fetch_add(v80, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v76, v36);
  }
  double v79 = 0;
  float64x2_t v81 = 0;
  float64x2_t v82 = 0;
  double v83 = 0;
  if (SHIDWORD(v76) >= 1)
  {
    uint64_t v44 = 0;
    uint64_t v45 = v84;
    do
      *(_DWORD *)(v45 + 4 * v44++) = 0;
    while (v44 < SHIDWORD(v76));
  }
  double v80 = 0;
  if (v85 != (cv *)&v86) {
    cv::fastFree((void **)v85, v36);
  }
  return v35;
}

void sub_225EF4E18(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  cv::Mat::~Mat((cv::Mat *)&a40, a2);
  cv::Mat::~Mat((cv::Mat *)&a52, v53);
  _Unwind_Resume(a1);
}

void cv::_SVDcompute(cv *this, const cv::_InputArray *a2, const cv::_OutputArray *a3, const cv::_OutputArray *a4, const cv::_OutputArray *a5)
{
  void (***v5)(uint64_t *__return_ptr);
  char v6;
  char v7;
  const cv::_OutputArray *v8;
  const cv::_OutputArray *v9;
  const cv::_InputArray *v10;
  const cv::_InputArray *v11;
  const cv::_OutputArray *v12;
  const cv::_OutputArray *v13;
  __int32 v14;
  __int32 v15;
  __int16 v16;
  int v17;
  const cv::Exception *v18;
  __int32 v19;
  __int32 v20;
  __int32 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  int v35;
  unsigned char *v36;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v43;
  unsigned int v44;
  uint64_t v45;
  const cv::_OutputArray *v46;
  void *v47;
  unsigned int (*v48)(const cv::_InputArray *);
  const cv::_OutputArray *v49;
  cv::Mat *p_p;
  const cv::_OutputArray *v51;
  uint64_t v52;
  unsigned char *v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v61;
  uint64_t v62;
  __int32 v63;
  const cv::_OutputArray *v64;
  const cv::_OutputArray *v65;
  unsigned int v66;
  unsigned char v67[32];
  int64x2_t v68;
  long long v69;
  long long v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned char v77[64];
  unsigned char *v78;
  cv *v79;
  uint64_t v80;
  uint64_t v81;
  void *__p;
  _DWORD v83[2];
  unsigned char *v84;
  atomic_uint *v85;
  unsigned char *v86;
  uint64_t v87;
  unsigned char *v88;
  uint64_t v89;
  _DWORD *v90;
  cv *v91;
  uint64_t v92[2];
  void *v93;
  _DWORD v94[2];
  unsigned char *v95;
  atomic_uint *v96;
  unsigned char *v97;
  unsigned char *v98;
  unsigned char *v99;
  uint64_t v100;
  _DWORD *v101;
  cv *v102;
  void v103[2];
  void *v104;
  _DWORD v105[2];
  unsigned char *v106;
  atomic_uint *v107;
  unsigned char *v108;
  uint64_t v109;
  unsigned char *v110;
  uint64_t v111;
  _DWORD *v112;
  cv *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int32 v117;
  __int32 v118;
  uint64_t v119;
  atomic_uint *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  cv *v125;
  uint64_t v126;
  unsigned char *v127;
  uint64_t v128;
  unsigned char v129[4120];
  uint64_t v130;

  float64x2_t v5 = (void (***)(uint64_t *__return_ptr))MEMORY[0x270FA5388](this, a2);
  BOOL v7 = v6;
  unint64_t v9 = v8;
  unint64_t v11 = v10;
  unint64_t v13 = v12;
  uint64_t v130 = *MEMORY[0x263EF8340];
  (**v5)(&v116);
  uint64_t v14 = v118;
  uint64_t v15 = v117;
  double v16 = v116;
  if ((*(uint64_t (**)(const cv::_InputArray *))(*(void *)v11 + 112))(v11)) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = (*(uint64_t (**)(const cv::_OutputArray *))(*(void *)v9 + 112))(v9);
  }
  uint64_t v66 = v16 & 0xFFF;
  if (v66 - 5 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v104, "type == CV_32F || type == CV_64F");
    std::string::basic_string[abi:ne180100]<0>(&v93, "_SVDcompute");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/lapack.cpp");
    cv::Exception::Exception(&v127, 4294967081, &v104, &v93, &__p, 1518);
    cv::error((cv *)&v127, v18);
  }
  if ((v7 & 2) != 0)
  {
    (*(void (**)(const cv::_InputArray *))(*(void *)v11 + 152))(v11);
    (*(void (**)(const cv::_OutputArray *))(*(void *)v9 + 152))(v9);
    uint64_t v17 = 0;
    if (v15 <= v14) {
      uint64_t v19 = v14;
    }
    else {
      uint64_t v19 = v15;
    }
    if (v15 >= v14) {
      double v20 = v14;
    }
    else {
      double v20 = v15;
    }
    int v21 = v20;
  }
  else
  {
    if (v15 <= v14) {
      uint64_t v19 = v14;
    }
    else {
      uint64_t v19 = v15;
    }
    if (v15 >= v14) {
      double v20 = v14;
    }
    else {
      double v20 = v15;
    }
    if ((v7 & 4) != 0) {
      int v21 = v19;
    }
    else {
      int v21 = v20;
    }
  }
  int v65 = v9;
  float32x2_t v64 = v13;
  float v63 = v14;
  if (SHIDWORD(v116) < 1) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *((void *)v125 + (HIDWORD(v116) - 1));
  }
  uint64_t v23 = (v22 * v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v24 = v22 * v20;
  uint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v26 = v23 * v21;
  float64x2_t v127 = v129;
  int8x16_t v128 = 4104;
  if (v24 + v25 * v20 + v26 + 32 >= 0x1009)
  {
    int8x16_t v128 = v24 + v25 * v20 + v26 + 32;
    operator new[]();
  }
  v105[0] = v20;
  v105[1] = v19;
  float64x2_t v106 = v129;
  float64x2_t v107 = 0;
  float64x2_t v112 = v105;
  float64x2_t v113 = (cv *)&v114;
  uint64_t v27 = ((v66 >> 3) + 1) << ((0xFA50u >> (2 * (v66 & 7))) & 3);
  uint64_t v28 = v27 * (uint64_t)v19;
  if (v20 == 1) {
    int v29 = v27 * (uint64_t)v19;
  }
  else {
    int v29 = (v22 * v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  if (v21 == 1) {
    uint64_t v30 = v27 * (uint64_t)v19;
  }
  else {
    uint64_t v30 = (v22 * v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  if (v23) {
    uint64_t v31 = v29;
  }
  else {
    uint64_t v31 = v27 * (uint64_t)v19;
  }
  if (v23) {
    double v32 = v30;
  }
  else {
    double v32 = v27 * (uint64_t)v19;
  }
  if (v29 == v28 || v23 == 0) {
    uint64_t v34 = 0x4000;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = v66 | 0x42FF0000;
  HIDWORD(v104) = 2;
  LODWORD(v104) = v66 | 0x42FF0000 | v34;
  float64x2_t v114 = v31;
  float64x2_t v115 = ((v66 >> 3) + 1) << ((0xFA50u >> (2 * (v66 & 7))) & 3);
  uint64_t v111 = 0;
  unint64_t v110 = &v129[v31 * v20];
  float64x2_t v108 = v129;
  float64x2_t v109 = (uint64_t)&v110[v27 * (uint64_t)v19 - v31];
  v94[0] = v20;
  v94[1] = 1;
  uint64_t v36 = &v129[v26];
  BOOL v95 = &v129[v26];
  uint64_t v96 = 0;
  uint64_t v101 = v94;
  int v102 = (cv *)v103;
  HIDWORD(v93) = 2;
  LODWORD(v93) = v66 | 0x42FF4000;
  v103[0] = v115;
  v103[1] = v115;
  uint64_t v99 = &v129[v26 + v27 * (uint64_t)v20];
  float v100 = 0;
  uint64_t v97 = &v129[v26];
  uint64_t v98 = v99;
  v83[0] = v21;
  v83[1] = v19;
  float v84 = v129;
  uint64_t v85 = 0;
  unsigned int v90 = v83;
  int8x16_t v91 = (cv *)v92;
  if (v30 == v28 || v23 == 0) {
    uint64_t v38 = 0x4000;
  }
  else {
    uint64_t v38 = 0;
  }
  HIDWORD(__p) = 2;
  LODWORD(__p) = v35 | v38;
  v92[0] = v32;
  v92[1] = ((v66 >> 3) + 1) << ((0xFA50u >> (2 * (v66 & 7))) & 3);
  uint64_t v88 = &v129[v32 * v21];
  uint64_t v89 = 0;
  uint64_t v86 = v129;
  uint64_t v87 = (uint64_t)&v88[v27 * (uint64_t)v19 - v32];
  float64x2_t v78 = &v77[8];
  double v79 = (cv *)&v80;
  double v80 = 0;
  float64x2_t v81 = 0;
  *(_DWORD *)uint64_t v77 = 1124007936;
  memset(&v77[4], 0, 60);
  if (v17)
  {
    uint64_t v39 = v27 * (uint64_t)v20;
    double v40 = (unint64_t)&v36[v24 + 15] & 0xFFFFFFFFFFFFFFF0;
    v68.i32[2] = v20;
    v68.i32[3] = v20;
    unint64_t v69 = v40;
    uint64_t v73 = &v68.i64[1];
    uint64_t v74 = &v75;
    if (v20 == 1) {
      double v41 = ((v66 >> 3) + 1) << ((0xFA50u >> (2 * (v66 & 7))) & 3);
    }
    else {
      double v41 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (v41 == v39 || v25 == 0) {
      uint64_t v43 = 0x4000;
    }
    else {
      uint64_t v43 = 0;
    }
    uint64_t v44 = v35 | v43;
    v68.i32[0] = v44;
    if (v25) {
      uint64_t v45 = v41;
    }
    else {
      uint64_t v45 = v27 * (uint64_t)v20;
    }
    unint64_t v75 = v45;
    float v76 = ((v66 >> 3) + 1) << ((0xFA50u >> (2 * (v66 & 7))) & 3);
    uint64_t v71 = v40 + v45 * v20;
    uint64_t v72 = 0;
    *(void *)&float v70 = (unint64_t)&v36[v24 + 15] & 0xFFFFFFFFFFFFFFF0;
    *((void *)&v70 + 1) = v71 - v45 + v39;
    *(void *)uint64_t v77 = v44 | 0x200000000;
    *(_DWORD *)&v77[8] = v20;
    *(_DWORD *)&v77[12] = v20;
    double v80 = v45;
    float64x2_t v81 = v76;
    *(_OWORD *)&v77[32] = v70;
    *(_OWORD *)&v77[16] = (unint64_t)v70;
    *(_OWORD *)&v77[48] = v71;
  }
  if (v21 > v20)
  {
    double v68 = 0uLL;
    unint64_t v69 = 0uLL;
    cv::Mat::operator=((uint64_t)&__p, &v68);
  }
  if (v15 >= v63)
  {
    cv::_InputArray::_InputArray((uint64_t)&v68, (const cv::Mat *)&v116);
    cv::_OutputArray::_OutputArray((uint64_t)v67, (cv::Mat *)&v104);
    cv::transpose((void (***)(uint64_t *__return_ptr))&v68, (const cv::_InputArray *)v67, v46);
  }
  else
  {
    cv::_OutputArray::_OutputArray((uint64_t)&v68, (cv::Mat *)&v104);
    cv::Mat::copyTo((cv::Mat *)&v116, (const cv::_OutputArray *)&v68);
  }
  if (v66 == 5) {
    cv::JacobiSVDImpl_<float>((uint64_t)v106, v92[0]);
  }
  else {
    cv::JacobiSVDImpl_<double>((uint64_t)v106, v92[0]);
  }
  if ((*(unsigned int (**)(const cv::_OutputArray *))(*(void *)v64 + 112))(v64)) {
    cv::Mat::copyTo((cv::Mat *)&v93, v64);
  }
  if (v17)
  {
    uint64_t v48 = *(unsigned int (**)(const cv::_InputArray *))(*(void *)v11 + 112);
    if (v15 >= v63)
    {
      if (v48(v11))
      {
        cv::_InputArray::_InputArray((uint64_t)&v68, (const cv::Mat *)&__p);
        cv::transpose((void (***)(uint64_t *__return_ptr))&v68, v11, v51);
      }
      if ((*(uint64_t (**)(const cv::_OutputArray *))(*(void *)v65 + 112))(v65))
      {
        p_p = (cv::Mat *)v77;
        goto LABEL_86;
      }
    }
    else
    {
      if (v48(v11))
      {
        cv::_InputArray::_InputArray((uint64_t)&v68, (const cv::Mat *)v77);
        cv::transpose((void (***)(uint64_t *__return_ptr))&v68, v11, v49);
      }
      if ((*(unsigned int (**)(const cv::_OutputArray *))(*(void *)v65 + 112))(v65))
      {
        p_p = (cv::Mat *)&__p;
LABEL_86:
        cv::Mat::copyTo(p_p, v65);
      }
    }
  }
  if (*(void *)&v77[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v77[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v77, v47);
  }
  *(void *)&v77[16] = 0;
  memset(&v77[32], 0, 24);
  if (*(int *)&v77[4] >= 1)
  {
    double v52 = 0;
    uint64_t v53 = v78;
    do
      *(_DWORD *)&v53[4 * v52++] = 0;
    while (v52 < *(int *)&v77[4]);
  }
  *(void *)&v77[24] = 0;
  if (v79 != (cv *)&v80) {
    cv::fastFree((void **)v79, v47);
  }
  if (v85 && atomic_fetch_add(v85, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&__p, v47);
  }
  float v84 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  uint64_t v86 = 0;
  if (SHIDWORD(__p) >= 1)
  {
    uint64_t v54 = 0;
    unint64_t v55 = v90;
    do
      v55[v54++] = 0;
    while (v54 < SHIDWORD(__p));
  }
  uint64_t v85 = 0;
  if (v91 != (cv *)v92) {
    cv::fastFree((void **)v91, v47);
  }
  if (v96 && atomic_fetch_add(v96, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v93, v47);
  }
  BOOL v95 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v97 = 0;
  if (SHIDWORD(v93) >= 1)
  {
    int v56 = 0;
    unsigned int v57 = v101;
    do
      v57[v56++] = 0;
    while (v56 < SHIDWORD(v93));
  }
  uint64_t v96 = 0;
  if (v102 != (cv *)v103) {
    cv::fastFree((void **)v102, v47);
  }
  if (v107 && atomic_fetch_add(v107, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v104, v47);
  }
  float64x2_t v106 = 0;
  float64x2_t v109 = 0;
  unint64_t v110 = 0;
  float64x2_t v108 = 0;
  if (SHIDWORD(v104) >= 1)
  {
    unint64_t v58 = 0;
    uint64_t v59 = v112;
    do
      v59[v58++] = 0;
    while (v58 < SHIDWORD(v104));
  }
  float64x2_t v107 = 0;
  if (v113 != (cv *)&v114) {
    cv::fastFree((void **)v113, v47);
  }
  if (v127 != v129 && v127 != 0) {
    MEMORY[0x22A641760]();
  }
  if (v120 && atomic_fetch_add(v120, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v116, v47);
  }
  int8x16_t v119 = 0;
  float64x2_t v121 = 0;
  float64x2_t v123 = 0;
  int8x16_t v122 = 0;
  if (SHIDWORD(v116) >= 1)
  {
    uint64_t v61 = 0;
    unint64_t v62 = v124;
    do
      *(_DWORD *)(v62 + 4 * v61++) = 0;
    while (v61 < SHIDWORD(v116));
  }
  float64x2_t v120 = 0;
  if (v125 != (cv *)&v126) {
    cv::fastFree((void **)v125, v47);
  }
}

void sub_225EF58A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  cv::Mat::~Mat((cv::Mat *)&a35, a2);
  cv::Mat::~Mat((cv::Mat *)&__p, v72);
  cv::Mat::~Mat((cv::Mat *)&a59, v73);
  cv::Mat::~Mat((cv::Mat *)&a71, v74);
  unint64_t v76 = STACK[0x2B0];
  if (STACK[0x2B0] != a12)
  {
    if (v76) {
      MEMORY[0x22A641760](v76, 0x1000C8077774924);
    }
  }
  cv::Mat::~Mat((cv::Mat *)&STACK[0x250], v75);
  _Unwind_Resume(a1);
}

uint64_t cv::JacobiImpl_<float>(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, unint64_t a5, int a6, uint64_t a7)
{
  if (a4)
  {
    if (a6 < 1) {
      return 1;
    }
    unint64_t v107 = a2;
    uint64_t v108 = a7;
    unint64_t v106 = a5 >> 2;
    unint64_t v10 = a5 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v11 = (a5 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    uint64_t v12 = a4;
    float64x2_t v109 = a4;
    unint64_t v13 = a4;
    uint64_t v14 = a6;
    do
    {
      bzero(v12, 4 * a6);
      *unint64_t v13 = 1065353216;
      unint64_t v13 = (_DWORD *)((char *)v13 + v11);
      v12 += v10;
      --v14;
    }
    while (v14);
    a5 = v106;
    a2 = v107;
    a7 = v108;
    a4 = v109;
  }
  unint64_t v15 = (a6 - 1);
  if (a6 >= 1)
  {
    unint64_t v16 = 0;
    unint64_t v17 = a2 >> 2;
    int v18 = 30 * a6 * a6;
    uint64_t v19 = (int *)((a7 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    double v20 = &v19[a6];
    uint64_t v21 = 4 * (a2 >> 2);
    uint64_t v22 = a1;
    uint64_t v23 = (float *)(a1 + v21);
    do
    {
      *(_DWORD *)(a3 + 4 * v16) = *(_DWORD *)(a1 + 4 * ((a2 >> 2) + 1) * v16);
      if (v16 < v15)
      {
        unint64_t v24 = v16 + 1;
        if ((int)v16 + 2 < a6)
        {
          float v25 = fabsf(*(float *)(a1 + 4 * (v17 * v16 + v24)));
          uint64_t v26 = 2;
          do
          {
            float v27 = fabsf(*(float *)(v22 + 4 * v26));
            if (v25 < v27)
            {
              LODWORD(v24) = v16 + v26;
              float v25 = v27;
            }
            ++v26;
          }
          while (v16 - a6 + v26);
        }
        v19[v16] = v24;
      }
      if (v16)
      {
        if (v16 == 1)
        {
          int v28 = 0;
        }
        else
        {
          int v28 = 0;
          float v29 = fabsf(*(float *)(a1 + 4 * v16));
          uint64_t v30 = v23;
          for (uint64_t i = 1; i != v16; ++i)
          {
            float v32 = fabsf(*v30);
            if (v29 < v32)
            {
              int v28 = i;
              float v29 = v32;
            }
            uint64_t v30 = (float *)((char *)v30 + v21);
          }
        }
        v20[v16] = v28;
      }
      ++v16;
      v22 += v21 + 4;
      ++v23;
    }
    while (v16 != a6);
    uint64_t v33 = 4 * a5;
    if (a6 >= 2 && v18)
    {
      for (int j = 0; j != v18; ++j)
      {
        uint64_t v35 = *v19;
        float v36 = fabsf(*(float *)(a1 + 4 * v35));
        if (a6 < 3)
        {
          LODWORD(v37) = 0;
        }
        else
        {
          LODWORD(v37) = 0;
          unint64_t v38 = v17;
          uint64_t v39 = 1;
          do
          {
            float v40 = fabsf(*(float *)(a1 + 4 * (v38 + v19[v39])));
            if (v36 < v40)
            {
              LODWORD(v37) = v39;
              float v36 = v40;
            }
            ++v39;
            v38 += v17;
          }
          while (v15 != v39);
          LODWORD(v35) = v19[(int)v37];
        }
        uint64_t v41 = 1;
        do
        {
          uint64_t v42 = v20[v41];
          float v43 = fabsf(*(float *)(a1 + 4 * (v41 + v17 * v42)));
          if (v36 >= v43) {
            uint64_t v37 = v37;
          }
          else {
            uint64_t v37 = v42;
          }
          if (v36 < v43)
          {
            float v36 = v43;
            LODWORD(v35) = v41;
          }
          ++v41;
        }
        while (a6 != v41);
        uint64_t v44 = v17 * (int)v37;
        uint64_t v45 = v44 + (int)v35;
        float v46 = *(float *)(a1 + 4 * v45);
        float v47 = fabsf(v46);
        if (v47 <= 0.00000011921) {
          break;
        }
        float v48 = (float)(*(float *)(a3 + 4 * (int)v35) - *(float *)(a3 + 4 * (int)v37)) * 0.5;
        float v49 = fabsf(v48);
        if (v47 <= v49)
        {
          float v50 = 0.0;
          if (v48 != 0.0) {
            float v50 = v49 * sqrtf((float)((float)(v47 / v49) * (float)(v47 / v49)) + 1.0);
          }
        }
        else
        {
          float v50 = v47 * sqrtf((float)((float)(v49 / v47) * (float)(v49 / v47)) + 1.0);
        }
        float v51 = v49 + v50;
        float v52 = fabsf(v51);
        if (v47 <= v52)
        {
          float v53 = 0.0;
          if (v51 != 0.0) {
            float v53 = v52 * sqrtf((float)((float)(v47 / v52) * (float)(v47 / v52)) + 1.0);
          }
        }
        else
        {
          float v53 = v47 * sqrtf((float)((float)(v52 / v47) * (float)(v52 / v47)) + 1.0);
        }
        float v54 = v51 / v53;
        BOOL v55 = v48 < 0.0;
        if (v48 >= 0.0) {
          float v56 = v46 * (float)(v46 / v51);
        }
        else {
          float v56 = -(float)(v46 * (float)(v46 / v51));
        }
        *(_DWORD *)(a1 + 4 * v45) = 0;
        if (v55) {
          float v57 = -(float)(v46 / v53);
        }
        else {
          float v57 = v46 / v53;
        }
        *(float *)(a3 + 4 * (int)v37) = *(float *)(a3 + 4 * (int)v37) - v56;
        *(float *)(a3 + 4 * (int)v35) = v56 + *(float *)(a3 + 4 * (int)v35);
        if ((int)v37 >= 1)
        {
          uint64_t v58 = v37;
          uint64_t v59 = a1;
          do
          {
            float v60 = *(float *)(v59 + 4 * (int)v37);
            float v61 = *(float *)(v59 + 4 * (int)v35);
            *(float *)(v59 + 4 * (int)v37) = (float)(v60 * v54) - (float)(v61 * v57);
            *(float *)(v59 + 4 * (int)v35) = (float)(v54 * v61) + (float)(v60 * v57);
            v59 += v21;
            --v58;
          }
          while (v58);
        }
        int v62 = v37 + 1;
        if ((int)v37 + 1 < (int)v35)
        {
          uint64_t v63 = v62;
          float32x2_t v64 = (float *)(a1 + 4 * (v44 + v62));
          int v65 = (float *)(a1 + 4 * ((int)v35 + v17 * v63));
          int v66 = ~v37 + v35;
          do
          {
            float v67 = *v64;
            float v68 = *v65;
            *float32x2_t v64 = (float)(*v64 * v54) - (float)(*v65 * v57);
            ++v64;
            *int v65 = (float)(v54 * v68) + (float)(v67 * v57);
            int v65 = (float *)((char *)v65 + v21);
            --v66;
          }
          while (v66);
        }
        int v69 = v35 + 1;
        if ((int)v35 + 1 < a6)
        {
          float v70 = (float *)(a1 + 4 * (v44 + v69));
          uint64_t v71 = (float *)(a1 + 4 * (v17 * (int)v35 + v69));
          int v72 = v15 - v35;
          do
          {
            float v73 = *v70;
            float v74 = *v71;
            *float v70 = (float)(*v70 * v54) - (float)(*v71 * v57);
            ++v70;
            *v71++ = (float)(v54 * v74) + (float)(v73 * v57);
            --v72;
          }
          while (v72);
        }
        if (a4)
        {
          unint64_t v75 = (float *)&a4[v33 * (int)v35];
          uint64_t v76 = a6;
          uint64_t v77 = (float *)&a4[v33 * (int)v37];
          do
          {
            float v78 = *v77;
            float v79 = *v75;
            *uint64_t v77 = (float)(*v77 * v54) - (float)(*v75 * v57);
            ++v77;
            *v75++ = (float)(v54 * v79) + (float)(v78 * v57);
            --v76;
          }
          while (v76);
        }
        char v80 = 1;
        do
        {
          char v81 = v80;
          if (v80) {
            uint64_t v82 = v37;
          }
          else {
            uint64_t v82 = v35;
          }
          if ((int)v82 < (int)v15)
          {
            int v83 = v82 + 1;
            int v84 = v82 + 2;
            if ((int)v82 + 2 < a6)
            {
              float v85 = fabsf(*(float *)(a1 + 4 * (v17 * (int)v82 + v83)));
              uint64_t v86 = (float *)(a1 + 4 * (v17 * (int)v82 + v84));
              do
              {
                float v87 = *v86++;
                float v88 = fabsf(v87);
                if (v85 < v88)
                {
                  int v83 = v84;
                  float v85 = v88;
                }
                ++v84;
              }
              while (a6 != v84);
            }
            v19[(int)v82] = v83;
          }
          if ((int)v82 >= 1)
          {
            if (v82 == 1)
            {
              int v89 = 0;
            }
            else
            {
              int v89 = 0;
              float v90 = fabsf(*(float *)(a1 + 4 * v82));
              int8x16_t v91 = (float *)(a1 + 4 * (v17 + v82));
              for (uint64_t k = 1; k != v82; ++k)
              {
                float v93 = fabsf(*v91);
                if (v90 < v93)
                {
                  int v89 = k;
                  float v90 = v93;
                }
                int8x16_t v91 = (float *)((char *)v91 + v21);
              }
            }
            v20[v82] = v89;
          }
          char v80 = 0;
        }
        while ((v81 & 1) != 0);
      }
    }
    else if (a6 <= 1)
    {
      return 1;
    }
    uint64_t v94 = 0;
    uint64_t v95 = 1;
    uint64_t v96 = a4;
    do
    {
      uint64_t v97 = v94 + 1;
      if (v94 + 1 >= a6)
      {
        int v99 = v94;
      }
      else
      {
        uint64_t v98 = v95;
        int v99 = v94;
        do
        {
          if (*(float *)(a3 + 4 * v99) < *(float *)(a3 + 4 * v98)) {
            int v99 = v98;
          }
          ++v98;
        }
        while (a6 != v98);
      }
      if (v94 != v99)
      {
        int v100 = *(_DWORD *)(a3 + 4 * v99);
        *(_DWORD *)(a3 + 4 * v99) = *(_DWORD *)(a3 + 4 * v94);
        *(_DWORD *)(a3 + 4 * v94) = v100;
        if (a4)
        {
          uint64_t v101 = &a4[v33 * v99];
          uint64_t v102 = a6;
          float64x2_t v103 = v96;
          do
          {
            int v104 = *(_DWORD *)v101;
            *(_DWORD *)uint64_t v101 = *v103;
            v101 += 4;
            *v103++ = v104;
            --v102;
          }
          while (v102);
        }
      }
      ++v95;
      v96 += v33;
      uint64_t v94 = v97;
    }
    while (v97 != v15);
  }
  return 1;
}

uint64_t cv::JacobiImpl_<double>(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, unint64_t a5, int a6, uint64_t a7)
{
  if (a4)
  {
    if (a6 < 1) {
      return 1;
    }
    unint64_t v107 = a2;
    uint64_t v108 = a7;
    unint64_t v106 = a5 >> 3;
    unint64_t v10 = a5 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v12 = a4;
    float64x2_t v109 = a4;
    unint64_t v13 = a4;
    uint64_t v14 = a6;
    do
    {
      bzero(v12, 8 * a6);
      *unint64_t v13 = 0x3FF0000000000000;
      unint64_t v13 = (void *)((char *)v13 + v11);
      v12 += v10;
      --v14;
    }
    while (v14);
    a5 = v106;
    a2 = v107;
    a7 = v108;
    a4 = v109;
  }
  unint64_t v15 = (a6 - 1);
  if (a6 >= 1)
  {
    unint64_t v16 = 0;
    unint64_t v17 = a2 >> 3;
    int v18 = 30 * a6 * a6;
    uint64_t v19 = (int *)((a7 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    double v20 = &v19[a6];
    uint64_t v21 = 8 * (a2 >> 3);
    uint64_t v22 = a1;
    uint64_t v23 = (double *)(a1 + v21);
    do
    {
      *(void *)(a3 + 8 * v16) = *(void *)(a1 + 8 * ((a2 >> 3) + 1) * v16);
      if (v16 < v15)
      {
        unint64_t v24 = v16 + 1;
        if ((int)v16 + 2 < a6)
        {
          double v25 = fabs(*(double *)(a1 + 8 * (v17 * v16 + v24)));
          uint64_t v26 = 2;
          do
          {
            double v27 = fabs(*(double *)(v22 + 8 * v26));
            if (v25 < v27)
            {
              LODWORD(v24) = v16 + v26;
              double v25 = v27;
            }
            ++v26;
          }
          while (v16 - a6 + v26);
        }
        v19[v16] = v24;
      }
      if (v16)
      {
        if (v16 == 1)
        {
          int v28 = 0;
        }
        else
        {
          int v28 = 0;
          double v29 = fabs(*(double *)(a1 + 8 * v16));
          uint64_t v30 = v23;
          for (uint64_t i = 1; i != v16; ++i)
          {
            double v32 = fabs(*v30);
            if (v29 < v32)
            {
              int v28 = i;
              double v29 = v32;
            }
            uint64_t v30 = (double *)((char *)v30 + v21);
          }
        }
        v20[v16] = v28;
      }
      ++v16;
      v22 += v21 + 8;
      ++v23;
    }
    while (v16 != a6);
    uint64_t v33 = 8 * a5;
    if (a6 >= 2 && v18)
    {
      for (int j = 0; j != v18; ++j)
      {
        uint64_t v35 = *v19;
        double v36 = fabs(*(double *)(a1 + 8 * v35));
        if (a6 < 3)
        {
          LODWORD(v37) = 0;
        }
        else
        {
          LODWORD(v37) = 0;
          unint64_t v38 = v17;
          uint64_t v39 = 1;
          do
          {
            double v40 = fabs(*(double *)(a1 + 8 * (v38 + v19[v39])));
            if (v36 < v40)
            {
              LODWORD(v37) = v39;
              double v36 = v40;
            }
            ++v39;
            v38 += v17;
          }
          while (v15 != v39);
          LODWORD(v35) = v19[(int)v37];
        }
        uint64_t v41 = 1;
        do
        {
          uint64_t v42 = v20[v41];
          double v43 = fabs(*(double *)(a1 + 8 * (v41 + v17 * v42)));
          if (v36 >= v43) {
            uint64_t v37 = v37;
          }
          else {
            uint64_t v37 = v42;
          }
          if (v36 < v43)
          {
            double v36 = v43;
            LODWORD(v35) = v41;
          }
          ++v41;
        }
        while (a6 != v41);
        uint64_t v44 = v17 * (int)v37;
        uint64_t v45 = v44 + (int)v35;
        double v46 = *(double *)(a1 + 8 * v45);
        double v47 = fabs(v46);
        if (v47 <= 2.22044605e-16) {
          break;
        }
        double v48 = (*(double *)(a3 + 8 * (int)v35) - *(double *)(a3 + 8 * (int)v37)) * 0.5;
        double v49 = fabs(v48);
        if (v47 <= v49)
        {
          double v50 = 0.0;
          if (v48 != 0.0) {
            double v50 = v49 * sqrt(v47 / v49 * (v47 / v49) + 1.0);
          }
        }
        else
        {
          double v50 = v47 * sqrt(v49 / v47 * (v49 / v47) + 1.0);
        }
        double v51 = v49 + v50;
        double v52 = fabs(v51);
        if (v47 <= v52)
        {
          double v53 = 0.0;
          if (v51 != 0.0) {
            double v53 = v52 * sqrt(v47 / v52 * (v47 / v52) + 1.0);
          }
        }
        else
        {
          double v53 = v47 * sqrt(v52 / v47 * (v52 / v47) + 1.0);
        }
        double v54 = v51 / v53;
        BOOL v55 = v48 < 0.0;
        if (v48 >= 0.0) {
          double v56 = v46 * (v46 / v51);
        }
        else {
          double v56 = -(v46 * (v46 / v51));
        }
        *(void *)(a1 + 8 * v45) = 0;
        if (v55) {
          double v57 = -(v46 / v53);
        }
        else {
          double v57 = v46 / v53;
        }
        *(double *)(a3 + 8 * (int)v37) = *(double *)(a3 + 8 * (int)v37) - v56;
        *(double *)(a3 + 8 * (int)v35) = v56 + *(double *)(a3 + 8 * (int)v35);
        if ((int)v37 >= 1)
        {
          uint64_t v58 = v37;
          uint64_t v59 = a1;
          do
          {
            double v60 = *(double *)(v59 + 8 * (int)v37);
            double v61 = *(double *)(v59 + 8 * (int)v35);
            *(double *)(v59 + 8 * (int)v37) = v60 * v54 - v61 * v57;
            *(double *)(v59 + 8 * (int)v35) = v54 * v61 + v60 * v57;
            v59 += v21;
            --v58;
          }
          while (v58);
        }
        int v62 = v37 + 1;
        if ((int)v37 + 1 < (int)v35)
        {
          uint64_t v63 = v62;
          float32x2_t v64 = (double *)(a1 + 8 * (v44 + v62));
          int v65 = (double *)(a1 + 8 * ((int)v35 + v17 * v63));
          int v66 = ~v37 + v35;
          do
          {
            double v67 = *v64;
            double v68 = *v65;
            *float32x2_t v64 = *v64 * v54 - *v65 * v57;
            ++v64;
            *int v65 = v54 * v68 + v67 * v57;
            int v65 = (double *)((char *)v65 + v21);
            --v66;
          }
          while (v66);
        }
        int v69 = v35 + 1;
        if ((int)v35 + 1 < a6)
        {
          float v70 = (double *)(a1 + 8 * (v44 + v69));
          uint64_t v71 = (double *)(a1 + 8 * (v17 * (int)v35 + v69));
          int v72 = v15 - v35;
          do
          {
            double v73 = *v70;
            double v74 = *v71;
            *float v70 = *v70 * v54 - *v71 * v57;
            ++v70;
            *v71++ = v54 * v74 + v73 * v57;
            --v72;
          }
          while (v72);
        }
        if (a4)
        {
          unint64_t v75 = (double *)&a4[v33 * (int)v35];
          uint64_t v76 = a6;
          uint64_t v77 = (double *)&a4[v33 * (int)v37];
          do
          {
            double v78 = *v77;
            double v79 = *v75;
            *uint64_t v77 = *v77 * v54 - *v75 * v57;
            ++v77;
            *v75++ = v54 * v79 + v78 * v57;
            --v76;
          }
          while (v76);
        }
        char v80 = 1;
        do
        {
          char v81 = v80;
          if (v80) {
            uint64_t v82 = v37;
          }
          else {
            uint64_t v82 = v35;
          }
          if ((int)v82 < (int)v15)
          {
            int v83 = v82 + 1;
            int v84 = v82 + 2;
            if ((int)v82 + 2 < a6)
            {
              double v85 = fabs(*(double *)(a1 + 8 * (v17 * (int)v82 + v83)));
              uint64_t v86 = (double *)(a1 + 8 * (v17 * (int)v82 + v84));
              do
              {
                double v87 = *v86++;
                double v88 = fabs(v87);
                if (v85 < v88)
                {
                  int v83 = v84;
                  double v85 = v88;
                }
                ++v84;
              }
              while (a6 != v84);
            }
            v19[(int)v82] = v83;
          }
          if ((int)v82 >= 1)
          {
            if (v82 == 1)
            {
              int v89 = 0;
            }
            else
            {
              int v89 = 0;
              double v90 = fabs(*(double *)(a1 + 8 * v82));
              int8x16_t v91 = (double *)(a1 + 8 * (v17 + v82));
              for (uint64_t k = 1; k != v82; ++k)
              {
                double v93 = fabs(*v91);
                if (v90 < v93)
                {
                  int v89 = k;
                  double v90 = v93;
                }
                int8x16_t v91 = (double *)((char *)v91 + v21);
              }
            }
            v20[v82] = v89;
          }
          char v80 = 0;
        }
        while ((v81 & 1) != 0);
      }
    }
    else if (a6 <= 1)
    {
      return 1;
    }
    uint64_t v94 = 0;
    uint64_t v95 = 1;
    uint64_t v96 = a4;
    do
    {
      uint64_t v97 = v94 + 1;
      if (v94 + 1 >= a6)
      {
        int v99 = v94;
      }
      else
      {
        uint64_t v98 = v95;
        int v99 = v94;
        do
        {
          if (*(double *)(a3 + 8 * v99) < *(double *)(a3 + 8 * v98)) {
            int v99 = v98;
          }
          ++v98;
        }
        while (a6 != v98);
      }
      if (v94 != v99)
      {
        uint64_t v100 = *(void *)(a3 + 8 * v99);
        *(void *)(a3 + 8 * v99) = *(void *)(a3 + 8 * v94);
        *(void *)(a3 + 8 * v94) = v100;
        if (a4)
        {
          uint64_t v101 = &a4[v33 * v99];
          uint64_t v102 = a6;
          float64x2_t v103 = v96;
          do
          {
            uint64_t v104 = *(void *)v101;
            *(void *)uint64_t v101 = *v103;
            v101 += 8;
            *v103++ = v104;
            --v102;
          }
          while (v102);
        }
      }
      ++v95;
      v96 += v33;
      uint64_t v94 = v97;
    }
    while (v97 != v15);
  }
  return 1;
}

void cv::JacobiSVDImpl_<float>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  int v125 = v7;
  int v8 = v5;
  unint64_t v10 = v9;
  uint64_t v12 = v11;
  float v14 = v13;
  double v16 = v15;
  uint64_t v17 = v2;
  if (v6 >= 0x209) {
    operator new[]();
  }
  if (v5 <= 30) {
    int v18 = 30;
  }
  else {
    int v18 = v5;
  }
  int v129 = v18;
  unint64_t v126 = v4 >> 2;
  unint64_t v124 = v3 >> 2;
  uint64_t v19 = 4 * (v3 >> 2);
  int v130 = v6;
  uint64_t v20 = (v6 - 1);
  if (v6 >= 1)
  {
    uint64_t v21 = 0;
    uint64_t v128 = 4 * v6;
    uint64_t v22 = (float *)v2;
    unint64_t v127 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      double v23 = 0.0;
      if (v8 >= 1)
      {
        uint64_t v24 = v8;
        double v25 = v22;
        do
        {
          float v26 = *v25++;
          double v23 = v23 + v26 * v26;
          --v24;
        }
        while (v24);
      }
      *(double *)&v131[v21] = v23;
      if (v10)
      {
        bzero((char *)v10 + v127 * v21, v128);
        v10[(v126 + 1) * v21] = 1.0;
      }
      ++v21;
      uint64_t v22 = (float *)((char *)v22 + v19);
    }
    while (v21 != v130);
  }
  int v27 = 0;
  int v28 = v130;
  uint64_t v29 = v130;
  uint64_t v30 = 4 * v126;
  do
  {
    if (v28 <= 1) {
      break;
    }
    uint64_t v31 = 0;
    char v32 = 0;
    uint64_t v33 = v10;
    uint64_t v34 = &v10[v126];
    uint64_t v35 = (float *)v17;
    double v36 = (float *)(v17 + 4 * v124);
    uint64_t v37 = 1;
    do
    {
      uint64_t v38 = v31 + 1;
      if (v31 + 1 < v130)
      {
        uint64_t v39 = v34;
        double v40 = v36;
        uint64_t v41 = v37;
        do
        {
          double v42 = 0.0;
          if (v8 >= 1)
          {
            uint64_t v43 = v8;
            uint64_t v44 = v35;
            uint64_t v45 = v40;
            do
            {
              float v46 = *v44++;
              double v47 = v46;
              float v48 = *v45++;
              double v42 = v42 + v47 * v48;
              --v43;
            }
            while (v43);
          }
          double v49 = *(double *)&v131[v31];
          double v50 = *(double *)&v131[v41];
          if (fabs(v42) > sqrt(v49 * v50) * v14)
          {
            double v51 = v42 + v42;
            double v52 = v49 - v50;
            double v53 = fabs(v51);
            double v54 = vabdd_f64(v49, v50);
            if (v53 <= v54)
            {
              double v55 = 0.0;
              if (v52 != 0.0) {
                double v55 = v54 * sqrt(v53 / v54 * (v53 / v54) + 1.0);
              }
            }
            else
            {
              double v55 = v53 * sqrt(v54 / v53 * (v54 / v53) + 1.0);
            }
            BOOL v56 = v52 < 0.0;
            float v57 = sqrt((v52 + v55) / (v55 + v55));
            float v58 = v51 / (v55 * v57 + v55 * v57);
            float v59 = sqrt((v55 - v52) * 0.5 / v55);
            float v60 = v51 / (v55 * v59 + v55 * v59);
            if (!v56)
            {
              float v60 = v57;
              float v59 = v58;
            }
            float v61 = -v59;
            if (v8 < 1)
            {
              double v64 = 0.0;
              double v63 = 0.0;
            }
            else
            {
              uint64_t v62 = 0;
              double v63 = 0.0;
              double v64 = 0.0;
              do
              {
                float v65 = v35[v62];
                float v66 = v40[v62];
                float v67 = (float)(v59 * v66) + (float)(v60 * v65);
                float v68 = (float)(v60 * v66) + (float)(v61 * v65);
                v35[v62] = v67;
                v40[v62] = v68;
                double v64 = v64 + v67 * v67;
                double v63 = v63 + v68 * v68;
                ++v62;
              }
              while (v8 != v62);
            }
            *(double *)&v131[v31] = v64;
            *(double *)&v131[v41] = v63;
            if (v10)
            {
              uint64_t v69 = v130;
              float v70 = v33;
              uint64_t v71 = v39;
              do
              {
                float v72 = (float)(v60 * *v71) + (float)(v61 * *v70);
                *float v70 = (float)(v59 * *v71) + (float)(v60 * *v70);
                ++v70;
                *v71++ = v72;
                --v69;
              }
              while (v69);
            }
            char v32 = 1;
          }
          ++v41;
          double v40 = (float *)((char *)v40 + v19);
          uint64_t v39 = (float *)((char *)v39 + v30);
        }
        while (v41 != v130);
      }
      ++v37;
      double v36 = (float *)((char *)v36 + v19);
      uint64_t v35 = (float *)((char *)v35 + v19);
      uint64_t v34 = (float *)((char *)v34 + v30);
      uint64_t v33 = (float *)((char *)v33 + v30);
      ++v31;
    }
    while (v38 != v20);
    ++v27;
    int v28 = v130;
  }
  while ((v32 & (v27 != v129)) != 0);
  if (v28 >= 1)
  {
    uint64_t v73 = 0;
    double v74 = (float *)v17;
    do
    {
      double v75 = 0.0;
      if (v8 >= 1)
      {
        uint64_t v76 = v8;
        uint64_t v77 = v74;
        do
        {
          float v78 = *v77++;
          double v75 = v75 + v78 * v78;
          --v76;
        }
        while (v76);
      }
      *(double *)&v131[v73++] = sqrt(v75);
      double v74 = (float *)((char *)v74 + v19);
    }
    while (v73 != v130);
    if (v28 >= 2)
    {
      uint64_t v79 = 0;
      uint64_t v80 = 1;
      char v81 = v10;
      uint64_t v82 = (int *)v17;
      do
      {
        uint64_t v83 = v79 + 1;
        if (v79 + 1 >= v130)
        {
          int v85 = v79;
        }
        else
        {
          uint64_t v84 = v80;
          int v85 = v79;
          do
          {
            if (*(double *)&v131[v85] < *(double *)&v131[v84]) {
              int v85 = v84;
            }
            ++v84;
          }
          while (v130 != v84);
        }
        if (v79 != v85)
        {
          uint64_t v86 = v131[v79];
          v131[v79] = v131[v85];
          v131[v85] = v86;
          if (v10)
          {
            uint64_t v87 = v85;
            if (v8 >= 1)
            {
              double v88 = (int *)(v17 + v19 * v85);
              uint64_t v89 = v8;
              double v90 = v82;
              do
              {
                int v91 = *v90;
                *v90++ = *v88;
                *v88++ = v91;
                --v89;
              }
              while (v89);
            }
            uint64_t v92 = (float *)((char *)v10 + v30 * v87);
            uint64_t v93 = v130;
            uint64_t v94 = v81;
            do
            {
              int v95 = *(_DWORD *)v94;
              *v94++ = *v92;
              *(_DWORD *)v92++ = v95;
              --v93;
            }
            while (v93);
          }
        }
        ++v80;
        uint64_t v82 = (int *)((char *)v82 + v19);
        char v81 = (float *)((char *)v81 + v30);
        uint64_t v79 = v83;
      }
      while (v83 != v20);
    }
    uint64_t v96 = (double *)v131;
    do
    {
      double v97 = *v96++;
      float v98 = v97;
      *v12++ = v98;
      --v29;
    }
    while (v29);
  }
  if (v10 && v125 >= 1)
  {
    uint64_t v99 = 0;
    uint64_t v101 = 4 * v8;
    unint64_t v102 = 305419896;
    float64x2_t v103 = (float *)v17;
    do
    {
      double v104 = 0.0;
      if (v99 < v130) {
        double v104 = *(double *)&v131[v99];
      }
      while (v104 <= v16)
      {
        uint64_t v105 = v8;
        unint64_t v106 = v103;
        if (v8 >= 1)
        {
          do
          {
            unint64_t v102 = HIDWORD(v102) + 4164903690 * v102;
            if ((v102 & 0x100) != 0)
            {
              float v107 = 1.0 / (double)v8;
            }
            else
            {
              float v100 = 1.0 / (double)v8;
              float v107 = -v100;
            }
            *v106++ = v107;
            --v105;
          }
          while (v105);
        }
        char v108 = 1;
        do
        {
          char v109 = v108;
          if (v99)
          {
            uint64_t v110 = 0;
            uint64_t v111 = v17;
            do
            {
              if (v8 >= 1)
              {
                unint64_t v112 = 0;
                double v113 = 0.0;
                do
                {
                  double v113 = v113 + (float)(v103[v112 / 4] * *(float *)(v111 + v112));
                  v112 += 4;
                }
                while (v101 != v112);
                unint64_t v114 = 0;
                double v115 = -v113;
                float v116 = 0.0;
                do
                {
                  float v117 = v103[v114 / 4] + v115 * *(float *)(v111 + v114);
                  v103[v114 / 4] = v117;
                  float v116 = v116 + fabsf(v117);
                  v114 += 4;
                }
                while (v101 != v114);
                unint64_t v118 = 0;
                if (v116 <= (float)(v14 * 100.0)) {
                  float v119 = 0.0;
                }
                else {
                  float v119 = 1.0 / v116;
                }
                do
                {
                  v103[v118 / 4] = v119 * v103[v118 / 4];
                  v118 += 4;
                }
                while (v101 != v118);
              }
              ++v110;
              v111 += v19;
            }
            while (v110 != v99);
          }
          char v108 = 0;
        }
        while ((v109 & 1) != 0);
        if (v8 < 1)
        {
          double v121 = 0.0;
        }
        else
        {
          unint64_t v120 = 0;
          double v121 = 0.0;
          do
          {
            double v121 = v121 + v103[v120 / 4] * v103[v120 / 4];
            v120 += 4;
          }
          while (v101 != v120);
        }
        double v104 = sqrt(v121);
      }
      if (v8 >= 1)
      {
        unint64_t v122 = 0;
        float v123 = 1.0 / v104;
        do
        {
          v103[v122 / 4] = v103[v122 / 4] * v123;
          v122 += 4;
        }
        while (v101 != v122);
      }
      ++v99;
      float64x2_t v103 = (float *)((char *)v103 + v19);
    }
    while (v99 != v125);
  }
}

void cv::JacobiSVDImpl_<double>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  int v119 = v7;
  int v8 = v5;
  unint64_t v10 = v9;
  __dst = v11;
  double v13 = v12;
  double v15 = v14;
  uint64_t v16 = v2;
  if (v6 >= 0x209) {
    operator new[]();
  }
  if (v5 <= 30) {
    int v17 = 30;
  }
  else {
    int v17 = v5;
  }
  int v122 = v17;
  unint64_t v120 = v4 >> 3;
  unint64_t v118 = v3 >> 3;
  uint64_t v18 = 8 * (v3 >> 3);
  int v123 = v6;
  uint64_t v19 = (v6 - 1);
  if (v6 >= 1)
  {
    uint64_t v20 = 0;
    unint64_t v121 = v4 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = (double *)v2;
    do
    {
      double v22 = 0.0;
      if (v8 >= 1)
      {
        uint64_t v23 = v8;
        uint64_t v24 = v21;
        do
        {
          double v25 = *v24++;
          double v22 = v22 + v25 * v25;
          --v23;
        }
        while (v23);
      }
      *(double *)&v124[v20] = v22;
      if (v10)
      {
        bzero((char *)v10 + v121 * v20, 8 * v123);
        v10[(v120 + 1) * v20] = 1.0;
      }
      ++v20;
      uint64_t v21 = (double *)((char *)v21 + v18);
    }
    while (v20 != v123);
  }
  int v26 = 0;
  uint64_t v27 = 8 * v120;
  do
  {
    if (v123 <= 1) {
      break;
    }
    uint64_t v28 = 0;
    char v29 = 0;
    uint64_t v30 = v10;
    uint64_t v31 = &v10[v120];
    char v32 = (double *)v16;
    uint64_t v33 = (double *)(v16 + 8 * v118);
    uint64_t v34 = 1;
    do
    {
      uint64_t v35 = v28 + 1;
      if (v28 + 1 < v123)
      {
        double v36 = v31;
        uint64_t v37 = v33;
        uint64_t v38 = v34;
        do
        {
          double v39 = 0.0;
          if (v8 >= 1)
          {
            uint64_t v40 = v8;
            uint64_t v41 = v32;
            double v42 = v37;
            do
            {
              double v43 = *v41++;
              double v44 = v43;
              double v45 = *v42++;
              double v39 = v39 + v44 * v45;
              --v40;
            }
            while (v40);
          }
          double v46 = *(double *)&v124[v28];
          double v47 = *(double *)&v124[v38];
          if (fabs(v39) > sqrt(v46 * v47) * v13)
          {
            double v48 = v39 + v39;
            double v49 = v46 - v47;
            double v50 = fabs(v48);
            double v51 = vabdd_f64(v46, v47);
            if (v50 <= v51)
            {
              double v52 = 0.0;
              if (v49 != 0.0) {
                double v52 = v51 * sqrt(v50 / v51 * (v50 / v51) + 1.0);
              }
            }
            else
            {
              double v52 = v50 * sqrt(v51 / v50 * (v51 / v50) + 1.0);
            }
            BOOL v53 = v49 < 0.0;
            double v54 = sqrt((v49 + v52) / (v52 + v52));
            double v55 = v48 / (v52 * v54 + v52 * v54);
            double v56 = sqrt((v52 - v49) * 0.5 / v52);
            double v57 = v48 / (v52 * v56 + v52 * v56);
            if (!v53)
            {
              double v57 = v54;
              double v56 = v55;
            }
            double v58 = -v56;
            if (v8 < 1)
            {
              double v61 = 0.0;
              double v60 = 0.0;
            }
            else
            {
              uint64_t v59 = 0;
              double v60 = 0.0;
              double v61 = 0.0;
              do
              {
                double v62 = v32[v59];
                double v63 = v37[v59];
                double v64 = v56 * v63 + v57 * v62;
                double v65 = v57 * v63 + v58 * v62;
                v32[v59] = v64;
                v37[v59] = v65;
                double v61 = v61 + v64 * v64;
                double v60 = v60 + v65 * v65;
                ++v59;
              }
              while (v8 != v59);
            }
            *(double *)&v124[v28] = v61;
            *(double *)&v124[v38] = v60;
            if (v10)
            {
              uint64_t v66 = v123;
              float v67 = v30;
              float v68 = v36;
              do
              {
                double v69 = v57 * *v68 + v58 * *v67;
                *float v67 = v56 * *v68 + v57 * *v67;
                ++v67;
                *v68++ = v69;
                --v66;
              }
              while (v66);
            }
            char v29 = 1;
          }
          ++v38;
          uint64_t v37 = (double *)((char *)v37 + v18);
          double v36 = (double *)((char *)v36 + v27);
        }
        while (v38 != v123);
      }
      ++v34;
      uint64_t v33 = (double *)((char *)v33 + v18);
      char v32 = (double *)((char *)v32 + v18);
      uint64_t v31 = (double *)((char *)v31 + v27);
      uint64_t v30 = (double *)((char *)v30 + v27);
      ++v28;
    }
    while (v35 != v19);
    ++v26;
  }
  while ((v29 & (v26 != v122)) != 0);
  if (v123 >= 1)
  {
    uint64_t v70 = 0;
    uint64_t v71 = (double *)v16;
    do
    {
      double v72 = 0.0;
      if (v8 >= 1)
      {
        uint64_t v73 = v8;
        double v74 = v71;
        do
        {
          double v75 = *v74++;
          double v72 = v72 + v75 * v75;
          --v73;
        }
        while (v73);
      }
      *(double *)&v124[v70++] = sqrt(v72);
      uint64_t v71 = (double *)((char *)v71 + v18);
    }
    while (v70 != v123);
    if (v123 >= 2)
    {
      uint64_t v76 = 0;
      uint64_t v77 = 1;
      float v78 = v10;
      uint64_t v79 = (uint64_t *)v16;
      do
      {
        uint64_t v80 = v76 + 1;
        if (v76 + 1 >= v123)
        {
          int v82 = v76;
        }
        else
        {
          uint64_t v81 = v77;
          int v82 = v76;
          do
          {
            if (*(double *)&v124[v82] < *(double *)&v124[v81]) {
              int v82 = v81;
            }
            ++v81;
          }
          while (v123 != v81);
        }
        if (v76 != v82)
        {
          uint64_t v83 = v124[v76];
          v124[v76] = v124[v82];
          v124[v82] = v83;
          if (v10)
          {
            uint64_t v84 = v82;
            if (v8 >= 1)
            {
              int v85 = (uint64_t *)(v16 + v18 * v82);
              uint64_t v86 = v8;
              uint64_t v87 = v79;
              do
              {
                uint64_t v88 = *v87;
                *v87++ = *v85;
                *v85++ = v88;
                --v86;
              }
              while (v86);
            }
            uint64_t v89 = (double *)((char *)v10 + v27 * v84);
            uint64_t v90 = v123;
            int v91 = v78;
            do
            {
              uint64_t v92 = *(void *)v91;
              *v91++ = *v89;
              *(void *)v89++ = v92;
              --v90;
            }
            while (v90);
          }
        }
        ++v77;
        uint64_t v79 = (uint64_t *)((char *)v79 + v18);
        float v78 = (double *)((char *)v78 + v27);
        uint64_t v76 = v80;
      }
      while (v80 != v19);
    }
    memcpy(__dst, v124, 8 * v123);
  }
  if (v10 && v119 >= 1)
  {
    uint64_t v93 = 0;
    uint64_t v94 = 8 * v8;
    unint64_t v95 = 305419896;
    uint64_t v96 = (double *)v16;
    do
    {
      double v97 = 0.0;
      if (v93 < v123) {
        double v97 = *(double *)&v124[v93];
      }
      while (v97 <= v15)
      {
        uint64_t v98 = v8;
        uint64_t v99 = v96;
        if (v8 >= 1)
        {
          do
          {
            unint64_t v95 = HIDWORD(v95) + 4164903690 * v95;
            if ((v95 & 0x100) != 0) {
              double v100 = 1.0 / (double)v8;
            }
            else {
              double v100 = -(1.0 / (double)v8);
            }
            *v99++ = v100;
            --v98;
          }
          while (v98);
        }
        char v101 = 1;
        do
        {
          char v102 = v101;
          if (v93)
          {
            uint64_t v103 = 0;
            uint64_t v104 = v16;
            do
            {
              if (v8 >= 1)
              {
                unint64_t v105 = 0;
                double v106 = 0.0;
                do
                {
                  double v106 = v106 + v96[v105 / 8] * *(double *)(v104 + v105);
                  v105 += 8;
                }
                while (v94 != v105);
                unint64_t v107 = 0;
                double v108 = -v106;
                double v109 = 0.0;
                do
                {
                  double v110 = v96[v107 / 8] + v108 * *(double *)(v104 + v107);
                  v96[v107 / 8] = v110;
                  double v109 = v109 + fabs(v110);
                  v107 += 8;
                }
                while (v94 != v107);
                unint64_t v111 = 0;
                if (v109 <= v13 * 100.0) {
                  double v112 = 0.0;
                }
                else {
                  double v112 = 1.0 / v109;
                }
                do
                {
                  v96[v111 / 8] = v112 * v96[v111 / 8];
                  v111 += 8;
                }
                while (v94 != v111);
              }
              ++v103;
              v104 += v18;
            }
            while (v103 != v93);
          }
          char v101 = 0;
        }
        while ((v102 & 1) != 0);
        if (v8 < 1)
        {
          double v114 = 0.0;
        }
        else
        {
          unint64_t v113 = 0;
          double v114 = 0.0;
          do
          {
            double v114 = v114 + v96[v113 / 8] * v96[v113 / 8];
            v113 += 8;
          }
          while (v94 != v113);
        }
        double v97 = sqrt(v114);
      }
      if (v8 >= 1)
      {
        unint64_t v115 = 0;
        double v116 = 1.0 / v97;
        do
        {
          v96[v115 / 8] = v116 * v96[v115 / 8];
          v115 += 8;
        }
        while (v94 != v115);
      }
      ++v93;
      uint64_t v96 = (double *)((char *)v96 + v18);
    }
    while (v93 != v119);
  }
}

uint64_t cv::MatrAXPY<double,double,double>(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  if ((int)result >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = result;
    do
    {
      uint64_t v10 = *(uint64_t *)(a5 + 8 * v8 * a6);
      if (a2 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t v11 = 0;
        float64x2_t v13 = (float64x2_t)vdupq_lane_s64(v10, 0);
        do
        {
          double v14 = (float64x2_t *)(a7 + v12);
          uint64_t result = a3 + v12;
          float64x2_t v15 = *(float64x2_t *)(a7 + v12 + 16);
          float64x2_t *v14 = vmlaq_f64(*(float64x2_t *)(a7 + v12), *(float64x2_t *)(a3 + v12), v13);
          v14[1] = vmlaq_f64(v15, *(float64x2_t *)(a3 + v12 + 16), v13);
          v11 += 4;
          v12 += 32;
        }
        while (v11 <= a2 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < a2)
      {
        do
        {
          *(double *)(a7 + 8 * v11) = *(double *)(a7 + 8 * v11) + *(double *)&v10 * *(double *)(a3 + 8 * v11);
          ++v11;
        }
        while (a2 != v11);
      }
      ++v8;
      a3 += 8 * a4;
      a7 += 8 * a8;
    }
    while (v8 != v9);
  }
  return result;
}

int *cv::swap(int *this, Mat *a2, Mat *a3)
{
  int v3 = *this;
  *this = *(_DWORD *)a2;
  *(_DWORD *)a2 = v3;
  int v4 = this[1];
  this[1] = *((_DWORD *)a2 + 1);
  *((_DWORD *)a2 + 1) = v4;
  int v5 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  int v6 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  uint64_t v12 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v12;
  uint64_t v13 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v13;
  double v14 = (int *)*((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  float64x2_t v15 = this + 20;
  uint64_t v16 = *((void *)this + 10);
  *((void *)a2 + 9) = v14;
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v16;
  uint64_t v17 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v17;
  if (*((Mat **)this + 9) == (Mat *)((char *)a2 + 80))
  {
    *((void *)this + 8) = this + 2;
    *((void *)this + 9) = v15;
    double v14 = (int *)*((void *)a2 + 9);
  }
  if (v14 == v15)
  {
    *((void *)a2 + 8) = (char *)a2 + 8;
    *((void *)a2 + 9) = (char *)a2 + 80;
  }
  return this;
}

void cv::Mat::create(cv::Mat *this, cv::Mat *a2, const int *a3, __int16 a4)
{
  if (a2 > 0x20 || !a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "0 <= d && d <= CV_MAX_DIM && _sizes");
    std::string::basic_string[abi:ne180100]<0>(v24, "create");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 187);
    cv::error((cv *)v26, v7);
  }
  int v8 = a4 & 0xFFF;
  if (*((void *)this + 2))
  {
    int v9 = *((_DWORD *)this + 1);
    if (v9 == a2)
    {
      if (v8 == (*(_DWORD *)this & 0xFFF))
      {
        if (a2 == 2)
        {
          if (*((_DWORD *)this + 2) == *a3 && *((_DWORD *)this + 3) == a3[1]) {
            return;
          }
        }
        else if ((int)a2 < 1)
        {
          LODWORD(v10) = 0;
          goto LABEL_21;
        }
LABEL_16:
        uint64_t v10 = 0;
        while (*(_DWORD *)(*((void *)this + 8) + 4 * v10) == a3[v10])
        {
          if (a2 == ++v10) {
            goto LABEL_22;
          }
        }
LABEL_21:
        if (v10 == a2)
        {
LABEL_22:
          if ((int)a2 > 1 || *(_DWORD *)(*((void *)this + 8) + 4) == 1) {
            return;
          }
        }
      }
    }
    else if (a2 == 1 && v9 < 3 && v8 == (*(_DWORD *)this & 0xFFF))
    {
      goto LABEL_16;
    }
  }
  uint64_t v11 = (atomic_uint *)*((void *)this + 3);
  if (v11 && atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate(this, a2);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  if (*((int *)this + 1) >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *((void *)this + 8);
    do
      *(_DWORD *)(v13 + 4 * v12++) = 0;
    while (v12 < *((int *)this + 1));
  }
  *((void *)this + 3) = 0;
  if (a2)
  {
    *(_DWORD *)this = v8 | 0x42FF0000;
    cv::setSize(this, a2, (uint64_t)a3, 0, (const unint64_t *)1);
    double v14 = (cv::Mat *)*((unsigned int *)this + 1);
    if ((int)v14 >= 3)
    {
      uint64_t v16 = (int *)*((void *)this + 8);
      uint64_t v15 = 1;
      uint64_t v17 = *((unsigned int *)this + 1);
      do
      {
        uint64_t v18 = *v16++;
        v15 *= v18;
        --v17;
      }
      while (v17);
    }
    else
    {
      uint64_t v15 = *((int *)this + 3) * (uint64_t)*((int *)this + 2);
    }
    if (v15)
    {
      uint64_t v19 = *((void *)this + 7);
      if (v19)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        if (*(void *)(*((void *)this + 9) + 8 * *((int *)this + 1) - 8) != (((*(_DWORD *)this >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(unsigned char *)this & 7))) & 3))
        {
          std::string::basic_string[abi:ne180100]<0>(v25, "step[dims-1] == (size_t)CV_ELEM_SIZE(flags)");
          std::string::basic_string[abi:ne180100]<0>(v24, "create");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 236);
          cv::error((cv *)v26, v20);
        }
      }
      else
      {
        unint64_t v21 = (**((void **)this + 9) * **((int **)this + 8) + 3) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v22 = cv::fastMalloc((cv *)(v21 + 4));
        *((void *)this + 2) = v22;
        *((void *)this + 3) = v22 + v21;
        *((void *)this + 4) = v22;
        *(_DWORD *)(v22 + v21) = 1;
      }
    }
    cv::finalizeHdr(this, v14);
  }
}

void sub_225EF794C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void cv::Mat::release(cv::Mat *this, void *a2)
{
  int v3 = (atomic_uint *)*((void *)this + 3);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate(this, a2);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  if (*((int *)this + 1) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)this + 8);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *((int *)this + 1));
  }
  *((void *)this + 3) = 0;
}

void cv::setSize(cv *this, cv::Mat *a2, uint64_t a3, const int *a4, const unint64_t *a5)
{
  int v5 = (int)a5;
  int v8 = (int)a2;
  if (a2 >= 0x21)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "0 <= _dims && _dims <= CV_MAX_DIM");
    std::string::basic_string[abi:ne180100]<0>(v22, "setSize");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v24, 4294967081, v23, v22, __p, 89);
    cv::error((cv *)v24, v10);
  }
  if (*((_DWORD *)this + 1) != a2)
  {
    uint64_t v11 = (void **)*((void *)this + 9);
    if (v11 != (void **)((char *)this + 80))
    {
      cv::fastFree(v11, a2);
      *((void *)this + 8) = (char *)this + 8;
      *((void *)this + 9) = (char *)this + 80;
    }
    if (v8 >= 3)
    {
      unint64_t v12 = cv::fastMalloc((cv *)(4 * (v8 + 1) + 8 * v8));
      *((void *)this + 9) = v12;
      uint64_t v13 = (int *)(v12 + 8 * v8);
      *uint64_t v13 = v8;
      *((void *)this + 8) = v13 + 1;
      *((void *)this + 1) = -1;
    }
  }
  *((_DWORD *)this + 1) = v8;
  if (a3 && v8 >= 1)
  {
    uint64_t v14 = (((*(_DWORD *)this >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * (*(unsigned char *)this & 7))) & 3);
    uint64_t v15 = (v8 - 1);
    uint64_t v16 = v14;
    do
    {
      int v17 = *(_DWORD *)(a3 + 4 * v15);
      if (v17 < 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v23, "s >= 0");
        std::string::basic_string[abi:ne180100]<0>(v22, "setSize");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v24, 4294967081, v23, v22, __p, 116);
        cv::error((cv *)v24, v18);
      }
      *(_DWORD *)(*((void *)this + 8) + 4 * v15) = v17;
      if (a4)
      {
        uint64_t v19 = v14;
        if (v15 < (v8 - 1)) {
          uint64_t v19 = *(void *)&a4[2 * v15];
        }
        *(void *)(*((void *)this + 9) + 8 * v15) = v19;
      }
      else if (v5)
      {
        *(void *)(*((void *)this + 9) + 8 * v15) = v16;
        v16 *= v17;
      }
    }
    while (v15-- > 0);
    if (v8 == 1)
    {
      *((_DWORD *)this + 1) = 2;
      *((_DWORD *)this + 3) = 1;
      *(void *)(*((void *)this + 9) + 8) = v14;
    }
  }
}

void sub_225EF7CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::finalizeHdr(cv *this, cv::Mat *a2)
{
  uint64_t result = cv::updateContinuityFlag((uint64_t)this, a2);
  int v4 = *((_DWORD *)this + 1);
  if (v4 >= 3) {
    *((void *)this + 1) = -1;
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5)
  {
    int v6 = (int *)*((void *)this + 8);
    uint64_t v7 = (uint64_t *)*((void *)this + 9);
    uint64_t v8 = *v6;
    uint64_t v9 = *((void *)this + 4) + *v7 * v8;
    *((void *)this + 6) = v9;
    if ((int)v8 < 1)
    {
      *((void *)this + 5) = v9;
    }
    else
    {
      uint64_t v10 = (v4 - 1);
      uint64_t v11 = v5 + v7[(int)v10] * v6[(int)v10];
      *((void *)this + 5) = v11;
      if (v4 >= 2)
      {
        do
        {
          uint64_t v12 = *v6++;
          uint64_t v13 = v12 - 1;
          uint64_t v14 = *v7++;
          v11 += v14 * v13;
          --v10;
        }
        while (v10);
        *((void *)this + 5) = v11;
      }
    }
  }
  else
  {
    *((void *)this + 5) = 0;
    *((void *)this + 6) = 0;
  }
  return result;
}

void cv::Mat::copySize(cv::Mat *this, const cv::Mat *a2)
{
  cv::setSize(this, (cv::Mat *)*((unsigned int *)a2 + 1), 0, 0, 0);
  if (*((int *)this + 1) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)a2 + 8);
    uint64_t v6 = *((void *)a2 + 9);
    uint64_t v7 = *((void *)this + 8);
    uint64_t v8 = *((void *)this + 9);
    do
    {
      *(_DWORD *)(v7 + 4 * v4) = *(_DWORD *)(v5 + 4 * v4);
      *(void *)(v8 + 8 * v4) = *(void *)(v6 + 8 * v4);
      ++v4;
    }
    while (v4 < *((int *)this + 1));
  }
}

void cv::Mat::deallocate(cv::Mat *this, void *a2)
{
  uint64_t v3 = *((void *)this + 7);
  if (v3) {
    (*(void (**)(uint64_t, void, void, void))(*(void *)v3 + 24))(v3, *((void *)this + 3), *((void *)this + 4), *((void *)this + 2));
  }
  else {
    cv::fastFree(*((void ***)this + 4), a2);
  }
}

uint64_t cv::Mat::Mat(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v3;
  uint64_t v9 = v2;
  uint64_t v10 = (int *)(v2 + 8);
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 64) = v2 + 8;
  *(void *)(v2 + 72) = v2 + 80;
  *(void *)(v2 + 88) = 0;
  *(_OWORD *)(v2 + 4) = 0u;
  uint64_t v11 = (int *)(v2 + 4);
  *(_DWORD *)uint64_t v2 = 1124007936;
  *(_OWORD *)(v2 + 20) = 0u;
  *(_OWORD *)(v2 + 36) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  int v12 = *(_DWORD *)(v3 + 4);
  if (v12 < 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "m.dims >= 2");
    std::string::basic_string[abi:ne180100]<0>(v64, "Mat");
    std::string::basic_string[abi:ne180100]<0>(v63, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(&v60, 4294967081, __p, v64, v63, 269);
    cv::error((cv *)&v60, v13);
  }
  if (v12 > 2)
  {
    bzero(v62, 0x1050uLL);
    double v60 = v62;
    uint64_t v61 = 520;
    if (v12 > 0x208)
    {
      uint64_t v61 = v12;
      operator new[]();
    }
    uint64_t v19 = *v5;
    v62[0] = *(void *)v7;
    v62[1] = v19;
    uint64_t v20 = 2;
    do
      v60[v20++] = 0x7FFFFFFF80000000;
    while (v20 < *(int *)(v8 + 4));
    cv::Mat::Mat((cv::Mat *)__p, (cv::Mat *)v8, (uint64_t)v60);
    if (__p == (void *)v9)
    {
      int v26 = *(atomic_uint **)(v9 + 24);
      if (v26) {
        goto LABEL_61;
      }
      goto LABEL_63;
    }
    if ((void)v54) {
      atomic_fetch_add((atomic_uint *volatile)v54, 1u);
    }
    unint64_t v22 = *(atomic_uint **)(v9 + 24);
    if (v22 && atomic_fetch_add(v22, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v9, v21);
    }
    *(void *)(v9 + 16) = 0;
    *(void *)(v9 + 40) = 0;
    *(void *)(v9 + 48) = 0;
    *(void *)(v9 + 32) = 0;
    if (*(int *)(v9 + 4) <= 0)
    {
      *(void *)(v9 + 24) = 0;
      *(_DWORD *)uint64_t v9 = __p[0];
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = *(void *)(v9 + 64);
      do
      {
        *(_DWORD *)(v24 + 4 * v23++) = 0;
        uint64_t v25 = *v11;
      }
      while (v23 < v25);
      *(void *)(v9 + 24) = 0;
      *(_DWORD *)uint64_t v9 = __p[0];
      if ((int)v25 > 2) {
        goto LABEL_59;
      }
    }
    if (SHIDWORD(__p[0]) <= 2)
    {
      *(_DWORD *)(v9 + 4) = HIDWORD(__p[0]);
      *(void *)(v9 + 8) = __p[1];
      uint64_t v41 = v58;
      double v42 = *(void **)(v9 + 72);
      *double v42 = *(void *)v58;
      v42[1] = *((void *)v41 + 1);
      goto LABEL_60;
    }
LABEL_59:
    cv::Mat::copySize((cv::Mat *)v9, (const cv::Mat *)__p);
LABEL_60:
    *(void *)(v9 + 16) = v53;
    *(_OWORD *)(v9 + 40) = v55;
    double v43 = (atomic_uint *)v54;
    *(_OWORD *)(v9 + 24) = v54;
    *(void *)(v9 + 56) = v56;
    int v26 = v43;
    if (v43)
    {
LABEL_61:
      if (atomic_fetch_add(v26, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)__p, v21);
      }
    }
LABEL_63:
    uint64_t v53 = 0;
    *((void *)&v54 + 1) = 0;
    long long v55 = 0uLL;
    if (SHIDWORD(__p[0]) >= 1)
    {
      uint64_t v44 = 0;
      uint64_t v45 = v57;
      do
        *(_DWORD *)(v45 + 4 * v44++) = 0;
      while (v44 < SHIDWORD(__p[0]));
    }
    *(void *)&long long v54 = 0;
    if (v58 != (cv *)&v59) {
      cv::fastFree((void **)v58, v21);
    }
    if (v60 != v62 && v60 != 0) {
      MEMORY[0x22A641760]();
    }
    return v9;
  }
  if (v2 != v3)
  {
    uint64_t v14 = *(atomic_uint **)(v3 + 24);
    if (v14) {
      atomic_fetch_add(v14, 1u);
    }
    uint64_t v15 = *(atomic_uint **)(v2 + 24);
    if (v15 && atomic_fetch_add(v15, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v2, (void *)v3);
    }
    *(void *)(v9 + 16) = 0;
    *(void *)(v9 + 40) = 0;
    *(void *)(v9 + 48) = 0;
    *(void *)(v9 + 32) = 0;
    if (*(int *)(v9 + 4) <= 0)
    {
      *(void *)(v9 + 24) = 0;
      *(_DWORD *)uint64_t v9 = *(_DWORD *)v8;
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = *(void *)(v9 + 64);
      do
      {
        *(_DWORD *)(v17 + 4 * v16++) = 0;
        uint64_t v18 = *v11;
      }
      while (v16 < v18);
      *(void *)(v9 + 24) = 0;
      *(_DWORD *)uint64_t v9 = *(_DWORD *)v8;
      if ((int)v18 > 2) {
        goto LABEL_35;
      }
    }
    int v27 = *(_DWORD *)(v8 + 4);
    if (v27 <= 2)
    {
      *(_DWORD *)(v9 + 4) = v27;
      *(void *)(v9 + 8) = *(void *)(v8 + 8);
      uint64_t v28 = *(void **)(v8 + 72);
      char v29 = *(void **)(v9 + 72);
      *char v29 = *v28;
      v29[1] = v28[1];
LABEL_36:
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v8 + 32);
      *(void *)(v9 + 48) = *(void *)(v8 + 48);
      *(_OWORD *)(v9 + 16) = *(_OWORD *)(v8 + 16);
      *(void *)(v9 + 56) = *(void *)(v8 + 56);
      goto LABEL_37;
    }
LABEL_35:
    cv::Mat::copySize((cv::Mat *)v9, (const cv::Mat *)v8);
    goto LABEL_36;
  }
LABEL_37:
  int v30 = *v7;
  int v31 = v7[1];
  if ((*v7 != 0x80000000 || v31 != 0x7FFFFFFF) && (v30 || v31 != *v10))
  {
    if (v30 < 0 || v30 > v31 || v31 > *(_DWORD *)(v8 + 8))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "0 <= _rowRange.start && _rowRange.start <= _rowRange.end && _rowRange.end <= m.rows");
      std::string::basic_string[abi:ne180100]<0>(v64, "Mat");
      std::string::basic_string[abi:ne180100]<0>(v63, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(&v60, 4294967081, __p, v64, v63, 287);
      cv::error((cv *)&v60, v32);
    }
    *(_DWORD *)(v9 + 8) = v31 - v30;
    *(void *)(v9 + 16) += *(void *)(v9 + 80) * v30;
    *(_DWORD *)v9 |= 0x8000u;
  }
  int v33 = *(_DWORD *)v5;
  int v34 = *((_DWORD *)v5 + 1);
  if ((*(_DWORD *)v5 != 0x80000000 || v34 != 0x7FFFFFFF) && (v33 || v34 != *(_DWORD *)(v9 + 12)))
  {
    if (v33 < 0 || v33 > v34 || v34 > *(_DWORD *)(v8 + 12))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "0 <= _colRange.start && _colRange.start <= _colRange.end && _colRange.end <= m.cols");
      std::string::basic_string[abi:ne180100]<0>(v64, "Mat");
      std::string::basic_string[abi:ne180100]<0>(v63, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(&v60, 4294967081, __p, v64, v63, 296);
      cv::error((cv *)&v60, v35);
    }
    int v36 = v34 - v33;
    *(_DWORD *)(v9 + 12) = v36;
    int v37 = *(_DWORD *)(v9 + 4);
    BOOL v38 = __OFSUB__(v37, 1);
    int v39 = v37 - 1;
    if (v39 < 0 != v38) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = *(void *)(*(void *)(v9 + 72) + 8 * v39);
    }
    *(void *)(v9 + 16) += v40 * v33;
    if (v36 >= *(_DWORD *)(v8 + 12)) {
      int v47 = -32769;
    }
    else {
      int v47 = -49153;
    }
    *(_DWORD *)uint64_t v9 = v47 & *(_DWORD *)v9 | 0x8000;
  }
  if (*v10 == 1)
  {
    *(_DWORD *)v9 |= 0x4000u;
    goto LABEL_81;
  }
  if (*v10 >= 1)
  {
LABEL_81:
    if (*(int *)(v9 + 12) > 0) {
      return v9;
    }
  }
  double v48 = *(atomic_uint **)(v9 + 24);
  if (v48 && atomic_fetch_add(v48, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v9, (void *)v3);
  }
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 40) = 0;
  *(void *)(v9 + 48) = 0;
  *(void *)(v9 + 32) = 0;
  if (*(int *)(v9 + 4) >= 1)
  {
    uint64_t v49 = 0;
    uint64_t v50 = *(void *)(v9 + 64);
    do
      *(_DWORD *)(v50 + 4 * v49++) = 0;
    while (v49 < *v11);
  }
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 8) = 0;
  return v9;
}

void sub_225EF85AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  cv::Exception::~Exception((cv::Exception *)&a24);
  if (*(char *)(v25 + 23) < 0) {
    operator delete(*(void **)(v26 - 128));
  }
  if (*(char *)(v25 + 47) < 0) {
    operator delete(*(void **)(v26 - 104));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  cv::Mat::release(v24, v28);
  __cxa_rethrow();
}

void sub_225EF8634(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  cv::Mat::~Mat((cv::Mat *)&__p, a2);
  if (a24 != v24 && a24 != 0) {
    MEMORY[0x22A641760]();
  }
  _Unwind_Resume(a1);
}

cv::Mat *cv::Mat::Mat(cv::Mat *this, char *a2, int32x2_t *a3)
{
  unsigned int v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  *((_DWORD *)this + 1) = 2;
  *((int32x2_t *)this + 1) = vrev64_s32(a3[1]);
  uint64_t v5 = *((void *)a2 + 2) + **((void **)a2 + 9) * a3->i32[1];
  *((void *)this + 2) = v5;
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = *((void *)a2 + 7);
  *((void *)this + 10) = 0;
  uint64_t v7 = (char *)this + 80;
  *((void *)this + 7) = v6;
  *((void *)this + 8) = (char *)this + 8;
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 11) = 0;
  if (*((int *)a2 + 1) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "m.dims <= 2");
    std::string::basic_string[abi:ne180100]<0>(v24, "Mat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 326);
    cv::error((cv *)v26, v8);
  }
  __int32 v9 = *((_DWORD *)a2 + 3);
  __int32 v11 = a3[1].i32[0];
  __int32 v10 = a3[1].i32[1];
  if (v11 >= v9) {
    int v12 = -1;
  }
  else {
    int v12 = -16385;
  }
  *(_DWORD *)this = v12 & v4 | ((v10 == 1) << 14);
  uint64_t v13 = (((v4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3);
  __int32 v14 = a3->i32[0];
  *((void *)this + 2) = v5 + (int)v13 * (uint64_t)a3->i32[0];
  if (v14 < 0 || v11 < 0 || v14 + v11 > v9 || (__int32 v15 = a3->i32[1], v15 < 0) || v10 < 0 || v15 + v10 > *((_DWORD *)a2 + 2))
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "0 <= roi.x && 0 <= roi.width && roi.x + roi.width <= m.cols && 0 <= roi.y && 0 <= roi.height && roi.y + roi.height <= m.rows");
    std::string::basic_string[abi:ne180100]<0>(v24, "Mat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v26, 4294967081, v25, v24, __p, 333);
    cv::error((cv *)v26, v16);
  }
  uint64_t v17 = (atomic_uint *)*((void *)this + 3);
  if (v17) {
    atomic_fetch_add(v17, 1u);
  }
  if (a3[1].i32[0] < *((_DWORD *)a2 + 3) || a3[1].i32[1] < *((_DWORD *)a2 + 2)) {
    *(_DWORD *)this |= 0x8000u;
  }
  uint64_t v18 = (void *)*((void *)this + 9);
  *uint64_t v18 = **((void **)a2 + 9);
  v18[1] = v13;
  if (*((int *)this + 2) < 1 || *((int *)this + 3) <= 0)
  {
    uint64_t v19 = (atomic_uint *)*((void *)this + 3);
    if (v19 && atomic_fetch_add(v19, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate(this, a2);
    }
    *((void *)this + 2) = 0;
    *((void *)v7 - 5) = 0;
    *((void *)v7 - 4) = 0;
    *((void *)v7 - 6) = 0;
    if (*((int *)this + 1) >= 1)
    {
      uint64_t v20 = 0;
      uint64_t v21 = *((void *)this + 8);
      do
        *(_DWORD *)(v21 + 4 * v20++) = 0;
      while (v20 < *((int *)this + 1));
    }
    *((void *)this + 3) = 0;
    *((void *)this + 1) = 0;
  }
  return this;
}

void sub_225EF89F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

cv::Mat *cv::Mat::Mat(cv::Mat *this, cv::Mat *a2, const int *a3, __int16 a4, void *a5, const unint64_t *a6)
{
  *((void *)this + 10) = 0;
  *((void *)this + 8) = (char *)this + 8;
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 11) = 0;
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 4) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_DWORD *)this = a4 & 0xFFF | 0x42FF0000;
  *((void *)this + 4) = a5;
  *((void *)this + 2) = a5;
  cv::setSize(this, a2, (uint64_t)a3, (const int *)a6, (const unint64_t *)1);
  cv::finalizeHdr(this, v7);
  return this;
}

cv::Mat *cv::Mat::Mat(cv::Mat *this, cv::Mat *a2, uint64_t a3)
{
  *((void *)this + 10) = 0;
  *((void *)this + 8) = (char *)this + 8;
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 11) = 0;
  *(_DWORD *)this = 1124007936;
  *(_OWORD *)((char *)this + 4) = 0u;
  uint64_t v6 = (int *)((char *)this + 4);
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *((_OWORD *)this + 3) = 0u;
  uint64_t v7 = *((unsigned int *)a2 + 1);
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "ranges");
    std::string::basic_string[abi:ne180100]<0>(v29, "Mat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v31, 4294967081, v30, v29, __p, 364);
    cv::error((cv *)v31, v8);
  }
  if ((int)v7 >= 1)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      int v11 = *(_DWORD *)(a3 + 8 * i);
      int v10 = *(_DWORD *)(a3 + 8 * i + 4);
      BOOL v12 = v11 == 0x80000000 && v10 == 0x7FFFFFFF;
      if (!v12 && (v11 < 0 || v11 >= v10 || *(_DWORD *)(*((void *)a2 + 8) + 4 * i) < v10))
      {
        std::string::basic_string[abi:ne180100]<0>(v30, "r == Range::all() || (0 <= r.start && r.start < r.end && r.end <= m.size[i])");
        std::string::basic_string[abi:ne180100]<0>(v29, "Mat");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v31, 4294967081, v30, v29, __p, 368);
        cv::error((cv *)v31, v13);
      }
    }
  }
  if (this != a2)
  {
    __int32 v14 = (atomic_uint *)*((void *)a2 + 3);
    if (v14) {
      atomic_fetch_add(v14, 1u);
    }
    __int32 v15 = (atomic_uint *)*((void *)this + 3);
    if (v15 && atomic_fetch_add(v15, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate(this, a2);
    }
    *((void *)this + 2) = 0;
    *((void *)this + 5) = 0;
    *((void *)this + 6) = 0;
    *((void *)this + 4) = 0;
    if (*((int *)this + 1) <= 0)
    {
      *((void *)this + 3) = 0;
      *(_DWORD *)this = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = *((void *)this + 8);
      do
      {
        *(_DWORD *)(v17 + 4 * v16++) = 0;
        uint64_t v18 = *v6;
      }
      while (v16 < v18);
      *((void *)this + 3) = 0;
      *(_DWORD *)this = *(_DWORD *)a2;
      if ((int)v18 > 2) {
        goto LABEL_28;
      }
    }
    int v19 = *((_DWORD *)a2 + 1);
    if (v19 <= 2)
    {
      *((_DWORD *)this + 1) = v19;
      *((void *)this + 1) = *((void *)a2 + 1);
      uint64_t v20 = (void *)*((void *)a2 + 9);
      uint64_t v21 = (void *)*((void *)this + 9);
      void *v21 = *v20;
      v21[1] = v20[1];
LABEL_29:
      *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
      *((void *)this + 6) = *((void *)a2 + 6);
      *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
      *((void *)this + 7) = *((void *)a2 + 7);
      goto LABEL_30;
    }
LABEL_28:
    cv::Mat::copySize(this, a2);
    goto LABEL_29;
  }
LABEL_30:
  if ((int)v7 >= 1)
  {
    for (uint64_t j = 0; j != v7; ++j)
    {
      uint64_t v23 = *(void *)(a3 + 8 * j);
      if (v23 != 0x80000000 || HIDWORD(v23) != 0x7FFFFFFF)
      {
        uint64_t v25 = *((void *)this + 8);
        if (v23) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = *(_DWORD *)(v25 + 4 * j) == HIDWORD(v23);
        }
        if (!v26)
        {
          *(_DWORD *)(v25 + 4 * j) = HIDWORD(v23) - v23;
          *((void *)this + 2) += *(void *)(*((void *)this + 9) + 8 * j) * (int)v23;
          *(_DWORD *)this |= 0x8000u;
        }
      }
    }
  }
  cv::updateContinuityFlag((uint64_t)this, a2);
  return this;
}

void sub_225EF8E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::updateContinuityFlag(uint64_t this, cv::Mat *a2)
{
  uint64_t v2 = *(unsigned int *)(this + 4);
  uint64_t v3 = *(void *)(this + 64);
  if ((int)v2 < 1)
  {
    int v5 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    while (*(int *)(v3 + 4 * v4) <= 1)
    {
      if (v2 == ++v4)
      {
        int v5 = *(_DWORD *)(this + 4);
        goto LABEL_8;
      }
    }
    int v5 = v4;
  }
LABEL_8:
  uint64_t v6 = (int)v2;
  uint64_t v7 = v5;
  uint64_t v8 = v3 - 4;
  while (1)
  {
    uint64_t v9 = v6 - 1;
    if (v6 - 1 <= v7) {
      break;
    }
    uint64_t v10 = *(int *)(v8 + 4 * v6);
    uint64_t v11 = *(void *)(this + 72) + 8 * v6;
    unint64_t v12 = *(void *)(v11 - 16);
    unint64_t v13 = *(void *)(v11 - 8) * v10;
    uint64_t v6 = v9;
    if (v13 < v12)
    {
      int v14 = 0;
      goto LABEL_13;
    }
  }
  int v14 = 0x4000;
LABEL_13:
  *(_DWORD *)this = *(_DWORD *)this & 0xFFFFBFFF | v14;
  return this;
}

cv *cv::Mat::Mat(cv *this, uint64_t a2, int a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  *((void *)this + 10) = 0;
  *((void *)this + 8) = (char *)this + 8;
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 11) = 0;
  *(_DWORD *)this = 1124007936;
  *(_OWORD *)((char *)this + 4) = 0u;
  uint64_t v4 = (int *)((char *)this + 4);
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *((_OWORD *)this + 3) = 0u;
  if (a2)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    *((void *)this + 4) = v7;
    *((void *)this + 2) = v7;
    *(_DWORD *)this = *(_DWORD *)a2 & 0xFFF | 0x42FF0000;
    uint64_t v8 = (cv::Mat *)*(unsigned int *)(a2 + 4);
    if ((int)v8 >= 1)
    {
      uint64_t v9 = (int *)(a2 + 36);
      uint64_t v10 = v36;
      uint64_t v11 = v37;
      unint64_t v12 = v8;
      do
      {
        uint64_t v13 = *v9;
        *v11++ = *(v9 - 1);
        *(void *)uint64_t v10 = v13;
        v10 += 2;
        v9 += 2;
        unint64_t v12 = (cv::Mat *)((char *)v12 - 1);
      }
      while (v12);
    }
    cv::setSize(this, v8, (uint64_t)v37, v36, 0);
    cv::finalizeHdr(this, v14);
    if (a3)
    {
      long long v15 = *(_OWORD *)this;
      long long v28 = *(_OWORD *)this;
      uint64_t v29 = *((void *)this + 2);
      long long v16 = *(_OWORD *)((char *)this + 24);
      long long v30 = v16;
      long long v31 = *(_OWORD *)((char *)this + 40);
      uint64_t v32 = *((void *)this + 7);
      int v33 = (char *)&v28 + 8;
      v35[0] = 0;
      v35[1] = 0;
      int v34 = (cv *)v35;
      if ((void)v16)
      {
        atomic_fetch_add((atomic_uint *volatile)v16, 1u);
        int v17 = *v4;
      }
      else
      {
        int v17 = DWORD1(v15);
      }
      if (v17 > 2)
      {
        DWORD1(v28) = 0;
        cv::Mat::copySize((cv::Mat *)&v28, this);
      }
      else
      {
        uint64_t v18 = (void *)*((void *)this + 9);
        int v19 = v34;
        *(void *)int v34 = *v18;
        *((void *)v19 + 1) = v18[1];
      }
      int v25 = 0x10000;
      BOOL v26 = this;
      uint64_t v27 = 0;
      uint64_t v24 = &unk_26D989EB8;
      cv::Mat::copyTo((cv::Mat *)&v28, (const cv::_OutputArray *)&v24);
      if ((void)v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)&v28, v20);
      }
      uint64_t v29 = 0;
      long long v31 = 0uLL;
      *((void *)&v30 + 1) = 0;
      if (SDWORD1(v28) >= 1)
      {
        uint64_t v21 = 0;
        unint64_t v22 = v33;
        do
          *(_DWORD *)&v22[4 * v21++] = 0;
        while (v21 < SDWORD1(v28));
      }
      *(void *)&long long v30 = 0;
      if (v34 != (cv *)v35) {
        cv::fastFree((void **)v34, v20);
      }
    }
  }
  return this;
}

void sub_225EF9190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv::_OutputArray::_OutputArray(uint64_t this, cv::Mat *a2)
{
  *(_DWORD *)(this + 8) = 0x10000;
  *(void *)(this + 16) = a2;
  *(void *)(this + 24) = 0;
  *(void *)this = &unk_26D989EB8;
  return this;
}

void cv::Mat::diag(cv::Mat *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  int v6 = *((_DWORD *)this + 1);
  if (v6 >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "dims <= 2");
    std::string::basic_string[abi:ne180100]<0>(v20, "diag");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v22, 4294967081, v21, v20, __p, 415);
    cv::error((cv *)v22, v7);
  }
  *(_DWORD *)a3 = *(_DWORD *)this;
  *(_DWORD *)(a3 + 4) = v6;
  *(void *)(a3 + 8) = *((void *)this + 1);
  *(void *)(a3 + 16) = *((void *)this + 2);
  long long v8 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)(a3 + 24) = v8;
  *(_OWORD *)(a3 + 40) = *(_OWORD *)((char *)this + 40);
  *(void *)(a3 + 56) = *((void *)this + 7);
  *(void *)(a3 + 64) = a3 + 8;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 72) = a3 + 80;
  *(void *)(a3 + 88) = 0;
  if ((void)v8)
  {
    atomic_fetch_add((atomic_uint *volatile)v8, 1u);
    int v6 = *((_DWORD *)this + 1);
  }
  if (v6 > 2)
  {
    *(_DWORD *)(a3 + 4) = 0;
    cv::Mat::copySize((cv::Mat *)a3, this);
    int v6 = *((_DWORD *)this + 1);
  }
  else
  {
    uint64_t v9 = (void *)*((void *)this + 9);
    uint64_t v10 = *(void **)(a3 + 72);
    void *v10 = *v9;
    v10[1] = v9[1];
  }
  BOOL v11 = __OFSUB__(v6, 1);
  int v12 = v6 - 1;
  if (v12 < 0 != v11)
  {
    uint64_t v13 = 0;
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(*((void *)this + 9) + 8 * v12);
    if ((a2 & 0x80000000) == 0)
    {
LABEL_10:
      int v14 = *((_DWORD *)this + 3) - a2;
      if (*((_DWORD *)this + 2) < v14) {
        int v14 = *((_DWORD *)this + 2);
      }
      uint64_t v15 = *(void *)(a3 + 16) + v13 * a2;
      goto LABEL_17;
    }
  }
  int v14 = *((_DWORD *)this + 2) + a2;
  if (*((_DWORD *)this + 3) < v14) {
    int v14 = *((_DWORD *)this + 3);
  }
  uint64_t v15 = *(void *)(a3 + 16) - **((void **)this + 9) * (int)a2;
LABEL_17:
  *(void *)(a3 + 16) = v15;
  *(_DWORD *)(a3 + 8) = v14;
  long long v16 = *(int **)(a3 + 64);
  *long long v16 = v14;
  *(_DWORD *)(a3 + 12) = 1;
  v16[1] = 1;
  if (v14 <= 1) {
    uint64_t v13 = 0;
  }
  **(void **)(a3 + 72) += v13;
  unsigned int v17 = *(_DWORD *)a3 & 0xFFFFBFFF | ((*(_DWORD *)(a3 + 8) < 2) << 14);
  *(_DWORD *)a3 = v17;
  uint64_t v18 = (_DWORD *)*((void *)this + 8);
  if (v18[1] != 1 || *v18 != 1) {
    *(_DWORD *)a3 = v17 | 0x8000;
  }
}

void sub_225EF9420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::Mat::Mat(uint64_t a1, int *a2, char a3)
{
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = a1 + 8;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)a1 = 1124007936;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (a2)
  {
    if (a3)
    {
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      uint64_t v4 = a2[8];
      int v5 = a2[9];
      uint64_t v6 = *((void *)a2 + 3);
      unsigned int v7 = *a2;
      uint64_t v8 = a2[1];
      int v9 = (((v7 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v7 & 7))) & 3);
      if (v4 == 1) {
        uint64_t v10 = v9 * (uint64_t)v5;
      }
      else {
        uint64_t v10 = a2[1];
      }
      BOOL v11 = v10 == v9 * (uint64_t)v5 || v8 == 0;
      v31[0] = a2[8];
      v31[1] = v5;
      uint64_t v32 = v6;
      int v33 = 0;
      if (v11) {
        int v12 = 0x4000;
      }
      else {
        int v12 = 0;
      }
      uint64_t v38 = v31;
      int v39 = (cv *)v40;
      if (v8) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = v9 * (uint64_t)v5;
      }
      unsigned int v29 = v12 & 0xFFFFF000 | v7 & 0xFFF | 0x42FF0000;
      int v30 = 2;
      v40[0] = v13;
      v40[1] = (((v7 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v7 & 7))) & 3);
      uint64_t v36 = v6 + v13 * v4;
      uint64_t v37 = 0;
      uint64_t v34 = v6;
      uint64_t v35 = v36 - v13 + v9 * (uint64_t)v5;
      int v26 = 0x10000;
      uint64_t v27 = a1;
      uint64_t v28 = 0;
      int v25 = &unk_26D989EB8;
      cv::Mat::copyTo((cv::Mat *)&v29, (const cv::_OutputArray *)&v25);
      if (v33 && atomic_fetch_add(v33, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)&v29, v14);
      }
      uint64_t v32 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v34 = 0;
      if (v30 >= 1)
      {
        uint64_t v15 = 0;
        long long v16 = v38;
        do
          v16[v15++] = 0;
        while (v15 < v30);
      }
      int v33 = 0;
      if (v39 != (cv *)v40) {
        cv::fastFree((void **)v39, v14);
      }
    }
    else
    {
      unsigned int v17 = *a2;
      *(_DWORD *)a1 = *a2 & 0x4FFF | 0x42FF0000;
      *(_DWORD *)(a1 + 4) = 2;
      uint64_t v18 = a2[8];
      *(_DWORD *)(a1 + 8) = v18;
      int v19 = a2[9];
      *(_DWORD *)(a1 + 12) = v19;
      uint64_t v20 = *((void *)a2 + 3);
      *(void *)(a1 + 32) = v20;
      *(void *)(a1 + 16) = v20;
      uint64_t v21 = (((v17 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v17 & 7))) & 3);
      uint64_t v22 = v19 * (uint64_t)(int)v21;
      if (a2[1]) {
        uint64_t v22 = a2[1];
      }
      uint64_t v23 = v20 + v22 * v18;
      *(void *)(a1 + 40) = v23 - v22 + v19 * (uint64_t)(int)v21;
      *(void *)(a1 + 48) = v23;
      *(void *)(a1 + 80) = v22;
      *(void *)(a1 + 88) = v21;
    }
  }
  return a1;
}

void sub_225EF96A4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  cv::Mat::~Mat((cv::Mat *)va, a2);
  _Unwind_Resume(a1);
}

cv::Mat *cv::Mat::Mat(cv::Mat *this, uint64_t a2, int a3)
{
  v61[3] = *MEMORY[0x263EF8340];
  *((void *)this + 10) = 0;
  uint64_t v4 = (uint64_t *)((char *)this + 80);
  *((void *)this + 8) = (char *)this + 8;
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 11) = 0;
  *(_DWORD *)this = 1124007936;
  *(_OWORD *)((char *)this + 4) = 0u;
  int v5 = (int *)((char *)this + 4);
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *((_OWORD *)this + 3) = 0u;
  if (!a2) {
    return this;
  }
  *int v5 = 2;
  unsigned int v7 = (0x43160520u >> (((*(_DWORD *)(a2 + 16) >> 2) & 0x3C) + ((*(int *)(a2 + 16) >> 31) & 0x14))) & 7;
  uint64_t v8 = *(int *)(a2 + 96);
  *uint64_t v4 = v8;
  int v9 = *(int **)(a2 + 48);
  int v10 = *(_DWORD *)(a2 + 28);
  if (!v9)
  {
    if (v10)
    {
      std::string::basic_string[abi:ne180100]<0>(v57, "img->dataOrder == IPL_DATA_ORDER_PIXEL");
      std::string::basic_string[abi:ne180100]<0>(v61, "Mat");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(&v45, 4294967081, v57, v61, __p, 493);
      cv::error((cv *)&v45, v21);
    }
    unsigned int v22 = 8 * *(_DWORD *)(a2 + 8) - 8;
    int v16 = (v22 | v7) + 1124007936;
    *(_DWORD *)this = v16;
    unsigned int v17 = *(_DWORD *)(a2 + 44);
    *((_DWORD *)this + 2) = v17;
    unsigned int v18 = *(_DWORD *)(a2 + 40);
    *((_DWORD *)this + 3) = v18;
    uint64_t v23 = *(void *)(a2 + 88);
    *((void *)this + 2) = v23;
    *((void *)this + 4) = v23;
    uint64_t v19 = (((v22 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * v7)) & 3);
    goto LABEL_18;
  }
  if (v10)
  {
    int v11 = *v9;
    if (!*v9)
    {
      std::string::basic_string[abi:ne180100]<0>(v57, "img->dataOrder == IPL_DATA_ORDER_PIXEL || img->roi->coi != 0");
      std::string::basic_string[abi:ne180100]<0>(v61, "Mat");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(&v45, 4294967081, v57, v61, __p, 501);
      cv::error((cv *)&v45, v12);
    }
  }
  else
  {
    int v11 = *v9;
    if (!*v9)
    {
LABEL_10:
      int v14 = 0;
      int v13 = 8 * *(_DWORD *)(a2 + 8) - 8;
      goto LABEL_11;
    }
    int v10 = *(_DWORD *)(a2 + 28);
  }
  if (v10 != 1) {
    goto LABEL_10;
  }
  int v13 = 0;
  int v14 = 1;
LABEL_11:
  unsigned int v15 = v13 + v7;
  int v16 = v13 + v7 + 1124007936;
  *(_DWORD *)this = v16;
  unsigned int v17 = v9[4];
  *((_DWORD *)this + 2) = v17;
  unsigned int v18 = v9[3];
  *((_DWORD *)this + 3) = v18;
  uint64_t v19 = (((v15 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v15 & 7))) & 3);
  if (v14) {
    uint64_t v20 = *v4 * (v11 - 1) * *(int *)(a2 + 44);
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v24 = *(void *)(a2 + 88) + v20;
  uint64_t v4 = (uint64_t *)*((void *)this + 9);
  uint64_t v8 = *v4;
  uint64_t v23 = v24 + *v4 * v9[2] + v9[1] * (uint64_t)(int)v19;
  *((void *)this + 4) = v23;
  *((void *)this + 2) = v23;
LABEL_18:
  uint64_t v25 = v23 + v8 * (int)v17;
  uint64_t v26 = v23 + v8 * (int)(v17 - 1) + (int)v19 * (uint64_t)(int)v18;
  *((void *)this + 5) = v26;
  *((void *)this + 6) = v25;
  if (v17 == 1 || (int)v19 * (uint64_t)(int)v18 == v8) {
    int v28 = 0x4000;
  }
  else {
    int v28 = 0;
  }
  int v29 = v28 | v16;
  *(_DWORD *)this = v29;
  v4[1] = v19;
  if (a3)
  {
    int v30 = *((_DWORD *)this + 1);
    int v45 = v29;
    int v46 = v30;
    unint64_t v47 = __PAIR64__(v18, v17);
    long long v31 = (atomic_uint *)*((void *)this + 3);
    uint64_t v48 = v23;
    uint64_t v49 = v31;
    uint64_t v50 = v23;
    uint64_t v51 = v26;
    uint64_t v32 = *((void *)this + 7);
    uint64_t v52 = v25;
    uint64_t v53 = v32;
    long long v54 = &v47;
    long long v55 = (cv *)v56;
    v56[0] = 0;
    v56[1] = 0;
    if (v31)
    {
      atomic_fetch_add(v31, 1u);
      int v30 = *v5;
    }
    if (v30 > 2)
    {
      int v46 = 0;
      cv::Mat::copySize((cv::Mat *)&v45, this);
    }
    else
    {
      int v33 = (void *)*((void *)this + 9);
      uint64_t v34 = v55;
      *(void *)long long v55 = *v33;
      *((void *)v34 + 1) = v33[1];
    }
    uint64_t v35 = (atomic_uint *)*((void *)this + 3);
    if (v35 && atomic_fetch_add(v35, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate(this, (void *)a2);
    }
    *((void *)this + 2) = 0;
    *((void *)this + 5) = 0;
    *((void *)this + 6) = 0;
    *((void *)this + 4) = 0;
    if (*((int *)this + 1) >= 1)
    {
      uint64_t v36 = 0;
      uint64_t v37 = *((void *)this + 8);
      do
        *(_DWORD *)(v37 + 4 * v36++) = 0;
      while (v36 < *v5);
    }
    *((void *)this + 3) = 0;
    uint64_t v38 = *(int **)(a2 + 48);
    if (v38 && (int v39 = *v38) != 0 && *(_DWORD *)(a2 + 28) != 1)
    {
      v61[0] = (v39 - 1);
      *(void *)uint64_t v57 = v47;
      cv::Mat::create(this, (cv::Mat *)2, v57, v45 & 0xFFF);
      cv::mixChannels((cv *)&v45, (const cv::Mat *)1, (unint64_t)this, (cv::Mat *)1, (unint64_t)v61, (const int *)1);
    }
    else
    {
      int v58 = 0x10000;
      uint64_t v59 = this;
      uint64_t v60 = 0;
      *(void *)uint64_t v57 = &unk_26D989EB8;
      cv::Mat::copyTo((cv::Mat *)&v45, (const cv::_OutputArray *)v57);
    }
    if (v49 && atomic_fetch_add(v49, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v45, v40);
    }
    uint64_t v48 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v50 = 0;
    if (v46 >= 1)
    {
      uint64_t v41 = 0;
      double v42 = v54;
      do
        *((_DWORD *)v42 + v41++) = 0;
      while (v41 < v46);
    }
    uint64_t v49 = 0;
    if (v55 != (cv *)v56) {
      cv::fastFree((void **)v55, v40);
    }
  }
  return this;
}

void sub_225EF9C04(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void cv::Mat::reserve(cv::Mat *this, unint64_t a2)
{
  if ((a2 & 0x80000000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "(int)nelems >= 0");
    std::string::basic_string[abi:ne180100]<0>(&v31, "reserve");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v44, 4294967081, v35, &v31, __p, 581);
    cv::error((cv *)v44, v4);
  }
  if ((*((unsigned char *)this + 1) & 0x80) != 0
    || *((void *)this + 2) + **((void **)this + 9) * a2 > *((void *)this + 6))
  {
    int v5 = (int *)*((void *)this + 8);
    int v6 = *v5;
    if (*v5 < a2)
    {
      if ((int)a2 <= 1) {
        int v7 = 1;
      }
      else {
        int v7 = a2;
      }
      *int v5 = v7;
      uint64_t v8 = (cv::Mat *)*((unsigned int *)this + 1);
      if ((int)v8 >= 3)
      {
        uint64_t v9 = 1;
        int v10 = v5;
        uint64_t v11 = *((unsigned int *)this + 1);
        do
        {
          uint64_t v12 = *v10++;
          v9 *= v12;
          --v11;
        }
        while (v11);
      }
      else
      {
        uint64_t v9 = *((int *)this + 3) * (uint64_t)*((int *)this + 2);
      }
      if ((int)v8 < 1) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = *(void *)(*((void *)this + 9) + 8 * (v8 - 1));
      }
      unint64_t v14 = v13 * v9;
      if (v14 <= 0x3F)
      {
        *int v5 = (v14 + 63) * a2 / v14;
        uint64_t v8 = (cv::Mat *)*((unsigned int *)this + 1);
      }
      __int16 v15 = *(_DWORD *)this & 0xFFF;
      int v45 = (char *)v44 + 8;
      int v46 = (cv *)v47;
      v47[0] = 0;
      v47[1] = 0;
      LODWORD(v44[0]) = 1124007936;
      memset((char *)v44 + 4, 0, 48);
      v44[3] = 0u;
      cv::Mat::create((cv::Mat *)v44, v8, v5, v15);
      **((_DWORD **)this + 8) = v6;
      if (v6 >= 1)
      {
        __p[0] = (void *)0x7FFFFFFF80000000;
        cv::Mat::Mat((uint64_t)v35, (uint64_t)v44);
        int v32 = 0x10000;
        int v33 = v35;
        uint64_t v34 = 0;
        long long v31 = &unk_26D989EB8;
        cv::Mat::copyTo(this, (const cv::_OutputArray *)&v31);
        if (v36 && atomic_fetch_add(v36, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v35, v16);
        }
        v35[2] = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        if (SHIDWORD(v35[0]) >= 1)
        {
          uint64_t v17 = 0;
          uint64_t v18 = v40;
          do
            *(_DWORD *)(v18 + 4 * v17++) = 0;
          while (v17 < SHIDWORD(v35[0]));
        }
        uint64_t v36 = 0;
        if (v41 != (cv *)&v42) {
          cv::fastFree((void **)v41, v16);
        }
      }
      if (v44 == (_OWORD *)this)
      {
        uint64_t v23 = *((void *)this + 2);
        uint64_t v24 = (atomic_uint *)*((void *)this + 3);
        goto LABEL_44;
      }
      if (*((void *)&v44[1] + 1)) {
        atomic_fetch_add(*((atomic_uint *volatile *)&v44[1] + 1), 1u);
      }
      uint64_t v19 = (atomic_uint *)*((void *)this + 3);
      if (v19 && atomic_fetch_add(v19, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate(this, v16);
      }
      *((void *)this + 2) = 0;
      *((void *)this + 5) = 0;
      *((void *)this + 6) = 0;
      *((void *)this + 4) = 0;
      if (*((int *)this + 1) <= 0)
      {
        *((void *)this + 3) = 0;
        *(_DWORD *)this = v44[0];
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v21 = *((void *)this + 8);
        do
        {
          *(_DWORD *)(v21 + 4 * v20++) = 0;
          uint64_t v22 = *((int *)this + 1);
        }
        while (v20 < v22);
        *((void *)this + 3) = 0;
        *(_DWORD *)this = v44[0];
        if ((int)v22 > 2) {
          goto LABEL_42;
        }
      }
      if (SDWORD1(v44[0]) <= 2)
      {
        *((_DWORD *)this + 1) = DWORD1(v44[0]);
        *((void *)this + 1) = *((void *)&v44[0] + 1);
        uint64_t v25 = v46;
        uint64_t v26 = (void *)*((void *)this + 9);
        *uint64_t v26 = *(void *)v46;
        v26[1] = *((void *)v25 + 1);
LABEL_43:
        uint64_t v23 = *(void *)&v44[1];
        uint64_t v27 = *((void *)&v44[3] + 1);
        *((void *)this + 2) = *(void *)&v44[1];
        *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)&v44[2] + 8);
        int v28 = (atomic_uint *)*((void *)&v44[1] + 1);
        *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)&v44[1] + 8);
        *((void *)this + 7) = v27;
        uint64_t v24 = v28;
LABEL_44:
        **((_DWORD **)this + 8) = v6;
        *((void *)this + 5) = v23 + **((void **)this + 9) * v6;
        if (v24 && atomic_fetch_add(v24, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v44, v16);
        }
        *(void *)&v44[1] = 0;
        memset(&v44[2], 0, 24);
        if (SDWORD1(v44[0]) >= 1)
        {
          uint64_t v29 = 0;
          int v30 = v45;
          do
            *(_DWORD *)&v30[4 * v29++] = 0;
          while (v29 < SDWORD1(v44[0]));
        }
        *((void *)&v44[1] + 1) = 0;
        if (v46 != (cv *)v47) {
          cv::fastFree((void **)v46, v16);
        }
        return;
      }
LABEL_42:
      cv::Mat::copySize(this, (const cv::Mat *)v44);
      goto LABEL_43;
    }
  }
}

void sub_225EFA0C4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
}

void cv::Mat::resize(cv::Mat *this, unint64_t a2)
{
  int v2 = a2;
  int v3 = **((_DWORD **)this + 8);
  int v4 = a2 - v3;
  if (a2 != v3)
  {
    if ((a2 & 0x80000000) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v10, "(int)nelems >= 0");
      std::string::basic_string[abi:ne180100]<0>(v9, "resize");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v11, 4294967081, v10, v9, __p, 615);
      cv::error((cv *)v11, v6);
    }
    if ((*((unsigned char *)this + 1) & 0x80) != 0
      || (uint64_t v7 = **((void **)this + 9), *((void *)this + 2) + v7 * a2 > *((void *)this + 6)))
    {
      cv::Mat::reserve(this, a2);
      uint64_t v7 = **((void **)this + 9);
    }
    **((_DWORD **)this + 8) = v2;
    *((void *)this + 5) += v7 * v4;
  }
}

void sub_225EFA270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

cv *cv::cvarrToMat@<X0>(cv *this@<X0>, const void *a2@<X1>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!this)
  {
    *(void *)(a4 + 80) = 0;
    *(void *)(a4 + 64) = a4 + 8;
    *(void *)(a4 + 72) = a4 + 80;
    *(void *)(a4 + 88) = 0;
    *(_DWORD *)a4 = 1124007936;
    *(_OWORD *)(a4 + 4) = 0u;
    *(_OWORD *)(a4 + 20) = 0u;
    *(_OWORD *)(a4 + 36) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    return this;
  }
  uint64_t v5 = (uint64_t)this;
  unsigned int v6 = *(_DWORD *)this;
  unsigned int v7 = *(_DWORD *)this & 0xFFFF0000;
  if (v7 == 1111687168)
  {
    if (!*((void *)this + 3)) {
      goto LABEL_25;
    }
    return cv::Mat::Mat((cv *)a4, (uint64_t)this, (int)a2);
  }
  else
  {
    if (v7 == 1111621632)
    {
      if (*((int *)this + 9) >= 1 && *((int *)this + 8) >= 1 && *((void *)this + 3))
      {
        return (cv *)cv::Mat::Mat(a4, (int *)this, (char)a2);
      }
LABEL_25:
      std::string::basic_string[abi:ne180100]<0>(v21, "Unknown array type");
      std::string::basic_string[abi:ne180100]<0>(v20, "cvarrToMat");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v22, 4294967291, v21, v20, __p, 708);
      cv::error((cv *)v22, v11);
    }
    if (v6 != 144)
    {
      if (v7 == 1117323264)
      {
        if (*((int *)this + 10) < 1
          || (((v6 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v6 & 7))) & 3) != *((_DWORD *)this + 11))
        {
          std::string::basic_string[abi:ne180100]<0>(v21, "seq->total > 0 && CV_ELEM_SIZE(seq->flags) == seq->elem_size");
          std::string::basic_string[abi:ne180100]<0>(v20, "cvarrToMat");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(v22, 4294967081, v21, v20, __p, 701);
          cv::error((cv *)v22, v8);
        }
        if (a2)
        {
          int v9 = *((_DWORD *)this + 10);
          unsigned int v10 = *(_DWORD *)this;
        }
        else
        {
          uint64_t v12 = *((void *)this + 11);
          int v9 = *((_DWORD *)this + 10);
          unsigned int v10 = *(_DWORD *)this;
          if (*(void *)(v12 + 8) == v12)
          {
            int v15 = *((_DWORD *)this + 10);
            uint64_t v16 = *(void *)(v12 + 24);
            *(_DWORD *)(a4 + 8) = v9;
            *(_DWORD *)(a4 + 12) = 1;
            *(void *)(a4 + 16) = v16;
            *(void *)(a4 + 24) = 0;
            uint64_t v17 = (((v10 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v10 & 7))) & 3);
            *(void *)(a4 + 80) = v17;
            *(void *)(a4 + 64) = a4 + 8;
            *(void *)(a4 + 72) = a4 + 80;
            *(_DWORD *)a4 = v10 & 0xFFF | 0x42FF4000;
            *(_DWORD *)(a4 + 4) = 2;
            *(void *)(a4 + 88) = v17;
            uint64_t v18 = v16 + (int)v17 * (uint64_t)v15;
            *(void *)(a4 + 48) = v18;
            *(void *)(a4 + 56) = 0;
            *(void *)(a4 + 32) = v16;
            *(void *)(a4 + 40) = v18;
            return this;
          }
        }
        *(void *)(a4 + 80) = 0;
        *(void *)(a4 + 64) = a4 + 8;
        *(void *)(a4 + 72) = a4 + 80;
        *(void *)(a4 + 88) = 0;
        *(_DWORD *)a4 = 1124007936;
        *(_OWORD *)(a4 + 4) = 0u;
        *(_OWORD *)(a4 + 20) = 0u;
        *(_OWORD *)(a4 + 36) = 0u;
        *(_OWORD *)(a4 + 48) = 0u;
        v22[0] = v9;
        v22[1] = 1;
        cv::Mat::create((cv::Mat *)a4, (cv::Mat *)2, v22, v10 & 0xFFF);
        return (cv *)cvCvtSeqToArray(v5, *(char **)(a4 + 16), 0x3FFFFFFF00000000);
      }
      goto LABEL_25;
    }
    if (!*((void *)this + 11)) {
      goto LABEL_25;
    }
    if (!a3)
    {
      uint64_t v13 = (int *)*((void *)this + 6);
      if (v13)
      {
        if (*v13 >= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v21, "COI is not supported by the function");
          std::string::basic_string[abi:ne180100]<0>(v20, "cvarrToMat");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(v22, 4294967272, v21, v20, __p, 695);
          cv::error((cv *)v22, v14);
        }
      }
    }
    return cv::Mat::Mat((cv::Mat *)a4, (uint64_t)this, (int)a2);
  }
}

void sub_225EFA768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::Mat::locateROI(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  int v3 = *(_DWORD *)(result + 4);
  if (v3 > 2 || !**(void **)(result + 72))
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "dims <= 2 && step[0] > 0");
    std::string::basic_string[abi:ne180100]<0>(v20, "locateROI");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v22, 4294967081, v21, v20, __p, 714);
    cv::error((cv *)v22, v4);
  }
  BOOL v5 = __OFSUB__(v3, 1);
  int v6 = v3 - 1;
  if (v6 < 0 != v5) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = *(void *)(*(void *)(result + 72) + 8 * v6);
  }
  uint64_t v8 = *(void *)(result + 16);
  uint64_t v9 = *(void *)(result + 32);
  uint64_t v10 = *(void *)(result + 40);
  unint64_t v11 = v8 - v9;
  if (v8 == v9)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    unint64_t v12 = **(void **)(result + 72);
    unint64_t v13 = v11 / v12;
    unint64_t v11 = (v11 - (int)(v11 / v12) * v12) / v7;
  }
  *a3 = v11;
  a3[1] = v13;
  uint64_t v14 = v10 - v9;
  uint64_t v15 = *(int *)(result + 12) + (uint64_t)(int)v11;
  unint64_t v16 = (v14 - v7 * v15) / **(void **)(result + 72);
  int v17 = *(_DWORD *)(result + 8) + v13;
  if ((int)v16 + 1 > v17) {
    int v17 = v16 + 1;
  }
  a2[1] = v17;
  unint64_t v18 = (v14 - *(void *)(result + 80) * (v17 - 1)) / v7;
  if ((int)v15 > (int)v18) {
    LODWORD(v18) = v15;
  }
  *a2 = v18;
  return result;
}

void sub_225EFA97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

cv::Mat *cv::Mat::adjustROI(cv::Mat *this, int a2, int a3, int a4, int a5)
{
  int v10 = *((_DWORD *)this + 1);
  if (v10 > 2 || !**((void **)this + 9))
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "dims <= 2 && step[0] > 0");
    std::string::basic_string[abi:ne180100]<0>(v23, "adjustROI");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v25, 4294967081, v24, v23, __p, 735);
    cv::error((cv *)v25, v11);
  }
  *(void *)uint64_t v25 = 0;
  v24[0] = 0;
  BOOL v12 = __OFSUB__(v10, 1);
  int v13 = v10 - 1;
  if (v13 < 0 != v12) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *(void *)(*((void *)this + 9) + 8 * v13);
  }
  cv::Mat::locateROI((uint64_t)this, v25, v24);
  int v15 = HIDWORD(v24[0]) + a3 + *((_DWORD *)this + 2);
  if (v25[1] < v15) {
    int v15 = v25[1];
  }
  int v16 = LODWORD(v24[0]) + a5 + *((_DWORD *)this + 3);
  int v17 = (HIDWORD(v24[0]) - a2) & ~((HIDWORD(v24[0]) - a2) >> 31);
  int v18 = (LODWORD(v24[0]) - a4) & ~((LODWORD(v24[0]) - a4) >> 31);
  if (v25[0] < v16) {
    int v16 = v25[0];
  }
  *((void *)this + 2) += *((void *)this + 10) * (v17 - HIDWORD(v24[0])) + v14 * (v18 - LODWORD(v24[0]));
  *((_DWORD *)this + 2) = v15 - v17;
  *((_DWORD *)this + 3) = v16 - v18;
  uint64_t v19 = (_DWORD *)*((void *)this + 8);
  *uint64_t v19 = v15 - v17;
  v19[1] = *((_DWORD *)this + 3);
  if (v14 * *((int *)this + 3) == **((void **)this + 9) || *((_DWORD *)this + 2) == 1) {
    unsigned int v20 = *(_DWORD *)this | 0x4000;
  }
  else {
    unsigned int v20 = *(_DWORD *)this & 0xFFFFBFFF;
  }
  *(_DWORD *)this = v20;
  return this;
}

void sub_225EFABC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void cv::Mat::reshape(cv::Mat *this@<X0>, signed int a2@<W1>, int a3@<W2>, unsigned int *a4@<X8>)
{
  int v4 = a3;
  long long v8 = *(_OWORD *)this;
  *(_OWORD *)a4 = *(_OWORD *)this;
  *((void *)a4 + 2) = *((void *)this + 2);
  long long v9 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)(a4 + 6) = v9;
  *(_OWORD *)(a4 + 10) = *(_OWORD *)((char *)this + 40);
  *((void *)a4 + 7) = *((void *)this + 7);
  *((void *)a4 + 8) = a4 + 2;
  *((void *)a4 + 10) = 0;
  *((void *)a4 + 9) = a4 + 20;
  *((void *)a4 + 11) = 0;
  if ((void)v9)
  {
    atomic_fetch_add((atomic_uint *volatile)v9, 1u);
    int v10 = *((_DWORD *)this + 1);
  }
  else
  {
    int v10 = DWORD1(v8);
  }
  unsigned int v11 = ((v8 >> 3) & 0x1FF) + 1;
  if (v10 <= 2)
  {
    BOOL v12 = (void *)*((void *)this + 9);
    int v13 = (void *)*((void *)a4 + 9);
    *int v13 = *v12;
    v13[1] = v12[1];
    BOOL v14 = a3 == 0;
    goto LABEL_13;
  }
  a4[1] = 0;
  cv::Mat::copySize((cv::Mat *)a4, this);
  int v15 = *((_DWORD *)this + 1);
  BOOL v14 = v4 == 0;
  if (!v4 && a2 && v15 >= 3)
  {
    uint64_t v16 = (v15 - 1);
    if (!((int)(*(_DWORD *)(*((void *)this + 8) + 4 * v16) * v11) % a2))
    {
      unsigned int v17 = *a4;
      unsigned int v18 = 8 * a2 - 8;
      *a4 = *a4 & 0xFFFFF007 | v18;
      *(void *)(*((void *)a4 + 9) + 8 * v16) = (((v18 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v17 & 7))) & 3);
      *(_DWORD *)(*((void *)a4 + 8) + 4 * v16) = (int)(*(_DWORD *)(*((void *)a4 + 8) + 4 * v16) * v11) / a2;
      return;
    }
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(v32, "dims <= 2");
    std::string::basic_string[abi:ne180100]<0>(v31, "reshape");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v33, 4294967081, v32, v31, __p, 797);
    cv::error((cv *)v33, v19);
  }
  if (v15 >= 3) {
    goto LABEL_12;
  }
LABEL_13:
  if (!a2) {
    a2 = v11;
  }
  int v20 = *((_DWORD *)this + 3) * v11;
  if (a2 > v20)
  {
    if (!v14)
    {
LABEL_24:
      int v22 = *((_DWORD *)this + 2);
      if (v4 != v22)
      {
        if ((*((unsigned char *)this + 1) & 0x40) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(v32, "The matrix is not continuous, thus its number of rows can not be changed");
          std::string::basic_string[abi:ne180100]<0>(v31, "reshape");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(v33, 4294967283, v32, v31, __p, 812);
          cv::error((cv *)v33, v23);
        }
        int v24 = v22 * v20;
        if (v4 > v24)
        {
          std::string::basic_string[abi:ne180100]<0>(v32, "Bad new number of rows");
          std::string::basic_string[abi:ne180100]<0>(v31, "reshape");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(v33, 4294967085, v32, v31, __p, 815);
          cv::error((cv *)v33, v25);
        }
        int v20 = v24 / v4;
        if (v24 / v4 * v4 != v24)
        {
          std::string::basic_string[abi:ne180100]<0>(v32, "The total number of matrix elements is not divisible by the new number of rows");
          std::string::basic_string[abi:ne180100]<0>(v31, "reshape");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(v33, 4294967291, v32, v31, __p, 821);
          cv::error((cv *)v33, v26);
        }
        a4[2] = v4;
        **((void **)a4 + 9) = ((0x88442211uLL >> (4 * (*(_DWORD *)this & 7u))) & 0xF) * v20;
      }
      goto LABEL_32;
    }
    goto LABEL_22;
  }
  if (v20 % a2) {
    BOOL v21 = v14;
  }
  else {
    BOOL v21 = 0;
  }
  if (v21) {
LABEL_22:
  }
    int v4 = *((_DWORD *)this + 2) * v20 / a2;
  if (v4) {
    goto LABEL_24;
  }
LABEL_32:
  if (v20 / a2 * a2 != v20)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "The total width is not divisible by the new number of channels");
    std::string::basic_string[abi:ne180100]<0>(v31, "reshape");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v33, 4294967281, v32, v31, __p, 831);
    cv::error((cv *)v33, v27);
  }
  a4[3] = v20 / a2;
  unsigned int v28 = *a4;
  unsigned int v29 = 8 * a2 - 8;
  *a4 = *a4 & 0xFFFFF007 | v29;
  *(void *)(*((void *)a4 + 9) + 8) = (((v29 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v28 & 7))) & 3);
}

void sub_225EFB148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  cv::Mat::~Mat(v27, v29);
  _Unwind_Resume(a1);
}

uint64_t cv::Mat::checkVector(cv::Mat *this, int a2, int a3, char a4)
{
  unint64_t v4 = *(unsigned int *)this;
  if (a3 >= 1 && (*(_DWORD *)this & 7) != a3 || (v4 & 0x4000) == 0 && (a4 & 1) != 0) {
    return 0xFFFFFFFFLL;
  }
  int v5 = *((_DWORD *)this + 1);
  if (v5 == 3)
  {
    if ((v4 & 0xFF8) == 0)
    {
      int v10 = (int *)*((void *)this + 8);
      if (v10[2] == a2
        && (*v10 == 1 || v10[1] == 1)
        && ((v4 & 0x4000) != 0
         || *(void *)(*((void *)this + 9) + 8) == *(void *)(*((void *)this + 9) + 16) * a2))
      {
        uint64_t v7 = *v10 * (uint64_t)v10[1];
        uint64_t v6 = v10[2];
        return (v7 * v6 + v7 * v6 * ((v4 >> 3) & 0x1FF)) / a2;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (v5 != 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *((int *)this + 2);
  if ((v6 == 1 || (LODWORD(v7) = *((_DWORD *)this + 3), v7 == 1))
    && (LODWORD(v7) = *((_DWORD *)this + 3), ((v4 >> 3) & 0x1FF) + 1 == a2)
    || (result = 0xFFFFFFFFLL, (v4 & 0xFF8) == 0) && (BOOL v9 = v7 == a2, LODWORD(v7) = a2, v9))
  {
    uint64_t v7 = (int)v7;
    return (v7 * v6 + v7 * v6 * ((v4 >> 3) & 0x1FF)) / a2;
  }
  return result;
}

double cv::scalarToRawData(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unsigned int v4 = (a3 >> 3) & 0x1FF;
  if (v4 >= 4)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "cn <= 4");
    std::string::basic_string[abi:ne180100]<0>(v21, "scalarToRawData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v23, 4294967081, v22, v21, __p, 855);
    cv::error((cv *)v23, v5);
  }
  uint64_t v6 = v4 + 1;
  switch(a3 & 7)
  {
    case 0uLL:
      uint64_t v7 = 0;
      do
      {
        double result = rint(*(double *)(a1 + 8 * v7));
        int v9 = (uint64_t)result & ~((int)(uint64_t)result >> 31);
        if (v9 >= 255) {
          LOBYTE(v9) = -1;
        }
        *(unsigned char *)(a2 + v7++) = v9;
      }
      while (v6 != v7);
      if ((int)v6 < a4)
      {
        do
        {
          *(unsigned char *)(a2 + v7) = *(unsigned char *)((~(a3 >> 3) | 0xFFFFFFFFFFFFFE00) + a2 + v7);
          ++v7;
        }
        while (v7 < a4);
      }
      break;
    case 1uLL:
      uint64_t v16 = 0;
      do
      {
        double result = rint(*(double *)(a1 + 8 * v16));
        uint64_t v17 = (uint64_t)result;
        if ((int)(uint64_t)result <= -128) {
          LODWORD(v17) = -128;
        }
        if ((int)v17 >= 127) {
          LOBYTE(v17) = 127;
        }
        *(unsigned char *)(a2 + v16++) = v17;
      }
      while (v6 != v16);
      if ((int)v6 < a4)
      {
        do
        {
          *(unsigned char *)(a2 + v16) = *(unsigned char *)((~(a3 >> 3) | 0xFFFFFFFFFFFFFE00) + a2 + v16);
          ++v16;
        }
        while (v16 < a4);
      }
      break;
    case 2uLL:
      uint64_t v11 = 0;
      do
      {
        double result = rint(*(double *)(a1 + 8 * v11));
        int v12 = (uint64_t)result & ~((int)(uint64_t)result >> 31);
        if (v12 >= 0xFFFF) {
          LOWORD(v12) = -1;
        }
        *(_WORD *)(a2 + 2 * v11++) = v12;
      }
      while (v6 != v11);
      if ((int)v6 < a4)
      {
        do
        {
          *(_WORD *)(a2 + 2 * v11) = *(_WORD *)(a2 - 2 * ((a3 >> 3) & 0x1FF) - 2 + 2 * v11);
          ++v11;
        }
        while (v11 < a4);
      }
      break;
    case 3uLL:
      uint64_t v13 = 0;
      do
      {
        double result = rint(*(double *)(a1 + 8 * v13));
        uint64_t v14 = (uint64_t)result;
        if ((int)(uint64_t)result <= -32768) {
          LODWORD(v14) = -32768;
        }
        if ((int)v14 >= 0x7FFF) {
          LOWORD(v14) = 0x7FFF;
        }
        *(_WORD *)(a2 + 2 * v13++) = v14;
      }
      while (v6 != v13);
      if ((int)v6 < a4)
      {
        do
        {
          *(_WORD *)(a2 + 2 * v13) = *(_WORD *)(a2 - 2 * ((a3 >> 3) & 0x1FF) - 2 + 2 * v13);
          ++v13;
        }
        while (v13 < a4);
      }
      break;
    case 4uLL:
      uint64_t v15 = 0;
      do
      {
        double result = rint(*(double *)(a1 + 8 * v15));
        *(_DWORD *)(a2 + 4 * v15++) = (uint64_t)result;
      }
      while (v6 != v15);
      if ((int)v6 < a4)
      {
        do
        {
          *(_DWORD *)(a2 + 4 * v15) = *(_DWORD *)(a2 - 4 * ((a3 >> 3) & 0x1FF) - 4 + 4 * v15);
          ++v15;
        }
        while (v15 < a4);
      }
      break;
    case 5uLL:
      uint64_t v18 = 0;
      do
      {
        double result = *(double *)(a1 + 8 * v18);
        *(float *)&double result = result;
        *(_DWORD *)(a2 + 4 * v18++) = LODWORD(result);
      }
      while (v6 != v18);
      if ((int)v6 < a4)
      {
        do
        {
          LODWORD(result) = *(_DWORD *)(a2 - 4 * ((a3 >> 3) & 0x1FF) - 4 + 4 * v18);
          *(_DWORD *)(a2 + 4 * v18++) = LODWORD(result);
        }
        while (v18 < a4);
      }
      break;
    case 6uLL:
      uint64_t v19 = 0;
      do
      {
        double result = *(double *)(a1 + 8 * v19);
        *(double *)(a2 + 8 * v19++) = result;
      }
      while (v6 != v19);
      if ((int)v6 < a4)
      {
        do
        {
          double result = *(double *)(a2 - 8 * ((a3 >> 3) & 0x1FF) - 8 + 8 * v19);
          *(double *)(a2 + 8 * v19++) = result;
        }
        while (v19 < a4);
      }
      break;
    default:
      std::string::basic_string[abi:ne180100]<0>(v22, "");
      std::string::basic_string[abi:ne180100]<0>(v21, "scalarToRawData");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v23, 4294967086, v22, v21, __p, 922);
      cv::error((cv *)v23, v10);
  }
  return result;
}

void sub_225EFB710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::_InputArray::_InputArray(uint64_t this, const cv::Mat *a2)
{
  *(void *)this = &unk_26D989E48;
  *(_DWORD *)(this + 8) = 0x10000;
  *(void *)(this + 16) = a2;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t cv::_InputArray::_InputArray(uint64_t result, uint64_t a2)
{
  *(void *)double result = &unk_26D989E48;
  *(_DWORD *)(result + 8) = 327680;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 0;
  return result;
}

double cv::_InputArray::_InputArray(cv::_InputArray *this, const double *a2)
{
  *(void *)this = &unk_26D989E48;
  *((_DWORD *)this + 2) = -1073610746;
  *((void *)this + 2) = a2;
  *(void *)&double result = 0x100000001;
  *((void *)this + 3) = 0x100000001;
  return result;
}

void cv::_InputArray::getMat(cv::_InputArray *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  HIDWORD(v6) = (*(uint64_t (**)(cv::_InputArray *))(*(void *)this + 40))(this);
  LODWORD(v6) = HIDWORD(v6);
  switch((v6 >> 16))
  {
    case 0u:
      goto LABEL_17;
    case 1u:
      uint64_t v7 = *((void *)this + 2);
      if ((a2 & 0x80000000) == 0)
      {
        v45[0] = a2;
        v45[1] = a2 + 1;
        v44[0] = (void *)0x7FFFFFFF80000000;
        cv::Mat::Mat(a3, v7);
        return;
      }
      *(_OWORD *)a3 = *(_OWORD *)v7;
      *(void *)(a3 + 16) = *(void *)(v7 + 16);
      long long v39 = *(_OWORD *)(v7 + 24);
      *(_OWORD *)(a3 + 24) = v39;
      *(_OWORD *)(a3 + 40) = *(_OWORD *)(v7 + 40);
      *(void *)(a3 + 56) = *(void *)(v7 + 56);
      *(void *)(a3 + 64) = a3 + 8;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 72) = a3 + 80;
      *(void *)(a3 + 88) = 0;
      if ((void)v39) {
        atomic_fetch_add((atomic_uint *volatile)v39, 1u);
      }
      if (*(int *)(v7 + 4) <= 2)
      {
        uint64_t v37 = *(void **)(v7 + 72);
        goto LABEL_30;
      }
      *(_DWORD *)(a3 + 4) = 0;
      cv::Mat::copySize((cv::Mat *)a3, (const cv::Mat *)v7);
      break;
    case 2u:
      if ((a2 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v44, "i < 0");
        std::string::basic_string[abi:ne180100]<0>(v43, "getMat");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v45, 4294967081, v44, v43, __p, 967);
        cv::error((cv *)v45, v8);
      }
      int v9 = *((_DWORD *)this + 6);
      uint64_t v10 = *((int *)this + 7);
      unsigned int v11 = *((_DWORD *)this + 2);
      uint64_t v12 = *((void *)this + 2);
      *(_DWORD *)(a3 + 8) = v10;
      *(_DWORD *)(a3 + 12) = v9;
      *(void *)(a3 + 16) = v12;
      *(void *)(a3 + 24) = 0;
      uint64_t v13 = (((v11 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v11 & 7))) & 3);
      uint64_t v14 = (int)v13 * (uint64_t)v9;
      *(void *)(a3 + 80) = v14;
      *(void *)(a3 + 64) = a3 + 8;
      *(void *)(a3 + 72) = a3 + 80;
      *(_DWORD *)a3 = v11 & 0xFFF | 0x42FF4000;
      *(_DWORD *)(a3 + 4) = 2;
      *(void *)(a3 + 88) = v13;
      uint64_t v15 = v12 + v14 * v10;
      *(void *)(a3 + 48) = v15;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 32) = v12;
      *(void *)(a3 + 40) = v15;
      return;
    case 3u:
      if ((a2 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v44, "i < 0");
        std::string::basic_string[abi:ne180100]<0>(v43, "getMat");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v45, 4294967081, v44, v43, __p, 973);
        cv::error((cv *)v45, v16);
      }
      uint64_t v17 = (uint64_t *)*((void *)this + 2);
      if (*v17 == v17[1]) {
        goto LABEL_17;
      }
      unsigned int v18 = *((_DWORD *)this + 2);
      (*(void (**)(uint64_t *__return_ptr, cv::_InputArray *, uint64_t))(*(void *)this + 48))(&v41, this, 0xFFFFFFFFLL);
      uint64_t v19 = *v17;
      uint64_t v20 = a3;
      int v22 = v41;
      uint64_t v21 = SHIDWORD(v41);
      goto LABEL_16;
    case 4u:
      unsigned int v18 = (*(uint64_t (**)(cv::_InputArray *, uint64_t))(*(void *)this + 64))(this, a2);
      uint64_t v23 = (void *)*((void *)this + 2);
      if ((a2 & 0x80000000) != 0 || (int)(-1431655765 * ((v23[1] - *v23) >> 3)) <= (int)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v44, "0 <= i && i < (int)vv.size()");
        std::string::basic_string[abi:ne180100]<0>(v43, "getMat");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v45, 4294967081, v44, v43, __p, 987);
        cv::error((cv *)v45, v24);
      }
      uint64_t v25 = (uint64_t *)(*v23 + 24 * (int)a2);
      if (*v25 == v25[1])
      {
LABEL_17:
        *(void *)(a3 + 80) = 0;
        *(void *)(a3 + 64) = a3 + 8;
        *(void *)(a3 + 72) = a3 + 80;
        *(void *)(a3 + 88) = 0;
        *(_DWORD *)a3 = 1124007936;
        *(_OWORD *)(a3 + 4) = 0u;
        *(_OWORD *)(a3 + 20) = 0u;
        *(_OWORD *)(a3 + 36) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, cv::_InputArray *, uint64_t))(*(void *)this + 48))(&v40, this, a2);
        uint64_t v19 = *v25;
        uint64_t v20 = a3;
        int v22 = v40;
        uint64_t v21 = SHIDWORD(v40);
LABEL_16:
        *(_DWORD *)(v20 + 8) = v21;
        *(_DWORD *)(a3 + 12) = v22;
        *(void *)(a3 + 16) = v19;
        *(void *)(a3 + 24) = 0;
        uint64_t v26 = (((v18 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v18 & 7))) & 3);
        uint64_t v27 = v22 * (uint64_t)(int)v26;
        *(void *)(a3 + 80) = v27;
        *(void *)(a3 + 64) = v20 + 8;
        *(void *)(a3 + 72) = a3 + 80;
        *(_DWORD *)a3 = v18 & 0xFFF | 0x42FF4000;
        *(_DWORD *)(a3 + 4) = 2;
        *(void *)(a3 + 88) = v26;
        uint64_t v28 = v19 + v27 * v21;
        *(void *)(a3 + 48) = v28;
        *(void *)(a3 + 56) = 0;
        *(void *)(a3 + 32) = v19;
        *(void *)(a3 + 40) = v28;
      }
      return;
    case 5u:
      int v32 = (uint64_t *)*((void *)this + 2);
      if ((a2 & 0x80000000) != 0
        || (uint64_t v33 = *v32, (int)(-1431655765 * ((unint64_t)(v32[1] - *v32) >> 5)) <= (int)a2))
      {
        std::string::basic_string[abi:ne180100]<0>(v44, "0 <= i && i < (int)v.size()");
        std::string::basic_string[abi:ne180100]<0>(v43, "getMat");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v45, 4294967081, v44, v43, __p, 1002);
        cv::error((cv *)v45, v34);
      }
      uint64_t v35 = v33 + 96 * (int)a2;
      *(_OWORD *)a3 = *(_OWORD *)v35;
      *(void *)(a3 + 16) = *(void *)(v35 + 16);
      long long v36 = *(_OWORD *)(v35 + 24);
      *(_OWORD *)(a3 + 24) = v36;
      *(_OWORD *)(a3 + 40) = *(_OWORD *)(v35 + 40);
      *(void *)(a3 + 56) = *(void *)(v35 + 56);
      *(void *)(a3 + 64) = a3 + 8;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 72) = a3 + 80;
      *(void *)(a3 + 88) = 0;
      if ((void)v36) {
        atomic_fetch_add((atomic_uint *volatile)v36, 1u);
      }
      if (*(int *)(v35 + 4) > 2)
      {
        *(_DWORD *)(a3 + 4) = 0;
        cv::Mat::copySize((cv::Mat *)a3, (const cv::Mat *)v35);
      }
      else
      {
        uint64_t v37 = *(void **)(v33 + 96 * (int)a2 + 72);
LABEL_30:
        uint64_t v38 = *(void **)(a3 + 72);
        void *v38 = *v37;
        v38[1] = v37[1];
      }
      break;
    case 6u:
      if ((a2 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v44, "i < 0");
        std::string::basic_string[abi:ne180100]<0>(v43, "getMat");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v45, 4294967081, v44, v43, __p, 961);
        cv::error((cv *)v45, v29);
      }
      cv::MatExpr::operator cv::Mat(*((void **)this + 2), a3);
      return;
    case 0xAu:
      std::string::basic_string[abi:ne180100]<0>(v44, "This method is not implemented for oclMat yet");
      std::string::basic_string[abi:ne180100]<0>(v43, "getMat");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v45, 4294967083, v44, v43, __p, 995);
      cv::error((cv *)v45, v30);
    default:
      std::string::basic_string[abi:ne180100]<0>(v44, "k == STD_VECTOR_MAT");
      std::string::basic_string[abi:ne180100]<0>(v43, "getMat");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v45, 4294967081, v44, v43, __p, 998);
      cv::error((cv *)v45, v31);
  }
}

void sub_225EFC03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void cv::_InputArray::getMatVector(uint64_t a1, uint64_t *a2)
{
  HIDWORD(v3) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  LODWORD(v3) = HIDWORD(v3);
  switch((v3 >> 16))
  {
    case 0u:
      uint64_t v4 = *a2;
      int v5 = (cv::Mat *)a2[1];
      if (v5 != (cv::Mat *)*a2)
      {
        do
        {
          int v5 = (cv::Mat *)((char *)v5 - 96);
          std::allocator<cv::Mat>::destroy[abi:ne180100](a2 + 16, v5);
        }
        while (v5 != (cv::Mat *)v4);
      }
      a2[1] = v4;
      return;
    case 1u:
      unint64_t v6 = *(unsigned int **)(a1 + 16);
      unint64_t v7 = **((int **)v6 + 8);
      std::vector<cv::Mat>::resize(a2, v7);
      if ((int)v7 < 1) {
        return;
      }
      uint64_t v9 = 0;
      uint64_t v152 = v7;
      while (1)
      {
        unsigned int v10 = v6[1];
        if (v10 != 2) {
          break;
        }
        unsigned int v11 = v6[3];
        unsigned int v12 = *v6;
        int v13 = *v6 & 0xFFF;
        uint64_t v14 = *((void *)v6 + 2) + **((void **)v6 + 9) * v9;
        *(void *)float64x2_t v160 = 0x100000002;
        *(_DWORD *)&v160[8] = v11;
        long long v161 = (unint64_t)v14;
        uint64_t v165 = (int *)&v160[4];
        double v166 = (cv *)&v167;
        uint64_t v15 = (((v12 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v12 & 7))) & 3);
        int v159 = v13 | 0x42FF4000;
        uint64_t v167 = (int)v15 * (uint64_t)(int)v11;
        uint64_t v168 = v15;
        uint64_t v163 = v14 + v167;
        uint64_t v164 = 0;
        *(void *)&long long v162 = v14;
        *((void *)&v162 + 1) = v14 + v167;
        uint64_t v16 = *a2;
        uint64_t v17 = (int *)(*a2 + 96 * v9);
        if (v17 != &v159) {
          goto LABEL_13;
        }
LABEL_29:
        *(void *)&long long v161 = 0;
        uint64_t v163 = 0;
        long long v162 = 0uLL;
        if (*(int *)v160 >= 1)
        {
          uint64_t v34 = 0;
          uint64_t v35 = v165;
          do
            v35[v34++] = 0;
          while (v34 < *(int *)v160);
        }
        *((void *)&v161 + 1) = 0;
        if (v166 != (cv *)&v167) {
          cv::fastFree((void **)v166, v8);
        }
        if (++v9 == v152) {
          return;
        }
      }
      cv::Mat::Mat((cv::Mat *)&v159, (cv::Mat *)(v10 - 1), (const int *)(*((void *)v6 + 8) + 4), *v6 & 0xFFF, (void *)(*((void *)v6 + 2) + **((void **)v6 + 9) * v9), (const unint64_t *)(*((void *)v6 + 9) + 8));
      unsigned int v18 = (atomic_uint *)*((void *)&v161 + 1);
      uint64_t v16 = *a2;
      uint64_t v17 = (int *)(*a2 + 96 * v9);
      if (v17 == &v159) {
        goto LABEL_26;
      }
      if (*((void *)&v161 + 1)) {
        atomic_fetch_add(*((atomic_uint *volatile *)&v161 + 1), 1u);
      }
LABEL_13:
      uint64_t v19 = v16 + 96 * v9;
      int v22 = *(atomic_uint **)(v19 + 24);
      uint64_t v21 = (void *)(v19 + 24);
      uint64_t v20 = v22;
      if (v22 && atomic_fetch_add(v20, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v17, v8);
      }
      uint64_t v23 = v16 + 96 * v9;
      *(void *)(v23 + 32) = 0;
      uint64_t v24 = v23 + 32;
      *(void *)(v24 - 16) = 0;
      uint64_t v25 = (int *)(v24 - 28);
      int v26 = *(_DWORD *)(v24 - 28);
      *(void *)(v24 + 8) = 0;
      *(void *)(v24 + 16) = 0;
      if (v26 <= 0)
      {
        void *v21 = 0;
        *uint64_t v17 = v159;
      }
      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = *(void *)(v16 + 96 * v9 + 64);
        do
        {
          *(_DWORD *)(v28 + 4 * v27++) = 0;
          uint64_t v29 = *v25;
        }
        while (v27 < v29);
        void *v21 = 0;
        *uint64_t v17 = v159;
        if ((int)v29 > 2) {
          goto LABEL_24;
        }
      }
      if (*(int *)v160 <= 2)
      {
        *uint64_t v25 = *(_DWORD *)v160;
        uint64_t v30 = v16 + 96 * v9;
        *(void *)(v30 + 8) = *(void *)&v160[4];
        long long v31 = v166;
        int v32 = *(void **)(v30 + 72);
        *int v32 = *(void *)v166;
        v32[1] = *((void *)v31 + 1);
LABEL_25:
        *(_OWORD *)uint64_t v24 = v162;
        uint64_t v33 = v16 + 96 * v9;
        *(void *)(v33 + 48) = v163;
        *(_OWORD *)(v24 - 16) = v161;
        *(void *)(v33 + 56) = v164;
        unsigned int v18 = (atomic_uint *)*((void *)&v161 + 1);
LABEL_26:
        if (v18 && atomic_fetch_add(v18, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)&v159, v8);
        }
        goto LABEL_29;
      }
LABEL_24:
      cv::Mat::copySize((cv::Mat *)v17, (const cv::Mat *)&v159);
      goto LABEL_25;
    case 2u:
      unint64_t v36 = *(int *)(a1 + 28);
      unsigned int v37 = *(_DWORD *)(a1 + 8);
      std::vector<cv::Mat>::resize(a2, v36);
      unint64_t v153 = v36;
      if (!v36) {
        return;
      }
      uint64_t v39 = 0;
      while (1)
      {
        uint64_t v40 = *(int *)(a1 + 24);
        unsigned int v41 = *(_DWORD *)(a1 + 8);
        int v42 = v41 & 0xFFF;
        uint64_t v43 = *(void *)(a1 + 16) + v39 * ((((v37 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v37 & 7))) & 3)) * v40;
        *(void *)float64x2_t v160 = 0x100000002;
        *(_DWORD *)&v160[8] = v40;
        long long v161 = (unint64_t)v43;
        uint64_t v165 = (int *)&v160[4];
        double v166 = (cv *)&v167;
        uint64_t v44 = (((v41 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v41 & 7))) & 3);
        int v159 = v42 | 0x42FF4000;
        uint64_t v167 = (int)v44 * (uint64_t)(int)v40;
        uint64_t v168 = v44;
        uint64_t v163 = v43 + v167;
        uint64_t v164 = 0;
        *(void *)&long long v162 = v43;
        *((void *)&v162 + 1) = v43 + v167;
        uint64_t v45 = *a2;
        int v46 = (int *)(*a2 + 96 * v39);
        if (v46 != &v159) {
          break;
        }
LABEL_54:
        *(void *)&long long v161 = 0;
        uint64_t v163 = 0;
        long long v162 = 0uLL;
        if (*(int *)v160 >= 1)
        {
          uint64_t v62 = 0;
          double v63 = v165;
          do
            v63[v62++] = 0;
          while (v62 < *(int *)v160);
        }
        *((void *)&v161 + 1) = 0;
        if (v166 != (cv *)&v167) {
          cv::fastFree((void **)v166, v38);
        }
        if (++v39 == v153) {
          return;
        }
      }
      uint64_t v47 = v45 + 96 * v39;
      uint64_t v50 = *(atomic_uint **)(v47 + 24);
      uint64_t v49 = (void *)(v47 + 24);
      uint64_t v48 = v50;
      if (v50 && atomic_fetch_add(v48, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v46, v38);
      }
      uint64_t v51 = v45 + 96 * v39;
      *(void *)(v51 + 32) = 0;
      uint64_t v52 = v51 + 32;
      *(void *)(v52 - 16) = 0;
      uint64_t v53 = (int *)(v52 - 28);
      int v54 = *(_DWORD *)(v52 - 28);
      *(void *)(v52 + 8) = 0;
      *(void *)(v52 + 16) = 0;
      if (v54 <= 0)
      {
        *uint64_t v49 = 0;
        int *v46 = v159;
      }
      else
      {
        uint64_t v55 = 0;
        uint64_t v56 = *(void *)(v45 + 96 * v39 + 64);
        do
        {
          *(_DWORD *)(v56 + 4 * v55++) = 0;
          uint64_t v57 = *v53;
        }
        while (v55 < v57);
        *uint64_t v49 = 0;
        int *v46 = v159;
        if ((int)v57 > 2) {
          goto LABEL_50;
        }
      }
      if (*(int *)v160 <= 2)
      {
        *uint64_t v53 = *(_DWORD *)v160;
        uint64_t v58 = v45 + 96 * v39;
        *(void *)(v58 + 8) = *(void *)&v160[4];
        uint64_t v59 = v166;
        uint64_t v60 = *(void **)(v58 + 72);
        void *v60 = *(void *)v166;
        v60[1] = *((void *)v59 + 1);
LABEL_51:
        *(_OWORD *)uint64_t v52 = v162;
        uint64_t v61 = v45 + 96 * v39;
        *(void *)(v61 + 48) = v163;
        *(_OWORD *)(v52 - 16) = v161;
        *(void *)(v61 + 56) = v164;
        if (*((void *)&v161 + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v161 + 1), 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)&v159, v38);
        }
        goto LABEL_54;
      }
LABEL_50:
      cv::Mat::copySize((cv::Mat *)v46, (const cv::Mat *)&v159);
      goto LABEL_51;
    case 3u:
      double v64 = *(void **)(a1 + 16);
      uint64_t v66 = *v64;
      uint64_t v65 = v64[1];
      int8x16_t v154 = v64;
      unsigned int v67 = *(_DWORD *)(a1 + 8);
      std::vector<cv::Mat>::resize(a2, v65 - *v64);
      unint64_t v69 = v65 - v66;
      if (v65 == v66) {
        return;
      }
      uint64_t v70 = 0;
      char v71 = (0xFA50uLL >> (2 * (v67 & 7))) & 3;
      uint64_t v72 = (((v67 >> 3) & 0x1FF) + 1) << v71;
      uint64_t v149 = 1 << v71;
      if (v69 <= 1) {
        unint64_t v69 = 1;
      }
      unint64_t v148 = v69;
      while (1)
      {
        uint64_t v73 = *v154 + v70 * v72;
        *(void *)float64x2_t v160 = 0x100000002;
        *(_DWORD *)&v160[8] = ((v67 >> 3) & 0x1FF) + 1;
        long long v161 = (unint64_t)v73;
        uint64_t v165 = (int *)&v160[4];
        double v166 = (cv *)&v167;
        int v159 = v67 & 7 | 0x42FF4000;
        uint64_t v167 = v72;
        uint64_t v168 = v149;
        uint64_t v163 = v73 + v72;
        uint64_t v164 = 0;
        *(void *)&long long v162 = v73;
        *((void *)&v162 + 1) = v73 + v72;
        uint64_t v74 = *a2;
        double v75 = (int *)(*a2 + 96 * v70);
        if (v75 != &v159) {
          break;
        }
LABEL_81:
        *(void *)&long long v161 = 0;
        uint64_t v163 = 0;
        long long v162 = 0uLL;
        if (*(int *)v160 >= 1)
        {
          uint64_t v91 = 0;
          uint64_t v92 = v165;
          do
            v92[v91++] = 0;
          while (v91 < *(int *)v160);
        }
        *((void *)&v161 + 1) = 0;
        if (v166 != (cv *)&v167) {
          cv::fastFree((void **)v166, v68);
        }
        if (++v70 == v148) {
          return;
        }
      }
      uint64_t v76 = v74 + 96 * v70;
      uint64_t v79 = *(atomic_uint **)(v76 + 24);
      float v78 = (void *)(v76 + 24);
      uint64_t v77 = v79;
      if (v79 && atomic_fetch_add(v77, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v75, v68);
      }
      uint64_t v80 = v74 + 96 * v70;
      *(void *)(v80 + 32) = 0;
      uint64_t v81 = v80 + 32;
      *(void *)(v81 - 16) = 0;
      int v82 = (int *)(v81 - 28);
      int v83 = *(_DWORD *)(v81 - 28);
      *(void *)(v81 + 8) = 0;
      *(void *)(v81 + 16) = 0;
      if (v83 <= 0)
      {
        *float v78 = 0;
        *double v75 = v159;
      }
      else
      {
        uint64_t v84 = 0;
        uint64_t v85 = *(void *)(v74 + 96 * v70 + 64);
        do
        {
          *(_DWORD *)(v85 + 4 * v84++) = 0;
          uint64_t v86 = *v82;
        }
        while (v84 < v86);
        *float v78 = 0;
        *double v75 = v159;
        if ((int)v86 > 2) {
          goto LABEL_77;
        }
      }
      if (*(int *)v160 <= 2)
      {
        *int v82 = *(_DWORD *)v160;
        uint64_t v87 = v74 + 96 * v70;
        *(void *)(v87 + 8) = *(void *)&v160[4];
        uint64_t v88 = v166;
        uint64_t v89 = *(void **)(v87 + 72);
        void *v89 = *(void *)v166;
        v89[1] = *((void *)v88 + 1);
LABEL_78:
        *(_OWORD *)uint64_t v81 = v162;
        uint64_t v90 = v74 + 96 * v70;
        *(void *)(v90 + 48) = v163;
        *(_OWORD *)(v81 - 16) = v161;
        *(void *)(v90 + 56) = v164;
        if (*((void *)&v161 + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v161 + 1), 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)&v159, v68);
        }
        goto LABEL_81;
      }
LABEL_77:
      cv::Mat::copySize((cv::Mat *)v75, (const cv::Mat *)&v159);
      goto LABEL_78;
    case 4u:
      int8x16_t v155 = *(uint64_t **)(a1 + 16);
      int v93 = -1431655765 * ((v155[1] - *v155) >> 3);
      unsigned int v94 = *(_DWORD *)(a1 + 8);
      std::vector<cv::Mat>::resize(a2, v93);
      if (v93 < 1) {
        return;
      }
      uint64_t v95 = 0;
      uint64_t v96 = (((v94 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v94 & 7))) & 3);
      int v151 = v94 & 0xFFF | 0x42FF4000;
      uint64_t v150 = v93;
      while (1)
      {
        uint64_t v97 = *v155;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 48))(&v169, a1, v95);
        unint64_t v99 = *(void *)(v97 + 24 * v95);
        *(_DWORD *)&v160[4] = HIDWORD(v169);
        *(_DWORD *)&v160[8] = v169;
        long long v161 = v99;
        uint64_t v165 = (int *)&v160[4];
        double v166 = (cv *)&v167;
        *(_DWORD *)float64x2_t v160 = 2;
        int v159 = v151;
        uint64_t v167 = (int)v169 * (uint64_t)(int)v96;
        uint64_t v168 = v96;
        uint64_t v163 = v99 + v167 * SHIDWORD(v169);
        uint64_t v164 = 0;
        *(void *)&long long v162 = v99;
        *((void *)&v162 + 1) = v163;
        uint64_t v100 = *a2;
        char v101 = (int *)(*a2 + 96 * v95);
        if (v101 != &v159) {
          break;
        }
LABEL_106:
        *(void *)&long long v161 = 0;
        uint64_t v163 = 0;
        long long v162 = 0uLL;
        if (*(int *)v160 >= 1)
        {
          uint64_t v117 = 0;
          unint64_t v118 = v165;
          do
            v118[v117++] = 0;
          while (v117 < *(int *)v160);
        }
        *((void *)&v161 + 1) = 0;
        if (v166 != (cv *)&v167) {
          cv::fastFree((void **)v166, v98);
        }
        if (++v95 == v150) {
          return;
        }
      }
      uint64_t v102 = v100 + 96 * v95;
      unint64_t v105 = *(atomic_uint **)(v102 + 24);
      uint64_t v104 = (void *)(v102 + 24);
      uint64_t v103 = v105;
      if (v105 && atomic_fetch_add(v103, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v101, v98);
      }
      uint64_t v106 = v100 + 96 * v95;
      *(void *)(v106 + 32) = 0;
      uint64_t v107 = v106 + 32;
      *(void *)(v107 - 16) = 0;
      double v108 = (int *)(v107 - 28);
      int v109 = *(_DWORD *)(v107 - 28);
      *(void *)(v107 + 8) = 0;
      *(void *)(v107 + 16) = 0;
      if (v109 <= 0)
      {
        *uint64_t v104 = 0;
        *char v101 = v159;
      }
      else
      {
        uint64_t v110 = 0;
        uint64_t v111 = *(void *)(v100 + 96 * v95 + 64);
        do
        {
          *(_DWORD *)(v111 + 4 * v110++) = 0;
          uint64_t v112 = *v108;
        }
        while (v110 < v112);
        *uint64_t v104 = 0;
        *char v101 = v159;
        if ((int)v112 > 2) {
          goto LABEL_102;
        }
      }
      if (*(int *)v160 <= 2)
      {
        int *v108 = *(_DWORD *)v160;
        uint64_t v113 = v100 + 96 * v95;
        *(void *)(v113 + 8) = *(void *)&v160[4];
        double v114 = v166;
        unint64_t v115 = *(void **)(v113 + 72);
        *unint64_t v115 = *(void *)v166;
        v115[1] = *((void *)v114 + 1);
LABEL_103:
        *(_OWORD *)uint64_t v107 = v162;
        uint64_t v116 = v100 + 96 * v95;
        *(void *)(v116 + 48) = v163;
        *(_OWORD *)(v107 - 16) = v161;
        *(void *)(v116 + 56) = v164;
        if (*((void *)&v161 + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v161 + 1), 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)&v159, v98);
        }
        goto LABEL_106;
      }
LABEL_102:
      cv::Mat::copySize((cv::Mat *)v101, (const cv::Mat *)&v159);
      goto LABEL_103;
    case 5u:
      float64x2_t v147 = *(cv::Mat ***)(a1 + 16);
      std::vector<cv::Mat>::resize(a2, 0xAAAAAAAAAAAAAAABLL * ((v147[1] - *v147) >> 5));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv::Mat const*,cv::Mat const*,cv::Mat*>((int)&v159, *v147, v147[1], (cv::Mat *)*a2);
      return;
    case 6u:
      cv::MatExpr::operator cv::Mat(*(void **)(a1 + 16), (uint64_t)&v159);
      int v119 = *v165;
      std::vector<cv::Mat>::resize(a2, *v165);
      uint64_t v121 = v119;
      if (v119 < 1) {
        goto LABEL_140;
      }
      uint64_t v122 = 0;
      break;
    case 0xAu:
      std::string::basic_string[abi:ne180100]<0>(v170, "This method is not implemented for oclMat yet");
      std::string::basic_string[abi:ne180100]<0>(v158, "getMatVector");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(&v159, 4294967083, v170, v158, __p, 1082);
      cv::error((cv *)&v159, v145);
    default:
      std::string::basic_string[abi:ne180100]<0>(v170, "k == STD_VECTOR_MAT");
      std::string::basic_string[abi:ne180100]<0>(v158, "getMatVector");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(&v159, 4294967081, v170, v158, __p, 1085);
      cv::error((cv *)&v159, v146);
  }
  do
  {
    uint64_t v123 = v122 + 1;
    LODWORD(v158[0]) = v122;
    HIDWORD(v158[0]) = v122 + 1;
    __p[0] = (void *)0x7FFFFFFF80000000;
    cv::Mat::Mat((uint64_t)v170, (uint64_t)&v159);
    uint64_t v124 = *a2;
    int v125 = (cv::Mat *)(*a2 + 96 * v122);
    if (v125 != (cv::Mat *)v170)
    {
      if (*((void *)&v171 + 1)) {
        atomic_fetch_add(*((atomic_uint *volatile *)&v171 + 1), 1u);
      }
      uint64_t v126 = v124 + 96 * v122;
      int v129 = *(atomic_uint **)(v126 + 24);
      uint64_t v128 = (void *)(v126 + 24);
      unint64_t v127 = v129;
      if (v129 && atomic_fetch_add(v127, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate(v125, v120);
      }
      uint64_t v130 = v124 + 96 * v122;
      *(void *)(v130 + 32) = 0;
      uint64_t v131 = v130 + 32;
      *(void *)(v131 - 16) = 0;
      double v132 = (int *)(v131 - 28);
      int v133 = *(_DWORD *)(v131 - 28);
      *(void *)(v131 + 8) = 0;
      *(void *)(v131 + 16) = 0;
      if (v133 <= 0)
      {
        void *v128 = 0;
        *(_DWORD *)int v125 = v170[0];
      }
      else
      {
        uint64_t v134 = 0;
        uint64_t v135 = *(void *)(v124 + 96 * v122 + 64);
        do
        {
          *(_DWORD *)(v135 + 4 * v134++) = 0;
          uint64_t v136 = *v132;
        }
        while (v134 < v136);
        void *v128 = 0;
        *(_DWORD *)int v125 = v170[0];
        if ((int)v136 > 2) {
          goto LABEL_129;
        }
      }
      if (SHIDWORD(v170[0]) <= 2)
      {
        *double v132 = HIDWORD(v170[0]);
        uint64_t v137 = v124 + 96 * v122;
        *(void *)(v137 + 8) = v170[1];
        uint64_t v138 = v176;
        uint64_t v139 = *(void **)(v137 + 72);
        *uint64_t v139 = *v176;
        v139[1] = v138[1];
LABEL_130:
        *(_OWORD *)uint64_t v131 = v172;
        uint64_t v140 = v124 + 96 * v122;
        *(void *)(v140 + 48) = v173;
        *(_OWORD *)(v131 - 16) = v171;
        *(void *)(v140 + 56) = v174;
        goto LABEL_131;
      }
LABEL_129:
      cv::Mat::copySize(v125, (const cv::Mat *)v170);
      goto LABEL_130;
    }
LABEL_131:
    if (*((void *)&v171 + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v171 + 1), 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v170, v120);
    }
    *(void *)&long long v171 = 0;
    uint64_t v173 = 0;
    long long v172 = 0uLL;
    if (SHIDWORD(v170[0]) >= 1)
    {
      uint64_t v141 = 0;
      uint64_t v142 = v175;
      do
        *(_DWORD *)(v142 + 4 * v141++) = 0;
      while (v141 < SHIDWORD(v170[0]));
    }
    *((void *)&v171 + 1) = 0;
    if (v176 != (void **)&v177) {
      cv::fastFree(v176, v120);
    }
    ++v122;
  }
  while (v123 != v121);
LABEL_140:
  if (*((void *)&v161 + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v161 + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v159, v120);
  }
  *(void *)&long long v161 = 0;
  long long v162 = 0uLL;
  uint64_t v163 = 0;
  if (*(int *)v160 >= 1)
  {
    uint64_t v143 = 0;
    uint64_t v144 = v165;
    do
      v144[v143++] = 0;
    while (v143 < *(int *)v160);
  }
  *((void *)&v161 + 1) = 0;
  if (v166 != (cv *)&v167) {
    cv::fastFree((void **)v166, v120);
  }
}

void sub_225EFCFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  cv::Exception::~Exception((cv::Exception *)&a28);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v28 - 177) < 0) {
    operator delete(*(void **)(v28 - 200));
  }
  _Unwind_Resume(a1);
}

void std::vector<cv::Mat>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = (cv::Mat *)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 5);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<cv::Mat>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 96 * a2;
    while (v3 != (cv::Mat *)v7)
    {
      unint64_t v3 = (cv::Mat *)((char *)v3 - 96);
      std::allocator<cv::Mat>::destroy[abi:ne180100](a1 + 16, v3);
    }
    a1[1] = v7;
  }
}

void cv::_InputArray::getGlBuffer(cv::_InputArray *this)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "This function in deprecated, do not use it");
  std::string::basic_string[abi:ne180100]<0>(v3, "getGlBuffer");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
  cv::Exception::Exception(v5, 4294967083, v4, v3, __p, 1097);
  cv::error((cv *)v5, v1);
}

void sub_225EFD204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void cv::_InputArray::getGlTexture(cv::_InputArray *this)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "This function in deprecated, do not use it");
  std::string::basic_string[abi:ne180100]<0>(v3, "getGlTexture");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
  cv::Exception::Exception(v5, 4294967083, v4, v3, __p, 1103);
  cv::error((cv *)v5, v1);
}

void sub_225EFD31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::_InputArray::getGpuMat@<X0>(const cv::gpu::GpuMat **this@<X0>, cv::gpu::GpuMat *a2@<X8>)
{
  if ((*((unsigned int (**)(const cv::gpu::GpuMat **))*this + 5))(this) != 589824)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "k == GPU_MAT");
    std::string::basic_string[abi:ne180100]<0>(v7, "getGpuMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v9, 4294967081, v8, v7, __p, 1111);
    cv::error((cv *)v9, v4);
  }
  return cv::gpu::GpuMat::GpuMat(a2, this[2]);
}

void sub_225EFD468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::_InputArray::kind(cv::_InputArray *this)
{
  return *((_DWORD *)this + 2) & 0x3FFF0000;
}

void cv::_InputArray::size(cv::_InputArray *this@<X0>, unsigned int a2@<W1>, int32x2_t *a3@<X8>)
{
  HIDWORD(v6) = (*(uint64_t (**)(cv::_InputArray *))(*(void *)this + 40))(this);
  LODWORD(v6) = HIDWORD(v6);
  switch((v6 >> 16))
  {
    case 0u:
      goto LABEL_2;
    case 1u:
      if ((a2 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v29, "i < 0");
        std::string::basic_string[abi:ne180100]<0>(v28, "size");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v30, 4294967081, v29, v28, __p, 1148);
        cv::error((cv *)v30, v7);
      }
      uint64_t v8 = *((void *)this + 2);
      goto LABEL_22;
    case 2u:
      if ((a2 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v29, "i < 0");
        std::string::basic_string[abi:ne180100]<0>(v28, "size");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v30, 4294967081, v29, v28, __p, 1160);
        cv::error((cv *)v30, v9);
      }
      int32x2_t v10 = *(int32x2_t *)((char *)this + 24);
      goto LABEL_37;
    case 3u:
      if ((a2 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v29, "i < 0");
        std::string::basic_string[abi:ne180100]<0>(v28, "size");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v30, 4294967081, v29, v28, __p, 1166);
        cv::error((cv *)v30, v11);
      }
      int64_t v12 = *(void *)(*((void *)this + 2) + 8) - **((void **)this + 2);
      if (v12 != v12 >> 2) {
        v12 /= (unint64_t)((((*((_DWORD *)this + 2) >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2
      }
                                                                                               * (*((_DWORD *)this + 2) & 7))) & 3));
      goto LABEL_45;
    case 4u:
      int v13 = (void *)*((void *)this + 2);
      if ((a2 & 0x80000000) == 0)
      {
        if ((int)(-1431655765 * ((v13[1] - *v13) >> 3)) <= (int)a2)
        {
          std::string::basic_string[abi:ne180100]<0>(v29, "i < (int)vv.size()");
          std::string::basic_string[abi:ne180100]<0>(v28, "size");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(v30, 4294967081, v29, v28, __p, 1181);
          cv::error((cv *)v30, v14);
        }
        uint64_t v15 = *(void *)(*v13 + 24 * a2 + 8) - *(void *)(*v13 + 24 * a2);
        if (v15 == v15 >> 2)
        {
          a3->i32[0] = v15;
          a3->i32[1] = 1;
          return;
        }
        int64_t v12 = v15
            / (unint64_t)((((*((_DWORD *)this + 2) >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2
                                                                                              * (*((_DWORD *)this + 2) & 7))) & 3));
        goto LABEL_45;
      }
      uint64_t v25 = v13[1];
      if (*v13 == v25) {
        goto LABEL_2;
      }
      int64_t v12 = (unint64_t)(v25 - *v13) >> 3;
      goto LABEL_43;
    case 5u:
      uint64_t v16 = (void *)*((void *)this + 2);
      if ((a2 & 0x80000000) != 0)
      {
        uint64_t v26 = v16[1];
        if (*v16 == v26)
        {
LABEL_2:
          *a3 = 0;
        }
        else
        {
          int64_t v12 = (unint64_t)(v26 - *v16) >> 5;
LABEL_43:
          LODWORD(v12) = -1431655765 * v12;
LABEL_45:
          a3->i32[0] = v12;
          a3->i32[1] = 1;
        }
      }
      else
      {
        if ((int)(-1431655765 * ((v16[1] - *v16) >> 5)) <= (int)a2)
        {
          std::string::basic_string[abi:ne180100]<0>(v29, "i < (int)vv.size()");
          std::string::basic_string[abi:ne180100]<0>(v28, "size");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(v30, 4294967081, v29, v28, __p, 1193);
          cv::error((cv *)v30, v17);
        }
        uint64_t v8 = *v16 + 96 * a2;
LABEL_22:
        int32x2_t v18 = **(int32x2_t **)(v8 + 64);
LABEL_36:
        int32x2_t v10 = vrev64_s32(v18);
LABEL_37:
        *a3 = v10;
      }
      return;
    case 6u:
      if ((a2 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v29, "i < 0");
        std::string::basic_string[abi:ne180100]<0>(v28, "size");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v30, 4294967081, v29, v28, __p, 1154);
        cv::error((cv *)v30, v19);
      }
      cv::MatExpr::size(*((cv::MatExpr **)this + 2), a3);
      return;
    case 7u:
      if ((a2 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v29, "i < 0");
        std::string::basic_string[abi:ne180100]<0>(v28, "size");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v30, 4294967081, v29, v28, __p, 1200);
        cv::error((cv *)v30, v20);
      }
      goto LABEL_30;
    case 8u:
      if ((a2 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v29, "i < 0");
        std::string::basic_string[abi:ne180100]<0>(v28, "size");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v30, 4294967081, v29, v28, __p, 1207);
        cv::error((cv *)v30, v21);
      }
LABEL_30:
      int32x2_t v18 = *(int32x2_t *)(*((void *)this + 2) + 16);
      goto LABEL_36;
    case 9u:
      if ((a2 & 0x80000000) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v29, "i < 0");
        std::string::basic_string[abi:ne180100]<0>(v28, "size");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v30, 4294967081, v29, v28, __p, 1220);
        cv::error((cv *)v30, v24);
      }
      int32x2_t v18 = *(int32x2_t *)(*((void *)this + 2) + 4);
      goto LABEL_36;
    case 0xAu:
      std::string::basic_string[abi:ne180100]<0>(v29, "This method is not implemented for oclMat yet");
      std::string::basic_string[abi:ne180100]<0>(v28, "size");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v30, 4294967083, v29, v28, __p, 1214);
      cv::error((cv *)v30, v22);
    default:
      std::string::basic_string[abi:ne180100]<0>(v29, "k == GPU_MAT");
      std::string::basic_string[abi:ne180100]<0>(v28, "size");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v30, 4294967081, v29, v28, __p, 1217);
      cv::error((cv *)v30, v23);
  }
}

void sub_225EFDCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::_InputArray::total(cv::_InputArray *this, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(cv::_InputArray *))(*(void *)this + 40))(this);
  if (v4 == 327680)
  {
    int32x2_t v10 = (uint64_t *)*((void *)this + 2);
    uint64_t v11 = *v10;
    uint64_t result = 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 5);
    if ((a2 & 0x80000000) == 0)
    {
      if ((int)result <= (int)a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v21, "i < (int)vv.size()");
        std::string::basic_string[abi:ne180100]<0>(v20, "total");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v22, 4294967081, v21, v20, __p, 1242);
        cv::error((cv *)v22, v13);
      }
      uint64_t v14 = *(unsigned int *)(v11 + 96 * a2 + 4);
      if ((int)v14 >= 3)
      {
        uint64_t v17 = *(int **)(v11 + 96 * a2 + 64);
        uint64_t result = 1;
        do
        {
          uint64_t v18 = *v17++;
          result *= v18;
          --v14;
        }
        while (v14);
      }
      else
      {
        return *(int *)(v11 + 96 * a2 + 12) * (uint64_t)*(int *)(v11 + 96 * a2 + 8);
      }
    }
  }
  else
  {
    if (v4 != 0x10000)
    {
      (*(void (**)(void *__return_ptr, cv::_InputArray *, uint64_t))(*(void *)this + 48))(v22, this, a2);
      int v8 = v22[0];
      int v9 = HIDWORD(v22[0]);
      return v9 * (uint64_t)v8;
    }
    if ((a2 & 0x80000000) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "i < 0");
      std::string::basic_string[abi:ne180100]<0>(v20, "total");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v22, 4294967081, v21, v20, __p, 1232);
      cv::error((cv *)v22, v5);
    }
    uint64_t v6 = *((void *)this + 2);
    uint64_t v7 = *(unsigned int *)(v6 + 4);
    if ((int)v7 < 3)
    {
      int v8 = *(_DWORD *)(v6 + 8);
      int v9 = *(_DWORD *)(v6 + 12);
      return v9 * (uint64_t)v8;
    }
    uint64_t v15 = *(int **)(v6 + 64);
    uint64_t result = 1;
    do
    {
      uint64_t v16 = *v15++;
      result *= v16;
      --v7;
    }
    while (v7);
  }
  return result;
}

void sub_225EFE070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::_InputArray::type(cv::_InputArray *this, int a2)
{
  HIDWORD(v4) = (*(uint64_t (**)(cv::_InputArray *))(*(void *)this + 40))(this);
  LODWORD(v4) = HIDWORD(v4);
  uint64_t result = 0xFFFFFFFFLL;
  switch((v4 >> 16))
  {
    case 0u:
      return result;
    case 1u:
    case 9u:
      int v6 = **((_DWORD **)this + 2);
      goto LABEL_12;
    case 2u:
    case 3u:
    case 4u:
      int v6 = *((_DWORD *)this + 2);
      goto LABEL_12;
    case 5u:
      uint64_t v7 = (void *)*((void *)this + 2);
      if ((int)(-1431655765 * ((v7[1] - *v7) >> 5)) <= a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v13, "i < (int)vv.size()");
        std::string::basic_string[abi:ne180100]<0>(v12, "type");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v14, 4294967081, v13, v12, __p, 1268);
        cv::error((cv *)v14, v8);
      }
      int v6 = *(_DWORD *)(*v7 + 96 * (a2 & ~(a2 >> 31)));
LABEL_12:
      uint64_t result = v6 & 0xFFF;
      break;
    case 6u:
      int v9 = (uint64_t **)*((void *)this + 2);
      uint64_t result = cv::MatExpr::type(v9);
      break;
    case 7u:
      uint64_t result = *(unsigned int *)(*((void *)this + 2) + 24);
      break;
    default:
      std::string::basic_string[abi:ne180100]<0>(v13, "k == GPU_MAT");
      std::string::basic_string[abi:ne180100]<0>(v12, "type");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v14, 4294967081, v13, v12, __p, 1276);
      cv::error((cv *)v14, v10);
  }
  return result;
}

void sub_225EFE2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::_InputArray::depth(cv::_InputArray *this)
{
  return (*(uint64_t (**)(cv::_InputArray *))(*(void *)this + 64))(this) & 7;
}

uint64_t cv::_InputArray::channels(cv::_InputArray *this)
{
  return (((*(unsigned int (**)(cv::_InputArray *))(*(void *)this + 64))(this) >> 3) & 0x1FF) + 1;
}

BOOL cv::_InputArray::empty(cv::_InputArray *this)
{
  HIDWORD(v2) = (*(uint64_t (**)(cv::_InputArray *))(*(void *)this + 40))(this);
  LODWORD(v2) = HIDWORD(v2);
  BOOL result = 0;
  switch((v2 >> 16))
  {
    case 0u:
      return 1;
    case 1u:
      uint64_t v6 = *((void *)this + 2);
      if (!*(void *)(v6 + 16)) {
        return 1;
      }
      uint64_t v7 = *(unsigned int *)(v6 + 4);
      if ((int)v7 >= 3)
      {
        uint64_t v11 = *(int **)(v6 + 64);
        uint64_t v8 = 1;
        do
        {
          uint64_t v12 = *v11++;
          v8 *= v12;
          --v7;
        }
        while (v7);
      }
      else
      {
        uint64_t v8 = *(int *)(v6 + 12) * (uint64_t)*(int *)(v6 + 8);
      }
      return v8 == 0;
    case 2u:
    case 6u:
      return result;
    case 3u:
    case 4u:
    case 5u:
      return **((void **)this + 2) == *(void *)(*((void *)this + 2) + 8);
    case 7u:
    case 8u:
      uint64_t v5 = *((void *)this + 2);
      if (!*(_DWORD *)(v5 + 16)) {
        return 1;
      }
      return *(_DWORD *)(v5 + 20) == 0;
    case 9u:
      return *(void *)(*((void *)this + 2) + 24) == 0;
    case 0xAu:
      std::string::basic_string[abi:ne180100]<0>(v15, "This method is not implemented for oclMat yet");
      std::string::basic_string[abi:ne180100]<0>(v14, "empty");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v16, 4294967083, v15, v14, __p, 1333);
      cv::error((cv *)v16, v9);
    default:
      std::string::basic_string[abi:ne180100]<0>(v15, "k == GPU_MAT");
      std::string::basic_string[abi:ne180100]<0>(v14, "empty");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v16, 4294967081, v15, v14, __p, 1336);
      cv::error((cv *)v16, v10);
  }
}

void sub_225EFE628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cv::_OutputArray::_OutputArray(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = 327680;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 0;
  *(void *)BOOL result = &unk_26D989EB8;
  return result;
}

uint64_t cv::_OutputArray::_OutputArray(uint64_t this, const cv::Mat *a2)
{
  *(void *)(this + 16) = a2;
  *(void *)(this + 24) = 0;
  *(void *)this = &unk_26D989EB8;
  *(_DWORD *)(this + 8) = -1073676288;
  return this;
}

uint64_t cv::_OutputArray::fixedSize(cv::_OutputArray *this)
{
  return (*((unsigned __int8 *)this + 11) >> 6) & 1;
}

uint64_t cv::_OutputArray::fixedType(cv::_OutputArray *this)
{
  return *((_DWORD *)this + 2) >> 31;
}

void cv::_OutputArray::create(cv::gpu::GpuMat **a1, int32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v12 = (*((uint64_t (**)(cv::gpu::GpuMat **))*a1 + 5))(a1);
  if (a6) {
    char v13 = 1;
  }
  else {
    char v13 = a5;
  }
  if ((v13 & 1) == 0 && (a4 & 0x80000000) != 0 && v12 == 0x10000)
  {
    if ((*((unsigned int (**)(cv::gpu::GpuMat **))*a1 + 12))(a1))
    {
      if (*(_DWORD *)(*((void *)a1[2] + 8) + 4) != a2->i32[0] || **((_DWORD **)a1[2] + 8) != a2->i32[1])
      {
        std::string::basic_string[abi:ne180100]<0>(v31, "!fixedSize() || ((Mat*)obj)->size.operator()() == _sz");
        std::string::basic_string[abi:ne180100]<0>(v30, "create");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(&v32, 4294967081, v31, v30, __p, 1374);
        cv::error((cv *)&v32, v15);
      }
    }
    if ((*((unsigned int (**)(cv::gpu::GpuMat **))*a1 + 13))(a1) && (*(_DWORD *)a1[2] & 0xFFF) != a3)
    {
      std::string::basic_string[abi:ne180100]<0>(v31, "!fixedType() || ((Mat*)obj)->type() == mtype");
      std::string::basic_string[abi:ne180100]<0>(v30, "create");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(&v32, 4294967081, v31, v30, __p, 1375);
      cv::error((cv *)&v32, v16);
    }
    uint64_t v17 = a1[2];
    int v18 = a2->i32[0];
    int v19 = a3 & 0xFFF;
    if (*((int *)v17 + 1) > 2
      || *((_DWORD *)v17 + 2) != a2->i32[1]
      || *((_DWORD *)v17 + 3) != v18
      || (*(_DWORD *)v17 & 0xFFF) != v19
      || !*((void *)v17 + 2))
    {
      v32.i32[0] = a2->i32[1];
      v32.i32[1] = v18;
      cv::Mat::create(v17, (cv::Mat *)2, (const int *)&v32, v19);
    }
  }
  else
  {
    if ((int)a4 < 0 && v12 == 589824) {
      char v21 = v13;
    }
    else {
      char v21 = 1;
    }
    if (v21)
    {
      if ((int)a4 >= 0 || v12 != 458752) {
        char v13 = 1;
      }
      if (v13)
      {
        int32x2_t v32 = vrev64_s32(*a2);
        (*((void (**)(cv::gpu::GpuMat **, uint64_t, int32x2_t *, uint64_t, uint64_t, uint64_t, uint64_t))*a1 + 18))(a1, 2, &v32, a3, a4, a5, a6);
      }
      else
      {
        if ((*((unsigned int (**)(cv::gpu::GpuMat **))*a1 + 12))(a1))
        {
          if (*((_DWORD *)a1[2] + 5) != a2->i32[0] || *((_DWORD *)a1[2] + 4) != a2->i32[1])
          {
            std::string::basic_string[abi:ne180100]<0>(v31, "!fixedSize() || ((ogl::Buffer*)obj)->size() == _sz");
            std::string::basic_string[abi:ne180100]<0>(v30, "create");
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
            cv::Exception::Exception(&v32, 4294967081, v31, v30, __p, 1388);
            cv::error((cv *)&v32, v27);
          }
        }
        if ((*((unsigned int (**)(cv::gpu::GpuMat **))*a1 + 13))(a1) && *((_DWORD *)a1[2] + 6) != a3)
        {
          std::string::basic_string[abi:ne180100]<0>(v31, "!fixedType() || ((ogl::Buffer*)obj)->type() == mtype");
          std::string::basic_string[abi:ne180100]<0>(v30, "create");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(&v32, 4294967081, v31, v30, __p, 1389);
          cv::error((cv *)&v32, v28);
        }
        cv::ogl::Buffer::create(a1[2], a2->u32[1], a2->u32[0], a3, 34962, 0);
      }
    }
    else
    {
      if ((*((unsigned int (**)(cv::gpu::GpuMat **))*a1 + 12))(a1))
      {
        if (*((_DWORD *)a1[2] + 2) != a2->i32[0] || *((_DWORD *)a1[2] + 1) != a2->i32[1])
        {
          std::string::basic_string[abi:ne180100]<0>(v31, "!fixedSize() || ((gpu::GpuMat*)obj)->size() == _sz");
          std::string::basic_string[abi:ne180100]<0>(v30, "create");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(&v32, 4294967081, v31, v30, __p, 1381);
          cv::error((cv *)&v32, v24);
        }
      }
      if ((*((unsigned int (**)(cv::gpu::GpuMat **))*a1 + 13))(a1)
        && (*(_DWORD *)a1[2] & 0xFFF) != a3)
      {
        std::string::basic_string[abi:ne180100]<0>(v31, "!fixedType() || ((gpu::GpuMat*)obj)->type() == mtype");
        std::string::basic_string[abi:ne180100]<0>(v30, "create");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(&v32, 4294967081, v31, v30, __p, 1382);
        cv::error((cv *)&v32, v25);
      }
      cv::gpu::GpuMat::create(a1[2], (void *)a2->u32[1], a2->i32[0], a3);
    }
  }
}

void sub_225EFEDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void cv::_OutputArray::create(cv::_OutputArray *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v14 = (*(uint64_t (**)(cv::_OutputArray *))(*(void *)this + 40))(this);
  if (a7) {
    char v15 = 1;
  }
  else {
    char v15 = a6;
  }
  if ((v15 & 1) == 0 && (a5 & 0x80000000) != 0 && v14 == 0x10000)
  {
    if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 96))(this))
    {
      if (*(_DWORD *)(*(void *)(*((void *)this + 2) + 64) + 4) != a3
        || **(_DWORD **)(*((void *)this + 2) + 64) != a2)
      {
        std::string::basic_string[abi:ne180100]<0>(v32, "!fixedSize() || ((Mat*)obj)->size.operator()() == Size(cols, rows)");
        std::string::basic_string[abi:ne180100]<0>(v31, "create");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(&v33, 4294967081, v32, v31, __p, 1402);
        cv::error((cv *)&v33, v17);
      }
    }
    if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 104))(this)
      && (**((_DWORD **)this + 2) & 0xFFF) != a4)
    {
      std::string::basic_string[abi:ne180100]<0>(v32, "!fixedType() || ((Mat*)obj)->type() == mtype");
      std::string::basic_string[abi:ne180100]<0>(v31, "create");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(&v33, 4294967081, v32, v31, __p, 1403);
      cv::error((cv *)&v33, v18);
    }
    uint64_t v19 = *((void *)this + 2);
    int v20 = a4 & 0xFFF;
    if (*(int *)(v19 + 4) > 2
      || *(_DWORD *)(v19 + 8) != a2
      || *(_DWORD *)(v19 + 12) != a3
      || (*(_DWORD *)v19 & 0xFFF) != v20
      || !*(void *)(v19 + 16))
    {
      int v33 = (int)a2;
      int v34 = a3;
      cv::Mat::create((cv::Mat *)v19, (cv::Mat *)2, &v33, v20);
    }
  }
  else
  {
    if ((int)a5 < 0 && v14 == 589824) {
      char v22 = v15;
    }
    else {
      char v22 = 1;
    }
    if (v22)
    {
      if ((int)a5 >= 0 || v14 != 458752) {
        char v15 = 1;
      }
      if (v15)
      {
        int v33 = (int)a2;
        int v34 = a3;
        (*(void (**)(cv::_OutputArray *, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)this + 144))(this, 2, &v33, a4, a5, a6, a7);
      }
      else
      {
        if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 96))(this))
        {
          if (*(_DWORD *)(*((void *)this + 2) + 20) != a3
            || *(_DWORD *)(*((void *)this + 2) + 16) != a2)
          {
            std::string::basic_string[abi:ne180100]<0>(v32, "!fixedSize() || ((ogl::Buffer*)obj)->size() == Size(cols, rows)");
            std::string::basic_string[abi:ne180100]<0>(v31, "create");
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
            cv::Exception::Exception(&v33, 4294967081, v32, v31, __p, 1416);
            cv::error((cv *)&v33, v28);
          }
        }
        if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 104))(this)
          && *(_DWORD *)(*((void *)this + 2) + 24) != a4)
        {
          std::string::basic_string[abi:ne180100]<0>(v32, "!fixedType() || ((ogl::Buffer*)obj)->type() == mtype");
          std::string::basic_string[abi:ne180100]<0>(v31, "create");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(&v33, 4294967081, v32, v31, __p, 1417);
          cv::error((cv *)&v33, v29);
        }
        cv::ogl::Buffer::create(*((void *)this + 2), a2, a3, a4, 34962, 0);
      }
    }
    else
    {
      if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 96))(this))
      {
        if (*(_DWORD *)(*((void *)this + 2) + 8) != a3
          || *(_DWORD *)(*((void *)this + 2) + 4) != a2)
        {
          std::string::basic_string[abi:ne180100]<0>(v32, "!fixedSize() || ((gpu::GpuMat*)obj)->size() == Size(cols, rows)");
          std::string::basic_string[abi:ne180100]<0>(v31, "create");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(&v33, 4294967081, v32, v31, __p, 1409);
          cv::error((cv *)&v33, v25);
        }
      }
      if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 104))(this)
        && (**((_DWORD **)this + 2) & 0xFFF) != a4)
      {
        std::string::basic_string[abi:ne180100]<0>(v32, "!fixedType() || ((gpu::GpuMat*)obj)->type() == mtype");
        std::string::basic_string[abi:ne180100]<0>(v31, "create");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(&v33, 4294967081, v32, v31, __p, 1410);
        cv::error((cv *)&v33, v26);
      }
      cv::gpu::GpuMat::create(*((cv::gpu::GpuMat **)this + 2), a2, a3, a4);
    }
  }
}

void sub_225EFF4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void cv::_OutputArray::create(cv::_OutputArray *this, cv::Mat *a2, int *a3, unsigned int a4, signed int a5, int a6, unsigned int a7)
{
  int v14 = (*(uint64_t (**)(cv::_OutputArray *))(*(void *)this + 40))(this);
  int v15 = a4 & 0xFFF;
  if (v14 == 0x20000)
  {
    if ((a5 & 0x80000000) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v92, "i < 0");
      std::string::basic_string[abi:ne180100]<0>(v91, "create");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1466);
      cv::error((cv *)v93, v24);
    }
    if (v15 != (*((_DWORD *)this + 2) & 0xFFF) && ((a4 & 0xFF8) != 0 || ((a7 >> *((_DWORD *)this + 2)) & 1) == 0))
    {
      std::string::basic_string[abi:ne180100]<0>(v92, "mtype == type0 || (CV_MAT_CN(mtype) == 1 && ((1 << type0) & fixedDepthMask) != 0)");
      std::string::basic_string[abi:ne180100]<0>(v91, "create");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1468);
      cv::error((cv *)v93, v25);
    }
    if (a2 != 2
      || ((int v36 = *((_DWORD *)this + 7), *a3 != v36) || a3[1] != *((_DWORD *)this + 6))
      && (!a6 || *a3 != *((_DWORD *)this + 6) || a3[1] != v36))
    {
      std::string::basic_string[abi:ne180100]<0>(v92, "dims == 2 && ((sizes[0] == sz.height && sizes[1] == sz.width) || (allowTransposed && sizes[0] == sz.width && sizes[1] == sz.height))");
      std::string::basic_string[abi:ne180100]<0>(v91, "create");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1470);
      cv::error((cv *)v93, v37);
    }
  }
  else
  {
    if (v14 != 0x10000)
    {
      HIDWORD(v26) = v14;
      LODWORD(v26) = v14;
      switch((v26 >> 16))
      {
        case 0u:
          std::string::basic_string[abi:ne180100]<0>(v92, "create() called for the missing output array");
          std::string::basic_string[abi:ne180100]<0>(v91, "create");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(v93, 4294967269, v92, v91, __p, 1563);
          cv::error((cv *)v93, v59);
        case 3u:
        case 4u:
          if (a2 != 2 || (int v27 = *a3, *a3 != 1) && (v28 = a3[1], v28 != 1) && v28 * v27)
          {
            std::string::basic_string[abi:ne180100]<0>(v92, "dims == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)");
            std::string::basic_string[abi:ne180100]<0>(v91, "create");
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
            cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1476);
            cv::error((cv *)v93, v29);
          }
          int v30 = a3[1];
          int v31 = v30 * v27;
          int v32 = v27 + v30 - 1;
          if (v31 <= 0) {
            int v32 = 0;
          }
          unint64_t v33 = v32;
          int v34 = (uint64_t *)*((void *)this + 2);
          if (v14 == 0x40000)
          {
            if (a5 < 0)
            {
              if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 96))(this)
                && 0xAAAAAAAAAAAAAAABLL * ((v34[1] - *v34) >> 3) != v33)
              {
                std::string::basic_string[abi:ne180100]<0>(v92, "!fixedSize() || len == vv.size()");
                std::string::basic_string[abi:ne180100]<0>(v91, "create");
                std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
                cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1485);
                cv::error((cv *)v93, v86);
              }
              std::vector<std::vector<unsigned char>>::resize(v34, v33);
              return;
            }
            if ((int)(-1431655765 * ((unint64_t)(v34[1] - *v34) >> 3)) <= a5)
            {
              std::string::basic_string[abi:ne180100]<0>(v92, "i < (int)vv.size()");
              std::string::basic_string[abi:ne180100]<0>(v91, "create");
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
              cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1489);
              cv::error((cv *)v93, v35);
            }
            int v34 = (uint64_t *)(*v34 + 24 * a5);
          }
          else if ((a5 & 0x80000000) == 0)
          {
            std::string::basic_string[abi:ne180100]<0>(v92, "i < 0");
            std::string::basic_string[abi:ne180100]<0>(v91, "create");
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
            cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1493);
            cv::error((cv *)v93, v60);
          }
          unsigned int v61 = *((_DWORD *)this + 2);
          if (v15 != (v61 & 0xFFF)
            && ((((unsigned __int16)v61 ^ (unsigned __int16)a4) & 0xFF8) != 0 || ((a7 >> *((_DWORD *)this + 2)) & 1) == 0))
          {
            std::string::basic_string[abi:ne180100]<0>(v92, "mtype == type0 || (CV_MAT_CN(mtype) == CV_MAT_CN(type0) && ((1 << type0) & fixedDepthMask) != 0)");
            std::string::basic_string[abi:ne180100]<0>(v91, "create");
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
            cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1496);
            cv::error((cv *)v93, v62);
          }
          unint64_t v87 = (((v61 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v61 & 7))) & 3);
          if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 96))(this)
            && (v34[1] - *v34) / v87 != v33)
          {
            std::string::basic_string[abi:ne180100]<0>(v92, "!fixedSize() || len == ((vector<uchar>*)v)->size() / esz");
            std::string::basic_string[abi:ne180100]<0>(v91, "create");
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
            cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1499);
            cv::error((cv *)v93, v88);
          }
          if ((int)v87 <= 23)
          {
            switch((int)v87)
            {
              case 1:
                std::vector<unsigned char>::resize((unint64_t *)v34, v33);
                return;
              case 2:
                std::vector<cv::Vec<unsigned char,2>>::resize((uint64_t)v34, v33);
                return;
              case 3:
                std::vector<cv::Vec<unsigned char,3>>::resize((uint64_t)v34, v33);
                return;
              case 4:
                std::vector<int>::resize((std::vector<int> *)v34, v33);
                return;
              case 6:
                std::vector<cv::Vec<short,3>>::resize((uint64_t)v34, v33);
                return;
              case 8:
                std::vector<cv::Vec<int,2>>::resize((uint64_t)v34, v33);
                return;
              case 12:
                std::vector<cv::Vec<int,3>>::resize((uint64_t)v34, v33);
                return;
              case 16:
                std::vector<cv::Vec<int,4>>::resize((uint64_t)v34, v33);
                return;
              default:
                goto LABEL_175;
            }
          }
          if ((int)v87 > 63)
          {
            if ((int)v87 > 255)
            {
              if (v87 == 256)
              {
                std::vector<cv::Vec<int,64>>::resize((uint64_t)v34, v33);
                return;
              }
              if (v87 == 512)
              {
                std::vector<cv::Vec<int,128>>::resize((uint64_t)v34, v33);
                return;
              }
            }
            else
            {
              if (v87 == 64)
              {
                std::vector<cv::Vec<int,16>>::resize((uint64_t)v34, v33);
                return;
              }
              if (v87 == 128)
              {
                std::vector<cv::Vec<int,32>>::resize((uint64_t)v34, v33);
                return;
              }
            }
          }
          else if ((int)v87 > 35)
          {
            if (v87 == 36)
            {
              std::vector<cv::Vec<int,9>>::resize((uint64_t)v34, v33);
              return;
            }
            if (v87 == 48)
            {
              std::vector<cv::Vec<int,12>>::resize((uint64_t)v34, v33);
              return;
            }
          }
          else
          {
            if (v87 == 24)
            {
              std::vector<cv::Vec<int,6>>::resize((uint64_t)v34, v33);
              return;
            }
            if (v87 == 32)
            {
              std::vector<cv::Vec<int,8>>::resize((uint64_t)v34, v33);
              return;
            }
          }
LABEL_175:
          cv::format(v92, (((v61 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v61 & 7))) & 3));
          std::string::basic_string[abi:ne180100]<0>(v91, "create");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(v93, 4294967291, v92, v91, __p, 1551);
          cv::error((cv *)v93, v89);
        case 5u:
          uint64_t v43 = (uint64_t *)*((void *)this + 2);
          if (a5 < 0)
          {
            if (a2 != 2 || (v63 = *a3, *a3 != 1) && (int v64 = a3[1], v64 != 1) && v64 * v63)
            {
              std::string::basic_string[abi:ne180100]<0>(v92, "dims == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)");
              std::string::basic_string[abi:ne180100]<0>(v91, "create");
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
              cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1574);
              cv::error((cv *)v93, v65);
            }
            int v66 = a3[1];
            int v67 = v66 * v63;
            int v68 = v63 + v66 - 1;
            if (v67 <= 0) {
              int v68 = 0;
            }
            unint64_t v69 = v68;
            unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((v43[1] - *v43) >> 5);
            if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 96))(this) && v70 != v69)
            {
              std::string::basic_string[abi:ne180100]<0>(v92, "!fixedSize() || len == len0");
              std::string::basic_string[abi:ne180100]<0>(v91, "create");
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
              cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1577);
              cv::error((cv *)v93, v71);
            }
            std::vector<cv::Mat>::resize(v43, v69);
            if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 104))(this) && v70 < v69)
            {
              int v72 = *((_DWORD *)this + 2) & 0xFFF;
              uint64_t v73 = *v43;
              do
              {
                if ((*(_DWORD *)(v73 + 96 * v70) & 0xFFF) != v72)
                {
                  if (*(void *)(v73 + 96 * v70 + 16))
                  {
                    uint64_t v74 = *(unsigned int *)(v73 + 96 * v70 + 4);
                    if ((int)v74 >= 3)
                    {
                      uint64_t v76 = *(int **)(v73 + 96 * v70 + 64);
                      uint64_t v75 = 1;
                      do
                      {
                        uint64_t v77 = *v76++;
                        v75 *= v77;
                        --v74;
                      }
                      while (v74);
                    }
                    else
                    {
                      uint64_t v75 = *(int *)(v73 + 96 * v70 + 12) * (uint64_t)*(int *)(v73 + 96 * v70 + 8);
                    }
                    if (v75)
                    {
                      std::string::basic_string[abi:ne180100]<0>(v92, "v[j].empty()");
                      std::string::basic_string[abi:ne180100]<0>(v91, "create");
                      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
                      cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1586);
                      cv::error((cv *)v93, v78);
                    }
                  }
                  *(_DWORD *)(v73 + 96 * v70) = *(_DWORD *)(v73 + 96 * v70) & 0xFFFFF000 | v72;
                }
                ++v70;
              }
              while (v70 != v69);
            }
          }
          else
          {
            uint64_t v44 = *v43;
            if ((int)(-1431655765 * ((unint64_t)(v43[1] - *v43) >> 5)) <= a5)
            {
              std::string::basic_string[abi:ne180100]<0>(v92, "i < (int)v.size()");
              std::string::basic_string[abi:ne180100]<0>(v91, "create");
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
              cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1593);
              cv::error((cv *)v93, v45);
            }
            unsigned int v46 = a5;
            uint64_t v17 = v44 + 96 * a5;
            if (!a6) {
              goto LABEL_178;
            }
            if ((*(unsigned char *)(v17 + 1) & 0x40) != 0)
            {
              LODWORD(v54) = *(_DWORD *)(v44 + 96 * v46 + 4);
            }
            else
            {
              if (((*(uint64_t (**)(cv::_OutputArray *))(*(void *)this + 104))(this) & 1) != 0
                || (*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 96))(this))
              {
                std::string::basic_string[abi:ne180100]<0>(v92, "!fixedType() && !fixedSize()");
                std::string::basic_string[abi:ne180100]<0>(v91, "create");
                std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
                cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1600);
                cv::error((cv *)v93, v48);
              }
              uint64_t v49 = v44 + 96 * v46;
              uint64_t v52 = *(atomic_uint **)(v49 + 24);
              uint64_t v51 = (void *)(v49 + 24);
              uint64_t v50 = v52;
              if (v52 && atomic_fetch_add(v50, 0xFFFFFFFF) == 1) {
                cv::Mat::deallocate((cv::Mat *)v17, v47);
              }
              uint64_t v53 = v44 + 96 * v46;
              int v56 = *(_DWORD *)(v53 + 4);
              uint64_t v55 = (int *)(v53 + 4);
              LODWORD(v54) = v56;
              *(void *)(v55 + 3) = 0;
              *(void *)(v55 + 7) = 0;
              *(void *)(v55 + 11) = 0;
              *(void *)(v55 + 9) = 0;
              if (v56 >= 1)
              {
                uint64_t v57 = 0;
                uint64_t v58 = *(void *)(v44 + 96 * v46 + 64);
                do
                {
                  *(_DWORD *)(v58 + 4 * v57++) = 0;
                  uint64_t v54 = *v55;
                }
                while (v57 < v54);
              }
              void *v51 = 0;
            }
            if (a2 != 2
              || (v54 == 2 ? (BOOL v79 = *(void *)(v44 + 96 * v46 + 16) == 0) : (BOOL v79 = 1),
                  v79
               || (*(_DWORD *)v17 & 0xFFF) != v15
               || *(_DWORD *)(v44 + 96 * v46 + 8) != a3[1]
               || *(_DWORD *)(v44 + 96 * v46 + 12) != *a3))
            {
LABEL_178:
              if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 104))(this))
              {
                int v80 = (a4 >> 3) & 0x1FF;
                if (v80 == ((*(_DWORD *)v17 >> 3) & 0x1FF) && ((a7 >> *((_DWORD *)this + 2)) & 1) != 0)
                {
                  LOWORD(v15) = *(_DWORD *)v17 & 0xFFF;
                }
                else if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 104))(this) {
                       && (v80 != ((*(_DWORD *)v17 >> 3) & 0x1FF) || ((a7 >> *((_DWORD *)this + 2)) & 1) == 0))
                }
                {
                  std::string::basic_string[abi:ne180100]<0>(v92, "!fixedType() || (CV_MAT_CN(mtype) == m.channels() && ((1 << CV_MAT_TYPE(flags)) & fixedDepthMask) != 0)");
                  std::string::basic_string[abi:ne180100]<0>(v91, "create");
                  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
                  cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1614);
                  cv::error((cv *)v93, v81);
                }
              }
              if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 96))(this))
              {
                if (*(_DWORD *)(v44 + 96 * v46 + 4) != a2)
                {
                  std::string::basic_string[abi:ne180100]<0>(v92, "m.dims == dims");
                  std::string::basic_string[abi:ne180100]<0>(v91, "create");
                  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
                  cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1618);
                  cv::error((cv *)v93, v82);
                }
                if ((int)a2 >= 1)
                {
                  uint64_t v83 = 0;
                  uint64_t v84 = (void *)(v44 + 96 * v46 + 64);
                  do
                  {
                    if (*(_DWORD *)(*v84 + v83 * 4) != a3[v83])
                    {
                      std::string::basic_string[abi:ne180100]<0>(v92, "m.size[j] == sizes[j]");
                      std::string::basic_string[abi:ne180100]<0>(v91, "create");
                      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
                      cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1620);
                      cv::error((cv *)v93, v85);
                    }
                    ++v83;
                  }
                  while (a2 != v83);
                }
              }
              goto LABEL_136;
            }
          }
          return;
        case 0xAu:
          std::string::basic_string[abi:ne180100]<0>(v92, "This method is not implemented for oclMat yet");
          std::string::basic_string[abi:ne180100]<0>(v91, "create");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(v93, 4294967083, v92, v91, __p, 1558);
          cv::error((cv *)v93, v41);
        default:
          std::string::basic_string[abi:ne180100]<0>(v92, "k == STD_VECTOR_MAT");
          std::string::basic_string[abi:ne180100]<0>(v91, "create");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1567);
          cv::error((cv *)v93, v42);
      }
    }
    if ((a5 & 0x80000000) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v92, "i < 0");
      std::string::basic_string[abi:ne180100]<0>(v91, "create");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1432);
      cv::error((cv *)v93, v16);
    }
    uint64_t v17 = *((void *)this + 2);
    if (!a6) {
      goto LABEL_179;
    }
    if ((*(unsigned char *)(v17 + 1) & 0x40) == 0)
    {
      if (((*(uint64_t (**)(cv::_OutputArray *))(*(void *)this + 104))(this) & 1) != 0
        || (*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 96))(this))
      {
        std::string::basic_string[abi:ne180100]<0>(v92, "!fixedType() && !fixedSize()");
        std::string::basic_string[abi:ne180100]<0>(v91, "create");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1438);
        cv::error((cv *)v93, v19);
      }
      int v20 = *(atomic_uint **)(v17 + 24);
      if (v20 && atomic_fetch_add(v20, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v17, v18);
      }
      *(void *)(v17 + 16) = 0;
      *(void *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 32) = 0;
      if (*(int *)(v17 + 4) >= 1)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)(v17 + 64);
        do
          *(_DWORD *)(v22 + 4 * v21++) = 0;
        while (v21 < *(int *)(v17 + 4));
      }
      *(void *)(v17 + 24) = 0;
    }
    if (a2 != 2
      || *(_DWORD *)(v17 + 4) != 2
      || !*(void *)(v17 + 16)
      || (*(_DWORD *)v17 & 0xFFF) != v15
      || *(_DWORD *)(v17 + 8) != a3[1]
      || *(_DWORD *)(v17 + 12) != *a3)
    {
LABEL_179:
      if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 104))(this))
      {
        if ((((unsigned __int16)*(_DWORD *)v17 ^ (unsigned __int16)a4) & 0xFF8) != 0
          || ((a7 >> *((_DWORD *)this + 2)) & 1) == 0)
        {
          if (v15 != (*(_DWORD *)v17 & 0xFFF))
          {
            std::string::basic_string[abi:ne180100]<0>(v92, "CV_MAT_TYPE(mtype) == m.type()");
            std::string::basic_string[abi:ne180100]<0>(v91, "create");
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
            cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1452);
            cv::error((cv *)v93, v23);
          }
        }
        else
        {
          LOWORD(v15) = *(_DWORD *)v17 & 0xFFF;
        }
      }
      if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 96))(this))
      {
        if (*(_DWORD *)(v17 + 4) != a2)
        {
          std::string::basic_string[abi:ne180100]<0>(v92, "m.dims == dims");
          std::string::basic_string[abi:ne180100]<0>(v91, "create");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1456);
          cv::error((cv *)v93, v38);
        }
        if ((int)a2 >= 1)
        {
          uint64_t v39 = 0;
          do
          {
            if (*(_DWORD *)(*(void *)(v17 + 64) + v39 * 4) != a3[v39])
            {
              std::string::basic_string[abi:ne180100]<0>(v92, "m.size[j] == sizes[j]");
              std::string::basic_string[abi:ne180100]<0>(v91, "create");
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
              cv::Exception::Exception(v93, 4294967081, v92, v91, __p, 1458);
              cv::error((cv *)v93, v40);
            }
            ++v39;
          }
          while (a2 != v39);
        }
      }
LABEL_136:
      cv::Mat::create((cv::Mat *)v17, a2, a3, v15);
    }
  }
}

void sub_225F00DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::vector<unsigned char>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned char>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        int32x2_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        int v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<unsigned char>::resize(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1] - *a1;
  BOOL v3 = a2 >= v2;
  size_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<unsigned char>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

void std::vector<cv::Vec<unsigned char,2>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<cv::Vec<unsigned char,2>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<cv::Vec<unsigned char,3>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (*(void *)(a1 + 8) - *(void *)a1);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv::Vec<unsigned char,3>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 3 * a2;
  }
}

void std::vector<cv::Vec<short,3>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv::Vec<short,3>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 6 * a2;
  }
}

void std::vector<cv::Vec<int,2>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<cv::Vec<int,2>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<cv::Vec<int,3>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv::Vec<int,3>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 12 * a2;
  }
}

void std::vector<cv::Vec<int,4>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<cv::Vec<int,4>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<cv::Vec<int,6>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv::Vec<int,6>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void std::vector<cv::Vec<int,8>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<cv::Vec<int,8>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<cv::Vec<int,9>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv::Vec<int,9>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 36 * a2;
  }
}

void std::vector<cv::Vec<int,12>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv::Vec<int,12>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 48 * a2;
  }
}

void std::vector<cv::Vec<int,16>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 6;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + (a2 << 6);
    }
  }
  else
  {
    std::vector<cv::Vec<int,16>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<cv::Vec<int,32>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 7;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + (a2 << 7);
    }
  }
  else
  {
    std::vector<cv::Vec<int,32>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<cv::Vec<int,64>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 8;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + (a2 << 8);
    }
  }
  else
  {
    std::vector<cv::Vec<int,64>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<cv::Vec<int,128>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 9;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + (a2 << 9);
    }
  }
  else
  {
    std::vector<cv::Vec<int,128>>::__append((char **)a1, a2 - v2);
  }
}

void cv::_OutputArray::release(cv::_OutputArray *this)
{
  if ((*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 96))(this))
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "!fixedSize()");
    std::string::basic_string[abi:ne180100]<0>(v16, "release");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v18, 4294967081, v17, v16, __p, 1629);
    cv::error((cv *)v18, v2);
  }
  HIDWORD(v4) = (*(uint64_t (**)(cv::_OutputArray *))(*(void *)this + 40))(this);
  LODWORD(v4) = HIDWORD(v4);
  switch((v4 >> 16))
  {
    case 0u:
      return;
    case 1u:
      uint64_t v5 = *((void *)this + 2);
      unint64_t v6 = *(atomic_uint **)(v5 + 24);
      if (v6 && atomic_fetch_add(v6, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v5, v3);
      }
      *(void *)(v5 + 16) = 0;
      *(void *)(v5 + 40) = 0;
      *(void *)(v5 + 48) = 0;
      *(void *)(v5 + 32) = 0;
      if (*(int *)(v5 + 4) >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v5 + 64);
        do
          *(_DWORD *)(v8 + 4 * v7++) = 0;
        while (v7 < *(int *)(v5 + 4));
      }
      *(void *)(v5 + 24) = 0;
      break;
    case 3u:
      uint64_t v14 = 0;
      (*(void (**)(cv::_OutputArray *, uint64_t *, void, uint64_t, void, void))(*(void *)this + 128))(this, &v14, *((_DWORD *)this + 2) & 0xFFF, 0xFFFFFFFFLL, 0, 0);
      break;
    case 4u:
      std::vector<std::vector<long long>>::__clear[abi:ne180100](*((uint64_t **)this + 2));
      break;
    case 5u:
      uint64_t v11 = (cv::Mat **)*((void *)this + 2);
      char v13 = *v11;
      int v12 = v11[1];
      if (v12 != *v11)
      {
        do
        {
          int v12 = (cv::Mat *)((char *)v12 - 96);
          std::allocator<cv::Mat>::destroy[abi:ne180100](v11 + 16, v12);
        }
        while (v12 != v13);
      }
      v11[1] = v13;
      break;
    case 7u:
    case 8u:
      cv::BaseRowFilter::~BaseRowFilter(*((cv::BaseRowFilter **)this + 2));
      break;
    case 9u:
      cv::gpu::GpuMat::release(*((cv::gpu::GpuMat **)this + 2), v3);
      break;
    case 0xAu:
      std::string::basic_string[abi:ne180100]<0>(v17, "This method is not implemented for oclMat yet");
      std::string::basic_string[abi:ne180100]<0>(v16, "release");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v18, 4294967083, v17, v16, __p, 1674);
      cv::error((cv *)v18, v9);
    default:
      std::string::basic_string[abi:ne180100]<0>(v17, "k == STD_VECTOR_MAT");
      std::string::basic_string[abi:ne180100]<0>(v16, "release");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v18, 4294967081, v17, v16, __p, 1677);
      cv::error((cv *)v18, v10);
  }
}

void sub_225F01754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void cv::_OutputArray::clear(cv::Mat **this)
{
  int v2 = (*((uint64_t (**)(cv::Mat **))*this + 5))(this);
  BOOL v3 = *this;
  if (v2 == 0x10000)
  {
    if ((*((unsigned int (**)(cv::Mat **))v3 + 12))(this))
    {
      std::string::basic_string[abi:ne180100]<0>(v8, "!fixedSize()");
      std::string::basic_string[abi:ne180100]<0>(v7, "clear");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v9, 4294967081, v8, v7, __p, 1690);
      cv::error((cv *)v9, v4);
    }
    cv::Mat::resize(this[2], 0);
  }
  else
  {
    uint64_t v5 = (void (*)(cv::Mat **))*((void *)v3 + 19);
    v5(this);
  }
}

void sub_225F01958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

BOOL cv::_OutputArray::needed(cv::_OutputArray *this)
{
  return (*(unsigned int (**)(cv::_OutputArray *))(*(void *)this + 40))(this) != 0;
}

uint64_t cv::_OutputArray::getMatRef(cv::_OutputArray *this, signed int a2)
{
  int v4 = (*(uint64_t (**)(cv::_OutputArray *))(*(void *)this + 40))(this);
  if (a2 < 0)
  {
    if (v4 != 0x10000)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "k == MAT");
      std::string::basic_string[abi:ne180100]<0>(v11, "getMatRef");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 1708);
      cv::error((cv *)v13, v9);
    }
    return *((void *)this + 2);
  }
  else
  {
    if (v4 != 327680)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "k == STD_VECTOR_MAT");
      std::string::basic_string[abi:ne180100]<0>(v11, "getMatRef");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 1713);
      cv::error((cv *)v13, v5);
    }
    unint64_t v6 = (void *)*((void *)this + 2);
    if ((int)(-1431655765 * ((v6[1] - *v6) >> 5)) <= a2)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "i < (int)v.size()");
      std::string::basic_string[abi:ne180100]<0>(v11, "getMatRef");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 1715);
      cv::error((cv *)v13, v7);
    }
    return *v6 + 96 * a2;
  }
}

void sub_225F01C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t *cv::noArray(cv *this)
{
  return &cv::_none;
}

void cv::setIdentity(void (***a1)(uint64_t *__return_ptr), int64x2_t *a2)
{
  (**a1)(&v41);
  if (SHIDWORD(v41) >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "m.dims <= 2");
    std::string::basic_string[abi:ne180100]<0>(v31, "setIdentity");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(&v33, 4294967081, v32, v31, __p, 1834);
    cv::error((cv *)&v33, v4);
  }
  uint64_t v5 = v42;
  uint64_t v6 = v43;
  int v7 = v43;
  if ((v41 & 0xFFF) == 6)
  {
    if (v42 >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      double v15 = *(double *)a2->i64;
      uint64x2_t v16 = (uint64x2_t)vdupq_n_s64((unint64_t)v43 - 1);
      int64x2_t v17 = vdupq_n_s64(2uLL);
      int v18 = v44;
      uint64_t v19 = (8 * v43 + 8) & 0xFFFFFFFF0;
      uint64_t v20 = 8 * (v51 >> 3);
      do
      {
        if (v7 >= 1)
        {
          unint64_t v21 = 0;
          int64x2_t v22 = (int64x2_t)xmmword_225F31530;
          do
          {
            int32x2_t v23 = vmovn_s64((int64x2_t)vcgeq_u64(v16, (uint64x2_t)v22));
            if (v23.i8[0])
            {
              if (v13 == v21) {
                double v24 = v15;
              }
              else {
                double v24 = 0.0;
              }
              *(double *)&v18[v21 / 4] = v24;
            }
            if (v23.i8[4])
            {
              if (v13 - 8 == v21) {
                double v25 = v15;
              }
              else {
                double v25 = 0.0;
              }
              *(double *)&v18[v21 / 4 + 2] = v25;
            }
            int64x2_t v22 = vaddq_s64(v22, v17);
            v21 += 16;
          }
          while (v19 != v21);
        }
        ++v14;
        v13 += 8;
        int v18 = (float *)((char *)v18 + v20);
      }
      while (v14 != v5);
    }
  }
  else if ((v41 & 0xFFF) == 5)
  {
    if (v42 >= 1)
    {
      uint64_t v8 = 0;
      float v9 = *(double *)a2->i64;
      int32x2_t v10 = v44;
      uint64_t v11 = 4 * (v51 >> 2);
      int v12 = v44;
      do
      {
        if ((int)v6 >= 1) {
          bzero(v10, 4 * v6);
        }
        if (v8 < (int)v6) {
          *int v12 = v9;
        }
        ++v8;
        int v12 = (float *)((char *)v12 + v11 + 4);
        int32x2_t v10 = (float *)((char *)v10 + v11);
      }
      while (v5 != v8);
    }
  }
  else
  {
    int64x2_t v33 = 0u;
    long long v34 = 0u;
    cv::Mat::operator=((uint64_t)&v41, &v33);
    cv::Mat::diag((cv::Mat *)&v41, 0, (uint64_t)&v33);
    cv::Mat::operator=((uint64_t)&v33, a2);
    if (*((void *)&v34 + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v34 + 1), 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v33, v3);
    }
    *(void *)&long long v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    if (v33.i32[1] >= 1)
    {
      uint64_t v26 = 0;
      uint64_t v27 = v38;
      do
        *(_DWORD *)(v27 + 4 * v26++) = 0;
      while (v26 < v33.i32[1]);
    }
    *((void *)&v34 + 1) = 0;
    if (v39 != (cv *)&v40) {
      cv::fastFree((void **)v39, v3);
    }
  }
  if (v45 && atomic_fetch_add(v45, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v41, v3);
  }
  uint64_t v44 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  if (SHIDWORD(v41) >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v29 = v49;
    do
      *(_DWORD *)(v29 + 4 * v28++) = 0;
    while (v28 < SHIDWORD(v41));
  }
  uint64_t v45 = 0;
  if (v50 != (void **)&v51) {
    cv::fastFree(v50, v3);
  }
}

void sub_225F0202C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  cv::Mat::~Mat((cv::Mat *)&a28, a2);
  cv::Mat::~Mat((cv::Mat *)(v28 - 192), v30);
  _Unwind_Resume(a1);
}

void cv::transpose(void (***this)(uint64_t *__return_ptr), const cv::_InputArray *a2, const cv::_OutputArray *a3)
{
  (**this)(&v34);
  if (SHIDWORD(v34) < 1) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = (unint64_t)v43[HIDWORD(v34) - 1];
  }
  if (SHIDWORD(v34) > 2 || v4 >= 0x21)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "src.dims <= 2 && esz <= (size_t)32");
    std::string::basic_string[abi:ne180100]<0>(v29, "transpose");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(&v30, 4294967081, &v17, v29, __p, 2017);
    cv::error((cv *)&v30, v5);
  }
  (*(void (**)(const cv::_InputArray *, void, void, uint64_t, uint64_t, void, void))(*(void *)a2 + 136))(a2, v36, v35, v34 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(void **__return_ptr, const cv::_InputArray *, uint64_t))a2)(&v17, a2, 0xFFFFFFFFLL);
  if (v35 == v19 && v36 == v18)
  {
    unint64_t v6 = 0xFEFEEEA1uLL >> v4;
    if (v20 == v37)
    {
      if (v6)
      {
        std::string::basic_string[abi:ne180100]<0>(v29, "func != 0");
        std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
        std::string::basic_string[abi:ne180100]<0>(v16, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(&v30, 4294967081, v29, __p, v16, 2033);
        cv::error((cv *)&v30, v15);
      }
      cv::transposeInplaceTab[v4](v20, v27, v36);
    }
    else
    {
      if (v6)
      {
        std::string::basic_string[abi:ne180100]<0>(v29, "func != 0");
        std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
        std::string::basic_string[abi:ne180100]<0>(v16, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(&v30, 4294967081, v29, __p, v16, 2039);
        cv::error((cv *)&v30, v7);
      }
      cv::transposeTab[v4]();
    }
  }
  else
  {
    BOOL v9 = v42[1] == v25[1] && *v42 == *v25;
    if (!v9 || v35 != 1 && v36 != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v29, "src.size() == dst.size() && (src.cols == 1 || src.rows == 1)");
      std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
      std::string::basic_string[abi:ne180100]<0>(v16, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(&v30, 4294967081, v29, __p, v16, 2025);
      cv::error((cv *)&v30, v10);
    }
    int v31 = 0x10000;
    int v32 = &v17;
    uint64_t v33 = 0;
    int v30 = &unk_26D989EB8;
    cv::Mat::copyTo((cv::Mat *)&v34, (const cv::_OutputArray *)&v30);
  }
  if (v21 && atomic_fetch_add(v21, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v17, v8);
  }
  uint64_t v20 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (SHIDWORD(v17) >= 1)
  {
    uint64_t v11 = 0;
    int v12 = v25;
    do
      v12[v11++] = 0;
    while (v11 < SHIDWORD(v17));
  }
  unint64_t v21 = 0;
  if (v26 != (cv *)&v27) {
    cv::fastFree((void **)v26, v8);
  }
  if (v38 && atomic_fetch_add(v38, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v34, v8);
  }
  uint64_t v37 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  if (SHIDWORD(v34) >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = v42;
    do
      v14[v13++] = 0;
    while (v13 < SHIDWORD(v34));
  }
  uint64_t v38 = 0;
  if (v43 != (void **)&v44) {
    cv::fastFree(v43, v8);
  }
}

void sub_225F025CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  cv::Exception::~Exception((cv::Exception *)&a44);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  cv::Mat::~Mat((cv::Mat *)&a17, v46);
  cv::Mat::~Mat((cv::Mat *)(v44 - 128), v47);
  _Unwind_Resume(a1);
}

void cv::completeSymm(void (***this)(uint64_t *__return_ptr), const cv::_OutputArray *a2)
{
  int v17 = (int)a2;
  (**this)(&v22);
  uint64_t v3 = v32;
  if (SHIDWORD(v22) < 1)
  {
    size_t v4 = 0;
  }
  else
  {
    size_t v4 = (size_t)v31[HIDWORD(v22) - 1];
    if (HIDWORD(v22) > 2)
    {
LABEL_6:
      std::string::basic_string[abi:ne180100]<0>(v20, "m.dims <= 2 && m.rows == m.cols");
      std::string::basic_string[abi:ne180100]<0>(v19, "completeSymm");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v21, 4294967081, v20, v19, __p, 2051);
      cv::error((cv *)v21, v6);
    }
  }
  int v5 = v23;
  if (v23 != v24) {
    goto LABEL_6;
  }
  if (v23 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = 0;
    uint64_t v9 = v25;
    uint64_t v16 = v23;
    uint64_t v10 = v25;
    do
    {
      if (!v17) {
        int v5 = v7;
      }
      ++v7;
      if (v17) {
        int v8 = v7;
      }
      if (v8 < v5)
      {
        uint64_t v11 = (char *)(v10 + v4 * v8);
        int v12 = (char *)(v9 + v3 * v8);
        uint64_t v13 = v5 - (uint64_t)v8;
        do
        {
          memcpy(v11, v12, v4);
          v11 += v4;
          v12 += v3;
          --v13;
        }
        while (v13);
      }
      v10 += v3;
      v9 += v4;
    }
    while (v7 != v16);
  }
  if (v26 && atomic_fetch_add(v26, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v22, v2);
  }
  uint64_t v25 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (SHIDWORD(v22) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v30;
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < SHIDWORD(v22));
  }
  uint64_t v26 = 0;
  if (v31 != (void **)&v32) {
    cv::fastFree(v31, v2);
  }
}

void sub_225F02910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  cv::Exception::~Exception((cv::Exception *)&a30);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  cv::Mat::~Mat((cv::Mat *)(v30 - 184), v32);
  _Unwind_Resume(a1);
}

void cv::NAryMatIterator::init(cv::NAryMatIterator *this, const cv::Mat **a2, unint64_t a3, unint64_t a4, int a5)
{
  LODWORD(v5) = a5;
  unint64_t v6 = a2;
  if (!a2 || !(a3 | a4))
  {
    std::string::basic_string[abi:ne180100]<0>(v100, "_arrays && (_ptrs || _planes)");
    std::string::basic_string[abi:ne180100]<0>(v99, "init");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
    cv::Exception::Exception(v101, 4294967081, v100, v99, __p, 3165);
    cv::error((cv *)v101, v8);
  }
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a4;
  *(void *)this = a2;
  *((_DWORD *)this + 6) = a5;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  if (a5 < 0)
  {
    LODWORD(v5) = -1;
    do
    {
      uint64_t v9 = (uint64_t)*v6++;
      LODWORD(v5) = v5 + 1;
    }
    while (v9);
    *((_DWORD *)this + 6) = v5;
    if (v5 >= 0x3E9)
    {
      std::string::basic_string[abi:ne180100]<0>(v100, "narrays <= 1000");
      std::string::basic_string[abi:ne180100]<0>(v99, "init");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v101, 4294967081, v100, v99, __p, 3180);
      cv::error((cv *)v101, v10);
    }
  }
  *((_DWORD *)this + 12) = 0;
  if ((int)v5 < 1) {
    goto LABEL_60;
  }
  uint64_t v11 = 0;
  LODWORD(v12) = 0;
  int v13 = -1;
  uint64_t v14 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v15 = *(void *)(*(void *)this + 8 * v11);
    if (!v15)
    {
      std::string::basic_string[abi:ne180100]<0>(v100, "arrays[i] != 0");
      std::string::basic_string[abi:ne180100]<0>(v99, "init");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
      cv::Exception::Exception(v101, 4294967081, v100, v99, __p, 3187);
      cv::error((cv *)v101, v16);
    }
    uint64_t v17 = *((void *)this + 2);
    if (v17) {
      *(void *)(v17 + 8 * v11) = *(void *)(v15 + 16);
    }
    if (*(void *)(v15 + 16))
    {
      if ((v14 & 0x80000000) != 0)
      {
        uint64_t v12 = *(unsigned int *)(v15 + 4);
        uint64_t v14 = v11;
        if ((int)v12 <= 0)
        {
          int v13 = *(_DWORD *)(v15 + 4);
          LODWORD(v12) = 0;
        }
        else
        {
          uint64_t v21 = 0;
          while (*(int *)(*(void *)(v15 + 64) + 4 * v21) <= 1)
          {
            if (v12 == ++v21)
            {
              int v13 = *(_DWORD *)(v15 + 4);
              goto LABEL_36;
            }
          }
          int v13 = *(_DWORD *)(v15 + 4);
          LODWORD(v12) = v21;
        }
      }
      else
      {
        int v18 = *(_DWORD **)(v15 + 64);
        unint64_t v19 = *(v18 - 1);
        uint64_t v20 = *(_DWORD **)(*(void *)(*(void *)this + 8 * v14) + 64);
        if (v19 != *(v20 - 1)) {
          goto LABEL_33;
        }
        if (v19 == 2)
        {
          if (*v18 != *v20 || v18[1] != v20[1]) {
            goto LABEL_33;
          }
        }
        else if ((int)v19 >= 1)
        {
          if (*v18 != *v20) {
            goto LABEL_33;
          }
          uint64_t v22 = 1;
          do
          {
            unint64_t v23 = v22;
            if (v19 == v22) {
              break;
            }
            int v24 = v18[v22];
            int v25 = v20[v22++];
          }
          while (v24 == v25);
          if (v23 < v19)
          {
LABEL_33:
            std::string::basic_string[abi:ne180100]<0>(v100, "A.size == arrays[i0]->size");
            std::string::basic_string[abi:ne180100]<0>(v99, "init");
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
            cv::Exception::Exception(v101, 4294967081, v100, v99, __p, 3207);
            cv::error((cv *)v101, v26);
          }
        }
      }
LABEL_36:
      if ((*(unsigned char *)(v15 + 1) & 0x40) == 0)
      {
        uint64_t v27 = *(void *)(v15 + 72);
        int v28 = *(_DWORD *)(v15 + 4);
        BOOL v29 = __OFSUB__(v28, 1);
        int v30 = v28 - 1;
        if (v30 < 0 != v29) {
          uint64_t v31 = 0;
        }
        else {
          uint64_t v31 = *(void *)(v27 + 8 * v30);
        }
        int v32 = v13 - 1;
        if (*(void *)(v27 + 8 * (v13 - 1)) != v31)
        {
          std::string::basic_string[abi:ne180100]<0>(v100, "A.step[d-1] == A.elemSize()");
          std::string::basic_string[abi:ne180100]<0>(v99, "init");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
          cv::Exception::Exception(v101, 4294967081, v100, v99, __p, 3211);
          cv::error((cv *)v101, v33);
        }
        uint64_t v34 = v32;
        if ((int)v12 >= v32) {
          int v35 = v13 - 1;
        }
        else {
          int v35 = v12;
        }
        int v36 = v13;
        while (v34 > (int)v12)
        {
          unint64_t v37 = *(void *)(*(void *)(v15 + 72) + 8 * v34 - 8);
          unint64_t v38 = *(void *)(*(void *)(v15 + 72) + 8 * v34) * *(int *)(*(void *)(v15 + 64) + 4 * v34);
          --v34;
          --v36;
          if (v38 < v37) {
            goto LABEL_50;
          }
        }
        int v36 = v35;
LABEL_50:
        int v39 = *((_DWORD *)this + 12);
        if (v39 <= v36) {
          int v39 = v36;
        }
        *((_DWORD *)this + 12) = v39;
      }
    }
    ++v11;
    uint64_t v5 = *((int *)this + 6);
  }
  while (v11 < v5);
  if ((v14 & 0x80000000) != 0)
  {
LABEL_60:
    *((_DWORD *)this + 12) = 0;
  }
  else
  {
    int v40 = v13 - 1;
    uint64_t v41 = *(void *)(*(void *)(*(void *)this + 8 * v14) + 64);
    uint64_t v42 = v13 - 1;
    uint64_t v43 = *(int *)(v41 + 4 * v42);
    uint64_t v44 = *((int *)this + 12);
    if ((int)v44 < v13 - 1) {
      int v40 = *((_DWORD *)this + 12);
    }
    while (1)
    {
      uint64_t v45 = v43;
      if (v42 <= v44) {
        break;
      }
      uint64_t v46 = *(int *)(v41 - 4 + 4 * v42--);
      uint64_t v43 = v45 * v46;
      --v13;
      if (v43 != (int)v43) {
        goto LABEL_62;
      }
    }
    int v13 = v40;
LABEL_62:
    *((void *)this + 5) = v45;
    if (v13 == v12) {
      int v47 = 0;
    }
    else {
      int v47 = v13;
    }
    *((_DWORD *)this + 12) = v47;
    BOOL v29 = __OFSUB__(v47, 1);
    int v48 = v47 - 1;
    if (v48 < 0 != v29)
    {
      uint64_t v50 = 1;
      unint64_t v51 = (uint64_t *)((char *)this + 32);
    }
    else
    {
      uint64_t v49 = 4 * v48;
      uint64_t v50 = 1;
      unint64_t v51 = (uint64_t *)((char *)this + 32);
      do
      {
        v50 *= *(int *)(v41 + v49);
        v49 -= 4;
      }
      while (v49 != -4);
    }
    uint64_t *v51 = v50;
  }
  *((void *)this + 7) = 0;
  if (*((void *)this + 1)) {
    BOOL v52 = (int)v5 < 1;
  }
  else {
    BOOL v52 = 1;
  }
  if (!v52)
  {
    for (uint64_t i = 0; i < *((int *)this + 6); ++i)
    {
      uint64_t v54 = *(int **)(*(void *)this + 8 * i);
      if (!v54)
      {
        std::string::basic_string[abi:ne180100]<0>(v100, "arrays[i] != 0");
        std::string::basic_string[abi:ne180100]<0>(v99, "init");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matrix.cpp");
        cv::Exception::Exception(v101, 4294967081, v100, v99, __p, 3248);
        cv::error((cv *)v101, v55);
      }
      unint64_t v56 = *((void *)v54 + 2);
      if (v56)
      {
        uint64_t v57 = *((void *)this + 5);
        unsigned int v58 = *v54;
        *(void *)((char *)v101 + 4) = 0x100000002;
        HIDWORD(v101[0]) = v57;
        v101[1] = v56;
        uint64_t v102 = (char *)v101 + 8;
        uint64_t v103 = (cv *)&v104;
        LODWORD(v101[0]) = v58 & 0xFFF | 0x42FF4000;
        uint64_t v104 = (int)v57 * (uint64_t)(int)((((v58 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v58 & 7))) & 3));
        uint64_t v105 = (((v58 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v58 & 7))) & 3);
        v101[3] = v56 + v104;
        *(void *)&v101[2] = v56;
        *((void *)&v101[2] + 1) = v56 + v104;
        uint64_t v59 = *((void *)this + 1);
        uint64_t v60 = (_OWORD *)(v59 + 96 * i);
        if (v60 != v101)
        {
          uint64_t v61 = v59 + 96 * i;
          int v64 = *(atomic_uint **)(v61 + 24);
          int v63 = (void *)(v61 + 24);
          uint64_t v62 = v64;
          if (v64 && atomic_fetch_add(v62, 0xFFFFFFFF) == 1) {
            cv::Mat::deallocate((cv::Mat *)(v59 + 96 * i), a2);
          }
          uint64_t v65 = v59 + 96 * i;
          *(void *)(v65 + 32) = 0;
          uint64_t v66 = v65 + 32;
          *(void *)(v66 - 16) = 0;
          int v67 = (int *)(v66 - 28);
          int v68 = *(_DWORD *)(v66 - 28);
          *(void *)(v66 + 8) = 0;
          *(void *)(v66 + 16) = 0;
          if (v68 <= 0)
          {
            void *v63 = 0;
            *(_DWORD *)uint64_t v60 = v101[0];
          }
          else
          {
            uint64_t v69 = 0;
            uint64_t v70 = *(void *)(v59 + 96 * i + 64);
            do
            {
              *(_DWORD *)(v70 + 4 * v69++) = 0;
              uint64_t v71 = *v67;
            }
            while (v69 < v71);
            void *v63 = 0;
            *(_DWORD *)uint64_t v60 = v101[0];
            if ((int)v71 > 2)
            {
LABEL_100:
              cv::Mat::copySize((cv::Mat *)(v59 + 96 * i), (const cv::Mat *)v101);
              goto LABEL_101;
            }
          }
          if (SDWORD1(v101[0]) > 2) {
            goto LABEL_100;
          }
          *int v67 = DWORD1(v101[0]);
          uint64_t v85 = v59 + 96 * i;
          *(void *)(v85 + 8) = *((void *)&v101[0] + 1);
          uint64_t v86 = v103;
          unint64_t v87 = *(void **)(v85 + 72);
          *unint64_t v87 = *(void *)v103;
          v87[1] = *((void *)v86 + 1);
LABEL_101:
          *(_OWORD *)uint64_t v66 = v101[2];
          uint64_t v88 = v59 + 96 * i;
          *(void *)(v88 + 48) = *(void *)&v101[3];
          *(_OWORD *)(v66 - 16) = v101[1];
          *(void *)(v88 + 56) = *((void *)&v101[3] + 1);
          if (*((void *)&v101[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v101[1] + 1), 0xFFFFFFFF) == 1) {
            cv::Mat::deallocate((cv::Mat *)v101, a2);
          }
        }
        *(void *)&v101[1] = 0;
        memset(&v101[2], 0, 24);
        if (SDWORD1(v101[0]) >= 1)
        {
          uint64_t v89 = 0;
          uint64_t v90 = v102;
          do
            *(_DWORD *)&v90[4 * v89++] = 0;
          while (v89 < SDWORD1(v101[0]));
        }
        *((void *)&v101[1] + 1) = 0;
        uint64_t v91 = (void **)v103;
        if (v103 == (cv *)&v104) {
          continue;
        }
LABEL_121:
        cv::fastFree(v91, a2);
        continue;
      }
      uint64_t v102 = (char *)v101 + 8;
      uint64_t v103 = (cv *)&v104;
      uint64_t v104 = 0;
      uint64_t v105 = 0;
      LODWORD(v101[0]) = 1124007936;
      memset((char *)v101 + 4, 0, 48);
      v101[3] = 0u;
      uint64_t v72 = *((void *)this + 1);
      uint64_t v73 = (_OWORD *)(v72 + 96 * i);
      if (v73 == v101)
      {
        memset(&v101[2], 0, 24);
        goto LABEL_120;
      }
      uint64_t v74 = v72 + 96 * i;
      uint64_t v77 = *(atomic_uint **)(v74 + 24);
      uint64_t v76 = (void *)(v74 + 24);
      uint64_t v75 = v77;
      if (v77 && atomic_fetch_add(v75, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)(v72 + 96 * i), a2);
      }
      uint64_t v78 = v72 + 96 * i;
      *(void *)(v78 + 32) = 0;
      uint64_t v79 = v78 + 32;
      *(void *)(v79 - 16) = 0;
      int v80 = (int *)(v79 - 28);
      int v81 = *(_DWORD *)(v79 - 28);
      *(void *)(v79 + 8) = 0;
      *(void *)(v79 + 16) = 0;
      if (v81 <= 0)
      {
        *uint64_t v76 = 0;
        *(_DWORD *)uint64_t v73 = v101[0];
      }
      else
      {
        uint64_t v82 = 0;
        uint64_t v83 = *(void *)(v72 + 96 * i + 64);
        do
        {
          *(_DWORD *)(v83 + 4 * v82++) = 0;
          uint64_t v84 = *v80;
        }
        while (v82 < v84);
        *uint64_t v76 = 0;
        *(_DWORD *)uint64_t v73 = v101[0];
        if ((int)v84 > 2) {
          goto LABEL_113;
        }
      }
      if (SDWORD1(v101[0]) <= 2)
      {
        *int v80 = DWORD1(v101[0]);
        uint64_t v92 = v72 + 96 * i;
        *(void *)(v92 + 8) = *((void *)&v101[0] + 1);
        int v93 = v103;
        unsigned int v94 = *(void **)(v92 + 72);
        void *v94 = *(void *)v103;
        v94[1] = *((void *)v93 + 1);
        goto LABEL_114;
      }
LABEL_113:
      cv::Mat::copySize((cv::Mat *)(v72 + 96 * i), (const cv::Mat *)v101);
LABEL_114:
      *(_OWORD *)uint64_t v79 = v101[2];
      uint64_t v95 = v72 + 96 * i;
      *(void *)(v95 + 48) = *(void *)&v101[3];
      *(_OWORD *)(v79 - 16) = v101[1];
      *(void *)(v95 + 56) = *((void *)&v101[3] + 1);
      if (*((void *)&v101[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v101[1] + 1), 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v101, a2);
      }
      *(void *)&v101[1] = 0;
      memset(&v101[2], 0, 24);
      if (SDWORD1(v101[0]) >= 1)
      {
        uint64_t v96 = 0;
        uint64_t v97 = v102;
        do
          *(_DWORD *)&v97[4 * v96++] = 0;
        while (v96 < SDWORD1(v101[0]));
      }
LABEL_120:
      *((void *)&v101[1] + 1) = 0;
      uint64_t v91 = (void **)v103;
      if (v103 != (cv *)&v104) {
        goto LABEL_121;
      }
    }
  }
}

void sub_225F033C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

cv::NAryMatIterator *cv::NAryMatIterator::NAryMatIterator(cv::NAryMatIterator *this, const cv::Mat **a2, unsigned __int8 **a3, int a4)
{
  *((void *)this + 7) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  cv::NAryMatIterator::init(this, a2, 0, (unint64_t)a3, a4);
  return this;
}

uint64_t cv::NAryMatIterator::operator++(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 56);
  if (v1 < *(void *)(result + 32) - 1)
  {
    unint64_t v2 = v1 + 1;
    *(void *)(result + 56) = v2;
    uint64_t v3 = *(unsigned int *)(result + 48);
    if (v3 == 1)
    {
      if (*(void *)(result + 16))
      {
        uint64_t v4 = *(unsigned int *)(result + 24);
        if ((int)v4 >= 1)
        {
          uint64_t v5 = 0;
          uint64_t v6 = 8 * v4;
          do
          {
            uint64_t v7 = *(void *)(result + 16);
            if (*(void *)(v7 + v5)) {
              *(void *)(v7 + v5) = *(void *)(*(void *)(*(void *)result + v5) + 16)
            }
                                   + **(void **)(*(void *)(*(void *)result + v5) + 72) * v2;
            v5 += 8;
          }
          while (v6 != v5);
        }
      }
      uint64_t v8 = *(void *)(result + 8);
      if (v8)
      {
        uint64_t v9 = *(unsigned int *)(result + 24);
        if ((int)v9 >= 1)
        {
          uint64_t v10 = 0;
          uint64_t v11 = (void *)(v8 + 16);
          uint64_t v12 = 8 * v9;
          do
          {
            if (*v11) {
              void *v11 = *(void *)(*(void *)(*(void *)result + v10) + 16)
            }
                   + **(void **)(*(void *)(*(void *)result + v10) + 72) * v2;
            v10 += 8;
            v11 += 12;
          }
          while (v12 != v10);
        }
      }
    }
    else
    {
      uint64_t v13 = *(unsigned int *)(result + 24);
      if ((int)v13 >= 1)
      {
        uint64_t v14 = 0;
        BOOL v16 = (int)v3 > 0 && (int)v2 > 0;
        do
        {
          uint64_t v17 = *(void **)(*(void *)result + 8 * v14);
          uint64_t v18 = v17[2];
          if (v18)
          {
            if (v16)
            {
              uint64_t v19 = v17[8];
              uint64_t v20 = v17[9];
              uint64_t v21 = v3;
              int v22 = v2;
              do
              {
                int v23 = *(_DWORD *)(v19 + 4 * (v21 - 1));
                int v24 = v22 / v23;
                v18 += *(void *)(v20 + 8 * (v21 - 1)) * (v22 % v23);
                if (v21 < 2) {
                  break;
                }
                --v21;
                v22 /= v23;
              }
              while (v24 > 0);
            }
            uint64_t v25 = *(void *)(result + 16);
            if (v25) {
              *(void *)(v25 + 8 * v14) = v18;
            }
            uint64_t v26 = *(void *)(result + 8);
            if (v26) {
              *(void *)(v26 + 96 * v14 + 16) = v18;
            }
          }
          ++v14;
        }
        while (v14 != v13);
      }
    }
  }
  return result;
}

uint64_t cv::transposeI_8u(uint64_t this, unsigned __int8 *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = &a2[this];
    uint64_t v5 = a2 + 1;
    uint64_t v6 = (unsigned __int8 *)(this + 1);
    uint64_t v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        uint64_t v8 = v6;
        uint64_t v9 = v4;
        uint64_t v10 = a3;
        do
        {
          unsigned __int8 v11 = *v8;
          this = *v9;
          *v8++ = this;
          *uint64_t v9 = v11;
          --v10;
          uint64_t v9 = &a2[(void)v9];
        }
        while (v7 != v10);
      }
      ++v7;
      uint64_t v4 = &v5[(void)v4];
      uint64_t v6 = &v5[(void)v6];
    }
    while (v3 != a3);
  }
  return this;
}

uint64_t cv::transposeI_16u(uint64_t this, unsigned __int8 *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = &a2[this];
    uint64_t v5 = a2 + 2;
    uint64_t v6 = (unsigned __int8 *)(this + 2);
    uint64_t v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        uint64_t v8 = v6;
        uint64_t v9 = v4;
        uint64_t v10 = a3;
        do
        {
          __int16 v11 = *(_WORD *)v8;
          this = *(unsigned __int16 *)v9;
          *(_WORD *)uint64_t v8 = this;
          v8 += 2;
          *(_WORD *)uint64_t v9 = v11;
          --v10;
          uint64_t v9 = &a2[(void)v9];
        }
        while (v7 != v10);
      }
      ++v7;
      uint64_t v4 = &v5[(void)v4];
      uint64_t v6 = &v5[(void)v6];
    }
    while (v3 != a3);
  }
  return this;
}

uint64_t cv::transposeI_8uC3(uint64_t this, unsigned __int8 *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = &a2[this];
    uint64_t v5 = a2 + 3;
    uint64_t v6 = (unsigned __int8 *)(this + 3);
    uint64_t v7 = 1;
    unint64_t v8 = a3;
    do
    {
      if (++v3 < v8)
      {
        uint64_t v9 = v6;
        uint64_t v10 = v4;
        unint64_t v11 = v8;
        do
        {
          unsigned __int8 v12 = v9[2];
          this = *(unsigned __int16 *)v9;
          unsigned __int8 v13 = v10[2];
          *(_WORD *)uint64_t v9 = *(_WORD *)v10;
          v9[2] = v13;
          *(_WORD *)uint64_t v10 = this;
          v10[2] = v12;
          --v11;
          uint64_t v10 = &a2[(void)v10];
          v9 += 3;
        }
        while (v7 != v11);
      }
      ++v7;
      uint64_t v4 = &v5[(void)v4];
      uint64_t v6 = &v5[(void)v6];
    }
    while (v3 != v8);
  }
  return this;
}

uint64_t cv::transposeI_32s(uint64_t this, unsigned __int8 *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = &a2[this];
    uint64_t v5 = a2 + 4;
    uint64_t v6 = (unsigned __int8 *)(this + 4);
    uint64_t v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        unint64_t v8 = v6;
        uint64_t v9 = v4;
        uint64_t v10 = a3;
        do
        {
          int v11 = *(_DWORD *)v8;
          this = *(unsigned int *)v9;
          *(_DWORD *)unint64_t v8 = this;
          v8 += 4;
          *(_DWORD *)uint64_t v9 = v11;
          --v10;
          uint64_t v9 = &a2[(void)v9];
        }
        while (v7 != v10);
      }
      ++v7;
      uint64_t v4 = &v5[(void)v4];
      uint64_t v6 = &v5[(void)v6];
    }
    while (v3 != a3);
  }
  return this;
}

uint64_t cv::transposeI_16uC3(uint64_t this, unsigned __int8 *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = &a2[this];
    uint64_t v5 = a2 + 6;
    uint64_t v6 = (unsigned __int8 *)(this + 6);
    uint64_t v7 = 1;
    unint64_t v8 = a3;
    do
    {
      if (++v3 < v8)
      {
        uint64_t v9 = v6;
        uint64_t v10 = v4;
        unint64_t v11 = v8;
        do
        {
          __int16 v12 = *((_WORD *)v9 + 2);
          this = *(unsigned int *)v9;
          __int16 v13 = *((_WORD *)v10 + 2);
          *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
          *((_WORD *)v9 + 2) = v13;
          *(_DWORD *)uint64_t v10 = this;
          *((_WORD *)v10 + 2) = v12;
          --v11;
          uint64_t v10 = &a2[(void)v10];
          v9 += 6;
        }
        while (v7 != v11);
      }
      ++v7;
      uint64_t v4 = &v5[(void)v4];
      uint64_t v6 = &v5[(void)v6];
    }
    while (v3 != v8);
  }
  return this;
}

uint64_t cv::transposeI_32sC2(uint64_t this, unsigned __int8 *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = &a2[this];
    uint64_t v5 = a2 + 8;
    uint64_t v6 = (uint64_t *)(this + 8);
    uint64_t v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        unint64_t v8 = v6;
        uint64_t v9 = (uint64_t *)v4;
        uint64_t v10 = a3;
        do
        {
          uint64_t v11 = *v8;
          this = *v9;
          *v8++ = *v9;
          *uint64_t v9 = v11;
          --v10;
          uint64_t v9 = (uint64_t *)&a2[(void)v9];
        }
        while (v7 != v10);
      }
      ++v7;
      uint64_t v4 = &v5[(void)v4];
      uint64_t v6 = (uint64_t *)&v5[(void)v6];
    }
    while (v3 != a3);
  }
  return this;
}

uint64_t cv::transposeI_32sC3(uint64_t this, unsigned __int8 *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = &a2[this];
    uint64_t v5 = a2 + 12;
    uint64_t v6 = this + 12;
    uint64_t v7 = 1;
    unint64_t v8 = a3;
    do
    {
      if (++v3 < v8)
      {
        uint64_t v9 = v6;
        uint64_t v10 = v4;
        unint64_t v11 = v8;
        do
        {
          int v12 = *(_DWORD *)(v9 + 8);
          this = *(void *)v9;
          int v13 = *((_DWORD *)v10 + 2);
          *(void *)uint64_t v9 = *(void *)v10;
          *(_DWORD *)(v9 + 8) = v13;
          *(void *)uint64_t v10 = this;
          *((_DWORD *)v10 + 2) = v12;
          --v11;
          uint64_t v10 = &a2[(void)v10];
          v9 += 12;
        }
        while (v7 != v11);
      }
      ++v7;
      uint64_t v4 = &v5[(void)v4];
      v6 += (uint64_t)v5;
    }
    while (v3 != v8);
  }
  return this;
}

uint64_t cv::transposeI_32sC4(uint64_t this, unsigned __int8 *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = &a2[this];
    uint64_t v5 = a2 + 16;
    uint64_t v6 = (unsigned __int8 *)(this + 16);
    uint64_t v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        unint64_t v8 = v6;
        uint64_t v9 = v4;
        uint64_t v10 = a3;
        do
        {
          long long v11 = *(_OWORD *)v8;
          *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
          v8 += 16;
          *(_OWORD *)uint64_t v9 = v11;
          --v10;
          uint64_t v9 = &a2[(void)v9];
        }
        while (v7 != v10);
      }
      ++v7;
      uint64_t v4 = &v5[(void)v4];
      uint64_t v6 = &v5[(void)v6];
    }
    while (v3 != a3);
  }
  return this;
}

uint64_t cv::transposeI_32sC6(uint64_t this, unsigned __int8 *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = &a2[this];
    uint64_t v5 = a2 + 24;
    uint64_t v6 = (unsigned __int8 *)(this + 24);
    uint64_t v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        unint64_t v8 = v6;
        uint64_t v9 = v4;
        uint64_t v10 = a3;
        do
        {
          uint64_t v11 = *((void *)v8 + 2);
          long long v12 = *(_OWORD *)v8;
          this = *((void *)v9 + 2);
          *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
          *((void *)v8 + 2) = this;
          *(_OWORD *)uint64_t v9 = v12;
          *((void *)v9 + 2) = v11;
          --v10;
          uint64_t v9 = &a2[(void)v9];
          v8 += 24;
        }
        while (v7 != v10);
      }
      ++v7;
      uint64_t v4 = &v5[(void)v4];
      uint64_t v6 = &v5[(void)v6];
    }
    while (v3 != a3);
  }
  return this;
}

uint64_t cv::transposeI_32sC8(uint64_t this, unsigned __int8 *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = &a2[this];
    uint64_t v5 = a2 + 32;
    uint64_t v6 = (unsigned __int8 *)(this + 32);
    uint64_t v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        unint64_t v8 = v6;
        uint64_t v9 = v4;
        uint64_t v10 = a3;
        do
        {
          long long v12 = *(_OWORD *)v8;
          long long v11 = *((_OWORD *)v8 + 1);
          long long v13 = *((_OWORD *)v9 + 1);
          *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
          *((_OWORD *)v8 + 1) = v13;
          v8 += 32;
          *(_OWORD *)uint64_t v9 = v12;
          *((_OWORD *)v9 + 1) = v11;
          --v10;
          uint64_t v9 = &a2[(void)v9];
        }
        while (v7 != v10);
      }
      ++v7;
      uint64_t v4 = &v5[(void)v4];
      uint64_t v6 = &v5[(void)v6];
    }
    while (v3 != a3);
  }
  return this;
}

unsigned char *cv::transpose_8u(unsigned char *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = *a5;
  uint64_t v6 = (int)a5[1];
  uint64_t v7 = a5[1];
  uint64_t v8 = 4 * a2;
  if ((int)v5 >= 4)
  {
    unint64_t v9 = 0;
    uint64_t v42 = *a5;
    unint64_t v10 = (v5 - 4);
    uint64_t v11 = 4 * a4;
    uint64_t v12 = a2 + 3;
    uint64_t v13 = 2 * a2 + 3;
    uint64_t v14 = a3 + 3 * a4;
    uint64_t v15 = a3 + a4;
    BOOL v16 = result;
    uint64_t v17 = a3;
    uint64_t v18 = 3 * a2;
    uint64_t v19 = a3 + 2 * a4;
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v20 = 0;
        uint64_t v21 = v16;
        do
        {
          int v22 = (unsigned char *)(v17 + v20);
          *int v22 = *v21;
          v22[1] = v21[a2];
          v22[2] = v21[2 * a2];
          v22[3] = v21[3 * a2];
          int v23 = (unsigned char *)(v17 + v20 + a4);
          unsigned char *v23 = v21[1];
          v23[1] = v21[v12 - 2];
          v23[2] = v21[v13 - 2];
          v23[3] = v21[v18 + 1];
          int v24 = &v23[a4];
          *int v24 = v21[2];
          v24[1] = v21[v12 - 1];
          v24[2] = v21[v13 - 1];
          v24[3] = v21[v18 + 2];
          uint64_t v25 = &v24[a4];
          *uint64_t v25 = v21[3];
          v25[1] = v21[v12];
          v25[2] = v21[v13];
          v25[3] = v21[v18 + 3];
          v20 += 4;
          v21 += v8;
        }
        while (v20 <= v6 - 4);
        uint64_t v20 = v20;
      }
      else
      {
        uint64_t v20 = 0;
      }
      if ((int)v20 < (int)v7)
      {
        uint64_t v26 = a2 * v20;
        uint64_t v27 = v17;
        uint64_t v28 = v15;
        uint64_t v29 = v19;
        uint64_t v30 = v14;
        uint64_t v31 = v7;
        do
        {
          *(unsigned char *)(v27 + v20) = v16[v26];
          *(unsigned char *)(v28 + v20) = v16[v26 + 1];
          *(unsigned char *)(v29 + v20) = v16[v26 + 2];
          *(unsigned char *)(v30 + v20) = v16[v26 + 3];
          --v31;
          ++v30;
          ++v29;
          ++v28;
          ++v27;
          v26 += a2;
        }
        while (v20 != v31);
      }
      v9 += 4;
      v17 += v11;
      v16 += 4;
      v14 += v11;
      v19 += v11;
      v15 += v11;
    }
    while (v9 <= v10);
    uint64_t v5 = v42;
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((int)v9 < (int)v5)
  {
    uint64_t v32 = v9;
    uint64_t v33 = &result[v9];
    uint64_t v34 = a3 + a4 * v32;
    BOOL result = (unsigned char *)(v34 + 1);
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v36 = 0;
        unint64_t v37 = v33;
        do
        {
          unint64_t v38 = &result[v36];
          *(v38 - 1) = *v37;
          unsigned char *v38 = v37[a2];
          v38[1] = v37[2 * a2];
          v38[2] = v37[3 * a2];
          v36 += 4;
          v37 += v8;
        }
        while (v36 <= v6 - 4);
        uint64_t v35 = v36;
      }
      else
      {
        uint64_t v35 = 0;
      }
      if ((int)v35 < (int)v7)
      {
        uint64_t v39 = v7 - v35;
        int v40 = (unsigned char *)(v34 + v35);
        uint64_t v41 = a2 * v35;
        do
        {
          *v40++ = v33[v41];
          v41 += a2;
          --v39;
        }
        while (v39);
      }
      ++v32;
      ++v33;
      result += a4;
      v34 += a4;
    }
    while (v32 != v5);
  }
  return result;
}

_WORD *cv::transpose_16u(_WORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = *a5;
  uint64_t v6 = (int)a5[1];
  uint64_t v7 = a5[1];
  uint64_t v8 = 4 * a2;
  if ((int)v5 >= 4)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 4 * a4;
    uint64_t v11 = a2 + 6;
    uint64_t v12 = 2 * a2 + 6;
    uint64_t v13 = a3 + 3 * a4;
    uint64_t v14 = a3 + a4;
    uint64_t v15 = result;
    uint64_t v16 = a3;
    uint64_t v17 = 3 * a2;
    uint64_t v18 = a3 + 2 * a4;
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v19 = 0;
        uint64_t v20 = v15;
        do
        {
          uint64_t v21 = (_WORD *)(v16 + 2 * v19);
          _WORD *v21 = *v20;
          v21[1] = *(_WORD *)((char *)v20 + a2);
          v21[2] = v20[a2];
          void v21[3] = *(_WORD *)((char *)v20 + 3 * a2);
          int v22 = (_WORD *)((char *)v21 + a4);
          *int v22 = v20[1];
          v22[1] = *(_WORD *)((char *)v20 + v11 - 4);
          v22[2] = *(_WORD *)((char *)v20 + v12 - 4);
          v22[3] = *(_WORD *)((char *)v20 + v17 + 2);
          int v23 = (_WORD *)((char *)v22 + a4);
          _WORD *v23 = v20[2];
          v23[1] = *(_WORD *)((char *)v20 + v11 - 2);
          v23[2] = *(_WORD *)((char *)v20 + v12 - 2);
          v23[3] = *(_WORD *)((char *)v20 + v17 + 4);
          int v24 = (_WORD *)((char *)v23 + a4);
          *int v24 = v20[3];
          v24[1] = *(_WORD *)((char *)v20 + v11);
          v24[2] = *(_WORD *)((char *)v20 + v12);
          v24[3] = *(_WORD *)((char *)v20 + v17 + 6);
          v19 += 4;
          uint64_t v20 = (_WORD *)((char *)v20 + v8);
        }
        while (v19 <= v6 - 4);
        uint64_t v19 = v19;
      }
      else
      {
        uint64_t v19 = 0;
      }
      if ((int)v19 < (int)v7)
      {
        uint64_t v25 = a2 * v19;
        do
        {
          *(_WORD *)(v16 + 2 * v19) = *(_WORD *)((char *)v15 + v25);
          *(_WORD *)(v14 + 2 * v19) = *(_WORD *)((char *)v15 + v25 + 2);
          *(_WORD *)(v18 + 2 * v19) = *(_WORD *)((char *)v15 + v25 + 4);
          *(_WORD *)(v13 + 2 * v19++) = *(_WORD *)((char *)v15 + v25 + 6);
          v25 += a2;
        }
        while (v7 != v19);
      }
      v9 += 4;
      v16 += v10;
      v15 += 4;
      v13 += v10;
      v18 += v10;
      v14 += v10;
    }
    while (v9 <= (v5 - 4));
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((int)v9 < (int)v5)
  {
    uint64_t v26 = v9;
    uint64_t v27 = &result[v9];
    uint64_t v28 = a3 + a4 * v26;
    uint64_t v29 = (_WORD *)(v28 + 4);
    do
    {
      if ((int)v6 >= 4)
      {
        BOOL result = 0;
        uint64_t v31 = v29;
        uint64_t v32 = v27;
        do
        {
          *(v31 - 2) = *v32;
          *(v31 - 1) = *(_WORD *)((char *)v32 + a2);
          *uint64_t v31 = v32[a2];
          v31[1] = *(_WORD *)((char *)v32 + 3 * a2);
          result += 2;
          uint64_t v32 = (_WORD *)((char *)v32 + v8);
          v31 += 4;
        }
        while ((uint64_t)result <= v6 - 4);
        uint64_t v30 = result;
      }
      else
      {
        uint64_t v30 = 0;
      }
      if ((int)v30 < (int)v7)
      {
        BOOL result = (_WORD *)(v7 - v30);
        uint64_t v33 = (_WORD *)(v28 + 2 * v30);
        uint64_t v34 = a2 * v30;
        do
        {
          *v33++ = *(_WORD *)((char *)v27 + v34);
          v34 += a2;
          BOOL result = (_WORD *)((char *)result - 1);
        }
        while (result);
      }
      ++v26;
      ++v27;
      uint64_t v29 = (_WORD *)((char *)v29 + a4);
      v28 += a4;
    }
    while (v26 != v5);
  }
  return result;
}

__int16 *cv::transpose_8uC3(__int16 *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = *a5;
  uint64_t v6 = (int)a5[1];
  uint64_t v7 = a5[1];
  uint64_t v8 = 4 * a2;
  uint64_t v9 = a2;
  if ((int)v5 >= 4)
  {
    unint64_t v10 = 0;
    uint64_t v70 = a3;
    uint64_t v71 = *a5;
    unint64_t v11 = (v5 - 4);
    uint64_t v12 = 4 * a4;
    uint64_t v13 = a2 + 9;
    uint64_t v14 = v9 * 2 + 9;
    uint64_t v15 = a3 + 3 * a4;
    uint64_t v16 = a3 + a4;
    uint64_t v69 = result;
    uint64_t v17 = result;
    uint64_t v18 = a3;
    uint64_t v19 = 3 * a2;
    uint64_t v20 = a3 + 2 * a4;
    unint64_t v21 = v11;
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v23 = 0;
        int v24 = v17;
        uint64_t v25 = v18;
        do
        {
          __int16 v26 = *v24;
          *(unsigned char *)(v25 + 2) = *((unsigned char *)v24 + 2);
          *(_WORD *)uint64_t v25 = v26;
          __int16 v27 = *(__int16 *)((char *)v24 + a2);
          *(unsigned char *)(v25 + 5) = *((unsigned char *)v24 + v13 - 7);
          *(_WORD *)(v25 + 3) = v27;
          __int16 v28 = v24[a2];
          *(unsigned char *)(v25 + 8) = *((unsigned char *)v24 + v14 - 7);
          *(_WORD *)(v25 + 6) = v28;
          __int16 v29 = *(__int16 *)((char *)v24 + 3 * a2);
          *(unsigned char *)(v25 + 11) = *((unsigned char *)v24 + v19 + 2);
          *(_WORD *)(v25 + 9) = v29;
          uint64_t v30 = v25 + a4;
          __int16 v31 = *(__int16 *)((char *)v24 + 3);
          *(unsigned char *)(v30 + 2) = *((unsigned char *)v24 + 5);
          *(_WORD *)uint64_t v30 = v31;
          __int16 v32 = *(__int16 *)((char *)v24 + v13 - 6);
          *(unsigned char *)(v30 + 5) = *((unsigned char *)v24 + v13 - 4);
          *(_WORD *)(v30 + 3) = v32;
          __int16 v33 = *(__int16 *)((char *)v24 + v14 - 6);
          *(unsigned char *)(v30 + 8) = *((unsigned char *)v24 + v14 - 4);
          *(_WORD *)(v30 + 6) = v33;
          __int16 v34 = *(__int16 *)((char *)v24 + v19 + 3);
          *(unsigned char *)(v30 + 11) = *((unsigned char *)v24 + v19 + 5);
          *(_WORD *)(v30 + 9) = v34;
          uint64_t v35 = v25 + a4 + a4;
          LOWORD(v30) = v24[3];
          *(unsigned char *)(v35 + 2) = *((unsigned char *)v24 + 8);
          *(_WORD *)uint64_t v35 = v30;
          LOWORD(v30) = *(__int16 *)((char *)v24 + v13 - 3);
          *(unsigned char *)(v35 + 5) = *((unsigned char *)v24 + v13 - 1);
          *(_WORD *)(v35 + 3) = v30;
          LOWORD(v30) = *(__int16 *)((char *)v24 + v14 - 3);
          *(unsigned char *)(v35 + 8) = *((unsigned char *)v24 + v14 - 1);
          *(_WORD *)(v35 + 6) = v30;
          LOWORD(v30) = *(__int16 *)((char *)v24 + v19 + 6);
          *(unsigned char *)(v35 + 11) = *((unsigned char *)v24 + v19 + 8);
          *(_WORD *)(v35 + 9) = v30;
          uint64_t v36 = v35 + a4;
          LOWORD(v30) = *(__int16 *)((char *)v24 + 9);
          *(unsigned char *)(v36 + 2) = *((unsigned char *)v24 + 11);
          *(_WORD *)uint64_t v36 = v30;
          LOWORD(v30) = *(__int16 *)((char *)v24 + v13);
          *(unsigned char *)(v36 + 5) = *((unsigned char *)v24 + v13 + 2);
          *(_WORD *)(v36 + 3) = v30;
          __int16 v37 = *(__int16 *)((char *)v24 + v14);
          *(unsigned char *)(v36 + 8) = *((unsigned char *)v24 + v14 + 2);
          *(_WORD *)(v36 + 6) = v37;
          __int16 v38 = *(__int16 *)((char *)v24 + v19 + 9);
          *(unsigned char *)(v36 + 11) = *((unsigned char *)v24 + v19 + 11);
          *(_WORD *)(v36 + 9) = v38;
          v23 += 4;
          v25 += 12;
          int v24 = (__int16 *)((char *)v24 + v8);
        }
        while (v23 <= v6 - 4);
        uint64_t v22 = v23;
      }
      else
      {
        uint64_t v22 = 0;
      }
      if ((int)v22 < (int)v7)
      {
        uint64_t v39 = v7 - v22;
        uint64_t v40 = a2 * v22;
        uint64_t v41 = v18;
        uint64_t v42 = v16;
        uint64_t v43 = v20;
        uint64_t v44 = v15;
        uint64_t v45 = 3 * v22;
        do
        {
          uint64_t v46 = v41 + v45;
          __int16 v47 = *(__int16 *)((char *)v17 + v40);
          *(unsigned char *)(v46 + 2) = *((unsigned char *)v17 + v40 + 2);
          *(_WORD *)uint64_t v46 = v47;
          uint64_t v48 = v42 + v45;
          __int16 v49 = *(__int16 *)((char *)v17 + v40 + 3);
          *(unsigned char *)(v48 + 2) = *((unsigned char *)v17 + v40 + 5);
          *(_WORD *)uint64_t v48 = v49;
          uint64_t v50 = v43 + v45;
          __int16 v51 = *(__int16 *)((char *)v17 + v40 + 6);
          *(unsigned char *)(v50 + 2) = *((unsigned char *)v17 + v40 + 8);
          *(_WORD *)uint64_t v50 = v51;
          uint64_t v52 = v44 + v45;
          __int16 v53 = *(__int16 *)((char *)v17 + v40 + 9);
          v44 += 3;
          v43 += 3;
          *(unsigned char *)(v52 + 2) = *((unsigned char *)v17 + v40 + 11);
          *(_WORD *)uint64_t v52 = v53;
          v42 += 3;
          v41 += 3;
          v40 += a2;
          --v39;
        }
        while (v39);
      }
      v10 += 4;
      v18 += v12;
      v17 += 6;
      v15 += v12;
      v20 += v12;
      v16 += v12;
    }
    while (v10 <= v21);
    a3 = v70;
    uint64_t v5 = v71;
    BOOL result = v69;
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((int)v10 < (int)v5)
  {
    uint64_t v54 = v10;
    uint64_t v55 = (__int16 *)((char *)result + 3 * v10);
    uint64_t v56 = a3 + a4 * v54;
    BOOL result = (__int16 *)(v56 + 6);
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v58 = 0;
        uint64_t v59 = result;
        uint64_t v60 = v55;
        do
        {
          __int16 v61 = *v60;
          *((unsigned char *)v59 - 4) = *((unsigned char *)v60 + 2);
          *(v59 - 3) = v61;
          __int16 v62 = *(__int16 *)((char *)v60 + a2);
          *((unsigned char *)v59 - 1) = *((unsigned char *)v60 + a2 + 2);
          *(__int16 *)((char *)v59 - 3) = v62;
          __int16 v63 = v60[a2];
          *((unsigned char *)v59 + 2) = v60[v9 + 1];
          *uint64_t v59 = v63;
          __int16 v64 = *(__int16 *)((char *)v60 + 3 * a2);
          *((unsigned char *)v59 + 5) = *((unsigned char *)v60 + 3 * a2 + 2);
          *(__int16 *)((char *)v59 + 3) = v64;
          v58 += 4;
          uint64_t v60 = (__int16 *)((char *)v60 + v8);
          v59 += 6;
        }
        while (v58 <= v6 - 4);
        uint64_t v57 = v58;
      }
      else
      {
        uint64_t v57 = 0;
      }
      if ((int)v57 < (int)v7)
      {
        uint64_t v65 = v7 - v57;
        uint64_t v66 = v56 + 3 * v57;
        uint64_t v67 = a2 * v57;
        do
        {
          __int16 v68 = *(__int16 *)((char *)v55 + v67);
          *(unsigned char *)(v66 + 2) = *((unsigned char *)v55 + v67 + 2);
          *(_WORD *)uint64_t v66 = v68;
          v66 += 3;
          v67 += a2;
          --v65;
        }
        while (v65);
      }
      ++v54;
      uint64_t v55 = (__int16 *)((char *)v55 + 3);
      BOOL result = (__int16 *)((char *)result + a4);
      v56 += a4;
    }
    while (v54 != v5);
  }
  return result;
}

_DWORD *cv::transpose_32s(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = *a5;
  uint64_t v6 = (int)a5[1];
  uint64_t v7 = a5[1];
  uint64_t v8 = 4 * a2;
  if ((int)v5 >= 4)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 4 * a4;
    uint64_t v11 = a2 + 12;
    uint64_t v12 = 2 * a2 + 12;
    uint64_t v13 = a3 + 3 * a4;
    uint64_t v14 = a3 + a4;
    uint64_t v15 = result;
    uint64_t v16 = a3;
    uint64_t v17 = 3 * a2;
    uint64_t v18 = a3 + 2 * a4;
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v19 = 0;
        uint64_t v20 = v15;
        do
        {
          unint64_t v21 = (_DWORD *)(v16 + 4 * v19);
          _DWORD *v21 = *v20;
          v21[1] = *(_DWORD *)((char *)v20 + a2);
          v21[2] = *(_DWORD *)((char *)v20 + 2 * a2);
          void v21[3] = *(_DWORD *)((char *)v20 + 3 * a2);
          uint64_t v22 = (_DWORD *)((char *)v21 + a4);
          *uint64_t v22 = v20[1];
          v22[1] = *(_DWORD *)((char *)v20 + v11 - 8);
          v22[2] = *(_DWORD *)((char *)v20 + v12 - 8);
          v22[3] = *(_DWORD *)((char *)v20 + v17 + 4);
          uint64_t v23 = (_DWORD *)((char *)v22 + a4);
          _DWORD *v23 = v20[2];
          v23[1] = *(_DWORD *)((char *)v20 + v11 - 4);
          v23[2] = *(_DWORD *)((char *)v20 + v12 - 4);
          v23[3] = *(_DWORD *)((char *)v20 + v17 + 8);
          int v24 = (_DWORD *)((char *)v23 + a4);
          *int v24 = v20[3];
          v24[1] = *(_DWORD *)((char *)v20 + v11);
          v24[2] = *(_DWORD *)((char *)v20 + v12);
          v24[3] = *(_DWORD *)((char *)v20 + v17 + 12);
          v19 += 4;
          uint64_t v20 = (_DWORD *)((char *)v20 + v8);
        }
        while (v19 <= v6 - 4);
        uint64_t v19 = v19;
      }
      else
      {
        uint64_t v19 = 0;
      }
      if ((int)v19 < (int)v7)
      {
        uint64_t v25 = a2 * v19;
        do
        {
          *(_DWORD *)(v16 + 4 * v19) = *(_DWORD *)((char *)v15 + v25);
          *(_DWORD *)(v14 + 4 * v19) = *(_DWORD *)((char *)v15 + v25 + 4);
          *(_DWORD *)(v18 + 4 * v19) = *(_DWORD *)((char *)v15 + v25 + 8);
          *(_DWORD *)(v13 + 4 * v19++) = *(_DWORD *)((char *)v15 + v25 + 12);
          v25 += a2;
        }
        while (v7 != v19);
      }
      v9 += 4;
      v16 += v10;
      v15 += 4;
      v13 += v10;
      v18 += v10;
      v14 += v10;
    }
    while (v9 <= (v5 - 4));
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((int)v9 < (int)v5)
  {
    uint64_t v26 = v9;
    __int16 v27 = &result[v9];
    uint64_t v28 = a3 + a4 * v26;
    BOOL result = (_DWORD *)(v28 + 8);
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v30 = 0;
        __int16 v31 = result;
        __int16 v32 = v27;
        do
        {
          *(v31 - 2) = *v32;
          *(v31 - 1) = *(_DWORD *)((char *)v32 + a2);
          *__int16 v31 = *(_DWORD *)((char *)v32 + 2 * a2);
          v31[1] = *(_DWORD *)((char *)v32 + 3 * a2);
          v30 += 4;
          __int16 v32 = (_DWORD *)((char *)v32 + v8);
          v31 += 4;
        }
        while (v30 <= v6 - 4);
        uint64_t v29 = v30;
      }
      else
      {
        uint64_t v29 = 0;
      }
      if ((int)v29 < (int)v7)
      {
        uint64_t v33 = v7 - v29;
        __int16 v34 = (_DWORD *)(v28 + 4 * v29);
        uint64_t v35 = a2 * v29;
        do
        {
          *v34++ = *(_DWORD *)((char *)v27 + v35);
          v35 += a2;
          --v33;
        }
        while (v33);
      }
      ++v26;
      ++v27;
      BOOL result = (_DWORD *)((char *)result + a4);
      v28 += a4;
    }
    while (v26 != v5);
  }
  return result;
}

int *cv::transpose_16uC3(int *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = *a5;
  uint64_t v6 = (int)a5[1];
  uint64_t v7 = a5[1];
  uint64_t v8 = 4 * a2;
  uint64_t v9 = 2 * a2;
  uint64_t v71 = v5;
  if ((int)v5 >= 4)
  {
    unint64_t v10 = 0;
    unint64_t v11 = (v5 - 4);
    uint64_t v12 = 4 * a4;
    uint64_t v13 = a2 + 18;
    uint64_t v14 = v9 + 18;
    uint64_t v15 = a3 + 3 * a4;
    uint64_t v16 = a3 + a4;
    uint64_t v69 = result;
    uint64_t v70 = a3;
    uint64_t v17 = result;
    uint64_t v18 = a3;
    uint64_t v19 = 3 * a2;
    uint64_t v20 = a3 + 2 * a4;
    unint64_t v21 = v11;
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v23 = 0;
        int v24 = v17;
        uint64_t v25 = v18;
        do
        {
          int v26 = *v24;
          *(_WORD *)(v25 + 4) = *((_WORD *)v24 + 2);
          *(_DWORD *)uint64_t v25 = v26;
          int v27 = *(int *)((char *)v24 + a2);
          *(_WORD *)(v25 + 10) = *(_WORD *)((char *)v24 + v13 - 14);
          *(_DWORD *)(v25 + 6) = v27;
          int v28 = *(int *)((char *)v24 + 2 * a2);
          *(_WORD *)(v25 + 16) = *(_WORD *)((char *)v24 + v14 - 14);
          *(_DWORD *)(v25 + 12) = v28;
          int v29 = *(int *)((char *)v24 + 3 * a2);
          *(_WORD *)(v25 + 22) = *(_WORD *)((char *)v24 + v19 + 4);
          *(_DWORD *)(v25 + 18) = v29;
          uint64_t v30 = v25 + a4;
          int v31 = *(int *)((char *)v24 + 6);
          *(_WORD *)(v30 + 4) = *((_WORD *)v24 + 5);
          *(_DWORD *)uint64_t v30 = v31;
          int v32 = *(int *)((char *)v24 + v13 - 12);
          *(_WORD *)(v30 + 10) = *(_WORD *)((char *)v24 + v13 - 8);
          *(_DWORD *)(v30 + 6) = v32;
          int v33 = *(int *)((char *)v24 + v14 - 12);
          *(_WORD *)(v30 + 16) = *(_WORD *)((char *)v24 + v14 - 8);
          *(_DWORD *)(v30 + 12) = v33;
          int v34 = *(int *)((char *)v24 + v19 + 6);
          *(_WORD *)(v30 + 22) = *(_WORD *)((char *)v24 + v19 + 10);
          *(_DWORD *)(v30 + 18) = v34;
          uint64_t v35 = v25 + a4 + a4;
          LODWORD(v30) = v24[3];
          *(_WORD *)(v35 + 4) = *((_WORD *)v24 + 8);
          *(_DWORD *)uint64_t v35 = v30;
          LODWORD(v30) = *(int *)((char *)v24 + v13 - 6);
          *(_WORD *)(v35 + 10) = *(_WORD *)((char *)v24 + v13 - 2);
          *(_DWORD *)(v35 + 6) = v30;
          LODWORD(v30) = *(int *)((char *)v24 + v14 - 6);
          *(_WORD *)(v35 + 16) = *(_WORD *)((char *)v24 + v14 - 2);
          *(_DWORD *)(v35 + 12) = v30;
          LODWORD(v30) = *(int *)((char *)v24 + v19 + 12);
          *(_WORD *)(v35 + 22) = *(_WORD *)((char *)v24 + v19 + 16);
          *(_DWORD *)(v35 + 18) = v30;
          uint64_t v36 = v35 + a4;
          LODWORD(v30) = *(int *)((char *)v24 + 18);
          *(_WORD *)(v36 + 4) = *((_WORD *)v24 + 11);
          *(_DWORD *)uint64_t v36 = v30;
          LODWORD(v30) = *(int *)((char *)v24 + v13);
          *(_WORD *)(v36 + 10) = *(_WORD *)((char *)v24 + v13 + 4);
          *(_DWORD *)(v36 + 6) = v30;
          int v37 = *(int *)((char *)v24 + v14);
          *(_WORD *)(v36 + 16) = *(_WORD *)((char *)v24 + v14 + 4);
          *(_DWORD *)(v36 + 12) = v37;
          int v38 = *(int *)((char *)v24 + v19 + 18);
          *(_WORD *)(v36 + 22) = *(_WORD *)((char *)v24 + v19 + 22);
          *(_DWORD *)(v36 + 18) = v38;
          v23 += 4;
          v25 += 24;
          int v24 = (int *)((char *)v24 + v8);
        }
        while (v23 <= v6 - 4);
        uint64_t v22 = v23;
      }
      else
      {
        uint64_t v22 = 0;
      }
      if ((int)v22 < (int)v7)
      {
        uint64_t v39 = v7 - v22;
        uint64_t v40 = 6 * v22;
        uint64_t v41 = a2 * v22;
        uint64_t v42 = v18;
        uint64_t v43 = v16;
        uint64_t v44 = v20;
        uint64_t v45 = v15;
        do
        {
          uint64_t v46 = v42 + v40;
          int v47 = *(int *)((char *)v17 + v41);
          *(_WORD *)(v46 + 4) = *(_WORD *)((char *)v17 + v41 + 4);
          *(_DWORD *)uint64_t v46 = v47;
          uint64_t v48 = v43 + v40;
          int v49 = *(int *)((char *)v17 + v41 + 6);
          *(_WORD *)(v48 + 4) = *(_WORD *)((char *)v17 + v41 + 10);
          *(_DWORD *)uint64_t v48 = v49;
          uint64_t v50 = v44 + v40;
          int v51 = *(int *)((char *)v17 + v41 + 12);
          *(_WORD *)(v50 + 4) = *(_WORD *)((char *)v17 + v41 + 16);
          *(_DWORD *)uint64_t v50 = v51;
          uint64_t v52 = v45 + v40;
          int v53 = *(int *)((char *)v17 + v41 + 18);
          v45 += 6;
          v44 += 6;
          *(_WORD *)(v52 + 4) = *(_WORD *)((char *)v17 + v41 + 22);
          *(_DWORD *)uint64_t v52 = v53;
          v43 += 6;
          v42 += 6;
          v41 += a2;
          --v39;
        }
        while (v39);
      }
      v10 += 4;
      v18 += v12;
      v17 += 6;
      v15 += v12;
      v20 += v12;
      v16 += v12;
    }
    while (v10 <= v21);
    a3 = v70;
    uint64_t v5 = v71;
    BOOL result = v69;
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((int)v10 < (int)v5)
  {
    uint64_t v54 = v10;
    uint64_t v55 = (int *)((char *)result + 6 * v10);
    BOOL result = (int *)(a3 + a4 * v54);
    uint64_t v56 = result + 3;
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v58 = 0;
        uint64_t v59 = v56;
        uint64_t v60 = v55;
        do
        {
          int v61 = *v60;
          *((_WORD *)v59 - 4) = *((_WORD *)v60 + 2);
          *(v59 - 3) = v61;
          int v62 = *(int *)((char *)v60 + a2);
          *((_WORD *)v59 - 1) = *(_WORD *)((char *)v60 + a2 + 4);
          *(int *)((char *)v59 - 6) = v62;
          int v63 = *(int *)((char *)v60 + 2 * a2);
          *((_WORD *)v59 + 2) = *(_WORD *)((char *)v60 + v9 + 4);
          *uint64_t v59 = v63;
          int v64 = *(int *)((char *)v60 + 3 * a2);
          *((_WORD *)v59 + 5) = *(_WORD *)((char *)v60 + 3 * a2 + 4);
          *(int *)((char *)v59 + 6) = v64;
          v58 += 4;
          uint64_t v60 = (int *)((char *)v60 + v8);
          v59 += 6;
        }
        while (v58 <= v6 - 4);
        uint64_t v57 = v58;
        uint64_t v5 = v71;
      }
      else
      {
        uint64_t v57 = 0;
      }
      if ((int)v57 < (int)v7)
      {
        uint64_t v65 = v7 - v57;
        uint64_t v66 = (uint64_t)result + 6 * v57;
        uint64_t v67 = a2 * v57;
        do
        {
          int v68 = *(int *)((char *)v55 + v67);
          *(_WORD *)(v66 + 4) = *(_WORD *)((char *)v55 + v67 + 4);
          *(_DWORD *)uint64_t v66 = v68;
          v66 += 6;
          v67 += a2;
          --v65;
        }
        while (v65);
      }
      ++v54;
      uint64_t v55 = (int *)((char *)v55 + 6);
      uint64_t v56 = (int *)((char *)v56 + a4);
      BOOL result = (int *)((char *)result + a4);
    }
    while (v54 != v5);
  }
  return result;
}

void *cv::transpose_32sC2(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = *a5;
  uint64_t v6 = (int)a5[1];
  uint64_t v7 = a5[1];
  uint64_t v8 = 4 * a2;
  if ((int)v5 >= 4)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 4 * a4;
    uint64_t v11 = a2 + 24;
    uint64_t v12 = 2 * a2 + 24;
    uint64_t v13 = a3 + 3 * a4;
    uint64_t v14 = a3 + a4;
    uint64_t v15 = result;
    uint64_t v16 = a3;
    uint64_t v17 = 3 * a2;
    uint64_t v18 = a3 + 2 * a4;
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v19 = 0;
        uint64_t v20 = v15;
        do
        {
          unint64_t v21 = (void *)(v16 + 8 * v19);
          void *v21 = *v20;
          v21[1] = *(void *)((char *)v20 + a2);
          v21[2] = *(void *)((char *)v20 + 2 * a2);
          void v21[3] = *(void *)((char *)v20 + 3 * a2);
          uint64_t v22 = (void *)((char *)v21 + a4);
          *uint64_t v22 = v20[1];
          v22[1] = *(void *)((char *)v20 + v11 - 16);
          v22[2] = *(void *)((char *)v20 + v12 - 16);
          v22[3] = *(void *)((char *)v20 + v17 + 8);
          uint64_t v23 = (void *)((char *)v22 + a4);
          void *v23 = v20[2];
          v23[1] = *(void *)((char *)v20 + v11 - 8);
          v23[2] = *(void *)((char *)v20 + v12 - 8);
          v23[3] = *(void *)((char *)v20 + v17 + 16);
          int v24 = (void *)((char *)v23 + a4);
          *int v24 = v20[3];
          v24[1] = *(void *)((char *)v20 + v11);
          v24[2] = *(void *)((char *)v20 + v12);
          v24[3] = *(void *)((char *)v20 + v17 + 24);
          v19 += 4;
          uint64_t v20 = (void *)((char *)v20 + v8);
        }
        while (v19 <= v6 - 4);
        uint64_t v19 = v19;
      }
      else
      {
        uint64_t v19 = 0;
      }
      if ((int)v19 < (int)v7)
      {
        uint64_t v25 = a2 * v19;
        do
        {
          *(void *)(v16 + 8 * v19) = *(void *)((char *)v15 + v25);
          *(void *)(v14 + 8 * v19) = *(void *)((char *)v15 + v25 + 8);
          *(void *)(v18 + 8 * v19) = *(void *)((char *)v15 + v25 + 16);
          *(void *)(v13 + 8 * v19++) = *(void *)((char *)v15 + v25 + 24);
          v25 += a2;
        }
        while (v7 != v19);
      }
      v9 += 4;
      v16 += v10;
      v15 += 4;
      v13 += v10;
      v18 += v10;
      v14 += v10;
    }
    while (v9 <= (v5 - 4));
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((int)v9 < (int)v5)
  {
    uint64_t v26 = v9;
    int v27 = &result[v9];
    uint64_t v28 = a3 + a4 * v26;
    BOOL result = (void *)(v28 + 16);
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v30 = 0;
        int v31 = result;
        int v32 = v27;
        do
        {
          *(v31 - 2) = *v32;
          *(v31 - 1) = *(void *)((char *)v32 + a2);
          *int v31 = *(void *)((char *)v32 + 2 * a2);
          v31[1] = *(void *)((char *)v32 + 3 * a2);
          v30 += 4;
          int v32 = (void *)((char *)v32 + v8);
          v31 += 4;
        }
        while (v30 <= v6 - 4);
        uint64_t v29 = v30;
      }
      else
      {
        uint64_t v29 = 0;
      }
      if ((int)v29 < (int)v7)
      {
        uint64_t v33 = v7 - v29;
        int v34 = (void *)(v28 + 8 * v29);
        uint64_t v35 = a2 * v29;
        do
        {
          *v34++ = *(void *)((char *)v27 + v35);
          v35 += a2;
          --v33;
        }
        while (v33);
      }
      ++v26;
      ++v27;
      BOOL result = (void *)((char *)result + a4);
      v28 += a4;
    }
    while (v26 != v5);
  }
  return result;
}

uint64_t *cv::transpose_32sC3(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = *a5;
  uint64_t v6 = (int)a5[1];
  uint64_t v7 = a5[1];
  uint64_t v8 = 4 * a2;
  uint64_t v9 = 2 * a2;
  uint64_t v77 = v5;
  if ((int)v5 >= 4)
  {
    unint64_t v10 = 0;
    unint64_t v11 = (v5 - 4);
    uint64_t v12 = 4 * a4;
    uint64_t v13 = a2 + 36;
    uint64_t v14 = v9 + 36;
    uint64_t v15 = a3 + 3 * a4;
    uint64_t v16 = a3 + a4;
    uint64_t v75 = result;
    uint64_t v76 = a3;
    uint64_t v17 = result;
    uint64_t v18 = a3;
    uint64_t v19 = 3 * a2;
    uint64_t v20 = a3 + 2 * a4;
    unint64_t v21 = v11;
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v23 = 0;
        int v24 = v17;
        uint64_t v25 = v18;
        do
        {
          uint64_t v26 = *v24;
          *(_DWORD *)(v25 + 8) = *((_DWORD *)v24 + 2);
          *(void *)uint64_t v25 = v26;
          uint64_t v27 = *(uint64_t *)((char *)v24 + a2);
          *(_DWORD *)(v25 + 20) = *(_DWORD *)((char *)v24 + v13 - 28);
          *(void *)(v25 + 12) = v27;
          uint64_t v28 = *(uint64_t *)((char *)v24 + 2 * a2);
          *(_DWORD *)(v25 + 32) = *(_DWORD *)((char *)v24 + v14 - 28);
          *(void *)(v25 + 24) = v28;
          uint64_t v29 = *(uint64_t *)((char *)v24 + 3 * a2);
          *(_DWORD *)(v25 + 44) = *(_DWORD *)((char *)v24 + v19 + 8);
          *(void *)(v25 + 36) = v29;
          uint64_t v30 = v25 + a4;
          uint64_t v31 = *(uint64_t *)((char *)v24 + 12);
          *(_DWORD *)(v30 + 8) = *((_DWORD *)v24 + 5);
          *(void *)uint64_t v30 = v31;
          uint64_t v32 = *(uint64_t *)((char *)v24 + v13 - 24);
          *(_DWORD *)(v30 + 20) = *(_DWORD *)((char *)v24 + v13 - 16);
          *(void *)(v30 + 12) = v32;
          uint64_t v33 = *(uint64_t *)((char *)v24 + v14 - 24);
          *(_DWORD *)(v30 + 32) = *(_DWORD *)((char *)v24 + v14 - 16);
          *(void *)(v30 + 24) = v33;
          uint64_t v34 = *(uint64_t *)((char *)v24 + v19 + 12);
          *(_DWORD *)(v30 + 44) = *(_DWORD *)((char *)v24 + v19 + 20);
          *(void *)(v30 + 36) = v34;
          uint64_t v35 = v25 + a4 + a4;
          uint64_t v36 = v24[3];
          *(_DWORD *)(v35 + 8) = *((_DWORD *)v24 + 8);
          *(void *)uint64_t v35 = v36;
          uint64_t v37 = *(uint64_t *)((char *)v24 + v13 - 12);
          *(_DWORD *)(v35 + 20) = *(_DWORD *)((char *)v24 + v13 - 4);
          *(void *)(v35 + 12) = v37;
          uint64_t v38 = *(uint64_t *)((char *)v24 + v14 - 12);
          *(_DWORD *)(v35 + 32) = *(_DWORD *)((char *)v24 + v14 - 4);
          *(void *)(v35 + 24) = v38;
          uint64_t v39 = *(uint64_t *)((char *)v24 + v19 + 24);
          *(_DWORD *)(v35 + 44) = *(_DWORD *)((char *)v24 + v19 + 32);
          *(void *)(v35 + 36) = v39;
          uint64_t v40 = v35 + a4;
          uint64_t v41 = *(uint64_t *)((char *)v24 + 36);
          *(_DWORD *)(v40 + 8) = *((_DWORD *)v24 + 11);
          *(void *)uint64_t v40 = v41;
          uint64_t v42 = *(uint64_t *)((char *)v24 + v13);
          *(_DWORD *)(v40 + 20) = *(_DWORD *)((char *)v24 + v13 + 8);
          *(void *)(v40 + 12) = v42;
          uint64_t v43 = *(uint64_t *)((char *)v24 + v14);
          *(_DWORD *)(v40 + 32) = *(_DWORD *)((char *)v24 + v14 + 8);
          *(void *)(v40 + 24) = v43;
          uint64_t v44 = *(uint64_t *)((char *)v24 + v19 + 36);
          *(_DWORD *)(v40 + 44) = *(_DWORD *)((char *)v24 + v19 + 44);
          *(void *)(v40 + 36) = v44;
          v23 += 4;
          v25 += 48;
          int v24 = (uint64_t *)((char *)v24 + v8);
        }
        while (v23 <= v6 - 4);
        uint64_t v22 = v23;
      }
      else
      {
        uint64_t v22 = 0;
      }
      if ((int)v22 < (int)v7)
      {
        uint64_t v45 = v7 - v22;
        uint64_t v46 = 12 * v22;
        uint64_t v47 = a2 * v22;
        uint64_t v48 = v18;
        uint64_t v49 = v16;
        uint64_t v50 = v20;
        uint64_t v51 = v15;
        do
        {
          uint64_t v52 = v48 + v46;
          uint64_t v53 = *(uint64_t *)((char *)v17 + v47);
          *(_DWORD *)(v52 + 8) = *(_DWORD *)((char *)v17 + v47 + 8);
          *(void *)uint64_t v52 = v53;
          uint64_t v54 = v49 + v46;
          uint64_t v55 = *(uint64_t *)((char *)v17 + v47 + 12);
          *(_DWORD *)(v54 + 8) = *(_DWORD *)((char *)v17 + v47 + 20);
          *(void *)uint64_t v54 = v55;
          uint64_t v56 = v50 + v46;
          uint64_t v57 = *(uint64_t *)((char *)v17 + v47 + 24);
          *(_DWORD *)(v56 + 8) = *(_DWORD *)((char *)v17 + v47 + 32);
          *(void *)uint64_t v56 = v57;
          uint64_t v58 = v51 + v46;
          uint64_t v59 = *(uint64_t *)((char *)v17 + v47 + 36);
          v51 += 12;
          v50 += 12;
          *(_DWORD *)(v58 + 8) = *(_DWORD *)((char *)v17 + v47 + 44);
          *(void *)uint64_t v58 = v59;
          v49 += 12;
          v48 += 12;
          v47 += a2;
          --v45;
        }
        while (v45);
      }
      v10 += 4;
      v18 += v12;
      v17 += 6;
      v15 += v12;
      v20 += v12;
      v16 += v12;
    }
    while (v10 <= v21);
    a3 = v76;
    uint64_t v5 = v77;
    BOOL result = v75;
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((int)v10 < (int)v5)
  {
    uint64_t v60 = v10;
    int v61 = (uint64_t *)((char *)result + 12 * v10);
    BOOL result = (uint64_t *)(a3 + a4 * v60);
    int v62 = result + 3;
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v64 = 0;
        uint64_t v65 = v62;
        uint64_t v66 = v61;
        do
        {
          uint64_t v67 = *v66;
          *((_DWORD *)v65 - 4) = *((_DWORD *)v66 + 2);
          *(v65 - 3) = v67;
          uint64_t v68 = *(uint64_t *)((char *)v66 + a2);
          *((_DWORD *)v65 - 1) = *(_DWORD *)((char *)v66 + a2 + 8);
          *(uint64_t *)((char *)v65 - 12) = v68;
          uint64_t v69 = *(uint64_t *)((char *)v66 + 2 * a2);
          *((_DWORD *)v65 + 2) = *(_DWORD *)((char *)v66 + v9 + 8);
          *uint64_t v65 = v69;
          uint64_t v70 = *(uint64_t *)((char *)v66 + 3 * a2);
          *((_DWORD *)v65 + 5) = *(_DWORD *)((char *)v66 + 3 * a2 + 8);
          *(uint64_t *)((char *)v65 + 12) = v70;
          v64 += 4;
          uint64_t v66 = (uint64_t *)((char *)v66 + v8);
          v65 += 6;
        }
        while (v64 <= v6 - 4);
        uint64_t v63 = v64;
        uint64_t v5 = v77;
      }
      else
      {
        uint64_t v63 = 0;
      }
      if ((int)v63 < (int)v7)
      {
        uint64_t v71 = v7 - v63;
        uint64_t v72 = (uint64_t)result + 12 * v63;
        uint64_t v73 = a2 * v63;
        do
        {
          uint64_t v74 = *(uint64_t *)((char *)v61 + v73);
          *(_DWORD *)(v72 + 8) = *(_DWORD *)((char *)v61 + v73 + 8);
          *(void *)uint64_t v72 = v74;
          v72 += 12;
          v73 += a2;
          --v71;
        }
        while (v71);
      }
      ++v60;
      int v61 = (uint64_t *)((char *)v61 + 12);
      int v62 = (uint64_t *)((char *)v62 + a4);
      BOOL result = (uint64_t *)((char *)result + a4);
    }
    while (v60 != v5);
  }
  return result;
}

_OWORD *cv::transpose_32sC4(_OWORD *result, uint64_t a2, _OWORD *a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = *a5;
  uint64_t v6 = (int)a5[1];
  uint64_t v7 = a5[1];
  uint64_t v8 = 4 * a2;
  if ((int)v5 >= 4)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 4 * a4;
    uint64_t v11 = a2 + 48;
    uint64_t v12 = 2 * a2 + 48;
    uint64_t v13 = (uint64_t)a3 + 3 * a4;
    uint64_t v14 = (uint64_t)a3 + a4;
    uint64_t v15 = result;
    uint64_t v16 = a3;
    uint64_t v17 = 3 * a2;
    uint64_t v18 = (uint64_t)a3 + 2 * a4;
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v20 = 0;
        unint64_t v21 = v15;
        uint64_t v22 = v16;
        do
        {
          *uint64_t v22 = *v21;
          v22[1] = *(_OWORD *)((char *)v21 + a2);
          v22[2] = *(_OWORD *)((char *)v21 + 2 * a2);
          v22[3] = *(_OWORD *)((char *)v21 + 3 * a2);
          uint64_t v23 = (_OWORD *)((char *)v22 + a4);
          _OWORD *v23 = v21[1];
          v23[1] = *(_OWORD *)((char *)v21 + v11 - 32);
          v23[2] = *(_OWORD *)((char *)v21 + v12 - 32);
          v23[3] = *(_OWORD *)((char *)v21 + v17 + 16);
          int v24 = (_OWORD *)((char *)v22 + a4 + a4);
          *int v24 = v21[2];
          v24[1] = *(_OWORD *)((char *)v21 + v11 - 16);
          v24[2] = *(_OWORD *)((char *)v21 + v12 - 16);
          v24[3] = *(_OWORD *)((char *)v21 + v17 + 32);
          uint64_t v25 = (_OWORD *)((char *)v24 + a4);
          *uint64_t v25 = v21[3];
          v25[1] = *(_OWORD *)((char *)v21 + v11);
          v25[2] = *(_OWORD *)((char *)v21 + v12);
          v25[3] = *(_OWORD *)((char *)v21 + v17 + 48);
          v20 += 4;
          v22 += 4;
          unint64_t v21 = (_OWORD *)((char *)v21 + v8);
        }
        while (v20 <= v6 - 4);
        uint64_t v19 = v20;
      }
      else
      {
        uint64_t v19 = 0;
      }
      if ((int)v19 < (int)v7)
      {
        uint64_t v26 = v7 - v19;
        uint64_t v27 = 16 * v19;
        uint64_t v28 = a2 * v19;
        uint64_t v29 = v16;
        uint64_t v30 = v14;
        uint64_t v31 = v18;
        uint64_t v32 = v13;
        do
        {
          v29[(unint64_t)v27 / 0x10] = *(_OWORD *)((char *)v15 + v28);
          *(_OWORD *)(v30 + v27) = *(_OWORD *)((char *)v15 + v28 + 16);
          *(_OWORD *)(v31 + v27) = *(_OWORD *)((char *)v15 + v28 + 32);
          *(_OWORD *)(v32 + v27) = *(_OWORD *)((char *)v15 + v28 + 48);
          v32 += 16;
          v31 += 16;
          v30 += 16;
          ++v29;
          v28 += a2;
          --v26;
        }
        while (v26);
      }
      v9 += 4;
      uint64_t v16 = (_OWORD *)((char *)v16 + v10);
      v15 += 4;
      v13 += v10;
      v18 += v10;
      v14 += v10;
    }
    while (v9 <= (v5 - 4));
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((int)v9 < (int)v5)
  {
    uint64_t v33 = v9;
    uint64_t v34 = &result[v9];
    uint64_t v35 = (uint64_t)a3 + a4 * v33;
    BOOL result = (_OWORD *)(v35 + 32);
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v37 = 0;
        uint64_t v38 = result;
        uint64_t v39 = v34;
        do
        {
          *(v38 - 2) = *v39;
          *(v38 - 1) = *(_OWORD *)((char *)v39 + a2);
          _OWORD *v38 = *(_OWORD *)((char *)v39 + 2 * a2);
          v38[1] = *(_OWORD *)((char *)v39 + 3 * a2);
          v37 += 4;
          uint64_t v39 = (_OWORD *)((char *)v39 + v8);
          v38 += 4;
        }
        while (v37 <= v6 - 4);
        uint64_t v36 = v37;
      }
      else
      {
        uint64_t v36 = 0;
      }
      if ((int)v36 < (int)v7)
      {
        uint64_t v40 = v7 - v36;
        uint64_t v41 = (_OWORD *)(v35 + 16 * v36);
        uint64_t v42 = a2 * v36;
        do
        {
          *v41++ = *(_OWORD *)((char *)v34 + v42);
          v42 += a2;
          --v40;
        }
        while (v40);
      }
      ++v33;
      ++v34;
      BOOL result = (_OWORD *)((char *)result + a4);
      v35 += a4;
    }
    while (v33 != v5);
  }
  return result;
}

unint64_t cv::transpose_32sC6(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = (long long *)result;
  uint64_t v6 = *a5;
  uint64_t v7 = (int)a5[1];
  uint64_t v8 = a5[1];
  uint64_t v9 = 4 * a2;
  uint64_t v10 = 2 * a2;
  if ((int)v6 >= 4)
  {
    unint64_t v11 = 0;
    uint64_t v73 = (long long *)result;
    uint64_t v74 = *a5;
    BOOL result = (v6 - 4);
    uint64_t v12 = 4 * a4;
    uint64_t v13 = a2 + 72;
    uint64_t v14 = v10 + 72;
    uint64_t v15 = a3 + 3 * a4;
    uint64_t v16 = a3 + a4;
    uint64_t v17 = a3;
    uint64_t v18 = 3 * a2;
    uint64_t v19 = a3 + 2 * a4;
    do
    {
      if ((int)v7 >= 4)
      {
        uint64_t v21 = 0;
        uint64_t v22 = v5;
        uint64_t v23 = v17;
        do
        {
          long long v24 = *v22;
          *(void *)(v23 + 16) = *((void *)v22 + 2);
          *(_OWORD *)uint64_t v23 = v24;
          long long v25 = *(long long *)((char *)v22 + a2);
          *(void *)(v23 + 40) = *(void *)((char *)v22 + v13 - 56);
          *(_OWORD *)(v23 + 24) = v25;
          long long v26 = *(long long *)((char *)v22 + 2 * a2);
          *(void *)(v23 + 64) = *(void *)((char *)v22 + v14 - 56);
          *(_OWORD *)(v23 + 48) = v26;
          long long v27 = *(long long *)((char *)v22 + 3 * a2);
          *(void *)(v23 + 88) = *(void *)((char *)v22 + v18 + 16);
          *(_OWORD *)(v23 + 72) = v27;
          uint64_t v28 = v23 + a4;
          long long v29 = *(long long *)((char *)v22 + 24);
          *(void *)(v28 + 16) = *((void *)v22 + 5);
          *(_OWORD *)uint64_t v28 = v29;
          long long v30 = *(long long *)((char *)v22 + v13 - 48);
          *(void *)(v28 + 40) = *(void *)((char *)v22 + v13 - 32);
          *(_OWORD *)(v28 + 24) = v30;
          long long v31 = *(long long *)((char *)v22 + v14 - 48);
          *(void *)(v28 + 64) = *(void *)((char *)v22 + v14 - 32);
          *(_OWORD *)(v28 + 48) = v31;
          long long v32 = *(long long *)((char *)v22 + v18 + 24);
          *(void *)(v28 + 88) = *(void *)((char *)v22 + v18 + 40);
          *(_OWORD *)(v28 + 72) = v32;
          uint64_t v33 = v23 + a4 + a4;
          long long v34 = v22[3];
          *(void *)(v33 + 16) = *((void *)v22 + 8);
          *(_OWORD *)uint64_t v33 = v34;
          long long v35 = *(long long *)((char *)v22 + v13 - 24);
          *(void *)(v33 + 40) = *(void *)((char *)v22 + v13 - 8);
          *(_OWORD *)(v33 + 24) = v35;
          long long v36 = *(long long *)((char *)v22 + v14 - 24);
          *(void *)(v33 + 64) = *(void *)((char *)v22 + v14 - 8);
          *(_OWORD *)(v33 + 48) = v36;
          long long v37 = *(long long *)((char *)v22 + v18 + 48);
          *(void *)(v33 + 88) = *(void *)((char *)v22 + v18 + 64);
          *(_OWORD *)(v33 + 72) = v37;
          uint64_t v38 = v33 + a4;
          long long v39 = *(long long *)((char *)v22 + 72);
          *(void *)(v38 + 16) = *((void *)v22 + 11);
          *(_OWORD *)uint64_t v38 = v39;
          long long v40 = *(long long *)((char *)v22 + v13);
          *(void *)(v38 + 40) = *(void *)((char *)v22 + v13 + 16);
          *(_OWORD *)(v38 + 24) = v40;
          long long v41 = *(long long *)((char *)v22 + v14);
          *(void *)(v38 + 64) = *(void *)((char *)v22 + v14 + 16);
          *(_OWORD *)(v38 + 48) = v41;
          long long v42 = *(long long *)((char *)v22 + v18 + 72);
          *(void *)(v38 + 88) = *(void *)((char *)v22 + v18 + 88);
          *(_OWORD *)(v38 + 72) = v42;
          v21 += 4;
          v23 += 96;
          uint64_t v22 = (long long *)((char *)v22 + v9);
        }
        while (v21 <= v7 - 4);
        uint64_t v20 = v21;
      }
      else
      {
        uint64_t v20 = 0;
      }
      if ((int)v20 < (int)v8)
      {
        uint64_t v43 = v8 - v20;
        uint64_t v44 = 24 * v20;
        uint64_t v45 = a2 * v20;
        uint64_t v46 = v17;
        uint64_t v47 = v16;
        uint64_t v48 = v19;
        uint64_t v49 = v15;
        do
        {
          uint64_t v50 = v46 + v44;
          long long v51 = *(long long *)((char *)v5 + v45);
          *(void *)(v50 + 16) = *(void *)((char *)v5 + v45 + 16);
          *(_OWORD *)uint64_t v50 = v51;
          uint64_t v52 = v47 + v44;
          long long v53 = *(long long *)((char *)v5 + v45 + 24);
          *(void *)(v52 + 16) = *(void *)((char *)v5 + v45 + 40);
          *(_OWORD *)uint64_t v52 = v53;
          uint64_t v54 = v48 + v44;
          long long v55 = *(long long *)((char *)v5 + v45 + 48);
          *(void *)(v54 + 16) = *(void *)((char *)v5 + v45 + 64);
          *(_OWORD *)uint64_t v54 = v55;
          uint64_t v56 = v49 + v44;
          long long v57 = *(long long *)((char *)v5 + v45 + 72);
          v49 += 24;
          v48 += 24;
          *(void *)(v56 + 16) = *(void *)((char *)v5 + v45 + 88);
          *(_OWORD *)uint64_t v56 = v57;
          v47 += 24;
          v46 += 24;
          v45 += a2;
          --v43;
        }
        while (v43);
      }
      v11 += 4;
      v17 += v12;
      v5 += 6;
      v15 += v12;
      v19 += v12;
      v16 += v12;
    }
    while (v11 <= result);
    uint64_t v5 = v73;
    uint64_t v6 = v74;
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((int)v11 < (int)v6)
  {
    uint64_t v58 = v11;
    uint64_t v59 = (long long *)((char *)v5 + 24 * v11);
    BOOL result = a3 + a4 * v58;
    unint64_t v60 = result + 48;
    do
    {
      if ((int)v7 >= 4)
      {
        uint64_t v62 = 0;
        unint64_t v63 = v60;
        uint64_t v64 = v59;
        do
        {
          long long v65 = *v64;
          *(void *)(v63 - 32) = *((void *)v64 + 2);
          *(_OWORD *)(v63 - 48) = v65;
          long long v66 = *(long long *)((char *)v64 + a2);
          *(void *)(v63 - 8) = *(void *)((char *)v64 + a2 + 16);
          *(_OWORD *)(v63 - 24) = v66;
          long long v67 = *(long long *)((char *)v64 + 2 * a2);
          *(void *)(v63 + 16) = *(void *)((char *)v64 + v10 + 16);
          *(_OWORD *)unint64_t v63 = v67;
          long long v68 = *(long long *)((char *)v64 + 3 * a2);
          *(void *)(v63 + 40) = *(void *)((char *)v64 + 3 * a2 + 16);
          *(_OWORD *)(v63 + 24) = v68;
          v62 += 4;
          uint64_t v64 = (long long *)((char *)v64 + v9);
          v63 += 96;
        }
        while (v62 <= v7 - 4);
        uint64_t v61 = v62;
      }
      else
      {
        uint64_t v61 = 0;
      }
      if ((int)v61 < (int)v8)
      {
        uint64_t v69 = v8 - v61;
        unint64_t v70 = result + 24 * v61;
        uint64_t v71 = a2 * v61;
        do
        {
          long long v72 = *(long long *)((char *)v59 + v71);
          *(void *)(v70 + 16) = *(void *)((char *)v59 + v71 + 16);
          *(_OWORD *)unint64_t v70 = v72;
          v70 += 24;
          v71 += a2;
          --v69;
        }
        while (v69);
      }
      ++v58;
      uint64_t v59 = (long long *)((char *)v59 + 24);
      v60 += a4;
      result += a4;
    }
    while (v58 != v6);
  }
  return result;
}

_OWORD *cv::transpose_32sC8(_OWORD *result, uint64_t a2, _OWORD *a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5 = *a5;
  uint64_t v6 = (int)a5[1];
  uint64_t v7 = a5[1];
  uint64_t v8 = 4 * a2;
  uint64_t v9 = 2 * a2;
  if ((int)v5 >= 4)
  {
    unint64_t v10 = 0;
    uint64_t v73 = *a5;
    unint64_t v11 = (v5 - 4);
    uint64_t v12 = 4 * a4;
    uint64_t v13 = a2 + 96;
    uint64_t v14 = v9 + 96;
    uint64_t v15 = (uint64_t)a3 + 3 * a4;
    uint64_t v16 = (uint64_t)a3 + a4;
    uint64_t v17 = result;
    uint64_t v18 = a3;
    uint64_t v19 = 3 * a2;
    uint64_t v20 = (uint64_t)a3 + 2 * a4;
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v22 = 0;
        uint64_t v23 = v17;
        long long v24 = v18;
        do
        {
          long long v25 = v23[1];
          *long long v24 = *v23;
          v24[1] = v25;
          long long v26 = *(_OWORD *)((char *)v23 + v13 - 80);
          v24[2] = *(_OWORD *)((char *)v23 + a2);
          v24[3] = v26;
          long long v27 = *(_OWORD *)((char *)v23 + v14 - 80);
          v24[4] = *(_OWORD *)((char *)v23 + 2 * a2);
          v24[5] = v27;
          long long v28 = *(_OWORD *)((char *)v23 + v19 + 16);
          v24[6] = *(_OWORD *)((char *)v23 + 3 * a2);
          v24[7] = v28;
          long long v29 = (_OWORD *)((char *)v24 + a4);
          long long v30 = v23[3];
          *long long v29 = v23[2];
          v29[1] = v30;
          long long v31 = *(_OWORD *)((char *)v23 + v13 - 48);
          v29[2] = *(_OWORD *)((char *)v23 + v13 - 64);
          v29[3] = v31;
          long long v32 = *(_OWORD *)((char *)v23 + v14 - 48);
          v29[4] = *(_OWORD *)((char *)v23 + v14 - 64);
          v29[5] = v32;
          long long v33 = *(_OWORD *)((char *)v23 + v19 + 48);
          v29[6] = *(_OWORD *)((char *)v23 + v19 + 32);
          v29[7] = v33;
          long long v34 = (_OWORD *)((char *)v24 + a4 + a4);
          long long v35 = v23[5];
          *long long v34 = v23[4];
          v34[1] = v35;
          long long v36 = *(_OWORD *)((char *)v23 + v13 - 16);
          v34[2] = *(_OWORD *)((char *)v23 + v13 - 32);
          v34[3] = v36;
          long long v37 = *(_OWORD *)((char *)v23 + v14 - 16);
          v34[4] = *(_OWORD *)((char *)v23 + v14 - 32);
          v34[5] = v37;
          long long v38 = *(_OWORD *)((char *)v23 + v19 + 80);
          v34[6] = *(_OWORD *)((char *)v23 + v19 + 64);
          v34[7] = v38;
          long long v39 = (_OWORD *)((char *)v34 + a4);
          long long v40 = v23[7];
          *long long v39 = v23[6];
          v39[1] = v40;
          long long v41 = *(_OWORD *)((char *)v23 + v13 + 16);
          _DWORD v39[2] = *(_OWORD *)((char *)v23 + v13);
          v39[3] = v41;
          long long v42 = *(_OWORD *)((char *)v23 + v14 + 16);
          v39[4] = *(_OWORD *)((char *)v23 + v14);
          v39[5] = v42;
          long long v43 = *(_OWORD *)((char *)v23 + v19 + 112);
          v39[6] = *(_OWORD *)((char *)v23 + v19 + 96);
          v39[7] = v43;
          v22 += 4;
          v24 += 8;
          uint64_t v23 = (_OWORD *)((char *)v23 + v8);
        }
        while (v22 <= v6 - 4);
        uint64_t v21 = v22;
      }
      else
      {
        uint64_t v21 = 0;
      }
      if ((int)v21 < (int)v7)
      {
        uint64_t v44 = v7 - v21;
        uint64_t v45 = 32 * v21;
        uint64_t v46 = a2 * v21;
        uint64_t v47 = v18;
        uint64_t v48 = v16;
        uint64_t v49 = v20;
        uint64_t v50 = v15;
        do
        {
          long long v51 = &v47[(unint64_t)v45 / 0x10];
          long long v52 = *(_OWORD *)((char *)v17 + v46 + 16);
          _OWORD *v51 = *(_OWORD *)((char *)v17 + v46);
          v51[1] = v52;
          long long v53 = (_OWORD *)(v48 + v45);
          long long v54 = *(_OWORD *)((char *)v17 + v46 + 48);
          *long long v53 = *(_OWORD *)((char *)v17 + v46 + 32);
          v53[1] = v54;
          long long v55 = (_OWORD *)(v49 + v45);
          long long v56 = *(_OWORD *)((char *)v17 + v46 + 80);
          *long long v55 = *(_OWORD *)((char *)v17 + v46 + 64);
          v55[1] = v56;
          long long v57 = (_OWORD *)(v50 + v45);
          long long v58 = *(_OWORD *)((char *)v17 + v46 + 112);
          v50 += 32;
          v49 += 32;
          *long long v57 = *(_OWORD *)((char *)v17 + v46 + 96);
          v57[1] = v58;
          v48 += 32;
          v47 += 2;
          v46 += a2;
          --v44;
        }
        while (v44);
      }
      v10 += 4;
      uint64_t v18 = (_OWORD *)((char *)v18 + v12);
      v17 += 8;
      v15 += v12;
      v20 += v12;
      v16 += v12;
    }
    while (v10 <= v11);
    uint64_t v5 = v73;
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((int)v10 < (int)v5)
  {
    unint64_t v10 = v10;
    uint64_t v59 = &result[2 * v10];
    uint64_t v60 = (uint64_t)a3 + a4 * v10;
    BOOL result = (_OWORD *)(v60 + 64);
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v62 = 0;
        unint64_t v63 = result;
        uint64_t v64 = v59;
        do
        {
          long long v65 = v64[1];
          *(v63 - 4) = *v64;
          *(v63 - 3) = v65;
          long long v66 = *(_OWORD *)((char *)v64 + a2 + 16);
          *(v63 - 2) = *(_OWORD *)((char *)v64 + a2);
          *(v63 - 1) = v66;
          long long v67 = *(_OWORD *)((char *)v64 + v9 + 16);
          _OWORD *v63 = *(_OWORD *)((char *)v64 + 2 * a2);
          v63[1] = v67;
          long long v68 = *(_OWORD *)((char *)v64 + 3 * a2 + 16);
          void v63[2] = *(_OWORD *)((char *)v64 + 3 * a2);
          void v63[3] = v68;
          v62 += 4;
          uint64_t v64 = (_OWORD *)((char *)v64 + v8);
          v63 += 8;
        }
        while (v62 <= v6 - 4);
        uint64_t v61 = v62;
      }
      else
      {
        uint64_t v61 = 0;
      }
      if ((int)v61 < (int)v7)
      {
        uint64_t v69 = v7 - v61;
        unint64_t v70 = (_OWORD *)(v60 + 32 * v61);
        uint64_t v71 = a2 * v61;
        do
        {
          long long v72 = *(_OWORD *)((char *)v59 + v71 + 16);
          *unint64_t v70 = *(_OWORD *)((char *)v59 + v71);
          v70[1] = v72;
          v70 += 2;
          v71 += a2;
          --v69;
        }
        while (v69);
      }
      ++v10;
      v59 += 2;
      BOOL result = (_OWORD *)((char *)result + a4);
      v60 += a4;
    }
    while (v10 != v5);
  }
  return result;
}

void **std::vector<cv::Mat>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 96 * a2;
      uint64_t v14 = 96 * a2;
      uint64_t v15 = (void *)(v7 + 80);
      do
      {
        *(v15 - 2) = v15 - 9;
        *(v15 - 1) = v15;
        *uint64_t v15 = 0;
        v15[1] = 0;
        *((_DWORD *)v15 - 20) = 1124007936;
        *(_OWORD *)((char *)v15 - 76) = 0uLL;
        *(_OWORD *)((char *)v15 - 60) = 0uLL;
        *(_OWORD *)((char *)v15 - 44) = 0uLL;
        *((_OWORD *)v15 - 2) = 0uLL;
        v15 += 12;
        v14 -= 96;
      }
      while (v14);
    }
    else
    {
      uint64_t v13 = (uint64_t)*(result - 1);
    }
    a1[1] = v13;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x2AAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x155555555555555) {
      unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v23 = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Mat>>((uint64_t)result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v19 = v12;
    uint64_t v20 = &v12[96 * v8];
    uint64_t v22 = &v12[96 * v11];
    uint64_t v16 = &v20[96 * a2];
    uint64_t v17 = 96 * a2;
    uint64_t v18 = v20 + 80;
    do
    {
      *(v18 - 2) = v18 - 9;
      *(v18 - 1) = v18;
      *uint64_t v18 = 0;
      v18[1] = 0;
      *((_DWORD *)v18 - 20) = 1124007936;
      *(_OWORD *)((char *)v18 - 76) = 0uLL;
      *(_OWORD *)((char *)v18 - 60) = 0uLL;
      *(_OWORD *)((char *)v18 - 44) = 0uLL;
      *((_OWORD *)v18 - 2) = 0uLL;
      v18 += 12;
      v17 -= 96;
    }
    while (v17);
    uint64_t v21 = v16;
    std::vector<cv::Mat>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<cv::Mat>::~__split_buffer(&v19);
  }
  return result;
}

void sub_225F05B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<cv::Mat>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cv::Mat>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv::Mat>,std::reverse_iterator<cv::Mat*>,std::reverse_iterator<cv::Mat*>,std::reverse_iterator<cv::Mat*>>((uint64_t)(a1 + 2), a1[1], (cv::Mat *)a1[1], *a1, (cv::Mat *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv::Mat>,std::reverse_iterator<cv::Mat*>,std::reverse_iterator<cv::Mat*>,std::reverse_iterator<cv::Mat*>>(uint64_t a1, uint64_t a2, cv::Mat *a3, uint64_t a4, cv::Mat *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    int v10 = a1;
    do
    {
      unint64_t v9 = (cv::Mat *)((char *)v9 - 96);
      std::allocator<cv::Mat>::construct[abi:ne180100]<cv::Mat,cv::Mat&>(v10, (cv::Mat *)(v7 - 96), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 96;
      *((void *)&v16 + 1) -= 96;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv::Mat>,std::reverse_iterator<cv::Mat*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_225F05C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv::Mat>,std::reverse_iterator<cv::Mat*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<cv::Mat>,std::reverse_iterator<cv::Mat*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<cv::Mat>,std::reverse_iterator<cv::Mat*>>::operator()[abi:ne180100](uint64_t *a1)
{
  unint64_t v1 = *(cv::Mat **)(a1[2] + 8);
  unint64_t v2 = *(cv::Mat **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<cv::Mat>::destroy[abi:ne180100](v3, v1);
      unint64_t v1 = (cv::Mat *)((char *)v1 + 96);
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<cv::Mat>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<cv::Mat>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<cv::Mat>::destroy[abi:ne180100](v4, (cv::Mat *)(i - 96));
  }
}

cv::Mat *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv::Mat const*,cv::Mat const*,cv::Mat*>(int a1, cv::Mat *a2, cv::Mat *a3, cv::Mat *this)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    while (this == v5)
    {
LABEL_18:
      uint64_t v5 = (cv::Mat *)((char *)v5 + 96);
      this = (cv::Mat *)((char *)this + 96);
      if (v5 == a3) {
        return a3;
      }
    }
    uint64_t v7 = (atomic_uint *)*((void *)v5 + 3);
    if (v7) {
      atomic_fetch_add(v7, 1u);
    }
    uint64_t v8 = (atomic_uint *)*((void *)this + 3);
    if (v8 && atomic_fetch_add(v8, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate(this, a2);
    }
    *((void *)this + 2) = 0;
    *((void *)this + 5) = 0;
    *((void *)this + 6) = 0;
    *((void *)this + 4) = 0;
    if (*((int *)this + 1) <= 0)
    {
      *((void *)this + 3) = 0;
      *(_DWORD *)this = *(_DWORD *)v5;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = *((void *)this + 8);
      do
      {
        *(_DWORD *)(v10 + 4 * v9++) = 0;
        uint64_t v11 = *((int *)this + 1);
      }
      while (v9 < v11);
      *((void *)this + 3) = 0;
      *(_DWORD *)this = *(_DWORD *)v5;
      if ((int)v11 > 2) {
        goto LABEL_16;
      }
    }
    int v12 = *((_DWORD *)v5 + 1);
    if (v12 <= 2)
    {
      *((_DWORD *)this + 1) = v12;
      *((void *)this + 1) = *((void *)v5 + 1);
      uint64_t v13 = (void *)*((void *)v5 + 9);
      char v14 = (void *)*((void *)this + 9);
      void *v14 = *v13;
      v14[1] = v13[1];
LABEL_17:
      *((_OWORD *)this + 2) = *((_OWORD *)v5 + 2);
      *((void *)this + 6) = *((void *)v5 + 6);
      *((_OWORD *)this + 1) = *((_OWORD *)v5 + 1);
      *((void *)this + 7) = *((void *)v5 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(this, v5);
    goto LABEL_17;
  }
  return v5;
}

void std::vector<std::vector<unsigned char>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(v4, v11);
    }
    else {
      int v12 = 0;
    }
    long long v15 = v12;
    long long v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<unsigned char>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_225F06044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<long long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned char>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<cv::Vec<unsigned char,2>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    if ((uint64_t)(a2 + (v8 >> 1)) < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v8 >> 1;
    unint64_t v10 = v5 - *a1;
    if (v10 <= a2 + (v8 >> 1)) {
      unint64_t v11 = a2 + (v8 >> 1);
    }
    else {
      unint64_t v11 = v10;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<unsigned char,2>>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    long long v14 = &v13[2 * v9];
    long long v15 = &v13[2 * v12];
    bzero(v14, 2 * a2);
    long long v16 = &v14[2 * a2];
    uint64_t v18 = *a1;
    uint64_t v17 = a1[1];
    if (v17 != *a1)
    {
      do
      {
        char v19 = *(v17 - 2);
        v17 -= 2;
        *(v14 - 2) = v19;
        v14 -= 2;
        v14[1] = v17[1];
      }
      while (v17 != v18);
      uint64_t v17 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<unsigned char,2>>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void std::vector<cv::Vec<unsigned char,3>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * (v6 - v7) >= a2)
  {
    if (a2)
    {
      size_t v13 = 3 * ((3 * a2 - 3) / 3) + 3;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v7 - *a1);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 >= 0x5555555555555556) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v5 - *a1);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x5555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<unsigned char,3>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    long long v14 = &v12[3 * v8];
    long long v15 = &v12[3 * v11];
    size_t v16 = 3 * ((3 * a2 - 3) / 3) + 3;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    char v19 = *a1;
    uint64_t v18 = a1[1];
    if (v18 == *a1)
    {
      uint64_t v20 = v14;
    }
    else
    {
      do
      {
        uint64_t v20 = v14 - 3;
        uint64_t v21 = v18 - 3;
        uint64_t v22 = -3;
        do
          v14[v22] = v18[v22];
        while (!__CFADD__(v22++, 1));
        v18 -= 3;
        v14 -= 3;
      }
      while (v21 != v19);
      uint64_t v18 = *a1;
    }
    *a1 = v20;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<unsigned char,3>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x5555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(3 * a2);
}

void std::vector<cv::Vec<short,3>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 1) >= a2)
  {
    if (a2)
    {
      size_t v14 = 6 * ((6 * a2 - 6) / 6) + 6;
      bzero(*(void **)(v4 - 8), v14);
      v7 += v14;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 1);
    unint64_t v10 = v9 + a2;
    if (v9 + a2 > 0x2AAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v8) >> 1);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x1555555555555555) {
      unint64_t v12 = 0x2AAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<short,3>>>(v4, v12);
      unint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      size_t v13 = 0;
    }
    long long v15 = &v13[6 * v9];
    size_t v16 = &v13[6 * v12];
    size_t v17 = 6 * ((6 * a2 - 6) / 6) + 6;
    bzero(v15, v17);
    uint64_t v18 = &v15[v17];
    if (v7 == v8)
    {
      char v19 = v15;
    }
    else
    {
      do
      {
        char v19 = v15 - 6;
        uint64_t v20 = v7 - 6;
        uint64_t v21 = -6;
        do
        {
          *(_WORD *)&v15[v21] = *(_WORD *)&v7[v21];
          v21 += 2;
        }
        while (v21);
        v7 -= 6;
        v15 -= 6;
      }
      while (v20 != v8);
    }
    *a1 = v19;
    a1[1] = v18;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<short,3>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(6 * a2);
}

void std::vector<cv::Vec<int,2>>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint *>>(v4, v12);
    }
    else {
      size_t v13 = 0;
    }
    size_t v14 = &v13[8 * v10];
    long long v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    size_t v16 = &v14[8 * a2];
    size_t v17 = *a1;
    for (uint64_t i = a1[1]; i != v17; *((_DWORD *)v14 + 1) = i[1])
    {
      int v19 = *(i - 2);
      i -= 2;
      *((_DWORD *)v14 - 2) = v19;
      v14 -= 8;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::vector<cv::Vec<int,3>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v14 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(v4 - 8), v14);
      v7 += v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 2);
    unint64_t v10 = v9 + a2;
    if (v9 + a2 > 0x1555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v8) >> 2);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,3>>>(v4, v12);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      size_t v13 = 0;
    }
    long long v15 = &v13[12 * v9];
    size_t v16 = &v13[12 * v12];
    size_t v17 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v15, v17);
    uint64_t v18 = &v15[v17];
    if (v7 == v8)
    {
      int v19 = v15;
    }
    else
    {
      do
      {
        int v19 = v15 - 12;
        uint64_t v20 = v7 - 12;
        uint64_t v21 = -12;
        do
        {
          *(_DWORD *)&v15[v21] = *(_DWORD *)&v7[v21];
          v21 += 4;
        }
        while (v21);
        v7 -= 12;
        v15 -= 12;
      }
      while (v20 != v8);
    }
    *a1 = v19;
    a1[1] = v18;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,3>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a2);
}

void std::vector<cv::Vec<int,4>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 4);
    if (v10 >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 4;
    uint64_t v12 = v5 - v8;
    if (v12 >> 3 > v10) {
      unint64_t v10 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      size_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      size_t v14 = 0;
    }
    long long v15 = &v14[16 * v11];
    size_t v16 = &v14[16 * v13];
    bzero(v15, 16 * a2);
    size_t v17 = &v15[16 * a2];
    if (v7 == v8)
    {
      uint64_t v18 = v15;
    }
    else
    {
      do
      {
        uint64_t v18 = v15 - 16;
        int v19 = v7 - 16;
        uint64_t v20 = -16;
        do
        {
          *(_DWORD *)&v15[v20] = *(_DWORD *)&v7[v20];
          v20 += 4;
        }
        while (v20);
        v7 -= 16;
        v15 -= 16;
      }
      while (v19 != v8);
    }
    *a1 = v18;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<cv::Vec<int,6>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v14);
      v7 += v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v10 = v9 + a2;
    if (v9 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v8) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<long long,long long,float>>>(v4, v12);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      unint64_t v13 = 0;
    }
    long long v15 = &v13[24 * v9];
    size_t v16 = &v13[24 * v12];
    size_t v17 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v15, v17);
    uint64_t v18 = &v15[v17];
    if (v7 == v8)
    {
      int v19 = v15;
    }
    else
    {
      do
      {
        int v19 = v15 - 24;
        uint64_t v20 = v7 - 24;
        uint64_t v21 = -24;
        do
        {
          *(_DWORD *)&v15[v21] = *(_DWORD *)&v7[v21];
          v21 += 4;
        }
        while (v21);
        v7 -= 24;
        v15 -= 24;
      }
      while (v20 != v8);
    }
    *a1 = v19;
    a1[1] = v18;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<cv::Vec<int,8>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 5);
    if (v10 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 5;
    uint64_t v12 = v5 - v8;
    if (v12 >> 4 > v10) {
      unint64_t v10 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      size_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,8>>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      size_t v14 = 0;
    }
    long long v15 = &v14[32 * v11];
    size_t v16 = &v14[32 * v13];
    bzero(v15, 32 * a2);
    size_t v17 = &v15[32 * a2];
    if (v7 == v8)
    {
      uint64_t v18 = v15;
    }
    else
    {
      do
      {
        uint64_t v18 = v15 - 32;
        int v19 = v7 - 32;
        uint64_t v20 = -32;
        do
        {
          *(_DWORD *)&v15[v20] = *(_DWORD *)&v7[v20];
          v20 += 4;
        }
        while (v20);
        v7 -= 32;
        v15 -= 32;
      }
      while (v19 != v8);
    }
    *a1 = v18;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,8>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

void std::vector<cv::Vec<int,9>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v14 = 36 * ((36 * a2 - 36) / 0x24) + 36;
      bzero(*(void **)(v4 - 8), v14);
      v7 += v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    unint64_t v9 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 2);
    unint64_t v10 = v9 + a2;
    if (v9 + a2 > 0x71C71C71C71C71CLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0x8E38E38E38E38E39 * ((v5 - v8) >> 2);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x38E38E38E38E38ELL) {
      unint64_t v12 = 0x71C71C71C71C71CLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,9>>>(v4, v12);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      unint64_t v13 = 0;
    }
    long long v15 = &v13[36 * v9];
    size_t v16 = &v13[36 * v12];
    size_t v17 = 36 * ((36 * a2 - 36) / 0x24) + 36;
    bzero(v15, v17);
    uint64_t v18 = &v15[v17];
    if (v7 == v8)
    {
      int v19 = v15;
    }
    else
    {
      do
      {
        int v19 = v15 - 36;
        uint64_t v20 = v7 - 36;
        uint64_t v21 = -36;
        do
        {
          *(_DWORD *)&v15[v21] = *(_DWORD *)&v7[v21];
          v21 += 4;
        }
        while (v21);
        v7 -= 36;
        v15 -= 36;
      }
      while (v20 != v8);
    }
    *a1 = v19;
    a1[1] = v18;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,9>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(36 * a2);
}

void std::vector<cv::Vec<int,12>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v14 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v14);
      v7 += v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    unint64_t v10 = v9 + a2;
    if (v9 + a2 > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v8) >> 4);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,12>>>(v4, v12);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      unint64_t v13 = 0;
    }
    long long v15 = &v13[48 * v9];
    size_t v16 = &v13[48 * v12];
    size_t v17 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v15, v17);
    uint64_t v18 = &v15[v17];
    if (v7 == v8)
    {
      int v19 = v15;
    }
    else
    {
      do
      {
        int v19 = v15 - 48;
        uint64_t v20 = v7 - 48;
        uint64_t v21 = -48;
        do
        {
          *(_DWORD *)&v15[v21] = *(_DWORD *)&v7[v21];
          v21 += 4;
        }
        while (v21);
        v7 -= 48;
        v15 -= 48;
      }
      while (v20 != v8);
    }
    *a1 = v19;
    a1[1] = v18;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,12>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

void std::vector<cv::Vec<int,16>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 6);
      v7 += 64 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 6);
    if (v10 >> 58) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 6;
    uint64_t v12 = v5 - v8;
    if (v12 >> 5 > v10) {
      unint64_t v10 = v12 >> 5;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      size_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,16>>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      size_t v14 = 0;
    }
    long long v15 = &v14[64 * v11];
    size_t v16 = &v14[64 * v13];
    bzero(v15, a2 << 6);
    size_t v17 = &v15[64 * a2];
    if (v7 == v8)
    {
      uint64_t v18 = v15;
    }
    else
    {
      do
      {
        uint64_t v18 = v15 - 64;
        int v19 = v7 - 64;
        uint64_t v20 = -64;
        do
        {
          *(_DWORD *)&v15[v20] = *(_DWORD *)&v7[v20];
          v20 += 4;
        }
        while (v20);
        v7 -= 64;
        v15 -= 64;
      }
      while (v19 != v8);
    }
    *a1 = v18;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,16>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

void std::vector<cv::Vec<int,32>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 7)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 7);
      v7 += 128 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 7);
    if (v10 >> 57) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 7;
    uint64_t v12 = v5 - v8;
    if (v12 >> 6 > v10) {
      unint64_t v10 = v12 >> 6;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      size_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,32>>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      size_t v14 = 0;
    }
    long long v15 = &v14[128 * v11];
    size_t v16 = &v14[128 * v13];
    bzero(v15, a2 << 7);
    size_t v17 = &v15[128 * a2];
    if (v7 == v8)
    {
      uint64_t v18 = v15;
    }
    else
    {
      do
      {
        uint64_t v18 = v15 - 128;
        int v19 = v7 - 128;
        uint64_t v20 = -128;
        do
        {
          *(_DWORD *)&v15[v20] = *(_DWORD *)&v7[v20];
          v20 += 4;
        }
        while (v20);
        v7 -= 128;
        v15 -= 128;
      }
      while (v19 != v8);
    }
    *a1 = v18;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,32>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 7);
}

void std::vector<cv::Vec<int,64>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 8)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 8);
      v7 += 256 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 8);
    if (HIBYTE(v10)) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 8;
    uint64_t v12 = v5 - v8;
    if (v12 >> 7 > v10) {
      unint64_t v10 = v12 >> 7;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFF00) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      size_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,64>>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      size_t v14 = 0;
    }
    long long v15 = &v14[256 * v11];
    size_t v16 = &v14[256 * v13];
    bzero(v15, a2 << 8);
    size_t v17 = &v15[256 * a2];
    if (v7 == v8)
    {
      uint64_t v18 = v15;
    }
    else
    {
      do
      {
        uint64_t v18 = v15 - 256;
        int v19 = v7 - 256;
        uint64_t v20 = -256;
        do
        {
          *(_DWORD *)&v15[v20] = *(_DWORD *)&v7[v20];
          v20 += 4;
        }
        while (v20);
        v7 -= 256;
        v15 -= 256;
      }
      while (v19 != v8);
    }
    *a1 = v18;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,64>>>(uint64_t a1, unint64_t a2)
{
  if (HIBYTE(a2)) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 8);
}

void std::vector<cv::Vec<int,128>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 9)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 9);
      v7 += 512 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 9);
    if (v10 >> 55) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 9;
    uint64_t v12 = v5 - v8;
    if (v12 >> 8 > v10) {
      unint64_t v10 = v12 >> 8;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFE00) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      size_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,128>>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      size_t v14 = 0;
    }
    long long v15 = &v14[512 * v11];
    size_t v16 = &v14[512 * v13];
    bzero(v15, a2 << 9);
    size_t v17 = &v15[512 * a2];
    if (v7 == v8)
    {
      uint64_t v18 = v15;
    }
    else
    {
      do
      {
        uint64_t v18 = v15 - 512;
        int v19 = v7 - 512;
        uint64_t v20 = -512;
        do
        {
          *(_DWORD *)&v15[v20] = *(_DWORD *)&v7[v20];
          v20 += 4;
        }
        while (v20);
        v7 -= 512;
        v15 -= 512;
      }
      while (v19 != v8);
    }
    *a1 = v18;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv::Vec<int,128>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 55) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 9);
}

void _GLOBAL__sub_I_matrix_cpp()
{
  dword_26AC05B38 = 0;
  qword_26AC05B40 = 0;
  unk_26AC05B48 = 0;
  cv::_none = (uint64_t)&unk_26D989EB8;
}

cv::Exception *cv::Exception::Exception(cv::Exception *this, int a2, long long *a3, long long *a4, long long *a5, int a6)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D98A1A8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    *((void *)this + 7) = *((void *)a3 + 2);
    *(_OWORD *)((char *)this + 40) = v10;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v11 = *a4;
    *((void *)this + 10) = *((void *)a4 + 2);
    *((_OWORD *)this + 4) = v11;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v12 = *a5;
    *((void *)this + 13) = *((void *)a5 + 2);
    *(_OWORD *)((char *)this + 88) = v12;
  }
  *((_DWORD *)this + 28) = a6;
  cv::Exception::formatMessage(this);
  return this;
}

void sub_225F07998(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v4);
  }
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

double cv::Exception::formatMessage(cv::Exception *this)
{
  uint64_t v2 = (void **)((char *)this + 8);
  std::string::basic_string[abi:ne180100]<0>(&v4, "N/A");
  if (*((char *)this + 31) < 0) {
    operator delete(*v2);
  }
  double result = *(double *)&v4;
  *(_OWORD *)uint64_t v2 = v4;
  *((void *)this + 3) = v5;
  return result;
}

void cv::Exception::~Exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26D98A1A8;
  if (SHIBYTE(this[13].__vftable) < 0) {
    operator delete(this[11].__vftable);
  }
  if (SHIBYTE(this[10].__vftable) < 0) {
    operator delete(this[8].__vftable);
  }
  if (SHIBYTE(this[7].__vftable) < 0) {
    operator delete(this[5].__vftable);
  }
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  cv::Exception::~Exception(this);
  JUMPOUT(0x22A641780);
}

uint64_t cv::Exception::what(cv::Exception *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void *cv::format@<X0>(void *a1@<X8>, ...)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "N/A");
}

uint64_t cv::checkHardwareSupport(cv *this)
{
  return *(unsigned __int8 *)(cv::currentFeatures + (int)this + 4);
}

void cv::error(cv *this, const cv::Exception *a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned int *)(v2 + 32);
  if (cv::customErrorCallback)
  {
    if (*(char *)(v2 + 87) >= 0) {
      uint64_t v7 = v2 + 64;
    }
    else {
      uint64_t v7 = *(void *)(v2 + 64);
    }
    if (*(char *)(v2 + 63) >= 0) {
      uint64_t v8 = v2 + 40;
    }
    else {
      uint64_t v8 = *(void *)(v2 + 40);
    }
    if (*(char *)(v2 + 111) >= 0) {
      uint64_t v9 = v2 + 88;
    }
    else {
      uint64_t v9 = *(void *)(v2 + 88);
    }
    cv::customErrorCallback(v3, v7, v8, v9, *(unsigned int *)(v2 + 112), cv::customErrorCallbackData);
  }
  else
  {
    long long v4 = cvErrorStr(v3);
    uint64_t v5 = *(const char **)(v2 + 40);
    if (*(char *)(v2 + 63) >= 0) {
      uint64_t v5 = (const char *)(v2 + 40);
    }
    if (*(char *)(v2 + 87) < 0)
    {
      if (*(void *)(v2 + 72)) {
        uint64_t v6 = *(const char **)(v2 + 64);
      }
      else {
        uint64_t v6 = "unknown function";
      }
    }
    else
    {
      uint64_t v6 = (const char *)(v2 + 64);
      if (!*(unsigned char *)(v2 + 87)) {
        uint64_t v6 = "unknown function";
      }
    }
    long long v10 = *(const char **)(v2 + 88);
    if (*(char *)(v2 + 111) >= 0) {
      long long v10 = (const char *)(v2 + 88);
    }
    sprintf(v13, "OpenCV Error: %s (%s) in %s, file %s, line %d", v4, v5, v6, v10, *(_DWORD *)(v2 + 112));
    long long v11 = (FILE **)MEMORY[0x263EF8348];
    fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v13);
    fflush(*v11);
  }
  if (cv::breakOnError) {
    MEMORY[0] = 0;
  }
  exception = (cv::Exception *)__cxa_allocate_exception(0x78uLL);
  cv::Exception::Exception(exception, (const cv::Exception *)v2);
}

void sub_225F07D1C(_Unwind_Exception *exception_object)
{
}

const char *cvErrorStr(int a1)
{
  switch(a1)
  {
    case -219:
      uint64_t v1 = "OpenGL API call";
      break;
    case -218:
      uint64_t v1 = "No OpenGL support";
      break;
    case -217:
      uint64_t v1 = "Gpu API call";
      break;
    case -216:
      uint64_t v1 = "No GPU support";
      break;
    case -215:
      uint64_t v1 = "Assertion failed";
      break;
    case -214:
      uint64_t v1 = "Memory block has been corrupted";
      break;
    case -213:
      uint64_t v1 = "The function/feature is not implemented";
      break;
    case -212:
      uint64_t v1 = "Parsing error";
      break;
    case -211:
      uint64_t v1 = "One of arguments' values is out of range";
      break;
    case -210:
      uint64_t v1 = "Unsupported format or combination of formats";
      break;
    case -209:
      uint64_t v1 = "Sizes of input arguments do not match";
      break;
    case -208:
      uint64_t v1 = "Bad type of mask argument";
      break;
    case -207:
      uint64_t v1 = "Bad parameter of type CvPoint";
      break;
    case -206:
      uint64_t v1 = "Bad flag (parameter or structure field)";
      break;
    case -205:
      uint64_t v1 = "Formats of input arguments do not match";
      break;
    case -204:
      uint64_t v1 = "Requested object was not found";
      break;
    case -203:
      uint64_t v1 = "Inplace operation is not supported";
      break;
    case -202:
      uint64_t v1 = "Division by zero occured";
      break;
    case -201:
      uint64_t v1 = "Incorrect size of input array";
      break;
    default:
      uint64_t v1 = "No Error";
      switch(a1)
      {
        case -27:
          uint64_t v1 = "Null pointer";
          break;
        case -24:
          uint64_t v1 = "Input COI is not supported";
          break;
        case -17:
          uint64_t v1 = "Input image depth is not supported by function";
          break;
        case -15:
          uint64_t v1 = "Bad number of channels";
          break;
        case -13:
          uint64_t v1 = "Image step is wrong";
          break;
        case -8:
          uint64_t v1 = "Autotrace call";
          break;
        case -7:
          uint64_t v1 = "Iterations do not converge";
          break;
        case -5:
          uint64_t v1 = "Bad argument";
          break;
        case -4:
          uint64_t v1 = "Insufficient memory";
          break;
        case -3:
          uint64_t v1 = "Internal error";
          break;
        case -2:
          uint64_t v1 = "Unspecified error";
          break;
        case -1:
          uint64_t v1 = "Backtrace";
          break;
        case 0:
          return v1;
        default:
          uint64_t v2 = "error";
          if (a1 >= 0) {
            uint64_t v2 = "status";
          }
          uint64_t v1 = cvErrorStr::buf;
          sprintf(cvErrorStr::buf, "Unknown %s code %d", v2, a1);
          break;
      }
      break;
  }
  return v1;
}

uint64_t cvGetErrStatus()
{
  return 0;
}

uint64_t cvRegisterModule(uint64_t a1)
{
  if (!a1 || (v2 = *(const char **)(a1 + 8)) == 0 || (uint64_t v3 = *(const char **)(a1 + 16)) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "module != 0 && module->name != 0 && module->version != 0");
    std::string::basic_string[abi:ne180100]<0>(&v14, "cvRegisterModule");
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/system.cpp");
    cv::Exception::Exception((cv::Exception *)v16, -215, &v15, &v14, &v13, 782);
    cv::error((cv *)v16, v12);
  }
  size_t v4 = strlen(v2);
  size_t v5 = strlen(v3);
  uint64_t v6 = malloc_type_malloc(v4 + v5 + 34, 0x876E47A1uLL);
  long long v7 = *(_OWORD *)(a1 + 16);
  *uint64_t v6 = *(_OWORD *)a1;
  v6[1] = v7;
  size_t v8 = v4 + 1;
  uint64_t v9 = (char *)v6 + v4 + 33;
  *((void *)v6 + 1) = v6 + 2;
  *((void *)v6 + 2) = v9;
  memcpy(v6 + 2, *(const void **)(a1 + 8), v8);
  memcpy(v9, *(const void **)(a1 + 16), v5 + 1);
  *(void *)uint64_t v6 = 0;
  long long v10 = &CvModule::first;
  if (CvModule::first) {
    long long v10 = (uint64_t *)CvModule::last;
  }
  uint64_t *v10 = (uint64_t)v6;
  CvModule::last = (uint64_t)v6;
  return 0;
}

void sub_225F08150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,std::exception a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

cv::Exception *cv::Exception::Exception(cv::Exception *this, const cv::Exception *a2)
{
  *(void *)this = &unk_26D98A1A8;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v5;
  }
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 4);
    *((void *)this + 10) = *((void *)a2 + 10);
    *((_OWORD *)this + 4) = v6;
  }
  long long v7 = (std::string *)((char *)this + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 88);
    *((void *)this + 13) = *((void *)a2 + 13);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  return this;
}

void sub_225F082CC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_system_cpp()
{
  dword_26AC05B28 = 0;
  xmmword_26AC05B08 = 0u;
  unk_26AC05B18 = 0u;
  xmmword_26AC05AE8 = 0u;
  unk_26AC05AF8 = 0u;
  xmmword_26AC05AC8 = 0u;
  unk_26AC05AD8 = 0u;
  xmmword_26AC05AA8 = 0u;
  unk_26AC05AB8 = 0u;
  xmmword_26AC05A88 = 0u;
  unk_26AC05A98 = 0u;
  xmmword_26AC05A68 = 0u;
  unk_26AC05A78 = 0u;
  xmmword_26AC05A48 = 0u;
  unk_26AC05A58 = 0u;
  cv::featuresEnabled = 0u;
  unk_26AC05A38 = 0u;
  dword_26AC05A24 = 0;
  xmmword_26AC05A04 = 0u;
  unk_26AC05A14 = 0u;
  xmmword_26AC059E4 = 0u;
  unk_26AC059F4 = 0u;
  xmmword_26AC059C4 = 0u;
  unk_26AC059D4 = 0u;
  xmmword_26AC059A4 = 0u;
  unk_26AC059B4 = 0u;
  xmmword_26AC05984 = 0u;
  unk_26AC05994 = 0u;
  xmmword_26AC05964 = 0u;
  unk_26AC05974 = 0u;
  xmmword_26AC05944 = 0u;
  unk_26AC05954 = 0u;
  cv::featuresDisabled = 0u;
  unk_26AC05934 = 0u;
  cv::USE_SSE2 = 0;
  cv::USE_SSE4_2 = 0;
  cv::USE_AVX = 0;
  uint64_t result = cvRegisterModule((uint64_t)&cxcore_info);
  cxcore_module = CvModule::last;
  return result;
}

uint64_t cv::gpu::GpuMat::GpuMat(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = *(void *)a2;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v2 = *(void *)(a2 + 24);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(result + 24) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(result + 32) = v3;
  *(void *)(result + 48) = *(void *)(a2 + 48);
  if ((void)v3) {
    atomic_fetch_add((atomic_uint *volatile)v3, 1u);
  }
  return result;
}

void cv::gpu::GpuMat::create(cv::gpu::GpuMat *this, void *a2, int a3, unsigned int a4)
{
  int v6 = (int)a2;
  int v8 = a4 & 0xFFF;
  if (*((_DWORD *)this + 1) != a2
    || *((_DWORD *)this + 2) != a3
    || (*(_DWORD *)this & 0xFFF) != v8
    || !*((void *)this + 3))
  {
    if (*((void *)this + 3)) {
      cv::gpu::GpuMat::release(this, a2);
    }
    if (v6 >= 1 && a3 >= 1)
    {
      *(_DWORD *)this = v8 | 0x42FF0000;
      *((_DWORD *)this + 1) = v6;
      *((_DWORD *)this + 2) = a3;
      int v9 = (((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v8 & 7))) & 3);
      long long v10 = (uint64_t *)((char *)this + 16);
      (*((void (**)(void))gpuFuncTable(void)::stub + 7))();
      uint64_t v11 = *((int *)this + 1);
      int v12 = *((_DWORD *)this + 2);
      if (v11 == 1)
      {
        uint64_t v13 = v12 * (uint64_t)v9;
        uint64_t *v10 = v13;
      }
      else
      {
        uint64_t v13 = *v10;
        if (v12 * (uint64_t)v9 != *v10)
        {
LABEL_13:
          *((void *)this + 3) = 0;
          *((void *)this + 5) = 0;
          *((void *)this + 6) = v13 * v11;
          long long v14 = (_DWORD *)cv::fastMalloc((cv *)4);
          *((void *)this + 4) = v14;
          _DWORD *v14 = 1;
          return;
        }
      }
      *(_DWORD *)this |= 0x4000u;
      goto LABEL_13;
    }
  }
}

double cv::gpu::GpuMat::release(cv::gpu::GpuMat *this, void *a2)
{
  long long v3 = (atomic_uint *)*((void *)this + 4);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1)
  {
    cv::fastFree(*((void ***)this + 4), a2);
    (*((void (**)(void))gpuFuncTable(void)::stub + 8))();
  }
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = 0;
  return result;
}

void EmptyFuncTable::copy(EmptyFuncTable *this, const cv::Mat *a2, cv::gpu::GpuMat *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "The library is compiled without CUDA support");
  std::string::basic_string[abi:ne180100]<0>(v5, "copy");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/include/opencv2/dynamicuda/dynamicuda.hpp");
  cv::Exception::Exception(v7, 4294967080, v6, v5, __p, 115);
  cv::error((cv *)v7, v3);
}

void sub_225F0869C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void EmptyFuncTable::copy(EmptyFuncTable *this, const cv::gpu::GpuMat *a2, cv::Mat *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "The library is compiled without CUDA support");
  std::string::basic_string[abi:ne180100]<0>(v5, "copy");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/include/opencv2/dynamicuda/dynamicuda.hpp");
  cv::Exception::Exception(v7, 4294967080, v6, v5, __p, 116);
  cv::error((cv *)v7, v3);
}

void sub_225F087A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void EmptyFuncTable::copy(EmptyFuncTable *this, const cv::gpu::GpuMat *a2, cv::gpu::GpuMat *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "The library is compiled without CUDA support");
  std::string::basic_string[abi:ne180100]<0>(v5, "copy");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/include/opencv2/dynamicuda/dynamicuda.hpp");
  cv::Exception::Exception(v7, 4294967080, v6, v5, __p, 117);
  cv::error((cv *)v7, v3);
}

void sub_225F088B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void EmptyFuncTable::copyWithMask(EmptyFuncTable *this, const cv::gpu::GpuMat *a2, cv::gpu::GpuMat *a3, const cv::gpu::GpuMat *a4)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "The library is compiled without CUDA support");
  std::string::basic_string[abi:ne180100]<0>(v6, "copyWithMask");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/include/opencv2/dynamicuda/dynamicuda.hpp");
  cv::Exception::Exception(v8, 4294967080, v7, v6, __p, 119);
  cv::error((cv *)v8, v4);
}

void sub_225F089C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void EmptyFuncTable::convert(EmptyFuncTable *this, const cv::gpu::GpuMat *a2, cv::gpu::GpuMat *a3, double a4, double a5, void *a6)
{
  std::string::basic_string[abi:ne180100]<0>(v9, "The library is compiled without CUDA support");
  std::string::basic_string[abi:ne180100]<0>(v8, "convert");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/include/opencv2/dynamicuda/dynamicuda.hpp");
  cv::Exception::Exception(v10, 4294967080, v9, v8, __p, 122);
  cv::error((cv *)v10, v6);
}

void sub_225F08ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void EmptyFuncTable::convert(EmptyFuncTable *this, const cv::gpu::GpuMat *a2, cv::gpu::GpuMat *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "The library is compiled without CUDA support");
  std::string::basic_string[abi:ne180100]<0>(v5, "convert");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/include/opencv2/dynamicuda/dynamicuda.hpp");
  cv::Exception::Exception(v7, 4294967080, v6, v5, __p, 121);
  cv::error((cv *)v7, v3);
}

void sub_225F08BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void EmptyFuncTable::setTo()
{
  std::string::basic_string[abi:ne180100]<0>(v3, "The library is compiled without CUDA support");
  std::string::basic_string[abi:ne180100]<0>(v2, "setTo");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/include/opencv2/dynamicuda/dynamicuda.hpp");
  cv::Exception::Exception(v4, 4294967080, v3, v2, __p, 124);
  cv::error((cv *)v4, v0);
}

void sub_225F08CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void EmptyFuncTable::mallocPitch(EmptyFuncTable *this, void **a2, unint64_t *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "The library is compiled without CUDA support");
  std::string::basic_string[abi:ne180100]<0>(v5, "mallocPitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/include/opencv2/dynamicuda/dynamicuda.hpp");
  cv::Exception::Exception(v7, 4294967080, v6, v5, __p, 126);
  cv::error((cv *)v7, v3);
}

void sub_225F08DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void EmptyFuncTable::~EmptyFuncTable(EmptyFuncTable *this)
{
}

void cv::parallel_for_(uint64_t *a1, uint64_t a2, double a3)
{
  {
    uint64_t v3 = *a1;
    context[0] = a2;
    context[1] = v3;
    double v4 = 1.0;
    if (a3 >= 1.0) {
      double v4 = a3;
    }
    if (v4 > (double)(HIDWORD(v3) - (int)v3)) {
      double v4 = (double)(HIDWORD(v3) - (int)v3);
    }
    if (a3 <= 0.0) {
      double v5 = (double)(HIDWORD(v3) - (int)v3);
    }
    else {
      double v5 = v4;
    }
    int v9 = (uint64_t)rint(v5);
    global_queue = dispatch_get_global_queue(0, 0);
  }
  else
  {
    long long v7 = *(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 16);
    v7(a2, a1);
  }
}

uint64_t anonymous namespace'::block_function(_anonymous_namespace_ *this, void *a2)
{
  int v2 = a2 + 1;
  int v3 = *((_DWORD *)this + 2);
  int v4 = *((_DWORD *)this + 3);
  int v5 = v4 - v3;
  unint64_t v6 = *((int *)this + 4);
  if ((v6 & 0x80000000) == 0) {
    int v7 = *((_DWORD *)this + 4);
  }
  else {
    int v7 = v6 + 1;
  }
  uint64_t v8 = (uint64_t)v7 >> 1;
  v10[0] = v3 + (v8 + (int)a2 * (uint64_t)v5) / v6;
  if (v2 < (int)v6) {
    int v4 = v3 + (v8 + v5 * (uint64_t)v2) / v6;
  }
  v10[1] = v4;
  return (*(uint64_t (**)(void, _DWORD *))(**(void **)this + 16))(*(void *)this, v10);
}

void cv::goodFeaturesToTrack(void (***this)(uint64_t *__return_ptr), const cv::_InputArray *a2, const cv::_OutputArray *a3, void (***a4)(uint64_t *__return_ptr, void, uint64_t), double a5, double a6, const cv::_InputArray *a7, int a8, double a9)
{
  int v15 = (int)a3;
  (**this)(&v38);
  (**a4)(&v33, a4, 0xFFFFFFFFLL);
  if (v15 < 0 || a5 <= 0.0 || a6 < 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "qualityLevel > 0 && minDistance >= 0 && maxCorners >= 0");
    std::string::basic_string[abi:ne180100]<0>(v23, "goodFeaturesToTrack");
    std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/featureselect.cpp");
    cv::Exception::Exception(v29, 4294967081, v25, v23, &__p, 62);
    cv::error((cv *)v29, v16);
  }
  if (v36)
  {
    uint64_t v17 = HIDWORD(v33);
    if (SHIDWORD(v33) >= 3)
    {
      int v19 = v37;
      uint64_t v18 = 1;
      do
      {
        uint64_t v20 = *v19++;
        v18 *= v20;
        --v17;
      }
      while (v17);
    }
    else
    {
      uint64_t v18 = v35 * (uint64_t)v34;
    }
    if (v18)
    {
      if ((v33 & 0xFFF) != 0 || (v37[1] == v39[1] ? (BOOL v21 = *v37 == *v39) : (BOOL v21 = 0), !v21))
      {
        std::string::basic_string[abi:ne180100]<0>(v25, "mask.empty() || (mask.type() == CV_8UC1 && mask.size() == image.size())");
        std::string::basic_string[abi:ne180100]<0>(v23, "goodFeaturesToTrack");
        std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/featureselect.cpp");
        cv::Exception::Exception(v29, 4294967081, v25, v23, &__p, 63);
        cv::error((cv *)v29, v22);
      }
    }
  }
  long long v30 = &v29[2];
  long long v31 = (cv *)v32;
  v32[0] = 0;
  v32[1] = 0;
  v29[0] = 1124007936;
  memset(&v29[1], 0, 60);
  long long v26 = &v25[2];
  long long v27 = (cv *)v28;
  v28[0] = 0;
  v28[1] = 0;
  v25[0] = 1124007936;
  memset(&v25[1], 0, 60);
  if (a8)
  {
    cv::_InputArray::_InputArray((uint64_t)v23, (const cv::Mat *)&v38);
    cv::_OutputArray::_OutputArray((uint64_t)&__p, (cv::Mat *)v29);
    cv::cornerHarris((void (***)(cv **__return_ptr))v23, (const cv::_InputArray *)&__p, a7, 3, a9);
  }
  cv::_InputArray::_InputArray((uint64_t)v23, (const cv::Mat *)&v38);
  cv::_OutputArray::_OutputArray((uint64_t)&__p, (cv::Mat *)v29);
  cv::cornerMinEigenVal((void (***)(cv **__return_ptr))v23, (const cv::_InputArray *)&__p, a7, 3);
}

void sub_225F09DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  cv::Exception::~Exception((cv::Exception *)&a69);
  if (a52 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  cv::Mat::~Mat((cv::Mat *)&STACK[0x210], v71);
  cv::Mat::~Mat((cv::Mat *)(v69 - 224), v72);
  _Unwind_Resume(a1);
}

unint64_t cv::sort<float const*,cv::greaterThanPtr<float>>(unint64_t result)
{
  v78[96] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)result;
  unint64_t v2 = *(void *)(result + 8) - *(void *)result;
  if (v2 >= 0x10)
  {
    LODWORD(v3) = 0;
    v78[0] = *(void *)result;
    v78[1] = v2 + v1 - 8;
    do
    {
      int v4 = (float ***)&v78[2 * v3];
      LODWORD(v3) = v3 - 1;
      unint64_t v6 = *v4;
      int v5 = (char *)v4[1];
      for (unint64_t i = (unint64_t)(v5 - (char *)v6) >> 3; (int)i >= 7; unint64_t i = (unint64_t)(v5 - (char *)v6) >> 3)
      {
        uint64_t v8 = &v6[(i + 1) >> 1];
        if (i <= 0x27)
        {
          uint64_t v13 = *v6;
          float v23 = **v6;
          float v36 = **v8;
          long long v10 = v6;
          uint64_t v38 = (float **)v5;
        }
        else
        {
          uint64_t v9 = (i + 1) >> 3;
          long long v10 = &v6[v9];
          uint64_t v11 = (2 * v9);
          int v12 = &v6[v11];
          uint64_t v13 = *v6;
          float v14 = **v6;
          float v15 = **v10;
          float v16 = **v12;
          if (v14 <= v16) {
            float v17 = **v12;
          }
          else {
            float v17 = **v6;
          }
          if (v14 <= v16) {
            uint64_t v18 = &v6[v11];
          }
          else {
            uint64_t v18 = v6;
          }
          if (v16 > v15)
          {
            float v17 = **v10;
            uint64_t v18 = &v6[v9];
          }
          if (v14 <= v16) {
            float v19 = **v6;
          }
          else {
            float v19 = **v12;
          }
          if (v14 <= v16) {
            int v12 = v6;
          }
          BOOL v20 = v15 <= v16;
          if (v15 <= v16) {
            float v21 = v19;
          }
          else {
            float v21 = **v10;
          }
          if (v20) {
            long long v10 = v12;
          }
          BOOL v22 = v14 <= v15;
          if (v14 > v15) {
            float v23 = v21;
          }
          else {
            float v23 = v17;
          }
          if (v22) {
            long long v10 = v18;
          }
          uint64_t v24 = -v9;
          long long v25 = &v8[-v9];
          long long v26 = &v8[v9];
          float v27 = **v25;
          float v28 = **v8;
          float v29 = **v26;
          if (v27 <= v29) {
            float v30 = **v26;
          }
          else {
            float v30 = **v25;
          }
          if (v27 <= v29) {
            long long v31 = v26;
          }
          else {
            long long v31 = v25;
          }
          if (v29 > v28)
          {
            float v30 = **v8;
            long long v31 = v8;
          }
          if (v27 <= v29) {
            float v32 = **v25;
          }
          else {
            float v32 = **v26;
          }
          if (v27 <= v29) {
            long long v26 = v25;
          }
          BOOL v33 = v28 <= v29;
          if (v28 <= v29) {
            float v34 = v32;
          }
          else {
            float v34 = **v8;
          }
          if (v33) {
            uint64_t v8 = v26;
          }
          BOOL v35 = v27 <= v28;
          if (v27 > v28) {
            float v36 = v34;
          }
          else {
            float v36 = v30;
          }
          if (v35) {
            uint64_t v8 = v31;
          }
          long long v37 = (float **)&v5[-8 * v11];
          uint64_t v38 = (float **)&v5[8 * v24];
          float v39 = **v37;
          float v40 = **v38;
          double result = *(void *)v5;
          float v41 = **(float **)v5;
          if (v39 <= v40)
          {
            if (v41 <= v40)
            {
              if (v39 <= v41) {
                uint64_t v38 = (float **)v5;
              }
              else {
                uint64_t v38 = v37;
              }
            }
          }
          else if (v40 <= v41)
          {
            if (v39 <= v41) {
              uint64_t v38 = v37;
            }
            else {
              uint64_t v38 = (float **)v5;
            }
          }
        }
        float v42 = **v38;
        if (v23 <= v36)
        {
          if (v42 <= v36)
          {
            if (v23 <= v42) {
              uint64_t v8 = v38;
            }
            else {
              uint64_t v8 = v10;
            }
          }
        }
        else
        {
          if (v23 > v42) {
            long long v10 = v38;
          }
          if (v36 <= v42) {
            uint64_t v8 = v10;
          }
        }
        if (v8 != v6)
        {
          long long v43 = *v8;
          *uint64_t v8 = v13;
          *unint64_t v6 = v43;
        }
        int v44 = 0;
        uint64_t v45 = v6 + 1;
        uint64_t v46 = (float **)v5;
        uint64_t v47 = (char *)(v6 + 1);
        uint64_t v48 = v5;
LABEL_73:
        while (v45 <= v46)
        {
          double result = (unint64_t)*v45;
          float v49 = **v6;
          float v50 = **v45;
          if (v49 > v50) {
            break;
          }
          if (v50 <= v49)
          {
            if (v45 > (float **)v47)
            {
              long long v51 = *(float **)v47;
              *(void *)uint64_t v47 = result;
              *uint64_t v45 = v51;
            }
            v47 += 8;
            int v44 = 1;
          }
          ++v45;
        }
        while (v45 <= v46)
        {
          double result = (unint64_t)*v46;
          float v53 = **v46;
          float v54 = **v6;
          if (v53 > v54)
          {
            long long v55 = *v45;
            *v45++ = (float *)result;
            *v46-- = v55;
            int v44 = 1;
            goto LABEL_73;
          }
          if (v54 <= v53)
          {
            if (v46 < (float **)v48)
            {
              long long v52 = *(float **)v48;
              *(void *)uint64_t v48 = result;
              void *v46 = v52;
            }
            v48 -= 8;
            int v44 = 1;
          }
          --v46;
        }
        if (!v44) {
          break;
        }
        unint64_t v56 = (unint64_t)(v47 - (char *)v6) >> 3;
        unint64_t v57 = (char *)v45 - v47;
        unint64_t v58 = v57 >> 3;
        if ((int)(v57 >> 3) < (int)v56) {
          LODWORD(v56) = v57 >> 3;
        }
        if ((int)v56 >= 1)
        {
          uint64_t v59 = -(uint64_t)v56;
          uint64_t v60 = v6;
          do
          {
            uint64_t v61 = *v60;
            *v60++ = v45[v59];
            v45[v59] = v61;
          }
          while (!__CFADD__(v59++, 1));
        }
        double result = (unint64_t)(v5 - v48) >> 3;
        unint64_t v63 = v48 - (char *)v46;
        unint64_t v64 = v63 >> 3;
        if ((int)(v63 >> 3) >= (int)result) {
          int v65 = result;
        }
        else {
          int v65 = v63 >> 3;
        }
        if (v65 >= 1)
        {
          LODWORD(result) = 1 - v65;
          uint64_t v66 = 8 * v65;
          do
          {
            long long v67 = *v45;
            *v45++ = *(float **)&v5[8 * (int)result];
            *(void *)&v5[8 * (int)result] = v67;
            double result = (result + 1);
            v66 -= 8;
          }
          while (v66);
        }
        if ((int)v58 <= 1)
        {
          if ((int)v64 < 2) {
            goto LABEL_121;
          }
          unint64_t v6 = (float **)&v5[-(v63 & 0x7FFFFFFF8) + 8];
        }
        else if ((int)v64 < 2)
        {
          int v5 = (char *)v6 + (v57 & 0x7FFFFFFF8) - 8;
        }
        else if (v58 <= v64)
        {
          uint64_t v69 = (uint64_t)&v5[-(v63 & 0x7FFFFFFF8) + 8];
          uint64_t v3 = (int)v3 + 1;
          unint64_t v70 = &v78[2 * v3];
          *unint64_t v70 = v69;
          v70[1] = (uint64_t)v5;
          int v5 = (char *)v6 + (v57 & 0x7FFFFFFF8) - 8;
        }
        else
        {
          uint64_t v3 = (int)v3 + 1;
          long long v68 = (float ***)&v78[2 * v3];
          *long long v68 = v6;
          v68[1] = (float **)((char *)v6 + (v57 & 0x7FFFFFFF8) - 8);
          unint64_t v6 = (float **)&v5[-(v63 & 0x7FFFFFFF8) + 8];
        }
      }
      for (uint64_t j = v6 + 1; j <= (float **)v5; ++j)
      {
        if (j > v6)
        {
          long long v72 = *j;
          float v73 = **j;
          uint64_t v74 = j;
          uint64_t v75 = j;
          do
          {
            uint64_t v77 = *--v75;
            uint64_t v76 = v77;
            if (v73 <= *v77) {
              break;
            }
            *(v74 - 1) = v72;
            *uint64_t v74 = v76;
            uint64_t v74 = v75;
          }
          while (v75 > v6);
        }
      }
LABEL_121:
      ;
    }
    while ((v3 & 0x80000000) == 0);
  }
  return result;
}

void *std::vector<std::vector<cv::Point_<float>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<long long>>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_225F0A414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t cvCreateMat(int a1, int a2, unsigned int a3)
{
  uint64_t MatHeader = cvCreateMatHeader(a1, a2, a3);
  cvCreateData(MatHeader);
  return MatHeader;
}

uint64_t cvCreateMatHeader(int a1, int a2, unsigned int a3)
{
  __int16 v3 = a3;
  if (a1 < 0 || a2 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "Non-positive width or height");
    std::string::basic_string[abi:ne180100]<0>(v11, "cvCreateMatHeader");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v13, 4294967095, v12, v11, __p, 113);
    cv::error((cv *)v13, v6);
  }
  int v7 = ((((a3 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a3 & 7))) & 3)) * a2;
  if (v7 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "Invalid matrix type");
    std::string::basic_string[abi:ne180100]<0>(v11, "cvCreateMatHeader");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v13, 4294967086, v12, v11, __p, 117);
    cv::error((cv *)v13, v8);
  }
  uint64_t result = cvAlloc(40);
  *(_DWORD *)uint64_t result = v3 & 0xFFF | 0x42424000;
  *(_DWORD *)(result + 4) = v7;
  *(_DWORD *)(result + 32) = a1;
  *(_DWORD *)(result + 36) = a2;
  *(void *)(result + 24) = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 1;
  if (v7 * (uint64_t)a1 >= 0x80000000) {
    *(_DWORD *)uint64_t result = v3 & 0xFFF | 0x42420000;
  }
  return result;
}

void sub_225F0A624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvCreateData(uint64_t result)
{
  if (!result) {
    goto LABEL_27;
  }
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)result;
  unsigned int v3 = *(_DWORD *)result & 0xFFFF0000;
  if (v3 != 1111621632)
  {
    if (v2 == 144)
    {
      if (*(void *)(result + 88))
      {
        std::string::basic_string[abi:ne180100]<0>(v20, "Data is already allocated");
        std::string::basic_string[abi:ne180100]<0>(v19, "cvCreateData");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
        cv::Exception::Exception(v21, 4294967294, v20, v19, __p, 825);
        cv::error((cv *)v21, v9);
      }
      long long v10 = CvIPL;
      if (CvIPL)
      {
        int v11 = *(_DWORD *)(result + 16);
        int v12 = *(_DWORD *)(result + 40);
        if (v11 == 64 || v11 == 32)
        {
          if (v11 == 32) {
            char v13 = 2;
          }
          else {
            char v13 = 3;
          }
          *(_DWORD *)(result + 40) = v12 << v13;
          *(_DWORD *)(result + 16) = 8;
        }
        uint64_t result = ((uint64_t (*)(uint64_t, void, void))v10)(result, 0, 0);
        *(_DWORD *)(v1 + 40) = v12;
        *(_DWORD *)(v1 + 16) = v11;
      }
      else
      {
        uint64_t result = cvAlloc(*(int *)(result + 80));
        *(void *)(v1 + 136) = result;
        *(void *)(v1 + 88) = result;
      }
      return result;
    }
    if (v3 == 1111687168)
    {
      if (!*(_DWORD *)(result + 32)) {
        return result;
      }
      if (*(void *)(result + 24))
      {
        std::string::basic_string[abi:ne180100]<0>(v20, "Data is already allocated");
        std::string::basic_string[abi:ne180100]<0>(v19, "cvCreateData");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
        cv::Exception::Exception(v21, 4294967294, v20, v19, __p, 859);
        cv::error((cv *)v21, v14);
      }
      unint64_t v8 = (((v2 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v2 & 7))) & 3);
      if ((*(_DWORD *)result & 0x4000) != 0)
      {
        if (*(_DWORD *)(result + 36)) {
          unint64_t v8 = *(int *)(result + 36);
        }
        v8 *= *(int *)(result + 32);
      }
      else
      {
        uint64_t v16 = *(unsigned int *)(result + 4);
        if ((int)v16 >= 1)
        {
          unint64_t v17 = v16 + 1;
          do
          {
            if (v8 <= *(int *)(result + 8 * (v17 - 2) + 32)
                     * (uint64_t)*(int *)(result + 8 * (v17 - 2) + 36))
              unint64_t v8 = *(int *)(result + 8 * (v17 - 2) + 32)
                 * (uint64_t)*(int *)(result + 8 * (v17 - 2) + 36);
            --v17;
          }
          while (v17 > 1);
        }
      }
      goto LABEL_39;
    }
LABEL_27:
    std::string::basic_string[abi:ne180100]<0>(v20, "unrecognized or unsupported array type");
    std::string::basic_string[abi:ne180100]<0>(v19, "cvCreateData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v21, 4294967291, v20, v19, __p, 883);
    cv::error((cv *)v21, v15);
  }
  int v4 = *(_DWORD *)(result + 36);
  if (v4 < 0) {
    goto LABEL_27;
  }
  int v5 = *(_DWORD *)(result + 32);
  if (v5 < 0) {
    goto LABEL_27;
  }
  if (v4 && v5)
  {
    int v6 = *(_DWORD *)(result + 4);
    if (*(void *)(result + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(v20, "Data is already allocated");
      std::string::basic_string[abi:ne180100]<0>(v19, "cvCreateData");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
      cv::Exception::Exception(v21, 4294967294, v20, v19, __p, 807);
      cv::error((cv *)v21, v7);
    }
    if (!v6) {
      int v6 = ((((*(_DWORD *)result >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(unsigned char *)result & 7))) & 3))
    }
         * *(_DWORD *)(result + 36);
    unint64_t v8 = *(int *)(result + 32) * (uint64_t)v6;
LABEL_39:
    uint64_t result = cvAlloc(v8 + 20);
    *(void *)(v1 + 8) = result;
    *(void *)(v1 + 24) = (result + 19) & 0xFFFFFFFFFFFFFFF0;
    *(_DWORD *)uint64_t result = 1;
  }
  return result;
}

void sub_225F0AA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvInitMatHeader(uint64_t result, int a2, int a3, unsigned int a4, uint64_t a5, int a6)
{
  int v6 = a6;
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    std::string::basic_string[abi:ne180100]<0>(v15, "cvInitMatHeader");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v17, 4294967269, v16, v15, __p, 140);
    cv::error((cv *)v17, v7);
  }
  if (a2 < 0 || a3 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "Non-positive cols or rows");
    std::string::basic_string[abi:ne180100]<0>(v15, "cvInitMatHeader");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v17, 4294967095, v16, v15, __p, 146);
    cv::error((cv *)v17, v8);
  }
  int v9 = a4 & 0xFFF | 0x42420000;
  *(_DWORD *)uint64_t result = v9;
  *(_DWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 36) = a3;
  *(void *)(result + 24) = a5;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  int v10 = ((((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3)) * a3;
  if (a6 && a6 != 0x7FFFFFFF)
  {
    if (v10 > a6)
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "");
      std::string::basic_string[abi:ne180100]<0>(v15, "cvInitMatHeader");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
      cv::Exception::Exception(v17, 4294967283, v16, v15, __p, 162);
      cv::error((cv *)v17, v11);
    }
  }
  else
  {
    int v6 = ((((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3)) * a3;
  }
  if (v6 == v10 || a2 == 1) {
    int v13 = 0x4000;
  }
  else {
    int v13 = 0;
  }
  if (v6 * (uint64_t)a2 > 0x7FFFFFFF) {
    int v13 = 0;
  }
  *(_DWORD *)uint64_t result = v9 | v13;
  *(_DWORD *)(result + 4) = v6;
  return result;
}

void sub_225F0ADC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void cvReleaseMat(int **a1, void *a2)
{
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    std::string::basic_string[abi:ne180100]<0>(v11, "cvReleaseMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v13, 4294967287, v12, v11, __p, 183);
    cv::error((cv *)v13, v2);
  }
  unsigned int v3 = *a1;
  if (*a1)
  {
    int v4 = *v3;
    unsigned int v5 = *v3 & 0xFFFF0000;
    if (v5 != 1111687168 && (v5 != 1111621632 || v3[9] < 0 || v3[8] < 0))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "");
      std::string::basic_string[abi:ne180100]<0>(v11, "cvReleaseMat");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
      cv::Exception::Exception(v13, 4294967090, v12, v11, __p, 190);
      cv::error((cv *)v13, v6);
    }
    *a1 = 0;
    unsigned int v7 = v4 & 0xFFFF0000;
    if ((v7 == 1111687168 || v7 == 1111621632 && v3[9] >= 1 && v3[8] >= 1) && *((void *)v3 + 3))
    {
      unint64_t v8 = (void **)*((void *)v3 + 1);
      *((void *)v3 + 3) = 0;
      if (v8)
      {
        if ((*(_DWORD *)v8)-- == 1) {
          cv::fastFree(v8, a2);
        }
      }
      *((void *)v3 + 1) = 0;
    }
    cv::fastFree((void **)v3, a2);
  }
}

void sub_225F0B030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvCloneMat(uint64_t a1)
{
  if (!a1
    || (unsigned int v2 = *(_DWORD *)a1, HIWORD(*(_DWORD *)a1) != 16962)
    || (int v3 = *(_DWORD *)(a1 + 36), v3 < 1)
    || (int v4 = *(_DWORD *)(a1 + 32), v4 <= 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "Bad CvMat header");
    std::string::basic_string[abi:ne180100]<0>(v10, "cvCloneMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v12, 4294967291, v11, v10, __p, 205);
    cv::error((cv *)v12, v5);
  }
  uint64_t MatHeader = cvCreateMatHeader(v4, v3, v2);
  uint64_t v7 = MatHeader;
  if (*(void *)(a1 + 24))
  {
    cvCreateData(MatHeader);
    cvCopy(a1, v7, 0);
  }
  return v7;
}

void sub_225F0B1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvInitMatNDHeader(uint64_t result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "NULL matrix header pointer");
    std::string::basic_string[abi:ne180100]<0>(v17, "cvInitMatNDHeader");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v19, 4294967269, v18, v17, __p, 231);
    cv::error((cv *)v19, v5);
  }
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "NULL <sizes> pointer");
    std::string::basic_string[abi:ne180100]<0>(v17, "cvInitMatNDHeader");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v19, 4294967269, v18, v17, __p, 237);
    cv::error((cv *)v19, v6);
  }
  uint64_t v7 = (((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3);
  if (a2 - 33 <= 0xFFFFFFDF)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "non-positive or too large number of dimensions");
    std::string::basic_string[abi:ne180100]<0>(v17, "cvInitMatNDHeader");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v19, 4294967085, v18, v17, __p, 241);
    cv::error((cv *)v19, v8);
  }
  unint64_t v9 = a2 + 1;
  do
  {
    uint64_t v10 = (v9 - 2);
    int v11 = *(_DWORD *)(a3 + 4 * v10);
    if (v11 < 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v18, "one of dimesion sizes is non-positive");
      std::string::basic_string[abi:ne180100]<0>(v17, "cvInitMatNDHeader");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
      cv::Exception::Exception(v19, 4294967095, v18, v17, __p, 246);
      cv::error((cv *)v19, v12);
    }
    uint64_t v13 = result + 8 * v10;
    *(_DWORD *)(v13 + 32) = v11;
    if (v7 >= 0x80000000)
    {
      std::string::basic_string[abi:ne180100]<0>(v18, "The array is too big");
      std::string::basic_string[abi:ne180100]<0>(v17, "cvInitMatNDHeader");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
      cv::Exception::Exception(v19, 4294967085, v18, v17, __p, 249);
      cv::error((cv *)v19, v14);
    }
    *(_DWORD *)(v13 + 36) = v7;
    v7 *= *(int *)(a3 + 4 * v10);
    --v9;
  }
  while (v9 > 1);
  if (v7 >= 0x80000000) {
    int v15 = 1111687168;
  }
  else {
    int v15 = 1111703552;
  }
  *(_DWORD *)uint64_t result = v15 & 0xFFFFF000 | a4 & 0xFFF;
  *(_DWORD *)(result + 4) = a2;
  *(void *)(result + 24) = a5;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_225F0B5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t cvCreateMatND(unsigned int a1, uint64_t a2, unsigned int a3)
{
  uint64_t MatNDHeader = cvCreateMatNDHeader(a1, a2, a3);
  cvCreateData(MatNDHeader);
  return MatNDHeader;
}

uint64_t cvCreateMatNDHeader(unsigned int a1, uint64_t a2, unsigned int a3)
{
  if (a1 - 33 <= 0xFFFFFFDF)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "non-positive or too large number of dimensions");
    std::string::basic_string[abi:ne180100]<0>(v10, "cvCreateMatNDHeader");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v12, 4294967085, v11, v10, __p, 280);
    cv::error((cv *)v12, v6);
  }
  uint64_t v7 = cvAlloc(288);
  uint64_t result = cvInitMatNDHeader(v7, a1, a2, a3, 0);
  *(_DWORD *)(result + 16) = 1;
  return result;
}

void sub_225F0B7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvCloneMatND(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (!a1 || *(_WORD *)(a1 + 2) != 16963)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "Bad CvMatND header");
    std::string::basic_string[abi:ne180100]<0>(v34, "cvCloneMatND");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    unsigned int v2 = (cv *)cv::Exception::Exception(v42, 4294967291, v24, v34, __p, 295);
    cv::error(v2, v3);
  }
  signed int v4 = *(_DWORD *)(a1 + 4);
  if (v4 >= 33)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "src->dims <= CV_MAX_DIM");
    std::string::basic_string[abi:ne180100]<0>(v34, "cvCloneMatND");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    unsigned int v5 = (cv *)cv::Exception::Exception(v42, 4294967081, v24, v34, __p, 297);
    cv::error(v5, v6);
  }
  if (v4 >= 1)
  {
    uint64_t v7 = v4;
    unint64_t v8 = (int *)(a1 + 32);
    unint64_t v9 = v42;
    do
    {
      int v10 = *v8;
      v8 += 2;
      *v9++ = v10;
      --v7;
    }
    while (v7);
  }
  uint64_t MatNDHeader = cvCreateMatNDHeader(v4, (uint64_t)v42, *(_DWORD *)a1);
  uint64_t v12 = MatNDHeader;
  if (*(void *)(a1 + 24))
  {
    cvCreateData(MatNDHeader);
    cv::Mat::Mat(v34, a1, 0);
    cv::Mat::Mat(__p, v12, 0);
    uint64_t v13 = *(void *)(v12 + 24);
    cv::_OutputArray::_OutputArray((uint64_t)v24, (cv::Mat *)__p);
    cv::Mat::copyTo((cv::Mat *)v34, (const cv::_OutputArray *)v24);
    if (v26 != v13)
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "_dst.data == data0");
      std::string::basic_string[abi:ne180100]<0>(v22, "cvCloneMatND");
      std::string::basic_string[abi:ne180100]<0>(v21, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
      cv::Exception::Exception(v24, 4294967081, v23, v22, v21, 311);
      cv::error((cv *)v24, v15);
    }
    if (v27 && atomic_fetch_add(v27, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)__p, v14);
    }
    uint64_t v26 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    if (SHIDWORD(__p[0]) >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v31;
      do
        *(_DWORD *)(v17 + 4 * v16++) = 0;
      while (v16 < SHIDWORD(__p[0]));
    }
    float v27 = 0;
    if (v32 != (cv *)&v33) {
      cv::fastFree((void **)v32, v14);
    }
    if (v35 && atomic_fetch_add(v35, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v34, v14);
    }
    v34[2] = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    if (SHIDWORD(v34[0]) >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = v39;
      do
        *(_DWORD *)(v19 + 4 * v18++) = 0;
      while (v18 < SHIDWORD(v34[0]));
    }
    BOOL v35 = 0;
    if (v40 != (cv *)&v41) {
      cv::fastFree((void **)v40, v14);
    }
  }
  return v12;
}

void sub_225F0BB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  cv::Exception::~Exception((cv::Exception *)&a28);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  cv::Mat::~Mat((cv::Mat *)&a43, v56);
  cv::Mat::~Mat((cv::Mat *)&a55, v57);
  _Unwind_Resume(a1);
}

uint64_t cvInitNArrayIterator(unsigned int a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v7 = a5;
  uint64_t v8 = a4;
  unint64_t v9 = a3;
  uint64_t v10 = a2;
  if (a1 - 11 <= 0xFFFFFFF5)
  {
    std::string::basic_string[abi:ne180100]<0>(v56, "Incorrect number of arrays");
    std::string::basic_string[abi:ne180100]<0>(v55, "cvInitNArrayIterator");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v57, 4294967085, v56, v55, __p, 386);
    cv::error((cv *)v57, v11);
  }
  if (!a2 || !a4)
  {
    std::string::basic_string[abi:ne180100]<0>(v56, "Some of required array pointers is NULL");
    std::string::basic_string[abi:ne180100]<0>(v55, "cvInitNArrayIterator");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v57, 4294967269, v56, v55, __p, 389);
    cv::error((cv *)v57, v12);
  }
  if (!a5)
  {
    std::string::basic_string[abi:ne180100]<0>(v56, "Iterator pointer is NULL");
    std::string::basic_string[abi:ne180100]<0>(v55, "cvInitNArrayIterator");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v57, 4294967269, v56, v55, __p, 392);
    cv::error((cv *)v57, v13);
  }
  if ((a1 & 0x80000000) != 0)
  {
    int v15 = 0;
    int v16 = -1;
  }
  else
  {
    unint64_t v14 = 0;
    int v15 = 0;
    int v50 = a6 & 3;
    uint64_t v51 = a1 + 1;
    unint64_t v52 = a1;
    int v16 = -1;
    do
    {
      uint64_t v17 = v15;
      if (v14 >= v52)
      {
        MatND = v9;
        if (!v9) {
          break;
        }
      }
      else
      {
        MatND = *(_DWORD **)(v10 + 8 * v14);
        if (!MatND)
        {
          std::string::basic_string[abi:ne180100]<0>(v56, "Some of required array pointers is NULL");
          std::string::basic_string[abi:ne180100]<0>(v55, "cvInitNArrayIterator");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
          cv::Exception::Exception(v57, 4294967269, v56, v55, __p, 402);
          cv::error((cv *)v57, v38);
        }
      }
      if (*((_WORD *)MatND + 1) != 16963 || !*((void *)MatND + 3))
      {
        int v53 = 0;
        MatND = cvGetMatND((uint64_t)MatND, v8 + 288 * v14, &v53);
        if (v53)
        {
          std::string::basic_string[abi:ne180100]<0>(v56, "COI set is not allowed here");
          std::string::basic_string[abi:ne180100]<0>(v55, "cvInitNArrayIterator");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
          cv::Exception::Exception(v57, 4294967272, v56, v55, __p, 413);
          cv::error((cv *)v57, v19);
        }
      }
      uint64_t v20 = v7 + 8 * v14;
      *(void *)(v20 + 224) = MatND;
      float v21 = (void *)(v20 + 224);
      int v15 = MatND;
      if (v14)
      {
        if (MatND[1] != v17[1])
        {
          std::string::basic_string[abi:ne180100]<0>(v56, "Number of dimensions is the same for all arrays");
          std::string::basic_string[abi:ne180100]<0>(v55, "cvInitNArrayIterator");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
          cv::Exception::Exception(v57, 4294967087, v56, v55, __p, 422);
          cv::error((cv *)v57, v22);
        }
        if (v14 >= v52)
        {
          if ((*(_WORD *)MatND & 0xFFE) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(v56, "Mask should have 8uC1 or 8sC1 data type");
            std::string::basic_string[abi:ne180100]<0>(v55, "cvInitNArrayIterator");
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
            cv::Exception::Exception(v57, 4294967088, v56, v55, __p, 448);
            cv::error((cv *)v57, v24);
          }
        }
        else if (v50 == 2)
        {
          if (((*v17 ^ *MatND) & 0xFF8) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(v56, "Depth is not the same for all arrays");
            std::string::basic_string[abi:ne180100]<0>(v55, "cvInitNArrayIterator");
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
            cv::Exception::Exception(v57, 4294967091, v56, v55, __p, 441);
            cv::error((cv *)v57, v36);
          }
        }
        else if (v50 == 1)
        {
          if (((*v17 ^ *MatND) & 0xFF8) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(v56, "Number of channels is not the same for all arrays");
            std::string::basic_string[abi:ne180100]<0>(v55, "cvInitNArrayIterator");
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
            cv::Exception::Exception(v57, 4294967091, v56, v55, __p, 436);
            cv::error((cv *)v57, v37);
          }
        }
        else if (!v50 && ((*v17 ^ *MatND) & 0xFFF) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(v56, "Data type is not the same for all arrays");
          std::string::basic_string[abi:ne180100]<0>(v55, "cvInitNArrayIterator");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
          cv::Exception::Exception(v57, 4294967091, v56, v55, __p, 431);
          cv::error((cv *)v57, v23);
        }
        if ((v6 & 4) != 0 || (int v25 = MatND[1], v25 < 1))
        {
          int v15 = v17;
        }
        else
        {
          uint64_t v26 = v8;
          uint64_t v27 = v6;
          uint64_t v28 = v7;
          uint64_t v29 = 0;
          uint64_t v30 = 8;
          do
          {
            if (MatND[v30] != v17[v30])
            {
              std::string::basic_string[abi:ne180100]<0>(v56, "Dimension sizes are the same for all arrays");
              std::string::basic_string[abi:ne180100]<0>(v55, "cvInitNArrayIterator");
              std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
              cv::Exception::Exception(v57, 4294967087, v56, v55, __p, 456);
              cv::error((cv *)v57, v31);
            }
            ++v29;
            v30 += 2;
          }
          while (v29 < v25);
          int v15 = v17;
          uint64_t v7 = v28;
          uint64_t v6 = v27;
          uint64_t v8 = v26;
          uint64_t v10 = a2;
          unint64_t v9 = a3;
        }
      }
      int v32 = MatND[1];
      uint64_t v33 = (((*MatND >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * (*(unsigned char *)MatND & 7))) & 3);
      uint64_t v34 = (v32 - 1);
      if ((int)v34 > v16 && v33 == MatND[2 * v34 + 9])
      {
        while (1)
        {
          v33 *= (int)MatND[2 * v34 + 8];
          uint64_t v34 = (v32 - 2);
          if ((int)v34 <= v16) {
            break;
          }
          --v32;
          if (v33 != MatND[2 * v34 + 9])
          {
            LODWORD(v34) = v32 - 1;
            goto LABEL_43;
          }
        }
        int v32 = v16 + 1;
        LODWORD(v34) = v16;
      }
LABEL_43:
      if (v33 <= 0x7FFFFFFF || v34 != v16) {
        int v32 = v34;
      }
      if (v32 > v16) {
        int v16 = v32;
      }
      void *v21 = MatND;
      *(void *)(v7 + 8 * v14++ + 16) = *((void *)MatND + 3);
    }
    while (v14 != v51);
  }
  int v39 = v15[1] - 1;
  if (v39 <= v16)
  {
    uint64_t v41 = 0x100000001;
  }
  else
  {
    LODWORD(v40) = 1;
    do
      uint64_t v40 = (v15[2 * v39-- + 8] * v40);
    while (v39 > v16);
    uint64_t v41 = v40 | 0x100000000;
  }
  uint64_t result = (v16 + 1);
  *(_DWORD *)uint64_t v7 = a1;
  *(_DWORD *)(v7 + 4) = result;
  *(void *)(v7 + 8) = v41;
  if ((v16 & 0x80000000) == 0)
  {
    uint64_t v43 = v15 + 8;
    int v44 = (_DWORD *)(v7 + 96);
    uint64_t v45 = (v16 + 1);
    do
    {
      int v46 = *v43;
      v43 += 2;
      *v44++ = v46;
      --v45;
    }
    while (v45);
  }
  return result;
}

void sub_225F0C530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(a1);
}

_DWORD *cvGetMatND(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  signed int v4 = (_DWORD *)a1;
  if (a3) {
    *a3 = 0;
  }
  if (!a1 || !a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "NULL array pointer is passed");
    std::string::basic_string[abi:ne180100]<0>(v17, "cvGetMatND");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v18, 4294967269, v15, v17, __p, 328);
    cv::error((cv *)v18, v5);
  }
  unsigned int v6 = *(_DWORD *)a1;
  if (HIWORD(*(_DWORD *)a1) == 16963)
  {
    if (!*(void *)(a1 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(v15, "The matrix has NULL data pointer");
      std::string::basic_string[abi:ne180100]<0>(v17, "cvGetMatND");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
      cv::Exception::Exception(v18, 4294967269, v15, v17, __p, 333);
      cv::error((cv *)v18, v7);
    }
    return v4;
  }
  if (v6 == 144)
  {
    Mat = (_DWORD *)cvGetMat(a1, (uint64_t)v15, a3, 0);
    signed int v4 = Mat;
    if (!Mat) {
      goto LABEL_15;
    }
    unsigned int v6 = *Mat;
  }
  if (HIWORD(v6) != 16962 || (int)v4[9] < 1 || (int)v4[8] <= 0)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(v17, "Unrecognized or unsupported array type");
    std::string::basic_string[abi:ne180100]<0>(__p, "cvGetMatND");
    std::string::basic_string[abi:ne180100]<0>(v14, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v18, 4294967291, v17, __p, v14, 345);
    cv::error((cv *)v18, v9);
  }
  uint64_t v10 = *((void *)v4 + 3);
  if (!v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "Input array has NULL data pointer");
    std::string::basic_string[abi:ne180100]<0>(__p, "cvGetMatND");
    std::string::basic_string[abi:ne180100]<0>(v14, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v18, 4294967269, v17, __p, v14, 348);
    cv::error((cv *)v18, v11);
  }
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  unsigned int v12 = *v4;
  *(_DWORD *)a2 = *v4;
  *(_DWORD *)(a2 + 4) = 2;
  *(_DWORD *)(a2 + 32) = v4[8];
  *(_DWORD *)(a2 + 36) = v4[1];
  *(_DWORD *)(a2 + 40) = v4[9];
  *(_DWORD *)(a2 + 44) = (((v12 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v12 & 7))) & 3);
  return (_DWORD *)a2;
}

void sub_225F0C978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t cvNextNArraySlice(unsigned int *a1)
{
  if (!a1) {
    cvNextNArraySlice_cold_1();
  }
  uint64_t v1 = a1[1];
  if ((int)v1 < 1) {
    return 0;
  }
  uint64_t v2 = *a1;
  while (1)
  {
    uint64_t v3 = (v1 - 1);
    if ((int)v2 >= 1)
    {
      uint64_t v4 = v2;
      unsigned int v5 = a1 + 56;
      do
      {
        *(v5 - 26) += *(int *)(*v5 + 8 * v3 + 36);
        ++v5;
        --v4;
      }
      while (v4);
    }
    unsigned int v6 = &a1[v3];
    int v8 = v6[24];
    uint64_t v7 = v6 + 24;
    *uint64_t v7 = v8 - 1;
    if (v8 > 1) {
      break;
    }
    int v9 = *(_DWORD *)(*((void *)a1 + 28) + 8 * v3 + 32);
    if ((int)v2 >= 1)
    {
      uint64_t v10 = v2;
      int v11 = a1 + 56;
      do
      {
        *(v11 - 26) -= v9 * (uint64_t)*(int *)(*v11 + 8 * v3 + 36);
        ++v11;
        --v10;
      }
      while (v10);
    }
    *uint64_t v7 = v9;
    if (v1-- <= 1) {
      return 0;
    }
  }
  return 1;
}

uint64_t cvCreateSparseMat(int a1, int *a2, unsigned int a3)
{
  unsigned int v6 = (0x88442211 >> (4 * (a3 & 7))) & 0xF;
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "invalid array data type");
    std::string::basic_string[abi:ne180100]<0>(v23, "cvCreateSparseMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v25, 4294967086, v24, v23, __p, 538);
    cv::error((cv *)v25, v7);
  }
  if ((a1 - 1025) <= 0xFFFFFBFF)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "bad number of dimensions");
    std::string::basic_string[abi:ne180100]<0>(v23, "cvCreateSparseMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v25, 4294967085, v24, v23, __p, 541);
    cv::error((cv *)v25, v8);
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "NULL <sizes> pointer");
    std::string::basic_string[abi:ne180100]<0>(v23, "cvCreateSparseMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v25, 4294967269, v24, v23, __p, 544);
    cv::error((cv *)v25, v9);
  }
  if (a1 >= 1)
  {
    uint64_t v10 = a1;
    int v11 = a2;
    do
    {
      int v12 = *v11++;
      if (v12 <= 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v24, "one of dimesion sizes is non-positive");
        std::string::basic_string[abi:ne180100]<0>(v23, "cvCreateSparseMat");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
        cv::Exception::Exception(v25, 4294967095, v24, v23, __p, 549);
        cv::error((cv *)v25, v13);
      }
      --v10;
    }
    while (v10);
  }
  if (a1 <= 32) {
    int v14 = 32;
  }
  else {
    int v14 = a1;
  }
  uint64_t v15 = cvAlloc(4 * (v14 - 32) + 184);
  *(_DWORD *)uint64_t v15 = a3 & 0xFFF | 0x42440000;
  *(_DWORD *)(v15 + 4) = a1;
  *(void *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 16) = 1;
  size_t v16 = 4 * a1;
  memcpy((void *)(v15 + 52), a2, v16);
  if ((v6 & (v6 - 1)) != 0) {
    cvCreateMemStorage_cold_1();
  }
  int v17 = ((_WORD)v6 + (_WORD)v6 * ((a3 >> 3) & 0x1FF) + ((unsigned __int16)(v6 + 15) & (unsigned __int16)-(__int16)v6) + 3) & 0xFFFC;
  *(_DWORD *)(v15 + 44) = (v6 + 15) & -v6;
  *(_DWORD *)(v15 + 48) = v17;
  int v18 = (v16 + v17 + 15) & 0xFFFFFFF0;
  uint64_t MemStorage = cvCreateMemStorage(4096);
  *(void *)(v15 + 24) = cvCreateSet(0, 112, v18, MemStorage);
  *(_DWORD *)(v15 + 40) = 1024;
  uint64_t v20 = (void *)cvAlloc(0x2000);
  *(void *)(v15 + 32) = v20;
  bzero(v20, 0x2000uLL);
  return v15;
}

void sub_225F0CED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void cvReleaseSparseMat(uint64_t *a1, void *a2)
{
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "");
    std::string::basic_string[abi:ne180100]<0>(v8, "cvReleaseSparseMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v10, 4294967287, v9, v8, __p, 582);
    cv::error((cv *)v10, v2);
  }
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (*(_WORD *)(v3 + 2) != 16964)
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "");
      std::string::basic_string[abi:ne180100]<0>(v8, "cvReleaseSparseMat");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
      cv::Exception::Exception(v10, 4294967090, v9, v8, __p, 589);
      cv::error((cv *)v10, v4);
    }
    *a1 = 0;
    v10[0] = *(void ***)(*(void *)(v3 + 24) + 72);
    cvReleaseMemStorage(v10, a2);
    cv::fastFree(*(void ***)(v3 + 32), v5);
    *(void *)(v3 + 32) = 0;
    cv::fastFree((void **)v3, v6);
  }
}

void sub_225F0D0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvCloneSparseMat(uint64_t a1)
{
  if (!a1 || HIWORD(*(_DWORD *)a1) != 16964)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid sparse array header");
    std::string::basic_string[abi:ne180100]<0>(v6, "cvCloneSparseMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v8, 4294967291, v7, v6, __p, 606);
    cv::error((cv *)v8, v2);
  }
  uint64_t SparseMat = cvCreateSparseMat(*(_DWORD *)(a1 + 4), (int *)(a1 + 52), *(_DWORD *)a1);
  cvCopy(a1, SparseMat, 0);
  return SparseMat;
}

void sub_225F0D244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvInitSparseMatIterator(uint64_t a1, uint64_t a2)
{
  if (!a1 || *(_WORD *)(a1 + 2) != 16964)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "Invalid sparse matrix header");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvInitSparseMatIterator");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v11, 4294967291, v10, v9, __p, 621);
    cv::error((cv *)v11, v3);
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "NULL iterator pointer");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvInitSparseMatIterator");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v11, 4294967269, v10, v9, __p, 624);
    cv::error((cv *)v11, v4);
  }
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(unsigned int *)(a1 + 40);
  if ((int)v5 < 1)
  {
    LODWORD(v6) = 0;
    uint64_t result = 0;
  }
  else
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t result = *(void *)(*(void *)(a1 + 32) + 8 * v6);
      if (result) {
        break;
      }
      if (v5 == ++v6)
      {
        uint64_t result = 0;
        LODWORD(v6) = *(_DWORD *)(a1 + 40);
        goto LABEL_13;
      }
    }
    *(void *)(a2 + 8) = result;
  }
LABEL_13:
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

void sub_225F0D450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void cvReleaseData(uint64_t a1, void *a2)
{
  if (!a1) {
    goto LABEL_17;
  }
  unsigned int v3 = *(_DWORD *)a1 & 0xFFFF0000;
  if (v3 == 1111687168) {
    goto LABEL_6;
  }
  if (v3 == 1111621632)
  {
    if (*(int *)(a1 + 36) >= 1 && *(int *)(a1 + 32) >= 1)
    {
LABEL_6:
      if (*(void *)(a1 + 24))
      {
        uint64_t v5 = (void *)(a1 + 8);
        uint64_t v4 = *(void ***)(a1 + 8);
        v5[2] = 0;
        if (v4)
        {
          if ((*(_DWORD *)v4)-- == 1) {
            cv::fastFree(v4, a2);
          }
        }
        *uint64_t v5 = 0;
      }
      return;
    }
LABEL_17:
    std::string::basic_string[abi:ne180100]<0>(v12, "unrecognized or unsupported array type");
    std::string::basic_string[abi:ne180100]<0>(v11, "cvReleaseData");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v13, 4294967291, v12, v11, __p, 996);
    cv::error((cv *)v13, v8);
  }
  if (*(_DWORD *)a1 != 144) {
    goto LABEL_17;
  }
  uint64_t v7 = (void (*)(void))CvIPL;
  if (CvIPL)
  {
    v7();
  }
  else
  {
    int v9 = *(void ***)(a1 + 136);
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 88) = 0;
    cv::fastFree(v9, a2);
  }
}

void sub_225F0D644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvPtr2D(uint64_t a1, unsigned int a2, unsigned int a3, int *a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!a1) {
    goto LABEL_30;
  }
  unsigned int v4 = *(_DWORD *)a1;
  unsigned int v5 = *(_DWORD *)a1 & 0xFFFF0000;
  if (v5 == 1111621632)
  {
    int v6 = *(_DWORD *)(a1 + 36);
    if (v6 >= 1)
    {
      int v7 = *(_DWORD *)(a1 + 32);
      if (v7 >= 1)
      {
        if (*(void *)(a1 + 24))
        {
          if (v6 <= a3 || v7 <= a2)
          {
            std::string::basic_string[abi:ne180100]<0>(v28, "index is out of range");
            std::string::basic_string[abi:ne180100]<0>(v27, "cvPtr2D");
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
            cv::Exception::Exception(__src, 4294967085, v28, v27, __p, 1754);
            cv::error((cv *)__src, v8);
          }
          if (a4) {
            *a4 = *(_DWORD *)a1 & 0xFFF;
          }
          return *(void *)(a1 + 24)
               + *(int *)(a1 + 4) * (uint64_t)(int)a2
               + (int)(((((v4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3)) * a3);
        }
      }
    }
LABEL_30:
    std::string::basic_string[abi:ne180100]<0>(v28, "unrecognized or unsupported array type");
    std::string::basic_string[abi:ne180100]<0>(v27, "cvPtr2D");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(__src, 4294967291, v28, v27, __p, 1830);
    cv::error((cv *)__src, v21);
  }
  if (v4 == 144)
  {
    uint64_t v10 = *(void *)(a1 + 88);
    if (!v10) {
      goto LABEL_30;
    }
    int v11 = *(_DWORD *)(a1 + 16) >> 3;
    int v12 = *(_DWORD *)(a1 + 28);
    if (!v12) {
      v11 *= *(_DWORD *)(a1 + 8);
    }
    uint64_t v13 = *(int **)(a1 + 48);
    if (v13)
    {
      unsigned int v14 = v13[3];
      unsigned int v15 = v13[4];
      v10 += *(_DWORD *)(a1 + 96) * v13[2] + v13[1] * v11;
      if (v12)
      {
        uint64_t v16 = *v13;
        if (!v16)
        {
          std::string::basic_string[abi:ne180100]<0>(v28, "COI must be non-null in case of planar images");
          std::string::basic_string[abi:ne180100]<0>(v27, "cvPtr2D");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
          cv::Exception::Exception(__src, 4294967272, v28, v27, __p, 1785);
          cv::error((cv *)__src, v17);
        }
        v10 += *(int *)(a1 + 80) * (v16 - 1);
      }
    }
    else
    {
      unsigned int v14 = *(_DWORD *)(a1 + 40);
      unsigned int v15 = *(_DWORD *)(a1 + 44);
    }
    if (v15 <= a2 || v14 <= a3)
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "index is out of range");
      std::string::basic_string[abi:ne180100]<0>(v27, "cvPtr2D");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
      cv::Exception::Exception(__src, 4294967085, v28, v27, __p, 1797);
      cv::error((cv *)__src, v23);
    }
    uint64_t v9 = v10 + (int)(v11 * a3 + *(_DWORD *)(a1 + 96) * a2);
    if (a4)
    {
      int v24 = *(_DWORD *)(a1 + 8);
      if ((v24 - 5) <= 0xFFFFFFFB)
      {
        std::string::basic_string[abi:ne180100]<0>(v28, "");
        std::string::basic_string[abi:ne180100]<0>(v27, "cvPtr2D");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
        cv::Exception::Exception(__src, 4294967086, v28, v27, __p, 1805);
        cv::error((cv *)__src, v25);
      }
      int v20 = ((0x43160520u >> (((*(_DWORD *)(a1 + 16) >> 2) & 0x3C) + ((*(int *)(a1 + 16) >> 31) & 0x14))) & 7 | (8 * v24))
          - 8;
      goto LABEL_41;
    }
  }
  else
  {
    if (v5 == 1111752704)
    {
      __src[0] = a2;
      __src[1] = a3;
      return icvGetNodePtr(a1, __src, a4, 1, 0);
    }
    if (v5 != 1111687168) {
      goto LABEL_30;
    }
    uint64_t v18 = *(void *)(a1 + 24);
    if (!v18) {
      goto LABEL_30;
    }
    if (*(_DWORD *)(a1 + 4) != 2 || *(_DWORD *)(a1 + 32) <= a2 || *(_DWORD *)(a1 + 40) <= a3)
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "index is out of range");
      std::string::basic_string[abi:ne180100]<0>(v27, "cvPtr2D");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
      cv::Exception::Exception(__src, 4294967085, v28, v27, __p, 1817);
      cv::error((cv *)__src, v19);
    }
    uint64_t v9 = v18 + *(int *)(a1 + 36) * (uint64_t)(int)a2 + *(int *)(a1 + 44) * (uint64_t)(int)a3;
    if (a4)
    {
      int v20 = *(_DWORD *)a1 & 0xFFF;
LABEL_41:
      *a4 = v20;
    }
  }
  return v9;
}

void sub_225F0DC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t cvGetElemType(int *a1)
{
  if (!a1) {
    goto LABEL_15;
  }
  int v1 = *a1;
  unsigned int v2 = *a1 & 0xFFFF0000;
  if (v2 == 1111752704 || v2 == 1111687168) {
    return v1 & 0xFFF;
  }
  if (v2 == 1111621632)
  {
    if (a1[9] < 1 || a1[8] < 1) {
      goto LABEL_15;
    }
    return v1 & 0xFFF;
  }
  if (v1 != 144 || !*((void *)a1 + 11))
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(v8, "unrecognized or unsupported array type");
    std::string::basic_string[abi:ne180100]<0>(v7, "cvGetElemType");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v9, 4294967291, v8, v7, __p, 1086);
    cv::error((cv *)v9, v5);
  }
  return ((0x43160520u >> (((a1[4] >> 2) & 0x3C) + ((a1[4] >> 31) & 0x14))) & 7 | (8 * a1[2])) - 8;
}

void sub_225F0DE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvGetDims(uint64_t a1, int *__dst)
{
  if (!a1) {
    goto LABEL_20;
  }
  unsigned int v2 = *(_DWORD *)a1 & 0xFFFF0000;
  if (v2 == 1111621632)
  {
    if (*(int *)(a1 + 36) >= 1)
    {
      int v3 = *(_DWORD *)(a1 + 32);
      if (v3 >= 1)
      {
        if (__dst)
        {
          void *__dst = v3;
          int v4 = *(_DWORD *)(a1 + 36);
LABEL_11:
          __dst[1] = v4;
          return 2;
        }
        return 2;
      }
    }
    goto LABEL_20;
  }
  if (*(_DWORD *)a1 == 144)
  {
    if (*(void *)(a1 + 88))
    {
      if (__dst)
      {
        void *__dst = *(_DWORD *)(a1 + 44);
        int v4 = *(_DWORD *)(a1 + 40);
        goto LABEL_11;
      }
      return 2;
    }
LABEL_20:
    std::string::basic_string[abi:ne180100]<0>(v13, "unrecognized or unsupported array type");
    std::string::basic_string[abi:ne180100]<0>(v12, "cvGetDims");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v14, 4294967291, v13, v12, __p, 1140);
    cv::error((cv *)v14, v9);
  }
  if (v2 == 1111752704)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 4);
    if (__dst) {
      memcpy(__dst, (const void *)(a1 + 52), 4 * (int)v5);
    }
  }
  else
  {
    if (v2 != 1111687168) {
      goto LABEL_20;
    }
    uint64_t v5 = *(unsigned int *)(a1 + 4);
    if (__dst && (int)v5 >= 1)
    {
      int v6 = (int *)(a1 + 32);
      uint64_t v7 = *(unsigned int *)(a1 + 4);
      do
      {
        int v8 = *v6;
        v6 += 2;
        *__dst++ = v8;
        --v7;
      }
      while (v7);
    }
  }
  return v5;
}

void sub_225F0E044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

unint64_t cvGetSize(uint64_t a1)
{
  if (!a1)
  {
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(v10, "Array should be CvMat or IplImage");
    std::string::basic_string[abi:ne180100]<0>(v9, "cvGetSize");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v11, 4294967291, v10, v9, __p, 1238);
    cv::error((cv *)v11, v6);
  }
  if (HIWORD(*(_DWORD *)a1) == 16962)
  {
    unsigned int v1 = *(_DWORD *)(a1 + 36);
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_11;
    }
    uint64_t v2 = *(unsigned int *)(a1 + 32);
    if ((v2 & 0x80000000) != 0) {
      goto LABEL_11;
    }
  }
  else
  {
    if (*(_DWORD *)a1 != 144) {
      goto LABEL_11;
    }
    uint64_t v3 = *(void *)(a1 + 48);
    int v4 = (unsigned int *)(v3 + 16);
    if (v3)
    {
      uint64_t v5 = (unsigned int *)(v3 + 12);
    }
    else
    {
      int v4 = (unsigned int *)(a1 + 44);
      uint64_t v5 = (unsigned int *)(a1 + 40);
    }
    unsigned int v1 = *v5;
    uint64_t v2 = *v4;
  }
  return v1 | (unint64_t)(v2 << 32);
}

void sub_225F0E1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvGetMat(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v6 = a1;
  if (!a1 || !a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v39, "NULL array pointer is passed");
    std::string::basic_string[abi:ne180100]<0>(v38, "cvGetMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v40, 4294967269, v39, v38, __p, 2382);
    cv::error((cv *)v40, v7);
  }
  unsigned int v8 = *(_DWORD *)a1;
  unsigned int v9 = *(_DWORD *)a1 & 0xFFFF0000;
  if (v9 != 1111621632)
  {
    if (v8 == 144)
    {
      if (!*(void *)(a1 + 88))
      {
        std::string::basic_string[abi:ne180100]<0>(v39, "The image has NULL data pointer");
        std::string::basic_string[abi:ne180100]<0>(v38, "cvGetMat");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
        cv::Exception::Exception(v40, 4294967269, v39, v38, __p, 2397);
        cv::error((cv *)v40, v11);
      }
      unsigned int v12 = (0x43160520u >> (((*(_DWORD *)(a1 + 16) >> 2) & 0x3C) + ((*(int *)(a1 + 16) >> 31) & 0x14))) & 7;
      int v13 = *(_DWORD *)(a1 + 8);
      if (v13 <= 1) {
        int v14 = 0;
      }
      else {
        int v14 = *(_DWORD *)(a1 + 28);
      }
      unsigned int v15 = *(int **)(a1 + 48);
      if (v15)
      {
        if (v14 != 1)
        {
          int v25 = *v15;
          if (v13 >= 513)
          {
            std::string::basic_string[abi:ne180100]<0>(v39, "The image is interleaved and has over CV_CN_MAX channels");
            std::string::basic_string[abi:ne180100]<0>(v38, "cvGetMat");
            std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
            cv::Exception::Exception(v40, 4294967281, v39, v38, __p, 2429);
            cv::error((cv *)v40, v36);
          }
          cvInitMatHeader(a2, v15[4], v15[3], v12 | (8 * v13 - 8), *(void *)(a1 + 88)+ *(int *)(a1 + 96) * (uint64_t)v15[2]+ v15[1] * (uint64_t)(int)(((((8 * v13 - 8) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * v12)) & 3)), *(_DWORD *)(a1 + 96));
LABEL_49:
          uint64_t v6 = a2;
          if (!a3) {
            return v6;
          }
          goto LABEL_27;
        }
        if (!*v15)
        {
          std::string::basic_string[abi:ne180100]<0>(v39, "Images with planar data layout should be used with COI selected");
          std::string::basic_string[abi:ne180100]<0>(v38, "cvGetMat");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
          cv::Exception::Exception(v40, 4294967090, v39, v38, __p, 2413);
          cv::error((cv *)v40, v16);
        }
        int v18 = v15[3];
        int v17 = v15[4];
        int v19 = *(_DWORD *)(a1 + 96);
        uint64_t v20 = *(void *)(a1 + 88)
            + (*v15 - 1) * *(int *)(a1 + 80)
            + v19 * (uint64_t)v15[2]
            + ((uint64_t)v15[1] << ((0xFA50u >> (2 * v12)) & 3));
        uint64_t v21 = a2;
        unsigned int v22 = v12;
      }
      else
      {
        if (v14)
        {
          std::string::basic_string[abi:ne180100]<0>(v39, "Pixel order should be used with coi == 0");
          std::string::basic_string[abi:ne180100]<0>(v38, "cvGetMat");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
          cv::Exception::Exception(v40, 4294967090, v39, v38, __p, 2443);
          cv::error((cv *)v40, v35);
        }
        unsigned int v22 = (v12 | (8 * v13)) - 8;
        int v18 = *(_DWORD *)(a1 + 40);
        int v17 = *(_DWORD *)(a1 + 44);
        uint64_t v20 = *(void *)(a1 + 88);
        int v19 = *(_DWORD *)(a1 + 96);
        uint64_t v21 = a2;
      }
      cvInitMatHeader(v21, v17, v18, v22, v20, v19);
LABEL_45:
      int v25 = 0;
      goto LABEL_49;
    }
LABEL_20:
    if (!a4 || v9 != 1111687168)
    {
      std::string::basic_string[abi:ne180100]<0>(v39, "Unrecognized or unsupported array type");
      std::string::basic_string[abi:ne180100]<0>(v38, "cvGetMat");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
      cv::Exception::Exception(v40, 4294967090, v39, v38, __p, 2482);
      cv::error((cv *)v40, v24);
    }
    int v23 = *(_DWORD *)(a1 + 32);
    if (!*(void *)(a1 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(v39, "Input array has NULL data pointer");
      std::string::basic_string[abi:ne180100]<0>(v38, "cvGetMat");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
      cv::Exception::Exception(v40, 4294967269, v39, v38, __p, 2458);
      cv::error((cv *)v40, v27);
    }
    if ((v8 & 0x4000) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v39, "Only continuous nD arrays are supported here");
      std::string::basic_string[abi:ne180100]<0>(v38, "cvGetMat");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
      cv::Exception::Exception(v40, 4294967291, v39, v38, __p, 2461);
      cv::error((cv *)v40, v28);
    }
    uint64_t v29 = *(unsigned int *)(a1 + 4);
    if ((int)v29 < 3)
    {
      if (v29 != 1) {
        LODWORD(v29) = *(_DWORD *)(a1 + 40);
      }
    }
    else
    {
      uint64_t v30 = (int *)(a1 + 40);
      uint64_t v31 = v29 - 1;
      LODWORD(v29) = 1;
      do
      {
        int v32 = *v30;
        v30 += 2;
        LODWORD(v29) = v32 * v29;
        --v31;
      }
      while (v31);
    }
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = *(void *)(a1 + 24);
    *(_DWORD *)(a2 + 32) = v23;
    *(_DWORD *)(a2 + 36) = v29;
    unsigned int v33 = *(_DWORD *)a1;
    int v34 = ((((v33 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v33 & 7))) & 3)) * v29;
    if (v23 <= 1) {
      int v34 = 0;
    }
    *(_DWORD *)a2 = *(_DWORD *)a1 & 0xFFF | 0x42424000;
    *(_DWORD *)(a2 + 4) = v34;
    if (v23 * (uint64_t)v34 >= 0x80000000)
    {
      int v25 = 0;
      *(_DWORD *)a2 = v33 & 0xFFF | 0x42420000;
      goto LABEL_49;
    }
    goto LABEL_45;
  }
  if (*(int *)(a1 + 36) < 1 || *(int *)(a1 + 32) < 1) {
    goto LABEL_20;
  }
  if (!*(void *)(a1 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v39, "The matrix has NULL data pointer");
    std::string::basic_string[abi:ne180100]<0>(v38, "cvGetMat");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v40, 4294967269, v39, v38, __p, 2387);
    cv::error((cv *)v40, v10);
  }
  int v25 = 0;
  if (a3) {
LABEL_27:
  }
    *a3 = v25;
  return v6;
}

void sub_225F0E9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t icvGetNodePtr(uint64_t a1, _DWORD *__src, int *a3, int a4, int *a5)
{
  if (*(_WORD *)(a1 + 2) != 16964) {
    icvGetNodePtr();
  }
  if (a5)
  {
    unsigned int v7 = *a5;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 4);
    if (v8 < 1)
    {
      unsigned int v7 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      unsigned int v7 = 0;
      do
      {
        unsigned int v10 = __src[v9];
        if (v10 >= *(_DWORD *)(a1 + 52 + 4 * v9))
        {
          std::string::basic_string[abi:ne180100]<0>(v39, "One of indices is out of range");
          std::string::basic_string[abi:ne180100]<0>(v38, "icvGetNodePtr");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
          cv::Exception::Exception(&v40, 4294967085, v39, v38, __p, 658);
          cv::error((cv *)&v40, v11);
        }
        unsigned int v7 = v10 + 1540483477 * v7;
        ++v9;
      }
      while (v9 < v8);
    }
  }
  int v12 = *(_DWORD *)(a1 + 40);
  int v13 = (v12 - 1) & v7;
  int v14 = v7 & 0x7FFFFFFF;
  if (a4 < -1 || (uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8 * v13)) == 0)
  {
LABEL_22:
    uint64_t v18 = 0;
    if (!a4) {
      goto LABEL_46;
    }
    goto LABEL_25;
  }
  while (1)
  {
    if (*(_DWORD *)v15 == v14)
    {
      uint64_t v16 = *(unsigned int *)(a1 + 4);
      if ((int)v16 < 1)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        uint64_t v17 = 0;
        while (__src[v17] == *(_DWORD *)(v15 + *(int *)(a1 + 48) + 4 * v17))
        {
          if (v16 == ++v17) {
            goto LABEL_24;
          }
        }
      }
      if (v17 == v16) {
        break;
      }
    }
    uint64_t v15 = *(void *)(v15 + 8);
    if (!v15) {
      goto LABEL_22;
    }
  }
LABEL_24:
  uint64_t v18 = v15 + *(int *)(a1 + 44);
  if (a4)
  {
LABEL_25:
    if (!v18)
    {
      uint64_t v19 = *(void *)(a1 + 24);
      if (*(_DWORD *)(v19 + 104) >= 3 * v12)
      {
        if (v12 >= 512) {
          int v20 = 2 * v12;
        }
        else {
          int v20 = 1024;
        }
        int v21 = v20 - 1;
        if ((v20 & (v20 - 1)) != 0) {
          icvGetNodePtr();
        }
        unsigned int v22 = (void *)cvAlloc(8 * v20);
        bzero(v22, 8 * v20);
        uint64_t inited = cvInitSparseMatIterator(a1, (uint64_t)&v40);
        if (inited)
        {
          int v25 = v42;
          for (uint64_t i = v41; ; inited = i)
          {
            uint64_t i = *(void *)(i + 8);
            if (!i)
            {
              int v28 = v25 + 1;
              int v29 = *(_DWORD *)(v40 + 40);
              if (v25 + 1 >= v29)
              {
LABEL_39:
                int v42 = v28;
                unsigned int v31 = *(_DWORD *)inited & v21;
                *(void *)(inited + 8) = *((void *)v22 + v31);
                *((void *)v22 + v31) = inited;
                break;
              }
              uint64_t v30 = (uint64_t *)(*(void *)(v40 + 32) + 8 * v25++ + 8);
              while (1)
              {
                uint64_t i = *v30;
                if (*v30) {
                  break;
                }
                ++v25;
                ++v30;
                if (v29 == v25) {
                  goto LABEL_39;
                }
              }
            }
            uint64_t v41 = i;
            unsigned int v27 = *(_DWORD *)inited & v21;
            *(void *)(inited + 8) = *((void *)v22 + v27);
            *((void *)v22 + v27) = inited;
          }
        }
        cv::fastFree(*(void ***)(a1 + 32), v24);
        *(void *)(a1 + 32) = v22;
        *(_DWORD *)(a1 + 40) = v20;
        int v13 = v21 & v14;
        uint64_t v19 = *(void *)(a1 + 24);
      }
      uint64_t v32 = *(void *)(v19 + 96);
      uint64_t v40 = v32;
      if (v32)
      {
        *(void *)(v19 + 96) = *(void *)(v32 + 8);
        *(_DWORD *)v32 &= 0x3FFFFFFu;
        ++*(_DWORD *)(v19 + 104);
      }
      else
      {
        cvSetAdd(v19, 0, &v40);
        uint64_t v32 = v40;
      }
      *(_DWORD *)uint64_t v32 = v14;
      uint64_t v33 = *(void *)(a1 + 32);
      *(void *)(v32 + 8) = *(void *)(v33 + 8 * v13);
      *(void *)(v33 + 8 * v13) = v32;
      memcpy((void *)(v32 + *(int *)(a1 + 48)), __src, 4 * *(int *)(a1 + 4));
      uint64_t v18 = v32 + *(int *)(a1 + 44);
      if (a4 >= 1) {
        bzero((void *)(v32 + *(int *)(a1 + 44)), (((*(_DWORD *)a1 >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * (*(unsigned char *)a1 & 7))) & 3));
      }
    }
  }
LABEL_46:
  if (a3) {
    *a3 = *(_DWORD *)a1 & 0xFFF;
  }
  return v18;
}

void sub_225F0EE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t cvPtrND(uint64_t a1, unsigned int *__src, int *a3, int a4, int *a5)
{
  if (!__src)
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "NULL pointer to indices");
    std::string::basic_string[abi:ne180100]<0>(v18, "cvPtrND");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v20, 4294967269, v19, v18, __p, 1879);
    cv::error((cv *)v20, v5);
  }
  if (!a1) {
    goto LABEL_22;
  }
  unsigned int v6 = *(_DWORD *)a1 & 0xFFFF0000;
  if (v6 == 1111621632)
  {
    if (*(int *)(a1 + 36) >= 1 && *(int *)(a1 + 32) > 0) {
      return cvPtr2D(a1, *__src, __src[1], a3);
    }
    goto LABEL_22;
  }
  if (v6 != 1111687168)
  {
    if (v6 == 1111752704) {
      return icvGetNodePtr(a1, __src, a3, a4, a5);
    }
    if (*(_DWORD *)a1 == 144) {
      return cvPtr2D(a1, *__src, __src[1], a3);
    }
LABEL_22:
    std::string::basic_string[abi:ne180100]<0>(v19, "unrecognized or unsupported array type");
    std::string::basic_string[abi:ne180100]<0>(v18, "cvPtrND");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v20, 4294967291, v19, v18, __p, 1903);
    cv::error((cv *)v20, v15);
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    goto LABEL_22;
  }
  int v9 = *(_DWORD *)(a1 + 4);
  if (v9 >= 1)
  {
    uint64_t v10 = 0;
    int v11 = (int *)(a1 + 36);
    do
    {
      unsigned int v12 = __src[v10];
      if (v12 >= *(v11 - 1))
      {
        std::string::basic_string[abi:ne180100]<0>(v19, "index is out of range");
        std::string::basic_string[abi:ne180100]<0>(v18, "cvPtrND");
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
        cv::Exception::Exception(v20, 4294967085, v19, v18, __p, 1893);
        cv::error((cv *)v20, v13);
      }
      int v14 = *v11;
      v11 += 2;
      v8 += v14 * (uint64_t)(int)v12;
      ++v10;
    }
    while (v10 < v9);
  }
  if (a3) {
    *a3 = *(_DWORD *)a1 & 0xFFF;
  }
  return v8;
}

void sub_225F0F1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvInitImageHeader(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, int a6)
{
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "null pointer to header");
    std::string::basic_string[abi:ne180100]<0>(v31, "cvInitImageHeader");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v33, 4294967287, v32, v31, __p, 2908);
    cv::error((cv *)v33, v12);
  }
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)a1 = 144;
  if ((a4 - 1) > 3)
  {
    int v14 = "";
    uint64_t v15 = "";
  }
  else
  {
    int v13 = &icvGetColorModel(int,char const**,char const**)::tab[2 * (a4 - 1)];
    int v14 = *v13;
    uint64_t v15 = v13[1];
  }
  strncpy((char *)(a1 + 20), v14, 4uLL);
  strncpy((char *)(a1 + 24), v15, 4uLL);
  if ((a2 & 0x8000000080000000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "Bad input roi");
    std::string::basic_string[abi:ne180100]<0>(v31, "cvInitImageHeader");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v33, 4294967271, v32, v31, __p, 2918);
    cv::error((cv *)v33, v16);
  }
  int v17 = a3 & 0x7FFFFFFF;
  BOOL v22 = a3 != 1 && v17 != 8 && v17 != 16 && v17 != 32 && a3 != 64;
  if (a4 < 0 || v22)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "Unsupported format");
    std::string::basic_string[abi:ne180100]<0>(v31, "cvInitImageHeader");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v33, 4294967279, v32, v31, __p, 2925);
    cv::error((cv *)v33, v23);
  }
  if (a5 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "Bad input origin");
    std::string::basic_string[abi:ne180100]<0>(v31, "cvInitImageHeader");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v33, 4294967276, v32, v31, __p, 2927);
    cv::error((cv *)v33, v24);
  }
  if (a6 != 4 && a6 != 8)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "Bad input align");
    std::string::basic_string[abi:ne180100]<0>(v31, "cvInitImageHeader");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v33, 4294967275, v32, v31, __p, 2930);
    cv::error((cv *)v33, v25);
  }
  *(void *)(a1 + 40) = a2;
  uint64_t v26 = *(void *)(a1 + 48);
  if (v26)
  {
    *(void *)uint64_t v26 = 0;
    *(_DWORD *)(v26 + 8) = 0;
    *(void *)(v26 + 12) = a2;
  }
  if (a4 <= 1) {
    int v27 = 1;
  }
  else {
    int v27 = a4;
  }
  *(_DWORD *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 16) = a3;
  unsigned int v28 = (a6 + ((v17 * a2 * v27 + 7) >> 3) - 1) & -a6;
  *(_DWORD *)(a1 + 96) = v28;
  *(_DWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 36) = a6;
  *(_DWORD *)(a1 + 80) = v28 * HIDWORD(a2);
  return a1;
}

void sub_225F0F654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvCreateImageHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  int v4 = a2;
  if (CvIPL)
  {
    if ((a3 - 1) > 3)
    {
      unsigned int v7 = "";
      uint64_t v8 = "";
    }
    else
    {
      unsigned int v6 = &icvGetColorModel(int,char const**,char const**)::tab[2 * (a3 - 1)];
      unsigned int v7 = *v6;
      uint64_t v8 = v6[1];
    }
    return CvIPL(a3, 0, a2, v7, v8, 0, 0, 4, a1, 0, 0, 0, 0);
  }
  else
  {
    uint64_t v9 = cvAlloc(144);
    return cvInitImageHeader(v9, a1, v4, v3, 0, 4);
  }
}

uint64_t cvCreateImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ImageHeader = cvCreateImageHeader(a1, a2, a3);
  if (!ImageHeader) {
    cvCreateImage_cold_1();
  }
  uint64_t v4 = ImageHeader;
  cvCreateData(ImageHeader);
  return v4;
}

void cvReleaseImageHeader(uint64_t *a1, void *a2)
{
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    std::string::basic_string[abi:ne180100]<0>(v6, "cvReleaseImageHeader");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v8, 4294967269, v7, v6, __p, 2959);
    cv::error((cv *)v8, v2);
  }
  uint64_t v3 = *a1;
  if (*a1)
  {
    *a1 = 0;
    if (CvIPL)
    {
      CvIPL(v3, 5);
    }
    else
    {
      cv::fastFree(*(void ***)(v3 + 48), a2);
      *(void *)(v3 + 48) = 0;
      cv::fastFree((void **)v3, v4);
    }
  }
}

void sub_225F0F8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void cvReleaseImage(uint64_t *a1, void *a2)
{
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "");
    std::string::basic_string[abi:ne180100]<0>(v7, "cvReleaseImage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v9, 4294967269, v8, v7, __p, 2983);
    cv::error((cv *)v9, v3);
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    v9[0] = *a1;
    *a1 = 0;
    cvReleaseData(v4, a2);
    cvReleaseImageHeader(v9, v5);
  }
}

void sub_225F0FA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

_DWORD *cvSetImageROI(_DWORD *result, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = result;
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "");
    std::string::basic_string[abi:ne180100]<0>(v17, "cvSetImageROI");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v19, 4294967287, v18, v17, __p, 3000);
    cv::error((cv *)v19, v4);
  }
  unint64_t v5 = HIDWORD(a2);
  unint64_t v6 = HIDWORD(a3);
  if ((a3 & 0x8000000080000000) != 0
    || (int v7 = result[10], v7 <= (int)a2)
    || (int v8 = result[11], v8 <= SHIDWORD(a2))
    || (int v9 = a2 + a3, (int)a2 + (int)a3 < (a3 != 0))
    || HIDWORD(a2) + HIDWORD(a3) < (HIDWORD(a3) != 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "rect.width >= 0 && rect.height >= 0 && rect.x < image->width && rect.y < image->height && rect.x + rect.width >= (int)(rect.width > 0) && rect.y + rect.height >= (int)(rect.height > 0)");
    std::string::basic_string[abi:ne180100]<0>(v17, "cvSetImageROI");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v19, 4294967081, v18, v17, __p, 3006);
    cv::error((cv *)v19, v10);
  }
  int v11 = a2 & ~((int)a2 >> 31);
  int v12 = v5 & ~((int)v5 >> 31);
  if (v7 >= v9) {
    int v7 = v9;
  }
  if (v8 >= (int)v5 + (int)v6) {
    int v8 = v5 + v6;
  }
  int v13 = v7 - v11;
  int v14 = v8 - v12;
  uint64_t v15 = (_DWORD *)*((void *)result + 6);
  if (v15)
  {
    v15[1] = v11;
    v15[2] = v12;
    v15[3] = v13;
    v15[4] = v14;
  }
  else
  {
    uint64_t result = icvCreateROI(0, v11, v12, v13, v14);
    *((void *)v3 + 6) = result;
  }
  return result;
}

void sub_225F0FC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

_DWORD *icvCreateROI(int a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = (uint64_t (*)(void))CvIPL;
  if (CvIPL)
  {
    return (_DWORD *)v10();
  }
  else
  {
    uint64_t result = (_DWORD *)cvAlloc(20);
    *uint64_t result = a1;
    result[1] = a2;
    result[2] = a3;
    result[3] = a4;
    result[4] = a5;
  }
  return result;
}

_DWORD *cvSetImageCOI(_DWORD *result, unsigned int a2)
{
  uint64_t v2 = result;
  if (!result)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "");
    std::string::basic_string[abi:ne180100]<0>(v7, "cvSetImageCOI");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v9, 4294967287, v8, v7, __p, 3073);
    cv::error((cv *)v9, v3);
  }
  if (result[2] < a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "");
    std::string::basic_string[abi:ne180100]<0>(v7, "cvSetImageCOI");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v9, 4294967272, v8, v7, __p, 3076);
    cv::error((cv *)v9, v4);
  }
  unint64_t v5 = (unsigned int *)*((void *)result + 6);
  if (a2 || v5)
  {
    if (v5)
    {
      *unint64_t v5 = a2;
    }
    else
    {
      uint64_t result = icvCreateROI(a2, 0, 0, result[10], result[11]);
      *((void *)v2 + 6) = result;
    }
  }
  return result;
}

void sub_225F0FF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvGetImageCOI(uint64_t a1)
{
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "");
    std::string::basic_string[abi:ne180100]<0>(v5, "cvGetImageCOI");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v7, 4294967287, v6, v5, __p, 3096);
    cv::error((cv *)v7, v1);
  }
  uint64_t v2 = *(unsigned int **)(a1 + 48);
  if (v2) {
    return *v2;
  }
  else {
    return 0;
  }
}

void sub_225F10044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t cvCloneImage(long long *a1)
{
  if (!a1 || *(_DWORD *)a1 != 144)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "Bad image header");
    std::string::basic_string[abi:ne180100]<0>(v15, "cvCloneImage");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/array.cpp");
    cv::Exception::Exception(v17, 4294967291, v16, v15, __p, 3108);
    cv::error((cv *)v17, v2);
  }
  if (CvIPL) {
    return CvIPL(a1);
  }
  uint64_t v3 = cvAlloc(144);
  uint64_t v4 = *((void *)a1 + 16);
  long long v6 = a1[6];
  long long v5 = a1[7];
  *(_OWORD *)(v3 + 80) = a1[5];
  long long v7 = a1[1];
  long long v8 = a1[2];
  long long v9 = a1[4];
  *(_OWORD *)(v3 + 48) = a1[3];
  *(_OWORD *)(v3 + 96) = v6;
  *(_OWORD *)(v3 + 112) = v5;
  *(void *)(v3 + 128) = v4;
  long long v10 = *a1;
  *(_OWORD *)(v3 + 64) = v9;
  *(_OWORD *)(v3 + 16) = v7;
  *(_OWORD *)(v3 + 32) = v8;
  *(_OWORD *)uint64_t v3 = v10;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 48) = 0;
  int v11 = (int *)*((void *)a1 + 6);
  if (v11) {
    *(void *)(v3 + 48) = icvCreateROI(*v11, v11[1], v11[2], v11[3], v11[4]);
  }
  if (*((void *)a1 + 11))
  {
    size_t v12 = *((int *)a1 + 20);
    cvCreateData(v3);
    memcpy(*(void **)(v3 + 88), *((const void **)a1 + 11), v12);
  }
  return v3;
}

void sub_225F10218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void cvNextNArraySlice_cold_1()
{
  __assert_rtn("cvNextNArraySlice", "array.cpp", 499, "iterator != 0");
}

void icvGetNodePtr()
{
  __assert_rtn("icvGetNodePtr", "array.cpp", 699, "(newsize & (newsize - 1)) == 0");
}

{
  __assert_rtn("icvGetNodePtr", "array.cpp", 650, "CV_IS_SPARSE_MAT( mat)");
}

void cvCreateImage_cold_1()
{
}

void cv::getMorphologyRowFilter(cv *this, uint64_t a2)
{
  if (this < 2)
  {
    if (this)
    {
      switch(a2 & 7)
      {
        case 0:
          operator new();
        case 2:
          operator new();
        case 3:
          operator new();
        case 5:
          operator new();
        case 6:
          operator new();
        default:
          break;
      }
    }
    else
    {
      switch(a2 & 7)
      {
        case 0:
          operator new();
        case 2:
          operator new();
        case 3:
          operator new();
        case 5:
          operator new();
        case 6:
          operator new();
        default:
          break;
      }
    }
    cv::format(v6, a2);
    std::string::basic_string[abi:ne180100]<0>(v5, "getMorphologyRowFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(v7, 4294967083, v6, v5, __p, 886);
    cv::error((cv *)v7, v3);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "op == MORPH_ERODE || op == MORPH_DILATE");
  std::string::basic_string[abi:ne180100]<0>(v5, "getMorphologyRowFilter");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
  cv::Exception::Exception(v7, 4294967081, v6, v5, __p, 848);
  cv::error((cv *)v7, v2);
}

void sub_225F10778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  MEMORY[0x22A641780](v29, 0x1081C408CA3AA07);
  _Unwind_Resume(a1);
}

void cv::getMorphologyColumnFilter(cv *this, uint64_t a2)
{
  if (this < 2)
  {
    if (this)
    {
      switch(a2 & 7)
      {
        case 0:
          operator new();
        case 2:
          operator new();
        case 3:
          operator new();
        case 5:
          operator new();
        case 6:
          operator new();
        default:
          break;
      }
    }
    else
    {
      switch(a2 & 7)
      {
        case 0:
          operator new();
        case 2:
          operator new();
        case 3:
          operator new();
        case 5:
          operator new();
        case 6:
          operator new();
        default:
          break;
      }
    }
    cv::format(v6, a2);
    std::string::basic_string[abi:ne180100]<0>(v5, "getMorphologyColumnFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(v7, 4294967083, v6, v5, __p, 933);
    cv::error((cv *)v7, v3);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "op == MORPH_ERODE || op == MORPH_DILATE");
  std::string::basic_string[abi:ne180100]<0>(v5, "getMorphologyColumnFilter");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
  cv::Exception::Exception(v7, 4294967081, v6, v5, __p, 895);
  cv::error((cv *)v7, v2);
}

void sub_225F10CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  MEMORY[0x22A641780](v29, 0x1081C408CA3AA07);
  _Unwind_Resume(a1);
}

void cv::getMorphologyFilter(unsigned int a1, uint64_t a2, void (***a3)(void *__return_ptr, void, uint64_t), uint64_t *a4)
{
  (**a3)(v16, a3, 0xFFFFFFFFLL);
  uint64_t v7 = *a4;
  int32x2_t v14 = vrev64_s32(*(int32x2_t *)v16[8]);
  uint64_t v15 = v7;
  cv::normalizeAnchor((int *)&v15, (int *)&v14, v13);
  *a4 = *(void *)v13;
  if (a1 < 2)
  {
    if (a1)
    {
      switch(a2 & 7)
      {
        case 0:
          operator new();
        case 2:
          operator new();
        case 3:
          operator new();
        case 5:
          operator new();
        case 6:
          operator new();
        default:
          break;
      }
    }
    else
    {
      switch(a2 & 7)
      {
        case 0:
          operator new();
        case 2:
          operator new();
        case 3:
          operator new();
        case 5:
          operator new();
        case 6:
          operator new();
        default:
          break;
      }
    }
    cv::format(v12, a2);
    std::string::basic_string[abi:ne180100]<0>(v11, "getMorphologyFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(v13, 4294967083, v12, v11, __p, 971);
    cv::error((cv *)v13, v9);
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "op == MORPH_ERODE || op == MORPH_DILATE");
  std::string::basic_string[abi:ne180100]<0>(v11, "getMorphologyFilter");
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
  cv::Exception::Exception(v13, 4294967081, v12, v11, __p, 943);
  cv::error((cv *)v13, v8);
}

void sub_225F112C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  MEMORY[0x22A641780](v39, 0x10A1C407469E563);
  cv::Mat::~Mat((cv::Mat *)(v40 - 144), v42);
  _Unwind_Resume(a1);
}

void sub_225F114F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void cv::createMorphologyFilter(cv *a1, uint64_t a2, void (***a3)(uint64_t *__return_ptr, void, uint64_t), uint64_t *a4)
{
  void (**v10)(void *__return_ptr, void, uint64_t);
  uint64_t v11[7];
  int32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int32x2_t *v17;

  (**a3)(&v14, a3, 0xFFFFFFFFLL);
  uint64_t v7 = *a4;
  size_t v12 = vrev64_s32(*v17);
  int v13 = v7;
  cv::normalizeAnchor((int *)&v13, (int *)&v12, (int *)&v10);
  *a4 = (uint64_t)v10;
  memset(&v11[1], 0, 48);
  cv::_InputArray::_InputArray((uint64_t)&v10, (const cv::Mat *)&v14);
  int v9 = cv::countNonZero((cv *)&v10, v8);
  if (v9 == v16 * v15) {
    cv::getMorphologyRowFilter(a1, a2);
  }
  cv::_InputArray::_InputArray((uint64_t)&v10, (const cv::Mat *)&v14);
  v11[0] = *a4;
  cv::getMorphologyFilter(a1, a2, &v10, v11);
}

void sub_225F11BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  cv::Exception::~Exception((cv::Exception *)&a29);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  cv::Ptr<cv::BaseFilter>::~Ptr((uint64_t *)(v44 - 240), v46);
  cv::Ptr<cv::BaseColumnFilter>::~Ptr((uint64_t *)(v44 - 224), v47);
  cv::Ptr<cv::BaseRowFilter>::~Ptr((uint64_t *)(v44 - 208), v48);
  cv::Mat::~Mat((cv::Mat *)(v44 - 176), v49);
  _Unwind_Resume(a1);
}

void cv::getStructuringElement(unsigned int a1@<W0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v6 = a1;
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (a1 >= 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "shape == MORPH_RECT || shape == MORPH_CROSS || shape == MORPH_ELLIPSE");
    std::string::basic_string[abi:ne180100]<0>(v30, "getStructuringElement");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(v32, 4294967081, v31, v30, __p, 1026);
    cv::error((cv *)v32, v8);
  }
  uint64_t v9 = *(void *)a3;
  uint64_t v27 = *(void *)a2;
  uint64_t v28 = v9;
  cv::normalizeAnchor((int *)&v28, (int *)&v27, v32);
  *(void *)a3 = *(void *)v32;
  int v10 = *a2;
  int v11 = a2[1];
  if (v11 == 1 && v10 == 1) {
    unsigned int v6 = 0;
  }
  double v13 = 0.0;
  if (v6 == 2)
  {
    if (v11 >= 0) {
      int v14 = a2[1];
    }
    else {
      int v14 = v11 + 1;
    }
    int v15 = v14 >> 1;
    if (v10 >= 0) {
      int v16 = *a2;
    }
    else {
      int v16 = v10 + 1;
    }
    int v26 = v16 >> 1;
    if ((v11 + 1) >= 3) {
      double v13 = 1.0 / ((double)v15 * (double)v15);
    }
  }
  else
  {
    int v15 = 0;
    int v26 = 0;
  }
  *(void *)(a4 + 80) = 0;
  *(void *)(a4 + 64) = a4 + 8;
  *(void *)(a4 + 72) = a4 + 80;
  *(void *)(a4 + 88) = 0;
  *(_DWORD *)a4 = 1124007936;
  *(_OWORD *)(a4 + 4) = 0u;
  *(_OWORD *)(a4 + 20) = 0u;
  *(_OWORD *)(a4 + 36) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  v32[0] = v11;
  v32[1] = v10;
  cv::Mat::create((cv::Mat *)a4, (cv::Mat *)2, v32, 0);
  if (a2[1] >= 1)
  {
    uint64_t v17 = 0;
    int v25 = v26 + 1;
    while (1)
    {
      uint64_t v18 = *(void *)(a4 + 16);
      uint64_t v19 = *(void *)(a4 + 80) * v17;
      if (!v6) {
        goto LABEL_23;
      }
      if (v6 == 1) {
        break;
      }
      if ((int)v17 - v15 >= 0) {
        int v22 = v17 - v15;
      }
      else {
        int v22 = v15 - v17;
      }
      if (v22 <= v15)
      {
        double v23 = rint(sqrt(v13 * (double)((v15 - ((int)v17 - v15)) * (int)v17)) * (double)v26);
        int v20 = (v26 - (uint64_t)v23) & ~((int)(v26 - (uint64_t)v23) >> 31);
        if (*a2 >= (int)(v25 + (uint64_t)v23)) {
          int v21 = v25 + (uint64_t)v23;
        }
        else {
          int v21 = *a2;
        }
LABEL_33:
        if (v20 < 1) {
          int v20 = 0;
        }
        else {
          bzero((void *)(v18 + v19), v20);
        }
        goto LABEL_36;
      }
      int v21 = 0;
LABEL_39:
      if (v21 < *a2)
      {
        int v24 = (unsigned char *)(v18 + v19 + v21);
        do
        {
          *v24++ = 0;
          ++v21;
        }
        while (*a2 > v21);
      }
      if (++v17 >= a2[1]) {
        return;
      }
    }
    if (v17 != a3[1])
    {
      int v20 = *a3;
      int v21 = *a3 + 1;
      goto LABEL_33;
    }
LABEL_23:
    int v20 = 0;
    int v21 = *a2;
LABEL_36:
    if (v20 >= v21) {
      int v21 = v20;
    }
    else {
      memset((void *)(v18 + v19 + v20), 1, (v21 + ~v20) + 1);
    }
    goto LABEL_39;
  }
}

void sub_225F11FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void cv::morphOp(int a1, void (***a2)(long long *__return_ptr, void, uint64_t), uint64_t a3, void (***a4)(long long *__return_ptr, void, uint64_t), uint64_t *a5, int a6, int a7, uint64_t a8)
{
  (**a4)(&v117, a4, 0xFFFFFFFFLL);
  if (v118)
  {
    int v16 = *v122;
    int v15 = v122[1];
  }
  else
  {
    int v15 = 3;
    int v16 = 3;
  }
  uint64_t v116 = *a5;
  v115[0] = v15;
  v115[1] = v16;
  cv::normalizeAnchor((int *)&v116, v115, &v83);
  int v17 = v83;
  int v18 = v84;
  *(_DWORD *)a5 = v83;
  *((_DWORD *)a5 + 1) = v18;
  if (v17 < 0 || v17 >= v15 || v18 < 0 || v18 >= v16)
  {
    std::string::basic_string[abi:ne180100]<0>(&v106, "anchor.inside(Rect(0, 0, ksize.width, ksize.height))");
    std::string::basic_string[abi:ne180100]<0>(&__p, "morphOp");
    std::string::basic_string[abi:ne180100]<0>(v114, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(&v83, 4294967081, &v106, &__p, v114, 1298);
    cv::error((cv *)&v83, v19);
  }
  (**a2)(&v106, a2, 0xFFFFFFFFLL);
  int32x2_t v105 = vrev64_s32(*v111);
  (*(void (**)(uint64_t, int32x2_t *, void, uint64_t, void, void))(*(void *)a3 + 128))(a3, &v105, v106 & 0xFFF, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(long long *__return_ptr, uint64_t, uint64_t))a3)(&__p, a3, 0xFFFFFFFFLL);
  if (!a6 || HIDWORD(v117) * DWORD2(v117) == 1)
  {
    cv::_OutputArray::_OutputArray((uint64_t)&v83, (cv::Mat *)&__p);
    cv::Mat::copyTo((cv::Mat *)&v106, (const cv::_OutputArray *)&v83);
    goto LABEL_100;
  }
  if (!v118)
  {
    v96[0] = (2 * a6) | 1;
    v96[1] = v96[0];
    uint64_t v95 = -1;
    cv::getStructuringElement(0, v96, (int *)&v95, (uint64_t)&v83);
    if ((void)v87) {
      atomic_fetch_add((atomic_uint *volatile)v87, 1u);
    }
    if ((void)v119 && atomic_fetch_add((atomic_uint *volatile)v119, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v117, v28);
    }
    uint64_t v118 = 0;
    *((void *)&v119 + 1) = 0;
    long long v120 = 0uLL;
    if ((uint64_t)v117 <= 0)
    {
      *(void *)&long long v119 = 0;
      LODWORD(v117) = v83;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = v122;
      do
        v30[v29++] = 0;
      while (v29 < SDWORD1(v117));
      *(void *)&long long v119 = 0;
      LODWORD(v117) = v83;
      if (SDWORD1(v117) > 2) {
        goto LABEL_38;
      }
    }
    if (v84 <= 2)
    {
      DWORD1(v117) = v84;
      *((void *)&v117 + 1) = v85;
      unsigned int v31 = v91;
      uint64_t v32 = v123;
      *uint64_t v123 = *(void **)v91;
      v32[1] = (void *)*((void *)v31 + 1);
      goto LABEL_39;
    }
LABEL_38:
    cv::Mat::copySize((cv::Mat *)&v117, (const cv::Mat *)&v83);
LABEL_39:
    long long v120 = v88;
    long long v119 = v87;
    uint64_t v118 = v86;
    uint64_t v121 = v89;
    if ((void)v87 && atomic_fetch_add((atomic_uint *volatile)v87, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v83, v28);
    }
    uint64_t v86 = 0;
    long long v88 = 0uLL;
    *((void *)&v87 + 1) = 0;
    if (v84 >= 1)
    {
      uint64_t v33 = 0;
      uint64_t v34 = v90;
      do
        *(_DWORD *)(v34 + 4 * v33++) = 0;
      while (v33 < v84);
    }
    *(void *)&long long v87 = 0;
    if (v91 != (cv *)v92) {
      cv::fastFree((void **)v91, v28);
    }
    *(_DWORD *)a5 = a6;
    *((_DWORD *)a5 + 1) = a6;
    goto LABEL_60;
  }
  if (a6 < 2) {
    goto LABEL_61;
  }
  cv::_InputArray::_InputArray((uint64_t)&v83, (const cv::Mat *)&v117);
  int v22 = cv::countNonZero((cv *)&v83, v21);
  if (v22 != HIDWORD(v117) * DWORD2(v117)) {
    goto LABEL_61;
  }
  int v23 = *(_DWORD *)a5 * a6;
  int v24 = *((_DWORD *)a5 + 1) * a6;
  *(_DWORD *)a5 = v23;
  *((_DWORD *)a5 + 1) = v24;
  v94[0] = v15 + (v15 - 1) * (a6 - 1);
  v94[1] = v16 + (v16 - 1) * (a6 - 1);
  v93[0] = v23;
  v93[1] = v24;
  cv::getStructuringElement(0, v94, v93, (uint64_t)&v83);
  if ((void)v87) {
    atomic_fetch_add((atomic_uint *volatile)v87, 1u);
  }
  if ((void)v119 && atomic_fetch_add((atomic_uint *volatile)v119, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v117, v25);
  }
  uint64_t v118 = 0;
  *((void *)&v119 + 1) = 0;
  long long v120 = 0uLL;
  if ((uint64_t)v117 <= 0)
  {
    *(void *)&long long v119 = 0;
    LODWORD(v117) = v83;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v27 = v122;
    do
      v27[v26++] = 0;
    while (v26 < SDWORD1(v117));
    *(void *)&long long v119 = 0;
    LODWORD(v117) = v83;
    if (SDWORD1(v117) > 2) {
      goto LABEL_51;
    }
  }
  if (v84 <= 2)
  {
    DWORD1(v117) = v84;
    *((void *)&v117 + 1) = v85;
    BOOL v35 = v91;
    uint64_t v36 = v123;
    *uint64_t v123 = *(void **)v91;
    v36[1] = (void *)*((void *)v35 + 1);
    goto LABEL_52;
  }
LABEL_51:
  cv::Mat::copySize((cv::Mat *)&v117, (const cv::Mat *)&v83);
LABEL_52:
  long long v120 = v88;
  long long v119 = v87;
  uint64_t v118 = v86;
  uint64_t v121 = v89;
  if ((void)v87 && atomic_fetch_add((atomic_uint *volatile)v87, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v83, v25);
  }
  uint64_t v86 = 0;
  long long v88 = 0uLL;
  *((void *)&v87 + 1) = 0;
  if (v84 >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = v90;
    do
      *(_DWORD *)(v38 + 4 * v37++) = 0;
    while (v37 < v84);
  }
  *(void *)&long long v87 = 0;
  if (v91 != (cv *)v92) {
    cv::fastFree((void **)v91, v25);
  }
LABEL_60:
  a6 = 1;
LABEL_61:
  v114[0] = 0x100000000;
  long long v75 = v106;
  long long v77 = v108;
  long long v78 = v109;
  uint64_t v76 = v107;
  uint64_t v79 = v110;
  int v80 = (char *)&v75 + 8;
  int v81 = (cv *)v82;
  v82[0] = 0;
  v82[1] = 0;
  if ((void)v108) {
    atomic_fetch_add((atomic_uint *volatile)v108, 1u);
  }
  if (SDWORD1(v106) > 2)
  {
    DWORD1(v75) = 0;
    cv::Mat::copySize((cv::Mat *)&v75, (const cv::Mat *)&v106);
  }
  else
  {
    uint64_t v39 = v112;
    uint64_t v40 = v81;
    *(void *)int v81 = *(void *)v112;
    *((void *)v40 + 1) = *((void *)v39 + 1);
  }
  long long v67 = __p;
  long long v69 = v99;
  long long v70 = v100;
  uint64_t v68 = v98;
  uint64_t v71 = v101;
  long long v72 = (char *)&v67 + 8;
  float v73 = (cv *)v74;
  v74[0] = 0;
  v74[1] = 0;
  if ((void)v99) {
    atomic_fetch_add((atomic_uint *volatile)v99, 1u);
  }
  if (SDWORD1(__p) > 2)
  {
    DWORD1(v67) = 0;
    cv::Mat::copySize((cv::Mat *)&v67, (const cv::Mat *)&__p);
  }
  else
  {
    uint64_t v41 = v103;
    int v42 = v73;
    *(void *)float v73 = *(void *)v103;
    *((void *)v42 + 1) = *((void *)v41 + 1);
  }
  uint64_t v60 = v118;
  long long v59 = v117;
  long long v61 = v119;
  long long v62 = v120;
  uint64_t v63 = v121;
  unint64_t v64 = (char *)&v59 + 8;
  v66[0] = 0;
  v66[1] = 0;
  int v65 = (cv *)v66;
  if ((void)v119) {
    atomic_fetch_add((atomic_uint *volatile)v119, 1u);
  }
  if (SDWORD1(v117) > 2)
  {
    DWORD1(v59) = 0;
    cv::Mat::copySize((cv::Mat *)&v59, (const cv::Mat *)&v117);
  }
  else
  {
    uint64_t v43 = v123;
    uint64_t v44 = v65;
    *(void *)int v65 = *v123;
    *((void *)v44 + 1) = v43[1];
  }
  uint64_t v58 = *a5;
  cv::MorphologyRunner::MorphologyRunner((uint64_t)&v83, (cv::Mat *)&v75, (cv::Mat *)&v67, 1, a6, a1, (cv::Mat *)&v59, &v58, a7, a7, a8);
  cv::parallel_for_(v114, (uint64_t)&v83, -1.0);
  cv::MorphologyRunner::~MorphologyRunner((cv::MorphologyRunner *)&v83, v45);
  if ((void)v61 && atomic_fetch_add((atomic_uint *volatile)v61, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v59, v20);
  }
  uint64_t v60 = 0;
  long long v62 = 0uLL;
  *((void *)&v61 + 1) = 0;
  if (SDWORD1(v59) >= 1)
  {
    uint64_t v46 = 0;
    uint64_t v47 = v64;
    do
      *(_DWORD *)&v47[4 * v46++] = 0;
    while (v46 < SDWORD1(v59));
  }
  *(void *)&long long v61 = 0;
  if (v65 != (cv *)v66) {
    cv::fastFree((void **)v65, v20);
  }
  if ((void)v69 && atomic_fetch_add((atomic_uint *volatile)v69, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v67, v20);
  }
  uint64_t v68 = 0;
  long long v70 = 0uLL;
  *((void *)&v69 + 1) = 0;
  if (SDWORD1(v67) >= 1)
  {
    uint64_t v48 = 0;
    float v49 = v72;
    do
      *(_DWORD *)&v49[4 * v48++] = 0;
    while (v48 < SDWORD1(v67));
  }
  *(void *)&long long v69 = 0;
  if (v73 != (cv *)v74) {
    cv::fastFree((void **)v73, v20);
  }
  if ((void)v77 && atomic_fetch_add((atomic_uint *volatile)v77, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v75, v20);
  }
  uint64_t v76 = 0;
  long long v78 = 0uLL;
  *((void *)&v77 + 1) = 0;
  if (SDWORD1(v75) >= 1)
  {
    uint64_t v50 = 0;
    uint64_t v51 = v80;
    do
      *(_DWORD *)&v51[4 * v50++] = 0;
    while (v50 < SDWORD1(v75));
  }
  *(void *)&long long v77 = 0;
  if (v81 != (cv *)v82) {
    cv::fastFree((void **)v81, v20);
  }
LABEL_100:
  if ((void)v99 && atomic_fetch_add((atomic_uint *volatile)v99, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&__p, v20);
  }
  uint64_t v98 = 0;
  *((void *)&v99 + 1) = 0;
  long long v100 = 0uLL;
  if (SDWORD1(__p) >= 1)
  {
    uint64_t v52 = 0;
    uint64_t v53 = v102;
    do
      *(_DWORD *)(v53 + 4 * v52++) = 0;
    while (v52 < SDWORD1(__p));
  }
  *(void *)&long long v99 = 0;
  if (v103 != (cv *)&v104) {
    cv::fastFree((void **)v103, v20);
  }
  if ((void)v108 && atomic_fetch_add((atomic_uint *volatile)v108, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v106, v20);
  }
  uint64_t v107 = 0;
  *((void *)&v108 + 1) = 0;
  long long v109 = 0uLL;
  if (SDWORD1(v106) >= 1)
  {
    uint64_t v54 = 0;
    long long v55 = v111;
    do
      v55->i32[v54++] = 0;
    while (v54 < SDWORD1(v106));
  }
  *(void *)&long long v108 = 0;
  if (v112 != (cv *)&v113) {
    cv::fastFree((void **)v112, v20);
  }
  if ((void)v119 && atomic_fetch_add((atomic_uint *volatile)v119, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v117, v20);
  }
  uint64_t v118 = 0;
  *((void *)&v119 + 1) = 0;
  long long v120 = 0uLL;
  if (SDWORD1(v117) >= 1)
  {
    uint64_t v56 = 0;
    unint64_t v57 = v122;
    do
      v57[v56++] = 0;
    while (v56 < SDWORD1(v117));
  }
  *(void *)&long long v119 = 0;
  if (v123 != (void **)&v124) {
    cv::fastFree(v123, v20);
  }
}

void sub_225F12ACC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  cv::Mat::~Mat((cv::Mat *)&a50, a2);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x2D0], v52);
  cv::Mat::~Mat((cv::Mat *)&STACK[0x340], v53);
  cv::Mat::~Mat((cv::Mat *)(v50 - 192), v54);
  _Unwind_Resume(a1);
}

void cv::dilate(void (***a1)(long long *__return_ptr, void, uint64_t), uint64_t a2, void (***a3)(long long *__return_ptr, void, uint64_t), uint64_t *a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7 = *a4;
  cv::morphOp(1, a1, a2, a3, &v7, a5, a6, a7);
}

uint64_t cv::MorphologyRunner::MorphologyRunner(uint64_t a1, cv::Mat *a2, cv::Mat *a3, int a4, int a5, int a6, cv::Mat *a7, void *a8, int a9, int a10, uint64_t a11)
{
  uint64_t v15 = 0;
  *(void *)a1 = &unk_26D98A288;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 8) = 1124007936;
  int v16 = (cv::Mat *)(a1 + 8);
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 12) = 0u;
  int v17 = (int *)(a1 + 12);
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 104) = 1124007936;
  int v18 = (cv::Mat *)(a1 + 104);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 220) = 0u;
  uint64_t v19 = (int *)(a1 + 220);
  *(_DWORD *)(a1 + 216) = 1124007936;
  int v20 = (cv::Mat *)(a1 + 216);
  *(void *)(a1 + 280) = a1 + 224;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 288) = a1 + 296;
  *(_OWORD *)(a1 + 108) = 0u;
  int v21 = (int *)(a1 + 108);
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 316) = 0;
  do
  {
    *(void *)(a1 + v15 + 328) = *(void *)(a11 + v15);
    v15 += 8;
  }
  while (v15 != 32);
  if (v16 != a2)
  {
    int v22 = (atomic_uint *)*((void *)a2 + 3);
    if (v22)
    {
      atomic_fetch_add(v22, 1u);
      int v23 = *(atomic_uint **)(a1 + 32);
      if (v23)
      {
        if (atomic_fetch_add(v23, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a1 + 8), a2);
        }
      }
    }
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = 0;
    if (*(int *)(a1 + 12) <= 0)
    {
      *(void *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = *(void *)(a1 + 72);
      do
      {
        *(_DWORD *)(v25 + 4 * v24++) = 0;
        uint64_t v26 = *v17;
      }
      while (v24 < v26);
      *(void *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
      if ((int)v26 > 2) {
        goto LABEL_16;
      }
    }
    int v27 = *((_DWORD *)a2 + 1);
    if (v27 <= 2)
    {
      *(_DWORD *)(a1 + 12) = v27;
      *(void *)(a1 + 16) = *((void *)a2 + 1);
      uint64_t v28 = (void *)*((void *)a2 + 9);
      uint64_t v29 = *(void **)(a1 + 80);
      *uint64_t v29 = *v28;
      v29[1] = v28[1];
LABEL_17:
      *(_OWORD *)(a1 + 40) = *((_OWORD *)a2 + 2);
      *(void *)(a1 + 56) = *((void *)a2 + 6);
      *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 64) = *((void *)a2 + 7);
      goto LABEL_18;
    }
LABEL_16:
    cv::Mat::copySize(v16, a2);
    goto LABEL_17;
  }
LABEL_18:
  if (v18 == a3) {
    goto LABEL_34;
  }
  uint64_t v30 = (atomic_uint *)*((void *)a3 + 3);
  if (v30) {
    atomic_fetch_add(v30, 1u);
  }
  unsigned int v31 = *(atomic_uint **)(a1 + 128);
  if (v31 && atomic_fetch_add(v31, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate(v18, a2);
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  if (*(int *)(a1 + 108) <= 0)
  {
    *(void *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 104) = *(_DWORD *)a3;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v33 = *(void *)(a1 + 168);
    do
    {
      *(_DWORD *)(v33 + 4 * v32++) = 0;
      uint64_t v34 = *v21;
    }
    while (v32 < v34);
    *(void *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 104) = *(_DWORD *)a3;
    if ((int)v34 > 2) {
      goto LABEL_32;
    }
  }
  int v35 = *((_DWORD *)a3 + 1);
  if (v35 > 2)
  {
LABEL_32:
    cv::Mat::copySize(v18, a3);
    goto LABEL_33;
  }
  *(_DWORD *)(a1 + 108) = v35;
  *(void *)(a1 + 112) = *((void *)a3 + 1);
  uint64_t v36 = (void *)*((void *)a3 + 9);
  uint64_t v37 = *(void **)(a1 + 176);
  *uint64_t v37 = *v36;
  v37[1] = v36[1];
LABEL_33:
  *(_OWORD *)(a1 + 136) = *((_OWORD *)a3 + 2);
  *(void *)(a1 + 152) = *((void *)a3 + 6);
  *(_OWORD *)(a1 + 120) = *((_OWORD *)a3 + 1);
  *(void *)(a1 + 160) = *((void *)a3 + 7);
LABEL_34:
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(_DWORD *)(a1 + 208) = a6;
  if (v20 != a7)
  {
    uint64_t v38 = (atomic_uint *)*((void *)a7 + 3);
    if (v38) {
      atomic_fetch_add(v38, 1u);
    }
    uint64_t v39 = *(atomic_uint **)(a1 + 240);
    if (v39 && atomic_fetch_add(v39, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate(v20, a2);
    }
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 248) = 0;
    if (*(int *)(a1 + 220) <= 0)
    {
      *(void *)(a1 + 240) = 0;
      *(_DWORD *)(a1 + 216) = *(_DWORD *)a7;
    }
    else
    {
      uint64_t v40 = 0;
      uint64_t v41 = *(void *)(a1 + 280);
      do
      {
        *(_DWORD *)(v41 + 4 * v40++) = 0;
        uint64_t v42 = *v19;
      }
      while (v40 < v42);
      *(void *)(a1 + 240) = 0;
      *(_DWORD *)(a1 + 216) = *(_DWORD *)a7;
      if ((int)v42 > 2) {
        goto LABEL_48;
      }
    }
    int v43 = *((_DWORD *)a7 + 1);
    if (v43 <= 2)
    {
      *(_DWORD *)(a1 + 220) = v43;
      *(void *)(a1 + 224) = *((void *)a7 + 1);
      uint64_t v44 = (void *)*((void *)a7 + 9);
      uint64_t v45 = *(void **)(a1 + 288);
      *uint64_t v45 = *v44;
      v45[1] = v44[1];
LABEL_49:
      *(_OWORD *)(a1 + 248) = *((_OWORD *)a7 + 2);
      *(void *)(a1 + 264) = *((void *)a7 + 6);
      *(_OWORD *)(a1 + 232) = *((_OWORD *)a7 + 1);
      *(void *)(a1 + 272) = *((void *)a7 + 7);
      goto LABEL_50;
    }
LABEL_48:
    cv::Mat::copySize(v20, a7);
    goto LABEL_49;
  }
LABEL_50:
  *(void *)(a1 + 312) = *a8;
  *(_DWORD *)(a1 + 320) = a9;
  *(_DWORD *)(a1 + 324) = a10;
  return a1;
}

void sub_225F1307C(_Unwind_Exception *a1, void *a2)
{
  cv::Mat::~Mat(v5, a2);
  cv::Mat::~Mat(v4, v7);
  cv::Mat::~Mat(v3, v8);
  cv::BaseRowFilter::~BaseRowFilter(v2);
  _Unwind_Resume(a1);
}

void cv::MorphologyRunner::~MorphologyRunner(cv::MorphologyRunner *this, void *a2)
{
  cv::MorphologyRunner::~MorphologyRunner(this, a2);
  JUMPOUT(0x22A641780);
}

{
  atomic_uint *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  atomic_uint *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  atomic_uint *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t vars8;

  *(void *)this = &unk_26D98A288;
  uint64_t v3 = (atomic_uint *)*((void *)this + 30);
  if (v3 && atomic_fetch_add(v3, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::MorphologyRunner *)((char *)this + 216), a2);
  }
  *((void *)this + 29) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 31) = 0;
  if (*((int *)this + 55) >= 1)
  {
    uint64_t v4 = 0;
    long long v5 = *((void *)this + 35);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *((int *)this + 55));
  }
  *((void *)this + 30) = 0;
  unsigned int v6 = (void **)*((void *)this + 36);
  if (v6 != (void **)((char *)this + 296)) {
    cv::fastFree(v6, a2);
  }
  uint64_t v7 = (atomic_uint *)*((void *)this + 16);
  if (v7 && atomic_fetch_add(v7, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::MorphologyRunner *)((char *)this + 104), a2);
  }
  *((void *)this + 15) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 17) = 0;
  if (*((int *)this + 27) >= 1)
  {
    long long v8 = 0;
    uint64_t v9 = *((void *)this + 21);
    do
      *(_DWORD *)(v9 + 4 * v8++) = 0;
    while (v8 < *((int *)this + 27));
  }
  *((void *)this + 16) = 0;
  int v10 = (void **)*((void *)this + 22);
  if (v10 != (void **)((char *)this + 184)) {
    cv::fastFree(v10, a2);
  }
  int v11 = (atomic_uint *)*((void *)this + 4);
  if (v11 && atomic_fetch_add(v11, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::MorphologyRunner *)((char *)this + 8), a2);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = 0;
  if (*((int *)this + 3) >= 1)
  {
    size_t v12 = 0;
    double v13 = *((void *)this + 9);
    do
      *(_DWORD *)(v13 + 4 * v12++) = 0;
    while (v12 < *((int *)this + 3));
  }
  *((void *)this + 4) = 0;
  int v14 = (void **)*((void *)this + 10);
  if (v14 != (void **)((char *)this + 88)) {
    cv::fastFree(v14, a2);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

void cv::MorphologyRunner::operator()(uint64_t a1, _DWORD *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 200);
  uint64_t v5 = (uint64_t)rint((double)(v3 * *a2 / v4));
  if (v3 >= (int)v5) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v7 = (uint64_t)rint((double)(a2[1] * v3 / v4));
  if (v3 >= (int)v7) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  v14[0] = v6;
  v14[1] = v8;
  *(void *)&v12[0] = 0x7FFFFFFF80000000;
  cv::Mat::Mat(v15, a1 + 8, v14, v12);
  *(void *)&v12[0] = __PAIR64__(v8, v6);
  uint64_t v13 = 0x7FFFFFFF80000000;
  cv::Mat::Mat(v14, a1 + 104, v12, &v13);
  uint64_t v9 = (cv *)*(unsigned int *)(a1 + 208);
  int v10 = *(_DWORD *)(a1 + 8);
  cv::_InputArray::_InputArray((uint64_t)v12, (const cv::Mat *)(a1 + 216));
  uint64_t v11 = *(void *)(a1 + 312);
  cv::createMorphologyFilter(v9, v10 & 0xFFF, (void (***)(uint64_t *__return_ptr, void, uint64_t))v12, &v11);
}

void sub_225F133D0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  cv::Ptr<cv::FilterEngine>::~Ptr((uint64_t *)va, a2);
  cv::Mat::~Mat((cv::Mat *)va1, v14);
  cv::Mat::~Mat((cv::Mat *)(v12 - 144), v15);
  _Unwind_Resume(a1);
}

void cv::MorphRowFilter<cv::MinOp<unsigned char>,cv::MorphRowNoVec>::~MorphRowFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphRowFilter<cv::MinOp<unsigned char>,cv::MorphRowNoVec>::operator()(uint64_t result, char *a2, unsigned char *a3, int a4, unsigned int a5)
{
  uint64_t v5 = *(int *)(result + 8) * (uint64_t)(int)a5;
  uint64_t v6 = a5 * a4;
  if (v5 == a5)
  {
    if ((int)v6 >= 1)
    {
      do
      {
        char v7 = *a2++;
        *a3++ = v7;
        --v6;
      }
      while (v6);
    }
  }
  else if ((int)a5 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = 2 * a5;
    uint64_t v10 = (int)(v6 - 2 * a5);
    do
    {
      if ((v10 & 0x80000000) != 0)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v12 = a2;
        do
        {
          uint64_t v13 = &a2[v11];
          int v14 = a2[v11 + a5];
          uint64_t v15 = 2 * a5;
          if ((int)v9 < (int)v5)
          {
            do
            {
              v14 -= icvSaturate8u_cv[(v14 | 0x100) - v12[v15]];
              v15 += a5;
            }
            while (v15 < v5);
            uint64_t v15 = (int)v15;
          }
          uint64_t v16 = v14 | 0x100;
          a3[v11] = v14 - icvSaturate8u_cv[v16 - *v13];
          uint64_t result = v14 - icvSaturate8u_cv[v16 - v13[v15]];
          a3[v11 + a5] = result;
          v11 += v9;
          v12 += v9;
        }
        while (v11 <= v10);
      }
      if ((int)v11 < (int)v6)
      {
        uint64_t v17 = (int)v11;
        uint64_t v18 = &a2[(int)v11];
        do
        {
          uint64_t result = a2[v17];
          if ((int)v5 > (int)a5)
          {
            uint64_t v19 = a5;
            do
            {
              uint64_t result = result
                     - icvSaturate8u_cv[(result | 0x100) - v18[v19]];
              v19 += a5;
            }
            while (v19 < v5);
          }
          a3[v17] = result;
          v17 += a5;
          v18 += a5;
        }
        while (v17 < (int)v6);
      }
      ++v8;
      ++a2;
      ++a3;
    }
    while (v8 != a5);
  }
  return result;
}

void cv::MorphRowFilter<cv::MinOp<unsigned short>,cv::MorphRowNoVec>::~MorphRowFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphRowFilter<cv::MinOp<unsigned short>,cv::MorphRowNoVec>::operator()(uint64_t result, __int16 *a2, _WORD *a3, int a4, unsigned int a5)
{
  uint64_t v5 = *(int *)(result + 8) * (uint64_t)(int)a5;
  uint64_t v6 = a5 * a4;
  if (v5 == a5)
  {
    if ((int)v6 >= 1)
    {
      do
      {
        __int16 v7 = *a2++;
        *a3++ = v7;
        --v6;
      }
      while (v6);
    }
  }
  else if ((int)a5 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = 2 * a5;
    uint64_t v10 = (int)(v6 - 2 * a5);
    do
    {
      if ((v10 & 0x80000000) != 0)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t result = (uint64_t)a2;
        do
        {
          uint64_t v12 = (unsigned __int16 *)&a2[v11];
          unsigned int v13 = v12[a5];
          uint64_t v14 = 2 * a5;
          if ((int)v9 < (int)v5)
          {
            do
            {
              if (*(unsigned __int16 *)(result + 2 * v14) >= (unsigned __int16)v13) {
                unsigned int v13 = (unsigned __int16)v13;
              }
              else {
                unsigned int v13 = *(unsigned __int16 *)(result + 2 * v14);
              }
              v14 += a5;
            }
            while (v14 < v5);
            uint64_t v14 = (int)v14;
          }
          unsigned int v15 = *v12;
          if (v15 >= v13) {
            LOWORD(v15) = v13;
          }
          a3[v11] = v15;
          unsigned int v16 = v12[v14];
          if (v16 >= v13) {
            LOWORD(v16) = v13;
          }
          a3[v11 + a5] = v16;
          v11 += v9;
          result += 4 * a5;
        }
        while (v11 <= v10);
      }
      if ((int)v11 < (int)v6)
      {
        uint64_t result = (int)v11;
        uint64_t v17 = &a2[(int)v11];
        do
        {
          unsigned __int16 v18 = a2[result];
          if ((int)v5 > (int)a5)
          {
            uint64_t v19 = a5;
            do
            {
              if ((unsigned __int16)v17[v19] < v18) {
                unsigned __int16 v18 = v17[v19];
              }
              v19 += a5;
            }
            while (v19 < v5);
          }
          a3[result] = v18;
          result += a5;
          v17 += a5;
        }
        while (result < (int)v6);
      }
      ++v8;
      ++a2;
      ++a3;
    }
    while (v8 != a5);
  }
  return result;
}

void cv::MorphRowFilter<cv::MinOp<short>,cv::MorphRowNoVec>::~MorphRowFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphRowFilter<cv::MinOp<short>,cv::MorphRowNoVec>::operator()(uint64_t result, __int16 *a2, _WORD *a3, int a4, unsigned int a5)
{
  uint64_t v5 = *(int *)(result + 8) * (uint64_t)(int)a5;
  uint64_t v6 = a5 * a4;
  if (v5 == a5)
  {
    if ((int)v6 >= 1)
    {
      do
      {
        __int16 v7 = *a2++;
        *a3++ = v7;
        --v6;
      }
      while (v6);
    }
  }
  else if ((int)a5 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = 2 * a5;
    uint64_t v10 = (int)(v6 - 2 * a5);
    do
    {
      if ((v10 & 0x80000000) != 0)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t result = (uint64_t)a2;
        do
        {
          uint64_t v12 = &a2[v11];
          __int16 v13 = v12[a5];
          uint64_t v14 = 2 * a5;
          if ((int)v9 < (int)v5)
          {
            do
            {
              if (*(__int16 *)(result + 2 * v14) < v13) {
                __int16 v13 = *(_WORD *)(result + 2 * v14);
              }
              v14 += a5;
            }
            while (v14 < v5);
            uint64_t v14 = (int)v14;
          }
          int v15 = *v12;
          if (v15 >= v13) {
            LOWORD(v15) = v13;
          }
          a3[v11] = v15;
          int v16 = v12[v14];
          if (v16 >= v13) {
            LOWORD(v16) = v13;
          }
          a3[v11 + a5] = v16;
          v11 += v9;
          result += 4 * a5;
        }
        while (v11 <= v10);
      }
      if ((int)v11 < (int)v6)
      {
        uint64_t result = (int)v11;
        uint64_t v17 = &a2[(int)v11];
        do
        {
          __int16 v18 = a2[result];
          if ((int)v5 > (int)a5)
          {
            uint64_t v19 = a5;
            do
            {
              if (v17[v19] < v18) {
                __int16 v18 = v17[v19];
              }
              v19 += a5;
            }
            while (v19 < v5);
          }
          a3[result] = v18;
          result += a5;
          v17 += a5;
        }
        while (result < (int)v6);
      }
      ++v8;
      ++a2;
      ++a3;
    }
    while (v8 != a5);
  }
  return result;
}

void cv::MorphRowFilter<cv::MinOp<float>,cv::MorphRowNoVec>::~MorphRowFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphRowFilter<cv::MinOp<float>,cv::MorphRowNoVec>::operator()(uint64_t result, int *a2, _DWORD *a3, int a4, unsigned int a5)
{
  uint64_t v5 = *(int *)(result + 8) * (uint64_t)(int)a5;
  uint64_t v6 = a5 * a4;
  if (v5 == a5)
  {
    if ((int)v6 >= 1)
    {
      do
      {
        int v7 = *a2++;
        *a3++ = v7;
        --v6;
      }
      while (v6);
    }
  }
  else if ((int)a5 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = 2 * a5;
    uint64_t v10 = (int)(v6 - 2 * a5);
    do
    {
      if ((v10 & 0x80000000) != 0)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t result = (uint64_t)a2;
        do
        {
          uint64_t v12 = (float *)&a2[v11];
          float v13 = v12[a5];
          uint64_t v14 = 2 * a5;
          if ((int)v9 < (int)v5)
          {
            do
            {
              if (*(float *)(result + 4 * v14) < v13) {
                float v13 = *(float *)(result + 4 * v14);
              }
              v14 += a5;
            }
            while (v14 < v5);
            uint64_t v14 = (int)v14;
          }
          float v15 = *v12;
          if (*v12 >= v13) {
            float v15 = v13;
          }
          *(float *)&a3[v11] = v15;
          if (v12[v14] < v13) {
            float v13 = v12[v14];
          }
          *(float *)&a3[v11 + a5] = v13;
          v11 += v9;
          result += 8 * a5;
        }
        while (v11 <= v10);
      }
      if ((int)v11 < (int)v6)
      {
        uint64_t result = (int)v11;
        int v16 = &a2[(int)v11];
        do
        {
          float v17 = *(float *)&a2[result];
          if ((int)v5 > (int)a5)
          {
            uint64_t v18 = a5;
            do
            {
              if (*(float *)&v16[v18] < v17) {
                float v17 = *(float *)&v16[v18];
              }
              v18 += a5;
            }
            while (v18 < v5);
          }
          *(float *)&a3[result] = v17;
          result += a5;
          v16 += a5;
        }
        while (result < (int)v6);
      }
      ++v8;
      ++a2;
      ++a3;
    }
    while (v8 != a5);
  }
  return result;
}

void cv::MorphRowFilter<cv::MinOp<double>,cv::MorphRowNoVec>::~MorphRowFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphRowFilter<cv::MinOp<double>,cv::MorphRowNoVec>::operator()(uint64_t result, uint64_t *a2, void *a3, int a4, unsigned int a5)
{
  uint64_t v5 = *(int *)(result + 8) * (uint64_t)(int)a5;
  uint64_t v6 = a5 * a4;
  if (v5 == a5)
  {
    if ((int)v6 >= 1)
    {
      do
      {
        uint64_t v7 = *a2++;
        *a3++ = v7;
        --v6;
      }
      while (v6);
    }
  }
  else if ((int)a5 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = 2 * a5;
    uint64_t v10 = (int)(v6 - 2 * a5);
    do
    {
      if ((v10 & 0x80000000) != 0)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t result = (uint64_t)a2;
        do
        {
          uint64_t v12 = (double *)&a2[v11];
          double v13 = v12[a5];
          uint64_t v14 = 2 * a5;
          if ((int)v9 < (int)v5)
          {
            do
            {
              if (*(double *)(result + 8 * v14) < v13) {
                double v13 = *(double *)(result + 8 * v14);
              }
              v14 += a5;
            }
            while (v14 < v5);
            uint64_t v14 = (int)v14;
          }
          double v15 = *v12;
          if (*v12 >= v13) {
            double v15 = v13;
          }
          *(double *)&a3[v11] = v15;
          if (v12[v14] < v13) {
            double v13 = v12[v14];
          }
          *(double *)&a3[v11 + a5] = v13;
          v11 += v9;
          result += 16 * a5;
        }
        while (v11 <= v10);
      }
      if ((int)v11 < (int)v6)
      {
        uint64_t result = (int)v11;
        int v16 = &a2[(int)v11];
        do
        {
          double v17 = *(double *)&a2[result];
          if ((int)v5 > (int)a5)
          {
            uint64_t v18 = a5;
            do
            {
              if (*(double *)&v16[v18] < v17) {
                double v17 = *(double *)&v16[v18];
              }
              v18 += a5;
            }
            while (v18 < v5);
          }
          *(double *)&a3[result] = v17;
          result += a5;
          v16 += a5;
        }
        while (result < (int)v6);
      }
      ++v8;
      ++a2;
      ++a3;
    }
    while (v8 != a5);
  }
  return result;
}

void cv::MorphRowFilter<cv::MaxOp<unsigned char>,cv::MorphRowNoVec>::~MorphRowFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphRowFilter<cv::MaxOp<unsigned char>,cv::MorphRowNoVec>::operator()(uint64_t result, char *a2, unsigned char *a3, int a4, unsigned int a5)
{
  uint64_t v5 = *(int *)(result + 8) * (uint64_t)(int)a5;
  uint64_t v6 = a5 * a4;
  if (v5 == a5)
  {
    if ((int)v6 >= 1)
    {
      do
      {
        char v7 = *a2++;
        *a3++ = v7;
        --v6;
      }
      while (v6);
    }
  }
  else if ((int)a5 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = 2 * a5;
    uint64_t v10 = (int)(v6 - 2 * a5);
    do
    {
      if ((v10 & 0x80000000) != 0)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v12 = a2;
        do
        {
          double v13 = &a2[v11];
          int v14 = a2[v11 + a5];
          uint64_t v15 = 2 * a5;
          if ((int)v9 < (int)v5)
          {
            do
            {
              v14 += icvSaturate8u_cv[v12[v15] - v14 + 256];
              v15 += a5;
            }
            while (v15 < v5);
            uint64_t v15 = (int)v15;
          }
          int v16 = &icvSaturate8u_cv[-v14];
          a3[v11] = v16[*v13 + 256] + v14;
          uint64_t result = v16[v13[v15] + 256] + v14;
          a3[v11 + a5] = result;
          v11 += v9;
          v12 += v9;
        }
        while (v11 <= v10);
      }
      if ((int)v11 < (int)v6)
      {
        uint64_t v17 = (int)v11;
        uint64_t v18 = &a2[(int)v11];
        do
        {
          uint64_t result = a2[v17];
          if ((int)v5 > (int)a5)
          {
            uint64_t v19 = a5;
            do
            {
              uint64_t result = icvSaturate8u_cv[v18[v19] - result + 256]
                     + result;
              v19 += a5;
            }
            while (v19 < v5);
          }
          a3[v17] = result;
          v17 += a5;
          v18 += a5;
        }
        while (v17 < (int)v6);
      }
      ++v8;
      ++a2;
      ++a3;
    }
    while (v8 != a5);
  }
  return result;
}

void cv::MorphRowFilter<cv::MaxOp<unsigned short>,cv::MorphRowNoVec>::~MorphRowFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphRowFilter<cv::MaxOp<unsigned short>,cv::MorphRowNoVec>::operator()(uint64_t result, __int16 *a2, _WORD *a3, int a4, unsigned int a5)
{
  uint64_t v5 = *(int *)(result + 8) * (uint64_t)(int)a5;
  uint64_t v6 = a5 * a4;
  if (v5 == a5)
  {
    if ((int)v6 >= 1)
    {
      do
      {
        __int16 v7 = *a2++;
        *a3++ = v7;
        --v6;
      }
      while (v6);
    }
  }
  else if ((int)a5 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = 2 * a5;
    uint64_t v10 = (int)(v6 - 2 * a5);
    do
    {
      if ((v10 & 0x80000000) != 0)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t result = (uint64_t)a2;
        do
        {
          uint64_t v12 = (unsigned __int16 *)&a2[v11];
          unsigned int v13 = v12[a5];
          uint64_t v14 = 2 * a5;
          if ((int)v9 < (int)v5)
          {
            do
            {
              unsigned int v13 = (unsigned __int16)v13;
              if ((unsigned __int16)v13 <= *(unsigned __int16 *)(result + 2 * v14)) {
                unsigned int v13 = *(unsigned __int16 *)(result + 2 * v14);
              }
              v14 += a5;
            }
            while (v14 < v5);
            uint64_t v14 = (int)v14;
          }
          unsigned int v15 = *v12;
          if (v13 > v15) {
            LOWORD(v15) = v13;
          }
          a3[v11] = v15;
          unsigned int v16 = v12[v14];
          if (v13 > v16) {
            LOWORD(v16) = v13;
          }
          a3[v11 + a5] = v16;
          v11 += v9;
          result += 4 * a5;
        }
        while (v11 <= v10);
      }
      if ((int)v11 < (int)v6)
      {
        uint64_t result = (int)v11;
        uint64_t v17 = &a2[(int)v11];
        do
        {
          unsigned __int16 v18 = a2[result];
          if ((int)v5 > (int)a5)
          {
            uint64_t v19 = a5;
            do
            {
              if (v18 <= (unsigned __int16)v17[v19]) {
                unsigned __int16 v18 = v17[v19];
              }
              v19 += a5;
            }
            while (v19 < v5);
          }
          a3[result] = v18;
          result += a5;
          v17 += a5;
        }
        while (result < (int)v6);
      }
      ++v8;
      ++a2;
      ++a3;
    }
    while (v8 != a5);
  }
  return result;
}

void cv::MorphRowFilter<cv::MaxOp<short>,cv::MorphRowNoVec>::~MorphRowFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphRowFilter<cv::MaxOp<short>,cv::MorphRowNoVec>::operator()(uint64_t result, __int16 *a2, _WORD *a3, int a4, unsigned int a5)
{
  uint64_t v5 = *(int *)(result + 8) * (uint64_t)(int)a5;
  uint64_t v6 = a5 * a4;
  if (v5 == a5)
  {
    if ((int)v6 >= 1)
    {
      do
      {
        __int16 v7 = *a2++;
        *a3++ = v7;
        --v6;
      }
      while (v6);
    }
  }
  else if ((int)a5 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = 2 * a5;
    uint64_t v10 = (int)(v6 - 2 * a5);
    do
    {
      if ((v10 & 0x80000000) != 0)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t result = (uint64_t)a2;
        do
        {
          uint64_t v12 = &a2[v11];
          __int16 v13 = v12[a5];
          uint64_t v14 = 2 * a5;
          if ((int)v9 < (int)v5)
          {
            do
            {
              if (v13 <= *(__int16 *)(result + 2 * v14)) {
                __int16 v13 = *(_WORD *)(result + 2 * v14);
              }
              v14 += a5;
            }
            while (v14 < v5);
            uint64_t v14 = (int)v14;
          }
          int v15 = *v12;
          if (v13 > v15) {
            LOWORD(v15) = v13;
          }
          a3[v11] = v15;
          int v16 = v12[v14];
          if (v13 > v16) {
            LOWORD(v16) = v13;
          }
          a3[v11 + a5] = v16;
          v11 += v9;
          result += 4 * a5;
        }
        while (v11 <= v10);
      }
      if ((int)v11 < (int)v6)
      {
        uint64_t result = (int)v11;
        uint64_t v17 = &a2[(int)v11];
        do
        {
          __int16 v18 = a2[result];
          if ((int)v5 > (int)a5)
          {
            uint64_t v19 = a5;
            do
            {
              if (v18 <= v17[v19]) {
                __int16 v18 = v17[v19];
              }
              v19 += a5;
            }
            while (v19 < v5);
          }
          a3[result] = v18;
          result += a5;
          v17 += a5;
        }
        while (result < (int)v6);
      }
      ++v8;
      ++a2;
      ++a3;
    }
    while (v8 != a5);
  }
  return result;
}

void cv::MorphRowFilter<cv::MaxOp<float>,cv::MorphRowNoVec>::~MorphRowFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphRowFilter<cv::MaxOp<float>,cv::MorphRowNoVec>::operator()(uint64_t result, int *a2, _DWORD *a3, int a4, unsigned int a5)
{
  uint64_t v5 = *(int *)(result + 8) * (uint64_t)(int)a5;
  uint64_t v6 = a5 * a4;
  if (v5 == a5)
  {
    if ((int)v6 >= 1)
    {
      do
      {
        int v7 = *a2++;
        *a3++ = v7;
        --v6;
      }
      while (v6);
    }
  }
  else if ((int)a5 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = 2 * a5;
    uint64_t v10 = (int)(v6 - 2 * a5);
    do
    {
      if ((v10 & 0x80000000) != 0)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t result = (uint64_t)a2;
        do
        {
          uint64_t v12 = (float *)&a2[v11];
          float v13 = v12[a5];
          uint64_t v14 = 2 * a5;
          if ((int)v9 < (int)v5)
          {
            do
            {
              if (v13 < *(float *)(result + 4 * v14)) {
                float v13 = *(float *)(result + 4 * v14);
              }
              v14 += a5;
            }
            while (v14 < v5);
            uint64_t v14 = (int)v14;
          }
          float v15 = *v12;
          if (v13 >= *v12) {
            float v15 = v13;
          }
          *(float *)&a3[v11] = v15;
          if (v13 < v12[v14]) {
            float v13 = v12[v14];
          }
          *(float *)&a3[v11 + a5] = v13;
          v11 += v9;
          result += 8 * a5;
        }
        while (v11 <= v10);
      }
      if ((int)v11 < (int)v6)
      {
        uint64_t result = (int)v11;
        int v16 = &a2[(int)v11];
        do
        {
          float v17 = *(float *)&a2[result];
          if ((int)v5 > (int)a5)
          {
            uint64_t v18 = a5;
            do
            {
              if (v17 < *(float *)&v16[v18]) {
                float v17 = *(float *)&v16[v18];
              }
              v18 += a5;
            }
            while (v18 < v5);
          }
          *(float *)&a3[result] = v17;
          result += a5;
          v16 += a5;
        }
        while (result < (int)v6);
      }
      ++v8;
      ++a2;
      ++a3;
    }
    while (v8 != a5);
  }
  return result;
}

void cv::MorphRowFilter<cv::MaxOp<double>,cv::MorphRowNoVec>::~MorphRowFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphRowFilter<cv::MaxOp<double>,cv::MorphRowNoVec>::operator()(uint64_t result, uint64_t *a2, void *a3, int a4, unsigned int a5)
{
  uint64_t v5 = *(int *)(result + 8) * (uint64_t)(int)a5;
  uint64_t v6 = a5 * a4;
  if (v5 == a5)
  {
    if ((int)v6 >= 1)
    {
      do
      {
        uint64_t v7 = *a2++;
        *a3++ = v7;
        --v6;
      }
      while (v6);
    }
  }
  else if ((int)a5 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = 2 * a5;
    uint64_t v10 = (int)(v6 - 2 * a5);
    do
    {
      if ((v10 & 0x80000000) != 0)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t result = (uint64_t)a2;
        do
        {
          uint64_t v12 = (double *)&a2[v11];
          double v13 = v12[a5];
          uint64_t v14 = 2 * a5;
          if ((int)v9 < (int)v5)
          {
            do
            {
              if (v13 < *(double *)(result + 8 * v14)) {
                double v13 = *(double *)(result + 8 * v14);
              }
              v14 += a5;
            }
            while (v14 < v5);
            uint64_t v14 = (int)v14;
          }
          double v15 = *v12;
          if (v13 >= *v12) {
            double v15 = v13;
          }
          *(double *)&a3[v11] = v15;
          if (v13 < v12[v14]) {
            double v13 = v12[v14];
          }
          *(double *)&a3[v11 + a5] = v13;
          v11 += v9;
          result += 16 * a5;
        }
        while (v11 <= v10);
      }
      if ((int)v11 < (int)v6)
      {
        uint64_t result = (int)v11;
        int v16 = &a2[(int)v11];
        do
        {
          double v17 = *(double *)&a2[result];
          if ((int)v5 > (int)a5)
          {
            uint64_t v18 = a5;
            do
            {
              if (v17 < *(double *)&v16[v18]) {
                double v17 = *(double *)&v16[v18];
              }
              v18 += a5;
            }
            while (v18 < v5);
          }
          *(double *)&a3[result] = v17;
          result += a5;
          v16 += a5;
        }
        while (result < (int)v6);
      }
      ++v8;
      ++a2;
      ++a3;
    }
    while (v8 != a5);
  }
  return result;
}

void cv::MorphColumnFilter<cv::MinOp<unsigned char>,cv::MorphColumnNoVec>::~MorphColumnFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphColumnFilter<cv::MinOp<unsigned char>,cv::MorphColumnNoVec>::operator()(uint64_t result, void *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = *(unsigned int *)(result + 8);
  uint64_t v7 = a4;
  BOOL v8 = (int)v6 <= 1 || a5 <= 1;
  if (v8)
  {
    int v9 = a5;
  }
  else
  {
    uint64_t v10 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v11 = 0;
        do
        {
          uint64_t v12 = (unsigned __int8 *)(a2[1] + v11);
          unsigned __int8 v13 = *v12;
          unsigned __int8 v14 = v12[1];
          unsigned __int8 v15 = v12[2];
          unsigned __int8 v16 = v12[3];
          if (v6 < 3)
          {
            unsigned int v19 = 2;
          }
          else
          {
            uint64_t v17 = 16;
            do
            {
              uint64_t v18 = (unsigned __int8 *)(a2[(unint64_t)v17 / 8] + v11);
              v13 -= icvSaturate8u_cv[(v13 | 0x100) - *v18];
              v14 -= icvSaturate8u_cv[(v14 | 0x100) - v18[1]];
              v15 -= icvSaturate8u_cv[(v15 | 0x100) - v18[2]];
              v16 -= icvSaturate8u_cv[(v16 | 0x100) - v18[3]];
              v17 += 8;
            }
            while (v10 != v17);
            unsigned int v19 = v6;
          }
          int v20 = (unsigned __int8 *)(*a2 + v11);
          uint64_t v21 = v13 | 0x100;
          *(unsigned char *)(a3 + v11) = v13 - icvSaturate8u_cv[v21 - *v20];
          uint64_t v22 = v14 | 0x100;
          *(unsigned char *)(a3 + (v11 | 1)) = v14 - icvSaturate8u_cv[v22 - v20[1]];
          uint64_t v23 = v15 | 0x100;
          *(unsigned char *)(a3 + (v11 | 2)) = v15 - icvSaturate8u_cv[v23 - v20[2]];
          uint64_t v24 = v16 | 0x100;
          *(unsigned char *)(a3 + (v11 | 3)) = v16 - icvSaturate8u_cv[v24 - v20[3]];
          uint64_t v25 = (unsigned __int8 *)(a2[v19] + v11);
          uint64_t v26 = (unsigned char *)(a3 + v11 + v7);
          *uint64_t v26 = v13 - icvSaturate8u_cv[v21 - *v25];
          v26[1] = v14 - icvSaturate8u_cv[v22 - v25[1]];
          v26[2] = v15 - icvSaturate8u_cv[v23 - v25[2]];
          uint64_t result = icvSaturate8u_cv[v24 - v25[3]];
          v26[3] = v16 - result;
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < a6)
      {
        do
        {
          unsigned __int8 v27 = *(unsigned char *)(a2[1] + v11);
          if (v6 < 3)
          {
            unsigned int v29 = 2;
          }
          else
          {
            uint64_t v28 = 16;
            do
            {
              v27 -= icvSaturate8u_cv[(v27 | 0x100) - *(unsigned __int8 *)(a2[(unint64_t)v28 / 8] + v11)];
              v28 += 8;
            }
            while (v10 != v28);
            unsigned int v29 = v6;
          }
          uint64_t v30 = v27 | 0x100;
          *(unsigned char *)(a3 + v11) = v27 - icvSaturate8u_cv[v30 - *(unsigned __int8 *)(*a2 + v11)];
          char v31 = v27 - icvSaturate8u_cv[v30 - *(unsigned __int8 *)(a2[v29] + v11)];
          uint64_t result = v11 + v7;
          *(unsigned char *)(a3 + v11 + v7) = v31;
          ++v11;
        }
        while (v11 != a6);
      }
      int v9 = a5 - 2;
      a3 += 2 * v7;
      a2 += 2;
      BOOL v8 = a5 <= 3;
      a5 -= 2;
    }
    while (!v8);
  }
  if (v9 >= 1)
  {
    uint64_t v32 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v33 = 0;
        do
        {
          uint64_t v34 = (unsigned __int8 *)(*a2 + v33);
          unsigned __int8 v35 = *v34;
          unsigned __int8 v36 = v34[1];
          uint64_t result = v34[2];
          unsigned __int8 v37 = v34[3];
          if ((int)v6 >= 2)
          {
            uint64_t v38 = 8;
            do
            {
              uint64_t v39 = (unsigned __int8 *)(a2[(unint64_t)v38 / 8] + v33);
              v35 -= icvSaturate8u_cv[(v35 | 0x100) - *v39];
              v36 -= icvSaturate8u_cv[(v36 | 0x100) - v39[1]];
              uint64_t result = result - icvSaturate8u_cv[(result | 0x100) - v39[2]];
              v37 -= icvSaturate8u_cv[(v37 | 0x100) - v39[3]];
              v38 += 8;
            }
            while (v32 != v38);
          }
          *(unsigned char *)(a3 + v33) = v35;
          *(unsigned char *)(a3 + (v33 | 1)) = v36;
          *(unsigned char *)(a3 + (v33 | 2)) = result;
          *(unsigned char *)(a3 + (v33 | 3)) = v37;
          v33 += 4;
        }
        while (v33 <= a6 - 4);
        uint64_t v33 = v33;
      }
      else
      {
        uint64_t v33 = 0;
      }
      if ((int)v33 < a6)
      {
        do
        {
          unsigned __int8 v40 = *(unsigned char *)(*a2 + v33);
          if ((int)v6 >= 2)
          {
            uint64_t v41 = 8;
            do
            {
              uint64_t result = icvSaturate8u_cv[(v40 | 0x100) - *(unsigned __int8 *)(a2[(unint64_t)v41 / 8] + v33)];
              v40 -= result;
              v41 += 8;
            }
            while (v32 != v41);
          }
          *(unsigned char *)(a3 + v33++) = v40;
        }
        while (v33 != a6);
      }
      a3 += v7;
      ++a2;
      BOOL v42 = __OFSUB__(v9--, 1);
    }
    while (!((v9 < 0) ^ v42 | (v9 == 0)));
  }
  return result;
}

void cv::MorphColumnFilter<cv::MinOp<unsigned short>,cv::MorphColumnNoVec>::~MorphColumnFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphColumnFilter<cv::MinOp<unsigned short>,cv::MorphColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = *(unsigned int *)(result + 8);
  int v7 = a4 >> 1;
  BOOL v8 = (int)v6 <= 1 || a5 <= 1;
  if (v8)
  {
    int v9 = a5;
  }
  else
  {
    uint64_t v10 = (int)(a4 & 0xFFFFFFFE);
    uint64_t v11 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t result = *a2;
        uint64_t v13 = a2[1];
        do
        {
          uint64_t v14 = 2 * v12;
          uint16x4_t v15 = *(uint16x4_t *)(v13 + 2 * v12);
          if (v6 < 3)
          {
            unsigned int v17 = 2;
          }
          else
          {
            uint64_t v16 = 16;
            do
            {
              uint16x4_t v15 = vmin_u16(*(uint16x4_t *)(a2[(unint64_t)v16 / 8] + 2 * v12), v15);
              v16 += 8;
            }
            while (v11 != v16);
            unsigned int v17 = v6;
          }
          uint64_t v18 = (unsigned __int16 *)(result + 2 * v12);
          unsigned int v19 = *v18;
          if (v19 >= v15.u16[0]) {
            LOWORD(v19) = v15.i16[0];
          }
          *(_WORD *)(a3 + 2 * v12) = v19;
          unsigned int v20 = v18[1];
          if (v20 >= v15.u16[1]) {
            LOWORD(v20) = v15.i16[1];
          }
          *(_WORD *)(a3 + (v14 | 2)) = v20;
          unsigned int v21 = v18[2];
          if (v21 >= v15.u16[2]) {
            LOWORD(v21) = v15.i16[2];
          }
          *(_WORD *)(a3 + (v14 | 4)) = v21;
          unsigned int v22 = v18[3];
          if (v22 >= v15.u16[3]) {
            LOWORD(v22) = v15.i16[3];
          }
          *(_WORD *)(a3 + (v14 | 6)) = v22;
          uint64_t v23 = (unsigned __int16 *)(a2[v17] + 2 * v12);
          unsigned int v24 = *v23;
          if (v24 >= v15.u16[0]) {
            LOWORD(v24) = v15.i16[0];
          }
          uint64_t v25 = (_WORD *)(a3 + 2 * (v12 + v7));
          *uint64_t v25 = v24;
          unsigned int v26 = v23[1];
          if (v26 >= v15.u16[1]) {
            LOWORD(v26) = v15.i16[1];
          }
          v25[1] = v26;
          unsigned int v27 = v23[2];
          if (v27 >= v15.u16[2]) {
            LOWORD(v27) = v15.i16[2];
          }
          v25[2] = v27;
          unsigned int v28 = v23[3];
          if (v28 >= v15.u16[3]) {
            LOWORD(v28) = v15.i16[3];
          }
          v25[3] = v28;
          v12 += 4;
        }
        while (v12 <= a6 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < a6)
      {
        uint64_t result = *a2;
        uint64_t v29 = a2[1];
        do
        {
          unsigned int v30 = *(unsigned __int16 *)(v29 + 2 * v12);
          if (v6 < 3)
          {
            unsigned int v32 = 2;
          }
          else
          {
            uint64_t v31 = 16;
            do
            {
              if (*(unsigned __int16 *)(a2[(unint64_t)v31 / 8] + 2 * v12) >= (unsigned __int16)v30) {
                unsigned int v30 = (unsigned __int16)v30;
              }
              else {
                unsigned int v30 = *(unsigned __int16 *)(a2[(unint64_t)v31 / 8] + 2 * v12);
              }
              v31 += 8;
            }
            while (v11 != v31);
            unsigned int v32 = v6;
          }
          unsigned int v33 = *(unsigned __int16 *)(result + 2 * v12);
          if (v33 >= v30) {
            LOWORD(v33) = v30;
          }
          *(_WORD *)(a3 + 2 * v12) = v33;
          unsigned int v34 = *(unsigned __int16 *)(a2[v32] + 2 * v12);
          if (v34 < v30) {
            LOWORD(v30) = v34;
          }
          *(_WORD *)(a3 + 2 * (v12 + v7)) = v30;
          ++v12;
        }
        while (v12 != a6);
      }
      int v9 = a5 - 2;
      a3 += 2 * v10;
      a2 += 2;
      BOOL v8 = a5 <= 3;
      a5 -= 2;
    }
    while (!v8);
  }
  if (v9 >= 1)
  {
    uint64_t v35 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v36 = 0;
        uint64_t v37 = *a2;
        do
        {
          uint16x4_t v38 = *(uint16x4_t *)(v37 + 2 * v36);
          if ((int)v6 >= 2)
          {
            uint64_t v39 = 8;
            do
            {
              uint64_t result = a2[(unint64_t)v39 / 8];
              uint16x4_t v38 = vmin_u16(*(uint16x4_t *)(result + 2 * v36), v38);
              v39 += 8;
            }
            while (v35 != v39);
          }
          *(uint16x4_t *)(a3 + 2 * v36) = v38;
          v36 += 4;
        }
        while (v36 <= a6 - 4);
        uint64_t v36 = v36;
      }
      else
      {
        uint64_t v36 = 0;
      }
      if ((int)v36 < a6)
      {
        uint64_t v40 = *a2;
        do
        {
          unsigned __int16 v41 = *(_WORD *)(v40 + 2 * v36);
          if ((int)v6 >= 2)
          {
            uint64_t v42 = 8;
            do
            {
              uint64_t result = *(unsigned __int16 *)(a2[(unint64_t)v42 / 8] + 2 * v36);
              if (result < v41) {
                unsigned __int16 v41 = *(_WORD *)(a2[(unint64_t)v42 / 8] + 2 * v36);
              }
              v42 += 8;
            }
            while (v35 != v42);
          }
          *(_WORD *)(a3 + 2 * v36++) = v41;
        }
        while (v36 != a6);
      }
      a3 += 2 * v7;
      ++a2;
      BOOL v43 = __OFSUB__(v9--, 1);
    }
    while (!((v9 < 0) ^ v43 | (v9 == 0)));
  }
  return result;
}

void cv::MorphColumnFilter<cv::MinOp<short>,cv::MorphColumnNoVec>::~MorphColumnFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphColumnFilter<cv::MinOp<short>,cv::MorphColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = *(unsigned int *)(result + 8);
  int v7 = a4 >> 1;
  BOOL v8 = (int)v6 <= 1 || a5 <= 1;
  if (v8)
  {
    int v9 = a5;
  }
  else
  {
    uint64_t v10 = (int)(a4 & 0xFFFFFFFE);
    uint64_t v11 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t result = *a2;
        uint64_t v13 = a2[1];
        do
        {
          uint64_t v14 = 2 * v12;
          int16x4_t v15 = *(int16x4_t *)(v13 + 2 * v12);
          if (v6 < 3)
          {
            unsigned int v17 = 2;
          }
          else
          {
            uint64_t v16 = 16;
            do
            {
              int16x4_t v15 = vmin_s16(*(int16x4_t *)(a2[(unint64_t)v16 / 8] + 2 * v12), v15);
              v16 += 8;
            }
            while (v11 != v16);
            unsigned int v17 = v6;
          }
          uint64_t v18 = (__int16 *)(result + 2 * v12);
          int v19 = *v18;
          if (v19 >= v15.i16[0]) {
            LOWORD(v19) = v15.i16[0];
          }
          *(_WORD *)(a3 + 2 * v12) = v19;
          int v20 = v18[1];
          if (v20 >= v15.i16[1]) {
            LOWORD(v20) = v15.i16[1];
          }
          *(_WORD *)(a3 + (v14 | 2)) = v20;
          int v21 = v18[2];
          if (v21 >= v15.i16[2]) {
            LOWORD(v21) = v15.i16[2];
          }
          *(_WORD *)(a3 + (v14 | 4)) = v21;
          int v22 = v18[3];
          if (v22 >= v15.i16[3]) {
            LOWORD(v22) = v15.i16[3];
          }
          *(_WORD *)(a3 + (v14 | 6)) = v22;
          uint64_t v23 = (__int16 *)(a2[v17] + 2 * v12);
          int v24 = *v23;
          if (v24 >= v15.i16[0]) {
            LOWORD(v24) = v15.i16[0];
          }
          uint64_t v25 = (_WORD *)(a3 + 2 * (v12 + v7));
          *uint64_t v25 = v24;
          int v26 = v23[1];
          if (v26 >= v15.i16[1]) {
            LOWORD(v26) = v15.i16[1];
          }
          v25[1] = v26;
          int v27 = v23[2];
          if (v27 >= v15.i16[2]) {
            LOWORD(v27) = v15.i16[2];
          }
          v25[2] = v27;
          int v28 = v23[3];
          if (v28 >= v15.i16[3]) {
            LOWORD(v28) = v15.i16[3];
          }
          v25[3] = v28;
          v12 += 4;
        }
        while (v12 <= a6 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < a6)
      {
        uint64_t result = *a2;
        uint64_t v29 = a2[1];
        do
        {
          __int16 v30 = *(_WORD *)(v29 + 2 * v12);
          if (v6 < 3)
          {
            unsigned int v32 = 2;
          }
          else
          {
            uint64_t v31 = 16;
            do
            {
              if (*(__int16 *)(a2[(unint64_t)v31 / 8] + 2 * v12) < v30) {
                __int16 v30 = *(_WORD *)(a2[(unint64_t)v31 / 8] + 2 * v12);
              }
              v31 += 8;
            }
            while (v11 != v31);
            unsigned int v32 = v6;
          }
          int v33 = *(__int16 *)(result + 2 * v12);
          if (v33 >= v30) {
            LOWORD(v33) = v30;
          }
          *(_WORD *)(a3 + 2 * v12) = v33;
          int v34 = *(__int16 *)(a2[v32] + 2 * v12);
          if (v34 < v30) {
            __int16 v30 = v34;
          }
          *(_WORD *)(a3 + 2 * (v12 + v7)) = v30;
          ++v12;
        }
        while (v12 != a6);
      }
      int v9 = a5 - 2;
      a3 += 2 * v10;
      a2 += 2;
      BOOL v8 = a5 <= 3;
      a5 -= 2;
    }
    while (!v8);
  }
  if (v9 >= 1)
  {
    uint64_t v35 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v36 = 0;
        uint64_t v37 = *a2;
        do
        {
          int16x4_t v38 = *(int16x4_t *)(v37 + 2 * v36);
          if ((int)v6 >= 2)
          {
            uint64_t v39 = 8;
            do
            {
              uint64_t result = a2[(unint64_t)v39 / 8];
              int16x4_t v38 = vmin_s16(*(int16x4_t *)(result + 2 * v36), v38);
              v39 += 8;
            }
            while (v35 != v39);
          }
          *(int16x4_t *)(a3 + 2 * v36) = v38;
          v36 += 4;
        }
        while (v36 <= a6 - 4);
        uint64_t v36 = v36;
      }
      else
      {
        uint64_t v36 = 0;
      }
      if ((int)v36 < a6)
      {
        uint64_t v40 = *a2;
        do
        {
          __int16 v41 = *(_WORD *)(v40 + 2 * v36);
          if ((int)v6 >= 2)
          {
            uint64_t v42 = 8;
            do
            {
              uint64_t result = *(__int16 *)(a2[(unint64_t)v42 / 8] + 2 * v36);
              if ((int)result < v41) {
                __int16 v41 = *(_WORD *)(a2[(unint64_t)v42 / 8] + 2 * v36);
              }
              v42 += 8;
            }
            while (v35 != v42);
          }
          *(_WORD *)(a3 + 2 * v36++) = v41;
        }
        while (v36 != a6);
      }
      a3 += 2 * v7;
      ++a2;
      BOOL v43 = __OFSUB__(v9--, 1);
    }
    while (!((v9 < 0) ^ v43 | (v9 == 0)));
  }
  return result;
}

void cv::MorphColumnFilter<cv::MinOp<float>,cv::MorphColumnNoVec>::~MorphColumnFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphColumnFilter<cv::MinOp<float>,cv::MorphColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = *(unsigned int *)(result + 8);
  int v7 = a4 >> 2;
  BOOL v8 = (int)v6 <= 1 || a5 <= 1;
  if (v8)
  {
    int v9 = a5;
  }
  else
  {
    uint64_t v10 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t result = *a2;
        uint64_t v12 = a2[1];
        do
        {
          uint64_t v13 = 4 * v11;
          float32x4_t v14 = *(float32x4_t *)(v12 + 4 * v11);
          if (v6 < 3)
          {
            unsigned int v17 = 2;
          }
          else
          {
            uint64_t v15 = 16;
            do
            {
              float32x4_t v16 = *(float32x4_t *)(a2[(unint64_t)v15 / 8] + 4 * v11);
              float32x4_t v14 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, v16), (int8x16_t)v16, (int8x16_t)v14);
              v15 += 8;
            }
            while (v10 != v15);
            unsigned int v17 = v6;
          }
          uint64_t v18 = (float *)(result + 4 * v11);
          float v19 = *v18;
          if (*v18 >= v14.f32[0]) {
            float v19 = v14.f32[0];
          }
          *(float *)(a3 + 4 * v11) = v19;
          float v20 = v18[1];
          if (v20 >= v14.f32[1]) {
            float v20 = v14.f32[1];
          }
          *(float *)(a3 + (v13 | 4)) = v20;
          float v21 = v18[2];
          if (v21 >= v14.f32[2]) {
            float v21 = v14.f32[2];
          }
          *(float *)(a3 + (v13 | 8)) = v21;
          float v22 = v18[3];
          if (v22 >= v14.f32[3]) {
            float v22 = v14.f32[3];
          }
          *(float *)(a3 + (v13 | 0xC)) = v22;
          uint64_t v23 = (__int32 *)(a2[v17] + 4 * v11);
          if (*(float *)v23 < v14.f32[0]) {
            v14.i32[0] = *v23;
          }
          int v24 = (_DWORD *)(a3 + 4 * (v11 + v7));
          *int v24 = v14.i32[0];
          v14.i32[0] = v23[1];
          if (v14.f32[0] >= v14.f32[1]) {
            v14.f32[0] = v14.f32[1];
          }
          v24[1] = v14.i32[0];
          v14.i32[0] = v23[2];
          if (v14.f32[0] >= v14.f32[2]) {
            v14.f32[0] = v14.f32[2];
          }
          v24[2] = v14.i32[0];
          v14.i32[0] = v23[3];
          if (v14.f32[0] >= v14.f32[3]) {
            v14.f32[0] = v14.f32[3];
          }
          v24[3] = v14.i32[0];
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < a6)
      {
        uint64_t result = *a2;
        uint64_t v25 = a2[1];
        do
        {
          float v26 = *(float *)(v25 + 4 * v11);
          if (v6 < 3)
          {
            unsigned int v29 = 2;
          }
          else
          {
            uint64_t v27 = 16;
            do
            {
              uint64_t v28 = a2[(unint64_t)v27 / 8];
              if (*(float *)(v28 + 4 * v11) < v26) {
                float v26 = *(float *)(v28 + 4 * v11);
              }
              v27 += 8;
            }
            while (v10 != v27);
            unsigned int v29 = v6;
          }
          float v30 = *(float *)(result + 4 * v11);
          if (v30 >= v26) {
            float v30 = v26;
          }
          *(float *)(a3 + 4 * v11) = v30;
          uint64_t v31 = a2[v29];
          if (*(float *)(v31 + 4 * v11) < v26) {
            float v26 = *(float *)(v31 + 4 * v11);
          }
          *(float *)(a3 + 4 * (v11 + v7)) = v26;
          ++v11;
        }
        while (v11 != a6);
      }
      int v9 = a5 - 2;
      a3 += 8 * v7;
      a2 += 2;
      BOOL v8 = a5 <= 3;
      a5 -= 2;
    }
    while (!v8);
  }
  if (v9 >= 1)
  {
    uint64_t v32 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v33 = 0;
        uint64_t v34 = *a2;
        do
        {
          float32x4_t v35 = *(float32x4_t *)(v34 + 4 * v33);
          if ((int)v6 >= 2)
          {
            uint64_t v36 = 8;
            do
            {
              uint64_t result = a2[(unint64_t)v36 / 8];
              float32x4_t v35 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v35, *(float32x4_t *)(result + 4 * v33)), *(int8x16_t *)(result + 4 * v33), (int8x16_t)v35);
              v36 += 8;
            }
            while (v32 != v36);
          }
          *(float32x4_t *)(a3 + 4 * v33) = v35;
          v33 += 4;
        }
        while (v33 <= a6 - 4);
        uint64_t v33 = v33;
      }
      else
      {
        uint64_t v33 = 0;
      }
      if ((int)v33 < a6)
      {
        uint64_t v37 = *a2;
        do
        {
          float v38 = *(float *)(v37 + 4 * v33);
          if ((int)v6 >= 2)
          {
            uint64_t v39 = 8;
            do
            {
              uint64_t v40 = a2[(unint64_t)v39 / 8];
              if (*(float *)(v40 + 4 * v33) < v38) {
                float v38 = *(float *)(v40 + 4 * v33);
              }
              v39 += 8;
            }
            while (v32 != v39);
          }
          *(float *)(a3 + 4 * v33++) = v38;
        }
        while (v33 != a6);
      }
      a3 += 4 * v7;
      ++a2;
      BOOL v41 = __OFSUB__(v9--, 1);
    }
    while (!((v9 < 0) ^ v41 | (v9 == 0)));
  }
  return result;
}

void cv::MorphColumnFilter<cv::MinOp<double>,cv::MorphColumnNoVec>::~MorphColumnFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphColumnFilter<cv::MinOp<double>,cv::MorphColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = *(unsigned int *)(result + 8);
  int v7 = a4 >> 3;
  BOOL v8 = (int)v6 <= 1 || a5 <= 1;
  if (v8)
  {
    int v9 = a5;
  }
  else
  {
    uint64_t v10 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t result = *a2;
        uint64_t v12 = a2[1];
        do
        {
          uint64_t v13 = (double *)(v12 + 8 * v11);
          double v15 = *v13;
          double v14 = v13[1];
          double v17 = v13[2];
          double v16 = v13[3];
          if (v6 < 3)
          {
            unsigned int v20 = 2;
          }
          else
          {
            uint64_t v18 = 16;
            do
            {
              float v19 = (double *)(a2[(unint64_t)v18 / 8] + 8 * v11);
              if (*v19 < v15) {
                double v15 = *v19;
              }
              if (v19[1] < v14) {
                double v14 = v19[1];
              }
              if (v19[2] < v17) {
                double v17 = v19[2];
              }
              if (v19[3] < v16) {
                double v16 = v19[3];
              }
              v18 += 8;
            }
            while (v10 != v18);
            unsigned int v20 = v6;
          }
          float v21 = (double *)(result + 8 * v11);
          uint64_t v22 = 8 * v11;
          double v23 = *v21;
          if (*v21 >= v15) {
            double v23 = v15;
          }
          *(double *)(a3 + 8 * v11) = v23;
          double v24 = v21[1];
          if (v24 >= v14) {
            double v24 = v14;
          }
          *(double *)(a3 + (v22 | 8)) = v24;
          double v25 = v21[2];
          if (v25 >= v17) {
            double v25 = v17;
          }
          *(double *)(a3 + (v22 | 0x10)) = v25;
          double v26 = v21[3];
          if (v26 >= v16) {
            double v26 = v16;
          }
          *(double *)(a3 + (v22 | 0x18)) = v26;
          uint64_t v27 = (double *)(a2[v20] + 8 * v11);
          if (*v27 < v15) {
            double v15 = *v27;
          }
          uint64_t v28 = (double *)(a3 + 8 * (v11 + v7));
          *uint64_t v28 = v15;
          if (v27[1] < v14) {
            double v14 = v27[1];
          }
          v28[1] = v14;
          if (v27[2] < v17) {
            double v17 = v27[2];
          }
          void v28[2] = v17;
          if (v27[3] < v16) {
            double v16 = v27[3];
          }
          v28[3] = v16;
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < a6)
      {
        uint64_t result = *a2;
        uint64_t v29 = a2[1];
        do
        {
          double v30 = *(double *)(v29 + 8 * v11);
          if (v6 < 3)
          {
            unsigned int v33 = 2;
          }
          else
          {
            uint64_t v31 = 16;
            do
            {
              uint64_t v32 = a2[(unint64_t)v31 / 8];
              if (*(double *)(v32 + 8 * v11) < v30) {
                double v30 = *(double *)(v32 + 8 * v11);
              }
              v31 += 8;
            }
            while (v10 != v31);
            unsigned int v33 = v6;
          }
          double v34 = *(double *)(result + 8 * v11);
          if (v34 >= v30) {
            double v34 = v30;
          }
          *(double *)(a3 + 8 * v11) = v34;
          uint64_t v35 = a2[v33];
          if (*(double *)(v35 + 8 * v11) < v30) {
            double v30 = *(double *)(v35 + 8 * v11);
          }
          *(double *)(a3 + 8 * (v11 + v7)) = v30;
          ++v11;
        }
        while (v11 != a6);
      }
      int v9 = a5 - 2;
      a3 += 16 * v7;
      a2 += 2;
      BOOL v8 = a5 <= 3;
      a5 -= 2;
    }
    while (!v8);
  }
  if (v9 >= 1)
  {
    uint64_t v36 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v37 = 0;
        uint64_t v38 = *a2;
        do
        {
          uint64_t v39 = (float64x2_t *)(v38 + 8 * v37);
          float64x2_t v41 = *v39;
          float64x2_t v40 = v39[1];
          if ((int)v6 >= 2)
          {
            uint64_t v42 = 8;
            do
            {
              BOOL v43 = (float64x2_t *)(a2[(unint64_t)v42 / 8] + 8 * v37);
              float64x2_t v41 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v41, *v43), *(int8x16_t *)v43, (int8x16_t)v41);
              float64x2_t v40 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v40, v43[1]), (int8x16_t)v43[1], (int8x16_t)v40);
              v42 += 8;
            }
            while (v36 != v42);
          }
          *(float64x2_t *)(a3 + 8 * v37) = v41;
          *(float64x2_t *)(a3 + ((8 * v37) | 0x10)) = v40;
          v37 += 4;
        }
        while (v37 <= a6 - 4);
        uint64_t v37 = v37;
      }
      else
      {
        uint64_t v37 = 0;
      }
      if ((int)v37 < a6)
      {
        uint64_t v44 = *a2;
        do
        {
          double v45 = *(double *)(v44 + 8 * v37);
          if ((int)v6 >= 2)
          {
            uint64_t v46 = 8;
            do
            {
              uint64_t v47 = a2[(unint64_t)v46 / 8];
              if (*(double *)(v47 + 8 * v37) < v45) {
                double v45 = *(double *)(v47 + 8 * v37);
              }
              v46 += 8;
            }
            while (v36 != v46);
          }
          *(double *)(a3 + 8 * v37++) = v45;
        }
        while (v37 != a6);
      }
      a3 += 8 * v7;
      ++a2;
      BOOL v48 = __OFSUB__(v9--, 1);
    }
    while (!((v9 < 0) ^ v48 | (v9 == 0)));
  }
  return result;
}

void cv::MorphColumnFilter<cv::MaxOp<unsigned char>,cv::MorphColumnNoVec>::~MorphColumnFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphColumnFilter<cv::MaxOp<unsigned char>,cv::MorphColumnNoVec>::operator()(uint64_t result, void *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = *(unsigned int *)(result + 8);
  uint64_t v7 = a4;
  BOOL v8 = (int)v6 <= 1 || a5 <= 1;
  if (v8)
  {
    int v9 = a5;
  }
  else
  {
    uint64_t v10 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v11 = 0;
        do
        {
          uint64_t v12 = (unsigned __int8 *)(a2[1] + v11);
          unsigned __int8 v13 = *v12;
          unsigned __int8 v14 = v12[1];
          unsigned __int8 v15 = v12[2];
          unsigned __int8 v16 = v12[3];
          if (v6 < 3)
          {
            unsigned int v19 = 2;
          }
          else
          {
            uint64_t v17 = 16;
            do
            {
              uint64_t v18 = (unsigned __int8 *)(a2[(unint64_t)v17 / 8] + v11);
              v13 += icvSaturate8u_cv[*v18 - v13 + 256];
              v14 += icvSaturate8u_cv[v18[1] - v14 + 256];
              v15 += icvSaturate8u_cv[v18[2] - v15 + 256];
              v16 += icvSaturate8u_cv[v18[3] - v16 + 256];
              v17 += 8;
            }
            while (v10 != v17);
            unsigned int v19 = v6;
          }
          unsigned int v20 = (unsigned __int8 *)(*a2 + v11);
          float v21 = &icvSaturate8u_cv[-v13];
          *(unsigned char *)(a3 + v11) = v21[*v20 + 256] + v13;
          uint64_t v22 = &icvSaturate8u_cv[-v14];
          *(unsigned char *)(a3 + (v11 | 1)) = v22[v20[1] + 256] + v14;
          double v23 = &icvSaturate8u_cv[-v15];
          *(unsigned char *)(a3 + (v11 | 2)) = v23[v20[2] + 256] + v15;
          double v24 = &icvSaturate8u_cv[-v16];
          *(unsigned char *)(a3 + (v11 | 3)) = v24[v20[3] + 256] + v16;
          double v25 = (unsigned __int8 *)(a2[v19] + v11);
          double v26 = (unsigned char *)(a3 + v11 + v7);
          *double v26 = v21[*v25 + 256] + v13;
          v26[1] = v22[v25[1] + 256] + v14;
          v26[2] = v23[v25[2] + 256] + v15;
          uint64_t result = v24[v25[3] + 256];
          v26[3] = result + v16;
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < a6)
      {
        do
        {
          unsigned __int8 v27 = *(unsigned char *)(a2[1] + v11);
          if (v6 < 3)
          {
            unsigned int v29 = 2;
          }
          else
          {
            uint64_t v28 = 16;
            do
            {
              v27 += icvSaturate8u_cv[*(unsigned __int8 *)(a2[(unint64_t)v28 / 8] + v11) - v27 + 256];
              v28 += 8;
            }
            while (v10 != v28);
            unsigned int v29 = v6;
          }
          double v30 = &icvSaturate8u_cv[-v27];
          *(unsigned char *)(a3 + v11) = v30[*(unsigned __int8 *)(*a2 + v11) + 256] + v27;
          char v31 = v30[*(unsigned __int8 *)(a2[v29] + v11) + 256] + v27;
          uint64_t result = v11 + v7;
          *(unsigned char *)(a3 + v11 + v7) = v31;
          ++v11;
        }
        while (v11 != a6);
      }
      int v9 = a5 - 2;
      a3 += 2 * v7;
      a2 += 2;
      BOOL v8 = a5 <= 3;
      a5 -= 2;
    }
    while (!v8);
  }
  if (v9 >= 1)
  {
    uint64_t v32 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v33 = 0;
        do
        {
          double v34 = (unsigned __int8 *)(*a2 + v33);
          unsigned __int8 v35 = *v34;
          unsigned __int8 v36 = v34[1];
          uint64_t result = v34[2];
          unsigned __int8 v37 = v34[3];
          if ((int)v6 >= 2)
          {
            uint64_t v38 = 8;
            do
            {
              uint64_t v39 = (unsigned __int8 *)(a2[(unint64_t)v38 / 8] + v33);
              v35 += icvSaturate8u_cv[*v39 - v35 + 256];
              v36 += icvSaturate8u_cv[v39[1] - v36 + 256];
              uint64_t result = icvSaturate8u_cv[v39[2] - result + 256] + result;
              v37 += icvSaturate8u_cv[v39[3] - v37 + 256];
              v38 += 8;
            }
            while (v32 != v38);
          }
          *(unsigned char *)(a3 + v33) = v35;
          *(unsigned char *)(a3 + (v33 | 1)) = v36;
          *(unsigned char *)(a3 + (v33 | 2)) = result;
          *(unsigned char *)(a3 + (v33 | 3)) = v37;
          v33 += 4;
        }
        while (v33 <= a6 - 4);
        uint64_t v33 = v33;
      }
      else
      {
        uint64_t v33 = 0;
      }
      if ((int)v33 < a6)
      {
        do
        {
          unsigned __int8 v40 = *(unsigned char *)(*a2 + v33);
          if ((int)v6 >= 2)
          {
            uint64_t v41 = 8;
            do
            {
              uint64_t result = icvSaturate8u_cv[*(unsigned __int8 *)(a2[(unint64_t)v41 / 8] + v33) - v40 + 256];
              v40 += result;
              v41 += 8;
            }
            while (v32 != v41);
          }
          *(unsigned char *)(a3 + v33++) = v40;
        }
        while (v33 != a6);
      }
      a3 += v7;
      ++a2;
      BOOL v42 = __OFSUB__(v9--, 1);
    }
    while (!((v9 < 0) ^ v42 | (v9 == 0)));
  }
  return result;
}

void cv::MorphColumnFilter<cv::MaxOp<unsigned short>,cv::MorphColumnNoVec>::~MorphColumnFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphColumnFilter<cv::MaxOp<unsigned short>,cv::MorphColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = *(unsigned int *)(result + 8);
  int v7 = a4 >> 1;
  BOOL v8 = (int)v6 <= 1 || a5 <= 1;
  if (v8)
  {
    int v9 = a5;
  }
  else
  {
    uint64_t v10 = (int)(a4 & 0xFFFFFFFE);
    uint64_t v11 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t result = *a2;
        uint64_t v13 = a2[1];
        do
        {
          uint64_t v14 = 2 * v12;
          uint16x4_t v15 = *(uint16x4_t *)(v13 + 2 * v12);
          if (v6 < 3)
          {
            unsigned int v17 = 2;
          }
          else
          {
            uint64_t v16 = 16;
            do
            {
              uint16x4_t v15 = vmax_u16(v15, *(uint16x4_t *)(a2[(unint64_t)v16 / 8] + 2 * v12));
              v16 += 8;
            }
            while (v11 != v16);
            unsigned int v17 = v6;
          }
          uint64_t v18 = (unsigned __int16 *)(result + 2 * v12);
          unsigned int v19 = *v18;
          if (v15.u16[0] > v19) {
            LOWORD(v19) = v15.i16[0];
          }
          *(_WORD *)(a3 + 2 * v12) = v19;
          unsigned int v20 = v18[1];
          if (v15.u16[1] > v20) {
            LOWORD(v20) = v15.i16[1];
          }
          *(_WORD *)(a3 + (v14 | 2)) = v20;
          unsigned int v21 = v18[2];
          if (v15.u16[2] > v21) {
            LOWORD(v21) = v15.i16[2];
          }
          *(_WORD *)(a3 + (v14 | 4)) = v21;
          unsigned int v22 = v18[3];
          if (v15.u16[3] > v22) {
            LOWORD(v22) = v15.i16[3];
          }
          *(_WORD *)(a3 + (v14 | 6)) = v22;
          double v23 = (unsigned __int16 *)(a2[v17] + 2 * v12);
          unsigned int v24 = *v23;
          if (v15.u16[0] > v24) {
            LOWORD(v24) = v15.i16[0];
          }
          double v25 = (_WORD *)(a3 + 2 * (v12 + v7));
          *double v25 = v24;
          unsigned int v26 = v23[1];
          if (v15.u16[1] > v26) {
            LOWORD(v26) = v15.i16[1];
          }
          v25[1] = v26;
          unsigned int v27 = v23[2];
          if (v15.u16[2] > v27) {
            LOWORD(v27) = v15.i16[2];
          }
          v25[2] = v27;
          unsigned int v28 = v23[3];
          if (v15.u16[3] > v28) {
            LOWORD(v28) = v15.i16[3];
          }
          v25[3] = v28;
          v12 += 4;
        }
        while (v12 <= a6 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < a6)
      {
        uint64_t result = *a2;
        uint64_t v29 = a2[1];
        do
        {
          unsigned int v30 = *(unsigned __int16 *)(v29 + 2 * v12);
          if (v6 < 3)
          {
            unsigned int v32 = 2;
          }
          else
          {
            uint64_t v31 = 16;
            do
            {
              unsigned int v30 = (unsigned __int16)v30;
              if ((unsigned __int16)v30 <= *(unsigned __int16 *)(a2[(unint64_t)v31 / 8] + 2 * v12)) {
                unsigned int v30 = *(unsigned __int16 *)(a2[(unint64_t)v31 / 8] + 2 * v12);
              }
              v31 += 8;
            }
            while (v11 != v31);
            unsigned int v32 = v6;
          }
          unsigned int v33 = *(unsigned __int16 *)(result + 2 * v12);
          if (v30 > v33) {
            LOWORD(v33) = v30;
          }
          *(_WORD *)(a3 + 2 * v12) = v33;
          unsigned int v34 = *(unsigned __int16 *)(a2[v32] + 2 * v12);
          if (v30 <= v34) {
            LOWORD(v30) = v34;
          }
          *(_WORD *)(a3 + 2 * (v12 + v7)) = v30;
          ++v12;
        }
        while (v12 != a6);
      }
      int v9 = a5 - 2;
      a3 += 2 * v10;
      a2 += 2;
      BOOL v8 = a5 <= 3;
      a5 -= 2;
    }
    while (!v8);
  }
  if (v9 >= 1)
  {
    uint64_t v35 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v36 = 0;
        uint64_t v37 = *a2;
        do
        {
          uint16x4_t v38 = *(uint16x4_t *)(v37 + 2 * v36);
          if ((int)v6 >= 2)
          {
            uint64_t v39 = 8;
            do
            {
              uint64_t result = a2[(unint64_t)v39 / 8];
              uint16x4_t v38 = vmax_u16(v38, *(uint16x4_t *)(result + 2 * v36));
              v39 += 8;
            }
            while (v35 != v39);
          }
          *(uint16x4_t *)(a3 + 2 * v36) = v38;
          v36 += 4;
        }
        while (v36 <= a6 - 4);
        uint64_t v36 = v36;
      }
      else
      {
        uint64_t v36 = 0;
      }
      if ((int)v36 < a6)
      {
        uint64_t v40 = *a2;
        do
        {
          unsigned __int16 v41 = *(_WORD *)(v40 + 2 * v36);
          if ((int)v6 >= 2)
          {
            uint64_t v42 = 8;
            do
            {
              uint64_t result = *(unsigned __int16 *)(a2[(unint64_t)v42 / 8] + 2 * v36);
              if (v41 <= result) {
                unsigned __int16 v41 = *(_WORD *)(a2[(unint64_t)v42 / 8] + 2 * v36);
              }
              v42 += 8;
            }
            while (v35 != v42);
          }
          *(_WORD *)(a3 + 2 * v36++) = v41;
        }
        while (v36 != a6);
      }
      a3 += 2 * v7;
      ++a2;
      BOOL v43 = __OFSUB__(v9--, 1);
    }
    while (!((v9 < 0) ^ v43 | (v9 == 0)));
  }
  return result;
}

void cv::MorphColumnFilter<cv::MaxOp<short>,cv::MorphColumnNoVec>::~MorphColumnFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphColumnFilter<cv::MaxOp<short>,cv::MorphColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = *(unsigned int *)(result + 8);
  int v7 = a4 >> 1;
  BOOL v8 = (int)v6 <= 1 || a5 <= 1;
  if (v8)
  {
    int v9 = a5;
  }
  else
  {
    uint64_t v10 = (int)(a4 & 0xFFFFFFFE);
    uint64_t v11 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v12 = 0;
        uint64_t result = *a2;
        uint64_t v13 = a2[1];
        do
        {
          uint64_t v14 = 2 * v12;
          int16x4_t v15 = *(int16x4_t *)(v13 + 2 * v12);
          if (v6 < 3)
          {
            unsigned int v17 = 2;
          }
          else
          {
            uint64_t v16 = 16;
            do
            {
              int16x4_t v15 = vmax_s16(v15, *(int16x4_t *)(a2[(unint64_t)v16 / 8] + 2 * v12));
              v16 += 8;
            }
            while (v11 != v16);
            unsigned int v17 = v6;
          }
          uint64_t v18 = (__int16 *)(result + 2 * v12);
          int v19 = *v18;
          if (v15.i16[0] > v19) {
            LOWORD(v19) = v15.i16[0];
          }
          *(_WORD *)(a3 + 2 * v12) = v19;
          int v20 = v18[1];
          if (v15.i16[1] > v20) {
            LOWORD(v20) = v15.i16[1];
          }
          *(_WORD *)(a3 + (v14 | 2)) = v20;
          int v21 = v18[2];
          if (v15.i16[2] > v21) {
            LOWORD(v21) = v15.i16[2];
          }
          *(_WORD *)(a3 + (v14 | 4)) = v21;
          int v22 = v18[3];
          if (v15.i16[3] > v22) {
            LOWORD(v22) = v15.i16[3];
          }
          *(_WORD *)(a3 + (v14 | 6)) = v22;
          double v23 = (__int16 *)(a2[v17] + 2 * v12);
          int v24 = *v23;
          if (v15.i16[0] > v24) {
            LOWORD(v24) = v15.i16[0];
          }
          double v25 = (_WORD *)(a3 + 2 * (v12 + v7));
          *double v25 = v24;
          int v26 = v23[1];
          if (v15.i16[1] > v26) {
            LOWORD(v26) = v15.i16[1];
          }
          v25[1] = v26;
          int v27 = v23[2];
          if (v15.i16[2] > v27) {
            LOWORD(v27) = v15.i16[2];
          }
          v25[2] = v27;
          int v28 = v23[3];
          if (v15.i16[3] > v28) {
            LOWORD(v28) = v15.i16[3];
          }
          v25[3] = v28;
          v12 += 4;
        }
        while (v12 <= a6 - 4);
        uint64_t v12 = v12;
      }
      else
      {
        uint64_t v12 = 0;
      }
      if ((int)v12 < a6)
      {
        uint64_t result = *a2;
        uint64_t v29 = a2[1];
        do
        {
          __int16 v30 = *(_WORD *)(v29 + 2 * v12);
          if (v6 < 3)
          {
            unsigned int v32 = 2;
          }
          else
          {
            uint64_t v31 = 16;
            do
            {
              if (v30 <= *(__int16 *)(a2[(unint64_t)v31 / 8] + 2 * v12)) {
                __int16 v30 = *(_WORD *)(a2[(unint64_t)v31 / 8] + 2 * v12);
              }
              v31 += 8;
            }
            while (v11 != v31);
            unsigned int v32 = v6;
          }
          int v33 = *(__int16 *)(result + 2 * v12);
          if (v30 > v33) {
            LOWORD(v33) = v30;
          }
          *(_WORD *)(a3 + 2 * v12) = v33;
          int v34 = *(__int16 *)(a2[v32] + 2 * v12);
          if (v30 <= v34) {
            __int16 v30 = v34;
          }
          *(_WORD *)(a3 + 2 * (v12 + v7)) = v30;
          ++v12;
        }
        while (v12 != a6);
      }
      int v9 = a5 - 2;
      a3 += 2 * v10;
      a2 += 2;
      BOOL v8 = a5 <= 3;
      a5 -= 2;
    }
    while (!v8);
  }
  if (v9 >= 1)
  {
    uint64_t v35 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v36 = 0;
        uint64_t v37 = *a2;
        do
        {
          int16x4_t v38 = *(int16x4_t *)(v37 + 2 * v36);
          if ((int)v6 >= 2)
          {
            uint64_t v39 = 8;
            do
            {
              uint64_t result = a2[(unint64_t)v39 / 8];
              int16x4_t v38 = vmax_s16(v38, *(int16x4_t *)(result + 2 * v36));
              v39 += 8;
            }
            while (v35 != v39);
          }
          *(int16x4_t *)(a3 + 2 * v36) = v38;
          v36 += 4;
        }
        while (v36 <= a6 - 4);
        uint64_t v36 = v36;
      }
      else
      {
        uint64_t v36 = 0;
      }
      if ((int)v36 < a6)
      {
        uint64_t v40 = *a2;
        do
        {
          __int16 v41 = *(_WORD *)(v40 + 2 * v36);
          if ((int)v6 >= 2)
          {
            uint64_t v42 = 8;
            do
            {
              uint64_t result = *(__int16 *)(a2[(unint64_t)v42 / 8] + 2 * v36);
              if (v41 <= (int)result) {
                __int16 v41 = *(_WORD *)(a2[(unint64_t)v42 / 8] + 2 * v36);
              }
              v42 += 8;
            }
            while (v35 != v42);
          }
          *(_WORD *)(a3 + 2 * v36++) = v41;
        }
        while (v36 != a6);
      }
      a3 += 2 * v7;
      ++a2;
      BOOL v43 = __OFSUB__(v9--, 1);
    }
    while (!((v9 < 0) ^ v43 | (v9 == 0)));
  }
  return result;
}

void cv::MorphColumnFilter<cv::MaxOp<float>,cv::MorphColumnNoVec>::~MorphColumnFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphColumnFilter<cv::MaxOp<float>,cv::MorphColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = *(unsigned int *)(result + 8);
  int v7 = a4 >> 2;
  BOOL v8 = (int)v6 <= 1 || a5 <= 1;
  if (v8)
  {
    int v9 = a5;
  }
  else
  {
    uint64_t v10 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t result = *a2;
        uint64_t v12 = a2[1];
        do
        {
          uint64_t v13 = 4 * v11;
          float32x4_t v14 = *(float32x4_t *)(v12 + 4 * v11);
          if (v6 < 3)
          {
            unsigned int v17 = 2;
          }
          else
          {
            uint64_t v15 = 16;
            do
            {
              float32x4_t v16 = *(float32x4_t *)(a2[(unint64_t)v15 / 8] + 4 * v11);
              float32x4_t v14 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v16, v14), (int8x16_t)v16, (int8x16_t)v14);
              v15 += 8;
            }
            while (v10 != v15);
            unsigned int v17 = v6;
          }
          uint64_t v18 = (float *)(result + 4 * v11);
          float v19 = *v18;
          if (v14.f32[0] >= *v18) {
            float v19 = v14.f32[0];
          }
          *(float *)(a3 + 4 * v11) = v19;
          float v20 = v18[1];
          if (v14.f32[1] >= v20) {
            float v20 = v14.f32[1];
          }
          *(float *)(a3 + (v13 | 4)) = v20;
          float v21 = v18[2];
          if (v14.f32[2] >= v21) {
            float v21 = v14.f32[2];
          }
          *(float *)(a3 + (v13 | 8)) = v21;
          float v22 = v18[3];
          if (v14.f32[3] >= v22) {
            float v22 = v14.f32[3];
          }
          *(float *)(a3 + (v13 | 0xC)) = v22;
          double v23 = (__int32 *)(a2[v17] + 4 * v11);
          if (v14.f32[0] < *(float *)v23) {
            v14.i32[0] = *v23;
          }
          int v24 = (_DWORD *)(a3 + 4 * (v11 + v7));
          *int v24 = v14.i32[0];
          v14.i32[0] = v23[1];
          if (v14.f32[1] >= v14.f32[0]) {
            v14.f32[0] = v14.f32[1];
          }
          v24[1] = v14.i32[0];
          v14.i32[0] = v23[2];
          if (v14.f32[2] >= v14.f32[0]) {
            v14.f32[0] = v14.f32[2];
          }
          v24[2] = v14.i32[0];
          v14.i32[0] = v23[3];
          if (v14.f32[3] >= v14.f32[0]) {
            v14.f32[0] = v14.f32[3];
          }
          v24[3] = v14.i32[0];
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < a6)
      {
        uint64_t result = *a2;
        uint64_t v25 = a2[1];
        do
        {
          float v26 = *(float *)(v25 + 4 * v11);
          if (v6 < 3)
          {
            unsigned int v29 = 2;
          }
          else
          {
            uint64_t v27 = 16;
            do
            {
              uint64_t v28 = a2[(unint64_t)v27 / 8];
              if (v26 < *(float *)(v28 + 4 * v11)) {
                float v26 = *(float *)(v28 + 4 * v11);
              }
              v27 += 8;
            }
            while (v10 != v27);
            unsigned int v29 = v6;
          }
          float v30 = *(float *)(result + 4 * v11);
          if (v26 >= v30) {
            float v30 = v26;
          }
          *(float *)(a3 + 4 * v11) = v30;
          uint64_t v31 = a2[v29];
          if (v26 < *(float *)(v31 + 4 * v11)) {
            float v26 = *(float *)(v31 + 4 * v11);
          }
          *(float *)(a3 + 4 * (v11 + v7)) = v26;
          ++v11;
        }
        while (v11 != a6);
      }
      int v9 = a5 - 2;
      a3 += 8 * v7;
      a2 += 2;
      BOOL v8 = a5 <= 3;
      a5 -= 2;
    }
    while (!v8);
  }
  if (v9 >= 1)
  {
    uint64_t v32 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v33 = 0;
        uint64_t v34 = *a2;
        do
        {
          float32x4_t v35 = *(float32x4_t *)(v34 + 4 * v33);
          if ((int)v6 >= 2)
          {
            uint64_t v36 = 8;
            do
            {
              uint64_t result = a2[(unint64_t)v36 / 8];
              float32x4_t v35 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 4 * v33), v35), *(int8x16_t *)(result + 4 * v33), (int8x16_t)v35);
              v36 += 8;
            }
            while (v32 != v36);
          }
          *(float32x4_t *)(a3 + 4 * v33) = v35;
          v33 += 4;
        }
        while (v33 <= a6 - 4);
        uint64_t v33 = v33;
      }
      else
      {
        uint64_t v33 = 0;
      }
      if ((int)v33 < a6)
      {
        uint64_t v37 = *a2;
        do
        {
          float v38 = *(float *)(v37 + 4 * v33);
          if ((int)v6 >= 2)
          {
            uint64_t v39 = 8;
            do
            {
              uint64_t v40 = a2[(unint64_t)v39 / 8];
              if (v38 < *(float *)(v40 + 4 * v33)) {
                float v38 = *(float *)(v40 + 4 * v33);
              }
              v39 += 8;
            }
            while (v32 != v39);
          }
          *(float *)(a3 + 4 * v33++) = v38;
        }
        while (v33 != a6);
      }
      a3 += 4 * v7;
      ++a2;
      BOOL v41 = __OFSUB__(v9--, 1);
    }
    while (!((v9 < 0) ^ v41 | (v9 == 0)));
  }
  return result;
}

void cv::MorphColumnFilter<cv::MaxOp<double>,cv::MorphColumnNoVec>::~MorphColumnFilter(cv::BaseRowFilter *a1)
{
  cv::BaseRowFilter::~BaseRowFilter(a1);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphColumnFilter<cv::MaxOp<double>,cv::MorphColumnNoVec>::operator()(uint64_t result, uint64_t *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = *(unsigned int *)(result + 8);
  int v7 = a4 >> 3;
  BOOL v8 = (int)v6 <= 1 || a5 <= 1;
  if (v8)
  {
    int v9 = a5;
  }
  else
  {
    uint64_t v10 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v11 = 0;
        uint64_t result = *a2;
        uint64_t v12 = a2[1];
        do
        {
          uint64_t v13 = (double *)(v12 + 8 * v11);
          double v15 = *v13;
          double v14 = v13[1];
          double v17 = v13[2];
          double v16 = v13[3];
          if (v6 < 3)
          {
            unsigned int v20 = 2;
          }
          else
          {
            uint64_t v18 = 16;
            do
            {
              float v19 = (double *)(a2[(unint64_t)v18 / 8] + 8 * v11);
              if (v15 < *v19) {
                double v15 = *v19;
              }
              if (v14 < v19[1]) {
                double v14 = v19[1];
              }
              if (v17 < v19[2]) {
                double v17 = v19[2];
              }
              if (v16 < v19[3]) {
                double v16 = v19[3];
              }
              v18 += 8;
            }
            while (v10 != v18);
            unsigned int v20 = v6;
          }
          float v21 = (double *)(result + 8 * v11);
          uint64_t v22 = 8 * v11;
          double v23 = *v21;
          if (v15 >= *v21) {
            double v23 = v15;
          }
          *(double *)(a3 + 8 * v11) = v23;
          double v24 = v21[1];
          if (v14 >= v24) {
            double v24 = v14;
          }
          *(double *)(a3 + (v22 | 8)) = v24;
          double v25 = v21[2];
          if (v17 >= v25) {
            double v25 = v17;
          }
          *(double *)(a3 + (v22 | 0x10)) = v25;
          double v26 = v21[3];
          if (v16 >= v26) {
            double v26 = v16;
          }
          *(double *)(a3 + (v22 | 0x18)) = v26;
          uint64_t v27 = (double *)(a2[v20] + 8 * v11);
          if (v15 < *v27) {
            double v15 = *v27;
          }
          uint64_t v28 = (double *)(a3 + 8 * (v11 + v7));
          *uint64_t v28 = v15;
          if (v14 < v27[1]) {
            double v14 = v27[1];
          }
          v28[1] = v14;
          if (v17 < v27[2]) {
            double v17 = v27[2];
          }
          void v28[2] = v17;
          if (v16 < v27[3]) {
            double v16 = v27[3];
          }
          v28[3] = v16;
          v11 += 4;
        }
        while (v11 <= a6 - 4);
        uint64_t v11 = v11;
      }
      else
      {
        uint64_t v11 = 0;
      }
      if ((int)v11 < a6)
      {
        uint64_t result = *a2;
        uint64_t v29 = a2[1];
        do
        {
          double v30 = *(double *)(v29 + 8 * v11);
          if (v6 < 3)
          {
            unsigned int v33 = 2;
          }
          else
          {
            uint64_t v31 = 16;
            do
            {
              uint64_t v32 = a2[(unint64_t)v31 / 8];
              if (v30 < *(double *)(v32 + 8 * v11)) {
                double v30 = *(double *)(v32 + 8 * v11);
              }
              v31 += 8;
            }
            while (v10 != v31);
            unsigned int v33 = v6;
          }
          double v34 = *(double *)(result + 8 * v11);
          if (v30 >= v34) {
            double v34 = v30;
          }
          *(double *)(a3 + 8 * v11) = v34;
          uint64_t v35 = a2[v33];
          if (v30 < *(double *)(v35 + 8 * v11)) {
            double v30 = *(double *)(v35 + 8 * v11);
          }
          *(double *)(a3 + 8 * (v11 + v7)) = v30;
          ++v11;
        }
        while (v11 != a6);
      }
      int v9 = a5 - 2;
      a3 += 16 * v7;
      a2 += 2;
      BOOL v8 = a5 <= 3;
      a5 -= 2;
    }
    while (!v8);
  }
  if (v9 >= 1)
  {
    uint64_t v36 = 8 * v6;
    do
    {
      if (a6 >= 4)
      {
        uint64_t v37 = 0;
        uint64_t v38 = *a2;
        do
        {
          uint64_t v39 = (float64x2_t *)(v38 + 8 * v37);
          float64x2_t v41 = *v39;
          float64x2_t v40 = v39[1];
          if ((int)v6 >= 2)
          {
            uint64_t v42 = 8;
            do
            {
              BOOL v43 = (float64x2_t *)(a2[(unint64_t)v42 / 8] + 8 * v37);
              float64x2_t v41 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*v43, v41), *(int8x16_t *)v43, (int8x16_t)v41);
              float64x2_t v40 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v43[1], v40), (int8x16_t)v43[1], (int8x16_t)v40);
              v42 += 8;
            }
            while (v36 != v42);
          }
          *(float64x2_t *)(a3 + 8 * v37) = v41;
          *(float64x2_t *)(a3 + ((8 * v37) | 0x10)) = v40;
          v37 += 4;
        }
        while (v37 <= a6 - 4);
        uint64_t v37 = v37;
      }
      else
      {
        uint64_t v37 = 0;
      }
      if ((int)v37 < a6)
      {
        uint64_t v44 = *a2;
        do
        {
          double v45 = *(double *)(v44 + 8 * v37);
          if ((int)v6 >= 2)
          {
            uint64_t v46 = 8;
            do
            {
              uint64_t v47 = a2[(unint64_t)v46 / 8];
              if (v45 < *(double *)(v47 + 8 * v37)) {
                double v45 = *(double *)(v47 + 8 * v37);
              }
              v46 += 8;
            }
            while (v36 != v46);
          }
          *(double *)(a3 + 8 * v37++) = v45;
        }
        while (v37 != a6);
      }
      a3 += 8 * v7;
      ++a2;
      BOOL v48 = __OFSUB__(v9--, 1);
    }
    while (!((v9 < 0) ^ v48 | (v9 == 0)));
  }
  return result;
}

void *cv::MorphFilter<cv::MinOp<unsigned char>,cv::MorphNoVec>::MorphFilter(void *a1, int32x2_t **a2, void *a3)
{
  uint64_t v6 = cv::BaseFilter::BaseFilter(a1);
  *(_OWORD *)(v6 + 3) = 0u;
  *uint64_t v6 = &unk_26D98A818;
  uint64_t v7 = (uint64_t)(v6 + 6);
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  v6[2] = *a3;
  v6[1] = vrev64_s32(*a2[8]);
  if ((*(_WORD *)a2 & 0xFFF) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "_kernel.type() == CV_8U");
    std::string::basic_string[abi:ne180100]<0>(v11, "MorphFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(&v13, 4294967081, v12, v11, __p, 783);
    cv::error((cv *)&v13, v8);
  }
  uint64_t v13 = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  cv::preprocess2DKernel((cv::Mat *)a2, v6 + 3, (unint64_t *)&v13);
  std::vector<unsigned char *>::resize(v7, (uint64_t)(a1[4] - a1[3]) >> 3);
  if (v13)
  {
    double v14 = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_225F16714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  uint64_t v32 = *v30;
  if (*v30)
  {
    *((void *)v28 + 7) = v32;
    operator delete(v32);
  }
  unsigned int v33 = *v29;
  if (*v29)
  {
    *((void *)v28 + 4) = v33;
    operator delete(v33);
  }
  cv::BaseRowFilter::~BaseRowFilter(v28);
  _Unwind_Resume(a1);
}

void cv::MorphFilter<cv::MinOp<unsigned char>,cv::MorphNoVec>::~MorphFilter(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D98A818;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D98A818;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphFilter<cv::MinOp<unsigned char>,cv::MorphNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    uint64_t v7 = *(void **)(result + 48);
    unint64_t v8 = (a7 * a6);
    uint64_t v9 = *(void *)(result + 24);
    unint64_t v10 = (unint64_t)(*(void *)(result + 32) - v9) >> 3;
    uint64_t v11 = a4;
    uint64_t v12 = (int *)(v9 + 4);
    do
    {
      uint64_t v13 = v10;
      double v14 = v12;
      uint64_t v15 = v7;
      if ((int)v10 >= 1)
      {
        do
        {
          *v15++ = *(void *)(a2 + 8 * *v14) + *(v14 - 1) * (uint64_t)a7;
          v14 += 2;
          --v13;
        }
        while (v13);
      }
      if ((int)v8 >= 4)
      {
        uint64_t result = 0;
        do
        {
          double v16 = (unsigned __int8 *)(*v7 + result);
          unsigned __int8 v17 = *v16;
          unsigned __int8 v18 = v16[1];
          unsigned __int8 v19 = v16[2];
          unsigned __int8 v20 = v16[3];
          if ((int)v10 >= 2)
          {
            uint64_t v21 = v10 - 1;
            uint64_t v22 = v7 + 1;
            do
            {
              uint64_t v23 = *v22++;
              v17 -= icvSaturate8u_cv[(v17 | 0x100) - *(unsigned __int8 *)(v23 + result)];
              v18 -= icvSaturate8u_cv[(v18 | 0x100) - *(unsigned __int8 *)(v23 + result + 1)];
              v19 -= icvSaturate8u_cv[(v19 | 0x100) - *(unsigned __int8 *)(v23 + result + 2)];
              v20 -= icvSaturate8u_cv[(v20 | 0x100) - *(unsigned __int8 *)(v23 + result + 3)];
              --v21;
            }
            while (v21);
          }
          *(unsigned char *)(a3 + result) = v17;
          *(unsigned char *)(a3 + (result | 1)) = v18;
          *(unsigned char *)(a3 + (result | 2)) = v19;
          *(unsigned char *)(a3 + (result | 3)) = v20;
          result += 4;
        }
        while (result <= (int)v8 - 4);
        uint64_t result = result;
      }
      else
      {
        uint64_t result = 0;
      }
      if ((int)result < (int)v8)
      {
        do
        {
          unsigned __int8 v24 = *(unsigned char *)(*v7 + result);
          if ((int)v10 >= 2)
          {
            uint64_t v25 = v10 - 1;
            double v26 = v7 + 1;
            do
            {
              uint64_t v27 = *v26++;
              v24 -= icvSaturate8u_cv[(v24 | 0x100) - *(unsigned __int8 *)(v27 + result)];
              --v25;
            }
            while (v25);
          }
          *(unsigned char *)(a3 + result++) = v24;
        }
        while (result != v8);
      }
      a3 += v11;
      a2 += 8;
      BOOL v28 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v28 | (a5 == 0)));
  }
  return result;
}

void *cv::MorphFilter<cv::MinOp<unsigned short>,cv::MorphNoVec>::MorphFilter(void *a1, int32x2_t **a2, void *a3)
{
  uint64_t v6 = cv::BaseFilter::BaseFilter(a1);
  *(_OWORD *)(v6 + 3) = 0u;
  *uint64_t v6 = &unk_26D98A860;
  uint64_t v7 = (uint64_t)(v6 + 6);
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  v6[2] = *a3;
  v6[1] = vrev64_s32(*a2[8]);
  if ((*(_WORD *)a2 & 0xFFF) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "_kernel.type() == CV_8U");
    std::string::basic_string[abi:ne180100]<0>(v11, "MorphFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(&v13, 4294967081, v12, v11, __p, 783);
    cv::error((cv *)&v13, v8);
  }
  uint64_t v13 = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  cv::preprocess2DKernel((cv::Mat *)a2, v6 + 3, (unint64_t *)&v13);
  std::vector<unsigned char *>::resize(v7, (uint64_t)(a1[4] - a1[3]) >> 3);
  if (v13)
  {
    double v14 = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_225F16BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  uint64_t v32 = *v30;
  if (*v30)
  {
    *((void *)v28 + 7) = v32;
    operator delete(v32);
  }
  unsigned int v33 = *v29;
  if (*v29)
  {
    *((void *)v28 + 4) = v33;
    operator delete(v33);
  }
  cv::BaseRowFilter::~BaseRowFilter(v28);
  _Unwind_Resume(a1);
}

void cv::MorphFilter<cv::MinOp<unsigned short>,cv::MorphNoVec>::~MorphFilter(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D98A860;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D98A860;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void *cv::MorphFilter<cv::MinOp<unsigned short>,cv::MorphNoVec>::operator()(void *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    uint64_t v7 = (a7 * a6);
    uint64_t v8 = result[3];
    uint64_t v9 = (void **)result[6];
    unint64_t v10 = (unint64_t)(result[4] - v8) >> 3;
    uint64_t v11 = a4;
    uint64_t v12 = (void *)(v8 + 4);
    do
    {
      uint64_t v13 = v10;
      uint64_t result = v12;
      double v14 = v9;
      if ((int)v10 >= 1)
      {
        do
        {
          *v14++ = *(void *)(a2 + 8 * *(int *)result) + 2 * *((_DWORD *)result - 1) * a7;
          ++result;
          --v13;
        }
        while (v13);
      }
      if ((int)v7 >= 4)
      {
        uint64_t v15 = 0;
        uint64_t result = *v9;
        do
        {
          uint16x4_t v16 = *(uint16x4_t *)((char *)result + 2 * v15);
          if ((int)v10 >= 2)
          {
            uint64_t v17 = v10 - 1;
            unsigned __int8 v18 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v19 = *v18++;
              uint16x4_t v16 = vmin_u16(*(uint16x4_t *)(v19 + 2 * v15), v16);
              --v17;
            }
            while (v17);
          }
          *(uint16x4_t *)(a3 + 2 * v15) = v16;
          v15 += 4;
        }
        while (v15 <= (int)v7 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v7)
      {
        uint64_t result = *v9;
        do
        {
          unsigned __int16 v20 = *((_WORD *)result + v15);
          if ((int)v10 >= 2)
          {
            uint64_t v21 = v10 - 1;
            uint64_t v22 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v23 = *v22++;
              unsigned int v24 = *(unsigned __int16 *)(v23 + 2 * v15);
              if (v24 < v20) {
                unsigned __int16 v20 = v24;
              }
              --v21;
            }
            while (v21);
          }
          *(_WORD *)(a3 + 2 * v15++) = v20;
        }
        while (v15 != v7);
      }
      a3 += v11;
      a2 += 8;
      BOOL v25 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v25 | (a5 == 0)));
  }
  return result;
}

void *cv::MorphFilter<cv::MinOp<short>,cv::MorphNoVec>::MorphFilter(void *a1, int32x2_t **a2, void *a3)
{
  uint64_t v6 = cv::BaseFilter::BaseFilter(a1);
  *(_OWORD *)(v6 + 3) = 0u;
  *uint64_t v6 = &unk_26D98A8A8;
  uint64_t v7 = (uint64_t)(v6 + 6);
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  v6[2] = *a3;
  v6[1] = vrev64_s32(*a2[8]);
  if ((*(_WORD *)a2 & 0xFFF) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "_kernel.type() == CV_8U");
    std::string::basic_string[abi:ne180100]<0>(v11, "MorphFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(&v13, 4294967081, v12, v11, __p, 783);
    cv::error((cv *)&v13, v8);
  }
  uint64_t v13 = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  cv::preprocess2DKernel((cv::Mat *)a2, v6 + 3, (unint64_t *)&v13);
  std::vector<unsigned char *>::resize(v7, (uint64_t)(a1[4] - a1[3]) >> 3);
  if (v13)
  {
    double v14 = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_225F17004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  uint64_t v32 = *v30;
  if (*v30)
  {
    *((void *)v28 + 7) = v32;
    operator delete(v32);
  }
  unsigned int v33 = *v29;
  if (*v29)
  {
    *((void *)v28 + 4) = v33;
    operator delete(v33);
  }
  cv::BaseRowFilter::~BaseRowFilter(v28);
  _Unwind_Resume(a1);
}

void cv::MorphFilter<cv::MinOp<short>,cv::MorphNoVec>::~MorphFilter(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D98A8A8;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D98A8A8;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void *cv::MorphFilter<cv::MinOp<short>,cv::MorphNoVec>::operator()(void *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    uint64_t v7 = (a7 * a6);
    uint64_t v8 = result[3];
    uint64_t v9 = (void **)result[6];
    unint64_t v10 = (unint64_t)(result[4] - v8) >> 3;
    uint64_t v11 = a4;
    uint64_t v12 = (void *)(v8 + 4);
    do
    {
      uint64_t v13 = v10;
      uint64_t result = v12;
      double v14 = v9;
      if ((int)v10 >= 1)
      {
        do
        {
          *v14++ = *(void *)(a2 + 8 * *(int *)result) + 2 * *((_DWORD *)result - 1) * a7;
          ++result;
          --v13;
        }
        while (v13);
      }
      if ((int)v7 >= 4)
      {
        uint64_t v15 = 0;
        uint64_t result = *v9;
        do
        {
          int16x4_t v16 = *(int16x4_t *)((char *)result + 2 * v15);
          if ((int)v10 >= 2)
          {
            uint64_t v17 = v10 - 1;
            unsigned __int8 v18 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v19 = *v18++;
              int16x4_t v16 = vmin_s16(*(int16x4_t *)(v19 + 2 * v15), v16);
              --v17;
            }
            while (v17);
          }
          *(int16x4_t *)(a3 + 2 * v15) = v16;
          v15 += 4;
        }
        while (v15 <= (int)v7 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v7)
      {
        uint64_t result = *v9;
        do
        {
          __int16 v20 = *((_WORD *)result + v15);
          if ((int)v10 >= 2)
          {
            uint64_t v21 = v10 - 1;
            uint64_t v22 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v23 = *v22++;
              int v24 = *(__int16 *)(v23 + 2 * v15);
              if (v24 < v20) {
                __int16 v20 = v24;
              }
              --v21;
            }
            while (v21);
          }
          *(_WORD *)(a3 + 2 * v15++) = v20;
        }
        while (v15 != v7);
      }
      a3 += v11;
      a2 += 8;
      BOOL v25 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v25 | (a5 == 0)));
  }
  return result;
}

void *cv::MorphFilter<cv::MinOp<float>,cv::MorphNoVec>::MorphFilter(void *a1, int32x2_t **a2, void *a3)
{
  uint64_t v6 = cv::BaseFilter::BaseFilter(a1);
  *(_OWORD *)(v6 + 3) = 0u;
  *uint64_t v6 = &unk_26D98A8F0;
  uint64_t v7 = (uint64_t)(v6 + 6);
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  v6[2] = *a3;
  v6[1] = vrev64_s32(*a2[8]);
  if ((*(_WORD *)a2 & 0xFFF) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "_kernel.type() == CV_8U");
    std::string::basic_string[abi:ne180100]<0>(v11, "MorphFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(&v13, 4294967081, v12, v11, __p, 783);
    cv::error((cv *)&v13, v8);
  }
  uint64_t v13 = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  cv::preprocess2DKernel((cv::Mat *)a2, v6 + 3, (unint64_t *)&v13);
  std::vector<unsigned char *>::resize(v7, (uint64_t)(a1[4] - a1[3]) >> 3);
  if (v13)
  {
    double v14 = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_225F17430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  uint64_t v32 = *v30;
  if (*v30)
  {
    *((void *)v28 + 7) = v32;
    operator delete(v32);
  }
  unsigned int v33 = *v29;
  if (*v29)
  {
    *((void *)v28 + 4) = v33;
    operator delete(v33);
  }
  cv::BaseRowFilter::~BaseRowFilter(v28);
  _Unwind_Resume(a1);
}

void cv::MorphFilter<cv::MinOp<float>,cv::MorphNoVec>::~MorphFilter(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D98A8F0;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D98A8F0;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void *cv::MorphFilter<cv::MinOp<float>,cv::MorphNoVec>::operator()(void *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    uint64_t v7 = (a7 * a6);
    uint64_t v8 = result[3];
    uint64_t v9 = (void **)result[6];
    unint64_t v10 = (unint64_t)(result[4] - v8) >> 3;
    uint64_t v11 = a4;
    uint64_t v12 = (void *)(v8 + 4);
    do
    {
      uint64_t v13 = v10;
      uint64_t result = v12;
      double v14 = v9;
      if ((int)v10 >= 1)
      {
        do
        {
          *v14++ = *(void *)(a2 + 8 * *(int *)result) + 4 * *((_DWORD *)result - 1) * a7;
          ++result;
          --v13;
        }
        while (v13);
      }
      if ((int)v7 >= 4)
      {
        uint64_t v15 = 0;
        uint64_t result = *v9;
        do
        {
          float32x4_t v16 = *(float32x4_t *)((char *)result + 4 * v15);
          if ((int)v10 >= 2)
          {
            uint64_t v17 = v10 - 1;
            unsigned __int8 v18 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v19 = *v18++;
              float32x4_t v16 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v16, *(float32x4_t *)(v19 + 4 * v15)), *(int8x16_t *)(v19 + 4 * v15), (int8x16_t)v16);
              --v17;
            }
            while (v17);
          }
          *(float32x4_t *)(a3 + 4 * v15) = v16;
          v15 += 4;
        }
        while (v15 <= (int)v7 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v7)
      {
        uint64_t result = *v9;
        do
        {
          float v20 = *((float *)result + v15);
          if ((int)v10 >= 2)
          {
            uint64_t v21 = v10 - 1;
            uint64_t v22 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v23 = *v22++;
              float v24 = *(float *)(v23 + 4 * v15);
              if (v24 < v20) {
                float v20 = v24;
              }
              --v21;
            }
            while (v21);
          }
          *(float *)(a3 + 4 * v15++) = v20;
        }
        while (v15 != v7);
      }
      a3 += v11;
      a2 += 8;
      BOOL v25 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v25 | (a5 == 0)));
  }
  return result;
}

void *cv::MorphFilter<cv::MinOp<double>,cv::MorphNoVec>::MorphFilter(void *a1, int32x2_t **a2, void *a3)
{
  uint64_t v6 = cv::BaseFilter::BaseFilter(a1);
  *(_OWORD *)(v6 + 3) = 0u;
  *uint64_t v6 = &unk_26D98A938;
  uint64_t v7 = (uint64_t)(v6 + 6);
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  v6[2] = *a3;
  v6[1] = vrev64_s32(*a2[8]);
  if ((*(_WORD *)a2 & 0xFFF) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "_kernel.type() == CV_8U");
    std::string::basic_string[abi:ne180100]<0>(v11, "MorphFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(&v13, 4294967081, v12, v11, __p, 783);
    cv::error((cv *)&v13, v8);
  }
  uint64_t v13 = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  cv::preprocess2DKernel((cv::Mat *)a2, v6 + 3, (unint64_t *)&v13);
  std::vector<unsigned char *>::resize(v7, (uint64_t)(a1[4] - a1[3]) >> 3);
  if (v13)
  {
    double v14 = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_225F1785C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  uint64_t v32 = *v30;
  if (*v30)
  {
    *((void *)v28 + 7) = v32;
    operator delete(v32);
  }
  unsigned int v33 = *v29;
  if (*v29)
  {
    *((void *)v28 + 4) = v33;
    operator delete(v33);
  }
  cv::BaseRowFilter::~BaseRowFilter(v28);
  _Unwind_Resume(a1);
}

void cv::MorphFilter<cv::MinOp<double>,cv::MorphNoVec>::~MorphFilter(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D98A938;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D98A938;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void *cv::MorphFilter<cv::MinOp<double>,cv::MorphNoVec>::operator()(void *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    uint64_t v7 = (a7 * a6);
    uint64_t v8 = result[3];
    uint64_t v9 = (void **)result[6];
    unint64_t v10 = (unint64_t)(result[4] - v8) >> 3;
    uint64_t v11 = a4;
    uint64_t v12 = (void *)(v8 + 4);
    do
    {
      uint64_t v13 = v10;
      uint64_t result = v12;
      double v14 = v9;
      if ((int)v10 >= 1)
      {
        do
        {
          *v14++ = *(void *)(a2 + 8 * *(int *)result) + 8 * *((_DWORD *)result - 1) * a7;
          ++result;
          --v13;
        }
        while (v13);
      }
      if ((int)v7 >= 4)
      {
        uint64_t v15 = 0;
        uint64_t result = *v9;
        do
        {
          float32x4_t v16 = (float64x2_t *)&result[v15];
          float64x2_t v18 = *v16;
          float64x2_t v17 = v16[1];
          if ((int)v10 >= 2)
          {
            uint64_t v19 = v10 - 1;
            float v20 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v21 = *v20++;
              uint64_t v22 = (float64x2_t *)(v21 + 8 * v15);
              float64x2_t v18 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v18, *v22), *(int8x16_t *)v22, (int8x16_t)v18);
              float64x2_t v17 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v17, v22[1]), (int8x16_t)v22[1], (int8x16_t)v17);
              --v19;
            }
            while (v19);
          }
          *(float64x2_t *)(a3 + 8 * v15) = v18;
          *(float64x2_t *)(a3 + ((8 * v15) | 0x10)) = v17;
          v15 += 4;
        }
        while (v15 <= (int)v7 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v7)
      {
        uint64_t result = *v9;
        do
        {
          double v23 = *(double *)&result[v15];
          if ((int)v10 >= 2)
          {
            uint64_t v24 = v10 - 1;
            BOOL v25 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v26 = *v25++;
              double v27 = *(double *)(v26 + 8 * v15);
              if (v27 < v23) {
                double v23 = v27;
              }
              --v24;
            }
            while (v24);
          }
          *(double *)(a3 + 8 * v15++) = v23;
        }
        while (v15 != v7);
      }
      a3 += v11;
      a2 += 8;
      BOOL v28 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v28 | (a5 == 0)));
  }
  return result;
}

void *cv::MorphFilter<cv::MaxOp<unsigned char>,cv::MorphNoVec>::MorphFilter(void *a1, int32x2_t **a2, void *a3)
{
  uint64_t v6 = cv::BaseFilter::BaseFilter(a1);
  *(_OWORD *)(v6 + 3) = 0u;
  *uint64_t v6 = &unk_26D98A980;
  uint64_t v7 = (uint64_t)(v6 + 6);
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  v6[2] = *a3;
  v6[1] = vrev64_s32(*a2[8]);
  if ((*(_WORD *)a2 & 0xFFF) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "_kernel.type() == CV_8U");
    std::string::basic_string[abi:ne180100]<0>(v11, "MorphFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(&v13, 4294967081, v12, v11, __p, 783);
    cv::error((cv *)&v13, v8);
  }
  uint64_t v13 = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  cv::preprocess2DKernel((cv::Mat *)a2, v6 + 3, (unint64_t *)&v13);
  std::vector<unsigned char *>::resize(v7, (uint64_t)(a1[4] - a1[3]) >> 3);
  if (v13)
  {
    double v14 = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_225F17C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  uint64_t v32 = *v30;
  if (*v30)
  {
    *((void *)v28 + 7) = v32;
    operator delete(v32);
  }
  unsigned int v33 = *v29;
  if (*v29)
  {
    *((void *)v28 + 4) = v33;
    operator delete(v33);
  }
  cv::BaseRowFilter::~BaseRowFilter(v28);
  _Unwind_Resume(a1);
}

void cv::MorphFilter<cv::MaxOp<unsigned char>,cv::MorphNoVec>::~MorphFilter(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D98A980;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D98A980;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

uint64_t cv::MorphFilter<cv::MaxOp<unsigned char>,cv::MorphNoVec>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    uint64_t v7 = *(void **)(result + 48);
    unint64_t v8 = (a7 * a6);
    uint64_t v9 = *(void *)(result + 24);
    unint64_t v10 = (unint64_t)(*(void *)(result + 32) - v9) >> 3;
    uint64_t v11 = a4;
    uint64_t v12 = (int *)(v9 + 4);
    do
    {
      uint64_t v13 = v10;
      double v14 = v12;
      uint64_t v15 = v7;
      if ((int)v10 >= 1)
      {
        do
        {
          *v15++ = *(void *)(a2 + 8 * *v14) + *(v14 - 1) * (uint64_t)a7;
          v14 += 2;
          --v13;
        }
        while (v13);
      }
      if ((int)v8 >= 4)
      {
        uint64_t result = 0;
        do
        {
          float32x4_t v16 = (unsigned __int8 *)(*v7 + result);
          unsigned __int8 v17 = *v16;
          unsigned __int8 v18 = v16[1];
          unsigned __int8 v19 = v16[2];
          unsigned __int8 v20 = v16[3];
          if ((int)v10 >= 2)
          {
            uint64_t v21 = v10 - 1;
            uint64_t v22 = v7 + 1;
            do
            {
              uint64_t v23 = *v22++;
              v17 += icvSaturate8u_cv[*(unsigned __int8 *)(v23 + result) - v17 + 256];
              v18 += icvSaturate8u_cv[*(unsigned __int8 *)(v23 + result + 1) - v18 + 256];
              v19 += icvSaturate8u_cv[*(unsigned __int8 *)(v23 + result + 2) - v19 + 256];
              v20 += icvSaturate8u_cv[*(unsigned __int8 *)(v23 + result + 3) - v20 + 256];
              --v21;
            }
            while (v21);
          }
          *(unsigned char *)(a3 + result) = v17;
          *(unsigned char *)(a3 + (result | 1)) = v18;
          *(unsigned char *)(a3 + (result | 2)) = v19;
          *(unsigned char *)(a3 + (result | 3)) = v20;
          result += 4;
        }
        while (result <= (int)v8 - 4);
        uint64_t result = result;
      }
      else
      {
        uint64_t result = 0;
      }
      if ((int)result < (int)v8)
      {
        do
        {
          unsigned __int8 v24 = *(unsigned char *)(*v7 + result);
          if ((int)v10 >= 2)
          {
            uint64_t v25 = v10 - 1;
            uint64_t v26 = v7 + 1;
            do
            {
              uint64_t v27 = *v26++;
              v24 += icvSaturate8u_cv[*(unsigned __int8 *)(v27 + result) - v24 + 256];
              --v25;
            }
            while (v25);
          }
          *(unsigned char *)(a3 + result++) = v24;
        }
        while (result != v8);
      }
      a3 += v11;
      a2 += 8;
      BOOL v28 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v28 | (a5 == 0)));
  }
  return result;
}

void *cv::MorphFilter<cv::MaxOp<unsigned short>,cv::MorphNoVec>::MorphFilter(void *a1, int32x2_t **a2, void *a3)
{
  uint64_t v6 = cv::BaseFilter::BaseFilter(a1);
  *(_OWORD *)(v6 + 3) = 0u;
  *uint64_t v6 = &unk_26D98A9C8;
  uint64_t v7 = (uint64_t)(v6 + 6);
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  v6[2] = *a3;
  v6[1] = vrev64_s32(*a2[8]);
  if ((*(_WORD *)a2 & 0xFFF) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "_kernel.type() == CV_8U");
    std::string::basic_string[abi:ne180100]<0>(v11, "MorphFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(&v13, 4294967081, v12, v11, __p, 783);
    cv::error((cv *)&v13, v8);
  }
  uint64_t v13 = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  cv::preprocess2DKernel((cv::Mat *)a2, v6 + 3, (unint64_t *)&v13);
  std::vector<unsigned char *>::resize(v7, (uint64_t)(a1[4] - a1[3]) >> 3);
  if (v13)
  {
    double v14 = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_225F18148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  uint64_t v32 = *v30;
  if (*v30)
  {
    *((void *)v28 + 7) = v32;
    operator delete(v32);
  }
  unsigned int v33 = *v29;
  if (*v29)
  {
    *((void *)v28 + 4) = v33;
    operator delete(v33);
  }
  cv::BaseRowFilter::~BaseRowFilter(v28);
  _Unwind_Resume(a1);
}

void cv::MorphFilter<cv::MaxOp<unsigned short>,cv::MorphNoVec>::~MorphFilter(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D98A9C8;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D98A9C8;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void *cv::MorphFilter<cv::MaxOp<unsigned short>,cv::MorphNoVec>::operator()(void *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    uint64_t v7 = (a7 * a6);
    uint64_t v8 = result[3];
    uint64_t v9 = (void **)result[6];
    unint64_t v10 = (unint64_t)(result[4] - v8) >> 3;
    uint64_t v11 = a4;
    uint64_t v12 = (void *)(v8 + 4);
    do
    {
      uint64_t v13 = v10;
      uint64_t result = v12;
      double v14 = v9;
      if ((int)v10 >= 1)
      {
        do
        {
          *v14++ = *(void *)(a2 + 8 * *(int *)result) + 2 * *((_DWORD *)result - 1) * a7;
          ++result;
          --v13;
        }
        while (v13);
      }
      if ((int)v7 >= 4)
      {
        uint64_t v15 = 0;
        uint64_t result = *v9;
        do
        {
          uint16x4_t v16 = *(uint16x4_t *)((char *)result + 2 * v15);
          if ((int)v10 >= 2)
          {
            uint64_t v17 = v10 - 1;
            unsigned __int8 v18 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v19 = *v18++;
              uint16x4_t v16 = vmax_u16(v16, *(uint16x4_t *)(v19 + 2 * v15));
              --v17;
            }
            while (v17);
          }
          *(uint16x4_t *)(a3 + 2 * v15) = v16;
          v15 += 4;
        }
        while (v15 <= (int)v7 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v7)
      {
        uint64_t result = *v9;
        do
        {
          unsigned __int16 v20 = *((_WORD *)result + v15);
          if ((int)v10 >= 2)
          {
            uint64_t v21 = v10 - 1;
            uint64_t v22 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v23 = *v22++;
              unsigned int v24 = *(unsigned __int16 *)(v23 + 2 * v15);
              if (v20 <= v24) {
                unsigned __int16 v20 = v24;
              }
              --v21;
            }
            while (v21);
          }
          *(_WORD *)(a3 + 2 * v15++) = v20;
        }
        while (v15 != v7);
      }
      a3 += v11;
      a2 += 8;
      BOOL v25 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v25 | (a5 == 0)));
  }
  return result;
}

void *cv::MorphFilter<cv::MaxOp<short>,cv::MorphNoVec>::MorphFilter(void *a1, int32x2_t **a2, void *a3)
{
  uint64_t v6 = cv::BaseFilter::BaseFilter(a1);
  *(_OWORD *)(v6 + 3) = 0u;
  *uint64_t v6 = &unk_26D98AA10;
  uint64_t v7 = (uint64_t)(v6 + 6);
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  v6[2] = *a3;
  v6[1] = vrev64_s32(*a2[8]);
  if ((*(_WORD *)a2 & 0xFFF) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "_kernel.type() == CV_8U");
    std::string::basic_string[abi:ne180100]<0>(v11, "MorphFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(&v13, 4294967081, v12, v11, __p, 783);
    cv::error((cv *)&v13, v8);
  }
  uint64_t v13 = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  cv::preprocess2DKernel((cv::Mat *)a2, v6 + 3, (unint64_t *)&v13);
  std::vector<unsigned char *>::resize(v7, (uint64_t)(a1[4] - a1[3]) >> 3);
  if (v13)
  {
    double v14 = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_225F18574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  uint64_t v32 = *v30;
  if (*v30)
  {
    *((void *)v28 + 7) = v32;
    operator delete(v32);
  }
  unsigned int v33 = *v29;
  if (*v29)
  {
    *((void *)v28 + 4) = v33;
    operator delete(v33);
  }
  cv::BaseRowFilter::~BaseRowFilter(v28);
  _Unwind_Resume(a1);
}

void cv::MorphFilter<cv::MaxOp<short>,cv::MorphNoVec>::~MorphFilter(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D98AA10;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D98AA10;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void *cv::MorphFilter<cv::MaxOp<short>,cv::MorphNoVec>::operator()(void *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    uint64_t v7 = (a7 * a6);
    uint64_t v8 = result[3];
    uint64_t v9 = (void **)result[6];
    unint64_t v10 = (unint64_t)(result[4] - v8) >> 3;
    uint64_t v11 = a4;
    uint64_t v12 = (void *)(v8 + 4);
    do
    {
      uint64_t v13 = v10;
      uint64_t result = v12;
      double v14 = v9;
      if ((int)v10 >= 1)
      {
        do
        {
          *v14++ = *(void *)(a2 + 8 * *(int *)result) + 2 * *((_DWORD *)result - 1) * a7;
          ++result;
          --v13;
        }
        while (v13);
      }
      if ((int)v7 >= 4)
      {
        uint64_t v15 = 0;
        uint64_t result = *v9;
        do
        {
          int16x4_t v16 = *(int16x4_t *)((char *)result + 2 * v15);
          if ((int)v10 >= 2)
          {
            uint64_t v17 = v10 - 1;
            unsigned __int8 v18 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v19 = *v18++;
              int16x4_t v16 = vmax_s16(v16, *(int16x4_t *)(v19 + 2 * v15));
              --v17;
            }
            while (v17);
          }
          *(int16x4_t *)(a3 + 2 * v15) = v16;
          v15 += 4;
        }
        while (v15 <= (int)v7 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v7)
      {
        uint64_t result = *v9;
        do
        {
          __int16 v20 = *((_WORD *)result + v15);
          if ((int)v10 >= 2)
          {
            uint64_t v21 = v10 - 1;
            uint64_t v22 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v23 = *v22++;
              int v24 = *(__int16 *)(v23 + 2 * v15);
              if (v20 <= v24) {
                __int16 v20 = v24;
              }
              --v21;
            }
            while (v21);
          }
          *(_WORD *)(a3 + 2 * v15++) = v20;
        }
        while (v15 != v7);
      }
      a3 += v11;
      a2 += 8;
      BOOL v25 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v25 | (a5 == 0)));
  }
  return result;
}

void *cv::MorphFilter<cv::MaxOp<float>,cv::MorphNoVec>::MorphFilter(void *a1, int32x2_t **a2, void *a3)
{
  uint64_t v6 = cv::BaseFilter::BaseFilter(a1);
  *(_OWORD *)(v6 + 3) = 0u;
  *uint64_t v6 = &unk_26D98AA58;
  uint64_t v7 = (uint64_t)(v6 + 6);
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  v6[2] = *a3;
  v6[1] = vrev64_s32(*a2[8]);
  if ((*(_WORD *)a2 & 0xFFF) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "_kernel.type() == CV_8U");
    std::string::basic_string[abi:ne180100]<0>(v11, "MorphFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(&v13, 4294967081, v12, v11, __p, 783);
    cv::error((cv *)&v13, v8);
  }
  uint64_t v13 = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  cv::preprocess2DKernel((cv::Mat *)a2, v6 + 3, (unint64_t *)&v13);
  std::vector<unsigned char *>::resize(v7, (uint64_t)(a1[4] - a1[3]) >> 3);
  if (v13)
  {
    double v14 = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_225F189A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  uint64_t v32 = *v30;
  if (*v30)
  {
    *((void *)v28 + 7) = v32;
    operator delete(v32);
  }
  unsigned int v33 = *v29;
  if (*v29)
  {
    *((void *)v28 + 4) = v33;
    operator delete(v33);
  }
  cv::BaseRowFilter::~BaseRowFilter(v28);
  _Unwind_Resume(a1);
}

void cv::MorphFilter<cv::MaxOp<float>,cv::MorphNoVec>::~MorphFilter(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D98AA58;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D98AA58;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void *cv::MorphFilter<cv::MaxOp<float>,cv::MorphNoVec>::operator()(void *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    uint64_t v7 = (a7 * a6);
    uint64_t v8 = result[3];
    uint64_t v9 = (void **)result[6];
    unint64_t v10 = (unint64_t)(result[4] - v8) >> 3;
    uint64_t v11 = a4;
    uint64_t v12 = (void *)(v8 + 4);
    do
    {
      uint64_t v13 = v10;
      uint64_t result = v12;
      double v14 = v9;
      if ((int)v10 >= 1)
      {
        do
        {
          *v14++ = *(void *)(a2 + 8 * *(int *)result) + 4 * *((_DWORD *)result - 1) * a7;
          ++result;
          --v13;
        }
        while (v13);
      }
      if ((int)v7 >= 4)
      {
        uint64_t v15 = 0;
        uint64_t result = *v9;
        do
        {
          float32x4_t v16 = *(float32x4_t *)((char *)result + 4 * v15);
          if ((int)v10 >= 2)
          {
            uint64_t v17 = v10 - 1;
            unsigned __int8 v18 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v19 = *v18++;
              float32x4_t v16 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v19 + 4 * v15), v16), *(int8x16_t *)(v19 + 4 * v15), (int8x16_t)v16);
              --v17;
            }
            while (v17);
          }
          *(float32x4_t *)(a3 + 4 * v15) = v16;
          v15 += 4;
        }
        while (v15 <= (int)v7 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v7)
      {
        uint64_t result = *v9;
        do
        {
          float v20 = *((float *)result + v15);
          if ((int)v10 >= 2)
          {
            uint64_t v21 = v10 - 1;
            uint64_t v22 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v23 = *v22++;
              float v24 = *(float *)(v23 + 4 * v15);
              if (v20 < v24) {
                float v20 = v24;
              }
              --v21;
            }
            while (v21);
          }
          *(float *)(a3 + 4 * v15++) = v20;
        }
        while (v15 != v7);
      }
      a3 += v11;
      a2 += 8;
      BOOL v25 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v25 | (a5 == 0)));
  }
  return result;
}

void *cv::MorphFilter<cv::MaxOp<double>,cv::MorphNoVec>::MorphFilter(void *a1, int32x2_t **a2, void *a3)
{
  uint64_t v6 = cv::BaseFilter::BaseFilter(a1);
  *(_OWORD *)(v6 + 3) = 0u;
  *uint64_t v6 = &unk_26D98AAA0;
  uint64_t v7 = (uint64_t)(v6 + 6);
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  v6[2] = *a3;
  v6[1] = vrev64_s32(*a2[8]);
  if ((*(_WORD *)a2 & 0xFFF) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "_kernel.type() == CV_8U");
    std::string::basic_string[abi:ne180100]<0>(v11, "MorphFilter");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/morph.cpp");
    cv::Exception::Exception(&v13, 4294967081, v12, v11, __p, 783);
    cv::error((cv *)&v13, v8);
  }
  uint64_t v13 = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  cv::preprocess2DKernel((cv::Mat *)a2, v6 + 3, (unint64_t *)&v13);
  std::vector<unsigned char *>::resize(v7, (uint64_t)(a1[4] - a1[3]) >> 3);
  if (v13)
  {
    double v14 = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_225F18DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  cv::Exception::~Exception((cv::Exception *)&a27);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  uint64_t v32 = *v30;
  if (*v30)
  {
    *((void *)v28 + 7) = v32;
    operator delete(v32);
  }
  unsigned int v33 = *v29;
  if (*v29)
  {
    *((void *)v28 + 4) = v33;
    operator delete(v33);
  }
  cv::BaseRowFilter::~BaseRowFilter(v28);
  _Unwind_Resume(a1);
}

void cv::MorphFilter<cv::MaxOp<double>,cv::MorphNoVec>::~MorphFilter(cv::BaseRowFilter *this)
{
  *(void *)this = &unk_26D98AAA0;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D98AAA0;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  cv::BaseRowFilter::~BaseRowFilter(this);
  JUMPOUT(0x22A641780);
}

void *cv::MorphFilter<cv::MaxOp<double>,cv::MorphNoVec>::operator()(void *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a5 >= 1)
  {
    uint64_t v7 = (a7 * a6);
    uint64_t v8 = result[3];
    uint64_t v9 = (void **)result[6];
    unint64_t v10 = (unint64_t)(result[4] - v8) >> 3;
    uint64_t v11 = a4;
    uint64_t v12 = (void *)(v8 + 4);
    do
    {
      uint64_t v13 = v10;
      uint64_t result = v12;
      double v14 = v9;
      if ((int)v10 >= 1)
      {
        do
        {
          *v14++ = *(void *)(a2 + 8 * *(int *)result) + 8 * *((_DWORD *)result - 1) * a7;
          ++result;
          --v13;
        }
        while (v13);
      }
      if ((int)v7 >= 4)
      {
        uint64_t v15 = 0;
        uint64_t result = *v9;
        do
        {
          float32x4_t v16 = (float64x2_t *)&result[v15];
          float64x2_t v18 = *v16;
          float64x2_t v17 = v16[1];
          if ((int)v10 >= 2)
          {
            uint64_t v19 = v10 - 1;
            float v20 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v21 = *v20++;
              uint64_t v22 = (float64x2_t *)(v21 + 8 * v15);
              float64x2_t v18 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*v22, v18), *(int8x16_t *)v22, (int8x16_t)v18);
              float64x2_t v17 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v22[1], v17), (int8x16_t)v22[1], (int8x16_t)v17);
              --v19;
            }
            while (v19);
          }
          *(float64x2_t *)(a3 + 8 * v15) = v18;
          *(float64x2_t *)(a3 + ((8 * v15) | 0x10)) = v17;
          v15 += 4;
        }
        while (v15 <= (int)v7 - 4);
        uint64_t v15 = v15;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if ((int)v15 < (int)v7)
      {
        uint64_t result = *v9;
        do
        {
          double v23 = *(double *)&result[v15];
          if ((int)v10 >= 2)
          {
            uint64_t v24 = v10 - 1;
            BOOL v25 = (uint64_t *)(v9 + 1);
            do
            {
              uint64_t v26 = *v25++;
              double v27 = *(double *)(v26 + 8 * v15);
              if (v23 < v27) {
                double v23 = v27;
              }
              --v24;
            }
            while (v24);
          }
          *(double *)(a3 + 8 * v15++) = v23;
        }
        while (v15 != v7);
      }
      a3 += v11;
      a2 += 8;
      BOOL v28 = __OFSUB__(a5--, 1);
    }
    while (!((a5 < 0) ^ v28 | (a5 == 0)));
  }
  return result;
}

double cv::eigen2x2(cv *this, const float *a2, float *a3)
{
  if ((int)a3 >= 1)
  {
    uint64_t v3 = 0;
    int v4 = (float *)((char *)this + 4);
    double result = 0.5;
    do
    {
      double v6 = *(v4 - 1);
      double v7 = *v4;
      double v8 = v4[1];
      double v9 = (v6 + v8) * 0.5;
      double v10 = sqrt(v7 * v7 + (v6 - v8) * (v6 - v8) * 0.25);
      double v11 = v9 + v10;
      double v12 = fabs(v7);
      if (v12 + vabdd_f64(v9 + v10, v6) >= 0.0001)
      {
        double v16 = v11 - v6;
        double v13 = *v4;
      }
      else
      {
        double v13 = v11 - v8;
        double v14 = v12 + vabdd_f64(v11, v8);
        if (v14 >= 0.0001)
        {
          double v16 = *v4;
        }
        else
        {
          double v15 = 1.0 / (v14 + 0.00000011920929);
          double v13 = v13 * v15;
          double v16 = v15 * v7;
        }
      }
      double v17 = v9 - v10;
      double v18 = 1.0 / sqrt(v16 * v16 + v13 * v13 + 2.22044605e-16);
      float v19 = v11;
      a2[v3] = v19;
      float v20 = v13 * v18;
      a2[(v3 + 2)] = v20;
      float v21 = v16 * v18;
      a2[(v3 + 3)] = v21;
      if (v12 + vabdd_f64(v17, v6) >= 0.0001)
      {
        double v22 = v7;
        double v7 = v17 - v6;
      }
      else
      {
        double v22 = v17 - v8;
        double v23 = v12 + vabdd_f64(v17, v8);
        if (v23 < 0.0001)
        {
          double v24 = 1.0 / (v23 + 0.00000011920929);
          double v22 = v22 * v24;
          double v7 = v24 * v7;
        }
      }
      double v25 = 1.0 / sqrt(v7 * v7 + v22 * v22 + 2.22044605e-16);
      float v26 = v17;
      a2[(v3 + 1)] = v26;
      float v27 = v22 * v25;
      a2[(v3 + 4)] = v27;
      float v28 = v7 * v25;
      a2[(v3 + 5)] = v28;
      v3 += 6;
      v4 += 3;
    }
    while (6 * a3 != v3);
  }
  return result;
}

void cv::cornerMinEigenVal(void (***this)(cv **__return_ptr), const cv::_InputArray *a2, const cv::_OutputArray *a3, int a4)
{
  (**this)(v9);
  int32x2_t v8 = vrev64_s32(*(int32x2_t *)v9[8]);
  (*(void (**)(const cv::_InputArray *, int32x2_t *, uint64_t, uint64_t, void, void))(*(void *)a2 + 128))(a2, &v8, 5, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(cv **__return_ptr, const cv::_InputArray *, uint64_t))a2)(v7, a2, 0xFFFFFFFFLL);
  cv::cornerEigenValsVecs((cv *)v9, (const cv::Mat *)v7, a3, a4, 0.0);
}

void sub_225F1942C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  cv::Mat::~Mat((cv::Mat *)va, a2);
  cv::Mat::~Mat((cv::Mat *)va1, v4);
  _Unwind_Resume(a1);
}

void cv::cornerEigenValsVecs(cv *this, const cv::Mat *a2, cv::Mat *a3, int a4, double a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v6 = 1 << (a4 - 1);
  if (a4 <= 0) {
    int v6 = 4;
  }
  double v7 = (double)(int)a3 * (double)v6;
  if (a4 < 0) {
    double v7 = v7 + v7;
  }
  if ((*(_DWORD *)this & 7) != 0) {
    double v8 = v7;
  }
  else {
    double v8 = v7 * 255.0;
  }
  int v9 = *(_DWORD *)this & 0xFFF;
  if (v9 && v9 != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "src.type() == CV_8UC1 || src.type() == CV_32FC1");
    std::string::basic_string[abi:ne180100]<0>(__p, "cornerEigenValsVecs");
    std::string::basic_string[abi:ne180100]<0>(v21, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/imgproc/corner.cpp");
    cv::Exception::Exception(v17, 4294967081, v13, __p, v21, 263);
    cv::error((cv *)v17, v10);
  }
  uint64_t v18 = &v17[2];
  float v19 = (cv *)v20;
  v20[0] = 0;
  v20[1] = 0;
  v17[0] = 1124007936;
  double v11 = 1.0 / v8;
  memset(&v17[1], 0, 60);
  uint64_t v14 = &v13[2];
  uint64_t v15 = (cv *)v16;
  v16[0] = 0;
  v16[1] = 0;
  v13[0] = 1124007936;
  memset(&v13[1], 0, 60);
  if (a4 >= 1)
  {
    cv::_InputArray::_InputArray((uint64_t)__p, this);
    cv::_OutputArray::_OutputArray((uint64_t)v21, (cv::Mat *)v17);
    cv::Sobel((cv *)__p, (const cv::_InputArray *)v21, (const cv::_OutputArray *)5, (const cv::_OutputArray *)1, 0, a4, v11, 0.0);
  }
  cv::_InputArray::_InputArray((uint64_t)__p, this);
  cv::_OutputArray::_OutputArray((uint64_t)v21, (cv::Mat *)v17);
  cv::Scharr((cv *)__p, (const cv::_InputArray *)v21, (const cv::_OutputArray *)5, (const cv::_OutputArray *)1, 0, v11, 0.0);
}

void sub_225F19B5C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  cv::Mat::~Mat((cv::Mat *)&a30, a2);
  cv::Mat::~Mat((cv::Mat *)&a45, v46);
  _Unwind_Resume(a1);
}

void cv::cornerHarris(void (***this)(cv **__return_ptr), const cv::_InputArray *a2, const cv::_OutputArray *a3, int a4, double a5)
{
  (**this)(v11);
  int32x2_t v10 = vrev64_s32(*(int32x2_t *)v11[8]);
  (*(void (**)(const cv::_InputArray *, int32x2_t *, uint64_t, uint64_t, void, void))(*(void *)a2 + 128))(a2, &v10, 5, 0xFFFFFFFFLL, 0, 0);
  (**(void (***)(cv **__return_ptr, const cv::_InputArray *, uint64_t))a2)(v9, a2, 0xFFFFFFFFLL);
  cv::cornerEigenValsVecs((cv *)v11, (const cv::Mat *)v9, a3, a4, a5);
}

void sub_225F19E24(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  cv::Mat::~Mat((cv::Mat *)va, a2);
  cv::Mat::~Mat((cv::Mat *)va1, v4);
  _Unwind_Resume(a1);
}

void cv::MatOp::roi(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    uint64_t v9 = *a2;
    int v10 = *((_DWORD *)a2 + 2);
    int v84 = &v83[8];
    uint64_t v85 = (cv *)&v86;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    *(_DWORD *)int v83 = 1124007936;
    memset(&v83[4], 0, 60);
    int v80 = &v79[8];
    int v81 = (cv *)v82;
    v82[0] = 0;
    v82[1] = 0;
    *(_DWORD *)uint64_t v79 = 1124007936;
    memset(&v79[4], 0, 60);
    long long v75 = &v74[8];
    uint64_t v76 = (cv *)&v77;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    *(_DWORD *)uint64_t v74 = 1124007936;
    memset(&v74[4], 0, 60);
    cv::MatExpr::MatExpr((uint64_t)&v88, v9, v10, (cv::Mat *)v83, (cv::Mat *)v79, (cv::Mat *)v74, (uint64_t)(a2 + 40), *((double *)a2 + 38), *((double *)a2 + 39));
    cv::MatExpr::operator=(a5, &v88);
    cv::MatExpr::~MatExpr((cv::MatExpr *)&v88, v11);
    if (*(void *)&v74[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v74[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v74, v12);
    }
    *(void *)&v74[16] = 0;
    memset(&v74[32], 0, 24);
    if (*(int *)&v74[4] >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v75;
      do
        *(_DWORD *)&v14[4 * v13++] = 0;
      while (v13 < *(int *)&v74[4]);
    }
    *(void *)&v74[24] = 0;
    if (v76 != (cv *)&v77) {
      cv::fastFree((void **)v76, v12);
    }
    if (*(void *)&v79[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v79[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v79, v12);
    }
    *(void *)&v79[16] = 0;
    memset(&v79[32], 0, 24);
    if (*(int *)&v79[4] >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v80;
      do
        *(_DWORD *)&v16[4 * v15++] = 0;
      while (v15 < *(int *)&v79[4]);
    }
    *(void *)&v79[24] = 0;
    if (v81 != (cv *)v82) {
      cv::fastFree((void **)v81, v12);
    }
    if (*(void *)&v83[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v83[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v83, v12);
    }
    *(void *)&v83[16] = 0;
    memset(&v83[32], 0, 24);
    if (*(int *)&v83[4] >= 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = v84;
      do
        *(_DWORD *)&v18[4 * v17++] = 0;
      while (v17 < *(int *)&v83[4]);
    }
    *(void *)&v83[24] = 0;
    if (v85 != (cv *)&v86) {
      cv::fastFree((void **)v85, v12);
    }
    if (!a2[4])
    {
LABEL_83:
      if (!a2[16]) {
        goto LABEL_108;
      }
      uint64_t v43 = *a4;
      *(void *)int v83 = *a3;
      *(void *)uint64_t v79 = v43;
      cv::Mat::Mat(&v88, a2 + 14, v83, v79);
      double v45 = (atomic_uint *)v91;
      if ((uint64_t *)(a5 + 112) == &v88)
      {
LABEL_100:
        if (v45 && atomic_fetch_add(v45, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)&v88, v44);
        }
        uint64_t v90 = 0;
        *((void *)&v91 + 1) = 0;
        long long v92 = 0uLL;
        if (SHIDWORD(v88) >= 1)
        {
          uint64_t v54 = 0;
          uint64_t v55 = v94;
          do
            *(_DWORD *)(v55 + 4 * v54++) = 0;
          while (v54 < SHIDWORD(v88));
        }
        *(void *)&long long v91 = 0;
        if (v95 != (cv *)v96) {
          cv::fastFree((void **)v95, v44);
        }
LABEL_108:
        if (!a2[28]) {
          return;
        }
        uint64_t v56 = *a4;
        *(void *)int v83 = *a3;
        *(void *)uint64_t v79 = v56;
        cv::Mat::Mat(&v88, a2 + 26, v83, v79);
        uint64_t v58 = (atomic_uint *)v91;
        if ((uint64_t *)(a5 + 208) == &v88) {
          goto LABEL_125;
        }
        if ((void)v91) {
          atomic_fetch_add((atomic_uint *volatile)v91, 1u);
        }
        long long v59 = *(atomic_uint **)(a5 + 232);
        if (v59 && atomic_fetch_add(v59, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)(a5 + 208), v57);
        }
        *(void *)(a5 + 224) = 0;
        *(void *)(a5 + 248) = 0;
        *(void *)(a5 + 256) = 0;
        *(void *)(a5 + 240) = 0;
        if (*(int *)(a5 + 212) <= 0)
        {
          *(void *)(a5 + 232) = 0;
          *(_DWORD *)(a5 + 208) = v88;
        }
        else
        {
          uint64_t v60 = 0;
          uint64_t v61 = *(void *)(a5 + 272);
          do
          {
            *(_DWORD *)(v61 + 4 * v60++) = 0;
            uint64_t v62 = *(int *)(a5 + 212);
          }
          while (v60 < v62);
          *(void *)(a5 + 232) = 0;
          *(_DWORD *)(a5 + 208) = v88;
          if ((int)v62 > 2) {
            goto LABEL_123;
          }
        }
        if (SHIDWORD(v88) <= 2)
        {
          *(_DWORD *)(a5 + 212) = HIDWORD(v88);
          *(void *)(a5 + 216) = v89;
          uint64_t v63 = v95;
          unint64_t v64 = *(void **)(a5 + 280);
          *unint64_t v64 = *(void *)v95;
          v64[1] = *((void *)v63 + 1);
LABEL_124:
          uint64_t v65 = v93;
          *(void *)(a5 + 224) = v90;
          *(_OWORD *)(a5 + 248) = v92;
          uint64_t v66 = (atomic_uint *)v91;
          *(_OWORD *)(a5 + 232) = v91;
          *(void *)(a5 + 264) = v65;
          uint64_t v58 = v66;
LABEL_125:
          if (v58 && atomic_fetch_add(v58, 0xFFFFFFFF) == 1) {
            cv::Mat::deallocate((cv::Mat *)&v88, v57);
          }
          uint64_t v90 = 0;
          *((void *)&v91 + 1) = 0;
          long long v92 = 0uLL;
          if (SHIDWORD(v88) >= 1)
          {
            uint64_t v67 = 0;
            uint64_t v68 = v94;
            do
              *(_DWORD *)(v68 + 4 * v67++) = 0;
            while (v67 < SHIDWORD(v88));
          }
          *(void *)&long long v91 = 0;
          if (v95 != (cv *)v96) {
            cv::fastFree((void **)v95, v57);
          }
          return;
        }
LABEL_123:
        cv::Mat::copySize((cv::Mat *)(a5 + 208), (const cv::Mat *)&v88);
        goto LABEL_124;
      }
      if ((void)v91) {
        atomic_fetch_add((atomic_uint *volatile)v91, 1u);
      }
      uint64_t v46 = *(atomic_uint **)(a5 + 136);
      if (v46 && atomic_fetch_add(v46, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)(a5 + 112), v44);
      }
      *(void *)(a5 + 128) = 0;
      *(void *)(a5 + 152) = 0;
      *(void *)(a5 + 160) = 0;
      *(void *)(a5 + 144) = 0;
      if (*(int *)(a5 + 116) <= 0)
      {
        *(void *)(a5 + 136) = 0;
        *(_DWORD *)(a5 + 112) = v88;
      }
      else
      {
        uint64_t v47 = 0;
        uint64_t v48 = *(void *)(a5 + 176);
        do
        {
          *(_DWORD *)(v48 + 4 * v47++) = 0;
          uint64_t v49 = *(int *)(a5 + 116);
        }
        while (v47 < v49);
        *(void *)(a5 + 136) = 0;
        *(_DWORD *)(a5 + 112) = v88;
        if ((int)v49 > 2) {
          goto LABEL_98;
        }
      }
      if (SHIDWORD(v88) <= 2)
      {
        *(_DWORD *)(a5 + 116) = HIDWORD(v88);
        *(void *)(a5 + 120) = v89;
        uint64_t v50 = v95;
        uint64_t v51 = *(void **)(a5 + 184);
        void *v51 = *(void *)v95;
        v51[1] = *((void *)v50 + 1);
LABEL_99:
        uint64_t v52 = v93;
        *(void *)(a5 + 128) = v90;
        *(_OWORD *)(a5 + 152) = v92;
        uint64_t v53 = (atomic_uint *)v91;
        *(_OWORD *)(a5 + 136) = v91;
        *(void *)(a5 + 168) = v52;
        double v45 = v53;
        goto LABEL_100;
      }
LABEL_98:
      cv::Mat::copySize((cv::Mat *)(a5 + 112), (const cv::Mat *)&v88);
      goto LABEL_99;
    }
    uint64_t v19 = *a4;
    *(void *)int v83 = *a3;
    *(void *)uint64_t v79 = v19;
    cv::Mat::Mat(&v88, a2 + 2, v83, v79);
    float v21 = (atomic_uint *)v91;
    if ((uint64_t *)(a5 + 16) == &v88)
    {
LABEL_75:
      if (v21 && atomic_fetch_add(v21, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)&v88, v20);
      }
      uint64_t v90 = 0;
      *((void *)&v91 + 1) = 0;
      long long v92 = 0uLL;
      if (SHIDWORD(v88) >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v94;
        do
          *(_DWORD *)(v42 + 4 * v41++) = 0;
        while (v41 < SHIDWORD(v88));
      }
      *(void *)&long long v91 = 0;
      if (v95 != (cv *)v96) {
        cv::fastFree((void **)v95, v20);
      }
      goto LABEL_83;
    }
    if ((void)v91) {
      atomic_fetch_add((atomic_uint *volatile)v91, 1u);
    }
    uint64_t v22 = *(atomic_uint **)(a5 + 40);
    if (v22 && atomic_fetch_add(v22, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)(a5 + 16), v20);
    }
    *(void *)(a5 + 32) = 0;
    *(void *)(a5 + 56) = 0;
    *(void *)(a5 + 64) = 0;
    *(void *)(a5 + 48) = 0;
    if (*(int *)(a5 + 20) <= 0)
    {
      *(void *)(a5 + 40) = 0;
      *(_DWORD *)(a5 + 16) = v88;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = *(void *)(a5 + 80);
      do
      {
        *(_DWORD *)(v24 + 4 * v23++) = 0;
        uint64_t v25 = *(int *)(a5 + 20);
      }
      while (v23 < v25);
      *(void *)(a5 + 40) = 0;
      *(_DWORD *)(a5 + 16) = v88;
      if ((int)v25 > 2) {
        goto LABEL_73;
      }
    }
    if (SHIDWORD(v88) <= 2)
    {
      *(_DWORD *)(a5 + 20) = HIDWORD(v88);
      *(void *)(a5 + 24) = v89;
      uint64_t v37 = v95;
      uint64_t v38 = *(void **)(a5 + 88);
      void *v38 = *(void *)v95;
      v38[1] = *((void *)v37 + 1);
LABEL_74:
      uint64_t v39 = v93;
      *(void *)(a5 + 32) = v90;
      *(_OWORD *)(a5 + 56) = v92;
      float64x2_t v40 = (atomic_uint *)v91;
      *(_OWORD *)(a5 + 40) = v91;
      *(void *)(a5 + 72) = v39;
      float v21 = v40;
      goto LABEL_75;
    }
LABEL_73:
    cv::Mat::copySize((cv::Mat *)(a5 + 16), (const cv::Mat *)&v88);
    goto LABEL_74;
  }
  int v84 = &v83[8];
  uint64_t v85 = (cv *)&v86;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  *(_DWORD *)int v83 = 1124007936;
  memset(&v83[4], 0, 60);
  (*(void (**)(void, void *, unsigned char *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v83, 0xFFFFFFFFLL);
  uint64_t v26 = *a4;
  *(void *)uint64_t v74 = *a3;
  *(void *)long long v70 = v26;
  cv::Mat::Mat(v79, v83, v74, v70);
  long long v75 = &v74[8];
  uint64_t v76 = (cv *)&v77;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  *(_DWORD *)uint64_t v74 = 1124007936;
  memset(&v74[4], 0, 60);
  uint64_t v71 = &v70[8];
  long long v72 = (cv *)v73;
  v73[0] = 0;
  v73[1] = 0;
  *(_DWORD *)long long v70 = 1124007936;
  memset(&v70[4], 0, 60);
  memset(v69, 0, sizeof(v69));
  cv::MatExpr::MatExpr((uint64_t)&v88, (uint64_t)&cv::g_MatOp_Identity, 0, (cv::Mat *)v79, (cv::Mat *)v74, (cv::Mat *)v70, (uint64_t)v69, 1.0, 1.0);
  cv::MatExpr::operator=(a5, &v88);
  cv::MatExpr::~MatExpr((cv::MatExpr *)&v88, v27);
  if (*(void *)&v70[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v70[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v70, v28);
  }
  *(void *)&v70[16] = 0;
  memset(&v70[32], 0, 24);
  if (*(int *)&v70[4] >= 1)
  {
    uint64_t v29 = 0;
    double v30 = v71;
    do
      *(_DWORD *)&v30[4 * v29++] = 0;
    while (v29 < *(int *)&v70[4]);
  }
  *(void *)&v70[24] = 0;
  if (v72 != (cv *)v73) {
    cv::fastFree((void **)v72, v28);
  }
  if (*(void *)&v74[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v74[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v74, v28);
  }
  *(void *)&v74[16] = 0;
  memset(&v74[32], 0, 24);
  if (*(int *)&v74[4] >= 1)
  {
    uint64_t v31 = 0;
    uint64_t v32 = v75;
    do
      *(_DWORD *)&v32[4 * v31++] = 0;
    while (v31 < *(int *)&v74[4]);
  }
  *(void *)&v74[24] = 0;
  if (v76 != (cv *)&v77) {
    cv::fastFree((void **)v76, v28);
  }
  if (*(void *)&v79[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v79[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v79, v28);
  }
  *(void *)&v79[16] = 0;
  memset(&v79[32], 0, 24);
  if (*(int *)&v79[4] >= 1)
  {
    uint64_t v33 = 0;
    double v34 = v80;
    do
      *(_DWORD *)&v34[4 * v33++] = 0;
    while (v33 < *(int *)&v79[4]);
  }
  *(void *)&v79[24] = 0;
  if (v81 != (cv *)v82) {
    cv::fastFree((void **)v81, v28);
  }
  if (*(void *)&v83[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v83[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v83, v28);
  }
  *(void *)&v83[16] = 0;
  memset(&v83[32], 0, 24);
  if (*(int *)&v83[4] >= 1)
  {
    uint64_t v35 = 0;
    uint64_t v36 = v84;
    do
      *(_DWORD *)&v36[4 * v35++] = 0;
    while (v35 < *(int *)&v83[4]);
  }
  *(void *)&v83[24] = 0;
  if (v85 != (cv *)&v86) {
    cv::fastFree((void **)v85, v28);
  }
}

void sub_225F1A848(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t cv::MatExpr::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v5 = (atomic_uint *)a2[5];
    if (v5) {
      atomic_fetch_add(v5, 1u);
    }
    int v6 = *(atomic_uint **)(a1 + 40);
    if (v6 && atomic_fetch_add(v6, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)(a1 + 16), a2);
    }
    uint64_t v7 = (const cv::Mat *)(a2 + 2);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 48) = 0;
    if (*(int *)(a1 + 20) <= 0)
    {
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)v7;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v9 + 4 * v8++) = 0;
        uint64_t v10 = *(int *)(a1 + 20);
      }
      while (v8 < v10);
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)v7;
      if ((int)v10 > 2) {
        goto LABEL_15;
      }
    }
    int v11 = *((_DWORD *)a2 + 5);
    if (v11 <= 2)
    {
      *(_DWORD *)(a1 + 20) = v11;
      *(void *)(a1 + 24) = a2[3];
      uint64_t v12 = (void *)a2[11];
      uint64_t v13 = *(void **)(a1 + 88);
      *uint64_t v13 = *v12;
      v13[1] = v12[1];
      goto LABEL_16;
    }
LABEL_15:
    cv::Mat::copySize((cv::Mat *)(a1 + 16), v7);
LABEL_16:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(void *)(a1 + 64) = a2[8];
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(void *)(a1 + 72) = a2[9];
    uint64_t v14 = (atomic_uint *)a2[17];
    if (v14) {
      atomic_fetch_add(v14, 1u);
    }
    uint64_t v15 = *(atomic_uint **)(a1 + 136);
    if (v15 && atomic_fetch_add(v15, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)(a1 + 112), v7);
    }
    uint64_t v16 = (const cv::Mat *)(a2 + 14);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 144) = 0;
    if (*(int *)(a1 + 116) <= 0)
    {
      *(void *)(a1 + 136) = 0;
      *(_DWORD *)(a1 + 112) = *(_DWORD *)v16;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = *(void *)(a1 + 176);
      do
      {
        *(_DWORD *)(v18 + 4 * v17++) = 0;
        uint64_t v19 = *(int *)(a1 + 116);
      }
      while (v17 < v19);
      *(void *)(a1 + 136) = 0;
      *(_DWORD *)(a1 + 112) = *(_DWORD *)v16;
      if ((int)v19 > 2) {
        goto LABEL_29;
      }
    }
    int v20 = *((_DWORD *)a2 + 29);
    if (v20 <= 2)
    {
      *(_DWORD *)(a1 + 116) = v20;
      *(void *)(a1 + 120) = a2[15];
      float v21 = (void *)a2[23];
      uint64_t v22 = *(void **)(a1 + 184);
      *uint64_t v22 = *v21;
      v22[1] = v21[1];
      goto LABEL_30;
    }
LABEL_29:
    cv::Mat::copySize((cv::Mat *)(a1 + 112), v16);
LABEL_30:
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(void *)(a1 + 160) = a2[20];
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(void *)(a1 + 168) = a2[21];
    uint64_t v23 = (atomic_uint *)a2[29];
    if (v23) {
      atomic_fetch_add(v23, 1u);
    }
    uint64_t v24 = *(atomic_uint **)(a1 + 232);
    if (v24 && atomic_fetch_add(v24, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)(a1 + 208), v16);
    }
    uint64_t v25 = (const cv::Mat *)(a2 + 26);
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 240) = 0;
    if (*(int *)(a1 + 212) <= 0)
    {
      *(void *)(a1 + 232) = 0;
      *(_DWORD *)(a1 + 208) = *(_DWORD *)v25;
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = *(void *)(a1 + 272);
      do
      {
        *(_DWORD *)(v27 + 4 * v26++) = 0;
        uint64_t v28 = *(int *)(a1 + 212);
      }
      while (v26 < v28);
      *(void *)(a1 + 232) = 0;
      *(_DWORD *)(a1 + 208) = *(_DWORD *)v25;
      if ((int)v28 > 2) {
        goto LABEL_43;
      }
    }
    int v29 = *((_DWORD *)a2 + 53);
    if (v29 <= 2)
    {
      *(_DWORD *)(a1 + 212) = v29;
      *(void *)(a1 + 216) = a2[27];
      double v30 = (void *)a2[35];
      uint64_t v31 = *(void **)(a1 + 280);
      *uint64_t v31 = *v30;
      v31[1] = v30[1];
LABEL_44:
      *(_OWORD *)(a1 + 240) = *((_OWORD *)a2 + 15);
      *(void *)(a1 + 256) = a2[32];
      *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
      *(void *)(a1 + 264) = a2[33];
      goto LABEL_45;
    }
LABEL_43:
    cv::Mat::copySize((cv::Mat *)(a1 + 208), v25);
    goto LABEL_44;
  }
LABEL_45:
  long long v32 = *((_OWORD *)a2 + 19);
  long long v33 = *((_OWORD *)a2 + 21);
  *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
  *(_OWORD *)(a1 + 336) = v33;
  *(_OWORD *)(a1 + 304) = v32;
  return a1;
}

void cv::MatOp::diag(cv::MatOp *this, const cv::MatExpr *a2, unsigned int a3, cv::MatExpr *a4)
{
  if ((*(unsigned int (**)(cv::MatOp *))(*(void *)this + 16))(this))
  {
    uint64_t v7 = *(void *)a2;
    int v8 = *((_DWORD *)a2 + 2);
    int v80 = &v79[1];
    int v81 = (cv *)&v82;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    int v78 = 1124007936;
    memset(v79, 0, sizeof(v79));
    long long v75 = (char *)v74 + 8;
    uint64_t v76 = (cv *)v77;
    v77[0] = 0;
    v77[1] = 0;
    LODWORD(v74[0]) = 1124007936;
    memset((char *)v74 + 4, 0, 48);
    v74[3] = 0u;
    long long v70 = &v69[1];
    uint64_t v71 = (cv *)&v72;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    int v68 = 1124007936;
    memset(v69, 0, sizeof(v69));
    cv::MatExpr::MatExpr((uint64_t)&v84, v7, v8, (cv::Mat *)&v78, (cv::Mat *)v74, (cv::Mat *)&v68, (uint64_t)a2 + 320, *((double *)a2 + 38), *((double *)a2 + 39));
    cv::MatExpr::operator=((uint64_t)a4, &v84);
    cv::MatExpr::~MatExpr((cv::MatExpr *)&v84, v9);
    if (*(void *)&v69[5] && atomic_fetch_add(*(atomic_uint *volatile *)&v69[5], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v68, v10);
    }
    *(void *)&v69[3] = 0;
    memset(&v69[7], 0, 24);
    if (v69[0] >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = v70;
      do
        v12[v11++] = 0;
      while (v11 < v69[0]);
    }
    *(void *)&v69[5] = 0;
    if (v71 != (cv *)&v72) {
      cv::fastFree((void **)v71, v10);
    }
    if (*((void *)&v74[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v74[1] + 1), 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v74, v10);
    }
    *(void *)&v74[1] = 0;
    memset(&v74[2], 0, 24);
    if (SDWORD1(v74[0]) >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v75;
      do
        *(_DWORD *)&v14[4 * v13++] = 0;
      while (v13 < SDWORD1(v74[0]));
    }
    *((void *)&v74[1] + 1) = 0;
    if (v76 != (cv *)v77) {
      cv::fastFree((void **)v76, v10);
    }
    if (*(void *)&v79[5] && atomic_fetch_add(*(atomic_uint *volatile *)&v79[5], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)&v78, v10);
    }
    *(void *)&v79[3] = 0;
    memset(&v79[7], 0, 24);
    if (v79[0] >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v80;
      do
        v16[v15++] = 0;
      while (v15 < v79[0]);
    }
    *(void *)&v79[5] = 0;
    if (v81 != (cv *)&v82) {
      cv::fastFree((void **)v81, v10);
    }
    if (!*((void *)a2 + 4))
    {
LABEL_83:
      if (!*((void *)a2 + 16)) {
        goto LABEL_108;
      }
      cv::Mat::diag((const cv::MatExpr *)((char *)a2 + 112), a3, (uint64_t)&v84);
      float64x2_t v40 = (atomic_uint *)v87;
      if ((uint64_t *)((char *)a4 + 112) == &v84)
      {
LABEL_100:
        if (v40 && atomic_fetch_add(v40, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)&v84, v39);
        }
        uint64_t v86 = 0;
        *((void *)&v87 + 1) = 0;
        long long v88 = 0uLL;
        if (SHIDWORD(v84) >= 1)
        {
          uint64_t v49 = 0;
          uint64_t v50 = v90;
          do
            *(_DWORD *)(v50 + 4 * v49++) = 0;
          while (v49 < SHIDWORD(v84));
        }
        *(void *)&long long v87 = 0;
        if (v91 != (cv *)v92) {
          cv::fastFree((void **)v91, v39);
        }
LABEL_108:
        if (!*((void *)a2 + 28)) {
          return;
        }
        cv::Mat::diag((const cv::MatExpr *)((char *)a2 + 208), a3, (uint64_t)&v84);
        uint64_t v52 = (atomic_uint *)v87;
        if ((uint64_t *)((char *)a4 + 208) == &v84) {
          goto LABEL_125;
        }
        if ((void)v87) {
          atomic_fetch_add((atomic_uint *volatile)v87, 1u);
        }
        uint64_t v53 = (atomic_uint *)*((void *)a4 + 29);
        if (v53 && atomic_fetch_add(v53, 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::MatExpr *)((char *)a4 + 208), v51);
        }
        *((void *)a4 + 28) = 0;
        *((void *)a4 + 31) = 0;
        *((void *)a4 + 32) = 0;
        *((void *)a4 + 30) = 0;
        if (*((int *)a4 + 53) <= 0)
        {
          *((void *)a4 + 29) = 0;
          *((_DWORD *)a4 + 52) = v84;
        }
        else
        {
          uint64_t v54 = 0;
          uint64_t v55 = *((void *)a4 + 34);
          do
          {
            *(_DWORD *)(v55 + 4 * v54++) = 0;
            uint64_t v56 = *((int *)a4 + 53);
          }
          while (v54 < v56);
          *((void *)a4 + 29) = 0;
          *((_DWORD *)a4 + 52) = v84;
          if ((int)v56 > 2) {
            goto LABEL_123;
          }
        }
        if (SHIDWORD(v84) <= 2)
        {
          *((_DWORD *)a4 + 53) = HIDWORD(v84);
          *((void *)a4 + 27) = v85;
          unint64_t v57 = v91;
          uint64_t v58 = (void *)*((void *)a4 + 35);
          *uint64_t v58 = *(void *)v91;
          v58[1] = *((void *)v57 + 1);
LABEL_124:
          uint64_t v59 = v89;
          *((void *)a4 + 28) = v86;
          *(_OWORD *)((char *)a4 + 248) = v88;
          uint64_t v60 = (atomic_uint *)v87;
          *(_OWORD *)((char *)a4 + 232) = v87;
          *((void *)a4 + 33) = v59;
          uint64_t v52 = v60;
LABEL_125:
          if (v52 && atomic_fetch_add(v52, 0xFFFFFFFF) == 1) {
            cv::Mat::deallocate((cv::Mat *)&v84, v51);
          }
          uint64_t v86 = 0;
          *((void *)&v87 + 1) = 0;
          long long v88 = 0uLL;
          if (SHIDWORD(v84) >= 1)
          {
            uint64_t v61 = 0;
            uint64_t v62 = v90;
            do
              *(_DWORD *)(v62 + 4 * v61++) = 0;
            while (v61 < SHIDWORD(v84));
          }
          *(void *)&long long v87 = 0;
          if (v91 != (cv *)v92) {
            cv::fastFree((void **)v91, v51);
          }
          return;
        }
LABEL_123:
        cv::Mat::copySize((cv::MatExpr *)((char *)a4 + 208), (const cv::Mat *)&v84);
        goto LABEL_124;
      }
      if ((void)v87) {
        atomic_fetch_add((atomic_uint *volatile)v87, 1u);
      }
      uint64_t v41 = (atomic_uint *)*((void *)a4 + 17);
      if (v41 && atomic_fetch_add(v41, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::MatExpr *)((char *)a4 + 112), v39);
      }
      *((void *)a4 + 16) = 0;
      *((void *)a4 + 19) = 0;
      *((void *)a4 + 20) = 0;
      *((void *)a4 + 18) = 0;
      if (*((int *)a4 + 29) <= 0)
      {
        *((void *)a4 + 17) = 0;
        *((_DWORD *)a4 + 28) = v84;
      }
      else
      {
        uint64_t v42 = 0;
        uint64_t v43 = *((void *)a4 + 22);
        do
        {
          *(_DWORD *)(v43 + 4 * v42++) = 0;
          uint64_t v44 = *((int *)a4 + 29);
        }
        while (v42 < v44);
        *((void *)a4 + 17) = 0;
        *((_DWORD *)a4 + 28) = v84;
        if ((int)v44 > 2) {
          goto LABEL_98;
        }
      }
      if (SHIDWORD(v84) <= 2)
      {
        *((_DWORD *)a4 + 29) = HIDWORD(v84);
        *((void *)a4 + 15) = v85;
        double v45 = v91;
        uint64_t v46 = (void *)*((void *)a4 + 23);
        void *v46 = *(void *)v91;
        v46[1] = *((void *)v45 + 1);
LABEL_99:
        uint64_t v47 = v89;
        *((void *)a4 + 16) = v86;
        *(_OWORD *)((char *)a4 + 152) = v88;
        uint64_t v48 = (atomic_uint *)v87;
        *(_OWORD *)((char *)a4 + 136) = v87;
        *((void *)a4 + 21) = v47;
        float64x2_t v40 = v48;
        goto LABEL_100;
      }
LABEL_98:
      cv::Mat::copySize((cv::MatExpr *)((char *)a4 + 112), (const cv::Mat *)&v84);
      goto LABEL_99;
    }
    cv::Mat::diag((const cv::MatExpr *)((char *)a2 + 16), a3, (uint64_t)&v84);
    uint64_t v18 = (atomic_uint *)v87;
    if ((uint64_t *)((char *)a4 + 16) == &v84)
    {
LABEL_75:
      if (v18 && atomic_fetch_add(v18, 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)&v84, v17);
      }
      uint64_t v86 = 0;
      *((void *)&v87 + 1) = 0;
      long long v88 = 0uLL;
      if (SHIDWORD(v84) >= 1)
      {
        uint64_t v37 = 0;
        uint64_t v38 = v90;
        do
          *(_DWORD *)(v38 + 4 * v37++) = 0;
        while (v37 < SHIDWORD(v84));
      }
      *(void *)&long long v87 = 0;
      if (v91 != (cv *)v92) {
        cv::fastFree((void **)v91, v17);
      }
      goto LABEL_83;
    }
    if ((void)v87) {
      atomic_fetch_add((atomic_uint *volatile)v87, 1u);
    }
    uint64_t v19 = (atomic_uint *)*((void *)a4 + 5);
    if (v19 && atomic_fetch_add(v19, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::MatExpr *)((char *)a4 + 16), v17);
    }
    *((void *)a4 + 4) = 0;
    *((void *)a4 + 7) = 0;
    *((void *)a4 + 8) = 0;
    *((void *)a4 + 6) = 0;
    if (*((int *)a4 + 5) <= 0)
    {
      *((void *)a4 + 5) = 0;
      *((_DWORD *)a4 + 4) = v84;
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = *((void *)a4 + 10);
      do
      {
        *(_DWORD *)(v21 + 4 * v20++) = 0;
        uint64_t v22 = *((int *)a4 + 5);
      }
      while (v20 < v22);
      *((void *)a4 + 5) = 0;
      *((_DWORD *)a4 + 4) = v84;
      if ((int)v22 > 2) {
        goto LABEL_73;
      }
    }
    if (SHIDWORD(v84) <= 2)
    {
      *((_DWORD *)a4 + 5) = HIDWORD(v84);
      *((void *)a4 + 3) = v85;
      long long v33 = v91;
      double v34 = (void *)*((void *)a4 + 11);
      *double v34 = *(void *)v91;
      v34[1] = *((void *)v33 + 1);
LABEL_74:
      uint64_t v35 = v89;
      *((void *)a4 + 4) = v86;
      *(_OWORD *)((char *)a4 + 56) = v88;
      uint64_t v36 = (atomic_uint *)v87;
      *(_OWORD *)((char *)a4 + 40) = v87;
      *((void *)a4 + 9) = v35;
      uint64_t v18 = v36;
      goto LABEL_75;
    }
LABEL_73:
    cv::Mat::copySize((cv::MatExpr *)((char *)a4 + 16), (const cv::Mat *)&v84);
    goto LABEL_74;
  }
  int v80 = &v79[1];
  int v81 = (cv *)&v82;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  int v78 = 1124007936;
  memset(v79, 0, sizeof(v79));
  (*(void (**)(void, const cv::MatExpr *, int *, uint64_t))(**(void **)a2 + 24))(*(void *)a2, a2, &v78, 0xFFFFFFFFLL);
  cv::Mat::diag((cv::Mat *)&v78, a3, (uint64_t)v74);
  long long v70 = &v69[1];
  uint64_t v71 = (cv *)&v72;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  int v68 = 1124007936;
  memset(v69, 0, sizeof(v69));
  uint64_t v65 = (char *)v64 + 8;
  uint64_t v66 = (cv *)v67;
  v67[0] = 0;
  v67[1] = 0;
  LODWORD(v64[0]) = 1124007936;
  memset((char *)v64 + 4, 0, 48);
  void v64[3] = 0u;
  memset(v63, 0, sizeof(v63));
  cv::MatExpr::MatExpr((uint64_t)&v84, (uint64_t)&cv::g_MatOp_Identity, 0, (cv::Mat *)v74, (cv::Mat *)&v68, (cv::Mat *)v64, (uint64_t)v63, 1.0, 1.0);
  cv::MatExpr::operator=((uint64_t)a4, &v84);
  cv::MatExpr::~MatExpr((cv::MatExpr *)&v84, v23);
  if (*((void *)&v64[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v64[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v64, v24);
  }
  *(void *)&v64[1] = 0;
  memset(&v64[2], 0, 24);
  if (SDWORD1(v64[0]) >= 1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = v65;
    do
      *(_DWORD *)&v26[4 * v25++] = 0;
    while (v25 < SDWORD1(v64[0]));
  }
  *((void *)&v64[1] + 1) = 0;
  if (v66 != (cv *)v67) {
    cv::fastFree((void **)v66, v24);
  }
  if (*(void *)&v69[5] && atomic_fetch_add(*(atomic_uint *volatile *)&v69[5], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v68, v24);
  }
  *(void *)&v69[3] = 0;
  memset(&v69[7], 0, 24);
  if (v69[0] >= 1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = v70;
    do
      v28[v27++] = 0;
    while (v27 < v69[0]);
  }
  *(void *)&v69[5] = 0;
  if (v71 != (cv *)&v72) {
    cv::fastFree((void **)v71, v24);
  }
  if (*((void *)&v74[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v74[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v74, v24);
  }
  *(void *)&v74[1] = 0;
  memset(&v74[2], 0, 24);
  if (SDWORD1(v74[0]) >= 1)
  {
    uint64_t v29 = 0;
    double v30 = v75;
    do
      *(_DWORD *)&v30[4 * v29++] = 0;
    while (v29 < SDWORD1(v74[0]));
  }
  *((void *)&v74[1] + 1) = 0;
  if (v76 != (cv *)v77) {
    cv::fastFree((void **)v76, v24);
  }
  if (*(void *)&v79[5] && atomic_fetch_add(*(atomic_uint *volatile *)&v79[5], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v78, v24);
  }
  *(void *)&v79[3] = 0;
  memset(&v79[7], 0, 24);
  if (v79[0] >= 1)
  {
    uint64_t v31 = 0;
    long long v32 = v80;
    do
      v32[v31++] = 0;
    while (v31 < v79[0]);
  }
  *(void *)&v79[5] = 0;
  if (v81 != (cv *)&v82) {
    cv::fastFree((void **)v81, v24);
  }
}

void sub_225F1B5A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

void cv::MatOp::augAssignAdd(cv::MatOp *this, const cv::MatExpr *a2, cv::Mat *a3)
{
  uint64_t v10 = &v9[1];
  uint64_t v11 = (cv *)v12;
  v12[0] = 0;
  v12[1] = 0;
  LODWORD(v9[0]) = 1124007936;
  memset((char *)v9 + 4, 0, 32);
  memset((char *)&v9[4] + 4, 0, 28);
  (*(void (**)(void, const cv::MatExpr *, void *, uint64_t))(**(void **)a2 + 24))(*(void *)a2, a2, v9, 0xFFFFFFFFLL);
  cv::_InputArray::_InputArray((uint64_t)v15, a3);
  cv::_InputArray::_InputArray((uint64_t)v14, (const cv::Mat *)v9);
  uint64_t v4 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v13, a3);
  uint64_t v5 = cv::noArray(v4);
  cv::add((uint64_t)v15, (uint64_t)v14, (const cv::_InputArray *)v13, (const cv::_OutputArray *)v5, (const cv::_InputArray *)0xFFFFFFFFLL);
  if (v9[3] && atomic_fetch_add((atomic_uint *volatile)v9[3], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v9, v6);
  }
  v9[2] = 0;
  memset(&v9[4], 0, 24);
  if (SHIDWORD(v9[0]) >= 1)
  {
    uint64_t v7 = 0;
    int v8 = v10;
    do
      *((_DWORD *)v8 + v7++) = 0;
    while (v7 < SHIDWORD(v9[0]));
  }
  v9[3] = 0;
  if (v11 != (cv *)v12) {
    cv::fastFree((void **)v11, v6);
  }
}

void sub_225F1B770(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void cv::MatOp::augAssignSubtract(cv::MatOp *this, const cv::MatExpr *a2, cv::Mat *a3)
{
  uint64_t v10 = &v9[1];
  uint64_t v11 = (cv *)v12;
  v12[0] = 0;
  v12[1] = 0;
  LODWORD(v9[0]) = 1124007936;
  memset((char *)v9 + 4, 0, 32);
  memset((char *)&v9[4] + 4, 0, 28);
  (*(void (**)(void, const cv::MatExpr *, void *, uint64_t))(**(void **)a2 + 24))(*(void *)a2, a2, v9, 0xFFFFFFFFLL);
  cv::_InputArray::_InputArray((uint64_t)v15, a3);
  cv::_InputArray::_InputArray((uint64_t)v14, (const cv::Mat *)v9);
  uint64_t v4 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v13, a3);
  uint64_t v5 = cv::noArray(v4);
  cv::subtract((uint64_t)v15, (uint64_t)v14, (const cv::_InputArray *)v13, (const cv::_OutputArray *)v5, (const cv::_InputArray *)0xFFFFFFFFLL);
  if (v9[3] && atomic_fetch_add((atomic_uint *volatile)v9[3], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v9, v6);
  }
  v9[2] = 0;
  memset(&v9[4], 0, 24);
  if (SHIDWORD(v9[0]) >= 1)
  {
    uint64_t v7 = 0;
    int v8 = v10;
    do
      *((_DWORD *)v8 + v7++) = 0;
    while (v7 < SHIDWORD(v9[0]));
  }
  v9[3] = 0;
  if (v11 != (cv *)v12) {
    cv::fastFree((void **)v11, v6);
  }
}

void sub_225F1B8B8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void cv::MatOp::augAssignMultiply(cv::MatOp *this, const cv::MatExpr *a2, cv::Mat *a3)
{
  uint64_t v10 = &v9[1];
  uint64_t v11 = (cv *)v12;
  v12[0] = 0;
  v12[1] = 0;
  LODWORD(v9[0]) = 1124007936;
  memset((char *)v9 + 4, 0, 32);
  memset((char *)&v9[4] + 4, 0, 28);
  (*(void (**)(void, const cv::MatExpr *, void *, uint64_t))(**(void **)a2 + 24))(*(void *)a2, a2, v9, 0xFFFFFFFFLL);
  cv::_InputArray::_InputArray((uint64_t)v20, a3);
  cv::_InputArray::_InputArray((uint64_t)v19, (const cv::Mat *)v9);
  uint64_t v15 = (char *)v14 + 8;
  uint64_t v16 = (cv *)v17;
  v17[0] = 0;
  v17[1] = 0;
  LODWORD(v14[0]) = 1124007936;
  memset((char *)v14 + 4, 0, 48);
  v14[3] = 0u;
  cv::_InputArray::_InputArray((uint64_t)v18, (const cv::Mat *)v14);
  cv::_OutputArray::_OutputArray((uint64_t)v13, a3);
  cv::gemm((cv *)v20, (const cv::_InputArray *)v19, (const cv::_InputArray *)v18, 1.0, (const cv::_InputArray *)v13, 0.0, 0);
  if (*((void *)&v14[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v14[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v14, v4);
  }
  *(void *)&v14[1] = 0;
  memset(&v14[2], 0, 24);
  if (SDWORD1(v14[0]) >= 1)
  {
    uint64_t v5 = 0;
    int v6 = v15;
    do
      *(_DWORD *)&v6[4 * v5++] = 0;
    while (v5 < SDWORD1(v14[0]));
  }
  *((void *)&v14[1] + 1) = 0;
  if (v16 != (cv *)v17) {
    cv::fastFree((void **)v16, v4);
  }
  if (v9[3] && atomic_fetch_add((atomic_uint *volatile)v9[3], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v9, v4);
  }
  v9[2] = 0;
  memset(&v9[4], 0, 24);
  if (SHIDWORD(v9[0]) >= 1)
  {
    uint64_t v7 = 0;
    int v8 = v10;
    do
      *((_DWORD *)v8 + v7++) = 0;
    while (v7 < SHIDWORD(v9[0]));
  }
  v9[3] = 0;
  if (v11 != (cv *)v12) {
    cv::fastFree((void **)v11, v4);
  }
}

void sub_225F1BAB8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  cv::Mat::~Mat((cv::Mat *)&a25, a2);
  cv::Mat::~Mat((cv::Mat *)&a9, v26);
  _Unwind_Resume(a1);
}

void cv::MatOp::augAssignDivide(cv::MatOp *this, const cv::MatExpr *a2, cv::Mat *a3)
{
  int v8 = &v7[1];
  uint64_t v9 = (cv *)v10;
  v10[0] = 0;
  v10[1] = 0;
  LODWORD(v7[0]) = 1124007936;
  memset((char *)v7 + 4, 0, 32);
  memset((char *)&v7[4] + 4, 0, 28);
  (*(void (**)(void, const cv::MatExpr *, void *, uint64_t))(**(void **)a2 + 24))(*(void *)a2, a2, v7, 0xFFFFFFFFLL);
  cv::_InputArray::_InputArray((uint64_t)v13, a3);
  cv::_InputArray::_InputArray((uint64_t)v12, (const cv::Mat *)v7);
  cv::_OutputArray::_OutputArray((uint64_t)v11, a3);
  cv::divide((cv *)v13, (const cv::_InputArray *)v12, (const cv::_InputArray *)v11, (const cv::_OutputArray *)0xFFFFFFFFLL, 1.0);
  if (v7[3] && atomic_fetch_add((atomic_uint *volatile)v7[3], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v7, v4);
  }
  v7[2] = 0;
  memset(&v7[4], 0, 24);
  if (SHIDWORD(v7[0]) >= 1)
  {
    uint64_t v5 = 0;
    int v6 = v8;
    do
      *((_DWORD *)v6 + v5++) = 0;
    while (v5 < SHIDWORD(v7[0]));
  }
  v7[3] = 0;
  if (v9 != (cv *)v10) {
    cv::fastFree((void **)v9, v4);
  }
}

void sub_225F1BC10(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void cv::MatOp::augAssignAnd(cv::MatOp *this, const cv::MatExpr *a2, cv::Mat *a3)
{
  uint64_t v11 = &v10[1];
  uint64_t v12 = (cv *)v13;
  v13[0] = 0;
  v13[1] = 0;
  LODWORD(v10[0]) = 1124007936;
  memset((char *)v10 + 4, 0, 32);
  memset((char *)&v10[4] + 4, 0, 28);
  (*(void (**)(void, const cv::MatExpr *, void *, uint64_t))(**(void **)a2 + 24))(*(void *)a2, a2, v10, 0xFFFFFFFFLL);
  cv::_InputArray::_InputArray((uint64_t)v16, a3);
  cv::_InputArray::_InputArray((uint64_t)v15, (const cv::Mat *)v10);
  uint64_t v4 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v14, a3);
  uint64_t v5 = cv::noArray(v4);
  cv::bitwise_and((cv *)v16, (const cv::_InputArray *)v15, (const cv::_InputArray *)v14, (const cv::_OutputArray *)v5, v6);
  if (v10[3] && atomic_fetch_add((atomic_uint *volatile)v10[3], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v10, v7);
  }
  void v10[2] = 0;
  memset(&v10[4], 0, 24);
  if (SHIDWORD(v10[0]) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v11;
    do
      *((_DWORD *)v9 + v8++) = 0;
    while (v8 < SHIDWORD(v10[0]));
  }
  v10[3] = 0;
  if (v12 != (cv *)v13) {
    cv::fastFree((void **)v12, v7);
  }
}

void sub_225F1BD54(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void cv::MatOp::augAssignOr(cv::MatOp *this, const cv::MatExpr *a2, cv::Mat *a3)
{
  uint64_t v11 = &v10[1];
  uint64_t v12 = (cv *)v13;
  v13[0] = 0;
  v13[1] = 0;
  LODWORD(v10[0]) = 1124007936;
  memset((char *)v10 + 4, 0, 32);
  memset((char *)&v10[4] + 4, 0, 28);
  (*(void (**)(void, const cv::MatExpr *, void *, uint64_t))(**(void **)a2 + 24))(*(void *)a2, a2, v10, 0xFFFFFFFFLL);
  cv::_InputArray::_InputArray((uint64_t)v16, a3);
  cv::_InputArray::_InputArray((uint64_t)v15, (const cv::Mat *)v10);
  uint64_t v4 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v14, a3);
  uint64_t v5 = cv::noArray(v4);
  cv::bitwise_or((cv *)v16, (const cv::_InputArray *)v15, (const cv::_InputArray *)v14, (const cv::_OutputArray *)v5, v6);
  if (v10[3] && atomic_fetch_add((atomic_uint *volatile)v10[3], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v10, v7);
  }
  void v10[2] = 0;
  memset(&v10[4], 0, 24);
  if (SHIDWORD(v10[0]) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v11;
    do
      *((_DWORD *)v9 + v8++) = 0;
    while (v8 < SHIDWORD(v10[0]));
  }
  v10[3] = 0;
  if (v12 != (cv *)v13) {
    cv::fastFree((void **)v12, v7);
  }
}

void sub_225F1BE98(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void cv::MatOp::augAssignXor(cv::MatOp *this, const cv::MatExpr *a2, cv::Mat *a3)
{
  uint64_t v11 = &v10[1];
  uint64_t v12 = (cv *)v13;
  v13[0] = 0;
  v13[1] = 0;
  LODWORD(v10[0]) = 1124007936;
  memset((char *)v10 + 4, 0, 32);
  memset((char *)&v10[4] + 4, 0, 28);
  (*(void (**)(void, const cv::MatExpr *, void *, uint64_t))(**(void **)a2 + 24))(*(void *)a2, a2, v10, 0xFFFFFFFFLL);
  cv::_InputArray::_InputArray((uint64_t)v16, a3);
  cv::_InputArray::_InputArray((uint64_t)v15, (const cv::Mat *)v10);
  uint64_t v4 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v14, a3);
  uint64_t v5 = cv::noArray(v4);
  cv::bitwise_xor((cv *)v16, (const cv::_InputArray *)v15, (const cv::_InputArray *)v14, (const cv::_OutputArray *)v5, v6);
  if (v10[3] && atomic_fetch_add((atomic_uint *volatile)v10[3], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v10, v7);
  }
  void v10[2] = 0;
  memset(&v10[4], 0, 24);
  if (SHIDWORD(v10[0]) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v11;
    do
      *((_DWORD *)v9 + v8++) = 0;
    while (v8 < SHIDWORD(v10[0]));
  }
  v10[3] = 0;
  if (v12 != (cv *)v13) {
    cv::fastFree((void **)v12, v7);
  }
}

void sub_225F1BFDC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void cv::MatOp::add(cv::MatOp *this, const cv::MatExpr *a2, const cv::MatExpr *a3, cv::MatExpr *a4)
{
  if (*(cv::MatOp **)a3 != this)
  {
    uint64_t v7 = *(void (**)(void))(**(void **)a3 + 104);
    v7();
    return;
  }
  float64x2_t v40 = 0u;
  float64x2_t v41 = 0u;
  uint64_t v37 = &v36[8];
  uint64_t v38 = (cv *)v39;
  v39[0] = 0;
  v39[1] = 0;
  *(_DWORD *)uint64_t v36 = 1124007936;
  memset(&v36[4], 0, 60);
  long long v33 = &v32[8];
  double v34 = (cv *)v35;
  v35[0] = 0;
  v35[1] = 0;
  *(_DWORD *)long long v32 = 1124007936;
  memset(&v32[4], 0, 60);
  if (*(uint64_t **)a2 == &cv::g_MatOp_AddEx && (!*((void *)a2 + 16) || *((double *)a2 + 39) == 0.0))
  {
    uint64_t v15 = (_DWORD *)((char *)a2 + 16);
    if (v36 == (char *)a2 + 16)
    {
LABEL_56:
      double v8 = *((double *)a2 + 38);
      float64x2_t v27 = *((float64x2_t *)a2 + 21);
      float64x2_t v40 = *((float64x2_t *)a2 + 20);
      float64x2_t v41 = v27;
      goto LABEL_9;
    }
    uint64_t v16 = (atomic_uint *)*((void *)a2 + 5);
    if (v16)
    {
      atomic_fetch_add(v16, 1u);
      if (*(void *)&v36[24])
      {
        if (atomic_fetch_add(*(atomic_uint *volatile *)&v36[24], 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v36, a2);
        }
      }
    }
    *(void *)&v36[16] = 0;
    memset(&v36[32], 0, 24);
    if (*(uint64_t *)v36 <= 0)
    {
      *(void *)&v36[24] = 0;
      *(_DWORD *)uint64_t v36 = *v15;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = v37;
      do
        *(_DWORD *)&v18[4 * v17++] = 0;
      while (v17 < *(int *)&v36[4]);
      *(void *)&v36[24] = 0;
      *(_DWORD *)uint64_t v36 = *v15;
      if (*(int *)&v36[4] > 2) {
        goto LABEL_54;
      }
    }
    if (*((int *)a2 + 5) <= 2)
    {
      *(_DWORD *)&v36[4] = *((_DWORD *)a2 + 5);
      *(void *)&v36[8] = *((void *)a2 + 3);
      uint64_t v23 = (void *)*((void *)a2 + 11);
      uint64_t v24 = v38;
      *(void *)uint64_t v38 = *v23;
      *((void *)v24 + 1) = v23[1];
LABEL_55:
      uint64_t v25 = *((void *)a2 + 5);
      *(void *)&v36[16] = *((void *)a2 + 4);
      *(void *)&v36[24] = v25;
      long long v26 = *((_OWORD *)a2 + 4);
      *(_OWORD *)&v36[32] = *((_OWORD *)a2 + 3);
      *(_OWORD *)&v36[48] = v26;
      goto LABEL_56;
    }
LABEL_54:
    cv::Mat::copySize((cv::Mat *)v36, (const cv::MatExpr *)((char *)a2 + 16));
    goto LABEL_55;
  }
  double v8 = 1.0;
  (*(void (**)(void, const cv::MatExpr *, unsigned char *, uint64_t))(**(void **)a2 + 24))(*(void *)a2, a2, v36, 0xFFFFFFFFLL);
LABEL_9:
  if (*(uint64_t **)a3 != &cv::g_MatOp_AddEx || *((void *)a3 + 16) && *((double *)a3 + 39) != 0.0)
  {
    double v9 = 1.0;
    (*(void (**)(void, const cv::MatExpr *, unsigned char *, uint64_t))(**(void **)a3 + 24))(*(void *)a3, a3, v32, 0xFFFFFFFFLL);
    goto LABEL_13;
  }
  uint64_t v19 = (_DWORD *)((char *)a3 + 16);
  if (v32 != (char *)a3 + 16)
  {
    uint64_t v20 = (atomic_uint *)*((void *)a3 + 5);
    if (v20) {
      atomic_fetch_add(v20, 1u);
    }
    if (*(void *)&v32[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v32[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v32, a2);
    }
    *(void *)&v32[16] = 0;
    memset(&v32[32], 0, 24);
    if (*(uint64_t *)v32 <= 0)
    {
      *(void *)&v32[24] = 0;
      *(_DWORD *)long long v32 = *v19;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = v33;
      do
        *(_DWORD *)&v22[4 * v21++] = 0;
      while (v21 < *(int *)&v32[4]);
      *(void *)&v32[24] = 0;
      *(_DWORD *)long long v32 = *v19;
      if (*(int *)&v32[4] > 2) {
        goto LABEL_60;
      }
    }
    if (*((int *)a3 + 5) <= 2)
    {
      *(_DWORD *)&v32[4] = *((_DWORD *)a3 + 5);
      *(void *)&v32[8] = *((void *)a3 + 3);
      uint64_t v28 = (void *)*((void *)a3 + 11);
      uint64_t v29 = v34;
      *(void *)double v34 = *v28;
      *((void *)v29 + 1) = v28[1];
LABEL_61:
      long long v30 = *((_OWORD *)a3 + 3);
      *(_OWORD *)&v32[16] = *((_OWORD *)a3 + 2);
      *(_OWORD *)&v32[32] = v30;
      *(_OWORD *)&v32[48] = *((_OWORD *)a3 + 4);
      goto LABEL_62;
    }
LABEL_60:
    cv::Mat::copySize((cv::Mat *)v32, (const cv::MatExpr *)((char *)a3 + 16));
    goto LABEL_61;
  }
LABEL_62:
  double v9 = *((double *)a3 + 38);
  float64x2_t v31 = vaddq_f64(v41, *((float64x2_t *)a3 + 21));
  float64x2_t v40 = vaddq_f64(v40, *((float64x2_t *)a3 + 20));
  float64x2_t v41 = v31;
LABEL_13:
  cv::MatOp_AddEx::makeExpr((uint64_t)a4, (cv::Mat *)v36, (cv::Mat *)v32, (uint64_t)&v40, v8, v9);
  if (*(void *)&v32[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v32[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v32, v10);
  }
  *(void *)&v32[16] = 0;
  memset(&v32[32], 0, 24);
  if (*(int *)&v32[4] >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v33;
    do
      *(_DWORD *)&v12[4 * v11++] = 0;
    while (v11 < *(int *)&v32[4]);
  }
  *(void *)&v32[24] = 0;
  if (v34 != (cv *)v35) {
    cv::fastFree((void **)v34, v10);
  }
  if (*(void *)&v36[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v36[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v36, v10);
  }
  *(void *)&v36[16] = 0;
  memset(&v36[32], 0, 24);
  if (*(int *)&v36[4] >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = v37;
    do
      *(_DWORD *)&v14[4 * v13++] = 0;
    while (v13 < *(int *)&v36[4]);
  }
  *(void *)&v36[24] = 0;
  if (v38 != (cv *)v39) {
    cv::fastFree((void **)v38, v10);
  }
}

void sub_225F1C4A8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  cv::Mat::~Mat((cv::Mat *)&a9, a2);
  cv::Mat::~Mat((cv::Mat *)&a21, v22);
  _Unwind_Resume(a1);
}

void cv::MatOp_AddEx::makeExpr(uint64_t a1, cv::Mat *a2, cv::Mat *a3, uint64_t a4, double a5, double a6)
{
  uint64_t v12 = (char *)v11 + 8;
  uint64_t v13 = (cv *)v14;
  v14[0] = 0;
  v14[1] = 0;
  LODWORD(v11[0]) = 1124007936;
  memset((char *)v11 + 4, 0, 48);
  void v11[3] = 0u;
  cv::MatExpr::MatExpr((uint64_t)v15, (uint64_t)&cv::g_MatOp_AddEx, 0, a2, a3, (cv::Mat *)v11, a4, a5, a6);
  cv::MatExpr::operator=(a1, v15);
  cv::MatExpr::~MatExpr((cv::MatExpr *)v15, v7);
  if (*((void *)&v11[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v11[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v11, v8);
  }
  *(void *)&v11[1] = 0;
  memset(&v11[2], 0, 24);
  if (SDWORD1(v11[0]) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v12;
    do
      *(_DWORD *)&v10[4 * v9++] = 0;
    while (v9 < SDWORD1(v11[0]));
  }
  *((void *)&v11[1] + 1) = 0;
  if (v13 != (cv *)v14) {
    cv::fastFree((void **)v13, v8);
  }
}

void sub_225F1C5C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  cv::MatExpr::~MatExpr((cv::MatExpr *)&a21, a2);
  cv::Mat::~Mat((cv::Mat *)&a9, v22);
  _Unwind_Resume(a1);
}

void cv::MatOp::add(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = &v15[1];
  uint64_t v17 = (cv *)v18;
  v18[0] = 0;
  v18[1] = 0;
  LODWORD(v15[0]) = 1124007936;
  memset((char *)v15 + 4, 0, 32);
  memset((char *)&v15[4] + 4, 0, 28);
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v15, 0xFFFFFFFFLL);
  uint64_t v12 = (char *)v11 + 8;
  uint64_t v13 = (cv *)v14;
  v14[0] = 0;
  v14[1] = 0;
  LODWORD(v11[0]) = 1124007936;
  memset((char *)v11 + 4, 0, 48);
  void v11[3] = 0u;
  cv::MatOp_AddEx::makeExpr(a4, (cv::Mat *)v15, (cv::Mat *)v11, a3, 1.0, 0.0);
  if (*((void *)&v11[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v11[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v11, v6);
  }
  *(void *)&v11[1] = 0;
  memset(&v11[2], 0, 24);
  if (SDWORD1(v11[0]) >= 1)
  {
    uint64_t v7 = 0;
    double v8 = v12;
    do
      *(_DWORD *)&v8[4 * v7++] = 0;
    while (v7 < SDWORD1(v11[0]));
  }
  *((void *)&v11[1] + 1) = 0;
  if (v13 != (cv *)v14) {
    cv::fastFree((void **)v13, v6);
  }
  if (v15[3] && atomic_fetch_add((atomic_uint *volatile)v15[3], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v15, v6);
  }
  v15[2] = 0;
  memset(&v15[4], 0, 24);
  if (SHIDWORD(v15[0]) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v16;
    do
      *((_DWORD *)v10 + v9++) = 0;
    while (v9 < SHIDWORD(v15[0]));
  }
  v15[3] = 0;
  if (v17 != (cv *)v18) {
    cv::fastFree((void **)v17, v6);
  }
}

void sub_225F1C7A8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  cv::Mat::~Mat((cv::Mat *)&a9, a2);
  cv::Mat::~Mat((cv::Mat *)&a21, v22);
  _Unwind_Resume(a1);
}

void cv::MatOp::subtract(cv::MatOp *this, const cv::MatExpr *a2, const cv::MatExpr *a3, cv::MatExpr *a4)
{
  if (*(cv::MatOp **)a3 != this)
  {
    uint64_t v7 = *(void (**)(void))(**(void **)a3 + 120);
    v7();
    return;
  }
  float64x2_t v40 = 0u;
  float64x2_t v41 = 0u;
  uint64_t v37 = &v36[8];
  uint64_t v38 = (cv *)v39;
  v39[0] = 0;
  v39[1] = 0;
  *(_DWORD *)uint64_t v36 = 1124007936;
  memset(&v36[4], 0, 60);
  long long v33 = &v32[8];
  double v34 = (cv *)v35;
  v35[0] = 0;
  v35[1] = 0;
  *(_DWORD *)long long v32 = 1124007936;
  memset(&v32[4], 0, 60);
  if (*(uint64_t **)a2 == &cv::g_MatOp_AddEx && (!*((void *)a2 + 16) || *((double *)a2 + 39) == 0.0))
  {
    uint64_t v15 = (_DWORD *)((char *)a2 + 16);
    if (v36 == (char *)a2 + 16)
    {
LABEL_56:
      double v8 = *((double *)a2 + 38);
      float64x2_t v27 = *((float64x2_t *)a2 + 21);
      float64x2_t v40 = *((float64x2_t *)a2 + 20);
      float64x2_t v41 = v27;
      goto LABEL_9;
    }
    uint64_t v16 = (atomic_uint *)*((void *)a2 + 5);
    if (v16)
    {
      atomic_fetch_add(v16, 1u);
      if (*(void *)&v36[24])
      {
        if (atomic_fetch_add(*(atomic_uint *volatile *)&v36[24], 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v36, a2);
        }
      }
    }
    *(void *)&v36[16] = 0;
    memset(&v36[32], 0, 24);
    if (*(uint64_t *)v36 <= 0)
    {
      *(void *)&v36[24] = 0;
      *(_DWORD *)uint64_t v36 = *v15;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = v37;
      do
        *(_DWORD *)&v18[4 * v17++] = 0;
      while (v17 < *(int *)&v36[4]);
      *(void *)&v36[24] = 0;
      *(_DWORD *)uint64_t v36 = *v15;
      if (*(int *)&v36[4] > 2) {
        goto LABEL_54;
      }
    }
    if (*((int *)a2 + 5) <= 2)
    {
      *(_DWORD *)&v36[4] = *((_DWORD *)a2 + 5);
      *(void *)&v36[8] = *((void *)a2 + 3);
      uint64_t v23 = (void *)*((void *)a2 + 11);
      uint64_t v24 = v38;
      *(void *)uint64_t v38 = *v23;
      *((void *)v24 + 1) = v23[1];
LABEL_55:
      uint64_t v25 = *((void *)a2 + 5);
      *(void *)&v36[16] = *((void *)a2 + 4);
      *(void *)&v36[24] = v25;
      long long v26 = *((_OWORD *)a2 + 4);
      *(_OWORD *)&v36[32] = *((_OWORD *)a2 + 3);
      *(_OWORD *)&v36[48] = v26;
      goto LABEL_56;
    }
LABEL_54:
    cv::Mat::copySize((cv::Mat *)v36, (const cv::MatExpr *)((char *)a2 + 16));
    goto LABEL_55;
  }
  double v8 = 1.0;
  (*(void (**)(void, const cv::MatExpr *, unsigned char *, uint64_t))(**(void **)a2 + 24))(*(void *)a2, a2, v36, 0xFFFFFFFFLL);
LABEL_9:
  if (*(uint64_t **)a3 != &cv::g_MatOp_AddEx || *((void *)a3 + 16) && *((double *)a3 + 39) != 0.0)
  {
    double v9 = -1.0;
    (*(void (**)(void, const cv::MatExpr *, unsigned char *, uint64_t))(**(void **)a3 + 24))(*(void *)a3, a3, v32, 0xFFFFFFFFLL);
    goto LABEL_13;
  }
  uint64_t v19 = (_DWORD *)((char *)a3 + 16);
  if (v32 != (char *)a3 + 16)
  {
    uint64_t v20 = (atomic_uint *)*((void *)a3 + 5);
    if (v20) {
      atomic_fetch_add(v20, 1u);
    }
    if (*(void *)&v32[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v32[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v32, a2);
    }
    *(void *)&v32[16] = 0;
    memset(&v32[32], 0, 24);
    if (*(uint64_t *)v32 <= 0)
    {
      *(void *)&v32[24] = 0;
      *(_DWORD *)long long v32 = *v19;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = v33;
      do
        *(_DWORD *)&v22[4 * v21++] = 0;
      while (v21 < *(int *)&v32[4]);
      *(void *)&v32[24] = 0;
      *(_DWORD *)long long v32 = *v19;
      if (*(int *)&v32[4] > 2) {
        goto LABEL_60;
      }
    }
    if (*((int *)a3 + 5) <= 2)
    {
      *(_DWORD *)&v32[4] = *((_DWORD *)a3 + 5);
      *(void *)&v32[8] = *((void *)a3 + 3);
      uint64_t v28 = (void *)*((void *)a3 + 11);
      uint64_t v29 = v34;
      *(void *)double v34 = *v28;
      *((void *)v29 + 1) = v28[1];
LABEL_61:
      long long v30 = *((_OWORD *)a3 + 3);
      *(_OWORD *)&v32[16] = *((_OWORD *)a3 + 2);
      *(_OWORD *)&v32[32] = v30;
      *(_OWORD *)&v32[48] = *((_OWORD *)a3 + 4);
      goto LABEL_62;
    }
LABEL_60:
    cv::Mat::copySize((cv::Mat *)v32, (const cv::MatExpr *)((char *)a3 + 16));
    goto LABEL_61;
  }
LABEL_62:
  double v9 = -*((double *)a3 + 38);
  float64x2_t v31 = vsubq_f64(v41, *((float64x2_t *)a3 + 21));
  float64x2_t v40 = vsubq_f64(v40, *((float64x2_t *)a3 + 20));
  float64x2_t v41 = v31;
LABEL_13:
  cv::MatOp_AddEx::makeExpr((uint64_t)a4, (cv::Mat *)v36, (cv::Mat *)v32, (uint64_t)&v40, v8, v9);
  if (*(void *)&v32[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v32[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v32, v10);
  }
  *(void *)&v32[16] = 0;
  memset(&v32[32], 0, 24);
  if (*(int *)&v32[4] >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v33;
    do
      *(_DWORD *)&v12[4 * v11++] = 0;
    while (v11 < *(int *)&v32[4]);
  }
  *(void *)&v32[24] = 0;
  if (v34 != (cv *)v35) {
    cv::fastFree((void **)v34, v10);
  }
  if (*(void *)&v36[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v36[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v36, v10);
  }
  *(void *)&v36[16] = 0;
  memset(&v36[32], 0, 24);
  if (*(int *)&v36[4] >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = v37;
    do
      *(_DWORD *)&v14[4 * v13++] = 0;
    while (v13 < *(int *)&v36[4]);
  }
  *(void *)&v36[24] = 0;
  if (v38 != (cv *)v39) {
    cv::fastFree((void **)v38, v10);
  }
}

void sub_225F1CC88(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  cv::Mat::~Mat((cv::Mat *)&a9, a2);
  cv::Mat::~Mat((cv::Mat *)&a21, v22);
  _Unwind_Resume(a1);
}

void cv::MatOp::subtract(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v16 = &v15[1];
  uint64_t v17 = (cv *)v18;
  v18[0] = 0;
  v18[1] = 0;
  LODWORD(v15[0]) = 1124007936;
  memset((char *)v15 + 4, 0, 32);
  memset((char *)&v15[4] + 4, 0, 28);
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a3 + 24))(*a3, a3, v15, 0xFFFFFFFFLL);
  uint64_t v12 = (char *)v11 + 8;
  uint64_t v13 = (cv *)v14;
  v14[0] = 0;
  v14[1] = 0;
  LODWORD(v11[0]) = 1124007936;
  memset((char *)v11 + 4, 0, 48);
  void v11[3] = 0u;
  cv::MatOp_AddEx::makeExpr(a4, (cv::Mat *)v15, (cv::Mat *)v11, a2, -1.0, 0.0);
  if (*((void *)&v11[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v11[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v11, v6);
  }
  *(void *)&v11[1] = 0;
  memset(&v11[2], 0, 24);
  if (SDWORD1(v11[0]) >= 1)
  {
    uint64_t v7 = 0;
    double v8 = v12;
    do
      *(_DWORD *)&v8[4 * v7++] = 0;
    while (v7 < SDWORD1(v11[0]));
  }
  *((void *)&v11[1] + 1) = 0;
  if (v13 != (cv *)v14) {
    cv::fastFree((void **)v13, v6);
  }
  if (v15[3] && atomic_fetch_add((atomic_uint *volatile)v15[3], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v15, v6);
  }
  v15[2] = 0;
  memset(&v15[4], 0, 24);
  if (SHIDWORD(v15[0]) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v16;
    do
      *((_DWORD *)v10 + v9++) = 0;
    while (v9 < SHIDWORD(v15[0]));
  }
  v15[3] = 0;
  if (v17 != (cv *)v18) {
    cv::fastFree((void **)v17, v6);
  }
}

void sub_225F1CE68(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  cv::Mat::~Mat((cv::Mat *)&a9, a2);
  cv::Mat::~Mat((cv::Mat *)&a21, v22);
  _Unwind_Resume(a1);
}

void cv::MatOp::multiply(cv::MatOp *this, float64x2_t *a2, const cv::MatExpr *a3, cv::MatExpr *a4, double a5, const cv::Mat *a6)
{
  double v6 = a5;
  if (*(cv::MatOp **)a3 != this)
  {
    uint64_t v10 = *(void (**)(uint64_t))(**(void **)a3 + 136);
    uint64_t v11 = *(void *)a3;
    v10(v11);
    return;
  }
  uint64_t v55 = &v54[8];
  uint64_t v56 = (cv *)v57;
  v57[0] = 0;
  v57[1] = 0;
  *(_DWORD *)uint64_t v54 = 1124007936;
  memset(&v54[4], 0, 60);
  uint64_t v51 = &v50[8];
  uint64_t v52 = (cv *)v53;
  v53[0] = 0;
  v53[1] = 0;
  *(_DWORD *)uint64_t v50 = 1124007936;
  memset(&v50[4], 0, 60);
  uint64_t v12 = *(uint64_t **)&a2->f64[0];
  if (*(uint64_t **)&a2->f64[0] == &cv::g_MatOp_Bin && LODWORD(a2->f64[1]) == 47)
  {
    if (!*(void *)&a2[8].f64[0] || a2[19].f64[1] == 0.0)
    {
      if (this != (cv::MatOp *)&cv::g_MatOp_AddEx
        || *((void *)a3 + 16) && *((double *)a3 + 39) != 0.0
        || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 20)), (int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 21)))))) & 1) != 0)
      {
        (*(void (**)(cv::MatOp *, const cv::MatExpr *, unsigned char *, uint64_t))(*(void *)this + 24))(this, a3, v50, 0xFFFFFFFFLL);
LABEL_14:
        cv::MatOp_Bin::makeExpr(a4, (cv::MatExpr *)0x2F, (cv::Mat *)v50, (const cv::Mat *)&a2[1], a6, v6 / a2[19].f64[0]);
        goto LABEL_42;
      }
      double v6 = *((double *)a3 + 38) * a5;
      uint64_t v35 = (_DWORD *)((char *)a3 + 16);
      if (v50 == (char *)a3 + 16) {
        goto LABEL_14;
      }
      uint64_t v36 = (atomic_uint *)*((void *)a3 + 5);
      if (v36)
      {
        atomic_fetch_add(v36, 1u);
        if (*(void *)&v50[24])
        {
          if (atomic_fetch_add(*(atomic_uint *volatile *)&v50[24], 0xFFFFFFFF) == 1) {
            cv::Mat::deallocate((cv::Mat *)v50, a2);
          }
        }
      }
      *(void *)&v50[16] = 0;
      memset(&v50[32], 0, 24);
      if (*(uint64_t *)v50 <= 0)
      {
        *(void *)&v50[24] = 0;
        *(_DWORD *)uint64_t v50 = *v35;
      }
      else
      {
        uint64_t v37 = 0;
        uint64_t v38 = v51;
        do
          *(_DWORD *)&v38[4 * v37++] = 0;
        while (v37 < *(int *)&v50[4]);
        *(void *)&v50[24] = 0;
        *(_DWORD *)uint64_t v50 = *v35;
        if (*(int *)&v50[4] > 2) {
          goto LABEL_111;
        }
      }
      if (*((int *)a3 + 5) <= 2)
      {
        *(_DWORD *)&v50[4] = *((_DWORD *)a3 + 5);
        *(void *)&v50[8] = *((void *)a3 + 3);
        uint64_t v46 = (void *)*((void *)a3 + 11);
        uint64_t v47 = v52;
        *(void *)uint64_t v52 = *v46;
        *((void *)v47 + 1) = v46[1];
LABEL_112:
        uint64_t v48 = *((void *)a3 + 5);
        *(void *)&v50[16] = *((void *)a3 + 4);
        *(void *)&v50[24] = v48;
        long long v49 = *((_OWORD *)a3 + 4);
        *(_OWORD *)&v50[32] = *((_OWORD *)a3 + 3);
        *(_OWORD *)&v50[48] = v49;
        goto LABEL_14;
      }
LABEL_111:
      cv::Mat::copySize((cv::Mat *)v50, (const cv::MatExpr *)((char *)a3 + 16));
      goto LABEL_112;
    }
    goto LABEL_19;
  }
  if (v12 != &cv::g_MatOp_AddEx
    || *(void *)&a2[8].f64[0] && a2[19].f64[1] != 0.0
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(a2[20]), (int32x4_t)vceqzq_f64(a2[21]))))) & 1) != 0)
  {
LABEL_19:
    (*(void (**)(void, float64x2_t *, unsigned char *, uint64_t))(*v12 + 24))(*(void *)&a2->f64[0], a2, v54, 0xFFFFFFFFLL);
    goto LABEL_20;
  }
  uint64_t v28 = a2 + 1;
  if (v54 != (unsigned char *)&a2[1])
  {
    uint64_t v29 = *(atomic_uint **)&a2[2].f64[1];
    if (v29)
    {
      atomic_fetch_add(v29, 1u);
      if (*(void *)&v54[24])
      {
        if (atomic_fetch_add(*(atomic_uint *volatile *)&v54[24], 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v54, a2);
        }
      }
    }
    *(void *)&v54[16] = 0;
    memset(&v54[32], 0, 24);
    if (*(uint64_t *)v54 <= 0)
    {
      *(void *)&v54[24] = 0;
      *(_DWORD *)uint64_t v54 = LODWORD(v28->f64[0]);
    }
    else
    {
      uint64_t v30 = 0;
      float64x2_t v31 = v55;
      do
        *(_DWORD *)&v31[4 * v30++] = 0;
      while (v30 < *(int *)&v54[4]);
      *(void *)&v54[24] = 0;
      *(_DWORD *)uint64_t v54 = LODWORD(v28->f64[0]);
      if (*(int *)&v54[4] > 2) {
        goto LABEL_105;
      }
    }
    if (SHIDWORD(a2[1].f64[0]) <= 2)
    {
      *(_DWORD *)&v54[4] = HIDWORD(a2[1].f64[0]);
      *(float64_t *)&v54[8] = a2[1].f64[1];
      float64_t v42 = a2[5].f64[1];
      uint64_t v43 = v56;
      *(void *)uint64_t v56 = **(void **)&v42;
      *((void *)v43 + 1) = *(void *)(*(void *)&v42 + 8);
LABEL_106:
      float64_t v44 = a2[2].f64[1];
      *(float64_t *)&v54[16] = a2[2].f64[0];
      *(float64_t *)&v54[24] = v44;
      float64x2_t v45 = a2[4];
      *(float64x2_t *)&v54[32] = a2[3];
      *(float64x2_t *)&v54[48] = v45;
      goto LABEL_107;
    }
LABEL_105:
    cv::Mat::copySize((cv::Mat *)v54, (const cv::Mat *)&a2[1]);
    goto LABEL_106;
  }
LABEL_107:
  double v6 = a2[19].f64[0] * v6;
LABEL_20:
  uint64_t v14 = *(uint64_t **)a3;
  if (*(uint64_t **)a3 != &cv::g_MatOp_AddEx)
  {
    if (v14 == &cv::g_MatOp_Bin && *((_DWORD *)a3 + 2) == 47 && (!*((void *)a3 + 16) || *((double *)a3 + 39) == 0.0))
    {
      uint64_t v15 = (_DWORD *)((char *)a3 + 16);
      if (v50 == (char *)a3 + 16)
      {
LABEL_85:
        uint64_t v19 = 47;
        double v6 = v6 / *((double *)a3 + 38);
        goto LABEL_41;
      }
      uint64_t v16 = (atomic_uint *)*((void *)a3 + 5);
      if (v16) {
        atomic_fetch_add(v16, 1u);
      }
      if (*(void *)&v50[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v50[24], 0xFFFFFFFF) == 1) {
        cv::Mat::deallocate((cv::Mat *)v50, a2);
      }
      *(void *)&v50[16] = 0;
      memset(&v50[32], 0, 24);
      if (*(uint64_t *)v50 <= 0)
      {
        *(void *)&v50[24] = 0;
        *(_DWORD *)uint64_t v50 = *v15;
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v18 = v51;
        do
          *(_DWORD *)&v18[4 * v17++] = 0;
        while (v17 < *(int *)&v50[4]);
        *(void *)&v50[24] = 0;
        *(_DWORD *)uint64_t v50 = *v15;
        if (*(int *)&v50[4] > 2) {
          goto LABEL_83;
        }
      }
      if (*((int *)a3 + 5) <= 2)
      {
        *(_DWORD *)&v50[4] = *((_DWORD *)a3 + 5);
        *(void *)&v50[8] = *((void *)a3 + 3);
        long long v32 = (void *)*((void *)a3 + 11);
        long long v33 = v52;
        *(void *)uint64_t v52 = *v32;
        *((void *)v33 + 1) = v32[1];
LABEL_84:
        long long v34 = *((_OWORD *)a3 + 3);
        *(_OWORD *)&v50[16] = *((_OWORD *)a3 + 2);
        *(_OWORD *)&v50[32] = v34;
        *(_OWORD *)&v50[48] = *((_OWORD *)a3 + 4);
        goto LABEL_85;
      }
LABEL_83:
      cv::Mat::copySize((cv::Mat *)v50, (const cv::MatExpr *)((char *)a3 + 16));
      goto LABEL_84;
    }
    goto LABEL_39;
  }
  if ((!*((void *)a3 + 16) || *((double *)a3 + 39) == 0.0)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 20)), (int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 21)))))) & 1) == 0)
  {
    uint64_t v24 = (_DWORD *)((char *)a3 + 16);
    if (v50 == (char *)a3 + 16)
    {
LABEL_101:
      double v6 = v6 * *((double *)a3 + 38);
      goto LABEL_40;
    }
    uint64_t v25 = (atomic_uint *)*((void *)a3 + 5);
    if (v25) {
      atomic_fetch_add(v25, 1u);
    }
    if (*(void *)&v50[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v50[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v50, a2);
    }
    *(void *)&v50[16] = 0;
    memset(&v50[32], 0, 24);
    if (*(uint64_t *)v50 <= 0)
    {
      *(void *)&v50[24] = 0;
      *(_DWORD *)uint64_t v50 = *v24;
    }
    else
    {
      uint64_t v26 = 0;
      float64x2_t v27 = v51;
      do
        *(_DWORD *)&v27[4 * v26++] = 0;
      while (v26 < *(int *)&v50[4]);
      *(void *)&v50[24] = 0;
      *(_DWORD *)uint64_t v50 = *v24;
      if (*(int *)&v50[4] > 2) {
        goto LABEL_99;
      }
    }
    if (*((int *)a3 + 5) <= 2)
    {
      *(_DWORD *)&v50[4] = *((_DWORD *)a3 + 5);
      *(void *)&v50[8] = *((void *)a3 + 3);
      uint64_t v39 = (void *)*((void *)a3 + 11);
      float64x2_t v40 = v52;
      *(void *)uint64_t v52 = *v39;
      *((void *)v40 + 1) = v39[1];
LABEL_100:
      long long v41 = *((_OWORD *)a3 + 3);
      *(_OWORD *)&v50[16] = *((_OWORD *)a3 + 2);
      *(_OWORD *)&v50[32] = v41;
      *(_OWORD *)&v50[48] = *((_OWORD *)a3 + 4);
      goto LABEL_101;
    }
LABEL_99:
    cv::Mat::copySize((cv::Mat *)v50, (const cv::MatExpr *)((char *)a3 + 16));
    goto LABEL_100;
  }
LABEL_39:
  (*(void (**)(uint64_t *, const cv::MatExpr *, unsigned char *, uint64_t))(*v14 + 24))(v14, a3, v50, 0xFFFFFFFFLL);
LABEL_40:
  uint64_t v19 = 42;
LABEL_41:
  cv::MatOp_Bin::makeExpr(a4, (cv::MatExpr *)v19, (cv::Mat *)v54, (const cv::Mat *)v50, a6, v6);
LABEL_42:
  if (*(void *)&v50[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v50[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v50, v13);
  }
  *(void *)&v50[16] = 0;
  memset(&v50[32], 0, 24);
  if (*(int *)&v50[4] >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = v51;
    do
      *(_DWORD *)&v21[4 * v20++] = 0;
    while (v20 < *(int *)&v50[4]);
  }
  *(void *)&v50[24] = 0;
  if (v52 != (cv *)v53) {
    cv::fastFree((void **)v52, v13);
  }
  if (*(void *)&v54[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v54[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v54, v13);
  }
  *(void *)&v54[16] = 0;
  memset(&v54[32], 0, 24);
  if (*(int *)&v54[4] >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = v55;
    do
      *(_DWORD *)&v23[4 * v22++] = 0;
    while (v22 < *(int *)&v54[4]);
  }
  *(void *)&v54[24] = 0;
  if (v56 != (cv *)v57) {
    cv::fastFree((void **)v56, v13);
  }
}

void sub_225F1D64C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  cv::Mat::~Mat((cv::Mat *)&a9, a2);
  cv::Mat::~Mat((cv::Mat *)&a21, v22);
  _Unwind_Resume(a1);
}

void cv::MatOp_Bin::makeExpr(cv::MatOp_Bin *this, cv::MatExpr *a2, cv::Mat *a3, const cv::Mat *a4, const cv::Mat *a5, double a6)
{
  uint64_t v15 = (char *)v14 + 8;
  uint64_t v16 = (cv *)v17;
  v17[0] = 0;
  v17[1] = 0;
  LODWORD(v14[0]) = 1124007936;
  memset((char *)v14 + 4, 0, 48);
  v14[3] = 0u;
  uint64_t v7 = *((void *)a4 + 2);
  memset(v13, 0, sizeof(v13));
  double v8 = 0.0;
  if (v7) {
    double v8 = 1.0;
  }
  cv::MatExpr::MatExpr((uint64_t)v18, (uint64_t)&cv::g_MatOp_Bin, (int)a2, a3, a4, (cv::Mat *)v14, (uint64_t)v13, a6, v8);
  cv::MatExpr::operator=((uint64_t)this, v18);
  cv::MatExpr::~MatExpr((cv::MatExpr *)v18, v9);
  if (*((void *)&v14[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v14[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v14, v10);
  }
  *(void *)&v14[1] = 0;
  memset(&v14[2], 0, 24);
  if (SDWORD1(v14[0]) >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v15;
    do
      *(_DWORD *)&v12[4 * v11++] = 0;
    while (v11 < SDWORD1(v14[0]));
  }
  *((void *)&v14[1] + 1) = 0;
  if (v16 != (cv *)v17) {
    cv::fastFree((void **)v16, v10);
  }
}

void sub_225F1D790(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  cv::MatExpr::~MatExpr((cv::MatExpr *)va1, a2);
  cv::Mat::~Mat((cv::Mat *)va, v7);
  _Unwind_Resume(a1);
}

void cv::MatOp::multiply(cv::MatOp *this, const cv::MatExpr *a2, double a3, cv::MatExpr *a4)
{
  uint64_t v17 = &v16[1];
  uint64_t v18 = (cv *)v19;
  v19[0] = 0;
  v19[1] = 0;
  LODWORD(v16[0]) = 1124007936;
  memset((char *)v16 + 4, 0, 32);
  memset((char *)&v16[4] + 4, 0, 28);
  (*(void (**)(void, const cv::MatExpr *, void *, uint64_t))(**(void **)a2 + 24))(*(void *)a2, a2, v16, 0xFFFFFFFFLL);
  uint64_t v13 = (char *)v12 + 8;
  uint64_t v14 = (cv *)v15;
  v15[0] = 0;
  v15[1] = 0;
  LODWORD(v12[0]) = 1124007936;
  memset((char *)v12 + 4, 0, 48);
  v12[3] = 0u;
  memset(v11, 0, sizeof(v11));
  cv::MatOp_AddEx::makeExpr((uint64_t)a4, (cv::Mat *)v16, (cv::Mat *)v12, (uint64_t)v11, a3, 0.0);
  if (*((void *)&v12[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v12[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v12, v6);
  }
  *(void *)&v12[1] = 0;
  memset(&v12[2], 0, 24);
  if (SDWORD1(v12[0]) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v13;
    do
      *(_DWORD *)&v8[4 * v7++] = 0;
    while (v7 < SDWORD1(v12[0]));
  }
  *((void *)&v12[1] + 1) = 0;
  if (v14 != (cv *)v15) {
    cv::fastFree((void **)v14, v6);
  }
  if (v16[3] && atomic_fetch_add((atomic_uint *volatile)v16[3], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v16, v6);
  }
  void v16[2] = 0;
  memset(&v16[4], 0, 24);
  if (SHIDWORD(v16[0]) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v17;
    do
      *((_DWORD *)v10 + v9++) = 0;
    while (v9 < SHIDWORD(v16[0]));
  }
  v16[3] = 0;
  if (v18 != (cv *)v19) {
    cv::fastFree((void **)v18, v6);
  }
}

void sub_225F1D97C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  cv::Mat::~Mat((cv::Mat *)va, a2);
  cv::Mat::~Mat((cv::Mat *)va1, v7);
  _Unwind_Resume(a1);
}

void cv::MatOp::divide(cv::MatOp *this, float64x2_t *a2, float64x2_t *a3, cv::MatExpr *a4, double a5, const cv::Mat *a6)
{
  if (*(cv::MatOp **)&a3->f64[0] != this)
  {
    uint64_t v11 = *(void (**)(void))(**(void **)&a3->f64[0] + 152);
    v11();
    return;
  }
  uint64_t v12 = *(uint64_t **)&a2->f64[0];
  if (*(uint64_t **)&a2->f64[0] == &cv::g_MatOp_Bin
    && LODWORD(a2->f64[1]) == 47
    && (!*(void *)&a2[8].f64[0] || a2[19].f64[1] == 0.0)
    && this == (cv::MatOp *)&cv::g_MatOp_Bin
    && LODWORD(a3->f64[1]) == 47
    && (!*(void *)&a3[8].f64[0] || a3[19].f64[1] == 0.0))
  {
    uint64_t v19 = (cv::Mat *)&a3[1];
    double v20 = a2[19].f64[0] / a3[19].f64[0];
    cv::MatOp_Bin::makeExpr(a4, (cv::MatExpr *)0x2F, v19, (const cv::Mat *)&a2[1], a6, v20);
    return;
  }
  uint64_t v50 = &v49[8];
  uint64_t v51 = (cv *)v52;
  v52[0] = 0;
  v52[1] = 0;
  *(_DWORD *)long long v49 = 1124007936;
  memset(&v49[4], 0, 60);
  uint64_t v46 = &v45[8];
  uint64_t v47 = (cv *)v48;
  v48[0] = 0;
  v48[1] = 0;
  *(_DWORD *)float64x2_t v45 = 1124007936;
  memset(&v45[4], 0, 60);
  if (v12 != &cv::g_MatOp_AddEx
    || *(void *)&a2[8].f64[0] && a2[19].f64[1] != 0.0
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(a2[20]), (int32x4_t)vceqzq_f64(a2[21]))))) & 1) != 0)
  {
    (*(void (**)(uint64_t *, float64x2_t *, unsigned char *, uint64_t))(*v12 + 24))(v12, a2, v49, 0xFFFFFFFFLL);
    goto LABEL_14;
  }
  uint64_t v21 = a2 + 1;
  if (v49 != (unsigned char *)&a2[1])
  {
    uint64_t v22 = *(atomic_uint **)&a2[2].f64[1];
    if (v22)
    {
      atomic_fetch_add(v22, 1u);
      if (*(void *)&v49[24])
      {
        if (atomic_fetch_add(*(atomic_uint *volatile *)&v49[24], 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v49, a2);
        }
      }
    }
    *(void *)&v49[16] = 0;
    memset(&v49[32], 0, 24);
    if (*(uint64_t *)v49 <= 0)
    {
      *(void *)&v49[24] = 0;
      *(_DWORD *)long long v49 = LODWORD(v21->f64[0]);
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = v50;
      do
        *(_DWORD *)&v24[4 * v23++] = 0;
      while (v23 < *(int *)&v49[4]);
      *(void *)&v49[24] = 0;
      *(_DWORD *)long long v49 = LODWORD(v21->f64[0]);
      if (*(int *)&v49[4] > 2) {
        goto LABEL_71;
      }
    }
    if (SHIDWORD(a2[1].f64[0]) <= 2)
    {
      *(_DWORD *)&_OWORD v49[4] = HIDWORD(a2[1].f64[0]);
      *(float64_t *)&v49[8] = a2[1].f64[1];
      float64_t v33 = a2[5].f64[1];
      long long v34 = v51;
      *(void *)uint64_t v51 = **(void **)&v33;
      *((void *)v34 + 1) = *(void *)(*(void *)&v33 + 8);
LABEL_72:
      float64_t v35 = a2[2].f64[1];
      *(float64_t *)&v49[16] = a2[2].f64[0];
      *(float64_t *)&v49[24] = v35;
      float64x2_t v36 = a2[4];
      *(float64x2_t *)&v49[32] = a2[3];
      *(float64x2_t *)&v49[48] = v36;
      goto LABEL_73;
    }
LABEL_71:
    cv::Mat::copySize((cv::Mat *)v49, (const cv::Mat *)&a2[1]);
    goto LABEL_72;
  }
LABEL_73:
  a5 = a2[19].f64[0] * a5;
LABEL_14:
  uint64_t v13 = *(uint64_t **)&a3->f64[0];
  if (*(uint64_t **)&a3->f64[0] == &cv::g_MatOp_AddEx)
  {
    if (*(void *)&a3[8].f64[0] && a3[19].f64[1] != 0.0
      || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(a3[20]), (int32x4_t)vceqzq_f64(a3[21]))))) & 1) != 0)
    {
      goto LABEL_33;
    }
    uint64_t v25 = a3 + 1;
    if (v45 == (unsigned char *)&a3[1])
    {
LABEL_79:
      double v32 = a3[19].f64[0];
      uint64_t v18 = 47;
      goto LABEL_80;
    }
    uint64_t v26 = *(atomic_uint **)&a3[2].f64[1];
    if (v26) {
      atomic_fetch_add(v26, 1u);
    }
    if (*(void *)&v45[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v45[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v45, a2);
    }
    *(void *)&v45[16] = 0;
    memset(&v45[32], 0, 24);
    if (*(uint64_t *)v45 <= 0)
    {
      *(void *)&v45[24] = 0;
      *(_DWORD *)float64x2_t v45 = LODWORD(v25->f64[0]);
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = v46;
      do
        *(_DWORD *)&v28[4 * v27++] = 0;
      while (v27 < *(int *)&v45[4]);
      *(void *)&v45[24] = 0;
      *(_DWORD *)float64x2_t v45 = LODWORD(v25->f64[0]);
      if (*(int *)&v45[4] > 2) {
        goto LABEL_77;
      }
    }
    if (SHIDWORD(a3[1].f64[0]) <= 2)
    {
      *(_DWORD *)&v45[4] = HIDWORD(a3[1].f64[0]);
      *(float64_t *)&v45[8] = a3[1].f64[1];
      float64_t v37 = a3[5].f64[1];
      uint64_t v38 = v47;
      *(void *)uint64_t v47 = **(void **)&v37;
      *((void *)v38 + 1) = *(void *)(*(void *)&v37 + 8);
LABEL_78:
      float64x2_t v39 = a3[3];
      *(float64x2_t *)&v45[16] = a3[2];
      *(float64x2_t *)&v45[32] = v39;
      *(float64x2_t *)&v45[48] = a3[4];
      goto LABEL_79;
    }
LABEL_77:
    cv::Mat::copySize((cv::Mat *)v45, (const cv::Mat *)&a3[1]);
    goto LABEL_78;
  }
  if (v13 != &cv::g_MatOp_Bin || LODWORD(a3->f64[1]) != 47 || *(void *)&a3[8].f64[0] && a3[19].f64[1] != 0.0)
  {
LABEL_33:
    (*(void (**)(uint64_t *, float64x2_t *, unsigned char *, uint64_t))(*v13 + 24))(v13, a3, v45, 0xFFFFFFFFLL);
    uint64_t v18 = 47;
    goto LABEL_81;
  }
  uint64_t v14 = a3 + 1;
  if (v45 != (unsigned char *)&a3[1])
  {
    uint64_t v15 = *(atomic_uint **)&a3[2].f64[1];
    if (v15) {
      atomic_fetch_add(v15, 1u);
    }
    if (*(void *)&v45[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v45[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v45, a2);
    }
    *(void *)&v45[16] = 0;
    memset(&v45[32], 0, 24);
    if (*(uint64_t *)v45 <= 0)
    {
      *(void *)&v45[24] = 0;
      *(_DWORD *)float64x2_t v45 = LODWORD(v14->f64[0]);
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = v46;
      do
        *(_DWORD *)&v17[4 * v16++] = 0;
      while (v16 < *(int *)&v45[4]);
      *(void *)&v45[24] = 0;
      *(_DWORD *)float64x2_t v45 = LODWORD(v14->f64[0]);
      if (*(int *)&v45[4] > 2) {
        goto LABEL_65;
      }
    }
    if (SHIDWORD(a3[1].f64[0]) <= 2)
    {
      *(_DWORD *)&v45[4] = HIDWORD(a3[1].f64[0]);
      *(float64_t *)&v45[8] = a3[1].f64[1];
      float64_t v29 = a3[5].f64[1];
      uint64_t v30 = v47;
      *(void *)uint64_t v47 = **(void **)&v29;
      *((void *)v30 + 1) = *(void *)(*(void *)&v29 + 8);
LABEL_66:
      float64x2_t v31 = a3[3];
      *(float64x2_t *)&v45[16] = a3[2];
      *(float64x2_t *)&v45[32] = v31;
      *(float64x2_t *)&v45[48] = a3[4];
      goto LABEL_67;
    }
LABEL_65:
    cv::Mat::copySize((cv::Mat *)v45, (const cv::Mat *)&a3[1]);
    goto LABEL_66;
  }
LABEL_67:
  double v32 = a3[19].f64[0];
  uint64_t v18 = 42;
LABEL_80:
  a5 = a5 / v32;
LABEL_81:
  cv::MatOp_Bin::makeExpr(a4, (cv::MatExpr *)v18, (cv::Mat *)v49, (const cv::Mat *)v45, a6, a5);
  if (*(void *)&v45[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v45[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v45, v40);
  }
  *(void *)&v45[16] = 0;
  memset(&v45[32], 0, 24);
  if (*(int *)&v45[4] >= 1)
  {
    uint64_t v41 = 0;
    float64_t v42 = v46;
    do
      *(_DWORD *)&v42[4 * v41++] = 0;
    while (v41 < *(int *)&v45[4]);
  }
  *(void *)&v45[24] = 0;
  if (v47 != (cv *)v48) {
    cv::fastFree((void **)v47, v40);
  }
  if (*(void *)&v49[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v49[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v49, v40);
  }
  *(void *)&v49[16] = 0;
  memset(&v49[32], 0, 24);
  if (*(int *)&v49[4] >= 1)
  {
    uint64_t v43 = 0;
    float64_t v44 = v50;
    do
      *(_DWORD *)&v44[4 * v43++] = 0;
    while (v43 < *(int *)&v49[4]);
  }
  *(void *)&v49[24] = 0;
  if (v51 != (cv *)v52) {
    cv::fastFree((void **)v51, v40);
  }
}

void sub_225F1E058(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  cv::Mat::~Mat((cv::Mat *)&a9, a2);
  cv::Mat::~Mat((cv::Mat *)&a21, v22);
  _Unwind_Resume(a1);
}

void cv::MatOp::divide(cv::MatOp *this, double a2, const cv::MatExpr *a3, cv::MatExpr *a4)
{
  uint64_t v17 = &v16[1];
  uint64_t v18 = (cv *)v19;
  v19[0] = 0;
  v19[1] = 0;
  LODWORD(v16[0]) = 1124007936;
  memset((char *)v16 + 4, 0, 32);
  memset((char *)&v16[4] + 4, 0, 28);
  (*(void (**)(void, const cv::MatExpr *, void *, uint64_t))(**(void **)a3 + 24))(*(void *)a3, a3, v16, 0xFFFFFFFFLL);
  uint64_t v13 = (char *)v12 + 8;
  uint64_t v14 = (cv *)v15;
  v15[0] = 0;
  v15[1] = 0;
  LODWORD(v12[0]) = 1124007936;
  memset((char *)v12 + 4, 0, 48);
  v12[3] = 0u;
  cv::MatOp_Bin::makeExpr(a4, (cv::MatExpr *)0x2F, (cv::Mat *)v16, (const cv::Mat *)v12, v6, a2);
  if (*((void *)&v12[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v12[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v12, v7);
  }
  *(void *)&v12[1] = 0;
  memset(&v12[2], 0, 24);
  if (SDWORD1(v12[0]) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v13;
    do
      *(_DWORD *)&v9[4 * v8++] = 0;
    while (v8 < SDWORD1(v12[0]));
  }
  *((void *)&v12[1] + 1) = 0;
  if (v14 != (cv *)v15) {
    cv::fastFree((void **)v14, v7);
  }
  if (v16[3] && atomic_fetch_add((atomic_uint *volatile)v16[3], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v16, v7);
  }
  void v16[2] = 0;
  memset(&v16[4], 0, 24);
  if (SHIDWORD(v16[0]) >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v17;
    do
      *((_DWORD *)v11 + v10++) = 0;
    while (v10 < SHIDWORD(v16[0]));
  }
  v16[3] = 0;
  if (v18 != (cv *)v19) {
    cv::fastFree((void **)v18, v7);
  }
}

void sub_225F1E234(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  cv::Mat::~Mat((cv::Mat *)&a9, a2);
  cv::Mat::~Mat((cv::Mat *)&a21, v22);
  _Unwind_Resume(a1);
}

void cv::MatOp::abs(cv::MatOp *this, const cv::MatExpr *a2, cv::MatExpr *a3)
{
  uint64_t v15 = &v14[1];
  uint64_t v16 = (cv *)v17;
  v17[0] = 0;
  v17[1] = 0;
  LODWORD(v14[0]) = 1124007936;
  memset((char *)v14 + 4, 0, 32);
  memset((char *)&v14[4] + 4, 0, 28);
  (*(void (**)(void, const cv::MatExpr *, void *, uint64_t))(**(void **)a2 + 24))(*(void *)a2, a2, v14, 0xFFFFFFFFLL);
  uint64_t v11 = (char *)v10 + 8;
  uint64_t v12 = (cv *)v13;
  v13[0] = 0;
  v13[1] = 0;
  LODWORD(v10[0]) = 1124007936;
  memset((char *)v10 + 4, 0, 48);
  v10[3] = 0u;
  cv::MatOp_Bin::makeExpr(a3, (cv::MatExpr *)0x61, (cv::Mat *)v14, (const cv::Mat *)v10, v4, 1.0);
  if (*((void *)&v10[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v10[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v10, v5);
  }
  *(void *)&v10[1] = 0;
  memset(&v10[2], 0, 24);
  if (SDWORD1(v10[0]) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v11;
    do
      *(_DWORD *)&v7[4 * v6++] = 0;
    while (v6 < SDWORD1(v10[0]));
  }
  *((void *)&v10[1] + 1) = 0;
  if (v12 != (cv *)v13) {
    cv::fastFree((void **)v12, v5);
  }
  if (v14[3] && atomic_fetch_add((atomic_uint *volatile)v14[3], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v14, v5);
  }
  void v14[2] = 0;
  memset(&v14[4], 0, 24);
  if (SHIDWORD(v14[0]) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v15;
    do
      *((_DWORD *)v9 + v8++) = 0;
    while (v8 < SHIDWORD(v14[0]));
  }
  v14[3] = 0;
  if (v16 != (cv *)v17) {
    cv::fastFree((void **)v16, v5);
  }
}

void sub_225F1E404(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  cv::Mat::~Mat((cv::Mat *)&a9, a2);
  cv::Mat::~Mat((cv::Mat *)&a21, v22);
  _Unwind_Resume(a1);
}

void cv::MatOp::transpose(cv::MatOp *this, const cv::MatExpr *a2, cv::MatExpr *a3)
{
  uint64_t v9 = &v8[1];
  uint64_t v10 = (cv *)v11;
  v11[0] = 0;
  v11[1] = 0;
  LODWORD(v8[0]) = 1124007936;
  memset((char *)v8 + 4, 0, 32);
  memset((char *)&v8[4] + 4, 0, 28);
  (*(void (**)(void, const cv::MatExpr *, void *, uint64_t))(**(void **)a2 + 24))(*(void *)a2, a2, v8, 0xFFFFFFFFLL);
  cv::MatOp_T::makeExpr(a3, (cv::MatExpr *)v8, v4, 1.0);
  if (v8[3] && atomic_fetch_add((atomic_uint *volatile)v8[3], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v8, v5);
  }
  v8[2] = 0;
  memset(&v8[4], 0, 24);
  if (SHIDWORD(v8[0]) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v9;
    do
      *((_DWORD *)v7 + v6++) = 0;
    while (v6 < SHIDWORD(v8[0]));
  }
  v8[3] = 0;
  if (v10 != (cv *)v11) {
    cv::fastFree((void **)v10, v5);
  }
}

void sub_225F1E52C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void cv::MatOp_T::makeExpr(cv::MatOp_T *this, cv::MatExpr *a2, const cv::Mat *a3, double a4)
{
  uint64_t v17 = (char *)v16 + 8;
  uint64_t v18 = (cv *)v19;
  v19[0] = 0;
  v19[1] = 0;
  LODWORD(v16[0]) = 1124007936;
  memset((char *)v16 + 4, 0, 48);
  v16[3] = 0u;
  uint64_t v13 = (char *)v12 + 8;
  uint64_t v14 = (cv *)v15;
  v15[0] = 0;
  v15[1] = 0;
  LODWORD(v12[0]) = 1124007936;
  memset((char *)v12 + 4, 0, 48);
  v12[3] = 0u;
  memset(v11, 0, sizeof(v11));
  cv::MatExpr::MatExpr((uint64_t)v20, (uint64_t)&cv::g_MatOp_T, 0, a2, (cv::Mat *)v16, (cv::Mat *)v12, (uint64_t)v11, a4, 0.0);
  cv::MatExpr::operator=((uint64_t)this, v20);
  cv::MatExpr::~MatExpr((cv::MatExpr *)v20, v5);
  if (*((void *)&v12[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v12[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v12, v6);
  }
  *(void *)&v12[1] = 0;
  memset(&v12[2], 0, 24);
  if (SDWORD1(v12[0]) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v13;
    do
      *(_DWORD *)&v8[4 * v7++] = 0;
    while (v7 < SDWORD1(v12[0]));
  }
  *((void *)&v12[1] + 1) = 0;
  if (v14 != (cv *)v15) {
    cv::fastFree((void **)v14, v6);
  }
  if (*((void *)&v16[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v16[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v16, v6);
  }
  *(void *)&v16[1] = 0;
  memset(&v16[2], 0, 24);
  if (SDWORD1(v16[0]) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v17;
    do
      *(_DWORD *)&v10[4 * v9++] = 0;
    while (v9 < SDWORD1(v16[0]));
  }
  *((void *)&v16[1] + 1) = 0;
  if (v18 != (cv *)v19) {
    cv::fastFree((void **)v18, v6);
  }
}

void sub_225F1E6E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  cv::MatExpr::~MatExpr((cv::MatExpr *)&a37, a2);
  cv::Mat::~Mat((cv::Mat *)&a13, v38);
  cv::Mat::~Mat((cv::Mat *)&a25, v39);
  _Unwind_Resume(a1);
}

void cv::MatOp::matmul(cv::MatOp *this, const cv::MatExpr *a2, const cv::MatExpr *a3, cv::MatExpr *a4)
{
  if (*(cv::MatOp **)a3 != this)
  {
    uint64_t v7 = *(void (**)(void))(**(void **)a3 + 184);
    v7();
    return;
  }
  uint64_t v54 = &v53[8];
  uint64_t v55 = (cv *)v56;
  v56[0] = 0;
  v56[1] = 0;
  *(_DWORD *)uint64_t v53 = 1124007936;
  memset(&v53[4], 0, 60);
  uint64_t v50 = &v49[8];
  uint64_t v51 = (cv *)v52;
  v52[0] = 0;
  v52[1] = 0;
  *(_DWORD *)long long v49 = 1124007936;
  memset(&v49[4], 0, 60);
  uint64_t v8 = *(uint64_t **)a2;
  if (*(uint64_t **)a2 == &cv::g_MatOp_T)
  {
    double v10 = *((double *)a2 + 38);
    uint64_t v11 = (_DWORD *)((char *)a2 + 16);
    if (v53 == (char *)a2 + 16)
    {
      int v9 = 1;
      goto LABEL_28;
    }
    uint64_t v12 = (atomic_uint *)*((void *)a2 + 5);
    if (v12)
    {
      atomic_fetch_add(v12, 1u);
      if (*(void *)&v53[24])
      {
        if (atomic_fetch_add(*(atomic_uint *volatile *)&v53[24], 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v53, a2);
        }
      }
    }
    *(void *)&v53[16] = 0;
    memset(&v53[32], 0, 24);
    if (*(uint64_t *)v53 <= 0)
    {
      *(void *)&v53[24] = 0;
      *(_DWORD *)uint64_t v53 = *v11;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = v54;
      do
        *(_DWORD *)&v14[4 * v13++] = 0;
      while (v13 < *(int *)&v53[4]);
      *(void *)&v53[24] = 0;
      *(_DWORD *)uint64_t v53 = *v11;
      if (*(int *)&v53[4] > 2) {
        goto LABEL_26;
      }
    }
    if (*((int *)a2 + 5) <= 2)
    {
      *(_DWORD *)&v53[4] = *((_DWORD *)a2 + 5);
      *(void *)&v53[8] = *((void *)a2 + 3);
      uint64_t v15 = (void *)*((void *)a2 + 11);
      uint64_t v16 = v55;
      *(void *)uint64_t v55 = *v15;
      int v9 = 1;
LABEL_25:
      *((void *)v16 + 1) = v15[1];
LABEL_27:
      *(_OWORD *)&v53[16] = *((_OWORD *)a2 + 2);
      uint64_t v17 = *((void *)a2 + 6);
      *(_OWORD *)&v53[40] = *(_OWORD *)((char *)a2 + 56);
      uint64_t v18 = *((void *)a2 + 9);
      *(void *)&unsigned char v53[32] = v17;
      *(void *)&v53[56] = v18;
      goto LABEL_28;
    }
LABEL_26:
    cv::Mat::copySize((cv::Mat *)v53, (const cv::MatExpr *)((char *)a2 + 16));
    int v9 = 1;
    goto LABEL_27;
  }
  if (v8 != &cv::g_MatOp_AddEx
    || *((void *)a2 + 16) && *((double *)a2 + 39) != 0.0
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)a2 + 20)), (int32x4_t)vceqzq_f64(*((float64x2_t *)a2 + 21)))))) & 1) != 0)
  {
    (*(void (**)(uint64_t *, const cv::MatExpr *, unsigned char *, uint64_t))(*v8 + 24))(v8, a2, v53, 0xFFFFFFFFLL);
    int v9 = 0;
    double v10 = 1.0;
    goto LABEL_28;
  }
  double v10 = *((double *)a2 + 38);
  float64_t v37 = (_DWORD *)((char *)a2 + 16);
  if (v53 != (char *)a2 + 16)
  {
    uint64_t v38 = (atomic_uint *)*((void *)a2 + 5);
    if (v38)
    {
      atomic_fetch_add(v38, 1u);
      if (*(void *)&v53[24])
      {
        if (atomic_fetch_add(*(atomic_uint *volatile *)&v53[24], 0xFFFFFFFF) == 1) {
          cv::Mat::deallocate((cv::Mat *)v53, a2);
        }
      }
    }
    *(void *)&v53[16] = 0;
    memset(&v53[32], 0, 24);
    if (*(uint64_t *)v53 <= 0)
    {
      *(void *)&v53[24] = 0;
      *(_DWORD *)uint64_t v53 = *v37;
    }
    else
    {
      uint64_t v39 = 0;
      float64x2_t v40 = v54;
      do
        *(_DWORD *)&v40[4 * v39++] = 0;
      while (v39 < *(int *)&v53[4]);
      *(void *)&v53[24] = 0;
      *(_DWORD *)uint64_t v53 = *v37;
      if (*(int *)&v53[4] > 2) {
        goto LABEL_100;
      }
    }
    if (*((int *)a2 + 5) > 2)
    {
LABEL_100:
      cv::Mat::copySize((cv::Mat *)v53, (const cv::MatExpr *)((char *)a2 + 16));
      int v9 = 0;
      goto LABEL_27;
    }
    int v9 = 0;
    *(_DWORD *)&v53[4] = *((_DWORD *)a2 + 5);
    *(void *)&v53[8] = *((void *)a2 + 3);
    uint64_t v15 = (void *)*((void *)a2 + 11);
    uint64_t v16 = v55;
    *(void *)uint64_t v55 = *v15;
    goto LABEL_25;
  }
  int v9 = 0;
LABEL_28:
  uint64_t v19 = *(uint64_t **)a3;
  if (*(uint64_t **)a3 == &cv::g_MatOp_T)
  {
    v9 |= 2u;
    double v10 = v10 * *((double *)a3 + 38);
    double v20 = (_DWORD *)((char *)a3 + 16);
    if (v49 == (char *)a3 + 16) {
      goto LABEL_50;
    }
    uint64_t v21 = (atomic_uint *)*((void *)a3 + 5);
    if (v21) {
      atomic_fetch_add(v21, 1u);
    }
    if (*(void *)&v49[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v49[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v49, a2);
    }
    *(void *)&v49[16] = 0;
    memset(&v49[32], 0, 24);
    if (*(uint64_t *)v49 <= 0)
    {
      *(void *)&v49[24] = 0;
      *(_DWORD *)long long v49 = *v20;
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = v50;
      do
        *(_DWORD *)&v23[4 * v22++] = 0;
      while (v22 < *(int *)&v49[4]);
      *(void *)&v49[24] = 0;
      *(_DWORD *)long long v49 = *v20;
      if (*(int *)&v49[4] > 2) {
        goto LABEL_48;
      }
    }
    int v24 = *((_DWORD *)a3 + 5);
    if (v24 > 2) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (v19 != &cv::g_MatOp_AddEx
    || *((void *)a3 + 16) && *((double *)a3 + 39) != 0.0
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 20)), (int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 21)))))) & 1) != 0)
  {
    (*(void (**)(uint64_t *, const cv::MatExpr *, unsigned char *, uint64_t))(*v19 + 24))(v19, a3, v49, 0xFFFFFFFFLL);
    goto LABEL_50;
  }
  double v10 = v10 * *((double *)a3 + 38);
  uint64_t v41 = (_DWORD *)((char *)a3 + 16);
  if (v49 != (char *)a3 + 16)
  {
    float64_t v42 = (atomic_uint *)*((void *)a3 + 5);
    if (v42) {
      atomic_fetch_add(v42, 1u);
    }
    if (*(void *)&v49[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v49[24], 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v49, a2);
    }
    *(void *)&v49[16] = 0;
    memset(&v49[32], 0, 24);
    if (*(uint64_t *)v49 <= 0)
    {
      *(void *)&v49[24] = 0;
      *(_DWORD *)long long v49 = *v41;
    }
    else
    {
      uint64_t v43 = 0;
      float64_t v44 = v50;
      do
        *(_DWORD *)&v44[4 * v43++] = 0;
      while (v43 < *(int *)&v49[4]);
      *(void *)&v49[24] = 0;
      *(_DWORD *)long long v49 = *v41;
      if (*(int *)&v49[4] > 2) {
        goto LABEL_48;
      }
    }
    int v24 = *((_DWORD *)a3 + 5);
    if (v24 > 2)
    {
LABEL_48:
      cv::Mat::copySize((cv::Mat *)v49, (const cv::MatExpr *)((char *)a3 + 16));
      goto LABEL_49;
    }
LABEL_47:
    *(_DWORD *)&_OWORD v49[4] = v24;
    *(void *)&v49[8] = *((void *)a3 + 3);
    uint64_t v25 = (void *)*((void *)a3 + 11);
    uint64_t v26 = v51;
    *(void *)uint64_t v51 = *v25;
    *((void *)v26 + 1) = v25[1];
LABEL_49:
    *(_OWORD *)&v49[16] = *((_OWORD *)a3 + 2);
    uint64_t v27 = *((void *)a3 + 6);
    *(_OWORD *)&v49[40] = *(_OWORD *)((char *)a3 + 56);
    uint64_t v28 = *((void *)a3 + 9);
    *(void *)&v49[32] = v27;
    *(void *)&v49[56] = v28;
  }
LABEL_50:
  uint64_t v46 = (char *)v45 + 8;
  uint64_t v47 = (cv *)v48;
  v48[0] = 0;
  v48[1] = 0;
  LODWORD(v45[0]) = 1124007936;
  memset((char *)v45 + 4, 0, 48);
  v45[3] = 0u;
  memset(v57, 0, sizeof(v57));
  cv::MatExpr::MatExpr((uint64_t)v58, (uint64_t)&cv::g_MatOp_GEMM, v9, (cv::Mat *)v53, (cv::Mat *)v49, (cv::Mat *)v45, (uint64_t)v57, v10, 1.0);
  cv::MatExpr::operator=((uint64_t)a4, v58);
  cv::MatExpr::~MatExpr((cv::MatExpr *)v58, v29);
  if (*((void *)&v45[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v45[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v45, v30);
  }
  *(void *)&v45[1] = 0;
  memset(&v45[2], 0, 24);
  if (SDWORD1(v45[0]) >= 1)
  {
    uint64_t v31 = 0;
    double v32 = v46;
    do
      *(_DWORD *)&v32[4 * v31++] = 0;
    while (v31 < SDWORD1(v45[0]));
  }
  *((void *)&v45[1] + 1) = 0;
  if (v47 != (cv *)v48) {
    cv::fastFree((void **)v47, v30);
  }
  if (*(void *)&v49[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v49[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v49, v30);
  }
  *(void *)&v49[16] = 0;
  memset(&v49[32], 0, 24);
  if (*(int *)&v49[4] >= 1)
  {
    uint64_t v33 = 0;
    long long v34 = v50;
    do
      *(_DWORD *)&v34[4 * v33++] = 0;
    while (v33 < *(int *)&v49[4]);
  }
  *(void *)&v49[24] = 0;
  if (v51 != (cv *)v52) {
    cv::fastFree((void **)v51, v30);
  }
  if (*(void *)&v53[24] && atomic_fetch_add(*(atomic_uint *volatile *)&v53[24], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v53, v30);
  }
  *(void *)&v53[16] = 0;
  memset(&v53[32], 0, 24);
  if (*(int *)&v53[4] >= 1)
  {
    uint64_t v35 = 0;
    float64x2_t v36 = v54;
    do
      *(_DWORD *)&v36[4 * v35++] = 0;
    while (v35 < *(int *)&v53[4]);
  }
  *(void *)&v53[24] = 0;
  if (v55 != (cv *)v56) {
    cv::fastFree((void **)v55, v30);
  }
}

void sub_225F1EEAC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  cv::MatExpr::~MatExpr((cv::MatExpr *)&a49, a2);
  cv::Mat::~Mat((cv::Mat *)&a9, v50);
  cv::Mat::~Mat((cv::Mat *)&a21, v51);
  cv::Mat::~Mat((cv::Mat *)&a33, v52);
  _Unwind_Resume(a1);
}

void cv::MatOp::invert(cv::MatOp *this, const cv::MatExpr *a2, cv::MatExpr *a3, cv::MatExpr *a4)
{
  uint64_t v11 = &v10[1];
  uint64_t v12 = (cv *)v13;
  v13[0] = 0;
  v13[1] = 0;
  LODWORD(v10[0]) = 1124007936;
  memset((char *)v10 + 4, 0, 32);
  memset((char *)&v10[4] + 4, 0, 28);
  (*(void (**)(void, const cv::MatExpr *, void *, uint64_t))(**(void **)a2 + 24))(*(void *)a2, a2, v10, 0xFFFFFFFFLL);
  cv::MatOp_Invert::makeExpr(a4, a3, (cv::Mat *)v10, v6);
  if (v10[3] && atomic_fetch_add((atomic_uint *volatile)v10[3], 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v10, v7);
  }
  void v10[2] = 0;
  memset(&v10[4], 0, 24);
  if (SHIDWORD(v10[0]) >= 1)
  {
    uint64_t v8 = 0;
    int v9 = v11;
    do
      *((_DWORD *)v9 + v8++) = 0;
    while (v8 < SHIDWORD(v10[0]));
  }
  v10[3] = 0;
  if (v12 != (cv *)v13) {
    cv::fastFree((void **)v12, v7);
  }
}

void sub_225F1EFF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void cv::MatOp_Invert::makeExpr(cv::MatOp_Invert *this, cv::MatExpr *a2, cv::Mat *a3, const cv::Mat *a4)
{
  uint64_t v17 = (char *)v16 + 8;
  uint64_t v18 = (cv *)v19;
  v19[0] = 0;
  v19[1] = 0;
  LODWORD(v16[0]) = 1124007936;
  memset((char *)v16 + 4, 0, 48);
  v16[3] = 0u;
  uint64_t v13 = (char *)v12 + 8;
  uint64_t v14 = (cv *)v15;
  v15[0] = 0;
  v15[1] = 0;
  LODWORD(v12[0]) = 1124007936;
  memset((char *)v12 + 4, 0, 48);
  v12[3] = 0u;
  memset(v11, 0, sizeof(v11));
  cv::MatExpr::MatExpr((uint64_t)v20, (uint64_t)&cv::g_MatOp_Invert, (int)a2, a3, (cv::Mat *)v16, (cv::Mat *)v12, (uint64_t)v11, 1.0, 0.0);
  cv::MatExpr::operator=((uint64_t)this, v20);
  cv::MatExpr::~MatExpr((cv::MatExpr *)v20, v5);
  if (*((void *)&v12[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v12[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v12, v6);
  }
  *(void *)&v12[1] = 0;
  memset(&v12[2], 0, 24);
  if (SDWORD1(v12[0]) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v13;
    do
      *(_DWORD *)&v8[4 * v7++] = 0;
    while (v7 < SDWORD1(v12[0]));
  }
  *((void *)&v12[1] + 1) = 0;
  if (v14 != (cv *)v15) {
    cv::fastFree((void **)v14, v6);
  }
  if (*((void *)&v16[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v16[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v16, v6);
  }
  *(void *)&v16[1] = 0;
  memset(&v16[2], 0, 24);
  if (SDWORD1(v16[0]) >= 1)
  {
    uint64_t v9 = 0;
    double v10 = v17;
    do
      *(_DWORD *)&v10[4 * v9++] = 0;
    while (v9 < SDWORD1(v16[0]));
  }
  *((void *)&v16[1] + 1) = 0;
  if (v18 != (cv *)v19) {
    cv::fastFree((void **)v18, v6);
  }
}

void sub_225F1F1B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  cv::MatExpr::~MatExpr((cv::MatExpr *)&a37, a2);
  cv::Mat::~Mat((cv::Mat *)&a13, v38);
  cv::Mat::~Mat((cv::Mat *)&a25, v39);
  _Unwind_Resume(a1);
}

int32x2_t cv::MatOp::size@<D0>(uint64_t a1@<X1>, int32x2_t *a2@<X8>)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_13;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 20);
  if ((int)v2 >= 3)
  {
    uint64_t v4 = *(int **)(a1 + 80);
    uint64_t v3 = 1;
    do
    {
      uint64_t v5 = *v4++;
      v3 *= v5;
      --v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = *(int *)(a1 + 28) * (uint64_t)*(int *)(a1 + 24);
  }
  if (v3)
  {
    uint64_t v6 = (int32x2_t **)(a1 + 80);
  }
  else
  {
    if (!*(void *)(a1 + 128)) {
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v7 = *(unsigned int *)(a1 + 116);
    if ((int)v7 >= 3)
    {
      uint64_t v9 = *(int **)(a1 + 176);
      uint64_t v8 = 1;
      do
      {
        uint64_t v10 = *v9++;
        v8 *= v10;
        --v7;
      }
      while (v7);
    }
    else
    {
      uint64_t v8 = *(int *)(a1 + 124) * (uint64_t)*(int *)(a1 + 120);
    }
    if (v8) {
      uint64_t v6 = (int32x2_t **)(a1 + 272);
    }
    else {
LABEL_15:
    }
      uint64_t v6 = (int32x2_t **)(a1 + 176);
  }
  int32x2_t result = vrev64_s32(**v6);
  *a2 = result;
  return result;
}

uint64_t cv::MatOp::type(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_7;
  }
  uint64_t v2 = (_DWORD *)(a2 + 16);
  uint64_t v3 = *(unsigned int *)(a2 + 20);
  if ((int)v3 >= 3)
  {
    uint64_t v5 = *(int **)(a2 + 80);
    uint64_t v4 = 1;
    do
    {
      uint64_t v6 = *v5++;
      v4 *= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = *(int *)(a2 + 28) * (uint64_t)*(int *)(a2 + 24);
  }
  if (!v4)
  {
LABEL_7:
    uint64_t v2 = (_DWORD *)(a2 + 112);
    if (*(void *)(a2 + 128))
    {
      uint64_t v7 = *(unsigned int *)(a2 + 116);
      if ((int)v7 >= 3)
      {
        uint64_t v9 = *(int **)(a2 + 176);
        uint64_t v8 = 1;
        do
        {
          uint64_t v10 = *v9++;
          v8 *= v10;
          --v7;
        }
        while (v7);
      }
      else
      {
        uint64_t v8 = *(int *)(a2 + 124) * (uint64_t)*(int *)(a2 + 120);
      }
      if (v8) {
        uint64_t v2 = (_DWORD *)(a2 + 208);
      }
    }
  }
  return *v2 & 0xFFF;
}

void cv::MatOp_Bin::makeExpr(uint64_t a1, int a2, cv::Mat *a3, uint64_t a4)
{
  uint64_t v16 = (char *)v15 + 8;
  uint64_t v17 = (cv *)v18;
  v18[0] = 0;
  v18[1] = 0;
  LODWORD(v15[0]) = 1124007936;
  memset((char *)v15 + 4, 0, 48);
  v15[3] = 0u;
  uint64_t v12 = (char *)v11 + 8;
  uint64_t v13 = (cv *)v14;
  v14[0] = 0;
  v14[1] = 0;
  LODWORD(v11[0]) = 1124007936;
  memset((char *)v11 + 4, 0, 48);
  void v11[3] = 0u;
  cv::MatExpr::MatExpr((uint64_t)v19, (uint64_t)&cv::g_MatOp_Bin, a2, a3, (cv::Mat *)v15, (cv::Mat *)v11, a4, 1.0, 0.0);
  cv::MatExpr::operator=(a1, v19);
  cv::MatExpr::~MatExpr((cv::MatExpr *)v19, v5);
  if (*((void *)&v11[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v11[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v11, v6);
  }
  *(void *)&v11[1] = 0;
  memset(&v11[2], 0, 24);
  if (SDWORD1(v11[0]) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v12;
    do
      *(_DWORD *)&v8[4 * v7++] = 0;
    while (v7 < SDWORD1(v11[0]));
  }
  *((void *)&v11[1] + 1) = 0;
  if (v13 != (cv *)v14) {
    cv::fastFree((void **)v13, v6);
  }
  if (*((void *)&v15[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v15[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v15, v6);
  }
  *(void *)&v15[1] = 0;
  memset(&v15[2], 0, 24);
  if (SDWORD1(v15[0]) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v16;
    do
      *(_DWORD *)&v10[4 * v9++] = 0;
    while (v9 < SDWORD1(v15[0]));
  }
  *((void *)&v15[1] + 1) = 0;
  if (v17 != (cv *)v18) {
    cv::fastFree((void **)v17, v6);
  }
}

void sub_225F1F4B0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  cv::MatExpr::~MatExpr((cv::MatExpr *)&a33, a2);
  cv::Mat::~Mat((cv::Mat *)&a9, v34);
  cv::Mat::~Mat((cv::Mat *)&a21, v35);
  _Unwind_Resume(a1);
}

void cv::MatExpr::size(cv::MatExpr *this@<X0>, int32x2_t *a2@<X8>)
{
  uint64_t v4 = *(uint64_t **)this;
  if (*(uint64_t **)this == &cv::g_MatOp_T || v4 == &cv::g_MatOp_Invert)
  {
    int32x2_t v6 = *(int32x2_t *)((char *)this + 24);
LABEL_7:
    *a2 = v6;
    return;
  }
  if (v4 == &cv::g_MatOp_GEMM)
  {
    __int32 v8 = *((_DWORD *)this + 31);
    __int32 v9 = *((_DWORD *)this + 6);
LABEL_17:
    a2->i32[0] = v8;
    a2->i32[1] = v9;
    return;
  }
  if (v4 == &cv::g_MatOp_Solve)
  {
    __int32 v8 = *((_DWORD *)this + 31);
    __int32 v9 = *((_DWORD *)this + 7);
    goto LABEL_17;
  }
  cv::getGlobalMatOpInitializer(this);
  if (v4 == &cv::getGlobalMatOpInitializer(void)::initializer)
  {
    int32x2_t v6 = vrev64_s32(**((int32x2_t **)this + 10));
    goto LABEL_7;
  }
  if (*(void *)this)
  {
    uint64_t v7 = *(void (**)(void))(**(void **)this + 200);
    v7();
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t cv::MatExpr::type(uint64_t **this)
{
  uint64_t v2 = *this;
  cv::getGlobalMatOpInitializer((cv *)this);
  if (v2 == &cv::getGlobalMatOpInitializer(void)::initializer) {
    return this[2] & 0xFFF;
  }
  uint64_t v3 = *this;
  if (*this == &cv::g_MatOp_Cmp) {
    return 0;
  }
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(uint64_t (**)(void))(*v3 + 208);
  return v4();
}

__n128 cv::MatOp_Identity::assign(cv::MatOp_Identity *this, __n128 *a2, __n128 *a3, int a4)
{
  if (a4 == -1 || (unsigned __int32 v7 = a2[1].n128_u32[0], (v7 & 0xFFF) == a4))
  {
    __int32 v8 = a2 + 1;
    if (&a2[1] == a3) {
      return result;
    }
    __int32 v9 = (atomic_uint *)a2[2].n128_u64[1];
    if (v9) {
      atomic_fetch_add(v9, 1u);
    }
    uint64_t v10 = (atomic_uint *)a3[1].n128_u64[1];
    if (v10 && atomic_fetch_add(v10, 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)a3, a2);
    }
    a3[1].n128_u64[0] = 0;
    a3[2].n128_u64[1] = 0;
    a3[3].n128_u64[0] = 0;
    a3[2].n128_u64[0] = 0;
    if (a3->n128_i32[1] <= 0)
    {
      a3[1].n128_u64[1] = 0;
      a3->n128_u32[0] = v8->n128_u32[0];
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v12 = a3[4].n128_u64[0];
      do
      {
        *(_DWORD *)(v12 + 4 * v11++) = 0;
        uint64_t v13 = a3->n128_i32[1];
      }
      while (v11 < v13);
      a3[1].n128_u64[1] = 0;
      a3->n128_u32[0] = v8->n128_u32[0];
      if ((int)v13 > 2) {
        goto LABEL_20;
      }
    }
    int v16 = a2[1].n128_i32[1];
    if (v16 <= 2)
    {
      a3->n128_u32[1] = v16;
      a3->n128_u64[1] = a2[1].n128_u64[1];
      uint64_t v17 = (void *)a2[5].n128_u64[1];
      uint64_t v18 = (void *)a3[4].n128_u64[1];
      *uint64_t v18 = *v17;
      v18[1] = v17[1];
LABEL_21:
      a3[2] = a2[3];
      a3[3].n128_u64[0] = a2[4].n128_u64[0];
      __n128 result = a2[2];
      a3[1] = result;
      a3[3].n128_u64[1] = a2[4].n128_u64[1];
      return result;
    }
LABEL_20:
    cv::Mat::copySize((cv::Mat *)a3, (const cv::Mat *)&a2[1]);
    goto LABEL_21;
  }
  if ((((unsigned __int16)v7 ^ (unsigned __int16)a4) & 0xFF8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "CV_MAT_CN(_type) == e.a.channels()");
    std::string::basic_string[abi:ne180100]<0>(v20, "assign");
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matop.cpp");
    cv::Exception::Exception(v22, 4294967081, v21, v20, __p, 1195);
    cv::error((cv *)v22, v14);
  }
  cv::_OutputArray::_OutputArray((uint64_t)v22, (cv::Mat *)a3);
  cv::Mat::convertTo((cv::Mat *)&a2[1], (const cv::_OutputArray *)v22, a4, 1.0, 0.0);
  return result;
}

void sub_225F1F898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void cv::MatOp_AddEx::assign(cv::MatOp_AddEx *this, const cv::MatExpr *a2, cv::Mat *a3, int a4)
{
  uint64_t v54 = (char *)v53 + 8;
  uint64_t v55 = (cv *)v56;
  v56[0] = 0;
  v56[1] = 0;
  LODWORD(v53[0]) = 1124007936;
  memset((char *)v53 + 4, 0, 48);
  v53[3] = 0u;
  if (a4 == -1 || (*((_DWORD *)a2 + 4) & 0xFFF) == a4) {
    unsigned __int32 v7 = a3;
  }
  else {
    unsigned __int32 v7 = (cv::Mat *)v53;
  }
  __int32 v8 = (char *)a2 + 320;
  if (*((void *)a2 + 16))
  {
    double v9 = *((double *)a2 + 41);
    double v11 = *((double *)a2 + 42);
    double v10 = *((double *)a2 + 43);
    BOOL v14 = v10 == 0.0 && v11 == 0.0 && v9 == 0.0 && *((double *)a2 + 40) == 0.0;
    if (!v14 && v9 == 0.0 && v11 == 0.0 && v10 == 0.0)
    {
      cv::_InputArray::_InputArray((uint64_t)&v49, (const cv::MatExpr *)((char *)a2 + 16));
      double v15 = *((double *)a2 + 38);
      cv::_InputArray::_InputArray((uint64_t)&v45, (const cv::MatExpr *)((char *)a2 + 112));
      double v16 = *((double *)a2 + 39);
      double v17 = *((double *)a2 + 40);
      cv::_OutputArray::_OutputArray((uint64_t)v44, v7);
      cv::addWeighted((cv *)&v49, (const cv::_InputArray *)&v45, v15, (const cv::_InputArray *)v44, v16, v17, (const cv::_OutputArray *)0xFFFFFFFFLL);
    }
    else
    {
      double v21 = *((double *)a2 + 38);
      double v20 = *((double *)a2 + 39);
      if (v21 == 1.0)
      {
        if (v20 == 1.0)
        {
          cv::_InputArray::_InputArray((uint64_t)&v49, (const cv::MatExpr *)((char *)a2 + 16));
          cv::_InputArray::_InputArray((uint64_t)&v45, (const cv::MatExpr *)((char *)a2 + 112));
          uint64_t v22 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v44, v7);
          uint64_t v23 = cv::noArray(v22);
          cv::add((uint64_t)&v49, (uint64_t)&v45, (const cv::_InputArray *)v44, (const cv::_OutputArray *)v23, (const cv::_InputArray *)0xFFFFFFFFLL);
        }
        else if (v20 == -1.0)
        {
          cv::_InputArray::_InputArray((uint64_t)&v49, (const cv::MatExpr *)((char *)a2 + 16));
          cv::_InputArray::_InputArray((uint64_t)&v45, (const cv::MatExpr *)((char *)a2 + 112));
          uint64_t v30 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v44, v7);
          uint64_t v31 = cv::noArray(v30);
          cv::subtract((uint64_t)&v49, (uint64_t)&v45, (const cv::_InputArray *)v44, (const cv::_OutputArray *)v31, (const cv::_InputArray *)0xFFFFFFFFLL);
        }
        else
        {
          cv::_InputArray::_InputArray((uint64_t)&v49, (const cv::MatExpr *)((char *)a2 + 112));
          double v38 = *((double *)a2 + 39);
          cv::_InputArray::_InputArray((uint64_t)&v45, (const cv::MatExpr *)((char *)a2 + 16));
          cv::_OutputArray::_OutputArray((uint64_t)v44, v7);
          cv::scaleAdd((cv *)&v49, (const cv::_InputArray *)&v45, v38, (const cv::_InputArray *)v44, v39);
        }
      }
      else if (v20 == 1.0)
      {
        if (v21 == -1.0)
        {
          cv::_InputArray::_InputArray((uint64_t)&v49, (const cv::MatExpr *)((char *)a2 + 112));
          cv::_InputArray::_InputArray((uint64_t)&v45, (const cv::MatExpr *)((char *)a2 + 16));
          uint64_t v26 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v44, v7);
          uint64_t v27 = cv::noArray(v26);
          cv::subtract((uint64_t)&v49, (uint64_t)&v45, (const cv::_InputArray *)v44, (const cv::_OutputArray *)v27, (const cv::_InputArray *)0xFFFFFFFFLL);
        }
        else
        {
          cv::_InputArray::_InputArray((uint64_t)&v49, (const cv::MatExpr *)((char *)a2 + 16));
          double v36 = *((double *)a2 + 38);
          cv::_InputArray::_InputArray((uint64_t)&v45, (const cv::MatExpr *)((char *)a2 + 112));
          cv::_OutputArray::_OutputArray((uint64_t)v44, v7);
          cv::scaleAdd((cv *)&v49, (const cv::_InputArray *)&v45, v36, (const cv::_InputArray *)v44, v37);
        }
      }
      else
      {
        cv::_InputArray::_InputArray((uint64_t)&v49, (const cv::MatExpr *)((char *)a2 + 16));
        double v32 = *((double *)a2 + 38);
        cv::_InputArray::_InputArray((uint64_t)&v45, (const cv::MatExpr *)((char *)a2 + 112));
        double v33 = *((double *)a2 + 39);
        cv::_OutputArray::_OutputArray((uint64_t)v44, v7);
        cv::addWeighted((cv *)&v49, (const cv::_InputArray *)&v45, v32, (const cv::_InputArray *)v44, v33, 0.0, (const cv::_OutputArray *)0xFFFFFFFFLL);
      }
      if (*((double *)a2 + 41) != 0.0 || *((double *)a2 + 42) != 0.0 || *((double *)a2 + 43) != 0.0)
      {
        cv::_InputArray::_InputArray((uint64_t)&v49, v7);
        float64x2_t v45 = &unk_26D989E48;
        int v46 = -1073610746;
        uint64_t v47 = (char *)a2 + 320;
        uint64_t v48 = 0x400000001;
        float64x2_t v40 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v44, v7);
        uint64_t v41 = cv::noArray(v40);
        cv::add((uint64_t)&v49, (uint64_t)&v45, (const cv::_InputArray *)v44, (const cv::_OutputArray *)v41, (const cv::_InputArray *)0xFFFFFFFFLL);
      }
    }
  }
  else
  {
    if (*((double *)a2 + 41) == 0.0 && *((double *)a2 + 42) == 0.0 && *((double *)a2 + 43) == 0.0)
    {
      if (*((void *)v7 + 2) != *((void *)a3 + 2) || (double v19 = *((double *)a2 + 38), fabs(v19) != 1.0))
      {
        cv::_OutputArray::_OutputArray((uint64_t)&v49, a3);
        cv::Mat::convertTo((const cv::MatExpr *)((char *)a2 + 16), (const cv::_OutputArray *)&v49, a4, *((double *)a2 + 38), *((double *)a2 + 40));
        goto LABEL_49;
      }
    }
    else
    {
      double v19 = *((double *)a2 + 38);
    }
    if (v19 == 1.0)
    {
      cv::_InputArray::_InputArray((uint64_t)&v49, (const cv::MatExpr *)((char *)a2 + 16));
      float64x2_t v45 = &unk_26D989E48;
      int v46 = -1073610746;
      uint64_t v47 = (char *)a2 + 320;
      uint64_t v48 = 0x400000001;
      int v24 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v44, v7);
      uint64_t v25 = cv::noArray(v24);
      cv::add((uint64_t)&v49, (uint64_t)&v45, (const cv::_InputArray *)v44, (const cv::_OutputArray *)v25, (const cv::_InputArray *)0xFFFFFFFFLL);
    }
    else if (v19 == -1.0)
    {
      long long v49 = &unk_26D989E48;
      int v50 = -1073610746;
      uint64_t v51 = (char *)a2 + 320;
      uint64_t v52 = 0x400000001;
      cv::_InputArray::_InputArray((uint64_t)&v45, (const cv::MatExpr *)((char *)a2 + 16));
      uint64_t v28 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v44, v7);
      float64_t v29 = cv::noArray(v28);
      cv::subtract((uint64_t)&v49, (uint64_t)&v45, (const cv::_InputArray *)v44, (const cv::_OutputArray *)v29, (const cv::_InputArray *)0xFFFFFFFFLL);
    }
    else
    {
      cv::_OutputArray::_OutputArray((uint64_t)&v49, v7);
      cv::Mat::convertTo((const cv::MatExpr *)((char *)a2 + 16), (const cv::_OutputArray *)&v49, *((_DWORD *)a2 + 4) & 0xFFF, *((double *)a2 + 38), 0.0);
      cv::_InputArray::_InputArray((uint64_t)&v49, v7);
      float64x2_t v45 = &unk_26D989E48;
      int v46 = -1073610746;
      uint64_t v47 = v8;
      uint64_t v48 = 0x400000001;
      long long v34 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v44, v7);
      uint64_t v35 = cv::noArray(v34);
      cv::add((uint64_t)&v49, (uint64_t)&v45, (const cv::_InputArray *)v44, (const cv::_OutputArray *)v35, (const cv::_InputArray *)0xFFFFFFFFLL);
    }
  }
  if (*((void *)v7 + 2) != *((void *)a3 + 2))
  {
    cv::_OutputArray::_OutputArray((uint64_t)&v49, a3);
    cv::Mat::convertTo(v7, (const cv::_OutputArray *)&v49, *(_DWORD *)a3 & 0xFFF, 1.0, 0.0);
  }
LABEL_49:
  if (*((void *)&v53[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v53[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v53, v18);
  }
  *(void *)&v53[1] = 0;
  memset(&v53[2], 0, 24);
  if (SDWORD1(v53[0]) >= 1)
  {
    uint64_t v42 = 0;
    uint64_t v43 = v54;
    do
      *(_DWORD *)&v43[4 * v42++] = 0;
    while (v42 < SDWORD1(v53[0]));
  }
  *((void *)&v53[1] + 1) = 0;
  if (v55 != (cv *)v56) {
    cv::fastFree((void **)v55, v18);
  }
}

void sub_225F1FF4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  cv::Mat::~Mat((cv::Mat *)va, a2);
  _Unwind_Resume(a1);
}

double cv::MatOp_AddEx::add(uint64_t a1, uint64_t *a2, double *a3, double *a4)
{
  cv::MatExpr::operator=((uint64_t)a4, a2);
  double v6 = a4[41];
  a4[40] = a4[40] + *a3;
  a4[41] = v6 + a3[1];
  double v7 = a4[43];
  a4[42] = a4[42] + a3[2];
  double result = v7 + a3[3];
  a4[43] = result;
  return result;
}

float64x2_t cv::MatOp_AddEx::subtract(uint64_t a1, float64x2_t *a2, uint64_t *a3, uint64_t a4)
{
  cv::MatExpr::operator=(a4, a3);
  float64x2_t v6 = *(float64x2_t *)(a4 + 320);
  *(float64x2_t *)(a4 + 304) = vnegq_f64(*(float64x2_t *)(a4 + 304));
  float64x2_t result = vsubq_f64(*a2, v6);
  float64x2_t v8 = vsubq_f64(a2[1], *(float64x2_t *)(a4 + 336));
  *(float64x2_t *)(a4 + 320) = result;
  *(float64x2_t *)(a4 + 336) = v8;
  return result;
}

float64x2_t cv::MatOp_AddEx::multiply(cv::MatOp_AddEx *this, const cv::MatExpr *a2, double a3, float64x2_t *a4)
{
  cv::MatExpr::operator=((uint64_t)a4, (uint64_t *)a2);
  float64x2_t v5 = vmulq_n_f64(a4[20], a3);
  a4[19] = vmulq_n_f64(a4[19], a3);
  a4[20] = v5;
  float64x2_t result = vmulq_n_f64(a4[21], a3);
  a4[21] = result;
  return result;
}

void cv::MatOp_AddEx::divide(cv::MatOp_AddEx *this, double a2, float64x2_t *a3, cv::MatExpr *a4, uint64_t a5, const cv::Mat *a6)
{
  if (*(uint64_t **)&a3->f64[0] == &cv::g_MatOp_AddEx
    && (!*(void *)&a3[8].f64[0] || a3[19].f64[1] == 0.0)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(a3[20]), (int32x4_t)vceqzq_f64(a3[21]))))) & 1) == 0)
  {
    double v10 = (char *)v9 + 8;
    double v11 = (cv *)v12;
    v12[0] = 0;
    v12[1] = 0;
    LODWORD(v9[0]) = 1124007936;
    memset((char *)v9 + 4, 0, 48);
    v9[3] = 0u;
    cv::MatOp_Bin::makeExpr(a4, (cv::MatExpr *)0x2F, (cv::Mat *)&a3[1], (const cv::Mat *)v9, a6, a2 / a3[19].f64[0]);
    if (*((void *)&v9[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v9[1] + 1), 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v9, v6);
    }
    *(void *)&v9[1] = 0;
    memset(&v9[2], 0, 24);
    if (SDWORD1(v9[0]) >= 1)
    {
      uint64_t v7 = 0;
      float64x2_t v8 = v10;
      do
        *(_DWORD *)&v8[4 * v7++] = 0;
      while (v7 < SDWORD1(v9[0]));
    }
    *((void *)&v9[1] + 1) = 0;
    if (v11 != (cv *)v12) {
      cv::fastFree((void **)v11, v6);
    }
  }
  else
  {
    cv::MatOp::divide(this, a2, (const cv::MatExpr *)a3, a4);
  }
}

void sub_225F20234(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void cv::MatOp_AddEx::transpose(cv::MatOp_AddEx *this, float64x2_t *a2, cv::MatExpr *a3)
{
  if (*(uint64_t **)&a2->f64[0] == &cv::g_MatOp_AddEx
    && (!*(void *)&a2[8].f64[0] || a2[19].f64[1] == 0.0)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(a2[20]), (int32x4_t)vceqzq_f64(a2[21]))))) & 1) == 0)
  {
    cv::MatOp_T::makeExpr(a3, (cv::MatExpr *)&a2[1], a3, a2[19].f64[0]);
  }
  else
  {
    cv::MatOp::transpose(this, (const cv::MatExpr *)a2, a3);
  }
}

void cv::MatOp_AddEx::abs(cv::MatOp_AddEx *this, const cv::MatExpr *a2, cv::MatExpr *a3, uint64_t a4, const cv::Mat *a5)
{
  uint64_t v5 = *((void *)a2 + 16);
  double v6 = *((double *)a2 + 38);
  double v7 = *((double *)a2 + 39);
  if (!v5 || v7 == 0.0)
  {
    if (fabs(v6) == 1.0)
    {
      float64x2_t v11 = vmulq_n_f64(vnegq_f64(*((float64x2_t *)a2 + 20)), v6);
      float64x2_t v12 = vmulq_n_f64(vnegq_f64(*((float64x2_t *)a2 + 21)), v6);
      v13[0] = v11;
      v13[1] = v12;
      cv::MatOp_Bin::makeExpr((uint64_t)a3, 97, (const cv::MatExpr *)((char *)a2 + 16), (uint64_t)v13);
      return;
    }
    if (!v5) {
      goto LABEL_14;
    }
  }
  double v8 = v7 + v6;
  double v9 = v7 * v6;
  if (v8 == 0.0 && v9 == -1.0)
  {
    cv::MatOp_Bin::makeExpr(a3, (cv::MatExpr *)0x61, (const cv::MatExpr *)((char *)a2 + 16), (const cv::MatExpr *)((char *)a2 + 112), a5, 1.0);
  }
  else
  {
LABEL_14:
    cv::MatOp::abs(this, a2, a3);
  }
}

void cv::MatOp_Bin::assign(cv::MatOp_Bin *this, const cv::MatExpr *a2, cv::Mat *a3, cv::Mat *a4)
{
  int v4 = (int)a4;
  float64x2_t v40 = (char *)v39 + 8;
  uint64_t v41 = (void **)v42;
  v42[0] = 0;
  v42[1] = 0;
  LODWORD(v39[0]) = 1124007936;
  memset((char *)v39 + 4, 0, 48);
  v39[3] = 0u;
  if (a4 == -1 || (*((_DWORD *)a2 + 4) & 0xFFF) == a4) {
    double v7 = a3;
  }
  else {
    double v7 = (cv::Mat *)v39;
  }
  int v8 = *((_DWORD *)a2 + 2);
  if (v8 == 47)
  {
    if (*((void *)a2 + 16))
    {
      cv::_InputArray::_InputArray((uint64_t)v33, (const cv::MatExpr *)((char *)a2 + 16));
      cv::_InputArray::_InputArray((uint64_t)&v35, (const cv::MatExpr *)((char *)a2 + 112));
      cv::_OutputArray::_OutputArray((uint64_t)v34, v7);
      cv::divide((cv *)v33, (const cv::_InputArray *)&v35, (const cv::_InputArray *)v34, (const cv::_OutputArray *)0xFFFFFFFFLL, *((double *)a2 + 38));
    }
    else
    {
      double v15 = *((double *)a2 + 38);
      cv::_InputArray::_InputArray((uint64_t)v33, (const cv::MatExpr *)((char *)a2 + 16));
      cv::_OutputArray::_OutputArray((uint64_t)&v35, v7);
      cv::divide((cv *)v33, v15, (const cv::_InputArray *)&v35, (const cv::_OutputArray *)0xFFFFFFFFLL);
    }
  }
  else
  {
    if (v8 == 42)
    {
      cv::_InputArray::_InputArray((uint64_t)v33, (const cv::MatExpr *)((char *)a2 + 16));
      cv::_InputArray::_InputArray((uint64_t)&v35, (const cv::MatExpr *)((char *)a2 + 112));
      cv::_OutputArray::_OutputArray((uint64_t)v34, v7);
      cv::multiply((cv *)v33, (const cv::_InputArray *)&v35, (const cv::_InputArray *)v34, (const cv::_OutputArray *)0xFFFFFFFFLL, *((double *)a2 + 38));
      goto LABEL_34;
    }
    uint64_t v10 = *((void *)a2 + 16);
    switch(v8)
    {
      case '|':
        double v16 = (const cv::MatExpr *)((char *)a2 + 16);
        if (v10)
        {
          cv::_InputArray::_InputArray((uint64_t)v33, v16);
          cv::_InputArray::_InputArray((uint64_t)&v35, (const cv::MatExpr *)((char *)a2 + 112));
        }
        else
        {
          cv::_InputArray::_InputArray((uint64_t)v33, v16);
          uint64_t v35 = &unk_26D989E48;
          int v36 = -1073610746;
          float64_t v37 = (char *)a2 + 320;
          uint64_t v38 = 0x400000001;
        }
        double v17 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v34, v7);
        uint64_t v18 = cv::noArray(v17);
        cv::bitwise_or((cv *)v33, (const cv::_InputArray *)&v35, (const cv::_InputArray *)v34, (const cv::_OutputArray *)v18, v19);
        break;
      case '^':
        double v20 = (const cv::MatExpr *)((char *)a2 + 16);
        if (v10)
        {
          cv::_InputArray::_InputArray((uint64_t)v33, v20);
          cv::_InputArray::_InputArray((uint64_t)&v35, (const cv::MatExpr *)((char *)a2 + 112));
        }
        else
        {
          cv::_InputArray::_InputArray((uint64_t)v33, v20);
          uint64_t v35 = &unk_26D989E48;
          int v36 = -1073610746;
          float64_t v37 = (char *)a2 + 320;
          uint64_t v38 = 0x400000001;
        }
        double v21 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v34, v7);
        uint64_t v22 = cv::noArray(v21);
        cv::bitwise_xor((cv *)v33, (const cv::_InputArray *)&v35, (const cv::_InputArray *)v34, (const cv::_OutputArray *)v22, v23);
        break;
      case '&':
        float64x2_t v11 = (const cv::MatExpr *)((char *)a2 + 16);
        if (v10)
        {
          cv::_InputArray::_InputArray((uint64_t)v33, v11);
          cv::_InputArray::_InputArray((uint64_t)&v35, (const cv::MatExpr *)((char *)a2 + 112));
        }
        else
        {
          cv::_InputArray::_InputArray((uint64_t)v33, v11);
          uint64_t v35 = &unk_26D989E48;
          int v36 = -1073610746;
          float64_t v37 = (char *)a2 + 320;
          uint64_t v38 = 0x400000001;
        }
        float64x2_t v12 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)v34, v7);
        uint64_t v13 = cv::noArray(v12);
        cv::bitwise_and((cv *)v33, (const cv::_InputArray *)&v35, (const cv::_InputArray *)v34, (const cv::_OutputArray *)v13, v14);
        break;
      default:
        if (v8 == 126 && !v10)
        {
          cv::_InputArray::_InputArray((uint64_t)v33, (const cv::MatExpr *)((char *)a2 + 16));
          int v24 = (cv *)cv::_OutputArray::_OutputArray((uint64_t)&v35, v7);
          uint64_t v25 = cv::noArray(v24);
          cv::bitwise_not((cv *)v33, (const cv::_InputArray *)&v35, (const cv::_OutputArray *)v25, v26);
          break;
        }
        if (v8 <= 96)
        {
          if (v8 == 77)
          {
            cv::max((const cv::MatExpr *)((char *)a2 + 16), (const cv::MatExpr *)((char *)a2 + 112), v7, a4);
            break;
          }
          if (v8 == 78)
          {
            cv::max((const cv::MatExpr *)((char *)a2 + 16), v7, *((double *)a2 + 40), a3);
            break;
          }
        }
        else
        {
          switch(v8)
          {
            case 'a':
              if (v10)
              {
                cv::_InputArray::_InputArray((uint64_t)v33, (const cv::MatExpr *)((char *)a2 + 16));
                cv::_InputArray::_InputArray((uint64_t)&v35, (const cv::MatExpr *)((char *)a2 + 112));
                cv::_OutputArray::_OutputArray((uint64_t)v34, v7);
                cv::absdiff((cv *)v33, (const cv::_InputArray *)&v35, (const cv::_InputArray *)v34, v29);
                goto LABEL_34;
              }
              break;
            case 'n':
              cv::min((const cv::MatExpr *)((char *)a2 + 16), v7, *((double *)a2 + 40), a3);
              goto LABEL_34;
            case 'm':
              cv::min((const cv::MatExpr *)((char *)a2 + 16), (const cv::MatExpr *)((char *)a2 + 112), v7, a4);
              goto LABEL_34;
          }
        }
        if (v8 != 97 || v10)
        {
          std::string::basic_string[abi:ne180100]<0>(&v35, "Unknown operation");
          std::string::basic_string[abi:ne180100]<0>(v34, "assign");
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matop.cpp");
          cv::Exception::Exception(v33, 4294967294, &v35, v34, __p, 1353);
          cv::error((cv *)v33, v31);
        }
        cv::_InputArray::_InputArray((uint64_t)v33, (const cv::MatExpr *)((char *)a2 + 16));
        uint64_t v35 = &unk_26D989E48;
        int v36 = -1073610746;
        float64_t v37 = (char *)a2 + 320;
        uint64_t v38 = 0x400000001;
        cv::_OutputArray::_OutputArray((uint64_t)v34, v7);
        cv::absdiff((cv *)v33, (const cv::_InputArray *)&v35, (const cv::_InputArray *)v34, v30);
        break;
    }
  }
LABEL_34:
  if (*((void *)v7 + 2) != *((void *)a3 + 2))
  {
    cv::_OutputArray::_OutputArray((uint64_t)v33, a3);
    cv::Mat::convertTo(v7, (const cv::_OutputArray *)v33, v4, 1.0, 0.0);
  }
  if (*((void *)&v39[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v39[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v39, v9);
  }
  *(void *)&v39[1] = 0;
  memset(&v39[2], 0, 24);
  if (SDWORD1(v39[0]) >= 1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = v40;
    do
      *(_DWORD *)&v28[4 * v27++] = 0;
    while (v27 < SDWORD1(v39[0]));
  }
  *((void *)&v39[1] + 1) = 0;
  if (v41 != v42) {
    cv::fastFree(v41, v9);
  }
}

void sub_225F209C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  cv::Exception::~Exception((cv::Exception *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  cv::Mat::~Mat((cv::Mat *)(v42 - 160), v44);
  _Unwind_Resume(a1);
}

void cv::MatOp_Bin::multiply(cv::MatOp_Bin *this, const cv::MatExpr *a2, double a3, cv::MatExpr *a4)
{
  int v6 = *((_DWORD *)a2 + 2);
  if (v6 == 47 || v6 == 42)
  {
    cv::MatExpr::operator=((uint64_t)a4, (uint64_t *)a2);
    *((double *)a4 + 38) = *((double *)a4 + 38) * a3;
  }
  else
  {
    cv::MatOp::multiply(this, a2, a3, a4);
  }
}

void cv::MatOp_Bin::divide(cv::MatOp_Bin *this, double a2, const cv::MatExpr *a3, cv::MatExpr *a4)
{
  if (*((_DWORD *)a3 + 2) == 47 && (!*((void *)a3 + 16) || *((double *)a3 + 39) == 0.0))
  {
    uint64_t v10 = (char *)v9 + 8;
    float64x2_t v11 = (cv *)v12;
    v12[0] = 0;
    v12[1] = 0;
    LODWORD(v9[0]) = 1124007936;
    memset((char *)v9 + 4, 0, 48);
    v9[3] = 0u;
    double v4 = *((double *)a3 + 38);
    memset(v8, 0, sizeof(v8));
    cv::MatOp_AddEx::makeExpr((uint64_t)a4, (const cv::MatExpr *)((char *)a3 + 16), (cv::Mat *)v9, (uint64_t)v8, a2 / v4, 0.0);
    if (*((void *)&v9[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v9[1] + 1), 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v9, v5);
    }
    *(void *)&v9[1] = 0;
    memset(&v9[2], 0, 24);
    if (SDWORD1(v9[0]) >= 1)
    {
      uint64_t v6 = 0;
      double v7 = v10;
      do
        *(_DWORD *)&v7[4 * v6++] = 0;
      while (v6 < SDWORD1(v9[0]));
    }
    *((void *)&v9[1] + 1) = 0;
    if (v11 != (cv *)v12) {
      cv::fastFree((void **)v11, v5);
    }
  }
  else
  {
    cv::MatOp::divide(a4, a2, a3, a4);
  }
}

void sub_225F20C58(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  cv::Mat::~Mat((cv::Mat *)va, a2);
  _Unwind_Resume(a1);
}

void cv::MatOp_Cmp::assign(cv::MatOp_Cmp *this, const cv::MatExpr *a2, cv::Mat *a3, int a4)
{
  double v17 = (char *)v16 + 8;
  uint64_t v18 = (cv *)v19;
  v19[0] = 0;
  v19[1] = 0;
  LODWORD(v16[0]) = 1124007936;
  memset((char *)v16 + 4, 0, 48);
  unsigned int v7 = a4 + 1;
  v16[3] = 0u;
  if ((a4 + 1) >= 2) {
    int v8 = (cv::Mat *)v16;
  }
  else {
    int v8 = a3;
  }
  double v9 = (const cv::MatExpr *)((char *)a2 + 16);
  if (*((void *)a2 + 16))
  {
    cv::_InputArray::_InputArray((uint64_t)v15, v9);
    cv::_InputArray::_InputArray((uint64_t)v14, (const cv::MatExpr *)((char *)a2 + 112));
  }
  else
  {
    cv::_InputArray::_InputArray((uint64_t)v15, v9);
    cv::_InputArray::_InputArray((cv::_InputArray *)v14, (const double *)a2 + 38);
  }
  cv::_OutputArray::_OutputArray((uint64_t)v13, v8);
  cv::compare((cv *)v15, (const cv::_InputArray *)v14, (const cv::_InputArray *)v13, (const cv::_OutputArray *)*((unsigned int *)a2 + 2));
  if (v7 >= 2 && *(void *)&v16[1] != *((void *)a3 + 2))
  {
    cv::_OutputArray::_OutputArray((uint64_t)v15, a3);
    cv::Mat::convertTo(v8, (const cv::_OutputArray *)v15, a4, 1.0, 0.0);
  }
  if (*((void *)&v16[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v16[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v16, v10);
  }
  *(void *)&v16[1] = 0;
  memset(&v16[2], 0, 24);
  if (SDWORD1(v16[0]) >= 1)
  {
    uint64_t v11 = 0;
    float64x2_t v12 = v17;
    do
      *(_DWORD *)&v12[4 * v11++] = 0;
    while (v11 < SDWORD1(v16[0]));
  }
  *((void *)&v16[1] + 1) = 0;
  if (v18 != (cv *)v19) {
    cv::fastFree((void **)v18, v10);
  }
}

void sub_225F20E0C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  cv::Mat::~Mat((cv::Mat *)va, a2);
  _Unwind_Resume(a1);
}

void cv::MatOp_T::assign(cv::MatOp_T *this, const cv::MatExpr *a2, cv::Mat *a3, int a4)
{
  void (**v13[4])(uint64_t *__return_ptr);
  _OWORD v14[4];
  char *v15;
  cv *v16;
  void v17[2];

  double v15 = (char *)v14 + 8;
  double v16 = (cv *)v17;
  v17[0] = 0;
  v17[1] = 0;
  LODWORD(v14[0]) = 1124007936;
  memset((char *)v14 + 4, 0, 48);
  v14[3] = 0u;
  if (a4 == -1 || (*((_DWORD *)a2 + 4) & 0xFFF) == a4) {
    unsigned int v7 = a3;
  }
  else {
    unsigned int v7 = (cv::Mat *)v14;
  }
  cv::_InputArray::_InputArray((uint64_t)v13, (const cv::MatExpr *)((char *)a2 + 16));
  cv::_OutputArray::_OutputArray((uint64_t)v12, v7);
  cv::transpose(v13, (const cv::_InputArray *)v12, v8);
  if (*((void *)v7 + 2) != *((void *)a3 + 2) || *((double *)a2 + 38) != 1.0)
  {
    cv::_OutputArray::_OutputArray((uint64_t)v13, a3);
    cv::Mat::convertTo(v7, (const cv::_OutputArray *)v13, a4, *((double *)a2 + 38), 0.0);
  }
  if (*((void *)&v14[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v14[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v14, v9);
  }
  *(void *)&v14[1] = 0;
  memset(&v14[2], 0, 24);
  if (SDWORD1(v14[0]) >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v15;
    do
      *(_DWORD *)&v11[4 * v10++] = 0;
    while (v10 < SDWORD1(v14[0]));
  }
  *((void *)&v14[1] + 1) = 0;
  if (v16 != (cv *)v17) {
    cv::fastFree((void **)v16, v9);
  }
}

void sub_225F20FA4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  cv::Mat::~Mat((cv::Mat *)va, a2);
  _Unwind_Resume(a1);
}

double cv::MatOp_T::multiply(cv::MatOp_T *this, const cv::MatExpr *a2, double a3, cv::MatExpr *a4)
{
  cv::MatExpr::operator=((uint64_t)a4, (uint64_t *)a2);
  double result = *((double *)a4 + 38) * a3;
  *((double *)a4 + 38) = result;
  return result;
}

void cv::MatOp_T::transpose(cv::MatOp_T *this, const cv::MatExpr *a2, cv::MatExpr *a3)
{
  double v3 = *((double *)a2 + 38);
  if (v3 == 1.0)
  {
    double v4 = (const cv::MatExpr *)((char *)a2 + 16);
    cv::MatOp_Identity::makeExpr(a3, v4, a3);
  }
  else
  {
    uint64_t v10 = (char *)v9 + 8;
    uint64_t v11 = (cv *)v12;
    v12[0] = 0;
    v12[1] = 0;
    LODWORD(v9[0]) = 1124007936;
    memset((char *)v9 + 4, 0, 48);
    v9[3] = 0u;
    memset(v8, 0, sizeof(v8));
    cv::MatOp_AddEx::makeExpr((uint64_t)a3, (const cv::MatExpr *)((char *)a2 + 16), (cv::Mat *)v9, (uint64_t)v8, v3, 0.0);
    if (*((void *)&v9[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v9[1] + 1), 0xFFFFFFFF) == 1) {
      cv::Mat::deallocate((cv::Mat *)v9, v5);
    }
    *(void *)&v9[1] = 0;
    memset(&v9[2], 0, 24);
    if (SDWORD1(v9[0]) >= 1)
    {
      uint64_t v6 = 0;
      unsigned int v7 = v10;
      do
        *(_DWORD *)&v7[4 * v6++] = 0;
      while (v6 < SDWORD1(v9[0]));
    }
    *((void *)&v9[1] + 1) = 0;
    if (v11 != (cv *)v12) {
      cv::fastFree((void **)v11, v5);
    }
  }
}

void sub_225F21110(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  cv::Mat::~Mat((cv::Mat *)va, a2);
  _Unwind_Resume(a1);
}

void cv::MatOp_Identity::makeExpr(cv::MatOp_Identity *this, cv::MatExpr *a2, const cv::Mat *a3)
{
  double v16 = (char *)v15 + 8;
  double v17 = (cv *)v18;
  v18[0] = 0;
  v18[1] = 0;
  LODWORD(v15[0]) = 1124007936;
  memset((char *)v15 + 4, 0, 48);
  v15[3] = 0u;
  float64x2_t v12 = (char *)v11 + 8;
  uint64_t v13 = (cv *)v14;
  v14[0] = 0;
  v14[1] = 0;
  LODWORD(v11[0]) = 1124007936;
  memset((char *)v11 + 4, 0, 48);
  void v11[3] = 0u;
  memset(v10, 0, sizeof(v10));
  cv::MatExpr::MatExpr((uint64_t)v19, (uint64_t)&cv::g_MatOp_Identity, 0, a2, (cv::Mat *)v15, (cv::Mat *)v11, (uint64_t)v10, 1.0, 0.0);
  cv::MatExpr::operator=((uint64_t)this, v19);
  cv::MatExpr::~MatExpr((cv::MatExpr *)v19, v4);
  if (*((void *)&v11[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v11[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v11, v5);
  }
  *(void *)&v11[1] = 0;
  memset(&v11[2], 0, 24);
  if (SDWORD1(v11[0]) >= 1)
  {
    uint64_t v6 = 0;
    unsigned int v7 = v12;
    do
      *(_DWORD *)&v7[4 * v6++] = 0;
    while (v6 < SDWORD1(v11[0]));
  }
  *((void *)&v11[1] + 1) = 0;
  if (v13 != (cv *)v14) {
    cv::fastFree((void **)v13, v5);
  }
  if (*((void *)&v15[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v15[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v15, v5);
  }
  *(void *)&v15[1] = 0;
  memset(&v15[2], 0, 24);
  if (SDWORD1(v15[0]) >= 1)
  {
    uint64_t v8 = 0;
    double v9 = v16;
    do
      *(_DWORD *)&v9[4 * v8++] = 0;
    while (v8 < SDWORD1(v15[0]));
  }
  *((void *)&v15[1] + 1) = 0;
  if (v17 != (cv *)v18) {
    cv::fastFree((void **)v17, v5);
  }
}

void sub_225F212C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  cv::MatExpr::~MatExpr((cv::MatExpr *)&a37, a2);
  cv::Mat::~Mat((cv::Mat *)&a13, v38);
  cv::Mat::~Mat((cv::Mat *)&a25, v39);
  _Unwind_Resume(a1);
}

void cv::MatOp_GEMM::assign(cv::MatOp_GEMM *this, const cv::MatExpr *a2, cv::Mat *a3, int a4)
{
  uint64_t v18 = (char *)v17 + 8;
  double v19 = (cv *)v20;
  v20[0] = 0;
  v20[1] = 0;
  LODWORD(v17[0]) = 1124007936;
  memset((char *)v17 + 4, 0, 48);
  void v17[3] = 0u;
  if (a4 == -1 || (*((_DWORD *)a2 + 4) & 0xFFF) == a4) {
    unsigned int v7 = a3;
  }
  else {
    unsigned int v7 = (cv::Mat *)v17;
  }
  cv::_InputArray::_InputArray((uint64_t)v16, (const cv::MatExpr *)((char *)a2 + 16));
  cv::_InputArray::_InputArray((uint64_t)v15, (const cv::MatExpr *)((char *)a2 + 112));
  double v8 = *((double *)a2 + 38);
  cv::_InputArray::_InputArray((uint64_t)v14, (const cv::MatExpr *)((char *)a2 + 208));
  double v9 = *((double *)a2 + 39);
  cv::_OutputArray::_OutputArray((uint64_t)v13, v7);
  cv::gemm((cv *)v16, (const cv::_InputArray *)v15, (const cv::_InputArray *)v14, v8, (const cv::_InputArray *)v13, v9, (const cv::_OutputArray *)*((unsigned int *)a2 + 2));
  if (*((void *)v7 + 2) != *((void *)a3 + 2))
  {
    cv::_OutputArray::_OutputArray((uint64_t)v16, a3);
    cv::Mat::convertTo(v7, (const cv::_OutputArray *)v16, a4, 1.0, 0.0);
  }
  if (*((void *)&v17[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v17[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v17, v10);
  }
  *(void *)&v17[1] = 0;
  memset(&v17[2], 0, 24);
  if (SDWORD1(v17[0]) >= 1)
  {
    uint64_t v11 = 0;
    float64x2_t v12 = v18;
    do
      *(_DWORD *)&v12[4 * v11++] = 0;
    while (v11 < SDWORD1(v17[0]));
  }
  *((void *)&v17[1] + 1) = 0;
  if (v19 != (cv *)v20) {
    cv::fastFree((void **)v19, v10);
  }
}

void sub_225F21488(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  va_start(va, a18);
  cv::Mat::~Mat((cv::Mat *)va, a2);
  _Unwind_Resume(a1);
}

void cv::MatOp_GEMM::add(cv::MatOp_GEMM *this, const cv::MatExpr *a2, const cv::MatExpr *a3, cv::MatExpr *a4)
{
  uint64_t v6 = *(uint64_t **)a2;
  unsigned int v7 = *(uint64_t **)a3;
  double v8 = 1.0;
  if (*(uint64_t **)a2 == &cv::g_MatOp_Identity) {
    double v9 = 1.0;
  }
  else {
    double v9 = *((double *)a2 + 38);
  }
  if (v7 != &cv::g_MatOp_Identity) {
    double v8 = *((double *)a3 + 38);
  }
  if (v6 != &cv::g_MatOp_GEMM || *((void *)a2 + 28) && *((double *)a2 + 39) != 0.0) {
    goto LABEL_9;
  }
  if (v7 == &cv::g_MatOp_Identity)
  {
LABEL_30:
    int v11 = *((_DWORD *)a2 + 2);
    long long v14 = 0u;
    long long v15 = 0u;
    cv::MatExpr::MatExpr((uint64_t)v16, (uint64_t)&cv::g_MatOp_GEMM, v11 & 0xFFFFFFFB | (4 * (v7 == &cv::g_MatOp_T)), (const cv::MatExpr *)((char *)a2 + 16), (const cv::MatExpr *)((char *)a2 + 112), (const cv::MatExpr *)((char *)a3 + 16), (uint64_t)&v14, v9, v8);
    cv::MatExpr::operator=((uint64_t)a4, v16);
LABEL_35:
    cv::MatExpr::~MatExpr((cv::MatExpr *)v16, v12);
    return;
  }
  if (v7 == &cv::g_MatOp_AddEx)
  {
    if (*((void *)a3 + 16) && *((double *)a3 + 39) != 0.0
      || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 20)), (int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 21)))))) & 1) != 0)
    {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
  if (v7 == &cv::g_MatOp_T) {
    goto LABEL_30;
  }
LABEL_9:
  if (v7 != &cv::g_MatOp_GEMM || *((void *)a3 + 28) && *((double *)a3 + 39) != 0.0) {
    goto LABEL_12;
  }
  if (v6 == &cv::g_MatOp_Identity) {
    goto LABEL_34;
  }
  if (v6 != &cv::g_MatOp_AddEx)
  {
    if (v6 != &cv::g_MatOp_T) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
  if ((!*((void *)a2 + 16) || *((double *)a2 + 39) == 0.0)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)a2 + 20)), (int32x4_t)vceqzq_f64(*((float64x2_t *)a2 + 21)))))) & 1) == 0)
  {
LABEL_34:
    int v13 = *((_DWORD *)a3 + 2);
    long long v14 = 0u;
    long long v15 = 0u;
    cv::MatExpr::MatExpr((uint64_t)v16, (uint64_t)&cv::g_MatOp_GEMM, v13 & 0xFFFFFFFB | (4 * (v6 == &cv::g_MatOp_T)), (const cv::MatExpr *)((char *)a3 + 16), (const cv::MatExpr *)((char *)a3 + 112), (const cv::MatExpr *)((char *)a2 + 16), (uint64_t)&v14, v8, v9);
    cv::MatExpr::operator=((uint64_t)a4, v16);
    goto LABEL_35;
  }
LABEL_12:
  if (v7 == (uint64_t *)this)
  {
    cv::MatOp::add(this, a2, a3, a4);
  }
  else
  {
    uint64_t v10 = *(void (**)(void))(*v7 + 104);
    v10();
  }
}

void sub_225F21738(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  cv::MatExpr::~MatExpr((cv::MatExpr *)va, a2);
  _Unwind_Resume(a1);
}

void cv::MatOp_GEMM::subtract(cv::MatOp_GEMM *this, float64x2_t *a2, float64x2_t *a3, cv::MatExpr *a4)
{
  uint64_t v6 = *(uint64_t **)&a2->f64[0];
  unsigned int v7 = *(uint64_t **)&a3->f64[0];
  if (*(uint64_t **)&a2->f64[0] == &cv::g_MatOp_Identity) {
    double v8 = 1.0;
  }
  else {
    double v8 = a2[19].f64[0];
  }
  double v9 = a3[19].f64[0];
  if (v7 == &cv::g_MatOp_Identity) {
    double v9 = 1.0;
  }
  if (v6 != &cv::g_MatOp_GEMM || *(void *)&a2[14].f64[0] && a2[19].f64[1] != 0.0) {
    goto LABEL_9;
  }
  if (v7 == &cv::g_MatOp_Identity)
  {
LABEL_30:
    int v11 = LODWORD(a2->f64[1]);
    long long v14 = 0u;
    long long v15 = 0u;
    cv::MatExpr::MatExpr((uint64_t)v16, (uint64_t)&cv::g_MatOp_GEMM, v11 & 0xFFFFFFFB | (4 * (v7 == &cv::g_MatOp_T)), (cv::Mat *)&a2[1], (cv::Mat *)&a2[7], (cv::Mat *)&a3[1], (uint64_t)&v14, v8, -v9);
    cv::MatExpr::operator=((uint64_t)a4, v16);
LABEL_35:
    cv::MatExpr::~MatExpr((cv::MatExpr *)v16, v12);
    return;
  }
  if (v7 == &cv::g_MatOp_AddEx)
  {
    if (*(void *)&a3[8].f64[0] && a3[19].f64[1] != 0.0
      || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(a3[20]), (int32x4_t)vceqzq_f64(a3[21]))))) & 1) != 0)
    {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
  if (v7 == &cv::g_MatOp_T) {
    goto LABEL_30;
  }
LABEL_9:
  if (v7 != &cv::g_MatOp_GEMM || *(void *)&a3[14].f64[0] && a3[19].f64[1] != 0.0) {
    goto LABEL_12;
  }
  if (v6 == &cv::g_MatOp_Identity) {
    goto LABEL_34;
  }
  if (v6 != &cv::g_MatOp_AddEx)
  {
    if (v6 != &cv::g_MatOp_T) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
  if ((!*(void *)&a2[8].f64[0] || a2[19].f64[1] == 0.0)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(a2[20]), (int32x4_t)vceqzq_f64(a2[21]))))) & 1) == 0)
  {
LABEL_34:
    int v13 = LODWORD(a3->f64[1]);
    long long v14 = 0u;
    long long v15 = 0u;
    cv::MatExpr::MatExpr((uint64_t)v16, (uint64_t)&cv::g_MatOp_GEMM, v13 & 0xFFFFFFFB | (4 * (v6 == &cv::g_MatOp_T)), (cv::Mat *)&a3[1], (cv::Mat *)&a3[7], (cv::Mat *)&a2[1], (uint64_t)&v14, -v9, v8);
    cv::MatExpr::operator=((uint64_t)a4, v16);
    goto LABEL_35;
  }
LABEL_12:
  if (v7 == (uint64_t *)this)
  {
    cv::MatOp::subtract(this, (const cv::MatExpr *)a2, (const cv::MatExpr *)a3, a4);
  }
  else
  {
    uint64_t v10 = *(void (**)(void))(*v7 + 120);
    v10();
  }
}

void sub_225F219E0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  cv::MatExpr::~MatExpr((cv::MatExpr *)va, a2);
  _Unwind_Resume(a1);
}

float64x2_t cv::MatOp_GEMM::multiply(cv::MatOp_GEMM *this, const cv::MatExpr *a2, double a3, float64x2_t *a4)
{
  cv::MatExpr::operator=((uint64_t)a4, (uint64_t *)a2);
  float64x2_t result = vmulq_n_f64(a4[19], a3);
  a4[19] = result;
  return result;
}

int *cv::MatOp_GEMM::transpose(cv::MatOp_GEMM *this, const cv::MatExpr *a2, cv::MatExpr *a3)
{
  cv::MatExpr::operator=((uint64_t)a3, (uint64_t *)a2);
  *((_DWORD *)a3 + 2) = (*((_DWORD *)a2 + 2) & 4 | (~__rbit32(*((_DWORD *)a2 + 2)) >> 30)) ^ 4;
  return cv::swap((int *)a3 + 4, (Mat *)((char *)a3 + 112), v5);
}

void cv::MatOp_Invert::assign(cv::MatOp_Invert *this, const cv::MatExpr *a2, cv::Mat *a3, int a4)
{
  long long v14 = (char *)v13 + 8;
  long long v15 = (cv *)v16;
  v16[0] = 0;
  v16[1] = 0;
  LODWORD(v13[0]) = 1124007936;
  memset((char *)v13 + 4, 0, 48);
  void v13[3] = 0u;
  if (a4 == -1 || (*((_DWORD *)a2 + 4) & 0xFFF) == a4) {
    unsigned int v7 = a3;
  }
  else {
    unsigned int v7 = (cv::Mat *)v13;
  }
  cv::_InputArray::_InputArray((uint64_t)v12, (const cv::MatExpr *)((char *)a2 + 16));
  cv::_OutputArray::_OutputArray((uint64_t)v11, v7);
  cv::invert((cv *)v12, (const cv::_InputArray *)v11, (const cv::_OutputArray *)*((unsigned int *)a2 + 2));
  if (*((void *)v7 + 2) != *((void *)a3 + 2))
  {
    cv::_OutputArray::_OutputArray((uint64_t)v12, a3);
    cv::Mat::convertTo(v7, (const cv::_OutputArray *)v12, a4, 1.0, 0.0);
  }
  if (*((void *)&v13[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v13[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v13, v8);
  }
  *(void *)&v13[1] = 0;
  memset(&v13[2], 0, 24);
  if (SDWORD1(v13[0]) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v14;
    do
      *(_DWORD *)&v10[4 * v9++] = 0;
    while (v9 < SDWORD1(v13[0]));
  }
  *((void *)&v13[1] + 1) = 0;
  if (v15 != (cv *)v16) {
    cv::fastFree((void **)v15, v8);
  }
}

void sub_225F21BF8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  cv::Mat::~Mat((cv::Mat *)va, a2);
  _Unwind_Resume(a1);
}

void cv::MatOp_Invert::matmul(cv::MatOp_Invert *this, const cv::MatExpr *a2, cv::MatOp_Invert **a3, cv::MatExpr *a4, const cv::Mat *a5)
{
  uint64_t v6 = *a3;
  if (*(uint64_t **)a2 == &cv::g_MatOp_Invert && v6 == (cv::MatOp_Invert *)&cv::g_MatOp_Identity)
  {
    cv::MatOp_Solve::makeExpr(a4, (cv::MatExpr *)*((unsigned int *)a2 + 2), (const cv::MatExpr *)((char *)a2 + 16), (const cv::Mat *)(a3 + 2), a5);
  }
  else if (v6 == this)
  {
    cv::MatOp::matmul(this, a2, (const cv::MatExpr *)a3, a4);
  }
  else
  {
    (*(void (**)(void))(*(void *)v6 + 184))();
  }
}

void cv::MatOp_Solve::makeExpr(cv::MatOp_Solve *this, cv::MatExpr *a2, cv::Mat *a3, const cv::Mat *a4, const cv::Mat *a5)
{
  float64x2_t v12 = (char *)v11 + 8;
  int v13 = (cv *)v14;
  v14[0] = 0;
  v14[1] = 0;
  LODWORD(v11[0]) = 1124007936;
  memset((char *)v11 + 4, 0, 48);
  void v11[3] = 0u;
  memset(v10, 0, sizeof(v10));
  cv::MatExpr::MatExpr((uint64_t)v15, (uint64_t)&cv::g_MatOp_Solve, (int)a2, a3, a4, (cv::Mat *)v11, (uint64_t)v10, 1.0, 1.0);
  cv::MatExpr::operator=((uint64_t)this, v15);
  cv::MatExpr::~MatExpr((cv::MatExpr *)v15, v6);
  if (*((void *)&v11[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v11[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v11, v7);
  }
  *(void *)&v11[1] = 0;
  memset(&v11[2], 0, 24);
  if (SDWORD1(v11[0]) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v12;
    do
      *(_DWORD *)&v9[4 * v8++] = 0;
    while (v8 < SDWORD1(v11[0]));
  }
  *((void *)&v11[1] + 1) = 0;
  if (v13 != (cv *)v14) {
    cv::fastFree((void **)v13, v7);
  }
}

void sub_225F21DA0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  cv::MatExpr::~MatExpr((cv::MatExpr *)va1, a2);
  cv::Mat::~Mat((cv::Mat *)va, v7);
  _Unwind_Resume(a1);
}

void cv::MatOp_Solve::assign(cv::MatOp_Solve *this, const cv::MatExpr *a2, cv::Mat *a3, int a4)
{
  uint64_t v15 = (char *)v14 + 8;
  uint64_t v16 = (cv *)v17;
  v17[0] = 0;
  v17[1] = 0;
  LODWORD(v14[0]) = 1124007936;
  memset((char *)v14 + 4, 0, 48);
  v14[3] = 0u;
  if (a4 == -1 || (*((_DWORD *)a2 + 4) & 0xFFF) == a4) {
    unsigned int v7 = a3;
  }
  else {
    unsigned int v7 = (cv::Mat *)v14;
  }
  cv::_InputArray::_InputArray((uint64_t)v13, (const cv::MatExpr *)((char *)a2 + 16));
  cv::_InputArray::_InputArray((uint64_t)v12, (const cv::MatExpr *)((char *)a2 + 112));
  cv::_OutputArray::_OutputArray((uint64_t)v11, v7);
  cv::solve((cv *)v13, (const cv::_InputArray *)v12, (const cv::_InputArray *)v11, (const cv::_OutputArray *)*((unsigned int *)a2 + 2));
  if (*((void *)v7 + 2) != *((void *)a3 + 2))
  {
    cv::_OutputArray::_OutputArray((uint64_t)v13, a3);
    cv::Mat::convertTo(v7, (const cv::_OutputArray *)v13, a4, 1.0, 0.0);
  }
  if (*((void *)&v14[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v14[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v14, v8);
  }
  *(void *)&v14[1] = 0;
  memset(&v14[2], 0, 24);
  if (SDWORD1(v14[0]) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v15;
    do
      *(_DWORD *)&v10[4 * v9++] = 0;
    while (v9 < SDWORD1(v14[0]));
  }
  *((void *)&v14[1] + 1) = 0;
  if (v16 != (cv *)v17) {
    cv::fastFree((void **)v16, v8);
  }
}

void sub_225F21F30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  cv::Mat::~Mat((cv::Mat *)va, a2);
  _Unwind_Resume(a1);
}

void cv::MatOp_Initializer::assign(cv::MatOp_Initializer *this, const cv::MatExpr *a2, cv::Mat *a3, int a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  int v7 = *((_DWORD *)a2 + 4);
  uint64_t v6 = (cv::Mat *)*((unsigned int *)a2 + 5);
  __int16 v8 = v7 & 0xFFF;
  if (a4 == -1) {
    LOWORD(a4) = v8;
  }
  uint64_t v9 = *((void *)a2 + 10);
  if ((int)v6 > 2)
  {
    cv::Mat::create(a3, v6, (const int *)v9, a4);
  }
  else
  {
    int v10 = *(_DWORD *)(v9 + 4);
    int v11 = a4 & 0xFFF;
    BOOL v13 = *((int *)a3 + 1) <= 2 && *((_DWORD *)a3 + 2) == *(_DWORD *)v9 && *((_DWORD *)a3 + 3) == v10;
    if (!v13 || ((*(_DWORD *)a3 & 0xFFF) == v11 ? (BOOL v14 = *((void *)a3 + 2) == 0) : (BOOL v14 = 1), v14))
    {
      v23[0] = *(_DWORD *)v9;
      v23[1] = v10;
      cv::Mat::create(a3, (cv::Mat *)2, v23, v11);
    }
  }
  int v15 = *((_DWORD *)a2 + 2);
  if (v15 == 73 && *((_DWORD *)a2 + 5) <= 2)
  {
    cv::_OutputArray::_OutputArray((uint64_t)v23, a3);
    int64x2_t v20 = (int64x2_t)*((unint64_t *)a2 + 38);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    cv::setIdentity((void (***)(uint64_t *__return_ptr))v23, &v20);
  }
  else if (v15 == 49)
  {
    *(void *)uint64_t v23 = *((void *)a2 + 38);
    long long v24 = 0uLL;
    *(void *)&v23[2] = 0;
    cv::Mat::operator=((uint64_t)a3, (int64x2_t *)v23);
  }
  else
  {
    if (v15 != 48)
    {
      std::string::basic_string[abi:ne180100]<0>(&v20, "Invalid matrix initializer type");
      std::string::basic_string[abi:ne180100]<0>(v19, "assign");
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/HomeAI/OpenCV/src/core/matop.cpp");
      cv::Exception::Exception(v23, 4294967294, &v20, v19, __p, 1572);
      cv::error((cv *)v23, v17);
    }
    *(_OWORD *)uint64_t v23 = 0u;
    long long v24 = 0u;
    cv::Mat::operator=((uint64_t)a3, (int64x2_t *)v23);
  }
}

void sub_225F22130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

double cv::MatOp_Initializer::multiply(cv::MatOp_Initializer *this, const cv::MatExpr *a2, double a3, cv::MatExpr *a4)
{
  cv::MatExpr::operator=((uint64_t)a4, (uint64_t *)a2);
  double result = *((double *)a4 + 38) * a3;
  *((double *)a4 + 38) = result;
  return result;
}

void cv::MatOp_Initializer::makeExpr(cv *a1, int a2, int *a3, unsigned int a4, double a5)
{
  cv::getGlobalMatOpInitializer(a1);
  int v10 = *a3;
  v30[0] = a3[1];
  v30[1] = v10;
  uint64_t v31 = 0;
  double v32 = 0;
  float64_t v37 = v30;
  uint64_t v38 = (cv *)v39;
  int v28 = a4 & 0xFFF | 0x42FF4000;
  int v29 = 2;
  v39[0] = v10 * (uint64_t)(int)((((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3));
  v39[1] = (((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3);
  uint64_t v35 = v39[0] * v30[0];
  uint64_t v36 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = v35;
  uint64_t v25 = (char *)v24 + 8;
  uint64_t v26 = (cv *)v27;
  v27[0] = 0;
  v27[1] = 0;
  LODWORD(v24[0]) = 1124007936;
  memset((char *)v24 + 4, 0, 48);
  v24[3] = 0u;
  uint64_t v21 = (char *)v20 + 8;
  uint64_t v22 = (cv *)v23;
  v23[0] = 0;
  v23[1] = 0;
  LODWORD(v20[0]) = 1124007936;
  memset((char *)v20 + 4, 0, 48);
  v20[3] = 0u;
  memset(v19, 0, sizeof(v19));
  cv::MatExpr::MatExpr((uint64_t)v40, (uint64_t)&cv::getGlobalMatOpInitializer(void)::initializer, a2, (cv::Mat *)&v28, (cv::Mat *)v24, (cv::Mat *)v20, (uint64_t)v19, a5, 0.0);
  cv::MatExpr::operator=((uint64_t)a1, v40);
  cv::MatExpr::~MatExpr((cv::MatExpr *)v40, v11);
  if (*((void *)&v20[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v20[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v20, v12);
  }
  *(void *)&v20[1] = 0;
  memset(&v20[2], 0, 24);
  if (SDWORD1(v20[0]) >= 1)
  {
    uint64_t v13 = 0;
    BOOL v14 = v21;
    do
      *(_DWORD *)&v14[4 * v13++] = 0;
    while (v13 < SDWORD1(v20[0]));
  }
  *((void *)&v20[1] + 1) = 0;
  if (v22 != (cv *)v23) {
    cv::fastFree((void **)v22, v12);
  }
  if (*((void *)&v24[1] + 1) && atomic_fetch_add(*((atomic_uint *volatile *)&v24[1] + 1), 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)v24, v12);
  }
  *(void *)&v24[1] = 0;
  memset(&v24[2], 0, 24);
  if (SDWORD1(v24[0]) >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v25;
    do
      *(_DWORD *)&v16[4 * v15++] = 0;
    while (v15 < SDWORD1(v24[0]));
  }
  *((void *)&v24[1] + 1) = 0;
  if (v26 != (cv *)v27) {
    cv::fastFree((void **)v26, v12);
  }
  if (v32 && atomic_fetch_add(v32, 0xFFFFFFFF) == 1) {
    cv::Mat::deallocate((cv::Mat *)&v28, v12);
  }
  uint64_t v31 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  if (v29 >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = v37;
    do
      v18[v17++] = 0;
    while (v17 < v29);
  }
  double v32 = 0;
  if (v38 != (cv *)v39) {
    cv::fastFree((void **)v38, v12);
  }
}

void sub_225F22474(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  cv::MatExpr::~MatExpr((cv::MatExpr *)&a49, a2);
  cv::Mat::~Mat((cv::Mat *)&a13, v50);
  cv::Mat::~Mat((cv::Mat *)&a25, v51);
  cv::Mat::~Mat((cv::Mat *)&a37, v52);
  _Unwind_Resume(a1);
}

void cv::Mat::zeros(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 80) = a3 + 24;
  *(void *)(a3 + 88) = a3 + 96;
  *(void *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 16) = 1124007936;
  *(_OWORD *)(a3 + 20) = 0u;
  *(_OWORD *)(a3 + 36) = 0u;
  *(_OWORD *)(a3 + 52) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(void *)(a3 + 192) = 0;
  *(void *)(a3 + 176) = a3 + 120;
  *(void *)(a3 + 184) = a3 + 192;
  *(void *)(a3 + 200) = 0;
  *(_DWORD *)(a3 + 112) = 1124007936;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 148) = 0u;
  *(_OWORD *)(a3 + 132) = 0u;
  *(_OWORD *)(a3 + 116) = 0u;
  *(void *)(a3 + 272) = a3 + 216;
  *(void *)(a3 + 280) = a3 + 288;
  *(void *)(a3 + 288) = 0;
  *(void *)(a3 + 296) = 0;
  *(_DWORD *)(a3 + 208) = 1124007936;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 244) = 0u;
  *(_OWORD *)(a3 + 228) = 0u;
  *(_OWORD *)(a3 + 212) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  uint64_t v3 = *a1;
  cv::MatOp_Initializer::makeExpr((cv *)a3, 48, (int *)&v3, a2, 1.0);
}

void sub_225F22578(_Unwind_Exception *a1, void *a2)
{
  cv::MatExpr::~MatExpr(v2, a2);
  _Unwind_Resume(a1);
}

void cv::MatOp_Identity::~MatOp_Identity(cv::MatOp_Identity *this)
{
}

uint64_t cv::MatOp_Identity::elementWise()
{
  return 1;
}

void cv::MatOp_AddEx::~MatOp_AddEx(cv::MatOp_AddEx *this)
{
}

uint64_t cv::MatOp_AddEx::elementWise()
{
  return 1;
}

void cv::MatOp_Bin::~MatOp_Bin(cv::MatOp_Bin *this)
{
}

uint64_t cv::MatOp_Bin::elementWise()
{
  return 1;
}

void cv::MatOp_Cmp::~MatOp_Cmp(cv::MatOp_Cmp *this)
{
}

uint64_t cv::MatOp_Cmp::elementWise()
{
  return 1;
}

void cv::MatOp_GEMM::~MatOp_GEMM(cv::MatOp_GEMM *this)
{
}

uint64_t cv::MatOp_GEMM::elementWise()
{
  return 0;
}

void cv::MatOp_Invert::~MatOp_Invert(cv::MatOp_Invert *this)
{
}

uint64_t cv::MatOp_Invert::elementWise()
{
  return 0;
}

void cv::MatOp_T::~MatOp_T(cv::MatOp_T *this)
{
}

uint64_t cv::MatOp_T::elementWise()
{
  return 0;
}

void cv::MatOp_Solve::~MatOp_Solve(cv::MatOp_Solve *this)
{
}

uint64_t cv::MatOp_Solve::elementWise()
{
  return 0;
}

void cv::MatOp_Initializer::~MatOp_Initializer(cv::MatOp_Initializer *this)
{
}

uint64_t cv::MatOp_Initializer::elementWise()
{
  return 0;
}

uint64_t cv::MatExpr::MatExpr(uint64_t a1, uint64_t a2, int a3, cv::Mat *a4, cv::Mat *a5, cv::Mat *a6, uint64_t a7, double a8, double a9)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  long long v15 = *(_OWORD *)a4;
  *(void *)(a1 + 32) = *((void *)a4 + 2);
  long long v16 = *(_OWORD *)((char *)a4 + 24);
  *(_OWORD *)(a1 + 40) = v16;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)((char *)a4 + 40);
  uint64_t v17 = *((void *)a4 + 7);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 16) = v15;
  if ((void)v16) {
    atomic_fetch_add((atomic_uint *volatile)v16, 1u);
  }
  if (*((int *)a4 + 1) > 2)
  {
    *(_DWORD *)(a1 + 20) = 0;
    cv::Mat::copySize((cv::Mat *)(a1 + 16), a4);
  }
  else
  {
    uint64_t v18 = (void *)*((void *)a4 + 9);
    uint64_t v19 = *(void **)(a1 + 88);
    *uint64_t v19 = *v18;
    v19[1] = v18[1];
  }
  long long v20 = *(_OWORD *)a5;
  *(void *)(a1 + 128) = *((void *)a5 + 2);
  long long v21 = *(_OWORD *)((char *)a5 + 24);
  *(_OWORD *)(a1 + 136) = v21;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)((char *)a5 + 40);
  uint64_t v22 = *((void *)a5 + 7);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 168) = v22;
  *(void *)(a1 + 176) = a1 + 120;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 112) = v20;
  if ((void)v21) {
    atomic_fetch_add((atomic_uint *volatile)v21, 1u);
  }
  if (*((int *)a5 + 1) > 2)
  {
    *(_DWORD *)(a1 + 116) = 0;
    cv::Mat::copySize((cv::Mat *)(a1 + 112), a5);
  }
  else
  {
    uint64_t v23 = (void *)*((void *)a5 + 9);
    long long v24 = *(void **)(a1 + 184);
    *long long v24 = *v23;
    v24[1] = v23[1];
  }
  *(_OWORD *)(a1 + 208) = *(_OWORD *)a6;
  *(void *)(a1 + 224) = *((void *)a6 + 2);
  long long v25 = *(_OWORD *)((char *)a6 + 24);
  *(_OWORD *)(a1 + 232) = v25;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)a6 + 40);
  *(void *)(a1 + 264) = *((void *)a6 + 7);
  *(void *)(a1 + 272) = a1 + 216;
  *(void *)(a1 + 280) = a1 + 288;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  if ((void)v25) {
    atomic_fetch_add((atomic_uint *volatile)v25, 1u);
  }
  if (*((int *)a6 + 1) > 2)
  {
    *(_DWORD *)(a1 + 212) = 0;
    cv::Mat::copySize((cv::Mat *)(a1 + 208), a6);
  }
  else
  {
    uint64_t v26 = (void *)*((void *)a6 + 9);
    uint64_t v27 = *(void **)(a1 + 280);
    *uint64_t v27 = *v26;
    v27[1] = v26[1];
  }
  uint64_t v28 = 0;
  *(double *)(a1 + 304) = a8;
  *(double *)(a1 + 312) = a9;
  do
  {
    *(void *)(a1 + v28 + 320) = *(void *)(a7 + v28);
    v28 += 8;
  }
  while (v28 != 32);
  return a1;
}

void sub_225F228AC(_Unwind_Exception *a1, void *a2)
{
  cv::Mat::~Mat(v3, a2);
  cv::Mat::~Mat(v2, v5);
  _Unwind_Resume(a1);
}

void cv::getGlobalMatOpInitializer(cv *this)
{
  {
    cv::getGlobalMatOpInitializer(void)::initializer = (uint64_t)&unk_26D98B2F8;
  }
}

void _GLOBAL__sub_I_matop_cpp()
{
  cv::g_MatOp_Identity = (uint64_t)&unk_26D98AAF8;
  cv::g_MatOp_AddEx = (uint64_t)&unk_26D98ABF8;
  cv::g_MatOp_Bin = (uint64_t)&unk_26D98ACF8;
  cv::g_MatOp_Cmp = (uint64_t)&unk_26D98ADF8;
  cv::g_MatOp_GEMM = (uint64_t)&unk_26D98AEF8;
  cv::g_MatOp_Invert = (uint64_t)&unk_26D98AFF8;
  cv::g_MatOp_T = (uint64_t)&unk_26D98B0F8;
  cv::g_MatOp_Solve = (uint64_t)&unk_26D98B1F8;
}

void HMISimulateCrash_cold_1()
{
  dlerror();
  v0 = (homeai::mod::ImageDescriptorBufferAbstract *)abort_report_np();
  homeai::mod::ImageDescriptorBufferAbstract::~ImageDescriptorBufferAbstract(v0);
}

uint64_t __getVCPHomeKitAnalysisServiceClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return __getVCPHomeKitAnalysisSessionClass_block_invoke_cold_1(v0);
}

uint64_t __getVCPHomeKitAnalysisSessionClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return +[FaceRecognizabilityFilterSVM URLOfModelInThisBundle](v0);
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x270F18A38]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x270F18A48]();
}

uint64_t CCCryptorGCMOneshotEncrypt()
{
  return MEMORY[0x270ED7918]();
}

CCRNGStatus CCRandomGenerateBytes(void *bytes, size_t count)
{
  return MEMORY[0x270ED7A80](bytes, count);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7AF0](data, *(void *)&len, md);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFMutableBitVectorRef CFBitVectorCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableBitVectorRef)MEMORY[0x270EE44F0](allocator, capacity);
}

CFBit CFBitVectorGetBitAtIndex(CFBitVectorRef bv, CFIndex idx)
{
  return MEMORY[0x270EE44F8](bv, idx);
}

void CFBitVectorSetAllBits(CFMutableBitVectorRef bv, CFBit value)
{
}

void CFBitVectorSetBitAtIndex(CFMutableBitVectorRef bv, CFIndex idx, CFBit value)
{
}

void CFBitVectorSetCount(CFMutableBitVectorRef bv, CFIndex count)
{
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x270EE4968](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x270EE5960](retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x270EE5998](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59A8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x270EE59B0](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59C8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x270EE59D8](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x270EE59E8](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x270EE5B50](space, components);
}

void CGColorRelease(CGColorRef color)
{
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C60]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C68]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

CGColorSpaceRef CGColorSpaceRetain(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5D68](space);
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextBeginPath(CGContextRef c)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextRestoreGState(CGContextRef c)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetRGBStrokeColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetStrokeColor(CGContextRef c, const CGFloat *components)
{
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextStrokePath(CGContextRef c)
{
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x270EE62D0](data);
}

CGDataProviderRef CGDataProviderCreateWithFilename(const char *filename)
{
  return (CGDataProviderRef)MEMORY[0x270EE62E8](filename);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
}

CGImageRef CGImageCreateWithJPEGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x270EE6760](source, decode, shouldInterpolate, *(void *)&intent);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x270EE67D8](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x270EE6800](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x270EE6868](image);
}

CFStringRef CGImageMetadataCopyStringValueWithPath(CGImageMetadataRef metadata, CGImageMetadataTagRef parent, CFStringRef path)
{
  return (CFStringRef)MEMORY[0x270EF4F60](metadata, parent, path);
}

void CGImageRelease(CGImageRef image)
{
}

CGImageMetadataRef CGImageSourceCopyMetadataAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageMetadataRef)MEMORY[0x270EF4FF0](isrc, index, options);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x270EF5000](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5018](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5030](data, options);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return MEMORY[0x270EE6FD0](path, m, eoFill, (__n128)point, *(__n128 *)&point.y);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x270EE7030]();
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x270EE7058](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

CFDictionaryRef CGPointCreateDictionaryRepresentation(CGPoint point)
{
  return (CFDictionaryRef)MEMORY[0x270EE7150]((__n128)point, *(__n128 *)&point.y);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x270EE7168](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x270EE7170]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x270EE7188]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

void CGRectDivide(CGRect rect, CGRect *slice, CGRect *remainder, CGFloat amount, CGRectEdge edge)
{
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE71A0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x270EE71A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x270EE71C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x270EE71D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x270EE71D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x270EE71F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x270EE71F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x270EE7210]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x270EE7218]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x270EE7228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x270EE7230]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x270EE7238]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE7250]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x270EE7260]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x270EE7268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x270EE7270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x270EE7278](dict, rect);
}

CGRect CGRectStandardize(CGRect rect)
{
  MEMORY[0x270EE7288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x270EE7290]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

const AudioStreamBasicDescription *__cdecl CMAudioFormatDescriptionGetStreamBasicDescription(CMAudioFormatDescriptionRef desc)
{
  return (const AudioStreamBasicDescription *)MEMORY[0x270EE7998](desc);
}

uint64_t CMBaseObjectGetVTable()
{
  return MEMORY[0x270EE79D0]();
}

OSStatus CMBlockBufferCopyDataBytes(CMBlockBufferRef theSourceBuffer, size_t offsetToData, size_t dataLength, void *destination)
{
  return MEMORY[0x270EE79F0](theSourceBuffer, offsetToData, dataLength, destination);
}

OSStatus CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef structureAllocator, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x270EE7A08](structureAllocator, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(void *)&flags);
}

size_t CMBlockBufferGetDataLength(CMBlockBufferRef theBuffer)
{
  return MEMORY[0x270EE7A20](theBuffer);
}

OSStatus CMBufferQueueCreate(CFAllocatorRef allocator, CMItemCount capacity, const CMBufferCallbacks *callbacks, CMBufferQueueRef *queueOut)
{
  return MEMORY[0x270EE7A50](allocator, capacity, callbacks, queueOut);
}

CMBufferRef CMBufferQueueDequeueAndRetain(CMBufferQueueRef queue)
{
  return (CMBufferRef)MEMORY[0x270EE7A58](queue);
}

OSStatus CMBufferQueueEnqueue(CMBufferQueueRef queue, CMBufferRef buf)
{
  return MEMORY[0x270EE7A60](queue, buf);
}

CMItemCount CMBufferQueueGetBufferCount(CMBufferQueueRef queue)
{
  return MEMORY[0x270EE7A68](queue);
}

const CMBufferCallbacks *CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS(void)
{
  return (const CMBufferCallbacks *)MEMORY[0x270EE7A70]();
}

Boolean CMBufferQueueIsEmpty(CMBufferQueueRef queue)
{
  return MEMORY[0x270EE7A80](queue);
}

uint64_t CMByteStreamCreateForBlockBuffer()
{
  return MEMORY[0x270EE7A90]();
}

Boolean CMFormatDescriptionEqual(CMFormatDescriptionRef formatDescription, CMFormatDescriptionRef otherFormatDescription)
{
  return MEMORY[0x270EE7AE0](formatDescription, otherFormatDescription);
}

CMMediaType CMFormatDescriptionGetMediaType(CMFormatDescriptionRef desc)
{
  return MEMORY[0x270EE7B20](desc);
}

CFTypeRef CMGetAttachment(CMAttachmentBearerRef target, CFStringRef key, CMAttachmentMode *attachmentModeOut)
{
  return (CFTypeRef)MEMORY[0x270EE7B30](target, key, attachmentModeOut);
}

uint64_t CMPhotoCompressionSessionAddImage()
{
  return MEMORY[0x270F12E48]();
}

uint64_t CMPhotoCompressionSessionCloseContainerAndCopyBacking()
{
  return MEMORY[0x270F12E78]();
}

uint64_t CMPhotoCompressionSessionCreate()
{
  return MEMORY[0x270F12E80]();
}

uint64_t CMPhotoCompressionSessionDiscardCaches()
{
  return MEMORY[0x270F12E88]();
}

uint64_t CMPhotoCompressionSessionInvalidate()
{
  return MEMORY[0x270F12E98]();
}

uint64_t CMPhotoCompressionSessionOpenEmptyContainer()
{
  return MEMORY[0x270F12EA8]();
}

uint64_t CMPhotoCompressionSessionReleaseHardwareResources()
{
  return MEMORY[0x270F12EB8]();
}

void CMRemoveAttachment(CMAttachmentBearerRef target, CFStringRef key)
{
}

OSStatus CMSampleBufferCreateCopyWithNewTiming(CFAllocatorRef allocator, CMSampleBufferRef originalSBuf, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x270EE7BD8](allocator, originalSBuf, numSampleTimingEntries, sampleTimingArray, sampleBufferOut);
}

OSStatus CMSampleBufferCreateForImageBuffer(CFAllocatorRef allocator, CVImageBufferRef imageBuffer, Boolean dataReady, CMSampleBufferMakeDataReadyCallback makeDataReadyCallback, void *makeDataReadyRefcon, CMVideoFormatDescriptionRef formatDescription, const CMSampleTimingInfo *sampleTiming, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x270EE7BE8](allocator, imageBuffer, dataReady, makeDataReadyCallback, makeDataReadyRefcon, formatDescription, sampleTiming, sampleBufferOut);
}

OSStatus CMSampleBufferCreateReadyWithImageBuffer(CFAllocatorRef allocator, CVImageBufferRef imageBuffer, CMVideoFormatDescriptionRef formatDescription, const CMSampleTimingInfo *sampleTiming, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x270EE7BF8](allocator, imageBuffer, formatDescription, sampleTiming, sampleBufferOut);
}

CMTime *__cdecl CMSampleBufferGetDecodeTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x270EE7C20](retstr, sbuf);
}

CMTime *__cdecl CMSampleBufferGetDuration(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x270EE7C28](retstr, sbuf);
}

CMFormatDescriptionRef CMSampleBufferGetFormatDescription(CMSampleBufferRef sbuf)
{
  return (CMFormatDescriptionRef)MEMORY[0x270EE7C30](sbuf);
}

CVImageBufferRef CMSampleBufferGetImageBuffer(CMSampleBufferRef sbuf)
{
  return (CVImageBufferRef)MEMORY[0x270EE7C48](sbuf);
}

CMItemCount CMSampleBufferGetNumSamples(CMSampleBufferRef sbuf)
{
  return MEMORY[0x270EE7C58](sbuf);
}

CMTime *__cdecl CMSampleBufferGetPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x270EE7C78](retstr, sbuf);
}

CFArrayRef CMSampleBufferGetSampleAttachmentsArray(CMSampleBufferRef sbuf, Boolean createIfNecessary)
{
  return (CFArrayRef)MEMORY[0x270EE7C88](sbuf, createIfNecessary);
}

OSStatus CMSampleBufferGetSampleTimingInfoArray(CMSampleBufferRef sbuf, CMItemCount numSampleTimingEntries, CMSampleTimingInfo *timingArrayOut, CMItemCount *timingArrayEntriesNeededOut)
{
  return MEMORY[0x270EE7CA0](sbuf, numSampleTimingEntries, timingArrayOut, timingArrayEntriesNeededOut);
}

size_t CMSampleBufferGetTotalSampleSize(CMSampleBufferRef sbuf)
{
  return MEMORY[0x270EE7CB0](sbuf);
}

void CMSetAttachment(CMAttachmentBearerRef target, CFStringRef key, CFTypeRef value, CMAttachmentMode attachmentMode)
{
}

CMTime *__cdecl CMTimeAbsoluteValue(CMTime *__return_ptr retstr, CMTime *time)
{
  return (CMTime *)MEMORY[0x270EE7D90](retstr, time);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x270EE7D98](retstr, lhs, rhs);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x270EE7DD0](time1, time2);
}

CMTime *__cdecl CMTimeConvertScale(CMTime *__return_ptr retstr, CMTime *time, int32_t newTimescale, CMTimeRoundingMethod method)
{
  return (CMTime *)MEMORY[0x270EE7DD8](retstr, time, *(void *)&newTimescale, *(void *)&method);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x270EE7DE0](time, allocator);
}

CFStringRef CMTimeCopyDescription(CFAllocatorRef allocator, CMTime *time)
{
  return (CFStringRef)MEMORY[0x270EE7DF0](allocator, time);
}

uint64_t CMTimeDivide()
{
  return MEMORY[0x270EE7DF8]();
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  MEMORY[0x270EE7E08](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x270EE7E10](retstr, value, *(void *)&timescale);
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x270EE7E20](retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x270EE7E38](retstr, *(void *)&preferredTimescale, seconds);
}

CMTime *__cdecl CMTimeMaximum(CMTime *__return_ptr retstr, CMTime *time1, CMTime *time2)
{
  return (CMTime *)MEMORY[0x270EE7E50](retstr, time1, time2);
}

CMTime *__cdecl CMTimeMinimum(CMTime *__return_ptr retstr, CMTime *time1, CMTime *time2)
{
  return (CMTime *)MEMORY[0x270EE7E58](retstr, time1, time2);
}

CMTime *__cdecl CMTimeMultiplyByRatio(CMTime *__return_ptr retstr, CMTime *time, int32_t multiplier, int32_t divisor)
{
  return (CMTime *)MEMORY[0x270EE7E70](retstr, time, *(void *)&multiplier, *(void *)&divisor);
}

Boolean CMTimeRangeContainsTime(CMTimeRange *range, CMTime *time)
{
  return MEMORY[0x270EE7E80](range, time);
}

CFStringRef CMTimeRangeCopyDescription(CFAllocatorRef allocator, CMTimeRange *range)
{
  return (CFStringRef)MEMORY[0x270EE7EA0](allocator, range);
}

CMTimeRange *__cdecl CMTimeRangeFromTimeToTime(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *end)
{
  return (CMTimeRange *)MEMORY[0x270EE7EB8](retstr, start, end);
}

CMTime *__cdecl CMTimeRangeGetEnd(CMTime *__return_ptr retstr, CMTimeRange *range)
{
  return (CMTime *)MEMORY[0x270EE7ED0](retstr, range);
}

CMTimeRange *__cdecl CMTimeRangeGetUnion(CMTimeRange *__return_ptr retstr, CMTimeRange *range, CMTimeRange *otherRange)
{
  return (CMTimeRange *)MEMORY[0x270EE7EE8](retstr, range, otherRange);
}

CMTimeRange *__cdecl CMTimeRangeMake(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *duration)
{
  return (CMTimeRange *)MEMORY[0x270EE7EF8](retstr, start, duration);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x270EE7F08](retstr, lhs, rhs);
}

OSStatus CMVideoFormatDescriptionCreateForImageBuffer(CFAllocatorRef allocator, CVImageBufferRef imageBuffer, CMVideoFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x270EE7FB8](allocator, imageBuffer, formatDescriptionOut);
}

CMVideoDimensions CMVideoFormatDescriptionGetDimensions(CMVideoFormatDescriptionRef videoDesc)
{
  return (CMVideoDimensions)MEMORY[0x270EE7FD0](videoDesc);
}

CTFontRef CTFontCreateCopyWithAttributes(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  return (CTFontRef)MEMORY[0x270EE9AB8](font, matrix, attributes, size);
}

CTFontRef CTFontCreateUIFontForLanguage(CTFontUIFontType uiType, CGFloat size, CFStringRef language)
{
  return (CTFontRef)MEMORY[0x270EE9AD8](*(void *)&uiType, language, size);
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  return (CTFontDescriptorRef)MEMORY[0x270EE9B60](attributes);
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x270EE9D70](attrString);
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
}

void CVBufferRelease(CVBufferRef buffer)
{
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA150](allocator, width, height, *(void *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA170](allocator, surface, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x270EEA190](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x270EEA1A0](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1B0](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA1C8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1E8](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA1F8](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x270EEA200](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA218](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA220](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA240](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA250](pixelBuffer, planeIndex);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA258](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x270EEA260](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x270EEA320](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x270EEA330](pixelBuffer, unlockFlags);
}

uint64_t CacheDeleteCopyAvailableSpaceForVolume()
{
  return MEMORY[0x270F13080]();
}

uint64_t FigCFNumberCreateFloat64()
{
  return MEMORY[0x270EE80D8]();
}

uint64_t FigCFNumberCreateSInt32()
{
  return MEMORY[0x270EE80E0]();
}

uint64_t FigFormatReaderCreateForStreamReturningResults()
{
  return MEMORY[0x270EF5D20]();
}

uint64_t FigFormatReaderGetFigBaseObject()
{
  return MEMORY[0x270EF5D28]();
}

uint64_t FigTrackReaderGetFigBaseObject()
{
  return MEMORY[0x270EF5D80]();
}

uint64_t HMFBooleanToString()
{
  return MEMORY[0x270F30818]();
}

uint64_t HMFCreateOSLogHandle()
{
  return MEMORY[0x270F30820]();
}

uint64_t HMFEqualObjects()
{
  return MEMORY[0x270F30850]();
}

uint64_t HMFGetLogIdentifier()
{
  return MEMORY[0x270F30858]();
}

uint64_t HMFGetOSLogHandle()
{
  return MEMORY[0x270F30860]();
}

uint64_t HMFGetOsLogHandle()
{
  return MEMORY[0x270F30868]();
}

uint64_t HMFProductClassToString()
{
  return MEMORY[0x270F30898]();
}

uint64_t HMStringFromCameraClipQuality()
{
  return MEMORY[0x270EF3D68]();
}

uint64_t HMStringFromCameraSignificantEventConfidenceLevel()
{
  return MEMORY[0x270EF3D70]();
}

uint64_t HMStringFromCameraSignificantEventReason()
{
  return MEMORY[0x270EF3D78]();
}

uint64_t IOHIDEventGetFloatValue()
{
  return MEMORY[0x270EF4340]();
}

CFArrayRef IOHIDEventSystemClientCopyServices(IOHIDEventSystemClientRef client)
{
  return (CFArrayRef)MEMORY[0x270EF4418](client);
}

uint64_t IOHIDEventSystemClientCreate()
{
  return MEMORY[0x270EF4420]();
}

uint64_t IOHIDEventSystemClientSetMatching()
{
  return MEMORY[0x270EF4490]();
}

uint64_t IOHIDServiceClientCopyEvent()
{
  return MEMORY[0x270EF4650]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x270F95F98]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x270EF2A50](aClassName);
}

uint64_t NSLocalizedFileSizeDescription()
{
  return MEMORY[0x270EF2B10]();
}

void NSLog(NSString *format, ...)
{
}

uint64_t NSPrintF()
{
  return MEMORY[0x270F244C8]();
}

uint64_t NSRandomData()
{
  return MEMORY[0x270F244E8]();
}

NSRange NSRangeFromString(NSString *aString)
{
  NSUInteger v1 = MEMORY[0x270EF2BA8](aString);
  result.length = v2;
  result.location = v1;
  return result;
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x270EF2BE8](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x270EF2C28](range.location, range.length);
}

NSString *__cdecl NSStringFromRect(NSRect aRect)
{
  return (NSString *)MEMORY[0x270EF2C30]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x270EF2C38](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

int32_t NSVersionOfRunTimeLibrary(const char *libraryName)
{
  return MEMORY[0x270ED7C70](libraryName);
}

uint64_t SecPolicyCreateAppleSSLPinned()
{
  return MEMORY[0x270EFDB40]();
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return MEMORY[0x270EFDD60](trust, error);
}

OSStatus SecTrustSetPolicies(SecTrustRef trust, CFTypeRef policies)
{
  return MEMORY[0x270EFDDE0](trust, policies);
}

OSStatus VTCompressionSessionCompleteFrames(VTCompressionSessionRef session, CMTime *completeUntilPresentationTimeStamp)
{
  return MEMORY[0x270F06628](session, completeUntilPresentationTimeStamp);
}

OSStatus VTCompressionSessionCreate(CFAllocatorRef allocator, int32_t width, int32_t height, CMVideoCodecType codecType, CFDictionaryRef encoderSpecification, CFDictionaryRef sourceImageBufferAttributes, CFAllocatorRef compressedDataAllocator, VTCompressionOutputCallback outputCallback, void *outputCallbackRefCon, VTCompressionSessionRef *compressionSessionOut)
{
  return MEMORY[0x270F06630](allocator, *(void *)&width, *(void *)&height, *(void *)&codecType, encoderSpecification, sourceImageBufferAttributes, compressedDataAllocator, outputCallback);
}

OSStatus VTCompressionSessionEncodeFrameWithOutputHandler(VTCompressionSessionRef session, CVImageBufferRef imageBuffer, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, VTEncodeInfoFlags *infoFlagsOut, VTCompressionOutputHandler outputHandler)
{
  return MEMORY[0x270F06648](session, imageBuffer, presentationTimeStamp, duration, frameProperties, infoFlagsOut, outputHandler);
}

void VTCompressionSessionInvalidate(VTCompressionSessionRef session)
{
}

OSStatus VTCompressionSessionPrepareToEncodeFrames(VTCompressionSessionRef session)
{
  return MEMORY[0x270F06668](session);
}

Boolean VTDecompressionSessionCanAcceptFormatDescription(VTDecompressionSessionRef session, CMFormatDescriptionRef newFormatDesc)
{
  return MEMORY[0x270F066D0](session, newFormatDesc);
}

OSStatus VTDecompressionSessionCreate(CFAllocatorRef allocator, CMVideoFormatDescriptionRef videoFormatDescription, CFDictionaryRef videoDecoderSpecification, CFDictionaryRef destinationImageBufferAttributes, const VTDecompressionOutputCallbackRecord *outputCallback, VTDecompressionSessionRef *decompressionSessionOut)
{
  return MEMORY[0x270F066D8](allocator, videoFormatDescription, videoDecoderSpecification, destinationImageBufferAttributes, outputCallback, decompressionSessionOut);
}

OSStatus VTDecompressionSessionDecodeFrame(VTDecompressionSessionRef session, CMSampleBufferRef sampleBuffer, VTDecodeFrameFlags decodeFlags, void *sourceFrameRefCon, VTDecodeInfoFlags *infoFlagsOut)
{
  return MEMORY[0x270F066E0](session, sampleBuffer, *(void *)&decodeFlags, sourceFrameRefCon, infoFlagsOut);
}

void VTDecompressionSessionInvalidate(VTDecompressionSessionRef session)
{
}

OSStatus VTDecompressionSessionWaitForAsynchronousFrames(VTDecompressionSessionRef session)
{
  return MEMORY[0x270F06708](session);
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x270F067E0](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x270F067F0](session, sourceBuffer, destinationBuffer);
}

OSStatus VTSessionCopyProperty(VTSessionRef session, CFStringRef propertyKey, CFAllocatorRef allocator, void *propertyValueOut)
{
  return MEMORY[0x270F06810](session, propertyKey, allocator, propertyValueOut);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x270F06820](session, propertyKey, propertyValue);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _HMFPreconditionFailure()
{
  return MEMORY[0x270F30900]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

void std::string::~string(std::string *this)
{
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987C0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void __cxa_bad_cast(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x270F76310]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x270ED8458]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x270ED85E0]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x270ED85F8](*(void *)&__upper_bound);
}

void bzero(void *a1, size_t a2)
{
}

void cblas_sgemv(const CBLAS_ORDER __Order, const CBLAS_TRANSPOSE __TransA, const int __M, const int __N, const float __alpha, const float *__A, const int __lda, const float *__X, const int __incX, const float __beta, float *__Y, const int __incY)
{
}

void dispatch_apply_f(size_t iterations, dispatch_queue_t queue, void *context, void (__cdecl *work)(void *, size_t))
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x270ED9278](flags, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x270ED92B0](block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x270ED9378](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9448](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9458](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x270ED9620]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x270ED9A20](a1, a2);
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

kern_return_t host_page_size(host_t a1, vm_size_t *a2)
{
  return MEMORY[0x270ED9E20](*(void *)&a1, a2);
}

kern_return_t host_statistics(host_t host_priv, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x270ED9E40](*(void *)&host_priv, *(void *)&flavor, host_info_out, host_info_outCnt);
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x270ED9E58](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  MEMORY[0x270ED9E60](a1, a2);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x270EDA178]();
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x270EDA1C8](*(void *)&task, *(void *)&name);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x270EDA5A8](__y, __x);
  return result;
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x270EDA738](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x270EDA748](*(void *)&token, state64);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x270EDA768](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x270EDA770](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x270F9A598](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x270F9A658](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9AA38](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x270EDAA58](log);
}

uint64_t os_unfair_lock_lock_with_options()
{
  return MEMORY[0x270EDAAD0]();
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

int proc_listallpids(void *buffer, int buffersize)
{
  return MEMORY[0x270EDAD48](buffer, *(void *)&buffersize);
}

int proc_pid_rusage(int pid, int flavor, rusage_info_t *buffer)
{
  return MEMORY[0x270EDAD68](*(void *)&pid, *(void *)&flavor, buffer);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x270EDAD78](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

int rand(void)
{
  return MEMORY[0x270EDB0D8]();
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB530](a1, a2);
}

void srand(unsigned int a1)
{
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x270EDB5C0](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB6A0](__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6D8](__str, __endptr, *(void *)&__base);
}

kern_return_t task_generate_corpse(task_read_t task, mach_port_t *corpse_task_port)
{
  return MEMORY[0x270EDB848](*(void *)&task, corpse_task_port);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x270EDB868](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

void vDSP_distancesq(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
}

void vDSP_meanv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_svesq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfill(const float *__A, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfixru8(const float *__A, vDSP_Stride __IA, unsigned __int8 *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfltu8(const unsigned __int8 *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vma(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vsmsma(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, vDSP_Stride __IC, const float *__D, float *__E, vDSP_Stride __IE, vDSP_Length __N)
{
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsort(float *__C, vDSP_Length __N, int __Order)
{
}

void vDSP_vsq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vthr(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

vImage_Error vImageAffineWarpCG_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, const vImage_CGAffineTransform *transform, const Pixel_8888 backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDEEE0](src, dest, tempBuffer, transform, backColor, *(void *)&flags);
}

vImage_Error vImageConvert_RGBA8888toRGB888(const vImage_Buffer *a1, const vImage_Buffer *a2, vImage_Flags a3)
{
  return MEMORY[0x270EDF128](a1, a2, *(void *)&a3);
}

vImage_Error vImageCopyBuffer(const vImage_Buffer *src, const vImage_Buffer *dest, size_t pixelSize, vImage_Flags flags)
{
  return MEMORY[0x270EDF1A0](src, dest, pixelSize, *(void *)&flags);
}

vImage_Error vImageTentConvolve_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, uint32_t kernel_height, uint32_t kernel_width, const Pixel_8888 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF3B8](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, *(void *)&kernel_height, *(void *)&kernel_width, backgroundColor);
}

void vvsqrtf(float *a1, const float *a2, const int *a3)
{
}