void sub_223E02ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void tc_sarray_dict_keys(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sarray::dict_keys((turi::gl_sarray *)(a1 + 8), (uint64_t)v4);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a2);
}

void sub_223E02FDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E02FC0);
}

void sub_223E0306C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_dict_has_any_keys(turi *a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      turi::gl_sarray::dict_has_any_keys((uint64_t)a1 + 8, (uint64_t)v6);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"flex_list\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
  set_error(a3);
}

void sub_223E031A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E0318CLL);
}

void sub_223E03244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_dict_has_all_keys(turi *a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      turi::gl_sarray::dict_has_all_keys((uint64_t)a1 + 8, (uint64_t)v6);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"flex_list\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
  set_error(a3);
}

void sub_223E03380(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E03364);
}

void sub_223E0341C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_sample(uint64_t a1, unint64_t a2, double a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sarray::sample((turi::gl_sarray *)(a1 + 8), a3, (uint64_t)v7);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a4);
}

void sub_223E03548(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E03528);
}

void sub_223E035D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_datetime_to_str_with_format(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    turi::gl_sarray::datetime_to_str((uint64_t)a1 + 8, (uint64_t)__p, (uint64_t)v7);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v8, "\"sarray\" is null.");
  set_error(a3);
}

void sub_223E0370C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E036F0);
}

void sub_223E037B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sarray_datetime_to_str(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "%Y-%m-%dT%H:%M:%S%ZP");
    turi::gl_sarray::datetime_to_str((uint64_t)a1 + 8, (uint64_t)__p, (uint64_t)v5);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v6, "\"sarray\" is null.");
  set_error(a2);
}

void sub_223E038E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E038CCLL);
}

void sub_223E03990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sarray_str_to_datetime(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    turi::gl_sarray::str_to_datetime((uint64_t)a1 + 8, (uint64_t)__p, (uint64_t)v7);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v8, "\"sarray\" is null.");
  set_error(a3);
}

void sub_223E03AC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E03AA8);
}

void sub_223E03B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sarray_clip(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v11[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a2)
  {
    if (a3)
    {
      if (a1)
      {
        memset(v11, 0, 13);
        if ((atomic_ullong **)(a2 + 8) != v11)
        {
          *(atomic_ullong **)((char *)v11 + 5) = *(atomic_ullong **)(a2 + 13);
          v11[0] = *(atomic_ullong **)(a2 + 8);
          BYTE4(v11[1]) = *(unsigned char *)(a2 + 20);
          if (BYTE4(v11[1]) <= 9u && ((1 << SBYTE4(v11[1])) & 0x33C) != 0) {
            atomic_fetch_add(v11[0], 1uLL);
          }
        }
        memset(v10, 0, 13);
        if ((atomic_ullong **)(a3 + 8) != v10)
        {
          *(atomic_ullong **)((char *)v10 + 5) = *(atomic_ullong **)(a3 + 13);
          v10[0] = *(atomic_ullong **)(a3 + 8);
          BYTE4(v10[1]) = *(unsigned char *)(a3 + 20);
          if (BYTE4(v10[1]) <= 9u && ((1 << SBYTE4(v10[1])) & 0x33C) != 0) {
            atomic_fetch_add(v10[0], 1uLL);
          }
        }
        turi::gl_sarray::clip((uint64_t)a1 + 8, (unsigned __int8 *)v11, (unsigned __int8 *)v10, (uint64_t)v8);
        operator new();
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
      set_error(a4);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"flexible_type\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"flexible_type\" is null.");
  set_error(a4);
}

void sub_223E040EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(a1);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E03DF0);
  }
  _Unwind_Resume(a1);
}

void tc_sarray_drop_na(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sarray::dropna((turi::gl_sarray *)(a1 + 8), (uint64_t)v4);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a2);
}

void sub_223E04690(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E04674);
}

void sub_223E04720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_to_type(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    turi::gl_sarray::astype((uint64_t)a1 + 8, (uint64_t)v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a4);
}

void sub_223E04840(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E04824);
}

void sub_223E048D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_replace_na(turi *a1, uint64_t a2, uint64_t *a3)
{
  v8[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    memset(v8, 0, 13);
    if ((atomic_ullong **)(a2 + 8) != v8)
    {
      *(atomic_ullong **)((char *)v8 + 5) = *(atomic_ullong **)(a2 + 13);
      v8[0] = *(atomic_ullong **)(a2 + 8);
      BYTE4(v8[1]) = *(unsigned char *)(a2 + 20);
      if (BYTE4(v8[1]) <= 9u && ((1 << SBYTE4(v8[1])) & 0x33C) != 0) {
        atomic_fetch_add(v8[0], 1uLL);
      }
    }
    turi::gl_sarray::fillna((uint64_t)a1 + 8, (uint64_t)v8, (uint64_t)v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a3);
}

void sub_223E04C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E04AA8);
  }
  _Unwind_Resume(exception_object);
}

void tc_sarray_topk_index(uint64_t a1, unint64_t a2, BOOL a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sarray::topk_index((turi::gl_sarray *)(a1 + 8), (uint64_t)v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a4);
}

void sub_223E04FF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E04FD8);
}

void sub_223E05084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_append(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    if (a2)
    {
      turi::gl_sarray::append((turi::gl_sarray *)(a1 + 8), (const turi::gl_sarray *)(a2 + 8), (uint64_t)v6);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
  set_error(a3);
}

void sub_223E051C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E051A4);
}

void sub_223E0525C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_unique(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1) {
    turi::gl_sarray::unique((turi::gl_sarray *)(a1 + 8));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a2);
}

void sub_223E0536C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E05350);
}

void sub_223E053FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t tc_sarray_is_materialized(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2);
  }
  return turi::gl_sarray::is_materialized((turi::gl_sarray *)(a1 + 8));
}

void sub_223E05494(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E05480);
}

void sub_223E054E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_sarray_size_is_known(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
    set_error(a2);
  }
  turi::gl_sarray::get_proxy((uint64_t)a1 + 8, &__p);
  uint64_t v4 = (*(uint64_t (**)(void *))(*(void *)__p + 104))(__p);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v4;
}

void sub_223E055B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E055A0);
}

void sub_223E0561C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sarray_sum(uint64_t a1, uint64_t *a2)
{
  __p[5] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sarray::sum((turi::gl_sarray *)(a1 + 8));
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
  set_error(a2);
}

void sub_223E05728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, char a19)
{
  if (a2)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E056F4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_sarray_equals(turi *a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
    set_error(a3);
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
    set_error(a3);
  }
  turi::gl_sarray::operator==((uint64_t)a1 + 8, a2 + 8, (uint64_t)__p);
  uint64_t v6 = turi::gl_sarray::all((turi::gl_sarray *)__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)__p);
  return v6;
}

void sub_223E059A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E05988);
}

void sub_223E05A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sarray_text_summary(uint64_t a1, uint64_t *a2)
{
  v4[35] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
    turi::operator<<(v4, (turi::gl_sarray *)(a1 + 8));
    std::stringbuf::str();
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(v4, "\"sarray\" is null.");
  set_error(a2);
}

void sub_223E05C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E05C04);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](a1 + 112);
  return a1;
}

void tc_sarray_apply(turi *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  __p[9] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      if (!a3)
      {
        if (a4)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "\"Context release function passed in is null.\" is null.");
          set_error(a7);
        }
      }
      std::shared_ptr<void>::shared_ptr[abi:ne180100]<void,void (*)(void *),void>(&v12, a4);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Callback function passed in is null.\" is null.");
    set_error(a7);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"SArray passed in is null.\" is null.");
  set_error(a7);
}

void sub_223E06008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2)
  {
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a10);
    std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](&a25);
    if (a16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a16);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E05EDCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_sarray_reduce(uint64_t a1, char *__s, uint64_t *a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_sarray\" is null.");
    set_error(a3);
  }
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "min");
    int v28 = 0;
    std::string::basic_string[abi:ne180100]<0>(v29, "max");
    int v30 = 1;
    std::string::basic_string[abi:ne180100]<0>(v31, "sum");
    int v32 = 2;
    std::string::basic_string[abi:ne180100]<0>(v33, "mean");
    int v34 = 3;
    std::string::basic_string[abi:ne180100]<0>(v35, "std");
    int v36 = 4;
    std::map<std::string,tc_sarray_reduce::reduce_op>::map[abi:ne180100]((uint64_t *)__p, 5);
    for (uint64_t i = 0; i != -20; i -= 4)
    {
      if (SHIBYTE(v35[i + 2]) < 0) {
        operator delete((void *)v35[i]);
      }
    }
    __cxa_atexit((void (*)(void *))std::map<std::string,tc_sarray_reduce::reduce_op>::~map[abi:ne180100], &tc_sarray_reduce::_op_map, &dword_223D44000);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t v6 = qword_2680810A8;
  if (!qword_2680810A8) {
    goto LABEL_12;
  }
  v7 = &qword_2680810A8;
  do
  {
    BOOL v8 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_2680810B0, (const void **)(v6 + 32), (const void **)__p);
    v9 = (uint64_t *)(v6 + 8);
    if (!v8)
    {
      v9 = (uint64_t *)v6;
      v7 = (uint64_t *)v6;
    }
    uint64_t v6 = *v9;
  }
  while (*v9);
  if (v7 == &qword_2680810A8
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_2680810B0, (const void **)__p, (const void **)v7 + 4))
  {
LABEL_12:
    v7 = &qword_2680810A8;
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (v7 == &qword_2680810A8)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reduction operator ", 19);
    size_t v13 = strlen(__s);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)__s, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" not recognized. ", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Available operators are ", 24);
    uint64_t v16 = tc_sarray_reduce::_op_map;
    if ((uint64_t *)tc_sarray_reduce::_op_map != &qword_2680810A8)
    {
      do
      {
        int v17 = *(char *)(v16 + 55);
        if (v17 >= 0) {
          uint64_t v18 = v16 + 32;
        }
        else {
          uint64_t v18 = *(void *)(v16 + 32);
        }
        if (v17 >= 0) {
          uint64_t v19 = *(unsigned __int8 *)(v16 + 55);
        }
        else {
          uint64_t v19 = *(void *)(v16 + 40);
        }
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v18, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" ", 1);
        v21 = *(uint64_t **)(v16 + 8);
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (uint64_t *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = *(uint64_t **)(v16 + 16);
            BOOL v23 = *v22 == v16;
            uint64_t v16 = (uint64_t)v22;
          }
          while (!v23);
        }
        uint64_t v16 = (uint64_t)v22;
      }
      while (v22 != &qword_2680810A8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v25);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
  switch(*((_DWORD *)v7 + 14))
  {
    case 0:
      turi::gl_sarray::min((turi::gl_sarray *)(a1 + 8));
      operator new();
    case 1:
      turi::gl_sarray::max((turi::gl_sarray *)(a1 + 8));
      operator new();
    case 2:
      turi::gl_sarray::sum((turi::gl_sarray *)(a1 + 8));
      operator new();
    case 3:
      turi::gl_sarray::mean((turi::gl_sarray *)(a1 + 8));
      operator new();
    case 4:
      turi::gl_sarray::std((turi::gl_sarray *)(a1 + 8));
      operator new();
    default:
      return 0;
  }
}

void sub_223E06610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, int a11, char a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a2)
  {
    uint64_t v42 = 0;
    while (1)
    {
      if (*(&a41 + v42) < 0) {
        operator delete(*(void **)((char *)&a36 + v42));
      }
      v42 -= 32;
      if (v42 == -160)
      {
        __cxa_begin_catch(exception_object);
        std::current_exception();
        fill_error_from_exception((std::exception_ptr *)&a9);
        std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
        __cxa_end_catch();
        JUMPOUT(0x223E062A4);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,tc_sarray_reduce::reduce_op>::map[abi:ne180100](uint64_t *result, uint64_t a2)
{
  qword_2680810B0 = 0;
  qword_2680810A8 = 0;
  tc_sarray_reduce::_op_map = (uint64_t)&qword_2680810A8;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = &result[4 * a2];
    do
    {
      v5 = &qword_2680810A8;
      uint64_t v4 = qword_2680810A8;
      if ((uint64_t *)tc_sarray_reduce::_op_map == &qword_2680810A8) {
        goto LABEL_10;
      }
      if (qword_2680810A8)
      {
        do
        {
          v5 = (uint64_t *)v4;
          uint64_t v4 = *(void *)(v4 + 8);
        }
        while (v4);
      }
      else
      {
        uint64_t v6 = &qword_2680810A8;
        do
        {
          v5 = (uint64_t *)v6[2];
          BOOL v7 = *v5 == (void)v6;
          uint64_t v6 = v5;
        }
        while (v7);
      }
      result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_2680810B0, (const void **)v5 + 4, (const void **)v2);
      uint64_t v4 = qword_2680810A8;
      if (result)
      {
LABEL_10:
        if (!v4) {
          goto LABEL_22;
        }
        BOOL v8 = v5 + 1;
      }
      else
      {
        if (!qword_2680810A8)
        {
LABEL_22:
          v5 = &qword_2680810A8;
          BOOL v8 = &qword_2680810A8;
LABEL_23:
          v10 = (char *)operator new(0x40uLL);
          v14[0] = (uint64_t)v10;
          v14[1] = (uint64_t)&qword_2680810A8;
          char v15 = 0;
          v11 = (std::string *)(v10 + 32);
          if (*((char *)v2 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)*v2, v2[1]);
            size_t v13 = (uint64_t *)v14[0];
          }
          else
          {
            long long v12 = *(_OWORD *)v2;
            *((void *)v10 + 6) = v2[2];
            *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
            size_t v13 = (uint64_t *)v10;
          }
          *((_DWORD *)v10 + 14) = *((_DWORD *)v2 + 6);
          char v15 = 1;
          *size_t v13 = 0;
          v13[1] = 0;
          v13[2] = (uint64_t)v5;
          uint64_t *v8 = (uint64_t)v13;
          if (*(void *)tc_sarray_reduce::_op_map)
          {
            tc_sarray_reduce::_op_map = *(void *)tc_sarray_reduce::_op_map;
            size_t v13 = (uint64_t *)*v8;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_2680810A8, v13);
          ++qword_2680810B0;
          v14[0] = 0;
          result = std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>>>>::~unique_ptr[abi:ne180100](v14);
          goto LABEL_29;
        }
        BOOL v8 = &qword_2680810A8;
        while (1)
        {
          while (1)
          {
            v5 = (uint64_t *)v4;
            v9 = (const void **)(v4 + 32);
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_2680810B0, (const void **)v2, (const void **)(v4 + 32)))break; {
            uint64_t v4 = *v5;
            }
            BOOL v8 = v5;
            if (!*v5) {
              goto LABEL_23;
            }
          }
          result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_2680810B0, v9, (const void **)v2);
          if (!result) {
            break;
          }
          BOOL v8 = v5 + 1;
          uint64_t v4 = v5[1];
          if (!v4) {
            goto LABEL_23;
          }
        }
      }
      if (!*v8) {
        goto LABEL_23;
      }
LABEL_29:
      v2 += 4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_223E06D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  std::__tree<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::destroy((char *)qword_2680810A8);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,tc_sarray_reduce::reduce_op>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void tc_sarray_hash(turi *a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    turi::gl_sarray::get_proxy((uint64_t)a1 + 8, &v5);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 352))(&v6);
    turi::gl_sarray::gl_sarray(v7, &v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v8, "\"tc_sarray\" is null.");
  set_error(a3);
}

void sub_223E06F04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (*(char *)(v15 - 49) < 0) {
    operator delete(*(void **)(v15 - 72));
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E06EE8);
}

void sub_223E06FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_slice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[3] = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  v10[0] = a2;
  v10[1] = a3;
  v10[2] = a4;
  v8[0] = v10;
  v8[1] = 3;
  turi::gl_sarray::operator[]((turi::gl_sarray *)(a1 + 8), (uint64_t)v8, (uint64_t)v9);
  operator new();
}

void sub_223E070F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E070B8);
  }
  _Unwind_Resume(a1);
}

void tc_sarray_subslice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  int v16 = 0;
  char v17 = 0;
  uint64_t v15 = a2;
  int v13 = 0;
  char v14 = 0;
  uint64_t v12 = a3;
  int v10 = 0;
  char v11 = 0;
  uint64_t v9 = a4;
  turi::gl_sarray::subslice((turi::gl_sarray *)(a1 + 8), (uint64_t)&v15, (uint64_t)&v12, (uint64_t)&v9, (uint64_t)v8);
  operator new();
}

void sub_223E07830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E077F8);
  }
  _Unwind_Resume(exception_object);
}

void tc_sarray_to_const(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      turi::gl_sarray::get_proxy((uint64_t)a1 + 8, &v7);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 576))(&v8);
      turi::gl_sarray::gl_sarray(v9, &v8);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(v10, "\"tc_flexible_type\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "\"tc_sarray\" is null.");
  set_error(a4);
}

void sub_223E08014(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (*(char *)(v15 - 49) < 0) {
    operator delete(*(void **)(v15 - 72));
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E07FF8);
}

void sub_223E080D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_which(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        turi::gl_sarray::get_proxy((uint64_t)a1 + 8, &v13);
        uint64_t v8 = v13;
        turi::gl_sarray::get_proxy(a2 + 8, &v11);
        long long v12 = v11;
        long long v11 = 0uLL;
        turi::gl_sarray::get_proxy(a3 + 8, &v9);
        long long v10 = v9;
        long long v9 = 0uLL;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, long long *, long long *))(*(void *)v8 + 568))(&v14, v8, &v12, &v10);
        turi::gl_sarray::gl_sarray(v15, &v14);
        operator new();
      }
      std::string::basic_string[abi:ne180100]<0>(v16, "\"tc_sarray\" is null.");
      set_error(a4);
    }
    std::string::basic_string[abi:ne180100]<0>(v16, "\"tc_sarray\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "\"tc_sarray\" is null.");
  set_error(a4);
}

void sub_223E082FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (*(char *)(v23 - 49) < 0) {
    operator delete(*(void **)(v23 - 72));
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E082E0);
}

void sub_223E08408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sarray_sort(uint64_t a1, int a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sarray::sort((turi::gl_sarray *)(a1 + 8), a2, (uint64_t)v6);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_sarray\" is null.");
  set_error(a3);
}

void sub_223E08520(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E08504);
}

void sub_223E085B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_create_empty(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223E08648(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  MEMORY[0x22A614FA0](v10, 0xA0C404900C826);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E08630);
}

void sub_223E0869C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_create_copy(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223E08780(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_223E08810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_load(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223E08910(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  a17 = &unk_26D759E10;
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E088F8);
}

void sub_223E089B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_save(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "\"tc_sframe\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, __s);
  std::string::basic_string[abi:ne180100]<0>(__p, "binary");
  turi::gl_sframe::save((uint64_t)a1 + 8, (uint64_t)v8, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_223E08A84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E08A70);
}

void sub_223E08AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_add_column(turi *a1, char *__s, uint64_t a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_sframe\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  turi::gl_sframe::add_column((uint64_t)a1 + 8, a3 + 8, (uint64_t)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E08BA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E08B94);
}

void sub_223E08BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_remove_column(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_sframe\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  turi::gl_sframe::remove_column((uint64_t)a1 + 8, (unsigned __int8 **)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E08CAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E08C98);
}

void sub_223E08D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_extract_column_by_name(turi *a1, char *__s)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  turi::gl_sframe::select_column((uint64_t)a1 + 8, (uint64_t)v5);
  operator new();
}

void sub_223E08DFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void sub_223E08E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_text_summary(uint64_t a1, uint64_t *a2)
{
  v4[35] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
    turi::operator<<(v4, (turi::gl_sframe *)(a1 + 8));
    std::stringbuf::str();
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(v4, "SFrame passed in to summarize is null.");
  set_error(a2);
}

void sub_223E090C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E09084);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_sframe_num_rows(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "SFrame passed in to num_rows is null.");
    set_error(a2);
  }
  return turi::gl_sframe::size((turi::gl_sframe *)(a1 + 8));
}

void sub_223E091FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E091E8);
}

void sub_223E09248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_sframe_num_columns(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "SFrame passed in to num_columns is null.");
    set_error(a2);
  }
  return turi::gl_sframe::num_columns((turi::gl_sframe *)(a1 + 8));
}

void sub_223E092E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E092CCLL);
}

void sub_223E0932C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_column_names(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sframe::column_names((turi::gl_sframe *)(a1 + 8));
    uint64_t v5 = 0;
    long long v4 = 0uLL;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>>(&v4, v6, v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3));
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v8, "SFrame passed in to summarize is null.");
  set_error(a2);
}

void sub_223E09490(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception_ptr a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (*(char *)(v16 - 41) < 0) {
    operator delete(*(void **)(v16 - 64));
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a12);
  std::exception_ptr::~exception_ptr(&a12);
  __cxa_end_catch();
  JUMPOUT(0x223E09474);
}

void sub_223E09510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception_ptr a12)
{
}

void tc_sframe_join_on_multiple_columns(turi *a1, uint64_t a2, uint64_t a3, char *__s, uint64_t *a5)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      uint64_t v10 = *(unsigned char **)(a3 + 8);
      long long v11 = *(unsigned char **)(a3 + 16);
      if (v10 != v11)
      {
        long long v12 = 0;
        do
        {
          if (v10[12] != 2)
          {
            std::string::basic_string[abi:ne180100]<0>(v21, "Contains a non-string column name.");
            set_error(a5);
          }
          uint64_t v13 = *(void *)v10;
          uint64_t v14 = (long long *)(*(void *)v10 + 8);
          if ((unint64_t)v12 >= v20)
          {
            long long v12 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v18, v14);
          }
          else
          {
            if (*(char *)(v13 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(v13 + 8), *(void *)(v13 + 16));
            }
            else
            {
              long long v15 = *v14;
              v12->__r_.__value_.__r.__words[2] = *(void *)(*(void *)v10 + 24);
              *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v15;
            }
            ++v12;
          }
          uint64_t v19 = v12;
          v10 += 16;
        }
        while (v10 != v11);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      turi::gl_sframe::join((uint64_t)a1 + 8, a2 + 8, &v18, (uint64_t)__p, &v17);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(v21, "\"right tc_sframe\" is null.");
    set_error(a5);
  }
  std::string::basic_string[abi:ne180100]<0>(v21, "\"left tc_sframe\" is null.");
  set_error(a5);
}

void sub_223E09794(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  a17 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E0972CLL);
}

void sub_223E098C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_join_on_single_column(turi *a1, uint64_t a2, uint64_t a3, uint64_t a4, turi *a5)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4) {
          tc_flex_list_create(a5);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "\"how\" is null.");
        set_error((uint64_t *)a5);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "\"column\" is null.");
      set_error((uint64_t *)a5);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"right tc_sframe\" is null.");
    set_error((uint64_t *)a5);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"left tc_sframe\" is null.");
  set_error((uint64_t *)a5);
}

void sub_223E09A90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_223E09B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_read_csv(turi *a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223E0D540(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a57 < 0) {
    operator delete(__p);
  }
  if (a44 < 0)
  {
    operator delete(a39);
    if ((v58 & 1) == 0)
    {
LABEL_9:
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a30, (char *)a31);
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a33, (char *)a34);
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a36, (void *)a37);
      __cxa_begin_catch(a1);
      std::current_exception();
      fill_error_from_exception(&a20);
      std::exception_ptr::~exception_ptr(&a20);
      __cxa_end_catch();
      JUMPOUT(0x223E0D158);
    }
  }
  else if (!v58)
  {
    goto LABEL_9;
  }
  __cxa_free_exception(v57);
  goto LABEL_9;
}

void sub_223E0E50C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_223E0E530(_Unwind_Exception *a1)
{
}

uint64_t turi::flex_type_enum_from_name(uint64_t *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(v4, "integer");
    char v5 = 0;
    std::string::basic_string[abi:ne180100]<0>(v6, "datetime");
    char v7 = 6;
    std::string::basic_string[abi:ne180100]<0>(v8, "float");
    char v9 = 1;
    std::string::basic_string[abi:ne180100]<0>(v10, "string");
    char v11 = 2;
    std::string::basic_string[abi:ne180100]<0>(v12, "array");
    char v13 = 3;
    std::string::basic_string[abi:ne180100]<0>(v14, "ndarray");
    char v15 = 9;
    std::string::basic_string[abi:ne180100]<0>(v16, "list");
    char v17 = 4;
    std::string::basic_string[abi:ne180100]<0>(v18, "dictionary");
    char v19 = 5;
    std::string::basic_string[abi:ne180100]<0>(v20, "image");
    char v21 = 8;
    std::string::basic_string[abi:ne180100]<0>(v22, "undefined");
    char v23 = 7;
    std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::flex_type_enum_from_name(std::string const&)::type_map, (const void **)v4, 10);
    uint64_t v3 = 40;
    do
    {
      if (*((char *)&v4[v3 - 1] - 1) < 0) {
        operator delete(v4[v3 - 4]);
      }
      v3 -= 4;
    }
    while (v3 * 8);
    __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::flex_type_enum_from_name(std::string const&)::type_map, &dword_223D44000);
  }
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&turi::flex_type_enum_from_name(std::string const&)::type_map, (const void **)a1))
  {
    v4[0] = a1;
    turi::flex_type_enum_from_name(std::string const&)::{lambda(void)#1}::operator()(v4);
  }
  return *(char *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&turi::flex_type_enum_from_name(std::string const&)::type_map, (const void **)a1);
}

void sub_223E0E790(_Unwind_Exception *a1)
{
  uint64_t v3 = 320;
  while (1)
  {
    if (*(char *)(v1 + v3 - 9) < 0) {
      operator delete(*(void **)(v1 + v3 - 32));
    }
    v3 -= 32;
    if (!v3)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *turi::operator<<<std::string,turi::flex_type_enum>(void *a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  uint64_t v6 = (void *)*a2;
  long long v4 = a2 + 1;
  char v5 = v6;
  if (v6 != v4)
  {
    while (1)
    {
      int v7 = *((char *)v5 + 55);
      uint64_t v8 = v7 >= 0 ? (uint64_t)(v5 + 4) : v5[4];
      uint64_t v9 = v7 >= 0 ? *((unsigned __int8 *)v5 + 55) : v5[5];
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"-->", 3);
      std::ostream::operator<<();
      char v11 = (void *)v5[1];
      long long v12 = v5;
      if (v11)
      {
        do
        {
          char v5 = v11;
          char v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          char v5 = (void *)v12[2];
          BOOL v13 = *v5 == (void)v12;
          long long v12 = v5;
        }
        while (!v13);
      }
      if (v5 == v4) {
        break;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  return a1;
}

uint64_t std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void tc_sframe_read_json_lines(turi *a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223E0ECA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E0EC5CLL);
  }
  _Unwind_Resume(a1);
}

void turi::gl_sarray_reference::~gl_sarray_reference(void **this)
{
  *this = &unk_26D759E80;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)this);
}

{
  uint64_t vars8;

  *this = &unk_26D759E80;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)this);
  JUMPOUT(0x22A614FA0);
}

void tc_sframe_read_json(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v15);
  std::string::basic_string[abi:ne180100]<0>(v11, (char *)a1);
  turi::gl_sarray::read_json((uint64_t)v11, (turi::gl_sarray *)v13);
  std::string::basic_string[abi:ne180100]<0>(&v4, "X1");
  turi::gl_sframe::operator[]((uint64_t)v15, (uint64_t)&v4, (turi::gl_sarray *)v7);
  turi::gl_sarray_reference::operator=((uint64_t)v7, (uint64_t)v13);
  v7[0] = &unk_26D759E80;
  if (v10 < 0) {
    operator delete(__p);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v7);
  if (SHIBYTE(v6) < 0) {
    operator delete(v4);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v13);
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "X1");
  turi::gl_sframe::operator[]((uint64_t)v15, (uint64_t)v13, (turi::gl_sarray *)v7);
  BOOL v2 = turi::gl_sarray::empty((turi::gl_sarray *)v7);
  v7[0] = &unk_26D759E80;
  if (v10 < 0) {
    operator delete(__p);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v7);
  if (v14 < 0)
  {
    operator delete((void *)v13[0]);
    if (v2)
    {
LABEL_13:
      turi::gl_sframe::gl_sframe((turi::gl_sframe *)v13);
      operator new();
    }
  }
  else if (v2)
  {
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "X1");
  std::string::basic_string[abi:ne180100]<0>(v11, "");
  long long v4 = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  memset(v3, 0, sizeof(v3));
  turi::gl_sframe::unpack((uint64_t)v15, v13, (uint64_t)v11, (uint64_t)&v4, v3, (turi::gl_sframe *)v7);
  turi::gl_sframe::operator=((uint64_t)v15, (uint64_t)v7);
  v7[0] = &unk_26D759E10;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v16 = (void **)v3;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v16);
  if (v4)
  {
    char v5 = v4;
    operator delete(v4);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete((void *)v13[0]);
  }
  operator new();
}

void sub_223E0F2E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

void tc_sframe_export(turi *a1, char *__s, char *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, __s);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  turi::gl_sframe::save((uint64_t)a1 + 8, (uint64_t)v8, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_223E0F5C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void sub_223E0F628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_head(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sframe::head((turi::gl_sframe *)(a1 + 8), &v5);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
  set_error(a3);
}

void sub_223E0F784(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E0F768);
}

void sub_223E0F85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_tail(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sframe::tail((turi::gl_sframe *)(a1 + 8), &v5);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
  set_error(a3);
}

void sub_223E0F9B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E0F99CLL);
}

void sub_223E0FA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

char *tc_sframe_column_name(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a3);
  }
  result = (char *)turi::gl_sframe::column_name((turi::gl_sframe *)(a1 + 8), a2);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

void sub_223E0FB48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E0FB30);
}

void sub_223E0FB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_sframe_column_type(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "\"sframe\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, __s);
  turi::gl_sframe::operator[]((uint64_t)a1 + 8, (uint64_t)v8, (turi::gl_sarray *)v10);
  int v6 = turi::gl_sarray::dtype((turi::gl_sarray *)v10);
  v10[0] = &unk_26D759EA8;
  if (v11 < 0) {
    operator delete(v10[6]);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v10);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  return v6;
}

void sub_223E0FCA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E0FC8CLL);
}

void sub_223E0FD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void turi::const_gl_sarray_reference::~const_gl_sarray_reference(void **this)
{
  *this = &unk_26D759EA8;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)this);
}

{
  uint64_t vars8;

  *this = &unk_26D759EA8;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)this);
  JUMPOUT(0x22A614FA0);
}

void tc_sframe_random_split(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sframe::random_split((turi::gl_sframe *)(a1 + 8), a2, (turi::gl_sframe *)__p);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sframe\" is null.");
  set_error(a6);
}

void sub_223E0FFAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E0FF8CLL);
}

void sub_223E10088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void *std::pair<turi::gl_sframe,turi::gl_sframe>::~pair(void *a1)
{
  a1[3] = &unk_26D759E10;
  BOOL v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *a1 = &unk_26D759E10;
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void tc_sframe_append(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    if (a2)
    {
      turi::gl_sframe::append((turi::gl_sframe *)(a1 + 8), (const turi::gl_sframe *)(a2 + 8), &v6);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"bottom sframe\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"top sframe\" is null.");
  set_error(a3);
}

void sub_223E102A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E10290);
}

void sub_223E1038C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t tc_sframe_is_materialized(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a2);
  }
  return turi::gl_sframe::is_materialized((turi::gl_sframe *)(a1 + 8));
}

void sub_223E10424(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E10410);
}

void sub_223E10470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_sframe_size_is_known(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a2);
  }
  return turi::gl_sframe::has_size((turi::gl_sframe *)(a1 + 8));
}

void sub_223E10508(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E104F4);
}

void sub_223E10554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_save_reference(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "\"sframe\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, __s);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::gl_sframe::save((uint64_t)a1 + 8, (uint64_t)v8, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_223E10628(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E10614);
}

void sub_223E10694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_materialize(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a2);
  }
  turi::gl_sframe::materialize((turi::gl_sframe *)(a1 + 8));
}

void sub_223E10728(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E10718);
}

void sub_223E10774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

BOOL tc_sframe_contains_column(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"sframe\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  BOOL v6 = turi::gl_sframe::contains_column((uint64_t)a1 + 8, (unsigned __int8 **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_223E10840(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E10824);
}

void sub_223E10894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_sample(uint64_t a1, unint64_t a2, double a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sframe::sample((turi::gl_sframe *)(a1 + 8), a3, &v7);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
  set_error(a4);
}

void sub_223E10A04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E109E4);
}

void sub_223E10ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_replace_add_column(turi *a1, char *__s, uint64_t a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"sframe\" is null.");
    set_error(a4);
  }
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  turi::gl_sframe::replace_add_column((uint64_t)a1 + 8, a3 + 8, (const void **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E10BB8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E10BA4);
}

void sub_223E10C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_add_constant_column(turi *a1, char *__s, uint64_t a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"sframe\" is null.");
    set_error(a4);
  }
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_flexible_type\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  turi::gl_sframe::add_column((uint64_t)a1 + 8, (turi::gl_sarray *)(a3 + 8), (uint64_t)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E10CF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E10CDCLL);
}

void sub_223E10D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_add_columns(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"sframe\" is null.");
    set_error(a3);
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"sframe\" is null.");
    set_error(a3);
  }
  turi::gl_sframe::add_columns((turi::gl_sframe *)(a1 + 8), (const turi::gl_sframe *)(a2 + 8));
}

void sub_223E10E14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E10E00);
}

void sub_223E10E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_topk(turi *a1, char *__s, uint64_t a3, int a4, uint64_t *a5)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    turi::gl_sframe::topk((uint64_t)a1 + 8, (uint64_t)__p, a4, &v10);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "\"sframe\" is null.");
  set_error(a5);
}

void sub_223E10FF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E10FD8);
}

void sub_223E110E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_swap_columns(turi *a1, char *__s, char *a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "\"sframe\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, __s);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  turi::gl_sframe::swap_columns((uint64_t)a1 + 8, (unsigned __int8 **)v10, (unsigned __int8 **)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_223E111B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E111A4);
}

void sub_223E11224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_rename_column(turi *a1, char *__s, char *a3, uint64_t *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "\"sframe\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, __s);
  std::string::basic_string[abi:ne180100]<0>(v8, a3);
  *(_OWORD *)BOOL v13 = v10;
  uint64_t v14 = v11;
  uint64_t v11 = 0;
  *(_OWORD *)__p = *(_OWORD *)v8;
  uint64_t v16 = v9;
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v9 = 0;
  long long v10 = 0uLL;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v12, (const void **)v13, 1);
  turi::gl_sframe::rename((uint64_t)a1 + 8, v12);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v12, (void *)v12[1]);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
}

void sub_223E11398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2)
  {
    if (a32 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E11368);
  }
  _Unwind_Resume(exception_object);
}

void tc_sframe_rename_columns(turi *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
    set_error(a3);
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_flex_dict\" is null.");
    set_error(a3);
  }
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v11 = (uint64_t *)v12;
  BOOL v6 = *(uint64_t **)(a2 + 8);
  for (uint64_t i = *(uint64_t **)(a2 + 16); v6 != i; v6 += 4)
  {
    std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]((uint64_t)&v13, v6);
    if (v14 != 2)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "entries are not of type str");
      set_error(a3);
    }
    if (v16 != 2)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "entries are not of type str");
      set_error(a3);
    }
    std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&__p, (long long *)(v13 + 8), (long long *)(v15 + 8));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(&v11, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    if (v10 < 0) {
      operator delete(v9);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v13);
  }
  turi::gl_sframe::rename((uint64_t)a1 + 8, &v11);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v11, v12[0]);
}

void sub_223E11658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E11624);
  }
  _Unwind_Resume(exception_object);
}

void tc_sframe_filter_by(turi *a1, uint64_t a2, char *__s, uint64_t a4, uint64_t *a5)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      turi::gl_sframe::filter_by((uint64_t)a1 + 8, (turi::gl_sarray *)(a2 + 8), (uint64_t)__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v10, "\"sarray\" is null.");
    set_error(a5);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "\"sframe\" is null.");
  set_error(a5);
}

void sub_223E118E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E118C8);
}

void sub_223E119DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_pack_columns_vector(turi *a1, uint64_t a2, char *a3, char a4, uint64_t a5, uint64_t *a6)
{
  v19[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      char v12 = *(turi::flexible_type_impl **)(a2 + 8);
      uint64_t v13 = *(turi::flexible_type_impl **)(a2 + 16);
      if (v12 != v13)
      {
        char v14 = *(turi::flexible_type_impl **)(a2 + 8);
        do
        {
          if (*((unsigned char *)v14 + 12) != 2)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "Contains a non-string column.");
            set_error(a6);
          }
          char v14 = (turi::flexible_type_impl *)((char *)v14 + 16);
        }
        while (v14 != v13);
      }
      memset(&v17, 0, sizeof(v17));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(&v17, v12, v13, (v13 - v12) >> 4);
      std::string::basic_string[abi:ne180100]<0>(v15, a3);
      memset(v19, 0, 13);
      if ((atomic_ullong **)(a5 + 8) != v19)
      {
        *(atomic_ullong **)((char *)v19 + 5) = *(atomic_ullong **)(a5 + 13);
        v19[0] = *(atomic_ullong **)(a5 + 8);
        BYTE4(v19[1]) = *(unsigned char *)(a5 + 20);
        if (BYTE4(v19[1]) <= 9u && ((1 << SBYTE4(v19[1])) & 0x33C) != 0) {
          atomic_fetch_add(v19[0], 1uLL);
        }
      }
      turi::gl_sframe::pack_columns((uint64_t)a1 + 8, (long long **)&v17, (uint64_t)v15, a4, &v16);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"flex_list\" is null.");
    set_error(a6);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sframe\" is null.");
  set_error(a6);
}

void sub_223E11E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2)
  {
    if (a28 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(a1);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E11CA4);
  }
  _Unwind_Resume(a1);
}

void tc_sframe_pack_columns_string(turi *a1, char *__s, char *a3, char a4, uint64_t a5, uint64_t *a6)
{
  void v16[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, __s);
    std::string::basic_string[abi:ne180100]<0>(v12, a3);
    memset(v16, 0, 13);
    if ((atomic_ullong **)(a5 + 8) != v16)
    {
      *(atomic_ullong **)((char *)v16 + 5) = *(atomic_ullong **)(a5 + 13);
      v16[0] = *(atomic_ullong **)(a5 + 8);
      BYTE4(v16[1]) = *(unsigned char *)(a5 + 20);
      if (BYTE4(v16[1]) <= 9u && ((1 << SBYTE4(v16[1])) & 0x33C) != 0) {
        atomic_fetch_add(v16[0], 1uLL);
      }
    }
    turi::gl_sframe::pack_columns((uint64_t)a1 + 8, v13, (uint64_t)v12, a4, (uint64_t)v16, &v14);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
  set_error(a6);
}

void sub_223E12564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2)
  {
    if (a31 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E123ACLL);
  }
  _Unwind_Resume(exception_object);
}

void tc_sframe_split_datetime(turi *a1, char *a2, char *a3, uint64_t a4, int a5, uint64_t *a6)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    char v12 = *(turi::flexible_type_impl **)(a4 + 8);
    uint64_t v13 = *(turi::flexible_type_impl **)(a4 + 16);
    if (v12 != v13)
    {
      uint64_t v14 = *(turi::flexible_type_impl **)(a4 + 8);
      do
      {
        if (*((unsigned char *)v14 + 12) != 2)
        {
          std::string::basic_string[abi:ne180100]<0>(v19, "Element of limit is not of type str");
          set_error(a6);
        }
        uint64_t v14 = (turi::flexible_type_impl *)((char *)v14 + 16);
      }
      while (v14 != v13);
    }
    memset(&v18, 0, sizeof(v18));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(&v18, v12, v13, (v13 - v12) >> 4);
    std::string::basic_string[abi:ne180100]<0>(&v16, a2);
    std::string::basic_string[abi:ne180100]<0>(__p, a3);
    turi::gl_sframe::split_datetime((uint64_t)a1 + 8, &v16, (uint64_t)__p, (long long **)&v18, a5, (turi::gl_sframe *)&v17);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "\"sframe\" is null.");
  set_error(a6);
}

void sub_223E12AA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (*(char *)(v25 - 49) < 0) {
    operator delete(*(void **)(v25 - 72));
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E12A80);
}

void sub_223E12BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_unpack(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, __s);
    std::string::basic_string[abi:ne180100]<0>(v8, "X");
    memset(__p, 0, sizeof(__p));
    memset(v6, 0, sizeof(v6));
    turi::gl_sframe::unpack((uint64_t)a1 + 8, (const void **)v9, (uint64_t)v8, (uint64_t)__p, v6, (turi::gl_sframe *)&v10);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "\"sframe\" is null.");
  set_error(a3);
}

void sub_223E12DA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E12D88);
}

void sub_223E12EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_unpack_detailed(turi *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    __s = a2;
    uint64_t v27 = a3;
    int v32 = 0;
    v33 = 0;
    int v34 = 0;
    uint64_t v13 = *(char **)(a4 + 8);
    uint64_t v14 = *(char **)(a4 + 16);
    if (v13 != v14)
    {
      uint64_t v15 = 0;
      std::string v16 = 0;
      unint64_t v17 = 0;
      do
      {
        if (v15 >= v16)
        {
          char v19 = &v15[-v17];
          uint64_t v20 = (uint64_t)&v15[-v17 + 1];
          if (v20 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if (2 * (uint64_t)&v16[-v17] > (unint64_t)v20) {
            uint64_t v20 = 2 * (void)&v16[-v17];
          }
          if ((unint64_t)&v16[-v17] >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v21 = v20;
          }
          if (v21) {
            v22 = (char *)operator new(v21);
          }
          else {
            v22 = 0;
          }
          char v23 = &v19[(void)v22];
          uint64_t v24 = &v19[(void)v22];
          *uint64_t v24 = *v13;
          std::string v18 = v24 + 1;
          if (v15 != (char *)v17)
          {
            uint64_t v25 = &v15[~v17];
            do
            {
              char v26 = *--v15;
              (v25--)[(void)v22] = v26;
            }
            while (v15 != (char *)v17);
            char v23 = v22;
          }
          std::string v16 = &v22[v21];
          int v32 = v23;
          int v34 = v16;
          if (v17) {
            operator delete((void *)v17);
          }
          unint64_t v17 = (unint64_t)v23;
        }
        else
        {
          char *v15 = *v13;
          std::string v18 = v15 + 1;
        }
        v33 = v18;
        ++v13;
        uint64_t v15 = v18;
      }
      while (v13 != v14);
    }
    std::string::basic_string[abi:ne180100]<0>(v30, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, v27);
    turi::gl_sframe::unpack((uint64_t)a1 + 8, (const void **)v30, (uint64_t)__p, (uint64_t)&v32, (uint64_t **)(a6 + 8), (turi::gl_sframe *)&v31);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v35, "\"sframe\" is null.");
  set_error(a7);
}

void sub_223E131A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception_ptr a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (*(char *)(v31 - 89) < 0) {
    operator delete(*(void **)(v31 - 112));
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a14);
  std::exception_ptr::~exception_ptr(&a14);
  __cxa_end_catch();
  JUMPOUT(0x223E1316CLL);
}

void sub_223E132C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception_ptr a14)
{
}

void tc_sframe_stack(turi *a1, char *__s, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    turi::gl_sframe::stack((uint64_t)a1 + 8, v7, (uint64_t)__p, &v8);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "\"sframe\" is null.");
  set_error(a3);
}

void sub_223E13460(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E13444);
}

void sub_223E13564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_stack_and_rename(turi *a1, char *__s, char *a3, uint64_t a4, uint64_t *a5)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, a3);
    turi::gl_sframe::stack((uint64_t)a1 + 8, v10, (uint64_t)__p, &v11);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v12, "\"sframe\" is null.");
  set_error(a5);
}

void sub_223E13710(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (*(char *)(v25 - 49) < 0) {
    operator delete(*(void **)(v25 - 72));
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E136F0);
}

void sub_223E13814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_unstack(turi *a1, char *__s, char *a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, __s);
    std::string::basic_string[abi:ne180100]<0>(__p, a3);
    turi::gl_sframe::unstack((uint64_t)a1 + 8, (uint64_t)v9, (uint64_t)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "\"sframe\" is null.");
  set_error(a4);
}

void sub_223E139B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E13994);
}

void sub_223E13AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_unstack_vector(turi *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      uint64_t v8 = *(turi::flexible_type_impl **)(a2 + 8);
      uint64_t v9 = *(turi::flexible_type_impl **)(a2 + 16);
      if (v8 != v9)
      {
        uint64_t v10 = *(turi::flexible_type_impl **)(a2 + 8);
        do
        {
          if (*((unsigned char *)v10 + 12) != 2)
          {
            std::string::basic_string[abi:ne180100]<0>(v13, "Contains a non-string column.");
            set_error(a4);
          }
          uint64_t v10 = (turi::flexible_type_impl *)((char *)v10 + 16);
        }
        while (v10 != v9);
      }
      memset(&v12, 0, sizeof(v12));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(&v12, v8, v9, (v9 - v8) >> 4);
      std::string::basic_string[abi:ne180100]<0>(__p, a3);
      turi::gl_sframe::unstack((uint64_t)a1 + 8, (uint64_t *)&v12, (uint64_t)__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "\"flex_list\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "\"sframe\" is null.");
  set_error(a4);
}

void sub_223E13CC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (*(char *)(v20 - 33) < 0) {
    operator delete(*(void **)(v20 - 56));
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E13CACLL);
}

void sub_223E13DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_unique(uint64_t a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1) {
    turi::gl_sframe::unique((turi::gl_sframe *)(a1 + 8));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
  set_error(a2);
}

void sub_223E13F34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E13F18);
}

void sub_223E1400C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_sort_single_column(turi *a1, char *__s, int a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    turi::gl_sframe::sort((uint64_t)a1 + 8, (uint64_t)__p, a3, &v9);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "\"sframe\" is null.");
  set_error(a4);
}

void sub_223E1418C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E14170);
}

void sub_223E14278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_drop_na(turi *a1, uint64_t a2, char *__s, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      unint64_t v18 = 0;
      uint64_t v8 = *(unsigned char **)(a2 + 8);
      uint64_t v9 = *(unsigned char **)(a2 + 16);
      if (v8 != v9)
      {
        uint64_t v10 = 0;
        do
        {
          if (v8[12] != 2)
          {
            std::string::basic_string[abi:ne180100]<0>(v19, "Contains a non-string column.");
            set_error(a4);
          }
          uint64_t v11 = *(void *)v8;
          std::string v12 = (long long *)(*(void *)v8 + 8);
          if ((unint64_t)v10 >= v18)
          {
            uint64_t v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v16, v12);
          }
          else
          {
            if (*(char *)(v11 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(v11 + 8), *(void *)(v11 + 16));
            }
            else
            {
              long long v13 = *v12;
              v10->__r_.__value_.__r.__words[2] = *(void *)(*(void *)v8 + 24);
              *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
            }
            ++v10;
          }
          unint64_t v17 = v10;
          v8 += 16;
        }
        while (v8 != v9);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, __s);
      turi::gl_sframe::dropna((uint64_t)a1 + 8, &v15);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(v19, "\"flex_list\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "\"sframe\" is null.");
  set_error(a4);
}

void sub_223E144F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21)
{
  if (*(char *)(v21 - 49) < 0) {
    operator delete(*(void **)(v21 - 72));
  }
  a17 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E1448CLL);
}

void sub_223E14624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_sort_multiple_columns(turi *a1, uint64_t a2, std::vector<int>::value_type a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      uint64_t v8 = *(unsigned char **)(a2 + 8);
      uint64_t v9 = *(unsigned char **)(a2 + 16);
      if (v8 != v9)
      {
        uint64_t v10 = 0;
        do
        {
          if (v8[12] != 2)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "Contains a non-string column.");
            set_error(a4);
          }
          uint64_t v11 = *(void *)v8;
          std::string v12 = (long long *)(*(void *)v8 + 8);
          if ((unint64_t)v10 >= v17)
          {
            uint64_t v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v15, v12);
          }
          else
          {
            if (*(char *)(v11 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(v11 + 8), *(void *)(v11 + 16));
            }
            else
            {
              long long v13 = *v12;
              v10->__r_.__value_.__r.__words[2] = *(void *)(*(void *)v8 + 24);
              *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
            }
            ++v10;
          }
          uint64_t v16 = v10;
          v8 += 16;
        }
        while (v8 != v9);
      }
      turi::gl_sframe::sort((uint64_t)a1 + 8, &v15, a3, &v14);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"flex_list\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sframe\" is null.");
  set_error(a4);
}

void sub_223E1487C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E14818);
}

void sub_223E14998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_slice(turi *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v13[3] = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    v13[0] = a2;
    v13[1] = a3;
    void v13[2] = a4;
    v10[0] = v13;
    v10[1] = 3;
    turi::gl_sframe::operator[]((uint64_t)a1 + 8, (uint64_t)v10, &v11);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
  set_error(a5);
}

void sub_223E14B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E14B08);
  }
  _Unwind_Resume(exception_object);
}

void tc_sframe_extract_row(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1) {
    turi::gl_sframe::operator[]((turi::gl_sframe *)(a1 + 8), a2);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sframe\" is null.");
  set_error(a3);
}

void sub_223E14D7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception_ptr a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a12);
  std::exception_ptr::~exception_ptr(&a12);
  __cxa_end_catch();
  JUMPOUT(0x223E14D60);
}

void sub_223E14DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception_ptr a12)
{
}

void tc_sframe_replace_na(uint64_t a1, char *__s, uint64_t a3, uint64_t *a4)
{
  v11[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    if (a3)
    {
      std::string::basic_string[abi:ne180100]<0>(v8, __s);
      memset(v11, 0, 13);
      if ((atomic_ullong **)(a3 + 8) != v11)
      {
        *(atomic_ullong **)((char *)v11 + 5) = *(atomic_ullong **)(a3 + 13);
        v11[0] = *(atomic_ullong **)(a3 + 8);
        BYTE4(v11[1]) = *(unsigned char *)(a3 + 20);
        if (BYTE4(v11[1]) <= 9u && ((1 << SBYTE4(v11[1])) & 0x33C) != 0) {
          atomic_fetch_add(v11[0], 1uLL);
        }
      }
      turi::gl_sframe::fillna((turi::gl_sframe *)(a1 + 8), (const void **)v8, (uint64_t)v11, (turi::gl_sframe *)&v9);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"flexible_type\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sframe\" is null.");
  set_error(a4);
}

void sub_223E151B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    if (a24 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E15038);
  }
  _Unwind_Resume(exception_object);
}

void tc_groupby_aggregator_create(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223E15538(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223E15564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_groupby_aggregator_add_parameterized_aggregator(turi *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
}

void sub_223E155B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223E155E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_apply_mask(turi *a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      turi::gl_sframe::operator[]((uint64_t)a1 + 8, a2 + 8, &v6);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_sarray\" is null.");
    set_error(a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_sframe\" is null.");
  set_error(a3);
}

void sub_223E15760(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E15744);
}

void sub_223E15840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t tc_groupby_aggregator_add_simple_aggregator(turi *a1, char *__s, uint64_t a3, uint64_t a4)
{
  v47[4] = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "count");
    v27[0] = &unk_26D754F00;
    v27[3] = v27;
    std::string::basic_string[abi:ne180100]<0>(v28, "sum");
    v29[0] = &unk_26D754F90;
    void v29[3] = v29;
    std::string::basic_string[abi:ne180100]<0>(v30, "max");
    v31[0] = &unk_26D755010;
    void v31[3] = v31;
    std::string::basic_string[abi:ne180100]<0>(v32, "min");
    v33[0] = &unk_26D755090;
    void v33[3] = v33;
    std::string::basic_string[abi:ne180100]<0>(v34, "avg");
    v35[0] = &unk_26D755110;
    void v35[3] = v35;
    std::string::basic_string[abi:ne180100]<0>(v36, "var");
    v37[0] = &unk_26D755190;
    v37[3] = v37;
    std::string::basic_string[abi:ne180100]<0>(v38, "std");
    v39[0] = &unk_26D755210;
    v39[3] = v39;
    std::string::basic_string[abi:ne180100]<0>(v40, "stdv");
    v41[0] = &unk_26D755290;
    v41[3] = v41;
    std::string::basic_string[abi:ne180100]<0>(v42, "select_one");
    v43[0] = &unk_26D755310;
    v43[3] = v43;
    std::string::basic_string[abi:ne180100]<0>(v44, "count_distinct");
    v45[0] = &unk_26D755390;
    v45[3] = v45;
    std::string::basic_string[abi:ne180100]<0>(v46, "concat");
    v47[0] = &unk_26D755410;
    v47[3] = v47;
    std::map<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::map[abi:ne180100]((uint64_t)&tc_groupby_aggregator_add_simple_aggregator::agg_map, (const void **)__p, 11);
    for (uint64_t i = 70; i != -7; i -= 7)
      std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::~pair((uint64_t)&__p[i]);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::~map[abi:ne180100], &tc_groupby_aggregator_add_simple_aggregator::agg_map, &dword_223D44000);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t v8 = (void *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&tc_groupby_aggregator_add_simple_aggregator::agg_map, (const void **)__p);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v8 == &unk_2680810C8)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Aggregation ", 12);
    size_t v12 = strlen(__s);
    long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__s, v12);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" not recognized. ", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Available aggregation operators are ", 36);
    uint64_t v15 = tc_groupby_aggregator_add_simple_aggregator::agg_map;
    if ((_UNKNOWN *)tc_groupby_aggregator_add_simple_aggregator::agg_map != &unk_2680810C8)
    {
      do
      {
        int v16 = *(char *)(v15 + 55);
        if (v16 >= 0) {
          uint64_t v17 = v15 + 32;
        }
        else {
          uint64_t v17 = *(void *)(v15 + 32);
        }
        if (v16 >= 0) {
          uint64_t v18 = *(unsigned __int8 *)(v15 + 55);
        }
        else {
          uint64_t v18 = *(void *)(v15 + 40);
        }
        char v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v17, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
        uint64_t v20 = *(void **)(v15 + 8);
        if (v20)
        {
          do
          {
            uint64_t v21 = v20;
            uint64_t v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            uint64_t v21 = *(void **)(v15 + 16);
            BOOL v22 = *v21 == v15;
            uint64_t v15 = (uint64_t)v21;
          }
          while (!v22);
        }
        uint64_t v15 = (uint64_t)v21;
      }
      while (v21 != (void *)&unk_2680810C8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
  return std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()((uint64_t)v8 + 56, (uint64_t)a1 + 8, a3, a4);
}

void sub_223E15DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
  {
    for (uint64_t i = 560; i != -56; i -= 56)
      std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::~pair((uint64_t)&a16 + i);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E1591CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::map<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)v4 + 48))(v4, a2, &v7, &v6);
}

void tc_groupby_aggregator_add_concat_two_columns(uint64_t **a1, char *a2, char *__s, char *a4, uint64_t *a5)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"groupby_aggregator\" is null.");
    set_error(a5);
  }
  std::string::basic_string[abi:ne180100]<0>(v12, __s);
  std::string::basic_string[abi:ne180100]<0>(v10, a4);
  turi::aggregate::CONCAT((uint64_t)v12, (uint64_t)v10, &v14);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  std::string v18 = v14;
  memset(&v14, 0, sizeof(v14));
  long long v19 = v15;
  long long v15 = 0uLL;
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>(a1 + 1, (const void **)__p, (long long *)__p);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  uint64_t v20 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  uint64_t v20 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_223E16130(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E16118);
}

void sub_223E161CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t std::pair<std::string const,turi::aggregate::groupby_descriptor_type>::~pair(uint64_t a1)
{
  BOOL v2 = (void **)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v5 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void turi::aggregate::groupby_descriptor_type::~groupby_descriptor_type(turi::aggregate::groupby_descriptor_type *this)
{
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void tc_groupby_aggregator_add_quantile(uint64_t **a1, char *a2, char *__s, uint64_t *a4, double a5)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"groupby_aggregator\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, __s);
  turi::aggregate::QUANTILE((uint64_t)v10, &v12, a5);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  std::string v16 = v12;
  memset(&v12, 0, sizeof(v12));
  long long v17 = v13;
  long long v13 = 0uLL;
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>(a1 + 1, (const void **)__p, (long long *)__p);
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  std::string v18 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)&v13 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
  }
  std::string v18 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_223E163C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E163ACLL);
}

void sub_223E16448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_groupby_aggregator_add_quantiles(uint64_t **a1, char *a2, char *__s, uint64_t a4, uint64_t *a5)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"groupby_aggregator\" is null.");
    set_error(a5);
  }
  if (!a4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"flex_list\" is null.");
    set_error(a5);
  }
  int v30 = 0;
  uint64_t v31 = 0;
  int v32 = 0;
  uint64_t v10 = *(void *)(a4 + 8);
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 != v11)
  {
    std::string v12 = 0;
    do
    {
      if (*(unsigned char *)(v10 + 12) != 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Contains a non-float quantile.");
        set_error(a5);
      }
      if (v12 >= v32)
      {
        std::string v14 = v30;
        uint64_t v15 = (v12 - v30) >> 3;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v32 - v30;
        if ((v32 - v30) >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v32, v18);
          std::string v14 = v30;
          std::string v12 = v31;
        }
        else
        {
          long long v19 = 0;
        }
        uint64_t v20 = &v19[8 * v15];
        *(void *)uint64_t v20 = *(void *)v10;
        long long v13 = v20 + 8;
        while (v12 != v14)
        {
          uint64_t v21 = *((void *)v12 - 1);
          v12 -= 8;
          *((void *)v20 - 1) = v21;
          v20 -= 8;
        }
        int v30 = v20;
        uint64_t v31 = v13;
        int v32 = &v19[8 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(void *)std::string v12 = *(void *)v10;
        long long v13 = v12 + 8;
      }
      uint64_t v31 = v13;
      v10 += 16;
      std::string v12 = v13;
    }
    while (v10 != v11);
  }
  std::string::basic_string[abi:ne180100]<0>(v22, __s);
  turi::aggregate::QUANTILE((uint64_t)v22, (uint64_t *)&v30, &v24);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  std::string v28 = v24;
  memset(&v24, 0, sizeof(v24));
  long long v29 = v25;
  long long v25 = 0uLL;
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>(a1 + 1, (const void **)__p, (long long *)__p);
  if (*((void *)&v29 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
  }
  v33[0] = (void **)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  v33[0] = (void **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
}

void sub_223E16708(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  std::string v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(void *)(v26 - 112) = v28;
    operator delete(v28);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E166DCLL);
}

void sub_223E167C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_groupby_aggregator_add_argmax(uint64_t **a1, char *a2, char *__s, char *a4, uint64_t *a5)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"groupby_aggregator\" is null.");
    set_error(a5);
  }
  std::string::basic_string[abi:ne180100]<0>(v12, __s);
  std::string::basic_string[abi:ne180100]<0>(v10, a4);
  turi::aggregate::ARGMAX((uint64_t)v12, (uint64_t)v10, &v14);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  std::string v18 = v14;
  memset(&v14, 0, sizeof(v14));
  long long v19 = v15;
  long long v15 = 0uLL;
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>(a1 + 1, (const void **)__p, (long long *)__p);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  uint64_t v20 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  uint64_t v20 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_223E16940(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E16928);
}

void sub_223E169DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_groupby_aggregator_add_argmin(uint64_t **a1, char *a2, char *__s, char *a4, uint64_t *a5)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"groupby_aggregator\" is null.");
    set_error(a5);
  }
  std::string::basic_string[abi:ne180100]<0>(v12, __s);
  std::string::basic_string[abi:ne180100]<0>(v10, a4);
  turi::aggregate::ARGMIN((uint64_t)v12, (uint64_t)v10, &v14);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  std::string v18 = v14;
  memset(&v14, 0, sizeof(v14));
  long long v19 = v15;
  long long v15 = 0uLL;
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>(a1 + 1, (const void **)__p, (long long *)__p);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  uint64_t v20 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  uint64_t v20 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_223E16B54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E16B3CLL);
}

void sub_223E16BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_sframe_group_by(turi *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        std::string v14 = 0;
        long long v15 = 0;
        unint64_t v16 = 0;
        uint64_t v8 = *(unsigned char **)(a2 + 8);
        uint64_t v9 = *(unsigned char **)(a2 + 16);
        if (v8 != v9)
        {
          uint64_t v10 = 0;
          do
          {
            if (v8[12] != 2)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "Contains a non-string column.");
              set_error(a4);
            }
            uint64_t v11 = *(void *)v8;
            std::string v12 = (long long *)(*(void *)v8 + 8);
            if ((unint64_t)v10 >= v16)
            {
              uint64_t v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v14, v12);
            }
            else
            {
              if (*(char *)(v11 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(v11 + 8), *(void *)(v11 + 16));
              }
              else
              {
                long long v13 = *v12;
                v10->__r_.__value_.__r.__words[2] = *(void *)(*(void *)v8 + 24);
                *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
              }
              ++v10;
            }
            long long v15 = v10;
            v8 += 16;
          }
          while (v8 != v9);
        }
        turi::gl_sframe::groupby((uint64_t)a1 + 8, &v14, (void *)(a3 + 8));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "\"groupby_aggregator\" is null.");
      set_error(a4);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"string_list\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"sframe\" is null.");
  set_error(a4);
}

void sub_223E16E6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E16E08);
}

void sub_223E16F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_sframe_apply(turi *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  __p[9] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a2)
    {
      if (!a3)
      {
        if (a4)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "\"Context release function passed in is null.\" is null.");
          set_error(a6);
        }
      }
      std::shared_ptr<void>::shared_ptr[abi:ne180100]<void,void (*)(void *),void>(&v11, a4);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Callback function passed in is null.\" is null.");
    set_error(a6);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"SFrame passed in is null.\" is null.");
  set_error(a6);
}

void sub_223E171A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
  {
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__p);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a10);
    std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::~__value_func[abi:ne180100]((void *)(v22 - 88));
    if (a16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a16);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E1707CLL);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_from_int64(turi *a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223E17394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int a10)
{
  if (a2)
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a10);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E17360);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_from_double(turi *a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223E174EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int a10)
{
  if (a2)
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a10);
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E174B8);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_from_cstring(turi *__s, uint64_t *a2)
{
  v5[12] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(__s);
  }
  if (__s)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)__s);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "\"CString\" is null.");
  set_error(a2);
}

void sub_223E176B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
  {
    if (a22 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E17680);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_from_string(turi *__src, size_t __len, uint64_t *a3)
{
  v7[12] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(__src);
  }
  if (__src)
  {
    std::string::basic_string[abi:ne180100](&__p, __src, __len);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "\"String\" is null.");
  set_error(a3);
}

void sub_223E178C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
  {
    if (a22 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E1788CLL);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_from_double_array(turi *a1, unint64_t a2, uint64_t *a3)
{
  v7[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, a1, (uint64_t)a1 + 8 * a2, a2);
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "\"Double Array\" is null.");
  set_error(a3);
}

void sub_223E17AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    if (a19 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E17A88);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_from_flex_list(turi *a1, uint64_t *a2)
{
  __p[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Flex List\" is null.");
  set_error(a2);
}

void sub_223E17C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E17C54);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_from_flex_dict(turi *a1, uint64_t *a2)
{
  __p[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Flex Dictionary\" is null.");
  set_error(a2);
}

void sub_223E17E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E17E04);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_from_datetime(uint64_t a1, uint64_t *a2)
{
  __p[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if ((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFLL) != 0 || *(_DWORD *)(a1 + 16) != 0) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Flex Datetime\" is null.");
  set_error(a2);
}

void sub_223E17FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E17FC4);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_from_image(turi *a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  operator new();
}

void sub_223E183B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E18380);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_from_flexible_type(turi *a1, uint64_t *a2)
{
  __p[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Flex Type\" is null.");
  set_error(a2);
}

void sub_223E1861C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E185E4);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_from_sarray(turi *a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    turi::gl_sarray::get_proxy((uint64_t)a1 + 8, &v4);
    std::string __p = v4;
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::variant_converter<std::shared_ptr<turi::unity_sarray>,void>::set((uint64_t *)&__p, (uint64_t)v6);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"SArray\" is null.");
  set_error(a2);
}

void sub_223E18848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    if (a29 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E18810);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_from_sframe(turi *a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    turi::gl_sframe::get_proxy((uint64_t)a1 + 8, &v4);
    std::string __p = v4;
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set((uint64_t *)&__p, (uint64_t)v6);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"SFrame\" is null.");
  set_error(a2);
}

void sub_223E18AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    if (a29 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E18A78);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_from_parameters(turi *a1, uint64_t *a2)
{
  __p[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Parameters\" is null.");
  set_error(a2);
}

void sub_223E18CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E18C6CLL);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_from_model(turi *a1, uint64_t *a2)
{
  __p[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Model\" is null.");
  set_error(a2);
}

void sub_223E18E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E18E24);
  }
  _Unwind_Resume(exception_object);
}

void tc_variant_create_copy(turi *a1, uint64_t *a2)
{
  __p[10] = *(void **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Variant\" is null.");
  set_error(a2);
}

void sub_223E19030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2)
  {
    if (a17 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E18FF8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_variant_int64(int *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  return *(void *)turi::variant_get_ref<turi::flexible_type>(a1 + 2);
}

void sub_223E19114(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223E19140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

double tc_variant_double(int *a1)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  return *(double *)turi::variant_get_ref<turi::flexible_type>(a1 + 2);
}

void sub_223E191A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void sub_223E191D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t tc_variant_string_length(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type is null");
    set_error(a2);
  }
  uint64_t v4 = (int *)((char *)a1 + 8);
  if (*(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type not a string.");
    set_error(a2);
  }
  uint64_t v5 = turi::variant_get_ref<turi::flexible_type>(v4);
  if (*(char *)(*(void *)v5 + 31) < 0) {
    return *(void *)(*(void *)v5 + 16);
  }
  else {
    return *(unsigned __int8 *)(*(void *)v5 + 31);
  }
}

void sub_223E192B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E1929CLL);
}

void sub_223E1930C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_variant_string_data(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
    set_error(a2);
  }
  uint64_t v4 = (int *)((char *)a1 + 8);
  if (*(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type not a string.");
    set_error(a2);
  }
  uint64_t v5 = *(void *)turi::variant_get_ref<turi::flexible_type>(v4);
  uint64_t result = v5 + 8;
  if (*(char *)(v5 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_223E193F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E193DCLL);
}

void sub_223E19444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_variant_array_length(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
    set_error(a2);
  }
  uint64_t v4 = (int *)((char *)a1 + 8);
  if (*(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type not an Array.");
    set_error(a2);
  }
  uint64_t v5 = turi::variant_get_ref<turi::flexible_type>(v4);
  return (uint64_t)(*(void *)(*(void *)v5 + 16) - *(void *)(*(void *)v5 + 8)) >> 3;
}

void sub_223E19524(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E19510);
}

void sub_223E19578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_variant_array_data(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
    set_error(a2);
  }
  uint64_t v4 = (int *)((char *)a1 + 8);
  if (*(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type not an Array.");
    set_error(a2);
  }
  return *(void *)(*(void *)turi::variant_get_ref<turi::flexible_type>(v4) + 8);
}

void sub_223E19650(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E1963CLL);
}

void sub_223E196A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_variant_flex_list(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    uint64_t v4 = (int *)((char *)a1 + 8);
    if (*(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) == 4)
    {
      turi::variant_get_ref<turi::flexible_type>(v4);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type not a list.");
    set_error(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
  set_error(a2);
}

void sub_223E19804(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E197E8);
}

void sub_223E19858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_variant_flex_dict(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    uint64_t v4 = (int *)((char *)a1 + 8);
    if (*(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) == 5)
    {
      turi::variant_get_ref<turi::flexible_type>(v4);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type not a dict.");
    set_error(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
  set_error(a2);
}

void sub_223E199B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E1999CLL);
}

void sub_223E19A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_variant_flex_image(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    uint64_t v4 = (int *)((char *)a1 + 8);
    if (*(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) == 8)
    {
      turi::variant_get_ref<turi::flexible_type>(v4);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Flexible type not an image.");
    set_error(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"Flexible type\" is null.");
  set_error(a2);
}

void sub_223E19B78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception(&a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x223E19B5CLL);
}

void sub_223E19BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void tc_variant_datetime(turi *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    uint64_t v4 = (int *)((char *)a1 + 8);
    if (*(unsigned char *)(turi::variant_get_ref<turi::flexible_type>(v4) + 12) == 6)
    {
      turi::variant_get_ref<turi::flexible_type>(v4);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Flexible type not a datetime.");
    set_error(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Flexible type\" is null.");
  set_error(a2);
}

void sub_223E19CD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E19CC0);
}

void sub_223E19D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_variant_flexible_type(int *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    int v5 = a1[2];
    uint64_t v4 = a1 + 2;
    if (v5 == v5 >> 31)
    {
      turi::variant_get_ref<turi::flexible_type>(v4);
      new_tc_flexible_type<turi::flexible_type const&>();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Variant does not contain a flexible type.");
    set_error(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Variant\" is null.");
  set_error(a2);
}

void sub_223E19DF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E19DDCLL);
}

void sub_223E19E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_variant_sarray(int *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    int v5 = a1[2];
    uint64_t v4 = a1 + 2;
    if ((v5 ^ (v5 >> 31)) == 5)
    {
      turi::variant_get_ref<std::shared_ptr<turi::unity_sarray_base>>(v4);
      new_tc_sarray<std::shared_ptr<turi::unity_sarray_base> const&>();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Variant does not contain an SArray.");
    set_error(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Variant\" is null.");
  set_error(a2);
}

void sub_223E19F10(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E19EFCLL);
}

void sub_223E19F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_variant_sframe(int *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    int v5 = a1[2];
    uint64_t v4 = a1 + 2;
    if ((v5 ^ (v5 >> 31)) == 4)
    {
      turi::variant_get_ref<std::shared_ptr<turi::unity_sframe_base>>(v4);
      new_tc_sframe<std::shared_ptr<turi::unity_sframe_base> const&>();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Variant does not contain an SFrame.");
    set_error(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Variant\" is null.");
  set_error(a2);
}

void sub_223E1A030(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E1A01CLL);
}

void sub_223E1A084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_variant_parameters(uint64_t *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    int v5 = *((_DWORD *)a1 + 2);
    uint64_t v4 = a1 + 1;
    if ((v5 ^ (v5 >> 31)) == 6)
    {
      turi::variant_get_ref<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(v4);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Variant does not contain parameters.");
    set_error(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"Variant\" is null.");
  set_error(a2);
}

void sub_223E1A1F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E1A1C4);
}

void sub_223E1A248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_variant_model(int *a1, uint64_t *a2)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    int v5 = a1[2];
    uint64_t v4 = a1 + 2;
    if ((v5 ^ (v5 >> 31)) == 3)
    {
      turi::variant_get_ref<std::shared_ptr<turi::model_base>>(v4);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Variant does not contain a model.");
    set_error(a2);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"Variant\" is null.");
  set_error(a2);
}

void sub_223E1A350(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E1A33CLL);
}

void sub_223E1A3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_plot_create_1d(uint64_t a1, char *a2, char *a3, char *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v14[2] = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    optional_str(a2, (uint64_t)v14);
    optional_str(a3, (uint64_t)&v13);
    optional_str(a4, (uint64_t)&v12);
    turi::gl_sarray::plot((turi::gl_sarray *)(a1 + 8), (const turi::flexible_type *)v14, (const turi::flexible_type *)&v13, (const turi::flexible_type *)&v12);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"sarray\" is null.");
  set_error(a6);
}

void sub_223E1AAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, int a20,char a21,uint64_t a22,int a23,char a24)
{
  if (a2)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E1A4F8);
  }
  _Unwind_Resume(exception_object);
}

char *optional_str@<X0>(char *__s@<X0>, uint64_t a2@<X8>)
{
  if (__s)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    turi::flexible_type::flexible_type<std::string>(a2);
  }
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  if ((uint64_t *)a2 != &turi::FLEX_UNDEFINED)
  {
    *(void *)(a2 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
    *(void *)a2 = turi::FLEX_UNDEFINED;
    int v3 = byte_26808107C;
    *(unsigned char *)(a2 + 12) = byte_26808107C;
    switch(v3)
    {
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
      case 9:
        atomic_fetch_add(*(atomic_ullong *volatile *)a2, 1uLL);
        break;
      default:
        return __s;
    }
  }
  return __s;
}

void sub_223E1B144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tc_plot_create_2d(uint64_t a1, uint64_t a2, char *a3, char *__s, char *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray_x\" is null.");
    set_error(a7);
  }
  if (!a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"sarray_y\" is null.");
    set_error(a7);
  }
  optional_str(__s, (uint64_t)&v33);
  switch(v34)
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_16;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_16:
      __p[0] = *(void **)MEMORY[0x263F8C2B8];
      uint64_t v14 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v24 = v14;
      uint64_t v25 = MEMORY[0x263F8C318] + 16;
      if (v27 < 0) {
        operator delete(v26);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](v28);
      goto LABEL_23;
    case 2:
      if (*(char *)(v33 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v33 + 8), *(void *)(v33 + 16));
      }
      else
      {
        long long v13 = *(_OWORD *)(v33 + 8);
        v22.__r_.__value_.__r.__words[2] = *(void *)(v33 + 24);
        *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
      }
      goto LABEL_23;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(v33 + 8));
      goto LABEL_23;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(v33 + 8));
      goto LABEL_23;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(v33 + 8));
      goto LABEL_23;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v33, &v22);
      goto LABEL_23;
    case 7:
      memset(&v22, 0, sizeof(v22));
      goto LABEL_23;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_23;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(v33 + 8));
LABEL_23:
      optional_str(a5, (uint64_t)&v31);
      switch(v32)
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_32;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_32:
          __p[0] = *(void **)MEMORY[0x263F8C2B8];
          uint64_t v16 = *(void *)(MEMORY[0x263F8C2B8] + 72);
          *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
          uint64_t v24 = v16;
          uint64_t v25 = MEMORY[0x263F8C318] + 16;
          if (v27 < 0) {
            operator delete(v26);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](v28);
          goto LABEL_39;
        case 2:
          if (*(char *)(v31 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(v31 + 8), *(void *)(v31 + 16));
          }
          else
          {
            long long v15 = *(_OWORD *)(v31 + 8);
            v21.__r_.__value_.__r.__words[2] = *(void *)(v31 + 24);
            *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v15;
          }
          goto LABEL_39;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(v31 + 8));
          goto LABEL_39;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(v31 + 8));
          goto LABEL_39;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(v31 + 8));
          goto LABEL_39;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v31, &v21);
          goto LABEL_39;
        case 7:
          memset(&v21, 0, sizeof(v21));
          goto LABEL_39;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_39;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(v31 + 8));
LABEL_39:
          optional_str(a3, (uint64_t)&v29);
          switch(v30)
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_48;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_48:
              __p[0] = *(void **)MEMORY[0x263F8C2B8];
              uint64_t v18 = *(void *)(MEMORY[0x263F8C2B8] + 72);
              *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
              uint64_t v24 = v18;
              uint64_t v25 = MEMORY[0x263F8C318] + 16;
              if (v27 < 0) {
                operator delete(v26);
              }
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x22A614E30](v28);
              goto LABEL_55;
            case 2:
              if (*(char *)(v29 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v29 + 8), *(void *)(v29 + 16));
              }
              else
              {
                long long v17 = *(_OWORD *)(v29 + 8);
                v20.__r_.__value_.__r.__words[2] = *(void *)(v29 + 24);
                *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v17;
              }
              goto LABEL_55;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(v29 + 8));
              goto LABEL_55;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(v29 + 8));
              goto LABEL_55;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(v29 + 8));
              goto LABEL_55;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v29, &v20);
              goto LABEL_55;
            case 7:
              memset(&v20, 0, sizeof(v20));
              goto LABEL_55;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              goto LABEL_55;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(v29 + 8));
LABEL_55:
              turi::visualization::plot((turi::gl_sarray *)(a1 + 8), (turi::gl_sarray *)(a2 + 8));
            default:
              uint64_t result = turi::flexible_type_fail(0);
              break;
          }
          break;
        default:
          uint64_t result = turi::flexible_type_fail(0);
          break;
      }
      break;
    default:
      uint64_t result = turi::flexible_type_fail(0);
      break;
  }
  __break(1u);
  return result;
}

void sub_223E1BFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a33);
    switch(*(unsigned char *)(v38 - 140))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_28;
        }
        uint64_t v40 = *(void *)(v38 - 152);
        if (!v40) {
          goto LABEL_28;
        }
        if (*(char *)(v40 + 31) < 0) {
          operator delete(*(void **)(v40 + 8));
        }
        v41 = (void *)v40;
        uint64_t v42 = 0x1012C404EF22A49;
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_28;
        }
        v45 = *(void **)(v38 - 152);
        if (!v45) {
          goto LABEL_28;
        }
        v46 = (void *)v45[1];
        if (v46)
        {
          v45[2] = v46;
          operator delete(v46);
        }
        v41 = v45;
        uint64_t v42 = 0x1080C409938AC02;
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_28;
        }
        v43 = *(void **)(v38 - 152);
        if (!v43) {
          goto LABEL_28;
        }
        *(void *)(v38 - 160) = v43 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 160));
        goto LABEL_22;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_28;
        }
        v43 = *(void **)(v38 - 152);
        if (!v43) {
          goto LABEL_28;
        }
        *(void *)(v38 - 160) = v43 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 160));
LABEL_22:
        v41 = v43;
        uint64_t v42 = 0x1020C405E66F15BLL;
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 152), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v47 = *(void *)(v38 - 152);
          if (v47)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(v47 + 16));
            MEMORY[0x22A614FA0](v47, 0x1030C40F1F0227BLL);
          }
          *(void *)(v38 - 152) = 0;
        }
        goto LABEL_28;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_28;
        }
        v44 = *(void **)(v38 - 152);
        if (!v44) {
          goto LABEL_28;
        }
        v41 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v44);
        uint64_t v42 = 0x1030C407B73B9F7;
        break;
      default:
        goto LABEL_28;
    }
    MEMORY[0x22A614FA0](v41, v42);
LABEL_28:
    if (a23 < 0) {
      operator delete(__p);
    }
    switch(*(unsigned char *)(v38 - 124))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_56;
        }
        uint64_t v48 = *(void *)(v38 - 136);
        if (!v48) {
          goto LABEL_56;
        }
        if (*(char *)(v48 + 31) < 0) {
          operator delete(*(void **)(v48 + 8));
        }
        v49 = (void *)v48;
        uint64_t v50 = 0x1012C404EF22A49;
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_56;
        }
        v53 = *(void **)(v38 - 136);
        if (!v53) {
          goto LABEL_56;
        }
        v54 = (void *)v53[1];
        if (v54)
        {
          v53[2] = v54;
          operator delete(v54);
        }
        v49 = v53;
        uint64_t v50 = 0x1080C409938AC02;
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_56;
        }
        v51 = *(void **)(v38 - 136);
        if (!v51) {
          goto LABEL_56;
        }
        a11 = v51 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
        goto LABEL_50;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_56;
        }
        v51 = *(void **)(v38 - 136);
        if (!v51) {
          goto LABEL_56;
        }
        a11 = v51 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
LABEL_50:
        v49 = v51;
        uint64_t v50 = 0x1020C405E66F15BLL;
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 136), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v55 = *(void *)(v38 - 136);
          if (v55)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(v55 + 16));
            MEMORY[0x22A614FA0](v55, 0x1030C40F1F0227BLL);
          }
          *(void *)(v38 - 136) = 0;
        }
        goto LABEL_56;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_56;
        }
        v52 = *(void **)(v38 - 136);
        if (!v52) {
          goto LABEL_56;
        }
        v49 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v52);
        uint64_t v50 = 0x1030C407B73B9F7;
        break;
      default:
        goto LABEL_56;
    }
    MEMORY[0x22A614FA0](v49, v50);
LABEL_56:
    if (a30 < 0) {
      operator delete(a25);
    }
    switch(*(unsigned char *)(v38 - 108))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_84;
        }
        uint64_t v56 = *(void *)(v38 - 120);
        if (!v56) {
          goto LABEL_84;
        }
        if (*(char *)(v56 + 31) < 0) {
          operator delete(*(void **)(v56 + 8));
        }
        v57 = (void *)v56;
        uint64_t v58 = 0x1012C404EF22A49;
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_84;
        }
        v61 = *(void **)(v38 - 120);
        if (!v61) {
          goto LABEL_84;
        }
        v62 = (void *)v61[1];
        if (v62)
        {
          v61[2] = v62;
          operator delete(v62);
        }
        v57 = v61;
        uint64_t v58 = 0x1080C409938AC02;
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_84;
        }
        v59 = *(void **)(v38 - 120);
        if (!v59) {
          goto LABEL_84;
        }
        std::string __p = v59 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_78;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_84;
        }
        v59 = *(void **)(v38 - 120);
        if (!v59) {
          goto LABEL_84;
        }
        std::string __p = v59 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_78:
        v57 = v59;
        uint64_t v58 = 0x1020C405E66F15BLL;
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 120), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v63 = *(void *)(v38 - 120);
          if (v63)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(v63 + 16));
            MEMORY[0x22A614FA0](v63, 0x1030C40F1F0227BLL);
          }
          *(void *)(v38 - 120) = 0;
        }
        goto LABEL_84;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(v38 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_84;
        }
        v60 = *(void **)(v38 - 120);
        if (!v60) {
          goto LABEL_84;
        }
        v57 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v60);
        uint64_t v58 = 0x1030C407B73B9F7;
        break;
      default:
        goto LABEL_84;
    }
    MEMORY[0x22A614FA0](v57, v58);
LABEL_84:
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E1B2A4);
  }
  _Unwind_Resume(exception_object);
}

void tc_plot_create_sframe_summary(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::gl_sframe::plot((turi::gl_sframe *)(a1 + 8));
    if (lpsrc
    {
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
    }
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&lpsrc, "\"sframe\" is null.");
  set_error(a3);
}

void sub_223E1C884(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E1C824);
}

void sub_223E1C8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_plot_get_vega_spec(uint64_t *a1, char a2, uint64_t a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::visualization::Plot::get_spec(a1[1], a2, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = (turi *)&__p;
    }
    else {
      p_p = (turi *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    tc_ft_create_from_string(p_p, size);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "\"plot\" is null.");
  set_error(a4);
}

void sub_223E1C9E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E1C9C4);
}

void sub_223E1CA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_plot_get_next_data(turi::visualization::Plot **a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    turi::visualization::Plot::get_next_data((uint64_t *)__p, a1[1]);
    if ((v8 & 0x80u) == 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      size_t v6 = v8;
    }
    else {
      size_t v6 = (size_t)__p[1];
    }
    tc_ft_create_from_string((turi *)v5, v6);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"plot\" is null.");
  set_error(a3);
}

void sub_223E1CB0C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E1CAF4);
}

void sub_223E1CB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

uint64_t tc_plot_finished_streaming(turi::visualization::Plot **a1, uint64_t a2, uint64_t *a3)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"plot\" is null.");
    set_error(a3);
  }
  return turi::visualization::Plot::finished_streaming(a1[1]);
}

void sub_223E1CBF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E1CBE4);
}

void sub_223E1CC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_binary_op_ss(turi *a1, char *a2, uint64_t a3, uint64_t *a4)
{
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a3)
    {
      turi::gl_sarray::get_proxy((uint64_t)a1 + 8, &v16);
      uint64_t v8 = v16;
      turi::gl_sarray::get_proxy(a3 + 8, &v11);
      long long v12 = v11;
      long long v11 = 0uLL;
      std::string::basic_string[abi:ne180100]<0>(__p, a2);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, long long *, void **))(*(void *)v8 + 312))(&v13, v8, &v12, __p);
      turi::gl_sarray::gl_sarray(v15, &v13);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (*((void *)&v12 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
      }
      if (*((void *)&v11 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v16, "\"tc_sarray\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v16, "\"tc_sarray\" is null.");
  set_error(a4);
}

void sub_223E1CE30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (*(char *)(v22 - 49) < 0) {
    operator delete(*(void **)(v22 - 72));
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  fill_error_from_exception((std::exception_ptr *)&a9);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x223E1CE14);
}

void sub_223E1CF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
}

void tc_binary_op_sf(turi *a1, char *a2, uint64_t a3, uint64_t *a4)
{
  v25[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize(a1);
  }
  if (a1)
  {
    if (a3)
    {
      turi::gl_sarray::get_proxy((uint64_t)a1 + 8, &v22);
      uint64_t v8 = v22;
      memset(v25, 0, 13);
      if ((atomic_ullong **)(a3 + 8) != v25)
      {
        *(atomic_ullong **)((char *)v25 + 5) = *(atomic_ullong **)(a3 + 13);
        v25[0] = *(atomic_ullong **)(a3 + 8);
        BYTE4(v25[1]) = *(unsigned char *)(a3 + 20);
        if (BYTE4(v25[1]) <= 9u && ((1 << SBYTE4(v25[1])) & 0x33C) != 0) {
          atomic_fetch_add(v25[0], 1uLL);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, a2);
      (*(void (**)(uint64_t *__return_ptr, void *, atomic_ullong **, void **))(*(void *)v8 + 296))(&v19, v8, v25, __p);
      turi::gl_sarray::gl_sarray(v21, &v19);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      switch(BYTE4(v25[1]))
      {
        case 2:
          if (atomic_fetch_add(v25[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          uint64_t v9 = v25[0];
          if (!v25[0]) {
            goto LABEL_41;
          }
          if (*((char *)v25[0] + 31) < 0) {
            operator delete(*((void **)v25[0] + 1));
          }
          char v10 = v9;
          uint64_t v11 = 0x1012C404EF22A49;
          goto LABEL_40;
        case 3:
          if (atomic_fetch_add(v25[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          uint64_t v14 = v25[0];
          if (!v25[0]) {
            goto LABEL_41;
          }
          long long v15 = (void *)v25[0][1];
          if (v15)
          {
            v25[0][2] = (atomic_ullong)v15;
            operator delete(v15);
          }
          char v10 = v14;
          uint64_t v11 = 0x1080C409938AC02;
          goto LABEL_40;
        case 4:
          if (atomic_fetch_add(v25[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          long long v12 = v25[0];
          if (!v25[0]) {
            goto LABEL_41;
          }
          uint64_t v24 = (void **)(v25[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v24);
          goto LABEL_35;
        case 5:
          if (atomic_fetch_add(v25[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          long long v12 = v25[0];
          if (!v25[0]) {
            goto LABEL_41;
          }
          uint64_t v24 = (void **)(v25[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v24);
LABEL_35:
          char v10 = v12;
          uint64_t v11 = 0x1020C405E66F15BLL;
          goto LABEL_40;
        case 8:
          if (atomic_fetch_add(v25[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          uint64_t v16 = v25[0];
          if (!v25[0]) {
            goto LABEL_41;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v25[0] + 2);
          char v10 = v16;
          unsigned int v13 = -235920773;
          goto LABEL_39;
        case 9:
          if (atomic_fetch_add(v25[0], 0xFFFFFFFFFFFFFFFFLL) != 1 || !v25[0]) {
            goto LABEL_41;
          }
          char v10 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v25[0]);
          unsigned int v13 = 2071181815;
LABEL_39:
          uint64_t v11 = v13 | 0x1030C4000000000;
LABEL_40:
          MEMORY[0x22A614FA0](v10, v11);
LABEL_41:
          memset(v25, 0, 13);
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          operator new();
        default:
          goto LABEL_41;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v22, "\"tc_flexible_type\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "\"tc_sarray\" is null.");
  set_error(a4);
}

void sub_223E1D310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2)
  {
    if (a28 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E1D134);
  }
  _Unwind_Resume(exception_object);
}

void tc_binary_op_fs(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4)
{
  v25[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    if (a3)
    {
      turi::gl_sarray::get_proxy(a3 + 8, &v22);
      uint64_t v8 = v22;
      memset(v25, 0, 13);
      if ((atomic_ullong **)(a1 + 8) != v25)
      {
        *(atomic_ullong **)((char *)v25 + 5) = *(atomic_ullong **)(a1 + 13);
        v25[0] = *(atomic_ullong **)(a1 + 8);
        BYTE4(v25[1]) = *(unsigned char *)(a1 + 20);
        if (BYTE4(v25[1]) <= 9u && ((1 << SBYTE4(v25[1])) & 0x33C) != 0) {
          atomic_fetch_add(v25[0], 1uLL);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, a2);
      (*(void (**)(uint64_t *__return_ptr, void *, atomic_ullong **, void **))(*(void *)v8 + 304))(&v19, v8, v25, __p);
      turi::gl_sarray::gl_sarray(v21, &v19);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      switch(BYTE4(v25[1]))
      {
        case 2:
          if (atomic_fetch_add(v25[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          uint64_t v9 = v25[0];
          if (!v25[0]) {
            goto LABEL_41;
          }
          if (*((char *)v25[0] + 31) < 0) {
            operator delete(*((void **)v25[0] + 1));
          }
          char v10 = v9;
          uint64_t v11 = 0x1012C404EF22A49;
          goto LABEL_40;
        case 3:
          if (atomic_fetch_add(v25[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          uint64_t v14 = v25[0];
          if (!v25[0]) {
            goto LABEL_41;
          }
          long long v15 = (void *)v25[0][1];
          if (v15)
          {
            v25[0][2] = (atomic_ullong)v15;
            operator delete(v15);
          }
          char v10 = v14;
          uint64_t v11 = 0x1080C409938AC02;
          goto LABEL_40;
        case 4:
          if (atomic_fetch_add(v25[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          long long v12 = v25[0];
          if (!v25[0]) {
            goto LABEL_41;
          }
          uint64_t v24 = (void **)(v25[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v24);
          goto LABEL_35;
        case 5:
          if (atomic_fetch_add(v25[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          long long v12 = v25[0];
          if (!v25[0]) {
            goto LABEL_41;
          }
          uint64_t v24 = (void **)(v25[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v24);
LABEL_35:
          char v10 = v12;
          uint64_t v11 = 0x1020C405E66F15BLL;
          goto LABEL_40;
        case 8:
          if (atomic_fetch_add(v25[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_41;
          }
          uint64_t v16 = v25[0];
          if (!v25[0]) {
            goto LABEL_41;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v25[0] + 2);
          char v10 = v16;
          unsigned int v13 = -235920773;
          goto LABEL_39;
        case 9:
          if (atomic_fetch_add(v25[0], 0xFFFFFFFFFFFFFFFFLL) != 1 || !v25[0]) {
            goto LABEL_41;
          }
          char v10 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v25[0]);
          unsigned int v13 = 2071181815;
LABEL_39:
          uint64_t v11 = v13 | 0x1030C4000000000;
LABEL_40:
          MEMORY[0x22A614FA0](v10, v11);
LABEL_41:
          memset(v25, 0, 13);
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          operator new();
        default:
          goto LABEL_41;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v22, "\"tc_sarray\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "\"tc_flexible_type\" is null.");
  set_error(a4);
}

void sub_223E1D9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2)
  {
    if (a28 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception((std::exception_ptr *)&a9);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x223E1D808);
  }
  _Unwind_Resume(exception_object);
}

void tc_binary_op_ff(uint64_t a1, const turi::flexible_type *a2, uint64_t a3, uint64_t *a4)
{
  v9[2] = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    if (a3)
    {
      turi::apply_binary_op_ff((turi *)(a1 + 8), a2, (const char *)(a3 + 8), (uint64_t)v9);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_flexible_type\" is null.");
    set_error(a4);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_flexible_type\" is null.");
  set_error(a4);
}

void sub_223E1DE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, char a19)
{
  if (a2)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    std::current_exception();
    fill_error_from_exception(&a10);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x223E1DDE0);
  }
  _Unwind_Resume(exception_object);
}

void turi::apply_binary_op_ff(turi *this@<X0>, const turi::flexible_type *__s@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v762 = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "==");
    DWORD2(v737) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v738, "!=");
    DWORD2(v739) = 1;
    std::string::basic_string[abi:ne180100]<0>(v740, "<");
    int v741 = 2;
    std::string::basic_string[abi:ne180100]<0>(v742, "<=");
    int v743 = 3;
    std::string::basic_string[abi:ne180100]<0>(v744, ">");
    int v745 = 4;
    std::string::basic_string[abi:ne180100]<0>(v746, ">=");
    int v747 = 5;
    std::string::basic_string[abi:ne180100]<0>(v748, "&&");
    int v749 = 7;
    std::string::basic_string[abi:ne180100]<0>(v750, "||");
    int v751 = 9;
    std::string::basic_string[abi:ne180100]<0>(v752, "+");
    int v753 = 10;
    std::string::basic_string[abi:ne180100]<0>(v754, "-");
    int v755 = 11;
    std::string::basic_string[abi:ne180100]<0>(v756, "*");
    int v757 = 12;
    std::string::basic_string[abi:ne180100]<0>(v758, "/");
    int v759 = 13;
    std::string::basic_string[abi:ne180100]<0>(v760, "%");
    int v761 = 14;
    std::map<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op,std::less<std::string>,std::allocator<std::pair<std::string const,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::map[abi:ne180100]((uint64_t *)__p, 13);
    uint64_t v700 = 52;
    do
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[v700 + 2]) < 0) {
        operator delete(*(void **)((char *)&__str.__r_.__value_.__l.__data_ + v700 * 8));
      }
      v700 -= 4;
    }
    while (v700 * 8);
    __cxa_atexit((void (*)(void *))std::map<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op,std::less<std::string>,std::allocator<std::pair<std::string const,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::~map[abi:ne180100], &turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map, &dword_223D44000);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)__s);
  uint64_t v10 = qword_2680810F8;
  if (!qword_2680810F8) {
    goto LABEL_9;
  }
  uint64_t v11 = &qword_2680810F8;
  do
  {
    BOOL v12 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268081100, (const void **)(v10 + 32), (const void **)__p);
    unsigned int v13 = (uint64_t *)(v10 + 8);
    if (!v12)
    {
      unsigned int v13 = (uint64_t *)v10;
      uint64_t v11 = (uint64_t *)v10;
    }
    uint64_t v10 = *v13;
  }
  while (*v13);
  if (v11 == &qword_2680810F8
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268081100, (const void **)__p, (const void **)v11 + 4))
  {
LABEL_9:
    uint64_t v11 = &qword_2680810F8;
  }
  if (SBYTE7(v737) < 0) {
    operator delete(__p[0]);
  }
  if ((uint64_t *)turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map == v11)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    v701 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Binary operator ", 16);
    size_t v702 = strlen((const char *)__s);
    v703 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v701, (uint64_t)__s, v702);
    v704 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v703, (uint64_t)" not recognized. ", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v704, (uint64_t)"Available operators are ", 24);
    uint64_t v705 = turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map;
    if ((uint64_t *)turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map != &qword_2680810F8)
    {
      do
      {
        int v706 = *(char *)(v705 + 55);
        if (v706 >= 0) {
          uint64_t v707 = v705 + 32;
        }
        else {
          uint64_t v707 = *(void *)(v705 + 32);
        }
        if (v706 >= 0) {
          uint64_t v708 = *(unsigned __int8 *)(v705 + 55);
        }
        else {
          uint64_t v708 = *(void *)(v705 + 40);
        }
        v709 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v707, v708);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v709, (uint64_t)" ", 1);
        v710 = *(uint64_t **)(v705 + 8);
        if (v710)
        {
          do
          {
            v711 = v710;
            v710 = (uint64_t *)*v710;
          }
          while (v710);
        }
        else
        {
          do
          {
            v711 = *(uint64_t **)(v705 + 16);
            BOOL v24 = *v711 == v705;
            uint64_t v705 = (uint64_t)v711;
          }
          while (!v24);
        }
        uint64_t v705 = (uint64_t)v711;
      }
      while (v711 != &qword_2680810F8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, (const std::string *)&v719);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
  switch(*((_DWORD *)v11 + 14))
  {
    case 0:
      switch(a3[12])
      {
        case 0:
          BOOL v14 = 0;
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              goto LABEL_381;
            case 1:
              goto LABEL_633;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_585;
            case 6:
              goto LABEL_626;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          BOOL v14 = 0;
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              goto LABEL_581;
            case 1:
              goto LABEL_635;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_585;
            case 6:
              goto LABEL_629;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          BOOL v14 = 0;
          unsigned int v106 = *((unsigned __int8 *)this + 12);
          if (v106 - 3 < 7 || v106 < 2) {
            goto LABEL_585;
          }
          if (v106 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          uint64_t v107 = *(void *)a3;
          uint64_t v108 = *(void *)this;
          if (*(char *)(*(void *)this + 31) < 0) {
            size_t v109 = *(void *)(v108 + 16);
          }
          else {
            size_t v109 = *(unsigned __int8 *)(*(void *)this + 31);
          }
          if (*(char *)(v107 + 31) < 0) {
            uint64_t v668 = *(void *)(v107 + 16);
          }
          else {
            uint64_t v668 = *(unsigned __int8 *)(v107 + 31);
          }
          if (v109 != v668) {
            goto LABEL_584;
          }
          v669 = (unsigned __int8 *)(v108 + 8);
          if ((*(unsigned char *)(*(void *)this + 31) & 0x80) != 0) {
            v669 = *(unsigned __int8 **)v669;
          }
          v670 = (unsigned __int8 *)(v107 + 8);
          if ((*(unsigned char *)(v107 + 31) & 0x80) != 0) {
            v670 = *(unsigned __int8 **)v670;
          }
          if ((*(unsigned char *)(*(void *)this + 31) & 0x80) != 0) {
            goto LABEL_1678;
          }
          if (!v109) {
            goto LABEL_1460;
          }
          size_t v671 = v109 - 1;
          do
          {
            int v673 = *v669++;
            int v672 = v673;
            int v675 = *v670++;
            int v674 = v675;
            BOOL v195 = v671-- != 0;
            char v676 = v195;
            BOOL v14 = v672 == v674;
          }
          while (v672 == v674 && (v676 & 1) != 0);
          goto LABEL_585;
        case 3:
          unsigned int v114 = *((unsigned __int8 *)this + 12);
          if (v114 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v114 != 3) {
            goto LABEL_584;
          }
          v115 = *(double **)(*(void *)this + 8);
          v116 = *(double **)(*(void *)this + 16);
          unint64_t v117 = v116 - v115;
          v118 = *(double **)(*(void *)a3 + 8);
          if (v117 != (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v118) >> 3) {
            goto LABEL_584;
          }
          if (v116 == v115) {
            goto LABEL_1460;
          }
          if (v117 <= 1) {
            uint64_t v119 = 1;
          }
          else {
            uint64_t v119 = v116 - v115;
          }
          if (*v115 != *v118) {
            goto LABEL_584;
          }
          uint64_t v120 = 1;
          do
          {
            unint64_t v121 = v120;
            if (v119 == v120) {
              break;
            }
            double v122 = v115[v120];
            double v123 = v118[v120++];
          }
          while (v122 == v123);
          goto LABEL_574;
        case 4:
          unsigned int v34 = *((unsigned __int8 *)this + 12);
          if (v34 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v34 == 4) {
            goto LABEL_529;
          }
          goto LABEL_584;
        case 5:
          unsigned int v149 = *((unsigned __int8 *)this + 12);
          if (v149 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v149 == 5) {
            goto LABEL_1593;
          }
          goto LABEL_584;
        case 6:
          BOOL v14 = 0;
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              goto LABEL_587;
            case 1:
              goto LABEL_636;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_585;
            case 6:
              goto LABEL_630;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          unsigned int v124 = *((unsigned __int8 *)this + 12);
          if (v124 >= 0xA) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_576;
        case 8:
          BOOL v14 = 0;
          unsigned int v150 = *((unsigned __int8 *)this + 12);
          if (v150 < 8 || v150 == 9) {
            goto LABEL_585;
          }
          if (v150 != 8) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_593;
        case 9:
          unsigned int v47 = *((unsigned __int8 *)this + 12);
          if (v47 < 9) {
            goto LABEL_584;
          }
          if (v47 != 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          uint64_t v48 = *(void *)a3;
          v49 = *(void **)this;
          if (*(void **)a3 == v49) {
            goto LABEL_1460;
          }
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v49 + 1), v48 + 8)) {
            goto LABEL_584;
          }
          v51 = (char *)v49[3];
          uint64_t v50 = (char *)v49[4];
          uint64_t v52 = v50 - v51;
          if (v50 == v51) {
            goto LABEL_1460;
          }
          if (!v49[1]) {
            goto LABEL_1460;
          }
          uint64_t v53 = 1;
          do
          {
            uint64_t v54 = *(void *)v51;
            v51 += 8;
            v53 *= v54;
          }
          while (v51 != v50);
          if (!v53) {
            goto LABEL_1460;
          }
          v719 = 0;
          std::vector<unsigned long>::vector(__p, v52 >> 3, &v719);
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (1)
      {
        uint64_t v55 = __p[0];
        if (__p[1] == __p[0])
        {
          uint64_t v64 = 0;
          double v65 = *(double *)(*(void *)v49[1] + 8 * v49[9]);
        }
        else
        {
          uint64_t v56 = 0;
          unint64_t v57 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          uint64_t v58 = (uint64_t *)v49[6];
          if (v57 <= 1) {
            unint64_t v57 = 1;
          }
          v59 = (uint64_t *)__p[0];
          unint64_t v60 = v57;
          do
          {
            uint64_t v62 = *v59++;
            uint64_t v61 = v62;
            uint64_t v63 = *v58++;
            v56 += v63 * v61;
            --v60;
          }
          while (v60);
          uint64_t v64 = 0;
          double v65 = *(double *)(*(void *)v49[1] + 8 * (v49[9] + v56));
          v66 = *(uint64_t **)(v48 + 48);
          v67 = (uint64_t *)__p[0];
          do
          {
            uint64_t v69 = *v67++;
            uint64_t v68 = v69;
            uint64_t v70 = *v66++;
            v64 += v70 * v68;
            --v57;
          }
          while (v57);
        }
        double v71 = *(double *)(**(void **)(v48 + 8) + 8 * (*(void *)(v48 + 72) + v64));
        BOOL v14 = v65 == v71;
        if (v65 != v71) {
          goto LABEL_553;
        }
        if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v49 + 1), (uint64_t *)__p))goto LABEL_552; {
      }
        }
    case 1:
      switch(a3[12])
      {
        case 0:
          BOOL v23 = 0;
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              BOOL v24 = *(void *)this == *(void *)a3;
              goto LABEL_359;
            case 1:
              double v146 = *(double *)this;
              uint64_t v147 = *(void *)a3;
              goto LABEL_1462;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_400;
            case 6:
              BOOL v24 = *(void *)a3 == (uint64_t)(*(void *)this << 8) >> 8 && *((_DWORD *)this + 2) == 0;
              goto LABEL_359;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          BOOL v23 = 0;
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              double v146 = *(double *)a3;
              uint64_t v147 = *(void *)this;
LABEL_1462:
              BOOL v24 = v146 == (double)v147;
              goto LABEL_359;
            case 1:
              BOOL v23 = *(double *)this == *(double *)a3;
              goto LABEL_400;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_400;
            case 6:
              double v494 = *(double *)a3;
              double v495 = (double)*((int *)this + 2) / 1000000.0 + (double)((uint64_t)(*(void *)this << 8) >> 8);
              goto LABEL_1522;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          BOOL v23 = 0;
          unsigned int v110 = *((unsigned __int8 *)this + 12);
          if (v110 - 3 < 7 || v110 < 2) {
            goto LABEL_400;
          }
          if (v110 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          uint64_t v111 = *(void *)a3;
          uint64_t v112 = *(void *)this;
          if (*(char *)(*(void *)this + 31) < 0) {
            size_t v113 = *(void *)(v112 + 16);
          }
          else {
            size_t v113 = *(unsigned __int8 *)(*(void *)this + 31);
          }
          if (*(char *)(v111 + 31) < 0) {
            uint64_t v677 = *(void *)(v111 + 16);
          }
          else {
            uint64_t v677 = *(unsigned __int8 *)(v111 + 31);
          }
          if (v113 != v677) {
            goto LABEL_399;
          }
          v678 = (void *)(v112 + 8);
          if ((*(unsigned char *)(*(void *)this + 31) & 0x80) != 0) {
            v678 = (void *)*v678;
          }
          v679 = (void *)(v111 + 8);
          if ((*(unsigned char *)(v111 + 31) & 0x80) != 0) {
            v679 = (void *)*v679;
          }
          if ((*(unsigned char *)(*(void *)this + 31) & 0x80) != 0)
          {
            BOOL v24 = memcmp(v678, v679, v113) == 0;
LABEL_359:
            BOOL v23 = v24;
          }
          else
          {
            if (!v113) {
              goto LABEL_1641;
            }
            size_t v680 = v113 - 1;
            do
            {
              int v682 = *(unsigned __int8 *)v678;
              v678 = (void *)((char *)v678 + 1);
              int v681 = v682;
              int v684 = *(unsigned __int8 *)v679;
              v679 = (void *)((char *)v679 + 1);
              int v683 = v684;
              BOOL v195 = v680-- != 0;
              char v685 = v195;
              BOOL v23 = v681 == v683;
            }
            while (v681 == v683 && (v685 & 1) != 0);
          }
          goto LABEL_400;
        case 3:
          unsigned int v125 = *((unsigned __int8 *)this + 12);
          if (v125 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v125 != 3) {
            goto LABEL_399;
          }
          v126 = *(double **)(*(void *)this + 8);
          v127 = *(double **)(*(void *)this + 16);
          unint64_t v128 = v127 - v126;
          v129 = *(double **)(*(void *)a3 + 8);
          if (v128 != (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v129) >> 3) {
            goto LABEL_399;
          }
          if (v127 == v126) {
            goto LABEL_1641;
          }
          if (v128 <= 1) {
            uint64_t v130 = 1;
          }
          else {
            uint64_t v130 = v127 - v126;
          }
          if (*v126 != *v129) {
            goto LABEL_399;
          }
          uint64_t v131 = 1;
          do
          {
            unint64_t v132 = v131;
            if (v130 == v131) {
              break;
            }
            double v133 = v126[v131];
            double v134 = v129[v131++];
          }
          while (v133 == v134);
          BOOL v23 = v132 >= v128;
          goto LABEL_400;
        case 4:
          unsigned int v38 = *((unsigned __int8 *)this + 12);
          if (v38 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v38 != 4) {
            goto LABEL_399;
          }
          int v39 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)__p, (uint64_t *)(*(void *)this + 8), (void *)(*(void *)a3 + 8));
          goto LABEL_1254;
        case 5:
          unsigned int v151 = *((unsigned __int8 *)this + 12);
          if (v151 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v151 != 5) {
            goto LABEL_399;
          }
          int v39 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)__p, (uint64_t **)(*(void *)this + 8), (uint64_t **)(*(void *)a3 + 8));
          goto LABEL_1254;
        case 6:
          BOOL v23 = 0;
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              BOOL v24 = *(void *)this == (uint64_t)(*(void *)a3 << 8) >> 8 && *((_DWORD *)a3 + 2) == 0;
              goto LABEL_359;
            case 1:
              double v495 = *(double *)this;
              double v494 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8);
LABEL_1522:
              BOOL v23 = vabdd_f64(v495, v494) < 0.0000005;
              goto LABEL_400;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_400;
            case 6:
              BOOL v24 = ((*(void *)a3 ^ *(void *)this) & 0xFFFFFFFFFFFFFFLL) == 0
                 && *((_DWORD *)this + 2) == *((_DWORD *)a3 + 2);
              goto LABEL_359;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          unsigned int v143 = *((unsigned __int8 *)this + 12);
          if (v143 >= 0xA) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          BOOL v24 = v143 == 7;
          goto LABEL_359;
        case 8:
          BOOL v23 = 0;
          unsigned int v160 = *((unsigned __int8 *)this + 12);
          if (v160 < 8 || v160 == 9) {
            goto LABEL_400;
          }
          if (v160 != 8) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          int v39 = turi::image_type::operator==(*(void *)this + 8, *(void *)a3 + 8);
LABEL_1254:
          BOOL v23 = v39;
          goto LABEL_400;
        case 9:
          unsigned int v81 = *((unsigned __int8 *)this + 12);
          if (v81 < 9) {
            goto LABEL_399;
          }
          if (v81 != 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          uint64_t v82 = *(void *)a3;
          v83 = *(void **)this;
          if (*(void **)a3 == v83) {
            goto LABEL_1641;
          }
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v83 + 1), v82 + 8))
          {
LABEL_399:
            BOOL v23 = 0;
            goto LABEL_400;
          }
          v85 = (char *)v83[3];
          v84 = (char *)v83[4];
          uint64_t v86 = v84 - v85;
          if (v84 == v85) {
            goto LABEL_1641;
          }
          if (!v83[1]) {
            goto LABEL_1641;
          }
          uint64_t v87 = 1;
          do
          {
            uint64_t v88 = *(void *)v85;
            v85 += 8;
            v87 *= v88;
          }
          while (v85 != v84);
          if (!v87)
          {
LABEL_1641:
            BOOL v23 = 1;
            goto LABEL_400;
          }
          v719 = 0;
          std::vector<unsigned long>::vector(__p, v86 >> 3, &v719);
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (1)
      {
        v89 = __p[0];
        if (__p[1] == __p[0])
        {
          uint64_t v98 = 0;
          double v99 = *(double *)(*(void *)v83[1] + 8 * v83[9]);
        }
        else
        {
          uint64_t v90 = 0;
          unint64_t v91 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v92 = (uint64_t *)v83[6];
          if (v91 <= 1) {
            unint64_t v91 = 1;
          }
          v93 = (uint64_t *)__p[0];
          unint64_t v94 = v91;
          do
          {
            uint64_t v96 = *v93++;
            uint64_t v95 = v96;
            uint64_t v97 = *v92++;
            v90 += v97 * v95;
            --v94;
          }
          while (v94);
          uint64_t v98 = 0;
          double v99 = *(double *)(*(void *)v83[1] + 8 * (v83[9] + v90));
          v100 = *(uint64_t **)(v82 + 48);
          v101 = (uint64_t *)__p[0];
          do
          {
            uint64_t v103 = *v101++;
            uint64_t v102 = v103;
            uint64_t v104 = *v100++;
            v98 += v104 * v102;
            --v91;
          }
          while (v91);
        }
        double v105 = *(double *)(**(void **)(v82 + 8) + 8 * (*(void *)(v82 + 72) + v98));
        BOOL v23 = v99 == v105;
        if (v99 != v105) {
          break;
        }
        if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v83 + 1), (uint64_t *)__p))
        {
          v89 = __p[0];
          break;
        }
      }
      if (v89)
      {
        __p[1] = v89;
        operator delete(v89);
      }
LABEL_400:
      uint64_t v16 = !v23;
LABEL_656:
      *(unsigned char *)(a4 + 12) = 0;
      goto LABEL_1602;
    case 2:
      switch(a3[12])
      {
        case 0:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              BOOL v22 = *(void *)this < *(void *)a3;
              goto LABEL_1149;
            case 1:
              double v35 = *(double *)this;
              uint64_t v36 = *(void *)a3;
              goto LABEL_1307;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            case 6:
              BOOL v17 = *(void *)a3 <= (uint64_t)(*(void *)this << 8) >> 8;
              goto LABEL_1444;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              double v144 = *(double *)a3;
              uint64_t v145 = *(void *)this;
              goto LABEL_1037;
            case 1:
              double v35 = *(double *)this;
              double v588 = *(double *)a3;
              goto LABEL_1309;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            case 6:
              uint64_t v530 = *(void *)this;
              int v531 = *((_DWORD *)this + 2);
              double v529 = *(double *)a3;
              goto LABEL_1438;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
            case 1:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            case 2:
              unsigned int v309 = std::string::compare[abi:ne180100]((const void **)(*(void *)this + 8), (unsigned char *)(*(void *)a3 + 8)) >> 31;
              goto LABEL_1601;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 3:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            case 3:
              v565 = *(double **)(*(void *)this + 8);
              v566 = *(double **)(*(void *)a3 + 8);
              unint64_t v567 = (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v566) >> 3;
              unint64_t v568 = (uint64_t)(*(void *)(*(void *)this + 16) - (void)v565) >> 3;
              if (*(double **)(*(void *)this + 16) == v565) {
                goto LABEL_1228;
              }
              if (v568 <= 1) {
                uint64_t v569 = 1;
              }
              else {
                uint64_t v569 = (uint64_t)(*(void *)(*(void *)this + 16) - (void)v565) >> 3;
              }
              uint64_t v570 = (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v566) >> 3;
              break;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return;
        case 4:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            case 4:
              unsigned int v309 = turi::flexible_type_impl::lt_operator::operator()(v9, (uint64_t)__p, (uint64_t *)(*(void *)this + 8), (void *)(*(void *)a3 + 8));
              goto LABEL_1601;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 5:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_424;
        case 6:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              BOOL v22 = *(void *)this < (uint64_t)(*(void *)a3 << 8) >> 8;
              goto LABEL_1149;
            case 1:
              double v528 = *(double *)this;
              uint64_t v526 = *(void *)a3;
              int v527 = *((_DWORD *)a3 + 2);
              goto LABEL_1443;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            case 6:
              uint64_t v664 = (uint64_t)(*(void *)this << 8) >> 8;
              if (v664 < (uint64_t)(*(void *)a3 << 8) >> 8) {
                goto LABEL_1510;
              }
              if (v664 != (uint64_t)(*(void *)a3 << 8) >> 8) {
                goto LABEL_1600;
              }
              BOOL v22 = *((_DWORD *)this + 2) < *((_DWORD *)a3 + 2);
              break;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_1149;
        case 7:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_424;
        case 8:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_424;
        case 9:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_424;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (v570 && *v565 <= *v566)
      {
        if (*v565 < *v566) {
          goto LABEL_1510;
        }
        --v570;
        ++v565;
        ++v566;
        if (!--v569)
        {
LABEL_1228:
          unsigned int v309 = v568 < v567;
          goto LABEL_1601;
        }
      }
      goto LABEL_1600;
    case 3:
      switch(a3[12])
      {
        case 0:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              if (*(void *)this < *(void *)a3) {
                goto LABEL_1460;
              }
              goto LABEL_379;
            case 1:
              double v479 = *(double *)this;
              double v480 = (double)*(uint64_t *)a3;
              goto LABEL_1355;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_378;
            case 6:
              if (*(void *)a3 > (uint64_t)(*(void *)this << 8) >> 8) {
                goto LABEL_1460;
              }
              goto LABEL_379;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              if (*(double *)a3 > (double)*(uint64_t *)this) {
                goto LABEL_1460;
              }
              goto LABEL_379;
            case 1:
              double v479 = *(double *)this;
              double v480 = *(double *)a3;
LABEL_1355:
              if (v479 < v480) {
                goto LABEL_1460;
              }
              goto LABEL_379;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_378;
            case 6:
              if ((double)*((int *)this + 2) / 1000000.0 + (double)((uint64_t)(*(void *)this << 8) >> 8) < *(double *)a3) {
                goto LABEL_1460;
              }
              goto LABEL_379;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v37 = *((unsigned __int8 *)this + 12);
          if (v37 - 3 < 7 || v37 < 2) {
            goto LABEL_378;
          }
          if (v37 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if ((std::string::compare[abi:ne180100]((const void **)(*(void *)this + 8), (unsigned char *)(*(void *)a3 + 8)) & 0x80000000) != 0)goto LABEL_1460; {
          goto LABEL_379;
          }
        case 3:
          unsigned int v74 = *((unsigned __int8 *)this + 12);
          if (v74 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v74 != 3) {
            goto LABEL_378;
          }
          v75 = *(double **)(*(void *)this + 8);
          v76 = *(double **)(*(void *)a3 + 8);
          unint64_t v77 = (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v76) >> 3;
          unint64_t v78 = (uint64_t)(*(void *)(*(void *)this + 16) - (void)v75) >> 3;
          if (*(double **)(*(void *)this + 16) == v75) {
            goto LABEL_231;
          }
          if (v78 <= 1) {
            uint64_t v79 = 1;
          }
          else {
            uint64_t v79 = (uint64_t)(*(void *)(*(void *)this + 16) - (void)v75) >> 3;
          }
          uint64_t v80 = (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v76) >> 3;
          break;
        case 4:
          unsigned int v32 = *((unsigned __int8 *)this + 12);
          if (v32 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v32 != 4) {
            goto LABEL_378;
          }
          if (turi::flexible_type_impl::lt_operator::operator()(v9, (uint64_t)__p, (uint64_t *)(*(void *)this + 8), (void *)(*(void *)a3 + 8)))
          {
            goto LABEL_1460;
          }
          goto LABEL_379;
        case 5:
          if (*((unsigned __int8 *)this + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_378;
        case 6:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              if (*(void *)this < (uint64_t)(*(void *)a3 << 8) >> 8) {
                goto LABEL_1460;
              }
              goto LABEL_379;
            case 1:
              if ((double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8) > *(double *)this) {
                goto LABEL_1460;
              }
              goto LABEL_379;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_378;
            case 6:
              uint64_t v493 = (uint64_t)(*(void *)this << 8) >> 8;
              if (v493 < (uint64_t)(*(void *)a3 << 8) >> 8
                || v493 == (uint64_t)(*(void *)a3 << 8) >> 8 && *((_DWORD *)this + 2) < *((_DWORD *)a3 + 2))
              {
                goto LABEL_1460;
              }
              goto LABEL_379;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          if (*((unsigned __int8 *)this + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_378;
        case 8:
          if (*((unsigned __int8 *)this + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_378;
        case 9:
          if (*((unsigned __int8 *)this + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
LABEL_378:
          turi::flexible_type_fail(0);
          goto LABEL_379;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (v80 && *v75 <= *v76)
      {
        if (*v75 < *v76) {
          goto LABEL_1460;
        }
        --v80;
        ++v75;
        ++v76;
        if (!--v79)
        {
LABEL_231:
          if (v78 < v77) {
            goto LABEL_1460;
          }
          break;
        }
      }
LABEL_379:
      switch(a3[12])
      {
        case 0:
          BOOL v14 = 0;
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              goto LABEL_381;
            case 1:
              goto LABEL_633;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_585;
            case 6:
              goto LABEL_626;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          BOOL v14 = 0;
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              goto LABEL_581;
            case 1:
              goto LABEL_635;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_585;
            case 6:
              goto LABEL_629;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v194 = *((unsigned __int8 *)this + 12);
          BOOL v195 = v194 - 3 >= 7 && v194 >= 2;
          if (!v195) {
            goto LABEL_584;
          }
          if (v194 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          uint64_t v196 = *(void *)a3;
          uint64_t v197 = *(void *)this;
          size_t v109 = *(char *)(*(void *)this + 31) < 0
               ? *(void *)(v197 + 16)
               : *(unsigned __int8 *)(*(void *)this + 31);
          uint64_t v686 = *(char *)(v196 + 31) < 0 ? *(void *)(v196 + 16) : *(unsigned __int8 *)(v196 + 31);
          if (v109 != v686) {
            goto LABEL_584;
          }
          v669 = (unsigned __int8 *)(v197 + 8);
          if ((*(unsigned char *)(*(void *)this + 31) & 0x80) != 0) {
            v669 = *(unsigned __int8 **)v669;
          }
          v670 = (unsigned __int8 *)(v196 + 8);
          if ((*(unsigned char *)(v196 + 31) & 0x80) != 0) {
            v670 = *(unsigned __int8 **)v670;
          }
          if ((*(unsigned char *)(*(void *)this + 31) & 0x80) != 0) {
            goto LABEL_1678;
          }
          if (!v109) {
            goto LABEL_1460;
          }
          size_t v687 = v109 - 1;
          do
          {
            int v689 = *v669++;
            int v688 = v689;
            int v691 = *v670++;
            int v690 = v691;
            BOOL v195 = v687-- != 0;
            char v692 = v195;
            BOOL v14 = v688 == v690;
          }
          while (v688 == v690 && (v692 & 1) != 0);
          goto LABEL_585;
        case 3:
          unsigned int v198 = *((unsigned __int8 *)this + 12);
          if (v198 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v198 != 3) {
            goto LABEL_584;
          }
          v199 = *(double **)(*(void *)this + 8);
          v200 = *(double **)(*(void *)this + 16);
          unint64_t v117 = v200 - v199;
          v201 = *(double **)(*(void *)a3 + 8);
          if (v117 != (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v201) >> 3) {
            goto LABEL_584;
          }
          if (v200 == v199) {
            goto LABEL_1460;
          }
          if (v117 <= 1) {
            uint64_t v202 = 1;
          }
          else {
            uint64_t v202 = v200 - v199;
          }
          if (*v199 != *v201) {
            goto LABEL_584;
          }
          uint64_t v203 = 1;
          do
          {
            unint64_t v121 = v203;
            if (v202 == v203) {
              break;
            }
            double v204 = v199[v203];
            double v205 = v201[v203++];
          }
          while (v204 == v205);
          goto LABEL_574;
        case 4:
          unsigned int v169 = *((unsigned __int8 *)this + 12);
          if (v169 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v169 == 4) {
            goto LABEL_529;
          }
          goto LABEL_584;
        case 5:
          unsigned int v206 = *((unsigned __int8 *)this + 12);
          if (v206 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v206 == 5) {
            goto LABEL_1593;
          }
          goto LABEL_584;
        case 6:
          BOOL v14 = 0;
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              goto LABEL_587;
            case 1:
              goto LABEL_636;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_585;
            case 6:
              goto LABEL_630;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          unsigned int v124 = *((unsigned __int8 *)this + 12);
          if (v124 >= 0xA) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_576;
        case 8:
          unsigned int v207 = *((unsigned __int8 *)this + 12);
          if (v207 < 8 || v207 == 9) {
            goto LABEL_584;
          }
          if (v207 != 8) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_593;
        case 9:
          unsigned int v170 = *((unsigned __int8 *)this + 12);
          if (v170 < 9) {
            goto LABEL_584;
          }
          if (v170 != 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          uint64_t v171 = *(void *)a3;
          v172 = *(void **)this;
          if (*(void **)a3 == v172) {
            goto LABEL_1460;
          }
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v172 + 1), v171 + 8)) {
            goto LABEL_584;
          }
          v174 = (char *)v172[3];
          v173 = (char *)v172[4];
          uint64_t v175 = v173 - v174;
          if (v173 == v174) {
            goto LABEL_1460;
          }
          if (!v172[1]) {
            goto LABEL_1460;
          }
          uint64_t v176 = 1;
          do
          {
            uint64_t v177 = *(void *)v174;
            v174 += 8;
            v176 *= v177;
          }
          while (v174 != v173);
          if (!v176) {
            goto LABEL_1460;
          }
          v719 = 0;
          std::vector<unsigned long>::vector(__p, v175 >> 3, &v719);
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (1)
      {
        uint64_t v55 = __p[0];
        if (__p[1] == __p[0])
        {
          uint64_t v186 = 0;
          double v187 = *(double *)(*(void *)v172[1] + 8 * v172[9]);
        }
        else
        {
          uint64_t v178 = 0;
          unint64_t v179 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v180 = (uint64_t *)v172[6];
          if (v179 <= 1) {
            unint64_t v179 = 1;
          }
          v181 = (uint64_t *)__p[0];
          unint64_t v182 = v179;
          do
          {
            uint64_t v184 = *v181++;
            uint64_t v183 = v184;
            uint64_t v185 = *v180++;
            v178 += v185 * v183;
            --v182;
          }
          while (v182);
          uint64_t v186 = 0;
          double v187 = *(double *)(*(void *)v172[1] + 8 * (v172[9] + v178));
          v188 = *(uint64_t **)(v171 + 48);
          v189 = (uint64_t *)__p[0];
          do
          {
            uint64_t v191 = *v189++;
            uint64_t v190 = v191;
            uint64_t v192 = *v188++;
            v186 += v192 * v190;
            --v179;
          }
          while (v179);
        }
        double v193 = *(double *)(**(void **)(v171 + 8) + 8 * (*(void *)(v171 + 72) + v186));
        BOOL v14 = v187 == v193;
        if (v187 != v193) {
          goto LABEL_553;
        }
        if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v172 + 1), (uint64_t *)__p))
        {
LABEL_552:
          uint64_t v55 = __p[0];
          goto LABEL_553;
        }
      }
    case 4:
      switch(a3[12])
      {
        case 0:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              BOOL v17 = *(void *)this <= *(void *)a3;
              goto LABEL_1444;
            case 1:
              double v144 = *(double *)this;
              uint64_t v145 = *(void *)a3;
LABEL_1037:
              double v483 = (double)v145;
              goto LABEL_1039;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            case 6:
              BOOL v22 = *(void *)a3 < (uint64_t)(*(void *)this << 8) >> 8;
LABEL_1149:
              unsigned int v309 = v22;
              goto LABEL_1601;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              double v35 = *(double *)a3;
              uint64_t v36 = *(void *)this;
LABEL_1307:
              double v588 = (double)v36;
LABEL_1309:
              BOOL v589 = v35 < v588;
              goto LABEL_1439;
            case 1:
              double v144 = *(double *)this;
              double v483 = *(double *)a3;
LABEL_1039:
              BOOL v17 = v144 <= v483;
              goto LABEL_1444;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            case 6:
              uint64_t v526 = *(void *)this;
              int v527 = *((_DWORD *)this + 2);
              double v528 = *(double *)a3;
LABEL_1443:
              BOOL v17 = (double)v527 / 1000000.0 + (double)(v526 << 8 >> 8) <= v528;
              goto LABEL_1444;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
            case 1:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            case 2:
              unsigned int v309 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*(void *)a3 + 8), (void *)(*(void *)this + 8));
              goto LABEL_1601;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 3:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            case 3:
              v465 = *(double **)(*(void *)this + 8);
              v466 = *(double **)(*(void *)a3 + 8);
              unint64_t v467 = (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v466) >> 3;
              unint64_t v468 = (uint64_t)(*(void *)(*(void *)this + 16) - (void)v465) >> 3;
              if (*(double **)(*(void *)this + 16) == v465) {
                goto LABEL_967;
              }
              if (v468 <= 1) {
                uint64_t v469 = 1;
              }
              else {
                uint64_t v469 = (uint64_t)(*(void *)(*(void *)this + 16) - (void)v465) >> 3;
              }
              uint64_t v470 = (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v466) >> 3;
              break;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return;
        case 4:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            case 4:
              unsigned int v309 = turi::flexible_type_impl::gt_operator::operator()(v9, (uint64_t)__p, (uint64_t *)(*(void *)this + 8), (void *)(*(void *)a3 + 8));
              goto LABEL_1601;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 5:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_424;
        case 6:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              BOOL v17 = *(void *)this <= (uint64_t)(*(void *)a3 << 8) >> 8;
              goto LABEL_1444;
            case 1:
              double v529 = *(double *)this;
              uint64_t v530 = *(void *)a3;
              int v531 = *((_DWORD *)a3 + 2);
LABEL_1438:
              BOOL v589 = (double)v531 / 1000000.0 + (double)(v530 << 8 >> 8) < v529;
LABEL_1439:
              unsigned int v309 = v589;
              goto LABEL_1601;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            case 6:
              uint64_t v587 = (uint64_t)(*(void *)this << 8) >> 8;
              if (v587 > (uint64_t)(*(void *)a3 << 8) >> 8) {
                goto LABEL_1510;
              }
              if (v587 != (uint64_t)(*(void *)a3 << 8) >> 8) {
                goto LABEL_1600;
              }
              BOOL v17 = *((_DWORD *)this + 2) <= *((_DWORD *)a3 + 2);
LABEL_1444:
              unsigned int v309 = !v17;
              break;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_1601;
        case 7:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_424;
        case 8:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_424;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_424;
        case 9:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
LABEL_424:
          turi::flexible_type_fail(0);
          goto LABEL_1600;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (2)
      {
        if (v470 && *v465 <= *v466)
        {
          if (*v465 >= *v466)
          {
            --v470;
            ++v465;
            ++v466;
            if (!--v469)
            {
LABEL_967:
              unsigned int v309 = v468 > v467;
              break;
            }
            continue;
          }
LABEL_1600:
          unsigned int v309 = 0;
        }
        else
        {
LABEL_1510:
          unsigned int v309 = 1;
        }
        break;
      }
LABEL_1601:
      *(unsigned char *)(a4 + 12) = 0;
      uint64_t v16 = v309;
      goto LABEL_1602;
    case 5:
      switch(a3[12])
      {
        case 0:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              if (*(void *)this > *(void *)a3) {
                goto LABEL_1460;
              }
              goto LABEL_337;
            case 1:
              double v435 = *(double *)this;
              double v436 = (double)*(uint64_t *)a3;
              goto LABEL_1287;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_336;
            case 6:
              if (*(void *)a3 < (uint64_t)(*(void *)this << 8) >> 8) {
                goto LABEL_1460;
              }
              goto LABEL_337;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              if (*(double *)a3 < (double)*(uint64_t *)this) {
                goto LABEL_1460;
              }
              goto LABEL_337;
            case 1:
              double v435 = *(double *)this;
              double v436 = *(double *)a3;
LABEL_1287:
              if (v435 > v436) {
                goto LABEL_1460;
              }
              goto LABEL_337;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_336;
            case 6:
              if ((double)*((int *)this + 2) / 1000000.0 + (double)((uint64_t)(*(void *)this << 8) >> 8) > *(double *)a3) {
                goto LABEL_1460;
              }
              goto LABEL_337;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v33 = *((unsigned __int8 *)this + 12);
          if (v33 - 3 < 7 || v33 < 2) {
            goto LABEL_336;
          }
          if (v33 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          BOOL v31 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*(void *)a3 + 8), (void *)(*(void *)this + 8));
          goto LABEL_133;
        case 3:
          unsigned int v40 = *((unsigned __int8 *)this + 12);
          if (v40 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v40 != 3) {
            goto LABEL_336;
          }
          v41 = *(double **)(*(void *)this + 8);
          uint64_t v42 = *(double **)(*(void *)a3 + 8);
          unint64_t v43 = (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v42) >> 3;
          unint64_t v44 = (uint64_t)(*(void *)(*(void *)this + 16) - (void)v41) >> 3;
          if (*(double **)(*(void *)this + 16) == v41) {
            goto LABEL_177;
          }
          if (v44 <= 1) {
            uint64_t v45 = 1;
          }
          else {
            uint64_t v45 = (uint64_t)(*(void *)(*(void *)this + 16) - (void)v41) >> 3;
          }
          uint64_t v46 = (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v42) >> 3;
          break;
        case 4:
          unsigned int v30 = *((unsigned __int8 *)this + 12);
          if (v30 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v30 != 4) {
            goto LABEL_336;
          }
          BOOL v31 = turi::flexible_type_impl::gt_operator::operator()(v9, (uint64_t)__p, (uint64_t *)(*(void *)this + 8), (void *)(*(void *)a3 + 8));
LABEL_133:
          if (v31) {
            goto LABEL_1460;
          }
          goto LABEL_337;
        case 5:
          if (*((unsigned __int8 *)this + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_336;
        case 6:
          switch(*((unsigned char *)this + 12))
          {
            case 0:
              if (*(void *)this > (uint64_t)(*(void *)a3 << 8) >> 8) {
                goto LABEL_1460;
              }
              goto LABEL_337;
            case 1:
              if ((double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8) < *(double *)this) {
                goto LABEL_1460;
              }
              goto LABEL_337;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_336;
            case 6:
              uint64_t v484 = (uint64_t)(*(void *)this << 8) >> 8;
              if (v484 > (uint64_t)(*(void *)a3 << 8) >> 8
                || v484 == (uint64_t)(*(void *)a3 << 8) >> 8 && *((_DWORD *)this + 2) > *((_DWORD *)a3 + 2))
              {
                goto LABEL_1460;
              }
              goto LABEL_337;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          if (*((unsigned __int8 *)this + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_336;
        case 8:
          if (*((unsigned __int8 *)this + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_336;
        case 9:
          if (*((unsigned __int8 *)this + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
LABEL_336:
          turi::flexible_type_fail(0);
          goto LABEL_337;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return;
    case 7:
      switch(*((unsigned char *)this + 12))
      {
        case 0:
          uint64_t v25 = *(void *)this;
          goto LABEL_596;
        case 1:
          uint64_t v25 = (uint64_t)*(double *)this;
          goto LABEL_596;
        case 2:
          uint64_t v135 = *(void *)this;
          v136 = (char **)(*(void *)this + 8);
          size_t __idx = 0;
          v137 = (char *)v136;
          if (*(char *)(v135 + 31) < 0) {
            v137 = *v136;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, v137);
          uint64_t v25 = std::stoll(&__str, &__idx, 10);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (*(char *)(v135 + 31) < 0) {
            uint64_t v138 = *(void *)(v135 + 16);
          }
          else {
            uint64_t v138 = *(unsigned __int8 *)(v135 + 31);
          }
          if (__idx != v138)
          {
            v713 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v714 = std::string::append(&v733, " cannot be interpreted as an integer");
            long long v715 = *(_OWORD *)&v714->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v714->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v715;
            v714->__r_.__value_.__l.__size_ = 0;
            v714->__r_.__value_.__r.__words[2] = 0;
            v714->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v713, &__str);
            __cxa_throw(v713, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_596;
        case 3:
          uint64_t v72 = *(void *)this;
          v731 = 0;
          uint64_t v732 = 0;
          v730 = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v730, *(const void **)(v72 + 8), *(void *)(v72 + 16), (uint64_t)(*(void *)(v72 + 16) - *(void *)(v72 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (v730)
          {
            v731 = v730;
            operator delete(v730);
          }
          break;
        case 4:
          uint64_t v152 = *(void *)this;
          uint64_t v728 = 0;
          uint64_t v729 = 0;
          uint64_t v727 = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v727, *(uint64_t **)(v152 + 8), *(uint64_t **)(v152 + 16), (uint64_t)(*(void *)(v152 + 16) - *(void *)(v152 + 8)) >> 4);
          turi::flexible_type_fail(0);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v727;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          break;
        case 5:
          uint64_t v158 = *(void *)this;
          uint64_t v725 = 0;
          uint64_t v726 = 0;
          uint64_t v724 = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v724, *(uint64_t **)(v158 + 8), *(uint64_t **)(v158 + 16), (uint64_t)(*(void *)(v158 + 16) - *(void *)(v158 + 8)) >> 5);
          turi::flexible_type_fail(0);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v724;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          break;
        case 6:
          uint64_t v25 = (uint64_t)(*(void *)this << 8) >> 8;
LABEL_596:
          if (v25)
          {
            uint64_t v251 = 0;
            switch(a3[12])
            {
              case 0:
                goto LABEL_610;
              case 1:
                goto LABEL_611;
              case 2:
                uint64_t v252 = *(void *)a3;
                v253 = (char **)(*(void *)a3 + 8);
                __str.__r_.__value_.__r.__words[0] = 0;
                v254 = (char *)v253;
                if (*(char *)(v252 + 31) < 0) {
                  v254 = *v253;
                }
                std::string::basic_string[abi:ne180100]<0>(__p, v254);
                uint64_t v251 = std::stoll((const std::string *)__p, (size_t *)&__str, 10);
                if (SBYTE7(v737) < 0) {
                  operator delete(__p[0]);
                }
                if (*(char *)(v252 + 31) < 0) {
                  uint64_t v255 = *(void *)(v252 + 16);
                }
                else {
                  uint64_t v255 = *(unsigned __int8 *)(v252 + 31);
                }
                if (__str.__r_.__value_.__r.__words[0] != v255)
                {
                  v665 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v666 = std::string::append((std::string *)&v719, " cannot be interpreted as an integer");
                  long long v667 = *(_OWORD *)&v666->__r_.__value_.__l.__data_;
                  *(void *)&long long v737 = *((void *)&v666->__r_.__value_.__l + 2);
                  *(_OWORD *)std::string __p = v667;
                  v666->__r_.__value_.__l.__size_ = 0;
                  v666->__r_.__value_.__r.__words[2] = 0;
                  v666->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v665, (const std::string *)__p);
                  __cxa_throw(v665, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                }
                goto LABEL_655;
              case 3:
                uint64_t v272 = *(void *)a3;
                __p[1] = 0;
                *(void *)&long long v737 = 0;
                __p[0] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v272 + 8), *(void *)(v272 + 16), (uint64_t)(*(void *)(v272 + 16) - *(void *)(v272 + 8)) >> 3);
                turi::flexible_type_fail(0);
                goto LABEL_642;
              case 4:
                uint64_t v273 = *(void *)a3;
                __p[1] = 0;
                *(void *)&long long v737 = 0;
                __p[0] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v273 + 8), *(uint64_t **)(v273 + 16), (uint64_t)(*(void *)(v273 + 16) - *(void *)(v273 + 8)) >> 4);
                turi::flexible_type_fail(0);
                goto LABEL_647;
              case 5:
                uint64_t v274 = *(void *)a3;
                __p[1] = 0;
                *(void *)&long long v737 = 0;
                __p[0] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v274 + 8), *(uint64_t **)(v274 + 16), (uint64_t)(*(void *)(v274 + 16) - *(void *)(v274 + 8)) >> 5);
                turi::flexible_type_fail(0);
                goto LABEL_649;
              case 6:
                goto LABEL_612;
              case 7:
                goto LABEL_655;
              case 8:
                uint64_t v275 = *(void *)a3;
                v276 = *(atomic_uint **)(*(void *)a3 + 16);
                __p[0] = *(void **)(*(void *)a3 + 8);
                __p[1] = v276;
                if (v276) {
                  atomic_fetch_add_explicit(v276 + 2, 1u, memory_order_relaxed);
                }
                long long v277 = *(_OWORD *)(v275 + 24);
                long long v278 = *(_OWORD *)(v275 + 56);
                long long v738 = *(_OWORD *)(v275 + 40);
                long long v739 = v278;
                long long v737 = v277;
                turi::flexible_type_fail(0);
                goto LABEL_653;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a3 + 8);
                turi::flexible_type_fail(0);
                goto LABEL_645;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          }
          return;
        case 7:
          break;
        case 8:
          uint64_t v161 = *(void *)this;
          v162 = *(atomic_uint **)(*(void *)this + 16);
          v719 = *(void ***)(*(void *)this + 8);
          v720 = v162;
          if (v162) {
            atomic_fetch_add_explicit(v162 + 2, 1u, memory_order_relaxed);
          }
          long long v163 = *(_OWORD *)(v161 + 24);
          long long v164 = *(_OWORD *)(v161 + 56);
          long long v722 = *(_OWORD *)(v161 + 40);
          long long v723 = v164;
          long long v721 = v163;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v720);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)this + 8);
          turi::flexible_type_fail(0);
          turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v16 = 0;
      goto LABEL_656;
    case 9:
      switch(*((unsigned char *)this + 12))
      {
        case 0:
          uint64_t v26 = *(void *)this;
          goto LABEL_607;
        case 1:
          uint64_t v26 = (uint64_t)*(double *)this;
          goto LABEL_607;
        case 2:
          uint64_t v139 = *(void *)this;
          v140 = (char **)(*(void *)this + 8);
          size_t __idx = 0;
          v141 = (char *)v140;
          if (*(char *)(v139 + 31) < 0) {
            v141 = *v140;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, v141);
          uint64_t v26 = std::stoll(&__str, &__idx, 10);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (*(char *)(v139 + 31) < 0) {
            uint64_t v142 = *(void *)(v139 + 16);
          }
          else {
            uint64_t v142 = *(unsigned __int8 *)(v139 + 31);
          }
          if (__idx != v142)
          {
            v716 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v717 = std::string::append(&v733, " cannot be interpreted as an integer");
            long long v718 = *(_OWORD *)&v717->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v717->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v718;
            v717->__r_.__value_.__l.__size_ = 0;
            v717->__r_.__value_.__r.__words[2] = 0;
            v717->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v716, &__str);
            __cxa_throw(v716, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_607;
        case 3:
          uint64_t v73 = *(void *)this;
          v731 = 0;
          uint64_t v732 = 0;
          v730 = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v730, *(const void **)(v73 + 8), *(void *)(v73 + 16), (uint64_t)(*(void *)(v73 + 16) - *(void *)(v73 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (v730)
          {
            v731 = v730;
            operator delete(v730);
          }
          goto LABEL_609;
        case 4:
          uint64_t v157 = *(void *)this;
          uint64_t v728 = 0;
          uint64_t v729 = 0;
          uint64_t v727 = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v727, *(uint64_t **)(v157 + 8), *(uint64_t **)(v157 + 16), (uint64_t)(*(void *)(v157 + 16) - *(void *)(v157 + 8)) >> 4);
          turi::flexible_type_fail(0);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v727;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          goto LABEL_609;
        case 5:
          uint64_t v159 = *(void *)this;
          uint64_t v725 = 0;
          uint64_t v726 = 0;
          uint64_t v724 = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v724, *(uint64_t **)(v159 + 8), *(uint64_t **)(v159 + 16), (uint64_t)(*(void *)(v159 + 16) - *(void *)(v159 + 8)) >> 5);
          turi::flexible_type_fail(0);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v724;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          goto LABEL_609;
        case 6:
          uint64_t v26 = (uint64_t)(*(void *)this << 8) >> 8;
LABEL_607:
          if (!v26) {
            goto LABEL_609;
          }
          uint64_t v16 = 1;
          break;
        case 7:
          goto LABEL_609;
        case 8:
          uint64_t v165 = *(void *)this;
          v166 = *(atomic_uint **)(*(void *)this + 16);
          v719 = *(void ***)(*(void *)this + 8);
          v720 = v166;
          if (v166) {
            atomic_fetch_add_explicit(v166 + 2, 1u, memory_order_relaxed);
          }
          long long v167 = *(_OWORD *)(v165 + 24);
          long long v168 = *(_OWORD *)(v165 + 56);
          long long v722 = *(_OWORD *)(v165 + 40);
          long long v723 = v168;
          long long v721 = v167;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v720);
          goto LABEL_609;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)this + 8);
          turi::flexible_type_fail(0);
          turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
LABEL_609:
          uint64_t v251 = 0;
          switch(a3[12])
          {
            case 0:
LABEL_610:
              uint64_t v251 = *(void *)a3;
              goto LABEL_655;
            case 1:
LABEL_611:
              uint64_t v251 = (uint64_t)*(double *)a3;
              goto LABEL_655;
            case 2:
              uint64_t v256 = *(void *)a3;
              v257 = (char **)(*(void *)a3 + 8);
              __str.__r_.__value_.__r.__words[0] = 0;
              v258 = (char *)v257;
              if (*(char *)(v256 + 31) < 0) {
                v258 = *v257;
              }
              std::string::basic_string[abi:ne180100]<0>(__p, v258);
              uint64_t v251 = std::stoll((const std::string *)__p, (size_t *)&__str, 10);
              if (SBYTE7(v737) < 0) {
                operator delete(__p[0]);
              }
              if (*(char *)(v256 + 31) < 0) {
                uint64_t v259 = *(void *)(v256 + 16);
              }
              else {
                uint64_t v259 = *(unsigned __int8 *)(v256 + 31);
              }
              if (__str.__r_.__value_.__r.__words[0] != v259)
              {
                v269 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v270 = std::string::append((std::string *)&v719, " cannot be interpreted as an integer");
                long long v271 = *(_OWORD *)&v270->__r_.__value_.__l.__data_;
                *(void *)&long long v737 = *((void *)&v270->__r_.__value_.__l + 2);
                *(_OWORD *)std::string __p = v271;
                v270->__r_.__value_.__l.__size_ = 0;
                v270->__r_.__value_.__r.__words[2] = 0;
                v270->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v269, (const std::string *)__p);
                __cxa_throw(v269, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              goto LABEL_655;
            case 3:
              uint64_t v261 = *(void *)a3;
              __p[1] = 0;
              *(void *)&long long v737 = 0;
              __p[0] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v261 + 8), *(void *)(v261 + 16), (uint64_t)(*(void *)(v261 + 16) - *(void *)(v261 + 8)) >> 3);
              turi::flexible_type_fail(0);
LABEL_642:
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              goto LABEL_654;
            case 4:
              uint64_t v262 = *(void *)a3;
              __p[1] = 0;
              *(void *)&long long v737 = 0;
              __p[0] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v262 + 8), *(uint64_t **)(v262 + 16), (uint64_t)(*(void *)(v262 + 16) - *(void *)(v262 + 8)) >> 4);
              turi::flexible_type_fail(0);
LABEL_647:
              v719 = __p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v719);
              goto LABEL_654;
            case 5:
              uint64_t v260 = *(void *)a3;
              __p[1] = 0;
              *(void *)&long long v737 = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v260 + 8), *(uint64_t **)(v260 + 16), (uint64_t)(*(void *)(v260 + 16) - *(void *)(v260 + 8)) >> 5);
              turi::flexible_type_fail(0);
LABEL_649:
              v719 = __p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v719);
              goto LABEL_654;
            case 6:
LABEL_612:
              uint64_t v251 = (uint64_t)(*(void *)a3 << 8) >> 8;
              goto LABEL_655;
            case 7:
              goto LABEL_655;
            case 8:
              uint64_t v263 = *(void *)a3;
              v264 = *(atomic_uint **)(*(void *)a3 + 16);
              __p[0] = *(void **)(*(void *)a3 + 8);
              __p[1] = v264;
              if (v264) {
                atomic_fetch_add_explicit(v264 + 2, 1u, memory_order_relaxed);
              }
              long long v265 = *(_OWORD *)(v263 + 24);
              long long v266 = *(_OWORD *)(v263 + 56);
              long long v738 = *(_OWORD *)(v263 + 40);
              long long v739 = v266;
              long long v737 = v265;
              turi::flexible_type_fail(0);
LABEL_653:
              boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
              goto LABEL_654;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a3 + 8);
              turi::flexible_type_fail(0);
LABEL_645:
              turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
LABEL_654:
              uint64_t v251 = 0;
LABEL_655:
              uint64_t v16 = v251 != 0;
              break;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_656;
    case 0xA:
      *(void *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      *(unsigned char *)(a4 + 12) = 0;
      if (this != (turi *)a4)
      {
        *(void *)(a4 + 5) = *(void *)((char *)this + 5);
        *(void *)a4 = *(void *)this;
        unsigned int v28 = *((unsigned __int8 *)this + 12);
        *(unsigned char *)(a4 + 12) = v28;
        if (v28 <= 9 && ((1 << v28) & 0x33C) != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
        }
      }
      switch(a3[12])
      {
        case 0:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
              uint64_t v16 = *(void *)a4 + *(void *)a3;
              goto LABEL_1603;
            case 1:
              double v400 = *(double *)a4 + (double)*(uint64_t *)a3;
              goto LABEL_1506;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              v618 = *(double **)(*(void *)a4 + 8);
              uint64_t v619 = *(void *)(*(void *)a4 + 16) - (void)v618;
              if (v619)
              {
                unint64_t v620 = v619 >> 3;
                double v621 = (double)*(uint64_t *)a3;
                if (v620 <= 1) {
                  unint64_t v620 = 1;
                }
                do
                {
                  double *v618 = *v618 + v621;
                  ++v618;
                  --v620;
                }
                while (v620);
              }
              return;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 6:
              atomic_ullong *volatile v655 = *(atomic_ullong *volatile *)a4;
              uint64_t v656 = *(void *)a4 + *(void *)a3;
              goto LABEL_1496;
            case 7:
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v627 = *(atomic_ullong *volatile *)a4;
              v629 = *(uint64_t **)(*(void *)a4 + 24);
              v628 = *(uint64_t **)(*(void *)a4 + 32);
              if (v628 == v629) {
                return;
              }
              if (!v627[1]) {
                return;
              }
              double v630 = (double)*(uint64_t *)a3;
              uint64_t v631 = 1;
              do
              {
                uint64_t v632 = *v629++;
                v631 *= v632;
              }
              while (v629 != v628);
              if (!v631) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v627 + 1);
              unint64_t v633 = (v627[4] - v627[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v633, &__str);
              do
              {
                v634 = (uint64_t *)__p[0];
                uint64_t v635 = 0;
                if (__p[1] != __p[0])
                {
                  unint64_t v636 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v637 = (uint64_t *)v627[6];
                  if (v636 <= 1) {
                    unint64_t v636 = 1;
                  }
                  do
                  {
                    uint64_t v639 = *v634++;
                    uint64_t v638 = v639;
                    uint64_t v640 = *v637++;
                    v635 += v640 * v638;
                    --v636;
                  }
                  while (v636);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v627 + 1);
                *(double *)(*(void *)v627[1] + 8 * (v627[9] + v635)) = *(double *)(*(void *)v627[1]
                                                                                   + 8 * (v627[9] + v635))
                                                                       + v630;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v627 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
          goto LABEL_1407;
        case 1:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
              double v29 = *(double *)a3 + (double)*(uint64_t *)a4;
              goto LABEL_449;
            case 1:
              double v400 = *(double *)a3 + *(double *)a4;
              goto LABEL_1506;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              v622 = *(double **)(*(void *)a4 + 8);
              uint64_t v623 = *(void *)(*(void *)a4 + 16) - (void)v622;
              if (v623)
              {
                double v624 = *(double *)a3;
                unint64_t v625 = v623 >> 3;
                if (v625 <= 1) {
                  unint64_t v625 = 1;
                }
                do
                {
                  double *v622 = v624 + *v622;
                  ++v622;
                  --v625;
                }
                while (v625);
              }
              return;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 6:
              double v661 = (*(double *)a3 - (double)(uint64_t)floor(*(double *)a3)) * 1000000.0;
              atomic_ullong *volatile v662 = *(atomic_ullong *volatile *)a4;
              unint64_t v663 = *(void *)a4 + vcvtmd_s64_f64(*(double *)a3);
              *(void *)a4 = *(void *)a4 & 0xFF00000000000000 | v663 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v660 = (uint64_t)v661 + *(int *)(a4 + 8);
              if (v660 > 999999)
              {
                *(void *)a4 = (v663 + 1) & 0xFFFFFFFFFFFFFFLL | (unint64_t)v662 & 0xFF00000000000000;
                LODWORD(v660) = v660 - 1000000;
              }
              if (v660 > 0xF423F) {
                turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
              }
              goto LABEL_1500;
            case 7:
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v641 = *(atomic_ullong *volatile *)a4;
              v643 = *(uint64_t **)(*(void *)a4 + 24);
              v642 = *(uint64_t **)(*(void *)a4 + 32);
              if (v642 == v643) {
                return;
              }
              if (!v641[1]) {
                return;
              }
              double v644 = *(double *)a3;
              uint64_t v645 = 1;
              do
              {
                uint64_t v646 = *v643++;
                v645 *= v646;
              }
              while (v643 != v642);
              if (!v645) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v641 + 1);
              unint64_t v647 = (v641[4] - v641[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v647, &__str);
              do
              {
                v648 = (uint64_t *)__p[0];
                uint64_t v649 = 0;
                if (__p[1] != __p[0])
                {
                  unint64_t v650 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v651 = (uint64_t *)v641[6];
                  if (v650 <= 1) {
                    unint64_t v650 = 1;
                  }
                  do
                  {
                    uint64_t v653 = *v648++;
                    uint64_t v652 = v653;
                    uint64_t v654 = *v651++;
                    v649 += v654 * v652;
                    --v650;
                  }
                  while (v650);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v641 + 1);
                *(double *)(*(void *)v641[1] + 8 * (v641[9] + v649)) = v644
                                                                       + *(double *)(*(void *)v641[1]
                                                                                   + 8 * (v641[9] + v649));
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v641 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
          goto LABEL_1407;
        case 2:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              uint64_t v153 = *(void *)a3;
              if (**(void **)a4 != 1) {
                operator new();
              }
              int v154 = *(char *)(v153 + 31);
              if (v154 >= 0) {
                v155 = (const std::string::value_type *)(v153 + 8);
              }
              else {
                v155 = *(const std::string::value_type **)(v153 + 8);
              }
              if (v154 >= 0) {
                std::string::size_type v156 = *(unsigned __int8 *)(v153 + 31);
              }
              else {
                std::string::size_type v156 = *(void *)(v153 + 16);
              }
              std::string::append((std::string *)(*(void *)a4 + 8), v155, v156);
              break;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
          return;
        case 3:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              uint64_t v519 = *(void *)a3;
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v520 = *(atomic_ullong *volatile *)a4;
              turi::flexible_type_fail(*(void *)(*(void *)a4 + 16) - *(void *)(*(void *)a4 + 8) == *(void *)(v519 + 16) - *(void *)(v519 + 8));
              v521 = (double *)v520[1];
              uint64_t v522 = v520[2] - (void)v521;
              if (v522)
              {
                unint64_t v523 = v522 >> 3;
                v524 = *(double **)(v519 + 8);
                if (v523 <= 1) {
                  unint64_t v523 = 1;
                }
                do
                {
                  double v525 = *v524++;
                  double *v521 = v525 + *v521;
                  ++v521;
                  --v523;
                }
                while (v523);
              }
              break;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
          return;
        case 4:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 5:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 6:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 7:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 8:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 9:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              uint64_t v542 = *(void *)a3;
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v543 = *(atomic_ullong *volatile *)a4;
              v544 = (uint64_t *)(*(void *)a4 + 8);
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v544, v542 + 8)) {
                turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
              }
              v546 = (uint64_t *)v543[3];
              v545 = (uint64_t *)v543[4];
              if (v545 == v546) {
                return;
              }
              if (!*v544) {
                return;
              }
              uint64_t v547 = 1;
              do
              {
                uint64_t v548 = *v546++;
                v547 *= v548;
              }
              while (v546 != v545);
              if (!v547) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v544);
              unint64_t v549 = (v543[4] - v543[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v549, &__str);
              do
              {
                v550 = (uint64_t *)__p[0];
                if (__p[1] == __p[0])
                {
                  uint64_t v559 = 0;
                  double v560 = *(double *)(**(void **)(v542 + 8) + 8 * *(void *)(v542 + 72));
                }
                else
                {
                  uint64_t v551 = 0;
                  unint64_t v552 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v553 = *(uint64_t **)(v542 + 48);
                  if (v552 <= 1) {
                    unint64_t v552 = 1;
                  }
                  v554 = (uint64_t *)__p[0];
                  unint64_t v555 = v552;
                  do
                  {
                    uint64_t v557 = *v554++;
                    uint64_t v556 = v557;
                    uint64_t v558 = *v553++;
                    v551 += v558 * v556;
                    --v555;
                  }
                  while (v555);
                  uint64_t v559 = 0;
                  double v560 = *(double *)(**(void **)(v542 + 8) + 8 * (*(void *)(v542 + 72) + v551));
                  v561 = (uint64_t *)v543[6];
                  do
                  {
                    uint64_t v563 = *v550++;
                    uint64_t v562 = v563;
                    uint64_t v564 = *v561++;
                    v559 += v564 * v562;
                    --v552;
                  }
                  while (v552);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v544);
                *(double *)(*(void *)v543[1] + 8 * (v543[9] + v559)) = v560
                                                                       + *(double *)(*(void *)v543[1]
                                                                                   + 8 * (v543[9] + v559));
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v544, (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
          goto LABEL_1407;
        default:
          goto LABEL_1705;
      }
    case 0xB:
      *(void *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      *(unsigned char *)(a4 + 12) = 0;
      if (this != (turi *)a4)
      {
        *(void *)(a4 + 5) = *(void *)((char *)this + 5);
        *(void *)a4 = *(void *)this;
        unsigned int v27 = *((unsigned __int8 *)this + 12);
        *(unsigned char *)(a4 + 12) = v27;
        if (v27 <= 9 && ((1 << v27) & 0x33C) != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
        }
      }
      switch(a3[12])
      {
        case 0:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
              uint64_t v16 = *(void *)a4 - *(void *)a3;
              goto LABEL_1603;
            case 1:
              double v626 = (double)*(uint64_t *)a3;
              goto LABEL_1478;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              v579 = *(double **)(*(void *)a4 + 8);
              uint64_t v580 = *(void *)(*(void *)a4 + 16) - (void)v579;
              if (v580)
              {
                unint64_t v581 = v580 >> 3;
                double v582 = (double)*(uint64_t *)a3;
                if (v581 <= 1) {
                  unint64_t v581 = 1;
                }
                do
                {
                  double *v579 = *v579 - v582;
                  ++v579;
                  --v581;
                }
                while (v581);
              }
              return;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 6:
              atomic_ullong *volatile v655 = *(atomic_ullong *volatile *)a4;
              uint64_t v656 = *(void *)a4 - *(void *)a3;
LABEL_1496:
              *(void *)a4 = (unint64_t)v655 & 0xFF00000000000000 | v656 & 0xFFFFFFFFFFFFFFLL;
              return;
            case 7:
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v590 = *(atomic_ullong *volatile *)a4;
              v592 = *(uint64_t **)(*(void *)a4 + 24);
              v591 = *(uint64_t **)(*(void *)a4 + 32);
              if (v591 == v592) {
                return;
              }
              if (!v590[1]) {
                return;
              }
              double v593 = (double)*(uint64_t *)a3;
              uint64_t v594 = 1;
              do
              {
                uint64_t v595 = *v592++;
                v594 *= v595;
              }
              while (v592 != v591);
              if (!v594) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v590 + 1);
              unint64_t v596 = (v590[4] - v590[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v596, &__str);
              do
              {
                v597 = (uint64_t *)__p[0];
                uint64_t v598 = 0;
                if (__p[1] != __p[0])
                {
                  unint64_t v599 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v600 = (uint64_t *)v590[6];
                  if (v599 <= 1) {
                    unint64_t v599 = 1;
                  }
                  do
                  {
                    uint64_t v602 = *v597++;
                    uint64_t v601 = v602;
                    uint64_t v603 = *v600++;
                    v598 += v603 * v601;
                    --v599;
                  }
                  while (v599);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v590 + 1);
                *(double *)(*(void *)v590[1] + 8 * (v590[9] + v598)) = *(double *)(*(void *)v590[1]
                                                                                   + 8 * (v590[9] + v598))
                                                                       - v593;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v590 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
          goto LABEL_1407;
        case 1:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
              double v29 = (double)*(uint64_t *)a4 - *(double *)a3;
              goto LABEL_449;
            case 1:
              double v626 = *(double *)a3;
LABEL_1478:
              double v400 = *(double *)a4 - v626;
              goto LABEL_1506;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              v583 = *(double **)(*(void *)a4 + 8);
              uint64_t v584 = *(void *)(*(void *)a4 + 16) - (void)v583;
              if (v584)
              {
                double v585 = *(double *)a3;
                unint64_t v586 = v584 >> 3;
                if (v586 <= 1) {
                  unint64_t v586 = 1;
                }
                do
                {
                  double *v583 = *v583 - v585;
                  ++v583;
                  --v586;
                }
                while (v586);
              }
              return;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 6:
              double v657 = (*(double *)a3 - (double)(uint64_t)floor(*(double *)a3)) * 1000000.0;
              atomic_ullong *volatile v658 = *(atomic_ullong *volatile *)a4;
              unint64_t v659 = *(void *)a4 - vcvtmd_s64_f64(*(double *)a3);
              *(void *)a4 = *(void *)a4 & 0xFF00000000000000 | v659 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v660 = *(int *)(a4 + 8) - (uint64_t)v657;
              if (v660 < 0)
              {
                *(void *)a4 = (v659 - 1) & 0xFFFFFFFFFFFFFFLL | (unint64_t)v658 & 0xFF00000000000000;
                LODWORD(v660) = v660 + 1000000;
              }
              if (v660 > 0xF423F) {
                turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
              }
LABEL_1500:
              *(_DWORD *)(a4 + 8) = v660;
              return;
            case 7:
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v604 = *(atomic_ullong *volatile *)a4;
              v606 = *(uint64_t **)(*(void *)a4 + 24);
              v605 = *(uint64_t **)(*(void *)a4 + 32);
              if (v605 == v606) {
                return;
              }
              if (!v604[1]) {
                return;
              }
              double v607 = *(double *)a3;
              uint64_t v608 = 1;
              do
              {
                uint64_t v609 = *v606++;
                v608 *= v609;
              }
              while (v606 != v605);
              if (!v608) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v604 + 1);
              unint64_t v610 = (v604[4] - v604[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v610, &__str);
              do
              {
                v611 = (uint64_t *)__p[0];
                uint64_t v612 = 0;
                if (__p[1] != __p[0])
                {
                  unint64_t v613 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v614 = (uint64_t *)v604[6];
                  if (v613 <= 1) {
                    unint64_t v613 = 1;
                  }
                  do
                  {
                    uint64_t v616 = *v611++;
                    uint64_t v615 = v616;
                    uint64_t v617 = *v614++;
                    v612 += v617 * v615;
                    --v613;
                  }
                  while (v613);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v604 + 1);
                *(double *)(*(void *)v604[1] + 8 * (v604[9] + v612)) = *(double *)(*(void *)v604[1]
                                                                                   + 8 * (v604[9] + v612))
                                                                       - v607;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v604 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
          goto LABEL_1407;
        case 2:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 3:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              uint64_t v486 = *(void *)a3;
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v487 = *(atomic_ullong *volatile *)a4;
              turi::flexible_type_fail(*(void *)(*(void *)a4 + 16) - *(void *)(*(void *)a4 + 8) == *(void *)(v486 + 16) - *(void *)(v486 + 8));
              v488 = (double *)v487[1];
              uint64_t v489 = v487[2] - (void)v488;
              if (v489)
              {
                unint64_t v490 = v489 >> 3;
                v491 = *(double **)(v486 + 8);
                if (v490 <= 1) {
                  unint64_t v490 = 1;
                }
                do
                {
                  double v492 = *v491++;
                  double *v488 = *v488 - v492;
                  ++v488;
                  --v490;
                }
                while (v490);
              }
              break;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
          return;
        case 4:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 5:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 6:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 7:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 8:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 9:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              uint64_t v496 = *(void *)a3;
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v497 = *(atomic_ullong *volatile *)a4;
              v498 = (uint64_t *)(*(void *)a4 + 8);
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v498, v496 + 8)) {
                turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
              }
              v500 = (uint64_t *)v497[3];
              v499 = (uint64_t *)v497[4];
              if (v499 == v500) {
                return;
              }
              if (!*v498) {
                return;
              }
              uint64_t v501 = 1;
              do
              {
                uint64_t v502 = *v500++;
                v501 *= v502;
              }
              while (v500 != v499);
              if (!v501) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v498);
              unint64_t v503 = (v497[4] - v497[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v503, &__str);
              do
              {
                v504 = (uint64_t *)__p[0];
                if (__p[1] == __p[0])
                {
                  uint64_t v513 = 0;
                  double v514 = *(double *)(**(void **)(v496 + 8) + 8 * *(void *)(v496 + 72));
                }
                else
                {
                  uint64_t v505 = 0;
                  unint64_t v506 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v507 = *(uint64_t **)(v496 + 48);
                  if (v506 <= 1) {
                    unint64_t v506 = 1;
                  }
                  v508 = (uint64_t *)__p[0];
                  unint64_t v509 = v506;
                  do
                  {
                    uint64_t v511 = *v508++;
                    uint64_t v510 = v511;
                    uint64_t v512 = *v507++;
                    v505 += v512 * v510;
                    --v509;
                  }
                  while (v509);
                  uint64_t v513 = 0;
                  double v514 = *(double *)(**(void **)(v496 + 8) + 8 * (*(void *)(v496 + 72) + v505));
                  v515 = (uint64_t *)v497[6];
                  do
                  {
                    uint64_t v517 = *v504++;
                    uint64_t v516 = v517;
                    uint64_t v518 = *v515++;
                    v513 += v518 * v516;
                    --v506;
                  }
                  while (v506);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v498);
                *(double *)(*(void *)v497[1] + 8 * (v497[9] + v513)) = *(double *)(*(void *)v497[1]
                                                                                   + 8 * (v497[9] + v513))
                                                                       - v514;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v498, (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
          goto LABEL_1407;
        default:
          goto LABEL_1705;
      }
    case 0xC:
      *(void *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      *(unsigned char *)(a4 + 12) = 0;
      if (this != (turi *)a4)
      {
        *(void *)(a4 + 5) = *(void *)((char *)this + 5);
        *(void *)a4 = *(void *)this;
        unsigned int v15 = *((unsigned __int8 *)this + 12);
        *(unsigned char *)(a4 + 12) = v15;
        if (v15 <= 9 && ((1 << v15) & 0x33C) != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
        }
      }
      switch(a3[12])
      {
        case 0:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
              uint64_t v16 = *(void *)a4 * *(void *)a3;
              goto LABEL_1603;
            case 1:
              double v400 = *(double *)a4 * (double)*(uint64_t *)a3;
              goto LABEL_1506;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              v471 = *(double **)(*(void *)a4 + 8);
              uint64_t v472 = *(void *)(*(void *)a4 + 16) - (void)v471;
              if (v472)
              {
                unint64_t v473 = v472 >> 3;
                double v474 = (double)*(uint64_t *)a3;
                if (v473 <= 1) {
                  unint64_t v473 = 1;
                }
                do
                {
                  double *v471 = *v471 * v474;
                  ++v471;
                  --v473;
                }
                while (v473);
              }
              return;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 6:
            case 7:
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v318 = *(atomic_ullong *volatile *)a4;
              v320 = *(uint64_t **)(*(void *)a4 + 24);
              v319 = *(uint64_t **)(*(void *)a4 + 32);
              if (v319 == v320) {
                return;
              }
              if (!v318[1]) {
                return;
              }
              double v321 = (double)*(uint64_t *)a3;
              uint64_t v322 = 1;
              do
              {
                uint64_t v323 = *v320++;
                v322 *= v323;
              }
              while (v320 != v319);
              if (!v322) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v318 + 1);
              unint64_t v324 = (v318[4] - v318[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v324, &__str);
              do
              {
                v325 = (uint64_t *)__p[0];
                uint64_t v326 = 0;
                if (__p[1] != __p[0])
                {
                  unint64_t v327 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v328 = (uint64_t *)v318[6];
                  if (v327 <= 1) {
                    unint64_t v327 = 1;
                  }
                  do
                  {
                    uint64_t v330 = *v325++;
                    uint64_t v329 = v330;
                    uint64_t v331 = *v328++;
                    v326 += v331 * v329;
                    --v327;
                  }
                  while (v327);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v318 + 1);
                *(double *)(*(void *)v318[1] + 8 * (v318[9] + v326)) = *(double *)(*(void *)v318[1]
                                                                                   + 8 * (v318[9] + v326))
                                                                       * v321;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v318 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
          goto LABEL_1407;
        case 1:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
              double v29 = *(double *)a3 * (double)*(uint64_t *)a4;
              goto LABEL_449;
            case 1:
              double v400 = *(double *)a3 * *(double *)a4;
              goto LABEL_1506;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              v475 = *(double **)(*(void *)a4 + 8);
              uint64_t v476 = *(void *)(*(void *)a4 + 16) - (void)v475;
              if (v476)
              {
                double v477 = *(double *)a3;
                unint64_t v478 = v476 >> 3;
                if (v478 <= 1) {
                  unint64_t v478 = 1;
                }
                do
                {
                  double *v475 = v477 * *v475;
                  ++v475;
                  --v478;
                }
                while (v478);
              }
              return;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 6:
            case 7:
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v332 = *(atomic_ullong *volatile *)a4;
              v334 = *(uint64_t **)(*(void *)a4 + 24);
              v333 = *(uint64_t **)(*(void *)a4 + 32);
              if (v333 == v334) {
                return;
              }
              if (!v332[1]) {
                return;
              }
              double v335 = *(double *)a3;
              uint64_t v336 = 1;
              do
              {
                uint64_t v337 = *v334++;
                v336 *= v337;
              }
              while (v334 != v333);
              if (!v336) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v332 + 1);
              unint64_t v338 = (v332[4] - v332[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v338, &__str);
              do
              {
                v339 = (uint64_t *)__p[0];
                uint64_t v340 = 0;
                if (__p[1] != __p[0])
                {
                  unint64_t v341 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v342 = (uint64_t *)v332[6];
                  if (v341 <= 1) {
                    unint64_t v341 = 1;
                  }
                  do
                  {
                    uint64_t v344 = *v339++;
                    uint64_t v343 = v344;
                    uint64_t v345 = *v342++;
                    v340 += v345 * v343;
                    --v341;
                  }
                  while (v341);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v332 + 1);
                *(double *)(*(void *)v332[1] + 8 * (v332[9] + v340)) = v335
                                                                       * *(double *)(*(void *)v332[1]
                                                                                   + 8 * (v332[9] + v340));
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v332 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
          goto LABEL_1407;
        case 2:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 3:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              uint64_t v279 = *(void *)a3;
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v280 = *(atomic_ullong *volatile *)a4;
              turi::flexible_type_fail(*(void *)(*(void *)a4 + 16) - *(void *)(*(void *)a4 + 8) == *(void *)(v279 + 16) - *(void *)(v279 + 8));
              v281 = (double *)v280[1];
              uint64_t v282 = v280[2] - (void)v281;
              if (v282)
              {
                unint64_t v283 = v282 >> 3;
                v284 = *(double **)(v279 + 8);
                if (v283 <= 1) {
                  unint64_t v283 = 1;
                }
                do
                {
                  double v285 = *v284++;
                  double *v281 = v285 * *v281;
                  ++v281;
                  --v283;
                }
                while (v283);
              }
              break;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
          return;
        case 4:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 5:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 6:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 7:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 8:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 9:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              uint64_t v286 = *(void *)a3;
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v287 = *(atomic_ullong *volatile *)a4;
              v288 = (uint64_t *)(*(void *)a4 + 8);
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v288, v286 + 8)) {
                turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
              }
              v290 = (uint64_t *)v287[3];
              v289 = (uint64_t *)v287[4];
              if (v289 == v290) {
                return;
              }
              if (!*v288) {
                return;
              }
              uint64_t v291 = 1;
              do
              {
                uint64_t v292 = *v290++;
                v291 *= v292;
              }
              while (v290 != v289);
              if (!v291) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v288);
              unint64_t v293 = (v287[4] - v287[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v293, &__str);
              do
              {
                v294 = (uint64_t *)__p[0];
                if (__p[1] == __p[0])
                {
                  uint64_t v303 = 0;
                  double v304 = *(double *)(**(void **)(v286 + 8) + 8 * *(void *)(v286 + 72));
                }
                else
                {
                  uint64_t v295 = 0;
                  unint64_t v296 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v297 = *(uint64_t **)(v286 + 48);
                  if (v296 <= 1) {
                    unint64_t v296 = 1;
                  }
                  v298 = (uint64_t *)__p[0];
                  unint64_t v299 = v296;
                  do
                  {
                    uint64_t v301 = *v298++;
                    uint64_t v300 = v301;
                    uint64_t v302 = *v297++;
                    v295 += v302 * v300;
                    --v299;
                  }
                  while (v299);
                  uint64_t v303 = 0;
                  double v304 = *(double *)(**(void **)(v286 + 8) + 8 * (*(void *)(v286 + 72) + v295));
                  v305 = (uint64_t *)v287[6];
                  do
                  {
                    uint64_t v307 = *v294++;
                    uint64_t v306 = v307;
                    uint64_t v308 = *v305++;
                    v303 += v308 * v306;
                    --v296;
                  }
                  while (v296);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v288);
                *(double *)(*(void *)v287[1] + 8 * (v287[9] + v303)) = v304
                                                                       * *(double *)(*(void *)v287[1]
                                                                                   + 8 * (v287[9] + v303));
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v288, (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
          goto LABEL_1407;
        default:
          goto LABEL_1705;
      }
    case 0xD:
      *(void *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      *(unsigned char *)(a4 + 12) = 0;
      if (this != (turi *)a4)
      {
        *(void *)(a4 + 5) = *(void *)((char *)this + 5);
        *(void *)a4 = *(void *)this;
        unsigned int v20 = *((unsigned __int8 *)this + 12);
        *(unsigned char *)(a4 + 12) = v20;
        if (v20 <= 9 && ((1 << v20) & 0x33C) != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
        }
      }
      switch(a3[12])
      {
        case 0:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
              uint64_t v16 = *(void *)a4 / *(uint64_t *)a3;
              goto LABEL_1603;
            case 1:
              double v485 = (double)*(uint64_t *)a3;
              goto LABEL_1071;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              v571 = *(double **)(*(void *)a4 + 8);
              uint64_t v572 = *(void *)(*(void *)a4 + 16) - (void)v571;
              if (v572)
              {
                unint64_t v573 = v572 >> 3;
                double v574 = (double)*(uint64_t *)a3;
                if (v573 <= 1) {
                  unint64_t v573 = 1;
                }
                do
                {
                  double *v571 = *v571 / v574;
                  ++v571;
                  --v573;
                }
                while (v573);
              }
              return;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 6:
            case 7:
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v437 = *(atomic_ullong *volatile *)a4;
              v439 = *(uint64_t **)(*(void *)a4 + 24);
              v438 = *(uint64_t **)(*(void *)a4 + 32);
              if (v438 == v439) {
                return;
              }
              if (!v437[1]) {
                return;
              }
              double v440 = (double)*(uint64_t *)a3;
              uint64_t v441 = 1;
              do
              {
                uint64_t v442 = *v439++;
                v441 *= v442;
              }
              while (v439 != v438);
              if (!v441) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v437 + 1);
              unint64_t v443 = (v437[4] - v437[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v443, &__str);
              do
              {
                v444 = (uint64_t *)__p[0];
                uint64_t v445 = 0;
                if (__p[1] != __p[0])
                {
                  unint64_t v446 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v447 = (uint64_t *)v437[6];
                  if (v446 <= 1) {
                    unint64_t v446 = 1;
                  }
                  do
                  {
                    uint64_t v449 = *v444++;
                    uint64_t v448 = v449;
                    uint64_t v450 = *v447++;
                    v445 += v450 * v448;
                    --v446;
                  }
                  while (v446);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v437 + 1);
                *(double *)(*(void *)v437[1] + 8 * (v437[9] + v445)) = *(double *)(*(void *)v437[1]
                                                                                   + 8 * (v437[9] + v445))
                                                                       / v440;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v437 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
          goto LABEL_1407;
        case 1:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
              double v29 = (double)*(uint64_t *)a4 / *(double *)a3;
LABEL_449:
              uint64_t v16 = (uint64_t)v29;
              goto LABEL_1603;
            case 1:
              double v485 = *(double *)a3;
LABEL_1071:
              double v400 = *(double *)a4 / v485;
              goto LABEL_1506;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              v575 = *(double **)(*(void *)a4 + 8);
              uint64_t v576 = *(void *)(*(void *)a4 + 16) - (void)v575;
              if (v576)
              {
                double v577 = *(double *)a3;
                unint64_t v578 = v576 >> 3;
                if (v578 <= 1) {
                  unint64_t v578 = 1;
                }
                do
                {
                  double *v575 = *v575 / v577;
                  ++v575;
                  --v578;
                }
                while (v578);
              }
              return;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 6:
            case 7:
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v451 = *(atomic_ullong *volatile *)a4;
              v453 = *(uint64_t **)(*(void *)a4 + 24);
              v452 = *(uint64_t **)(*(void *)a4 + 32);
              if (v452 == v453) {
                return;
              }
              if (!v451[1]) {
                return;
              }
              double v454 = *(double *)a3;
              uint64_t v455 = 1;
              do
              {
                uint64_t v456 = *v453++;
                v455 *= v456;
              }
              while (v453 != v452);
              if (!v455) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v451 + 1);
              unint64_t v457 = (v451[4] - v451[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v457, &__str);
              do
              {
                v458 = (uint64_t *)__p[0];
                uint64_t v459 = 0;
                if (__p[1] != __p[0])
                {
                  unint64_t v460 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v461 = (uint64_t *)v451[6];
                  if (v460 <= 1) {
                    unint64_t v460 = 1;
                  }
                  do
                  {
                    uint64_t v463 = *v458++;
                    uint64_t v462 = v463;
                    uint64_t v464 = *v461++;
                    v459 += v464 * v462;
                    --v460;
                  }
                  while (v460);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v451 + 1);
                *(double *)(*(void *)v451[1] + 8 * (v451[9] + v459)) = *(double *)(*(void *)v451[1]
                                                                                   + 8 * (v451[9] + v459))
                                                                       / v454;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v451 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
          goto LABEL_1407;
        case 2:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 3:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              uint64_t v370 = *(void *)a3;
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v371 = *(atomic_ullong *volatile *)a4;
              turi::flexible_type_fail(*(void *)(*(void *)a4 + 16) - *(void *)(*(void *)a4 + 8) == *(void *)(v370 + 16) - *(void *)(v370 + 8));
              v372 = (double *)v371[1];
              uint64_t v373 = v371[2] - (void)v372;
              if (v373)
              {
                unint64_t v374 = v373 >> 3;
                v375 = *(double **)(v370 + 8);
                if (v374 <= 1) {
                  unint64_t v374 = 1;
                }
                do
                {
                  double v376 = *v375++;
                  double *v372 = *v372 / v376;
                  ++v372;
                  --v374;
                }
                while (v374);
              }
              break;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
          return;
        case 4:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 5:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 6:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 7:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 8:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 9:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              uint64_t v377 = *(void *)a3;
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v378 = *(atomic_ullong *volatile *)a4;
              v379 = (uint64_t *)(*(void *)a4 + 8);
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v379, v377 + 8)) {
                turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
              }
              v381 = (uint64_t *)v378[3];
              v380 = (uint64_t *)v378[4];
              if (v380 == v381) {
                return;
              }
              if (!*v379) {
                return;
              }
              uint64_t v382 = 1;
              do
              {
                uint64_t v383 = *v381++;
                v382 *= v383;
              }
              while (v381 != v380);
              if (!v382) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v379);
              unint64_t v384 = (v378[4] - v378[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v384, &__str);
              do
              {
                v385 = (uint64_t *)__p[0];
                if (__p[1] == __p[0])
                {
                  uint64_t v394 = 0;
                  double v395 = *(double *)(**(void **)(v377 + 8) + 8 * *(void *)(v377 + 72));
                }
                else
                {
                  uint64_t v386 = 0;
                  unint64_t v387 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v388 = *(uint64_t **)(v377 + 48);
                  if (v387 <= 1) {
                    unint64_t v387 = 1;
                  }
                  v389 = (uint64_t *)__p[0];
                  unint64_t v390 = v387;
                  do
                  {
                    uint64_t v392 = *v389++;
                    uint64_t v391 = v392;
                    uint64_t v393 = *v388++;
                    v386 += v393 * v391;
                    --v390;
                  }
                  while (v390);
                  uint64_t v394 = 0;
                  double v395 = *(double *)(**(void **)(v377 + 8) + 8 * (*(void *)(v377 + 72) + v386));
                  v396 = (uint64_t *)v378[6];
                  do
                  {
                    uint64_t v398 = *v385++;
                    uint64_t v397 = v398;
                    uint64_t v399 = *v396++;
                    v394 += v399 * v397;
                    --v387;
                  }
                  while (v387);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v379);
                *(double *)(*(void *)v378[1] + 8 * (v378[9] + v394)) = *(double *)(*(void *)v378[1]
                                                                                   + 8 * (v378[9] + v394))
                                                                       / v395;
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v379, (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
          goto LABEL_1407;
        default:
          goto LABEL_1705;
      }
    case 0xE:
      *(void *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      *(unsigned char *)(a4 + 12) = 0;
      if (this != (turi *)a4)
      {
        *(void *)(a4 + 5) = *(void *)((char *)this + 5);
        *(void *)a4 = *(void *)this;
        unsigned int v18 = *((unsigned __int8 *)this + 12);
        *(unsigned char *)(a4 + 12) = v18;
        if (v18 <= 9 && ((1 << v18) & 0x33C) != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
        }
      }
      switch(a3[12])
      {
        case 0:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
              uint64_t v19 = *(void *)a3;
              goto LABEL_161;
            case 1:
              atomic_ullong *volatile v481 = *(atomic_ullong *volatile *)a4;
              double v482 = (double)*(uint64_t *)a3;
              goto LABEL_1035;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v532 = *(atomic_ullong *volatile *)a4;
              v534 = *(long double **)(*(void *)a4 + 8);
              v533 = (long double *)v532[2];
              if (v533 != v534)
              {
                double v535 = (double)*(uint64_t *)a3;
                if ((unint64_t)(v533 - v534) <= 1) {
                  uint64_t v536 = 1;
                }
                else {
                  uint64_t v536 = v533 - v534;
                }
                do
                {
                  long double *v534 = fmod(*v534, v535);
                  ++v534;
                  --v536;
                }
                while (v536);
              }
              return;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 6:
            case 7:
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v401 = *(atomic_ullong *volatile *)a4;
              v403 = *(uint64_t **)(*(void *)a4 + 24);
              v402 = *(uint64_t **)(*(void *)a4 + 32);
              if (v402 == v403) {
                return;
              }
              if (!v401[1]) {
                return;
              }
              double v404 = (double)*(uint64_t *)a3;
              uint64_t v405 = 1;
              do
              {
                uint64_t v406 = *v403++;
                v405 *= v406;
              }
              while (v403 != v402);
              if (!v405) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v401 + 1);
              unint64_t v407 = (v401[4] - v401[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v407, &__str);
              do
              {
                v408 = (uint64_t *)__p[0];
                uint64_t v409 = 0;
                if (__p[1] != __p[0])
                {
                  unint64_t v410 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v411 = (uint64_t *)v401[6];
                  if (v410 <= 1) {
                    unint64_t v410 = 1;
                  }
                  do
                  {
                    uint64_t v413 = *v408++;
                    uint64_t v412 = v413;
                    uint64_t v414 = *v411++;
                    v409 += v414 * v412;
                    --v410;
                  }
                  while (v410);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v401 + 1);
                v415 = (uint64_t *)v401[1];
                atomic_ullong v416 = v401[9] + v409;
                uint64_t v417 = *v415;
                *(long double *)(v417 + 8 * v416) = fmod(*(long double *)(*v415 + 8 * v416), v404);
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v401 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
          goto LABEL_1407;
        case 1:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
              uint64_t v19 = (uint64_t)*(double *)a3;
LABEL_161:
              uint64_t v16 = *(void *)a4 % v19;
              goto LABEL_1603;
            case 1:
              atomic_ullong *volatile v481 = *(atomic_ullong *volatile *)a4;
              double v482 = *(double *)a3;
LABEL_1035:
              double v400 = fmod(*(long double *)&v481, v482);
LABEL_1506:
              *(double *)a4 = v400;
              return;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v537 = *(atomic_ullong *volatile *)a4;
              v539 = *(long double **)(*(void *)a4 + 8);
              v538 = (long double *)v537[2];
              if (v538 != v539)
              {
                long double v540 = *(double *)a3;
                if ((unint64_t)(v538 - v539) <= 1) {
                  uint64_t v541 = 1;
                }
                else {
                  uint64_t v541 = v538 - v539;
                }
                do
                {
                  long double *v539 = fmod(*v539, v540);
                  ++v539;
                  --v541;
                }
                while (v541);
              }
              return;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 6:
            case 7:
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v418 = *(atomic_ullong *volatile *)a4;
              v420 = *(uint64_t **)(*(void *)a4 + 24);
              v419 = *(uint64_t **)(*(void *)a4 + 32);
              if (v419 == v420) {
                return;
              }
              if (!v418[1]) {
                return;
              }
              long double v421 = *(double *)a3;
              uint64_t v422 = 1;
              do
              {
                uint64_t v423 = *v420++;
                v422 *= v423;
              }
              while (v420 != v419);
              if (!v422) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v418 + 1);
              unint64_t v424 = (v418[4] - v418[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v424, &__str);
              do
              {
                v425 = (uint64_t *)__p[0];
                uint64_t v426 = 0;
                if (__p[1] != __p[0])
                {
                  unint64_t v427 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v428 = (uint64_t *)v418[6];
                  if (v427 <= 1) {
                    unint64_t v427 = 1;
                  }
                  do
                  {
                    uint64_t v430 = *v425++;
                    uint64_t v429 = v430;
                    uint64_t v431 = *v428++;
                    v426 += v431 * v429;
                    --v427;
                  }
                  while (v427);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v418 + 1);
                v432 = (uint64_t *)v418[1];
                atomic_ullong v433 = v418[9] + v426;
                uint64_t v434 = *v432;
                *(long double *)(v434 + 8 * v433) = fmod(*(long double *)(*v432 + 8 * v433), v421);
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v418 + 1), (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
          goto LABEL_1407;
        case 2:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 3:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              uint64_t v310 = *(void *)a3;
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v311 = *(atomic_ullong *volatile *)a4;
              turi::flexible_type_fail(*(void *)(*(void *)a4 + 16) - *(void *)(*(void *)a4 + 8) == *(void *)(v310 + 16) - *(void *)(v310 + 8));
              v312 = (long double *)v311[1];
              uint64_t v313 = v311[2] - (void)v312;
              if (v313)
              {
                unint64_t v314 = v313 >> 3;
                v315 = *(double **)(v310 + 8);
                if (v314 <= 1) {
                  uint64_t v316 = 1;
                }
                else {
                  uint64_t v316 = v314;
                }
                do
                {
                  long double v317 = *v315++;
                  long double *v312 = fmod(*v312, v317);
                  ++v312;
                  --v316;
                }
                while (v316);
              }
              break;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
          return;
        case 4:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 5:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 6:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 7:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 8:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 9:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            default:
              goto LABEL_1705;
          }
        case 9:
          switch(*(unsigned char *)(a4 + 12))
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_1592;
            case 2:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 3:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 4:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 5:
              if (**(void **)a4 != 1) {
                operator new();
              }
              goto LABEL_1592;
            case 8:
              if (**(void **)a4 != 1) {
                operator new();
              }
LABEL_1592:
              turi::flexible_type_fail(0);
              return;
            case 9:
              uint64_t v346 = *(void *)a3;
              if (**(void **)a4 != 1) {
                operator new();
              }
              atomic_ullong *volatile v347 = *(atomic_ullong *volatile *)a4;
              v348 = (uint64_t *)(*(void *)a4 + 8);
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v348, v346 + 8)) {
                turi::flexible_type_impl::ndarray<double>::operator%=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
              }
              v350 = (uint64_t *)v347[3];
              v349 = (uint64_t *)v347[4];
              if (v349 == v350) {
                return;
              }
              if (!*v348) {
                return;
              }
              uint64_t v351 = 1;
              do
              {
                uint64_t v352 = *v350++;
                v351 *= v352;
              }
              while (v350 != v349);
              if (!v351) {
                return;
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v348);
              unint64_t v353 = (v347[4] - v347[3]) >> 3;
              __str.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::vector(__p, v353, &__str);
              do
              {
                v354 = (uint64_t *)__p[0];
                uint64_t v355 = 0;
                if (__p[1] != __p[0])
                {
                  unint64_t v356 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v357 = (uint64_t *)v347[6];
                  if (v356 <= 1) {
                    unint64_t v356 = 1;
                  }
                  do
                  {
                    uint64_t v359 = *v354++;
                    uint64_t v358 = v359;
                    uint64_t v360 = *v357++;
                    v355 += v360 * v358;
                    --v356;
                  }
                  while (v356);
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v348);
                v361 = (uint64_t *)__p[0];
                if (__p[1] == __p[0])
                {
                  uint64_t v362 = 0;
                }
                else
                {
                  uint64_t v362 = 0;
                  unint64_t v363 = ((char *)__p[1] - (char *)__p[0]) >> 3;
                  v364 = *(uint64_t **)(v346 + 48);
                  if (v363 <= 1) {
                    unint64_t v363 = 1;
                  }
                  do
                  {
                    uint64_t v366 = *v361++;
                    uint64_t v365 = v366;
                    uint64_t v367 = *v364++;
                    v362 += v367 * v365;
                    --v363;
                  }
                  while (v363);
                }
                atomic_ullong v368 = v347[9] + v355;
                uint64_t v369 = *(void *)v347[1];
                *(long double *)(v369 + 8 * v368) = fmod(*(long double *)(v369 + 8 * v368), *(long double *)(**(void **)(v346 + 8)+ 8 * (*(void *)(v346 + 72) + v362)));
              }
              while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v348, (uint64_t *)__p));
              break;
            default:
              goto LABEL_1705;
          }
LABEL_1407:
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          break;
        default:
LABEL_1705:
          turi::flexible_type_fail(0);
          __break(1u);
          break;
      }
      return;
    default:
      *(void *)a4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      *(unsigned char *)(a4 + 12) = 0;
      if ((uint64_t *)a4 != &turi::FLEX_UNDEFINED)
      {
        *(void *)(a4 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
        *(void *)a4 = turi::FLEX_UNDEFINED;
        int v21 = byte_26808107C;
        *(unsigned char *)(a4 + 12) = byte_26808107C;
        switch(v21)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
            break;
          default:
            return;
        }
      }
      return;
  }
  do
  {
    if (!v46 || *v41 > *v42) {
      goto LABEL_1460;
    }
    if (*v41 < *v42) {
      goto LABEL_337;
    }
    --v46;
    ++v41;
    ++v42;
    --v45;
  }
  while (v45);
LABEL_177:
  if (v44 > v43)
  {
LABEL_1460:
    BOOL v14 = 1;
    goto LABEL_585;
  }
LABEL_337:
  switch(a3[12])
  {
    case 0:
      BOOL v14 = 0;
      switch(*((unsigned char *)this + 12))
      {
        case 0:
LABEL_381:
          BOOL v148 = *(void *)this == *(void *)a3;
          goto LABEL_577;
        case 1:
LABEL_633:
          double v247 = *(double *)this;
          uint64_t v248 = *(void *)a3;
          goto LABEL_634;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_585;
        case 6:
LABEL_626:
          BOOL v148 = *(void *)a3 == (uint64_t)(*(void *)this << 8) >> 8 && *((_DWORD *)this + 2) == 0;
          goto LABEL_577;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      BOOL v14 = 0;
      switch(*((unsigned char *)this + 12))
      {
        case 0:
LABEL_581:
          double v247 = *(double *)a3;
          uint64_t v248 = *(void *)this;
LABEL_634:
          BOOL v148 = v247 == (double)v248;
          goto LABEL_577;
        case 1:
LABEL_635:
          BOOL v14 = *(double *)this == *(double *)a3;
          goto LABEL_585;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_585;
        case 6:
LABEL_629:
          double v267 = *(double *)a3;
          double v268 = (double)*((int *)this + 2) / 1000000.0 + (double)((uint64_t)(*(void *)this << 8) >> 8);
          goto LABEL_637;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v235 = *((unsigned __int8 *)this + 12);
      if (v235 - 3 < 7 || v235 < 2) {
        goto LABEL_584;
      }
      if (v235 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v237 = *(void *)a3;
      uint64_t v238 = *(void *)this;
      size_t v109 = *(char *)(*(void *)this + 31) < 0
           ? *(void *)(v238 + 16)
           : *(unsigned __int8 *)(*(void *)this + 31);
      uint64_t v693 = *(char *)(v237 + 31) < 0 ? *(void *)(v237 + 16) : *(unsigned __int8 *)(v237 + 31);
      if (v109 != v693) {
        goto LABEL_584;
      }
      v669 = (unsigned __int8 *)(v238 + 8);
      if ((*(unsigned char *)(*(void *)this + 31) & 0x80) != 0) {
        v669 = *(unsigned __int8 **)v669;
      }
      v670 = (unsigned __int8 *)(v237 + 8);
      if ((*(unsigned char *)(v237 + 31) & 0x80) != 0) {
        v670 = *(unsigned __int8 **)v670;
      }
      if ((*(unsigned char *)(*(void *)this + 31) & 0x80) != 0)
      {
LABEL_1678:
        BOOL v148 = memcmp(v669, v670, v109) == 0;
LABEL_577:
        BOOL v14 = v148;
      }
      else
      {
        if (!v109) {
          goto LABEL_1460;
        }
        size_t v694 = v109 - 1;
        do
        {
          int v696 = *v669++;
          int v695 = v696;
          int v698 = *v670++;
          int v697 = v698;
          BOOL v195 = v694-- != 0;
          char v699 = v195;
          BOOL v14 = v695 == v697;
        }
        while (v695 == v697 && (v699 & 1) != 0);
      }
      goto LABEL_585;
    case 3:
      unsigned int v239 = *((unsigned __int8 *)this + 12);
      if (v239 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v239 != 3) {
        goto LABEL_584;
      }
      v240 = *(double **)(*(void *)this + 8);
      v241 = *(double **)(*(void *)this + 16);
      unint64_t v117 = v241 - v240;
      v242 = *(double **)(*(void *)a3 + 8);
      if (v117 != (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v242) >> 3) {
        goto LABEL_584;
      }
      if (v241 == v240) {
        goto LABEL_1460;
      }
      if (v117 <= 1) {
        uint64_t v243 = 1;
      }
      else {
        uint64_t v243 = v241 - v240;
      }
      if (*v240 != *v242) {
        goto LABEL_584;
      }
      uint64_t v244 = 1;
      do
      {
        unint64_t v121 = v244;
        if (v243 == v244) {
          break;
        }
        double v245 = v240[v244];
        double v246 = v242[v244++];
      }
      while (v245 == v246);
LABEL_574:
      BOOL v14 = v121 >= v117;
      goto LABEL_585;
    case 4:
      unsigned int v209 = *((unsigned __int8 *)this + 12);
      if (v209 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v209 != 4) {
        goto LABEL_584;
      }
LABEL_529:
      int v210 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)__p, (uint64_t *)(*(void *)this + 8), (void *)(*(void *)a3 + 8));
      goto LABEL_1594;
    case 5:
      unsigned int v249 = *((unsigned __int8 *)this + 12);
      if (v249 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v249 != 5) {
        goto LABEL_584;
      }
LABEL_1593:
      int v210 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)__p, (uint64_t **)(*(void *)this + 8), (uint64_t **)(*(void *)a3 + 8));
      goto LABEL_1594;
    case 6:
      BOOL v14 = 0;
      switch(*((unsigned char *)this + 12))
      {
        case 0:
LABEL_587:
          BOOL v148 = *(void *)this == (uint64_t)(*(void *)a3 << 8) >> 8 && *((_DWORD *)a3 + 2) == 0;
          goto LABEL_577;
        case 1:
LABEL_636:
          double v268 = *(double *)this;
          double v267 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8);
LABEL_637:
          BOOL v14 = vabdd_f64(v268, v267) < 0.0000005;
          goto LABEL_585;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_585;
        case 6:
LABEL_630:
          BOOL v148 = ((*(void *)a3 ^ *(void *)this) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)this + 2) == *((_DWORD *)a3 + 2);
          goto LABEL_577;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v124 = *((unsigned __int8 *)this + 12);
      if (v124 >= 0xA) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
LABEL_576:
      BOOL v148 = v124 == 7;
      goto LABEL_577;
    case 8:
      BOOL v14 = 0;
      unsigned int v250 = *((unsigned __int8 *)this + 12);
      if (v250 < 8 || v250 == 9) {
        goto LABEL_585;
      }
      if (v250 != 8) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
LABEL_593:
      int v210 = turi::image_type::operator==(*(void *)this + 8, *(void *)a3 + 8);
LABEL_1594:
      BOOL v14 = v210;
      goto LABEL_585;
    case 9:
      unsigned int v211 = *((unsigned __int8 *)this + 12);
      if (v211 < 9) {
        goto LABEL_584;
      }
      if (v211 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v212 = *(void *)a3;
      v213 = *(void **)this;
      if (*(void **)a3 == v213) {
        goto LABEL_1460;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v213 + 1), v212 + 8))
      {
LABEL_584:
        BOOL v14 = 0;
        goto LABEL_585;
      }
      v215 = (char *)v213[3];
      v214 = (char *)v213[4];
      uint64_t v216 = v214 - v215;
      if (v214 == v215) {
        goto LABEL_1460;
      }
      if (!v213[1]) {
        goto LABEL_1460;
      }
      uint64_t v217 = 1;
      do
      {
        uint64_t v218 = *(void *)v215;
        v215 += 8;
        v217 *= v218;
      }
      while (v215 != v214);
      if (!v217) {
        goto LABEL_1460;
      }
      v719 = 0;
      std::vector<unsigned long>::vector(__p, v216 >> 3, &v719);
      while (1)
      {
        uint64_t v55 = __p[0];
        if (__p[1] == __p[0])
        {
          uint64_t v227 = 0;
          double v228 = *(double *)(*(void *)v213[1] + 8 * v213[9]);
        }
        else
        {
          uint64_t v219 = 0;
          unint64_t v220 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v221 = (uint64_t *)v213[6];
          if (v220 <= 1) {
            unint64_t v220 = 1;
          }
          v222 = (uint64_t *)__p[0];
          unint64_t v223 = v220;
          do
          {
            uint64_t v225 = *v222++;
            uint64_t v224 = v225;
            uint64_t v226 = *v221++;
            v219 += v226 * v224;
            --v223;
          }
          while (v223);
          uint64_t v227 = 0;
          double v228 = *(double *)(*(void *)v213[1] + 8 * (v213[9] + v219));
          v229 = *(uint64_t **)(v212 + 48);
          v230 = (uint64_t *)__p[0];
          do
          {
            uint64_t v232 = *v230++;
            uint64_t v231 = v232;
            uint64_t v233 = *v229++;
            v227 += v233 * v231;
            --v220;
          }
          while (v220);
        }
        double v234 = *(double *)(**(void **)(v212 + 8) + 8 * (*(void *)(v212 + 72) + v227));
        BOOL v14 = v228 == v234;
        if (v228 != v234) {
          break;
        }
        if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v213 + 1), (uint64_t *)__p))goto LABEL_552; {
      }
        }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
LABEL_553:
  if (v55)
  {
    __p[1] = v55;
    operator delete(v55);
  }
LABEL_585:
  *(unsigned char *)(a4 + 12) = 0;
  uint64_t v16 = v14;
LABEL_1602:
  *(_DWORD *)(a4 + 8) = 0;
LABEL_1603:
  *(void *)a4 = v16;
}

void sub_223E287D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v49 = 416;
  while (1)
  {
    if (*(char *)(v47 + v49 - 9) < 0) {
      operator delete(*(void **)(v47 + v49 - 32));
    }
    v49 -= 32;
    if (!v49)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t tc_ft_unary_op(uint64_t a1, char *__s, uint64_t *a3)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tc_flexible_type\" is null.");
    set_error(a3);
  }
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "-");
    int v99 = 0;
    std::string::basic_string[abi:ne180100]<0>(v100, "abs");
    int v101 = 1;
    std::string::basic_string[abi:ne180100]<0>(v102, "!");
    int v103 = 2;
    std::map<std::string,turi::unary_op>::map[abi:ne180100]((uint64_t)&turi::apply_unary_op<turi::flexible_type>(turi::flexible_type const&,char const*)::_op_map, (const void **)&__p, 3);
    for (uint64_t i = 0; i != -12; i -= 4)
    {
      if (SHIBYTE(v102[i + 2]) < 0) {
        operator delete((void *)v102[i]);
      }
    }
    __cxa_atexit((void (*)(void *))std::map<std::string,turi::unary_op>::~map[abi:ne180100], &turi::apply_unary_op<turi::flexible_type>(turi::flexible_type const&,char const*)::_op_map, &dword_223D44000);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&turi::apply_unary_op<turi::flexible_type>(turi::flexible_type const&,char const*)::_op_map, (const void **)&__p);
  if (v98 < 0) {
    operator delete(__p);
  }
  if (turi::apply_unary_op<turi::flexible_type>(turi::flexible_type const&,char const*)::_op_map == v6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    uint64_t v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unary operator ", 15);
    size_t v81 = strlen(__s);
    uint64_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)__s, v81);
    v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)" not recognized. ", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Available operators are ", 24);
    uint64_t v84 = turi::apply_unary_op<turi::flexible_type>(turi::flexible_type const&,char const*)::_op_map;
    if ((_UNKNOWN *)turi::apply_unary_op<turi::flexible_type>(turi::flexible_type const&,char const*)::_op_map != &unk_268081118)
    {
      do
      {
        int v85 = *(char *)(v84 + 55);
        if (v85 >= 0) {
          uint64_t v86 = v84 + 32;
        }
        else {
          uint64_t v86 = *(void *)(v84 + 32);
        }
        if (v85 >= 0) {
          uint64_t v87 = *(unsigned __int8 *)(v84 + 55);
        }
        else {
          uint64_t v87 = *(void *)(v84 + 40);
        }
        uint64_t v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, v86, v87);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)" ", 1);
        v89 = *(void **)(v84 + 8);
        if (v89)
        {
          do
          {
            uint64_t v90 = v89;
            v89 = (void *)*v89;
          }
          while (v89);
        }
        else
        {
          do
          {
            uint64_t v90 = *(void **)(v84 + 16);
            BOOL v14 = *v90 == v84;
            uint64_t v84 = (uint64_t)v90;
          }
          while (!v14);
        }
        uint64_t v84 = (uint64_t)v90;
      }
      while (v90 != (void *)&unk_268081118);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v93);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
  uint64_t v7 = (atomic_ullong **)(a1 + 8);
  int v8 = *(_DWORD *)(v6 + 56);
  if (v8 != 2)
  {
    if (v8)
    {
      memset(v95, 0, 13);
      if (v7 != v95)
      {
        *(atomic_ullong **)((char *)v95 + 5) = *(atomic_ullong **)(a1 + 13);
        v95[0] = *v7;
        BYTE4(v95[1]) = *(unsigned char *)(a1 + 20);
        switch(BYTE4(v95[1]))
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            atomic_fetch_add(v95[0], 1uLL);
            break;
          default:
            goto LABEL_142;
        }
      }
      goto LABEL_142;
    }
    int64_t v9 = *(void *)(a1 + 8);
    unsigned int v10 = *(unsigned __int8 *)(a1 + 20);
    int v11 = *(_DWORD *)(a1 + 16);
    unint64_t v12 = v9;
    switch(v10)
    {
      case 0u:
        unint64_t v12 = -v9;
        goto LABEL_22;
      case 1u:
        unint64_t v12 = v9 ^ 0x8000000000000000;
LABEL_22:
        v95[0] = (atomic_ullong *)v12;
        LODWORD(v95[1]) = v11;
        unsigned int v15 = v10;
        BYTE4(v95[1]) = v10;
        goto LABEL_75;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 8u:
      case 9u:
        atomic_fetch_add((atomic_ullong *volatile)v9, 1uLL);
        unint64_t v12 = v9;
        switch(v10)
        {
          case 2u:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_40;
          case 3u:
            if (*(void *)v9 != 1) {
              operator new();
            }
            unint64_t v12 = v9;
            uint64_t v16 = *(double **)(v9 + 8);
            uint64_t v17 = *(void *)(v9 + 16) - (void)v16;
            if (!v17) {
              goto LABEL_69;
            }
            unint64_t v18 = v17 >> 3;
            if (v18 <= 1) {
              unint64_t v18 = 1;
            }
            do
            {
              *uint64_t v16 = -*v16;
              ++v16;
              --v18;
            }
            while (v18);
            goto LABEL_72;
          case 4u:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_40;
          case 5u:
            if (*(void *)v9 != 1) {
              operator new();
            }
            goto LABEL_40;
          case 6u:
          case 7u:
            goto LABEL_71;
          case 8u:
            if (*(void *)v9 != 1) {
              operator new();
            }
LABEL_40:
            unint64_t v12 = v9;
            goto LABEL_71;
          case 9u:
            if (*(void *)v9 != 1) {
              operator new();
            }
            unint64_t v12 = v9;
            unsigned int v20 = *(uint64_t **)(v9 + 24);
            uint64_t v19 = *(uint64_t **)(v9 + 32);
            if (v19 == v20 || !*(void *)(v9 + 8))
            {
LABEL_69:
              v95[0] = (atomic_ullong *)v12;
              LODWORD(v95[1]) = v11;
              BYTE4(v95[1]) = v10;
            }
            else
            {
              uint64_t v21 = 1;
              do
              {
                uint64_t v22 = *v20++;
                v21 *= v22;
              }
              while (v20 != v19);
              if (v21)
              {
                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v9 + 8));
                unint64_t v23 = (uint64_t)(*(void *)(v9 + 32) - *(void *)(v9 + 24)) >> 3;
                uint64_t v94 = 0;
                std::vector<unsigned long>::vector(&__p, v23, &v94);
                BOOL v24 = (char *)__p;
                uint64_t v25 = v97;
                do
                {
                  uint64_t v26 = 0;
                  uint64_t v27 = v25 - v24;
                  if (v27)
                  {
                    unint64_t v28 = v27 >> 3;
                    double v29 = *(uint64_t **)(v12 + 48);
                    if (v28 <= 1) {
                      unint64_t v28 = 1;
                    }
                    do
                    {
                      uint64_t v31 = *(void *)v24;
                      v24 += 8;
                      uint64_t v30 = v31;
                      uint64_t v32 = *v29++;
                      v26 += v32 * v30;
                      --v28;
                    }
                    while (v28);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v12 + 8));
                  *(double *)(**(void **)(v12 + 8) + 8 * (*(void *)(v12 + 72) + v26)) = -*(double *)(**(void **)(v12 + 8) + 8 * (*(void *)(v12 + 72) + v26));
                  BOOL v24 = (char *)__p;
                  uint64_t v25 = v97;
                  uint64_t v33 = (v97 - (unsigned char *)__p) >> 3;
                  uint64_t v34 = v33 - 1;
                  if (v97 - (unsigned char *)__p >= 1)
                  {
                    uint64_t v35 = *(void *)(v12 + 24);
                    unint64_t v36 = *((void *)__p + v34) + 1;
                    *((void *)__p + v34) = v36;
                    if (v36 >= *(void *)(v35 + 8 * v34))
                    {
                      unsigned int v37 = (unint64_t *)&v24[8 * v33 - 16];
                      uint64_t v38 = v35 - 16;
                      do
                      {
                        uint64_t v39 = v33 - 1;
                        v37[1] = 0;
                        if (v33 - 1 <= 0) {
                          goto LABEL_67;
                        }
                        unint64_t v40 = *v37 + 1;
                        *v37-- = v40;
                        unint64_t v41 = *(void *)(v38 + 8 * v33--);
                      }
                      while (v40 >= v41);
                      uint64_t v34 = v39 - 1;
                    }
                    uint64_t v33 = 1;
                  }
                }
                while ((v34 & 0x8000000000000000) == 0 && v33);
LABEL_67:
                if (v24)
                {
                  uint64_t v97 = v24;
                  operator delete(v24);
                }
              }
LABEL_72:
              v95[0] = (atomic_ullong *)v12;
              LODWORD(v95[1]) = v11;
              BYTE4(v95[1]) = v10;
              if (v10 > 9)
              {
                unsigned int v15 = v10;
                goto LABEL_75;
              }
              unsigned int v15 = v10;
              if (((1 << v10) & 0x33C) == 0)
              {
LABEL_75:
                switch(v15)
                {
                  case 0u:
                  case 6u:
                    goto LABEL_116;
                  case 1u:
                    *(double *)uint64_t v95 = *(double *)v95 + 0.0;
                    goto LABEL_116;
                  case 2u:
                    if (*v95[0] != 1) {
                      operator new();
                    }
                    goto LABEL_115;
                  case 3u:
                    if (*v95[0] != 1) {
                      operator new();
                    }
                    v66 = (double *)v95[0][1];
                    uint64_t v67 = v95[0][2] - (void)v66;
                    if (v67)
                    {
                      unint64_t v68 = v67 >> 3;
                      if (v68 <= 1) {
                        unint64_t v68 = 1;
                      }
                      do
                      {
                        double *v66 = *v66 + 0.0;
                        ++v66;
                        --v68;
                      }
                      while (v68);
                    }
                    goto LABEL_116;
                  case 4u:
                    if (*v95[0] != 1) {
                      operator new();
                    }
                    goto LABEL_115;
                  case 5u:
                    if (*v95[0] != 1) {
                      operator new();
                    }
                    goto LABEL_115;
                  case 7u:
                    goto LABEL_115;
                  case 8u:
                    if (*v95[0] != 1) {
                      operator new();
                    }
LABEL_115:
                    turi::flexible_type_fail(0);
                    goto LABEL_116;
                  case 9u:
                    if (*v95[0] != 1) {
                      operator new();
                    }
                    uint64_t v42 = v95[0];
                    unint64_t v44 = (uint64_t *)v95[0][3];
                    atomic_ullong v43 = v95[0][4];
                    if ((uint64_t *)v43 == v44) {
                      goto LABEL_116;
                    }
                    if (!v95[0][1]) {
                      goto LABEL_116;
                    }
                    uint64_t v45 = 1;
                    do
                    {
                      uint64_t v46 = *v44++;
                      v45 *= v46;
                    }
                    while (v44 != (uint64_t *)v43);
                    if (!v45) {
                      goto LABEL_116;
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique(v95[0] + 1);
                    unint64_t v47 = (v42[4] - v42[3]) >> 3;
                    uint64_t v94 = 0;
                    std::vector<unsigned long>::vector(&__p, v47, &v94);
                    uint64_t v48 = (char *)__p;
                    uint64_t v49 = v97;
                    break;
                  default:
                    uint64_t result = turi::flexible_type_fail(0);
                    goto LABEL_166;
                }
                do
                {
                  uint64_t v50 = 0;
                  uint64_t v51 = v49 - v48;
                  if (v51)
                  {
                    unint64_t v52 = v51 >> 3;
                    uint64_t v53 = (uint64_t *)v42[6];
                    if (v52 <= 1) {
                      unint64_t v52 = 1;
                    }
                    do
                    {
                      uint64_t v55 = *(void *)v48;
                      v48 += 8;
                      uint64_t v54 = v55;
                      uint64_t v56 = *v53++;
                      v50 += v56 * v54;
                      --v52;
                    }
                    while (v52);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v42 + 1);
                  *(double *)(*(void *)v42[1] + 8 * (v42[9] + v50)) = *(double *)(*(void *)v42[1]
                                                                                  + 8 * (v42[9] + v50))
                                                                      + 0.0;
                  uint64_t v48 = (char *)__p;
                  uint64_t v49 = v97;
                  uint64_t v57 = (v97 - (unsigned char *)__p) >> 3;
                  uint64_t v58 = v57 - 1;
                  if (v97 - (unsigned char *)__p >= 1)
                  {
                    atomic_ullong v59 = v42[3];
                    unint64_t v60 = *((void *)__p + v58) + 1;
                    *((void *)__p + v58) = v60;
                    if (v60 >= *(void *)(v59 + 8 * v58))
                    {
                      uint64_t v61 = (unint64_t *)&v48[8 * v57 - 16];
                      atomic_ullong v62 = v59 - 16;
                      do
                      {
                        uint64_t v63 = v57 - 1;
                        v61[1] = 0;
                        if (v57 - 1 <= 0) {
                          goto LABEL_101;
                        }
                        unint64_t v64 = *v61 + 1;
                        *v61-- = v64;
                        unint64_t v65 = *(void *)(v62 + 8 * v57--);
                      }
                      while (v64 >= v65);
                      uint64_t v58 = v63 - 1;
                    }
                    uint64_t v57 = 1;
                  }
                }
                while ((v58 & 0x8000000000000000) == 0 && v57);
                if (v48)
                {
LABEL_101:
                  uint64_t v97 = v48;
                  operator delete(v48);
                }
LABEL_116:
                switch(v10)
                {
                  case 2u:
                    unint64_t add = atomic_fetch_add((atomic_ullong *volatile)v12, 0xFFFFFFFFFFFFFFFFLL);
                    if (!v12 || add != 1) {
                      break;
                    }
                    if (*(char *)(v12 + 31) < 0) {
                      operator delete(*(void **)(v12 + 8));
                    }
                    uint64_t v70 = (void *)v12;
                    uint64_t v71 = 0x1012C404EF22A49;
                    goto LABEL_141;
                  case 3u:
                    unint64_t v75 = atomic_fetch_add((atomic_ullong *volatile)v12, 0xFFFFFFFFFFFFFFFFLL);
                    if (!v12 || v75 != 1) {
                      break;
                    }
                    v76 = *(void **)(v12 + 8);
                    if (v76)
                    {
                      *(void *)(v12 + 16) = v76;
                      operator delete(v76);
                    }
                    uint64_t v70 = (void *)v12;
                    uint64_t v71 = 0x1080C409938AC02;
                    goto LABEL_141;
                  case 4u:
                    unint64_t v72 = atomic_fetch_add((atomic_ullong *volatile)v12, 0xFFFFFFFFFFFFFFFFLL);
                    if (!v12 || v72 != 1) {
                      break;
                    }
                    std::string __p = (void *)(v12 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                    goto LABEL_136;
                  case 5u:
                    unint64_t v77 = atomic_fetch_add((atomic_ullong *volatile)v12, 0xFFFFFFFFFFFFFFFFLL);
                    if (!v12 || v77 != 1) {
                      break;
                    }
                    std::string __p = (void *)(v12 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_136:
                    uint64_t v70 = (void *)v12;
                    uint64_t v71 = 0x1020C405E66F15BLL;
                    goto LABEL_141;
                  case 8u:
                    unint64_t v78 = atomic_fetch_add((atomic_ullong *volatile)v12, 0xFFFFFFFFFFFFFFFFLL);
                    if (!v12 || v78 != 1) {
                      break;
                    }
                    boost::detail::shared_count::~shared_count((atomic_uint **)(v12 + 16));
                    uint64_t v70 = (void *)v12;
                    unsigned int v74 = -235920773;
                    goto LABEL_140;
                  case 9u:
                    unint64_t v73 = atomic_fetch_add((atomic_ullong *volatile)v12, 0xFFFFFFFFFFFFFFFFLL);
                    if (!v12 || v73 != 1) {
                      break;
                    }
                    uint64_t v70 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v12);
                    unsigned int v74 = 2071181815;
LABEL_140:
                    uint64_t v71 = v74 | 0x1030C4000000000;
LABEL_141:
                    MEMORY[0x22A614FA0](v70, v71);
                    break;
                  default:
                    break;
                }
LABEL_142:
                operator new();
              }
            }
            atomic_fetch_add((atomic_ullong *volatile)v12, 1uLL);
            unsigned int v15 = BYTE4(v95[1]);
            goto LABEL_75;
          default:
            goto LABEL_164;
        }
      case 6u:
      case 7u:
LABEL_71:
        turi::flexible_type_fail(0);
        goto LABEL_72;
      default:
        goto LABEL_164;
    }
  }
  unsigned int v13 = 0;
  switch(*(unsigned char *)(a1 + 20))
  {
    case 0:
      BOOL v14 = *v7 == 0;
      goto LABEL_27;
    case 1:
      BOOL v14 = *(double *)v7 == 0.0;
      goto LABEL_27;
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
      goto LABEL_30;
    case 6:
      BOOL v14 = (*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFLL) == 0 && *(_DWORD *)(a1 + 16) == 0;
LABEL_27:
      unsigned int v13 = v14;
LABEL_30:
      BYTE4(v95[1]) = 0;
      LODWORD(v95[1]) = 0;
      v95[0] = (atomic_ullong *)v13;
      break;
    default:
LABEL_164:
      uint64_t result = turi::flexible_type_fail(0);
LABEL_166:
      __break(1u);
      return result;
  }
  goto LABEL_142;
}

void sub_223E2B548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a2)
  {
    uint64_t v38 = 0;
    while (1)
    {
      if (*(&a37 + v38) < 0) {
        operator delete(*(void **)((char *)&a32 + v38));
      }
      v38 -= 32;
      if (v38 == -96)
      {
        __cxa_begin_catch(exception_object);
        std::current_exception();
        fill_error_from_exception(&a10);
        std::exception_ptr::~exception_ptr(&a10);
        __cxa_end_catch();
        JUMPOUT(0x223E2A700);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void tc_sarray_unary_op(uint64_t a1, char *__s, uint64_t *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (!turi::capi_server_initialized) {
    turi::_tc_initialize((turi *)a1);
  }
  if (a1)
  {
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "-");
      int v34 = 0;
      std::string::basic_string[abi:ne180100]<0>(v35, "abs");
      int v36 = 1;
      std::string::basic_string[abi:ne180100]<0>(v37, "!");
      int v38 = 2;
      std::map<std::string,turi::unary_op>::map[abi:ne180100]((uint64_t)&turi::apply_unary_op<turi::gl_sarray>(turi::gl_sarray const&,char const*)::_op_map, (const void **)__p, 3);
      for (uint64_t i = 0; i != -12; i -= 4)
      {
        if (SHIBYTE(v37[i + 2]) < 0) {
          operator delete((void *)v37[i]);
        }
      }
      __cxa_atexit((void (*)(void *))std::map<std::string,turi::unary_op>::~map[abi:ne180100], &turi::apply_unary_op<turi::gl_sarray>(turi::gl_sarray const&,char const*)::_op_map, &dword_223D44000);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&turi::apply_unary_op<turi::gl_sarray>(turi::gl_sarray const&,char const*)::_op_map, (const void **)__p);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    if (turi::apply_unary_op<turi::gl_sarray>(turi::gl_sarray const&,char const*)::_op_map != v6)
    {
      int v7 = *(_DWORD *)(v6 + 56);
      if (v7 == 2)
      {
        memset(__p, 0, 13);
        turi::gl_sarray::operator==(a1 + 8, (uint64_t)__p, (uint64_t)v30);
        switch(BYTE4(__p[1]))
        {
          case 2:
LABEL_13:
            if (atomic_fetch_add((atomic_ullong *volatile)__p[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            int v8 = __p[0];
            if (!__p[0]) {
              break;
            }
            if (*((char *)__p[0] + 31) < 0) {
              operator delete(*((void **)__p[0] + 1));
            }
            int64_t v9 = v8;
            uint64_t v10 = 0x1012C404EF22A49;
            goto LABEL_38;
          case 3:
LABEL_25:
            if (atomic_fetch_add((atomic_ullong *volatile)__p[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            unsigned int v13 = __p[0];
            if (!__p[0]) {
              break;
            }
            BOOL v14 = (void *)*((void *)__p[0] + 1);
            if (v14)
            {
              *((void *)__p[0] + 2) = v14;
              operator delete(v14);
            }
            int64_t v9 = v13;
            uint64_t v10 = 0x1080C409938AC02;
            goto LABEL_38;
          case 4:
LABEL_19:
            if (atomic_fetch_add((atomic_ullong *volatile)__p[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            int v11 = __p[0];
            if (!__p[0]) {
              break;
            }
            v31.__r_.__value_.__r.__words[0] = (std::string::size_type)__p[0] + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
            goto LABEL_33;
          case 5:
LABEL_30:
            if (atomic_fetch_add((atomic_ullong *volatile)__p[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            int v11 = __p[0];
            if (!__p[0]) {
              break;
            }
            v31.__r_.__value_.__r.__words[0] = (std::string::size_type)__p[0] + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
LABEL_33:
            int64_t v9 = v11;
            uint64_t v10 = 0x1020C405E66F15BLL;
            goto LABEL_38;
          case 8:
LABEL_34:
            if (atomic_fetch_add((atomic_ullong *volatile)__p[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            unsigned int v15 = __p[0];
            if (!__p[0]) {
              break;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)__p[0] + 2);
            int64_t v9 = v15;
            unsigned int v12 = -235920773;
            goto LABEL_37;
          case 9:
LABEL_22:
            if (atomic_fetch_add((atomic_ullong *volatile)__p[0], 0xFFFFFFFFFFFFFFFFLL) != 1 || !__p[0]) {
              break;
            }
            int64_t v9 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)__p[0]);
            unsigned int v12 = 2071181815;
LABEL_37:
            uint64_t v10 = v12 | 0x1030C4000000000;
LABEL_38:
            MEMORY[0x22A614FA0](v9, v10);
            break;
          default:
            break;
        }
      }
      else
      {
        if (!v7)
        {
          memset(__p, 0, 13);
          turi::operator-((uint64_t)__p, a1 + 8, (uint64_t)v30);
          switch(BYTE4(__p[1]))
          {
            case 2:
              goto LABEL_13;
            case 3:
              goto LABEL_25;
            case 4:
              goto LABEL_19;
            case 5:
              goto LABEL_30;
            case 8:
              goto LABEL_34;
            case 9:
              goto LABEL_22;
            default:
              goto LABEL_39;
          }
        }
        turi::gl_sarray::gl_sarray((turi::gl_sarray *)v30, (const turi::gl_sarray *)(a1 + 8));
      }
LABEL_39:
      operator new();
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unary operator ", 15);
    size_t v18 = strlen(__s);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)__s, v18);
    unsigned int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" not recognized. ", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Available operators are ", 24);
    uint64_t v21 = turi::apply_unary_op<turi::gl_sarray>(turi::gl_sarray const&,char const*)::_op_map;
    if ((_UNKNOWN *)turi::apply_unary_op<turi::gl_sarray>(turi::gl_sarray const&,char const*)::_op_map != &unk_268081138)
    {
      do
      {
        int v22 = *(char *)(v21 + 55);
        if (v22 >= 0) {
          uint64_t v23 = v21 + 32;
        }
        else {
          uint64_t v23 = *(void *)(v21 + 32);
        }
        if (v22 >= 0) {
          uint64_t v24 = *(unsigned __int8 *)(v21 + 55);
        }
        else {
          uint64_t v24 = *(void *)(v21 + 40);
        }
        uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v23, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" ", 1);
        uint64_t v26 = *(void **)(v21 + 8);
        if (v26)
        {
          do
          {
            uint64_t v27 = v26;
            uint64_t v26 = (void *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            uint64_t v27 = *(void **)(v21 + 16);
            BOOL v28 = *v27 == v21;
            uint64_t v21 = (uint64_t)v27;
          }
          while (!v28);
        }
        uint64_t v21 = (uint64_t)v27;
      }
      while (v27 != (void *)&unk_268081138);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v31);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "\"tc_sarray\" is null.");
  set_error(a3);
}

void sub_223E2C3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,int a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a2)
  {
    uint64_t v40 = 0;
    while (1)
    {
      if (*(&a39 + v40) < 0) {
        operator delete(*(void **)((char *)&a34 + v40));
      }
      v40 -= 32;
      if (v40 == -96)
      {
        __cxa_begin_catch(exception_object);
        std::current_exception();
        fill_error_from_exception(&a10);
        std::exception_ptr::~exception_ptr(&a10);
        __cxa_end_catch();
        JUMPOUT(0x223E2BF40);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

const char *tc_v1_error_message(uint64_t a1)
{
  if (!a1) {
    return "No Error";
  }
  uint64_t result = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    return *(const char **)result;
  }
  return result;
}

void *tc_v1_release(void *result)
{
  if (result) {
    return (void *)(*(uint64_t (**)(void, void *))(*(void *)*result + 8))(*result, result);
  }
  return result;
}

uint64_t tc_v1_ft_type(uint64_t a1)
{
  return *(char *)(a1 + 20);
}

BOOL tc_v1_ft_is_double(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 20) == 1;
  }
  return result;
}

BOOL tc_v1_ft_is_int64(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 20) == 0;
  }
  return result;
}

BOOL tc_v1_ft_is_string(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 20) == 2;
  }
  return result;
}

BOOL tc_v1_ft_is_array(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 20) == 3;
  }
  return result;
}

BOOL tc_v1_ft_is_list(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 20) == 4;
  }
  return result;
}

BOOL tc_v1_ft_is_dict(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 20) == 5;
  }
  return result;
}

BOOL tc_v1_ft_is_datetime(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 20) == 6;
  }
  return result;
}

BOOL tc_v1_ft_is_undefined(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 20) == 7;
  }
  return result;
}

BOOL tc_v1_ft_is_image(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 20) == 8;
  }
  return result;
}

BOOL tc_v1_ft_is_ndarray(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 20) == 9;
  }
  return result;
}

BOOL tc_v1_ft_is_type(BOOL result, unsigned __int8 a2)
{
  if (result) {
    return *(unsigned __int8 *)(result + 20) == a2;
  }
  return result;
}

uint64_t tc_v1_flex_list_size(uint64_t result)
{
  if (result) {
    return (uint64_t)(*(void *)(result + 16) - *(void *)(result + 8)) >> 4;
  }
  return result;
}

uint64_t tc_v1_flex_dict_size(uint64_t result)
{
  if (result) {
    return (uint64_t)(*(void *)(result + 16) - *(void *)(result + 8)) >> 5;
  }
  return result;
}

uint64_t tc_v1_flex_enum_list_size(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16) - *(void *)(result + 8);
  }
  return result;
}

uint64_t tc_v1_sarray_size(uint64_t result)
{
  if (result) {
    return turi::gl_sarray::size((turi::gl_sarray *)(result + 8));
  }
  return result;
}

uint64_t tc_v1_sarray_type(uint64_t a1)
{
  if (a1) {
    return (int)turi::gl_sarray::dtype((turi::gl_sarray *)(a1 + 8));
  }
  else {
    return 7;
  }
}

BOOL tc_v1_variant_is_int64(uint64_t a1)
{
  return *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 0;
}

BOOL tc_v1_variant_is_double(uint64_t a1)
{
  return *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 1;
}

BOOL tc_v1_variant_is_cstring(uint64_t a1)
{
  return *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 2;
}

BOOL tc_v1_variant_is_string(uint64_t a1)
{
  return *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 2;
}

BOOL tc_v1_variant_is_double_array(uint64_t a1)
{
  return *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 3;
}

BOOL tc_v1_variant_is_flex_list(uint64_t a1)
{
  return *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 4;
}

BOOL tc_v1_variant_is_flex_dict(uint64_t a1)
{
  return *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 5;
}

BOOL tc_v1_variant_is_datetime(uint64_t a1)
{
  return *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 6;
}

BOOL tc_v1_variant_is_image(uint64_t a1)
{
  return *(unsigned char *)(turi::variant_get_ref<turi::flexible_type>((int *)(a1 + 8)) + 12) == 8;
}

BOOL tc_v1_variant_is_flexible_type(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == *(int *)(a1 + 8) >> 31;
}

BOOL tc_v1_variant_is_sarray(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) ^ (*(int *)(a1 + 8) >> 31)) == 5;
}

BOOL tc_v1_variant_is_sframe(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) ^ (*(int *)(a1 + 8) >> 31)) == 4;
}

BOOL tc_v1_variant_is_parameters(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) ^ (*(int *)(a1 + 8) >> 31)) == 6;
}

BOOL tc_v1_variant_is_model(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) ^ (*(int *)(a1 + 8) >> 31)) == 3;
}

uint64_t tc_v1_plot_render_next_into_context()
{
  return 0;
}

const char *capi_struct_type_info_tc_error::name(capi_struct_type_info_tc_error *this)
{
  return "tc_error";
}

uint64_t (**capi_struct_type_info_tc_error::free(uint64_t (**this)(capi_struct_type_info_tc_error *__hidden this), void **a2))(capi_struct_type_info_tc_error *__hidden this)
{
  if (a2)
  {
    if (*a2 == this)
    {
      if (this == capi_struct_type_info_tc_error_inst)
      {
        if (*((char *)a2 + 31) < 0) {
          operator delete(a2[1]);
        }
        JUMPOUT(0x22A614FA0);
      }
      capi_struct_type_info_tc_error::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_error::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_datetime::name(capi_struct_type_info_tc_datetime *this)
{
  return "tc_datetime";
}

uint64_t (**capi_struct_type_info_tc_datetime::free(uint64_t (**this)(capi_struct_type_info_tc_datetime *__hidden this), uint64_t (***a2)(capi_struct_type_info_tc_datetime *__hidden this)))(capi_struct_type_info_tc_datetime *__hidden this)
{
  if (a2)
  {
    if (*a2 == this)
    {
      if (this == capi_struct_type_info_tc_datetime_inst)
      {
        JUMPOUT(0x22A614FA0);
      }
      capi_struct_type_info_tc_datetime::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_datetime::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_flex_dict::name(capi_struct_type_info_tc_flex_dict *this)
{
  return "tc_flex_dict";
}

uint64_t (**capi_struct_type_info_tc_flex_dict::free(uint64_t (**this)(capi_struct_type_info_tc_flex_dict *__hidden this), char *a2))(capi_struct_type_info_tc_flex_dict *__hidden this)
{
  if (a2)
  {
    if (*(uint64_t (***)(capi_struct_type_info_tc_flex_dict *__hidden))a2 != this) {
      capi_struct_type_info_tc_flex_dict::free(void const*)::{lambda(void)#1}::operator()();
    }
    if (this != capi_struct_type_info_tc_flex_dict_inst) {
      capi_struct_type_info_tc_flex_dict::free(void const*)::{lambda(void)#2}::operator()();
    }
    int v3 = (void **)(a2 + 8);
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (uint64_t (**)(capi_struct_type_info_tc_flex_dict *__hidden))MEMORY[0x22A614FA0](a2, 0x20C40DC1BFBCFLL);
  }
  return this;
}

const char *capi_struct_type_info_tc_flex_list::name(capi_struct_type_info_tc_flex_list *this)
{
  return "tc_flex_list";
}

uint64_t (**capi_struct_type_info_tc_flex_list::free(uint64_t (**this)(capi_struct_type_info_tc_flex_list *__hidden this), char *a2))(capi_struct_type_info_tc_flex_list *__hidden this)
{
  if (a2)
  {
    if (*(uint64_t (***)(capi_struct_type_info_tc_flex_list *__hidden))a2 != this) {
      capi_struct_type_info_tc_flex_list::free(void const*)::{lambda(void)#1}::operator()();
    }
    if (this != capi_struct_type_info_tc_flex_list_inst) {
      capi_struct_type_info_tc_flex_list::free(void const*)::{lambda(void)#2}::operator()();
    }
    int v3 = (void **)(a2 + 8);
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (uint64_t (**)(capi_struct_type_info_tc_flex_list *__hidden))MEMORY[0x22A614FA0](a2, 0x20C40DC1BFBCFLL);
  }
  return this;
}

const char *capi_struct_type_info_tc_flex_image::name(capi_struct_type_info_tc_flex_image *this)
{
  return "tc_flex_image";
}

uint64_t (**capi_struct_type_info_tc_flex_image::free(uint64_t (**this)(capi_struct_type_info_tc_flex_image *__hidden this), atomic_uint **a2))(capi_struct_type_info_tc_flex_image *__hidden this)
{
  if (a2)
  {
    if (*a2 == (atomic_uint *)this)
    {
      if (this == capi_struct_type_info_tc_flex_image_inst)
      {
        boost::detail::shared_count::~shared_count(a2 + 2);
        JUMPOUT(0x22A614FA0);
      }
      capi_struct_type_info_tc_flex_image::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_flex_image::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_ndarray::name(capi_struct_type_info_tc_ndarray *this)
{
  return "tc_ndarray";
}

uint64_t (**capi_struct_type_info_tc_ndarray::free(uint64_t (**this)(capi_struct_type_info_tc_ndarray *__hidden this), uint64_t (***a2)(capi_struct_type_info_tc_ndarray *__hidden this)))(capi_struct_type_info_tc_ndarray *__hidden this)
{
  if (a2)
  {
    if (*a2 == this)
    {
      if (this == capi_struct_type_info_tc_ndarray_inst)
      {
        int v3 = a2[6];
        if (v3)
        {
          a2[7] = v3;
          operator delete(v3);
        }
        uint64_t v4 = a2[3];
        if (v4)
        {
          a2[4] = v4;
          operator delete(v4);
        }
        int v5 = (std::__shared_weak_count *)a2[2];
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        JUMPOUT(0x22A614FA0);
      }
      capi_struct_type_info_tc_ndarray::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_ndarray::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_flexible_type::name(capi_struct_type_info_tc_flexible_type *this)
{
  return "tc_flexible_type";
}

uint64_t (**capi_struct_type_info_tc_flexible_type::free(uint64_t (**this)(capi_struct_type_info_tc_flexible_type *__hidden this), tc_flexible_type_struct *a2))(capi_struct_type_info_tc_flexible_type *__hidden this)
{
  if (a2)
  {
    if (*(uint64_t (***)(capi_struct_type_info_tc_flexible_type *__hidden))a2 == this)
    {
      if (this == capi_struct_type_info_tc_flexible_type_inst)
      {
        tc_flexible_type_struct::~tc_flexible_type_struct(a2);
        JUMPOUT(0x22A614FA0);
      }
      capi_struct_type_info_tc_flexible_type::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_flexible_type::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_flex_enum_list::name(capi_struct_type_info_tc_flex_enum_list *this)
{
  return "tc_flex_enum_list";
}

uint64_t (**capi_struct_type_info_tc_flex_enum_list::free(uint64_t (**this)(capi_struct_type_info_tc_flex_enum_list *__hidden this), uint64_t (***a2)(capi_struct_type_info_tc_flex_enum_list *__hidden this)))(capi_struct_type_info_tc_flex_enum_list *__hidden this)
{
  if (a2)
  {
    if (*a2 == this)
    {
      if (this == capi_struct_type_info_tc_flex_enum_list_inst)
      {
        BOOL v2 = a2[1];
        if (v2)
        {
          a2[2] = v2;
          operator delete(v2);
        }
        JUMPOUT(0x22A614FA0);
      }
      capi_struct_type_info_tc_flex_enum_list::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_flex_enum_list::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_sarray::name(capi_struct_type_info_tc_sarray *this)
{
  return "tc_sarray";
}

uint64_t (**capi_struct_type_info_tc_sarray::free(uint64_t (**this)(capi_struct_type_info_tc_sarray *__hidden this), uint64_t (***a2)(capi_struct_type_info_tc_sarray *__hidden this)))(capi_struct_type_info_tc_sarray *__hidden this)
{
  if (a2)
  {
    if (*a2 == this)
    {
      if (this == capi_struct_type_info_tc_sarray_inst)
      {
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)(a2 + 1));
        JUMPOUT(0x22A614FA0);
      }
      capi_struct_type_info_tc_sarray::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_sarray::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_sframe::name(capi_struct_type_info_tc_sframe *this)
{
  return "tc_sframe";
}

uint64_t (**capi_struct_type_info_tc_sframe::free(uint64_t (**this)(capi_struct_type_info_tc_sframe *__hidden this), uint64_t (***a2)(capi_struct_type_info_tc_sframe *__hidden this)))(capi_struct_type_info_tc_sframe *__hidden this)
{
  if (a2)
  {
    if (*a2 == this)
    {
      if (this == capi_struct_type_info_tc_sframe_inst)
      {
        a2[1] = (uint64_t (**)(capi_struct_type_info_tc_sframe *__hidden))&unk_26D759E10;
        BOOL v2 = (std::__shared_weak_count *)a2[3];
        if (v2) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v2);
        }
        JUMPOUT(0x22A614FA0);
      }
      capi_struct_type_info_tc_sframe::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_sframe::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_variant::name(capi_struct_type_info_tc_variant *this)
{
  return "tc_variant";
}

uint64_t (**capi_struct_type_info_tc_variant::free(uint64_t (**this)(capi_struct_type_info_tc_variant *__hidden this), unsigned int *a2))(capi_struct_type_info_tc_variant *__hidden this)
{
  if (a2)
  {
    if (*(uint64_t (***)(capi_struct_type_info_tc_variant *__hidden))a2 == this)
    {
      if (this == capi_struct_type_info_tc_variant_inst)
      {
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(a2 + 2);
        JUMPOUT(0x22A614FA0);
      }
      capi_struct_type_info_tc_variant::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_variant::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_parameters::name(capi_struct_type_info_tc_parameters *this)
{
  return "tc_parameters";
}

uint64_t (**capi_struct_type_info_tc_parameters::free(uint64_t (**this)(capi_struct_type_info_tc_parameters *__hidden this), char **a2))(capi_struct_type_info_tc_parameters *__hidden this)
{
  if (a2)
  {
    if (*a2 == (char *)this)
    {
      if (this == capi_struct_type_info_tc_parameters_inst)
      {
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)(a2 + 1), a2[2]);
        JUMPOUT(0x22A614FA0);
      }
      capi_struct_type_info_tc_parameters::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_parameters::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_model::name(capi_struct_type_info_tc_model *this)
{
  return "tc_model";
}

uint64_t (**capi_struct_type_info_tc_model::free(uint64_t (**this)(capi_struct_type_info_tc_model *__hidden this), uint64_t (***a2)(capi_struct_type_info_tc_model *__hidden this)))(capi_struct_type_info_tc_model *__hidden this)
{
  if (a2)
  {
    if (*a2 == this)
    {
      if (this == capi_struct_type_info_tc_model_inst)
      {
        BOOL v2 = (std::__shared_weak_count *)a2[2];
        if (v2) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v2);
        }
        JUMPOUT(0x22A614FA0);
      }
      capi_struct_type_info_tc_model::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_model::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_groupby_aggregator::name(capi_struct_type_info_tc_groupby_aggregator *this)
{
  return "tc_groupby_aggregator";
}

uint64_t (**capi_struct_type_info_tc_groupby_aggregator::free(uint64_t (**this)(capi_struct_type_info_tc_groupby_aggregator *__hidden this), uint64_t (***a2)(capi_struct_type_info_tc_groupby_aggregator *__hidden this)))(capi_struct_type_info_tc_groupby_aggregator *__hidden this)
{
  if (a2)
  {
    if (*a2 == this)
    {
      if (this == capi_struct_type_info_tc_groupby_aggregator_inst)
      {
        std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy((uint64_t)(a2 + 1), a2[2]);
        JUMPOUT(0x22A614FA0);
      }
      capi_struct_type_info_tc_groupby_aggregator::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_groupby_aggregator::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

const char *capi_struct_type_info_tc_plot::name(capi_struct_type_info_tc_plot *this)
{
  return "tc_plot";
}

uint64_t (**capi_struct_type_info_tc_plot::free(uint64_t (**this)(capi_struct_type_info_tc_plot *__hidden this), uint64_t (***a2)(capi_struct_type_info_tc_plot *__hidden this)))(capi_struct_type_info_tc_plot *__hidden this)
{
  if (a2)
  {
    if (*a2 == this)
    {
      if (this == &capi_struct_type_info_tc_plot_inst)
      {
        BOOL v2 = (std::__shared_weak_count *)a2[2];
        if (v2) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v2);
        }
        JUMPOUT(0x22A614FA0);
      }
      capi_struct_type_info_tc_plot::free(void const*)::{lambda(void)#2}::operator()();
    }
    capi_struct_type_info_tc_plot::free(void const*)::{lambda(void)#1}::operator()();
  }
  return this;
}

void *std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(void *a1)
{
  *a1 = 0;
  int64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v6 = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  std::string __p = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  turi::flexible_type_impl::ndarray<double>::ndarray(a1 + 1, (uint64_t)&v9, (uint64_t)&v6, (uint64_t)&__p, 0);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    int v7 = v6;
    operator delete(v6);
  }
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_223E2D980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  tc_ft_to_type_cold_1((uint64_t)&__p, (uint64_t)&a13, v13 - 40);
  _Unwind_Resume(a1);
}

void *turi::flexible_type_impl::ndarray<double>::ndarray(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>(a2, &v10);
  turi::flexible_type_impl::ndarray<double>::ndarray(a1, &v10, a3, a4, a5);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return a1;
}

void sub_223E2DA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<std::vector<double> const&,std::allocator<std::vector<double>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_223E2DA7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<std::vector<double> const&,std::allocator<std::vector<double>>,0>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26D754C90;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 24), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  return a1;
}

void sub_223E2DAF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D754C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D754C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<std::vector<double>>::__on_zero_shared(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *turi::flexible_type_impl::ndarray<double>::ndarray(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2[1];
  *a1 = *a2;
  a1[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v10 = a1 + 2;
  a1[4] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 5, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  a1[8] = a5;
  uint64_t v11 = (char *)a1[2];
  unsigned int v12 = (char *)a1[3];
  uint64_t v13 = v12 - v11;
  if (v12 == v11)
  {
    uint64_t v14 = ((uint64_t)(*(void *)(*a2 + 8) - *(void *)*a2) >> 3) - a5;
    if (v14)
    {
      unint64_t v15 = a1[4];
      if ((unint64_t)v12 >= v15)
      {
        uint64_t v16 = v13 >> 3;
        uint64_t v17 = v15 - (void)v11;
        if (v17 >> 2 <= (unint64_t)((v13 >> 3) + 1)) {
          uint64_t v18 = v16 + 1;
        }
        else {
          uint64_t v18 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        unsigned int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 4), v19);
        uint64_t v21 = (char *)a1[2];
        int v22 = (char *)a1[3];
        uint64_t v23 = &v20[8 * v16];
        uint64_t v25 = &v20[8 * v24];
        *(void *)uint64_t v23 = v14;
        unsigned int v12 = v23 + 8;
        while (v22 != v21)
        {
          uint64_t v26 = *((void *)v22 - 1);
          v22 -= 8;
          *((void *)v23 - 1) = v26;
          v23 -= 8;
        }
        a1[2] = v23;
        a1[3] = v12;
        a1[4] = v25;
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(void *)unsigned int v12 = v14;
        v12 += 8;
      }
      a1[3] = v12;
    }
  }
  uint64_t v27 = a1[5];
  if (a1[6] == v27)
  {
    if (v12 == (char *)*v10)
    {
      uint64_t v27 = a1[6];
    }
    else
    {
      std::vector<unsigned long>::resize((uint64_t)(a1 + 5), (uint64_t)&v12[-*v10] >> 3);
      uint64_t v40 = a1[2];
      uint64_t v41 = a1[3] - v40;
      uint64_t v27 = a1[5];
      *(void *)(v41 + v27 - 8) = 1;
      if (v41 >= 9)
      {
        uint64_t v42 = v41 >> 3;
        uint64_t v43 = v40 - 8;
        uint64_t v44 = 1;
        do
        {
          v44 *= *(void *)(v43 + 8 * v42);
          *(void *)(v27 + 8 * v42 - 16) = v44;
          uint64_t v45 = v42 - 2;
          --v42;
        }
        while (v45 > 0);
      }
    }
  }
  uint64_t v28 = a1[2];
  uint64_t v29 = a1[3];
  uint64_t v30 = v29 - v28;
  if (v29 == v28) {
    goto LABEL_26;
  }
  char v31 = 0;
  unint64_t v32 = v30 >> 3;
  if (v32 <= 1) {
    unint64_t v32 = 1;
  }
  char v33 = (uint64_t *)a1[2];
  do
  {
    uint64_t v34 = *v33++;
    v31 |= v34 == 0;
    --v32;
  }
  while (v32);
  if (v31)
  {
LABEL_26:
    *(void *)(*a1 + 8) = *(void *)*a1;
    a1[3] = v28;
    a1[6] = v27;
    a1[8] = 0;
  }
  if (!turi::flexible_type_impl::ndarray<double>::is_valid(a1)) {
    turi::flexible_type_impl::ndarray<double>::ndarray(std::shared_ptr<std::vector<double>> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()();
  }
  uint64_t v35 = (void *)a1[2];
  uint64_t v36 = a1[3] - (void)v35;
  if (v36)
  {
    unint64_t v37 = v36 >> 3;
    if (v37 <= 1) {
      unint64_t v37 = 1;
    }
    do
    {
      if (!*v35++) {
        turi::flexible_type_impl::ndarray<double>::ndarray(std::shared_ptr<std::vector<double>> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#2}::operator()();
      }
      --v37;
    }
    while (v37);
  }
  return a1;
}

void sub_223E2DE00(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    v1[6] = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    v1[3] = v6;
    operator delete(v6);
  }
  int v7 = (std::__shared_weak_count *)v1[1];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  _Unwind_Resume(exception_object);
}

BOOL turi::flexible_type_impl::ndarray<double>::is_valid(void *a1)
{
  BOOL v2 = (char *)a1[2];
  uint64_t v1 = (char *)a1[3];
  if (v1 - v2 != a1[6] - a1[5]) {
    return 0;
  }
  int v3 = (void *)*a1;
  if (v1 == v2 || v3 == 0)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
    do
    {
      uint64_t v6 = *(void *)v2;
      v2 += 8;
      v5 *= v6;
    }
    while (v2 != v1);
  }
  return a1[8] + v5 <= (unint64_t)((uint64_t)(v3[1] - *v3) >> 3)
      && a1[8] + turi::flexible_type_impl::ndarray<double>::last_index(a1) <= (unint64_t)((uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 3);
}

void turi::flexible_type_impl::ndarray<double>::ndarray(std::shared_ptr<std::vector<double>> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  BOOL v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 128, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::ndarray(std::shared_ptr<std::vector<double>> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E2DFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::ndarray(std::shared_ptr<std::vector<double>> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  BOOL v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_shape[i] > 0", 14);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 130, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::ndarray(std::shared_ptr<std::vector<double>> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E2E1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_impl::ndarray<double>::last_index(void *a1)
{
  uint64_t v1 = (char *)a1[2];
  BOOL v2 = (char *)a1[3];
  uint64_t v3 = v2 - v1;
  if (v2 == v1) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = v3 >> 3;
  uint64_t v6 = (uint64_t *)a1[5];
  if (v5 <= 1) {
    unint64_t v5 = 1;
  }
  do
  {
    uint64_t v7 = *(void *)v1;
    v1 += 8;
    uint64_t v8 = v7 - 1;
    uint64_t v9 = *v6++;
    v4 += v9 * v8;
    --v5;
  }
  while (v5);
  return v4 + 1;
}

void *std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void *std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  return a1;
}

void *std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 1, *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4);
  return a1;
}

void *std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(a1 + 1, *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 5);
  return a1;
}

uint64_t turi::flexible_type_impl::ndarray<double>::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 16, (__n128 *)a2 + 1);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 40, (__n128 *)((char *)a2 + 40));
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  return a1;
}

void std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>(char **a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 4)
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,double const*,double const*,turi::flexible_type*>(v8, v6, a3, (uint64_t)a1[1]);
LABEL_15:
    a1[1] = (char *)v13;
    return;
  }
  uint64_t v14 = (uint64_t)a1[1];
  unint64_t v15 = (v14 - (uint64_t)v9) >> 4;
  if (v15 < a4)
  {
    uint64_t v16 = &a2[v15];
    if ((char *)v14 != v9)
    {
      uint64_t v17 = 8 * v15;
      do
      {
        turi::flexible_type::operator=<double>((uint64_t)v9, v6++);
        v9 += 16;
        v17 -= 8;
      }
      while (v17);
      uint64_t v9 = a1[1];
    }
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,double const*,double const*,turi::flexible_type*>(v8, v16, a3, (uint64_t)v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    uint64_t v18 = *a1;
  }
  else
  {
    uint64_t v18 = *a1;
    do
    {
      turi::flexible_type::operator=<double>((uint64_t)v9, v6++);
      v9 += 16;
      v18 += 16;
    }
    while (v6 != a3);
    uint64_t v14 = (uint64_t)a1[1];
  }
  while ((char *)v14 != v18)
  {
    v14 -= 16;
    std::allocator<turi::flexible_type>::destroy[abi:ne180100](v8, v14);
  }
  a1[1] = v18;
}

void sub_223E2E650(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,double const*,double const*,turi::flexible_type*>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      turi::flexible_type::flexible_type<double>(v4, v6++);
      uint64_t v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_223E2E6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t turi::flexible_type::flexible_type<double>(uint64_t a1, void *a2)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  turi::flexible_type::operator=<double>(a1, a2);
  return a1;
}

void sub_223E2E738(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t turi::flexible_type::operator=<double>(uint64_t a1, void *a2)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v8 = (void *)v7[1];
          if (v8)
          {
            void v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v17 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v17 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v17);
LABEL_18:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v13 = (void *)v12[6];
          if (v13)
          {
            v12[7] = (atomic_ullong)v13;
            operator delete(v13);
          }
          uint64_t v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = (atomic_ullong)v14;
            operator delete(v14);
          }
          unint64_t v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          atomic_ullong *volatile v5 = v12;
          unsigned int v11 = 2071181815;
LABEL_31:
          uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v5, v6);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 1;
  *(void *)a1 = *a2;
  return a1;
}

BOOL turi::flexible_type_impl::ndarray<double>::is_full(void *a1)
{
  if (a1[8]) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)a1[2];
  uint64_t v1 = (uint64_t *)a1[3];
  uint64_t v3 = (void *)*a1;
  if (v1 == v2 || v3 == 0)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
    do
    {
      uint64_t v6 = *v2++;
      v5 *= v6;
    }
    while (v2 != v1);
  }
  return v5 == (uint64_t)(v3[1] - *v3) >> 3
      && turi::flexible_type_impl::ndarray<double>::last_index(a1) == (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 3;
}

void turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  atomic_ullong *volatile v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_full()", 9);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 305, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E2EBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  atomic_ullong *volatile v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 490, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E2EDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

void std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4 = 126 - 2 * __clz(((char *)a2 - (char *)a4) >> 4);
  if (a2 == a4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,false>(a1, a2, a3, a4, (uint64_t)&v6, v5, 1);
}

uint64_t turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1] - *a2;
  uint64_t v4 = v3 >> 3;
  uint64_t v5 = (v3 >> 3) - 1;
  if (v3 >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    unint64_t v7 = *(void *)(v2 + 8 * v5) + 1;
    *(void *)(v2 + 8 * v5) = v7;
    if (v7 >= *(void *)(v6 + 8 * v5))
    {
      uint64_t v8 = v4 - 2;
      atomic_ullong *volatile v9 = (unint64_t *)(v2 + 8 * v4 - 16);
      do
      {
        uint64_t v5 = v8;
        uint64_t v4 = v8 + 1;
        v9[1] = 0;
        if (v8 + 1 <= 0) {
          break;
        }
        unint64_t v10 = *v9 + 1;
        *v9-- = v10;
        unint64_t v11 = *(void *)(v6 + 8 * v8--);
      }
      while (v10 >= v11);
    }
  }
  if (v5 >= 0) {
    return v4;
  }
  else {
    return 0;
  }
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      uint64_t v8 = *a1;
      unint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::vector<std::pair<unsigned long,unsigned long>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_223E2F124(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,false>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, char a7)
{
  while (2)
  {
    while (2)
    {
      uint64_t v16 = (uint64_t)(a4 + 2);
      uint64_t v35 = (uint64_t)(a4 + 6);
      uint64_t v36 = (uint64_t)(a4 + 4);
      uint64_t v17 = 1 - a6;
      int v38 = a4;
      while (1)
      {
        uint64_t v18 = (char *)a2 - (char *)a4;
        unint64_t v19 = ((char *)a2 - (char *)a4) >> 4;
        if (!(!v8 & v7))
        {
          switch(v19)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              unint64_t v32 = *a4;
              unint64_t v33 = *(a2 - 2);
              if (*a4 < v33 || v33 >= v32 && a4[1] < *(a2 - 1))
              {
                *(a2 - 2) = v32;
                *a4 = v33;
                unint64_t v34 = *(a2 - 1);
                *(a2 - 1) = a4[1];
                a4[1] = v34;
              }
              break;
            case 3uLL:
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, (uint64_t)a2, (uint64_t)(a2 - 2), (uint64_t)(a2 - 2), a3, (uint64_t)(a4 + 2));
              break;
            case 4uLL:
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, (uint64_t)a2, (uint64_t)(a2 - 2), (uint64_t)(a2 - 2), (uint64_t)(a2 - 4), (uint64_t)(a2 - 4), a3, (uint64_t)(a4 + 2));
              break;
            case 5uLL:
              std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, (uint64_t)a2, (uint64_t)(a2 - 2), (uint64_t)(a2 - 2), (uint64_t)(a2 - 4), (uint64_t)(a2 - 4), (uint64_t)(a2 - 6), (uint64_t)(a2 - 6), a3, (uint64_t)(a4 + 2));
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        if (v18 <= 383)
        {
          if (a7) {
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a3, a4);
          }
          else {
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a3, a4);
          }
          return;
        }
        if (v17 == 1)
        {
          if (a2 != a4) {
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, (uint64_t)a2, a3, (uint64_t)a4, a3, (uint64_t)a4, a5);
          }
          return;
        }
        unint64_t v20 = v19 >> 1;
        uint64_t v21 = (uint64_t)&a2[-2 * (v19 >> 1)];
        if ((unint64_t)v18 >= 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, (uint64_t)a2, (uint64_t)&a2[-2 * (v19 >> 1)], (uint64_t)&a2[-2 * (v19 >> 1)], v16, v16);
          uint64_t v22 = a3;
          uint64_t v23 = (uint64_t)&a2[2 * (1 - v20)];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>((uint64_t)(a2 - 2), (uint64_t)(a2 - 2), v23, v23, v36, v36);
          uint64_t v24 = (uint64_t)&a2[2 * ~v20];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>((uint64_t)(a2 - 4), (uint64_t)(a2 - 4), v24, v24, v35, v35);
          uint64_t v25 = v23;
          uint64_t v26 = v23;
          a3 = v22;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(v25, v26, v21, v21, v24, v24);
          long long v27 = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = *(_OWORD *)(v21 - 16);
          *(_OWORD *)(v21 - 16) = v27;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>((uint64_t)&a2[-2 * (v19 >> 1)], (uint64_t)&a2[-2 * (v19 >> 1)], a1, (uint64_t)a2, v16, v16);
        }
        a4 = v38;
        if (a7) {
          break;
        }
        unint64_t v28 = *(a2 - 2);
        if (*a2 < v28 || v28 >= *a2 && a2[1] < *(a2 - 1)) {
          break;
        }
        std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,std::__less<void,void> &>(a1, a2, a3, v38);
        a1 = v29;
        a2 = v30;
        a7 = 0;
        ++v17;
      }
      std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,std::__less<void,void> &>(a2, v38, (uint64_t)&v39);
      uint64_t v31 = v39;
      a4 = v40;
      a6 = -v17;
      if (!v41) {
        goto LABEL_20;
      }
      char v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, (uint64_t)a2, v39, v40);
      if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>((uint64_t)(a4 - 2), (uint64_t)(a4 - 2), a3, v38))
      {
        if (v37)
        {
          a1 = v31;
          a2 = a4 - 2;
LABEL_21:
          a4 = v38;
          continue;
        }
LABEL_20:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,false>(a1, a2, v31, a4, a5, -v17, a7 & 1);
        a7 = 0;
        a2 = a4 - 2;
        a1 = v31;
        goto LABEL_21;
      }
      break;
    }
    a3 = v31;
    if ((v37 & 1) == 0) {
      continue;
    }
    break;
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  if (a2 == a4) {
    return;
  }
  uint64_t v4 = a2 - 2;
  if (a2 - 2 == a4) {
    return;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a2 - 2;
  do
  {
    char v7 = v4 + 2;
    unint64_t v8 = *v4;
    unint64_t v10 = *(v6 - 2);
    v6 -= 2;
    unint64_t v9 = v10;
    if (v10 >= *v4)
    {
      if (v8 < v9) {
        goto LABEL_17;
      }
      unint64_t v11 = *(v4 - 1);
      unint64_t v12 = v4[1];
      if (v11 >= v12) {
        goto LABEL_17;
      }
    }
    else
    {
      unint64_t v11 = *(v4 - 1);
      unint64_t v12 = v4[1];
    }
    *(v4 - 2) = v8;
    *(v4 - 1) = v12;
    if (v7 == a2)
    {
LABEL_13:
      char v7 = a2;
      goto LABEL_14;
    }
    uint64_t v13 = v5;
    while (1)
    {
      unint64_t v14 = *(unint64_t *)((char *)a2 + v13);
      if (v9 >= v14) {
        break;
      }
      unint64_t v15 = *(unint64_t *)((char *)a2 + v13 + 8);
LABEL_12:
      v7 += 2;
      uint64_t v16 = (uint64_t)a2 + v13;
      *(void *)(v16 - 16) = v14;
      *(void *)(v16 - 8) = v15;
      v13 += 16;
      if (!v13) {
        goto LABEL_13;
      }
    }
    if (v14 < v9) {
      goto LABEL_14;
    }
    unint64_t v15 = *(unint64_t *)((char *)a2 + v13 + 8);
    if (v11 < v15) {
      goto LABEL_12;
    }
    char v7 = (unint64_t *)((char *)a2 + v13);
LABEL_14:
    *(v7 - 2) = v9;
    *(v7 - 1) = v11;
LABEL_17:
    v5 -= 16;
    uint64_t v4 = v6;
  }
  while (v6 != a4);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  if (a2 != a4)
  {
    uint64_t v4 = a2 - 2;
    if (a2 - 2 != a4)
    {
      uint64_t v5 = a2 - 1;
      uint64_t v6 = a2 - 2;
      while (1)
      {
        unint64_t v8 = *(v6 - 2);
        v6 -= 2;
        unint64_t v7 = v8;
        unint64_t v9 = *v4;
        if (v8 < *v4) {
          break;
        }
        if (v9 >= v7)
        {
          unint64_t v10 = *(v4 - 1);
          if (v10 < v4[1]) {
            goto LABEL_6;
          }
        }
LABEL_14:
        v5 -= 2;
        uint64_t v4 = v6;
        if (v6 == a4) {
          return;
        }
      }
      unint64_t v10 = *(v4 - 1);
LABEL_6:
      for (uint64_t i = v5; ; i += 2)
      {
        *(i - 3) = v9;
        unint64_t v9 = i[1];
        *(i - 2) = *i;
        if (v7 >= v9 && (v9 < v7 || v10 >= i[2])) {
          break;
        }
      }
      *(i - 1) = v7;
      *uint64_t i = v10;
      goto LABEL_14;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = *(void *)(a4 - 16);
  unint64_t v7 = *(void *)(a2 - 16);
  if (v6 < v7 || v7 >= v6 && *(void *)(a4 - 8) < *(void *)(a2 - 8))
  {
    unint64_t v8 = *(void *)(a6 - 16);
    if (v8 < v6 || v6 >= v8 && *(void *)(a6 - 8) < *(void *)(a4 - 8))
    {
      *(void *)(a2 - 16) = v8;
      *(void *)(a6 - 16) = v7;
      unint64_t v9 = (uint64_t *)(a2 - 8);
      unint64_t v10 = (uint64_t *)(a6 - 8);
      uint64_t result = 1;
LABEL_14:
      uint64_t v20 = *v9;
      uint64_t *v9 = *v10;
      uint64_t *v10 = v20;
      return result;
    }
    *(void *)(a2 - 16) = v6;
    unint64_t v9 = (uint64_t *)(a4 - 8);
    uint64_t v16 = *(void *)(a4 - 8);
    *(void *)(a4 - 16) = v7;
    unint64_t v17 = *(void *)(a2 - 8);
    *(void *)(a2 - 8) = v16;
    *(void *)(a4 - 8) = v17;
    unint64_t v18 = *(void *)(a6 - 16);
    unint64_t v19 = *(void *)(a4 - 16);
    if (v18 >= v19 && (v19 < v18 || *(void *)(a6 - 8) >= v17)) {
      return 1;
    }
    *(void *)(a4 - 16) = v18;
    *(void *)(a6 - 16) = v19;
    unint64_t v10 = (uint64_t *)(a6 - 8);
LABEL_13:
    uint64_t result = 2;
    goto LABEL_14;
  }
  unint64_t v12 = *(void *)(a6 - 16);
  if (v12 >= v6 && (v6 < v12 || *(void *)(a6 - 8) >= *(void *)(a4 - 8))) {
    return 0;
  }
  *(void *)(a4 - 16) = v12;
  *(void *)(a6 - 16) = v6;
  unint64_t v10 = (uint64_t *)(a4 - 8);
  uint64_t v13 = *(void *)(a4 - 8);
  *(void *)(a4 - 8) = *(void *)(a6 - 8);
  *(void *)(a6 - 8) = v13;
  unint64_t v14 = *(void *)(a4 - 16);
  unint64_t v15 = *(void *)(a2 - 16);
  if (v14 < v15 || v15 >= v14 && (unint64_t)*v10 < *(void *)(a2 - 8))
  {
    *(void *)(a2 - 16) = v14;
    *(void *)(a4 - 16) = v15;
    unint64_t v9 = (uint64_t *)(a2 - 8);
    goto LABEL_13;
  }
  return 1;
}

void std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,std::__less<void,void> &>(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5 = a2 - 2;
  unint64_t v4 = *(a2 - 2);
  unint64_t v6 = *(a2 - 1);
  unint64_t v7 = *a4;
  if (v4 >= *a4 && (v7 < v4 || v6 >= a4[1]))
  {
    while (v5 > a4)
    {
      unint64_t v12 = *(v5 - 2);
      if (v4 < v12 || v12 >= v4 && v6 < *(v5 - 1)) {
        break;
      }
      v5 -= 2;
    }
  }
  else
  {
    unint64_t v8 = *(a2 - 4);
    if (v4 >= v8)
    {
      unint64_t v9 = a2 - 6;
      do
      {
        if (v8 >= v4 && v6 < v9[3]) {
          break;
        }
        unint64_t v10 = *v9;
        v9 -= 2;
        unint64_t v8 = v10;
      }
      while (v4 >= v10);
      uint64_t v5 = v9 + 4;
    }
  }
  if (v5 > a4)
  {
    for (a4 += 2; v4 < v7 || v7 >= v4 && v6 < *(a4 - 1); a4 += 2)
    {
      unint64_t v11 = *a4;
      unint64_t v7 = v11;
    }
  }
  if (a4 >= v5)
  {
    uint64_t v13 = v5;
  }
  else
  {
    uint64_t v13 = v5;
    do
    {
      unint64_t v14 = *(v13 - 2);
      v13 -= 2;
      *uint64_t v13 = *(a4 - 2);
      *(a4 - 2) = v14;
      unint64_t v15 = v13[1];
      v13[1] = *(a4 - 1);
      *(a4 - 1) = v15;
      unint64_t v16 = *(v13 - 2);
      if (v4 >= v16)
      {
        unint64_t v17 = v5 - 6;
        do
        {
          if (v16 >= v4 && v6 < v17[3]) {
            break;
          }
          unint64_t v18 = *v17;
          v17 -= 2;
          unint64_t v16 = v18;
        }
        while (v4 >= v18);
        uint64_t v13 = v17 + 4;
      }
      do
      {
        do
        {
          a4 += 2;
          unint64_t v19 = *(a4 - 2);
        }
        while (v4 < v19);
      }
      while (v19 >= v4 && v6 < *(a4 - 1));
      uint64_t v5 = v13;
    }
    while (a4 < v13);
  }
  if (v13 + 2 != a2)
  {
    *(a2 - 2) = *v13;
    *(a2 - 1) = v13[1];
  }
  *uint64_t v13 = v4;
  v13[1] = v6;
}

void std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,std::__less<void,void> &>(unint64_t *a1@<X1>, unint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3 = 0;
  unint64_t v4 = *(a1 - 2);
  unint64_t v5 = *(a1 - 1);
  while (1)
  {
    unint64_t v6 = a1[v3 - 4];
    if (v6 >= v4 && (v4 < v6 || a1[v3 - 3] >= v5)) {
      break;
    }
    v3 -= 2;
  }
  unint64_t v7 = (unint64_t)&a1[v3 - 2];
  if (v3 * 8)
  {
    do
    {
      unint64_t v9 = *a2;
      a2 += 2;
      unint64_t v8 = v9;
    }
    while (v9 >= v4 && (v4 < v8 || *(a2 - 1) >= v5));
  }
  else if (v7 > (unint64_t)a2)
  {
    while (1)
    {
      unint64_t v11 = *a2;
      a2 += 2;
      unint64_t v10 = v11;
      if (v11 < v4) {
        break;
      }
      if (v4 >= v10)
      {
        if (*(a2 - 1) < v5 || (unint64_t)a2 >= v7) {
          break;
        }
      }
      else if ((unint64_t)a2 >= v7)
      {
        break;
      }
    }
  }
  uint64_t v13 = (unint64_t *)v7;
  if ((unint64_t)a2 < v7)
  {
    unint64_t v14 = a2;
    do
    {
      unint64_t v15 = *(v13 - 2);
      v13 -= 2;
      *uint64_t v13 = *(v14 - 2);
      *(v14 - 2) = v15;
      unint64_t v16 = v13[1];
      v13[1] = *(v14 - 1);
      *(v14 - 1) = v16;
      while (1)
      {
        unint64_t v17 = *(v13 - 2);
        if (v17 >= v4 && (v4 < v17 || *(v13 - 1) >= v5)) {
          break;
        }
        v13 -= 2;
      }
      do
      {
        unint64_t v19 = *v14;
        v14 += 2;
        unint64_t v18 = v19;
      }
      while (v19 >= v4 && (v4 < v18 || *(v14 - 1) >= v5));
    }
    while (v14 < v13);
  }
  uint64_t v20 = v13 + 2;
  if (v13 + 2 != a1)
  {
    *(a1 - 2) = *v13;
    *(a1 - 1) = v13[1];
  }
  *uint64_t v13 = v4;
  v13[1] = v5;
  *(void *)a3 = v20;
  *(void *)(a3 + 8) = v20;
  *(unsigned char *)(a3 + 16) = (unint64_t)a2 >= v7;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  char v6 = 1;
  switch((a2 - (uint64_t)a4) >> 4)
  {
    case 0:
    case 1:
      return v6 & 1;
    case 2:
      unint64_t v7 = *a4;
      unint64_t v8 = *(void *)(a2 - 16);
      if (*a4 < v8 || v8 >= v7 && a4[1] < *(void *)(a2 - 8))
      {
        *(void *)(a2 - 16) = v7;
        *a4 = v8;
        unint64_t v9 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = a4[1];
        a4[1] = v9;
      }
      goto LABEL_27;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a2 - 16, a2 - 16, a3, (uint64_t)(a4 + 2));
      goto LABEL_27;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32, a3, (uint64_t)(a4 + 2));
      goto LABEL_27;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32, a2 - 48, a2 - 48, a3, (uint64_t)(a4 + 2));
LABEL_27:
      char v6 = 1;
      return v6 & 1;
    default:
      uint64_t v10 = a2 - 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a2 - 16, a2 - 16, a2 - 32, a2 - 32);
      uint64_t v12 = a2 - 48;
      if ((unint64_t *)(a2 - 48) == a4) {
        goto LABEL_29;
      }
      uint64_t v11 = 0;
      int v13 = 0;
      unint64_t v14 = (unint64_t *)(a2 - 48);
      break;
  }
  do
  {
    unint64_t v16 = *(v14 - 2);
    v14 -= 2;
    unint64_t v15 = v16;
    unint64_t v17 = *(void *)(v10 - 16);
    if (v16 >= v17)
    {
      if (v17 < v15) {
        goto LABEL_21;
      }
      unint64_t v18 = *(void *)(v12 - 8);
      if (v18 >= *(void *)(v10 - 8)) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v18 = *(void *)(v12 - 8);
    }
    *(void *)(v12 - 16) = v17;
    *(void *)(v12 - 8) = *(void *)(v10 - 8);
    if (v10 == a2)
    {
LABEL_19:
      uint64_t v10 = a2;
      goto LABEL_20;
    }
    uint64_t v19 = v11;
    while (1)
    {
      unint64_t v20 = *(void *)(a2 + v19 - 32);
      if (v15 >= v20) {
        break;
      }
      unint64_t v21 = *(void *)(a2 + v19 - 24);
LABEL_18:
      v10 += 16;
      uint64_t v22 = a2 + v19;
      *(void *)(v22 - 48) = v20;
      *(void *)(v22 - 40) = v21;
      v19 += 16;
      if (v19 == 32) {
        goto LABEL_19;
      }
    }
    if (v20 < v15) {
      goto LABEL_20;
    }
    unint64_t v21 = *(void *)(a2 + v19 - 24);
    if (v18 < v21) {
      goto LABEL_18;
    }
    uint64_t v10 = a2 + v19 - 32;
LABEL_20:
    *(void *)(v10 - 16) = v15;
    *(void *)(v10 - 8) = v18;
    if (++v13 == 8)
    {
      char v24 = 0;
      LOBYTE(v11) = v14 == a4;
      goto LABEL_31;
    }
LABEL_21:
    v11 -= 16;
    uint64_t v10 = v12;
    uint64_t v12 = (uint64_t)v14;
  }
  while (v14 != a4);
LABEL_29:
  char v24 = 1;
LABEL_31:
  char v6 = v24 | v11;
  return v6 & 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a3, a4, a5, a6);
  unint64_t v13 = *(void *)(a8 - 16);
  unint64_t v14 = *(void *)(a6 - 16);
  if (v13 < v14 || v14 >= v13 && *(void *)(a8 - 8) < *(void *)(a6 - 8))
  {
    *(void *)(a6 - 16) = v13;
    *(void *)(a8 - 16) = v14;
    uint64_t v15 = *(void *)(a6 - 8);
    *(void *)(a6 - 8) = *(void *)(a8 - 8);
    *(void *)(a8 - 8) = v15;
    unint64_t v16 = *(void *)(a6 - 16);
    unint64_t v17 = *(void *)(a4 - 16);
    if (v16 < v17 || v17 >= v16 && *(void *)(a6 - 8) < *(void *)(a4 - 8))
    {
      *(void *)(a4 - 16) = v16;
      *(void *)(a6 - 16) = v17;
      uint64_t v18 = *(void *)(a4 - 8);
      *(void *)(a4 - 8) = *(void *)(a6 - 8);
      *(void *)(a6 - 8) = v18;
      unint64_t v19 = *(void *)(a4 - 16);
      unint64_t v20 = *(void *)(a2 - 16);
      if (v19 < v20 || v20 >= v19 && *(void *)(a4 - 8) < *(void *)(a2 - 8))
      {
        *(void *)(a2 - 16) = v19;
        *(void *)(a4 - 16) = v20;
        uint64_t v21 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = *(void *)(a4 - 8);
        *(void *)(a4 - 8) = v21;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a3, a4, a5, a6, a7, a8);
  unint64_t v15 = *(void *)(a10 - 16);
  unint64_t v16 = *(void *)(a8 - 16);
  if (v15 < v16 || v16 >= v15 && *(void *)(a10 - 8) < *(void *)(a8 - 8))
  {
    *(void *)(a8 - 16) = v15;
    *(void *)(a10 - 16) = v16;
    uint64_t v17 = *(void *)(a8 - 8);
    *(void *)(a8 - 8) = *(void *)(a10 - 8);
    *(void *)(a10 - 8) = v17;
    unint64_t v18 = *(void *)(a8 - 16);
    unint64_t v19 = *(void *)(a6 - 16);
    if (v18 < v19 || v19 >= v18 && *(void *)(a8 - 8) < *(void *)(a6 - 8))
    {
      *(void *)(a6 - 16) = v18;
      *(void *)(a8 - 16) = v19;
      uint64_t v20 = *(void *)(a6 - 8);
      *(void *)(a6 - 8) = *(void *)(a8 - 8);
      *(void *)(a8 - 8) = v20;
      unint64_t v21 = *(void *)(a6 - 16);
      unint64_t v22 = *(void *)(a4 - 16);
      if (v21 < v22 || v22 >= v21 && *(void *)(a6 - 8) < *(void *)(a4 - 8))
      {
        *(void *)(a4 - 16) = v21;
        *(void *)(a6 - 16) = v22;
        uint64_t v23 = *(void *)(a4 - 8);
        *(void *)(a4 - 8) = *(void *)(a6 - 8);
        *(void *)(a6 - 8) = v23;
        unint64_t v24 = *(void *)(a4 - 16);
        unint64_t v25 = *(void *)(a2 - 16);
        if (v24 < v25 || v25 >= v24 && *(void *)(a4 - 8) < *(void *)(a2 - 8))
        {
          *(void *)(a2 - 16) = v24;
          *(void *)(a4 - 16) = v25;
          uint64_t v26 = *(void *)(a2 - 8);
          *(void *)(a2 - 8) = *(void *)(a4 - 8);
          *(void *)(a4 - 8) = v26;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a2 - a4;
  if (a2 == a4) {
    return a5;
  }
  if (v8 >= 17)
  {
    unint64_t v14 = (unint64_t)((v8 >> 4) - 2) >> 1;
    unint64_t v15 = v14 + 1;
    uint64_t v16 = a2 - 16 * v14;
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a7, v8 >> 4, v16, v16);
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  if (a4 != a6)
  {
    uint64_t v17 = a4;
    uint64_t v18 = a4;
    do
    {
      unint64_t v20 = *(void *)(v18 - 16);
      v18 -= 16;
      unint64_t v19 = v20;
      unint64_t v21 = *(void *)(a2 - 16);
      if (v20 < v21 || v21 >= v19 && *(void *)(v17 - 8) < *(void *)(a2 - 8))
      {
        *(void *)(v17 - 16) = v21;
        *(void *)(a2 - 16) = v19;
        uint64_t v22 = *(void *)(v17 - 8);
        *(void *)(v17 - 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v22;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a7, v8 >> 4, a1, a2);
      }
      uint64_t v17 = v18;
    }
    while (v18 != a6);
  }
  if (v8 >= 17)
  {
    uint64_t v23 = (unint64_t)v8 >> 4;
    uint64_t v24 = a4 + 16;
    do
    {
      uint64_t v26 = *(void *)(a2 - 16);
      uint64_t v25 = *(void *)(a2 - 8);
      std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, a7, v23);
      if (v24 == v28)
      {
        *(void *)(v28 - 16) = v26;
        *(void *)(v28 - 8) = v25;
      }
      else
      {
        *(void *)(v28 - 16) = *(void *)(v24 - 16);
        *(void *)(v28 - 8) = *(void *)(v24 - 8);
        *(void *)(v24 - 16) = v26;
        *(void *)(v24 - 8) = v25;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(a1, a2, v27, (unint64_t *)(v28 - 16), a7, (a2 - (v28 - 16)) >> 4);
      }
      v24 += 16;
    }
    while (v23-- > 2);
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v6 = a2 - a6;
    int64_t v7 = (unint64_t)(a4 - 2) >> 1;
    if (v7 >= (a2 - a6) >> 4)
    {
      uint64_t v8 = v6 >> 3;
      uint64_t v9 = (v6 >> 3) | 1;
      uint64_t v10 = a2 - 16 * v9;
      uint64_t v11 = v8 + 2;
      if (v11 < a4)
      {
        unint64_t v12 = *(void *)(v10 - 16);
        unint64_t v13 = *(void *)(v10 - 32);
        if (v12 < v13 || v13 >= v12 && *(void *)(v10 - 8) < *(void *)(v10 - 24))
        {
          v10 -= 16;
          uint64_t v9 = v11;
        }
      }
      unint64_t v14 = *(void *)(v10 - 16);
      unint64_t v15 = *(void *)(a6 - 16);
      if (v14 >= v15)
      {
        if (v15 >= v14)
        {
          unint64_t v16 = *(void *)(a6 - 8);
          if (*(void *)(v10 - 8) < v16) {
            return;
          }
        }
        else
        {
          unint64_t v16 = *(void *)(a6 - 8);
        }
        *(void *)(a6 - 16) = v14;
        *(void *)(a6 - 8) = *(void *)(v10 - 8);
        if (v7 >= v9)
        {
          while (1)
          {
            uint64_t v18 = 2 * v9;
            uint64_t v9 = (2 * v9) | 1;
            uint64_t v17 = a2 - 16 * v9;
            uint64_t v19 = v18 + 2;
            if (v19 < a4)
            {
              unint64_t v20 = *(void *)(v17 - 16);
              unint64_t v21 = *(void *)(v17 - 32);
              if (v20 < v21 || v21 >= v20 && *(void *)(v17 - 8) < *(void *)(v17 - 24))
              {
                v17 -= 16;
                uint64_t v9 = v19;
              }
            }
            unint64_t v22 = *(void *)(v17 - 16);
            if (v22 < v15 || v15 >= v22 && *(void *)(v17 - 8) < v16) {
              break;
            }
            *(void *)(v10 - 16) = v22;
            *(void *)(v10 - 8) = *(void *)(v17 - 8);
            uint64_t v10 = v17;
            if (v7 < v9) {
              goto LABEL_23;
            }
          }
        }
        uint64_t v17 = v10;
LABEL_23:
        *(void *)(v17 - 16) = v15;
        *(void *)(v17 - 8) = v16;
      }
    }
  }
}

void std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = a4 - 2;
  if (a4 < 2) {
    uint64_t v5 = a4 - 1;
  }
  uint64_t v6 = v5 >> 1;
  do
  {
    uint64_t v7 = a2;
    a2 += 16 * ~v4;
    uint64_t v8 = 2 * v4;
    uint64_t v4 = (2 * v4) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a4)
    {
      unint64_t v10 = *(void *)(a2 - 16);
      unint64_t v11 = *(void *)(a2 - 32);
      if (v10 < v11 || v11 >= v10 && *(void *)(a2 - 8) < *(void *)(a2 - 24))
      {
        a2 -= 16;
        uint64_t v4 = v9;
      }
    }
    *(void *)(v7 - 16) = *(void *)(a2 - 16);
    *(void *)(v7 - 8) = *(void *)(a2 - 8);
  }
  while (v4 <= v6);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = a6 - 2;
  if (a6 >= 2)
  {
    unint64_t v7 = v6 >> 1;
    uint64_t v8 = a2 - 16 * (v6 >> 1);
    unint64_t v9 = *(void *)(v8 - 16);
    unint64_t v10 = *a4;
    if (v9 >= *a4)
    {
      if (v10 < v9) {
        return;
      }
      unint64_t v11 = a4[1];
      if (*(void *)(v8 - 8) >= v11) {
        return;
      }
    }
    else
    {
      unint64_t v11 = a4[1];
    }
    *a4 = v9;
    a4[1] = *(void *)(v8 - 8);
    if (v6 >= 2)
    {
      while (1)
      {
        unint64_t v13 = v7 - 1;
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v12 = a2 - 16 * v7;
        unint64_t v14 = *(void *)(v12 - 16);
        if (v14 >= v10 && (v10 < v14 || *(void *)(v12 - 8) >= v11)) {
          break;
        }
        *(void *)(v8 - 16) = v14;
        *(void *)(v8 - 8) = *(void *)(v12 - 8);
        uint64_t v8 = a2 - 16 * v7;
        if (v13 <= 1) {
          goto LABEL_12;
        }
      }
    }
    uint64_t v12 = v8;
LABEL_12:
    *(void *)(v12 - 16) = v10;
    *(void *)(v12 - 8) = v11;
  }
}

void turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_full()", 9);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 297, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E304A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<std::vector<double>>::operator=[abi:ne180100](void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    unint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::flexible_type *>((uint64_t)&v19, a2, v15, (uint64_t)v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::flexible_type *>((uint64_t)&v20, a2, a3, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 16;
      std::allocator<turi::flexible_type>::destroy[abi:ne180100](v8, v18);
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_223E30730(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223E30738(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::flexible_type *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t *)a4)
      {
        switch(*(unsigned char *)(a4 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a4;
              if (!*(void *)a4) {
                goto LABEL_35;
              }
              if (*((char *)v7 + 31) < 0) {
                operator delete((void *)v7[1]);
              }
              atomic_ullong *volatile v8 = v7;
              uint64_t v9 = 0x1012C404EF22A49;
              goto LABEL_34;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a4;
              if (!*(void *)a4) {
                goto LABEL_35;
              }
              uint64_t v11 = (void *)v10[1];
              if (v11)
              {
                void v10[2] = (atomic_ullong)v11;
                operator delete(v11);
              }
              atomic_ullong *volatile v8 = v10;
              uint64_t v9 = 0x1080C409938AC02;
              goto LABEL_34;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a4;
              if (!*(void *)a4) {
                goto LABEL_35;
              }
              uint64_t v24 = (void **)(v12 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v24);
              goto LABEL_20;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a4;
              if (!*(void *)a4) {
                goto LABEL_35;
              }
              uint64_t v24 = (void **)(v12 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v24);
LABEL_20:
              atomic_ullong *volatile v8 = v12;
              uint64_t v9 = 0x1020C405E66F15BLL;
              goto LABEL_34;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)a4;
              if (!*(void *)a4) {
                goto LABEL_35;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v13 + 2);
              atomic_ullong *volatile v8 = v13;
              unsigned int v14 = -235920773;
              goto LABEL_33;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)a4;
              if (*(void *)a4)
              {
                uint64_t v16 = (void *)v15[6];
                if (v16)
                {
                  v15[7] = (atomic_ullong)v16;
                  operator delete(v16);
                }
                uint64_t v17 = (void *)v15[3];
                if (v17)
                {
                  v15[4] = (atomic_ullong)v17;
                  operator delete(v17);
                }
                uint64_t v18 = (std::__shared_weak_count *)v15[2];
                if (v18) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
                }
                atomic_ullong *volatile v8 = v15;
                unsigned int v14 = 2071181815;
LABEL_33:
                uint64_t v9 = v14 | 0x1030C4000000000;
LABEL_34:
                MEMORY[0x22A614FA0](v8, v9);
              }
LABEL_35:
              *(void *)a4 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v19 = *v5;
        *(void *)(a4 + 5) = *(uint64_t *)((char *)v5 + 5);
        *(void *)a4 = v19;
        LODWORD(v19) = *((unsigned __int8 *)v5 + 12);
        *(unsigned char *)(a4 + 12) = v19;
        BOOL v20 = v19 > 9;
        int v21 = (1 << v19) & 0x33C;
        if (!v20 && v21 != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
        }
      }
      v5 += 2;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(char **a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  atomic_ullong *volatile v8 = *a1;
  if (a4 <= (a1[2] - *a1) >> 5)
  {
    uint64_t result = (uint64_t)a1[1];
    unint64_t v14 = (result - (uint64_t)v8) >> 5;
    if (v14 >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v19 = v8;
      }
      else
      {
        uint64_t v19 = v8;
        do
        {
          std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]((uint64_t)v8, v6);
          v6 += 4;
          v8 += 32;
          v19 += 32;
        }
        while (v6 != a3);
        uint64_t result = (uint64_t)a1[1];
      }
      while ((char *)result != v19)
        uint64_t result = std::pair<turi::flexible_type,turi::flexible_type>::~pair(result - 32);
      a1[1] = v19;
    }
    else
    {
      atomic_ullong *volatile v15 = &a2[4 * v14];
      if ((char *)result != v8)
      {
        uint64_t v16 = 32 * v14;
        do
        {
          uint64_t result = std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]((uint64_t)v8, v6);
          v6 += 4;
          v8 += 32;
          v16 -= 32;
        }
        while (v16);
        atomic_ullong *volatile v8 = a1[1];
      }
      uint64_t v17 = v8;
      if (v15 != a3)
      {
        uint64_t v17 = v8;
        uint64_t result = (uint64_t)v8;
        do
        {
          uint64_t v18 = std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100](result, v15);
          v15 += 4;
          uint64_t result = v18 + 32;
          v17 += 32;
        }
        while (v15 != a3);
      }
      a1[1] = v17;
    }
  }
  else
  {
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vdeallocate((void **)a1);
    if (a4 >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = a1[2] - *a1;
    uint64_t v10 = v9 >> 4;
    if (v9 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](a1, v11);
    uint64_t result = (uint64_t)a1[1];
    while (v6 != a3)
    {
      uint64_t v13 = std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100](result, v6);
      v6 += 4;
      uint64_t result = v13 + 32;
    }
    a1[1] = (char *)result;
  }
  return result;
}

uint64_t std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2 != (uint64_t *)a1)
  {
    switch(*(unsigned char *)(a1 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          atomic_ullong *volatile v8 = (void *)v7[1];
          if (v8)
          {
            void v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          uint64_t v36 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          uint64_t v36 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_19:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a1;
          if (*(void *)a1)
          {
            uint64_t v13 = (void *)v12[6];
            if (v13)
            {
              v12[7] = (atomic_ullong)v13;
              operator delete(v13);
            }
            unint64_t v14 = (void *)v12[3];
            if (v14)
            {
              v12[4] = (atomic_ullong)v14;
              operator delete(v14);
            }
            atomic_ullong *volatile v15 = (std::__shared_weak_count *)v12[2];
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            atomic_ullong *volatile v5 = v12;
            unsigned int v11 = 2071181815;
LABEL_32:
            uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v5, v6);
          }
LABEL_34:
          *(void *)a1 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v16 = *a2;
    *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)a1 = v16;
    LODWORD(v16) = *((unsigned __int8 *)a2 + 12);
    *(unsigned char *)(a1 + 12) = v16;
    BOOL v17 = v16 > 9;
    int v18 = (1 << v16) & 0x33C;
    if (!v17 && v18 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a1, 1uLL);
    }
    BOOL v20 = (atomic_ullong *volatile *)(a1 + 16);
    switch(*(unsigned char *)(a1 + 28))
    {
      case 2:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v21 = *v20;
          if (!*v20) {
            goto LABEL_72;
          }
          if (*((char *)v21 + 31) < 0) {
            operator delete((void *)v21[1]);
          }
          atomic_ullong *volatile v22 = v21;
          uint64_t v23 = 0x1012C404EF22A49;
          goto LABEL_71;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v24 = *v20;
          if (!*v20) {
            goto LABEL_72;
          }
          uint64_t v25 = (void *)v24[1];
          if (v25)
          {
            v24[2] = (atomic_ullong)v25;
            operator delete(v25);
          }
          atomic_ullong *volatile v22 = v24;
          uint64_t v23 = 0x1080C409938AC02;
          goto LABEL_71;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v26 = *v20;
          if (!*v20) {
            goto LABEL_72;
          }
          uint64_t v36 = (void **)(v26 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
          goto LABEL_57;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v26 = *v20;
          if (!*v20) {
            goto LABEL_72;
          }
          uint64_t v36 = (void **)(v26 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_57:
          atomic_ullong *volatile v22 = v26;
          uint64_t v23 = 0x1020C405E66F15BLL;
          goto LABEL_71;
        }
        break;
      case 8:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v27 = *v20;
          if (!*v20) {
            goto LABEL_72;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v27 + 2);
          atomic_ullong *volatile v22 = v27;
          unsigned int v28 = -235920773;
          goto LABEL_70;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v29 = *v20;
          if (*v20)
          {
            uint64_t v30 = (void *)v29[6];
            if (v30)
            {
              v29[7] = (atomic_ullong)v30;
              operator delete(v30);
            }
            uint64_t v31 = (void *)v29[3];
            if (v31)
            {
              void v29[4] = (atomic_ullong)v31;
              operator delete(v31);
            }
            unint64_t v32 = (std::__shared_weak_count *)v29[2];
            if (v32) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v32);
            }
            atomic_ullong *volatile v22 = v29;
            unsigned int v28 = 2071181815;
LABEL_70:
            uint64_t v23 = v28 | 0x1030C4000000000;
LABEL_71:
            MEMORY[0x22A614FA0](v22, v23);
          }
LABEL_72:
          atomic_ullong *volatile *v20 = 0;
        }
        break;
      default:
        break;
    }
    unint64_t v33 = (atomic_ullong *)a2[2];
    *(void *)(a1 + 21) = *(uint64_t *)((char *)a2 + 21);
    atomic_ullong *volatile *v20 = v33;
    unsigned int v34 = *((unsigned __int8 *)a2 + 28);
    *(unsigned char *)(a1 + 28) = v34;
    if (v34 <= 9 && ((1 << v34) & 0x33C) != 0) {
      atomic_fetch_add(*v20, 1uLL);
    }
  }
  return a1;
}

{
  atomic_ullong *volatile v4;
  atomic_ullong *volatile v5;
  uint64_t v6;
  atomic_ullong *volatile v7;
  void *v8;
  atomic_ullong *volatile v9;
  atomic_ullong *volatile v10;
  unsigned int v11;
  atomic_ullong *volatile v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  atomic_ullong *volatile *v17;
  atomic_ullong *volatile v18;
  atomic_ullong *volatile v19;
  uint64_t v20;
  atomic_ullong *volatile v21;
  void *v22;
  atomic_ullong *volatile v23;
  atomic_ullong *volatile v24;
  unsigned int v25;
  atomic_ullong *volatile v26;
  void *v27;
  void *v28;
  std::__shared_weak_count *v29;
  atomic_ullong *v30;
  void **v32;

  if (a2 != (uint64_t *)a1)
  {
    switch(*(unsigned char *)(a1 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          atomic_ullong *volatile v8 = (void *)v7[1];
          if (v8)
          {
            void v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          unint64_t v32 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          unint64_t v32 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_19:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a1;
          if (*(void *)a1)
          {
            uint64_t v13 = (void *)v12[6];
            if (v13)
            {
              v12[7] = (atomic_ullong)v13;
              operator delete(v13);
            }
            unint64_t v14 = (void *)v12[3];
            if (v14)
            {
              v12[4] = (atomic_ullong)v14;
              operator delete(v14);
            }
            atomic_ullong *volatile v15 = (std::__shared_weak_count *)v12[2];
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            atomic_ullong *volatile v5 = v12;
            unsigned int v11 = 2071181815;
LABEL_32:
            uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v5, v6);
          }
LABEL_34:
          *(void *)a1 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v16 = *a2;
    *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)a1 = v16;
    *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
    *((unsigned char *)a2 + 12) = 0;
    BOOL v17 = (atomic_ullong *volatile *)(a1 + 16);
    switch(*(unsigned char *)(a1 + 28))
    {
      case 2:
        if (atomic_fetch_add(*v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          int v18 = *v17;
          if (!*v17) {
            goto LABEL_67;
          }
          if (*((char *)v18 + 31) < 0) {
            operator delete((void *)v18[1]);
          }
          uint64_t v19 = v18;
          BOOL v20 = 0x1012C404EF22A49;
          goto LABEL_66;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v21 = *v17;
          if (!*v17) {
            goto LABEL_67;
          }
          atomic_ullong *volatile v22 = (void *)v21[1];
          if (v22)
          {
            v21[2] = (atomic_ullong)v22;
            operator delete(v22);
          }
          uint64_t v19 = v21;
          BOOL v20 = 0x1080C409938AC02;
          goto LABEL_66;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v23 = *v17;
          if (!*v17) {
            goto LABEL_67;
          }
          unint64_t v32 = (void **)(v23 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_52;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v23 = *v17;
          if (!*v17) {
            goto LABEL_67;
          }
          unint64_t v32 = (void **)(v23 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_52:
          uint64_t v19 = v23;
          BOOL v20 = 0x1020C405E66F15BLL;
          goto LABEL_66;
        }
        break;
      case 8:
        if (atomic_fetch_add(*v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v24 = *v17;
          if (!*v17) {
            goto LABEL_67;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
          uint64_t v19 = v24;
          uint64_t v25 = -235920773;
          goto LABEL_65;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v26 = *v17;
          if (*v17)
          {
            atomic_ullong *volatile v27 = (void *)v26[6];
            if (v27)
            {
              v26[7] = (atomic_ullong)v27;
              operator delete(v27);
            }
            unsigned int v28 = (void *)v26[3];
            if (v28)
            {
              v26[4] = (atomic_ullong)v28;
              operator delete(v28);
            }
            atomic_ullong *volatile v29 = (std::__shared_weak_count *)v26[2];
            if (v29) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v29);
            }
            uint64_t v19 = v26;
            uint64_t v25 = 2071181815;
LABEL_65:
            BOOL v20 = v25 | 0x1030C4000000000;
LABEL_66:
            MEMORY[0x22A614FA0](v19, v20);
          }
LABEL_67:
          *BOOL v17 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v30 = (atomic_ullong *)a2[2];
    *(void *)(a1 + 21) = *(uint64_t *)((char *)a2 + 21);
    *BOOL v17 = v30;
    *(unsigned char *)(a1 + 28) = *((unsigned char *)a2 + 28);
    *((unsigned char *)a2 + 28) = 0;
  }
  return a1;
}

uint64_t *std::unique_ptr<turi::unity_server_options>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::default_delete<turi::unity_server_options>::operator()[abi:ne180100]((uint64_t)a1, v2);
  }
  return a1;
}

void std::default_delete<turi::unity_server_options>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x22A614FA0);
  }
}

void *std::function<void ()(int,char const*,unsigned long)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(int,char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(int,char const*,unsigned long)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(int,char const*,unsigned long)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<void ()(int,char const*,unsigned long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(int,char const*,unsigned long)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    atomic_ullong *volatile v4 = (void *)result[3];
    atomic_ullong *volatile v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_223E313FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

BOOL std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

uint64_t std::string::compare[abi:ne180100](const void **a1, unsigned char *a2)
{
  char v2 = a2[23];
  if (*((char *)a1 + 23) < 0)
  {
    size_t v4 = a1;
    a1 = (const void **)*a1;
    size_t v3 = (size_t)v4[1];
  }
  else
  {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  if (v2 >= 0) {
    size_t v5 = a2[23];
  }
  else {
    size_t v5 = *((void *)a2 + 1);
  }
  if (v2 < 0) {
    a2 = *(unsigned char **)a2;
  }
  if (v5 >= v3) {
    size_t v6 = v3;
  }
  else {
    size_t v6 = v5;
  }
  LODWORD(result) = memcmp(a1, a2, v6);
  if (v3 < v5) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = v5 < v3;
  }
  if (result) {
    return result;
  }
  else {
    return v8;
  }
}

void sub_223E31518(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__value_func[abi:ne180100](void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::map<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op,std::less<std::string>,std::allocator<std::pair<std::string const,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::map[abi:ne180100](uint64_t *result, uint64_t a2)
{
  qword_268081100 = 0;
  qword_2680810F8 = 0;
  turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map = (uint64_t)&qword_2680810F8;
  if (a2)
  {
    char v2 = result;
    size_t v3 = &result[4 * a2];
    do
    {
      size_t v5 = &qword_2680810F8;
      uint64_t v4 = qword_2680810F8;
      if ((uint64_t *)turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map == &qword_2680810F8) {
        goto LABEL_10;
      }
      if (qword_2680810F8)
      {
        do
        {
          size_t v5 = (uint64_t *)v4;
          uint64_t v4 = *(void *)(v4 + 8);
        }
        while (v4);
      }
      else
      {
        size_t v6 = &qword_2680810F8;
        do
        {
          size_t v5 = (uint64_t *)v6[2];
          BOOL v7 = *v5 == (void)v6;
          size_t v6 = v5;
        }
        while (v7);
      }
      uint64_t result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268081100, (const void **)v5 + 4, (const void **)v2);
      uint64_t v4 = qword_2680810F8;
      if (result)
      {
LABEL_10:
        if (!v4) {
          goto LABEL_22;
        }
        unsigned int v8 = v5 + 1;
      }
      else
      {
        if (!qword_2680810F8)
        {
LABEL_22:
          size_t v5 = &qword_2680810F8;
          unsigned int v8 = &qword_2680810F8;
LABEL_23:
          atomic_ullong *volatile v10 = (char *)operator new(0x40uLL);
          v14[0] = (uint64_t)v10;
          v14[1] = (uint64_t)&qword_2680810F8;
          char v15 = 0;
          unsigned int v11 = (std::string *)(v10 + 32);
          if (*((char *)v2 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)*v2, v2[1]);
            uint64_t v13 = (uint64_t *)v14[0];
          }
          else
          {
            long long v12 = *(_OWORD *)v2;
            *((void *)v10 + 6) = v2[2];
            *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
            uint64_t v13 = (uint64_t *)v10;
          }
          *((_DWORD *)v10 + 14) = *((_DWORD *)v2 + 6);
          char v15 = 1;
          *uint64_t v13 = 0;
          v13[1] = 0;
          void v13[2] = (uint64_t)v5;
          uint64_t *v8 = (uint64_t)v13;
          if (*(void *)turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map)
          {
            turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map = *(void *)turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::_op_map;
            uint64_t v13 = (uint64_t *)*v8;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_2680810F8, v13);
          ++qword_268081100;
          v14[0] = 0;
          uint64_t result = std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>>>>::~unique_ptr[abi:ne180100](v14);
          goto LABEL_29;
        }
        unsigned int v8 = &qword_2680810F8;
        while (1)
        {
          while (1)
          {
            size_t v5 = (uint64_t *)v4;
            atomic_ullong *volatile v9 = (const void **)(v4 + 32);
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268081100, (const void **)v2, (const void **)(v4 + 32)))break; {
            uint64_t v4 = *v5;
            }
            unsigned int v8 = v5;
            if (!*v5) {
              goto LABEL_23;
            }
          }
          uint64_t result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268081100, v9, (const void **)v2);
          if (!result) {
            break;
          }
          unsigned int v8 = v5 + 1;
          uint64_t v4 = v5[1];
          if (!v4) {
            goto LABEL_23;
          }
        }
      }
      if (!*v8) {
        goto LABEL_23;
      }
LABEL_29:
      v2 += 4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_223E3184C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  std::__tree<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::destroy((char *)qword_2680810F8);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op,std::less<std::string>,std::allocator<std::pair<std::string const,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 55) < 0) {
      operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::apply_binary_op_ff(turi::flexible_type const&,char const*,turi::flexible_type const&)::binary_op>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

BOOL turi::flexible_type_impl::ndarray<double>::same_shape(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  size_t v3 = *(void **)(a1 + 24);
  unint64_t v4 = v3 - v2;
  size_t v5 = *(void **)(a2 + 16);
  if (v4 != (uint64_t)(*(void *)(a2 + 24) - (void)v5) >> 3) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v6 = v4 <= 1 ? 1 : v3 - v2;
  if (*v2 != *v5) {
    return 0;
  }
  uint64_t v7 = 1;
  do
  {
    unint64_t v8 = v7;
    if (v6 == v7) {
      break;
    }
    uint64_t v9 = v2[v7];
    uint64_t v10 = v5[v7++];
  }
  while (v9 == v10);
  return v8 >= v4;
}

BOOL turi::flexible_type_impl::lt_operator::operator()(__n128 a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = *a3;
  if (a3[1] == *a3)
  {
    uint64_t v59 = 0;
    return (unint64_t)v59 < a4[1] - *a4;
  }
  else
  {
    unint64_t v7 = 0;
LABEL_3:
    if (v7 < (uint64_t)(a4[1] - *a4) >> 4)
    {
      uint64_t v8 = *a4 + 16 * v7;
      uint64_t v9 = (uint64_t *)(v5 + 16 * v7);
      switch(*(unsigned char *)(v8 + 12))
      {
        case 0:
          switch(*((unsigned char *)v9 + 12))
          {
            case 0:
              if (*v9 > *(void *)v8) {
                return 0;
              }
              goto LABEL_64;
            case 1:
              a1.n128_u64[0] = *v9;
              double v60 = (double)*(uint64_t *)v8;
              goto LABEL_114;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_63;
            case 6:
              if (*(void *)v8 < *v9 << 8 >> 8) {
                return 0;
              }
              goto LABEL_64;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*((unsigned char *)v9 + 12))
          {
            case 0:
              a1.n128_u64[0] = *(void *)v8;
              if (*(double *)v8 < (double)*v9) {
                return 0;
              }
              goto LABEL_64;
            case 1:
              a1.n128_u64[0] = *v9;
              double v60 = *(double *)v8;
              goto LABEL_114;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_63;
            case 6:
              double v60 = *(double *)v8;
              a1.n128_f64[0] = (double)*((int *)v9 + 2) / 1000000.0 + (double)(*v9 << 8 >> 8);
LABEL_114:
              if (a1.n128_f64[0] > v60) {
                return 0;
              }
              goto LABEL_64;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v10 = *((unsigned __int8 *)v9 + 12);
          if (v10 - 3 < 7 || v10 < 2) {
            goto LABEL_63;
          }
          if (v10 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          double v12 = *(double *)v8;
          uint64_t v13 = *v9;
          uint64_t v16 = *(const void **)(v13 + 8);
          uint64_t v14 = v13 + 8;
          char v15 = v16;
          int v17 = *(char *)(v14 + 23);
          BOOL v20 = *(const void **)(*(void *)&v12 + 8);
          uint64_t v18 = *(void *)&v12 + 8;
          uint64_t v19 = v20;
          int v21 = *(char *)(v18 + 23);
          if (v21 >= 0) {
            size_t v22 = *(unsigned __int8 *)(v18 + 23);
          }
          else {
            size_t v22 = *(void *)(v18 + 8);
          }
          if (v21 >= 0) {
            uint64_t v23 = (const void *)v18;
          }
          else {
            uint64_t v23 = v19;
          }
          if (v17 >= 0) {
            size_t v24 = *(unsigned __int8 *)(v14 + 23);
          }
          else {
            size_t v24 = *(void *)(v14 + 8);
          }
          if (v17 >= 0) {
            uint64_t v25 = (const void *)v14;
          }
          else {
            uint64_t v25 = v15;
          }
          if (v24 >= v22) {
            size_t v26 = v22;
          }
          else {
            size_t v26 = v24;
          }
          int v27 = memcmp(v23, v25, v26);
          BOOL v28 = v22 < v24;
          if (v27) {
            BOOL v28 = v27 < 0;
          }
          if (v28) {
            return 0;
          }
          goto LABEL_64;
        case 3:
          unsigned int v29 = *((unsigned __int8 *)v9 + 12);
          if (v29 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v29 != 3) {
            goto LABEL_63;
          }
          double v30 = *(double *)v8;
          uint64_t v31 = *(unint64_t **)(*v9 + 8);
          uint64_t v32 = *(void *)(*v9 + 16);
          unint64_t v33 = *(double **)(*(void *)&v30 + 8);
          unint64_t v34 = (uint64_t)(*(void *)(*(void *)&v30 + 16) - (void)v33) >> 3;
          uint64_t v36 = v32 - (void)v31;
          BOOL v35 = v36 == 0;
          unint64_t v37 = v36 >> 3;
          if (v35) {
            goto LABEL_47;
          }
          if (v37 <= 1) {
            uint64_t v38 = 1;
          }
          else {
            uint64_t v38 = v37;
          }
          unint64_t v39 = v34;
          break;
        case 4:
          unsigned int v40 = *((unsigned __int8 *)v9 + 12);
          if (v40 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v40 != 4) {
            goto LABEL_63;
          }
          if (turi::flexible_type_impl::gt_operator::operator()(a1, (uint64_t)&v76, (uint64_t *)(*v9 + 8), (void *)(*(void *)v8 + 8)))
          {
            return 0;
          }
          goto LABEL_64;
        case 5:
          if (*((unsigned __int8 *)v9 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_63;
        case 6:
          switch(*((unsigned char *)v9 + 12))
          {
            case 0:
              if (*v9 > (uint64_t)(*(void *)v8 << 8) >> 8) {
                return 0;
              }
              goto LABEL_64;
            case 1:
              a1.n128_u64[0] = *v9;
              if ((double)*(int *)(v8 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v8 << 8) >> 8) < *(double *)v9) {
                return 0;
              }
              goto LABEL_64;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_63;
            case 6:
              uint64_t v61 = *v9 << 8 >> 8;
              if (v61 > (uint64_t)(*(void *)v8 << 8) >> 8
                || v61 == (uint64_t)(*(void *)v8 << 8) >> 8 && *((_DWORD *)v9 + 2) > *(_DWORD *)(v8 + 8))
              {
                return 0;
              }
              goto LABEL_64;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          if (*((unsigned __int8 *)v9 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_63;
        case 8:
          if (*((unsigned __int8 *)v9 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_63;
        case 9:
          if (*((unsigned __int8 *)v9 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
LABEL_63:
          turi::flexible_type_fail(0);
          goto LABEL_64;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (v39)
      {
        a1.n128_u64[0] = *v31;
        if (*(double *)v31 > *v33) {
          break;
        }
        if (*(double *)v31 < *v33) {
          goto LABEL_64;
        }
        --v39;
        ++v31;
        ++v33;
        if (!--v38)
        {
LABEL_47:
          if (v37 > v34) {
            return 0;
          }
LABEL_64:
          uint64_t v41 = *a4 + 16 * v7;
          uint64_t v42 = *a3 + 16 * v7;
          switch(*(unsigned char *)(v41 + 12))
          {
            case 0:
              switch(*(unsigned char *)(v42 + 12))
              {
                case 0:
                  if (*(void *)v42 < *(void *)v41) {
                    return 1;
                  }
                  goto LABEL_107;
                case 1:
                  a1.n128_u64[0] = *(void *)v42;
                  double v62 = (double)*(uint64_t *)v41;
                  goto LABEL_127;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_106;
                case 6:
                  if (*(void *)v41 > (uint64_t)(*(void *)v42 << 8) >> 8) {
                    return 1;
                  }
                  goto LABEL_107;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 1:
              switch(*(unsigned char *)(v42 + 12))
              {
                case 0:
                  a1.n128_u64[0] = *(void *)v41;
                  if (*(double *)v41 > (double)*(uint64_t *)v42) {
                    return 1;
                  }
                  goto LABEL_107;
                case 1:
                  a1.n128_u64[0] = *(void *)v42;
                  double v62 = *(double *)v41;
                  goto LABEL_127;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_106;
                case 6:
                  double v62 = *(double *)v41;
                  a1.n128_f64[0] = (double)*(int *)(v42 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v42 << 8) >> 8);
LABEL_127:
                  if (a1.n128_f64[0] < v62) {
                    return 1;
                  }
                  goto LABEL_107;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 2:
              unsigned int v43 = *(unsigned __int8 *)(v42 + 12);
              if (v43 - 3 < 7 || v43 < 2) {
                goto LABEL_106;
              }
              if (v43 != 2) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              unint64_t v45 = *(void *)v42;
              if (*(char *)(v45 + 31) < 0)
              {
                uint64_t v46 = *(const void **)(v45 + 8);
                size_t v47 = *(void *)(v45 + 16);
              }
              else
              {
                uint64_t v46 = (const void *)(v45 + 8);
                size_t v47 = *(unsigned __int8 *)(v45 + 31);
              }
              double v64 = *(double *)v41;
              unint64_t v65 = (const void *)(*(void *)&v64 + 8);
              size_t v66 = *(unsigned __int8 *)(*(void *)&v64 + 31);
              unint64_t v68 = *(const void **)(*(void *)&v64 + 8);
              size_t v67 = *(void *)(*(void *)&v64 + 16);
              if ((v66 & 0x80u) == 0) {
                size_t v69 = v66;
              }
              else {
                size_t v69 = v67;
              }
              if ((v66 & 0x80u) == 0) {
                uint64_t v70 = v65;
              }
              else {
                uint64_t v70 = v68;
              }
              if (v69 >= v47) {
                size_t v71 = v47;
              }
              else {
                size_t v71 = v69;
              }
              int v72 = memcmp(v46, v70, v71);
              BOOL v73 = v47 < v69;
              if (v72) {
                BOOL v73 = v72 < 0;
              }
              if (v73) {
                return 1;
              }
              goto LABEL_107;
            case 3:
              unsigned int v48 = *(unsigned __int8 *)(v42 + 12);
              if (v48 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v48 != 3) {
                goto LABEL_106;
              }
              double v49 = *(double *)v41;
              uint64_t v50 = *(unint64_t **)(*(void *)v42 + 8);
              uint64_t v51 = *(void *)(*(void *)v42 + 16);
              unint64_t v52 = *(double **)(*(void *)&v49 + 8);
              unint64_t v53 = (uint64_t)(*(void *)(*(void *)&v49 + 16) - (void)v52) >> 3;
              uint64_t v54 = v51 - (void)v50;
              BOOL v35 = v54 == 0;
              unint64_t v55 = v54 >> 3;
              if (v35) {
                goto LABEL_90;
              }
              if (v55 <= 1) {
                uint64_t v56 = 1;
              }
              else {
                uint64_t v56 = v55;
              }
              unint64_t v57 = v53;
              break;
            case 4:
              unsigned int v58 = *(unsigned __int8 *)(v42 + 12);
              if (v58 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v58 != 4) {
                goto LABEL_106;
              }
              if (turi::flexible_type_impl::lt_operator::operator()(&v75, *(void *)v42 + 8, *(void *)v41 + 8, a1))return 1; {
              goto LABEL_107;
              }
            case 5:
              if (*(unsigned __int8 *)(v42 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_106;
            case 6:
              switch(*(unsigned char *)(v42 + 12))
              {
                case 0:
                  if (*(void *)v42 < (uint64_t)(*(void *)v41 << 8) >> 8) {
                    return 1;
                  }
                  goto LABEL_107;
                case 1:
                  a1.n128_u64[0] = *(void *)v42;
                  if ((double)*(int *)(v41 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v41 << 8) >> 8) > *(double *)v42) {
                    return 1;
                  }
                  goto LABEL_107;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_106;
                case 6:
                  uint64_t v63 = (uint64_t)(*(void *)v42 << 8) >> 8;
                  if (v63 < (uint64_t)(*(void *)v41 << 8) >> 8
                    || v63 == (uint64_t)(*(void *)v41 << 8) >> 8 && *(_DWORD *)(v42 + 8) < *(_DWORD *)(v41 + 8))
                  {
                    return 1;
                  }
                  goto LABEL_107;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 7:
              if (*(unsigned __int8 *)(v42 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_106;
            case 8:
              if (*(unsigned __int8 *)(v42 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_106;
            case 9:
              if (*(unsigned __int8 *)(v42 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
LABEL_106:
              turi::flexible_type_fail(0);
              goto LABEL_107;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          while (v57)
          {
            a1.n128_u64[0] = *v50;
            if (*(double *)v50 > *v52) {
              break;
            }
            if (*(double *)v50 < *v52) {
              return 1;
            }
            --v57;
            ++v50;
            ++v52;
            if (!--v56)
            {
LABEL_90:
              if (v55 < v53) {
                return 1;
              }
              break;
            }
          }
LABEL_107:
          ++v7;
          uint64_t v5 = *a3;
          uint64_t v59 = a3[1] - *a3;
          if (v7 < v59 >> 4) {
            goto LABEL_3;
          }
          return (unint64_t)v59 < a4[1] - *a4;
        }
      }
    }
    return 0;
  }
}

BOOL turi::flexible_type_impl::gt_operator::operator()(__n128 a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = *a3;
  if (a3[1] == *a3)
  {
    uint64_t v59 = 0;
    return (unint64_t)v59 > a4[1] - *a4;
  }
  else
  {
    unint64_t v7 = 0;
LABEL_3:
    if (v7 < (uint64_t)(a4[1] - *a4) >> 4)
    {
      uint64_t v8 = *a4 + 16 * v7;
      uint64_t v9 = (uint64_t *)(v5 + 16 * v7);
      switch(*(unsigned char *)(v8 + 12))
      {
        case 0:
          switch(*((unsigned char *)v9 + 12))
          {
            case 0:
              if (*v9 > *(void *)v8) {
                return 1;
              }
              goto LABEL_64;
            case 1:
              a1.n128_u64[0] = *v9;
              double v60 = (double)*(uint64_t *)v8;
              goto LABEL_114;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_63;
            case 6:
              if (*(void *)v8 < *v9 << 8 >> 8) {
                return 1;
              }
              goto LABEL_64;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*((unsigned char *)v9 + 12))
          {
            case 0:
              a1.n128_u64[0] = *(void *)v8;
              if (*(double *)v8 < (double)*v9) {
                return 1;
              }
              goto LABEL_64;
            case 1:
              a1.n128_u64[0] = *v9;
              double v60 = *(double *)v8;
              goto LABEL_114;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_63;
            case 6:
              double v60 = *(double *)v8;
              a1.n128_f64[0] = (double)*((int *)v9 + 2) / 1000000.0 + (double)(*v9 << 8 >> 8);
LABEL_114:
              if (a1.n128_f64[0] > v60) {
                return 1;
              }
              goto LABEL_64;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v10 = *((unsigned __int8 *)v9 + 12);
          if (v10 - 3 < 7 || v10 < 2) {
            goto LABEL_63;
          }
          if (v10 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          double v12 = *(double *)v8;
          uint64_t v13 = *v9;
          uint64_t v16 = *(const void **)(v13 + 8);
          uint64_t v14 = v13 + 8;
          char v15 = v16;
          int v17 = *(char *)(v14 + 23);
          BOOL v20 = *(const void **)(*(void *)&v12 + 8);
          uint64_t v18 = *(void *)&v12 + 8;
          uint64_t v19 = v20;
          int v21 = *(char *)(v18 + 23);
          if (v21 >= 0) {
            size_t v22 = *(unsigned __int8 *)(v18 + 23);
          }
          else {
            size_t v22 = *(void *)(v18 + 8);
          }
          if (v21 >= 0) {
            uint64_t v23 = (const void *)v18;
          }
          else {
            uint64_t v23 = v19;
          }
          if (v17 >= 0) {
            size_t v24 = *(unsigned __int8 *)(v14 + 23);
          }
          else {
            size_t v24 = *(void *)(v14 + 8);
          }
          if (v17 >= 0) {
            uint64_t v25 = (const void *)v14;
          }
          else {
            uint64_t v25 = v15;
          }
          if (v24 >= v22) {
            size_t v26 = v22;
          }
          else {
            size_t v26 = v24;
          }
          int v27 = memcmp(v23, v25, v26);
          BOOL v28 = v22 < v24;
          if (v27) {
            BOOL v28 = v27 < 0;
          }
          if (v28) {
            return 1;
          }
          goto LABEL_64;
        case 3:
          unsigned int v29 = *((unsigned __int8 *)v9 + 12);
          if (v29 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v29 != 3) {
            goto LABEL_63;
          }
          double v30 = *(double *)v8;
          uint64_t v31 = *(unint64_t **)(*v9 + 8);
          uint64_t v32 = *(void *)(*v9 + 16);
          unint64_t v33 = *(double **)(*(void *)&v30 + 8);
          unint64_t v34 = (uint64_t)(*(void *)(*(void *)&v30 + 16) - (void)v33) >> 3;
          uint64_t v36 = v32 - (void)v31;
          BOOL v35 = v36 == 0;
          unint64_t v37 = v36 >> 3;
          if (v35) {
            goto LABEL_47;
          }
          if (v37 <= 1) {
            uint64_t v38 = 1;
          }
          else {
            uint64_t v38 = v37;
          }
          unint64_t v39 = v34;
          break;
        case 4:
          unsigned int v40 = *((unsigned __int8 *)v9 + 12);
          if (v40 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v40 != 4) {
            goto LABEL_63;
          }
          if (turi::flexible_type_impl::gt_operator::operator()(&v76, *v9 + 8, *(void *)v8 + 8)) {
            return 1;
          }
          goto LABEL_64;
        case 5:
          if (*((unsigned __int8 *)v9 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_63;
        case 6:
          switch(*((unsigned char *)v9 + 12))
          {
            case 0:
              if (*v9 > (uint64_t)(*(void *)v8 << 8) >> 8) {
                return 1;
              }
              goto LABEL_64;
            case 1:
              a1.n128_u64[0] = *v9;
              if ((double)*(int *)(v8 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v8 << 8) >> 8) < *(double *)v9) {
                return 1;
              }
              goto LABEL_64;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_63;
            case 6:
              uint64_t v61 = *v9 << 8 >> 8;
              if (v61 > (uint64_t)(*(void *)v8 << 8) >> 8
                || v61 == (uint64_t)(*(void *)v8 << 8) >> 8 && *((_DWORD *)v9 + 2) > *(_DWORD *)(v8 + 8))
              {
                return 1;
              }
              goto LABEL_64;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          if (*((unsigned __int8 *)v9 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_63;
        case 8:
          if (*((unsigned __int8 *)v9 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_63;
        case 9:
          if (*((unsigned __int8 *)v9 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
LABEL_63:
          turi::flexible_type_fail(0);
          goto LABEL_64;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (v39)
      {
        a1.n128_u64[0] = *v31;
        if (*(double *)v31 > *v33) {
          break;
        }
        if (*(double *)v31 < *v33) {
          goto LABEL_64;
        }
        --v39;
        ++v31;
        ++v33;
        if (!--v38)
        {
LABEL_47:
          if (v37 > v34) {
            return 1;
          }
LABEL_64:
          uint64_t v41 = *a4 + 16 * v7;
          uint64_t v42 = *a3 + 16 * v7;
          switch(*(unsigned char *)(v41 + 12))
          {
            case 0:
              switch(*(unsigned char *)(v42 + 12))
              {
                case 0:
                  if (*(void *)v42 < *(void *)v41) {
                    return 0;
                  }
                  goto LABEL_107;
                case 1:
                  a1.n128_u64[0] = *(void *)v42;
                  double v62 = (double)*(uint64_t *)v41;
                  goto LABEL_127;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_106;
                case 6:
                  if (*(void *)v41 > (uint64_t)(*(void *)v42 << 8) >> 8) {
                    return 0;
                  }
                  goto LABEL_107;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 1:
              switch(*(unsigned char *)(v42 + 12))
              {
                case 0:
                  a1.n128_u64[0] = *(void *)v41;
                  if (*(double *)v41 > (double)*(uint64_t *)v42) {
                    return 0;
                  }
                  goto LABEL_107;
                case 1:
                  a1.n128_u64[0] = *(void *)v42;
                  double v62 = *(double *)v41;
                  goto LABEL_127;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_106;
                case 6:
                  double v62 = *(double *)v41;
                  a1.n128_f64[0] = (double)*(int *)(v42 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v42 << 8) >> 8);
LABEL_127:
                  if (a1.n128_f64[0] < v62) {
                    return 0;
                  }
                  goto LABEL_107;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 2:
              unsigned int v43 = *(unsigned __int8 *)(v42 + 12);
              if (v43 - 3 < 7 || v43 < 2) {
                goto LABEL_106;
              }
              if (v43 != 2) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              unint64_t v45 = *(void *)v42;
              if (*(char *)(v45 + 31) < 0)
              {
                uint64_t v46 = *(const void **)(v45 + 8);
                size_t v47 = *(void *)(v45 + 16);
              }
              else
              {
                uint64_t v46 = (const void *)(v45 + 8);
                size_t v47 = *(unsigned __int8 *)(v45 + 31);
              }
              double v64 = *(double *)v41;
              unint64_t v65 = (const void *)(*(void *)&v64 + 8);
              size_t v66 = *(unsigned __int8 *)(*(void *)&v64 + 31);
              unint64_t v68 = *(const void **)(*(void *)&v64 + 8);
              size_t v67 = *(void *)(*(void *)&v64 + 16);
              if ((v66 & 0x80u) == 0) {
                size_t v69 = v66;
              }
              else {
                size_t v69 = v67;
              }
              if ((v66 & 0x80u) == 0) {
                uint64_t v70 = v65;
              }
              else {
                uint64_t v70 = v68;
              }
              if (v69 >= v47) {
                size_t v71 = v47;
              }
              else {
                size_t v71 = v69;
              }
              int v72 = memcmp(v46, v70, v71);
              BOOL v73 = v47 < v69;
              if (v72) {
                BOOL v73 = v72 < 0;
              }
              if (v73) {
                return 0;
              }
              goto LABEL_107;
            case 3:
              unsigned int v48 = *(unsigned __int8 *)(v42 + 12);
              if (v48 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v48 != 3) {
                goto LABEL_106;
              }
              double v49 = *(double *)v41;
              uint64_t v50 = *(unint64_t **)(*(void *)v42 + 8);
              uint64_t v51 = *(void *)(*(void *)v42 + 16);
              unint64_t v52 = *(double **)(*(void *)&v49 + 8);
              unint64_t v53 = (uint64_t)(*(void *)(*(void *)&v49 + 16) - (void)v52) >> 3;
              uint64_t v54 = v51 - (void)v50;
              BOOL v35 = v54 == 0;
              unint64_t v55 = v54 >> 3;
              if (v35) {
                goto LABEL_90;
              }
              if (v55 <= 1) {
                uint64_t v56 = 1;
              }
              else {
                uint64_t v56 = v55;
              }
              unint64_t v57 = v53;
              break;
            case 4:
              unsigned int v58 = *(unsigned __int8 *)(v42 + 12);
              if (v58 > 9) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              if (v58 != 4) {
                goto LABEL_106;
              }
              if (turi::flexible_type_impl::lt_operator::operator()(&v75, *(void *)v42 + 8, *(void *)v41 + 8, a1))return 0; {
              goto LABEL_107;
              }
            case 5:
              if (*(unsigned __int8 *)(v42 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_106;
            case 6:
              switch(*(unsigned char *)(v42 + 12))
              {
                case 0:
                  if (*(void *)v42 < (uint64_t)(*(void *)v41 << 8) >> 8) {
                    return 0;
                  }
                  goto LABEL_107;
                case 1:
                  a1.n128_u64[0] = *(void *)v42;
                  if ((double)*(int *)(v41 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v41 << 8) >> 8) > *(double *)v42) {
                    return 0;
                  }
                  goto LABEL_107;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_106;
                case 6:
                  uint64_t v63 = (uint64_t)(*(void *)v42 << 8) >> 8;
                  if (v63 < (uint64_t)(*(void *)v41 << 8) >> 8
                    || v63 == (uint64_t)(*(void *)v41 << 8) >> 8 && *(_DWORD *)(v42 + 8) < *(_DWORD *)(v41 + 8))
                  {
                    return 0;
                  }
                  goto LABEL_107;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 7:
              if (*(unsigned __int8 *)(v42 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_106;
            case 8:
              if (*(unsigned __int8 *)(v42 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              goto LABEL_106;
            case 9:
              if (*(unsigned __int8 *)(v42 + 12) >= 0xAu) {
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
LABEL_106:
              turi::flexible_type_fail(0);
              goto LABEL_107;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          while (v57)
          {
            a1.n128_u64[0] = *v50;
            if (*(double *)v50 > *v52) {
              break;
            }
            if (*(double *)v50 < *v52) {
              return 0;
            }
            --v57;
            ++v50;
            ++v52;
            if (!--v56)
            {
LABEL_90:
              if (v55 < v53) {
                return 0;
              }
              break;
            }
          }
LABEL_107:
          ++v7;
          uint64_t v5 = *a3;
          uint64_t v59 = a3[1] - *a3;
          if (v7 < v59 >> 4) {
            goto LABEL_3;
          }
          return (unint64_t)v59 > a4[1] - *a4;
        }
      }
    }
    return 1;
  }
}

void turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  size_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 566, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E32C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  size_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 589, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E32E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  size_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 612, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E33024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  size_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 636, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E33224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::operator%=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  size_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 659, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::operator%=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E33424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unsigned int v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v7, v9);
  }
  else {
    unsigned int v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_223E336EC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(uint64_t *a1, atomic_ullong *volatile *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  if (v9) {
    unsigned int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v7, v9);
  }
  else {
    unsigned int v10 = 0;
  }
  unsigned int v11 = (atomic_ullong *volatile *)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = (void *)v11;
  int v17 = v11;
  uint64_t v18 = &v10[16 * v9];
  atomic_ullong *volatile *v11 = 0;
  *((_DWORD *)v11 + 2) = 0;
  *((unsigned char *)v11 + 12) = 0;
  if (v11 != a2)
  {
    long long v12 = *a2;
    *(atomic_ullong *volatile *)((char *)v11 + 5) = *(atomic_ullong *volatile *)((char *)a2 + 5);
    atomic_ullong *volatile *v11 = v12;
    unsigned int v13 = *((unsigned __int8 *)a2 + 12);
    *((unsigned char *)v11 + 12) = v13;
    if (v13 <= 9 && ((1 << v13) & 0x33C) != 0)
    {
      atomic_fetch_add(*v11, 1uLL);
      a2 = v17;
    }
    else
    {
      a2 = (atomic_ullong *volatile *)&v10[16 * v4];
    }
  }
  int v17 = a2 + 2;
  std::vector<turi::flexible_type>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<turi::flexible_type>::~__split_buffer(v16);
  return v14;
}

void sub_223E3389C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::flexible_type>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::flexible_type>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::flexible_type>,std::reverse_iterator<turi::flexible_type*>,std::reverse_iterator<turi::flexible_type*>,std::reverse_iterator<turi::flexible_type*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::flexible_type>,std::reverse_iterator<turi::flexible_type*>,std::reverse_iterator<turi::flexible_type*>,std::reverse_iterator<turi::flexible_type*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 16) = 0;
      *(_DWORD *)(v7 - 8) = 0;
      *(unsigned char *)(v7 - 4) = 0;
      uint64_t v8 = *(void *)(a3 - 16);
      a3 -= 16;
      *(void *)(v7 - 11) = *(void *)(a3 + 5);
      *(void *)(v7 - 16) = v8;
      *(unsigned char *)(v7 - 4) = *(unsigned char *)(a3 + 12);
      *(unsigned char *)(a3 + 12) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 16;
      *((void *)&v14 + 1) -= 16;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,std::reverse_iterator<turi::flexible_type*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,std::reverse_iterator<turi::flexible_type*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,std::reverse_iterator<turi::flexible_type*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,std::reverse_iterator<turi::flexible_type*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::flexible_type>::destroy[abi:ne180100](v3, v1);
      v1 += 16;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::flexible_type>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::flexible_type>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 16;
    std::allocator<turi::flexible_type>::destroy[abi:ne180100](v4, i - 16);
  }
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void,void>(uint64_t a1, uint64_t a2)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<true,0>(uint64_t result, uint64_t *a2, uint64_t a3)
{
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(result + 12) = 0;
  if (a2 != (uint64_t *)result)
  {
    uint64_t v3 = *a2;
    *(void *)(result + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)uint64_t result = v3;
    LODWORD(v3) = *((unsigned __int8 *)a2 + 12);
    *(unsigned char *)(result + 12) = v3;
    BOOL v4 = v3 > 9;
    int v5 = (1 << v3) & 0x33C;
    if (!v4 && v5 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)result, 1uLL);
    }
  }
  *(void *)(result + 16) = 0;
  uint64_t v7 = (atomic_ullong *volatile *)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  *(unsigned char *)(result + 28) = 0;
  if (result + 16 != a3)
  {
    uint64_t v8 = *(atomic_ullong **)a3;
    *(void *)(result + 21) = *(void *)(a3 + 5);
    atomic_ullong *volatile *v7 = v8;
    unsigned int v9 = *(unsigned __int8 *)(a3 + 12);
    *(unsigned char *)(result + 28) = v9;
    if (v9 <= 9 && ((1 << v9) & 0x33C) != 0) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  int v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    const char *result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    char v15 = result;
    uint64_t v16 = v8;
    int v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        unsigned int v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v8 + 14, (uint64_t *)v9 + 7);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          int v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          unsigned int v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              unsigned int v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              unsigned int v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          unsigned int v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_multi<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(v5, a2 + 2);
      long long v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          long long v14 = v13;
          long long v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_223E33D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

const void **std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_multi<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(uint64_t **a1, long long *a2)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__construct_node<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_223E33E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void,void>(*(void *)a1, (uint64_t)__p + 32);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x88uLL);
    unsigned int v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    void v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    void *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    *((void *)v7 + 8) = 0;
    *((_DWORD *)v7 + 18) = 0;
    *((unsigned char *)v7 + 76) = 0;
    *((_DWORD *)v7 + 14) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void std::__function::__func<turi::_tc_initialize(void)::$_0,std::allocator<turi::_tc_initialize(void)::$_0>,void ()(int,char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<turi::_tc_initialize(void)::$_0,std::allocator<turi::_tc_initialize(void)::$_0>,void ()(int,char const*,unsigned long)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26D754CE0;
  return result;
}

void std::__function::__func<turi::_tc_initialize(void)::$_0,std::allocator<turi::_tc_initialize(void)::$_0>,void ()(int,char const*,unsigned long)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D754CE0;
}

uint64_t std::__function::__func<turi::_tc_initialize(void)::$_0,std::allocator<turi::_tc_initialize(void)::$_0>,void ()(int,char const*,unsigned long)>::operator()(uint64_t a1, uint64_t a2, char **a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  if (*a4)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = (void *)MEMORY[0x263F8C100];
    do
    {
      char v7 = *v5++;
      char v9 = v7;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
      --v4;
    }
    while (v4);
  }
  return std::ostream::flush();
}

uint64_t std::__function::__func<turi::_tc_initialize(void)::$_0,std::allocator<turi::_tc_initialize(void)::$_0>,void ()(int,char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<turi::_tc_initialize(void)::$_0,std::allocator<turi::_tc_initialize(void)::$_0>,void ()(int,char const*,unsigned long)>::target_type()
{
}

void *std::__function::__value_func<void ()(int,char const*,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<tc_init_set_log_callback_function::$_0,std::allocator<tc_init_set_log_callback_function::$_0>,void ()(int,char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<tc_init_set_log_callback_function::$_0,std::allocator<tc_init_set_log_callback_function::$_0>,void ()(int,char const*,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D754D70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<tc_init_set_log_callback_function::$_0,std::allocator<tc_init_set_log_callback_function::$_0>,void ()(int,char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D754D70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<tc_init_set_log_callback_function::$_0,std::allocator<tc_init_set_log_callback_function::$_0>,void ()(int,char const*,unsigned long)>::operator()(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<tc_init_set_log_callback_function::$_0,std::allocator<tc_init_set_log_callback_function::$_0>,void ()(int,char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<tc_init_set_log_callback_function::$_0,std::allocator<tc_init_set_log_callback_function::$_0>,void ()(int,char const*,unsigned long)>::target_type()
{
}

uint64_t turi::variant_converter<turi::flexible_type,void>::get@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  v20[2] = *MEMORY[0x263EF8340];
  memset(v20, 0, 13);
  uint64_t v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((uint64_t *)v3 != v20)
  {
    uint64_t v4 = *(void *)v3;
    *(uint64_t *)((char *)v20 + 5) = *(void *)(v3 + 5);
    v20[0] = v4;
    BYTE4(v20[1]) = *(unsigned char *)(v3 + 12);
    if (BYTE4(v20[1]) <= 9u && ((1 << SBYTE4(v20[1])) & 0x33C) != 0) {
      atomic_fetch_add((atomic_ullong *volatile)v20[0], 1uLL);
    }
  }
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  uint64_t result = turi::flexible_type_internals::ft_converter<1>::get(a2, v20);
  switch(BYTE4(v20[1]))
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = v20[0];
        if (v20[0])
        {
          if (*(char *)(v20[0] + 31) < 0) {
            operator delete(*(void **)(v20[0] + 8));
          }
          uint64_t v8 = (void *)v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v16 = v20[0];
        if (v20[0])
        {
          int v17 = *(void **)(v20[0] + 8);
          if (v17)
          {
            *(void *)(v20[0] + 16) = v17;
            operator delete(v17);
          }
          uint64_t v8 = (void *)v16;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v20[0];
        if (v20[0])
        {
          v19[0] = (void **)(v20[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v19);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v20[0];
        if (v20[0])
        {
          v19[0] = (void **)(v20[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v19);
LABEL_33:
          uint64_t v8 = (void *)v10;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v18 = v20[0];
        if (v20[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v20[0] + 16));
          uint64_t v8 = (void *)v18;
          unsigned int v15 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v11 = (void *)v20[0];
        if (v20[0])
        {
          uint64_t v12 = *(void **)(v20[0] + 48);
          if (v12)
          {
            *(void *)(v20[0] + 56) = v12;
            operator delete(v12);
          }
          long long v13 = (void *)v11[3];
          if (v13)
          {
            v11[4] = v13;
            operator delete(v13);
          }
          long long v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          uint64_t v8 = v11;
          unsigned int v15 = 2071181815;
LABEL_37:
          uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_38:
          uint64_t result = MEMORY[0x22A614FA0](v8, v9);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_223E34484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::string::value_type *__p, std::string::size_type a10, int a11, __int16 a12, char a13, unsigned __int8 a14, std::string *a15, long long a16, long long a17, std::string::size_type a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&a15, "Expecting a flexible_type. Got a ");
  turi::get_variant_which_name((turi *)(*v18 ^ (*v18 >> 31)), &__p);
  if ((a14 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = __p;
  }
  if ((a14 & 0x80u) == 0) {
    std::string::size_type v20 = a14;
  }
  else {
    std::string::size_type v20 = a10;
  }
  int v21 = std::string::append((std::string *)&a15, p_p, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  a18 = v21->__r_.__value_.__r.__words[2];
  a17 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((char)a14 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(a16) < 0) {
    operator delete(a15);
  }
  a15 = (std::string *)&a17;
  turi::variant_converter<std::string,void>::get(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&)::{lambda(void)#1}::operator()((const std::string **)&a15);
}

void sub_223E3452C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  turi::variant_converter<turi::flexible_type,void>::get(v26, (atomic_ullong **)(v27 - 56));
  JUMPOUT(0x223E3448CLL);
}

void sub_223E34588()
{
}

void sub_223E34590(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x223E3448CLL);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_223E3463C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

char *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_223E346B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,unsigned long &,void>@<X0>(unint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<std::vector<double>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_223E3471C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<std::vector<double>>,0>(void *a1, unint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D754C90;
  std::vector<double>::vector(a1 + 3, *a2);
  return a1;
}

void sub_223E3477C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_223E347EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_223E34870(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_impl::ndarray<double>::at(unsigned long)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_start + elem_index", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_elem->size()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unsigned int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 265, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::flexible_type_impl::ndarray<double>::at(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E34A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double>&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<std::vector<double>>::__shared_ptr_emplace[abi:ne180100]<std::vector<double> const&,std::allocator<std::vector<double>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_223E34B68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::ndarray<double>::at(unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_start + elem_index", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_elem->size()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unsigned int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 256, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::flexible_type_impl::ndarray<double>::at(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E34D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(unsigned int *a1, uint64_t *a2)
{
  uint64_t v3 = (boost::detail::variant *)*a1;
  uint64_t v4 = (boost::detail::variant *)*(unsigned int *)a2;
  if (v3 == v4)
  {
    uint64_t v5 = a2 + 1;
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::assign_storage,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v3, v3 ^ ((int)v3 >> 31), &v5, (std::vector<std::string> *)(a1 + 2));
  }
  else
  {
    uint64_t v5 = (uint64_t *)a1;
    unsigned int v6 = v4 ^ ((int)v4 >> 31);
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v4, v6, (unsigned int **)&v5, a2 + 1);
  }
}

void boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::assign_storage,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t **a3, std::vector<std::string> *a4)
{
  switch(a2)
  {
    case 0:
      boost::detail::variant::assign_storage::internal_visit<turi::flexible_type>(a3, (uint64_t)a4);
      break;
    case 1:
    case 3:
    case 4:
    case 5:
      uint64_t v5 = (std::string *)**a3;
      uint64_t v4 = (std::string *)(*a3)[1];
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v4->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
      }
      std::__split_buffer<std::string>::pointer end = (std::__shared_weak_count *)a4->__end_;
      a4->__begin_ = v5;
      a4->__end_ = v4;
      if (end)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](end);
      }
      break;
    case 2:
      boost::detail::variant::assign_storage::internal_visit<turi::dataframe_t>(a3, a4);
      break;
    case 6:
      if (a4->__begin_ != (std::vector<std::string>::pointer)**a3)
      {
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>();
      }
      break;
    case 7:
      uint64_t v7 = *a3;
      boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::operator=((uint64_t *)a4, (uint64_t **)v7);
      break;
    case 8:
      uint64_t v8 = (const std::string *)**a3;
      boost::recursive_wrapper<turi::function_closure_info>::assign(&a4->__begin_, v8);
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
}

uint64_t **boost::detail::variant::assign_storage::internal_visit<turi::flexible_type>(uint64_t **result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result != (uint64_t *)a2)
  {
    switch(*(unsigned char *)(a2 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          uint64_t v8 = (void *)v7[1];
          if (v8)
          {
            void v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          std::string::size_type v20 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v20);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          std::string::size_type v20 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v20);
LABEL_19:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a2;
          if (*(void *)a2)
          {
            long long v13 = (void *)v12[6];
            if (v13)
            {
              v12[7] = (atomic_ullong)v13;
              operator delete(v13);
            }
            long long v14 = (void *)v12[3];
            if (v14)
            {
              v12[4] = (atomic_ullong)v14;
              operator delete(v14);
            }
            char v15 = (std::__shared_weak_count *)v12[2];
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            atomic_ullong *volatile v5 = v12;
            unsigned int v11 = 2071181815;
LABEL_32:
            uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_33:
            uint64_t result = (uint64_t **)MEMORY[0x22A614FA0](v5, v6);
          }
LABEL_34:
          *(void *)a2 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v16 = *v2;
    *(void *)(a2 + 5) = *(uint64_t *)((char *)v2 + 5);
    *(void *)a2 = v16;
    LODWORD(v16) = *((unsigned __int8 *)v2 + 12);
    *(unsigned char *)(a2 + 12) = v16;
    BOOL v17 = v16 > 9;
    int v18 = (1 << v16) & 0x33C;
    if (!v17 && v18 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a2, 1uLL);
    }
  }
  return result;
}

uint64_t **boost::detail::variant::assign_storage::internal_visit<turi::dataframe_t>(uint64_t **result, std::vector<std::string> *this)
{
  uint64_t v2 = (std::vector<std::string> *)*result;
  if (*result != (uint64_t *)this)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, v2->__begin_, (long long *)v2->__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v2->__end_ - (char *)v2->__begin_) >> 3));
    std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flex_type_enum>,std::__tree_node<std::__value_type<std::string,turi::flex_type_enum>,void *> *,long>>((uint64_t **)&this[1], v2[1].__begin_->__r_.__value_.__r.__words, &v2[1].__end_);
    begin = (long long *)v2[2].__begin_;
    return std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *> *,long>>((uint64_t **)&this[2], begin, (long long *)&v2[2].__end_);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flex_type_enum>,std::__tree_node<std::__value_type<std::string,turi::flex_type_enum>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  atomic_ullong *volatile v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    atomic_ullong *volatile v7 = result[1];
    void *result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    char v15 = result;
    uint64_t v16 = v8;
    BOOL v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        atomic_ullong *volatile v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((unsigned char *)v8 + 56) = *((unsigned char *)v9 + 56);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          BOOL v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          unsigned int v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              unsigned int v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              atomic_ullong *volatile v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          atomic_ullong *volatile v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_multi<std::pair<std::string const,turi::flex_type_enum> const&>(v5, (uint64_t)(a2 + 4));
      long long v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          long long v14 = v13;
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_223E35474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

const void **std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_multi<std::pair<std::string const,turi::flex_type_enum> const&>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__construct_node<std::pair<std::string const,turi::flex_type_enum> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_223E35538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    atomic_ullong *volatile v7 = result[1];
    void *result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    char v15 = result;
    uint64_t v16 = v8;
    BOOL v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        atomic_ullong *volatile v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::vector<turi::flexible_type> &>::operator=[abi:ne180100]<std::string const,std::vector<turi::flexible_type>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          BOOL v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          unsigned int v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              unsigned int v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              atomic_ullong *volatile v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          atomic_ullong *volatile v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_multi<std::pair<std::string const,std::vector<turi::flexible_type>> const&>(v5, a2 + 2);
      long long v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          long long v14 = v13;
          long long v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_223E356D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::vector<turi::flexible_type> &>::operator=[abi:ne180100]<std::string const,std::vector<turi::flexible_type>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2 + 24) {
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v4, *(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4);
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_multi<std::pair<std::string const,std::vector<turi::flexible_type>> const&>(uint64_t **a1, long long *a2)
{
  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__construct_node<std::pair<std::string const,std::vector<turi::flexible_type>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_223E35800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::operator=(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  if ((uint64_t *)v3 != *a2) {
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__assign_with_size[abi:ne180100]<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(v3, **a2, (*a2)[1], 0xCCCCCCCCCCCCCCCDLL * (((*a2)[1] - **a2) >> 4));
  }
  return a1;
}

void std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__assign_with_size[abi:ne180100]<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1 + 16;
  atomic_ullong *volatile v9 = *(unsigned int **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__vdeallocate((unsigned int **)a1);
    if (a4 > 0x333333333333333) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x199999999999999) {
      unint64_t v11 = 0x333333333333333;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(v8, v6, a3, *(void *)(a1 + 8));
LABEL_15:
    *(void *)(a1 + 8) = v12;
    return;
  }
  long long v13 = *(unsigned int **)(a1 + 8);
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v13 - (char *)v9) >> 4) < a4)
  {
    uint64_t v14 = a2 + 16 * (((char *)v13 - (char *)v9) >> 4);
    if (v13 != v9)
    {
      uint64_t v15 = 16 * (((char *)v13 - (char *)v9) >> 4);
      do
      {
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v9, v6);
        v6 += 80;
        v9 += 20;
        v15 -= 80;
      }
      while (v15);
      atomic_ullong *volatile v9 = *(unsigned int **)(a1 + 8);
    }
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(v8, v14, a3, (uint64_t)v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    uint64_t v16 = *(unsigned int **)a1;
  }
  else
  {
    uint64_t v16 = *(unsigned int **)a1;
    do
    {
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v9, v6);
      v6 += 80;
      v9 += 20;
      v16 += 20;
    }
    while (v6 != a3);
    long long v13 = *(unsigned int **)(a1 + 8);
  }
  while (v13 != v16)
  {
    v13 -= 20;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v13);
  }
  *(void *)(a1 + 8) = v16;
}

void sub_223E35A10(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__vdeallocate(unsigned int **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 20;
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v3);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void boost::recursive_wrapper<turi::function_closure_info>::assign(std::string **a1, const std::string *a2)
{
  uint64_t v3 = *a1;
  std::string::operator=(*a1, a2);
  if (v3 != a2)
  {
    data = a2[1].__r_.__value_.__l.__data_;
    size_t size = (void *)a2[1].__r_.__value_.__l.__size_;
    std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>((uint64_t)&v3[1], data, size, 0xAAAAAAAAAAAAAAABLL * (size - data));
  }
}

void std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  atomic_ullong *volatile v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    long long v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,0>(a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,0>(a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      BOOL v17 = *(std::__shared_weak_count **)(v16 - 8);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_223E35C54(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223E35C5C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> *,0>(void *a1, void *a2, void *a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::operator=[abi:ne180100](a3, v4);
      v4 += 3;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::operator=[abi:ne180100](void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  uint64_t v4 = a2[2];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  a1[1] = v3;
  a1[2] = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, unsigned int **a3, uint64_t *a4)
{
  switch(a2)
  {
    case 0:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<turi::flexible_type,mpl_::BOOL_<true>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t)a3, a4);
      return;
    case 1:
      uint64_t v4 = (uint64_t)a3;
      uint64_t v5 = a4;
      goto LABEL_7;
    case 2:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<turi::dataframe_t,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t)a3, (uint64_t)a4);
      return;
    case 3:
      uint64_t v4 = (uint64_t)a3;
      uint64_t v5 = a4;
      goto LABEL_7;
    case 4:
      uint64_t v4 = (uint64_t)a3;
      uint64_t v5 = a4;
      goto LABEL_7;
    case 5:
      uint64_t v4 = (uint64_t)a3;
      uint64_t v5 = a4;
LABEL_7:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<std::shared_ptr<turi::unity_sgraph_base>,mpl_::BOOL_<true>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v4, v5);
      return;
    case 6:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>(a3);
    case 7:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>(a3);
    case 8:
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<boost::recursive_wrapper<turi::function_closure_info>>(a3);
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<turi::flexible_type,mpl_::BOOL_<true>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, uint64_t *a2)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a1);
  uint64_t v4 = *(unsigned int **)a1;
  uint64_t v5 = *(unsigned int **)a1;
  *((void *)v5 + 1) = 0;
  uint64_t v6 = v5 + 2;
  v4[4] = 0;
  *((unsigned char *)v4 + 20) = 0;
  if (v6 != (unsigned int *)a2)
  {
    uint64_t v7 = *a2;
    *(void *)((char *)v6 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)uint64_t v6 = v7;
    unsigned int v8 = *((unsigned __int8 *)a2 + 12);
    *((unsigned char *)v4 + 20) = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v6, 1uLL);
    }
  }
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<std::shared_ptr<turi::unity_sgraph_base>,mpl_::BOOL_<true>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, void *a2)
{
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a1);
  uint64_t v4 = *(unsigned int **)a1;
  uint64_t v5 = a2[1];
  *((void *)v4 + 1) = *a2;
  *((void *)v4 + 2) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = *(unsigned int **)a1;
  }
  *uint64_t v4 = *(_DWORD *)(a1 + 8);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<turi::dataframe_t,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, uint64_t a2)
{
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *(long long **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t *)&v13, (const void ***)(a2 + 24));
  std::map<std::string,std::vector<turi::flexible_type>>::map[abi:ne180100]((uint64_t *)&v16, (const void ***)(a2 + 48));
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(*(unsigned int **)a1);
  uint64_t v4 = *(unsigned int **)a1;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *(std::string *)(v4 + 2) = v12;
  memset(&v12, 0, sizeof(v12));
  *((void *)v4 + 4) = v13;
  uint64_t v5 = v14;
  *((void *)v4 + 5) = v14;
  uint64_t v6 = v4 + 10;
  uint64_t v7 = v15;
  *((void *)v4 + 6) = v15;
  if (v7)
  {
    *((void *)v5 + 2) = v6;
    long long v13 = &v14;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    *((void *)v4 + 4) = v6;
  }
  *((void *)v4 + 7) = v16;
  unsigned int v8 = v17;
  *((void *)v4 + 8) = v17;
  atomic_ullong *volatile v9 = v4 + 16;
  uint64_t v10 = v18;
  *((void *)v4 + 9) = v18;
  if (v10)
  {
    unint64_t v11 = 0;
    void v8[2] = v9;
    uint64_t v16 = &v17;
    BOOL v17 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    *((void *)v4 + 7) = v9;
    unint64_t v11 = v17;
  }
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy((uint64_t)&v16, v11);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v13, v14);
  uint64_t v19 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_223E36140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v13, a13);
  *(void *)(v14 - 40) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  _Unwind_Resume(a1);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>(unsigned int **a1)
{
}

void sub_223E361B8(void *a1)
{
  __cxa_begin_catch(a1);
  **uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_223E361CC(_Unwind_Exception *a1)
{
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>(unsigned int **a1)
{
}

void sub_223E36228(void *a1)
{
  __cxa_begin_catch(a1);
  **uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_223E3623C(_Unwind_Exception *a1)
{
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assigner::assign_impl<boost::recursive_wrapper<turi::function_closure_info>>(unsigned int **a1)
{
}

void sub_223E36298(void *a1)
{
  __cxa_begin_catch(a1);
  **uint64_t v1 = 0;
  __cxa_rethrow();
}

void sub_223E362AC(_Unwind_Exception *a1)
{
}

uint64_t turi::flexible_type_converter<long long>::set@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  return turi::flexible_type_internals::ft_converter<1>::set<long long const&>(a2, a1);
}

void sub_223E362F4(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t turi::flexible_type_internals::ft_converter<1>::set<long long const&>(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  switch(*(unsigned char *)(result + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          unsigned int v8 = (void *)v7[1];
          if (v8)
          {
            void v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          uint64_t v16 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v16);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          uint64_t v16 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v16);
LABEL_18:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          uint64_t v13 = (void *)v12[6];
          if (v13)
          {
            v12[7] = (atomic_ullong)v13;
            operator delete(v13);
          }
          uint64_t v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = (atomic_ullong)v14;
            operator delete(v14);
          }
          uint64_t v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          atomic_ullong *volatile v5 = v12;
          unsigned int v11 = 2071181815;
LABEL_31:
          uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_32:
          uint64_t result = MEMORY[0x22A614FA0](v5, v6);
        }
      }
      break;
    default:
      break;
  }
  *(void *)uint64_t v3 = 0;
  *(_DWORD *)(v3 + 8) = 0;
  *(unsigned char *)(v3 + 12) = 0;
  *(void *)uint64_t v3 = *a2;
  return result;
}

uint64_t turi::flexible_type_converter<double>::set@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  return turi::flexible_type::operator=<double>(a2, a1);
}

void sub_223E36618(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_converter<std::vector<double>>::set(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<std::vector<double> const&>(a1);
}

void sub_223E36714(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<1>::set<std::vector<double> const&>(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      if (*((char *)v2 + 31) < 0) {
        operator delete((void *)v2[1]);
      }
      atomic_ullong *volatile v3 = v2;
      uint64_t v4 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        v5[2] = (atomic_ullong)v6;
        operator delete(v6);
      }
      atomic_ullong *volatile v3 = v5;
      uint64_t v4 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      uint64_t v14 = (void **)(v7 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      uint64_t v14 = (void **)(v7 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
      atomic_ullong *volatile v3 = v7;
      uint64_t v4 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
      atomic_ullong *volatile v3 = v8;
      unsigned int v9 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      unsigned int v11 = (void *)v10[6];
      if (v11)
      {
        v10[7] = (atomic_ullong)v11;
        operator delete(v11);
      }
      atomic_ullong *volatile v12 = (void *)v10[3];
      if (v12)
      {
        void v10[4] = (atomic_ullong)v12;
        operator delete(v12);
      }
      uint64_t v13 = (std::__shared_weak_count *)v10[2];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      atomic_ullong *volatile v3 = v10;
      unsigned int v9 = 2071181815;
LABEL_31:
      uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v3, v4);
LABEL_33:
      *(void *)a1 = 0;
LABEL_34:
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 12) = 3;
      operator new();
    default:
      goto LABEL_34;
  }
}

void sub_223E36DBC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

void turi::flexible_type_converter<std::vector<turi::flexible_type>>::set(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<std::vector<turi::flexible_type> const&>(a1);
}

void sub_223E36EAC(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<1>::set<std::vector<turi::flexible_type> const&>(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      if (*((char *)v2 + 31) < 0) {
        operator delete((void *)v2[1]);
      }
      atomic_ullong *volatile v3 = v2;
      uint64_t v4 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        v5[2] = (atomic_ullong)v6;
        operator delete(v6);
      }
      atomic_ullong *volatile v3 = v5;
      uint64_t v4 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      uint64_t v14 = (void **)(v7 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      uint64_t v14 = (void **)(v7 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
      atomic_ullong *volatile v3 = v7;
      uint64_t v4 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
      atomic_ullong *volatile v3 = v8;
      unsigned int v9 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      unsigned int v11 = (void *)v10[6];
      if (v11)
      {
        v10[7] = (atomic_ullong)v11;
        operator delete(v11);
      }
      atomic_ullong *volatile v12 = (void *)v10[3];
      if (v12)
      {
        void v10[4] = (atomic_ullong)v12;
        operator delete(v12);
      }
      uint64_t v13 = (std::__shared_weak_count *)v10[2];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      atomic_ullong *volatile v3 = v10;
      unsigned int v9 = 2071181815;
LABEL_31:
      uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v3, v4);
LABEL_33:
      *(void *)a1 = 0;
LABEL_34:
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 12) = 4;
      operator new();
    default:
      goto LABEL_34;
  }
}

void sub_223E37544(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

void turi::flexible_type_converter<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::set(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> const&>(a1);
}

void sub_223E37634(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<1>::set<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> const&>(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      if (*((char *)v2 + 31) < 0) {
        operator delete((void *)v2[1]);
      }
      atomic_ullong *volatile v3 = v2;
      uint64_t v4 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        v5[2] = (atomic_ullong)v6;
        operator delete(v6);
      }
      atomic_ullong *volatile v3 = v5;
      uint64_t v4 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      uint64_t v14 = (void **)(v7 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      uint64_t v14 = (void **)(v7 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
      atomic_ullong *volatile v3 = v7;
      uint64_t v4 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
      atomic_ullong *volatile v3 = v8;
      unsigned int v9 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_34;
      }
      atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_33;
      }
      unsigned int v11 = (void *)v10[6];
      if (v11)
      {
        v10[7] = (atomic_ullong)v11;
        operator delete(v11);
      }
      atomic_ullong *volatile v12 = (void *)v10[3];
      if (v12)
      {
        void v10[4] = (atomic_ullong)v12;
        operator delete(v12);
      }
      uint64_t v13 = (std::__shared_weak_count *)v10[2];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      atomic_ullong *volatile v3 = v10;
      unsigned int v9 = 2071181815;
LABEL_31:
      uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v3, v4);
LABEL_33:
      *(void *)a1 = 0;
LABEL_34:
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 12) = 5;
      operator new();
    default:
      goto LABEL_34;
  }
}

void sub_223E37CCC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_converter<turi::flex_date_time>::set@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  return turi::flexible_type_internals::ft_converter<1>::set<turi::flex_date_time const&>(a2, a1);
}

void sub_223E37DBC(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t turi::flexible_type_internals::ft_converter<1>::set<turi::flex_date_time const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  switch(*(unsigned char *)(result + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          atomic_ullong *volatile v8 = (void *)v7[1];
          if (v8)
          {
            void v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          BOOL v17 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          BOOL v17 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v17);
LABEL_18:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          uint64_t v13 = (void *)v12[6];
          if (v13)
          {
            v12[7] = (atomic_ullong)v13;
            operator delete(v13);
          }
          uint64_t v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = (atomic_ullong)v14;
            operator delete(v14);
          }
          uint64_t v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          atomic_ullong *volatile v5 = v12;
          unsigned int v11 = 2071181815;
LABEL_31:
          uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_32:
          uint64_t result = MEMORY[0x22A614FA0](v5, v6);
        }
      }
      break;
    default:
      break;
  }
  *(unsigned char *)(v3 + 12) = 6;
  *(void *)uint64_t v3 = 0x1900000000000000;
  *(_DWORD *)(v3 + 8) = 0;
  uint64_t v16 = *a2;
  *(_DWORD *)(v3 + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t v3 = v16;
  return result;
}

long long *boost::shared_ptr<char []>::operator=(long long *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  long long v5 = *a1;
  *(void *)a1 = v4;
  *((void *)a1 + 1) = v3;
  *((void *)&v7 + 1) = *((void *)&v5 + 1);
  boost::detail::shared_count::~shared_count((atomic_uint **)&v7 + 1);
  return a1;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<turi::flexible_type>(unsigned int *a1, uint64_t a2)
{
  v6[9] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  long long v5 = (uint64_t **)&v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31), &v5, (uint64_t)(a1 + 2)) & 1) == 0)
  {
    memset(v6, 0, 13);
    if (v6 != (atomic_ullong **)a2)
    {
      *(atomic_ullong **)((char *)v6 + 5) = *(atomic_ullong **)(a2 + 5);
      v6[0] = *(atomic_ullong **)a2;
      BYTE4(v6[1]) = *(unsigned char *)(a2 + 12);
      if (BYTE4(v6[1]) <= 9u && ((1 << SBYTE4(v6[1])) & 0x33C) != 0) {
        atomic_fetch_add(v6[0], 1uLL);
      }
    }
    LODWORD(v5) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v5);
  }
}

void sub_223E38208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t ***a3, uint64_t a4)
{
  if ((a2 - 1) < 8) {
    return 0;
  }
  if (a2) {
    boost::detail::variant::forced_return<void>(a1);
  }
  long long v5 = *a3;
  return boost::detail::variant::direct_assigner<turi::flexible_type>::operator()(v5, a4);
}

uint64_t boost::detail::variant::direct_assigner<turi::flexible_type>::operator()(uint64_t **a1, uint64_t a2)
{
  atomic_ullong *volatile v2 = *a1;
  if (*a1 != (uint64_t *)a2)
  {
    switch(*(unsigned char *)(a2 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          atomic_ullong *volatile v8 = (void *)v7[1];
          if (v8)
          {
            void v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          int v21 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v21);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          int v21 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v21);
LABEL_19:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a2;
          if (*(void *)a2)
          {
            uint64_t v13 = (void *)v12[6];
            if (v13)
            {
              v12[7] = (atomic_ullong)v13;
              operator delete(v13);
            }
            uint64_t v14 = (void *)v12[3];
            if (v14)
            {
              v12[4] = (atomic_ullong)v14;
              operator delete(v14);
            }
            uint64_t v15 = (std::__shared_weak_count *)v12[2];
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            atomic_ullong *volatile v5 = v12;
            unsigned int v11 = 2071181815;
LABEL_32:
            uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v5, v6);
          }
LABEL_34:
          *(void *)a2 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v16 = *v2;
    *(void *)(a2 + 5) = *(uint64_t *)((char *)v2 + 5);
    *(void *)a2 = v16;
    LODWORD(v16) = *((unsigned __int8 *)v2 + 12);
    *(unsigned char *)(a2 + 12) = v16;
    BOOL v17 = v16 > 9;
    int v18 = (1 << v16) & 0x33C;
    if (!v17 && v18 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a2, 1uLL);
    }
  }
  return 1;
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sarray_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
      return result;
    case 5:
      uint64_t result = a4;
      break;
    default:
      boost::detail::variant::forced_return<void>(0);
  }
  return result;
}

void turi::full_type_name<std::shared_ptr<turi::unity_sarray_base>>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[1];
  uint64_t v6 = *a1;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v5 = 5;
  std::string::basic_string[abi:ne180100]<0>(a2, "SArray");
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v5);
}

void sub_223E3869C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sframe_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
      return result;
    case 4:
      uint64_t result = a4;
      break;
    default:
      boost::detail::variant::forced_return<void>(0);
  }
  return result;
}

void turi::full_type_name<std::shared_ptr<turi::unity_sframe_base>>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[1];
  uint64_t v6 = *a1;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v5 = 4;
  std::string::basic_string[abi:ne180100]<0>(a2, "SFrame");
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v5);
}

void sub_223E38800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::model_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return result;
    case 3:
      uint64_t result = a4;
      break;
    default:
      boost::detail::variant::forced_return<void>(0);
  }
  return result;
}

void turi::full_type_name<std::shared_ptr<turi::model_base>>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[1];
  uint64_t v6 = *a1;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v5 = 3;
  std::string::basic_string[abi:ne180100]<0>(a2, "Model");
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v5);
}

void sub_223E38964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

void std::shared_ptr<void>::shared_ptr[abi:ne180100]<void,void (*)(void *),void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_223E389F0(void *a1)
{
  __cxa_begin_catch(a1);
  v1(v2);
  __cxa_rethrow();
}

void sub_223E38A04(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<void *,void (*)(void *),std::allocator<void>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_pointer<void *,void (*)(void *),std::allocator<void>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<void *,void (*)(void *),std::allocator<void>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else {
    return 0;
  }
}

void *std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D754E70;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func(void *a1)
{
  *a1 = &unk_26D754E70;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x22A614FA0);
}

char *std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_26D754E70;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D754E70;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

void std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v20[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v17 = 0;
  uint64_t v19 = 0;
  memset(v20, 0, 13);
  if (v20 != (atomic_ullong **)a2)
  {
    *(atomic_ullong **)((char *)v20 + 5) = *(atomic_ullong **)(a2 + 5);
    v20[0] = *(atomic_ullong **)a2;
    BYTE4(v20[1]) = *(unsigned char *)(a2 + 12);
    if (BYTE4(v20[1]) <= 9u && ((1 << SBYTE4(v20[1])) & 0x33C) != 0) {
      atomic_fetch_add(v20[0], 1uLL);
    }
  }
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t *, void, uint64_t *))(a1 + 8))(&v19, *(void *)(a1 + 16), &v17);
  unsigned int v5 = (uint64_t *)v17;
  if (v17)
  {
    uint64_t v11 = *(void *)(v17 + 8);
    v18[0] = *(void *)(v17 + 16);
    *(void *)((char *)v18 + 7) = *(void *)(v17 + 23);
    char v12 = *(unsigned char *)(v17 + 31);
    *(void *)(v17 + 16) = 0;
    v5[3] = 0;
    uint64_t v13 = *v5;
    v5[1] = 0;
    (*(void (**)(uint64_t *, uint64_t *))(v13 + 8))(v5, &v17);
    if (v4) {
      (*(void (**)(void, void *))(*(void *)*v4 + 8))(*v4, v4);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v15 = v18[0];
    void *exception = v11;
    exception[1] = v15;
    *(void *)((char *)exception + 15) = *(void *)((char *)v18 + 7);
    *((unsigned char *)exception + 23) = v12;
  }
  if (!v4)
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "Callback provided to tc_sarray_apply returned null without setting error");
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (v4 + 1 != (void *)a3)
  {
    uint64_t v6 = v4[1];
    *(void *)(a3 + 5) = *(void *)((char *)v4 + 13);
    *(void *)a3 = v6;
    unsigned int v7 = *((unsigned __int8 *)v4 + 20);
    *(unsigned char *)(a3 + 12) = v7;
    BOOL v8 = v7 > 9;
    int v9 = (1 << v7) & 0x33C;
    if (!v8 && v9 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  (*(void (**)(void, void *))(*(void *)*v4 + 8))(*v4, v4);
  tc_flexible_type_struct::~tc_flexible_type_struct((tc_flexible_type_struct *)&v19);
}

void sub_223E38EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  tc_flexible_type_struct::~tc_flexible_type_struct((tc_flexible_type_struct *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<tc_sarray_apply::$_0,std::allocator<tc_sarray_apply::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void tc_flexible_type_struct::~tc_flexible_type_struct(tc_flexible_type_struct *this)
{
  switch(*((unsigned char *)this + 20))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *((void *)this + 1);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v5 = (void *)*((void *)this + 1);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *((void *)this + 1);
        if (v7)
        {
          uint64_t v14 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *((void *)this + 1);
        if (v7)
        {
          uint64_t v14 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          uint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *((void *)this + 1);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          uint64_t v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = (void *)*((void *)this + 1);
        if (v10)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          char v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((unsigned char *)this + 20) = 0;
}

void *std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,std::string *,std::string *,turi::flexible_type*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_223E392F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,std::string *,std::string *,turi::flexible_type*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a4;
  uint64_t v9 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  char v7 = 0;
  if (a2 != a3) {
    std::allocator<turi::flexible_type>::construct[abi:ne180100]<turi::flexible_type,std::string &>(a1, a4);
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return a4;
}

void sub_223E393AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::allocator<turi::flexible_type>::construct[abi:ne180100]<turi::flexible_type,std::string &>(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 5) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 12) = 2;
  operator new();
}

void sub_223E397C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*((unsigned char *)v10 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v13 = *v10;
      if (!*v10) {
        goto LABEL_27;
      }
      if (*((char *)v13 + 31) < 0) {
        operator delete((void *)v13[1]);
      }
      uint64_t v14 = v13;
      uint64_t v15 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v16 = *v10;
      if (!*v10) {
        goto LABEL_27;
      }
      uint64_t v17 = (void *)v16[1];
      if (v17)
      {
        void v16[2] = (atomic_ullong)v17;
        operator delete(v17);
      }
      uint64_t v14 = v16;
      uint64_t v15 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v18 = *v10;
      if (!*v10) {
        goto LABEL_27;
      }
      a10 = (void **)(v18 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v18 = *v10;
      if (!*v10) {
        goto LABEL_27;
      }
      a10 = (void **)(v18 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      uint64_t v14 = v18;
      uint64_t v15 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v10;
      if (!*v10) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v19 + 2);
      uint64_t v14 = v19;
      unsigned int v20 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v10) {
        goto LABEL_27;
      }
      uint64_t v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v10);
      unsigned int v20 = 2071181815;
LABEL_25:
      uint64_t v15 = v20 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v14, v15);
LABEL_27:
      atomic_ullong *volatile *v10 = 0;
LABEL_28:
      atomic_ullong *volatile *v10 = 0;
      *((_DWORD *)v10 + 2) = 0;
      *((unsigned char *)v10 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 0:
      return a4;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      a4 = 0;
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(uint64_t **a1, const void **a2, long long *a3)
{
  unsigned int v5 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    char v7 = v5;
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string const,turi::flexible_type>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string const,turi::flexible_type>>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_223E39BAC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__s.__data_[12] = 0;
  std::string::size_type v5 = *((void *)a2 + 3);
  *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 5) = *(void *)((char *)a2 + 29);
  this[1].__r_.__value_.__r.__words[0] = v5;
  this[1].__r_.__value_.__s.__data_[12] = *((unsigned char *)a2 + 36);
  *((unsigned char *)a2 + 36) = 0;
  return this;
}

uint64_t *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  long long v4 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(a1, a2);
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void,void>((uint64_t)(a1 + 1), (uint64_t)(a2 + 4));
  operator delete(a2);
  return v4;
}

uint64_t *std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    long long v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      long long v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    long long v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      long long v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  char v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      char v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      char v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      atomic_ullong *volatile v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      void v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *atomic_ullong *volatile v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      char v7 = *(uint64_t **)(*v7 + 8);
    }
    uint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      atomic_ullong *volatile v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        void v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        void v7[2] = (uint64_t)v15;
        atomic_ullong *volatile v16 = v7;
      }
      else
      {
        uint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      size_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *size_t v24 = v23;
      goto LABEL_72;
    }
    atomic_ullong *volatile v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    char v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    void v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    char v7 = *(uint64_t **)v12;
  }
  atomic_ullong *volatile v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  unsigned int v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    unsigned int v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    void v7[2] = (uint64_t)v20;
    atomic_ullong *volatile v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  size_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[10],std::string&,0>(void *a1, char *a2)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v2[3] = 0;
  *(void *)((char *)v2 + 29) = 0;
  *((unsigned char *)v2 + 36) = 2;
  operator new();
}

void sub_223E3A48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v10 + 36))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v14 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v14 + 31) < 0) {
        operator delete((void *)v14[1]);
      }
      uint64_t v15 = v14;
      uint64_t v16 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      uint64_t v18 = (void *)v17[1];
      if (v18)
      {
        v17[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      uint64_t v15 = v17;
      uint64_t v16 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      uint64_t v15 = v19;
      uint64_t v16 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      uint64_t v15 = v20;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      uint64_t v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v15, v16);
LABEL_27:
      *uint64_t v12 = 0;
LABEL_28:
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[13],std::string&,0>(void *a1, char *a2)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v2[3] = 0;
  *(void *)((char *)v2 + 29) = 0;
  *((unsigned char *)v2 + 36) = 2;
  operator new();
}

void sub_223E3AB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v10 + 36))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v14 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v14 + 31) < 0) {
        operator delete((void *)v14[1]);
      }
      uint64_t v15 = v14;
      uint64_t v16 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      uint64_t v18 = (void *)v17[1];
      if (v18)
      {
        v17[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      uint64_t v15 = v17;
      uint64_t v16 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      uint64_t v15 = v19;
      uint64_t v16 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      uint64_t v15 = v20;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      uint64_t v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v15, v16);
LABEL_27:
      *uint64_t v12 = 0;
LABEL_28:
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[12],std::string&,0>(void *a1, char *a2)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v2[3] = 0;
  *(void *)((char *)v2 + 29) = 0;
  *((unsigned char *)v2 + 36) = 2;
  operator new();
}

void sub_223E3B194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v10 + 36))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v14 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v14 + 31) < 0) {
        operator delete((void *)v14[1]);
      }
      uint64_t v15 = v14;
      uint64_t v16 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      uint64_t v18 = (void *)v17[1];
      if (v18)
      {
        v17[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      uint64_t v15 = v17;
      uint64_t v16 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      uint64_t v15 = v19;
      uint64_t v16 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      uint64_t v15 = v20;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      uint64_t v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v15, v16);
LABEL_27:
      *uint64_t v12 = 0;
LABEL_28:
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(void *a1, char *a2)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v2[3] = 0;
  *(void *)((char *)v2 + 29) = 0;
  *((unsigned char *)v2 + 36) = 2;
  operator new();
}

void sub_223E3B818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v10 + 36))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v14 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v14 + 31) < 0) {
        operator delete((void *)v14[1]);
      }
      uint64_t v15 = v14;
      uint64_t v16 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      uint64_t v18 = (void *)v17[1];
      if (v18)
      {
        v17[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      uint64_t v15 = v17;
      uint64_t v16 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      uint64_t v15 = v19;
      uint64_t v16 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      uint64_t v15 = v20;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      uint64_t v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v15, v16);
LABEL_27:
      *uint64_t v12 = 0;
LABEL_28:
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

char **turi::variant_converter<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,void>::get@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  v20[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v20, 0, 13);
  uint64_t v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((atomic_ullong **)v3 != v20)
  {
    long long v4 = *(atomic_ullong **)v3;
    *(atomic_ullong **)((char *)v20 + 5) = *(atomic_ullong **)(v3 + 5);
    v20[0] = v4;
    BYTE4(v20[1]) = *(unsigned char *)(v3 + 12);
    if (BYTE4(v20[1]) <= 9u && ((1 << SBYTE4(v20[1])) & 0x33C) != 0) {
      atomic_fetch_add(v20[0], 1uLL);
    }
  }
  uint64_t result = turi::flexible_type_converter<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::get((char *)v20, a2);
  switch(BYTE4(v20[1]))
  {
    case 2:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        char v7 = v20[0];
        if (v20[0])
        {
          if (*((char *)v20[0] + 31) < 0) {
            operator delete(*((void **)v20[0] + 1));
          }
          int v8 = v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v16 = v20[0];
        if (v20[0])
        {
          atomic_ullong *volatile v17 = (void *)v20[0][1];
          if (v17)
          {
            v20[0][2] = (atomic_ullong)v17;
            operator delete(v17);
          }
          int v8 = v16;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v20[0];
        if (v20[0])
        {
          v19[0] = (void **)(v20[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v19);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v20[0];
        if (v20[0])
        {
          v19[0] = (void **)(v20[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v19);
LABEL_33:
          int v8 = v10;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v18 = v20[0];
        if (v20[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v20[0] + 2);
          int v8 = v18;
          unsigned int v15 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = v20[0];
        if (v20[0])
        {
          uint64_t v12 = (void *)v20[0][6];
          if (v12)
          {
            v20[0][7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          atomic_ullong *volatile v13 = (void *)v11[3];
          if (v13)
          {
            v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          atomic_ullong *volatile v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          int v8 = v11;
          unsigned int v15 = 2071181815;
LABEL_37:
          uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_38:
          uint64_t result = (char **)MEMORY[0x22A614FA0](v8, v9);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_223E3BD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 40);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      unsigned int v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v26 = *(void **)(v18 - 40);
      if (!v26) {
        goto LABEL_27;
      }
      uint64_t v27 = (void *)v26[1];
      if (v27)
      {
        v26[2] = v27;
        operator delete(v27);
      }
      unsigned int v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      unsigned int v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 40);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      unsigned int v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      size_t v24 = *(void **)(v18 - 40);
      if (!v24) {
        goto LABEL_27;
      }
      unsigned int v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

char **turi::flexible_type_converter<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::get@<X0>(char *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  return turi::flexible_type_internals::ft_converter<1>::get<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>((char **)a2, a1);
}

void sub_223E3C034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

char **turi::flexible_type_internals::ft_converter<1>::get<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>(char **result, char *a2)
{
  v20[2] = *MEMORY[0x263EF8340];
  if (a2[12] != 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "Expecting ");
    uint64_t v6 = std::string::append(&v17, "dictionary");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = std::string::append(&v18, ". But we got a ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    unint64_t v10 = a2[12];
    if (v10 > 9) {
      uint64_t v11 = "undefined";
    }
    else {
      uint64_t v11 = off_2646D6A40[v10];
    }
    uint64_t v12 = std::string::append(&v19, v11);
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[0];
    v20[0] = v12->__r_.__value_.__l.__size_;
    *(void *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    char v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v16 = v20[0];
    void *exception = v13;
    exception[1] = v16;
    *(void *)((char *)exception + 15) = *(void *)((char *)v20 + 7);
    *((unsigned char *)exception + 23) = v14;
  }
  uint64_t v3 = *(void *)a2;
  if ((char **)(*(void *)a2 + 8) != result)
  {
    long long v4 = *(uint64_t **)(v3 + 8);
    int v5 = *(uint64_t **)(v3 + 16);
    return (char **)std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(result, v4, v5, ((char *)v5 - (char *)v4) >> 5);
  }
  return result;
}

void sub_223E3C214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    long long v7 = operator new(0x40uLL);
    long long v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    void v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    void *v9 = 0;
    *((unsigned char *)v7 + 56) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[10],std::vector<turi::flexible_type> &,0>(void *a1, char *a2)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v2[3] = 0;
  *(void *)((char *)v2 + 29) = 0;
  *((unsigned char *)v2 + 36) = 4;
  operator new();
}

void sub_223E3C720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v10 + 36))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v14 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v14 + 31) < 0) {
        operator delete((void *)v14[1]);
      }
      unsigned int v15 = v14;
      uint64_t v16 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      std::string v18 = (void *)v17[1];
      if (v18)
      {
        v17[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      unsigned int v15 = v17;
      uint64_t v16 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      unsigned int v15 = v19;
      uint64_t v16 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      unsigned int v15 = v20;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      unsigned int v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v15, v16);
LABEL_27:
      *uint64_t v12 = 0;
LABEL_28:
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[16],std::string&,0>(void *a1, char *a2)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v2[3] = 0;
  *(void *)((char *)v2 + 29) = 0;
  *((unsigned char *)v2 + 36) = 2;
  operator new();
}

void sub_223E3CDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v10 + 36))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v14 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v14 + 31) < 0) {
        operator delete((void *)v14[1]);
      }
      unsigned int v15 = v14;
      uint64_t v16 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      std::string v18 = (void *)v17[1];
      if (v18)
      {
        v17[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      unsigned int v15 = v17;
      uint64_t v16 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      unsigned int v15 = v19;
      uint64_t v16 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      unsigned int v15 = v20;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      unsigned int v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v15, v16);
LABEL_27:
      *uint64_t v12 = 0;
LABEL_28:
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[15],std::vector<turi::flexible_type> &,0>(void *a1, char *a2)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v2[3] = 0;
  *(void *)((char *)v2 + 29) = 0;
  *((unsigned char *)v2 + 36) = 4;
  operator new();
}

void sub_223E3D438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v10 + 36))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v14 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v14 + 31) < 0) {
        operator delete((void *)v14[1]);
      }
      unsigned int v15 = v14;
      uint64_t v16 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      std::string v18 = (void *)v17[1];
      if (v18)
      {
        v17[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      unsigned int v15 = v17;
      uint64_t v16 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      unsigned int v15 = v19;
      uint64_t v16 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      unsigned int v15 = v20;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      unsigned int v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v15, v16);
LABEL_27:
      *uint64_t v12 = 0;
LABEL_28:
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  long long v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_223E3D71C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_223E3D820(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_223E3D8B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    long long v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v6 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    char v10 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(std::string *result, turi::flexible_type_impl *a2, turi::flexible_type_impl *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,turi::flexible_type const*,turi::flexible_type const*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_223E3DA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,turi::flexible_type const*,turi::flexible_type const*,std::string*>(uint64_t a1, turi::flexible_type_impl *a2, turi::flexible_type_impl *a3, std::string *this)
{
  long long v4 = this;
  uint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    int v7 = a1;
    do
    {
      std::allocator<std::string>::construct[abi:ne180100]<std::string,turi::flexible_type const&>(v7, v4, v6);
      long long v6 = (turi::flexible_type_impl *)((char *)v6 + 16);
      long long v4 = ++v12;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_223E3DB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::allocator<std::string>::construct[abi:ne180100]<std::string,turi::flexible_type const&>(int a1, std::string *this, turi::flexible_type_impl *a3)
{
  switch(*((unsigned char *)a3 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_4;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_4:
      v9[0] = *MEMORY[0x263F8C2B8];
      uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
      void v9[2] = v4;
      void v9[3] = MEMORY[0x263F8C318] + 16;
      if (v10 < 0) {
        operator delete((void *)v9[11]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&v11);
      break;
    case 2:
      uint64_t v5 = *(void **)a3;
      if (*(char *)(*(void *)a3 + 31) < 0)
      {
        int v7 = (const std::string::value_type *)v5[1];
        std::string::size_type v8 = v5[2];
        std::string::__init_copy_ctor_external(this, v7, v8);
      }
      else
      {
        long long v6 = *(_OWORD *)(v5 + 1);
        this->__r_.__value_.__r.__words[2] = v5[3];
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v9, (void *)(*(void *)a3 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v9, (uint64_t *)(*(void *)a3 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v9, (void *)(*(void *)a3 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(a3, this);
      break;
    case 7:
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
      this->__r_.__value_.__r.__words[2] = 0;
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v9, (void *)(*(void *)a3 + 8));
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_223E3DDF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26D754F00;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D754F00;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3)
{
  long long v6 = *a3;
  turi::aggregate::COUNT(&v4);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v6, (uint64_t)&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v7 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
}

void sub_223E3DF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  *(void *)(v14 - 24) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 24));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_0,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_0>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

uint64_t *std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(uint64_t **a1, char **a2, uint64_t a3)
{
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__construct_node<char const*&,turi::aggregate::groupby_descriptor_type>((uint64_t)a1, a2, a3, (uint64_t)v8);
  std::string v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  uint64_t v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    uint64_t v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_223E3E008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__construct_node<char const*&,turi::aggregate::groupby_descriptor_type>@<Q0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  std::string::size_type v8 = (char *)operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)v8 + 4, *a2);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)a3;
  *((void *)v8 + 9) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  __n128 result = *(__n128 *)(a3 + 24);
  *((__n128 *)v8 + 5) = result;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_223E3E0A8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::aggregate::groupby_descriptor_type>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::aggregate::groupby_descriptor_type>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::string v4 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_1,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_1>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_1,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_1>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D754F90;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_1,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_1>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D754F90;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_1,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_1>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  uint64_t v5 = *a4;
  char v10 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::SUM((uint64_t)__p, &v8);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v10, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v11 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E3E268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  *(void *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_1,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_1>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_1,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_1>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_2,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_2>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_2,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_2>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D755010;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_2,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_2>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D755010;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_2,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_2>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  uint64_t v5 = *a4;
  char v10 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::MAX((uint64_t)__p, &v8);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v10, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v11 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E3E3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  *(void *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_2,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_2>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_2,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_2>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_3,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_3>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_3,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_3>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D755090;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_3,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_3>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D755090;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_3,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_3>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  uint64_t v5 = *a4;
  char v10 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::MIN((uint64_t)__p, &v8);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v10, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v11 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E3E578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  *(void *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_3,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_3>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_3,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_3>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_4,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_4>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_4,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_4>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D755110;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_4,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_4>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D755110;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_4,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_4>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  uint64_t v5 = *a4;
  char v10 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::AVG((uint64_t)__p, &v8);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v10, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v11 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E3E700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  *(void *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_4,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_4>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_4,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_4>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_5,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_5>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_5,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_5>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D755190;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_5,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_5>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D755190;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_5,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_5>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  uint64_t v5 = *a4;
  char v10 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::VAR((uint64_t)__p, &v8);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v10, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v11 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E3E888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  *(void *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_5,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_5>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_5,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_5>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_6,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_6>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_6,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_6>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D755210;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_6,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_6>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D755210;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_6,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_6>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  uint64_t v5 = *a4;
  char v10 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::STD((uint64_t)__p, &v8);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v10, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v11 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E3EA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  *(void *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_6,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_6>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_6,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_6>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_7,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_7>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_7,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_7>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D755290;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_7,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_7>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D755290;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_7,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_7>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  uint64_t v5 = *a4;
  char v10 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::STDV((uint64_t)__p, &v8);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v10, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v11 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E3EB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  *(void *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_7,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_7>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_7,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_7>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_8,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_8>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_8,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_8>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D755310;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_8,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_8>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D755310;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_8,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_8>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  uint64_t v5 = *a4;
  char v10 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::SELECT_ONE((uint64_t)__p, &v8);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v10, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v11 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E3ED20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  *(void *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_8,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_8>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_8,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_8>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_9,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_9>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_9,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_9>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D755390;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_9,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_9>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D755390;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_9,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_9>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  uint64_t v5 = *a4;
  char v10 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::COUNT_DISTINCT((uint64_t)__p, &v8);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v10, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v11 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E3EEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  *(void *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_9,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_9>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_9,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_9>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_10,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_10>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__func()
{
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_10,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_10>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D755410;
  return result;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_10,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_10>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D755410;
}

void std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_10,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_10>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::operator()(uint64_t a1, uint64_t **a2, char **a3, char **a4)
{
  uint64_t v5 = *a4;
  char v10 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::aggregate::CONCAT((uint64_t)__p, &v8);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_impl<char const*&,turi::aggregate::groupby_descriptor_type>(a2, &v10, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v11 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E3F030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  *(void *)(v19 - 24) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_10,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_10>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<tc_groupby_aggregator_add_simple_aggregator::$_10,std::allocator<tc_groupby_aggregator_add_simple_aggregator::$_10>,void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::target_type()
{
}

uint64_t std::map<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  std::string v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 56 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>> const&>((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 7;
      v6 -= 56;
    }
    while (v6);
  }
  return a1;
}

void sub_223E3F128(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  char v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    std::string v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::__construct_node<std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    char v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::__construct_node<std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_223E3F22C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_223E3F2A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,0>(uint64_t a1)
{
  std::__function::__value_func<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>(uint64_t **a1, const void **a2, long long *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    char v7 = v5;
    std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__construct_node<std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__construct_node<std::pair<std::string const,turi::aggregate::groupby_descriptor_type>>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = std::pair<std::string const,turi::aggregate::groupby_descriptor_type>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_223E3F540(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::aggregate::groupby_descriptor_type>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(long long *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a2[3];
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  return this;
}

{
  long long v4;
  std::string::size_type v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *((long long **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  uint64_t v5 = *((void *)a2 + 7);
  this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
  this[2].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void *std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D755490;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(void *a1)
{
  *a1 = &unk_26D755490;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x22A614FA0);
}

char *std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x20uLL);
  *(void *)__n128 result = &unk_26D755490;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D755490;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

void std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  turi::sframe_rows::row::operator std::vector<turi::flexible_type>(a2, (uint64_t *)&v15);
  std::vector<turi::flexible_type>::__vdeallocate((void **)v12 + 1);
  *(_OWORD *)((char *)v12 + 8) = v15;
  *((void *)&v12[1] + 1) = v16;
  uint64_t v16 = 0;
  uint64_t v14 = (void **)&v15;
  long long v15 = 0uLL;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
  uint64_t v5 = (void *)(*(uint64_t (**)(_OWORD *, void, uint64_t *))(a1 + 8))(v12, *(void *)(a1 + 16), &v13);
  uint64_t v6 = (void *)v13;
  if (v13)
  {
    uint64_t v8 = *(void *)(v13 + 8);
    *(void *)&long long v15 = *(void *)(v13 + 16);
    *(void *)((char *)&v15 + 7) = *(void *)(v13 + 23);
    char v9 = *(unsigned char *)(v13 + 31);
    *(void *)(v13 + 16) = 0;
    void v6[3] = 0;
    v6[1] = 0;
    (*(void (**)(void *, uint64_t *))(*v6 + 8))(v6, &v13);
    if (v5) {
      (*(void (**)(void, void *))(*(void *)*v5 + 8))(*v5, v5);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = v8;
    exception[1] = v15;
    *(void *)((char *)exception + 15) = *(void *)((char *)&v15 + 7);
    *((unsigned char *)exception + 23) = v9;
  }
  if (!v5)
  {
    uint64_t v11 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "Callback provided to tc_sframe_apply returned null without setting error");
  }
  uint64_t v7 = v5[1];
  *(void *)(a3 + 5) = *(void *)((char *)v5 + 13);
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 12) = *((unsigned char *)v5 + 20);
  *((unsigned char *)v5 + 20) = 0;
  (*(void (**)(void, void *))(*(void *)*v5 + 8))(*v5, v5);
  *(void *)&long long v15 = (char *)v12 + 8;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_223E3F990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<tc_sframe_apply::$_0,std::allocator<tc_sframe_apply::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

void *turi::sframe_rows::row::operator std::vector<turi::flexible_type>@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __n128 result = std::vector<turi::flexible_type>::vector(a2, (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 4);
  uint64_t v5 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = **(void **)(*(void *)*a1 + v6) + 16 * a1[1];
      uint64_t v9 = v5 + v6;
      if (v5 + v6 != v8)
      {
        switch(*(unsigned char *)(v9 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_36;
              }
              if (*((char *)v10 + 31) < 0) {
                operator delete((void *)v10[1]);
              }
              atomic_ullong *volatile v11 = v10;
              uint64_t v12 = 0x1012C404EF22A49;
              goto LABEL_35;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_36;
              }
              uint64_t v14 = (void *)v13[1];
              if (v14)
              {
                void v13[2] = (atomic_ullong)v14;
                operator delete(v14);
              }
              atomic_ullong *volatile v11 = v13;
              uint64_t v12 = 0x1080C409938AC02;
              goto LABEL_35;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_36;
              }
              uint64_t v26 = (void **)(v15 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v26);
              goto LABEL_21;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_36;
              }
              uint64_t v26 = (void **)(v15 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v26);
LABEL_21:
              atomic_ullong *volatile v11 = v15;
              uint64_t v12 = 0x1020C405E66F15BLL;
              goto LABEL_35;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v16 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_36;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v16 + 2);
              atomic_ullong *volatile v11 = v16;
              unsigned int v17 = -235920773;
              goto LABEL_34;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v9;
              if (*(void *)v9)
              {
                uint64_t v19 = (void *)v18[6];
                if (v19)
                {
                  v18[7] = (atomic_ullong)v19;
                  operator delete(v19);
                }
                atomic_ullong *volatile v20 = (void *)v18[3];
                if (v20)
                {
                  v18[4] = (atomic_ullong)v20;
                  operator delete(v20);
                }
                unsigned int v21 = (std::__shared_weak_count *)v18[2];
                if (v21) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
                }
                atomic_ullong *volatile v11 = v18;
                unsigned int v17 = 2071181815;
LABEL_34:
                uint64_t v12 = v17 | 0x1030C4000000000;
LABEL_35:
                __n128 result = (void *)MEMORY[0x22A614FA0](v11, v12);
              }
LABEL_36:
              *(void *)uint64_t v9 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v22 = *(void *)v8;
        *(void *)(v9 + 5) = *(void *)(v8 + 5);
        *(void *)uint64_t v9 = v22;
        LODWORD(v22) = *(unsigned __int8 *)(v8 + 12);
        *(unsigned char *)(v9 + 12) = v22;
        BOOL v23 = v22 > 9;
        int v24 = (1 << v22) & 0x33C;
        if (!v23 && v24 != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)v9, 1uLL);
        }
      }
      ++v7;
      uint64_t v5 = *a2;
      v6 += 16;
    }
    while (v7 < (a2[1] - *a2) >> 4);
  }
  return result;
}

void *std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<double>>()
{
}

void sub_223E3FF3C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x1080C409938AC02);
  unint64_t add = atomic_fetch_add(v1, 0xFFFFFFFFFFFFFFFFLL);
  if (v1 && add == 1)
  {
    uint64_t v5 = (void *)v1[1];
    if (v5)
    {
      v1[2] = (atomic_ullong)v5;
      operator delete(v5);
    }
    MEMORY[0x22A614FA0](v1, 0x1080C409938AC02);
  }
  _Unwind_Resume(a1);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<turi::flexible_type> const>()
{
}

void sub_223E400E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1020C405E66F15BLL);
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL);
  if (v10)
  {
    if (add == 1)
    {
      a10 = (void **)(v10 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      MEMORY[0x22A614FA0](v10, 0x1020C405E66F15BLL);
    }
  }
  _Unwind_Resume(a1);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> const>()
{
}

void sub_223E40284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1020C405E66F15BLL);
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL);
  if (v10)
  {
    if (add == 1)
    {
      a10 = (void **)(v10 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
      MEMORY[0x22A614FA0](v10, 0x1020C405E66F15BLL);
    }
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::Plot>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D755538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::Plot>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D755538;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::Plot>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    long long v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        long long v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

uint64_t std::map<std::string,turi::unary_op>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t std::map<std::string,turi::unary_op>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  long long v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::unary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unary_op>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::unary_op> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_223E404A8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::unary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unary_op>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::unary_op> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,turi::unary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unary_op>>>::__construct_node<std::pair<std::string const,turi::unary_op> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,turi::unary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unary_op>>>::__construct_node<std::pair<std::string const,turi::unary_op> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_223E405D0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_error::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 78, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_error::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E406E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_error::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_error_inst)", 46);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 78, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_error::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E408E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_datetime::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 79, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_datetime::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E40AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_datetime::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_datetime_inst)", 49);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 79, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_datetime::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E40CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_dict::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 80, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_dict::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E40EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_dict::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_flex_dict_inst)", 50);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 80, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_dict::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E410E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_list::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 81, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_list::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E412E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_list::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_flex_list_inst)", 50);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 81, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_list::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E414E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_image::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 82, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_image::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E416E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_image::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_flex_image_inst)", 51);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 82, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_image::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E418E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_ndarray::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 83, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_ndarray::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E41AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_ndarray::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_ndarray_inst)", 48);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 83, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_ndarray::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E41CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flexible_type::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 84, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_flexible_type::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E41EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flexible_type::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_flexible_type_inst)", 54);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 84, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_flexible_type::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E420E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_enum_list::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 85, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_enum_list::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E422E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_flex_enum_list::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_flex_enum_list_inst)", 55);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 85, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_flex_enum_list::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E424E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_sarray::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 86, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_sarray::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E426E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_sarray::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_sarray_inst)", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 86, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_sarray::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E428E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_sframe::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 87, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_sframe::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E42AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_sframe::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_sframe_inst)", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 87, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_sframe::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E42CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_variant::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 88, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_variant::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E42EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_variant::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_variant_inst)", 48);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 88, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_variant::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E430E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_parameters::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 89, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_parameters::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E432E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_parameters::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_parameters_inst)", 51);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 89, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_parameters::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E434E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_model::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 90, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_model::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E436E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_model::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_model_inst)", 46);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 90, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_model::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E438E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_groupby_aggregator::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 91, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_groupby_aggregator::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E43AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_groupby_aggregator::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_groupby_aggregator_inst)", 59);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 91, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_groupby_aggregator::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E43CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::aggregate::groupby_descriptor_type>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void capi_struct_type_info_tc_plot::free(void const*)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"vv->type_info == this", 21);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 92, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_plot::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E43F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void capi_struct_type_info_tc_plot::free(void const*)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", 100);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"this == &(capi_struct_type_info_tc_plot_inst)", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/capi/impl/capi_wrapper_structs.hpp", "operator()", 92, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  capi_struct_type_info_tc_plot::free(void const*)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E44144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_0(atomic_ullong *a1@<X8>)
{
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  return v0;
}

void OUTLINED_FUNCTION_13_0()
{
  atomic_fetch_add(*(atomic_ullong *volatile *)(v0 - 16), v1);
}

void OUTLINED_FUNCTION_14_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
}

std::locale OUTLINED_FUNCTION_15@<X0>(uint64_t a1@<X8>)
{
  return std::ios_base::getloc((const std::ios_base *)(v1 + a1));
}

uint64_t OUTLINED_FUNCTION_16()
{
  return std::ostream::put();
}

void OUTLINED_FUNCTION_17()
{
  __cxa_free_exception(v0);
}

void OUTLINED_FUNCTION_18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
}

void *OUTLINED_FUNCTION_19(uint64_t a1)
{
  pthread_key_t v2 = *(void *)(a1 + 592);
  return pthread_getspecific(v2);
}

void OUTLINED_FUNCTION_24(uint64_t a1)
{
  pthread_key_t v2 = (atomic_uint **)(a1 + 16);
  boost::detail::shared_count::~shared_count(v2);
}

void *turi::capi_server_initializer@<X0>(void *a1@<X8>)
{
  __n128 result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_26D755588;
  result[3] = &unk_26D7555D8;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void std::__shared_ptr_emplace<turi::prop_capi_unity_server_initializer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D755588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::prop_capi_unity_server_initializer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D755588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::prop_capi_unity_server_initializer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void turi::prop_capi_unity_server_initializer::~prop_capi_unity_server_initializer(turi::prop_capi_unity_server_initializer *this)
{
  turi::neural_net::float_scalar::~float_scalar(this);
  JUMPOUT(0x22A614FA0);
}

void turi::prop_capi_unity_server_initializer::init_toolkits()
{
  turi::supervised::get_toolkit_function_registration(v0);
}

void sub_223E445E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v25 - 24) = &a16;
  std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 24));
  _Unwind_Resume(a1);
}

void turi::prop_capi_unity_server_initializer::init_models(turi::prop_capi_unity_server_initializer *this, turi::toolkit_class_registry *a2)
{
  turi::supervised::get_toolkit_class_registration(v2);
}

void sub_223E44764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *(void *)(v25 - 24) = &a16;
  std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 24));
  _Unwind_Resume(a1);
}

void std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  pthread_key_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<turi::toolkit_function_specification>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::toolkit_function_specification>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(a2 + 104));
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100]((void *)(a2 + 72));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a2 + 48, *(void **)(a2 + 56));
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a2 + 24, *(char **)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

double CoreML::Specification::protobuf_GLMRegressor_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_GLMRegressor_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/GLMRegressor.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::_GLMRegressor_DoubleArray_default_instance_ = (uint64_t)&unk_26D755628;
  unk_268089350 = 0;
  qword_268089358 = 0;
  unk_268089360 = 0;
  dword_26808936C = 0;
  byte_268089370 = 1;
  CoreML::Specification::_GLMRegressor_default_instance_ = (uint64_t)&unk_26D7556C0;
  double result = 0.0;
  unk_268089380 = 0u;
  unk_268089390 = 0u;
  unk_2680893A0 = 0u;
  dword_2680893B4 = 0;
  unk_2680893B8 = 0;
  byte_2680893C0 = 1;
  return result;
}

void CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(CoreML::Specification::protobuf_GLMRegressor_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::protobuf_GLMRegressor_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_223E44A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::GLMRegressor_DoubleArray *CoreML::Specification::GLMRegressor_DoubleArray::GLMRegressor_DoubleArray(CoreML::Specification::GLMRegressor_DoubleArray *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D755628;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::GLMRegressor_DoubleArray *)&CoreML::Specification::_GLMRegressor_DoubleArray_default_instance_) {
    CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_223E44A90(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::GLMRegressor_DoubleArray::~GLMRegressor_DoubleArray(CoreML::Specification::GLMRegressor_DoubleArray *this)
{
  *(void *)this = &unk_26D755628;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::GLMRegressor_DoubleArray::~GLMRegressor_DoubleArray(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::GLMRegressor_DoubleArray::New(CoreML::Specification::GLMRegressor_DoubleArray *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223E44BA4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::GLMRegressor_DoubleArray>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMRegressor_DoubleArray>);
  }
  return result;
}

uint64_t CoreML::Specification::GLMRegressor_DoubleArray::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::GLMRegressor_DoubleArray::MergePartialFromCodedStream(CoreML::Specification::GLMRegressor_DoubleArray *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v6 = *a2;
          if (*a2 < a2[1]) {
            break;
          }
          uint64_t v7 = 0;
LABEL_7:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0) {
            goto LABEL_8;
          }
LABEL_14:
          if (v8) {
            BOOL v12 = (v8 & 7) == 4;
          }
          else {
            BOOL v12 = 1;
          }
          if (v12) {
            return 1;
          }
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
        }
          }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_14;
        }
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8) {
          goto LABEL_14;
        }
        if (v8 != 9) {
          break;
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0xAu, (unint64_t **)a2, (uint64_t)v5))return 0; {
      }
        }
      if (v8 != 10) {
        goto LABEL_14;
      }
      uint64_t v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        unsigned int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0) {
          return 0;
        }
      }
      else
      {
        unsigned int VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0) {
        return 0;
      }
      signed int v13 = *v5;
      unsigned int v14 = VarintSizeAsIntFallback >> 3;
      int v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      int v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15) {
        int v17 = v15;
      }
      else {
        int v17 = v16;
      }
      if (v15 == -1) {
        int v17 = v16;
      }
      if (v17 >= (uint64_t)VarintSizeAsIntFallback) {
        break;
      }
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v14 <= 1) {
          int v18 = 1;
        }
        else {
          int v18 = VarintSizeAsIntFallback >> 3;
        }
        do
        {
          unint64_t v28 = 0;
          uint64_t v19 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v28);
            if (!result) {
              return result;
            }
            unint64_t v20 = v28;
          }
          else
          {
            unint64_t v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          signed int v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v21 + 1);
            signed int v21 = *v5;
          }
          uint64_t v22 = *((void *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(void *)(v22 + 8 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    signed int v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      uint64_t v25 = *((void *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v13 + v14);
      uint64_t v25 = *((void *)this + 3);
      uint64_t v26 = 8 * v24 - 8 * *((int *)this + 4);
      if (v26 >= 1) {
        bzero((void *)(v25 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v26 >> 3) - ((unint64_t)v26 > 7)) + 8);
      }
    }
    unsigned int *v5 = v24;
    uint64_t v27 = v25 + 8;
    if (!v25) {
      uint64_t v27 = 0;
    }
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 8 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    BOOL result = 0;
    unsigned int *v5 = v13;
    return result;
  }
  return 0;
}

BOOL _tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(int a1, unsigned int a2, unint64_t **this, uint64_t a4)
{
  unint64_t v27 = 0;
  unint64_t v8 = *this;
  if ((int)(*((_DWORD *)this + 2) - *this) < 8)
  {
    BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v27);
    if (!result) {
      return result;
    }
    unint64_t v9 = v27;
  }
  else
  {
    unint64_t v9 = *v8;
    *this = v8 + 1;
  }
  signed int v10 = *(_DWORD *)a4;
  if (*(_DWORD *)a4 == *(_DWORD *)(a4 + 4))
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)a4, v10 + 1);
    signed int v10 = *(_DWORD *)a4;
  }
  uint64_t v11 = *(void *)(a4 + 8);
  int v12 = v10 + 1;
  *(_DWORD *)a4 = v10 + 1;
  *(void *)(v11 + 8 * v10 + 8) = v9;
  signed int v13 = *this;
  int v14 = *((_DWORD *)this + 2) - *this;
  if (v14 >= 1)
  {
    int v15 = a1 + 8;
    int v16 = *(_DWORD *)(a4 + 4) - v12;
    int v17 = v14 / (a1 + 8);
    if (v17 >= v16) {
      int v18 = *(_DWORD *)(a4 + 4) - v12;
    }
    else {
      int v18 = v14 / (a1 + 8);
    }
    if (v18 < 1)
    {
      LODWORD(v19) = 0;
    }
    else
    {
      uint64_t v19 = 0;
      int v20 = v10 + 2;
      uint64_t v21 = v11 + 8 * v12 + 8;
      int v22 = v17;
      if (v17 >= (uint64_t)v16) {
        int v22 = v16;
      }
      do
      {
        if (a2 > 0x7F)
        {
          if (a2 >> 14
            || (a2 & 0x7F | 0x80) != *(unsigned __int8 *)v13
            || *((unsigned __int8 *)v13 + 1) != (a2 >> 7))
          {
            goto LABEL_22;
          }
          BOOL v23 = (unint64_t *)((char *)v13 + 2);
        }
        else
        {
          int v24 = *(unsigned __int8 *)v13;
          BOOL v23 = (unint64_t *)((char *)v13 + 1);
          if (v24 != a2) {
            goto LABEL_22;
          }
        }
        uint64_t v25 = *v23;
        signed int v13 = v23 + 1;
        *(_DWORD *)a4 = v20 + v19;
        *(void *)(v21 + 8 * v19++) = v25;
      }
      while (v22 != v19);
      LODWORD(v19) = v18;
    }
LABEL_22:
    if ((int)v19 * v15 >= 1) {
      _tc_google::protobuf::io::CodedInputStream::Skip((_tc_google::protobuf::io::CodedInputStream *)this, v19 * v15);
    }
  }
  return 1;
}

uint64_t CoreML::Specification::GLMRegressor_DoubleArray::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        unint64_t v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unint64_t v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(void *)(v5 + 24);
    if (v13) {
      int v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    }
    else {
      int v14 = 0;
    }
    int v15 = (const double *)*(unsigned int *)(v5 + 16);
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v14, v15, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::GLMRegressor_DoubleArray::ByteSizeLong(CoreML::Specification::GLMRegressor_DoubleArray *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v2 = 8 * v1;
  if (v1)
  {
    if ((v2 & 0x80000000) != 0) {
      uint64_t v3 = 11;
    }
    else {
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

unint64_t *CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom(unint64_t *this, const CoreML::Specification::GLMRegressor_DoubleArray *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (unint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    int v7 = *((_DWORD *)v3 + 4);
    int v6 = (unsigned int *)(v3 + 2);
    _tc_google::protobuf::RepeatedField<double>::Reserve(v6, v7 + v5);
    this = (unint64_t *)memcpy((void *)(*((void *)v6 + 1) + 8 * (int)*v6 + 8), (const void *)(*((void *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *v6 += *((_DWORD *)a2 + 4);
  }
  return this;
}

uint64_t CoreML::Specification::GLMRegressor_DoubleArray::IsInitialized(CoreML::Specification::GLMRegressor_DoubleArray *this)
{
  return 1;
}

void *CoreML::Specification::GLMRegressor_DoubleArray::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.GLMRegressor.DoubleArray");
}

CoreML::Specification::GLMRegressor *CoreML::Specification::GLMRegressor::GLMRegressor(CoreML::Specification::GLMRegressor *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_26D7556C0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (this != (CoreML::Specification::GLMRegressor *)&CoreML::Specification::_GLMRegressor_default_instance_) {
    CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 15) = 0;
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_223E45294(_Unwind_Exception *a1)
{
  int v5 = *(void **)(v2 + 48);
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::GLMRegressor *CoreML::Specification::GLMRegressor::GLMRegressor(CoreML::Specification::GLMRegressor *this, const CoreML::Specification::GLMRegressor *a2)
{
  *(void *)this = &unk_26D7556C0;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  int v5 = (unint64_t *)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  unsigned int v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    uint64_t v7 = *((void *)a2 + 4);
    uint64_t v8 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::GLMRegressor *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v5, (CoreML::Specification::GLMRegressor_DoubleArray **)v8, (CoreML::Specification::GLMRegressor_DoubleArray **)(v7 + 8), v6, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    signed int v9 = *((_DWORD *)this + 6) + v6;
    *((_DWORD *)this + 6) = v9;
    unsigned int v10 = (signed int *)*((void *)this + 4);
    if (*v10 < v9) {
      signed int *v10 = v9;
    }
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  int v11 = *((_DWORD *)a2 + 10);
  if (v11)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 10, v11);
    memcpy((void *)(*((void *)this + 6) + 8), (const void *)(*((void *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  }
  *((_DWORD *)this + 16) = 0;
  uint64_t v12 = *((void *)a2 + 1);
  if (v12) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v12 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  return this;
}

void sub_223E453E8(_Unwind_Exception *a1)
{
  int v5 = *(void **)(v3 + 48);
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::GLMRegressor::~GLMRegressor(CoreML::Specification::GLMRegressor *this)
{
  *(void *)this = &unk_26D7556C0;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::GLMRegressor::~GLMRegressor(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::GLMRegressor::default_instance(CoreML::Specification::GLMRegressor *this)
{
  return &CoreML::Specification::_GLMRegressor_default_instance_;
}

void CoreML::Specification::GLMRegressor::New(CoreML::Specification::GLMRegressor *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223E45548(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C404133E315);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::GLMRegressor>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMRegressor>);
  }
  return result;
}

uint64_t CoreML::Specification::GLMRegressor::Clear(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = (uint64_t *)(*(void *)(this + 32) + 8);
    do
    {
      uint64_t v3 = *v2++;
      *(_DWORD *)(v3 + 16) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

BOOL CoreML::Specification::GLMRegressor::MergePartialFromCodedStream(CoreML::Specification::GLMRegressor *this, char **a2, unsigned int a3)
{
  int v5 = (unsigned int *)((char *)this + 40);
  unsigned int v6 = (char *)this + 16;
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v7 = *a2;
              if (*a2 < a2[1]) {
                break;
              }
              uint64_t v8 = 0;
LABEL_7:
              unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v8);
              unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
              if ((v9 & 0x100000000) != 0) {
                goto LABEL_8;
              }
LABEL_27:
              if (v9) {
                BOOL v20 = (v9 & 7) == 4;
              }
              else {
                BOOL v20 = 1;
              }
              if (v20) {
                return 1;
              }
              if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
            }
              }
            uint64_t v8 = *v7;
            if (*v7 < 1) {
              goto LABEL_7;
            }
            *a2 = v7 + 1;
            unint64_t v9 = v8 | 0x100000000;
            if ((v9 & 0x100000000) == 0) {
              goto LABEL_27;
            }
LABEL_8:
            unsigned int v11 = v9 >> 3;
            if (v9 >> 3 != 3) {
              break;
            }
            if (v9 != 24) {
              goto LABEL_27;
            }
            int v16 = *a2;
            if (*a2 >= a2[1])
            {
              int v17 = 0;
            }
            else
            {
              int v17 = *v16;
              if ((*v16 & 0x80000000) == 0)
              {
                *a2 = v16 + 1;
                goto LABEL_70;
              }
            }
            uint64_t Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v17);
            int v17 = Varint32Fallback;
            if (Varint32Fallback < 0) {
              return 0;
            }
LABEL_70:
            *((_DWORD *)this + 15) = v17;
          }
          if (v11 == 2) {
            break;
          }
          if (v11 != 1 || v9 != 10) {
            goto LABEL_27;
          }
          uint64_t v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((uint64_t)v6);
          int v14 = *a2;
          if (*a2 >= a2[1] || *v14 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v14;
            *a2 = v14 + 1;
          }
          unint64_t v21 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((v21 & 0x8000000000000000) == 0)
          {
            int v23 = v21;
            BOOL result = CoreML::Specification::GLMRegressor_DoubleArray::MergePartialFromCodedStream(v13, a2, v22);
            if (!result) {
              return result;
            }
            if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v23))
            {
              continue;
            }
          }
          return 0;
        }
        if (v9 != 17) {
          break;
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0x12u, (unint64_t **)a2, (uint64_t)v5))return 0; {
      }
        }
      if (v9 != 18) {
        goto LABEL_27;
      }
      int v18 = *a2;
      if (*a2 >= a2[1] || *v18 < 0)
      {
        unsigned int v19 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v19 & 0x80000000) != 0) {
          return 0;
        }
      }
      else
      {
        unsigned int v19 = *v18;
        *a2 = v18 + 1;
      }
      if ((v19 & 7) != 0) {
        return 0;
      }
      signed int v25 = *v5;
      unsigned int v26 = v19 >> 3;
      int v27 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      int v28 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v28 >= v27) {
        int v29 = v27;
      }
      else {
        int v29 = v28;
      }
      if (v27 == -1) {
        int v29 = v28;
      }
      if (v29 >= (uint64_t)v19) {
        break;
      }
      if (v19 >= 8)
      {
        if (v26 <= 1) {
          int v30 = 1;
        }
        else {
          int v30 = v19 >> 3;
        }
        do
        {
          unint64_t v40 = 0;
          uint64_t v31 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v40);
            if (!result) {
              return result;
            }
            unint64_t v32 = v40;
          }
          else
          {
            unint64_t v32 = *v31;
            *a2 = (char *)(v31 + 1);
          }
          signed int v33 = *((_DWORD *)this + 10);
          if (v33 == *((_DWORD *)this + 11))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v33 + 1);
            signed int v33 = *v5;
          }
          uint64_t v34 = *((void *)this + 6);
          *((_DWORD *)this + 10) = v33 + 1;
          *(void *)(v34 + 8 * v33 + 8) = v32;
          --v30;
        }
        while (v30);
      }
    }
    signed int v35 = v25 + v26;
    if ((int)*v5 >= (int)(v25 + v26))
    {
      uint64_t v36 = *((void *)this + 6);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + v26);
      uint64_t v36 = *((void *)this + 6);
      uint64_t v37 = 8 * v35 - 8 * *((int *)this + 10);
      if (v37 >= 1) {
        bzero((void *)(v36 + 8 + 8 * *((int *)this + 10)), 8 * (((unint64_t)v37 >> 3) - ((unint64_t)v37 > 7)) + 8);
      }
    }
    unsigned int *v5 = v35;
    uint64_t v38 = v36 + 8;
    if (!v36) {
      uint64_t v38 = 0;
    }
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v38 + 8 * v25), v19));
  if ((int)*v5 >= 1)
  {
    BOOL result = 0;
    unsigned int *v5 = v25;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::GLMRegressor::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  if (*(int *)(v5 + 40) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x12u);
      int v8 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 18;
      int v8 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v8;
    }
    unsigned int v9 = *(_DWORD *)(v5 + 56);
    if (v8 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v9);
    }
    else
    {
      uint64_t v10 = *((void *)a2 + 1);
      if (v9 < 0x80)
      {
        unsigned int v12 = *(_DWORD *)(v5 + 56);
        unsigned int v11 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unsigned int v11 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v11++ = v9 | 0x80;
          unsigned int v12 = v9 >> 7;
          unsigned int v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
      }
      unsigned char *v11 = v12;
      int v14 = v11 - v10 + 1;
      *((void *)a2 + 1) += v14;
      *((_DWORD *)a2 + 4) -= v14;
    }
    uint64_t v15 = *(void *)(v5 + 48);
    if (v15) {
      int v16 = (_tc_google::protobuf::internal::WireFormatLite *)(v15 + 8);
    }
    else {
      int v16 = 0;
    }
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v16, (const double *)*(unsigned int *)(v5 + 40), a2, a4);
  }
  signed int v17 = *(_DWORD *)(v5 + 60);
  if (v17)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt32(3, v17, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::GLMRegressor::ByteSizeLong(CoreML::Specification::GLMRegressor *this)
{
  int v1 = *((_DWORD *)this + 6);
  if (v1)
  {
    int v2 = 0;
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = *(unsigned int **)(v3 + 8 * v2 + 8);
      uint64_t v6 = v5[4];
      uint64_t v7 = 8 * v6;
      if (v6)
      {
        if ((v7 & 0x80000000) != 0) {
          uint64_t v8 = 11;
        }
        else {
          uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      uint64_t v9 = v8 + v7;
      v5[8] = v7;
      v5[9] = v9;
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v2;
    }
    while (v1 != v2);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v10 = *((unsigned int *)this + 10);
  uint64_t v11 = 8 * v10;
  if (v10)
  {
    if ((v11 & 0x80000000) != 0) {
      uint64_t v12 = 11;
    }
    else {
      uint64_t v12 = ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v4 += v12;
  }
  *((_DWORD *)this + 14) = v11;
  uint64_t v13 = v4 + v11;
  int v14 = *((_DWORD *)this + 15);
  if (v14)
  {
    if (v14 < 0) {
      uint64_t v15 = 11;
    }
    else {
      uint64_t v15 = ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v13 += v15;
  }
  *((_DWORD *)this + 16) = v13;
  return v13;
}

unint64_t *CoreML::Specification::GLMRegressor::MergeFrom(unint64_t *this, const CoreML::Specification::GLMRegressor *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (unint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::GLMRegressor_DoubleArray **)(*((void *)a2 + 4) + 8);
    uint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), *((_DWORD *)a2 + 6));
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3 + 2, (CoreML::Specification::GLMRegressor_DoubleArray **)v7, v6, v5, *(_DWORD *)v3[4] - *((_DWORD *)v3 + 6));
    signed int v8 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v8;
    uint64_t v9 = (signed int *)v3[4];
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
  int v10 = *((_DWORD *)a2 + 10);
  if (v10)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)v3 + 10, *((_DWORD *)v3 + 10) + v10);
    this = (unint64_t *)memcpy((void *)(v3[6] + 8 * *((int *)v3 + 10) + 8), (const void *)(*((void *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *((_DWORD *)v3 + 10) += *((_DWORD *)a2 + 10);
  }
  int v11 = *((_DWORD *)a2 + 15);
  if (v11) {
    *((_DWORD *)v3 + 15) = v11;
  }
  return this;
}

uint64_t CoreML::Specification::GLMRegressor::IsInitialized(CoreML::Specification::GLMRegressor *this)
{
  return 1;
}

void *CoreML::Specification::GLMRegressor::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.GLMRegressor");
}

void CoreML::Specification::GLMRegressor_DoubleArray::New(CoreML::Specification::GLMRegressor_DoubleArray *this)
{
}

uint64_t _tc_google::protobuf::MessageLite::GetMaybeArenaPointer(_tc_google::protobuf::MessageLite *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 40))();
}

uint64_t CoreML::Specification::GLMRegressor_DoubleArray::GetCachedSize(CoreML::Specification::GLMRegressor_DoubleArray *this)
{
  return *((unsigned int *)this + 9);
}

void CoreML::Specification::GLMRegressor::New(CoreML::Specification::GLMRegressor *this)
{
}

uint64_t CoreML::Specification::GLMRegressor::GetCachedSize(CoreML::Specification::GLMRegressor *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t *_tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 24) && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0) {
        operator delete(*(void **)v3);
      }
      MEMORY[0x22A614FA0](v3, 0x1032C402ED93987);
    }
  }
  *a1 = 0;
  return a1;
}

void _tc_google::protobuf::RepeatedField<double>::Reserve(unsigned int *a1, int a2)
{
  signed int v2 = a1[1];
  if (v2 < a2)
  {
    uint64_t v4 = (_tc_google::protobuf::Arena **)*((void *)a1 + 1);
    if (v4) {
      unsigned int v5 = *v4;
    }
    else {
      unsigned int v5 = 0;
    }
    int v6 = 2 * v2;
    if (v6 <= a2) {
      int v6 = a2;
    }
    if (v6 <= 4) {
      unsigned int v7 = 4;
    }
    else {
      unsigned int v7 = v6;
    }
    uint64_t v8 = 8 * v7;
    if (v5) {
      Aligned = _tc_google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x263F8C238], v8 + 8);
    }
    else {
      Aligned = operator new(v8 + 8);
    }
    *((void *)a1 + 1) = Aligned;
    void *Aligned = v5;
    a1[1] = v7;
    uint64_t v10 = *a1;
    if ((int)v10 >= 1) {
      memcpy(Aligned + 1, v4 + 1, 8 * v10);
    }
    if (v4 && !*v4)
    {
      operator delete(v4);
    }
  }
}

CoreML::Specification::GLMRegressor_DoubleArray *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(uint64_t a1)
{
  signed int v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    signed int v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::GLMRegressor_DoubleArray **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *signed int v2 = v4 + 1;
  int v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::GLMRegressor_DoubleArray::GLMRegressor_DoubleArray(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMRegressor_DoubleArray>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_223E45F78(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMRegressor_DoubleArray>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

std::string *_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(unint64_t *a1, uint64_t a2)
{
  if (*a1) {
    uint64_t v3 = (std::string *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  }
  else {
    uint64_t v3 = (std::string *)_tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(a1);
  }
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    unsigned int v5 = (const std::string::value_type *)a2;
  }
  else {
    unsigned int v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }
  return std::string::append(v3, v5, v6);
}

unint64_t _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(unint64_t *a1)
{
  signed int v2 = (_tc_google::protobuf::Arena *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  if (*a1)
  {
    signed int v2 = (_tc_google::protobuf::Arena *)*((void *)v2 + 3);
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    operator new();
  }
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  *(_OWORD *)unint64_t Aligned = 0u;
  *(_OWORD *)(Aligned + 16) = 0u;
  _tc_google::protobuf::Arena::AddListNode(v2, (void *)Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::Container>);
  *a1 = Aligned | 1;
  *(void *)(Aligned + 24) = v2;
  return Aligned;
}

void _tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::Container>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMRegressor_DoubleArray>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(void *a1)
{
  signed int v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = v2 + 2;
    uint64_t v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3) {
          (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        }
        ++v3;
        --v4;
      }
      while (v4);
      signed int v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMRegressor>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

unint64_t *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(unint64_t *result, CoreML::Specification::GLMRegressor_DoubleArray **a2, CoreML::Specification::GLMRegressor_DoubleArray **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    int v11 = a3;
    uint64_t v12 = a2;
    do
    {
      int v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    unsigned int v19 = &a3[a5];
    BOOL v20 = &a2[a5];
    do
    {
      unint64_t v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::GLMRegressor_DoubleArray::GLMRegressor_DoubleArray(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMRegressor_DoubleArray>);
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v21, Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_223E462D4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

unint64_t *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(CoreML::Specification::GLMRegressor_DoubleArray *a1, CoreML::Specification::GLMRegressor_DoubleArray *this)
{
  return CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((unint64_t *)this, a1);
}

void *std::seed_seq::seed_seq[abi:ne180100]<int,(void *)0>(void *a1, int *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::seed_seq::__init[abi:ne180100]<int const*>((uint64_t)a1, a2, &a2[a3]);
  return a1;
}

void sub_223E4633C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::seed_seq::__init[abi:ne180100]<int const*>(uint64_t a1, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    std::string::size_type v6 = (void *)(a1 + 16);
    uint64_t v7 = *(_DWORD **)(a1 + 8);
    do
    {
      int v8 = *v4;
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v10 = *(_DWORD **)a1;
        uint64_t v11 = ((uint64_t)v7 - *(void *)a1) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = *v6 - (void)v10;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v14);
          uint64_t v10 = *(_DWORD **)a1;
          uint64_t v7 = *(_DWORD **)(a1 + 8);
        }
        else
        {
          uint64_t v15 = 0;
        }
        BOOL v16 = &v15[4 * v11];
        *(_DWORD *)BOOL v16 = v8;
        uint64_t v9 = v16 + 4;
        while (v7 != v10)
        {
          int v17 = *--v7;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        *(void *)a1 = v16;
        *(void *)(a1 + 8) = v9;
        *(void *)(a1 + 16) = &v15[4 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        _DWORD *v7 = v8;
        uint64_t v9 = v7 + 1;
      }
      *(void *)(a1 + 8) = v9;
      ++v4;
      uint64_t v7 = v9;
    }
    while (v4 != a3);
  }
}

void *std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::__seed<std::seed_seq>(void *a1, unint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  std::seed_seq::generate[abi:ne180100]<unsigned int *>(a2, __src, (unsigned int *)&v6);
  BOOL result = memcpy(a1, __src, 0x9C0uLL);
  a1[312] = 0;
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
    uint64_t v4 = 4;
    while (!*(_DWORD *)((char *)a1 + v4))
    {
      v4 += 4;
      if (v4 == 2496)
      {
        *(_DWORD *)a1 = 0x80000000;
        return result;
      }
    }
  }
  return result;
}

unint64_t std::seed_seq::generate[abi:ne180100]<unsigned int *>(unint64_t result, unsigned int *__b, unsigned int *a3)
{
  if (__b != a3)
  {
    uint64_t v4 = (int **)result;
    uint64_t v5 = (char *)a3 - (char *)__b;
    if ((char *)a3 - (char *)__b >= 1) {
      memset(__b, 139, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
    }
    unint64_t v6 = v5 >> 2;
    int v8 = *v4;
    uint64_t v7 = v4[1];
    uint64_t v9 = (char *)v7 - (char *)*v4;
    uint64_t v10 = v9 >> 2;
    uint64_t v11 = 11;
    uint64_t v12 = 7;
    uint64_t v13 = 5;
    uint64_t v14 = 3;
    unint64_t v15 = (v5 >> 2) - 1;
    if ((unint64_t)v5 <= 0x18) {
      uint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v5 <= 0x98) {
      uint64_t v13 = v14;
    }
    if ((unint64_t)v5 <= 0x10C) {
      uint64_t v12 = v13;
    }
    if ((unint64_t)v5 <= 0x9B8) {
      uint64_t v11 = v12;
    }
    unint64_t v16 = (unint64_t)v9 >> 2;
    unint64_t v17 = (v6 - v11) >> 1;
    unint64_t v18 = v11 + v17;
    unint64_t v19 = v10 + 1;
    if (v10 + 1 > v6) {
      unint64_t v20 = v10 + 1;
    }
    else {
      unint64_t v20 = v5 >> 2;
    }
    unsigned int v21 = __b[v17];
    unsigned int v22 = 1664525 * (*__b ^ __b[v15] ^ v21 ^ ((*__b ^ __b[v15] ^ v21) >> 27));
    __b[v17] = v22 + v21;
    unsigned int v23 = v22 + v16;
    __b[v18] += v23;
    *__b = v23;
    unint64_t v24 = v17 % v6;
    BOOL result = v18 / v6;
    unint64_t v25 = v18 % v6;
    if (v7 == v8)
    {
      uint64_t v26 = 0;
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = 2;
      if (v19 > 2) {
        uint64_t v27 = v10 + 1;
      }
      BOOL result = v27 - 1;
      do
      {
        if (v26 + 1 == v6) {
          uint64_t v26 = 0;
        }
        else {
          ++v26;
        }
        if (v15 + 1 == v6) {
          unint64_t v15 = 0;
        }
        else {
          ++v15;
        }
        if (v24 + 1 == v6) {
          unint64_t v24 = 0;
        }
        else {
          ++v24;
        }
        if (v25 + 1 == v6) {
          unint64_t v25 = 0;
        }
        else {
          ++v25;
        }
        unsigned int v28 = __b[v24];
        unsigned int v29 = 1664525 * (__b[v26] ^ __b[v15] ^ v28 ^ ((__b[v26] ^ __b[v15] ^ v28) >> 27));
        __b[v24] = v29 + v28;
        int v30 = *v8++;
        unsigned int v31 = v30 + v26 + v29;
        __b[v25] += v31;
        __b[v26] = v31;
        --result;
      }
      while (result);
    }
    if (v19 < v6)
    {
      unint64_t v32 = ~v10 + v20;
      do
      {
        if (v26 + 1 == v6) {
          uint64_t v26 = 0;
        }
        else {
          ++v26;
        }
        if (v15 + 1 == v6) {
          unint64_t v15 = 0;
        }
        else {
          ++v15;
        }
        if (v24 + 1 == v6) {
          unint64_t v24 = 0;
        }
        else {
          ++v24;
        }
        if (v25 + 1 == v6) {
          unint64_t v25 = 0;
        }
        else {
          ++v25;
        }
        unsigned int v33 = __b[v24];
        BOOL result = __b[v15];
        unsigned int v34 = __b[v26] ^ result ^ v33;
        int v35 = 1664525 * (v34 ^ (v34 >> 27));
        __b[v24] = v35 + v33;
        unsigned int v36 = v35 + v26;
        __b[v25] += v36;
        __b[v26] = v36;
        --v32;
      }
      while (v32);
    }
    if (v20 < v20 + v6)
    {
      uint64_t v37 = v5 >> 2;
      do
      {
        if (v26 + 1 == v6) {
          uint64_t v26 = 0;
        }
        else {
          ++v26;
        }
        if (v15 + 1 == v6) {
          unint64_t v15 = 0;
        }
        else {
          ++v15;
        }
        if (v24 + 1 == v6) {
          unint64_t v24 = 0;
        }
        else {
          ++v24;
        }
        if (v25 + 1 == v6) {
          unint64_t v25 = 0;
        }
        else {
          ++v25;
        }
        unsigned int v38 = __b[v24];
        unsigned int v39 = v38 + __b[v26] + __b[v15];
        int v40 = 1566083941 * (v39 ^ (v39 >> 27));
        __b[v24] = v40 ^ v38;
        unsigned int v41 = v40 - v26;
        __b[v25] ^= v41;
        __b[v26] = v41;
        --v37;
      }
      while (v37);
    }
  }
  return result;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x270;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (i << 15) & 0xEFC60000 ^ i ^ (((i << 15) & 0xEFC60000 ^ i) >> 18);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    BOOL result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_223E468D0(_Unwind_Exception *exception_object)
{
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::insert(uint64_t a1, char *__src, char *a3)
{
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = a3;
  uint64_t v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 16, v18);
    }
    else {
      unint64_t v19 = 0;
    }
    unint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    unsigned int v28 = v20;
    unsigned int v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        unsigned int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v8, v22);
        unint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        unsigned int v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)unint64_t v20 = *(void *)v3;
    unsigned int v28 = v20 + 8;
    uint64_t v4 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_223E46AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_impl::ndarray<double>::canonicalize(uint64_t **a1@<X0>, uint64_t **a2@<X8>)
{
  if (turi::flexible_type_impl::ndarray<double>::is_full(a1)
    && turi::flexible_type_impl::ndarray<double>::has_canonical_stride((uint64_t)a1))
  {
    turi::flexible_type_impl::ndarray<double>::ndarray(a2, (uint64_t)a1);
  }
  else
  {
    if (!turi::flexible_type_impl::ndarray<double>::is_valid(a1)) {
      turi::flexible_type_impl::ndarray<double>::canonicalize(void)const::{lambda(void)#1}::operator()();
    }
    uint64_t v51 = 0;
    unint64_t v52 = 0;
    uint64_t v53 = 0;
    unsigned int v48 = 0;
    double v49 = 0;
    uint64_t v50 = 0;
    std::string __p = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    turi::flexible_type_impl::ndarray<double>::ndarray(a2, (uint64_t)&v51, (uint64_t)&v48, (uint64_t)&__p, 0);
    if (__p)
    {
      uint64_t v46 = __p;
      operator delete(__p);
    }
    if (v48)
    {
      double v49 = v48;
      operator delete(v48);
    }
    if (v51)
    {
      unint64_t v52 = (uint64_t *)v51;
      operator delete(v51);
    }
    a2[8] = 0;
    if (a2 != a1) {
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)a2 + 16, (char *)a1[2], (uint64_t)a1[3], a1[3] - a1[2]);
    }
    uint64_t v5 = a1[2];
    uint64_t v4 = a1[3];
    if (v4 == v5 || !*a1)
    {
      unint64_t v6 = 0;
    }
    else
    {
      unint64_t v6 = 1;
      do
      {
        uint64_t v7 = *v5++;
        v6 *= v7;
      }
      while (v5 != v4);
    }
    std::vector<double>::resize((uint64_t)*a2, v6);
    uint64_t v8 = (uint64_t *)(a2 + 5);
    std::vector<unsigned long>::resize((uint64_t)(a2 + 5), a1[3] - a1[2]);
    uint64_t v10 = (char *)a2[2];
    uint64_t v9 = (char *)a2[3];
    uint64_t v11 = v9 - v10;
    if (v9 != v10 && (*a2)[1] != **a2)
    {
      uint64_t v12 = v11 >> 3;
      uint64_t v13 = *v8;
      *(void *)(*v8 + 8 * (v11 >> 3) - 8) = 1;
      if (v11 >= 9)
      {
        unint64_t v14 = v10 - 8;
        uint64_t v15 = v13 - 16;
        uint64_t v16 = 1;
        do
        {
          v16 *= *(void *)&v14[8 * v12];
          *(void *)(v15 + 8 * v12) = v16;
          uint64_t v17 = v12 - 2;
          --v12;
        }
        while (v17 > 0);
      }
      unint64_t v18 = a1[3] - a1[2];
      unsigned int v48 = 0;
      std::vector<unsigned long>::vector(&v51, v18, &v48);
      uint64_t v19 = 0;
      unint64_t v20 = (uint64_t *)v51;
      unint64_t v21 = v52;
      uint64_t v22 = **a1;
      uint64_t v23 = **a2;
      uint64_t v24 = (char *)v52 - (unsigned char *)v51;
      unint64_t v25 = ((char *)v52 - (unsigned char *)v51) >> 3;
      unint64_t v26 = v25 - 1;
      if (v25 <= 1) {
        uint64_t v27 = 1;
      }
      else {
        uint64_t v27 = ((char *)v52 - (unsigned char *)v51) >> 3;
      }
      do
      {
        if (v21 == v20)
        {
          uint64_t v28 = 0;
        }
        else
        {
          uint64_t v28 = 0;
          unsigned int v29 = a1[5];
          uint64_t v30 = v20;
          uint64_t v31 = v27;
          do
          {
            uint64_t v33 = *v30++;
            uint64_t v32 = v33;
            uint64_t v34 = *v29++;
            v28 += v34 * v32;
            --v31;
          }
          while (v31);
        }
        *(void *)(v23 + 8 * v19) = *(void *)(v22 + 8 * ((void)a1[8] + v28));
        uint64_t v35 = v25;
        unint64_t v36 = v25 - 1;
        if (v24 >= 1)
        {
          uint64_t v37 = a1[2];
          unint64_t v38 = v20[v26] + 1;
          v20[v26] = v38;
          if (v38 >= v37[v26])
          {
            unsigned int v39 = v37 - 2;
            unint64_t v40 = v25;
            unsigned int v41 = (unint64_t *)((char *)v20 + (v24 & 0xFFFFFFFFFFFFFFF8) - 16);
            while (1)
            {
              unint64_t v42 = v40 - 1;
              v41[1] = 0;
              if ((uint64_t)(v40 - 1) <= 0) {
                goto LABEL_45;
              }
              unint64_t v43 = *v41 + 1;
              *v41-- = v43;
              unint64_t v44 = v39[v40--];
              if (v43 < v44)
              {
                uint64_t v35 = 1;
                if (((v42 - 1) & 0x8000000000000000) == 0) {
                  goto LABEL_38;
                }
                goto LABEL_44;
              }
            }
          }
          uint64_t v35 = 1;
          unint64_t v36 = v25 - 1;
        }
        if ((v36 & 0x8000000000000000) != 0) {
          break;
        }
LABEL_38:
        ++v19;
      }
      while (v35);
LABEL_44:
      if (!v20) {
        return;
      }
LABEL_45:
      unint64_t v52 = v20;
      operator delete(v20);
    }
  }
}

void sub_223E46E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  turi::flexible_type_impl::ndarray<double>::~ndarray(v16);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_impl::ndarray<double>::elements(uint64_t *a1)
{
  if (!turi::flexible_type_impl::ndarray<double>::is_full(a1)) {
    turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
  }
  return *a1;
}

char *std::vector<unsigned long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void turi::flexible_type_impl::ndarray<double>::canonicalize(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  size_t v2 = (void *)std::ostream::operator<<();
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/ndarray.hpp", "operator()", 436, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::ndarray<double>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E47060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

BOOL turi::flexible_type_impl::ndarray<double>::has_canonical_stride(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 48) - (void)v1;
  if (!v2) {
    return 1;
  }
  if (!*v1) {
    return 0;
  }
  if ((unint64_t)v2 < 0x10) {
    return 1;
  }
  unint64_t v4 = v2 >> 3;
  uint64_t v5 = (unint64_t)(v2 >> 3) <= 2 ? 2 : v2 >> 3;
  unint64_t v6 = v1[1];
  if (!v6) {
    return 0;
  }
  uint64_t v7 = 0;
  BOOL v3 = 0;
  uint64_t v8 = v5 - 2;
  do
  {
    if (v1[v7] < v6) {
      break;
    }
    BOOL v3 = v7 + 2 >= v4;
    if (v8 == v7) {
      break;
    }
    unint64_t v6 = v1[v7++ + 2];
  }
  while (v6);
  return v3;
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_223E47248(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(unsigned __int8 *a1)
{
  int v1 = a1[12];
  unint64_t result = 0;
  switch(v1)
  {
    case 0:
      uint64_t v4 = *(void *)a1;
      return 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * (v4 ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995 * (v4 ^ 0xC3A5C85C97CB3127)) >> 47));
    case 1:
      uint64_t v4 = *(void *)a1;
      return 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * (v4 ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995 * (v4 ^ 0xC3A5C85C97CB3127)) >> 47));
    case 2:
      uint64_t v5 = *(void *)a1;
      if (*(char *)(v5 + 31) < 0)
      {
        unint64_t v6 = *(turi::cityhash_local **)(v5 + 8);
        unint64_t v7 = *(void *)(v5 + 16);
      }
      else
      {
        unint64_t v6 = (turi::cityhash_local *)(v5 + 8);
        unint64_t v7 = *(unsigned __int8 *)(v5 + 31);
      }
      goto LABEL_19;
    case 3:
      uint64_t v8 = *(void *)a1;
      unint64_t v6 = *(turi::cityhash_local **)(v8 + 8);
      uint64_t v9 = *(void *)(v8 + 16);
      goto LABEL_18;
    case 4:
      return turi::flexible_type_impl::city_hash_visitor::operator()((uint64_t)&v28, (uint64_t *)(*(void *)a1 + 8));
    case 5:
      return turi::flexible_type_impl::city_hash_visitor::operator()((uint64_t)&v28, (uint64_t *)(*(void *)a1 + 8));
    case 6:
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = *((int *)a1 + 2);
      unint64_t v12 = (0xC6A4A7935BD1E995 * ((v10 << 8 >> 8) ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                                * ((v10 << 8 >> 8) ^ 0xC3A5C85C97CB3127)) >> 47);
      uint64_t v13 = -25;
      if (v10 >> 56 < 0) {
        uint64_t v13 = 25;
      }
      unint64_t v14 = (0xC6A4A7935BD1E995 * ((v13 + (v10 >> 56)) ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                                    * ((v13 + (v10 >> 56)) ^ 0xC3A5C85C97CB3127)) >> 47);
      uint64_t v15 = 5
          * __ROR8__((0x4CF5AD432745937FLL * ((0x23994FF200000000 * v12) | ((0x309B56691CCA7F9 * v12) >> 31))) ^ 0x73A3916AE45D01E5, 27);
      uint64_t v16 = (5
           * (__ROR8__((0x87C37B91114253D5 * ((0x5F3637F580000000 * v14) | ((0x60004CFCBE6C6FEBLL * v14) >> 33))) ^ 0x73A3916AE45D01E5, 31)+ v15+ 0x4231D716C8ADF0A2)+ 944331445) ^ (v15 + 0x4231D716C8ADF0A2);
      unint64_t v17 = (0xC6A4A7935BD1E995 * (v11 ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995 * (v11 ^ 0xC3A5C85C97CB3127)) >> 47);
      uint64_t v18 = 5
          * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v16) | ((0x87C37B91114253D5 * v16) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
      return (5
            * (v18
             + __ROR8__((0x87C37B91114253D5 * ((0x5F3637F580000000 * v17) | ((0x60004CFCBE6C6FEBLL * v17) >> 33))) ^ 0x73A3916AE45D01E5, 31))+ 944331445) ^ v18;
    case 7:
      return result;
    case 8:
      uint64_t v19 = *(void *)a1;
      unint64_t v20 = *(atomic_uint **)(v19 + 16);
      uint64_t v24 = v20;
      if (v20) {
        atomic_fetch_add_explicit(v20 + 2, 1u, memory_order_relaxed);
      }
      long long v21 = *(_OWORD *)(v19 + 24);
      long long v22 = *(_OWORD *)(v19 + 40);
      long long v27 = *(_OWORD *)(v19 + 56);
      long long v26 = v22;
      long long v25 = v21;
      boost::detail::shared_count::~shared_count(&v24);
      return 0;
    case 9:
      uint64_t v23 = *(void *)(*(void *)a1 + 8);
      unint64_t v6 = *(turi::cityhash_local **)v23;
      uint64_t v9 = *(void *)(v23 + 8);
LABEL_18:
      unint64_t v7 = v9 - (void)v6;
LABEL_19:
      return turi::cityhash_local::CityHash64(v6, v7);
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

unint64_t turi::cityhash_local::CityHash64(turi::cityhash_local *this, unint64_t a2)
{
  if (a2 <= 0x20)
  {
    uint64_t v2 = 0x9AE16A3B2F90404FLL;
    if (a2 > 0x10)
    {
      uint64_t v3 = 2 * a2 - 0x651E95C4D06FBFB1;
      uint64_t v17 = *((void *)this + 1);
      uint64_t v6 = __ROR8__(v17 - 0x651E95C4D06FBFB1, 18)
         - 0x4B6D499041670D8DLL * *(void *)this
         + *(void *)((char *)this + a2 - 8) * v3;
      uint64_t v7 = (__ROR8__(*(void *)((char *)this + a2 - 8) * v3, 30)
          + __ROR8__(0xB492B66FBE98F273 * *(void *)this + v17, 43)
          - 0x651E95C4D06FBFB1 * *(void *)((char *)this + a2 - 16)) ^ v6;
      return (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3)) * v3) ^ (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3))
                                                                              * v3) >> 47))
           * v3;
    }
    if (a2 >= 8)
    {
      uint64_t v3 = 2 * a2 - 0x651E95C4D06FBFB1;
      uint64_t v4 = *(void *)this - 0x651E95C4D06FBFB1;
      uint64_t v5 = v4 + __ROR8__(*(void *)((char *)this + a2 - 8), 37) * v3;
      uint64_t v6 = (__ROR8__(v4, 25) + *(void *)((char *)this + a2 - 8)) * v3;
      uint64_t v7 = v6 ^ v5;
      return (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3)) * v3) ^ (((v6 ^ ((unint64_t)(v7 * v3) >> 47) ^ (v7 * v3))
                                                                              * v3) >> 47))
           * v3;
    }
    if (a2 < 4)
    {
      if (!a2) {
        return v2;
      }
      unint64_t v56 = (0xC3A5C85C97CB3127 * (a2 + 4 * *((unsigned __int8 *)this + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)this | ((unint64_t)*((unsigned __int8 *)this + (a2 >> 1)) << 8)));
      goto LABEL_13;
    }
    uint64_t v2 = 2 * a2 - 0x651E95C4D06FBFB1;
    unint64_t v54 = *(unsigned int *)((char *)this + a2 - 4);
    unint64_t v55 = (a2 + 8 * *(unsigned int *)this) ^ v54;
LABEL_12:
    unint64_t v56 = (v54 ^ ((v55 * v2) >> 47) ^ (v55 * v2)) * v2;
LABEL_13:
    v2 *= v56 ^ (v56 >> 47);
    return v2;
  }
  if (a2 > 0x40)
  {
    uint64_t v2 = 0x9DDFEA08EB382D69;
    uint64_t v18 = *(void *)((char *)this + a2 - 48);
    uint64_t v19 = *(void *)((char *)this + a2 - 40);
    uint64_t v20 = *(void *)((char *)this + a2 - 24);
    uint64_t v22 = *(void *)((char *)this + a2 - 64);
    uint64_t v21 = *(void *)((char *)this + a2 - 56);
    uint64_t v23 = *(void *)((char *)this + a2 - 16);
    uint64_t v24 = *(void *)((char *)this + a2 - 8);
    unint64_t v25 = v21 + v23;
    unint64_t v26 = 0x9DDFEA08EB382D69
        * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ (v18 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ (v18 + a2))));
    unint64_t v27 = 0x9DDFEA08EB382D69 * (v26 ^ (v26 >> 47));
    char v28 = (const char *)(v22 + a2 + v21 + v18);
    unint64_t v29 = (unint64_t)&v28[v19];
    unint64_t v30 = __ROR8__(v28, 44) + v22 + a2 + __ROR8__(v19 + v22 + a2 - 0x622015F714C7D297 * (v26 ^ (v26 >> 47)), 21);
    uint64_t v31 = v21 + v23 + *(void *)((char *)this + a2 - 32) - 0x4B6D499041670D8DLL;
    uint64_t v32 = v31 + v20 + v23;
    uint64_t v33 = __ROR8__(v32, 44);
    uint64_t v34 = v32 + v24;
    uint64_t v35 = v33 + v31 + __ROR8__(v31 + v19 + v24, 21);
    uint64_t v37 = *(void *)this;
    unint64_t v36 = (void *)((char *)this + 32);
    unint64_t v38 = v37 - 0x4B6D499041670D8DLL * v19;
    uint64_t v39 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      uint64_t v40 = *(v36 - 3);
      unsigned int v41 = (const char *)(v38 + v29 + v25 + v40);
      uint64_t v42 = v36[2];
      uint64_t v43 = v36[3];
      uint64_t v44 = v36[1];
      unint64_t v25 = v44 + v29 - 0x4B6D499041670D8DLL * __ROR8__(v25 + v30 + v42, 42);
      uint64_t v45 = v27 + v34;
      uint64_t v46 = *(v36 - 2);
      uint64_t v47 = *(v36 - 1);
      uint64_t v48 = *(v36 - 4) - 0x4B6D499041670D8DLL * v30;
      uint64_t v49 = v48 + v34 + v47;
      uint64_t v50 = v48 + v40 + v46;
      unint64_t v29 = v50 + v47;
      uint64_t v51 = __ROR8__(v50, 44) + v48;
      unint64_t v52 = (0xB492B66FBE98F273 * __ROR8__(v41, 37)) ^ v35;
      unint64_t v38 = 0xB492B66FBE98F273 * __ROR8__(v45, 33);
      unint64_t v30 = v51 + __ROR8__(v49 + v52, 21);
      unint64_t v53 = v38 + v35 + *v36;
      uint64_t v34 = v53 + v44 + v42 + v43;
      uint64_t v35 = __ROR8__(v53 + v44 + v42, 44) + v53 + __ROR8__(v25 + v46 + v53 + v43, 21);
      v36 += 8;
      unint64_t v27 = v52;
      v39 += 64;
    }
    while (v39);
    unint64_t v54 = v38
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v30)))) ^ ((0x9DDFEA08EB382D69 * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v30)))) >> 47));
    unint64_t v55 = v54 ^ (v52
               - 0x4B6D499041670D8DLL * (v25 ^ (v25 >> 47))
               - 0x622015F714C7D297
               * ((0x9DDFEA08EB382D69
                 * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ v29)))) ^ ((0x9DDFEA08EB382D69 * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ v29)))) >> 47)));
    goto LABEL_12;
  }
  uint64_t v8 = 2 * a2 - 0x651E95C4D06FBFB1;
  uint64_t v10 = *(void *)((char *)this + a2 - 32);
  uint64_t v9 = *(void *)((char *)this + a2 - 24);
  uint64_t v11 = 9 * *((void *)this + 3);
  uint64_t v12 = *(void *)((char *)this + a2 - 8);
  uint64_t v13 = *(void *)((char *)this + a2 - 16) * v8;
  uint64_t v14 = v11 - 0x651E95C4D06FBFB1 * *((void *)this + 2);
  uint64_t v15 = __ROR8__(v14, 42);
  unint64_t v16 = v14
      + v9
      + *((void *)this + 1)
      + bswap64((v14+ v9+ v12+ v15+ v9+ bswap64((v11+ ((v12 - 0x651E95C4D06FBFB1 * *(void *)this) ^ v10)+ 1+ v13+ bswap64((__ROR8__(v12 - 0x651E95C4D06FBFB1 * *(void *)this, 43)+ 9 * (__ROR8__(*((void *)this + 1), 30) + v9)+ v11+ ((v12 - 0x651E95C4D06FBFB1 * *(void *)this) ^ v10)+ 1)* v8))* v8))* v8);
  return v15 + v9 + ((v13 + v10 + v16 * v8) ^ ((v13 + v10 + v16 * v8) >> 47)) * v8;
}

uint64_t std::equal_to<turi::flexible_type>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  switch(*(unsigned char *)(a3 + 12))
  {
    case 0:
      BOOL v3 = 0;
      switch(a2[12])
      {
        case 0u:
          return *(void *)a2 == *(void *)a3;
        case 1u:
          double v5 = *(double *)a2;
          uint64_t v6 = *(void *)a3;
          return v5 == (double)v6;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v3;
        case 6u:
          return *(void *)a3 == (uint64_t)(*(void *)a2 << 8) >> 8 && *((_DWORD *)a2 + 2) == 0;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      BOOL v3 = 0;
      switch(a2[12])
      {
        case 0u:
          double v5 = *(double *)a3;
          uint64_t v6 = *(void *)a2;
          return v5 == (double)v6;
        case 1u:
          return *(double *)a2 == *(double *)a3;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v3;
        case 6u:
          double v73 = *(double *)a3;
          double v74 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
          return vabdd_f64(v74, v73) < 0.0000005;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v7 = a2[12];
      BOOL v8 = v7 - 3 >= 7 && v7 >= 2;
      if (!v8) {
        return 0;
      }
      if (v7 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v9 = *(void *)a3;
      double v10 = *(double *)a2;
      char v11 = *(unsigned char *)(*(void *)a2 + 31);
      size_t v12 = v11 < 0 ? *(void *)(*(void *)&v10 + 16) : *(unsigned __int8 *)(*(void *)a2 + 31);
      uint64_t v75 = *(char *)(v9 + 31) < 0 ? *(void *)(v9 + 16) : *(unsigned __int8 *)(v9 + 31);
      if (v12 != v75) {
        return 0;
      }
      char v76 = (void *)(*(void *)&v10 + 8);
      if ((*(unsigned char *)(*(void *)a2 + 31) & 0x80) != 0) {
        char v76 = (void *)*v76;
      }
      unint64_t v77 = (void *)(v9 + 8);
      if ((*(unsigned char *)(v9 + 31) & 0x80) != 0) {
        unint64_t v77 = (void *)*v77;
      }
      if (v11 < 0)
      {
        return memcmp(v76, v77, v12) == 0;
      }
      else
      {
        if (!v12) {
          return 1;
        }
        size_t v78 = v12 - 1;
        do
        {
          int v80 = *(unsigned __int8 *)v76;
          char v76 = (void *)((char *)v76 + 1);
          int v79 = v80;
          int v82 = *(unsigned __int8 *)v77;
          unint64_t v77 = (void *)((char *)v77 + 1);
          int v81 = v82;
          BOOL v8 = v78-- != 0;
          char v83 = v8;
          BOOL v3 = v79 == v81;
        }
        while (v79 == v81 && (v83 & 1) != 0);
      }
      return v3;
    case 3:
      unsigned int v13 = a2[12];
      if (v13 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v13 != 3) {
        return 0;
      }
      uint64_t v14 = *(double **)(*(void *)a2 + 8);
      uint64_t v15 = *(double **)(*(void *)a2 + 16);
      unint64_t v16 = v15 - v14;
      uint64_t v17 = *(double **)(*(void *)a3 + 8);
      if (v16 != (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v17) >> 3) {
        return 0;
      }
      if (v15 == v14) {
        return 1;
      }
      if (v16 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v15 - v14;
      }
      if (*v14 != *v17) {
        return 0;
      }
      uint64_t v19 = 1;
      do
      {
        unint64_t v20 = v19;
        if (v18 == v19) {
          break;
        }
        double v21 = v14[v19];
        double v22 = v17[v19++];
      }
      while (v21 == v22);
      return v20 >= v16;
    case 4:
      unsigned int v23 = a2[12];
      if (v23 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v23 != 4) {
        return 0;
      }
      return turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v85, (uint64_t *)(*(void *)a2 + 8), (void *)(*(void *)a3 + 8));
    case 5:
      unsigned int v25 = a2[12];
      if (v25 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v25 != 5) {
        return 0;
      }
      return turi::flexible_type_impl::approx_equality_operator::operator()(&v85, *(void *)a2 + 8, *(void *)a3 + 8);
    case 6:
      BOOL v3 = 0;
      switch(a2[12])
      {
        case 0u:
          return *(void *)a2 == (uint64_t)(*(void *)a3 << 8) >> 8 && *(_DWORD *)(a3 + 8) == 0;
        case 1u:
          double v74 = *(double *)a2;
          double v73 = (double)*(int *)(a3 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8);
          return vabdd_f64(v74, v73) < 0.0000005;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v3;
        case 6u:
          return ((*(void *)a3 ^ *(void *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)a2 + 2) == *(_DWORD *)(a3 + 8);
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v26 = a2[12];
      if (v26 >= 0xA) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return v26 == 7;
    case 8:
      unsigned int v27 = a2[12];
      if (v27 < 8 || v27 == 9) {
        return 0;
      }
      if (v27 != 8) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v29 = *(void *)a2 + 8;
      uint64_t v30 = *(void *)a3 + 8;
      return turi::image_type::operator==(v29, v30);
    case 9:
      unsigned int v32 = a2[12];
      if (v32 < 9) {
        return 0;
      }
      if (v32 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v33 = *(void *)a3;
      uint64_t v34 = *(void **)a2;
      if (*(void *)a3 == *(void *)a2) {
        return 1;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v34 + 1), v33 + 8)) {
        return 0;
      }
      unint64_t v36 = (char *)v34[3];
      uint64_t v35 = (char *)v34[4];
      uint64_t v37 = v35 - v36;
      if (v35 == v36) {
        return 1;
      }
      if (!v34[1]) {
        return 1;
      }
      uint64_t v38 = 1;
      do
      {
        uint64_t v39 = *(void *)v36;
        v36 += 8;
        v38 *= v39;
      }
      while (v36 != v35);
      if (!v38) {
        return 1;
      }
      uint64_t v84 = 0;
      std::vector<unsigned long>::vector(&v85, v37 >> 3, &v84);
      uint64_t v40 = v85;
      unsigned int v41 = v86;
      uint64_t v42 = **(void **)(v33 + 8);
      uint64_t v43 = (char *)v86 - (char *)v85;
      unint64_t v44 = v86 - v85;
      unint64_t v45 = v44 - 1;
      if (v44 <= 1) {
        uint64_t v46 = 1;
      }
      else {
        uint64_t v46 = v86 - v85;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (1)
  {
    if (v41 == v40)
    {
      uint64_t v54 = 0;
      double v55 = *(double *)(*(void *)v34[1] + 8 * v34[9]);
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v48 = (uint64_t *)v34[6];
      uint64_t v49 = v40;
      uint64_t v50 = v46;
      do
      {
        uint64_t v52 = *v49++;
        uint64_t v51 = v52;
        uint64_t v53 = *v48++;
        v47 += v53 * v51;
        --v50;
      }
      while (v50);
      uint64_t v54 = 0;
      double v55 = *(double *)(*(void *)v34[1] + 8 * (v34[9] + v47));
      unint64_t v56 = *(uint64_t **)(v33 + 48);
      unint64_t v57 = v40;
      uint64_t v58 = v46;
      do
      {
        uint64_t v60 = *v57++;
        uint64_t v59 = v60;
        uint64_t v61 = *v56++;
        v54 += v61 * v59;
        --v58;
      }
      while (v58);
    }
    double v62 = *(double *)(v42 + 8 * (*(void *)(v33 + 72) + v54));
    BOOL v3 = v55 == v62;
    if (v55 != v62)
    {
LABEL_82:
      if (!v40) {
        return v3;
      }
      goto LABEL_117;
    }
    uint64_t v63 = v44;
    unint64_t v64 = v44 - 1;
    if (v43 >= 1) {
      break;
    }
LABEL_80:
    if ((v64 & 0x8000000000000000) != 0 || !v63) {
      goto LABEL_82;
    }
  }
  uint64_t v65 = v34[3];
  unint64_t v66 = v40[v45] + 1;
  v40[v45] = v66;
  if (v66 < *(void *)(v65 + 8 * v45))
  {
    uint64_t v63 = 1;
    unint64_t v64 = v44 - 1;
    goto LABEL_80;
  }
  uint64_t v67 = v65 - 16;
  unint64_t v68 = v44;
  size_t v69 = (unint64_t *)((char *)v40 + (v43 & 0xFFFFFFFFFFFFFFF8) - 16);
  while (1)
  {
    unint64_t v70 = v68 - 1;
    v69[1] = 0;
    if ((uint64_t)(v68 - 1) <= 0) {
      break;
    }
    unint64_t v71 = *v69 + 1;
    *v69-- = v71;
    unint64_t v72 = *(void *)(v67 + 8 * v68--);
    if (v71 < v72)
    {
      unint64_t v64 = v70 - 1;
      uint64_t v63 = 1;
      goto LABEL_80;
    }
  }
  BOOL v3 = 1;
LABEL_117:
  uint64_t v86 = v40;
  operator delete(v40);
  return v3;
}

void CoreML::validate<(MLModelType)2006>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    BOOL v3 = *(uint64_t **)(a1 + 16);
  }
  else {
    BOOL v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  if (*(_DWORD *)(a1 + 44) != 2006)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "Model not an audio feature print.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((SHIBYTE(__p) & 0x80000000) == 0) {
      return;
    }
    BOOL v8 = v18;
    goto LABEL_31;
  }
  CoreML::Result::Result((CoreML::Result *)&v18);
  double v5 = operator new(4uLL);
  size_t v12 = v5;
  _DWORD *v5 = 5;
  unsigned int v13 = v5 + 1;
  uint64_t v14 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 2), 1, (int **)&v12, (uint64_t)&v15);
  uint64_t v18 = v15;
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v16;
  uint64_t v20 = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  if (v12)
  {
    unsigned int v13 = v12;
    operator delete(v12);
  }
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v18);
  if (v6)
  {
    if (*(_DWORD *)(a1 + 44) == 2006) {
      unsigned int v7 = *(uint64_t **)(a1 + 32);
    }
    else {
      unsigned int v7 = CoreML::Specification::CoreMLModels::AudioFeaturePrint::default_instance((CoreML::Specification::CoreMLModels::AudioFeaturePrint *)v6);
    }
    int v9 = *((_DWORD *)v7 + 7);
    if (!v9)
    {
      std::string::basic_string[abi:ne180100]<0>(&v15, "Type for audio feature print not set");
      CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_21:
      if (SHIBYTE(v16) < 0) {
        operator delete(v15);
      }
      goto LABEL_29;
    }
    if (v9 == 20)
    {
      int v10 = *(_DWORD *)(v7[2] + 16);
      if (v10 == 1)
      {
        char v11 = operator new(4uLL);
        size_t v12 = v11;
        _DWORD *v11 = 5;
        unsigned int v13 = v11 + 1;
        uint64_t v14 = v11 + 1;
        CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 5), 1, (int **)&v12, (uint64_t)&v15);
        uint64_t v18 = v15;
        if (SHIBYTE(v20) < 0) {
          operator delete((void *)__p);
        }
        long long __p = v16;
        uint64_t v20 = v17;
        HIBYTE(v17) = 0;
        LOBYTE(v16) = 0;
        if (v12)
        {
          unsigned int v13 = v12;
          operator delete(v12);
        }
        CoreML::Result::good((CoreML::Result *)&v18);
      }
      else if (!v10)
      {
        std::string::basic_string[abi:ne180100]<0>(&v15, "Version for sound is invalid");
        CoreML::Result::Result((_DWORD *)a2, 13);
        goto LABEL_21;
      }
    }
  }
  *(void *)a2 = v18;
  *(_OWORD *)(a2 + 8) = __p;
  *(void *)(a2 + 24) = v20;
  long long __p = 0uLL;
  uint64_t v20 = 0;
LABEL_29:
  if ((SHIBYTE(v20) & 0x80000000) == 0) {
    return;
  }
  BOOL v8 = (void *)__p;
LABEL_31:
  operator delete(v8);
}

void sub_223E48220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(uint64_t a1@<X0>, int a2@<W1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v16);
  int v8 = *(_DWORD *)(a1 + 8);
  if (a2 && v8 > a2)
  {
    std::to_string(&v15, a2);
    int v9 = std::string::insert(&v15, 0, "Feature descriptions exceeded ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)long long __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result((_DWORD *)a4, 9);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
  }
  else
  {
    if (v8 < 1)
    {
LABEL_15:
      *(void *)a4 = v16;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)v17;
      uint64_t v12 = v18;
    }
    else
    {
      uint64_t v11 = 0;
      while (1)
      {
        CoreML::validateSchemaTypes(a3, *(void *)(*(void *)(a1 + 16) + 8 * v11 + 8), (CoreML::Result *)__p);
        uint64_t v16 = *(void *)__p;
        if (SHIBYTE(v18) < 0) {
          operator delete(v17[0]);
        }
        *(_OWORD *)uint64_t v17 = *(_OWORD *)&__p[8];
        uint64_t v18 = v14;
        if (!CoreML::Result::good((CoreML::Result *)&v16)) {
          break;
        }
        if (++v11 >= *(int *)(a1 + 8)) {
          goto LABEL_15;
        }
      }
      *(void *)a4 = v16;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)v17;
      uint64_t v12 = v18;
    }
    *(void *)(a4 + 24) = v12;
  }
}

void sub_223E48418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validateSchemaTypes@<X0>(int **a1@<X0>, uint64_t a2@<X1>, CoreML::Result *a3@<X8>)
{
  if (*(void *)(a2 + 32)) {
    BOOL v6 = *(uint64_t **)(a2 + 32);
  }
  else {
    BOOL v6 = &CoreML::Specification::_FeatureType_default_instance_;
  }
  unsigned int v7 = *a1;
  int v8 = a1[1];
  if (*a1 == v8)
  {
LABEL_8:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v35);
    long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Unsupported type \"", 18);
    uint64_t v11 = *(uint64_t **)(a2 + 32);
    if (!v11) {
      uint64_t v11 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    uint64_t v12 = *((int *)v11 + 9);
    if (v12 > 7) {
      unsigned int v13 = "INVALID";
    }
    else {
      unsigned int v13 = off_2646D6A90[v12];
    }
    size_t v14 = strlen(v13);
    std::string v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v13, v14);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\" for feature \"", 15);
    uint64_t v17 = *(const void ***)(a2 + 16);
    if (*((char *)v17 + 23) >= 0) {
      size_t v18 = *((unsigned __int8 *)v17 + 23);
    }
    else {
      size_t v18 = (size_t)v17[1];
    }
    uint64_t v19 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v18 + 21);
    if ((v34 & 0x80u) != 0) {
      uint64_t v19 = (void **)__p[0];
    }
    if (v18)
    {
      if (*((char *)v17 + 23) >= 0) {
        uint64_t v20 = v17;
      }
      else {
        uint64_t v20 = *v17;
      }
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, "\". Should be one of: ");
    if ((v34 & 0x80u) == 0) {
      double v21 = __p;
    }
    else {
      double v21 = (void **)__p[0];
    }
    if ((v34 & 0x80u) == 0) {
      uint64_t v22 = v34;
    }
    else {
      uint64_t v22 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v21, v22);
    if ((char)v34 < 0) {
      operator delete(__p[0]);
    }
    unsigned int v23 = *a1;
    uint64_t v24 = a1[1];
    if (*a1 != v24)
    {
      char v25 = 1;
      do
      {
        if ((v25 & 1) == 0) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", ", 2);
        }
        uint64_t v26 = *v23;
        unsigned int v27 = "INVALID";
        if (v26 <= 7) {
          unsigned int v27 = off_2646D6A90[v26];
        }
        size_t v28 = strlen(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v27, v28);
        char v25 = 0;
        ++v23;
      }
      while (v23 != v24);
    }
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)".", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    uint64_t v30 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    CoreML::Result::Result(a3, 8);
    if ((char)v34 < 0) {
      operator delete(__p[0]);
    }
    v35[0] = *MEMORY[0x263F8C2B8];
    uint64_t v31 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v35 + *(void *)(v35[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v36[0] = v31;
    v36[1] = MEMORY[0x263F8C318] + 16;
    if (v37 < 0) {
      operator delete((void *)v36[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (CoreML::Result *)MEMORY[0x22A614E30](&v38);
  }
  else
  {
    int v9 = *((_DWORD *)v6 + 9);
    while (v9 != *v7)
    {
      if (++v7 == v8) {
        goto LABEL_8;
      }
    }
    return CoreML::Result::Result(a3);
  }
}

void sub_223E4889C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void turi::proprietary::human_action_recognition::init_human_action_recognition()
{
}

void sub_223E48954(_Unwind_Exception *a1)
{
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::make_unique<turi::neural_net::model_spec>()
{
}

void sub_223E489B0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void turi::proprietary::human_action_recognition::anonymous namespace'::define_har_network()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  int v3 = v2;
  unint64_t v5 = v4;
  unint64_t v7 = v6;
  unint64_t v9 = v8;
  uint64_t v94 = v10;
  uint64_t v11 = (void *)v0;
  uint64_t v264 = *MEMORY[0x263EF8340];
  unsigned int v12 = 5489;
  LODWORD(__dst[0]) = 5489;
  for (uint64_t i = 1; i != 624; ++i)
  {
    unsigned int v12 = i + 1812433253 * (v12 ^ (v12 >> 30));
    *((_DWORD *)__dst + i) = v12;
  }
  __dst[312] = 0;
  *(_DWORD *)uint64_t v263 = v1;
  std::seed_seq::seed_seq[abi:ne180100]<int,(void *)0>(v155, (int *)v263, 1);
  std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::__seed<std::seed_seq>(v263, (unint64_t)v155);
  memcpy(__dst, v263, sizeof(__dst));
  std::string::basic_string[abi:ne180100]<0>(v263, "input_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "poses");
  size_t v14 = (uint64_t *)operator new(0x18uLL);
  uint64_t v152 = v14 + 3;
  uint64_t v153 = v14 + 3;
  uint64_t v14[2] = 0;
  *(_OWORD *)size_t v14 = xmmword_2246B9C50;
  unsigned int v151 = v14;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, &v151);
  if (v151)
  {
    uint64_t v152 = v151;
    operator delete(v151);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "encode_reshape0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "input_transpose0");
  unint64_t v95 = v5;
  std::string v15 = operator new(0x18uLL);
  *((void *)&v149 + 1) = v15 + 3;
  v150[0] = v15 + 3;
  uint64_t v16 = 3 * v7;
  void *v15 = 1;
  v15[1] = 3 * v7;
  void v15[2] = v95;
  *(void *)&long long v149 = v15;
  turi::neural_net::model_spec::add_reshape_static(v11, (std::string *)v263, &v154, (uint64_t *)&v149);
  if ((void)v149)
  {
    *((void *)&v149 + 1) = v149;
    operator delete((void *)v149);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "encode_expand_dims0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "encode_reshape0");
  uint64_t v17 = operator new(0x10uLL);
  *(void *)&long long v149 = v17;
  *uint64_t v17 = xmmword_2246B9C30;
  *((void *)&v149 + 1) = v17 + 1;
  v150[0] = v17 + 1;
  size_t v18 = (char *)operator new(0x18uLL);
  uint64_t v147 = (void **)(v18 + 24);
  BOOL v148 = (void **)(v18 + 24);
  *(void *)size_t v18 = 1;
  *((void *)v18 + 1) = v16;
  *((void *)v18 + 2) = v95;
  double v146 = (void **)v18;
  uint64_t v19 = (int64x2_t *)operator new(0x28uLL);
  double v144 = &v19[2].u64[1];
  i64 = &v19[2].i64[1];
  *uint64_t v19 = vdupq_n_s64(1uLL);
  v19[1].i64[0] = v16;
  v19[1].i64[1] = 1;
  v19[2].i64[0] = v95;
  unsigned int v143 = v19;
  turi::neural_net::model_spec::add_expand_dims(v11, (std::string *)v263, &v154, (uint64_t *)&v149, (uint64_t *)&v146, (uint64_t *)&v143);
  if (v143)
  {
    double v144 = (unint64_t *)v143;
    operator delete(v143);
  }
  if (v146)
  {
    uint64_t v147 = v146;
    operator delete(v146);
  }
  if ((void)v149)
  {
    *((void *)&v149 + 1) = v149;
    operator delete((void *)v149);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "encode_expand_dims0");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 3 * v7, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "encode_squeeze0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_batch_norm_1");
  uint64_t v20 = operator new(0x10uLL);
  *(void *)&long long v149 = v20;
  _OWORD *v20 = xmmword_2246B9C30;
  *((void *)&v149 + 1) = v20 + 1;
  v150[0] = v20 + 1;
  double v21 = (char *)operator new(0x28uLL);
  uint64_t v147 = (void **)(v21 + 40);
  BOOL v148 = (void **)(v21 + 40);
  *(int64x2_t *)double v21 = vdupq_n_s64(1uLL);
  *((void *)v21 + 2) = v16;
  *((void *)v21 + 3) = 1;
  *((void *)v21 + 4) = v95;
  double v146 = (void **)v21;
  uint64_t v22 = (int64x2_t *)operator new(0x18uLL);
  double v144 = &v22[1].u64[1];
  i64 = &v22[1].i64[1];
  v22->i64[0] = 1;
  v22->i64[1] = v16;
  v22[1].i64[0] = v95;
  unsigned int v143 = v22;
  turi::neural_net::model_spec::add_squeeze(v11, (std::string *)v263, &v154, (uint64_t *)&v149, (uint64_t *)&v146, (uint64_t *)&v143);
  if (v143)
  {
    double v144 = (unint64_t *)v143;
    operator delete(v143);
  }
  if (v146)
  {
    uint64_t v147 = v146;
    operator delete(v146);
  }
  if ((void)v149)
  {
    *((void *)&v149 + 1) = v149;
    operator delete((void *)v149);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "encode_reshape1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "encode_squeeze0");
  unsigned int v23 = operator new(0x20uLL);
  *((void *)&v149 + 1) = v23 + 4;
  v150[0] = v23 + 4;
  *(_OWORD *)unsigned int v23 = xmmword_2246B9C40;
  v23[2] = v7;
  v23[3] = v95;
  *(void *)&long long v149 = v23;
  turi::neural_net::model_spec::add_reshape_static(v11, (std::string *)v263, &v154, (uint64_t *)&v149);
  if ((void)v149)
  {
    *((void *)&v149 + 1) = v149;
    operator delete((void *)v149);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "encode_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "encode_reshape1");
  uint64_t v24 = (char *)operator new(0x20uLL);
  v141 = (uint64_t *)(v24 + 32);
  uint64_t v142 = v24 + 32;
  *(_OWORD *)uint64_t v24 = xmmword_2246B9C68;
  *((_OWORD *)v24 + 1) = unk_2246B9C78;
  v140 = (uint64_t *)v24;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, &v140);
  if (v140)
  {
    v141 = v140;
    operator delete(v140);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_0graph_conv_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "encode_transpose0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 3uLL, 0x18uLL, (uint64_t)__dst);
    char v25 = &unk_26D755798;
    long long v261 = v149;
  }
  else
  {
    char v25 = &unk_26D755828;
  }
  uint64_t v260 = v25;
  uint64_t v262 = &v260;
  v259[0] = &unk_26D755828;
  v259[3] = v259;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 24, 3, 1, 1, 1, 1, 0, (uint64_t)&v260, (uint64_t)v259);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v259);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v260);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "encode_split0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_0graph_conv_conv_1");
  uint64_t v26 = operator new(0x18uLL);
  *((void *)&v149 + 1) = v26 + 3;
  v150[0] = v26 + 3;
  v26[2] = 8;
  *(_OWORD *)uint64_t v26 = xmmword_2246B9C88;
  *(void *)&long long v149 = v26;
  turi::neural_net::model_spec::add_split_nd(v11, (uint64_t)v263, &v154, 1, 3, (uint64_t **)&v149);
  if ((void)v149)
  {
    *((void *)&v149 + 1) = v149;
    operator delete((void *)v149);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "encode_concat0");
  unint64_t v96 = v7;
  std::string::basic_string[abi:ne180100]<0>(v263, "encode_split0_0");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "encode_split0_1");
  std::string::basic_string[abi:ne180100]<0>(&v263[48], "encode_split0_2");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x48uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 72;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[72], (std::string *)v149);
  turi::neural_net::model_spec::add_concat_nd(v11, &v154, (std::string **)&v149, 3);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (uint64_t j = 0; j != -72; j -= 24)
  {
    if ((char)v263[j + 71] < 0) {
      operator delete(*(void **)&v263[j + 48]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "encode_transpose1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "encode_concat0");
  size_t v28 = (char *)operator new(0x20uLL);
  uint64_t v138 = (uint64_t *)(v28 + 32);
  uint64_t v139 = v28 + 32;
  *(_OWORD *)size_t v28 = xmmword_2246B9D18;
  *((_OWORD *)v28 + 1) = unk_2246B9D28;
  v137 = (uint64_t *)v28;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, &v137);
  if (v137)
  {
    uint64_t v138 = v137;
    operator delete(v137);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_0graph_conv_conv_2");
  std::string::basic_string[abi:ne180100]<0>(&v154, "encode_transpose1");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, v16, v96, (uint64_t)__dst);
    uint64_t v29 = &unk_26D755798;
    long long v257 = v149;
  }
  else
  {
    uint64_t v29 = &unk_26D755828;
  }
  v258 = &v256;
  v255[3] = 0;
  uint64_t v256 = v29;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, v96, v16, 1, 1, 1, 1, 0, (uint64_t)&v256, (uint64_t)v255);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v255);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v256);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "encode_transpose2");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_0graph_conv_conv_2");
  uint64_t v30 = (char *)operator new(0x20uLL);
  uint64_t v135 = (uint64_t *)(v30 + 32);
  v136 = v30 + 32;
  *(_OWORD *)uint64_t v30 = xmmword_2246B9D18;
  *((_OWORD *)v30 + 1) = unk_2246B9D28;
  double v134 = (uint64_t *)v30;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, &v134);
  if (v134)
  {
    uint64_t v135 = v134;
    operator delete(v134);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_0graph_conv_tcn_batch_norm_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "encode_transpose2");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 8, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "encode_activation0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_0graph_conv_tcn_batch_norm_0");
  turi::neural_net::model_spec::add_relu(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "encode_pad");
  std::string::basic_string[abi:ne180100]<0>(&v154, "encode_activation0");
  turi::neural_net::model_spec::add_padding(v11, (std::string *)v263, &v154, 4, 4, 0, 0, 2);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_0graph_conv_tcn_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "encode_pad");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x48uLL, 0x48uLL, (uint64_t)__dst);
    uint64_t v31 = &unk_26D755798;
    long long v253 = v149;
  }
  else
  {
    uint64_t v31 = &unk_26D755828;
  }
  uint64_t v252 = v31;
  v254 = &v252;
  v251[0] = &unk_26D755828;
  v251[3] = v251;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 8, 8, 9, 1, 1, 1, 0, (uint64_t)&v252, (uint64_t)v251);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v251);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v252);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_0graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_0graph_conv_tcn_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 8, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_0_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_0graph_conv_tcn_batch_norm_1");
  turi::neural_net::model_spec::add_relu(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_1graph_conv_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_0_relu_0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 8uLL, 0x30uLL, (uint64_t)__dst);
    unsigned int v32 = &unk_26D755798;
    long long v249 = v149;
  }
  else
  {
    unsigned int v32 = &unk_26D755828;
  }
  uint64_t v248 = v32;
  unsigned int v250 = &v248;
  v247[0] = &unk_26D755828;
  v247[3] = v247;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 48, 8, 1, 1, 1, 1, 0, (uint64_t)&v248, (uint64_t)v247);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v247);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v248);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual1_split0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_1graph_conv_conv_1");
  uint64_t v33 = operator new(0x18uLL);
  *((void *)&v149 + 1) = v33 + 3;
  v150[0] = v33 + 3;
  v33[2] = 16;
  *(_OWORD *)uint64_t v33 = xmmword_2246B9CA0;
  *(void *)&long long v149 = v33;
  turi::neural_net::model_spec::add_split_nd(v11, (uint64_t)v263, &v154, 1, 3, (uint64_t **)&v149);
  if ((void)v149)
  {
    *((void *)&v149 + 1) = v149;
    operator delete((void *)v149);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual1_concat0");
  std::string::basic_string[abi:ne180100]<0>(v263, "residual1_split0_0");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "residual1_split0_1");
  std::string::basic_string[abi:ne180100]<0>(&v263[48], "residual1_split0_2");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x48uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 72;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[72], (std::string *)v149);
  turi::neural_net::model_spec::add_concat_nd(v11, &v154, (std::string **)&v149, 3);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (uint64_t k = 0; k != -72; k -= 24)
  {
    if ((char)v263[k + 71] < 0) {
      operator delete(*(void **)&v263[k + 48]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual1_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual1_concat0");
  uint64_t v35 = (char *)operator new(0x20uLL);
  unint64_t v132 = (uint64_t *)(v35 + 32);
  double v133 = v35 + 32;
  *(_OWORD *)uint64_t v35 = xmmword_2246B9D18;
  *((_OWORD *)v35 + 1) = unk_2246B9D28;
  uint64_t v131 = (uint64_t *)v35;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, &v131);
  if (v131)
  {
    unint64_t v132 = v131;
    operator delete(v131);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_1graph_conv_conv_2");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual1_transpose0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, v16, v96, (uint64_t)__dst);
    unint64_t v36 = &unk_26D755798;
    long long v245 = v149;
  }
  else
  {
    unint64_t v36 = &unk_26D755828;
  }
  double v246 = &v244;
  v243[3] = 0;
  uint64_t v244 = v36;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, v96, v16, 1, 1, 1, 1, 0, (uint64_t)&v244, (uint64_t)v243);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v243);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v244);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual1_transpose1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_1graph_conv_conv_2");
  char v37 = (char *)operator new(0x20uLL);
  v129 = (uint64_t *)(v37 + 32);
  uint64_t v130 = v37 + 32;
  *(_OWORD *)char v37 = xmmword_2246B9D18;
  *((_OWORD *)v37 + 1) = unk_2246B9D28;
  unint64_t v128 = (uint64_t *)v37;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, &v128);
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_1graph_conv_tcn_batch_norm_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual1_transpose1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 16, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_1graph_conv_tcn_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_1graph_conv_tcn_batch_norm_0");
  turi::neural_net::model_spec::add_relu(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual1_pad");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_1graph_conv_tcn_relu_0");
  turi::neural_net::model_spec::add_padding(v11, (std::string *)v263, &v154, 4, 4, 0, 0, 2);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_1graph_conv_tcn_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual1_pad");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x90uLL, 0x90uLL, (uint64_t)__dst);
    uint64_t v38 = &unk_26D755798;
    long long v241 = v149;
  }
  else
  {
    uint64_t v38 = &unk_26D755828;
  }
  v240 = v38;
  v242 = &v240;
  v239[0] = &unk_26D755828;
  v239[3] = v239;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 16, 16, 9, 1, 1, 1, 0, (uint64_t)&v240, (uint64_t)v239);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v239);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v240);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_1graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_1graph_conv_tcn_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 16, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_1residual_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_0_relu_0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 8uLL, 0x10uLL, (uint64_t)__dst);
    uint64_t v39 = &unk_26D755798;
    long long v237 = v149;
  }
  else
  {
    uint64_t v39 = &unk_26D755828;
  }
  v236 = v39;
  uint64_t v238 = &v236;
  v235[0] = &unk_26D755828;
  v235[3] = v235;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 16, 8, 1, 1, 1, 1, 0, (uint64_t)&v236, (uint64_t)v235);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v235);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v236);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_1residual_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_1residual_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 16, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual1_add_broadcastable0");
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_1graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "stgcn_action_stgcn_1residual_batch_norm_1");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x30uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 48;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[48], (std::string *)v149);
  turi::neural_net::model_spec::add_add_broadcastable(v11, &v154, (std::string **)&v149);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (uint64_t m = 0; m != -48; m -= 24)
  {
    if ((char)v263[m + 47] < 0) {
      operator delete(*(void **)&v263[m + 24]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_1_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual1_add_broadcastable0");
  turi::neural_net::model_spec::add_relu(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_2graph_conv_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_1_relu_0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x10uLL, 0x60uLL, (uint64_t)__dst);
    unsigned int v41 = &unk_26D755798;
    long long v233 = v149;
  }
  else
  {
    unsigned int v41 = &unk_26D755828;
  }
  uint64_t v232 = v41;
  double v234 = &v232;
  v231[0] = &unk_26D755828;
  v231[3] = v231;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 96, 16, 1, 1, 1, 1, 0, (uint64_t)&v232, (uint64_t)v231);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v231);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v232);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual2_split0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_2graph_conv_conv_1");
  uint64_t v42 = operator new(0x18uLL);
  *((void *)&v149 + 1) = v42 + 3;
  v150[0] = v42 + 3;
  v42[2] = 32;
  *(_OWORD *)uint64_t v42 = xmmword_2246B9CB8;
  *(void *)&long long v149 = v42;
  turi::neural_net::model_spec::add_split_nd(v11, (uint64_t)v263, &v154, 1, 3, (uint64_t **)&v149);
  if ((void)v149)
  {
    *((void *)&v149 + 1) = v149;
    operator delete((void *)v149);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual2_concat0");
  std::string::basic_string[abi:ne180100]<0>(v263, "residual2_split0_0");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "residual2_split0_1");
  std::string::basic_string[abi:ne180100]<0>(&v263[48], "residual2_split0_2");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x48uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 72;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[72], (std::string *)v149);
  turi::neural_net::model_spec::add_concat_nd(v11, &v154, (std::string **)&v149, 3);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (uint64_t n = 0; n != -72; n -= 24)
  {
    if ((char)v263[n + 71] < 0) {
      operator delete(*(void **)&v263[n + 48]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual2_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual2_concat0");
  unint64_t v44 = (char *)operator new(0x20uLL);
  v126 = (uint64_t *)(v44 + 32);
  v127 = v44 + 32;
  *(_OWORD *)unint64_t v44 = xmmword_2246B9D18;
  *((_OWORD *)v44 + 1) = unk_2246B9D28;
  unsigned int v125 = (uint64_t *)v44;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, &v125);
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_2graph_conv_conv_2");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual2_transpose0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, v16, v96, (uint64_t)__dst);
    unint64_t v45 = &unk_26D755798;
    long long v229 = v149;
  }
  else
  {
    unint64_t v45 = &unk_26D755828;
  }
  v230 = &v228;
  v227[3] = 0;
  double v228 = v45;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, v96, v16, 1, 1, 1, 1, 0, (uint64_t)&v228, (uint64_t)v227);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v227);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v228);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual2_transpose1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_2graph_conv_conv_2");
  uint64_t v46 = (char *)operator new(0x20uLL);
  double v123 = (uint64_t *)(v46 + 32);
  unsigned int v124 = v46 + 32;
  *(_OWORD *)uint64_t v46 = xmmword_2246B9D18;
  *((_OWORD *)v46 + 1) = unk_2246B9D28;
  double v122 = (uint64_t *)v46;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, &v122);
  if (v122)
  {
    double v123 = v122;
    operator delete(v122);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_2graph_conv_tcn_batch_norm_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual2_transpose1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 32, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_2graph_conv_tcn_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_2graph_conv_tcn_batch_norm_0");
  turi::neural_net::model_spec::add_relu(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual2_pad");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_2graph_conv_tcn_relu_0");
  turi::neural_net::model_spec::add_padding(v11, (std::string *)v263, &v154, 4, 4, 0, 0, 2);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_2graph_conv_tcn_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual2_pad");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x120uLL, 0x120uLL, (uint64_t)__dst);
    uint64_t v47 = &unk_26D755798;
    long long v225 = v149;
  }
  else
  {
    uint64_t v47 = &unk_26D755828;
  }
  uint64_t v224 = v47;
  uint64_t v226 = &v224;
  v223[0] = &unk_26D755828;
  v223[3] = v223;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 32, 32, 9, 1, 1, 1, 0, (uint64_t)&v224, (uint64_t)v223);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v223);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v224);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_2graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_2graph_conv_tcn_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 32, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_2residual_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_1_relu_0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x10uLL, 0x20uLL, (uint64_t)__dst);
    uint64_t v48 = &unk_26D755798;
    long long v221 = v149;
  }
  else
  {
    uint64_t v48 = &unk_26D755828;
  }
  unint64_t v220 = v48;
  v222 = &v220;
  v219[0] = &unk_26D755828;
  v219[3] = v219;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 32, 16, 1, 1, 1, 1, 0, (uint64_t)&v220, (uint64_t)v219);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v219);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v220);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_2residual_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_2residual_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 32, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual2_add_broadcastable0");
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_2graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "stgcn_action_stgcn_2residual_batch_norm_1");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x30uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 48;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[48], (std::string *)v149);
  turi::neural_net::model_spec::add_add_broadcastable(v11, &v154, (std::string **)&v149);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (iuint64_t i = 0; ii != -48; ii -= 24)
  {
    if ((char)v263[ii + 47] < 0) {
      operator delete(*(void **)&v263[ii + 24]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_2_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual2_add_broadcastable0");
  turi::neural_net::model_spec::add_relu(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_3graph_conv_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_2_relu_0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x20uLL, 0xC0uLL, (uint64_t)__dst);
    uint64_t v50 = &unk_26D755798;
    long long v217 = v149;
  }
  else
  {
    uint64_t v50 = &unk_26D755828;
  }
  uint64_t v216 = v50;
  uint64_t v218 = &v216;
  v215[0] = &unk_26D755828;
  v215[3] = v215;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 192, 32, 1, 1, 1, 1, 0, (uint64_t)&v216, (uint64_t)v215);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v215);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v216);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual3_split0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_3graph_conv_conv_1");
  uint64_t v51 = operator new(0x18uLL);
  *((void *)&v149 + 1) = v51 + 3;
  v150[0] = v51 + 3;
  v51[2] = 64;
  *(_OWORD *)uint64_t v51 = xmmword_2246B9CD0;
  *(void *)&long long v149 = v51;
  turi::neural_net::model_spec::add_split_nd(v11, (uint64_t)v263, &v154, 1, 3, (uint64_t **)&v149);
  if ((void)v149)
  {
    *((void *)&v149 + 1) = v149;
    operator delete((void *)v149);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual3_concat0");
  std::string::basic_string[abi:ne180100]<0>(v263, "residual3_split0_0");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "residual3_split0_1");
  std::string::basic_string[abi:ne180100]<0>(&v263[48], "residual3_split0_2");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x48uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 72;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[72], (std::string *)v149);
  turi::neural_net::model_spec::add_concat_nd(v11, &v154, (std::string **)&v149, 3);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (juint64_t j = 0; jj != -72; jj -= 24)
  {
    if ((char)v263[jj + 71] < 0) {
      operator delete(*(void **)&v263[jj + 48]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual3_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual3_concat0");
  uint64_t v53 = (char *)operator new(0x20uLL);
  uint64_t v120 = (uint64_t *)(v53 + 32);
  unint64_t v121 = v53 + 32;
  *(_OWORD *)uint64_t v53 = xmmword_2246B9D18;
  *((_OWORD *)v53 + 1) = unk_2246B9D28;
  uint64_t v119 = (uint64_t *)v53;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, &v119);
  if (v119)
  {
    uint64_t v120 = v119;
    operator delete(v119);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_3graph_conv_conv_2");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual3_transpose0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, v16, v96, (uint64_t)__dst);
    uint64_t v54 = &unk_26D755798;
    long long v213 = v149;
  }
  else
  {
    uint64_t v54 = &unk_26D755828;
  }
  v214 = &v212;
  v211[3] = 0;
  uint64_t v212 = v54;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, v96, v16, 1, 1, 1, 1, 0, (uint64_t)&v212, (uint64_t)v211);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v211);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v212);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual3_transpose1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_3graph_conv_conv_2");
  double v55 = (char *)operator new(0x20uLL);
  unint64_t v117 = (uint64_t *)(v55 + 32);
  v118 = v55 + 32;
  *(_OWORD *)double v55 = xmmword_2246B9D18;
  *((_OWORD *)v55 + 1) = unk_2246B9D28;
  v116 = (uint64_t *)v55;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, &v116);
  if (v116)
  {
    unint64_t v117 = v116;
    operator delete(v116);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_3graph_conv_tcn_batch_norm_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual3_transpose1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 64, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_3graph_conv_tcn_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_3graph_conv_tcn_batch_norm_0");
  turi::neural_net::model_spec::add_relu(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual3_pad");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_3graph_conv_tcn_relu_0");
  turi::neural_net::model_spec::add_padding(v11, (std::string *)v263, &v154, 4, 4, 0, 0, 2);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_3graph_conv_tcn_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual3_pad");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x240uLL, 0x240uLL, (uint64_t)__dst);
    unint64_t v56 = &unk_26D755798;
    long long v209 = v149;
  }
  else
  {
    unint64_t v56 = &unk_26D755828;
  }
  v208 = v56;
  int v210 = &v208;
  v207[0] = &unk_26D755828;
  v207[3] = v207;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 64, 64, 9, 1, 2, 1, 0, (uint64_t)&v208, (uint64_t)v207);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v207);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v208);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_3graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_3graph_conv_tcn_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 64, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_3residual_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_2_relu_0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x20uLL, 0x40uLL, (uint64_t)__dst);
    unint64_t v57 = &unk_26D755798;
    long long v205 = v149;
  }
  else
  {
    unint64_t v57 = &unk_26D755828;
  }
  double v204 = v57;
  unsigned int v206 = &v204;
  v203[0] = &unk_26D755828;
  v203[3] = v203;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 64, 32, 1, 1, 2, 1, 0, (uint64_t)&v204, (uint64_t)v203);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v203);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v204);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_3residual_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_3residual_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 64, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual3_add_broadcastable0");
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_3graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "stgcn_action_stgcn_3residual_batch_norm_1");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x30uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 48;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[48], (std::string *)v149);
  turi::neural_net::model_spec::add_add_broadcastable(v11, &v154, (std::string **)&v149);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (kuint64_t k = 0; kk != -48; kk -= 24)
  {
    if ((char)v263[kk + 47] < 0) {
      operator delete(*(void **)&v263[kk + 24]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_3_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual3_add_broadcastable0");
  turi::neural_net::model_spec::add_relu(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_4graph_conv_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_3_relu_0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x40uLL, 0xC0uLL, (uint64_t)__dst);
    uint64_t v59 = &unk_26D755798;
    long long v201 = v149;
  }
  else
  {
    uint64_t v59 = &unk_26D755828;
  }
  v200 = v59;
  uint64_t v202 = &v200;
  v199[0] = &unk_26D755828;
  v199[3] = v199;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 192, 64, 1, 1, 1, 1, 0, (uint64_t)&v200, (uint64_t)v199);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v199);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v200);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual4_split0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_4graph_conv_conv_1");
  uint64_t v60 = operator new(0x18uLL);
  *((void *)&v149 + 1) = v60 + 3;
  v150[0] = v60 + 3;
  v60[2] = 64;
  *(_OWORD *)uint64_t v60 = xmmword_2246B9CD0;
  *(void *)&long long v149 = v60;
  turi::neural_net::model_spec::add_split_nd(v11, (uint64_t)v263, &v154, 1, 3, (uint64_t **)&v149);
  if ((void)v149)
  {
    *((void *)&v149 + 1) = v149;
    operator delete((void *)v149);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual4_concat0");
  std::string::basic_string[abi:ne180100]<0>(v263, "residual4_split0_0");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "residual4_split0_1");
  std::string::basic_string[abi:ne180100]<0>(&v263[48], "residual4_split0_2");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x48uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 72;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[72], (std::string *)v149);
  turi::neural_net::model_spec::add_concat_nd(v11, &v154, (std::string **)&v149, 3);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (muint64_t m = 0; mm != -72; mm -= 24)
  {
    if ((char)v263[mm + 71] < 0) {
      operator delete(*(void **)&v263[mm + 48]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual4_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual4_concat0");
  double v62 = operator new(0x20uLL);
  long long __p = v62;
  _OWORD *v62 = xmmword_2246B9D18;
  v62[1] = unk_2246B9D28;
  unsigned int v114 = v62 + 2;
  v115 = v62 + 2;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, (uint64_t **)&__p);
  if (__p)
  {
    unsigned int v114 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_4graph_conv_conv_2");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual4_transpose0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, v16, v96, (uint64_t)__dst);
    uint64_t v63 = &unk_26D755798;
    long long v197 = v149;
  }
  else
  {
    uint64_t v63 = &unk_26D755828;
  }
  unsigned int v198 = &v196;
  v195[3] = 0;
  uint64_t v196 = v63;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, v96, v16, 1, 1, 1, 1, 0, (uint64_t)&v196, (uint64_t)v195);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v195);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v196);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual4_transpose1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_4graph_conv_conv_2");
  unint64_t v64 = operator new(0x20uLL);
  uint64_t v111 = v64 + 2;
  uint64_t v112 = v64 + 2;
  *unint64_t v64 = xmmword_2246B9D18;
  v64[1] = unk_2246B9D28;
  unsigned int v110 = v64;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, (uint64_t **)&v110);
  if (v110)
  {
    uint64_t v111 = v110;
    operator delete(v110);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_4graph_conv_tcn_batch_norm_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual4_transpose1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 64, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_4graph_conv_tcn_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_4graph_conv_tcn_batch_norm_0");
  turi::neural_net::model_spec::add_relu(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual4_pad");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_4graph_conv_tcn_relu_0");
  turi::neural_net::model_spec::add_padding(v11, (std::string *)v263, &v154, 4, 4, 0, 0, 2);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_4graph_conv_tcn_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual4_pad");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x240uLL, 0x240uLL, (uint64_t)__dst);
    uint64_t v65 = &unk_26D755798;
    long long v193 = v149;
  }
  else
  {
    uint64_t v65 = &unk_26D755828;
  }
  uint64_t v192 = v65;
  unsigned int v194 = &v192;
  v191[0] = &unk_26D755828;
  v191[3] = v191;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 64, 64, 9, 1, 1, 1, 0, (uint64_t)&v192, (uint64_t)v191);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v191);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v192);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_4graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_4graph_conv_tcn_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 64, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual4_add_broadcastable0");
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_4graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "stgcn_action_stgcn_3_relu_0");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x30uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 48;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[48], (std::string *)v149);
  turi::neural_net::model_spec::add_add_broadcastable(v11, &v154, (std::string **)&v149);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (nuint64_t n = 0; nn != -48; nn -= 24)
  {
    if ((char)v263[nn + 47] < 0) {
      operator delete(*(void **)&v263[nn + 24]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_4_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual4_add_broadcastable0");
  turi::neural_net::model_spec::add_relu(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_5graph_conv_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_4_relu_0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x40uLL, 0x180uLL, (uint64_t)__dst);
    uint64_t v67 = &unk_26D755798;
    long long v189 = v149;
  }
  else
  {
    uint64_t v67 = &unk_26D755828;
  }
  v188 = v67;
  uint64_t v190 = &v188;
  v187[0] = &unk_26D755828;
  v187[3] = v187;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 384, 64, 1, 1, 1, 1, 0, (uint64_t)&v188, (uint64_t)v187);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v187);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v188);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual5_split0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_5graph_conv_conv_1");
  unint64_t v68 = operator new(0x18uLL);
  *((void *)&v149 + 1) = v68 + 3;
  v150[0] = v68 + 3;
  v68[2] = 128;
  *(_OWORD *)unint64_t v68 = xmmword_2246B9CE8;
  *(void *)&long long v149 = v68;
  turi::neural_net::model_spec::add_split_nd(v11, (uint64_t)v263, &v154, 1, 3, (uint64_t **)&v149);
  if ((void)v149)
  {
    *((void *)&v149 + 1) = v149;
    operator delete((void *)v149);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual5_concat0");
  std::string::basic_string[abi:ne180100]<0>(v263, "residual5_split0_0");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "residual5_split0_1");
  std::string::basic_string[abi:ne180100]<0>(&v263[48], "residual5_split0_2");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x48uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 72;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[72], (std::string *)v149);
  turi::neural_net::model_spec::add_concat_nd(v11, &v154, (std::string **)&v149, 3);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (uint64_t i1 = 0; i1 != -72; i1 -= 24)
  {
    if ((char)v263[i1 + 71] < 0) {
      operator delete(*(void **)&v263[i1 + 48]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual5_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual5_concat0");
  unint64_t v70 = operator new(0x20uLL);
  uint64_t v108 = v70 + 2;
  size_t v109 = v70 + 2;
  *unint64_t v70 = xmmword_2246B9D18;
  v70[1] = unk_2246B9D28;
  uint64_t v107 = v70;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, (uint64_t **)&v107);
  if (v107)
  {
    uint64_t v108 = v107;
    operator delete(v107);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_5graph_conv_conv_2");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual5_transpose0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, v16, v96, (uint64_t)__dst);
    unint64_t v71 = &unk_26D755798;
    long long v185 = v149;
  }
  else
  {
    unint64_t v71 = &unk_26D755828;
  }
  uint64_t v186 = &v184;
  v183[3] = 0;
  uint64_t v184 = v71;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, v96, v16, 1, 1, 1, 1, 0, (uint64_t)&v184, (uint64_t)v183);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v183);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v184);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual5_transpose1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_5graph_conv_conv_2");
  unint64_t v72 = operator new(0x20uLL);
  double v105 = v72 + 2;
  unsigned int v106 = v72 + 2;
  *unint64_t v72 = xmmword_2246B9D18;
  v72[1] = unk_2246B9D28;
  uint64_t v104 = v72;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, (uint64_t **)&v104);
  if (v104)
  {
    double v105 = v104;
    operator delete(v104);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_5graph_conv_tcn_batch_norm_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual5_transpose1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 128, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_5graph_conv_tcn_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_5graph_conv_tcn_batch_norm_0");
  turi::neural_net::model_spec::add_relu(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual5_pad");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_5graph_conv_tcn_relu_0");
  turi::neural_net::model_spec::add_padding(v11, (std::string *)v263, &v154, 4, 4, 0, 0, 2);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_5graph_conv_tcn_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual5_pad");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x480uLL, 0x480uLL, (uint64_t)__dst);
    double v73 = &unk_26D755798;
    long long v181 = v149;
  }
  else
  {
    double v73 = &unk_26D755828;
  }
  v180 = v73;
  unint64_t v182 = &v180;
  v179[0] = &unk_26D755828;
  v179[3] = v179;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 128, 128, 9, 1, 2, 1, 0, (uint64_t)&v180, (uint64_t)v179);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v179);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v180);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_5graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_5graph_conv_tcn_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 128, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_5residual_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_4_relu_0");
  v178[0] = &unk_26D755828;
  v178[3] = v178;
  v177[0] = &unk_26D755828;
  v177[3] = v177;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 128, 64, 1, 1, 2, 1, 0, (uint64_t)v178, (uint64_t)v177);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v177);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v178);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_5residual_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_5residual_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 128, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual5_add_broadcastable0");
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_5graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "stgcn_action_stgcn_5residual_batch_norm_1");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x30uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 48;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[48], (std::string *)v149);
  turi::neural_net::model_spec::add_add_broadcastable(v11, &v154, (std::string **)&v149);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (uint64_t i2 = 0; i2 != -48; i2 -= 24)
  {
    if ((char)v263[i2 + 47] < 0) {
      operator delete(*(void **)&v263[i2 + 24]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_5_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual5_add_broadcastable0");
  turi::neural_net::model_spec::add_relu(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_6graph_conv_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_5_relu_0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x80uLL, 0x300uLL, (uint64_t)__dst);
    uint64_t v75 = &unk_26D755798;
    long long v175 = v149;
  }
  else
  {
    uint64_t v75 = &unk_26D755828;
  }
  v174 = v75;
  uint64_t v176 = &v174;
  v173[0] = &unk_26D755828;
  v173[3] = v173;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 768, 128, 1, 1, 1, 1, 0, (uint64_t)&v174, (uint64_t)v173);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v173);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v174);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual6_split0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_6graph_conv_conv_1");
  char v76 = operator new(0x18uLL);
  *((void *)&v149 + 1) = v76 + 3;
  v150[0] = v76 + 3;
  v76[2] = 256;
  *(_OWORD *)char v76 = xmmword_2246B9D00;
  *(void *)&long long v149 = v76;
  turi::neural_net::model_spec::add_split_nd(v11, (uint64_t)v263, &v154, 1, 3, (uint64_t **)&v149);
  if ((void)v149)
  {
    *((void *)&v149 + 1) = v149;
    operator delete((void *)v149);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual6_concat0");
  std::string::basic_string[abi:ne180100]<0>(v263, "residual6_split0_0");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "residual6_split0_1");
  std::string::basic_string[abi:ne180100]<0>(&v263[48], "residual6_split0_2");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x48uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 72;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[72], (std::string *)v149);
  turi::neural_net::model_spec::add_concat_nd(v11, &v154, (std::string **)&v149, 3);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (uint64_t i3 = 0; i3 != -72; i3 -= 24)
  {
    if ((char)v263[i3 + 71] < 0) {
      operator delete(*(void **)&v263[i3 + 48]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual6_transpose0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual6_concat0");
  size_t v78 = operator new(0x20uLL);
  uint64_t v102 = v78 + 2;
  int v103 = v78 + 2;
  *size_t v78 = xmmword_2246B9D18;
  v78[1] = unk_2246B9D28;
  int v101 = v78;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, (uint64_t **)&v101);
  if (v101)
  {
    uint64_t v102 = v101;
    operator delete(v101);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_6graph_conv_conv_2");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual6_transpose0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, v16, v96, (uint64_t)__dst);
    int v79 = &unk_26D755798;
    long long v171 = v149;
  }
  else
  {
    int v79 = &unk_26D755828;
  }
  v172 = &v170;
  v169[3] = 0;
  unsigned int v170 = v79;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, v96, v16, 1, 1, 1, 1, 0, (uint64_t)&v170, (uint64_t)v169);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v169);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v170);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual6_transpose1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_6graph_conv_conv_2");
  int v80 = operator new(0x20uLL);
  int v99 = v80 + 2;
  v100 = v80 + 2;
  *int v80 = xmmword_2246B9D18;
  v80[1] = unk_2246B9D28;
  char v98 = v80;
  turi::neural_net::model_spec::add_transpose(v11, (std::string *)v263, &v154, (uint64_t **)&v98);
  if (v98)
  {
    int v99 = v98;
    operator delete(v98);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_6graph_conv_tcn_batch_norm_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual6_transpose1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 256, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_6graph_conv_tcn_relu_0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_6graph_conv_tcn_batch_norm_0");
  turi::neural_net::model_spec::add_relu(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "residual6_pad");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_6graph_conv_tcn_relu_0");
  turi::neural_net::model_spec::add_padding(v11, (std::string *)v263, &v154, 4, 4, 0, 0, 2);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_6graph_conv_tcn_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual6_pad");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x900uLL, 0x900uLL, (uint64_t)__dst);
    int v81 = &unk_26D755798;
    long long v167 = v149;
  }
  else
  {
    int v81 = &unk_26D755828;
  }
  v166 = v81;
  long long v168 = &v166;
  v165[0] = &unk_26D755828;
  v165[3] = v165;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 256, 256, 9, 1, 1, 1, 0, (uint64_t)&v166, (uint64_t)v165);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v165);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v166);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_6graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_6graph_conv_tcn_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 256, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_6residual_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_5_relu_0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x80uLL, 0x100uLL, (uint64_t)__dst);
    int v82 = &unk_26D755798;
    long long v163 = v149;
  }
  else
  {
    int v82 = &unk_26D755828;
  }
  v162 = v82;
  long long v164 = &v162;
  v161[0] = &unk_26D755828;
  v161[3] = v161;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, 256, 128, 1, 1, 1, 1, 0, (uint64_t)&v162, (uint64_t)v161);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v161);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v162);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_6residual_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_stgcn_6residual_conv_1");
  turi::neural_net::model_spec::add_batchnorm(v11, (std::string *)v263, &v154, 256, 0.00001);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual6_add_broadcastable0");
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_stgcn_6graph_conv_tcn_batch_norm_1");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "stgcn_action_stgcn_6residual_batch_norm_1");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x30uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 48;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[48], (std::string *)v149);
  turi::neural_net::model_spec::add_add_broadcastable(v11, &v154, (std::string **)&v149);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (uint64_t i4 = 0; i4 != -48; i4 -= 24)
  {
    if ((char)v263[i4 + 47] < 0) {
      operator delete(*(void **)&v263[i4 + 24]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "decode_activation0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "residual6_add_broadcastable0");
  turi::neural_net::model_spec::add_relu(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "decode_pooling0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "decode_activation0");
  uint64_t v84 = (int)vcvtpd_s64_f64((double)v95 * 0.25);
  turi::neural_net::model_spec::add_pooling(v11, (std::string *)v263, &v154, v84, v96, v84, v96, 0, 1, 1u);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v154, "decode_pooling0");
  if (v3)
  {
    turi::neural_net::xavier_weight_initializer::xavier_weight_initializer((uint64_t)&v149, 0x100uLL, v9, (uint64_t)__dst);
    int v85 = &unk_26D755798;
    long long v159 = v149;
  }
  else
  {
    int v85 = &unk_26D755828;
  }
  uint64_t v158 = v85;
  unsigned int v160 = &v158;
  v157[0] = &unk_26D755828;
  v157[3] = v157;
  turi::neural_net::model_spec::add_convolution(v11, (std::string *)v263, &v154, v9, 256, 1, 1, 1, 1, 0, (uint64_t)&v158, (uint64_t)v157);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v157);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v158);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "decode_constant0");
  uint64_t v86 = operator new(8uLL);
  *(void *)&long long v149 = v86;
  *uint64_t v86 = 1;
  *((void *)&v149 + 1) = v86 + 1;
  v150[0] = v86 + 1;
  *(void *)uint64_t v263 = &unk_26D755828;
  *(void *)&v263[24] = v263;
  turi::neural_net::model_spec::add_constant_nd(v11, &v154, (uint64_t *)&v149, (uint64_t)v263);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v263);
  if ((void)v149)
  {
    *((void *)&v149 + 1) = v149;
    operator delete((void *)v149);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "decode_getshape0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "stgcn_action_conv_1");
  turi::neural_net::model_spec::add_get_shape(v11, (std::string *)v263, &v154);
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "decode_gather0");
  std::string::basic_string[abi:ne180100]<0>(v263, "decode_getshape0");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "decode_constant0");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x30uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 48;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[48], (std::string *)v149);
  turi::neural_net::model_spec::add_gather(v11, &v154, (std::string **)&v149);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (uint64_t i5 = 0; i5 != -48; i5 -= 24)
  {
    if ((char)v263[i5 + 47] < 0) {
      operator delete(*(void **)&v263[i5 + 24]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "decode_expand_dims0");
  std::string::basic_string[abi:ne180100]<0>(&v154, "decode_gather0");
  uint64_t v88 = operator new(8uLL);
  *(void *)&long long v149 = v88;
  *uint64_t v88 = 0;
  *((void *)&v149 + 1) = v88 + 1;
  v150[0] = v88 + 1;
  v89 = (void **)operator new(8uLL);
  double v146 = v89;
  void *v89 = (void *)v9;
  uint64_t v147 = v89 + 1;
  BOOL v148 = v89 + 1;
  uint64_t v90 = (int64x2_t *)operator new(0x10uLL);
  double v144 = (unint64_t *)&v90[1];
  i64 = v90[1].i64;
  v90->i64[0] = 1;
  v90->i64[1] = v9;
  unsigned int v143 = v90;
  turi::neural_net::model_spec::add_expand_dims(v11, (std::string *)v263, &v154, (uint64_t *)&v149, (uint64_t *)&v146, (uint64_t *)&v143);
  if (v143)
  {
    double v144 = (unint64_t *)v143;
    operator delete(v143);
  }
  if (v146)
  {
    uint64_t v147 = v146;
    operator delete(v146);
  }
  if ((void)v149)
  {
    *((void *)&v149 + 1) = v149;
    operator delete((void *)v149);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "decode_constant1");
  unint64_t v91 = operator new(8uLL);
  *(void *)&long long v149 = v91;
  *unint64_t v91 = 1;
  *((void *)&v149 + 1) = v91 + 1;
  v150[0] = v91 + 1;
  turi::neural_net::scalar_weight_initializer::scalar_weight_initializer((float *)&v97, -1.0);
  *(void *)uint64_t v263 = &unk_26D7558A8;
  *(_DWORD *)&v263[8] = v97;
  *(void *)&v263[24] = v263;
  turi::neural_net::model_spec::add_constant_nd(v11, &v154, (uint64_t *)&v149, (uint64_t)v263);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v263);
  if ((void)v149)
  {
    *((void *)&v149 + 1) = v149;
    operator delete((void *)v149);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "decode_concat0");
  std::string::basic_string[abi:ne180100]<0>(v263, "decode_expand_dims0");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "decode_constant1");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x30uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 48;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[48], (std::string *)v149);
  turi::neural_net::model_spec::add_concat_nd(v11, &v154, (std::string **)&v149, 0);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (uint64_t i6 = 0; i6 != -48; i6 -= 24)
  {
    if ((char)v263[i6 + 47] < 0) {
      operator delete(*(void **)&v263[i6 + 24]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v154, "decode_reshape0");
  std::string::basic_string[abi:ne180100]<0>(v263, "stgcn_action_conv_1");
  std::string::basic_string[abi:ne180100]<0>(&v263[24], "decode_concat0");
  long long v149 = 0uLL;
  v150[0] = 0;
  double v146 = (void **)&v149;
  LOBYTE(v147) = 0;
  *(void *)&long long v149 = operator new(0x30uLL);
  *((void *)&v149 + 1) = v149;
  v150[0] = v149 + 48;
  *((void *)&v149 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v150, (long long *)v263, (long long *)&v263[48], (std::string *)v149);
  turi::neural_net::model_spec::add_reshape_dynamic(v11, &v154, (std::string **)&v149);
  double v146 = (void **)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v146);
  for (uint64_t i7 = 0; i7 != -48; i7 -= 24)
  {
    if ((char)v263[i7 + 47] < 0) {
      operator delete(*(void **)&v263[i7 + 24]);
    }
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v263, "decode_reshape0");
  turi::neural_net::model_spec::add_softmax(v11, v94, (std::string *)v263);
  if ((v263[23] & 0x80000000) != 0) {
    operator delete(*(void **)v263);
  }
  if (v155[0])
  {
    v155[1] = v155[0];
    operator delete(v155[0]);
  }
}

void sub_223E4DBB4(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete(*(void **)(v1 + 344));
  }
  if (*(char *)(v2 + 183) < 0) {
    operator delete(*(void **)(v2 + 160));
  }
  unint64_t v4 = *(void **)(v1 + 368);
  if (v4)
  {
    *(void *)(v1 + 376) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_223E4EB1C()
{
}

void sub_223E4EB24()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1310]) {
      JUMPOUT(0x223E4E9B4);
    }
  }
}

void sub_223E4EB50()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1310]) {
      JUMPOUT(0x223E4E9B4);
    }
  }
}

void sub_223E4EB7C()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1310]) {
      JUMPOUT(0x223E4E9B4);
    }
  }
}

void sub_223E4EBA8()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1310]) {
      JUMPOUT(0x223E4E9B4);
    }
  }
}

void sub_223E4EBD4()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1310]) {
      JUMPOUT(0x223E4E9B4);
    }
  }
}

void sub_223E4EC00()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1310]) {
      JUMPOUT(0x223E4E9B4);
    }
  }
}

void sub_223E4EC2C()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1310]) {
      JUMPOUT(0x223E4E9B4);
    }
  }
}

void std::__function::__func<turi::neural_net::xavier_weight_initializer,std::allocator<turi::neural_net::xavier_weight_initializer>,void ()(float *,float *)>::~__func()
{
}

__n128 std::__function::__func<turi::neural_net::xavier_weight_initializer,std::allocator<turi::neural_net::xavier_weight_initializer>,void ()(float *,float *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D755798;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::neural_net::xavier_weight_initializer,std::allocator<turi::neural_net::xavier_weight_initializer>,void ()(float *,float *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D755798;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::neural_net::xavier_weight_initializer,std::allocator<turi::neural_net::xavier_weight_initializer>,void ()(float *,float *)>::operator()(uint64_t a1, float **a2, float **a3)
{
  return turi::neural_net::xavier_weight_initializer::operator()(a1 + 8, *a2, *a3);
}

uint64_t std::__function::__func<turi::neural_net::xavier_weight_initializer,std::allocator<turi::neural_net::xavier_weight_initializer>,void ()(float *,float *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<turi::neural_net::xavier_weight_initializer,std::allocator<turi::neural_net::xavier_weight_initializer>,void ()(float *,float *)>::target_type()
{
}

void std::__function::__func<turi::neural_net::zero_weight_initializer,std::allocator<turi::neural_net::zero_weight_initializer>,void ()(float *,float *)>::~__func()
{
}

void *std::__function::__func<turi::neural_net::zero_weight_initializer,std::allocator<turi::neural_net::zero_weight_initializer>,void ()(float *,float *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D755828;
  return result;
}

void std::__function::__func<turi::neural_net::zero_weight_initializer,std::allocator<turi::neural_net::zero_weight_initializer>,void ()(float *,float *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D755828;
}

uint64_t std::__function::__func<turi::neural_net::zero_weight_initializer,std::allocator<turi::neural_net::zero_weight_initializer>,void ()(float *,float *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<turi::neural_net::zero_weight_initializer,std::allocator<turi::neural_net::zero_weight_initializer>,void ()(float *,float *)>::target_type()
{
}

void *std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

_DWORD *std::__function::__func<turi::neural_net::scalar_weight_initializer,std::allocator<turi::neural_net::scalar_weight_initializer>,void ()(float *,float *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_26D7558A8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<turi::neural_net::scalar_weight_initializer,std::allocator<turi::neural_net::scalar_weight_initializer>,void ()(float *,float *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D7558A8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

float std::__function::__func<turi::neural_net::scalar_weight_initializer,std::allocator<turi::neural_net::scalar_weight_initializer>,void ()(float *,float *)>::operator()(uint64_t a1, _DWORD **a2, _DWORD **a3)
{
  return turi::neural_net::scalar_weight_initializer::operator()((float *)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<turi::neural_net::scalar_weight_initializer,std::allocator<turi::neural_net::scalar_weight_initializer>,void ()(float *,float *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<turi::neural_net::scalar_weight_initializer,std::allocator<turi::neural_net::scalar_weight_initializer>,void ()(float *,float *)>::target_type()
{
}

void CoreML::validateSizeRange(CoreML *this@<X0>, CoreML::Result *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 3);
  if (v4 < 1 || (unint64_t v6 = *((void *)this + 2), v6 <= v4))
  {
    CoreML::Result::Result(a2);
  }
  else
  {
    std::to_string(&v18, v6);
    unint64_t v7 = std::string::insert(&v18, 0, "Size range is invalid (");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    unint64_t v9 = std::string::append(&v19, ", ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *((void *)this + 3));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    unsigned int v13 = std::string::append(&v20, (const std::string::value_type *)p_p, size);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::string v15 = std::string::append(&v21, ").");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v15->__r_.__value_.__r.__words[2];
    long long v22 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a2, 12);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)v22);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
}

void sub_223E507CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateFeatureDescription(CoreML *this@<X0>, const CoreML::Specification::FeatureDescription *a2@<X1>, int a3@<W2>, CoreML::Result *a4@<X8>)
{
  int v4 = (int)a2;
  uint64_t v6 = *((void *)this + 2);
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v6 + 23)) {
      goto LABEL_3;
    }
LABEL_14:
    std::string::basic_string[abi:ne180100]<0>(v224, "Feature description must have a non-empty name.");
    CoreML::Result::Result(a4, 12);
    if ((v224[23] & 0x80000000) == 0) {
      return;
    }
    uint64_t v11 = *(void **)v224;
    goto LABEL_16;
  }
  if (!*(void *)(v6 + 8)) {
    goto LABEL_14;
  }
LABEL_3:
  uint64_t v7 = *((void *)this + 4);
  if (this == (CoreML *)&CoreML::Specification::_FeatureDescription_default_instance_ || v7 == 0)
  {
    std::operator+<char>();
    unint64_t v9 = std::string::append(&__p, " must specify a valid feature type.");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)&v224[16] = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v224 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a4, 12);
    goto LABEL_9;
  }
  switch(*(_DWORD *)(v7 + 36))
  {
    case 0:
      std::operator+<char>();
      unsigned int v12 = std::string::append(&__p, "'.");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      *(void *)&v224[16] = *((void *)&v12->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v224 = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result(a4, 12);
      goto LABEL_9;
    case 4:
      uint64_t v34 = *(void *)(v7 + 24);
      uint64_t v36 = *(void *)(v34 + 16);
      uint64_t v35 = *(void *)(v34 + 24);
      BOOL v38 = v36 > 0 && v35 > 0;
      if (v4 < 3) {
        goto LABEL_271;
      }
      int v39 = *(_DWORD *)(v34 + 52);
      if (v39 != 31)
      {
        if (v39 == 21)
        {
          uint64_t v40 = *(void *)(v34 + 40);
          uint64_t v41 = *(int *)(v40 + 24);
          if (!v41) {
            goto LABEL_188;
          }
          uint64_t v42 = *(void *)(v40 + 32);
          if (v38)
          {
            if (v42) {
              uint64_t v43 = v42 + 8;
            }
            else {
              uint64_t v43 = 0;
            }
            uint64_t v44 = 8 * v41;
            while (v36 != *(void *)(*(void *)v43 + 16) || v35 != *(void *)(*(void *)v43 + 24))
            {
              v43 += 8;
              v44 -= 8;
              if (!v44)
              {
                std::operator+<char>();
                unint64_t v45 = std::string::append(&v221, "' has a default size of ");
                long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
                v222.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v46;
                v45->__r_.__value_.__l.__size_ = 0;
                v45->__r_.__value_.__r.__words[2] = 0;
                v45->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v220, v36);
                if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v47 = &v220;
                }
                else {
                  uint64_t v47 = (std::string *)v220.__r_.__value_.__r.__words[0];
                }
                if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v220.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v220.__r_.__value_.__l.__size_;
                }
                uint64_t v49 = std::string::append(&v222, (const std::string::value_type *)v47, size);
                long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
                v223.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v50;
                v49->__r_.__value_.__l.__size_ = 0;
                v49->__r_.__value_.__r.__words[2] = 0;
                v49->__r_.__value_.__r.__words[0] = 0;
                uint64_t v51 = std::string::append(&v223, " × ");
                long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
                v226.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v52;
                v51->__r_.__value_.__l.__size_ = 0;
                v51->__r_.__value_.__r.__words[2] = 0;
                v51->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v219, v35);
                if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v53 = &v219;
                }
                else {
                  uint64_t v53 = (std::string *)v219.__r_.__value_.__r.__words[0];
                }
                if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v54 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v54 = v219.__r_.__value_.__l.__size_;
                }
                double v55 = std::string::append(&v226, (const std::string::value_type *)v53, v54);
                long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v56;
                v55->__r_.__value_.__l.__size_ = 0;
                v55->__r_.__value_.__r.__words[2] = 0;
                v55->__r_.__value_.__r.__words[0] = 0;
                unint64_t v57 = std::string::append(&__p, " which is not within the allowed enumerated sizes specified.");
                long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
                *(void *)&v224[16] = *((void *)&v57->__r_.__value_.__l + 2);
                *(_OWORD *)uint64_t v224 = v58;
                v57->__r_.__value_.__l.__size_ = 0;
                v57->__r_.__value_.__r.__words[2] = 0;
                v57->__r_.__value_.__r.__words[0] = 0;
                CoreML::Result::Result(a4, 12);
                goto LABEL_323;
              }
            }
          }
          else
          {
            uint64_t v152 = *(void *)(v42 + 8);
            uint64_t v36 = *(void *)(v152 + 16);
            uint64_t v35 = *(void *)(v152 + 24);
          }
        }
        goto LABEL_271;
      }
      unint64_t v95 = *(uint64_t **)(*(void *)(v34 + 40) + 16);
      unint64_t v96 = &CoreML::Specification::_SizeRange_default_instance_;
      if (v95) {
        int v97 = v95;
      }
      else {
        int v97 = &CoreML::Specification::_SizeRange_default_instance_;
      }
      CoreML::validateSizeRange((CoreML *)v97, (CoreML::Result *)v224);
      BOOL v98 = CoreML::Result::good((CoreML::Result *)v224);
      if (v98)
      {
        if (*(_DWORD *)(v7 + 36) == 4) {
          int v99 = *(uint64_t **)(v7 + 24);
        }
        else {
          int v99 = CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v98);
        }
        if (*((_DWORD *)v99 + 13) == 31) {
          uint64_t v153 = (uint64_t *)v99[5];
        }
        else {
          uint64_t v153 = CoreML::Specification::ImageFeatureType_ImageSizeRange::default_instance((CoreML::Specification::ImageFeatureType_ImageSizeRange *)v99);
        }
        if (v153[3]) {
          unint64_t v96 = (uint64_t *)v153[3];
        }
        CoreML::validateSizeRange((CoreML *)v96, (CoreML::Result *)&__p);
        *(void *)uint64_t v224 = __p.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v225) < 0) {
          operator delete(*(void **)&v224[8]);
        }
        *(_OWORD *)&v224[8] = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
        uint64_t v225 = v218;
        this = (CoreML *)CoreML::Result::good((CoreML::Result *)v224);
        if (this)
        {
          uint64_t v154 = v97[2];
          if (v38)
          {
            if (v36 < v154 || (unint64_t v155 = v97[3], (v155 & 0x8000000000000000) == 0) && v36 > v155)
            {
              std::operator+<char>();
              std::string::size_type v156 = std::string::append(&v222, "' default width ");
              long long v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
              v223.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v157;
              v156->__r_.__value_.__l.__size_ = 0;
              v156->__r_.__value_.__r.__words[2] = 0;
              v156->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v221, v36);
              if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v158 = &v221;
              }
              else {
                uint64_t v158 = (std::string *)v221.__r_.__value_.__r.__words[0];
              }
              if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v159 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v159 = v221.__r_.__value_.__l.__size_;
              }
              unsigned int v160 = std::string::append(&v223, (const std::string::value_type *)v158, v159);
              long long v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
              v226.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v161;
              v160->__r_.__value_.__l.__size_ = 0;
              v160->__r_.__value_.__r.__words[2] = 0;
              v160->__r_.__value_.__r.__words[0] = 0;
              v162 = std::string::append(&v226, " is not within specified flexible width range");
              long long v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v162->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v163;
              v162->__r_.__value_.__l.__size_ = 0;
              v162->__r_.__value_.__r.__words[2] = 0;
              v162->__r_.__value_.__r.__words[0] = 0;
              this = (CoreML *)CoreML::Result::Result(a4, 12);
LABEL_243:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v226.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v221.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v223.__r_.__value_.__l.__data_);
              }
              if ((SHIBYTE(v222.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_267;
              }
              long long v164 = (void *)v222.__r_.__value_.__r.__words[0];
LABEL_266:
              operator delete(v164);
LABEL_267:
              char v173 = 0;
              goto LABEL_268;
            }
            if (v35 < v96[2] || (v208 = v96[3], char v173 = 1, (v208 & 0x8000000000000000) == 0) && v35 > v208)
            {
              std::operator+<char>();
              long long v209 = std::string::append(&v222, "' default height ");
              long long v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
              v223.__r_.__value_.__r.__words[2] = v209->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v210;
              v209->__r_.__value_.__l.__size_ = 0;
              v209->__r_.__value_.__r.__words[2] = 0;
              v209->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v221, v35);
              if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unsigned int v211 = &v221;
              }
              else {
                unsigned int v211 = (std::string *)v221.__r_.__value_.__r.__words[0];
              }
              if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v212 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v212 = v221.__r_.__value_.__l.__size_;
              }
              long long v213 = std::string::append(&v223, (const std::string::value_type *)v211, v212);
              long long v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
              v226.__r_.__value_.__r.__words[2] = v213->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v214;
              v213->__r_.__value_.__l.__size_ = 0;
              v213->__r_.__value_.__r.__words[2] = 0;
              v213->__r_.__value_.__r.__words[0] = 0;
              v215 = std::string::append(&v226, " is not within specified flexible height range");
              long long v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v215->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v216;
              v215->__r_.__value_.__l.__size_ = 0;
              v215->__r_.__value_.__r.__words[2] = 0;
              v215->__r_.__value_.__r.__words[0] = 0;
              this = (CoreML *)CoreML::Result::Result(a4, 12);
              goto LABEL_243;
            }
          }
          else
          {
            uint64_t v35 = v96[2];
            char v173 = 1;
            uint64_t v36 = v154;
          }
LABEL_268:
          if (SHIBYTE(v225) < 0) {
            operator delete(*(void **)&v224[8]);
          }
          if ((v173 & 1) == 0) {
            return;
          }
LABEL_271:
          if (v36 <= 0)
          {
            std::operator+<char>();
            long long v175 = std::string::append(&v223, "' has missing or non-positive width ");
            long long v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
            v226.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v176;
            v175->__r_.__value_.__l.__size_ = 0;
            v175->__r_.__value_.__r.__words[2] = 0;
            v175->__r_.__value_.__r.__words[0] = 0;
            if (*(_DWORD *)(v7 + 36) == 4) {
              uint64_t v177 = *(uint64_t **)(v7 + 24);
            }
            else {
              uint64_t v177 = CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v175);
            }
            std::to_string(&v222, v177[2]);
            if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v182 = &v222;
            }
            else {
              unint64_t v182 = (std::string *)v222.__r_.__value_.__r.__words[0];
            }
            if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v183 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v183 = v222.__r_.__value_.__l.__size_;
            }
          }
          else
          {
            if (v35 > 0)
            {
              if (*(_DWORD *)(v7 + 36) == 4) {
                v174 = *(uint64_t **)(v7 + 24);
              }
              else {
                v174 = CoreML::Specification::ImageFeatureType::default_instance(this);
              }
              unsigned int v181 = *((_DWORD *)v174 + 8);
              if (v181 > 0x1E || ((1 << v181) & 0x40100400) == 0)
              {
                std::operator+<char>();
                v188 = std::string::append(&__p, "' has missing or invalid colorspace. It must be RGB, BGR or GRAYSCALE.");
                long long v189 = *(_OWORD *)&v188->__r_.__value_.__l.__data_;
                *(void *)&v224[16] = *((void *)&v188->__r_.__value_.__l + 2);
                *(_OWORD *)uint64_t v224 = v189;
                v188->__r_.__value_.__l.__size_ = 0;
                v188->__r_.__value_.__r.__words[2] = 0;
                v188->__r_.__value_.__r.__words[0] = 0;
                CoreML::Result::Result(a4, 12);
                goto LABEL_9;
              }
              goto LABEL_282;
            }
            std::operator+<char>();
            uint64_t v178 = std::string::append(&v223, "' has missing or non-positive height ");
            long long v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
            v226.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v179;
            v178->__r_.__value_.__l.__size_ = 0;
            v178->__r_.__value_.__r.__words[2] = 0;
            v178->__r_.__value_.__r.__words[0] = 0;
            if (*(_DWORD *)(v7 + 36) == 4) {
              v180 = *(uint64_t **)(v7 + 24);
            }
            else {
              v180 = CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v178);
            }
            std::to_string(&v222, v180[3]);
            if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v182 = &v222;
            }
            else {
              unint64_t v182 = (std::string *)v222.__r_.__value_.__r.__words[0];
            }
            if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v183 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v183 = v222.__r_.__value_.__l.__size_;
            }
          }
          uint64_t v184 = std::string::append(&v226, (const std::string::value_type *)v182, v183);
          long long v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v184->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v185;
          v184->__r_.__value_.__l.__size_ = 0;
          v184->__r_.__value_.__r.__words[2] = 0;
          v184->__r_.__value_.__r.__words[0] = 0;
          uint64_t v186 = std::string::append(&__p, ".");
          long long v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
          *(void *)&v224[16] = *((void *)&v186->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v224 = v187;
          v186->__r_.__value_.__l.__size_ = 0;
          v186->__r_.__value_.__r.__words[2] = 0;
          v186->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result(a4, 12);
          if ((v224[23] & 0x80000000) != 0) {
            operator delete(*(void **)v224);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
          {
            size_t v69 = (void *)v222.__r_.__value_.__r.__words[0];
            goto LABEL_303;
          }
          goto LABEL_304;
        }
        std::operator+<char>();
        uint64_t v165 = std::string::append(&v223, "' has an invalid flexible height range. ");
        long long v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
        v226.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v166;
        v165->__r_.__value_.__l.__size_ = 0;
        v165->__r_.__value_.__r.__words[2] = 0;
        v165->__r_.__value_.__r.__words[0] = 0;
        uint64_t v167 = turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)v224);
        int v168 = *(char *)(v167 + 23);
        if (v168 >= 0) {
          unsigned int v169 = (const std::string::value_type *)v167;
        }
        else {
          unsigned int v169 = *(const std::string::value_type **)v167;
        }
        if (v168 >= 0) {
          std::string::size_type v170 = *(unsigned __int8 *)(v167 + 23);
        }
        else {
          std::string::size_type v170 = *(void *)(v167 + 8);
        }
        long long v171 = std::string::append(&v226, v169, v170);
        long long v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v171->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v172;
        v171->__r_.__value_.__l.__size_ = 0;
        v171->__r_.__value_.__r.__words[2] = 0;
        v171->__r_.__value_.__r.__words[0] = 0;
        this = (CoreML *)CoreML::Result::Result(a4, 12);
      }
      else
      {
        std::operator+<char>();
        double v122 = std::string::append(&v223, "' has an invalid flexible width range. ");
        long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
        v226.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v123;
        v122->__r_.__value_.__l.__size_ = 0;
        v122->__r_.__value_.__r.__words[2] = 0;
        v122->__r_.__value_.__r.__words[0] = 0;
        uint64_t v124 = turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)v224);
        int v125 = *(char *)(v124 + 23);
        if (v125 >= 0) {
          v126 = (const std::string::value_type *)v124;
        }
        else {
          v126 = *(const std::string::value_type **)v124;
        }
        if (v125 >= 0) {
          std::string::size_type v127 = *(unsigned __int8 *)(v124 + 23);
        }
        else {
          std::string::size_type v127 = *(void *)(v124 + 8);
        }
        unint64_t v128 = std::string::append(&v226, v126, v127);
        long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v129;
        v128->__r_.__value_.__l.__size_ = 0;
        v128->__r_.__value_.__r.__words[2] = 0;
        v128->__r_.__value_.__r.__words[0] = 0;
        this = (CoreML *)CoreML::Result::Result(a4, 12);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v226.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_267;
      }
      long long v164 = (void *)v223.__r_.__value_.__r.__words[0];
      goto LABEL_266;
    case 5:
      uint64_t v14 = *(void *)(v7 + 24);
      int v15 = *(_DWORD *)(v14 + 16);
      if (v4 < 3) {
        goto LABEL_89;
      }
      int v16 = *(_DWORD *)(v14 + 60);
      if (v16 == 31)
      {
        uint64_t v84 = *(void *)(v14 + 40);
        LODWORD(v85) = *(_DWORD *)(v84 + 24);
        if ((int)v85 >= 1)
        {
          uint64_t v86 = 0;
          while (1)
          {
            CoreML::validateSizeRange(*(CoreML **)(*(void *)(v84 + 32) + 8 * v86 + 8), (CoreML::Result *)v224);
            this = (CoreML *)CoreML::Result::good((CoreML::Result *)v224);
            if ((this & 1) == 0) {
              break;
            }
            if (SHIBYTE(v225) < 0) {
              operator delete(*(void **)&v224[8]);
            }
            ++v86;
            uint64_t v85 = *(int *)(v84 + 24);
            if (v86 >= v85) {
              goto LABEL_116;
            }
          }
          std::operator+<char>();
          uint64_t v138 = std::string::append(&v221, "' has an invalid range for dimension ");
          long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
          v222.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v139;
          v138->__r_.__value_.__l.__size_ = 0;
          v138->__r_.__value_.__r.__words[2] = 0;
          v138->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v220, v86);
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v140 = &v220;
          }
          else {
            v140 = (std::string *)v220.__r_.__value_.__r.__words[0];
          }
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v141 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v141 = v220.__r_.__value_.__l.__size_;
          }
          uint64_t v142 = std::string::append(&v222, (const std::string::value_type *)v140, v141);
          long long v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
          v223.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v143;
          v142->__r_.__value_.__l.__size_ = 0;
          v142->__r_.__value_.__r.__words[2] = 0;
          v142->__r_.__value_.__r.__words[0] = 0;
          double v144 = std::string::append(&v223, ". ");
          long long v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
          v226.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v145;
          v144->__r_.__value_.__l.__size_ = 0;
          v144->__r_.__value_.__r.__words[2] = 0;
          v144->__r_.__value_.__r.__words[0] = 0;
          uint64_t v146 = turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)v224);
          int v147 = *(char *)(v146 + 23);
          if (v147 >= 0) {
            BOOL v148 = (const std::string::value_type *)v146;
          }
          else {
            BOOL v148 = *(const std::string::value_type **)v146;
          }
          if (v147 >= 0) {
            std::string::size_type v149 = *(unsigned __int8 *)(v146 + 23);
          }
          else {
            std::string::size_type v149 = *(void *)(v146 + 8);
          }
          unsigned int v150 = std::string::append(&v226, v148, v149);
          long long v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v151;
          v150->__r_.__value_.__l.__size_ = 0;
          v150->__r_.__value_.__r.__words[2] = 0;
          v150->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result(a4, 12);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v226.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v223.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v220.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v222.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
          {
            char v83 = (void *)v221.__r_.__value_.__r.__words[0];
            goto LABEL_219;
          }
          goto LABEL_220;
        }
LABEL_116:
        if (!v15) {
          goto LABEL_135;
        }
        if (*(_DWORD *)(v14 + 16) != v85)
        {
          std::operator+<char>();
          uint64_t v190 = std::string::append(&v221, "' has a default ");
          long long v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
          v222.__r_.__value_.__r.__words[2] = v190->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v191;
          v190->__r_.__value_.__l.__size_ = 0;
          v190->__r_.__value_.__r.__words[2] = 0;
          v190->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v220, *(_DWORD *)(v14 + 16));
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v192 = &v220;
          }
          else {
            uint64_t v192 = (std::string *)v220.__r_.__value_.__r.__words[0];
          }
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v193 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v193 = v220.__r_.__value_.__l.__size_;
          }
          unsigned int v194 = std::string::append(&v222, (const std::string::value_type *)v192, v193);
          long long v195 = *(_OWORD *)&v194->__r_.__value_.__l.__data_;
          v223.__r_.__value_.__r.__words[2] = v194->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v195;
          v194->__r_.__value_.__l.__size_ = 0;
          v194->__r_.__value_.__r.__words[2] = 0;
          v194->__r_.__value_.__r.__words[0] = 0;
          uint64_t v196 = std::string::append(&v223, "-d shape but a ");
          long long v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
          v226.__r_.__value_.__r.__words[2] = v196->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v197;
          v196->__r_.__value_.__l.__size_ = 0;
          v196->__r_.__value_.__r.__words[2] = 0;
          v196->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v219, *(_DWORD *)(v84 + 24));
          if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v198 = &v219;
          }
          else {
            unsigned int v198 = (std::string *)v219.__r_.__value_.__r.__words[0];
          }
          if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v199 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v199 = v219.__r_.__value_.__l.__size_;
          }
          v200 = std::string::append(&v226, (const std::string::value_type *)v198, v199);
          long long v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v200->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v201;
          v200->__r_.__value_.__l.__size_ = 0;
          v200->__r_.__value_.__r.__words[2] = 0;
          v200->__r_.__value_.__r.__words[0] = 0;
          uint64_t v202 = std::string::append(&__p, "-d shape range");
          long long v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
          *(void *)&v224[16] = *((void *)&v202->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v224 = v203;
          v202->__r_.__value_.__l.__size_ = 0;
          v202->__r_.__value_.__r.__words[2] = 0;
          v202->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result(a4, 12);
LABEL_323:
          if ((v224[23] & 0x80000000) != 0) {
            operator delete(*(void **)v224);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v219.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v226.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v223.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v220.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v222.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v11 = (void *)v221.__r_.__value_.__r.__words[0];
            goto LABEL_16;
          }
          return;
        }
        if ((int)v85 < 1)
        {
LABEL_125:
          for (uint64_t i = 0; ; ++i)
          {
            if (*(_DWORD *)(v7 + 36) == 5) {
              this = *(CoreML **)(v7 + 24);
            }
            else {
              this = (CoreML *)CoreML::Specification::ArrayFeatureType::default_instance(this);
            }
            if (i >= *((int *)this + 4)) {
              goto LABEL_135;
            }
            this = *(_DWORD *)(v7 + 36) == 5
                 ? *(CoreML **)(v7 + 24)
                 : (CoreML *)CoreML::Specification::ArrayFeatureType::default_instance(this);
            uint64_t v93 = *(void *)(*((void *)this + 3) + 8 * i + 8);
            if (v93 < 0) {
              break;
            }
          }
          std::operator+<char>();
          unsigned int v106 = std::string::append(&v221, "' has an invalid shape. Element ");
          long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
          v222.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v107;
          v106->__r_.__value_.__l.__size_ = 0;
          v106->__r_.__value_.__r.__words[2] = 0;
          v106->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v220, i);
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v108 = &v220;
          }
          else {
            uint64_t v108 = (std::string *)v220.__r_.__value_.__r.__words[0];
          }
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v109 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v109 = v220.__r_.__value_.__l.__size_;
          }
          unsigned int v110 = std::string::append(&v222, (const std::string::value_type *)v108, v109);
          long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
          v223.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v111;
          v110->__r_.__value_.__l.__size_ = 0;
          v110->__r_.__value_.__r.__words[2] = 0;
          v110->__r_.__value_.__r.__words[0] = 0;
          uint64_t v112 = std::string::append(&v223, " has non-positive value ");
          long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
          v226.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v113;
          v112->__r_.__value_.__l.__size_ = 0;
          v112->__r_.__value_.__r.__words[2] = 0;
          v112->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v219, v93);
          if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v114 = &v219;
          }
          else {
            unsigned int v114 = (std::string *)v219.__r_.__value_.__r.__words[0];
          }
          if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v115 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v115 = v219.__r_.__value_.__l.__size_;
          }
          v116 = std::string::append(&v226, (const std::string::value_type *)v114, v115);
          long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          v118 = std::string::append(&__p, ".");
          long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
          *(void *)&v224[16] = *((void *)&v118->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v224 = v119;
          v118->__r_.__value_.__l.__size_ = 0;
          v118->__r_.__value_.__r.__words[2] = 0;
          v118->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result(a4, 12);
          goto LABEL_323;
        }
        uint64_t v85 = v85;
        uint64_t v87 = *(void *)(v84 + 32) + 8;
        uint64_t v88 = (uint64_t *)(*(void *)(v14 + 24) + 8);
        while (1)
        {
          uint64_t v90 = *v88++;
          uint64_t v89 = v90;
          if (v90 < *(int *)(*(void *)v87 + 16)) {
            break;
          }
          uint64_t v91 = *(void *)(*(void *)v87 + 24);
          if ((v91 & 0x8000000000000000) == 0 && v89 > v91) {
            break;
          }
          v87 += 8;
          if (!--v85) {
            goto LABEL_124;
          }
        }
        std::operator+<char>();
        unsigned int v206 = std::string::append(&__p, "' has a default shape that is out of the specified shape range");
        long long v207 = *(_OWORD *)&v206->__r_.__value_.__l.__data_;
        *(void *)&v224[16] = *((void *)&v206->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v224 = v207;
        v206->__r_.__value_.__l.__size_ = 0;
        v206->__r_.__value_.__r.__words[2] = 0;
        v206->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result(a4, 12);
LABEL_9:
        if ((v224[23] & 0x80000000) != 0) {
          operator delete(*(void **)v224);
        }
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        uint64_t v11 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_16;
      }
      if (v16 != 21)
      {
LABEL_89:
        if (a3 && !v15)
        {
          std::operator+<char>();
          unint64_t v70 = std::string::append(&__p, "' has missing shape constraints.");
          long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
          *(void *)&v224[16] = *((void *)&v70->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v224 = v71;
          v70->__r_.__value_.__l.__size_ = 0;
          v70->__r_.__value_.__r.__words[2] = 0;
          v70->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result(a4, 12);
          goto LABEL_9;
        }
LABEL_124:
        if (!v15)
        {
LABEL_135:
          if (*(_DWORD *)(v7 + 36) == 5) {
            uint64_t v94 = *(uint64_t **)(v7 + 24);
          }
          else {
            uint64_t v94 = CoreML::Specification::ArrayFeatureType::default_instance(this);
          }
          int v100 = *((_DWORD *)v94 + 9);
          if (v100 != 65568 && v100 != 65600 && v100 != 131104)
          {
            std::operator+<char>();
            uint64_t v130 = std::string::append(&__p, "' has an invalid or unspecified dataType. It must be specified as DOUBLE, FLOAT32 or INT32");
            long long v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
            *(void *)&v224[16] = *((void *)&v130->__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v224 = v131;
            v130->__r_.__value_.__l.__size_ = 0;
            v130->__r_.__value_.__r.__words[2] = 0;
            v130->__r_.__value_.__r.__words[0] = 0;
            CoreML::Result::Result(a4, 12);
            goto LABEL_9;
          }
          if (*(_DWORD *)(v7 + 36) == 5) {
            int v103 = *(uint64_t **)(v7 + 24);
          }
          else {
            int v103 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v94);
          }
          int v104 = *((_DWORD *)v103 + 16);
          switch(v104)
          {
            case ')':
              if (*(_DWORD *)(v7 + 36) == 5) {
                double v134 = *(uint64_t **)(v7 + 24);
              }
              else {
                double v134 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v103);
              }
              if (*((_DWORD *)v134 + 9) != 131104) {
                goto LABEL_347;
              }
              break;
            case '3':
              if (*(_DWORD *)(v7 + 36) == 5) {
                uint64_t v135 = *(uint64_t **)(v7 + 24);
              }
              else {
                uint64_t v135 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v103);
              }
              if (*((_DWORD *)v135 + 9) != 65568) {
                goto LABEL_347;
              }
              break;
            case '=':
              double v105 = *(_DWORD *)(v7 + 36) == 5
                   ? *(uint64_t **)(v7 + 24)
                   : CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v103);
              if (*((_DWORD *)v105 + 9) != 65600)
              {
LABEL_347:
                std::operator+<char>();
                double v204 = std::string::append(&__p, "' has mistmatch between dataType and the type of default optional value.");
                long long v205 = *(_OWORD *)&v204->__r_.__value_.__l.__data_;
                *(void *)&v224[16] = *((void *)&v204->__r_.__value_.__l + 2);
                *(_OWORD *)uint64_t v224 = v205;
                v204->__r_.__value_.__l.__size_ = 0;
                v204->__r_.__value_.__r.__words[2] = 0;
                v204->__r_.__value_.__r.__words[0] = 0;
                CoreML::Result::Result(a4, 12);
                goto LABEL_9;
              }
              break;
          }
LABEL_282:
          CoreML::Result::Result(a4);
          return;
        }
        goto LABEL_125;
      }
      uint64_t v17 = *(void *)(v14 + 40);
      uint64_t v18 = *(int *)(v17 + 24);
      if (!v18)
      {
LABEL_188:
        std::operator+<char>();
        unint64_t v132 = std::string::append(&__p, "' has enumerated zero permitted sizes.");
        long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
        *(void *)&v224[16] = *((void *)&v132->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v224 = v133;
        v132->__r_.__value_.__l.__size_ = 0;
        v132->__r_.__value_.__r.__words[2] = 0;
        v132->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result(a4, 12);
        goto LABEL_9;
      }
      uint64_t v19 = *(void *)(v17 + 32);
      if (v19) {
        uint64_t v20 = v19 + 8;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = v20 + 8 * v18;
      uint64_t v22 = 8 * v18;
      uint64_t v23 = v20;
      do
      {
        if (!*(_DWORD *)(*(void *)v23 + 16))
        {
          std::operator+<char>();
          v136 = std::string::append(&__p, "' has enumerated shapes with zero dimensions.");
          long long v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
          *(void *)&v224[16] = *((void *)&v136->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v224 = v137;
          v136->__r_.__value_.__l.__size_ = 0;
          v136->__r_.__value_.__r.__words[2] = 0;
          v136->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result(a4, 12);
          goto LABEL_9;
        }
        v23 += 8;
        v22 -= 8;
      }
      while (v22);
      if (!v15) {
        goto LABEL_135;
      }
      do
      {
        if (*(_DWORD *)(*(void *)v20 + 16) == v15)
        {
          if (v15 < 1) {
            goto LABEL_124;
          }
          uint64_t v24 = (uint64_t *)(*(void *)(*(void *)v20 + 24) + 8);
          char v25 = (uint64_t *)(*(void *)(v14 + 24) + 8);
          uint64_t v26 = *(unsigned int *)(v14 + 16);
          while (1)
          {
            uint64_t v28 = *v25++;
            uint64_t v27 = v28;
            uint64_t v29 = *v24++;
            if (v27 != v29) {
              break;
            }
            if (!--v26) {
              goto LABEL_124;
            }
          }
        }
        v20 += 8;
      }
      while (v20 != v21);
      std::operator+<char>();
      uint64_t v30 = std::string::append(&v226, "' has a default shape specified ");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      unsigned int v32 = std::string::append(&__p, " which is not within the allowed enumerated shapes specified.");
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      *(void *)&v224[16] = *((void *)&v32->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v224 = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result(a4, 12);
      if ((v224[23] & 0x80000000) != 0) {
        operator delete(*(void **)v224);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v11 = (void *)v226.__r_.__value_.__r.__words[0];
        goto LABEL_16;
      }
      return;
    case 6:
      if (*(_DWORD *)(*(void *)(v7 + 24) + 28)) {
        goto LABEL_282;
      }
      std::operator+<char>();
      uint64_t v59 = std::string::append(&__p, "' must contain a key type of either Int64 or String.");
      long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      *(void *)&v224[16] = *((void *)&v59->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v224 = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result(a4, 12);
      goto LABEL_9;
    case 7:
      if (v4 <= 2)
      {
        std::to_string(&v223, 3);
        uint64_t v61 = std::string::insert(&v223, 0, "Sequence types are only valid in specification verison >= ");
        long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v226.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        uint64_t v63 = std::string::append(&v226, ". This model has version ");
        long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v222, v4);
        if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v65 = &v222;
        }
        else {
          uint64_t v65 = (std::string *)v222.__r_.__value_.__r.__words[0];
        }
        if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v66 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v66 = v222.__r_.__value_.__l.__size_;
        }
        uint64_t v67 = std::string::append(&__p, (const std::string::value_type *)v65, v66);
        long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        *(void *)&v224[16] = *((void *)&v67->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v224 = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result(a4, 12);
        if ((v224[23] & 0x80000000) != 0) {
          operator delete(*(void **)v224);
        }
        if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v222.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          size_t v69 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_303:
          operator delete(v69);
        }
LABEL_304:
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v226.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        uint64_t v11 = (void *)v223.__r_.__value_.__r.__words[0];
LABEL_16:
        operator delete(v11);
        return;
      }
      if (*(void *)(*(void *)(v7 + 24) + 16)) {
        unint64_t v72 = *(CoreML **)(*(void *)(v7 + 24) + 16);
      }
      else {
        unint64_t v72 = (CoreML *)&CoreML::Specification::_SizeRange_default_instance_;
      }
      CoreML::validateSizeRange(v72, (CoreML::Result *)v224);
      BOOL v73 = CoreML::Result::good((CoreML::Result *)v224);
      if (v73)
      {
        if (*(_DWORD *)(v7 + 36) == 7) {
          double v74 = *(uint64_t **)(v7 + 24);
        }
        else {
          double v74 = CoreML::Specification::SequenceFeatureType::default_instance((CoreML::Specification::SequenceFeatureType *)v73);
        }
        if (*((_DWORD *)v74 + 9))
        {
          if (SHIBYTE(v225) < 0) {
            operator delete(*(void **)&v224[8]);
          }
          goto LABEL_282;
        }
        std::operator+<char>();
        uint64_t v120 = std::string::append(&v226, "' has invalid or missing type. Only Int64 and String sequences are currently supported");
        long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v121;
        v120->__r_.__value_.__l.__size_ = 0;
        v120->__r_.__value_.__r.__words[2] = 0;
        v120->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result(a4, 12);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
        {
          char v83 = (void *)v226.__r_.__value_.__r.__words[0];
          goto LABEL_219;
        }
      }
      else
      {
        std::operator+<char>();
        uint64_t v75 = std::string::append(&v223, "' has invalid allowed sizes. ");
        long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v226.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        uint64_t v77 = turi::neural_net::float_scalar::data((turi::neural_net::float_scalar *)v224);
        int v78 = *(char *)(v77 + 23);
        if (v78 >= 0) {
          int v79 = (const std::string::value_type *)v77;
        }
        else {
          int v79 = *(const std::string::value_type **)v77;
        }
        if (v78 >= 0) {
          std::string::size_type v80 = *(unsigned __int8 *)(v77 + 23);
        }
        else {
          std::string::size_type v80 = *(void *)(v77 + 8);
        }
        int v81 = std::string::append(&v226, v79, v80);
        long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v82;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result(a4, 12);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v226.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
        {
          char v83 = (void *)v223.__r_.__value_.__r.__words[0];
LABEL_219:
          operator delete(v83);
        }
      }
LABEL_220:
      if ((SHIBYTE(v225) & 0x80000000) == 0) {
        return;
      }
      uint64_t v11 = *(void **)&v224[8];
      goto LABEL_16;
    default:
      goto LABEL_282;
  }
}

void sub_223E51FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 121) < 0) {
    operator delete(*(void **)(v47 - 144));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateFeatureDescriptions(CoreML *this@<X0>, const CoreML::Specification::ModelDescription *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((unsigned int *)this + 6);
  if ((int)v4 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Models must have one or more inputs.");
    CoreML::Result::Result((_DWORD *)a3, 12);
    goto LABEL_25;
  }
  if (*((int *)this + 12) <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Models must have one or more outputs.");
    CoreML::Result::Result((_DWORD *)a3, 12);
LABEL_25:
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v7 = *((void *)this + 4);
  if (v7) {
    long long v8 = (CoreML **)(v7 + 8);
  }
  else {
    long long v8 = 0;
  }
  uint64_t v9 = 8 * v4;
  while (1)
  {
    CoreML::validateFeatureDescription(*v8, a2, 1, (CoreML::Result *)a3);
    if (!CoreML::Result::good((CoreML::Result *)a3)) {
      break;
    }
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*(void **)(a3 + 8));
    }
    ++v8;
    v9 -= 8;
    if (!v9)
    {
      uint64_t v10 = *((int *)this + 12);
      uint64_t v11 = *((void *)this + 7);
      if (v11) {
        unsigned int v12 = (CoreML **)(v11 + 8);
      }
      else {
        unsigned int v12 = 0;
      }
      if (v10)
      {
        uint64_t v13 = 8 * v10;
        while (1)
        {
          CoreML::validateFeatureDescription(*v12, a2, 0, (CoreML::Result *)a3);
          if (!CoreML::Result::good((CoreML::Result *)a3)) {
            break;
          }
          if (*(char *)(a3 + 31) < 0) {
            operator delete(*(void **)(a3 + 8));
          }
          ++v12;
          v13 -= 8;
          if (!v13) {
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        CoreML::Result::Result((CoreML::Result *)a3);
      }
      return;
    }
  }
}

void sub_223E52604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::validateModelDescription@<W0>(CoreML *this@<X0>, const CoreML::Specification::ModelDescription *a2@<X1>, CoreML::Result *a3@<X8>)
{
  return CoreML::Result::good(a3);
}

void sub_223E52668(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateRegressorInterface(CoreML *this@<X0>, const CoreML::Specification::ModelDescription *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((void *)this + 11);
  if (*(char *)(v5 + 23) < 0)
  {
    if (*(void *)(v5 + 8))
    {
LABEL_3:
      CoreML::validateFeatureDescriptions(this, a2, a3);
      if (CoreML::Result::good((CoreML::Result *)a3))
      {
        uint64_t v6 = (const void **)*((void *)this + 11);
        uint64_t v7 = operator new(8uLL);
        std::string __p = v7;
        void *v7 = 0x500000002;
        uint64_t v10 = v7 + 1;
        uint64_t v11 = v7 + 1;
        CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)this + 40, v6, (int **)&__p, (CoreML::Result *)&v12);
        *(void *)a3 = v12;
        long long v8 = (void **)(a3 + 8);
        if (*(char *)(a3 + 31) < 0) {
          operator delete(*v8);
        }
        *(_OWORD *)long long v8 = v13;
        *(void *)(a3 + 24) = v14;
        HIBYTE(v14) = 0;
        LOBYTE(v13) = 0;
        if (__p)
        {
          uint64_t v10 = __p;
          operator delete(__p);
        }
        CoreML::Result::good((CoreML::Result *)a3);
      }
      return;
    }
  }
  else if (*(unsigned char *)(v5 + 23))
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(&v12, "Specification is missing regressor predictedFeatureName.");
  CoreML::Result::Result((_DWORD *)a3, 12);
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
}

void sub_223E527A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (*(char *)(v18 + 31) < 0) {
    operator delete(*(void **)(v18 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>(uint64_t a1@<X0>, const void **a2@<X1>, int **a3@<X2>, CoreML::Result *a4@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)v26);
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 < 1)
  {
LABEL_23:
    std::operator+<char>();
    uint64_t v21 = std::string::append(&v23, "' to the model is not present in the model description.");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a4, 10);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    int v10 = *((char *)a2 + 23);
    if (v10 >= 0) {
      uint64_t v11 = (const void *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v11 = a2[1];
    }
    if (v10 >= 0) {
      unsigned int v12 = a2;
    }
    else {
      unsigned int v12 = *a2;
    }
    long long v13 = (uint64_t *)(v9 + 8);
    while (1)
    {
      uint64_t v14 = *v13;
      uint64_t v15 = *(void *)(*v13 + 16);
      int v16 = *(char *)(v15 + 23);
      uint64_t v17 = v16 >= 0 ? (const void *)*(unsigned __int8 *)(v15 + 23) : *(const void **)(v15 + 8);
      uint64_t v18 = v16 >= 0 ? *(const void **)(*v13 + 16) : *(const void **)v15;
      size_t v19 = (size_t)(v17 >= v11 ? v11 : v17);
      if (!memcmp(v12, v18, v19) && v17 == v11) {
        break;
      }
      ++v13;
      if (!--v8) {
        goto LABEL_23;
      }
    }
    CoreML::validateSchemaTypes(a3, v14, a4);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
}

void sub_223E5294C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateClassifierFeatureDescriptions(CoreML *this@<X0>, const CoreML::Specification::ModelDescription *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = (int)a2;
  uint64_t v5 = *((void *)this + 11);
  if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v5 + 23)) {
      goto LABEL_3;
    }
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(&__p, "Specification is missing classifier predictedFeatureName");
    CoreML::Result::Result((_DWORD *)a3, 12);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p);
    }
    return;
  }
  if (!*(void *)(v5 + 8)) {
    goto LABEL_15;
  }
LABEL_3:
  uint64_t v6 = *((void *)this + 12);
  uint64_t v7 = (char *)this + 40;
  uint64_t v8 = operator new(4uLL);
  if (v3) {
    int v9 = 1;
  }
  else {
    int v9 = 3;
  }
  std::string __p = v8;
  _DWORD *v8 = v9;
  unsigned int v12 = v8 + 1;
  long long v13 = v8 + 1;
  CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v7, (const void **)v5, (int **)&__p, (CoreML::Result *)a3);
  if (__p)
  {
    unsigned int v12 = __p;
    operator delete(__p);
  }
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*(void **)(a3 + 8));
    }
    if (*(char *)(v6 + 23) < 0)
    {
      if (!*(void *)(v6 + 8))
      {
LABEL_23:
        CoreML::Result::Result((CoreML::Result *)a3);
        return;
      }
    }
    else if (!*(unsigned char *)(v6 + 23))
    {
      goto LABEL_23;
    }
    int v10 = operator new(8uLL);
    std::string __p = v10;
    void *v10 = 0x600000005;
    unsigned int v12 = v10 + 1;
    long long v13 = v10 + 1;
    CoreML::validateDescriptionsContainFeatureWithNameAndType<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v7, (const void **)v6, (int **)&__p, (CoreML::Result *)a3);
    if (__p)
    {
      unsigned int v12 = __p;
      operator delete(__p);
    }
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*(void **)(a3 + 8));
      }
      goto LABEL_23;
    }
  }
}

void sub_223E52B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 31) < 0) {
    operator delete(*(void **)(v15 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateOptional(CoreML *this@<X0>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v32);
  CoreML::validateDefaultOptionalValues(this, (CoreML::Result *)&v29);
  unsigned int v32 = v29;
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v30;
  uint64_t v34 = v31;
  if (!CoreML::Result::good((CoreML::Result *)&v32)) {
    goto LABEL_75;
  }
  int v5 = *((_DWORD *)this + 11);
  if (v5 <= 402)
  {
    if (v5 > 301)
    {
      switch(v5)
      {
        case 302:
          goto LABEL_62;
        case 303:
          goto LABEL_23;
        case 402:
          goto LABEL_62;
      }
    }
    else if ((v5 - 200) < 3)
    {
      goto LABEL_62;
    }
    goto LABEL_38;
  }
  if (v5 <= 501)
  {
    if (v5 == 403 || v5 == 500) {
      goto LABEL_23;
    }
    if (v5 == 501) {
      goto LABEL_62;
    }
LABEL_38:
    unsigned int v12 = (uint64_t *)*((void *)this + 2);
    if (!v12) {
      unsigned int v12 = &CoreML::Specification::_ModelDescription_default_instance_;
    }
    uint64_t v13 = v12[4];
    if (v13) {
      uint64_t v14 = v13 + 8;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *((int *)v12 + 6);
    if (v15)
    {
      uint64_t v16 = 8 * v15;
      while (1)
      {
        uint64_t v17 = *(uint64_t **)(*(void *)v14 + 32);
        if (!v17) {
          uint64_t v17 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((unsigned char *)v17 + 16)) {
          break;
        }
        v14 += 8;
        v16 -= 8;
        if (!v16) {
          goto LABEL_49;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v35, "Features cannot be optional to this type of model.");
      CoreML::Result::Result(&v29, 13);
      goto LABEL_35;
    }
LABEL_49:
    uint64_t v18 = v12[7];
    if (v18) {
      uint64_t v19 = v18 + 8;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *((int *)v12 + 12);
    if (v20)
    {
      uint64_t v21 = 8 * v20;
      while (1)
      {
        long long v22 = *(uint64_t **)(*(void *)v19 + 32);
        if (!v22) {
          long long v22 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((unsigned char *)v22 + 16)) {
          break;
        }
        v19 += 8;
        v21 -= 8;
        if (!v21) {
          goto LABEL_58;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v35, "Outputs cannot be optional.");
      CoreML::Result::Result(&v29, 12);
      goto LABEL_35;
    }
    goto LABEL_58;
  }
  if (v5 > 899)
  {
    if (v5 == 900) {
      goto LABEL_62;
    }
    if (v5 == 3000) {
      goto LABEL_23;
    }
    goto LABEL_38;
  }
  if (v5 != 502)
  {
    if (v5 == 601) {
      goto LABEL_62;
    }
    goto LABEL_38;
  }
LABEL_23:
  uint64_t v6 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*((void *)this + 2)) {
    uint64_t v6 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v7 = v6[4];
  if (v7) {
    uint64_t v8 = v7 + 8;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *((int *)v6 + 6);
  if (!v9)
  {
LABEL_34:
    std::string::basic_string[abi:ne180100]<0>(v35, "At least one feature for a neural network must NOT be optional.");
    CoreML::Result::Result(&v29, 13);
LABEL_35:
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    goto LABEL_59;
  }
  uint64_t v10 = 8 * v9;
  while (1)
  {
    uint64_t v11 = *(uint64_t **)(*(void *)v8 + 32);
    if (!v11) {
      uint64_t v11 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (!*((unsigned char *)v11 + 16)) {
      break;
    }
    v8 += 8;
    v10 -= 8;
    if (!v10) {
      goto LABEL_34;
    }
  }
LABEL_58:
  CoreML::Result::Result((CoreML::Result *)&v29);
LABEL_59:
  unsigned int v32 = v29;
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v30;
  uint64_t v34 = v31;
LABEL_62:
  if (!CoreML::Result::good((CoreML::Result *)&v32))
  {
LABEL_75:
    *(void *)a2 = v32;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v34;
    long long __p = 0uLL;
    uint64_t v34 = 0;
    goto LABEL_76;
  }
  std::string v23 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*((void *)this + 2)) {
    std::string v23 = (uint64_t *)*((void *)this + 2);
  }
  uint64_t v24 = v23[7];
  if (v24) {
    uint64_t v25 = v24 + 8;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = *((int *)v23 + 12);
  if (v26)
  {
    uint64_t v27 = 8 * v26;
    while (1)
    {
      char v28 = *(uint64_t **)(*(void *)v25 + 32);
      if (!v28) {
        char v28 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((unsigned char *)v28 + 16)) {
        break;
      }
      v25 += 8;
      v27 -= 8;
      if (!v27) {
        goto LABEL_74;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v29, "Outputs cannot be optional.");
    CoreML::Result::Result((_DWORD *)a2, 12);
    if (SHIBYTE(v30) < 0) {
      operator delete(v29);
    }
  }
  else
  {
LABEL_74:
    CoreML::Result::Result((CoreML::Result *)a2);
  }
LABEL_76:
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)__p);
  }
}

void sub_223E52F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateDefaultOptionalValues(CoreML *this@<X0>, CoreML::Result *a2@<X8>)
{
  uint64_t v4 = (uint64_t *)*((void *)this + 2);
  if (!v4) {
    uint64_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  uint64_t v5 = v4[4];
  if (v5) {
    uint64_t v6 = v5 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *((int *)v4 + 6);
  if (!v7)
  {
LABEL_27:
    CoreML::Result::Result(a2);
    return;
  }
  uint64_t v8 = this;
  uint64_t v9 = 8 * v7;
  while (1)
  {
    uint64_t v10 = *(uint64_t **)(*(void *)v6 + 32);
    if (!v10) {
      uint64_t v10 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (!*((unsigned char *)v10 + 16)) {
      goto LABEL_26;
    }
    this = *((_DWORD *)v10 + 9) == 5
         ? (CoreML *)v10[3]
         : (CoreML *)CoreML::Specification::ArrayFeatureType::default_instance(this);
    unsigned int v11 = *((_DWORD *)this + 16);
    BOOL v12 = v11 > 0x3D;
    uint64_t v13 = (1 << v11) & 0x2008020000000000;
    if (v12 || v13 == 0) {
      goto LABEL_26;
    }
    int v15 = *((_DWORD *)v8 + 11);
    if (v15 > 499)
    {
      if (v15 != 500 && v15 != 502 && v15 != 3000) {
        break;
      }
      goto LABEL_25;
    }
    if (v15 != 303 && v15 != 403) {
      break;
    }
LABEL_25:
    if (*((int *)v8 + 6) <= 4)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Default value for optional inputs is supported from specification 5 (iOS 14) onwards!");
      CoreML::Result::Result(a2, 12);
      goto LABEL_31;
    }
LABEL_26:
    v6 += 8;
    v9 -= 8;
    if (!v9) {
      goto LABEL_27;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Default optional values are only allowed for neural networks.");
  CoreML::Result::Result(a2, 13);
LABEL_31:
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223E53100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateCanModelBeUpdatable(CoreML *this@<X0>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v8);
  int v5 = *((_DWORD *)this + 11);
  if (v5 > 402)
  {
    if ((v5 - 403) >= 2 && v5 != 500) {
      goto LABEL_9;
    }
LABEL_7:
    *(void *)a2 = v8;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)v9;
    *(void *)(a2 + 24) = v10;
    return;
  }
  if ((v5 - 200) < 3 || v5 == 303) {
    goto LABEL_7;
  }
LABEL_9:
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  MEMORY[0x22A614700](__p, "This model type is not supported for on-device update.");
  CoreML::Result::Result((_DWORD *)a2, 14);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
}

void sub_223E531F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validate<(MLModelType)604>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    uint64_t v4 = *(uint64_t **)(a1 + 16);
  }
  else {
    uint64_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::Result::Result((CoreML::Result *)&v30);
  CoreML::validateModelDescription((CoreML *)v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&v27);
  long long v30 = v27;
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v28;
  uint64_t v32 = v29;
  if (!CoreML::Result::good((CoreML::Result *)&v30)) {
    goto LABEL_41;
  }
  int v5 = operator new(0xCuLL);
  uint64_t v25 = v5 + 3;
  uint64_t v26 = (char *)(v5 + 3);
  *(void *)int v5 = 0x200000001;
  v5[2] = 5;
  uint64_t v24 = v5;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v4 + 2), 1, (int **)&v24, (uint64_t)&v27);
  long long v30 = v27;
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v28;
  uint64_t v32 = v29;
  HIBYTE(v29) = 0;
  LOBYTE(v28) = 0;
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v30)) {
    goto LABEL_41;
  }
  uint64_t v6 = operator new(0xCuLL);
  uint64_t v25 = v6 + 3;
  uint64_t v26 = (char *)(v6 + 3);
  *(void *)uint64_t v6 = 0x200000001;
  v6[2] = 5;
  uint64_t v24 = v6;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v4 + 5), 1, (int **)&v24, (uint64_t)&v27);
  long long v30 = v27;
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v28;
  uint64_t v32 = v29;
  HIBYTE(v29) = 0;
  LOBYTE(v28) = 0;
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)&v30);
  if (!v7) {
    goto LABEL_41;
  }
  uint64_t v8 = *(void *)(v4[4] + 8);
  uint64_t v9 = *(uint64_t **)(v8 + 32);
  if (!v9) {
    uint64_t v9 = &CoreML::Specification::_FeatureType_default_instance_;
  }
  int v10 = *((_DWORD *)v9 + 9);
  unsigned int v11 = *(uint64_t **)(*(void *)(v4[7] + 8) + 32);
  if (!v11) {
    unsigned int v11 = &CoreML::Specification::_FeatureType_default_instance_;
  }
  int v12 = *((_DWORD *)v11 + 9);
  if (v10 == 1)
  {
    if ((v12 - 1) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v27, "Input type Int64 must output to Int64 or Double.");
      CoreML::Result::Result((_DWORD *)a2, 13);
      goto LABEL_48;
    }
  }
  else
  {
    if (v12 != v10)
    {
      std::string::basic_string[abi:ne180100]<0>(&v27, "Type of input feature does not match the output type feature.");
      CoreML::Result::Result((_DWORD *)a2, 13);
      goto LABEL_48;
    }
    if (v10 == 5)
    {
      uint64_t v13 = v9[3];
      if (*(_DWORD *)(v13 + 16) == 1)
      {
        uint64_t v14 = v11[3];
        if (*(_DWORD *)(v14 + 16) == 1
          && *(void *)(*(void *)(v13 + 24) + 8) == *(void *)(*(void *)(v14 + 24) + 8))
        {
          if (*(_DWORD *)(a1 + 44) == 604) {
            int v15 = *(uint64_t **)(a1 + 32);
          }
          else {
            int v15 = CoreML::Specification::Scaler::default_instance((CoreML::Specification::Scaler *)v7);
          }
          uint64_t v18 = *((int *)v15 + 4);
          if (v18 < 2) {
            goto LABEL_58;
          }
          uint64_t v19 = *(uint64_t **)(v8 + 32);
          if (!v19) {
            uint64_t v19 = &CoreML::Specification::_FeatureType_default_instance_;
          }
          int v15 = *((_DWORD *)v19 + 9) == 5
              ? (uint64_t *)v19[3]
              : CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v15);
          if (*(void *)(v15[3] + 8) == v18)
          {
LABEL_58:
            if (*(_DWORD *)(a1 + 44) == 604) {
              uint64_t v20 = *(int **)(a1 + 32);
            }
            else {
              uint64_t v20 = (int *)CoreML::Specification::Scaler::default_instance((CoreML::Specification::Scaler *)v15);
            }
            uint64_t v21 = v20[10];
            if (v21 < 2) {
              goto LABEL_41;
            }
            long long v22 = *(uint64_t **)(v8 + 32);
            if (!v22) {
              long long v22 = &CoreML::Specification::_FeatureType_default_instance_;
            }
            uint64_t v23 = *((_DWORD *)v22 + 9) == 5
                ? (uint64_t *)v22[3]
                : CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v20);
            if (*(void *)(v23[3] + 8) == v21) {
              goto LABEL_41;
            }
            std::string::basic_string[abi:ne180100]<0>(&v27, "For input type array, specified scale values must be empty, a scalar, or a vector of the matching length.");
            CoreML::Result::Result((_DWORD *)a2, 13);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v27, "For input type array, specified shift values must be empty, a scalar, or a vector of the matching length.");
            CoreML::Result::Result((_DWORD *)a2, 13);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v27, "Shape of output array does not match shape of input array.");
          CoreML::Result::Result((_DWORD *)a2, 13);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v27, "Only 1 dimensional arrays input features are supported by the scaler.");
        CoreML::Result::Result((_DWORD *)a2, 13);
      }
      goto LABEL_48;
    }
  }
  if (*(_DWORD *)(a1 + 44) == 604) {
    uint64_t v16 = *(uint64_t **)(a1 + 32);
  }
  else {
    uint64_t v16 = CoreML::Specification::Scaler::default_instance((CoreML::Specification::Scaler *)v7);
  }
  if (*((_DWORD *)v16 + 4) >= 2u)
  {
    std::string::basic_string[abi:ne180100]<0>(&v27, "For a scalar imput type, specified shift value must be empty or a scalar.");
    CoreML::Result::Result((_DWORD *)a2, 13);
  }
  else
  {
    if (*(_DWORD *)(a1 + 44) == 604) {
      char v17 = *(uint64_t **)(a1 + 32);
    }
    else {
      char v17 = CoreML::Specification::Scaler::default_instance((CoreML::Specification::Scaler *)v16);
    }
    if (*((_DWORD *)v17 + 10) < 2u)
    {
LABEL_41:
      *(void *)a2 = v30;
      *(_OWORD *)(a2 + 8) = __p;
      *(void *)(a2 + 24) = v32;
      long long __p = 0uLL;
      uint64_t v32 = 0;
      goto LABEL_42;
    }
    std::string::basic_string[abi:ne180100]<0>(&v27, "For input type array, specified scale values must be empty or a scalar.");
    CoreML::Result::Result((_DWORD *)a2, 13);
  }
LABEL_48:
  if (SHIBYTE(v28) < 0) {
    operator delete(v27);
  }
LABEL_42:
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)__p);
  }
}

void sub_223E536C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

TCModelTrainerBackendGraphs *turi::proprietary::neural_net::mlc_activity_classifier_backend::create_graphs(int *a1, uint64_t a2)
{
  v100[1] = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x22A615770]();
  int v81 = objc_alloc_init(TCModelTrainerBackendGraphs);
  int v3 = objc_alloc_init(TCMLComputeActivityClassifierDescriptor);
  int v4 = a1[4];
  uint64_t v5 = *a1;
  int v6 = a1[2];
  std::string::size_type v80 = v3;
  [(TCMLComputeActivityClassifierDescriptor *)v3 setOutputChannels:a1[3]];
  int v79 = [MEMORY[0x263F10658] tensorWithWidth:v4 * (uint64_t)v6 height:1 featureChannelCount:a1[1] batchSize:v5];
  [v79 setLabel:@"input"];
  uint64_t v77 = [MEMORY[0x263F10658] tensorWithWidth:a1[4] height:1 featureChannelCount:a1[3] batchSize:v5];
  [v77 setLabel:@"labels"];
  int v78 = [MEMORY[0x263F10658] tensorWithWidth:a1[4] height:1 featureChannelCount:a1[3] batchSize:v5 fillWithData:1 dataType:0.0];
  [v78 setLabel:@"weights"];
  turi::neural_net::mlc_layer_weights::mlc_layer_weights((turi::neural_net::mlc_layer_weights *)v86);
  BOOL v7 = (int *)*((void *)a1 + 4);
  if (v7 != a1 + 10)
  {
    while (1)
    {
      uint64_t v8 = v7 + 8;
      if (*((char *)v7 + 55) < 0) {
        uint64_t v8 = (int *)*((void *)v7 + 4);
      }
      uint64_t v9 = [NSString stringWithUTF8String:v8];
      if (![v9 hasPrefix:@"conv"]) {
        break;
      }
      if ([v9 hasSuffix:@"_weight"]) {
        goto LABEL_6;
      }
      if ([v9 hasSuffix:@"_bias"]) {
        goto LABEL_10;
      }
LABEL_19:

      int v10 = (int *)*((void *)v7 + 1);
      if (v10)
      {
        do
        {
          unsigned int v11 = v10;
          int v10 = *(int **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unsigned int v11 = (int *)*((void *)v7 + 2);
          BOOL v12 = *(void *)v11 == (void)v7;
          BOOL v7 = v11;
        }
        while (!v12);
      }
      BOOL v7 = v11;
      if (v11 == a1 + 10) {
        goto LABEL_25;
      }
    }
    if ([v9 hasPrefix:@"bn"]) {
      goto LABEL_8;
    }
    if ([v9 hasPrefix:@"lstm"])
    {
      if ([v9 hasSuffix:@"_weight"])
      {
        turi::neural_net::mlc_layer_weights::add_lstm_weight((uint64_t)v86, (long long *)v7 + 2, (uint64_t)(v7 + 14));
        goto LABEL_19;
      }
      if (![v9 hasSuffix:@"_bias"]) {
        goto LABEL_19;
      }
LABEL_8:
      turi::neural_net::mlc_layer_weights::add_flat_array((uint64_t)v86, (long long *)v7 + 2, (uint64_t)(v7 + 14));
      goto LABEL_19;
    }
    if (![v9 hasPrefix:@"dense"]) {
      goto LABEL_19;
    }
    if (![v9 hasSuffix:@"_weight"])
    {
      if (![v9 hasSuffix:@"_bias"]) {
        goto LABEL_19;
      }
LABEL_10:
      turi::neural_net::mlc_layer_weights::add_conv_bias((uint64_t)v86, (long long *)v7 + 2, (uint64_t)(v7 + 14));
      goto LABEL_19;
    }
LABEL_6:
    turi::neural_net::mlc_layer_weights::add_conv_weight((uint64_t)v86, (long long *)v7 + 2, (uint64_t)(v7 + 14));
    goto LABEL_19;
  }
LABEL_25:
  [(TCMLComputeActivityClassifierDescriptor *)v80 setWeights:v86[5]];
  [(TCMLComputeActivityClassifierDescriptor *)v80 setInputTensor:v79];
  unint64_t v70 = [MEMORY[0x263F10608] descriptorWithType:2 reductionType:1];
  uint64_t v75 = objc_msgSend(MEMORY[0x263F10610], "layerWithDescriptor:weights:");
  LODWORD(v13) = 981668463;
  LODWORD(v14) = 1.0;
  LODWORD(v15) = 1.0;
  uint64_t v16 = [MEMORY[0x263F10618] descriptorWithLearningRate:0 gradientRescale:v13 regularizationType:v14 regularizationScale:v15];
  LODWORD(v17) = 1063675494;
  LODWORD(v18) = 1065336439;
  LODWORD(v19) = 841731191;
  long long v71 = (void *)v16;
  long long v76 = objc_msgSend(MEMORY[0x263F10598], "optimizerWithDescriptor:beta1:beta2:epsilon:timeStep:", v17, v18, v19);
  uint64_t v20 = objc_msgSend(MEMORY[0x263F105E0], "tc_graphForActivityClassifierDescriptor:seed:", v80, a1[5]);
  uint64_t v21 = (void *)MEMORY[0x263F10678];
  v100[0] = v20;
  double v74 = (void *)v20;
  long long v22 = [MEMORY[0x263EFF8C0] arrayWithObjects:v100 count:1];
  uint64_t v23 = [v21 graphWithGraphObjects:v22 lossLayer:0 optimizer:v76];
  [(TCModelTrainerBackendGraphs *)v81 setTrainingGraph:v23];

  uint64_t v24 = [MEMORY[0x263F10648] layerWithOperation:0];
  uint64_t v25 = [(TCModelTrainerBackendGraphs *)v81 trainingGraph];
  uint64_t v26 = [(TCMLComputeActivityClassifierDescriptor *)v80 outputTensor];
  uint64_t v27 = [v25 nodeWithLayer:v24 source:v26];

  [v27 setLabel:@"output"];
  long long v28 = [(TCModelTrainerBackendGraphs *)v81 trainingGraph];
  uint64_t v29 = [(TCMLComputeActivityClassifierDescriptor *)v80 outputTensor];
  long long v30 = [v28 nodeWithLayer:v75 source:v29];

  [v30 setLabel:@"loss"];
  uint64_t v31 = [v79 label];
  BOOL v98 = v31;
  int v99 = v79;
  uint64_t v32 = [NSDictionary dictionaryWithObjects:&v99 forKeys:&v98 count:1];
  [(TCModelTrainerBackendGraphs *)v81 setTrainingInputs:v32];

  long long v33 = [v77 label];
  unint64_t v96 = v33;
  int v97 = v77;
  uint64_t v34 = [NSDictionary dictionaryWithObjects:&v97 forKeys:&v96 count:1];
  [(TCModelTrainerBackendGraphs *)v81 setTrainingLossLabels:v34];

  uint64_t v35 = [v78 label];
  uint64_t v94 = v35;
  unint64_t v95 = v78;
  char v36 = [NSDictionary dictionaryWithObjects:&v95 forKeys:&v94 count:1];
  [(TCModelTrainerBackendGraphs *)v81 setTrainingLossLabelWeights:v36];

  char v37 = [(TCModelTrainerBackendGraphs *)v81 trainingGraph];
  BOOL v38 = [(TCModelTrainerBackendGraphs *)v81 trainingInputs];
  int v39 = [(TCModelTrainerBackendGraphs *)v81 trainingLossLabels];
  uint64_t v40 = [(TCModelTrainerBackendGraphs *)v81 trainingLossLabelWeights];
  char v41 = [v37 addInputs:v38 lossLabels:v39 lossLabelWeights:v40];

  if ((v41 & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(v85, "training graph");
    turi::TuriException::TuriException(exception, 7, v85);
  }
  uint64_t v42 = [v27 label];
  v92[0] = v42;
  v93[0] = v27;
  uint64_t v43 = [v30 label];
  v92[1] = v43;
  v93[1] = v30;
  uint64_t v44 = [NSDictionary dictionaryWithObjects:v93 forKeys:v92 count:2];
  [(TCModelTrainerBackendGraphs *)v81 setTrainingOutputs:v44];

  unint64_t v45 = [(TCModelTrainerBackendGraphs *)v81 trainingGraph];
  long long v46 = [(TCModelTrainerBackendGraphs *)v81 trainingOutputs];
  LOBYTE(v44) = [v45 addOutputs:v46];

  if ((v44 & 1) == 0)
  {
    uint64_t v67 = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(v84, "training graph");
    turi::TuriException::TuriException(v67, 8, v84);
  }
  uint64_t v47 = [MEMORY[0x263F10648] layerWithOperation:0];

  uint64_t v48 = (void *)v47;
  uint64_t v49 = (void *)MEMORY[0x263F105E8];
  uint64_t v91 = v74;
  long long v50 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v91 count:1];
  uint64_t v51 = [v49 graphWithGraphObjects:v50];
  [(TCModelTrainerBackendGraphs *)v81 setInferenceGraph:v51];

  long long v52 = [(TCModelTrainerBackendGraphs *)v81 inferenceGraph];
  uint64_t v53 = [(TCMLComputeActivityClassifierDescriptor *)v80 outputTensor];
  uint64_t v54 = [v52 nodeWithLayer:v48 source:v53];

  double v55 = (void *)v54;
  [(id)v54 setLabel:@"output"];
  long long v56 = [v79 label];
  uint64_t v89 = v56;
  uint64_t v90 = v79;
  unint64_t v57 = [NSDictionary dictionaryWithObjects:&v90 forKeys:&v89 count:1];
  [(TCModelTrainerBackendGraphs *)v81 setInferenceInputs:v57];

  long long v58 = [(TCModelTrainerBackendGraphs *)v81 inferenceGraph];
  uint64_t v59 = [(TCModelTrainerBackendGraphs *)v81 inferenceInputs];
  LOBYTE(v54) = [v58 addInputs:v59];

  if ((v54 & 1) == 0)
  {
    long long v68 = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(v83, "inference graph");
    turi::TuriException::TuriException(v68, 7, v83);
  }
  long long v60 = [v55 label];
  uint64_t v87 = v60;
  uint64_t v88 = v55;
  uint64_t v61 = [NSDictionary dictionaryWithObjects:&v88 forKeys:&v87 count:1];
  [(TCModelTrainerBackendGraphs *)v81 setInferenceOutputs:v61];

  long long v62 = [(TCModelTrainerBackendGraphs *)v81 inferenceGraph];
  uint64_t v63 = [(TCModelTrainerBackendGraphs *)v81 inferenceOutputs];
  char v64 = [v62 addOutputs:v63];

  if ((v64 & 1) == 0)
  {
    size_t v69 = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(v82, "inference graph");
    turi::TuriException::TuriException(v69, 8, v82);
  }
  if (a2) {
    turi::neural_net::mlc_layer_weights::operator=(a2, (uint64_t *)v86);
  }

  turi::neural_net::mlc_layer_weights::~mlc_layer_weights(v86);
  return v81;
}

void sub_223E5DB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,id a45)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((v45 & 1) == 0)
    {
LABEL_6:

      turi::neural_net::mlc_layer_weights::~mlc_layer_weights(&a45);
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

turi::neural_net::mlc_layer_weights *turi::neural_net::mlc_layer_weights::mlc_layer_weights(turi::neural_net::mlc_layer_weights *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *((void *)this + 5) = 0;
  uint64_t v2 = (void *)MEMORY[0x22A615770]();
  id v3 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  int v4 = (void *)*((void *)this + 5);
  *((void *)this + 5) = v3;

  return this;
}

void sub_223E5DEF0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mlc_layer_weights::operator=(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__move_assign(a1, a2);
  uint64_t v4 = a2[5];
  a2[5] = 0;
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 4CoreML::Specification::GLMRegressor::New(this, 0) = v4;

  return a1;
}

void turi::neural_net::mlc_layer_weights::~mlc_layer_weights(id *this)
{
  std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::~__hash_table((uint64_t)this);
}

void turi::neural_net::mlc_layer_weights::export_weights(turi::neural_net::mlc_layer_weights *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  for (uint64_t i = (uint64_t *)*((void *)this + 2); i; uint64_t i = (uint64_t *)*i)
  {
    turi::neural_net::shared_float_array::copy((uint64_t)(i + 5), (uint64_t)&v8);
    BOOL v12 = (long long *)(i + 2);
    uint64_t v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)i + 2, (uint64_t)&std::piecewise_construct, &v12);
    long long v5 = v9;
    long long v9 = 0uLL;
    int v6 = (std::__shared_weak_count *)v4[9];
    *((_OWORD *)v4 + 4) = v5;
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      int v6 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    }
    long long v7 = v11;
    *((_OWORD *)v4 + 5) = v10;
    *((_OWORD *)v4 + 6) = v7;
    uint64_t v8 = &unk_26D752D58;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_223E5E070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v12, *(void **)(v12 + 8));
  _Unwind_Resume(a1);
}

void turi::neural_net::shared_float_array::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<turi::neural_net::float_buffer,std::allocator<turi::neural_net::float_buffer>,turi::neural_net::float_array const&,void>(a1, &v3);
  long long v4 = v3;
  long long v3 = 0uLL;
  turi::neural_net::shared_float_array::shared_float_array(a2, &v4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v3 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_223E5E124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::mlc_layer_weights::export_weights_and_optimizer_data(turi::neural_net::mlc_layer_weights *this@<X0>, uint64_t *a2@<X8>)
{
  long long v4 = (void *)MEMORY[0x22A615770]();
  uint64_t v7 = 0;
  uint64_t v8 = (const void ***)&v7;
  uint64_t v9 = 0x4812000000;
  long long v10 = __Block_byref_object_copy_;
  long long v11 = __Block_byref_object_dispose_;
  uint64_t v12 = "";
  turi::neural_net::mlc_layer_weights::export_weights(this, (uint64_t)v13);
  long long v5 = (void *)*((void *)this + 5);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = ___ZNK4turi10neural_net17mlc_layer_weights33export_weights_and_optimizer_dataEv_block_invoke;
  void v6[3] = &unk_2646D6B00;
  void v6[4] = &v7;
  [v5 enumerateKeysAndObjectsUsingBlock:v6];
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](a2, v8 + 6);
  _Block_object_dispose(&v7, 8);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v13, v13[1]);
}

void sub_223E5E264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Block_object_dispose(&a14, 8);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v21, a21);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy_(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  long long v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *uint64_t v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void ___ZNK4turi10neural_net17mlc_layer_weights33export_weights_and_optimizer_dataEv_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [NSString stringWithFormat:@"%@%@", v5, @"_optimizer_data"];
  uint64_t v8 = [v6 optimizerData];
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 3221225472;
  v11[2] = ___ZNK4turi10neural_net17mlc_layer_weights33export_weights_and_optimizer_dataEv_block_invoke_2;
  void v11[3] = &unk_2646D6AD8;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 32);
  id v12 = v9;
  uint64_t v13 = v10;
  [v8 enumerateObjectsUsingBlock:v11];
}

void sub_223E5E3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void ___ZNK4turi10neural_net17mlc_layer_weights33export_weights_and_optimizer_dataEv_block_invoke_2(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v28, (char *)[*(id *)(a1 + 32) UTF8String]);
  uint64_t v7 = std::string::append(v6, "_");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v27, a3 + 1);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v9 = &v27;
  }
  else {
    id v9 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  long long v11 = std::string::append(&v24, (const std::string::value_type *)v9, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v31 = v11->__r_.__value_.__r.__words[2];
  long long v30 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  uint64_t v13 = [v5 bytes];
  unint64_t v14 = [v5 length];
  double v15 = operator new(8uLL);
  long long __p = v15;
  void *v15 = v14 >> 2;
  long long v22 = v15 + 1;
  uint64_t v23 = v15 + 1;
  turi::neural_net::shared_float_array::copy(v13, (uint64_t)&__p, (uint64_t)&v24);
  uint64_t v16 = (uint64_t **)(*(void *)(*(void *)(a1 + 40) + 8) + 48);
  v28[0] = &v30;
  double v17 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (const void **)&v30, (uint64_t)&std::piecewise_construct, v28);
  long long v18 = *(_OWORD *)&v24.__r_.__value_.__r.__words[1];
  *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = 0uLL;
  double v19 = (std::__shared_weak_count *)v17[9];
  *((_OWORD *)v17 + 4) = v18;
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    double v19 = (std::__shared_weak_count *)v24.__r_.__value_.__r.__words[2];
  }
  long long v20 = v26;
  *((_OWORD *)v17 + 5) = v25;
  *((_OWORD *)v17 + 6) = v20;
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D752D58;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (__p)
  {
    long long v22 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
}

void sub_223E5E5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (__p) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }

  _Unwind_Resume(a1);
}

id turi::neural_net::mlc_layer_weights::tensor_weights(turi::neural_net::mlc_layer_weights *this)
{
  context = (void *)MEMORY[0x22A615770]();
  id v13 = [MEMORY[0x263EFF9A0] dictionaryWithCapacity:*((void *)this + 3)];
  for (uint64_t i = (uint64_t *)*((void *)this + 2); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v3 = i + 2;
    if (*((char *)i + 39) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    long long v4 = [NSString stringWithUTF8String:v3];
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x6812000000;
    long long v18 = __Block_byref_object_copy__21;
    double v19 = __Block_byref_object_dispose__22;
    long long v20 = "";
    uint64_t v21 = &unk_26D752D58;
    uint64_t v22 = i[6];
    id v5 = (std::__shared_weak_count *)i[7];
    uint64_t v23 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v6 = *((_OWORD *)i + 5);
    long long v24 = *((_OWORD *)i + 4);
    long long v25 = v6;
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 3221225472;
    uint64_t v14[2] = ___ZN4turi10neural_net12_GLOBAL__N_114WrapFloatArrayERKNS0_18shared_float_arrayE_block_invoke;
    void v14[3] = &unk_2646D6B28;
    v14[4] = &v15;
    uint64_t v7 = (void *)MEMORY[0x22A615930](v14);
    uint64_t v8 = v16[12];
    id v9 = objc_alloc(MEMORY[0x263EFF8F8]);
    uint64_t v10 = (void *)[v9 initWithBytesNoCopy:(*(uint64_t (**)(uint64_t))(*(void *)v16[7] + 16))(v16[7]) + 4 * v16[9] length:4 * v8 deallocator:v7];

    _Block_object_dispose(&v15, 8);
    uint64_t v21 = &unk_26D752D58;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    [v13 setObject:v10 forKeyedSubscript:v4];
  }
  return v13;
}

void sub_223E5E8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id turi::neural_net::mlc_layer_weights::copy_float_array(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v15 = a2;
  long long v4 = std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v15);
  turi::neural_net::shared_float_array::copy(a3, (uint64_t)&v15);
  long long v5 = v16;
  long long v16 = 0uLL;
  long long v6 = (std::__shared_weak_count *)*((void *)v4 + 7);
  *((_OWORD *)v4 + 3) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    long long v6 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  }
  long long v7 = v18;
  *((_OWORD *)v4 + 4) = v17;
  *((_OWORD *)v4 + 5) = v7;
  uint64_t v15 = (long long *)&unk_26D752D58;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v8 = (void *)MEMORY[0x263F10660];
  uint64_t v10 = *((void *)v4 + 5);
  id v9 = v4 + 40;
  uint64_t v11 = (*(uint64_t (**)(unsigned __int8 *))(v10 + 16))(v9);
  uint64_t v12 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v9 + 24))(v9);
  id v13 = objc_msgSend(v8, "dataWithImmutableBytesNoCopy:length:", v11, 4 * v12, v15, (void)v16);
  return v13;
}

void turi::neural_net::mlc_layer_weights::add_conv_weight(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v6 = (void *)MEMORY[0x22A615770]();
  if ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 40))(a3) != 4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    memset(v16, 0, sizeof(v16));
    turi::TuriException::TuriException(exception, 6, v16);
  }
  uint64_t v7 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3);
  uint64_t v8 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3) + 8);
  uint64_t v9 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3) + 16);
  uint64_t v10 = [MEMORY[0x263F10670] convolutionWeightsDescriptorWithWidth:*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3) + 24) height:v9 inputFeatureChannelCount:v8 outputFeatureChannelCount:v7 dataType:1];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v11 = (uint64_t *)a2;
  }
  else {
    uint64_t v11 = *(uint64_t **)a2;
  }
  uint64_t v12 = [NSString stringWithUTF8String:v11];
  id v13 = turi::neural_net::mlc_layer_weights::copy_float_array(a1, a2, a3);
  unint64_t v14 = [MEMORY[0x263F10658] tensorWithDescriptor:v10 data:v13];
  [*(id *)(a1 + 40) setObject:v14 forKeyedSubscript:v12];
}

void sub_223E5EC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223E5ECCC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  JUMPOUT(0x223E5ECC4);
}

void turi::neural_net::mlc_layer_weights::add_conv_bias(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v6 = (void *)MEMORY[0x22A615770]();
  if ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 40))(a3) != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    memset(v13, 0, sizeof(v13));
    turi::TuriException::TuriException(exception, 6, v13);
  }
  uint64_t v7 = [MEMORY[0x263F10670] convolutionBiasesDescriptorWithFeatureChannelCount:*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3) dataType:1];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v8 = (uint64_t *)a2;
  }
  else {
    uint64_t v8 = *(uint64_t **)a2;
  }
  uint64_t v9 = [NSString stringWithUTF8String:v8];
  uint64_t v10 = turi::neural_net::mlc_layer_weights::copy_float_array(a1, a2, a3);
  uint64_t v11 = [MEMORY[0x263F10658] tensorWithDescriptor:v7 data:v10];
  [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:v9];
}

void sub_223E5EE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_223E5EEB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  JUMPOUT(0x223E5EEB0);
}

void turi::neural_net::mlc_layer_weights::add_flat_array(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v6 = (void *)MEMORY[0x22A615770]();
  uint64_t v7 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3);
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v8 = (uint64_t *)a2;
  }
  else {
    uint64_t v8 = *(uint64_t **)a2;
  }
  uint64_t v9 = [NSString stringWithUTF8String:v8];
  uint64_t v10 = turi::neural_net::mlc_layer_weights::copy_float_array(a1, a2, a3);
  uint64_t v11 = [MEMORY[0x263F10658] tensorWithWidth:1 height:1 featureChannelCount:v7 batchSize:1 data:v10];
  [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:v9];
}

void sub_223E5EFDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::mlc_layer_weights::add_lstm_weight(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v6 = (void *)MEMORY[0x22A615770]();
  uint64_t v7 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3);
  uint64_t v8 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3) + 8);
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v9 = (uint64_t *)a2;
  }
  else {
    uint64_t v9 = *(uint64_t **)a2;
  }
  uint64_t v10 = [NSString stringWithUTF8String:v9];
  uint64_t v11 = turi::neural_net::mlc_layer_weights::copy_float_array(a1, a2, a3);
  uint64_t v12 = [MEMORY[0x263F10658] tensorWithWidth:1 height:1 featureChannelCount:v8 * v7 batchSize:1 data:v11];
  [*(id *)(a1 + 40) setObject:v12 forKeyedSubscript:v10];
}

void sub_223E5F138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::mlc_layer_weights::add_optimizer_data(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6)
{
  v22[2] = *MEMORY[0x263EF8340];
  uint64_t v12 = (void *)MEMORY[0x22A615770]();
  if (*((char *)a2 + 23) >= 0) {
    id v13 = a2;
  }
  else {
    id v13 = (uint64_t *)*a2;
  }
  unint64_t v14 = [NSString stringWithUTF8String:v13];
  uint64_t v15 = turi::neural_net::mlc_layer_weights::copy_float_array(a1, a3, a4);
  int v16 = turi::neural_net::mlc_layer_weights::copy_float_array(a1, a5, a6);
  long long v17 = [*(id *)(a1 + 40) objectForKeyedSubscript:v14];

  if (v17)
  {
    long long v18 = [*(id *)(a1 + 40) objectForKeyedSubscript:v14];
    v22[0] = v15;
    v22[1] = v16;
    double v19 = [MEMORY[0x263EFF8C0] arrayWithObjects:v22 count:2];
    char v20 = [v18 bindOptimizerData:v19 deviceData:0];

    if ((v20 & 1) == 0)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      void *exception = "Failed to bind optimizer data with tensor";
      __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
    }
  }
}

void sub_223E5F2E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<turi::neural_net::float_buffer,std::allocator<turi::neural_net::float_buffer>,turi::neural_net::float_array const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x58uLL);
  __n128 result = std::__shared_ptr_emplace<turi::neural_net::float_buffer>::__shared_ptr_emplace[abi:ne180100]<turi::neural_net::float_array const&,std::allocator<turi::neural_net::float_buffer>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_223E5F37C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::neural_net::float_buffer>::__shared_ptr_emplace[abi:ne180100]<turi::neural_net::float_array const&,std::allocator<turi::neural_net::float_buffer>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D752D08;
  turi::neural_net::float_buffer::float_buffer((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_223E5F3D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::float_buffer::float_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  long long v5 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  long long __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v5, v6 + 8 * v7, (v6 + 8 * v7 - (uint64_t)v5) >> 3);
  turi::neural_net::float_buffer::float_buffer(a1, v4, &__p);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_223E5F518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = &unk_26D752D58;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  __n128 result = *(__n128 *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(__n128 *)(a1 + 72) = result;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
  *(void *)(a1 + 48) = &unk_26D752D58;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN4turi10neural_net12_GLOBAL__N_114WrapFloatArrayERKNS0_18shared_float_arrayE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  if ((*(uint64_t (**)(void))(**(void **)(v3 + 56) + 16))(*(void *)(v3 + 56))
     + 4 * *(void *)(v3 + 72) == a2)
  {
    turi::neural_net::shared_float_array::shared_float_array((turi::neural_net::shared_float_array *)&v7);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v5 = v8;
    long long v8 = 0uLL;
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 64);
    *(_OWORD *)(v4 + 56) = v5;
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)&v8 + 1);
    }
    *(_OWORD *)(v4 + 72) = v9;
    *(_OWORD *)(v4 + 88) = v10;
    uint64_t v7 = &unk_26D752D58;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::neural_net::shared_float_array>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  long long v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    void *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_223E5FA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  __n128 result = std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_223E5FAEC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::neural_net::shared_float_array>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

TCModelTrainerBackendGraphs *turi::proprietary::neural_net::mlc_human_action_recognition_backend::create_graphs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, float a7)
{
  v79[1] = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x22A615770]();
  long long v68 = objc_alloc_init(TCModelTrainerBackendGraphs);
  turi::neural_net::mlc_layer_weights::mlc_layer_weights((turi::neural_net::mlc_layer_weights *)v69);
  uint8x8_t v12 = (long long *)*a5;
  unint64_t v11 = (long long *)(a5 + 1);
  unint64_t v10 = v12;
  if (v12 != v11)
  {
    do
    {
      unint64_t v13 = v10 + 2;
      if (*((char *)v10 + 55) < 0) {
        unint64_t v13 = (void *)*((void *)v10 + 4);
      }
      unint64_t v14 = [NSString stringWithUTF8String:v13];
      if ([v14 containsString:@"conv"]
        && [v14 containsString:@"_weight"])
      {
        turi::neural_net::mlc_layer_weights::add_conv_weight((uint64_t)v69, v10 + 2, (uint64_t)v10 + 56);
      }
      else if ([v14 containsString:@"conv"] {
             && [v14 containsString:@"_bias"])
      }
      {
        turi::neural_net::mlc_layer_weights::add_conv_bias((uint64_t)v69, v10 + 2, (uint64_t)v10 + 56);
      }
      else if ([v14 containsString:@"batch_norm"])
      {
        turi::neural_net::mlc_layer_weights::add_flat_array((uint64_t)v69, v10 + 2, (uint64_t)v10 + 56);
      }

      uint64_t v15 = (long long *)*((void *)v10 + 1);
      if (v15)
      {
        do
        {
          unint64_t v16 = v15;
          uint64_t v15 = *(long long **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          unint64_t v16 = (long long *)*((void *)v10 + 2);
          BOOL v17 = *(void *)v16 == (void)v10;
          unint64_t v10 = v16;
        }
        while (!v17);
      }
      unint64_t v10 = v16;
    }
    while (v16 != v11);
  }
  id v61 = v69[5];
  float v18 = turi::neural_net::mlc_layer_weights::tensor_weights((turi::neural_net::mlc_layer_weights *)v69);
  [(TCModelTrainerBackendGraphs *)v68 setLayerWeights:v18];

  BOOL v19 = [NSString stringWithUTF8String:"stgcn_action_"];
  *(float *)&double v20 = a7;
  long long v60 = +[TCMLCHARDescriptor defineSTGCNActionDescriptor:v19 inputChannels:3 batchSize:a1 numFrames:a2 numKeypoints:a3 numClass:a4 dropout:v20];

  unint64_t v21 = [MEMORY[0x263F10658] tensorWithWidth:a3 height:3 featureChannelCount:a2 batchSize:a1];
  [v21 setLabel:@"input"];
  uint64_t v65 = [MEMORY[0x263F10658] tensorWithWidth:1 height:1 featureChannelCount:a4 batchSize:a1];
  [v65 setLabel:@"labels"];
  size_t v22 = [MEMORY[0x263F10658] tensorWithWidth:1 height:1 featureChannelCount:a4 batchSize:a1 fillWithData:1 dataType:0.0];
  [v22 setLabel:@"weights"];
  uint64_t v23 = objc_opt_new();
  unint64_t v24 = [NSString stringWithUTF8String:"stgcn_action_"];
  uint64_t v59 = +[TCMLCHARGraph defineSTGCNAction:v24 input:v21 graph:v23 descriptor:v60 weights:v61];

  double v55 = [MEMORY[0x263F10608] descriptorWithType:2 reductionType:2];
  uint64_t v63 = objc_msgSend(MEMORY[0x263F10610], "layerWithDescriptor:weights:");
  LODWORD(v25) = 1008981770;
  LODWORD(v26) = 981668463;
  LODWORD(v27) = 1.0;
  uint64_t v28 = [MEMORY[0x263F10618] descriptorWithLearningRate:2 gradientRescale:v25 regularizationType:v27 regularizationScale:v26];
  LODWORD(v29) = 1063675494;
  long long v56 = (void *)v28;
  uint64_t v67 = objc_msgSend(MEMORY[0x263F10640], "optimizerWithDescriptor:momentumScale:usesNesterovMomentum:", v29);
  long long v30 = (void *)MEMORY[0x263F10678];
  v79[0] = v23;
  std::string::size_type v31 = [MEMORY[0x263EFF8C0] arrayWithObjects:v79 count:1];
  uint64_t v32 = [v30 graphWithGraphObjects:v31 lossLayer:v63 optimizer:v67];
  [(TCModelTrainerBackendGraphs *)v68 setTrainingGraph:v32];

  long long v33 = [v21 label];
  uint64_t v77 = v33;
  int v78 = v21;
  uint64_t v34 = [NSDictionary dictionaryWithObjects:&v78 forKeys:&v77 count:1];
  [(TCModelTrainerBackendGraphs *)v68 setTrainingInputs:v34];

  uint64_t v35 = [v65 label];
  uint64_t v75 = v35;
  long long v76 = v65;
  char v36 = [NSDictionary dictionaryWithObjects:&v76 forKeys:&v75 count:1];
  [(TCModelTrainerBackendGraphs *)v68 setTrainingLossLabels:v36];

  char v37 = [v22 label];
  BOOL v73 = v37;
  double v74 = v22;
  uint64_t v38 = [NSDictionary dictionaryWithObjects:&v74 forKeys:&v73 count:1];
  [(TCModelTrainerBackendGraphs *)v68 setTrainingLossLabelWeights:v38];

  int v39 = [(TCModelTrainerBackendGraphs *)v68 trainingGraph];
  uint64_t v40 = [(TCModelTrainerBackendGraphs *)v68 trainingInputs];
  char v41 = [(TCModelTrainerBackendGraphs *)v68 trainingLossLabels];
  uint64_t v42 = [(TCModelTrainerBackendGraphs *)v68 trainingLossLabelWeights];
  LOBYTE(v38) = [v39 addInputs:v40 lossLabels:v41 lossLabelWeights:v42];

  if ((v38 & 1) == 0) {
    turi::proprietary::neural_net::mlc_human_action_recognition_backend::create_graphs(unsigned long,unsigned long,unsigned long,unsigned long,float,std::map<std::string,turi::neural_net::shared_float_array> const&,turi::neural_net::mlc_layer_weights *)::$_0::operator()();
  }
  uint64_t v43 = (void *)MEMORY[0x263F105E8];
  unint64_t v72 = v23;
  uint64_t v44 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v72 count:1];
  int v45 = [v43 graphWithGraphObjects:v44];
  [(TCModelTrainerBackendGraphs *)v68 setInferenceGraph:v45];

  long long v46 = [v21 label];
  unint64_t v70 = v46;
  long long v71 = v21;
  uint64_t v47 = [NSDictionary dictionaryWithObjects:&v71 forKeys:&v70 count:1];
  [(TCModelTrainerBackendGraphs *)v68 setInferenceInputs:v47];

  uint64_t v48 = [(TCModelTrainerBackendGraphs *)v68 inferenceGraph];
  uint64_t v49 = [(TCModelTrainerBackendGraphs *)v68 inferenceInputs];
  char v50 = [v48 addInputs:v49];

  if ((v50 & 1) == 0) {
    turi::proprietary::neural_net::mlc_human_action_recognition_backend::create_graphs(unsigned long,unsigned long,unsigned long,unsigned long,float,std::map<std::string,turi::neural_net::shared_float_array> const&,turi::neural_net::mlc_layer_weights *)::$_1::operator()();
  }
  uint64_t v51 = [MEMORY[0x263F10648] layerWithOperation:0];
  long long v52 = [(TCModelTrainerBackendGraphs *)v68 inferenceGraph];
  id v53 = (id)[v52 nodeWithLayer:v51 source:v59];

  if (a6) {
    turi::neural_net::mlc_layer_weights::operator=(a6, (uint64_t *)v69);
  }

  turi::neural_net::mlc_layer_weights::~mlc_layer_weights(v69);
  return v68;
}

void sub_223E6024C(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, ...)
{
  va_start(va, a13);

  turi::neural_net::mlc_layer_weights::~mlc_layer_weights((id *)va);
  _Unwind_Resume(a1);
}

TCModelTrainerBackendGraphs *turi::proprietary::neural_net::mlc_human_action_recognition_backend::create_graphs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, float a6)
{
  return turi::proprietary::neural_net::mlc_human_action_recognition_backend::create_graphs(a1, a2, a3, a4, a5, 0, a6);
}

void CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/SoundAnalysisPreprocessing.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_Vggish_default_instance_ = (uint64_t)&unk_26D755928;
  qword_2680893D0 = 0;
  dword_2680893D8 = 0;
  byte_2680893E0 = 1;
  CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_ = (uint64_t)&unk_26D7559C0;
  *(void *)algn_2680893F0 = 0;
  qword_268089400 = 0;
  byte_268089408 = 1;
}

void CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_223E60580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::SoundAnalysisPreprocessing_Vggish(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *(void *)this = &unk_26D755928;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)&CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_Vggish_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_223E605F4(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::~SoundAnalysisPreprocessing_Vggish(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *(void *)this = &unk_26D755928;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D755928;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223E60704(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>);
  }
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this, char **a2, unsigned int a3)
{
  do
  {
    unint64_t v4 = *a2;
    if (*a2 >= a2[1])
    {
      unint64_t TagFallback = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::ByteSizeLong(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::IsInitialized(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  return 1;
}

void *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing.Vggish");
}

CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SoundAnalysisPreprocessing(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  *(void *)this = &unk_26D7559C0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)&CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_223E60864(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::~SoundAnalysisPreprocessing(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  *(void *)this = &unk_26D7559C0;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::~SoundAnalysisPreprocessing(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SharedDtor(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 28);
  if (v1)
  {
    uint64_t v2 = this;
    if (v1 == 20)
    {
      this = *(void *)(this + 16);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
    }
    *(_DWORD *)(v2 + 28) = 0;
  }
  return this;
}

uint64_t *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::default_instance(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  return &CoreML::Specification::CoreMLModels::_SoundAnalysisPreprocessing_default_instance_;
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223E609DC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>);
  }
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::Clear(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_DWORD *)(this + 28) == 20)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      long long v5 = *(unsigned __int8 **)a2;
      unint64_t v6 = *((void *)a2 + 1);
      if (*(void *)a2 < v6) {
        break;
      }
      uint64_t v8 = 0;
LABEL_21:
      unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0) {
        goto LABEL_22;
      }
LABEL_8:
      if (v9 != 162 || (v9 & 0xFFFFFFF8) != 0xA0) {
        goto LABEL_22;
      }
      if (*((_DWORD *)this + 7) != 20)
      {
        *((_DWORD *)this + 7) = 20;
        operator new();
      }
      unint64_t v11 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v11 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v11;
        *(void *)a2 = v11 + 1;
      }
      unint64_t v13 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v13 & 0x8000000000000000) == 0)
      {
        int v15 = v13;
        uint64_t result = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::MergePartialFromCodedStream((CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *)v13, (char **)a2, v14);
        if (!result) {
          return result;
        }
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v15)) {
          continue;
        }
      }
      return 0;
    }
    uint64_t v7 = v5 + 1;
    uint64_t v8 = *v5;
    if ((char)*v5 < 1)
    {
      if ((unint64_t)v7 < v6)
      {
        int v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(void *)a2 = v5 + 2;
          unint64_t v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_8;
        }
      }
      goto LABEL_21;
    }
    *(void *)a2 = v7;
    unint64_t v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0) {
      goto LABEL_8;
    }
LABEL_22:
    if (!v9 || (v9 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_223E60C10(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_DWORD *)(this + 28) == 20) {
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x14, *(void *)(this + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::ByteSizeLong(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  if (*((_DWORD *)this + 7) == 20)
  {
    *(_DWORD *)(*((void *)this + 2) + 16) = 0;
    uint64_t v1 = 3;
  }
  else
  {
    uint64_t v1 = 0;
  }
  *((_DWORD *)this + 6) = v1;
  return v1;
}

std::string *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *a2)
{
  char v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (*((_DWORD *)a2 + 7) == 20)
  {
    if (HIDWORD(v3[1].__r_.__value_.__r.__words[0]) != 20)
    {
      HIDWORD(v3[1].__r_.__value_.__r.__words[0]) = 20;
      operator new();
    }
    uint64_t v5 = *(void *)(*((void *)a2 + 2) + 8);
    if (v5)
    {
      unint64_t v6 = (unint64_t *)(v3->__r_.__value_.__r.__words[2] + 8);
      return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v6, v5 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  return this;
}

void sub_223E60D60(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::IsInitialized(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  return 1;
}

void *CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.SoundAnalysisPreprocessing");
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish::GetCachedSize(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish *this)
{
  return *((unsigned int *)this + 4);
}

void CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
}

uint64_t CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::GetCachedSize(CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing_Vggish>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  char v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_223E60EA8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t boost::random::detail::generate_uniform_int<boost::random::rand48,unsigned long>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = a3 - a2;
  if (a3 == a2) {
    return a2;
  }
  if (v4 == 0x7FFFFFFF)
  {
    unint64_t v6 = (0x5DEECE66DLL * *a1 + 11) & 0xFFFFFFFFFFFFLL;
    *a1 = v6;
    return a2 + (v6 >> 17);
  }
  else if (v4 >> 31)
  {
    if (v4 == -1) {
      unint64_t v8 = 0x200000000;
    }
    else {
      unint64_t v8 = (v4 + 1) >> 31;
    }
    while (1)
    {
      uint64_t v7 = 0;
      if (v8) {
        break;
      }
      unint64_t v10 = 1;
LABEL_15:
      unint64_t v13 = boost::random::detail::generate_uniform_int<boost::random::rand48,unsigned long>(a1, 0, v4 / v10);
      if (is_mul_ok(v10, v13))
      {
        unint64_t v14 = v13 * v10 + v7;
        if (!__CFADD__(v13 * v10, v7) && v14 <= v4) {
          return v14 + a2;
        }
      }
    }
    uint64_t v9 = *a1;
    unint64_t v10 = 1;
    while (1)
    {
      unint64_t v11 = v10;
      unint64_t v12 = 0x5DEECE66DLL * v9 + 11;
      uint64_t v9 = v12 & 0xFFFFFFFFFFFFLL;
      v7 += ((v12 >> 17) & 0x7FFFFFFF) * v10;
      v10 <<= 31;
      if (v10 - v11 == v4 + 1 - v11) {
        break;
      }
      if (v10 > v8)
      {
        *a1 = v9;
        goto LABEL_15;
      }
    }
    *a1 = v9;
  }
  else
  {
    uint64_t v15 = *a1;
    do
    {
      unint64_t v16 = 0x5DEECE66DLL * v15 + 11;
      uint64_t v15 = v16 & 0xFFFFFFFFFFFFLL;
      unsigned int v17 = ((v16 >> 17) & 0x7FFFFFFF) / (0x80000000 / ((int)v4 + 1));
    }
    while (v17 > v4);
    *a1 = v15;
    return a2 + v17;
  }
  return v7;
}

turi::neural_net::mlc_compute_context *turi::proprietary::neural_net::mlc_internal_compute_context::mlc_internal_compute_context(turi::proprietary::neural_net::mlc_internal_compute_context *this, MLCDevice *a2)
{
  uint64_t result = turi::neural_net::mlc_compute_context::mlc_compute_context(this, a2);
  *(void *)uint64_t result = &unk_26D755A88;
  return result;
}

void turi::proprietary::neural_net::mlc_internal_compute_context::create_style_transfer(turi::neural_net::mlc_compute_context *a1)
{
}

void sub_223E610C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void std::make_unique<turi::proprietary::neural_net::mlc_style_transfer_backend,MLCDevice * {__strong},std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&>()
{
}

void sub_223E61144(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B1C4036CF6ECBLL);
  _Unwind_Resume(a1);
}

void turi::proprietary::neural_net::mlc_internal_compute_context::~mlc_internal_compute_context(id *this)
{
  turi::neural_net::mlc_compute_context::~mlc_compute_context(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::proprietary::neural_net::mlc_style_transfer_backend::mlc_style_transfer_backend(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  v147[3] = *MEMORY[0x263EF8340];
  id v128 = a2;
  *(void *)a1 = &unk_26D755B00;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 16CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  uint64_t v124 = a1 + 192;
  uint64_t v131 = a1;
  uint64_t v6 = turi::neural_net::mlc_layer_weights::mlc_layer_weights((turi::neural_net::mlc_layer_weights *)(a1 + 192));
  context = (void *)MEMORY[0x22A615770](v6);
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_training");
  *(unsigned char *)(a1 + 8) = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, 0.0) != 0.0;
  if (SBYTE7(v146) < 0) {
    operator delete((void *)__src);
  }
  long long __src = xmmword_2246BA060;
  long long v146 = xmmword_2246BA070;
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 144), (char *)&__src, (uint64_t)v147, 4uLL);
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_textel_density");
  float array_map_scalar = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, 256.0);
  if (SBYTE7(v146) < 0) {
    operator delete((void *)__src);
  }
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_width");
  float v8 = (float)(int)array_map_scalar;
  float v9 = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, v8);
  if (SBYTE7(v146) < 0) {
    operator delete((void *)__src);
  }
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_height");
  float v10 = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, v8);
  if (SBYTE7(v146) < 0) {
    operator delete((void *)__src);
  }
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_batch_size");
  float v11 = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, 1.0);
  if (SBYTE7(v146) < 0) {
    operator delete((void *)__src);
  }
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_style_strength");
  float v12 = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, 5.0);
  if (SBYTE7(v146) < 0) {
    operator delete((void *)__src);
  }
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_algorithm");
  float v13 = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, 0.0);
  if (SBYTE7(v146) < 0) {
    operator delete((void *)__src);
  }
  int v125 = (id *)(a1 + 16);
  unsigned int v122 = (int)v13;
  id v132 = -[TCMLComputeStyleTransferDescriptor initTrain:algorithmType:]([TCMLComputeStyleTransferDescriptor alloc], "initTrain:algorithmType:", *(unsigned __int8 *)(a1 + 8));
  uint64_t v14 = [MEMORY[0x263F10658] tensorWithWidth:(uint64_t)v9 height:(uint64_t)v10 featureChannelCount:3 batchSize:(uint64_t)v11];
  uint64_t v15 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v14;

  uint64_t v16 = [MEMORY[0x263F10658] tensorWithWidth:(uint64_t)v9 height:(uint64_t)v10 featureChannelCount:3 batchSize:(uint64_t)v11];
  unsigned int v17 = *(void **)(a1 + 40);
  *(void *)(a1 + 4CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(this, 0) = v16;

  uint64_t v18 = [MEMORY[0x263F10658] tensorWithWidth:(uint64_t)v9 height:(uint64_t)v10 featureChannelCount:3 batchSize:(uint64_t)v11];
  BOOL v19 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v18;

  uint64_t v20 = [MEMORY[0x263F10658] tensorWithWidth:(uint64_t)v9 height:(uint64_t)v10 featureChannelCount:3 batchSize:(uint64_t)v11];
  unint64_t v21 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v20;

  uint64_t v22 = [MEMORY[0x263F10658] tensorWithWidth:(uint64_t)v9 height:(uint64_t)v10 featureChannelCount:3 batchSize:(uint64_t)v11];
  uint64_t v23 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v22;

  uint64_t v24 = [MEMORY[0x263F10658] tensorWithWidth:512 height:512 featureChannelCount:3 batchSize:(uint64_t)v11];
  double v25 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = v24;

  uint64_t v26 = [MEMORY[0x263F10658] tensorWithWidth:512 height:512 featureChannelCount:3 batchSize:(uint64_t)v11];
  double v27 = *(void **)(a1 + 80);
  *(void *)(a1 + 8CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(this, 0) = v26;

  uint64_t v28 = (void *)MEMORY[0x263F10658];
  double v29 = __exp10(v12);
  *(float *)&double v29 = v29;
  uint64_t v30 = [v28 tensorWithWidth:1 height:1 featureChannelCount:1 batchSize:(uint64_t)v11 fillWithData:1 dataType:v29];
  std::string::size_type v31 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = v30;

  [v132 setContentTensor:*(void *)(a1 + 32)];
  [v132 setStyleTensor:*(void *)(a1 + 40)];
  [v132 setMeanTensor:*(void *)(a1 + 56)];
  [v132 setVarianceTensor:*(void *)(a1 + 64)];
  [v132 setStyleLossWeightTensor:*(void *)(a1 + 168)];
  [v132 setPixelScaleTensor:*(void *)(a1 + 48)];
  [v132 setInferenceContentTensor:*(void *)(a1 + 80)];
  [v132 setInferencePixelScaleTensor:*(void *)(a1 + 88)];
  [*(id *)(a1 + 32) setLabel:@"content_tensor"];
  [*(id *)(a1 + 40) setLabel:@"style_tensor"];
  [*(id *)(a1 + 56) setLabel:@"mean_tensor"];
  [*(id *)(a1 + 168) setLabel:@"style_loss_weight_tensor"];
  [*(id *)(a1 + 48) setLabel:@"pixel_scale_tensor"];
  [*(id *)(a1 + 64) setLabel:@"variance_tensor"];
  [*(id *)(a1 + 80) setLabel:@"inference_content_tensor"];
  [*(id *)(a1 + 88) setLabel:@"inference_pixel_scale_tensor"];
  turi::neural_net::mlc_layer_weights::mlc_layer_weights((turi::neural_net::mlc_layer_weights *)&__src);
  uint64_t v32 = (long long *)(a4 + 1);
  long long v33 = (long long *)*a4;
  if ((void *)*a4 != a4 + 1)
  {
    do
    {
      uint64_t v34 = v33 + 2;
      if (*((char *)v33 + 55) < 0) {
        uint64_t v34 = (void *)*((void *)v33 + 4);
      }
      uint64_t v35 = [NSString stringWithUTF8String:v34];
      if (([v35 containsString:@"_optimizer_data"] & 1) == 0)
      {
        if ([v35 containsString:@"conv"])
        {
          if ([v35 containsString:@"_weight"])
          {
            turi::neural_net::mlc_layer_weights::add_conv_weight((uint64_t)&__src, v33 + 2, (uint64_t)v33 + 56);
          }
          else if ([v35 containsString:@"_bias"])
          {
            turi::neural_net::mlc_layer_weights::add_conv_bias((uint64_t)&__src, v33 + 2, (uint64_t)v33 + 56);
          }
        }
        else if ([v35 containsString:@"inst"])
        {
          turi::neural_net::mlc_layer_weights::add_flat_array((uint64_t)&__src, v33 + 2, (uint64_t)v33 + 56);
        }
        if (*((char *)v33 + 55) >= 0) {
          size_t v36 = *((unsigned __int8 *)v33 + 55);
        }
        else {
          size_t v36 = *((void *)v33 + 5);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)v135, v36 + 17);
        if (v136 >= 0) {
          char v37 = v135;
        }
        else {
          char v37 = (void **)v135[0];
        }
        if (v36)
        {
          if (*((char *)v33 + 55) >= 0) {
            uint64_t v38 = v33 + 2;
          }
          else {
            uint64_t v38 = (const void *)*((void *)v33 + 4);
          }
          memmove(v37, v38, v36);
        }
        strcpy((char *)v37 + v36, "_optimizer_data_1");
        uint64_t v39 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a4, (const void **)v135);
        uint64_t v40 = (uint64_t)a4;
        if (*((char *)v33 + 55) >= 0) {
          size_t v41 = *((unsigned __int8 *)v33 + 55);
        }
        else {
          size_t v41 = *((void *)v33 + 5);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v41 + 17);
        if (v134 >= 0) {
          uint64_t v42 = __p;
        }
        else {
          uint64_t v42 = (void **)__p[0];
        }
        if (v41)
        {
          if (*((char *)v33 + 55) >= 0) {
            uint64_t v43 = v33 + 2;
          }
          else {
            uint64_t v43 = (const void *)*((void *)v33 + 4);
          }
          memmove(v42, v43, v41);
        }
        strcpy((char *)v42 + v41, "_optimizer_data_2");
        a4 = (void *)v40;
        uint64_t v44 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(v40, (const void **)__p);
        if (v32 != (long long *)v39 && v32 != (long long *)v44) {
          turi::neural_net::mlc_layer_weights::add_optimizer_data((uint64_t)&__src, (uint64_t *)v33 + 4, (long long *)v135, v39 + 56, (long long *)__p, v44 + 56);
        }
        a1 = v131;
        if (v134 < 0) {
          operator delete(__p[0]);
        }
        if (v136 < 0) {
          operator delete(v135[0]);
        }
      }

      int v45 = (long long *)*((void *)v33 + 1);
      if (v45)
      {
        do
        {
          long long v46 = v45;
          int v45 = *(long long **)v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          long long v46 = (long long *)*((void *)v33 + 2);
          BOOL v47 = *(void *)v46 == (void)v33;
          long long v33 = v46;
        }
        while (!v47);
      }
      long long v33 = v46;
    }
    while (v46 != v32);
  }
  turi::neural_net::mlc_layer_weights::operator=(v124, (uint64_t *)&__src);
  turi::neural_net::mlc_layer_weights::~mlc_layer_weights((id *)&__src);
  [v132 setWeights:*(void *)(a1 + 232)];
  std::string::basic_string[abi:ne180100]<0>(&__src, "optimizer_learning_rate");
  float v48 = turi::neural_net::get_array_map_scalar((uint64_t)a4, (const void **)&__src, 0.001);
  if (SBYTE7(v146) < 0) {
    operator delete((void *)__src);
  }
  std::string::basic_string[abi:ne180100]<0>(&__src, "st_training_iterations");
  float v49 = turi::neural_net::get_array_map_scalar(a3, (const void **)&__src, 0.0);
  if (SBYTE7(v146) < 0) {
    operator delete((void *)__src);
  }
  std::string::basic_string[abi:ne180100]<0>(&__src, "optimizer_beta1");
  float v50 = turi::neural_net::get_array_map_scalar((uint64_t)a4, (const void **)&__src, 0.9);
  if (SBYTE7(v146) < 0) {
    operator delete((void *)__src);
  }
  std::string::basic_string[abi:ne180100]<0>(&__src, "optimizer_beta2");
  float v51 = turi::neural_net::get_array_map_scalar((uint64_t)a4, (const void **)&__src, 0.999);
  if (SBYTE7(v146) < 0) {
    operator delete((void *)__src);
  }
  std::string::basic_string[abi:ne180100]<0>(&__src, "optimizer_epsilon");
  float v52 = turi::neural_net::get_array_map_scalar((uint64_t)a4, (const void **)&__src, 0.00000001);
  if (SBYTE7(v146) < 0) {
    operator delete((void *)__src);
  }
  std::string::basic_string[abi:ne180100]<0>(&__src, "optimizer_time_step");
  turi::neural_net::get_array_map_scalar((uint64_t)a4, (const void **)&__src, (float)((unint64_t)v49 + 1));
  if (SBYTE7(v146) < 0) {
    operator delete((void *)__src);
  }
  LODWORD(v54) = 1.0;
  *(float *)&double v53 = v48;
  uint64_t v120 = [MEMORY[0x263F10618] descriptorWithLearningRate:0 gradientRescale:v53 regularizationType:v54 regularizationScale:0.0];
  *(float *)&double v55 = v50;
  *(float *)&double v56 = v51;
  *(float *)&double v57 = v52;
  std::string::size_type v127 = objc_msgSend(MEMORY[0x263F10598], "optimizerWithDescriptor:beta1:beta2:epsilon:timeStep:", v55, v56, v57);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v130 = (void *)[MEMORY[0x263EFFA68] mutableCopy];
    v126 = (void *)[MEMORY[0x263EFFA78] mutableCopy];
    uint64_t v58 = objc_msgSend(MEMORY[0x263F105E0], "tc_trainingGraphForStyleTransferDescriptor:stopGradientList:lossTensorDictionary:algorithm:", v132, v130);
    uint64_t v59 = (void *)MEMORY[0x263F10678];
    long long v119 = (void *)v58;
    uint64_t v144 = v58;
    long long v60 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v144 count:1];
    uint64_t v61 = [v59 graphWithGraphObjects:v60 lossLayer:0 optimizer:v127];
    long long v62 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v61;

    [*(id *)(a1 + 24) stopGradientForTensors:v130];
    uint64_t v63 = [*(id *)(a1 + 24) layers];
    char v64 = [*(id *)(a1 + 24) layers];
    long long v123 = objc_msgSend(v63, "objectAtIndexedSubscript:", objc_msgSend(v64, "count") - 1);

    uint64_t v65 = [*(id *)(a1 + 24) sourceGradientTensorsForLayer:v123];
    uint64_t v66 = [v65 firstObject];
    uint64_t v67 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v66;

    long long v68 = *(void **)(a1 + 24);
    size_t v69 = [*(id *)(a1 + 32) label];
    v142[0] = v69;
    unint64_t v70 = *(void **)(a1 + 40);
    v143[0] = *(void *)(a1 + 32);
    long long v71 = [v70 label];
    v142[1] = v71;
    unint64_t v72 = *(void **)(a1 + 48);
    v143[1] = *(void *)(a1 + 40);
    BOOL v73 = [v72 label];
    v142[2] = v73;
    double v74 = *(void **)(a1 + 56);
    v143[2] = *(void *)(a1 + 48);
    uint64_t v75 = [v74 label];
    v142[3] = v75;
    long long v76 = *(void **)(a1 + 64);
    v143[3] = *(void *)(a1 + 56);
    uint64_t v77 = [v76 label];
    v142[4] = v77;
    v143[4] = *(void *)(a1 + 64);
    int v78 = [*(id *)(a1 + 168) label];
    v142[5] = v78;
    v143[5] = *(void *)(a1 + 168);
    int v79 = [*(id *)(a1 + 72) label];
    v142[6] = v79;
    v143[6] = *(void *)(a1 + 72);
    std::string::size_type v80 = [NSDictionary dictionaryWithObjects:v143 forKeys:v142 count:7];
    LOBYTE(v68) = [v68 addInputs:v80 lossLabels:0];

    if ((v68 & 1) == 0) {
      turi::proprietary::neural_net::mlc_style_transfer_backend::mlc_style_transfer_backend(MLCDevice *,std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&)::$_0::operator()();
    }
    uint64_t v81 = [v126 objectForKeyedSubscript:@"style_loss"];
    long long v82 = *(void **)(a1 + 96);
    *(void *)(a1 + 96) = v81;

    uint64_t v83 = [v126 objectForKeyedSubscript:@"content_loss"];
    uint64_t v84 = *(void **)(a1 + 104);
    *(void *)(a1 + 104) = v83;

    [*(id *)(a1 + 96) setLabel:@"style_loss"];
    [*(id *)(a1 + 104) setLabel:@"content_loss"];
    uint64_t v85 = *(void **)(a1 + 24);
    uint64_t v86 = [*(id *)(a1 + 96) label];
    v140[0] = v86;
    uint64_t v87 = *(void **)(a1 + 104);
    v141[0] = *(void *)(a1 + 96);
    uint64_t v88 = [v87 label];
    v140[1] = v88;
    v141[1] = *(void *)(a1 + 104);
    uint64_t v89 = [NSDictionary dictionaryWithObjects:v141 forKeys:v140 count:2];
    LOBYTE(v85) = [v85 addOutputs:v89];

    if ((v85 & 1) == 0) {
      turi::proprietary::neural_net::mlc_style_transfer_backend::mlc_style_transfer_backend(MLCDevice *,std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&)::$_1::operator()();
    }
    uint64_t v90 = [*(id *)(a1 + 96) descriptor];
    size_t v91 = [v90 tensorAllocationSizeInBytes];

    v92 = malloc_type_malloc(v91, 0x6A333FAFuLL);
    *(void *)(a1 + 128) = v92;
    uint64_t v93 = [MEMORY[0x263F10660] dataWithBytesNoCopy:v92 length:v91];
    uint64_t v94 = *(void **)(a1 + 112);
    *(void *)(a1 + 112) = v93;

    unint64_t v95 = [*(id *)(a1 + 104) descriptor];
    size_t v96 = [v95 tensorAllocationSizeInBytes];

    int v97 = malloc_type_malloc(v96, 0xCEC65F58uLL);
    *(void *)(a1 + 136) = v97;
    uint64_t v98 = [MEMORY[0x263F10660] dataWithBytesNoCopy:v97 length:v96];
    int v99 = *(void **)(a1 + 120);
    *(void *)(a1 + 12CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::New(this, 0) = v98;

    int v100 = [*(id *)(a1 + 168) descriptor];
    uint64_t v101 = [v100 tensorAllocationSizeInBytes];

    uint64_t v102 = (void *)MEMORY[0x263EFF990];
    id v103 = [*(id *)(a1 + 168) data];
    uint64_t v104 = objc_msgSend(v102, "dataWithBytes:length:", objc_msgSend(v103, "bytes"), v101);
    double v105 = *(void **)(a1 + 184);
    *(void *)(a1 + 184) = v104;

    uint64_t v106 = TCMLComputeWrapBuffer(*(void **)(a1 + 184));
    long long v107 = *(void **)(a1 + 176);
    *(void *)(a1 + 176) = v106;

    if (([*(id *)(a1 + 24) compileWithOptions:0 device:v128] & 1) == 0) {
      turi::proprietary::neural_net::mlc_style_transfer_backend::mlc_style_transfer_backend(MLCDevice *,std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&)::$_2::operator()();
    }
  }
  else
  {
    uint64_t v108 = objc_msgSend(MEMORY[0x263F105E0], "tc_inferenceGraphForStyleTransferDescriptor:algorithm:", v132, v122);
    std::string::size_type v109 = (void *)MEMORY[0x263F105E8];
    uint64_t v130 = (void *)v108;
    uint64_t v139 = v108;
    unsigned int v110 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v139 count:1];
    uint64_t v111 = [v109 graphWithGraphObjects:v110];
    uint64_t v112 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v111;

    long long v113 = *(void **)(a1 + 16);
    unsigned int v114 = [*(id *)(a1 + 80) label];
    v137[0] = v114;
    std::string::size_type v115 = *(void **)(a1 + 88);
    v138[0] = *(void *)(a1 + 80);
    v116 = [v115 label];
    v137[1] = v116;
    v138[1] = *(void *)(a1 + 88);
    long long v117 = [NSDictionary dictionaryWithObjects:v138 forKeys:v137 count:2];
    LOBYTE(v113) = [v113 addInputs:v117];

    if ((v113 & 1) == 0) {
      turi::proprietary::neural_net::mlc_style_transfer_backend::mlc_style_transfer_backend(MLCDevice *,std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&)::$_3::operator()();
    }
    if (([*v125 compileWithOptions:0 device:v128] & 1) == 0) {
      turi::proprietary::neural_net::mlc_style_transfer_backend::mlc_style_transfer_backend(MLCDevice *,std::map<std::string,turi::neural_net::shared_float_array> const&,std::map<std::string,turi::neural_net::shared_float_array> const&)::$_4::operator()();
    }
  }

  return a1;
}

void sub_223E62088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, id *a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  turi::neural_net::mlc_layer_weights::~mlc_layer_weights(a13);
  uint64_t v32 = *(void **)(a18 + 144);
  if (v32)
  {
    *(void *)(a18 + 152) = v32;
    operator delete(v32);
  }

  _Unwind_Resume(a1);
}

void turi::proprietary::neural_net::mlc_style_transfer_backend::export_weights(id *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = (void *)MEMORY[0x22A615770]();
  [this[3] synchronizeUpdates];
  turi::neural_net::mlc_layer_weights::export_weights_and_optimizer_data((turi::neural_net::mlc_layer_weights *)(this + 24), a2);
  turi::proprietary::neural_net::mlc_style_transfer_backend::get_optimizer_state(this, (uint64_t)&v15);
  uint64_t v5 = v15;
  if (v15 != v16)
  {
    do
    {
      unsigned int v17 = (long long *)(v5 + 4);
      uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v5 + 4, (uint64_t)&std::piecewise_construct, &v17);
      uint64_t v7 = v6;
      float v9 = v5[8];
      float v8 = v5[9];
      if (v8) {
        atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
      }
      float v10 = (std::__shared_weak_count *)v6[9];
      v7[8] = (uint64_t)v9;
      v7[9] = (uint64_t)v8;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      long long v11 = *((_OWORD *)v5 + 6);
      *((_OWORD *)v7 + 5) = *((_OWORD *)v5 + 5);
      *((_OWORD *)v7 + 6) = v11;
      float v12 = v5[1];
      if (v12)
      {
        do
        {
          float v13 = (void **)v12;
          float v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          float v13 = (void **)v5[2];
          BOOL v14 = *v13 == v5;
          uint64_t v5 = v13;
        }
        while (!v14);
      }
      uint64_t v5 = v13;
    }
    while (v13 != v16);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v15, v16[0]);
}

void sub_223E62538(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void turi::proprietary::neural_net::mlc_style_transfer_backend::get_optimizer_state(id *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = [this[3] optimizer];
  [v3 learningRate];
  int v5 = v4;
  uint64_t v6 = operator new(0x28uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_26D752FB0;
  void v6[3] = &unk_26D753000;
  *((_DWORD *)v6 + 8) = v5;
  *(void *)&long long v18 = v6 + 3;
  *((void *)&v18 + 1) = v6;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>((uint64_t **)a2, "optimizer_learning_rate", &v18);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  [v3 beta1];
  int v8 = v7;
  float v9 = operator new(0x28uLL);
  v9[1] = 0;
  void v9[2] = 0;
  void *v9 = &unk_26D752FB0;
  void v9[3] = &unk_26D753000;
  *((_DWORD *)v9 + 8) = v8;
  *(void *)&long long v18 = v9 + 3;
  *((void *)&v18 + 1) = v9;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>((uint64_t **)a2, "optimizer_beta1", &v18);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  [v3 beta2];
  int v11 = v10;
  float v12 = operator new(0x28uLL);
  v12[1] = 0;
  _OWORD v12[2] = 0;
  *float v12 = &unk_26D752FB0;
  void v12[3] = &unk_26D753000;
  *((_DWORD *)v12 + 8) = v11;
  *(void *)&long long v18 = v12 + 3;
  *((void *)&v18 + 1) = v12;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>((uint64_t **)a2, "optimizer_beta2", &v18);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  [v3 epsilon];
  int v14 = v13;
  uint64_t v15 = operator new(0x28uLL);
  v15[1] = 0;
  void v15[2] = 0;
  void *v15 = &unk_26D752FB0;
  v15[3] = &unk_26D753000;
  *((_DWORD *)v15 + 8) = v14;
  *(void *)&long long v18 = v15 + 3;
  *((void *)&v18 + 1) = v15;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>((uint64_t **)a2, "optimizer_epsilon", &v18);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  unint64_t v16 = [v3 timeStep];
  unsigned int v17 = (float *)operator new(0x28uLL);
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *(void *)unsigned int v17 = &unk_26D752FB0;
  *((void *)v17 + 3) = &unk_26D753000;
  v17[8] = (float)v16;
  *(void *)&long long v18 = v17 + 6;
  *((void *)&v18 + 1) = v17;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[5],std::shared_ptr<turi::neural_net::deferred_float_array>>((uint64_t **)a2, "optimizer_time_step", &v18);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
}

void sub_223E62828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v10, *(void **)(v10 + 8));
  _Unwind_Resume(a1);
}

void turi::proprietary::neural_net::mlc_style_transfer_backend::set_learning_rate(id *this, float a2)
{
  int v4 = (void *)MEMORY[0x22A615770]();
  if (*((unsigned char *)this + 8))
  {
    int v5 = [this[3] optimizer];
    *(float *)&double v6 = a2;
    [v5 setLearningRate:v6];
  }
}

void sub_223E628EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::proprietary::neural_net::mlc_style_transfer_backend::train(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  context = (void *)MEMORY[0x22A615770]();
  if (*(unsigned char *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "input");
    uint64_t v5 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)&__p);
    if (v23 < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "labels");
    uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)&__p);
    if (v23 < 0) {
      operator delete(__p);
    }
    if (a2 + 8 != v5)
    {
      if (a2 + 8 != v6)
      {
        int v7 = [*(id *)(a1 + 48) descriptor];
        uint64_t v20 = [v7 shape];

        int v8 = [v20 objectAtIndexedSubscript:3];
        LODWORD(v7) = [v8 intValue];

        float v9 = [v20 objectAtIndexedSubscript:2];
        LODWORD(v8) = [v9 intValue];

        uint64_t v10 = [v20 objectAtIndexedSubscript:1];
        LODWORD(v9) = [v10 intValue];

        int v11 = [v20 objectAtIndexedSubscript:0];
        int v12 = [v11 intValue];

        uint64_t v13 = 4 * (int)v7 * (uint64_t)(int)v8 * (int)v9 * v12;
        uint64_t v18 = [MEMORY[0x263EFF990] dataWithLength:v13];
        uint64_t v17 = [MEMORY[0x263EFF990] dataWithLength:v13];
        uint64_t v19 = [MEMORY[0x263EFF990] dataWithLength:v13];
        +[TCMPSStyleTransfer populateMeanCWH:v18 height:(int)v8 width:(int)v7];
        +[TCMPSStyleTransfer populateVarianceCWH:v17 height:(int)v8 width:(int)v7];
        +[TCMPSStyleTransfer populateMultiplication:v19];
        int v14 = (uint64_t *)(v5 + 56);
        turi::neural_net::convert_hwc_array_to_chw_data(v14);
        objc_claimAutoreleasedReturnValue();
        turi::neural_net::convert_hwc_array_to_chw_data((uint64_t *)(v6 + 56));
        objc_claimAutoreleasedReturnValue();
        (*(uint64_t (**)(uint64_t *))(*v14 + 32))(v14);
        v21[0] = 0;
        v21[1] = v21;
        v21[2] = 0x3812000000;
        v21[3] = __Block_byref_object_copy__0;
        v21[4] = __Block_byref_object_dispose__0;
        v21[5] = "";
        operator new();
      }
      turi::proprietary::neural_net::mlc_style_transfer_backend::train(std::map<std::string,turi::neural_net::shared_float_array> const&)::$_1::operator()();
    }
    turi::proprietary::neural_net::mlc_style_transfer_backend::train(std::map<std::string,turi::neural_net::shared_float_array> const&)::$_0::operator()();
  }
  std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<true,0>(&__p);
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](a3, (const void **)&__p, 1);
  uint64_t v24 = &unk_26D752D58;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v23 < 0) {
    operator delete(__p);
  }
}

void sub_223E635A4(_Unwind_Exception *a1)
{
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  return result;
}

uint64_t *__Block_byref_object_dispose__0(uint64_t a1)
{
  return std::promise<turi::neural_net::shared_float_array>::~promise((uint64_t *)(a1 + 48));
}

void ___ZN4turi11proprietary10neural_net26mlc_style_transfer_backend5trainERKNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10neural_net18shared_float_arrayENS3_4lessISA_EENS8_INS3_4pairIKSA_SC_EEEEEE_block_invoke(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = [v5 localizedDescription];
    int v7 = std::runtime_error::runtime_error(&v33, v6);
    std::make_exception_ptr[abi:ne180100]<std::runtime_error>(v7);
  }
  uint64_t v8 = a1[7];
  id v9 = [a2 data];
  uint64_t v10 = [v9 bytes];

  uint64_t v11 = *(void *)(a1[4] + 8);
  uint64_t v12 = a1[8];
  uint64_t v13 = operator new(8uLL);
  long long __p = v13;
  *uint64_t v13 = v12;
  double v29 = v13 + 1;
  uint64_t v30 = v13 + 1;
  turi::neural_net::shared_float_array::copy(v10, (uint64_t)&__p, (uint64_t)v31);
  std::promise<turi::neural_net::shared_float_array>::set_value((uint64_t *)(v11 + 48), (uint64_t)v31);
  v31[0] = &unk_26D752D58;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (__p)
  {
    double v29 = __p;
    operator delete(__p);
  }
  uint64_t v14 = [*(id *)(v8 + 112) bytes];
  uint64_t v15 = *(void *)(a1[5] + 8);
  uint64_t v16 = a1[8];
  uint64_t v17 = operator new(8uLL);
  double v25 = v17;
  *uint64_t v17 = v16;
  uint64_t v26 = v17 + 1;
  double v27 = v17 + 1;
  turi::neural_net::shared_float_array::copy(v14, (uint64_t)&v25, (uint64_t)v31);
  std::promise<turi::neural_net::shared_float_array>::set_value((uint64_t *)(v15 + 48), (uint64_t)v31);
  v31[0] = &unk_26D752D58;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  uint64_t v18 = [*(id *)(v8 + 120) bytes];
  uint64_t v19 = *(void *)(a1[6] + 8);
  uint64_t v20 = a1[8];
  unint64_t v21 = operator new(8uLL);
  uint64_t v22 = v21;
  void *v21 = v20;
  char v23 = v21 + 1;
  uint64_t v24 = v21 + 1;
  turi::neural_net::shared_float_array::copy(v18, (uint64_t)&v22, (uint64_t)v31);
  std::promise<turi::neural_net::shared_float_array>::set_value((uint64_t *)(v19 + 48), (uint64_t)v31);
  v31[0] = &unk_26D752D58;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v22)
  {
    char v23 = v22;
    operator delete(v22);
  }
}

void sub_223E63CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void turi::proprietary::neural_net::mlc_style_transfer_backend::predict(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v6 = (void *)MEMORY[0x22A615770]();
  if (!*(unsigned char *)(a1 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, "input");
    uint64_t v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, (const void **)&v9);
    if (v10 < 0) {
      operator delete(v9);
    }
    if (a2 + 8 != v7)
    {
      turi::neural_net::convert_hwc_array_to_chw_data((uint64_t *)(v7 + 56));
      objc_claimAutoreleasedReturnValue();
      v8[0] = 0;
      v8[1] = v8;
      void v8[2] = 0x3812000000;
      void v8[3] = __Block_byref_object_copy__0;
      v8[4] = __Block_byref_object_dispose__0;
      v8[5] = "";
      operator new();
    }
    turi::proprietary::neural_net::mlc_style_transfer_backend::predict(std::map<std::string,turi::neural_net::shared_float_array> const&)const::$_0::operator()();
  }
  std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<true,0>(&v9);
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](a3, (const void **)&v9, 1);
  uint64_t v11 = &unk_26D752D58;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
}

void sub_223E6430C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  std::pair<std::string const,turi::neural_net::shared_float_array>::~pair(v37 - 192);
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }

  _Block_object_dispose(&a26, 8);
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a35, 8);
  std::promise<turi::neural_net::shared_float_array>::~promise(a9);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__65(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__66(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZNK4turi11proprietary10neural_net26mlc_style_transfer_backend7predictERKNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10neural_net18shared_float_arrayENS3_4lessISA_EENS8_INS3_4pairIKSA_SC_EEEEEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = [v5 localizedDescription];
    uint64_t v7 = std::runtime_error::runtime_error(&v15, v6);
    std::make_exception_ptr[abi:ne180100]<std::runtime_error>(v7);
  }
  uint64_t v8 = [a2 data];
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  long long __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v9 + 48), *(void *)(v9 + 56), (uint64_t)(*(void *)(v9 + 56) - *(void *)(v9 + 48)) >> 3);
  turi::neural_net::convert_chw_data_to_hwc_array(v8, (uint64_t)&__p, (uint64_t)v13);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }

  std::promise<turi::neural_net::shared_float_array>::set_value((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), (uint64_t)v13);
  v13[0] = &unk_26D752D58;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_223E645F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }

  _Unwind_Resume(a1);
}

void turi::proprietary::neural_net::mlc_style_transfer_backend::~mlc_style_transfer_backend(void **this)
{
  *this = &unk_26D755B00;
  if (*((unsigned char *)this + 8))
  {
    free(this[16]);
    free(this[17]);
  }
  turi::neural_net::mlc_layer_weights::~mlc_layer_weights(this + 24);

  uint64_t v2 = this[18];
  if (v2)
  {
    this[19] = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  turi::proprietary::neural_net::mlc_style_transfer_backend::~mlc_style_transfer_backend(this);
  JUMPOUT(0x22A614FA0);
}

void *std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<true,0>(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  turi::neural_net::shared_float_array::shared_float_array((turi::neural_net::shared_float_array *)(a1 + 3));
  return a1;
}

void sub_223E647E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<turi::neural_net::deferred_float_array,std::allocator<turi::neural_net::deferred_float_array>,std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x48uLL);
  __n128 result = std::__shared_ptr_emplace<turi::neural_net::deferred_float_array>::__shared_ptr_emplace[abi:ne180100]<std::future<turi::neural_net::shared_float_array>,std::vector<unsigned long> const&,std::allocator<turi::neural_net::deferred_float_array>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_223E64850(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223E64AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_223E64CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, int a11, __int16 a12, char a13, char a14, turi::neural_net::model_spec *a15)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&__p, a10);
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a15, 0);

  _Unwind_Resume(a1);
}

uint64_t turi::Span<float,18446744073709551615ul>::SliceByDimension(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a1[1];
  if (v3 % a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    memset(v6, 0, sizeof(v6));
    turi::TuriException::TuriException(exception, 2, v6);
  }
  return turi::Span<float,18446744073709551615ul>::Slice(a1, v3 / a2 * a3, v3 / a2);
}

void sub_223E64DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::Span<float,18446744073709551615ul>::Slice(void *a1, unint64_t a2, uint64_t a3)
{
  if (!a3 || ((v3 = a1[1], v3 > a2) ? (BOOL v4 = a3 + a2 > v3) : (BOOL v4 = 1), v4))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    memset(v7, 0, sizeof(v7));
    turi::TuriException::TuriException(exception, 2, v7);
  }
  return *a1 + 4 * a2;
}

void sub_223E64E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned long>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_223E64F00(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<turi::neural_net::image_annotation>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<turi::neural_net::image_annotation>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        char v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<turi::neural_net::image_annotation>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    std::runtime_error v15 = v12;
    int v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<turi::neural_net::image_annotation>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_223E65118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::neural_net::image_annotation>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::neural_net::image_annotation>>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::neural_net::image_annotation>>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::neural_net::image_annotation>>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::neural_net::image_annotation>>,std::reverse_iterator<std::vector<turi::neural_net::image_annotation>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *boost::function0<void>::~function0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<turi::neural_net::model_backend  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::neural_net::model_backend  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void turi::neural_net::Completion::Failure(std::exception_ptr *this@<X0>, std::exception_ptr a2@<0:X1>, std::exception_ptr *a3@<X8>)
{
  std::exception_ptr::exception_ptr(&v4, this);
  std::exception_ptr::exception_ptr(a3, &v4);
  std::exception_ptr::~exception_ptr(&v4);
}

void std::vector<turi::neural_net::labeled_image>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    std::exception_ptr v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 8;
        std::allocator<turi::neural_net::labeled_image>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::neural_net::labeled_image>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[5];
  if (v3)
  {
    a2[6] = v3;
    operator delete(v3);
  }
  std::exception_ptr v4 = (void *)a2[2];
  if (v4)
  {
    a2[3] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C2D8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C198], MEMORY[0x263F8C0A0]);
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

CoreML::Specification::Model *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Model>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::Model **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  uint64_t v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::Model::Model(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_223E65660(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::FeatureDescription *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::FeatureDescription **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  uint64_t v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::FeatureDescription::FeatureDescription(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_223E657AC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

__n128 _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  if (*a1 == a2) {
    operator new();
  }
  if (*(char *)(v4 + 23) < 0) {
    operator delete(*(void **)v4);
  }
  __n128 result = *a3;
  *(void *)(v4 + 16) = a3[1].n128_u64[0];
  *(__n128 *)uint64_t v4 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

void _tc_google::protobuf::internal::arena_destruct_object<std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena()
{
}

void sub_223E65914(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

CoreML::Specification::SizeRange *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SizeRange>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::SizeRange **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  uint64_t v6 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::SizeRange::SizeRange(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SizeRange>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_223E65A3C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SizeRange>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void CoreML::validate<(MLModelType)556>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    uint64_t v3 = *(CoreML **)(a1 + 16);
  }
  else {
    uint64_t v3 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
  }
  if (*(_DWORD *)(a1 + 44) != 556)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Model not an a LinkedModel.");
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_8:
    if (SHIBYTE(v15) < 0)
    {
      uint64_t v5 = __p;
LABEL_10:
      operator delete(v5);
      return;
    }
    return;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "LinkedModel cannot be marked as updatable");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_8;
  }
  CoreML::Result::Result((CoreML::Result *)&v17);
  CoreML::validateModelDescription(v3, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&__p);
  uint64_t v17 = __p;
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  long long v18 = v15;
  uint64_t v19 = v16;
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v17);
  if (!v6)
  {
    *(void *)a2 = v17;
    *(_OWORD *)(a2 + 8) = v18;
    *(void *)(a2 + 24) = v19;
    long long v18 = 0uLL;
    uint64_t v19 = 0;
    goto LABEL_36;
  }
  if (*(_DWORD *)(a1 + 44) == 556) {
    uint64_t v7 = *(uint64_t **)(a1 + 32);
  }
  else {
    uint64_t v7 = CoreML::Specification::LinkedModel::default_instance((CoreML::Specification::LinkedModel *)v6);
  }
  if (*((_DWORD *)v7 + 7))
  {
    if (*(_DWORD *)(a1 + 44) == 556) {
      uint64_t v8 = *(uint64_t **)(a1 + 32);
    }
    else {
      uint64_t v8 = CoreML::Specification::LinkedModel::default_instance((CoreML::Specification::LinkedModel *)v7);
    }
    if (*((_DWORD *)v8 + 7) == 1) {
      uint64_t v9 = (uint64_t *)v8[2];
    }
    else {
      uint64_t v9 = CoreML::Specification::LinkedModelFile::default_instance((CoreML::Specification::LinkedModelFile *)v8);
    }
    CoreML::Specification::LinkedModelFile::LinkedModelFile((CoreML::Specification::LinkedModelFile *)&__p, (const CoreML::Specification::LinkedModelFile *)v9);
    unint64_t v10 = (uint64_t *)*((void *)&v15 + 1);
    if (!*((void *)&v15 + 1)) {
      unint64_t v10 = &CoreML::Specification::_StringParameter_default_instance_;
    }
    uint64_t v11 = v10[2];
    if (*(char *)(v11 + 23) < 0)
    {
      if (*(void *)(v11 + 8)) {
        goto LABEL_31;
      }
    }
    else if (*(unsigned char *)(v11 + 23))
    {
LABEL_31:
      *(void *)a2 = v17;
      *(_OWORD *)(a2 + 8) = v18;
      *(void *)(a2 + 24) = v19;
      long long v18 = 0uLL;
      uint64_t v19 = 0;
LABEL_35:
      CoreML::Specification::LinkedModelFile::~LinkedModelFile((CoreML::Specification::LinkedModelFile *)&__p);
      goto LABEL_36;
    }
    std::string::basic_string[abi:ne180100]<0>(&v12, "LinkedModel.linkedModelFile.linkedModeFileName.defaultValue cannot be empty.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if (v13 < 0) {
      operator delete(v12);
    }
    goto LABEL_35;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "LinkedModel.LinkType not set.");
  CoreML::Result::Result((_DWORD *)a2, 13);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
LABEL_36:
  if (SHIBYTE(v19) < 0)
  {
    uint64_t v5 = (void *)v18;
    goto LABEL_10;
  }
}

void sub_223E65CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  CoreML::Specification::LinkedModelFile::~LinkedModelFile((CoreML::Specification::LinkedModelFile *)&a15);
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/Gazetteer.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::CoreMLModels::_Gazetteer_default_instance_ = (uint64_t)&unk_26D755BD8;
  unk_268089420 = 0;
  qword_268089428 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_268089430 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_268089438 = 0;
  qword_268089448 = 0;
  byte_268089450 = 1;
}

void CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_223E65E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::Gazetteer *CoreML::Specification::CoreMLModels::Gazetteer::Gazetteer(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  *(void *)this = &unk_26D755BD8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::Gazetteer *)&CoreML::Specification::CoreMLModels::_Gazetteer_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 6) = 0;
  return this;
}

void sub_223E65EDC(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::Gazetteer::~Gazetteer(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  *(void *)this = &unk_26D755BD8;
  CoreML::Specification::CoreMLModels::Gazetteer::SharedDtor(this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::CoreMLModels::Gazetteer::~Gazetteer(this);
  JUMPOUT(0x22A614FA0);
}

void *CoreML::Specification::CoreMLModels::Gazetteer::SharedDtor(void *this)
{
  unint64_t v1 = this;
  uint64_t v2 = this[2];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (void *)MEMORY[0x22A614FA0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = v1[3];
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    this = (void *)MEMORY[0x22A614FA0](v4, 0x1012C40EC159624);
  }
  int v6 = *((_DWORD *)v1 + 13);
  if (v6)
  {
    if (v6 == 200)
    {
      this = (void *)v1[5];
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
    }
    *((_DWORD *)v1 + 13) = 0;
  }
  return this;
}

uint64_t *CoreML::Specification::CoreMLModels::Gazetteer::default_instance(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  return &CoreML::Specification::CoreMLModels::_Gazetteer_default_instance_;
}

void CoreML::Specification::CoreMLModels::Gazetteer::New(CoreML::Specification::CoreMLModels::Gazetteer *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_223E660D4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40C43D3D65);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::Gazetteer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::Gazetteer>);
  }
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::Clear(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 16);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *(void *)(this + 24);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(_DWORD *)(this + 52) == 200)
  {
    this = *(void *)(this + 40);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

BOOL CoreML::Specification::CoreMLModels::Gazetteer::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::Gazetteer *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (std::string **)((char *)this + 24);
  int v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v7 = *(unsigned __int8 **)a2;
      unint64_t v8 = *((void *)a2 + 1);
      if (*(void *)a2 >= v8)
      {
        uint64_t v10 = 0;
LABEL_45:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
        unint64_t v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v11 & 0x100000000) == 0) {
          goto LABEL_46;
        }
        goto LABEL_9;
      }
      uint64_t v9 = v7 + 1;
      uint64_t v10 = *v7;
      if ((char)*v7 >= 1) {
        break;
      }
      if ((unint64_t)v9 >= v8) {
        goto LABEL_45;
      }
      int v12 = *v9;
      if ((v10 & ~v12) < 0x80) {
        goto LABEL_45;
      }
      *(void *)a2 = v7 + 2;
      unint64_t v11 = (v10 + (v12 << 7) - 128) | 0x100000000;
LABEL_9:
      unsigned int v13 = v11 >> 3;
      if (v11 >> 3 > 0x63)
      {
        if (v13 == 100)
        {
          if (v11 != 34) {
            goto LABEL_46;
          }
          if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v5)) {
            return 0;
          }
        }
        else
        {
          if (v13 != 200 || v11 != 66) {
            goto LABEL_46;
          }
          if (*((_DWORD *)this + 13) != 200)
          {
            *((_DWORD *)this + 13) = 200;
            operator new();
          }
          uint64_t v17 = (CoreML::Specification::StringVector *)*((void *)this + 5);
          uint64_t v20 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v20 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v20;
            *(void *)a2 = v20 + 1;
          }
          unint64_t v22 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
          if ((v22 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v24 = v22;
          BOOL result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v17, (char **)a2, v23);
          if (!result) {
            return result;
          }
          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v24)) {
            return 0;
          }
        }
      }
      else if (v13 == 1)
      {
        if (v11 != 8) {
          goto LABEL_46;
        }
        long long v18 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1))
        {
          int v19 = 0;
          goto LABEL_53;
        }
        int v19 = *v18;
        if (*v18 < 0)
        {
LABEL_53:
          uint64_t Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v19);
          *((_DWORD *)this + 8) = Varint32Fallback;
          if (Varint32Fallback < 0) {
            return 0;
          }
        }
        else
        {
          *((_DWORD *)this + 8) = v19;
          *(void *)a2 = v18 + 1;
        }
      }
      else
      {
        if (v13 != 10 || v11 != 82) {
          goto LABEL_46;
        }
        if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
        }
        BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v6);
        if (!result) {
          return result;
        }
        long long v15 = *v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          long long v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
          std::string::size_type size = (const char *)(*v6)->__r_.__value_.__l.__size_;
        }
        else
        {
          std::string::size_type size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v15, size, 0, (uint64_t)"CoreML.Specification.CoreMLModels.Gazetteer.language"))return 0; {
      }
        }
    }
    *(void *)a2 = v9;
    unint64_t v11 = v10 | 0x100000000;
    if ((v11 & 0x100000000) != 0) {
      goto LABEL_9;
    }
LABEL_46:
    if (!v11 || (v11 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_223E664A4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::SerializeWithCachedSizes(CoreML::Specification::CoreMLModels::Gazetteer *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 8);
  if (v6) {
    _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(1, v6, a2, a4);
  }
  uint64_t result = *((void *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    unint64_t v8 = *(const char **)(result + 8);
    if (!v8) {
      goto LABEL_9;
    }
    uint64_t result = *(void *)result;
    goto LABEL_8;
  }
  unint64_t v8 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_8:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v8, 1, (uint64_t)"CoreML.Specification.CoreMLModels.Gazetteer.language");
    uint64_t result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(10, *((void *)this + 2), a2);
  }
LABEL_9:
  uint64_t v9 = *((void *)this + 3);
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v9 + 23)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (*(void *)(v9 + 8)) {
LABEL_11:
  }
    uint64_t result = _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(100, v9, a2);
LABEL_12:
  if (*((_DWORD *)this + 13) == 200)
  {
    uint64_t v10 = *((void *)this + 5);
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xC8, v10, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::ByteSizeLong(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  int v9 = *((_DWORD *)this + 8);
  if (v9) {
    v5 += ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  if (*((_DWORD *)this + 13) == 200)
  {
    uint64_t v10 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 5));
    v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 12) = v5;
  return v5;
}

std::string *CoreML::Specification::CoreMLModels::Gazetteer::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::Gazetteer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_11;
  }
  this = (std::string *)&v3->__r_.__value_.__r.__words[2];
  uint64_t v6 = (uint64_t *)v3->__r_.__value_.__r.__words[2];
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3->__r_.__value_.__r.__words[2], (const std::string *)v5);
  }
LABEL_11:
  uint64_t v7 = *((void *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(void *)(v7 + 8)) {
      goto LABEL_19;
    }
  }
  else if (!*(unsigned char *)(v7 + 23))
  {
    goto LABEL_19;
  }
  this = v3 + 1;
  data = (uint64_t *)v3[1].__r_.__value_.__l.__data_;
  if (data != (uint64_t *)v7)
  {
    if (data == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[1].__r_.__value_.__l.__data_, (const std::string *)v7);
  }
LABEL_19:
  int v9 = *((_DWORD *)a2 + 8);
  if (v9) {
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v9;
  }
  if (*((_DWORD *)a2 + 13) == 200)
  {
    if (HIDWORD(v3[2].__r_.__value_.__r.__words[0]) != 200)
    {
      HIDWORD(v3[2].__r_.__value_.__r.__words[0]) = 200;
      operator new();
    }
    uint64_t v10 = (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)*((void *)a2 + 5);
    unint64_t v11 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
    return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom(v11, v10);
  }
  return this;
}

void sub_223E66858(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::IsInitialized(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  return 1;
}

void *CoreML::Specification::CoreMLModels::Gazetteer::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.Gazetteer");
}

void CoreML::Specification::CoreMLModels::Gazetteer::New(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
}

uint64_t CoreML::Specification::CoreMLModels::Gazetteer::GetCachedSize(CoreML::Specification::CoreMLModels::Gazetteer *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::Gazetteer>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void turi::proprietary::style_transfer::get_toolkit_class_registration(void *a1@<X8>)
{
  v27[2] = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  memset(v25, 0, 24);
  v26[0] = 0;
  v26[1] = 0;
  v25[3] = v26;
  v3[1] = 0;
  v3[2] = 0;
  char v4 = 0;
  uint64_t v5 = v6;
  v6[0] = 0;
  v7[0] = 0;
  v7[1] = 0;
  v6[1] = 0;
  v6[2] = v7;
  void v7[2] = v8;
  v8[0] = 0;
  memset(v9, 0, 40);
  v8[1] = 0;
  void v8[2] = v9;
  memset(v10, 0, 40);
  v9[5] = v10;
  v11[0] = 0;
  v11[1] = 0;
  v10[5] = v11;
  v11[2] = v12;
  memset(v12, 0, 40);
  v12[5] = v13;
  v13[0] = 0;
  v14[0] = 0;
  v14[1] = 0;
  v13[1] = 0;
  void v13[2] = v14;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  v3[0] = &unk_26D755CA8;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  MEMORY[0x22A614700](v25, "style_transfer");
  v26[2] = turi::proprietary::style_transfer::get_toolkit_class_registration(void)::$_0::__invoke;
  uint64_t v2 = (void *)turi::model_base::list_functions((turi::model_base *)v3);
  turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set(v2, (uint64_t)v27);
}

void sub_223E67B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  turi::proprietary::style_transfer::style_transfer::~style_transfer((void **)&a16);
  turi::toolkit_class_specification::~toolkit_class_specification((turi::toolkit_class_specification *)(v16 - 160));
  std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::~style_transfer(void **this)
{
  *this = &unk_26D755CA8;
  if (*((char *)this + 447) < 0) {
    operator delete(this[53]);
  }
  turi::style_transfer::style_transfer::~style_transfer((turi::style_transfer::style_transfer *)this);
}

{
  uint64_t vars8;

  *this = &unk_26D755CA8;
  if (*((char *)this + 447) < 0) {
    operator delete(this[53]);
  }
  turi::style_transfer::style_transfer::~style_transfer((turi::style_transfer::style_transfer *)this);
  JUMPOUT(0x22A614FA0);
}

void turi::proprietary::style_transfer::get_toolkit_class_registration(void)::$_0::__invoke()
{
}

void turi::style_transfer::style_transfer::~style_transfer(turi::style_transfer::style_transfer *this)
{
  *(void *)this = &unk_26D7803C8;
  std::unique_ptr<turi::table_printer>::reset[abi:ne180100]((turi::table_printer **)this + 52, 0);
  uint64_t v2 = *((void *)this + 51);
  *((void *)this + 51) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 50);
  *((void *)this + 5CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100]((turi::neural_net::model_spec **)this + 48, 0);
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100]((turi::neural_net::model_spec **)this + 47, 0);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = *((void *)this + 40);
  *((void *)this + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *(void *)this = &unk_26D753F98;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 296, *((char **)this + 38));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)this + 272, *((void **)this + 35));
  int v9 = (void **)((char *)this + 248);
  std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this + 224, *((char **)this + 29));
  turi::model_base::~model_base(this);
}

{
  uint64_t vars8;

  turi::style_transfer::style_transfer::~style_transfer(this);
  JUMPOUT(0x22A614FA0);
}

void turi::proprietary::style_transfer::style_transfer::init_training(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  MEMORY[0x22A615770]();
  std::string::basic_string[abi:ne180100]<0>(&__p, "algorithm");
  uint64_t v5 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a4, (const void **)&__p);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  if (a4 + 1 == (uint64_t **)v5) {
    turi::proprietary::style_transfer::style_transfer::init_training(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_0::operator()();
  }
  uint64_t v6 = (turi::flexible_type_impl *)(v5 + 56);
  switch(*(unsigned char *)(v5 + 68))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_13;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_13:
      long long __p = (void *)*MEMORY[0x263F8C2B8];
      uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v22 = v9;
      uint64_t v23 = MEMORY[0x263F8C318] + 16;
      if (v25 < 0) {
        operator delete(v24);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&v26);
      break;
    case 2:
      uint64_t v7 = *(void *)v6;
      if (*(char *)(*(void *)v6 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
      }
      else
      {
        long long v8 = *(_OWORD *)(v7 + 8);
        v19.__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)v6 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(void *)v6 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)v6 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v6, &v19);
      break;
    case 7:
      memset(&v19, 0, sizeof(v19));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)v6 + 8));
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  if ((*((unsigned char *)&v19.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v19.__r_.__value_.__l.__size_ != 3
      || (*(_WORD *)v19.__r_.__value_.__l.__data_ == 28259
        ? (BOOL v11 = *(unsigned char *)(v19.__r_.__value_.__r.__words[0] + 2) == 110)
        : (BOOL v11 = 0),
          !v11))
    {
      if (v19.__r_.__value_.__l.__size_ != 7) {
        goto LABEL_44;
      }
      uint64_t v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
      goto LABEL_31;
    }
  }
  else
  {
    if (HIBYTE(v19.__r_.__value_.__r.__words[2]) != 3)
    {
      if (HIBYTE(v19.__r_.__value_.__r.__words[2]) != 7) {
        goto LABEL_44;
      }
      uint64_t v10 = &v19;
LABEL_31:
      int data = (int)v10->__r_.__value_.__l.__data_;
      int v13 = *(_DWORD *)((char *)v10->__r_.__value_.__r.__words + 3);
      if (data != 1282305635 || v13 != 1702127948) {
        goto LABEL_44;
      }
      long long v15 = @"maml-video-light";
LABEL_43:
      long long v17 = (char *)[(__CFString *)v15 UTF8String];
      std::string::basic_string[abi:ne180100]<0>(&__p, "model");
      v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      long long v18 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&__p, (uint64_t)&std::piecewise_construct, &v20);
      turi::flexible_type::operator=((uint64_t)v18 + 56, v17);
    }
    if (LOWORD(v19.__r_.__value_.__l.__data_) != 28259 || v19.__r_.__value_.__s.__data_[2] != 110) {
LABEL_44:
    }
      turi::proprietary::style_transfer::style_transfer::init_training(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_1::operator()();
  }
  long long v15 = @"maml-image";
  goto LABEL_43;
}

void sub_223E696AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a47 < 0)
  {
    operator delete(a42);
    if ((v73 & 1) == 0)
    {
LABEL_8:

      if (a40 < 0) {
        operator delete(a35);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v74);
  goto LABEL_8;
}

void turi::flexible_type::operator=(uint64_t a1, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  turi::flexible_type::operator=<std::string>(a1);
}

void sub_223E69BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::proprietary::style_transfer::style_transfer::get_mlmodel(const std::string::value_type *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.TuriCore"];
  std::string::basic_string[abi:ne180100]<0>(v24, "");
  uint64_t v5 = (uint64_t *)a1;
  if (a1[23] < 0) {
    uint64_t v5 = *(uint64_t **)a1;
  }
  uint64_t v6 = [NSString stringWithUTF8String:v5];
  uint64_t v7 = [v4 pathForResource:v6 ofType:@"mlmodel"];
  long long v8 = [MEMORY[0x263F08850] defaultManager];
  int v9 = [v8 fileExistsAtPath:v7];

  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v7 UTF8String]);
    goto LABEL_29;
  }
  turi::proprietary::style_transfer::style_transfer::request_assets((uint64_t)v24, __p);
  if (v25 < 0)
  {
    if (!v24[1]) {
      goto LABEL_7;
    }
LABEL_33:
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    turi::proprietary::style_transfer::style_transfer::get_mlmodel(std::string)const::$_0::operator()((const std::string **)&v21);
  }
  if (v25) {
    goto LABEL_33;
  }
LABEL_7:
  if ((v23 & 0x80u) == 0) {
    size_t v10 = v23;
  }
  else {
    size_t v10 = (size_t)__p[1];
  }
  BOOL v11 = &v20;
  std::string::basic_string[abi:ne180100]((uint64_t)&v20, v10 + 1);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    BOOL v11 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if ((v23 & 0x80u) == 0) {
      int v12 = __p;
    }
    else {
      int v12 = (void **)__p[0];
    }
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v1CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 47;
  int v13 = a1[23];
  if (v13 >= 0) {
    long long v14 = a1;
  }
  else {
    long long v14 = *(const std::string::value_type **)a1;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    std::string::size_type v15 = *((void *)a1 + 1);
  }
  uint64_t v16 = std::string::append(&v20, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  long long v18 = std::string::append(&v21, ".mlmodel");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  a2[2] = *((void *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
LABEL_29:

  if (v25 < 0) {
    operator delete(v24[0]);
  }
}

void sub_223E69E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }

  if (a33 < 0) {
    operator delete(a28);
  }

  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::resume_training(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x22A615770]();
  uint64_t v5 = NSString;
  std::string::basic_string[abi:ne180100]<0>(v8, (char *)[@"vgg16-397923af" UTF8String]);
  turi::proprietary::style_transfer::style_transfer::get_mlmodel((const std::string::value_type *)v8, __p);
  if (v11 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  uint64_t v7 = [v5 stringWithUTF8String:v6];
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v7)
  {
    __p[0] = (void *)[v7 UTF8String];
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[20],char const*>(a4, "vgg_mlmodel_path", (char **)__p);
  }
  turi::proprietary::style_transfer::style_transfer::resume_training(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_0::operator()();
}

void sub_223E6A41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);

  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::create_compute_context(turi::proprietary::style_transfer::style_transfer *this)
{
  MEMORY[0x22A615770]();
  uint64_t v2 = (void *)((char *)this + 424);
  if (*((char *)this + 447) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  uint64_t v3 = [NSString stringWithUTF8String:v2];
  uint64_t v4 = DevicePolicyFromString(v3);

  uint64_t v5 = +[TCComputeDeviceManager sharedInstance];
  uint64_t v6 = [v5 defaultDevice];

  [v6 asMLCDevice:v4];
  if (!objc_claimAutoreleasedReturnValue())
  {
    [MEMORY[0x263F105C0] deviceWithType:2];
    objc_claimAutoreleasedReturnValue();
  }
  std::make_unique<turi::proprietary::neural_net::mlc_internal_compute_context,MLCDevice * {__strong}&>();
}

void sub_223E6A624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::make_unique<turi::proprietary::neural_net::mlc_internal_compute_context,MLCDevice * {__strong}&>()
{
}

void sub_223E6A6AC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x81C40803F642BLL);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::load_checkpoint(turi::ml_model_base *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v21, "model");
  turi::style_transfer::style_transfer::read_state<std::string>(a1, v21, &v23);
  if (v22 < 0) {
    operator delete((void *)v21[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v23;
  }
  else {
    uint64_t v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  uint64_t v7 = [NSString stringWithUTF8String:v6];
  long long v8 = NSString;
  std::string::basic_string[abi:ne180100]<0>(v17, (char *)[v7 UTF8String]);
  turi::proprietary::style_transfer::style_transfer::get_mlmodel((const std::string::value_type *)v17, __p);
  if (v20 >= 0) {
    char v9 = __p;
  }
  else {
    char v9 = (void **)__p[0];
  }
  size_t v10 = [v8 stringWithUTF8String:v9];
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0)
  {
    operator delete(v17[0]);
    if (v10)
    {
LABEL_13:
      turi::style_transfer::style_transfer::get_config(a1, (uint64_t)__p);
      void v13[3] = [v10 UTF8String];
      turi::proprietary::style_transfer::style_transfer::get_config_options(a1, (uint64_t)v13);
      std::make_unique<turi::proprietary::style_transfer::MAMLCheckpoint,turi::style_transfer::Config,char const*,std::map<std::string,turi::neural_net::shared_float_array>,std::map<std::string,turi::neural_net::shared_float_array>>();
    }
  }
  else if (v10)
  {
    goto LABEL_13;
  }
  char v11 = a2 + 1;
  uint64_t v12 = a2[1];
  long long v14 = (uint64_t *)*a2;
  uint64_t v15 = v12;
  if (a2[2])
  {
    *(void *)(v12 + 16) = &v15;
    *a2 = v11;
    void *v11 = 0;
    a2[2] = 0;
  }
  else
  {
    long long v14 = &v15;
  }
  turi::style_transfer::style_transfer::load_checkpoint(a1, a3);
}

void sub_223E6A8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a14, a15);

  if (*(char *)(v29 - 73) < 0) {
    operator delete(*(void **)(v29 - 96));
  }
  if (*(char *)(v29 - 49) < 0) {
    operator delete(*(void **)(v29 - 72));
  }
  _Unwind_Resume(a1);
}

std::string *turi::style_transfer::style_transfer::read_state<std::string>@<X0>(turi::ml_model_base *a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t state = turi::ml_model_base::get_state(a1);
  uint64_t v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(state, a2);
  return turi::variant_converter<std::string,void>::get(v6, a3);
}

void std::make_unique<turi::proprietary::style_transfer::MAMLCheckpoint,turi::style_transfer::Config,char const*,std::map<std::string,turi::neural_net::shared_float_array>,std::map<std::string,turi::neural_net::shared_float_array>>()
{
}

void sub_223E6AAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a13, a14);
  if (a21 < 0) {
    operator delete(__p);
  }
  MEMORY[0x22A614FA0](v21, 0x10B3C40CED99292);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::get_config_options(turi::proprietary::style_transfer::style_transfer *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  std::string::basic_string[abi:ne180100]<0>(v26, "algorithm");
  int v4 = turi::style_transfer::style_transfer::read_state<int>(this, v26);
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26[0]);
  }
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x28uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D752FB0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26D753000;
  *(float *)&v5[1].__shared_owners_ = (float)v4;
  uint64_t v24 = v5 + 1;
  char v25 = v5;
  turi::neural_net::shared_float_array::shared_float_array((uint64_t)v26, &v24);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[10],turi::neural_net::shared_float_array&>((uint64_t **)a2, "algorithm", (uint64_t)v26);
  std::string::basic_string[abi:ne180100]<0>(__p, "style_strength");
  int v6 = turi::style_transfer::style_transfer::read_state<int>(this, (const void **)__p);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D752FB0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26D753000;
  *(float *)&v7[1].__shared_owners_ = (float)v6;
  char v20 = v7 + 1;
  uint64_t v21 = v7;
  turi::neural_net::shared_float_array::shared_float_array((uint64_t)__p, &v20);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[10],turi::neural_net::shared_float_array&>((uint64_t **)a2, "style_strength", (uint64_t)__p);
  std::string::basic_string[abi:ne180100]<0>(v18, "textel_density");
  int v8 = turi::style_transfer::style_transfer::read_state<int>(this, (const void **)v18);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  char v9 = (std::__shared_weak_count *)operator new(0x28uLL);
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D752FB0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26D753000;
  *(float *)&v9[1].__shared_owners_ = (float)v8;
  uint64_t v16 = v9 + 1;
  long long v17 = v9;
  turi::neural_net::shared_float_array::shared_float_array((uint64_t)v18, &v16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[10],turi::neural_net::shared_float_array&>((uint64_t **)a2, "textel_density", (uint64_t)v18);
  std::string::basic_string[abi:ne180100]<0>(v14, "training_iterations");
  int v10 = turi::style_transfer::style_transfer::read_state<int>(this, (const void **)v14);
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
  char v11 = (std::__shared_weak_count *)operator new(0x28uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D752FB0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26D753000;
  *(float *)&v11[1].__shared_owners_ = (float)v10;
  uint64_t v12 = v11 + 1;
  int v13 = v11;
  turi::neural_net::shared_float_array::shared_float_array((uint64_t)v14, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[10],turi::neural_net::shared_float_array&>((uint64_t **)a2, "training_iterations", (uint64_t)v14);
  v14[0] = &unk_26D752D58;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  v18[0] = &unk_26D752D58;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  __p[0] = &unk_26D752D58;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  v26[0] = &unk_26D752D58;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
}

void sub_223E6AF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  *(void *)(v32 - 88) = &unk_26D752D58;
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 72);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v31, *(void **)(v31 + 8));
  _Unwind_Resume(a1);
}

void sub_223E6B06C()
{
  if (!*(void *)(v0 - 96)) {
    JUMPOUT(0x223E6B058);
  }
  JUMPOUT(0x223E6B054);
}

void sub_223E6B07C()
{
}

void turi::proprietary::style_transfer::style_transfer::create_checkpoint(turi::proprietary::style_transfer::style_transfer *a1)
{
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = v3;
  turi::proprietary::style_transfer::style_transfer::get_config_options(a1, (uint64_t)v1);
  std::make_unique<turi::proprietary::style_transfer::MAMLCheckpoint,turi::style_transfer::Config,std::string const&,std::map<std::string,turi::neural_net::shared_float_array>,std::map<std::string,turi::neural_net::shared_float_array>>();
}

void sub_223E6B12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, void *a14)
{
}

void std::make_unique<turi::proprietary::style_transfer::MAMLCheckpoint,turi::style_transfer::Config,std::string const&,std::map<std::string,turi::neural_net::shared_float_array>,std::map<std::string,turi::neural_net::shared_float_array>>()
{
}

void sub_223E6B2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  MEMORY[0x22A614FA0](v20, 0x10B3C40CED99292);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::export_to_coreml(turi::style_transfer::style_transfer *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v15, "image");
  std::string::basic_string[abi:ne180100]<0>(&v14, "stylizedImage");
  uint64_t checkpoint = turi::style_transfer::style_transfer::read_checkpoint(a1);
  (*(void (**)(const CoreML::Specification::NeuralNetwork **__return_ptr))(*(void *)checkpoint + 24))(&v13);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v10, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else {
    std::string v10 = v15;
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v14;
  }
  turi::proprietary::style_transfer::style_transfer::export_style_transfer_model(&v13, 512, 512, (uint64_t)&v10, (uint64_t)&__p, &v11);
  uint64_t v8 = v11;
  uint64_t v7 = v12;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  *a3 = v8;
  a3[1] = v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (*(unsigned char *)(a2 + 23)) {
LABEL_15:
  }
    turi::coreml::MLModelWrapper::save(v8);
LABEL_16:
  turi::neural_net::model_spec::~model_spec((turi::neural_net::model_spec *)&v13);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_223E6B474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  turi::neural_net::model_spec::~model_spec((turi::neural_net::model_spec *)&a24);
  if (a30 < 0) {
    operator delete(a25);
  }
  if (*(char *)(v30 - 33) < 0) {
    operator delete(*(void **)(v30 - 56));
  }
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::export_style_transfer_model(const CoreML::Specification::NeuralNetwork **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X8>)
{
  CoreML::Specification::Model::Model((CoreML::Specification::Model *)v26);
  int v28 = 6;
  uint64_t v12 = v27;
  if (!v27) {
    operator new();
  }
  int v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v27 + 16);
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __str = *(std::string *)a4;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Input image");
  turi::proprietary::style_transfer::set_image_feature((uint64_t)v13, a2, a3, &__str, (uint64_t)__p, 20);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string v14 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v12 + 40);
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v22 = *(std::string *)a5;
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "Stylized image");
  turi::proprietary::style_transfer::set_image_feature((uint64_t)v14, a2, a3, &v22, (uint64_t)v20, 20);
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v30 != 500)
  {
    CoreML::Specification::Model::clear_Type((uint64_t)v26);
    int v30 = 500;
    operator new();
  }
  std::string v15 = v29;
  CoreML::Specification::NeuralNetwork::MergeFrom(v29, *a1);
  uint64_t v16 = *(std::string **)(*(void *)(*((void *)v15 + 7) + 8) + 16);
  if (v16 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v16, (const std::string *)a4);
  uint64_t v17 = *((void *)v15 + 4);
  uint64_t v18 = *(void *)(v17 + 8 * *((int *)v15 + 6));
  std::string::operator=(*(std::string **)(*(void *)(*(void *)(v17 + 8) + 32) + 8), (const std::string *)a4);
  std::string::operator=(*(std::string **)(*(void *)(v18 + 56) + 8), (const std::string *)a5);
  std::allocate_shared[abi:ne180100]<CoreML::Model,std::allocator<CoreML::Model>,CoreML::Specification::Model &,void>((const CoreML::Specification::Model *)v26, &v19);
  std::allocate_shared[abi:ne180100]<turi::coreml::MLModelWrapper,std::allocator<turi::coreml::MLModelWrapper>,std::shared_ptr<CoreML::Model>,void>(&v19, a6);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)v26);
}

void sub_223E6B798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  MEMORY[0x22A614FA0](v36, 0x10A1C40FD9EAC30);
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)&a36);
  _Unwind_Resume(a1);
}

uint64_t turi::proprietary::style_transfer::set_image_feature(uint64_t a1, uint64_t a2, uint64_t a3, std::string *__str, uint64_t a5, int a6)
{
  uint64_t v11 = *(std::string **)(a1 + 16);
  if (v11 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v11, __str);
  if (*(char *)(a5 + 23) < 0)
  {
    if (!*(void *)(a5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(a5 + 23))
  {
    goto LABEL_11;
  }
  if (*(uint64_t **)(a1 + 24) == &_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(*(std::string **)(a1 + 24), (const std::string *)a5);
LABEL_11:
  uint64_t v12 = *(void *)(a1 + 32);
  if (!v12) {
    operator new();
  }
  if (*(_DWORD *)(v12 + 36) != 4)
  {
    CoreML::Specification::FeatureType::clear_Type(v12);
    *(_DWORD *)(v12 + 36) = 4;
    operator new();
  }
  uint64_t v13 = *(void *)(v12 + 24);
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  *(_DWORD *)(v13 + 32) = a6;
  return v13;
}

void sub_223E6B998(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::prepare_prediction(uint64_t a1)
{
  v3[10] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::read_image(a1, (uint64_t)v3);
}

void sub_223E6C068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, atomic_uint *a16)
{
  MEMORY[0x22A614FA0](v16, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v17 - 44))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 56), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = *(void *)(v17 - 56);
        if (v19)
        {
          if (*(char *)(v19 + 31) < 0) {
            operator delete(*(void **)(v19 + 8));
          }
          MEMORY[0x22A614FA0](v19, 0x1012C404EF22A49);
        }
      }
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v20 = *(void **)(v17 - 56);
      if (!v20) {
        goto LABEL_27;
      }
      char v21 = (void *)v20[1];
      if (v21)
      {
        v20[2] = v21;
        operator delete(v21);
      }
      std::string v22 = v20;
      uint64_t v23 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      char v24 = *(void **)(v17 - 56);
      if (!v24) {
        goto LABEL_27;
      }
      std::string __p = v24 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      char v24 = *(void **)(v17 - 56);
      if (!v24) {
        goto LABEL_27;
      }
      std::string __p = v24 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_18:
      std::string v22 = v24;
      uint64_t v23 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v25 = *(void *)(v17 - 56);
      if (!v25) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v25 + 16));
      std::string v22 = (void *)v25;
      unsigned int v26 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      uint64_t v27 = *(void **)(v17 - 56);
      if (!v27) {
        goto LABEL_27;
      }
      std::string v22 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v27);
      unsigned int v26 = 2071181815;
LABEL_25:
      uint64_t v23 = v26 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v22, v23);
LABEL_27:
      *(void *)(v17 - 56) = 0;
LABEL_28:
      boost::detail::shared_count::~shared_count(&a16);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void turi::proprietary::style_transfer::style_transfer::stylize_validation_image(uint64_t a1, uint64_t a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  v2[0] = &unk_26D7568A8;
  v2[1] = turi::proprietary::style_transfer::prepare_prediction;
  void v2[3] = v2;
  turi::gl_sarray::apply(a2, (uint64_t)v2, 8, 1);
}

void sub_223E6C780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void **a32,__int16 a33,char a34,char a35)
{
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100]((void *)(v35 - 192));
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a16);
  a21 = &unk_26D759E10;
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  turi::gl_sframe_writer::~gl_sframe_writer(&a32);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a33);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void turi::proprietary::style_transfer::vectorize_image(turi::proprietary::style_transfer *this@<X0>, void *a2@<X8>)
{
  image_int data = (unsigned __int8 *)turi::image_type::get_image_data(this);
  unint64_t v6 = *((void *)this + 5);
  uint64_t v16 = 0;
  std::vector<double>::vector(v19, v6, &v16);
  uint64_t v7 = *((void *)this + 5);
  if (v7)
  {
    uint64_t v8 = (double *)v19[0];
    do
    {
      unsigned int v9 = *image_data++;
      *v8++ = (double)v9;
      --v7;
    }
    while (v7);
  }
  uint64_t v11 = *((void *)this + 2);
  uint64_t v10 = *((void *)this + 3);
  uint64_t v12 = operator new(0x18uLL);
  uint64_t v17 = v12 + 3;
  uint64_t v18 = v12 + 3;
  *uint64_t v12 = v11;
  v12[1] = v10;
  _OWORD v12[2] = 3;
  uint64_t v15 = 0;
  uint64_t v16 = v12;
  std::string __p = 0;
  std::string v14 = 0;
  turi::flexible_type_impl::ndarray<double>::ndarray(a2, (uint64_t)v19, (uint64_t)&v16, (uint64_t)&__p, 0);
  if (__p)
  {
    std::string v14 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
}

void sub_223E6C9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::proprietary::style_transfer::style_transfer::print_training_progress(turi::proprietary::style_transfer::style_transfer *this)
{
  uint64_t result = turi::style_transfer::style_transfer::get_table_printer(this);
  if (result)
  {
    uint64_t v3 = (atomic_ullong *)result;
    std::string::basic_string[abi:ne180100]<0>(&__p, "reporting_interval");
    int v4 = turi::style_transfer::style_transfer::read_state<int>(this, (const void **)&__p);
    if (v19 < 0) {
      operator delete(__p);
    }
    unint64_t training_iterations = turi::style_transfer::style_transfer::get_training_iterations(this);
    uint64_t v16 = training_iterations;
    float training_loss = turi::style_transfer::style_transfer::get_training_loss(this);
    float v15 = training_loss;
    if (turi::style_transfer::style_transfer::supports_loss_components(this))
    {
      float training_style_loss = turi::style_transfer::style_transfer::get_training_style_loss(this);
      *(float *)&unint64_t v13 = training_style_loss;
      float training_content_loss = turi::style_transfer::style_transfer::get_training_content_loss(this);
      float v14 = training_content_loss;
      if (v16 == 1
        || !(v16 % v4)
        || (uint64_t result = turi::style_transfer::style_transfer::get_max_iterations(this), v16 == result))
      {
        std::string __p = (void *)0xBFF0000000000000;
        return turi::table_printer::print_row<long long,float,float,float,turi::progress_time>((uint64_t)v3, &v16, &v15, (float *)&v13, &v14, (double *)&__p);
      }
    }
    else
    {
      unint64_t v13 = 0xBFF0000000000000;
      unint64_t add = atomic_fetch_add(v3 + 9, 1uLL);
      uint64_t result = turi::table_printer::register_tick((turi::table_printer *)v3, training_iterations, add + 1);
      if (result)
      {
        std::string __p = v3 + 12;
        char v18 = 0;
        int v10 = std::unique_lock<turi::mutex>::try_lock((uint64_t)&__p);
        char v11 = v10;
        if (v10) {
          turi::table_printer::_print_progress_row<long long,float,turi::progress_time>(v3, &v16, &v15, &v13);
        }
        uint64_t result = std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&__p);
      }
      else
      {
        char v11 = 0;
      }
      unint64_t v12 = v3[93];
      if (v12 && !(add % v12)) {
        return turi::table_printer::_track_progress<long long,float,turi::progress_time>((uint64_t)v3, v11, &v16, &v15, (double *)&v13);
      }
    }
  }
  return result;
}

void sub_223E6CBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

uint64_t turi::style_transfer::style_transfer::read_state<int>(turi::ml_model_base *a1, const void **a2)
{
  uint64_t state = turi::ml_model_base::get_state(a1);
  int v4 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(state, a2);
  return turi::variant_converter<int,void>::get((uint64_t)&v6, v4);
}

uint64_t turi::table_printer::print_row<long long,float,float,float,turi::progress_time>(uint64_t a1, uint64_t *a2, float *a3, float *a4, float *a5, double *a6)
{
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)a1;
  v19[0] = v6 >> 5;
  if (v6 != 160)
  {
    v22.tv_sec = (__darwin_time_t)v19;
    turi::table_printer::print_row<long long,float,float,float,turi::progress_time>(long long,float,float,float,turi::progress_time const&)const::{lambda(void)#1}::operator()();
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  LOBYTE(v22.tv_sec) = 124;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v22, 1);
  turi::table_printer::os_log_value(0, *a2);
  uint64_t v13 = *a2;
  v22.tv_sec = (__darwin_time_t)&unk_26D7569E8;
  *(void *)&v22.tv_usec = v13;
  turi::table_internal::_print_long(v19, *(void *)(*(void *)a1 + 24), v13);
  turi::table_printer::os_log_value((turi::table_printer *)1, *a3);
  float v14 = *a3;
  v22.tv_sec = (__darwin_time_t)&unk_26D756A30;
  *(double *)&v22.tv_usec = v14;
  turi::table_internal::_print_double(v19, *(void *)(*(void *)a1 + 56), v14);
  turi::table_printer::os_log_value((turi::table_printer *)2, *a4);
  float v15 = *a4;
  v22.tv_sec = (__darwin_time_t)&unk_26D756A30;
  *(double *)&v22.tv_usec = v15;
  turi::table_internal::_print_double(v19, *(void *)(*(void *)a1 + 88), v15);
  turi::table_printer::os_log_value((turi::table_printer *)3, *a5);
  float v16 = *a5;
  v22.tv_sec = (__darwin_time_t)&unk_26D756A30;
  *(double *)&v22.tv_usec = v16;
  turi::table_internal::_print_double(v19, *(void *)(*(void *)a1 + 120), v16);
  turi::table_printer::os_log_value(a1, 4, a6);
  double v17 = *a6;
  if (*a6 < 0.0)
  {
    gettimeofday(&v22, 0);
    double v17 = (double)(v22.tv_usec - *(_DWORD *)(a1 + 32)) / 1000000.0 + (double)(v22.tv_sec - *(void *)(a1 + 24));
  }
  v22.tv_sec = (__darwin_time_t)&unk_26D756A68;
  *(double *)&v22.tv_usec = v17;
  turi::table_internal::_print_time(v19, *(void *)(*(void *)a1 + 152), v17);
  turi::table_printer::_p(a1);
  v19[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v19[1] = MEMORY[0x263F8C318] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v21);
}

void sub_223E6CF70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::proprietary::style_transfer::style_transfer::request_assets(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)[objc_alloc(MEMORY[0x263F55950]) initWithType:@"com.apple.MobileAsset.TuriCoreAsset"];
  [v3 returnTypes:2];
  [v3 setDoNotBlockBeforeFirstUnlock:1];
  [v3 setDoNotBlockOnNetworkStatus:1];
  int v4 = objc_opt_new();
  [v4 setDiscretionary:0];
  [v3 addKeyValuePair:@"Type" with:@"Filter"];
  timeval v22 = a2;
  uint64_t v43 = 0;
  uint64_t v44 = &v43;
  uint64_t v45 = 0x2020000000;
  uint64_t v46 = 32;
  v42[0] = MEMORY[0x263EF8330];
  v42[1] = 3221225472;
  v42[2] = ___ZNK4turi11proprietary14style_transfer14style_transfer14request_assetsEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE_block_invoke;
  void v42[3] = &unk_2646D6BA0;
  v42[4] = &v43;
  uint64_t v23 = v4;
  [MEMORY[0x263F55938] startCatalogDownload:@"com.apple.MobileAsset.TuriCoreAsset" options:v4 then:v42];
  if (v44[3])
  {
    unsigned int v5 = 30;
    do
    {
      objc_msgSend(MEMORY[0x263F08B88], "sleepForTimeInterval:", 1.0, v20);
      if (v44[3]) {
        BOOL v6 = v5 > 1;
      }
      else {
        BOOL v6 = 0;
      }
      --v5;
    }
    while (v6);
  }
  uint64_t v38 = 0;
  uint64_t v39 = &v38;
  uint64_t v40 = 0x2020000000;
  uint64_t v41 = 32;
  uint64_t v32 = 0;
  std::runtime_error v33 = &v32;
  uint64_t v34 = 0x3032000000;
  uint64_t v35 = __Block_byref_object_copy__1;
  uint64_t v36 = __Block_byref_object_dispose__1;
  id v37 = 0;
  objc_msgSend(v3, "queryMetaDataSync", v20);
  uint64_t v7 = [v3 results];
  BOOL v8 = v7 == 0;

  if (!v8)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    unsigned int v9 = [v3 results];
    uint64_t v10 = [v9 countByEnumeratingWithState:&v28 objects:v47 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v29;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v29 != v11) {
            objc_enumerationMutation(v9);
          }
          uint64_t v13 = *(void **)(*((void *)&v28 + 1) + 8 * i);
          [v13 logAsset];
          if ([v13 state] == 2)
          {
            uint64_t v14 = [v13 getLocalUrl];
            float v15 = (void *)v33[5];
            v33[5] = v14;

            v39[3] = 0;
          }
          else
          {
            [v13 attachProgressCallBack:&__block_literal_global_3];
            v24[0] = MEMORY[0x263EF8330];
            v24[1] = 3221225472;
            v24[2] = ___ZNK4turi11proprietary14style_transfer14style_transfer14request_assetsEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE_block_invoke_2;
            v24[3] = &unk_2646D6BE8;
            v24[4] = v13;
            uint64_t v25 = @"com.apple.MobileAsset.TuriCoreAsset";
            unsigned int v26 = &v32;
            uint64_t v27 = &v38;
            [v13 startDownload:v23 then:v24];
          }
        }
        uint64_t v10 = [v9 countByEnumeratingWithState:&v28 objects:v47 count:16];
      }
      while (v10);
    }
  }
  if (v39[3])
  {
    unsigned int v16 = 120;
    do
    {
      [MEMORY[0x263F08B88] sleepForTimeInterval:1.0];
      if (v39[3]) {
        BOOL v17 = v16 > 1;
      }
      else {
        BOOL v17 = 0;
      }
      --v16;
    }
    while (v17);
  }
  char v18 = (void *)v33[5];
  if (v18)
  {
    id v19 = [v18 path];
    std::string::basic_string[abi:ne180100]<0>(v22, (char *)[v19 UTF8String]);
  }
  else
  {
    MEMORY[0x22A614700](v21, "Unsuccessfully downloaded Style Transfer assets.");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
  }
  _Block_object_dispose(&v32, 8);

  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(&v43, 8);
}

void sub_223E6D3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a45, 8);

  _Unwind_Resume(a1);
}

void ___ZNK4turi11proprietary14style_transfer14style_transfer14request_assetsEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void ___ZNK4turi11proprietary14style_transfer14style_transfer14request_assetsEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE_block_invoke_368(uint64_t a1, void *a2)
{
  id v2 = a2;
  NSLog(&cfstr_ProgressCallba.isa, [v2 totalWritten], objc_msgSend(v2, "totalExpected"));
}

void sub_223E6D528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void ___ZNK4turi11proprietary14style_transfer14style_transfer14request_assetsEPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) getLocalUrl];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  BOOL v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = v4;

  NSLog(&cfstr_GotTheDownload_0.isa, *(void *)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = a2;
}

void turi::proprietary::style_transfer::style_transfer::request_style_transfer_assets(uint64_t a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "");
  turi::proprietary::style_transfer::style_transfer::request_assets((uint64_t)v6, __p);
  char v3 = HIBYTE(v7);
  if (SHIBYTE(v7) < 0)
  {
    if (v6[1]) {
      goto LABEL_3;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(void *)(a1 + 16) = v5;
    if ((v3 & 0x80) == 0) {
      return;
    }
    goto LABEL_8;
  }
  if (!HIBYTE(v7)) {
    goto LABEL_7;
  }
LABEL_3:
  *(_OWORD *)a1 = *(_OWORD *)v6;
  *(void *)(a1 + 16) = v7;
  v6[1] = 0;
  uint64_t v7 = 0;
  v6[0] = 0;
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[0]);
    if (v7 < 0) {
LABEL_8:
    }
      operator delete(v6[0]);
  }
}

void sub_223E6D658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *turi::proprietary::style_transfer::style_transfer::name(turi::proprietary::style_transfer::style_transfer *this)
{
  return "style_transfer";
}

void *turi::proprietary::style_transfer::style_transfer::uid(turi::proprietary::style_transfer::style_transfer *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(turi::proprietary::style_transfer::style_transfer::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/proprietary/src/style_transfer/style_transfer.hpp");
    __cxa_atexit(MEMORY[0x263F8C0B8], turi::proprietary::style_transfer::style_transfer::uid(void)::_uid, &dword_223D44000);
  }
  return turi::proprietary::style_transfer::style_transfer::uid(void)::_uid;
}

void sub_223E6D780(_Unwind_Exception *a1)
{
}

void turi::proprietary::style_transfer::style_transfer::perform_registration(turi::proprietary::style_transfer::style_transfer *this)
{
  *(void *)&long long v13 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 24))
  {
    turi::style_transfer::style_transfer::perform_registration(this);
    std::string::basic_string[abi:ne180100]<0>(&__p, "predict");
    std::string::basic_string[abi:ne180100]<0>(&v11, "data");
    char v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v7 = &v3;
    char v8 = 0;
    char v3 = (std::string *)operator new(0x18uLL);
    uint64_t v4 = v3;
    uint64_t v5 = v3 + 1;
    uint64_t v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v5, &v11, &v13, v3);
    turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>("data", (std::string::size_type)turi::proprietary::style_transfer::style_transfer::stylize_validation_image, 0, (uint64_t)v10);
    turi::model_base::register_function((uint64_t)this, &__p, (uint64_t)&v3, (uint64_t)v10);
    std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v10);
    uint64_t v7 = &v3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
    if (v12 < 0) {
      operator delete((void *)v11);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, "request_style_transfer_assets");
    char v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_11proprietary14style_transfer14style_transferENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEJEJEEENS5_8functionIFN5boost7variantINSD_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS5_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSK_INS_10model_baseEEENSK_INS_17unity_sframe_baseEEENSK_INS_17unity_sarray_baseEEENS5_3mapISB_NSD_18recursive_variant_ENS5_4lessISB_EENS9_INS5_4pairIKSB_SV_EEEEEENS5_6vectorISV_NS9_ISV_EEEENSD_17recursive_wrapperINS_21function_closure_infoEEEEEEPSO_NSU_ISB_S19_SX_NS9_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_((std::string::size_type)turi::proprietary::style_transfer::style_transfer::request_style_transfer_assets, 0, (uint64_t)v9);
    turi::model_base::register_function((uint64_t)this, &__str, (uint64_t)&v3, (uint64_t)v9);
    std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v9);
    *(void *)&long long v11 = &v3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *((unsigned char *)this + 24) = 1;
  }
}

void sub_223E6D958(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  *(void *)(v8 - 64) = va;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 64));
  if (a8 < 0) {
    operator delete(a3);
  }
  _Unwind_Resume(a1);
}

void *std::vector<double>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    BOOL v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_223E6DA68(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_223E6DB00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_223E6DB24(_Unwind_Exception *a1)
{
}

turi::ml_model_base *turi::style_transfer::style_transfer::perform_registration(turi::ml_model_base *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 24)) {
    turi::ml_model_base::perform_registration(this);
  }
  return this;
}

void sub_223E6E854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a68, (char *)a69);
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~pair((uint64_t)&STACK[0x240]);
  if (*(char *)(v69 - 225) < 0) {
    operator delete(*(void **)(v69 - 248));
  }
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  unsigned int v9 = 0;
  uint64_t v10 = 0;
  long long v11 = 0;
  uint64_t v12 = &v9;
  char v13 = 0;
  unsigned int v9 = (std::string *)operator new(0x18uLL);
  uint64_t v10 = v9;
  long long v11 = v9 + 1;
  uint64_t v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, (long long *)__p, v17, v9);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(a2, a3, (uint64_t)&v9, (uint64_t)v17);
  uint64_t v12 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v17);
  *(void *)(a4 + 24) = 0;
  uint64_t v7 = operator new(0x28uLL);
  void *v7 = &unk_26D756410;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v14);
  *(void *)(a4 + 24) = v7;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v14);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v17);
}

void sub_223E6EFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](&a15);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v24 - 88));
  _Unwind_Resume(a1);
}

void *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_11proprietary14style_transfer14style_transferENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEJEJEEENS5_8functionIFN5boost7variantINSD_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS5_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSK_INS_10model_baseEEENSK_INS_17unity_sframe_baseEEENSK_INS_17unity_sarray_baseEEENS5_3mapISB_NSD_18recursive_variant_ENS5_4lessISB_EENS9_INS5_4pairIKSB_SV_EEEEEENS5_6vectorISV_NS9_ISV_EEEENSD_17recursive_wrapperINS_21function_closure_infoEEEEEEPSO_NSU_ISB_S19_SX_NS9_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(a1, a2, (uint64_t)v6, (uint64_t)v9);
  uint64_t v7 = (void **)v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v9);
  *(void *)(a3 + 24) = 0;
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = &unk_26D756510;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)v8);
  *(void *)(a3 + 24) = v4;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v9);
}

void sub_223E6F108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v6 - 56));
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v20, __s);
  std::string::basic_string[abi:ne180100]<0>(v21, a4);
  std::string::basic_string[abi:ne180100]<0>(v22, a5);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v17 = &v14;
  char v18 = 0;
  uint64_t v14 = (std::string *)operator new(0x48uLL);
  uint64_t v15 = v14;
  char v16 = v14 + 3;
  uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v16, &v20, v23, v14);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(a2, a3, (uint64_t)&v14, (uint64_t)v23);
  uint64_t v17 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v22[i + 2]) < 0) {
      operator delete((void *)v22[i]);
    }
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)v23);
  *(void *)(a6 + 24) = 0;
  uint64_t v12 = operator new(0x28uLL);
  *uint64_t v12 = &unk_26D755E00;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v12 + 1), (uint64_t)v19);
  *(void *)(a6 + 24) = v12;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v19);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v23);
}

void sub_223E6F2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v7 - 104));
  _Unwind_Resume(a1);
}

uint64_t turi::style_transfer::style_transfer::init_training(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t turi::style_transfer::style_transfer::resume_training(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

void *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_14style_transfer14style_transferEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(a1, a2, (uint64_t)v6, (uint64_t)v9);
  uint64_t v7 = (void **)v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v9);
  *(void *)(a3 + 24) = 0;
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = &unk_26D755F00;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)v8);
  *(void *)(a3 + 24) = v4;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v9);
}

void sub_223E6F48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v6 - 56));
  _Unwind_Resume(a1);
}

uint64_t turi::style_transfer::style_transfer::iterate_training(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

uint64_t turi::style_transfer::style_transfer::synchronize_training(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t turi::style_transfer::style_transfer::finalize_training(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v22, __s);
  std::string::basic_string[abi:ne180100]<0>(v23, a4);
  std::string::basic_string[abi:ne180100]<0>(v24, a5);
  std::string::basic_string[abi:ne180100]<0>(v25, a6);
  char v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  id v19 = &v16;
  char v20 = 0;
  char v16 = (std::string *)operator new(0x60uLL);
  uint64_t v17 = v16;
  char v18 = v16 + 4;
  uint64_t v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, &v22, v26, v16);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(a2, a3, (uint64_t)&v16, (uint64_t)v26);
  id v19 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v25[i + 2]) < 0) {
      operator delete((void *)v25[i]);
    }
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v26);
  *(void *)(a7 + 24) = 0;
  uint64_t v14 = operator new(0x28uLL);
  void *v14 = &unk_26D756000;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v14 + 1), (uint64_t)v21);
  *(void *)(a7 + 24) = v14;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v21);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v26);
}

void sub_223E6F6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](va);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v6 - 104));
  _Unwind_Resume(a1);
}

uint64_t turi::style_transfer::style_transfer::export_to_coreml(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v18, __s);
  std::string::basic_string[abi:ne180100]<0>(v19, a4);
  uint64_t v12 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = &v12;
  char v16 = 0;
  uint64_t v12 = (std::string *)operator new(0x30uLL);
  char v13 = v12;
  uint64_t v14 = v12 + 2;
  char v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, &v18, v20, v12);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(a2, a3, (uint64_t)&v12, (uint64_t)v20);
  uint64_t v15 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v19[i + 2]) < 0) {
      operator delete((void *)v19[i]);
    }
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v20);
  *(void *)(a5 + 24) = 0;
  uint64_t v10 = operator new(0x28uLL);
  void *v10 = &unk_26D756100;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v10 + 1), (uint64_t)v17);
  *(void *)(a5 + 24) = v10;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v17);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v20);
}

void sub_223E6F910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](&a14);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v23 - 88));
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v18, __s);
  std::string::basic_string[abi:ne180100]<0>(v19, a4);
  uint64_t v12 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = &v12;
  char v16 = 0;
  uint64_t v12 = (std::string *)operator new(0x30uLL);
  char v13 = v12;
  uint64_t v14 = v12 + 2;
  char v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, &v18, v20, v12);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(a2, a3, (uint64_t)&v12, (uint64_t)v20);
  uint64_t v15 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v19[i + 2]) < 0) {
      operator delete((void *)v19[i]);
    }
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v20);
  *(void *)(a5 + 24) = 0;
  uint64_t v10 = operator new(0x28uLL);
  void *v10 = &unk_26D756200;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v10 + 1), (uint64_t)v17);
  *(void *)(a5 + 24) = v10;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v17);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v20);
}

void sub_223E6FB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](&a14);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v23 - 88));
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  unsigned int v9 = 0;
  uint64_t v10 = 0;
  long long v11 = 0;
  uint64_t v12 = &v9;
  char v13 = 0;
  unsigned int v9 = (std::string *)operator new(0x18uLL);
  uint64_t v10 = v9;
  long long v11 = v9 + 1;
  uint64_t v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, (long long *)__p, v17, v9);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(a2, a3, (uint64_t)&v9, (uint64_t)v17);
  uint64_t v12 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v17);
  *(void *)(a4 + 24) = 0;
  uint64_t v7 = operator new(0x28uLL);
  void *v7 = &unk_26D756300;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v14);
  *(void *)(a4 + 24) = v7;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v14);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v17);
}

void sub_223E6FCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](&a15);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v24 - 88));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  long long v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  void v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  char v13 = (char *)operator new(0x30uLL);
  *(void *)char v13 = &unk_26D755D70;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223E6FF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D755D70;
  char v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D755D70;
  char v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  id v2 = (char *)operator new(0x30uLL);
  *(void *)id v2 = &unk_26D755D70;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223E700B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D755D70;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((long long *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(long long *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223E7024C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<3ul,turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  char v20 = 1;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v23 = 0;
  uint64_t v24 = v25;
  boost::fusion::vector_detail::vector_data<boost::fusion::detail::index_sequence<0ul,1ul,2ul,3ul>,turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>::vector_data(&v16);
  uint64_t v15 = a3;
  uint64_t v16 = a2;
  memset(&v14, 0, sizeof(v14));
  if (&v14 == (std::vector<std::string> *)(a1 + 1))
  {
    std::__split_buffer<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *((std::string **)a1 + 2), *((long long **)a1 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 3) - *((void *)a1 + 2)) >> 3));
    begiuint64_t n = (long long *)v14.__begin_;
    std::__split_buffer<std::string>::pointer end = (long long *)v14.__end_;
  }
  char v13 = &v16;
  std::string::size_type v10 = &v16;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v12 = v15;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v10);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(&v10);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(&v10);
  *(void *)&long long v26 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  long long v26 = *a1;
  std::__invoke[abi:ne180100]<void (turi::style_transfer::style_transfer::* const&)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),turi::style_transfer::style_transfer*&,turi::gl_sarray&,turi::gl_sarray&,std::map<std::string,turi::flexible_type>&,void>((uint64_t)&v26, &v16, (turi::gl_sarray *)v17, (const turi::gl_sarray *)v18, (uint64_t)v19);
  *(void *)&long long v26 = 0;
  DWORD2(v26) = 0;
  BYTE12(v26) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v26, &turi::FLEX_UNDEFINED);
  *(void *)(a4 + 13) = *(void *)((char *)&v26 + 5);
  *(void *)(a4 + 8) = v26;
  *(unsigned char *)(a4 + 2CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = BYTE12(v26);
  *(_DWORD *)a4 = 0;
  *(void *)&long long v26 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v19, v19[1]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v18);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v17);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v24, v25[0]);
  if (SHIBYTE(v23) < 0) {
    operator delete(v21);
  }
}

void sub_223E70460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  *(void *)(v12 - 104) = v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 104));
  boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>::~vector((void **)va);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v12 - 160));
  _Unwind_Resume(a1);
}

void **boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>::~vector(void **a1)
{
  return a1;
}

void *boost::fusion::vector_detail::vector_data<boost::fusion::detail::index_sequence<0ul,1ul,2ul,3ul>,turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>::vector_data(void *a1)
{
  *a1 = 0;
  long long v2 = (turi::gl_sarray *)(a1 + 6);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)(a1 + 1));
  turi::gl_sarray::gl_sarray(v2);
  a1[13] = 0;
  a1[12] = 0;
  a1[11] = a1 + 12;
  return a1;
}

void sub_223E70544(_Unwind_Exception *a1)
{
  turi::gl_sarray::~gl_sarray(v1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<1>(void *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 24));
    if (a1[4] + 8 == v3)
    {
      v4[0] = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<turi::gl_sarray,void>::get((int *)(v3 + 56), (uint64_t)v4);
    turi::gl_sarray::operator=(*a1 + 8, (uint64_t)v4);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v4);
  }
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(void *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 3)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 48));
    if (a1[4] + 8 == v3)
    {
      v4[0] = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<turi::gl_sarray,void>::get((int *)(v3 + 56), (uint64_t)v4);
    turi::gl_sarray::operator=(*a1 + 48, (uint64_t)v4);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v4);
  }
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(void *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 4)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 72));
    if (a1[4] + 8 == v3)
    {
      uint64_t v8 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(mpl_::integral_c<int,3>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v3 + 56), (uint64_t)&v8);
    uint64_t v4 = *a1 + 96;
    uint64_t v5 = (uint64_t *)(*a1 + 88);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v5, *(void **)v4);
    uint64_t v6 = v9;
    *(void *)(v4 - 8) = v8;
    *(void *)uint64_t v4 = v6;
    uint64_t v7 = v10;
    *(void *)(v4 + 8) = v10;
    if (v7)
    {
      v6[2] = v4;
      uint64_t v8 = &v9;
      std::vector<std::string>::const_iterator v9 = 0;
      uint64_t v10 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t *v5 = v4;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v8, v6);
  }
}

void std::__invoke[abi:ne180100]<void (turi::style_transfer::style_transfer::* const&)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),turi::style_transfer::style_transfer*&,turi::gl_sarray&,turi::gl_sarray&,std::map<std::string,turi::flexible_type>&,void>(uint64_t a1, void *a2, turi::gl_sarray *a3, const turi::gl_sarray *a4, uint64_t a5)
{
  uint64_t v8 = *(void (**)(void *, unsigned char *, unsigned char *, uint64_t *))a1;
  uint64_t v7 = *(void *)(a1 + 8);
  std::vector<std::string>::const_iterator v9 = (void *)(*a2 + (v7 >> 1));
  if (v7) {
    uint64_t v8 = *(void (**)(void *, unsigned char *, unsigned char *, uint64_t *))(*v9 + v8);
  }
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v12, a3);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v11, a4);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v10, a5);
  v8(v9, v12, v11, v10);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v10, (void *)v10[1]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v11);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v12);
}

void sub_223E7085C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)va, v5);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va1);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D755E00;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D755E00;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D755E00;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223E70A28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D755E00;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = *(char ***)a3;
  uint64_t v8 = (char *)v6;
  if (*(void *)(a3 + 16))
  {
    *(void *)(v6 + 16) = &v8;
    *(void *)a3 = v5;
    void *v5 = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(v4, a1, (const void ***)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223E70BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(void *lpsrc@<X1>, uint64_t a2@<X0>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  v11[9] = *MEMORY[0x263EF8340];
  if (lpsrc) {
  else
  }
    uint64_t v7 = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v8, a3);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(a2, (uint64_t)v7);
  uint64_t v9 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)v10, v10 ^ (v10 >> 31), &v9, (uint64_t)v11);
  *(_DWORD *)a4 = v10 ^ (v10 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v10);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v8, (char *)v8[1]);
}

void sub_223E70D30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, char *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

uint64_t std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  void v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  char v13 = (char *)operator new(0x30uLL);
  *(void *)char v13 = &unk_26D755E80;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223E71010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_26D755E80;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_26D755E80;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D755E80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223E7119C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7__cloneEPNS0_6__baseIS1S_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D755E80;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE18destroy_deallocateEv(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EEclEOS1P_OS1F_(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(void (turi::style_transfer::style_transfer::*)(),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(void (turi::style_transfer::style_transfer::*)(),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl32generate_member_function_wrapperILm0ENS2_14style_transfer14style_transferEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_FT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(void (turi::style_transfer::style_transfer::*)(),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(void (turi::style_transfer::style_transfer::*)(),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(void (turi::style_transfer::style_transfer::*)(),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223E71334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<0ul,turi::style_transfer::style_transfer,void>(void (turi::style_transfer::style_transfer::*)(),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v23[2] = *(void ***)MEMORY[0x263EF8340];
  char v17 = 1;
  std::string __p = 0;
  uint64_t v19 = 0;
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v20 = 0;
  uint64_t v21 = v22;
  uint64_t v15 = a3;
  uint64_t v16 = a2;
  memset(&v14, 0, sizeof(v14));
  if (&v14 == (std::vector<std::string> *)(a1 + 16))
  {
    std::__split_buffer<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v14.__begin_;
    std::__split_buffer<std::string>::pointer end = (long long *)v14.__end_;
  }
  char v13 = &v16;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v12 = v15;
  v23[0] = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v23);
  uint64_t v8 = *(void (**)(void *))a1;
  uint64_t v9 = *(void *)(a1 + 8);
  std::string::size_type v10 = (void *)(v16 + (v9 >> 1));
  if (v9) {
    uint64_t v8 = *(void (**)(void *))(*v10 + v8);
  }
  v8(v10);
  memset(v23, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v23, &turi::FLEX_UNDEFINED);
  *(void ***)(a4 + 13) = *(void ***)((char *)v23 + 5);
  *(void ***)(a4 + 8) = v23[0];
  *(unsigned char *)(a4 + 2CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = BYTE4(v23[1]);
  *(_DWORD *)a4 = 0;
  v23[0] = (void **)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v23);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v21, v22[0]);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
}

void sub_223E71514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  *(void *)(v14 - 72) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_ED1Ev(void *a1)
{
  *a1 = &unk_26D755F00;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_ED0Ev(void *a1)
{
  *a1 = &unk_26D755F00;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D755F00;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223E71638(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7__cloneEPNS0_6__baseIS1F_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26D755F00;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_EclEOS1B_OS1E_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_14style_transfer14style_transferEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS19_S1C_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_14style_transfer14style_transferEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_14style_transfer14style_transferEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_FT0_DpT1_EDpT2_EUlS19_S1C_E_;
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  void v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D755F80;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223E718E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D755F80;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D755F80;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x30uLL);
  *(void *)long long v2 = &unk_26D755F80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223E71A74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D755F80;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223E71C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v27 = 1;
  long long v28 = 0;
  uint64_t v29 = 0;
  v32[0] = 0;
  v32[1] = 0;
  uint64_t v30 = 0;
  long long v31 = v32;
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v22 = 0u;
  uint64_t v23 = v24;
  v24[0] = 0;
  v26[0] = 0;
  v26[1] = 0;
  v24[1] = 0;
  uint64_t v25 = v26;
  uint64_t v18 = a3;
  uint64_t v19 = a2;
  memset(&v17, 0, sizeof(v17));
  if (&v17 == (std::vector<std::string> *)(a1 + 16))
  {
    std::__split_buffer<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v17, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v17.__begin_;
    std::__split_buffer<std::string>::pointer end = (long long *)v17.__end_;
  }
  uint64_t v16 = &v19;
  uint64_t v13 = &v19;
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v15 = v18;
  boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,1>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>>((uint64_t)&v33, (uint64_t *)&v13);
  uint64_t v11 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::shared_ptr<turi::coreml::MLModelWrapper>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&v11, (long long *)a1, &v19);
  p_int data = (void **)&v11->__r_.__value_.__l.__data_;
  std::vector<std::string>::const_iterator v9 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string::size_type v10 = v12;
    *(void *)(a4 + 8) = p_data;
    *(void *)(a4 + 16) = v9;
    *(_DWORD *)a4 = 3;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    *(void *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = 0;
    *(_DWORD *)a4 = 3;
  }
  uint64_t v11 = (std::string *)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v25, v26[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v23, v24[0]);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v20[0]);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v31, v32[0]);
  if (SHIBYTE(v30) < 0) {
    operator delete(v28);
  }
}

void sub_223E71E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>::~vector((uint64_t)va1);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)(v2 - 128));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::shared_ptr<turi::coreml::MLModelWrapper>>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<4ul,turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, long long *a2, void *a3)
{
  long long v6 = *a2;
  std::__invoke[abi:ne180100]<std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::* const&)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),turi::style_transfer::style_transfer*&,std::string&,std::string&,std::map<std::string,turi::flexible_type>&,std::map<std::string,turi::flexible_type>&,void>((uint64_t)&v6, a3, (uint64_t)(a3 + 1), (uint64_t)(a3 + 4), (uint64_t)(a3 + 7), (uint64_t)(a3 + 10));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>::~vector(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void boost::fusion::detail::for_each_unrolled<4>::call<boost::fusion::mpl_iterator<boost::mpl::r_iter<mpl_::integral_c<int,1>>>,turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>>(uint64_t a1, uint64_t *a2)
{
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<2>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<3>(a2);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<4>(a2);
}

double turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<2>(void *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 3)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 48));
    if (a1[4] + 8 == v3)
    {
      v7.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::string,void>::get((int *)(v3 + 56), &v7);
    uint64_t v4 = *a1;
    long long v5 = (void **)(*a1 + 32);
    if (*(char *)(v4 + 55) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v7.__r_.__value_.__l.__data_;
    *(std::string *)long long v5 = v7;
  }
  return result;
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<3>(void *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 4)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 72));
    if (a1[4] + 8 == v3)
    {
      uint64_t v8 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<3>(mpl_::integral_c<int,3>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v3 + 56), (uint64_t)&v8);
    uint64_t v4 = *a1 + 64;
    long long v5 = (uint64_t *)(*a1 + 56);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v5, *(void **)v4);
    long long v6 = v9;
    *(void *)(v4 - 8) = v8;
    *(void *)uint64_t v4 = v6;
    uint64_t v7 = v10;
    *(void *)(v4 + 8) = v10;
    if (v7)
    {
      v6[2] = v4;
      uint64_t v8 = &v9;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      long long v6 = 0;
    }
    else
    {
      uint64_t *v5 = v4;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v8, v6);
  }
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<4>(void *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 5)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 96));
    if (a1[4] + 8 == v3)
    {
      uint64_t v8 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>>>::operator()<4>(mpl_::integral_c<int,4>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v3 + 56), (uint64_t)&v8);
    uint64_t v4 = *a1 + 88;
    long long v5 = (uint64_t *)(*a1 + 80);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v5, *(void **)v4);
    long long v6 = v9;
    *(void *)(v4 - 8) = v8;
    *(void *)uint64_t v4 = v6;
    uint64_t v7 = v10;
    *(void *)(v4 + 8) = v10;
    if (v7)
    {
      v6[2] = v4;
      uint64_t v8 = &v9;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      long long v6 = 0;
    }
    else
    {
      uint64_t *v5 = v4;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v8, v6);
  }
}

void std::__invoke[abi:ne180100]<std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::* const&)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),turi::style_transfer::style_transfer*&,std::string&,std::string&,std::map<std::string,turi::flexible_type>&,std::map<std::string,turi::flexible_type>&,void>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void (**)(void *, std::string *, std::string *, uint64_t *, uint64_t *))a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v11 = (void *)(*a2 + (v9 >> 1));
  if (v9) {
    uint64_t v10 = *(void (**)(void *, std::string *, std::string *, uint64_t *, uint64_t *))(*v11 + v10);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v15 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v14 = *(std::string *)a4;
  }
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v13, a5);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v12, a6);
  v10(v11, &v15, &v14, v13, v12);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v12, (void *)v12[1]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v13, (void *)v13[1]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_223E7231C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D756000;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D756000;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_26D756000;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223E72474(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D756000;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,std::shared_ptr<turi::coreml::MLModelWrapper>,std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*,char const*>(std::shared_ptr<turi::coreml::MLModelWrapper> (turi::style_transfer::style_transfer::*)(std::string,std::string,std::map<std::string,turi::flexible_type>,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  long long v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  void v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D756080;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223E72724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D756080;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D756080;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D756080;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223E728B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D756080;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  long long v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223E72A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v30[2] = *(void **)MEMORY[0x263EF8340];
  char v16 = 1;
  std::string __p = 0;
  uint64_t v18 = 0;
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v19 = 0;
  uint64_t v20 = v21;
  uint64_t v26 = 0;
  int v27 = 0;
  char v28 = 0;
  unsigned int v25 = 0;
  v30[0] = 0;
  v30[1] = 0;
  uint64_t v29 = v30;
  uint64_t v24 = a2;
  memset(&v14, 0, sizeof(v14));
  uint64_t v15 = a3;
  if (&v14 == (std::vector<std::string> *)(a1 + 16))
  {
    std::__split_buffer<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v14.__begin_;
    std::__split_buffer<std::string>::pointer end = (long long *)v14.__end_;
  }
  uint64_t v13 = &v24;
  std::string::size_type v10 = &v24;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v12 = v15;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v10);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<2>(&v10);
  v22[0] = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v22);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v8);
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)v8, (long long *)a1, (uint64_t)&v24);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v22, (const turi::gl_sframe *)v8);
  turi::variant_converter<turi::gl_sframe,void>::set((uint64_t)v22, a4);
  v22[0] = (void **)&unk_26D759E10;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  v8[0] = &unk_26D759E10;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  v22[0] = (void **)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v22);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v25);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v20, v21[0]);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
}

void sub_223E72C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  boost::fusion::vector<turi::style_transfer::style_transfer *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>::~vector(v2 - 184);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va1);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v6 = *a2;
  std::__invoke[abi:ne180100]<turi::gl_sframe (turi::style_transfer::style_transfer::* const&)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),turi::style_transfer::style_transfer*&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&,std::map<std::string,turi::flexible_type>&,void>((uint64_t)&v6, (void *)a3, (int *)(a3 + 8), a3 + 88);
  turi::gl_sframe::operator=(a1, (uint64_t)&v4);
  uint64_t v4 = &unk_26D759E10;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_223E72DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::fusion::vector<turi::style_transfer::style_transfer *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>::~vector(uint64_t a1)
{
  return a1;
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(void *a1)
{
  v8[9] = *MEMORY[0x263EF8340];
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 24));
    if (a1[4] + 8 == v3)
    {
      uint64_t v7 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    long long v5 = (int *)(v3 + 56);
    uint64_t v4 = (uint64_t *)*(unsigned int *)(v3 + 56);
    long long v6 = (std::string *)v8;
    boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v4, v4 ^ ((int)v4 >> 31), &v6, (uint64_t)(v5 + 2));
    LODWORD(v7) = *v5 ^ (*v5 >> 31);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(*a1 + 8), (unsigned int *)&v7);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v7);
  }
}

void sub_223E72F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<2>(void *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 3)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 48));
    if (a1[4] + 8 == v3)
    {
      uint64_t v8 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    }
    turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)(v3 + 56), (uint64_t)&v8);
    uint64_t v4 = *a1 + 96;
    long long v5 = (uint64_t *)(*a1 + 88);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v5, *(void **)v4);
    long long v6 = v9;
    *(void *)(v4 - 8) = v8;
    *(void *)uint64_t v4 = v6;
    uint64_t v7 = v10;
    *(void *)(v4 + 8) = v10;
    if (v7)
    {
      v6[2] = v4;
      uint64_t v8 = &v9;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      long long v6 = 0;
    }
    else
    {
      uint64_t *v5 = v4;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v8, v6);
  }
}

void std::__invoke[abi:ne180100]<turi::gl_sframe (turi::style_transfer::style_transfer::* const&)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),turi::style_transfer::style_transfer*&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&,std::map<std::string,turi::flexible_type>&,void>(uint64_t a1, void *a2, int *a3, uint64_t a4)
{
  v12[9] = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void (**)(void *, int *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v8 = (void *)(*a2 + (v6 >> 1));
  if (v6) {
    uint64_t v7 = *(void (**)(void *, int *, uint64_t *))(*v8 + v7);
  }
  uint64_t v10 = (std::string *)v12;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)*a3, *a3 ^ (*a3 >> 31), &v10, (uint64_t)(a3 + 2));
  int v11 = *a3 ^ (*a3 >> 31);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v9, a4);
  v7(v8, &v11, v9);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v9, (void *)v9[1]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v11);
}

void sub_223E73118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  long long v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)va, v5);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D756100;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D756100;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_26D756100;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223E73244(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D756100;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>,char const*,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  long long v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  void v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D756180;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223E734F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D756180;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D756180;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D756180;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223E73680(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D756180;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((long long *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(long long *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  long long v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223E73818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  char v18 = 1;
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  long long v22 = v23;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v17 = 0;
  uint64_t v14 = a2;
  uint64_t v15 = v16;
  memset(&v12, 0, sizeof(v12));
  uint64_t v13 = a3;
  if (&v12 == (std::vector<std::string> *)(a1 + 1))
  {
    std::__split_buffer<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *((std::string **)a1 + 2), *((long long **)a1 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 3) - *((void *)a1 + 2)) >> 3));
    begiuint64_t n = (long long *)v12.__begin_;
    std::__split_buffer<std::string>::pointer end = (long long *)v12.__end_;
  }
  uint64_t v11 = &v14;
  uint64_t v8 = (char *)&v14;
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v10 = v13;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>>::operator()<1>(&v8);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>>::operator()<2>(&v8);
  *(void *)&long long v24 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  long long v24 = *a1;
  std::__mem_fn<void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long)>::operator()[abi:ne180100]<turi::style_transfer::style_transfer*&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>&,unsigned long &>((uint64_t)&v24, &v14, (const void ***)&v15, &v17);
  *(void *)&long long v24 = 0;
  DWORD2(v24) = 0;
  BYTE12(v24) = 0;
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)&v24, &turi::FLEX_UNDEFINED);
  *(void *)(a4 + 13) = *(void *)((char *)&v24 + 5);
  *(void *)(a4 + 8) = v24;
  *(unsigned char *)(a4 + 2CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = BYTE12(v24);
  *(_DWORD *)a4 = 0;
  *(void *)&long long v24 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v15, v16[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223E73A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  *(void *)(v19 - 12CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 120));
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v17, a15);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>>::operator()<1>(char **a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 2)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a1[4], (const void **)v1 + 3);
    if (a1[4] + 8 == (char *)v3)
    {
      std::string v9 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    }
    turi::toolkit_function_wrapper_impl::read_arg<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t *)(v3 + 56), (uint64_t)&v9);
    uint64_t v4 = (uint64_t)(*a1 + 16);
    long long v5 = (uint64_t *)(*a1 + 8);
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v5, *(char **)v4);
    *(void *)(v4 - 8) = v9;
    uint64_t v6 = v10;
    *(void *)uint64_t v4 = v10;
    uint64_t v7 = v11;
    *(void *)(v4 + 8) = v11;
    if (v7)
    {
      uint64_t v8 = 0;
      *((void *)v6 + 2) = v4;
      std::string v9 = &v10;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t *v5 = v4;
      uint64_t v8 = v10;
    }
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v9, v8);
  }
}

void *turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long>>::operator()<2>(void *result)
{
  uint64_t v1 = result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - v1) >> 3) >= 3)
  {
    long long v2 = result;
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(result[4], (const void **)(v1 + 48));
    if (v2[4] + 8 == v3) {
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    }
    double result = (void *)turi::variant_converter<unsigned long,void>::get((uint64_t)&v4, (int *)(v3 + 56));
    *(void *)(*v2 + 32) = result;
  }
  return result;
}

void std::__mem_fn<void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long)>::operator()[abi:ne180100]<turi::style_transfer::style_transfer*&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>&,unsigned long &>(uint64_t a1, void *a2, const void ***a3, void *a4)
{
  uint64_t v6 = *(void (**)(void *, uint64_t *, void))a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v6 = *(void (**)(void *, uint64_t *, void))(*v7 + v6);
  }
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v8, a3);
  v6(v7, v8, *a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v8, (char *)v8[1]);
}

void sub_223E73C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D756200;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D756200;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D756200;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223E73D6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D756200;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,unsigned long),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  long long v22 = v23;
  long long v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  void v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D756280;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223E7401C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D756280;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D756280;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x30uLL);
  *(void *)long long v2 = &unk_26D756280;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223E741A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D756280;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223E74340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  char v16 = 1;
  std::string __p = 0;
  uint64_t v18 = 0;
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v19 = 0;
  uint64_t v20 = v21;
  uint64_t v26 = 0;
  int v27 = 0;
  char v28 = 0;
  unsigned int v25 = 0;
  uint64_t v24 = a2;
  uint64_t v15 = a3;
  memset(&v14, 0, sizeof(v14));
  if (&v14 == (std::vector<std::string> *)(a1 + 16))
  {
    std::__split_buffer<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v14.__begin_;
    std::__split_buffer<std::string>::pointer end = (long long *)v14.__end_;
  }
  uint64_t v13 = &v24;
  std::string::size_type v10 = &v24;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v12 = v15;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v10);
  v22[0] = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v22);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v8);
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)v8, (long long *)a1, (uint64_t)&v24);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v22, (const turi::gl_sframe *)v8);
  turi::variant_converter<turi::gl_sframe,void>::set((uint64_t)v22, a4);
  v22[0] = (void **)&unk_26D759E10;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  v8[0] = &unk_26D759E10;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  v22[0] = (void **)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v22);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v25);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v20, v21[0]);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
}

void sub_223E74558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v22);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a22);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sframe>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),std::vector<std::string>)::{lambda(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v6 = *a2;
  std::__mem_fn<turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>)>::operator()[abi:ne180100]<turi::style_transfer::style_transfer*&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&>((uint64_t)&v6, (void *)a3, (int *)(a3 + 8));
  turi::gl_sframe::operator=(a1, (uint64_t)&v4);
  uint64_t v4 = &unk_26D759E10;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_223E74680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__mem_fn<turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>)>::operator()[abi:ne180100]<turi::style_transfer::style_transfer*&,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>&>(uint64_t a1, void *a2, int *a3)
{
  v9[9] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void (**)(void *, int *))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  long long v6 = (void *)(*a2 + (v4 >> 1));
  if (v4) {
    uint64_t v5 = *(void (**)(void *, int *))(*v6 + v5);
  }
  uint64_t v7 = (std::string *)v9;
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)*a3, *a3 ^ (*a3 >> 31), &v7, (uint64_t)(a3 + 2));
  int v8 = *a3 ^ (*a3 >> 31);
  v5(v6, &v8);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v8);
}

void sub_223E747AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D756300;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D756300;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D756300;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223E748C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D756300;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,void,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>,char const*,char const*,char const*>(void (turi::style_transfer::style_transfer::*)(turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>),char const*,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::style_transfer::style_transfer,turi::gl_sframe,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,char const*>(turi::gl_sframe (turi::style_transfer::style_transfer::*)(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void *std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[12],turi::flexible_type&,0>(void *a1, char *a2, uint64_t a3)
{
  double result = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  result[4] = 0;
  uint64_t v5 = (atomic_ullong *volatile *)(result + 4);
  *((_DWORD *)result + 1CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  *((unsigned char *)result + 44) = 0;
  if (result + 4 != (void *)a3)
  {
    long long v6 = *(atomic_ullong **)a3;
    *(void *)((char *)result + 37) = *(void *)(a3 + 5);
    atomic_ullong *volatile *v5 = v6;
    LODWORD(v6) = *(unsigned __int8 *)(a3 + 12);
    *((unsigned char *)result + 44) = (_BYTE)v6;
    BOOL v7 = v6 > 9;
    int v8 = (1 << (char)v6) & 0x33C;
    if (!v7 && v8 != 0) {
      atomic_fetch_add(*v5, 1uLL);
    }
  }
  *((_DWORD *)result + 6) = 0;
  return result;
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  long long v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  void v27[3] = 0;
  int v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D756380;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223E74BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D756380;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D756380;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x30uLL);
  *(void *)long long v2 = &unk_26D756380;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223E74D80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D756380;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  BOOL v7 = (char **)*a3;
  int v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    BOOL v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223E74F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned char v18[40] = 1;
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  long long v22 = v23;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v18);
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  memset(&v15, 0, sizeof(v15));
  if (&v15 == (std::vector<std::string> *)(a1 + 16))
  {
    std::__split_buffer<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v15, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v15.__begin_;
    std::__split_buffer<std::string>::pointer end = (long long *)v15.__end_;
  }
  std::vector<std::string> v14 = &v17;
  uint64_t v11 = &v17;
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v13 = v16;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v11);
  v24[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v24);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v10);
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sarray>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)v10, (long long *)a1, &v17);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v24, (const turi::gl_sarray *)v10);
  turi::variant_converter<turi::gl_sarray,void>::set((const turi::gl_sarray *)v24, a4);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v24);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v10);
  v24[0] = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v24);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v18);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223E750C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  turi::gl_sarray::~gl_sarray(v30);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a30);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::result_of_function_wrapper<turi::gl_sarray>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, long long *a2, void *a3)
{
  long long v5 = *a2;
  std::__mem_fn<turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray)>::operator()[abi:ne180100]<turi::proprietary::style_transfer::style_transfer*&,turi::gl_sarray&>((uint64_t)&v5, a3, (turi::gl_sarray *)(a3 + 1));
  turi::gl_sarray::operator=(a1, (uint64_t)v4);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v4);
}

void sub_223E7518C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  _Unwind_Resume(a1);
}

void std::__mem_fn<turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray)>::operator()[abi:ne180100]<turi::proprietary::style_transfer::style_transfer*&,turi::gl_sarray&>(uint64_t a1, void *a2, turi::gl_sarray *a3)
{
  uint64_t v4 = *(void (**)(void *, unsigned char *))a1;
  uint64_t v3 = *(void *)(a1 + 8);
  long long v5 = (void *)(*a2 + (v3 >> 1));
  if (v3) {
    uint64_t v4 = *(void (**)(void *, unsigned char *))(*v5 + v4);
  }
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v6, a3);
  v4(v5, v6);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v6);
}

void sub_223E75238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D756410;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D756410;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D756410;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223E753E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D756410;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  long long v5 = (void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 8);
  BOOL v7 = *(char ***)a3;
  int v8 = (char *)v6;
  if (*(void *)(a3 + 16))
  {
    *(void *)(v6 + 16) = &v8;
    *(void *)a3 = v5;
    void *v5 = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    BOOL v7 = &v8;
  }
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(v4, a1, (const void ***)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223E755AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(void *lpsrc@<X1>, uint64_t a2@<X0>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  v11[9] = *MEMORY[0x263EF8340];
  if (lpsrc) {
  else
  }
    BOOL v7 = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v8, a3);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(a2, (uint64_t)v7);
  std::vector<std::string>::const_iterator v9 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)v10, v10 ^ (v10 >> 31), &v9, (uint64_t)v11);
  *(_DWORD *)a4 = v10 ^ (v10 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v10);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v8, (char *)v8[1]);
}

void sub_223E756E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  long long v5 = va_arg(va1, char *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

uint64_t std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  long long v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  void v27[3] = 0;
  int v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D756490;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223E759C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_26D756490;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_26D756490;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D756490;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223E75B54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EE7__cloneEPNS0_6__baseIS1T_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D756490;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EE18destroy_deallocateEv(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EEclEOS1Q_OS1G_(uint64_t a1, uint64_t *a2, void *a3)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string (turi::proprietary::style_transfer::style_transfer::*)()const,std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string (turi::proprietary::style_transfer::style_transfer::*)()const,std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMS1C_KFT1_DpT2_ENS15_ISD_NSB_ISD_EEEEEUlPS7_S1G_E_NSB_IS1R_EEFS1B_S1Q_S1G_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string (turi::proprietary::style_transfer::style_transfer::*)()const,std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string (turi::proprietary::style_transfer::style_transfer::*)()const,std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a3 + 1;
  uint64_t v5 = a3[1];
  uint64_t v6 = (uint64_t *)*a3;
  uint64_t v7 = v5;
  if (a3[2])
  {
    *(void *)(v5 + 16) = &v7;
    *a3 = v4;
    *uint64_t v4 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v6 = &v7;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string (turi::proprietary::style_transfer::style_transfer::*)()const,std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v3, (uint64_t)&v6);
}

void sub_223E75CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string (turi::proprietary::style_transfer::style_transfer::*)()const,std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v19[2] = *MEMORY[0x263EF8340];
  char v13 = 1;
  std::vector<std::string> v14 = 0;
  uint64_t v15 = 0;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v16 = 0;
  uint64_t v17 = v18;
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  memset(&v10, 0, sizeof(v10));
  if (&v10 == (std::vector<std::string> *)(a1 + 16))
  {
    std::__split_buffer<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v10.__begin_;
    std::__split_buffer<std::string>::pointer end = (long long *)v10.__end_;
  }
  std::vector<std::string>::const_iterator v9 = &v12;
  __p[3] = &v12;
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v8 = v11;
  __p[0] = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  memset(__p, 0, 24);
  _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE4callIZZNS0_38generate_const_member_function_wrapperILm0ENS_11proprietary14style_transfer14style_transferES8_JEEENS2_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSN_INS_10model_baseEEENSN_INS_17unity_sframe_baseEEENSN_INS_17unity_sarray_baseEEENS2_3mapIS8_NSG_18recursive_variant_ENS2_4lessIS8_EENS6_INS2_4pairIKS8_SY_EEEEEENS2_6vectorISY_NS6_ISY_EEEENSG_17recursive_wrapperINS_21function_closure_infoEEEEEEPT0_NSX_IS8_S1C_S10_NS6_INS11_IS12_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_IS8_NS6_IS8_EEEEENKUlPSE_S1H_E_clES1R_S1H_EUlvE_EEvT_((uint64_t)__p, a1, &v12);
  turi::flexible_type_converter<std::string>::set((uint64_t)v19);
}

void sub_223E75EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

double _ZN4turi29toolkit_function_wrapper_impl26result_of_function_wrapperINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE4callIZZNS0_38generate_const_member_function_wrapperILm0ENS_11proprietary14style_transfer14style_transferES8_JEEENS2_8functionIFN5boost7variantINSG_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS2_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSN_INS_10model_baseEEENSN_INS_17unity_sframe_baseEEENSN_INS_17unity_sarray_baseEEENS2_3mapIS8_NSG_18recursive_variant_ENS2_4lessIS8_EENS6_INS2_4pairIKS8_SY_EEEEEENS2_6vectorISY_NS6_ISY_EEEENSG_17recursive_wrapperINS_21function_closure_infoEEEEEEPT0_NSX_IS8_S1C_S10_NS6_INS11_IS12_S1C_EEEEEEEEEMS1D_KFT1_DpT2_ENS16_IS8_NS6_IS8_EEEEENKUlPSE_S1H_E_clES1R_S1H_EUlvE_EEvT_(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(long long *__return_ptr, void *);
  void *v6;
  double result;
  long long v8;
  uint64_t v9;

  uint64_t v5 = *(void (**)(long long *__return_ptr, void *))a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = (void *)(*a3 + (v4 >> 1));
  if (v4) {
    uint64_t v5 = *(void (**)(long long *__return_ptr, void *))(*v6 + v5);
  }
  v5(&v8, v6);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  double result = *(double *)&v8;
  *(_OWORD *)a1 = v8;
  *(void *)(a1 + 16) = v9;
  return result;
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_ED1Ev(void *a1)
{
  *a1 = &unk_26D756510;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_ED0Ev(void *a1)
{
  *a1 = &unk_26D756510;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_E7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D756510;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223E7606C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_E7__cloneEPNS0_6__baseIS1G_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26D756510;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_E7destroyEv(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_E18destroy_deallocateEv(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_EclEOS1C_OS1F_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::proprietary::style_transfer::style_transfer,turi::gl_sarray,turi::gl_sarray,char const*>(turi::gl_sarray (turi::proprietary::style_transfer::style_transfer::*)(turi::gl_sarray),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_11proprietary14style_transfer14style_transferENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEJEJEEENS5_8functionIFN5boost7variantINSD_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS5_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSK_INS_10model_baseEEENSK_INS_17unity_sframe_baseEEENSK_INS_17unity_sarray_baseEEENS5_3mapISB_NSD_18recursive_variant_ENS5_4lessISB_EENS9_INS5_4pairIKSB_SV_EEEEEENS5_6vectorISV_NS9_ISV_EEEENSD_17recursive_wrapperINS_21function_closure_infoEEEEEEPSO_NSU_ISB_S19_SX_NS9_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_11proprietary14style_transfer14style_transferENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSF_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSM_INS2_10model_baseEEENSM_INS2_17unity_sframe_baseEEENSM_INS2_17unity_sarray_baseEEENS_3mapISD_NSF_18recursive_variant_ENS_4lessISD_EENSB_INS_4pairIKSD_SX_EEEEEENS_6vectorISX_NSB_ISX_EEEENSF_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSQ_NSW_ISD_S1B_SZ_NSB_INS10_IS11_S1B_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1C_S1F_E_NSB_IS1Q_EES1G_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_11proprietary14style_transfer14style_transferENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEJEJEEENS5_8functionIFN5boost7variantINSD_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS5_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSK_INS_10model_baseEEENSK_INS_17unity_sframe_baseEEENSK_INS_17unity_sarray_baseEEENS5_3mapISB_NSD_18recursive_variant_ENS5_4lessISB_EENS9_INS5_4pairIKSB_SV_EEEEEENS5_6vectorISV_NS9_ISV_EEEENSD_17recursive_wrapperINS_21function_closure_infoEEEEEEPSO_NSU_ISB_S19_SX_NS9_INSY_ISZ_S19_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1A_S1D_E_;
}

char *std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[20],char const*>(uint64_t a1, char *a2, char **a3)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[20],char const*>(a1, a2, a3, (uint64_t)v3);
}

void sub_223E7620C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[20],char const*>(uint64_t a1@<X0>, char *a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(v8 + 4, a2, a3);
}

void sub_223E76280(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(void *a1, char *a2, char **a3)
{
  uint64_t v4 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  turi::flexible_type::flexible_type((turi::flexible_type *)(v4 + 3), *a3);
}

void sub_223E762D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[19],BOOL>(uint64_t **a1, char *a2, unsigned __int8 *a3)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[19],BOOL>((uint64_t)a1, a2, a3, (uint64_t)v8);
  uint64_t v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  uint64_t v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    uint64_t v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_223E76370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[19],BOOL>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  double result = std::string::basic_string[abi:ne180100]<0>(v8 + 4, a2);
  *((unsigned char *)v8 + 68) = 0;
  *((_DWORD *)v8 + 16) = 0;
  v8[7] = *a3;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_223E763FC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[11],int &>(uint64_t **a1, char *a2, int *a3)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[11],int &>((uint64_t)a1, a2, a3, (uint64_t)v8);
  uint64_t v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  uint64_t v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    uint64_t v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_223E76498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[11],int &>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  double result = std::string::basic_string[abi:ne180100]<0>(v8 + 4, a2);
  *((unsigned char *)v8 + 68) = 0;
  *((_DWORD *)v8 + 16) = 0;
  v8[7] = *a3;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_223E76524(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_impl<char const(&)[13],unsigned long &>(uint64_t **a1, char *a2, void *a3)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[13],unsigned long &>((uint64_t)a1, a2, a3, (uint64_t)v8);
  uint64_t v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  uint64_t v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    uint64_t v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_223E765C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<char const(&)[13],unsigned long &>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  double result = std::string::basic_string[abi:ne180100]<0>(v8 + 4, a2);
  *((unsigned char *)v8 + 68) = 0;
  *((_DWORD *)v8 + 16) = 0;
  v8[7] = *a3;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_223E7664C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<CoreML::Model,std::allocator<CoreML::Model>,CoreML::Specification::Model &,void>@<X0>(const CoreML::Specification::Model *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  double result = std::__shared_ptr_emplace<CoreML::Model>::__shared_ptr_emplace[abi:ne180100]<CoreML::Specification::Model &,std::allocator<CoreML::Model>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_223E766AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CoreML::Model>::__shared_ptr_emplace[abi:ne180100]<CoreML::Specification::Model &,std::allocator<CoreML::Model>,0>(void *a1, const CoreML::Specification::Model *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D756590;
  CoreML::Model::Model((CoreML::Model *)(a1 + 3), a2);
  return a1;
}

void sub_223E76708(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::Model>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D756590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::Model>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D756590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<CoreML::Model>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<turi::coreml::MLModelWrapper,std::allocator<turi::coreml::MLModelWrapper>,std::shared_ptr<CoreML::Model>,void>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x108uLL);
  std::__shared_ptr_emplace<turi::coreml::MLModelWrapper>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<CoreML::Model>,std::allocator<turi::coreml::MLModelWrapper>,0>((uint64_t)v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_223E76818(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__shared_ptr_emplace<turi::coreml::MLModelWrapper>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<CoreML::Model>,std::allocator<turi::coreml::MLModelWrapper>,0>(uint64_t a1, long long *a2)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26D7565E0;
  long long v3 = *a2;
  *a2 = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 56) = a1 + 64;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 8CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = a1 + 88;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 104) = a1 + 112;
  *(_OWORD *)(a1 + 136) = 0u;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(_OWORD *)(a1 + 20CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 24) = &unk_26D756630;
  *(_OWORD *)(a1 + 248) = v3;
  return result;
}

void std::__shared_ptr_emplace<turi::coreml::MLModelWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7565E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::coreml::MLModelWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7565E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::coreml::MLModelWrapper>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void turi::coreml::MLModelWrapper::~MLModelWrapper(turi::coreml::MLModelWrapper *this)
{
  *(void *)this = &unk_26D756630;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  turi::model_base::~model_base(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D756630;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  turi::model_base::~model_base(this);
  JUMPOUT(0x22A614FA0);
}

const char *turi::coreml::MLModelWrapper::name(turi::coreml::MLModelWrapper *this)
{
  return "_MLModelWrapper";
}

void *turi::coreml::MLModelWrapper::uid(turi::coreml::MLModelWrapper *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(turi::coreml::MLModelWrapper::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/coreml_export/mlmodel_wrapper.hpp");
    __cxa_atexit(MEMORY[0x263F8C0B8], turi::coreml::MLModelWrapper::uid(void)::_uid, &dword_223D44000);
  }
  return turi::coreml::MLModelWrapper::uid(void)::_uid;
}

void sub_223E76AD8(_Unwind_Exception *a1)
{
}

void turi::coreml::MLModelWrapper::perform_registration(turi::coreml::MLModelWrapper *this)
{
  *(void *)&long long v13 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "MLModelWrapper::save");
    std::string::basic_string[abi:ne180100]<0>(&v11, "path");
    long long v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v7 = &v3;
    char v8 = 0;
    long long v3 = (std::string *)operator new(0x18uLL);
    uint64_t v4 = v3;
    uint64_t v5 = v3 + 1;
    uint64_t v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v5, &v11, &v13, v3);
    turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>("path", (std::string::size_type)turi::coreml::MLModelWrapper::save, 0, (uint64_t)v10);
    turi::model_base::register_function((uint64_t)this, &__p, (uint64_t)&v3, (uint64_t)v10);
    std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v10);
    uint64_t v7 = &v3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
    if (v12 < 0) {
      operator delete((void *)v11);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__str, "MLModelWrapper::add_metadata");
    std::string::basic_string[abi:ne180100]<0>(&v11, "context_metadata");
    long long v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v7 = &v3;
    char v8 = 0;
    long long v3 = (std::string *)operator new(0x18uLL);
    uint64_t v4 = v3;
    uint64_t v5 = v3 + 1;
    uint64_t v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v5, &v11, &v13, v3);
    turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>("context_metadata", (std::string::size_type)turi::coreml::MLModelWrapper::add_metadata, 0, (uint64_t)v9);
    turi::model_base::register_function((uint64_t)this, &__str, (uint64_t)&v3, (uint64_t)v9);
    std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v9);
    uint64_t v7 = &v3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
    if (v12 < 0) {
      operator delete((void *)v11);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *((unsigned char *)this + 24) = 1;
  }
}

void sub_223E76D14(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, ...)
{
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v17 = va_arg(va2, void **);
  uint64_t v19 = va_arg(va2, void);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  va_copy((va_list)v17, va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  if (*(char *)(v8 - 41) < 0) {
    operator delete(*(void **)(v8 - 64));
  }
  if (a8 < 0) {
    operator delete(a3);
  }
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  std::vector<std::string>::const_iterator v9 = 0;
  uint64_t v10 = 0;
  long long v11 = 0;
  uint64_t v12 = &v9;
  char v13 = 0;
  std::vector<std::string>::const_iterator v9 = (std::string *)operator new(0x18uLL);
  uint64_t v10 = v9;
  long long v11 = v9 + 1;
  uint64_t v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, (long long *)__p, v17, v9);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(a2, a3, (uint64_t)&v9, (uint64_t)v17);
  uint64_t v12 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v17);
  *(void *)(a4 + 24) = 0;
  uint64_t v7 = operator new(0x28uLL);
  void *v7 = &unk_26D756728;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v14);
  *(void *)(a4 + 24) = v7;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v14);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v17);
}

void sub_223E76F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](&a15);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v24 - 88));
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  std::vector<std::string>::const_iterator v9 = 0;
  uint64_t v10 = 0;
  long long v11 = 0;
  uint64_t v12 = &v9;
  char v13 = 0;
  std::vector<std::string>::const_iterator v9 = (std::string *)operator new(0x18uLL);
  uint64_t v10 = v9;
  long long v11 = v9 + 1;
  uint64_t v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, (long long *)__p, v17, v9);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(a2, a3, (uint64_t)&v9, (uint64_t)v17);
  uint64_t v12 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v17);
  *(void *)(a4 + 24) = 0;
  uint64_t v7 = operator new(0x28uLL);
  void *v7 = &unk_26D756828;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)v14);
  *(void *)(a4 + 24) = v7;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v14);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v17);
}

void sub_223E770D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](&a15);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v24 - 88));
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  long long v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  void v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  char v13 = (char *)operator new(0x30uLL);
  *(void *)char v13 = &unk_26D756698;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223E77310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D756698;
  long long v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D756698;
  long long v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x30uLL);
  *(void *)long long v2 = &unk_26D756698;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223E7749C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D756698;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223E77634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::string const&>(void (turi::coreml::MLModelWrapper::*)(std::string const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v26[2] = *(void ***)MEMORY[0x263EF8340];
  char v20 = 1;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v23 = 0;
  uint64_t v24 = v25;
  __p[1] = 0;
  uint64_t v19 = 0;
  uint64_t v17 = a2;
  __p[0] = 0;
  memset(&v15, 0, sizeof(v15));
  uint64_t v16 = a3;
  if (&v15 == (std::vector<std::string> *)(a1 + 16))
  {
    std::__split_buffer<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v15, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v15.__begin_;
    std::__split_buffer<std::string>::pointer end = (long long *)v15.__end_;
  }
  uint64_t v14 = &v17;
  uint64_t v11 = &v17;
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v13 = v16;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>((uint64_t *)&v11);
  v26[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  uint64_t v8 = *(void (**)(void *, void **))a1;
  uint64_t v9 = *(void *)(a1 + 8);
  std::string::size_type v10 = (void *)(v17 + (v9 >> 1));
  if (v9) {
    uint64_t v8 = *(void (**)(void *, void **))(*v10 + v8);
  }
  v8(v10, __p);
  memset(v26, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v26, &turi::FLEX_UNDEFINED);
  *(void ***)(a4 + 13) = *(void ***)((char *)v26 + 5);
  *(void ***)(a4 + 8) = v26[0];
  *(unsigned char *)(a4 + 2CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = BYTE4(v26[1]);
  *(_DWORD *)a4 = 0;
  v26[0] = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v24, v25[0]);
  if (SHIBYTE(v23) < 0) {
    operator delete(v21);
  }
}

void sub_223E77840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  *(void *)(v27 - 88) = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 88));
  if (a25 < 0) {
    operator delete(__p);
  }
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a26);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D756728;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D756728;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D756728;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223E77A20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D756728;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = *(char ***)a3;
  uint64_t v8 = (char *)v6;
  if (*(void *)(a3 + 16))
  {
    *(void *)(v6 + 16) = &v8;
    *(void *)a3 = v5;
    void *v5 = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(v4, a1, (const void ***)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223E77BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(void *lpsrc@<X1>, uint64_t a2@<X0>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  v11[9] = *MEMORY[0x263EF8340];
  if (lpsrc) {
  else
  }
    uint64_t v7 = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v8, a3);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(a2, (uint64_t)v7);
  uint64_t v9 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)v10, v10 ^ (v10 >> 31), &v9, (uint64_t)v11);
  *(_DWORD *)a4 = v10 ^ (v10 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v10);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v8, (char *)v8[1]);
}

void sub_223E77D28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, char *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

uint64_t std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  void v26[3] = 0;
  void v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D7567A8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  uint64_t v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_223E78008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D7567A8;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D7567A8;
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D7567A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_223E78194(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7567A8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_223E7832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<1ul,turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),std::vector<std::string>)::{lambda(turi::coreml::MLModelWrapper*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v26[2] = *(void ***)MEMORY[0x263EF8340];
  char v20 = 1;
  std::string __p = 0;
  uint64_t v22 = 0;
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v23 = 0;
  uint64_t v24 = v25;
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v17 = a2;
  uint64_t v18 = v19;
  memset(&v15, 0, sizeof(v15));
  uint64_t v16 = a3;
  if (&v15 == (std::vector<std::string> *)(a1 + 16))
  {
    std::__split_buffer<std::string>::pointer end = 0;
    begiuint64_t n = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v15, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    begiuint64_t n = (long long *)v15.__begin_;
    std::__split_buffer<std::string>::pointer end = (long long *)v15.__end_;
  }
  uint64_t v14 = &v17;
  uint64_t v11 = &v17;
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v13 = v16;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::map<std::string,turi::flexible_type>>>::operator()<1>(&v11);
  v26[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  uint64_t v8 = *(void (**)(void *, void ***))a1;
  uint64_t v9 = *(void *)(a1 + 8);
  std::string::size_type v10 = (void *)(v17 + (v9 >> 1));
  if (v9) {
    uint64_t v8 = *(void (**)(void *, void ***))(*v10 + v8);
  }
  v8(v10, &v18);
  memset(v26, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v26, &turi::FLEX_UNDEFINED);
  *(void ***)(a4 + 13) = *(void ***)((char *)v26 + 5);
  *(void ***)(a4 + 8) = v26[0];
  *(unsigned char *)(a4 + 2CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = BYTE4(v26[1]);
  *(_DWORD *)a4 = 0;
  v26[0] = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v18, v19[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v24, v25[0]);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
}

void sub_223E78538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, ...)
{
  va_start(va, a15);
  *(void *)(v17 - 88) = v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 88));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v15, a14);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D756828;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D756828;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D756828;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223E7867C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D756828;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::coreml::MLModelWrapper *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::string const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::string const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::coreml::MLModelWrapper,void,std::map<std::string,turi::flexible_type> const&,char const*>(void (turi::coreml::MLModelWrapper::*)(std::map<std::string,turi::flexible_type> const&),char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void *std::__function::__func<turi::flexible_type (*)(std::string const&),std::allocator<turi::flexible_type (*)(std::string const&)>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D7568A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::flexible_type (*)(std::string const&),std::allocator<turi::flexible_type (*)(std::string const&)>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D7568A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<turi::flexible_type (*)(std::string const&),std::allocator<turi::flexible_type (*)(std::string const&)>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1, turi::flexible_type_impl *a2)
{
}

uint64_t std::__function::__func<turi::flexible_type (*)(std::string const&),std::allocator<turi::flexible_type (*)(std::string const&)>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<turi::flexible_type (*)(std::string const&),std::allocator<turi::flexible_type (*)(std::string const&)>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__invoke[abi:ne180100]<turi::flexible_type (*&)(std::string const&),turi::flexible_type const&>(void (**a1)(std::string *), turi::flexible_type_impl *a2)
{
  uint64_t v2 = *a1;
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_4;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_4:
      v7[0] = *MEMORY[0x263F8C2B8];
      uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
      void v7[2] = v3;
      void v7[3] = MEMORY[0x263F8C318] + 16;
      if (v8 < 0) {
        operator delete((void *)v7[11]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&v9);
      break;
    case 2:
      uint64_t v4 = *(void *)a2;
      if (*(char *)(*(void *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(v4 + 8), *(void *)(v4 + 16));
      }
      else
      {
        long long v5 = *(_OWORD *)(v4 + 8);
        v6.__r_.__value_.__r.__words[2] = *(void *)(v4 + 24);
        *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v5;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v7, (void *)(*(void *)a2 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v7, (uint64_t *)(*(void *)a2 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v7, (void *)(*(void *)a2 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(a2, &v6);
      break;
    case 7:
      memset(&v6, 0, sizeof(v6));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v7, (void *)(*(void *)a2 + 8));
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  v2(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_223E78AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void std::vector<int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  long long v5 = value;
  std::__split_buffer<std::string>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begiuint64_t n = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begiuint64_t n = this->__begin_;
      std::__split_buffer<std::string>::pointer end = this->__end_;
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    uint64_t v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void *std::__function::__func<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&),std::allocator<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D756948;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&),std::allocator<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D756948;
  a2[1] = v2;
  return result;
}

void std::__function::__func<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&),std::allocator<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  std::__invoke_void_return_wrapper<turi::flexible_type,false>::__call[abi:ne180100]<turi::flexible_type_impl::ndarray<double> (*&)(turi::image_type const&),turi::flexible_type const&>((void (**)(long long *))(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&),std::allocator<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&),std::allocator<turi::flexible_type_impl::ndarray<double> (*)(turi::image_type const&)>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void std::__invoke_void_return_wrapper<turi::flexible_type,false>::__call[abi:ne180100]<turi::flexible_type_impl::ndarray<double> (*&)(turi::image_type const&),turi::flexible_type const&>(void (**a1)(long long *)@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 5) = 0;
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 12) = 9;
  operator new();
}

void sub_223E78EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = v11;
  MEMORY[0x22A614FA0](v12, 0x1030C407B73B9F7);
  if (atomic_fetch_add(v10, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    if (*(void *)v9)
    {
      uint64_t v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v9);
      MEMORY[0x22A614FA0](v14, 0x1030C407B73B9F7);
    }
    *(void *)uint64_t v9 = 0;
  }
  *(void *)uint64_t v9 = 0;
  *(_DWORD *)(v9 + 8) = 0;
  *(unsigned char *)(v9 + 12) = 0;
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a9);
  _Unwind_Resume(a1);
}

void std::__invoke[abi:ne180100]<turi::flexible_type_impl::ndarray<double> (*&)(turi::image_type const&),turi::flexible_type const&>(void (**a1)(long long *), unsigned char *a2)
{
  uint64_t v2 = *a1;
  switch(a2[12])
  {
    case 0:
    case 1:
    case 6:
      turi::flexible_type_fail(0);
      goto LABEL_3;
    case 2:
      uint64_t v3 = *(void *)a2;
      if (*(char *)(*(void *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v3 + 8), *(void *)(v3 + 16));
      }
      else
      {
        long long v4 = *(_OWORD *)(v3 + 8);
        v17.__r_.__value_.__r.__words[2] = *(void *)(v3 + 24);
        *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v4;
      }
      turi::flexible_type_fail(0);
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      *(void *)&long long v16 = 0;
      *((void *)&v16 + 1) = 3;
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        break;
      }
      uint64_t v7 = (void *)v17.__r_.__value_.__r.__words[0];
      goto LABEL_17;
    case 3:
      uint64_t v6 = *(void *)a2;
      memset(&v17, 0, sizeof(v17));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v17, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      turi::flexible_type_fail(0);
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      *(void *)&long long v16 = 0;
      *((void *)&v16 + 1) = 3;
      uint64_t v7 = (void *)v17.__r_.__value_.__r.__words[0];
      if (!v17.__r_.__value_.__r.__words[0]) {
        break;
      }
      v17.__r_.__value_.__l.__size_ = v17.__r_.__value_.__r.__words[0];
LABEL_17:
      operator delete(v7);
      break;
    case 4:
      uint64_t v8 = *(void *)a2;
      memset(&v17, 0, sizeof(v17));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v17, *(uint64_t **)(v8 + 8), *(uint64_t **)(v8 + 16), (uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 4);
      turi::flexible_type_fail(0);
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      *(void *)&long long v16 = 0;
      *((void *)&v16 + 1) = 3;
      int v18 = &v17;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      break;
    case 5:
      uint64_t v5 = *(void *)a2;
      memset(&v17, 0, sizeof(v17));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v17, *(uint64_t **)(v5 + 8), *(uint64_t **)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 5);
      turi::flexible_type_fail(0);
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      *(void *)&long long v16 = 0;
      *((void *)&v16 + 1) = 3;
      int v18 = &v17;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      break;
    case 7:
LABEL_3:
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      *(void *)&long long v16 = 0;
      *((void *)&v16 + 1) = 3;
      break;
    case 8:
      uint64_t v9 = *(void *)a2;
      uint64_t v10 = *(void *)(*(void *)a2 + 16);
      *(void *)&long long v13 = *(void *)(*(void *)a2 + 8);
      *((void *)&v13 + 1) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
      }
      long long v11 = *(_OWORD *)(v9 + 24);
      long long v12 = *(_OWORD *)(v9 + 56);
      long long v15 = *(_OWORD *)(v9 + 40);
      long long v16 = v12;
      long long v14 = v11;
      break;
    case 9:
      turi::flexible_type_impl::get_img_visitor::operator()(*(void *)a2 + 8, (turi::image_type *)&v13);
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  v2(&v13);
  boost::detail::shared_count::~shared_count((atomic_uint **)&v13 + 1);
}

void sub_223E7918C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *(void *)(v23 - 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = v22;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 40));
  _Unwind_Resume(a1);
}

uint64_t turi::variant_converter<int,void>::get(uint64_t a1, int *a2)
{
  v22[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v22, 0, 13);
  uint64_t v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((atomic_ullong **)v2 != v22)
  {
    long long v4 = *(atomic_ullong **)v2;
    *(atomic_ullong **)((char *)v22 + 5) = *(atomic_ullong **)(v2 + 5);
    v22[0] = v4;
    BYTE4(v22[1]) = *(unsigned char *)(v2 + 12);
    if (BYTE4(v22[1]) <= 9u && ((1 << SBYTE4(v22[1])) & 0x33C) != 0) {
      atomic_fetch_add(v22[0], 1uLL);
    }
  }
  v20[0] = 0;
  turi::flexible_type_internals::ft_converter<3>::get<int>((int *)v20, (turi::flexible_type_internals *)v22, v3);
  uint64_t v6 = v20[0];
  switch(BYTE4(v22[1]))
  {
    case 2:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = v22[0];
        if (v22[0])
        {
          if (*((char *)v22[0] + 31) < 0) {
            operator delete(*((void **)v22[0] + 1));
          }
          uint64_t v8 = v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v16 = v22[0];
        if (v22[0])
        {
          std::string v17 = (void *)v22[0][1];
          if (v17)
          {
            v22[0][2] = (atomic_ullong)v17;
            operator delete(v17);
          }
          uint64_t v8 = v16;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v21);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v21);
LABEL_33:
          uint64_t v8 = v10;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v18 = v22[0];
        if (v22[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v22[0] + 2);
          uint64_t v8 = v18;
          unsigned int v15 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v11 = v22[0];
        if (v22[0])
        {
          long long v12 = (void *)v22[0][6];
          if (v12)
          {
            v22[0][7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          long long v13 = (void *)v11[3];
          if (v13)
          {
            void v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          long long v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          uint64_t v8 = v11;
          unsigned int v15 = 2071181815;
LABEL_37:
          uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_38:
          MEMORY[0x22A614FA0](v8, v9);
        }
      }
      break;
    default:
      return v6;
  }
  return v6;
}

void sub_223E794A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 40);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      uint64_t v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v26 = *(void **)(v18 - 40);
      if (!v26) {
        goto LABEL_27;
      }
      uint64_t v27 = (void *)v26[1];
      if (v27)
      {
        long long v26[2] = v27;
        operator delete(v27);
      }
      uint64_t v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      uint64_t v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 40);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      uint64_t v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v24 = *(void **)(v18 - 40);
      if (!v24) {
        goto LABEL_27;
      }
      uint64_t v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

int *turi::flexible_type_internals::ft_converter<3>::get<int>(int *result, turi::flexible_type_internals *this, const char *a3)
{
  if (*((unsigned char *)this + 12))
  {
    if (*((unsigned char *)this + 12) != 1) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer", a3);
    }
    int v3 = (int)*(double *)this;
    if (*(double *)this != (double)v3) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer / convertable float", a3);
    }
  }
  else
  {
    int v3 = *(_DWORD *)this;
  }
  void *result = v3;
  return result;
}

void sub_223E7980C()
{
}

void turi::table_printer::print_row<long long,float,float,float,turi::progress_time>(long long,float,float,float,turi::progress_time const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"size_t(sizeof...(Args))", 23);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"format.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", "operator()", 272, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  void turi::table_printer::print_row<long long,float,float,float,turi::progress_time>(long long,float,float,float,turi::progress_time const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E799A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::table_printer::_p(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  if (v1)
  {
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      locale = &v14;
    }
    else {
      locale = v14.__locale_;
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v3 = v16;
    }
    else {
      uint64_t v3 = v15;
    }
    long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)locale, v3);
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64_t v5 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v16 < 0)
    {
      uint64_t v6 = v14.__locale_;
LABEL_17:
      operator delete(v6);
    }
  }
  else
  {
    uint64_t v7 = (int *)global_logger();
    if (v7[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v7)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v8 = (file_logger *)global_logger();
      started = file_logger::start_stream(v8, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", "_p", 516, 1);
      std::stringbuf::str();
      uint64_t v10 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
      long long v11 = pthread_getspecific(*(void *)(v10 + 592));
      if (v11)
      {
        if (*((unsigned char *)v11 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(v11[2] - 24) + 16));
          long long v12 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
          std::locale::~locale(&v14);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v10);
          if (*(_DWORD *)(v10 + 600) == 7)
          {
            __print_back_trace();
            exceptiouint64_t n = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (v18 < 0)
      {
        uint64_t v6 = __p;
        goto LABEL_17;
      }
    }
  }
}

void sub_223E79CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::table_internal::table_printer_element<long long,void>::print(uint64_t a1, void *a2, unint64_t a3)
{
  return turi::table_internal::_print_long(a2, a3, *(void *)(a1 + 8));
}

uint64_t turi::table_internal::table_printer_element<long long,void>::get_value@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)a2 = *(void *)(result + 8);
  return result;
}

void turi::table_internal::table_printer_element<float,void>::print(uint64_t a1, void *a2, unint64_t a3)
{
}

double turi::table_internal::table_printer_element<float,void>::get_value@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 1;
  double result = *(double *)(a1 + 8);
  *(double *)a2 = result;
  return result;
}

uint64_t turi::table_internal::table_printer_element<turi::progress_time,void>::print(uint64_t a1, void *a2, unint64_t a3)
{
  return turi::table_internal::_print_time(a2, a3, *(double *)(a1 + 8));
}

BOOL turi::table_printer::register_tick(turi::table_printer *this, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a2;
  if (a3 == 1)
  {
    v10.tv_sec = a2;
    *((void *)this + 8) = a2;
    gettimeofday(&v10, 0);
    *(double *)&v10.tv_sec = (double)(v10.tv_usec - *((_DWORD *)this + 8)) / 1000000.0
                           + (double)(v10.tv_sec - *((void *)this + 3));
    *((void *)this + 7) = v10.tv_sec;
    return 1;
  }
  if (a3 < 5) {
    return 1;
  }
  if (a3 == 5)
  {
    while (*((double *)this + 7) == -1.0)
      ;
    unint64_t v5 = turi::table_printer::set_up_time_printing_interval(this, a2);
    *((void *)this + 11) = v5;
    unint64_t v6 = (v3 + v5 + 1) / v5 * v5;
    if (v6 <= v3) {
      unint64_t v7 = v5;
    }
    else {
      unint64_t v7 = 0;
    }
    v10.tv_sec = v7 + v6;
    *((void *)this + 1CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = v7 + v6;
    return 1;
  }
  while (!*((void *)this + 10))
    ;
  if (*((void *)this + 10) <= a2)
  {
    v10.tv_sec = (__darwin_time_t)this + 160;
    LOBYTE(v10.tv_usec) = 0;
    if (std::unique_lock<turi::mutex>::try_lock((uint64_t)&v10))
    {
      if (*((void *)this + 10) <= v3)
      {
        while (*((void *)this + 10) <= v3)
          atomic_fetch_add((atomic_ullong *volatile)this + 10, *((void *)this + 11));
      }
      else if (v3 >= 6)
      {
        if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v3, 1) <= 0x1999999999999999uLL)
        {
          do
            v3 /= 0xAuLL;
          while (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v3, 1) < 0x199999999999999AuLL);
        }
        BOOL v8 = (v3 & 0xFFFFFFFFFFFFFFFBLL) == 1;
        goto LABEL_25;
      }
      BOOL v8 = 1;
    }
    else
    {
      BOOL v8 = 0;
    }
LABEL_25:
    std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v10);
    return v8;
  }
  if (a2 < 6) {
    return 1;
  }
  if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * a2, 1) <= 0x1999999999999999uLL)
  {
    do
      v3 /= 0xAuLL;
    while (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v3, 1) < 0x199999999999999AuLL);
  }
  return (v3 & 0xFFFFFFFFFFFFFFFBLL) == 1;
}

void sub_223E79FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::unique_lock<turi::mutex>::try_lock(uint64_t a1)
{
  uint64_t v2 = *(pthread_mutex_t **)a1;
  if (v2)
  {
    if (!*(unsigned char *)(a1 + 8))
    {
      uint64_t result = pthread_mutex_trylock(v2) == 0;
      *(unsigned char *)(a1 + 8) = result;
      return result;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::try_lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::try_lock: already locked");
  return turi::table_printer::_print_progress_row<long long,float,turi::progress_time>();
}

uint64_t turi::table_printer::_track_progress<long long,float,turi::progress_time>(uint64_t a1, char a2, uint64_t *a3, float *a4, double *a5)
{
  timeval v10 = (pthread_mutex_t *)(a1 + 232);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 232));
  if (!*(unsigned char *)(a1 + 592))
  {
    std::vector<turi::flexible_type>::resize((uint64_t *)(a1 + 696), 3uLL);
    uint64_t v11 = *(void *)(a1 + 720);
    unint64_t v12 = *(void *)(a1 + 728) - v11;
    if (v12 > 2)
    {
      if (v12 != 3) {
        *(void *)(a1 + 728) = v11 + 3;
      }
    }
    else
    {
      std::vector<turi::table_internal::table_printer_element_base::style_type>::__append(a1 + 720, 3 - v12);
    }
  }
  uint64_t v13 = *a3;
  v58.tv_sec = (__darwin_time_t)&unk_26D7569E8;
  *(void *)&v58.tv_usec = v13;
  uint64_t v14 = *(void *)(a1 + 696);
  switch(*(unsigned char *)(v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v14, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v14;
        if (!*(void *)v14) {
          goto LABEL_38;
        }
        if (*((char *)v15 + 31) < 0) {
          operator delete((void *)v15[1]);
        }
        atomic_ullong *volatile v16 = v15;
        uint64_t v17 = 0x1012C404EF22A49;
        goto LABEL_37;
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v14, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v14;
        if (!*(void *)v14) {
          goto LABEL_38;
        }
        std::locale v19 = (void *)v18[1];
        if (v19)
        {
          void v18[2] = (atomic_ullong)v19;
          operator delete(v19);
        }
        atomic_ullong *volatile v16 = v18;
        uint64_t v17 = 0x1080C409938AC02;
        goto LABEL_37;
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v14, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)v14;
        if (!*(void *)v14) {
          goto LABEL_38;
        }
        uint64_t v59 = (void **)(v20 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v59);
        goto LABEL_23;
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v14, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)v14;
        if (!*(void *)v14) {
          goto LABEL_38;
        }
        uint64_t v59 = (void **)(v20 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v59);
LABEL_23:
        atomic_ullong *volatile v16 = v20;
        uint64_t v17 = 0x1020C405E66F15BLL;
        goto LABEL_37;
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v14, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v14;
        if (!*(void *)v14) {
          goto LABEL_38;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)v21 + 2);
        atomic_ullong *volatile v16 = v21;
        unsigned int v22 = -235920773;
        goto LABEL_36;
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)v14, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v23 = *(atomic_ullong *volatile *)v14;
        if (*(void *)v14)
        {
          uint64_t v24 = (void *)v23[6];
          if (v24)
          {
            v23[7] = (atomic_ullong)v24;
            operator delete(v24);
          }
          unsigned int v25 = (void *)v23[3];
          if (v25)
          {
            v23[4] = (atomic_ullong)v25;
            operator delete(v25);
          }
          uint64_t v26 = (std::__shared_weak_count *)v23[2];
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          atomic_ullong *volatile v16 = v23;
          unsigned int v22 = 2071181815;
LABEL_36:
          uint64_t v17 = v22 | 0x1030C4000000000;
LABEL_37:
          MEMORY[0x22A614FA0](v16, v17);
        }
LABEL_38:
        *(void *)uint64_t v14 = 0;
      }
      break;
    default:
      break;
  }
  *(void *)uint64_t v14 = v13;
  *(_DWORD *)(v14 + 8) = 0;
  *(unsigned char *)(v14 + 12) = 0;
  **(unsigned char **)(a1 + 72CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  float v27 = *a4;
  v58.tv_sec = (__darwin_time_t)&unk_26D756A30;
  double v28 = v27;
  *(double *)&v58.tv_usec = v27;
  uint64_t v29 = *(void *)(a1 + 696);
  switch(*(unsigned char *)(v29 + 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v29 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v30 = *(void *)(v29 + 16);
        if (!v30) {
          goto LABEL_71;
        }
        if (*(char *)(v30 + 31) < 0) {
          operator delete(*(void **)(v30 + 8));
        }
        long long v31 = (void *)v30;
        uint64_t v32 = 0x1012C404EF22A49;
        goto LABEL_70;
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v29 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        char v33 = *(void **)(v29 + 16);
        if (!v33) {
          goto LABEL_71;
        }
        uint64_t v34 = (void *)v33[1];
        if (v34)
        {
          v33[2] = v34;
          operator delete(v34);
        }
        long long v31 = v33;
        uint64_t v32 = 0x1080C409938AC02;
        goto LABEL_70;
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v29 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v35 = *(void *)(v29 + 16);
        if (!v35) {
          goto LABEL_71;
        }
        uint64_t v59 = (void **)(v35 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v59);
        goto LABEL_56;
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v29 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v35 = *(void *)(v29 + 16);
        if (!v35) {
          goto LABEL_71;
        }
        uint64_t v59 = (void **)(v35 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v59);
LABEL_56:
        long long v31 = (void *)v35;
        uint64_t v32 = 0x1020C405E66F15BLL;
        goto LABEL_70;
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v29 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v36 = *(void *)(v29 + 16);
        if (!v36) {
          goto LABEL_71;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v36 + 16));
        long long v31 = (void *)v36;
        unsigned int v37 = -235920773;
        goto LABEL_69;
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v29 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v38 = *(void **)(v29 + 16);
        if (v38)
        {
          uint64_t v39 = (void *)v38[6];
          if (v39)
          {
            v38[7] = v39;
            operator delete(v39);
          }
          uint64_t v40 = (void *)v38[3];
          if (v40)
          {
            v38[4] = v40;
            operator delete(v40);
          }
          uint64_t v41 = (std::__shared_weak_count *)v38[2];
          if (v41) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          }
          long long v31 = v38;
          unsigned int v37 = 2071181815;
LABEL_69:
          uint64_t v32 = v37 | 0x1030C4000000000;
LABEL_70:
          MEMORY[0x22A614FA0](v31, v32);
        }
LABEL_71:
        *(void *)(v29 + 16) = 0;
      }
      break;
    default:
      break;
  }
  uint64_t v42 = a1 + 696;
  *(double *)(v29 + 16) = v28;
  *(_DWORD *)(v29 + 24) = 0;
  *(unsigned char *)(v29 + 28) = 1;
  *(unsigned char *)(*(void *)(a1 + 720) + 1) = 0;
  double v43 = *a5;
  if (*a5 < 0.0)
  {
    gettimeofday(&v58, 0);
    double v43 = (double)(v58.tv_usec - *(_DWORD *)(a1 + 32)) / 1000000.0 + (double)(v58.tv_sec - *(void *)(a1 + 24));
  }
  v58.tv_sec = (__darwin_time_t)&unk_26D756A68;
  *(double *)&v58.tv_usec = v43;
  uint64_t v44 = *(void *)v42;
  switch(*(unsigned char *)(*(void *)v42 + 44))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v44 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v45 = *(void *)(v44 + 32);
        if (!v45) {
          goto LABEL_106;
        }
        if (*(char *)(v45 + 31) < 0) {
          operator delete(*(void **)(v45 + 8));
        }
        uint64_t v46 = (void *)v45;
        uint64_t v47 = 0x1012C404EF22A49;
        goto LABEL_105;
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v44 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v48 = *(void **)(v44 + 32);
        if (!v48) {
          goto LABEL_106;
        }
        float v49 = (void *)v48[1];
        if (v49)
        {
          v48[2] = v49;
          operator delete(v49);
        }
        uint64_t v46 = v48;
        uint64_t v47 = 0x1080C409938AC02;
        goto LABEL_105;
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v44 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v50 = *(void *)(v44 + 32);
        if (!v50) {
          goto LABEL_106;
        }
        uint64_t v59 = (void **)(v50 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v59);
        goto LABEL_91;
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v44 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v50 = *(void *)(v44 + 32);
        if (!v50) {
          goto LABEL_106;
        }
        uint64_t v59 = (void **)(v50 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v59);
LABEL_91:
        uint64_t v46 = (void *)v50;
        uint64_t v47 = 0x1020C405E66F15BLL;
        goto LABEL_105;
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v44 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v51 = *(void *)(v44 + 32);
        if (!v51) {
          goto LABEL_106;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v51 + 16));
        uint64_t v46 = (void *)v51;
        unsigned int v52 = -235920773;
        goto LABEL_104;
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v44 + 32), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v53 = *(void **)(v44 + 32);
        if (v53)
        {
          double v54 = (void *)v53[6];
          if (v54)
          {
            v53[7] = v54;
            operator delete(v54);
          }
          double v55 = (void *)v53[3];
          if (v55)
          {
            v53[4] = v55;
            operator delete(v55);
          }
          double v56 = (std::__shared_weak_count *)v53[2];
          if (v56) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v56);
          }
          uint64_t v46 = v53;
          unsigned int v52 = 2071181815;
LABEL_104:
          uint64_t v47 = v52 | 0x1030C4000000000;
LABEL_105:
          MEMORY[0x22A614FA0](v46, v47);
        }
LABEL_106:
        *(void *)(v44 + 32) = 0;
      }
      break;
    default:
      break;
  }
  *(double *)(v44 + 32) = v43;
  *(_DWORD *)(v44 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  *(unsigned char *)(v44 + 44) = 1;
  *(unsigned char *)(*(void *)(a1 + 720) + 2) = 2;
  turi::table_printer::track_progress_row(a1, (uint64_t *)(a1 + 696));
  *(unsigned char *)(a1 + 593) = a2;
  return pthread_mutex_unlock(v10);
}

void sub_223E7A748(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::table_printer::print_row<long long,float,turi::progress_time>(uint64_t a1, uint64_t *a2, float *a3, double *a4)
{
  uint64_t v4 = *(void *)(a1 + 8) - *(void *)a1;
  v13[0] = v4 >> 5;
  if (v4 != 96)
  {
    v16.tv_sec = (__darwin_time_t)v13;
    turi::table_printer::print_row<long long,float,turi::progress_time>(long long,float,turi::progress_time const&)const::{lambda(void)#1}::operator()();
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  LOBYTE(v16.tv_sec) = 124;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v16, 1);
  turi::table_printer::os_log_value(0, *a2);
  uint64_t v9 = *a2;
  v16.tv_sec = (__darwin_time_t)&unk_26D7569E8;
  *(void *)&v16.tv_usec = v9;
  turi::table_internal::_print_long(v13, *(void *)(*(void *)a1 + 24), v9);
  turi::table_printer::os_log_value((turi::table_printer *)1, *a3);
  float v10 = *a3;
  v16.tv_sec = (__darwin_time_t)&unk_26D756A30;
  *(double *)&v16.tv_usec = v10;
  turi::table_internal::_print_double(v13, *(void *)(*(void *)a1 + 56), v10);
  turi::table_printer::os_log_value(a1, 2, a4);
  double v11 = *a4;
  if (*a4 < 0.0)
  {
    gettimeofday(&v16, 0);
    double v11 = (double)(v16.tv_usec - *(_DWORD *)(a1 + 32)) / 1000000.0 + (double)(v16.tv_sec - *(void *)(a1 + 24));
  }
  v16.tv_sec = (__darwin_time_t)&unk_26D756A68;
  *(double *)&v16.tv_usec = v11;
  turi::table_internal::_print_time(v13, *(void *)(*(void *)a1 + 88), v11);
  turi::table_printer::_p(a1);
  v13[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v15);
}

void sub_223E7AA50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::table_printer::print_row<long long,float,turi::progress_time>(long long,float,turi::progress_time const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"size_t(sizeof...(Args))", 23);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"format.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  BOOL v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  float v10 = (void *)std::ostream::operator<<();
  double v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", "operator()", 272, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  void turi::table_printer::print_row<long long,float,float,float,turi::progress_time>(long long,float,float,float,turi::progress_time const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E7ABF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  }
  return a1;
}

void std::vector<turi::flexible_type>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        v3 -= 16;
        std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<turi::flexible_type>::__append(a1, v5);
  }
}

uint64_t turi::table_printer::track_progress_row(uint64_t a1, uint64_t *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 592))
  {
    uint64_t v5 = *a2;
    uint64_t v4 = a2[1];
    turi::sframe::sframe((turi::sframe *)__p);
    turi::sframe::operator=(a1 + 296, (uint64_t)__p);
    std::vector<std::string>::size_type v6 = (v4 - v5) >> 4;
    turi::sframe::~sframe((turi::sframe *)__p);
    std::vector<std::string>::vector(&v14, v6);
    std::vector<turi::flex_type_enum>::vector(&v13, v6);
    if (v4 != v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      if (v6 <= 1) {
        std::vector<std::string>::size_type v6 = 1;
      }
      uint64_t v10 = 12;
      do
      {
        std::string::operator=(&v14.__begin_[v7], (const std::string *)(*(void *)a1 + v8));
        *((unsigned char *)v13 + v9++) = *(unsigned char *)(*a2 + v10);
        v8 += 32;
        ++v7;
        v10 += 16;
      }
      while (v6 != v9);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    turi::sframe::open_for_write(a1 + 296, &v14, &v13, __p, 1, 1);
  }
  uint64_t v11 = *(void *)(a1 + 624);
  if (!v11) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v11 + 48))(v11, a2);
}

void sub_223E7AFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<turi::flexible_type>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (uint64_t)*(result - 1);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = v7 + 16 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 12) = 0;
        v7 += 16;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    void v17[4] = result;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    char v15 = &v13[16 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[16 * v12];
    uint64_t v16 = &v15[16 * a2];
    do
    {
      *(void *)char v15 = 0;
      *((_DWORD *)v15 + 2) = 0;
      v15[12] = 0;
      v15 += 16;
    }
    while (v15 != v16);
    long long v17[2] = v16;
    std::vector<turi::flexible_type>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<turi::flexible_type>::~__split_buffer(v17);
  }
  return result;
}

void sub_223E7B16C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::flexible_type>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<turi::table_internal::table_printer_element_base::style_type>::__append(uint64_t a1, size_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2);
      v5 += a2;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    unint64_t v6 = *(void *)a1;
    uint64_t v7 = &v5[-*(void *)a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v4 - v6;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      uint64_t v11 = operator new(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v12 = &v7[(void)v11];
    uint64_t v13 = (char *)v11 + v10;
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      uint64_t v11 = v12;
    }
    else
    {
      uint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[(void)v11] = v15;
      }
      while (v5 != (char *)v6);
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = &v12[a2];
    *(void *)(a1 + 16) = v13;
    if (v6)
    {
      operator delete((void *)v6);
    }
  }
}

void turi::sframe::open_for_write(uint64_t a1, void *a2, void *a3, const std::string *a4, uint64_t a5, int a6)
{
  unint64_t v12 = (int *)global_logger();
  if (v12[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v12)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe.hpp", "open_for_write", 270, 1);
    char v15 = pthread_getspecific(*((void *)started + 74));
    if (v15 && *((unsigned char *)v15 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v16 = pthread_getspecific(*((void *)started + 74));
    if (v16)
    {
      if (*((unsigned char *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(v16[2] - 24) + 16));
        uint64_t v17 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(&v19);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exceptiouint64_t n = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  assert_msg(*(unsigned char *)(a1 + 288) == 0, "Attempting to init an SFrame which has already been inited.");
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) == a3[1] - *a3)
  {
    *(unsigned char *)(a1 + 288) = 1;
    turi::sframe::create_arrays_for_writing(a1, a2, (uint64_t)a3, a5, a4, a6);
  }
  turi::sframe::open_for_write(std::vector<std::string> const&,std::vector<turi::flex_type_enum> const&,std::string const&,unsigned long,BOOL)::{lambda(void)#1}::operator()();
}

void sub_223E7B4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

turi::sframe *turi::sframe::sframe(turi::sframe *this)
{
  *(void *)this = &unk_26D76C528;
  *((void *)this + 1) = -1;
  *((void *)this + 13) = 0;
  *((void *)this + 12) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 1CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  *((void *)this + 11) = (char *)this + 96;
  *((_OWORD *)this + 1CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  int v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 224), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *((_WORD *)this + 144) = 0;
  return this;
}

void sub_223E7B5A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 216);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 159) < 0) {
    operator delete(*(void **)(v2 + 136));
  }
  turi::sframe_index_file_information::~sframe_index_file_information(v3);
  _Unwind_Resume(a1);
}

void turi::sframe_index_file_information::~sframe_index_file_information(void **this)
{
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 10), this[11]);
  uint64_t v2 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    std::vector<std::string>::pointer end = this->__end_;
    size_t v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_223E7B6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<turi::flex_type_enum>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_223E7B750(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(turi::sframe_rows const&)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(turi::sframe_rows const&)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_impl<char const(&)[10],turi::neural_net::shared_float_array&>(uint64_t **a1, char *a2, uint64_t a3)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<char const(&)[10],turi::neural_net::shared_float_array&>((uint64_t)a1, a2, a3, (uint64_t)v8);
  uint64_t v4 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  size_t v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v7, v4, v8[0]);
    size_t v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_223E7BCA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__construct_node<char const(&)[10],turi::neural_net::shared_float_array&>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unint64_t v8 = operator new(0x70uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<char const(&)[10],turi::neural_net::shared_float_array&,0>(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_223E7BD14(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

__n128 std::pair<std::string const,turi::neural_net::shared_float_array>::pair[abi:ne180100]<char const(&)[10],turi::neural_net::shared_float_array&,0>(void *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = (__n128 *)std::string::basic_string[abi:ne180100]<0>(a1, a2);
  unint64_t v6 = *(void *)(a3 + 8);
  unint64_t v5 = *(void *)(a3 + 16);
  v4[1].n128_u64[1] = (unint64_t)&unk_26D752D58;
  v4[2].n128_u64[0] = v6;
  v4[2].n128_u64[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a3 + 24);
  __n128 v8 = *(__n128 *)(a3 + 40);
  v4[3] = result;
  v4[4] = v8;
  return result;
}

uint64_t turi::flexible_type_impl::ptime_from_time_t(unint64_t this, int a2)
{
  {
    turi::flexible_type_impl::ptime_from_time_t(long,int)::time_t_epoch = boost::posix_time::from_time_t(0);
  }
  uint64_t v9 = turi::flexible_type_impl::ptime_from_time_t(long,int)::time_t_epoch;
  if ((this & 0x8000000000000000) == 0)
  {
    if (this >> 31)
    {
      do
      {
        uint64_t v8 = 2147483647000000;
        boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator+=(&v9, (unint64_t *)&v8);
        unint64_t v4 = this - 0x7FFFFFFF;
        BOOL v5 = this > 0xFFFFFFFE;
        this -= 0x7FFFFFFFLL;
      }
      while (v5);
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v4 = this;
    goto LABEL_11;
  }
  if (this > 0xFFFFFFFF80000000) {
    goto LABEL_10;
  }
  do
  {
    uint64_t v8 = -2147483647000000;
    boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator+=(&v9, (unint64_t *)&v8);
    unint64_t v4 = this + 0x7FFFFFFF;
    BOOL v6 = this >= 0xFFFFFFFF00000002;
    this += 0x7FFFFFFFLL;
  }
  while (!v6);
LABEL_11:
  uint64_t v8 = 1000000 * v4;
  boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator+=(&v9, (unint64_t *)&v8);
  uint64_t v8 = a2;
  boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator+=(&v9, (unint64_t *)&v8);
  return v9;
}

void sub_223E7BEDC(_Unwind_Exception *a1)
{
}

unint64_t boost::posix_time::from_time_t(boost::posix_time *this)
{
  boost::gregorian::date::date(&v3, 0x7B2u, 1u, 1u);
  unsigned int v5 = v3;
  uint64_t v6 = 0;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v4, &v5, &v6);
  uint64_t v6 = 1000000 * (void)this;
  return boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::add_time_duration(&v4, &v6);
}

uint64_t boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator+=(uint64_t *a1, unint64_t *a2)
{
  unsigned int v9 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(a1);
  unint64_t v4 = *a1;
  unint64_t v5 = 0x7FFFFFFFFFFFFFFELL;
  if (*a1 == 0x8000000000000000) {
    unint64_t v5 = 0x8000000000000000;
  }
  if (v4 != 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v4 = v5;
  }
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) > 2) {
    unint64_t v4 = *a1 % 86400000000;
  }
  unint64_t v7 = v4;
  boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>>::operator+(&v7, a2, &v8);
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v10, &v9, (uint64_t *)&v8);
  uint64_t result = v10;
  *a1 = v10;
  return result;
}

uint64_t turi::flexible_type_impl::ptime_to_time_t(uint64_t *a1)
{
  unsigned int v4 = 2440588;
  uint64_t v5 = 0;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep((uint64_t *)&v3, &v4, &v5);
  uint64_t v5 = 0;
  unint64_t v3 = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::add_time_duration((uint64_t *)&v3, &v5);
  boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::subtract_times(a1, (uint64_t *)&v3, (unint64_t *)&v5);
  return v5 / 1000000;
}

uint64_t turi::flexible_type_impl::ptime_to_fractional_microseconds(uint64_t *a1)
{
  uint64_t v2 = turi::flexible_type_impl::ptime_to_time_t(a1);
  unsigned int v5 = 2440588;
  uint64_t v6 = 0;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep((uint64_t *)&v4, &v5, &v6);
  uint64_t v6 = 1000000 * v2;
  unint64_t v4 = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::add_time_duration((uint64_t *)&v4, &v6);
  boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::subtract_times(a1, (uint64_t *)&v4, (unint64_t *)&v6);
  return (uint64_t)((double)v6 / 1000000.0 * 1000000.0);
}

void turi::flexible_type_impl::date_time_to_string(turi::flexible_type_impl *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *(uint64_t *)this >> 56;
  if ((int)v4 < 0) {
    int v5 = 25;
  }
  else {
    int v5 = -25;
  }
  int v6 = v5 + v4;
  if (v6 == 64) {
    int v7 = 0;
  }
  else {
    int v7 = 900 * v6;
  }
  uint64_t v8 = turi::flexible_type_impl::ptime_from_time_t(((uint64_t)(*(void *)this << 8) >> 8) + v7, *((_DWORD *)this + 2));
  boost::posix_time::to_iso_string_type<char>(v8, a2);
}

void turi::flexible_type_impl::date_time_string_reader::date_time_string_reader(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  std::istringstream::basic_istringstream[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8)) {
      goto LABEL_6;
    }
  }
  else if (*(unsigned char *)(a1 + 23))
  {
    goto LABEL_6;
  }
  MEMORY[0x22A614700](a1, "%Y%m%dT%H%M%S%F%q");
LABEL_6:
  operator new();
}

void sub_223E7C36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, std::locale a11, std::locale a12)
{
  std::istringstream::~istringstream(v13);
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::basic_istringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C338] + 64;
  *(void *)(a1 + 12CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = MEMORY[0x263F8C338] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  *(void *)(a1 + 8) = 0;
  int v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 16));
  uint64_t v6 = MEMORY[0x263F8C338] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 12CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 8CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 8;
  return a1;
}

void sub_223E7C560(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x22A614E30](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x22A614E30](a1 + 120);
  return a1;
}

uint64_t turi::flexible_type_impl::date_time_string_reader::read(uint64_t a1, const std::string *a2)
{
  v17[1] = 0;
  atomic_ullong *volatile v18 = 0;
  uint64_t time_rep = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(0);
  uint64_t v20 = 0;
  atomic_ullong *volatile v21 = 0;
  boost::detail::shared_count::~shared_count(&v18);
  std::string::operator=((std::string *)(a1 + 104), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1 + 40);
  boost::local_time::operator>><char,std::char_traits<char>>((uint64_t *)(a1 + 24), (uint64_t)&time_rep);
  v17[0] = time_rep;
  uint64_t v4 = turi::flexible_type_impl::ptime_to_time_t(v17);
  unsigned int v5 = turi::flexible_type_impl::ptime_to_fractional_microseconds(v17);
  uint64_t v6 = v20;
  uint64_t v15 = v20;
  uint64_t v16 = v21;
  if (v21) {
    atomic_fetch_add_explicit(v21 + 2, 1u, memory_order_relaxed);
  }
  boost::detail::shared_count::~shared_count(&v16);
  if (v6)
  {
    uint64_t v7 = v20;
    uint64_t v15 = v20;
    uint64_t v16 = v21;
    if (v21) {
      atomic_fetch_add_explicit(v21 + 2, 1u, memory_order_relaxed);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 72))(&v14);
    uint64_t v8 = v14 / 1000000;
    int v9 = (int)(v14 / 1000000) / 900;
    boost::detail::shared_count::~shared_count(&v16);
    if ((v8 - 58500) <= 0xFFFFFC7B && (v9 - 49) <= 0xFFFFFF9E) {
      turi::flex_date_time::set_time_zone_offset(int)::{lambda(void)#1}::operator()();
    }
    if ((int)v8 >= -899) {
      int v10 = 25;
    }
    else {
      int v10 = 231;
    }
    unint64_t v11 = (unint64_t)(v10 + v9) << 56;
  }
  else
  {
    unint64_t v11 = 0x5900000000000000;
  }
  if (v5 >= 0xF4240) {
    turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
  }
  uint64_t v12 = v11 | v4 & 0xFFFFFFFFFFFFFFLL;
  boost::detail::shared_count::~shared_count(&v21);
  return v12;
}

void sub_223E7C880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  boost::detail::shared_count::~shared_count(v18);
  boost::detail::shared_count::~shared_count(v17);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    turi::flexible_type_impl::date_time_string_reader::read(std::string const&)::$_0::operator()();
  }
  _Unwind_Resume(a1);
}

void sub_223E7C8E4()
{
}

uint64_t *boost::local_time::operator>><char,std::char_traits<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(void *)(*a1 - 24);
  int v5 = *((_DWORD *)v4 + 2);
  MEMORY[0x22A6148B0](&v23, a1, 0);
  if (v23)
  {
    memset(&__p, 0, sizeof(__p));
    uint64_t time_rep = (std::locale::__imp *)boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(0);
    uint64_t v6 = *a1;
    uint64_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    std::locale v19 = 0;
    uint64_t v20 = v7;
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(v6 - 24)));
    BOOL has_facet = std::locale::has_facet(&v15, &boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::id);
    std::locale::~locale(&v15);
    if (!has_facet) {
      operator new();
    }
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    int v9 = std::locale::use_facet(&v15, &boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::id);
    boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::get((uint64_t)v9, &v20, &v19, (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), (uint64_t *)&time_rep, &__p, 1);
    std::locale::~locale(&v15);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size) {
      operator new();
    }
    v17[1] = 0;
    atomic_ullong *volatile v18 = 0;
    unint64_t v11 = time_rep;
    uint64_t v14 = 0;
    uint64_t v16 = 0;
    v17[0] = 0;
    v15.__locale_ = time_rep;
    long long v12 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = v11;
    *(_OWORD *)&v24[0].__locale_ = v12;
    boost::detail::shared_count::~shared_count((atomic_uint **)&v24[1]);
    boost::detail::shared_count::~shared_count(v17);
    boost::detail::shared_count::~shared_count(&v14);
    boost::detail::shared_count::~shared_count(&v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  *((_DWORD *)v4 + 2) = v5;
  return a1;
}

void sub_223E7CDC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, std::locale a20,uint64_t a21,std::locale a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  char v33 = (char *)v31 + *(void *)(*v31 - 24);
  std::ios_base::iostate v34 = *((_DWORD *)v33 + 8) | 4;
  if ((v33[36] & 4) == 0)
  {
    std::ios_base::clear((std::ios_base *)v33, v34);
    __cxa_end_catch();
    JUMPOUT(0x223E7CD9CLL);
  }
  std::ios_base::clear((std::ios_base *)v33, v34);
  __cxa_rethrow();
}

void sub_223E7CF0C()
{
}

uint64_t turi::flexible_type_impl::get_string_visitor::operator()(uint64_t a1, void *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"[", 1);
  if (a2[1] != *a2)
  {
    unint64_t v3 = 0;
    do
    {
      std::ostream::operator<<();
      ++v3;
      uint64_t v4 = a2[1] - *a2;
      if (v3 < v4 >> 3)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
        uint64_t v4 = a2[1] - *a2;
      }
    }
    while (v3 < v4 >> 3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]", 1);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x263F8C2B8];
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v8[0] = v5;
  v8[1] = MEMORY[0x263F8C318] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v10);
}

{
  uint64_t v3;
  void v5[2];
  void v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  turi::flexible_type_impl::ndarray<double>::print(a2, v6);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2B8];
  unint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v8);
}

{
  unsigned char *v3;
  unint64_t v4;
  turi::flexible_type_impl *v5;
  unint64_t v6;
  void *v7;
  std::string *p_p;
  std::string::size_type size;
  void *v10;
  std::string *v11;
  std::string::size_type v12;
  void *v13;
  std::string *v14;
  std::string::size_type v15;
  void *v16;
  std::string *v17;
  std::string::size_type v18;
  unsigned char *v19;
  uint64_t v20;
  std::string __p;
  void v23[2];
  void v24[11];
  char v25;
  uint64_t v26;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"{", 1);
  unint64_t v3 = (unsigned char *)a2[1];
  if (v3 != (unsigned char *)*a2)
  {
    uint64_t v4 = (uint64_t)&v3[-*a2] >> 5;
    uint64_t v5 = (turi::flexible_type_impl *)(*a2 + 16);
    uint64_t v6 = 1;
    do
    {
      if (*((unsigned char *)v5 - 4) == 2)
      {
        uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\"", 1);
        turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)((char *)v5 - 16), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"", 1);
      }
      else
      {
        turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)((char *)v5 - 16), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v11 = &__p;
        }
        else {
          unint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          long long v12 = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v11, v12);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)":", 1);
      if (*((unsigned char *)v5 + 12) == 2)
      {
        uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\"", 1);
        turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(v5, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v14 = &__p;
        }
        else {
          uint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::locale v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::locale v15 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\"", 1);
      }
      else
      {
        turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(v5, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v17 = &__p;
        }
        else {
          uint64_t v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          atomic_ullong *volatile v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          atomic_ullong *volatile v18 = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v17, v18);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v6 < v4) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", ", 2);
      }
      ++v6;
      std::locale v19 = (char *)v5 + 16;
      uint64_t v5 = (turi::flexible_type_impl *)((char *)v5 + 32);
    }
    while (v19 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"}", 1);
  std::stringbuf::str();
  v23[0] = *MEMORY[0x263F8C2B8];
  uint64_t v20 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v23 + *(void *)(v23[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v24[0] = v20;
  v24[1] = MEMORY[0x263F8C318] + 16;
  if (v25 < 0) {
    operator delete((void *)v24[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v26);
}

void sub_223E7D11C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223E7D2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::get_string_visitor::operator()(turi::flexible_type_impl *this@<X1>, std::string *a2@<X8>)
{
}

uint64_t turi::flexible_type_impl::get_string_visitor::operator()(uint64_t a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"[", 1);
  uint64_t v3 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      if (*(unsigned char *)(v3 + v4 + 12) == 2)
      {
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"", 1);
        turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)(*a2 + v4), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\"", 1);
      }
      else
      {
        turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)(v3 + v4), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v10 = &__p;
        }
        else {
          uint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v10, v11);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v5;
      uint64_t v3 = *a2;
      uint64_t v12 = a2[1] - *a2;
      if (v5 < v12 >> 4)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)",", 1);
        uint64_t v3 = *a2;
        uint64_t v12 = a2[1] - *a2;
      }
      v4 += 16;
    }
    while (v5 < v12 >> 4);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"]", 1);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x263F8C2B8];
  uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v17[0] = v13;
  v17[1] = MEMORY[0x263F8C318] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v19);
}

void sub_223E7D560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_223E7D8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t turi::flexible_type_impl::get_string_visitor::operator()()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Height: ", 8);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" Width: ", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x263F8C2B8];
  uint64_t v0 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v3[0] = v0;
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v5);
}

void sub_223E7DACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::get_vec_visitor::operator()(uint64_t *a1@<X1>, double **a2@<X8>, unint64_t a3@<D0>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[7] == 2)
  {
    if (a1[5])
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      uint64_t v7 = a2 + 2;
      do
      {
        LOBYTE(a3) = *(unsigned char *)(*a1 + v6);
        double v8 = (double)a3;
        if ((unint64_t)v5 >= *v7)
        {
          uint64_t v10 = *a2;
          uint64_t v11 = v5 - *a2;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = *v7 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            std::locale v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v14);
            uint64_t v10 = *a2;
            uint64_t v5 = a2[1];
          }
          else
          {
            std::locale v15 = 0;
          }
          uint64_t v16 = (double *)&v15[8 * v11];
          *uint64_t v16 = v8;
          char v9 = v16 + 1;
          while (v5 != v10)
          {
            double v17 = *--v5;
            *(double *)&a3 = v17;
            *--uint64_t v16 = v17;
          }
          *a2 = v16;
          a2[1] = v9;
          a2[2] = (double *)&v15[8 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          double *v5 = v8;
          char v9 = v5 + 1;
        }
        a2[1] = v9;
        ++v6;
        uint64_t v5 = v9;
      }
      while (v6 < a1[5]);
    }
  }
  else
  {
    char v18 = (atomic_uint *)a1[1];
    uint64_t v34 = *a1;
    uint64_t v35 = v18;
    if (v18) {
      atomic_fetch_add_explicit(v18 + 2, 1u, memory_order_relaxed);
    }
    long long v19 = *((_OWORD *)a1 + 2);
    long long v36 = *((_OWORD *)a1 + 1);
    long long v37 = v19;
    long long v38 = *((_OWORD *)a1 + 3);
    turi::decode_image_inplace((turi *)&v34, (turi::image_type *)a1);
    if (*((void *)&v38 + 1) != 2) {
      turi::flexible_type_impl::get_vec_visitor::operator()(turi::image_type const&)const::$_0::operator()();
    }
    if (*((void *)&v37 + 1))
    {
      unint64_t v21 = 0;
      unsigned int v22 = a2 + 2;
      char v23 = a2[1];
      do
      {
        LOBYTE(v2CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = *(unsigned char *)(v34 + v21);
        double v24 = (double)v20;
        if ((unint64_t)v23 >= *v22)
        {
          uint64_t v26 = *a2;
          uint64_t v27 = v23 - *a2;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v29 = *v22 - (void)v26;
          if (v29 >> 2 > v28) {
            unint64_t v28 = v29 >> 2;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            long long v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v30);
            uint64_t v26 = *a2;
            char v23 = a2[1];
          }
          else
          {
            long long v31 = 0;
          }
          uint64_t v32 = (double *)&v31[8 * v27];
          *uint64_t v32 = v24;
          unsigned int v25 = v32 + 1;
          while (v23 != v26)
          {
            unint64_t v33 = *((void *)v23-- - 1);
            unint64_t v20 = v33;
            *((void *)v32-- - 1) = v33;
          }
          *a2 = v32;
          a2[1] = v25;
          a2[2] = (double *)&v31[8 * v30];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *char v23 = v24;
          unsigned int v25 = v23 + 1;
        }
        a2[1] = v25;
        ++v21;
        char v23 = v25;
      }
      while (v21 < *((void *)&v37 + 1));
    }
    boost::detail::shared_count::~shared_count(&v35);
  }
}

void sub_223E7DD60(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v2);
  char v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::get_vec_visitor::operator()(turi::image_type const&)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type.cpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  char v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"newimg.m_format == Format::RAW_ARRAY", 36);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type.cpp", "operator()", 188, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_impl::get_vec_visitor::operator()(turi::image_type const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_223E7DE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_impl::get_ndvec_visitor::operator()(uint64_t *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  std::string __p = 0;
  timeval v58 = 0;
  uint64_t v59 = 0;
  unint64_t v6 = a1;
  while (1)
  {
    uint64_t v7 = (v6[1] - *v6) >> 4;
    if ((unint64_t)v5 >= v4)
    {
      char v9 = (uint64_t *)__p;
      uint64_t v10 = ((char *)v5 - (unsigned char *)__p) >> 3;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v4 - (void)__p;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v59, v13);
        char v9 = (uint64_t *)__p;
        uint64_t v5 = v58;
      }
      else
      {
        unint64_t v14 = 0;
      }
      std::locale v15 = (uint64_t *)&v14[8 * v10];
      uint64_t *v15 = v7;
      double v8 = v15 + 1;
      while (v5 != v9)
      {
        uint64_t v16 = *--v5;
        *--std::locale v15 = v16;
      }
      std::string __p = v15;
      timeval v58 = v8;
      uint64_t v59 = &v14[8 * v13];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      uint64_t *v5 = v7;
      double v8 = v5 + 1;
    }
    timeval v58 = v8;
    double v17 = (unsigned __int8 *)*v6;
    if (v6[1] == *v6) {
      break;
    }
    int v18 = v17[12];
    if (v18 != 4)
    {
      if (v18 == 9)
      {
        uint64_t v21 = *(void *)v17;
        uint64_t v22 = *(void *)(*(void *)v17 + 24);
        if (*(void *)(*(void *)v17 + 32) != v22)
        {
          unint64_t v23 = 0;
          double v24 = v8;
          do
          {
            if (v24 >= (uint64_t *)v59)
            {
              unsigned int v25 = (uint64_t *)__p;
              uint64_t v26 = ((char *)v24 - (unsigned char *)__p) >> 3;
              unint64_t v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v28 = v59 - (unsigned char *)__p;
              if ((v59 - (unsigned char *)__p) >> 2 > v27) {
                unint64_t v27 = v28 >> 2;
              }
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v29 = v27;
              }
              if (v29)
              {
                unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v59, v29);
                unsigned int v25 = (uint64_t *)__p;
                double v24 = v58;
              }
              else
              {
                unint64_t v30 = 0;
              }
              long long v31 = (uint64_t *)&v30[8 * v26];
              *long long v31 = *(void *)(v22 + 8 * v23);
              double v8 = v31 + 1;
              while (v24 != v25)
              {
                uint64_t v32 = *--v24;
                *--long long v31 = v32;
              }
              std::string __p = v31;
              timeval v58 = v8;
              uint64_t v59 = &v30[8 * v29];
              if (v25) {
                operator delete(v25);
              }
            }
            else
            {
              *double v24 = *(void *)(v22 + 8 * v23);
              double v8 = v24 + 1;
            }
            timeval v58 = v8;
            ++v23;
            uint64_t v22 = *(void *)(v21 + 24);
            double v24 = v8;
          }
          while (v23 < (*(void *)(v21 + 32) - v22) >> 3);
        }
      }
      else if (v18 == 3)
      {
        uint64_t v19 = (uint64_t)(*(void *)(*(void *)v17 + 16) - *(void *)(*(void *)v17 + 8)) >> 3;
        if (v8 >= (uint64_t *)v59)
        {
          unint64_t v33 = (uint64_t *)__p;
          uint64_t v34 = ((char *)v8 - (unsigned char *)__p) >> 3;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = v59 - (unsigned char *)__p;
          if ((v59 - (unsigned char *)__p) >> 2 > v35) {
            unint64_t v35 = v36 >> 2;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            long long v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v59, v37);
            unint64_t v33 = (uint64_t *)__p;
            double v8 = v58;
          }
          else
          {
            long long v38 = 0;
          }
          uint64_t v39 = (uint64_t *)&v38[8 * v34];
          uint64_t v40 = &v38[8 * v37];
          *uint64_t v39 = v19;
          unint64_t v20 = v39 + 1;
          while (v8 != v33)
          {
            uint64_t v41 = *--v8;
            *--uint64_t v39 = v41;
          }
          std::string __p = v39;
          timeval v58 = v20;
          uint64_t v59 = v40;
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          uint64_t *v8 = v19;
          unint64_t v20 = v8 + 1;
        }
        timeval v58 = v20;
        double v8 = v20;
      }
      else if ((0x3BCuLL >> v18))
      {
        turi::flexible_type_impl::get_ndvec_visitor::operator()(std::vector<turi::flexible_type>)const::$_0::operator()();
      }
      break;
    }
    unint64_t v6 = (uint64_t *)(*(void *)v17 + 8);
    unint64_t v4 = (unint64_t)v59;
    uint64_t v5 = v8;
  }
  uint64_t v42 = (uint64_t *)__p;
  if (v8 == __p)
  {
    double v54 = 0;
    double v55 = 0;
    uint64_t v56 = 0;
    uint64_t v51 = 0;
    unsigned int v52 = 0;
    uint64_t v53 = 0;
    uint64_t v48 = 0;
    float v49 = 0;
    uint64_t v50 = 0;
    turi::flexible_type_impl::ndarray<double>::ndarray(a2, (uint64_t)&v54, (uint64_t)&v51, (uint64_t)&v48, 0);
    if (v48)
    {
      float v49 = v48;
      operator delete(v48);
    }
  }
  else
  {
    unint64_t v43 = ((char *)v8 - (unsigned char *)__p) >> 3;
    if (v43 <= 1) {
      unint64_t v43 = 1;
    }
    unint64_t v44 = 1;
    do
    {
      uint64_t v45 = *v42++;
      v44 *= v45;
      --v43;
    }
    while (v43);
    if (v44)
    {
      uint64_t v46 = (std::__shared_weak_count *)operator new(0x30uLL);
      v46->__shared_owners_ = 0;
      v46->__shared_weak_owners_ = 0;
      v46->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D754C90;
      v46[1].__vftable = 0;
      uint64_t v47 = (double **)&v46[1];
      v46[1].__shared_owners_ = 0;
      v46[1].__shared_weak_owners_ = 0;
      uint64_t v51 = &v46[1];
      unsigned int v52 = v46;
      std::vector<double>::reserve((void **)&v46[1].__vftable, v44);
      if ((turi::flexible_type_impl::flexible_type_flatten_to_nd_vec(a1, &__p, 0, v47) & 1) == 0) {
        turi::flexible_type_impl::get_ndvec_visitor::operator()(std::vector<turi::flexible_type>)const::$_1::operator()();
      }
      double v54 = 0;
      double v55 = 0;
      uint64_t v56 = 0;
      turi::flexible_type_impl::ndarray<double>::ndarray(a2, &v51, (uint64_t)&__p, (uint64_t)&v54, 0);
      if (v54)
      {
        double v55 = v54;
        operator delete(v54);
      }
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      goto LABEL_80;
    }
    double v54 = 0;
    double v55 = 0;
    uint64_t v56 = 0;
    uint64_t v51 = 0;
    unsigned int v52 = 0;
    uint64_t v53 = 0;
    turi::flexible_type_impl::ndarray<double>::ndarray(a2, (uint64_t)&v54, (uint64_t)&__p, (uint64_t)&v51, 0);
  }
  if (v51)
  {
    unsigned int v52 = (std::__shared_weak_count *)v51;
    operator delete(v51);
  }
  if (v54)
  {
    double v55 = v54;
    operator delete(v54);
  }
LABEL_80:
  if (__p)
  {
    timeval v58 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_223E7E430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    char v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t turi::flexible_type_impl::flexible_type_flatten_to_nd_vec(uint64_t *a1, void *a2, unint64_t a3, double **a4)
{
  unint64_t v4 = (uint64_t)(a2[1] - *a2) >> 3;
  if (v4 <= a3) {
    return 0;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*(void *)(*a2 + 8 * a3) != (v7 - *a1) >> 4) {
    return 0;
  }
  if (v4 - 1 != a3)
  {
    if (v7 != v6)
    {
      unint64_t v32 = 0;
      unint64_t v33 = a3 + 1;
      unint64_t v34 = a3 + 2;
      uint64_t v97 = 8 * a3 + 8;
      uint64_t v98 = (uint64_t)(a4 + 2);
      while (1)
      {
        unint64_t v35 = (unsigned __int8 *)(v6 + 16 * v32);
        int v36 = v35[12];
        switch(v36)
        {
          case 9:
            uint64_t v41 = *(void *)v35;
            unint64_t v42 = (uint64_t)(a2[1] - *a2) >> 3;
            unint64_t v43 = v42 - v33;
            uint64_t v45 = *(uint64_t **)(*(void *)v35 + 24);
            unint64_t v44 = *(uint64_t **)(*(void *)v35 + 32);
            if (v42 - v33 != v44 - v45) {
              return 0;
            }
            if (v42 > v33)
            {
              uint64_t v46 = (uint64_t *)(*a2 + v97);
              char v47 = 1;
              uint64_t v48 = v45;
              unint64_t v49 = v43;
              do
              {
                uint64_t v51 = *v46++;
                uint64_t v50 = v51;
                uint64_t v52 = *v48++;
                v47 &= v50 == v52;
                --v49;
              }
              while (v49);
              if ((v47 & 1) == 0) {
                return 0;
              }
            }
            if (v44 != v45)
            {
              if (*(void *)(v41 + 8))
              {
                uint64_t v53 = 1;
                do
                {
                  uint64_t v54 = *v45++;
                  v53 *= v54;
                }
                while (v45 != v44);
                if (v53)
                {
                  v102.__r_.__value_.__r.__words[0] = 0;
                  std::vector<unsigned long>::vector(__str, v43, &v102);
                  uint64_t v56 = *(char **)&__str[8];
                  double v55 = *(char **)__str;
                  do
                  {
                    uint64_t v57 = v56 - v55;
                    if (v56 == v55)
                    {
                      uint64_t v58 = 0;
                    }
                    else
                    {
                      uint64_t v58 = 0;
                      unint64_t v59 = v57 >> 3;
                      long long v60 = *(uint64_t **)(v41 + 48);
                      if (v59 <= 1) {
                        unint64_t v59 = 1;
                      }
                      do
                      {
                        uint64_t v62 = *(void *)v55;
                        v55 += 8;
                        uint64_t v61 = v62;
                        uint64_t v63 = *v60++;
                        v58 += v63 * v61;
                        --v59;
                      }
                      while (v59);
                    }
                    uint64_t v64 = *(void *)(v41 + 72) + v58;
                    uint64_t v65 = **(void **)(v41 + 8);
                    uint64_t v67 = a4[1];
                    unint64_t v66 = (unint64_t)a4[2];
                    if ((unint64_t)v67 >= v66)
                    {
                      uint64_t v69 = *a4;
                      uint64_t v70 = v67 - *a4;
                      unint64_t v71 = v70 + 1;
                      if ((unint64_t)(v70 + 1) >> 61) {
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v72 = v66 - (void)v69;
                      if (v72 >> 2 > v71) {
                        unint64_t v71 = v72 >> 2;
                      }
                      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v73 = v71;
                      }
                      if (v73)
                      {
                        double v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v98, v73);
                        uint64_t v69 = *a4;
                        uint64_t v67 = a4[1];
                      }
                      else
                      {
                        double v74 = 0;
                      }
                      uint64_t v75 = &v74[8 * v70];
                      *(void *)uint64_t v75 = *(void *)(v65 + 8 * v64);
                      long long v68 = (double *)(v75 + 8);
                      while (v67 != v69)
                      {
                        uint64_t v76 = *((void *)v67-- - 1);
                        *((void *)v75 - 1) = v76;
                        v75 -= 8;
                      }
                      *a4 = (double *)v75;
                      a4[1] = v68;
                      a4[2] = (double *)&v74[8 * v73];
                      if (v69) {
                        operator delete(v69);
                      }
                    }
                    else
                    {
                      double *v67 = *(double *)(v65 + 8 * v64);
                      long long v68 = v67 + 1;
                    }
                    a4[1] = v68;
                    uint64_t v56 = *(char **)&__str[8];
                    double v55 = *(char **)__str;
                    uint64_t v77 = (uint64_t)(*(void *)&__str[8] - *(void *)__str) >> 3;
                    uint64_t v78 = v77 - 1;
                    if ((uint64_t)(*(void *)&__str[8] - *(void *)__str) >= 1)
                    {
                      uint64_t v79 = *(void *)(v41 + 24);
                      unint64_t v80 = *(void *)(*(void *)__str + 8 * v78) + 1;
                      *(void *)(*(void *)__str + 8 * v78) = v80;
                      if (v80 >= *(void *)(v79 + 8 * v78))
                      {
                        uint64_t v81 = (unint64_t *)&v55[8 * v77 - 16];
                        uint64_t v82 = v79 - 16;
                        while (1)
                        {
                          uint64_t v83 = v77 - 1;
                          v81[1] = 0;
                          if (v77 - 1 <= 0) {
                            goto LABEL_94;
                          }
                          unint64_t v84 = *v81 + 1;
                          *v81-- = v84;
                          unint64_t v85 = *(void *)(v82 + 8 * v77--);
                          if (v84 < v85)
                          {
                            uint64_t v78 = v83 - 1;
                            break;
                          }
                        }
                      }
                      uint64_t v77 = 1;
                    }
                  }
                  while ((v78 & 0x8000000000000000) == 0 && v77);
                  if (!v55) {
                    break;
                  }
LABEL_94:
                  *(void *)&__str[8] = v55;
                  operator delete(v55);
                }
              }
            }
            break;
          case 4:
            if (!turi::flexible_type_impl::flexible_type_flatten_to_nd_vec(*(void *)v35 + 8, a2, v33, a4))return 0; {
            break;
            }
          case 3:
            if (v34 != (uint64_t)(a2[1] - *a2) >> 3) {
              return 0;
            }
            uint64_t v37 = *(void *)v35;
            uint64_t v39 = *(char **)(v37 + 8);
            long long v38 = *(char **)(v37 + 16);
            if (*(void *)(*a2 + 8 * v33) != (v38 - v39) >> 3) {
              return 0;
            }
            if (v39 != v38)
            {
              uint64_t v40 = (char *)a4[1];
              do
              {
                uint64_t v40 = std::vector<double>::insert((uint64_t)a4, v40, v39) + 8;
                v39 += 8;
              }
              while (v39 != v38);
            }
            break;
          default:
            return 0;
        }
        ++v32;
        uint64_t v6 = *a1;
        BOOL v12 = 1;
        if (v32 >= (a1[1] - *a1) >> 4) {
          return v12;
        }
      }
    }
    return 1;
  }
  if (v7 == v6) {
    return 1;
  }
  unint64_t v9 = 0;
  do
  {
    uint64_t v10 = v6 + 16 * v9;
    char v11 = *(unsigned char *)(v10 + 12);
    BOOL v12 = ((0x3BCuLL >> v11) & 1) == 0;
    if ((0x3BCuLL >> v11)) {
      break;
    }
    double v13 = 0.0;
    switch(*(unsigned char *)(v10 + 12))
    {
      case 0:
        double v13 = (double)*(uint64_t *)v10;
        break;
      case 1:
        double v13 = *(double *)v10;
        break;
      case 2:
        uint64_t v14 = *(void *)v10;
        std::locale v15 = (char **)(*(void *)v10 + 8);
        size_t __idx = 0;
        uint64_t v16 = (char *)v15;
        if (*(char *)(v14 + 31) < 0) {
          uint64_t v16 = *v15;
        }
        std::string::basic_string[abi:ne180100]<0>(__str, v16);
        double v17 = std::stod((const std::string *)__str, &__idx);
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        if (*(char *)(v14 + 31) < 0) {
          uint64_t v18 = *(void *)(v14 + 16);
        }
        else {
          uint64_t v18 = *(unsigned __int8 *)(v14 + 31);
        }
        if (__idx != v18)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          unint64_t v95 = std::string::append(&v102, " cannot be interpreted as a float");
          long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
          *(void *)&__str[16] = *((void *)&v95->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __str = v96;
          v95->__r_.__value_.__l.__size_ = 0;
          v95->__r_.__value_.__r.__words[2] = 0;
          v95->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__str);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        float v19 = v17;
        double v13 = v19;
        break;
      case 3:
        uint64_t v89 = *(void *)v10;
        memset(__str, 0, 24);
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v89 + 8), *(void *)(v89 + 16), (uint64_t)(*(void *)(v89 + 16) - *(void *)(v89 + 8)) >> 3);
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      case 4:
        uint64_t v88 = *(void *)v10;
        memset(__str, 0, 24);
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v88 + 8), *(uint64_t **)(v88 + 16), (uint64_t)(*(void *)(v88 + 16) - *(void *)(v88 + 8)) >> 4);
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      case 5:
        uint64_t v87 = *(void *)v10;
        memset(__str, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v87 + 8), *(uint64_t **)(v87 + 16), (uint64_t)(*(void *)(v87 + 16) - *(void *)(v87 + 8)) >> 5);
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      case 6:
        double v13 = (double)*(int *)(v10 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v10 << 8) >> 8);
        break;
      case 7:
        break;
      case 8:
        uint64_t v90 = *(void *)v10;
        uint64_t v91 = *(void *)(v90 + 16);
        *(void *)std::string __str = *(void *)(v90 + 8);
        *(void *)&__str[8] = v91;
        if (v91) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v91 + 8), 1u, memory_order_relaxed);
        }
        long long v92 = *(_OWORD *)(v90 + 24);
        long long v93 = *(_OWORD *)(v90 + 56);
        long long v100 = *(_OWORD *)(v90 + 40);
        long long v101 = v93;
        *(_OWORD *)&__str[16] = v92;
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(void *)v10 + 8);
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      default:
        turi::flexible_type_fail(BOOL)::$_0::operator()();
    }
    uint64_t v21 = a4[1];
    unint64_t v20 = (unint64_t)a4[2];
    if ((unint64_t)v21 >= v20)
    {
      unint64_t v23 = *a4;
      uint64_t v24 = v21 - *a4;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v26 = v20 - (void)v23;
      if (v26 >> 2 > v25) {
        unint64_t v25 = v26 >> 2;
      }
      unint64_t v27 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v25;
      if (v27)
      {
        uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a4 + 2), v27);
        unint64_t v23 = *a4;
        uint64_t v21 = a4[1];
      }
      else
      {
        uint64_t v28 = 0;
      }
      unint64_t v29 = (double *)&v28[8 * v24];
      *unint64_t v29 = v13;
      uint64_t v22 = v29 + 1;
      while (v21 != v23)
      {
        uint64_t v30 = *((void *)v21-- - 1);
        *((void *)v29-- - 1) = v30;
      }
      *a4 = v29;
      a4[1] = v22;
      a4[2] = (double *)&v28[8 * v27];
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      double *v21 = v13;
      uint64_t v22 = v21 + 1;
    }
    a4[1] = v22;
    ++v9;
    uint64_t v6 = *a1;
  }
  while (v9 < (a1[1] - *a1) >> 4);
  return v12;
}

void sub_223E7EC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void turi::flexible_type_impl::get_ndvec_visitor::operator()(uint64_t *a1@<X1>, void *a2@<X8>, unint64_t a3@<D0>)
{
  turi::flexible_type_impl::get_vec_visitor::operator()(a1, (double **)v20, a3);
  int64_t v5 = (char *)operator new(0x30uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int64_t v5 = &unk_26D754C90;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)v20;
  uint64_t v18 = v5 + 24;
  float v19 = (std::__shared_weak_count *)v5;
  *((void *)v5 + 5) = v21;
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v21 = 0;
  uint64_t v6 = a1[4];
  if (v6 == 1)
  {
    uint64_t v8 = a1[2];
    uint64_t v7 = a1[3];
    unint64_t v9 = operator new(0x10uLL);
    uint64_t v16 = v9 + 2;
    double v17 = v9 + 2;
    void *v9 = v8;
    v9[1] = v7;
  }
  else
  {
    uint64_t v11 = a1[2];
    uint64_t v10 = a1[3];
    unint64_t v9 = operator new(0x18uLL);
    uint64_t v16 = v9 + 3;
    double v17 = v9 + 3;
    void *v9 = v11;
    v9[1] = v10;
    void v9[2] = v6;
  }
  uint64_t v14 = 0;
  std::locale v15 = v9;
  std::string __p = 0;
  double v13 = 0;
  turi::flexible_type_impl::ndarray<double>::ndarray(a2, &v18, (uint64_t)&v15, (uint64_t)&__p, 0);
  if (__p)
  {
    double v13 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v20[0])
  {
    v20[1] = v20[0];
    operator delete(v20[0]);
  }
}

void sub_223E7EE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_impl::get_img_visitor::operator()(uint64_t a1@<X1>, turi::image_type *a2@<X8>)
{
  assert_msg(((*(void *)(a1 + 24) - *(void *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF7) == 16, "Cannot convert nd array to image");
  unint64_t v4 = *(unint64_t **)(a1 + 16);
  uint64_t v5 = (uint64_t)(*(void *)(a1 + 24) - (void)v4) >> 3;
  if (v5 == 3)
  {
    unint64_t v6 = *v4;
    unint64_t v7 = v4[1];
    unint64_t v8 = v4[2];
  }
  else
  {
    if (v5 == 2)
    {
      unint64_t v6 = *v4;
      unint64_t v7 = v4[1];
    }
    else
    {
      unint64_t v6 = 0;
      unint64_t v7 = 0;
    }
    unint64_t v8 = 1;
  }
  BOOL v10 = v8 == 4 || (v8 & 0xFFFFFFFFFFFFFFFDLL) == 1;
  assert_msg(v10, "Channels must be 1, 3 or 4");
  size_t v11 = v6 * v8 * v7;
  if (!v11)
  {
    turi::image_type::image_type(a2, 0, v6, v7, v8, 0, 0, 2);
    return;
  }
  LOBYTE(__p) = 0;
  std::vector<unsigned char>::vector(&v35, v11, &__p);
  unint64_t v12 = (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
  uint64_t v32 = 0;
  std::vector<unsigned long>::vector(&__p, v12, &v32);
  uint64_t v13 = 0;
  uint64_t v14 = (char *)__p;
  std::locale v15 = v34;
  while (1)
  {
    uint64_t v16 = v15 - v14;
    if (v15 == v14)
    {
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = 0;
      unint64_t v18 = v16 >> 3;
      float v19 = *(uint64_t **)(a1 + 40);
      if (v18 <= 1) {
        unint64_t v18 = 1;
      }
      do
      {
        uint64_t v21 = *(void *)v14;
        v14 += 8;
        uint64_t v20 = v21;
        uint64_t v22 = *v19++;
        v17 += v22 * v20;
        --v18;
      }
      while (v18);
    }
    *((unsigned char *)v35 + v13) = (int)*(double *)(**(void **)a1 + 8 * (*(void *)(a1 + 64) + v17));
    uint64_t v14 = (char *)__p;
    std::locale v15 = v34;
    uint64_t v23 = (v34 - (unsigned char *)__p) >> 3;
    uint64_t v24 = v23 - 1;
    if (v34 - (unsigned char *)__p < 1) {
      goto LABEL_28;
    }
    uint64_t v25 = *(void *)(a1 + 16);
    unint64_t v26 = *((void *)__p + v24) + 1;
    *((void *)__p + v24) = v26;
    if (v26 >= *(void *)(v25 + 8 * v24)) {
      break;
    }
LABEL_27:
    uint64_t v23 = 1;
LABEL_28:
    if ((v24 & 0x8000000000000000) == 0)
    {
      ++v13;
      if (v23) {
        continue;
      }
    }
    goto LABEL_30;
  }
  unint64_t v27 = (unint64_t *)&v14[8 * v23 - 16];
  uint64_t v28 = v25 - 16;
  while (1)
  {
    uint64_t v29 = v23 - 1;
    v27[1] = 0;
    if (v23 - 1 <= 0) {
      break;
    }
    unint64_t v30 = *v27 + 1;
    *v27-- = v30;
    unint64_t v31 = *(void *)(v28 + 8 * v23--);
    if (v30 < v31)
    {
      uint64_t v24 = v29 - 1;
      goto LABEL_27;
    }
  }
LABEL_30:
  turi::image_type::image_type(a2, (const char *)v35, v6, v7, v8, v36 - (unsigned char *)v35, 0, 2);
  if (__p)
  {
    unint64_t v34 = (char *)__p;
    operator delete(__p);
  }
  if (v35)
  {
    int v36 = v35;
    operator delete(v35);
  }
}

void sub_223E7F144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_impl::soft_assignment_visitor::operator()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v299 = *MEMORY[0x263EF8340];
  std::vector<double>::resize((uint64_t)a2, (uint64_t)(a3[1] - *a3) >> 4);
  int v297 = 0;
  char v298 = 1;
  double v296 = 0.0;
  uint64_t v6 = *v3;
  if (v3[1] != *v3)
  {
    unint64_t v7 = 0;
    uint64_t v274 = *MEMORY[0x263F8C2B8];
    uint64_t v272 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    uint64_t v273 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    long long v271 = v3;
    do
    {
      uint64_t v8 = v6 + 16 * v7;
      if ((double *)v8 != &v296)
      {
        switch(*(unsigned char *)(v8 + 12))
        {
          case 0:
            switch(v298)
            {
              case 0:
                double v9 = *(double *)v8;
                goto LABEL_28;
              case 1:
                double v74 = (double)*(uint64_t *)v8;
                goto LABEL_156;
              case 2:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                long long v237 = *(atomic_ullong **)&v296;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v283);
                std::ostream::operator<<();
                std::stringbuf::str();
                *(void *)unint64_t v283 = v274;
                *(void *)&v283[*(void *)(v274 - 24)] = v273;
                *(void *)&v283[16] = v272;
                *(void *)&v283[24] = MEMORY[0x263F8C318] + 16;
                if (v287 < 0) {
                  operator delete(v286);
                }
                long long v121 = v237 + 1;
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x22A614E30](v288);
                if (*((char *)v237 + 31) < 0) {
                  goto LABEL_251;
                }
                goto LABEL_252;
              case 3:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 4:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 5:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 6:
                *(void *)&double v296 = *(void *)v8 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
                int v297 = 0;
                goto LABEL_431;
              case 8:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 9:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              default:
                goto LABEL_598;
            }
          case 1:
            switch(v298)
            {
              case 0:
                *(void *)&double v9 = (uint64_t)*(double *)v8;
                goto LABEL_28;
              case 1:
                double v74 = *(double *)v8;
                goto LABEL_156;
              case 2:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                long long v151 = *(atomic_ullong **)&v296;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v283);
                std::ostream::operator<<();
                std::stringbuf::str();
                goto LABEL_420;
              case 3:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 4:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 5:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 6:
                int v73 = (int)((*(double *)v8 - (double)(uint64_t)floor(*(double *)v8)) * 1000000.0);
                if (v73 >= 999999) {
                  int v73 = 999999;
                }
                if (v73 >= 0xF4240) {
                  turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                }
                *(void *)&double v296 = vcvtmd_s64_f64(*(double *)v8) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
                int v297 = v73;
                goto LABEL_431;
              case 8:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 9:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              default:
                goto LABEL_598;
            }
          case 2:
            if (v298 != 2)
            {
              switch(v298)
              {
                case 3:
                  if (**(void **)&v296 != 1) {
                    operator new();
                  }
                  return;
                case 4:
                  if (**(void **)&v296 != 1) {
                    operator new();
                  }
                  return;
                case 5:
                  if (**(void **)&v296 != 1) {
                    operator new();
                  }
                  return;
                case 8:
                  if (**(void **)&v296 != 1) {
                    operator new();
                  }
                  return;
                case 9:
                  if (**(void **)&v296 != 1) {
                    operator new();
                  }
                  return;
                default:
                  break;
              }
LABEL_598:
              turi::flexible_type_fail(BOOL)::$_0::operator()();
            }
            double v13 = *(double *)v8;
            if (**(void **)&v296 != 1) {
              operator new();
            }
            uint64_t v76 = *(atomic_ullong **)&v296;
            if (*(char *)(*(void *)&v13 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v283, *(const std::string::value_type **)(*(void *)&v13 + 8), *(void *)(*(void *)&v13 + 16));
            }
            else
            {
              long long v77 = *(_OWORD *)(*(void *)&v13 + 8);
              *(void *)&v283[16] = *(void *)(*(void *)&v13 + 24);
              *(_OWORD *)unint64_t v283 = v77;
            }
LABEL_427:
            uint64_t v238 = v76 + 1;
            if (*((char *)v76 + 31) < 0) {
              operator delete((void *)*v238);
            }
            long long v239 = *(_OWORD *)v283;
            atomic_ullong v240 = *(void *)&v283[16];
LABEL_430:
            v238[2] = v240;
            *(_OWORD *)uint64_t v238 = v239;
            break;
          case 3:
            uint64_t v14 = *(atomic_ullong **)v8;
            std::locale v15 = (char **)(v14 + 1);
            switch(v298)
            {
              case 2:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                long long v151 = *(atomic_ullong **)&v296;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v283);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)"[", 1);
                if (v14[2] != v14[1])
                {
                  unint64_t v235 = 0;
                  do
                  {
                    std::ostream::operator<<();
                    ++v235;
                    uint64_t v236 = v14[2] - v14[1];
                    if (v235 < v236 >> 3)
                    {
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)" ", 1);
                      uint64_t v236 = v14[2] - v14[1];
                    }
                  }
                  while (v235 < v236 >> 3);
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)"]", 1);
                std::stringbuf::str();
                goto LABEL_414;
              case 3:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                if (*(atomic_ullong **)&v296 == v14) {
                  goto LABEL_431;
                }
                uint64_t v62 = (char *)(*(void *)&v296 + 8);
                uint64_t v72 = v14 + 2;
                break;
              case 4:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(*(void *)&v296 + 8), (void *)v14[1], (void *)v14[2], (v14[2] - v14[1]) >> 3);
                goto LABEL_431;
              case 5:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 8:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 9:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                uint64_t v67 = *(atomic_ullong **)&v296;
                uint64_t v292 = 0;
                unint64_t v293 = 0;
                v294 = 0;
                memset(&v295, 0, sizeof(v295));
                std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)(v14 + 1), &v289);
                turi::flexible_type_impl::ndarray<double>::ndarray(v283, &v289, (uint64_t)&v295, (uint64_t)&v292, 0);
                if (v290) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v290);
                }
                if (v292)
                {
                  unint64_t v293 = v292;
                  operator delete(v292);
                }
                if (v295.__r_.__value_.__r.__words[0])
                {
                  v295.__r_.__value_.__l.__size_ = v295.__r_.__value_.__r.__words[0];
                  operator delete(v295.__r_.__value_.__l.__data_);
                }
                long long v68 = *(_OWORD *)v283;
                *(_OWORD *)unint64_t v283 = 0uLL;
                uint64_t v69 = (std::__shared_weak_count *)v67[2];
                *(_OWORD *)(v67 + 1) = v68;
                if (v69) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v69);
                }
                uint64_t v70 = (void *)v67[3];
                if (v70)
                {
                  v67[4] = (atomic_ullong)v70;
                  operator delete(v70);
                  v67[3] = 0;
                  v67[4] = 0;
                  v67[5] = 0;
                }
                unint64_t v71 = (void *)v67[6];
                *(_OWORD *)(v67 + 3) = *(_OWORD *)&v283[16];
                v67[5] = *(void *)v284;
                *(_OWORD *)&v283[16] = 0uLL;
                *(void *)v284 = 0;
                if (v71)
                {
                  v67[7] = (atomic_ullong)v71;
                  operator delete(v71);
                  v67[6] = 0;
                  v67[7] = 0;
                  v67[8] = 0;
                  unint64_t v71 = *(void **)&v283[16];
                }
                *((_OWORD *)v67 + 3) = *(_OWORD *)&v284[8];
                v67[8] = *(void *)&v284[24];
                memset(&v284[8], 0, 24);
                v67[9] = v285;
                if (!v71) {
                  goto LABEL_207;
                }
                goto LABEL_206;
              default:
                goto LABEL_598;
            }
LABEL_140:
            std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v62, *v15, *v72, (*v72 - (uint64_t)*v15) >> 3);
            break;
          case 4:
            uint64_t v10 = *(void *)v8 + 8;
            long long v277 = &v276;
            long long v278 = (uint64_t **)v10;
            switch(v298)
            {
              case 2:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                uint64_t v165 = *(atomic_ullong **)&v296;
                long long v166 = v278;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v283);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)"[", 1);
                uint64_t v167 = *v166;
                if (v166[1] != *v166)
                {
                  uint64_t v168 = 0;
                  unint64_t v169 = 0;
                  do
                  {
                    if (BYTE4(v167[v168 + 1]) == 2)
                    {
                      std::string::size_type v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)"\"", 1);
                      turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)&(*v166)[v168], &v295);
                      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        long long v171 = &v295;
                      }
                      else {
                        long long v171 = (std::string *)v295.__r_.__value_.__r.__words[0];
                      }
                      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type size = HIBYTE(v295.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type size = v295.__r_.__value_.__l.__size_;
                      }
                      char v173 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)v171, size);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)"\"", 1);
                    }
                    else
                    {
                      turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)&v167[v168], &v295);
                      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        v174 = &v295;
                      }
                      else {
                        v174 = (std::string *)v295.__r_.__value_.__r.__words[0];
                      }
                      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v175 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v175 = v295.__r_.__value_.__l.__size_;
                      }
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)v174, v175);
                    }
                    if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v295.__r_.__value_.__l.__data_);
                    }
                    ++v169;
                    uint64_t v167 = *v166;
                    uint64_t v176 = (char *)v166[1] - (char *)*v166;
                    if (v169 < v176 >> 4)
                    {
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)",", 1);
                      uint64_t v167 = *v166;
                      uint64_t v176 = (char *)v166[1] - (char *)*v166;
                    }
                    v168 += 2;
                  }
                  while (v169 < v176 >> 4);
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)"]", 1);
                std::stringbuf::str();
                *(void *)unint64_t v283 = v274;
                *(void *)&v283[*(void *)(v274 - 24)] = v273;
                *(void *)&v283[16] = v272;
                *(void *)&v283[24] = MEMORY[0x263F8C318] + 16;
                uint64_t v3 = v271;
                if (v287 < 0) {
                  operator delete(v286);
                }
                long long v121 = v165 + 1;
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x22A614E30](v288);
                if (*((char *)v165 + 31) < 0) {
                  goto LABEL_251;
                }
                goto LABEL_252;
              case 3:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::soft_assignment_visitor,std::vector<turi::flexible_type>>::operator()<std::vector<double>>((uint64_t)&v277, *(void *)&v296 + 8);
                goto LABEL_431;
              case 4:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                if ((uint64_t **)(*(void *)&v296 + 8) != v278) {
                  std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(*(void *)&v296 + 8, *v278, v278[1], ((char *)v278[1] - (char *)*v278) >> 4);
                }
                goto LABEL_431;
              case 5:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 8:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 9:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                uint64_t v37 = *(atomic_ullong **)&v296;
                memset(v279, 0, sizeof(v279));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v279, *v278, v278[1], ((char *)v278[1] - (char *)*v278) >> 4);
                unint64_t v38 = 0;
                uint64_t v39 = 0;
                memset(&v295, 0, sizeof(v295));
                uint64_t v40 = v279;
                break;
              default:
                goto LABEL_598;
            }
            while (2)
            {
              uint64_t v41 = (v40[1] - *v40) >> 4;
              if ((unint64_t)v39 >= v38)
              {
                unint64_t v43 = (void *)v295.__r_.__value_.__r.__words[0];
                uint64_t v44 = (uint64_t)((uint64_t)v39 - v295.__r_.__value_.__r.__words[0]) >> 3;
                unint64_t v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 61) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v46 = v38 - v295.__r_.__value_.__r.__words[0];
                if (v46 >> 2 > v45) {
                  unint64_t v45 = v46 >> 2;
                }
                if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v47 = v45;
                }
                if (v47)
                {
                  uint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v295.__r_.__value_.__r.__words[2], v47);
                  uint64_t v39 = (void *)v295.__r_.__value_.__l.__size_;
                  unint64_t v43 = (void *)v295.__r_.__value_.__r.__words[0];
                }
                else
                {
                  uint64_t v48 = 0;
                }
                unint64_t v49 = (uint64_t *)&v48[8 * v44];
                uint64_t *v49 = v41;
                unint64_t v42 = v49 + 1;
                while (v39 != v43)
                {
                  uint64_t v50 = *--v39;
                  *--unint64_t v49 = v50;
                }
                v295.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
                v295.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
                v295.__r_.__value_.__r.__words[2] = (std::string::size_type)&v48[8 * v47];
                if (v43) {
                  operator delete(v43);
                }
              }
              else
              {
                *uint64_t v39 = v41;
                unint64_t v42 = v39 + 1;
              }
              v295.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
              uint64_t v51 = (unsigned __int8 *)*v40;
              if (v40[1] != *v40)
              {
                int v52 = v51[12];
                switch(v52)
                {
                  case 4:
                    uint64_t v40 = (uint64_t *)(*(void *)v51 + 8);
                    unint64_t v38 = v295.__r_.__value_.__r.__words[2];
                    uint64_t v39 = v42;
                    continue;
                  case 9:
                    uint64_t v153 = *(void *)v51;
                    uint64_t v154 = *(void *)(*(void *)v51 + 24);
                    if (*(void *)(*(void *)v51 + 32) != v154)
                    {
                      unint64_t v155 = 0;
                      std::string::size_type v156 = v42;
                      do
                      {
                        if ((unint64_t)v156 >= v295.__r_.__value_.__r.__words[2])
                        {
                          long long v157 = (void *)v295.__r_.__value_.__r.__words[0];
                          uint64_t v158 = (uint64_t)((uint64_t)v156 - v295.__r_.__value_.__r.__words[0]) >> 3;
                          unint64_t v159 = v158 + 1;
                          if ((unint64_t)(v158 + 1) >> 61) {
                            std::vector<float>::__throw_length_error[abi:ne180100]();
                          }
                          int64_t v160 = v295.__r_.__value_.__r.__words[2] - v295.__r_.__value_.__r.__words[0];
                          if ((uint64_t)(v295.__r_.__value_.__r.__words[2] - v295.__r_.__value_.__r.__words[0]) >> 2 > v159) {
                            unint64_t v159 = v160 >> 2;
                          }
                          if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v161 = v159;
                          }
                          if (v161)
                          {
                            v162 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v295.__r_.__value_.__r.__words[2], v161);
                            std::string::size_type v156 = (void *)v295.__r_.__value_.__l.__size_;
                            long long v157 = (void *)v295.__r_.__value_.__r.__words[0];
                          }
                          else
                          {
                            v162 = 0;
                          }
                          long long v163 = &v162[8 * v158];
                          *(void *)long long v163 = *(void *)(v154 + 8 * v155);
                          unint64_t v42 = v163 + 8;
                          while (v156 != v157)
                          {
                            uint64_t v164 = *--v156;
                            *((void *)v163 - 1) = v164;
                            v163 -= 8;
                          }
                          v295.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
                          v295.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
                          v295.__r_.__value_.__r.__words[2] = (std::string::size_type)&v162[8 * v161];
                          if (v157) {
                            operator delete(v157);
                          }
                        }
                        else
                        {
                          *std::string::size_type v156 = *(void *)(v154 + 8 * v155);
                          unint64_t v42 = v156 + 1;
                        }
                        v295.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
                        ++v155;
                        uint64_t v154 = *(void *)(v153 + 24);
                        std::string::size_type v156 = v42;
                      }
                      while (v155 < (*(void *)(v153 + 32) - v154) >> 3);
                    }
                    break;
                  case 3:
                    uint64_t v78 = (uint64_t)(*(void *)(*(void *)v51 + 16) - *(void *)(*(void *)v51 + 8)) >> 3;
                    if ((unint64_t)v42 >= v295.__r_.__value_.__r.__words[2])
                    {
                      v242 = (void *)v295.__r_.__value_.__r.__words[0];
                      uint64_t v243 = (uint64_t)((uint64_t)v42 - v295.__r_.__value_.__r.__words[0]) >> 3;
                      unint64_t v244 = v243 + 1;
                      if ((unint64_t)(v243 + 1) >> 61) {
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      }
                      int64_t v245 = v295.__r_.__value_.__r.__words[2] - v295.__r_.__value_.__r.__words[0];
                      if ((uint64_t)(v295.__r_.__value_.__r.__words[2] - v295.__r_.__value_.__r.__words[0]) >> 2 > v244) {
                        unint64_t v244 = v245 >> 2;
                      }
                      if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v246 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v246 = v244;
                      }
                      if (v246)
                      {
                        double v247 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v295.__r_.__value_.__r.__words[2], v246);
                        unint64_t v42 = (void *)v295.__r_.__value_.__l.__size_;
                        v242 = (void *)v295.__r_.__value_.__r.__words[0];
                      }
                      else
                      {
                        double v247 = 0;
                      }
                      uint64_t v248 = (uint64_t *)&v247[8 * v243];
                      *uint64_t v248 = v78;
                      std::string::size_type v79 = (std::string::size_type)(v248 + 1);
                      while (v42 != v242)
                      {
                        uint64_t v249 = *--v42;
                        *--uint64_t v248 = v249;
                      }
                      v295.__r_.__value_.__r.__words[0] = (std::string::size_type)v248;
                      v295.__r_.__value_.__l.__size_ = v79;
                      v295.__r_.__value_.__r.__words[2] = (std::string::size_type)&v247[8 * v246];
                      if (v242) {
                        operator delete(v242);
                      }
                    }
                    else
                    {
                      *unint64_t v42 = v78;
                      std::string::size_type v79 = (std::string::size_type)(v42 + 1);
                    }
                    v295.__r_.__value_.__l.__size_ = v79;
                    unint64_t v42 = (void *)v79;
                    break;
                  default:
                    if ((0x3BCuLL >> v52)) {
                      turi::flexible_type_impl::get_ndvec_visitor::operator()(std::vector<turi::flexible_type>)const::$_0::operator()();
                    }
                    break;
                }
              }
              break;
            }
            unsigned int v250 = (uint64_t *)v295.__r_.__value_.__r.__words[0];
            if (v42 == (void *)v295.__r_.__value_.__l.__data_)
            {
              unint64_t v293 = 0;
              v294 = 0;
              v289 = 0;
              v290 = 0;
              uint64_t v291 = 0;
              uint64_t v292 = 0;
              atomic_ullong *volatile v280 = 0;
              v281 = 0;
              uint64_t v282 = 0;
              turi::flexible_type_impl::ndarray<double>::ndarray(v283, (uint64_t)&v292, (uint64_t)&v289, (uint64_t)&v280, 0);
              uint64_t v3 = v271;
              if (v280)
              {
                v281 = (std::__shared_weak_count *)v280;
                operator delete(v280);
              }
            }
            else
            {
              unint64_t v251 = (uint64_t)((uint64_t)v42 - v295.__r_.__value_.__r.__words[0]) >> 3;
              if (v251 <= 1) {
                unint64_t v251 = 1;
              }
              unint64_t v252 = 1;
              uint64_t v3 = v271;
              do
              {
                uint64_t v253 = *v250++;
                v252 *= v253;
                --v251;
              }
              while (v251);
              if (v252)
              {
                v254 = (std::__shared_weak_count *)operator new(0x30uLL);
                v254->__shared_owners_ = 0;
                v254->__shared_weak_owners_ = 0;
                v254->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D754C90;
                v254[1].__shared_owners_ = 0;
                v254[1].__shared_weak_owners_ = 0;
                v254[1].__vftable = 0;
                v289 = (double **)&v254[1];
                v290 = v254;
                std::vector<double>::reserve((void **)&v254[1].__vftable, v252);
                if ((turi::flexible_type_impl::flexible_type_flatten_to_nd_vec(v279, &v295, 0, v289) & 1) == 0) {
                  turi::flexible_type_impl::get_ndvec_visitor::operator()(std::vector<turi::flexible_type>)const::$_1::operator()();
                }
                uint64_t v292 = 0;
                unint64_t v293 = 0;
                v294 = 0;
                turi::flexible_type_impl::ndarray<double>::ndarray(v283, &v289, (uint64_t)&v295, (uint64_t)&v292, 0);
                if (v292)
                {
                  unint64_t v293 = v292;
                  operator delete(v292);
                }
                if (v290) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v290);
                }
                goto LABEL_466;
              }
              unint64_t v293 = 0;
              v294 = 0;
              v289 = 0;
              v290 = 0;
              uint64_t v291 = 0;
              uint64_t v292 = 0;
              turi::flexible_type_impl::ndarray<double>::ndarray(v283, (uint64_t)&v292, (uint64_t)&v295, (uint64_t)&v289, 0);
            }
            if (v289)
            {
              v290 = (std::__shared_weak_count *)v289;
              operator delete(v289);
            }
            if (v292)
            {
              unint64_t v293 = v292;
              operator delete(v292);
            }
LABEL_466:
            if (v295.__r_.__value_.__r.__words[0])
            {
              v295.__r_.__value_.__l.__size_ = v295.__r_.__value_.__r.__words[0];
              operator delete(v295.__r_.__value_.__l.__data_);
            }
            long long v255 = *(_OWORD *)v283;
            *(_OWORD *)unint64_t v283 = 0uLL;
            uint64_t v256 = (std::__shared_weak_count *)v37[2];
            *(_OWORD *)(v37 + 1) = v255;
            if (v256) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v256);
            }
            long long v257 = (void *)v37[3];
            if (v257)
            {
              void v37[4] = (atomic_ullong)v257;
              operator delete(v257);
              void v37[3] = 0;
              void v37[4] = 0;
              v37[5] = 0;
            }
            v258 = (void *)v37[6];
            *(_OWORD *)(v37 + 3) = *(_OWORD *)&v283[16];
            v37[5] = *(void *)v284;
            *(_OWORD *)&v283[16] = 0uLL;
            *(void *)v284 = 0;
            if (v258)
            {
              v37[7] = (atomic_ullong)v258;
              operator delete(v258);
              v37[6] = 0;
              v37[7] = 0;
              v37[8] = 0;
              v258 = *(void **)&v283[16];
            }
            *((_OWORD *)v37 + 3) = *(_OWORD *)&v284[8];
            v37[8] = *(void *)&v284[24];
            memset(&v284[8], 0, 24);
            v37[9] = v285;
            if (v258)
            {
              *(void *)&v283[24] = v258;
              operator delete(v258);
            }
            if (*(void *)&v283[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v283[8]);
            }
            v295.__r_.__value_.__r.__words[0] = (std::string::size_type)v279;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v295);
            break;
          case 5:
            double v16 = *(double *)v8;
            switch(v298)
            {
              case 2:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                std::string v102 = *(atomic_ullong **)&v296;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v283);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)"{", 1);
                uint64_t v103 = *(void *)(*(void *)&v16 + 8);
                uint64_t v104 = *(unsigned char **)(*(void *)&v16 + 16);
                if (v104 != (unsigned char *)v103)
                {
                  unint64_t v105 = (uint64_t)&v104[-v103] >> 5;
                  uint64_t v106 = (turi::flexible_type_impl *)(v103 + 16);
                  unint64_t v107 = 1;
                  do
                  {
                    if (*((unsigned char *)v106 - 4) == 2)
                    {
                      uint64_t v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)"\"", 1);
                      turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)((char *)v106 - 16), &v295);
                      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v109 = &v295;
                      }
                      else {
                        std::string::size_type v109 = (std::string *)v295.__r_.__value_.__r.__words[0];
                      }
                      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v110 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v110 = v295.__r_.__value_.__l.__size_;
                      }
                      uint64_t v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)v109, v110);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"\"", 1);
                    }
                    else
                    {
                      turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)((char *)v106 - 16), &v295);
                      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v112 = &v295;
                      }
                      else {
                        uint64_t v112 = (std::string *)v295.__r_.__value_.__r.__words[0];
                      }
                      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v113 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v113 = v295.__r_.__value_.__l.__size_;
                      }
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)v112, v113);
                    }
                    if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v295.__r_.__value_.__l.__data_);
                    }
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)":", 1);
                    if (*((unsigned char *)v106 + 12) == 2)
                    {
                      unsigned int v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)"\"", 1);
                      turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(v106, &v295);
                      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v115 = &v295;
                      }
                      else {
                        std::string::size_type v115 = (std::string *)v295.__r_.__value_.__r.__words[0];
                      }
                      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v116 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v116 = v295.__r_.__value_.__l.__size_;
                      }
                      long long v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)v115, v116);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"\"", 1);
                    }
                    else
                    {
                      turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(v106, &v295);
                      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        v118 = &v295;
                      }
                      else {
                        v118 = (std::string *)v295.__r_.__value_.__r.__words[0];
                      }
                      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v119 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v119 = v295.__r_.__value_.__l.__size_;
                      }
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)v118, v119);
                    }
                    if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v295.__r_.__value_.__l.__data_);
                    }
                    if (v107 < v105) {
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)", ", 2);
                    }
                    ++v107;
                    uint64_t v120 = (char *)v106 + 16;
                    uint64_t v106 = (turi::flexible_type_impl *)((char *)v106 + 32);
                  }
                  while (v120 != v104);
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)"}", 1);
                std::stringbuf::str();
                *(void *)unint64_t v283 = v274;
                *(void *)&v283[*(void *)(v274 - 24)] = v273;
                *(void *)&v283[16] = v272;
                *(void *)&v283[24] = MEMORY[0x263F8C318] + 16;
                uint64_t v3 = v271;
                if (v287 < 0) {
                  operator delete(v286);
                }
                long long v121 = v102 + 1;
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x22A614E30](v288);
                if (*((char *)v102 + 31) < 0) {
LABEL_251:
                }
                  operator delete((void *)*v121);
LABEL_252:
                long long v122 = *(_OWORD *)&v295.__r_.__value_.__l.__data_;
                v121[2] = v295.__r_.__value_.__r.__words[2];
                *(_OWORD *)long long v121 = v122;
                goto LABEL_431;
              case 3:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 4:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 5:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                if (*(void *)&v296 != *(void *)&v16) {
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(*(void *)&v296 + 8), *(uint64_t **)(*(void *)&v16 + 8), *(uint64_t **)(*(void *)&v16 + 16), (uint64_t)(*(void *)(*(void *)&v16 + 16) - *(void *)(*(void *)&v16 + 8)) >> 5);
                }
                goto LABEL_431;
              case 8:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 9:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              default:
                goto LABEL_598;
            }
          case 6:
            switch(v298)
            {
              case 0:
                *(void *)&double v9 = (uint64_t)(*(void *)v8 << 8) >> 8;
                goto LABEL_28;
              case 1:
                double v74 = (double)*(int *)(v8 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v8 << 8) >> 8);
LABEL_156:
                double v296 = v74;
                goto LABEL_431;
              case 2:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                uint64_t v76 = *(atomic_ullong **)&v296;
                int v241 = *(_DWORD *)(v8 + 8);
                v295.__r_.__value_.__r.__words[0] = *(void *)v8;
                LODWORD(v295.__r_.__value_.__r.__words[1]) = v241;
                turi::flexible_type_impl::date_time_to_string((turi::flexible_type_impl *)&v295, (std::string *)v283);
                goto LABEL_427;
              case 3:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 4:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 5:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 6:
                int v75 = *(_DWORD *)(v8 + 8);
                double v296 = *(double *)v8;
                int v297 = v75;
                goto LABEL_431;
              case 8:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 9:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              default:
                goto LABEL_598;
            }
          case 7:
            switch(v298)
            {
              case 1:
                double v9 = NAN;
LABEL_28:
                double v296 = v9;
                goto LABEL_431;
              case 2:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                uint64_t v152 = (atomic_ullong *)(*(void *)&v296 + 8);
                if (*(char *)(*(void *)&v296 + 31) < 0) {
                  operator delete((void *)*v152);
                }
                *uint64_t v152 = 0;
                v152[1] = 0;
                v152[2] = 0;
                goto LABEL_431;
              case 3:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 4:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 5:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 7:
                goto LABEL_431;
              case 8:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 9:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              default:
                goto LABEL_598;
            }
          case 8:
            double v17 = *(double *)v8;
            unint64_t v18 = (uint64_t *)(*(void *)v8 + 8);
            switch(v298)
            {
              case 2:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                long long v151 = *(atomic_ullong **)&v296;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v283);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)"Height: ", 8);
                std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v283[16], (uint64_t)" Width: ", 8);
                std::ostream::operator<<();
                std::stringbuf::str();
LABEL_414:
                *(void *)unint64_t v283 = v274;
                *(void *)&v283[*(void *)(v274 - 24)] = v273;
                *(void *)&v283[16] = v272;
                goto LABEL_421;
              case 3:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                float v19 = *(atomic_ullong **)&v296;
                memset(&v295, 0, sizeof(v295));
                if (*(void *)(*(void *)&v17 + 64) == 2)
                {
                  if (*(void *)(*(void *)&v17 + 48))
                  {
                    uint64_t v20 = 0;
                    unint64_t v21 = 0;
                    do
                    {
                      LOBYTE(v5) = *(unsigned char *)(*v18 + v21);
                      double v22 = (double)(unint64_t)v5;
                      if ((unint64_t)v20 >= v295.__r_.__value_.__r.__words[2])
                      {
                        uint64_t v24 = (double *)v295.__r_.__value_.__r.__words[0];
                        uint64_t v25 = (uint64_t)((uint64_t)v20 - v295.__r_.__value_.__r.__words[0]) >> 3;
                        unint64_t v26 = v25 + 1;
                        if ((unint64_t)(v25 + 1) >> 61) {
                          std::vector<float>::__throw_length_error[abi:ne180100]();
                        }
                        int64_t v27 = v295.__r_.__value_.__r.__words[2] - v295.__r_.__value_.__r.__words[0];
                        if ((uint64_t)(v295.__r_.__value_.__r.__words[2] - v295.__r_.__value_.__r.__words[0]) >> 2 > v26) {
                          unint64_t v26 = v27 >> 2;
                        }
                        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v4 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v4 = v26;
                        }
                        if (v4)
                        {
                          uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v295.__r_.__value_.__r.__words[2], v4);
                          uint64_t v20 = (double *)v295.__r_.__value_.__l.__size_;
                          uint64_t v24 = (double *)v295.__r_.__value_.__r.__words[0];
                        }
                        else
                        {
                          uint64_t v28 = 0;
                        }
                        uint64_t v29 = (double *)&v28[8 * v25];
                        *uint64_t v29 = v22;
                        std::string::size_type v23 = (std::string::size_type)(v29 + 1);
                        while (v20 != v24)
                        {
                          unint64_t v30 = (atomic_ullong *)*((void *)v20-- - 1);
                          uint64_t v5 = v30;
                          *((void *)v29-- - 1) = v30;
                        }
                        v295.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
                        v295.__r_.__value_.__l.__size_ = v23;
                        v295.__r_.__value_.__r.__words[2] = (std::string::size_type)&v28[8 * v4];
                        if (v24) {
                          operator delete(v24);
                        }
                      }
                      else
                      {
                        double *v20 = v22;
                        std::string::size_type v23 = (std::string::size_type)(v20 + 1);
                      }
                      v295.__r_.__value_.__l.__size_ = v23;
                      ++v21;
                      uint64_t v20 = (double *)v23;
                    }
                    while (v21 < *(void *)(*(void *)&v17 + 48));
                  }
                }
                else
                {
                  uint64_t v80 = *(void *)(*(void *)&v17 + 16);
                  *(void *)unint64_t v283 = *(void *)(*(void *)&v17 + 8);
                  *(void *)&v283[8] = v80;
                  if (v80) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v80 + 8), 1u, memory_order_relaxed);
                  }
                  long long v81 = *(_OWORD *)(*(void *)&v17 + 24);
                  long long v82 = *(_OWORD *)(*(void *)&v17 + 56);
                  *(_OWORD *)v284 = *(_OWORD *)(*(void *)&v17 + 40);
                  *(_OWORD *)&v284[16] = v82;
                  *(_OWORD *)&v283[16] = v81;
                  turi::decode_image_inplace((turi *)v283, (turi::image_type *)v4);
                  if (*(void *)&v284[24] != 2) {
                    turi::flexible_type_impl::get_vec_visitor::operator()(turi::image_type const&)const::$_0::operator()();
                  }
                  if (*(void *)&v284[8])
                  {
                    unint64_t v84 = 0;
                    unint64_t v85 = (double *)v295.__r_.__value_.__l.__size_;
                    do
                    {
                      LOBYTE(v83) = *(unsigned char *)(*(void *)v283 + v84);
                      double v86 = (double)v83;
                      if ((unint64_t)v85 >= v295.__r_.__value_.__r.__words[2])
                      {
                        uint64_t v88 = (double *)v295.__r_.__value_.__r.__words[0];
                        uint64_t v89 = (uint64_t)((uint64_t)v85 - v295.__r_.__value_.__r.__words[0]) >> 3;
                        unint64_t v90 = v89 + 1;
                        if ((unint64_t)(v89 + 1) >> 61) {
                          std::vector<float>::__throw_length_error[abi:ne180100]();
                        }
                        int64_t v91 = v295.__r_.__value_.__r.__words[2] - v295.__r_.__value_.__r.__words[0];
                        if ((uint64_t)(v295.__r_.__value_.__r.__words[2] - v295.__r_.__value_.__r.__words[0]) >> 2 > v90) {
                          unint64_t v90 = v91 >> 2;
                        }
                        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v92 = v90;
                        }
                        if (v92)
                        {
                          long long v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v295.__r_.__value_.__r.__words[2], v92);
                          unint64_t v85 = (double *)v295.__r_.__value_.__l.__size_;
                          uint64_t v88 = (double *)v295.__r_.__value_.__r.__words[0];
                        }
                        else
                        {
                          long long v93 = 0;
                        }
                        uint64_t v94 = (double *)&v93[8 * v89];
                        *uint64_t v94 = v86;
                        std::string::size_type v87 = (std::string::size_type)(v94 + 1);
                        while (v85 != v88)
                        {
                          unint64_t v95 = *((void *)v85-- - 1);
                          unint64_t v83 = v95;
                          *((void *)v94-- - 1) = v95;
                        }
                        v295.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
                        v295.__r_.__value_.__l.__size_ = v87;
                        v295.__r_.__value_.__r.__words[2] = (std::string::size_type)&v93[8 * v92];
                        if (v88) {
                          operator delete(v88);
                        }
                      }
                      else
                      {
                        double *v85 = v86;
                        std::string::size_type v87 = (std::string::size_type)(v85 + 1);
                      }
                      v295.__r_.__value_.__l.__size_ = v87;
                      ++v84;
                      unint64_t v85 = (double *)v87;
                    }
                    while (v84 < *(void *)&v284[8]);
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)&v283[8]);
                }
                long long v96 = (void *)v19[1];
                if (v96)
                {
                  void v19[2] = (atomic_ullong)v96;
                  operator delete(v96);
                  v19[1] = 0;
                  void v19[2] = 0;
                  void v19[3] = 0;
                }
                *(std::string *)(v19 + 1) = v295;
                uint64_t v3 = v271;
                goto LABEL_431;
              case 4:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 5:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 8:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 9:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                unint64_t v31 = *(atomic_ullong **)&v296;
                turi::flexible_type_impl::get_vec_visitor::operator()(v18, (double **)&v295, (unint64_t)v5);
                uint64_t v32 = (char *)operator new(0x30uLL);
                *((void *)v32 + 1) = 0;
                *((void *)v32 + 2) = 0;
                *(void *)uint64_t v32 = &unk_26D754C90;
                *(_OWORD *)(v32 + 24) = *(_OWORD *)&v295.__r_.__value_.__l.__data_;
                atomic_ullong *volatile v280 = v32 + 24;
                v281 = (std::__shared_weak_count *)v32;
                *((void *)v32 + 5) = *((void *)&v295.__r_.__value_.__l + 2);
                memset(&v295, 0, sizeof(v295));
                uint64_t v33 = *(void *)(*(void *)&v17 + 40);
                if (v33 == 1)
                {
                  uint64_t v34 = *(void *)(*(void *)&v17 + 24);
                  uint64_t v35 = *(void *)(*(void *)&v17 + 32);
                  int v36 = (uint64_t *)operator new(0x10uLL);
                  *int v36 = v34;
                  v36[1] = v35;
                  unint64_t v293 = v36 + 2;
                  v294 = v36 + 2;
                }
                else
                {
                  uint64_t v97 = *(void *)(*(void *)&v17 + 24);
                  uint64_t v98 = *(void *)(*(void *)&v17 + 32);
                  int v36 = (uint64_t *)operator new(0x18uLL);
                  *int v36 = v97;
                  v36[1] = v98;
                  v36[2] = v33;
                  unint64_t v293 = v36 + 3;
                  v294 = v36 + 3;
                }
                v289 = 0;
                v290 = 0;
                uint64_t v291 = 0;
                uint64_t v292 = v36;
                turi::flexible_type_impl::ndarray<double>::ndarray(v283, &v280, (uint64_t)&v292, (uint64_t)&v289, 0);
                uint64_t v3 = v271;
                if (v289)
                {
                  v290 = (std::__shared_weak_count *)v289;
                  operator delete(v289);
                }
                if (v292)
                {
                  unint64_t v293 = v292;
                  operator delete(v292);
                }
                if (v281) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v281);
                }
                if (v295.__r_.__value_.__r.__words[0])
                {
                  v295.__r_.__value_.__l.__size_ = v295.__r_.__value_.__r.__words[0];
                  operator delete(v295.__r_.__value_.__l.__data_);
                }
                long long v99 = *(_OWORD *)v283;
                *(_OWORD *)unint64_t v283 = 0uLL;
                long long v100 = (std::__shared_weak_count *)v31[2];
                *(_OWORD *)(v31 + 1) = v99;
                if (v100) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v100);
                }
                long long v101 = (void *)v31[3];
                if (v101)
                {
                  void v31[4] = (atomic_ullong)v101;
                  operator delete(v101);
                  void v31[3] = 0;
                  void v31[4] = 0;
                  v31[5] = 0;
                }
                unint64_t v71 = (void *)v31[6];
                *(_OWORD *)(v31 + 3) = *(_OWORD *)&v283[16];
                v31[5] = *(void *)v284;
                *(_OWORD *)&v283[16] = 0uLL;
                *(void *)v284 = 0;
                if (v71)
                {
                  v31[7] = (atomic_ullong)v71;
                  operator delete(v71);
                  v31[6] = 0;
                  v31[7] = 0;
                  v31[8] = 0;
                  unint64_t v71 = *(void **)&v283[16];
                }
                *((_OWORD *)v31 + 3) = *(_OWORD *)&v284[8];
                v31[8] = *(void *)&v284[24];
                memset(&v284[8], 0, 24);
                v31[9] = v285;
                if (v71) {
                  goto LABEL_206;
                }
                goto LABEL_207;
              default:
                goto LABEL_598;
            }
          case 9:
            double v11 = *(double *)v8;
            unint64_t v12 = (char ***)(*(void *)v8 + 8);
            switch(v298)
            {
              case 2:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                long long v151 = *(atomic_ullong **)&v296;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v283);
                turi::flexible_type_impl::ndarray<double>::print(v12, &v283[16]);
                std::stringbuf::str();
LABEL_420:
                *(void *)unint64_t v283 = v274;
                *(void *)&v283[*(void *)(v274 - 24)] = v273;
                *(void *)&v283[16] = v272;
LABEL_421:
                *(void *)&v283[24] = MEMORY[0x263F8C318] + 16;
                if (v287 < 0) {
                  operator delete(v286);
                }
                uint64_t v238 = v151 + 1;
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x22A614E30](v288);
                if (*((char *)v151 + 31) < 0) {
                  operator delete((void *)*v238);
                }
                long long v239 = *(_OWORD *)&v295.__r_.__value_.__l.__data_;
                atomic_ullong v240 = v295.__r_.__value_.__r.__words[2];
                goto LABEL_430;
              case 3:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                uint64_t v62 = (char *)(*(void *)&v296 + 8);
                if (*(void *)(*(void *)&v11 + 72)) {
                  goto LABEL_343;
                }
                uint64_t v64 = *(uint64_t **)(*(void *)&v11 + 24);
                uint64_t v63 = *(uint64_t **)(*(void *)&v11 + 32);
                uint64_t v65 = *(void **)(*(void *)&v11 + 8);
                if (v63 == v64 || v65 == 0)
                {
                  uint64_t v177 = 0;
                }
                else
                {
                  uint64_t v177 = 1;
                  do
                  {
                    uint64_t v178 = *v64++;
                    v177 *= v178;
                  }
                  while (v64 != v63);
                }
                if (v177 != (uint64_t)(v65[1] - *v65) >> 3
                  || turi::flexible_type_impl::ndarray<double>::last_index(v12) != ((*v12)[1] - **v12) >> 3)
                {
LABEL_343:
                  if (!turi::flexible_type_impl::ndarray<double>::is_valid(v12)) {
                    turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
                  }
                  if (turi::flexible_type_impl::ndarray<double>::is_full(v12))
                  {
                    turi::flexible_type_impl::ndarray<double>::ndarray(v283, (uint64_t)v12);
LABEL_400:
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v283);
                    if (!turi::flexible_type_impl::ndarray<double>::is_full(v283)) {
                      turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
                    }
                    if (v62 != *(char **)v283) {
                      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v62, **(char ***)v283, *(void *)(*(void *)v283 + 8), (uint64_t)(*(void *)(*(void *)v283 + 8) - **(void **)v283) >> 3);
                    }
                    if (*(void *)&v284[8])
                    {
                      *(void *)&v284[16] = *(void *)&v284[8];
                      operator delete(*(void **)&v284[8]);
                    }
                    unint64_t v71 = *(void **)&v283[16];
                    if (*(void *)&v283[16])
                    {
LABEL_206:
                      *(void *)&v283[24] = v71;
                      operator delete(v71);
                    }
LABEL_207:
                    if (*(void *)&v283[8]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v283[8]);
                    }
                    goto LABEL_431;
                  }
                  memset(&v295, 0, sizeof(v295));
                  unint64_t v293 = 0;
                  v294 = 0;
                  v289 = 0;
                  v290 = 0;
                  uint64_t v291 = 0;
                  uint64_t v292 = 0;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v283, (uint64_t)&v295, (uint64_t)&v292, (uint64_t)&v289, 0);
                  if (v289)
                  {
                    v290 = (std::__shared_weak_count *)v289;
                    operator delete(v289);
                  }
                  if (v292)
                  {
                    unint64_t v293 = v292;
                    operator delete(v292);
                  }
                  if (v295.__r_.__value_.__r.__words[0])
                  {
                    v295.__r_.__value_.__l.__size_ = v295.__r_.__value_.__r.__words[0];
                    operator delete(v295.__r_.__value_.__l.__data_);
                  }
                  atomic_ullong v285 = 0;
                  if (&v283[16] != (unsigned char *)(*(void *)&v11 + 24)) {
                    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v283[16], *(char **)(*(void *)&v11 + 24), *(void *)(*(void *)&v11 + 32), (uint64_t)(*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) >> 3);
                  }
                  v180 = *(uint64_t **)(*(void *)&v11 + 24);
                  long long v179 = *(uint64_t **)(*(void *)&v11 + 32);
                  if (v179 == v180 || !*v12)
                  {
                    unint64_t v181 = 0;
                  }
                  else
                  {
                    unint64_t v181 = 1;
                    do
                    {
                      uint64_t v182 = *v180++;
                      v181 *= v182;
                    }
                    while (v180 != v179);
                  }
                  std::vector<double>::resize(*(uint64_t *)v283, v181);
                  std::vector<unsigned long>::resize((uint64_t)&v284[8], (uint64_t)(*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) >> 3);
                  if (*(void *)&v283[24] == *(void *)&v283[16]
                    || *(void *)(*(void *)v283 + 8) == **(void **)v283)
                  {
                    goto LABEL_400;
                  }
                  std::vector<std::pair<unsigned long,unsigned long>>::vector(&v295, (uint64_t)(*(void *)(*(void *)&v11 + 56) - *(void *)(*(void *)&v11 + 48)) >> 3);
                  uint64_t v183 = *(void *)(*(void *)&v11 + 48);
                  uint64_t v184 = *(void *)(*(void *)&v11 + 56);
                  long long v185 = (unint64_t *)v295.__r_.__value_.__r.__words[0];
                  uint64_t v186 = v184 - v183;
                  if (v184 != v183)
                  {
                    uint64_t v187 = 0;
                    unint64_t v188 = v186 >> 3;
                    if (v188 <= 1) {
                      unint64_t v188 = 1;
                    }
                    long long v189 = (void *)(v295.__r_.__value_.__r.__words[0] + 8);
                    do
                    {
                      *(v189 - 1) = *(void *)(v183 + 8 * v187);
                      void *v189 = v187++;
                      v189 += 2;
                    }
                    while (v188 != v187);
                  }
                  unint64_t v190 = 126 - 2 * __clz((uint64_t)(v295.__r_.__value_.__l.__size_ - (void)v185) >> 4);
                  if ((unint64_t *)v295.__r_.__value_.__l.__size_ == v185) {
                    uint64_t v191 = 0;
                  }
                  else {
                    uint64_t v191 = v190;
                  }
                  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,false>(v295.__r_.__value_.__l.__size_, (unint64_t *)v295.__r_.__value_.__l.__size_, (uint64_t)v185, v185, (uint64_t)&v289, v191, 1);
                  std::string::size_type v192 = v295.__r_.__value_.__r.__words[0];
                  uint64_t v193 = *(void *)&v284[8];
                  *(void *)(*(void *)&v284[8] + 8 * *(void *)(v295.__r_.__value_.__r.__words[0] + 8)) = 1;
                  uint64_t v194 = *(void *)(*(void *)&v11 + 56) - *(void *)(*(void *)&v11 + 48);
                  if ((unint64_t)v194 >= 9)
                  {
                    unint64_t v195 = v194 >> 3;
                    uint64_t v196 = *(void *)&v283[16];
                    if (v195 <= 2) {
                      unint64_t v195 = 2;
                    }
                    long long v197 = (uint64_t *)(v192 + 24);
                    unint64_t v198 = v195 - 1;
                    do
                    {
                      uint64_t v199 = *(void *)(v196 + 8 * *(v197 - 2)) * *(void *)(v193 + 8 * *(v197 - 2));
                      uint64_t v200 = *v197;
                      v197 += 2;
                      *(void *)(v193 + 8 * v20CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = v199;
                      --v198;
                    }
                    while (v198);
                  }
                  unint64_t v201 = (uint64_t)(*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) >> 3;
                  v289 = 0;
                  std::vector<unsigned long>::vector(&v292, v201, &v289);
                  uint64_t v202 = v292;
                  long long v203 = v293;
                  uint64_t v204 = (char *)v293 - (char *)v292;
                  unint64_t v205 = v293 - v292;
                  unint64_t v206 = v205 - 1;
                  if (v205 <= 1) {
                    uint64_t v207 = 1;
                  }
                  else {
                    uint64_t v207 = v293 - v292;
                  }
                  unint64_t v208 = *(uint64_t **)&v284[8];
                  uint64_t v209 = **(void **)v283;
                  while (2)
                  {
                    if (v203 == v202)
                    {
                      uint64_t v217 = 0;
                      uint64_t v218 = *(void *)(**(void **)(*(void *)&v11 + 8) + 8
                                                                              * *(void *)(*(void *)&v11 + 72));
                    }
                    else
                    {
                      uint64_t v210 = 0;
                      unsigned int v211 = *(uint64_t **)(*(void *)&v11 + 48);
                      std::string::size_type v212 = v202;
                      uint64_t v213 = v207;
                      do
                      {
                        uint64_t v215 = *v212++;
                        uint64_t v214 = v215;
                        uint64_t v216 = *v211++;
                        v210 += v216 * v214;
                        --v213;
                      }
                      while (v213);
                      uint64_t v217 = 0;
                      uint64_t v218 = *(void *)(**(void **)(*(void *)&v11 + 8)
                                       + 8 * (*(void *)(*(void *)&v11 + 72) + v210));
                      std::string v219 = v202;
                      std::string v220 = v208;
                      uint64_t v221 = v207;
                      do
                      {
                        uint64_t v223 = *v219++;
                        uint64_t v222 = v223;
                        uint64_t v224 = *v220++;
                        v217 += v224 * v222;
                        --v221;
                      }
                      while (v221);
                    }
                    *(void *)(v209 + 8 * v217) = v218;
                    uint64_t v225 = v203 - v202;
                    unint64_t v226 = v205 - 1;
                    if (v204 < 1)
                    {
LABEL_389:
                      if ((v226 & 0x8000000000000000) != 0) {
                        goto LABEL_396;
                      }
                    }
                    else
                    {
                      uint64_t v227 = *(void *)(*(void *)&v11 + 24);
                      unint64_t v228 = v202[v206] + 1;
                      v202[v206] = v228;
                      if (v228 < *(void *)(v227 + 8 * v206))
                      {
                        uint64_t v225 = 1;
                        unint64_t v226 = v205 - 1;
                        goto LABEL_389;
                      }
                      uint64_t v229 = v227 - 16;
                      uint64_t v230 = v203 - v202;
                      uint64_t v231 = (unint64_t *)((char *)v202 + (v204 & 0xFFFFFFFFFFFFFFF8) - 16);
                      do
                      {
                        uint64_t v232 = v230 - 1;
                        v231[1] = 0;
                        if (v230 - 1 <= 0) {
                          goto LABEL_396;
                        }
                        unint64_t v233 = *v231 + 1;
                        *v231-- = v233;
                        unint64_t v234 = *(void *)(v229 + 8 * v230--);
                      }
                      while (v233 >= v234);
                      uint64_t v225 = 1;
                      if (v232 - 1 < 0)
                      {
LABEL_396:
                        if (v202)
                        {
                          unint64_t v293 = v202;
                          operator delete(v202);
                        }
                        if (v295.__r_.__value_.__r.__words[0])
                        {
                          v295.__r_.__value_.__l.__size_ = v295.__r_.__value_.__r.__words[0];
                          operator delete(v295.__r_.__value_.__l.__data_);
                        }
                        goto LABEL_400;
                      }
                    }
                    if (!v225) {
                      goto LABEL_396;
                    }
                    continue;
                  }
                }
                if (!turi::flexible_type_impl::ndarray<double>::is_full(v12)) {
                  turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                }
                std::locale v15 = *v12;
                if (v62 != (char *)*v12)
                {
                  uint64_t v72 = (uint64_t *)(v15 + 1);
                  goto LABEL_140;
                }
                break;
              case 4:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 5:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                goto LABEL_598;
              case 8:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                uint64_t v53 = *(atomic_ullong **)&v296;
                assert_msg(((*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) & 0xFFFFFFFFFFFFFFF7) == 16, "Cannot convert nd array to image");
                uint64_t v54 = *(unint64_t **)(*(void *)&v11 + 24);
                uint64_t v55 = (uint64_t)(*(void *)(*(void *)&v11 + 32) - (void)v54) >> 3;
                if (v55 == 3)
                {
                  unint64_t v56 = *v54;
                  unint64_t v57 = v54[1];
                  unint64_t v123 = v54[2];
                }
                else
                {
                  if (v55 == 2)
                  {
                    unint64_t v56 = *v54;
                    unint64_t v57 = v54[1];
                  }
                  else
                  {
                    unint64_t v56 = 0;
                    unint64_t v57 = 0;
                  }
                  unint64_t v123 = 1;
                }
                BOOL v125 = v123 == 4 || (v123 & 0xFFFFFFFFFFFFFFFDLL) == 1;
                assert_msg(v125, "Channels must be 1, 3 or 4");
                size_t v126 = v56 * v123 * v57;
                if (!v126)
                {
                  turi::image_type::image_type((turi::image_type *)v283, 0, v56, v57, v123, 0, 0, 2);
                  goto LABEL_284;
                }
                LOBYTE(v289) = 0;
                std::vector<unsigned char>::vector(&v295, v126, &v289);
                unint64_t v127 = (uint64_t)(*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) >> 3;
                v289 = 0;
                std::vector<unsigned long>::vector(&v292, v127, &v289);
                uint64_t v128 = 0;
                long long v129 = (char *)v292;
                uint64_t v130 = (char *)v293;
                while (2)
                {
                  uint64_t v131 = v130 - v129;
                  if (v130 == v129)
                  {
                    uint64_t v132 = 0;
                  }
                  else
                  {
                    uint64_t v132 = 0;
                    unint64_t v133 = v131 >> 3;
                    char v134 = *(uint64_t **)(*(void *)&v11 + 48);
                    if (v133 <= 1) {
                      unint64_t v133 = 1;
                    }
                    do
                    {
                      uint64_t v136 = *(void *)v129;
                      v129 += 8;
                      uint64_t v135 = v136;
                      uint64_t v137 = *v134++;
                      v132 += v137 * v135;
                      --v133;
                    }
                    while (v133);
                  }
                  *(unsigned char *)(v295.__r_.__value_.__r.__words[0] + v128) = (int)*(double *)(**(void **)(*(void *)&v11 + 8)
                                                                                        + 8
                                                                                        * (*(void *)(*(void *)&v11 + 72)
                                                                                         + v132));
                  long long v129 = (char *)v292;
                  uint64_t v130 = (char *)v293;
                  uint64_t v138 = v293 - v292;
                  uint64_t v139 = v138 - 1;
                  if ((char *)v293 - (char *)v292 < 1) {
                    goto LABEL_277;
                  }
                  uint64_t v140 = *(void *)(*(void *)&v11 + 24);
                  unint64_t v141 = v292[v139] + 1;
                  v292[v139] = v141;
                  if (v141 < *(void *)(v140 + 8 * v139))
                  {
LABEL_276:
                    uint64_t v138 = 1;
LABEL_277:
                    if (v139 < 0) {
                      goto LABEL_279;
                    }
                    ++v128;
                    if (!v138) {
                      goto LABEL_279;
                    }
                    continue;
                  }
                  break;
                }
                uint64_t v142 = (unint64_t *)&v129[8 * v138 - 16];
                uint64_t v143 = v140 - 16;
                while (1)
                {
                  uint64_t v144 = v138 - 1;
                  v142[1] = 0;
                  if (v138 - 1 <= 0) {
                    break;
                  }
                  unint64_t v145 = *v142 + 1;
                  *v142-- = v145;
                  unint64_t v146 = *(void *)(v143 + 8 * v138--);
                  if (v145 < v146)
                  {
                    uint64_t v139 = v144 - 1;
                    goto LABEL_276;
                  }
                }
LABEL_279:
                turi::image_type::image_type((turi::image_type *)v283, v295.__r_.__value_.__l.__data_, v56, v57, v123, v295.__r_.__value_.__l.__size_ - v295.__r_.__value_.__r.__words[0], 0, 2);
                if (v292)
                {
                  unint64_t v293 = v292;
                  operator delete(v292);
                }
                if (v295.__r_.__value_.__r.__words[0])
                {
                  v295.__r_.__value_.__l.__size_ = v295.__r_.__value_.__r.__words[0];
                  operator delete(v295.__r_.__value_.__l.__data_);
                }
LABEL_284:
                long long v147 = *(_OWORD *)v283;
                *(_OWORD *)unint64_t v283 = 0uLL;
                long long v148 = *(_OWORD *)(v53 + 1);
                *(_OWORD *)(v53 + 1) = v147;
                *(_OWORD *)&v295.__r_.__value_.__l.__data_ = v148;
                boost::detail::shared_count::~shared_count((atomic_uint **)&v295.__r_.__value_.__l.__size_);
                long long v149 = *(_OWORD *)&v283[16];
                long long v150 = *(_OWORD *)v284;
                *(_OWORD *)(v53 + 7) = *(_OWORD *)&v284[16];
                *(_OWORD *)(v53 + 5) = v150;
                *(_OWORD *)(v53 + 3) = v149;
                boost::detail::shared_count::~shared_count((atomic_uint **)&v283[8]);
                goto LABEL_431;
              case 9:
                if (**(void **)&v296 != 1) {
                  operator new();
                }
                uint64_t v58 = *(atomic_ullong **)&v296;
                atomic_ullong v60 = *(void *)(*(void *)&v11 + 8);
                atomic_ullong v59 = *(void *)(*(void *)&v11 + 16);
                if (v59) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v61 = (std::__shared_weak_count *)v58[2];
                v58[1] = v60;
                v58[2] = v59;
                if (v61) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v61);
                }
                if (v58 != *(atomic_ullong **)&v11)
                {
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v58 + 24, *(char **)(*(void *)&v11 + 24), *(void *)(*(void *)&v11 + 32), (uint64_t)(*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) >> 3);
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v58 + 48, *(char **)(*(void *)&v11 + 48), *(void *)(*(void *)&v11 + 56), (uint64_t)(*(void *)(*(void *)&v11 + 56) - *(void *)(*(void *)&v11 + 48)) >> 3);
                }
                v58[9] = *(void *)(*(void *)&v11 + 72);
                goto LABEL_431;
              default:
                goto LABEL_598;
            }
            break;
          default:
            turi::flexible_type_fail(0);
            __break(1u);
            return;
        }
      }
LABEL_431:
      uint64_t v5 = *(atomic_ullong **)&v296;
      *(double *)(*a2 + 8 * v7++) = v296;
      uint64_t v6 = *v3;
    }
    while (v7 < (uint64_t)(v3[1] - *v3) >> 4);
    switch(v298)
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v296, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v259 = *(atomic_ullong **)&v296;
          if (v296 != 0.0)
          {
            if (*(char *)(*(void *)&v296 + 31) < 0) {
              operator delete(*(void **)(*(void *)&v296 + 8));
            }
            uint64_t v260 = v259;
            uint64_t v261 = 0x1012C404EF22A49;
            goto LABEL_510;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v296, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double v268 = *(atomic_ullong **)&v296;
          if (v296 != 0.0)
          {
            v269 = *(void **)(*(void *)&v296 + 8);
            if (v269)
            {
              *(void *)(*(void *)&v296 + 16) = v269;
              operator delete(v269);
            }
            uint64_t v260 = v268;
            uint64_t v261 = 0x1080C409938AC02;
            goto LABEL_510;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v296, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v262 = *(atomic_ullong **)&v296;
          if (v296 != 0.0)
          {
            *(void *)unint64_t v283 = *(void *)&v296 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v283);
            goto LABEL_505;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v296, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v262 = *(atomic_ullong **)&v296;
          if (v296 != 0.0)
          {
            *(void *)unint64_t v283 = *(void *)&v296 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v283);
LABEL_505:
            uint64_t v260 = v262;
            uint64_t v261 = 0x1020C405E66F15BLL;
            goto LABEL_510;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v296, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          v270 = *(atomic_ullong **)&v296;
          if (v296 != 0.0)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v296 + 16));
            uint64_t v260 = v270;
            unsigned int v267 = -235920773;
            goto LABEL_509;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v296, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v263 = *(atomic_ullong **)&v296;
          if (v296 != 0.0)
          {
            uint64_t v264 = *(void **)(*(void *)&v296 + 48);
            if (v264)
            {
              *(void *)(*(void *)&v296 + 56) = v264;
              operator delete(v264);
            }
            long long v265 = (void *)v263[3];
            if (v265)
            {
              v263[4] = (atomic_ullong)v265;
              operator delete(v265);
            }
            long long v266 = (std::__shared_weak_count *)v263[2];
            if (v266) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v266);
            }
            uint64_t v260 = v263;
            unsigned int v267 = 2071181815;
LABEL_509:
            uint64_t v261 = v267 | 0x1030C4000000000;
LABEL_510:
            MEMORY[0x22A614FA0](v260, v261);
          }
        }
        break;
      default:
        return;
    }
  }
}

void sub_223E82B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v34 = *(void **)(v31 + 336);
  if (v34)
  {
    *(void *)(v31 + 344) = v34;
    operator delete(v34);
  }
  *(void *)(v31 + 336) = &a25;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 160));
  switch(*(unsigned char *)(v32 - 124))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v31 + 360), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v35 = *(void *)(v31 + 360);
      if (!v35) {
        goto LABEL_29;
      }
      if (*(char *)(v35 + 31) < 0) {
        operator delete(*(void **)(v35 + 8));
      }
      int v36 = (void *)v35;
      uint64_t v37 = 0x1012C404EF22A49;
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v31 + 360), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v41 = *(void **)(v31 + 360);
      if (!v41) {
        goto LABEL_29;
      }
      unint64_t v42 = (void *)v41[1];
      if (v42)
      {
        v41[2] = v42;
        operator delete(v42);
      }
      int v36 = v41;
      uint64_t v37 = 0x1080C409938AC02;
      goto LABEL_28;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v31 + 360), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      unint64_t v38 = *(void **)(v31 + 360);
      if (!v38) {
        goto LABEL_29;
      }
      *(void *)(v31 + 312) = v38 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 184));
      goto LABEL_23;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v31 + 360), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      unint64_t v38 = *(void **)(v31 + 360);
      if (!v38) {
        goto LABEL_29;
      }
      *(void *)(v31 + 312) = v38 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 184));
LABEL_23:
      int v36 = v38;
      uint64_t v37 = 0x1020C405E66F15BLL;
      goto LABEL_28;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v31 + 360), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v43 = *(void *)(v31 + 360);
      if (!v43) {
        goto LABEL_29;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v43 + 16));
      int v36 = (void *)v43;
      unsigned int v40 = -235920773;
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v31 + 360), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v39 = *(void **)(v31 + 360);
      if (!v39) {
        goto LABEL_29;
      }
      int v36 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v39);
      unsigned int v40 = 2071181815;
LABEL_27:
      uint64_t v37 = v40 | 0x1030C4000000000;
LABEL_28:
      MEMORY[0x22A614FA0](v36, v37);
LABEL_29:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_29;
  }
}

BOOL turi::flexible_type_impl::approx_equality_operator::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if ((char *)v5 - (char *)v4 != (char *)a3[1] - (char *)*a3) {
    return 0;
  }
  std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)v10, v4, v5);
  std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)v9, *a3, a3[1]);
  BOOL v7 = std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::flexible_type>>>(v10, v9);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v9);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v10);
  return v7;
}

void sub_223E832CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

BOOL std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::flexible_type>>>(void *a1, void *a2)
{
  if (a1[3] != a2[3]) {
    return 0;
  }
  unint64_t v4 = (unsigned __int8 *)a1[2];
  do
  {
    BOOL v5 = v4 == 0;
    if (!v4) {
      break;
    }
    uint64_t v6 = v4 + 16;
    BOOL v7 = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__equal_range_multi<turi::flexible_type>(a1, v4 + 16);
    unint64_t v4 = v8;
    double v9 = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__equal_range_multi<turi::flexible_type>(a2, v6);
    if (v7 == v4)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v12 = v7;
      do
      {
        ++v11;
        unint64_t v12 = *(unsigned __int8 **)v12;
      }
      while (v12 != v4);
    }
    if (v9 == v10)
    {
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = v9;
      do
      {
        ++v13;
        uint64_t v14 = *(unsigned __int8 **)v14;
      }
      while (v14 != v10);
    }
  }
  while (v11 == v13
       && (std::__is_permutation[abi:ne180100]<std::_ClassicAlgPolicy,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__equal_to &>(v7, v4, v9) & 1) != 0);
  return v5;
}

uint64_t turi::flexible_type_impl::approx_equality_operator::operator()(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3 - *a2 != a3[1] - *a3) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  unint64_t v7 = 0;
LABEL_4:
  uint64_t v8 = *a3 + 16 * v7;
  double v9 = (unsigned __int8 *)(v4 + 16 * v7);
  switch(*(unsigned char *)(v8 + 12))
  {
    case 0:
      switch(v9[12])
      {
        case 0u:
          if (*(void *)v9 != *(void *)v8) {
            return 0;
          }
          goto LABEL_104;
        case 1u:
          double v10 = *(double *)v9;
          uint64_t v11 = *(void *)v8;
          goto LABEL_73;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (*(void *)v8 != (uint64_t)(*(void *)v9 << 8) >> 8 || *((_DWORD *)v9 + 2)) {
            return 0;
          }
          goto LABEL_104;
        default:
          goto LABEL_111;
      }
    case 1:
      switch(v9[12])
      {
        case 0u:
          double v10 = *(double *)v8;
          uint64_t v11 = *(void *)v9;
LABEL_73:
          double v76 = (double)v11;
          goto LABEL_74;
        case 1u:
          double v10 = *(double *)v9;
          double v76 = *(double *)v8;
LABEL_74:
          if (v10 != v76) {
            return 0;
          }
          goto LABEL_104;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          double v77 = vabdd_f64((double)*((int *)v9 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v9 << 8) >> 8), *(double *)v8);
          goto LABEL_82;
        default:
          goto LABEL_111;
      }
    case 2:
      unsigned int v12 = v9[12];
      if (v12 == 2)
      {
        double v13 = *(double *)v9;
        int v14 = *(char *)(*(void *)v9 + 31);
        size_t v15 = *(unsigned __int8 *)(*(void *)v9 + 31);
        if (v14 < 0) {
          size_t v16 = *(void *)(*(void *)&v13 + 16);
        }
        else {
          size_t v16 = v15;
        }
        double v78 = *(double *)v8;
        if (*(char *)(*(void *)&v78 + 31) < 0) {
          uint64_t v79 = *(void *)(*(void *)&v78 + 16);
        }
        else {
          uint64_t v79 = *(unsigned __int8 *)(*(void *)&v78 + 31);
        }
        if (v16 == v79)
        {
          uint64_t v80 = (unsigned __int8 *)(*(void *)&v13 + 8);
          if ((v15 & 0x80) != 0) {
            uint64_t v80 = *(unsigned __int8 **)v80;
          }
          long long v81 = (unsigned __int8 *)(*(void *)&v78 + 8);
          if ((*(unsigned char *)(*(void *)&v78 + 31) & 0x80) != 0) {
            long long v81 = *(unsigned __int8 **)v81;
          }
          if ((v15 & 0x80) != 0)
          {
            if (!memcmp(v80, v81, v16)) {
              goto LABEL_104;
            }
          }
          else
          {
            if (!v16) {
              goto LABEL_104;
            }
            while (*v80 == *v81)
            {
              ++v80;
              ++v81;
              if (!--v16) {
                goto LABEL_104;
              }
            }
          }
        }
        return 0;
      }
      if (v12 <= 9 && v12 != 2) {
        return 0;
      }
      goto LABEL_111;
    case 3:
      unsigned int v17 = v9[12];
      if (v17 == 3)
      {
        double v18 = *(double *)v8;
        float v19 = *(double **)(*(void *)v9 + 8);
        uint64_t v20 = *(double **)(*(void *)v9 + 16);
        unint64_t v21 = v20 - v19;
        uint64_t v23 = *(void *)&v18 + 8;
        double v22 = *(double **)(*(void *)&v18 + 8);
        if (v21 == (uint64_t)(*(void *)(v23 + 8) - (void)v22) >> 3)
        {
          if (v20 == v19) {
            goto LABEL_104;
          }
          uint64_t v24 = v21 <= 1 ? 1 : v20 - v19;
          if (*v19 == *v22)
          {
            uint64_t v25 = 1;
            do
            {
              unint64_t v26 = v25;
              if (v24 == v25) {
                break;
              }
              double v27 = v19[v25];
              double v28 = v22[v25++];
            }
            while (v27 == v28);
            if (v26 >= v21) {
              goto LABEL_104;
            }
          }
        }
        return 0;
      }
      if (v17 <= 9 && v17 != 3) {
        return 0;
      }
      goto LABEL_111;
    case 4:
      uint64_t v29 = *(void *)v8 + 8;
      int64_t v91 = &v89;
      unint64_t v92 = (uint64_t *)v29;
      unsigned int v30 = v9[12];
      if (v30 == 4)
      {
        if (turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::approx_equality_operator,std::vector<turi::flexible_type>>::operator()<std::vector<turi::flexible_type> const>((uint64_t)&v91, (uint64_t *)(*(void *)v9 + 8)))goto LABEL_104; {
      }
        }
      else if (v30 > 9 || v30 == 4)
      {
LABEL_111:
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      }
      return 0;
    case 5:
      unsigned int v31 = v9[12];
      if (v31 == 5)
      {
        double v32 = *(double *)v8;
        uint64_t v33 = *(uint64_t **)(*(void *)v9 + 8);
        uint64_t v34 = *(uint64_t **)(*(void *)v9 + 16);
        if ((char *)v34 - (char *)v33 == *(void *)(*(void *)&v32 + 16) - *(void *)(*(void *)&v32 + 8))
        {
          std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)&v91, v33, v34);
          std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)v90, *(uint64_t **)(*(void *)&v32 + 8), *(uint64_t **)(*(void *)&v32 + 16));
          char v35 = std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::flexible_type>>>(&v91, v90);
          std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v90);
          std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&v91);
          if (v35) {
            goto LABEL_104;
          }
        }
        return 0;
      }
      if (v31 <= 9 && v31 != 5) {
        return 0;
      }
      goto LABEL_111;
    case 6:
      switch(v9[12])
      {
        case 0u:
          if (*(void *)v9 != (uint64_t)(*(void *)v8 << 8) >> 8 || *(_DWORD *)(v8 + 8)) {
            return 0;
          }
          goto LABEL_104;
        case 1u:
          double v77 = vabdd_f64(*(double *)v9, (double)*(int *)(v8 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v8 << 8) >> 8));
LABEL_82:
          if (v77 >= 0.0000005) {
            return 0;
          }
          goto LABEL_104;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (((*(void *)v8 ^ *(void *)v9) & 0xFFFFFFFFFFFFFFLL) != 0 || *((_DWORD *)v9 + 2) != *(_DWORD *)(v8 + 8)) {
            return 0;
          }
          goto LABEL_104;
        default:
          goto LABEL_111;
      }
    case 7:
      unsigned int v36 = v9[12];
      if (v36 == 7) {
        goto LABEL_104;
      }
      if (v36 <= 9 && v36 != 7) {
        return 0;
      }
      goto LABEL_111;
    case 8:
      unsigned int v37 = v9[12];
      if (v37 == 8)
      {
        if (turi::image_type::operator==(*(void *)v9 + 8, *(void *)v8 + 8)) {
          goto LABEL_104;
        }
        return 0;
      }
      if (v37 <= 9 && v37 != 8) {
        return 0;
      }
      goto LABEL_111;
    case 9:
      unsigned int v38 = v9[12];
      if (v38 == 9)
      {
        double v39 = *(double *)v8;
        unsigned int v40 = *(void **)v9;
        if (*(void *)v8 == *(void *)v9) {
          goto LABEL_104;
        }
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v40 + 1), *(void *)&v39 + 8)) {
          return 0;
        }
        unint64_t v42 = (char *)v40[3];
        uint64_t v41 = (char *)v40[4];
        uint64_t v43 = v41 - v42;
        if (v41 == v42) {
          goto LABEL_104;
        }
        if (!v40[1]) {
          goto LABEL_104;
        }
        uint64_t v44 = 1;
        do
        {
          uint64_t v45 = *(void *)v42;
          v42 += 8;
          v44 *= v45;
        }
        while (v42 != v41);
        if (!v44) {
          goto LABEL_104;
        }
        v90[0] = 0;
        std::vector<unsigned long>::vector(&v91, v43 >> 3, v90);
        uint64_t v46 = (uint64_t *)v91;
        unint64_t v47 = v92;
        uint64_t v48 = **(void **)(*(void *)&v39 + 8);
        uint64_t v49 = (char *)v92 - v91;
        unint64_t v50 = ((char *)v92 - v91) >> 3;
        unint64_t v51 = v50 - 1;
        if (v50 <= 1) {
          uint64_t v52 = 1;
        }
        else {
          uint64_t v52 = ((char *)v92 - v91) >> 3;
        }
        while (1)
        {
          if (v47 == v46)
          {
            uint64_t v60 = 0;
            double v61 = *(double *)(*(void *)v40[1] + 8 * v40[9]);
          }
          else
          {
            uint64_t v53 = 0;
            uint64_t v54 = (uint64_t *)v40[6];
            uint64_t v55 = v46;
            uint64_t v56 = v52;
            do
            {
              uint64_t v58 = *v55++;
              uint64_t v57 = v58;
              uint64_t v59 = *v54++;
              v53 += v59 * v57;
              --v56;
            }
            while (v56);
            uint64_t v60 = 0;
            double v61 = *(double *)(*(void *)v40[1] + 8 * (v40[9] + v53));
            uint64_t v62 = *(uint64_t **)(*(void *)&v39 + 48);
            uint64_t v63 = v46;
            uint64_t v64 = v52;
            do
            {
              uint64_t v66 = *v63++;
              uint64_t v65 = v66;
              uint64_t v67 = *v62++;
              v60 += v67 * v65;
              --v64;
            }
            while (v64);
          }
          double v68 = *(double *)(v48 + 8 * (*(void *)(*(void *)&v39 + 72) + v60));
          if (v61 != v68)
          {
LABEL_68:
            if (v46)
            {
              unint64_t v92 = v46;
              operator delete(v46);
            }
            if (v61 == v68) {
              goto LABEL_104;
            }
            return 0;
          }
          uint64_t v69 = v50;
          uint64_t v70 = v50 - 1;
          if (v49 >= 1)
          {
            uint64_t v71 = v40[3];
            unint64_t v72 = v46[v51] + 1;
            v46[v51] = v72;
            unint64_t v73 = (v49 & 0xFFFFFFFFFFFFFFF8) - 16;
            uint64_t v70 = v50 - 1;
            if (v72 >= *(void *)(v71 + 8 * v51))
            {
              while (1)
              {
                *(uint64_t *)((char *)v46 + v73 + 8) = 0;
                if (v70 <= 0) {
                  break;
                }
                --v70;
                unint64_t v74 = *(uint64_t *)((char *)v46 + v73) + 1;
                *(uint64_t *)((char *)v46 + v73) = v74;
                unint64_t v75 = *(void *)(v71 + v73);
                v73 -= 8;
                if (v74 < v75)
                {
                  uint64_t v69 = 1;
                  goto LABEL_66;
                }
              }
              unint64_t v92 = v46;
              operator delete(v46);
LABEL_104:
              ++v7;
              uint64_t v4 = *a2;
              if (v7 >= (a2[1] - *a2) >> 4) {
                return 1;
              }
              goto LABEL_4;
            }
            uint64_t v69 = 1;
            uint64_t v70 = v50 - 1;
          }
LABEL_66:
          if (v70 < 0 || !v69) {
            goto LABEL_68;
          }
        }
      }
      if (v38 >= 9) {
        goto LABEL_111;
      }
      return 0;
    default:
      goto LABEL_111;
  }
}

void sub_223E83A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t turi::flexible_type_impl::city_hash_visitor::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a2[1] == *a2)
  {
    unint64_t v9 = 0x9E20B5CD46D71AB3;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(v2 + v4);
      uint64_t v8 = 5
         * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v6) | ((0x87C37B91114253D5 * v6) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
      uint64_t v6 = (5
          * (__ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v7) | ((unint64_t)(0x4CF5AD432745937FLL * v7) >> 33))) ^ 0x73A3916AE45D01E5, 31)+ v8)+ 944331445) ^ v8;
      ++v5;
      uint64_t v2 = *a2;
      v4 += 16;
    }
    while (v5 < (a2[1] - *a2) >> 4);
    unint64_t v9 = 0xC6A4A7935BD1E995 * (v6 ^ 0xC3A5C85C97CB3127);
  }
  return 0xC6A4A7935BD1E995 * (v9 ^ (v9 >> 47));
}

uint64_t turi::flexible_type_impl::city_hash_visitor::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3)
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    do
    {
      v4 |= turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(v2);
      v5 |= turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(v2);
      v2 += 32;
    }
    while (v2 != v3);
  }
  uint64_t v6 = 5
     * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v4) | ((0x87C37B91114253D5 * v4) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
  return (5
        * (v6
         + __ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v5) | ((unint64_t)(0x4CF5AD432745937FLL * v5) >> 33))) ^ 0x73A3916AE45D01E5, 31))+ 944331445) ^ v6;
}

void turi::flexible_type_impl::city_hash128_visitor::operator()(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (a1[1] == *a1)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash128_visitor>((uint64_t *)(v2 + v4), &v12);
      uint64_t v8 = 5
         * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v6) | ((0x87C37B91114253D5 * v6) >> 31))) ^ 0x5B73FF027F14F66ALL, 27)- 0x36BC04F331BA48C5;
      uint64_t v9 = 5
         * (v8
          + __ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v7) | ((unint64_t)(0x4CF5AD432745937FLL * v7) >> 33))) ^ 0x5B73FF027F14F66ALL, 31))+ 944331445;
      uint64_t v7 = 5
         * (__ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v13) | ((0x87C37B91114253D5 * v13) >> 31))) ^ v8, 27)+ v9)+ 1390208809;
      uint64_t v6 = 5 * (v7 + __ROR8__((0xCF853D45B173E5ABLL * v12) ^ v9, 31)) + 944331445;
      ++v5;
      uint64_t v2 = *a1;
      v4 += 16;
    }
    while (v5 < (a1[1] - *a1) >> 4);
  }
  uint64_t v10 = 5
      * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v6) | ((0x87C37B91114253D5 * v6) >> 31))) ^ 0x8F84E92C0587B7E3, 27)- 0x32677223917C8168;
  *a2 = v10;
  a2[1] = 5
        * (v10
         + __ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v7) | ((unint64_t)(0x4CF5AD432745937FLL * v7) >> 33))) ^ 0x8F84E92C0587B7E3, 31))+ 944331445;
}

void *turi::flexible_type_impl::city_hash128_visitor::operator()@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
    unint64_t v10 = 0;
    uint64_t v8 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash128_visitor>(&v14, v3);
      v6 |= v15;
      v5 |= v14;
      uint64_t result = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash128_visitor>(&v14, v3);
      v8 |= v15;
      v7 |= v14;
      v3 += 32;
    }
    while (v3 != v4);
    unint64_t v10 = 0xCF853D45B173E5ABLL * v7;
  }
  uint64_t v11 = 5
      * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v6) | ((0x87C37B91114253D5 * v6) >> 31))) ^ 0x5B73FF027F14F66ALL, 27)- 0x36BC04F331BA48C5;
  uint64_t v12 = 5
      * (v11
       + __ROR8__((0x87C37B91114253D5 * ((0x93A2C9BF80000000 * v5) | ((unint64_t)(0x4CF5AD432745937FLL * v5) >> 33))) ^ 0x5B73FF027F14F66ALL, 31))+ 944331445;
  uint64_t v13 = 5
      * (v12
       + __ROR8__(v11 ^ (0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v8) | ((0x87C37B91114253D5 * v8) >> 31))), 27))+ 1390208809;
  *a2 = v13;
  a2[1] = 5 * (v13 + __ROR8__(v12 ^ v10, 31)) + 944331445;
  return result;
}

uint64_t turi::flexible_type_fail(uint64_t this)
{
  if ((this & 1) == 0) {
    turi::flexible_type_fail(BOOL)::$_0::operator()();
  }
  return this;
}

uint64_t turi::flexible_type::contains_na(turi::flexible_type *this)
{
  uint64_t v1 = 1;
  switch(*((unsigned char *)this + 12))
  {
    case 1:
      return 0;
    case 3:
      uint64_t v3 = *(void *)(*(void *)this + 8);
      uint64_t v2 = *(void *)(*(void *)this + 16);
      if (v3 == v2) {
        return 0;
      }
      uint64_t v4 = v3 + 8;
      do
      {
        uint64_t v1 = 0;
        BOOL v5 = v4 == v2;
        v4 += 8;
      }
      while (!v5);
      return v1;
    case 4:
      uint64_t v6 = *(turi::flexible_type **)(*(void *)this + 8);
      uint64_t v7 = *(turi::flexible_type **)(*(void *)this + 16);
      if (v6 == v7) {
        return 0;
      }
      do
      {
        uint64_t v1 = turi::flexible_type::contains_na(v6);
        if (v1) {
          break;
        }
        uint64_t v6 = (turi::flexible_type *)((char *)v6 + 16);
      }
      while (v6 != v7);
      return v1;
    case 5:
      uint64_t v8 = *(turi::flexible_type **)(*(void *)this + 8);
      uint64_t v9 = *(turi::flexible_type **)(*(void *)this + 16);
      if (v8 == v9) {
        return 0;
      }
      while ((turi::flexible_type::contains_na(v8) & 1) == 0)
      {
        unint64_t v10 = (turi::flexible_type *)((char *)v8 + 16);
        if (turi::flexible_type::contains_na(v10)) {
          break;
        }
        uint64_t v1 = 0;
        uint64_t v8 = (turi::flexible_type *)((char *)v10 + 16);
        if (v8 == v9) {
          return v1;
        }
      }
      return 1;
    case 7:
      return v1;
    case 9:
      uint64_t v11 = *(void *)this;
      unint64_t v12 = (uint64_t)(*(void *)(*(void *)this + 32) - *(void *)(*(void *)this + 24)) >> 3;
      uint64_t v37 = 0;
      std::vector<unsigned long>::vector(&v38, v12, &v37);
      uint64_t v13 = v38;
      uint64_t v14 = v39;
      uint64_t v15 = (char *)v39 - (char *)v38;
      unint64_t v16 = v39 - v38;
      unint64_t v17 = v16 - 1;
      if (v16 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v39 - v38;
      }
      break;
    default:
      return 0;
  }
  while (1)
  {
    if (v14 != v13)
    {
      uint64_t v19 = 0;
      uint64_t v20 = *(uint64_t **)(v11 + 48);
      unint64_t v21 = v13;
      uint64_t v22 = v18;
      do
      {
        uint64_t v24 = *v21++;
        uint64_t v23 = v24;
        uint64_t v25 = *v20++;
        v19 += v25 * v23;
        --v22;
      }
      while (v22);
    }
    uint64_t v1 = 0;
    uint64_t v26 = v16;
    unint64_t v27 = v16 - 1;
    if (v15 < 1) {
      goto LABEL_27;
    }
    uint64_t v28 = *(void *)(v11 + 24);
    unint64_t v29 = v13[v17] + 1;
    v13[v17] = v29;
    if (v29 >= *(void *)(v28 + 8 * v17)) {
      break;
    }
    uint64_t v26 = 1;
    unint64_t v27 = v16 - 1;
LABEL_27:
    if ((v27 & 0x8000000000000000) != 0) {
      goto LABEL_34;
    }
LABEL_28:
    if (!v26) {
      goto LABEL_34;
    }
  }
  uint64_t v30 = v28 - 16;
  unint64_t v31 = v16;
  double v32 = (unint64_t *)((char *)v13 + (v15 & 0xFFFFFFFFFFFFFFF8) - 16);
  do
  {
    unint64_t v33 = v31 - 1;
    v32[1] = 0;
    if ((uint64_t)(v31 - 1) <= 0)
    {
      uint64_t v1 = 0;
      goto LABEL_37;
    }
    unint64_t v34 = *v32 + 1;
    *v32-- = v34;
    unint64_t v35 = *(void *)(v30 + 8 * v31--);
  }
  while (v34 >= v35);
  uint64_t v26 = 1;
  if (((v33 - 1) & 0x8000000000000000) == 0) {
    goto LABEL_28;
  }
LABEL_34:
  if (v13)
  {
LABEL_37:
    double v39 = v13;
    operator delete(v13);
  }
  return v1;
}

_WORD *boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(_WORD *result, unsigned int a2)
{
  if (a2 <= 0x577 || a2 >> 4 >= 0x271) {
    boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>::on_error();
  }
  void *result = a2;
  return result;
}

void boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>::on_error()
{
  boost::gregorian::bad_year::bad_year(&v0);
  boost::throw_exception<boost::gregorian::bad_year>(&v0);
}

void sub_223E84448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
}

void boost::throw_exception<boost::gregorian::bad_year>(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_26D756BD0;
  uint64_t v4 = &unk_26D756BF8;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_223E84520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::logic_error::~logic_error(&a10);
  if (v13) {
    __cxa_free_exception(v11);
  }
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_26D7542E8;
  uint64_t v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_26D756C18;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = &unk_26D756B30;
  *(void *)(a1 + 16) = &unk_26D756B68;
  *(void *)(a1 + 56) = &unk_26D756BA0;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_26D756C18;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26D754388;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D756B30;
  *(void *)(a1 + 16) = &unk_26D756B68;
  *(void *)(a1 + 56) = &unk_26D756BA0;
  return a1;
}

void sub_223E84770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::clone()
{
}

void sub_223E8487C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::clone_impl((uint64_t)exception, a1);
}

void sub_223E848E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::logic_error *)(a1 - 2);
  *a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::logic_error::~logic_error(v1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 2) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::logic_error::~logic_error((std::logic_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl((uint64_t)a1 + *(void *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::gregorian::bad_year>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<boost::gregorian::bad_year>::~error_info_injector(uint64_t a1)
{
}

void boost::gregorian::bad_year::~bad_year(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x22A614FA0);
}

void sub_223E84BEC(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::gregorian::bad_year::bad_year(std::logic_error *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v3, "Year is out of valid range: 1400..9999");
  std::logic_error::logic_error(this, &v3);
  this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  this->__vftable = (std::logic_error_vtbl *)&unk_26D756C18;
  return this;
}

void sub_223E84C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_WORD *boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(_WORD *result, unsigned int a2)
{
  if (!a2 || a2 >= 0xD) {
    boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>::on_error();
  }
  void *result = a2;
  return result;
}

void boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>::on_error()
{
  boost::gregorian::bad_month::bad_month(&v0);
  boost::throw_exception<boost::gregorian::bad_month>(&v0);
}

void sub_223E84D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
}

void boost::throw_exception<boost::gregorian::bad_month>(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_26D756D70;
  uint64_t v4 = &unk_26D756D98;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_223E84DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::logic_error::~logic_error(&a10);
  if (v13) {
    __cxa_free_exception(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_26D7542E8;
  uint64_t v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_26D756DB8;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = &unk_26D756CD0;
  *(void *)(a1 + 16) = &unk_26D756D08;
  *(void *)(a1 + 56) = &unk_26D756D40;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_26D756DB8;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26D754388;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D756CD0;
  *(void *)(a1 + 16) = &unk_26D756D08;
  *(void *)(a1 + 56) = &unk_26D756D40;
  return a1;
}

void sub_223E84FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::clone()
{
}

void sub_223E85064(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::clone_impl((uint64_t)exception, a1);
}

void sub_223E850D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_month>>::rethrow(void *a1)
{
}

void sub_223E8523C(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::gregorian::bad_month::bad_month(std::logic_error *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v3, "Month number is out of range 1..12");
  std::logic_error::logic_error(this, &v3);
  this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  this->__vftable = (std::logic_error_vtbl *)&unk_26D756DB8;
  return this;
}

void sub_223E852E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_WORD *boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(_WORD *result, unsigned int a2)
{
  if (!a2 || a2 >= 0x20) {
    boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>::on_error();
  }
  void *result = a2;
  return result;
}

void boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>::on_error()
{
  boost::gregorian::bad_day_of_month::bad_day_of_month(&v0);
  boost::throw_exception<boost::gregorian::bad_day_of_month>(&v0);
}

void sub_223E85350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
}

void boost::throw_exception<boost::gregorian::bad_day_of_month>(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_26D756F10;
  uint64_t v4 = &unk_26D756F38;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_223E85428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::logic_error::~logic_error(&a10);
  if (v13) {
    __cxa_free_exception(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_26D7542E8;
  uint64_t v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_26D756F58;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = &unk_26D756E70;
  *(void *)(a1 + 16) = &unk_26D756EA8;
  *(void *)(a1 + 56) = &unk_26D756EE0;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_26D756F58;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26D754388;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D756E70;
  *(void *)(a1 + 16) = &unk_26D756EA8;
  *(void *)(a1 + 56) = &unk_26D756EE0;
  return a1;
}

void sub_223E85618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::clone()
{
}

void sub_223E856B4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::clone_impl((uint64_t)exception, a1);
}

void sub_223E85720(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_month>>::rethrow(void *a1)
{
}

void sub_223E8588C(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::gregorian::bad_day_of_month::bad_day_of_month(std::logic_error *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v3, "Day of month value is out of range 1..31");
  std::logic_error::logic_error(this, &v3);
  this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  this->__vftable = (std::logic_error_vtbl *)&unk_26D756F58;
  return this;
}

void sub_223E85930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *boost::gregorian::date::date(_DWORD *a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  uint64_t result = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::date(a1, a2, a3, a4);
  if (a3 > 0xBu) {
    goto LABEL_14;
  }
  if (((1 << a3) & 0xA50) != 0)
  {
    unsigned __int16 v8 = 30;
    goto LABEL_4;
  }
  if (a3 == 2)
  {
    unsigned __int16 v8 = 28;
    if ((a2 & 3) == 0)
    {
      HIDWORD(v1CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = -1030792151 * a2;
      LODWORD(v1CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = HIDWORD(v10);
      unsigned int v9 = v10 >> 2;
      LODWORD(v1CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = HIDWORD(v10);
      if ((v10 >> 4) < 0xA3D70B || v9 > 0x28F5C28) {
        unsigned __int16 v8 = 29;
      }
      else {
        unsigned __int16 v8 = 28;
      }
    }
  }
  else
  {
LABEL_14:
    unsigned __int16 v8 = 31;
  }
LABEL_4:
  if (v8 < a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v12, "Day of month is not valid for year");
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)&unk_26D756F58;
    boost::throw_exception<boost::gregorian::bad_day_of_month>(&v13);
  }
  return result;
}

void sub_223E85A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::logic_error a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::date(_DWORD *result, __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  int v4 = (14 - a3) / 12;
  _DWORD *result = 365 * (unsigned __int16)(a2 - v4 + 4800)
          + a4
          + ((unsigned __int16)(a2 - v4 + 4800) >> 2)
          - (unsigned __int16)(a2 - v4 + 4800) / 0x64u
          + (unsigned __int16)(a2 - v4 + 4800) / 0x190u
          + ((858993460 * (unint64_t)(153 * (unsigned __int16)(a3 + 12 * v4 - 3) + 2)) >> 32)
          - 32045;
  return result;
}

uint64_t boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000ll,(unsigned short)6,long long>::to_tick_count(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 >= 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = -a1;
  }
  if (a2 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = -a2;
  }
  if (a3 >= 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = -a3;
  }
  if (a4 >= 0) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = -a4;
  }
  if ((a2 | a1 | a3 | a4) < 0) {
    return 1000000 * (-3600 * v4 - 60 * v5 - v6) - v7;
  }
  else {
    return a4 + 1000000 * (3600 * a1 + 60 * a2 + a3);
  }
}

uint64_t *boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(uint64_t *result, unsigned int *a2, uint64_t *a3)
{
  _DWORD *result = 1;
  uint64_t v3 = *a2;
  if ((v3 + 2) >= 3)
  {
    uint64_t v4 = *a3;
    if ((unint64_t)(*a3 - 0x7FFFFFFFFFFFFFFELL) >= 3)
    {
      uint64_t v5 = v4 + 86400000000 * v3;
      goto LABEL_22;
    }
LABEL_6:
    uint64_t v5 = 0x7FFFFFFFFFFFFFFELL;
    if (v3 == -2 || v4 == 0x7FFFFFFFFFFFFFFELL) {
      goto LABEL_22;
    }
    goto LABEL_10;
  }
  uint64_t v4 = *a3;
  if ((unint64_t)(*a3 - 0x7FFFFFFFFFFFFFFELL) <= 2) {
    goto LABEL_6;
  }
  if (v3 == -2) {
    goto LABEL_13;
  }
LABEL_10:
  if (v4 == 0x8000000000000000)
  {
    if (v3 == -1) {
      goto LABEL_13;
    }
    goto LABEL_15;
  }
  uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (!v3)
    {
LABEL_13:
      uint64_t v5 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_22;
    }
LABEL_15:
    uint64_t v5 = v4;
    goto LABEL_22;
  }
  unint64_t v7 = v4 + v3;
  if (!v3) {
    unint64_t v7 = 0x8000000000000000;
  }
  if (v3 != -1) {
    uint64_t v5 = v7;
  }
LABEL_22:
  _DWORD *result = v5;
  return result;
}

unint64_t boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::add_time_duration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) >= 3)
  {
    if ((unint64_t)(v3 - 0x7FFFFFFFFFFFFFFELL) >= 3) {
      return v3 + v2;
    }
    unint64_t result = 0x7FFFFFFFFFFFFFFELL;
    if (v3 == 0x7FFFFFFFFFFFFFFELL) {
      return result;
    }
  }
  else
  {
    unint64_t result = 0x7FFFFFFFFFFFFFFELL;
    if (v2 == 0x7FFFFFFFFFFFFFFELL || v3 == 0x7FFFFFFFFFFFFFFELL) {
      return result;
    }
  }
  if (v2 == 0x8000000000000000)
  {
    unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_15:
    if (v3 != v6) {
      return v2;
    }
    return result;
  }
  if (v2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v6 = 0x8000000000000000;
    goto LABEL_15;
  }
  uint64_t v7 = v3 + v2;
  if (v3 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v7 = *a2;
  }
  if (v3 == 0x8000000000000000) {
    return 0x8000000000000000;
  }
  else {
    return v7;
  }
}

void boost::posix_time::to_iso_string_type<char>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v17 = a1;
  int v3 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&v17);
  boost::date_time::date_formatter<boost::gregorian::date,boost::date_time::iso_format<char>,char>::date_to_string(v3, &v15);
  uint64_t v4 = v17;
  unint64_t v5 = 0x7FFFFFFFFFFFFFFELL;
  if (v17 == 0x8000000000000000) {
    unint64_t v5 = 0x8000000000000000;
  }
  if (v17 != 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v4 = v5;
  }
  if ((unint64_t)(v17 - 0x7FFFFFFFFFFFFFFELL) > 2) {
    uint64_t v4 = v17 % 86400000000;
  }
  if ((unint64_t)(v4 - 0x7FFFFFFFFFFFFFFELL) >= 3)
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v15, 84, (uint64_t)&v14);
    uint64_t v6 = v17;
    unint64_t v7 = 0x7FFFFFFFFFFFFFFELL;
    if (v17 == 0x8000000000000000) {
      unint64_t v7 = 0x8000000000000000;
    }
    if (v17 != 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v6 = v7;
    }
    if ((unint64_t)(v17 - 0x7FFFFFFFFFFFFFFELL) > 2) {
      uint64_t v6 = v17 % 86400000000;
    }
    int64_t v11 = v6;
    boost::posix_time::to_iso_string_type<char>(&v11);
    if ((v13 & 0x80u) == 0) {
      unsigned __int16 v8 = __p;
    }
    else {
      unsigned __int16 v8 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      std::string::size_type v9 = v13;
    }
    else {
      std::string::size_type v9 = (std::string::size_type)__p[1];
    }
    unint64_t v10 = std::string::append(&v14, (const std::string::value_type *)v8, v9);
    *a2 = *v10;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete((void *)v15);
    }
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v15;
    a2->__r_.__value_.__r.__words[2] = v16;
  }
}

void sub_223E85EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v22 - 25) < 0) {
    operator delete(*(void **)(v22 - 48));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    unint64_t v7 = (char *)result;
  }
  else {
    unint64_t v7 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      unsigned __int16 v8 = a1;
    }
    else {
      unsigned __int16 v8 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v7, v8, v5);
  }
  std::string::size_type v9 = &v7[v5];
  char *v9 = a2;
  v9[1] = 0;
  return result;
}

uint64_t boost::posix_time::to_iso_string_type<char>(int64_t *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  int64_t v2 = *a1;
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    int64_t v14 = 0;
    if (boost::date_time::int_adapter<long long>::compare(a1, &v14) == -1)
    {
      LOBYTE(v14) = 45;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v14, 1);
    }
    *(void *)((char *)&v11[3] + *(void *)(v11[0] - 24)) = 2;
    LOBYTE(v14) = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, (char *)&v14);
    std::ostream::operator<<();
    *(void *)((char *)&v11[3] + *(void *)(v11[0] - 24)) = 2;
    LOBYTE(v14) = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, (char *)&v14);
    std::ostream::operator<<();
    *(void *)((char *)&v11[3] + *(void *)(v11[0] - 24)) = 2;
    LOBYTE(v14) = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, (char *)&v14);
    std::ostream::operator<<();
    if (*a1 % 1000000)
    {
      std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
      *(void *)((char *)v9 + *(void *)(*v9 - 24) + 24) = 6;
      LOBYTE(v14) = 48;
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, (char *)&v14);
      std::ostream::operator<<();
    }
  }
  else
  {
    int v3 = "not-a-date-time";
    uint64_t v4 = 15;
    size_t v5 = "+infinity";
    uint64_t v6 = 9;
    if (v2 != 0x7FFFFFFFFFFFFFFFLL)
    {
      size_t v5 = "";
      uint64_t v6 = 0;
    }
    if (v2 != 0x7FFFFFFFFFFFFFFELL)
    {
      int v3 = v5;
      uint64_t v4 = v6;
    }
    if (v2 == 0x8000000000000000) {
      unint64_t v7 = "-infinity";
    }
    else {
      unint64_t v7 = v3;
    }
    if (v2 == 0x8000000000000000) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = v4;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v7, v8);
  }
  std::stringbuf::str();
  v11[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v11[1] = MEMORY[0x263F8C318] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v13);
}

void sub_223E86348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *boost::date_time::date_formatter<boost::gregorian::date,boost::date_time::iso_format<char>,char>::date_to_string@<X0>(int a1@<W0>, void *a2@<X8>)
{
  int v5 = a1;
  if (a1)
  {
    if (a1 == -1)
    {
      int64_t v2 = "+infinity";
    }
    else
    {
      if (a1 != -2)
      {
        unint64_t v4 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year_month_day(&v5);
        return (void *)boost::date_time::ymd_formatter<boost::date_time::year_month_day_base<boost::gregorian::greg_year,boost::gregorian::greg_month,boost::gregorian::greg_day>,boost::date_time::iso_format<char>,char>::ymd_to_string(v4 & 0xFFFFFFFFFFFFLL);
      }
      int64_t v2 = "not-a-date-time";
    }
  }
  else
  {
    int64_t v2 = "-infinity";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

unint64_t boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year_month_day(_DWORD *a1)
{
  int v1 = *a1 + 32044;
  unsigned int v2 = ((4 * v1) | 3u) / 0x23AB1;
  unsigned int v3 = v1 - ((146097 * v2) >> 2);
  unsigned int v4 = ((4 * v3) | 3) / 0x5B5;
  unsigned int v5 = v3 - ((1461 * v4) >> 2);
  unsigned int v6 = 5 * v5 + 2;
  unsigned int v7 = v5 - (153 * (v6 / 0x99) + 2) / 5 + 1;
  unsigned int v8 = v6 / 0x99 + 65524 * (v6 / 0x5FA) + 3;
  unsigned __int16 v13 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v13, (unsigned __int16)(v4 + 100 * v2 - 4800 + v6 / 0x5FA));
  unsigned __int16 v12 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v12, v13);
  unsigned __int16 v11 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v11, (unsigned __int16)v8);
  unsigned __int16 v10 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v10, (unsigned __int16)v7);
  return v12 | ((unint64_t)v11 << 16) | ((unint64_t)v10 << 32);
}

uint64_t boost::date_time::ymd_formatter<boost::date_time::year_month_day_base<boost::gregorian::greg_year,boost::gregorian::greg_month,boost::gregorian::greg_day>,boost::date_time::iso_format<char>,char>::ymd_to_string(uint64_t a1)
{
  int v18 = a1;
  __int16 v19 = WORD2(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  uint64_t v1 = *(void *)(v15[0] - 24);
  unsigned int v2 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + v1));
  std::ios_base::imbue((std::ios_base *)((char *)v15 + v1), v2);
  std::locale::~locale(&v21);
  unsigned int v3 = *(std::locale **)((char *)&v15[5] + v1);
  if (v3)
  {
    (*((void (**)(std::locale *, const std::locale *))v3->__locale_ + 2))(v3, v2);
    unsigned int v4 = v3 + 1;
    std::locale::locale(&v20, v4);
    std::locale::operator=(v4, v2);
    std::locale::~locale(&v20);
  }
  std::locale::~locale(&v14);
  std::ostream::operator<<();
  unsigned int v5 = (std::ios_base *)((char *)v15 + *(void *)(v15[0] - 24));
  MEMORY[0x22A614D20](&__loc);
  std::ios_base::getloc(v5);
  std::ios_base::imbue(v5, &__loc);
  std::locale::~locale(&v21);
  rdbuf = (std::locale *)v5->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, &__loc);
    unsigned int v7 = rdbuf + 1;
    std::locale::locale(&v20, v7);
    std::locale::operator=(v7, &__loc);
    std::locale::~locale(&v20);
  }
  std::locale::~locale(&v13);
  std::locale::~locale(&__loc);
  boost::date_time::month_formatter<boost::gregorian::greg_month,boost::date_time::iso_format<char>,char>::format_month((uint64_t)&v18 + 2, v15);
  uint64_t v8 = v15[0];
  *(uint64_t *)((char *)&v15[3] + *(void *)(v15[0] - 24)) = 2;
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(v8 - 24)));
  std::string::size_type v9 = std::locale::use_facet(&v21, MEMORY[0x263F8C108]);
  char v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 48);
  std::locale::~locale(&v21);
  LOBYTE(v20.__locale_) = v10;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, (char *)&v20);
  std::ostream::operator<<();
  std::stringbuf::str();
  v15[0] = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v15[1] = MEMORY[0x263F8C318] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v17);
}

void sub_223E868C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, std::locale a11, char a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t *boost::date_time::month_formatter<boost::gregorian::greg_month,boost::date_time::iso_format<char>,char>::format_month(uint64_t a1, uint64_t *a2)
{
  boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::basic_ios_fill_saver((uint64_t)v8, (std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  uint64_t v3 = *a2;
  *(uint64_t *)((char *)a2 + *(void *)(*a2 - 24) + 24) = 2;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(v3 - 24)));
  unsigned int v4 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
  char v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 48);
  std::locale::~locale(&v9);
  char v7 = v5;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(a2, &v7);
  std::ostream::operator<<();
  boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::restore((uint64_t)v8);
  return a2;
}

void sub_223E86A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    char v5 = std::locale::use_facet(&v8, MEMORY[0x263F8C108]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_223E86B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::basic_ios_fill_saver(uint64_t a1, std::ios_base *this)
{
  *(void *)a1 = this;
  std::ios_base::fmtflags fmtflags = this[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(this);
    char v5 = std::locale::use_facet(&v7, MEMORY[0x263F8C108]);
    std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v7);
    this[1].__fmtflags_ = fmtflags;
  }
  *(unsigned char *)(a1 + 8) = fmtflags;
  return a1;
}

void sub_223E86BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void boost::io::basic_ios_fill_saver<char,std::char_traits<char>>::restore(uint64_t a1)
{
  uint64_t v1 = *(const std::ios_base **)a1;
  std::ios_base::fmtflags v2 = *(char *)(a1 + 8);
  if (*(_DWORD *)(*(void *)a1 + 144) == -1)
  {
    std::ios_base::getloc(*(const std::ios_base **)a1);
    uint64_t v3 = std::locale::use_facet(&v5, MEMORY[0x263F8C108]);
    std::ios_base::fmtflags v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 32);
    std::locale::~locale(&v5);
    v1[1].__fmtflags_ = v4;
  }
  v1[1].__fmtflags_ = v2;
}

void sub_223E86C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    int v5 = (int)v1 / 500654080 + 32044;
    unsigned int v6 = ((4 * v5) | 3u) / 0x23AB1;
    unsigned int v7 = v5 - ((146097 * v6) >> 2);
    unsigned int v8 = ((4 * v7) | 3) / 0x5B5;
    unsigned int v9 = v7 - ((1461 * v8) >> 2);
    unsigned int v10 = 5 * v9 + 2;
    unsigned int v11 = v9 - (153 * (v10 / 0x99) + 2) / 5 + 1;
    unsigned int v12 = v10 / 0x99 + 65524 * (v10 / 0x5FA) + 3;
    LOWORD(v14) = 1400;
    boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v14, (unsigned __int16)(v8 + 100 * v6 - 4800 + v10 / 0x5FA));
    unsigned __int16 v19 = 1400;
    boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v19, (unsigned __int16)v14);
    unsigned __int16 v18 = 1;
    boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v18, (unsigned __int16)v12);
    __int16 v17 = 1;
    boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v17, (unsigned __int16)v11);
    int v14 = v19 | (v18 << 16);
    __int16 v15 = v17;
    boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::date(&v16, &v14);
  }
  else
  {
    if (v1 == 0x7FFFFFFFFFFFFFFFLL) {
      int v2 = 2;
    }
    else {
      int v2 = 5;
    }
    if (v1 == 0x7FFFFFFFFFFFFFFELL) {
      int v3 = 0;
    }
    else {
      int v3 = v2;
    }
    if (v1 == 0x8000000000000000) {
      int v4 = 1;
    }
    else {
      int v4 = v3;
    }
    boost::gregorian::date::date((int *)&v16, v4);
  }
  return v16;
}

int *boost::gregorian::date::date(int *a1, int a2)
{
  int v3 = 0;
  switch(a2)
  {
    case 1:
      break;
    case 2:
      int v3 = -1;
      break;
    case 3:
      *a1 = 1;
      boost::gregorian::date::date(&v6, 0x578u, 1u, 1u);
      int v3 = v6;
      break;
    case 4:
      *a1 = -3;
      boost::gregorian::date::date(&v5, 0x270Fu, 0xCu, 0x1Fu);
      int v3 = v5;
      break;
    default:
      int v3 = -2;
      break;
  }
  *a1 = v3;
  return a1;
}

_DWORD *boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::date(_DWORD *result, _WORD *a2)
{
  int v2 = (unsigned __int16)a2[1];
  int v3 = (14 - v2) / 12;
  _DWORD *result = (unsigned __int16)a2[2]
          + 365 * (unsigned __int16)(*a2 - v3 + 4800)
          + ((unsigned __int16)(*a2 - v3 + 4800) >> 2)
          - (unsigned __int16)(*a2 - v3 + 4800) / 0x64u
          + (unsigned __int16)(*a2 - v3 + 4800) / 0x190u
          - 32045
          + ((858993460 * (unint64_t)(153 * (unsigned __int16)(v2 + 12 * v3 - 3) + 2)) >> 32);
  return result;
}

uint64_t boost::date_time::int_adapter<long long>::compare(int64_t *a1, int64_t *a2)
{
  int64_t v2 = *a1;
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) >= 3)
  {
    int64_t v3 = *a2;
    if ((unint64_t)(*a2 - 0x7FFFFFFFFFFFFFFELL) >= 3) {
      goto LABEL_16;
    }
  }
  else
  {
    int64_t v3 = *a2;
    if (v2 == 0x7FFFFFFFFFFFFFFELL)
    {
      if (v3 == 0x7FFFFFFFFFFFFFFELL) {
        return 0;
      }
      return 2;
    }
  }
  if (v3 == 0x7FFFFFFFFFFFFFFELL) {
    return 2;
  }
  if (v2 == 0x8000000000000000)
  {
    BOOL v5 = v3 == 0x8000000000000000;
    int64_t v3 = 0x8000000000000000;
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
    return v2 > v3;
  }
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    int64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
    if (v2 != 0x7FFFFFFFFFFFFFFFLL) {
      return 0xFFFFFFFFLL;
    }
    return v2 > v3;
  }
  uint64_t result = 1;
  if (v2 != 0x7FFFFFFFFFFFFFFFLL && v3 != 0x8000000000000000)
  {
LABEL_16:
    if (v2 < v3) {
      return 0xFFFFFFFFLL;
    }
    return v2 > v3;
  }
  return result;
}

void turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(turi::flexible_type_impl *a1@<X0>, std::string *a2@<X8>)
{
  switch(*((unsigned char *)a1 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v46);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_37;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v46);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_37;
    case 2:
      int64_t v3 = *(void **)a1;
      if (*(char *)(*(void *)a1 + 31) < 0)
      {
        uint64_t v41 = (const std::string::value_type *)v3[1];
        std::string::size_type v42 = v3[2];
        std::string::__init_copy_ctor_external(a2, v41, v42);
      }
      else
      {
        long long v4 = *(_OWORD *)(v3 + 1);
        a2->__r_.__value_.__r.__words[2] = v3[3];
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
      }
      return;
    case 3:
      uint64_t v5 = *(void *)a1;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"[", 1);
      if (*(void *)(v5 + 16) != *(void *)(v5 + 8))
      {
        unint64_t v6 = 0;
        do
        {
          std::ostream::operator<<();
          ++v6;
          uint64_t v7 = *(void *)(v5 + 16) - *(void *)(v5 + 8);
          if (v6 < v7 >> 3)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)" ", 1);
            uint64_t v7 = *(void *)(v5 + 16) - *(void *)(v5 + 8);
          }
        }
        while (v6 < v7 >> 3);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"]", 1);
      std::stringbuf::str();
      goto LABEL_84;
    case 4:
      uint64_t v8 = *(void *)a1;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"[", 1);
      uint64_t v9 = *(void *)(v8 + 8);
      if (*(void *)(v8 + 16) != v9)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if (*(unsigned char *)(v9 + v10 + 12) == 2)
          {
            unsigned int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"\"", 1);
            turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(&__p, *(void *)(v8 + 8) + v10);
            if ((v45 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            if ((v45 & 0x80u) == 0) {
              uint64_t v14 = v45;
            }
            else {
              uint64_t v14 = v44;
            }
            __int16 v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\"", 1);
          }
          else
          {
            turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(&__p, v9 + v10);
            if ((v45 & 0x80u) == 0) {
              unsigned int v16 = &__p;
            }
            else {
              unsigned int v16 = __p;
            }
            if ((v45 & 0x80u) == 0) {
              uint64_t v17 = v45;
            }
            else {
              uint64_t v17 = v44;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)v16, v17);
          }
          if ((char)v45 < 0) {
            operator delete(__p);
          }
          ++v11;
          uint64_t v9 = *(void *)(v8 + 8);
          uint64_t v18 = *(void *)(v8 + 16) - v9;
          if (v11 < v18 >> 4)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)",", 1);
            uint64_t v9 = *(void *)(v8 + 8);
            uint64_t v18 = *(void *)(v8 + 16) - v9;
          }
          v10 += 16;
        }
        while (v11 < v18 >> 4);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"]", 1);
      std::stringbuf::str();
      goto LABEL_84;
    case 5:
      uint64_t v21 = *(void *)a1;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"{", 1);
      uint64_t v22 = *(void *)(v21 + 8);
      uint64_t v23 = *(void *)(v21 + 16);
      if (v23 != v22)
      {
        unint64_t v24 = (v23 - v22) >> 5;
        uint64_t v25 = v22 + 16;
        unint64_t v26 = 1;
        do
        {
          if (*(unsigned char *)(v25 - 4) == 2)
          {
            unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"\"", 1);
            turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(&__p, v25 - 16);
            if ((v45 & 0x80u) == 0) {
              uint64_t v28 = &__p;
            }
            else {
              uint64_t v28 = __p;
            }
            if ((v45 & 0x80u) == 0) {
              uint64_t v29 = v45;
            }
            else {
              uint64_t v29 = v44;
            }
            uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\"", 1);
          }
          else
          {
            turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(&__p, v25 - 16);
            if ((v45 & 0x80u) == 0) {
              unint64_t v31 = &__p;
            }
            else {
              unint64_t v31 = __p;
            }
            if ((v45 & 0x80u) == 0) {
              uint64_t v32 = v45;
            }
            else {
              uint64_t v32 = v44;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)v31, v32);
          }
          if ((char)v45 < 0) {
            operator delete(__p);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)":", 1);
          if (*(unsigned char *)(v25 + 12) == 2)
          {
            unint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"\"", 1);
            turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(&__p, v25);
            if ((v45 & 0x80u) == 0) {
              unint64_t v34 = &__p;
            }
            else {
              unint64_t v34 = __p;
            }
            if ((v45 & 0x80u) == 0) {
              uint64_t v35 = v45;
            }
            else {
              uint64_t v35 = v44;
            }
            unsigned int v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\"", 1);
          }
          else
          {
            turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(&__p, v25);
            if ((v45 & 0x80u) == 0) {
              uint64_t v37 = &__p;
            }
            else {
              uint64_t v37 = __p;
            }
            if ((v45 & 0x80u) == 0) {
              uint64_t v38 = v45;
            }
            else {
              uint64_t v38 = v44;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)v37, v38);
          }
          if ((char)v45 < 0) {
            operator delete(__p);
          }
          if (v26 < v24) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)", ", 2);
          }
          ++v26;
          uint64_t v39 = v25 + 16;
          v25 += 32;
        }
        while (v39 != v23);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"}", 1);
      std::stringbuf::str();
      goto LABEL_84;
    case 6:
      turi::flexible_type_impl::date_time_to_string(a1, a2);
      return;
    case 7:
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      return;
    case 8:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Height: ", 8);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)" Width: ", 8);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_84:
      v46[0] = *MEMORY[0x263F8C2B8];
      uint64_t v40 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void *)((char *)v46 + *(void *)(v46[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v47 = v40;
      uint64_t v48 = MEMORY[0x263F8C318] + 16;
      if (v50 < 0) {
        operator delete(v49);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      break;
    case 9:
      unsigned __int16 v19 = (void *)(*(void *)a1 + 8);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v46);
      turi::flexible_type_impl::ndarray<double>::print(v19, &v47);
      std::stringbuf::str();
LABEL_37:
      v46[0] = *MEMORY[0x263F8C2B8];
      uint64_t v20 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void *)((char *)v46 + *(void *)(v46[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v47 = v20;
      uint64_t v48 = MEMORY[0x263F8C318] + 16;
      if (v50 < 0) {
        operator delete(v49);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      break;
    default:
      turi::flexible_type_fail(BOOL)::$_0::operator()();
  }
  MEMORY[0x22A614E30](&v51);
}

void sub_223E878A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

char *std::vector<double>::insert(uint64_t a1, char *__src, char *a3)
{
  int64_t v3 = a3;
  long long v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    std::locale v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      unsigned __int16 v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 16, v18);
    }
    else {
      unsigned __int16 v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    unint64_t v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        unint64_t v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        unint64_t v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    long long v4 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)long long __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    unint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)long long v4 = *(void *)v3;
  }
  return v4;
}

void sub_223E87B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  std::locale v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::soft_assignment_visitor,std::vector<turi::flexible_type>>::operator()<std::vector<double>>(uint64_t a1, uint64_t a2)
{
  int64_t v2 = (void *)a2;
  uint64_t v296 = *MEMORY[0x263EF8340];
  int64_t v3 = *(uint64_t **)(a1 + 8);
  std::vector<double>::resize(a2, (v3[1] - *v3) >> 4);
  int v294 = 0;
  char v295 = 1;
  double v293 = 0.0;
  uint64_t v6 = *v3;
  uint64_t v272 = v3;
  if (v3[1] != *v3)
  {
    unint64_t v7 = 0;
    uint64_t v271 = *MEMORY[0x263F8C2B8];
    uint64_t v269 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    uint64_t v270 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    double v268 = v2;
    do
    {
      uint64_t v8 = v6 + 16 * v7;
      if ((double *)v8 != &v293)
      {
        switch(*(unsigned char *)(v8 + 12))
        {
          case 0:
            switch(v295)
            {
              case 0:
                double v9 = *(double *)v8;
                goto LABEL_28;
              case 1:
                double v73 = (double)*(uint64_t *)v8;
                goto LABEL_156;
              case 2:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                long long v148 = *(atomic_ullong **)&v293;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v280);
                std::ostream::operator<<();
                std::stringbuf::str();
                goto LABEL_416;
              case 3:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 4:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 5:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 6:
                *(void *)&double v293 = *(void *)v8 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
                int v294 = 0;
                goto LABEL_427;
              case 8:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 9:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              default:
                goto LABEL_595;
            }
          case 1:
            switch(v295)
            {
              case 0:
                *(void *)&double v9 = (uint64_t)*(double *)v8;
                goto LABEL_28;
              case 1:
                double v73 = *(double *)v8;
                goto LABEL_156;
              case 2:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                long long v148 = *(atomic_ullong **)&v293;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v280);
                std::ostream::operator<<();
                std::stringbuf::str();
LABEL_416:
                *(void *)atomic_ullong *volatile v280 = v271;
                *(void *)&v280[*(void *)(v271 - 24)] = v270;
                *(void *)&v280[16] = v269;
                goto LABEL_417;
              case 3:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 4:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 5:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 6:
                int v72 = (int)((*(double *)v8 - (double)(uint64_t)floor(*(double *)v8)) * 1000000.0);
                if (v72 >= 999999) {
                  int v72 = 999999;
                }
                if (v72 >= 0xF4240) {
                  turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                }
                *(void *)&double v293 = vcvtmd_s64_f64(*(double *)v8) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
                int v294 = v72;
                goto LABEL_427;
              case 8:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 9:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              default:
                goto LABEL_595;
            }
          case 2:
            if (v295 != 2)
            {
              switch(v295)
              {
                case 3:
                  if (**(void **)&v293 != 1) {
                    operator new();
                  }
                  return;
                case 4:
                  if (**(void **)&v293 != 1) {
                    operator new();
                  }
                  return;
                case 5:
                  if (**(void **)&v293 != 1) {
                    operator new();
                  }
                  return;
                case 8:
                  if (**(void **)&v293 != 1) {
                    operator new();
                  }
                  return;
                case 9:
                  if (**(void **)&v293 != 1) {
                    operator new();
                  }
                  return;
                default:
                  break;
              }
LABEL_595:
              turi::flexible_type_fail(BOOL)::$_0::operator()();
            }
            double v13 = *(double *)v8;
            if (**(void **)&v293 != 1) {
              operator new();
            }
            unint64_t v75 = *(atomic_ullong **)&v293;
            if (*(char *)(*(void *)&v13 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v280, *(const std::string::value_type **)(*(void *)&v13 + 8), *(void *)(*(void *)&v13 + 16));
            }
            else
            {
              long long v76 = *(_OWORD *)(*(void *)&v13 + 8);
              *(void *)&v280[16] = *(void *)(*(void *)&v13 + 24);
              *(_OWORD *)atomic_ullong *volatile v280 = v76;
            }
LABEL_423:
            unint64_t v235 = v75 + 1;
            if (*((char *)v75 + 31) < 0) {
              operator delete((void *)*v235);
            }
            long long v236 = *(_OWORD *)v280;
            atomic_ullong v237 = *(void *)&v280[16];
LABEL_426:
            v235[2] = v237;
            *(_OWORD *)unint64_t v235 = v236;
            break;
          case 3:
            unint64_t v14 = *(atomic_ullong **)v8;
            uint64_t v15 = (char **)(v14 + 1);
            switch(v295)
            {
              case 2:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                long long v148 = *(atomic_ullong **)&v293;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v280);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)"[", 1);
                if (v14[2] != v14[1])
                {
                  unint64_t v233 = 0;
                  do
                  {
                    std::ostream::operator<<();
                    ++v233;
                    uint64_t v234 = v14[2] - v14[1];
                    if (v233 < v234 >> 3)
                    {
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)" ", 1);
                      uint64_t v234 = v14[2] - v14[1];
                    }
                  }
                  while (v233 < v234 >> 3);
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)"]", 1);
                std::stringbuf::str();
                *(void *)atomic_ullong *volatile v280 = v271;
                *(void *)&v280[*(void *)(v271 - 24)] = v270;
                *(void *)&v280[16] = v269;
                *(void *)&v280[24] = MEMORY[0x263F8C318] + 16;
                int64_t v2 = v268;
                if (v284 < 0) {
                  goto LABEL_418;
                }
                goto LABEL_419;
              case 3:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                if (*(atomic_ullong **)&v293 == v14) {
                  goto LABEL_427;
                }
                double v61 = (char *)(*(void *)&v293 + 8);
                uint64_t v71 = v14 + 2;
                break;
              case 4:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(*(void *)&v293 + 8), (void *)v14[1], (void *)v14[2], (v14[2] - v14[1]) >> 3);
                goto LABEL_427;
              case 5:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 8:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 9:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                uint64_t v66 = *(atomic_ullong **)&v293;
                v289 = 0;
                v290 = 0;
                uint64_t v291 = 0;
                memset(&v292, 0, sizeof(v292));
                std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v15, &v286);
                turi::flexible_type_impl::ndarray<double>::ndarray(v280, &v286, (uint64_t)&v292, (uint64_t)&v289, 0);
                if (v287) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v287);
                }
                if (v289)
                {
                  v290 = v289;
                  operator delete(v289);
                }
                if (v292.__r_.__value_.__r.__words[0])
                {
                  v292.__r_.__value_.__l.__size_ = v292.__r_.__value_.__r.__words[0];
                  operator delete(v292.__r_.__value_.__l.__data_);
                }
                long long v67 = *(_OWORD *)v280;
                *(_OWORD *)atomic_ullong *volatile v280 = 0uLL;
                double v68 = (std::__shared_weak_count *)v66[2];
                *(_OWORD *)(v66 + 1) = v67;
                if (v68) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v68);
                }
                uint64_t v69 = (void *)v66[3];
                if (v69)
                {
                  v66[4] = (atomic_ullong)v69;
                  operator delete(v69);
                  v66[3] = 0;
                  v66[4] = 0;
                  v66[5] = 0;
                }
                uint64_t v70 = (void *)v66[6];
                *(_OWORD *)(v66 + 3) = *(_OWORD *)&v280[16];
                v66[5] = *(void *)v281;
                *(_OWORD *)&v280[16] = 0uLL;
                *(void *)v281 = 0;
                if (v70)
                {
                  v66[7] = (atomic_ullong)v70;
                  operator delete(v70);
                  v66[6] = 0;
                  v66[7] = 0;
                  v66[8] = 0;
                  uint64_t v70 = *(void **)&v280[16];
                }
                *((_OWORD *)v66 + 3) = *(_OWORD *)&v281[8];
                v66[8] = *(void *)&v281[24];
                memset(&v281[8], 0, 24);
                v66[9] = v282;
                if (!v70) {
                  goto LABEL_207;
                }
                goto LABEL_206;
              default:
                goto LABEL_595;
            }
LABEL_140:
            std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v61, *v15, *v71, (*v71 - (uint64_t)*v15) >> 3);
            break;
          case 4:
            uint64_t v10 = *(void *)v8 + 8;
            uint64_t v274 = &v273;
            uint64_t v275 = (uint64_t **)v10;
            switch(v295)
            {
              case 2:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                long long v101 = *(atomic_ullong **)&v293;
                v162 = v275;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v280);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)"[", 1);
                long long v163 = *v162;
                if (v162[1] != *v162)
                {
                  uint64_t v164 = 0;
                  unint64_t v165 = 0;
                  do
                  {
                    if (BYTE4(v163[v164 + 1]) == 2)
                    {
                      long long v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)"\"", 1);
                      turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)&(*v162)[v164], &v292);
                      if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v167 = &v292;
                      }
                      else {
                        uint64_t v167 = (std::string *)v292.__r_.__value_.__r.__words[0];
                      }
                      if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type size = HIBYTE(v292.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type size = v292.__r_.__value_.__l.__size_;
                      }
                      unint64_t v169 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)v167, size);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)"\"", 1);
                    }
                    else
                    {
                      turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)&v163[v164], &v292);
                      if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v170 = &v292;
                      }
                      else {
                        std::string::size_type v170 = (std::string *)v292.__r_.__value_.__r.__words[0];
                      }
                      if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v171 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v171 = v292.__r_.__value_.__l.__size_;
                      }
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)v170, v171);
                    }
                    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v292.__r_.__value_.__l.__data_);
                    }
                    ++v165;
                    long long v163 = *v162;
                    uint64_t v172 = (char *)v162[1] - (char *)*v162;
                    if (v165 < v172 >> 4)
                    {
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)",", 1);
                      long long v163 = *v162;
                      uint64_t v172 = (char *)v162[1] - (char *)*v162;
                    }
                    v164 += 2;
                  }
                  while (v165 < v172 >> 4);
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)"]", 1);
                std::stringbuf::str();
                *(void *)atomic_ullong *volatile v280 = v271;
                *(void *)&v280[*(void *)(v271 - 24)] = v270;
                *(void *)&v280[16] = v269;
                goto LABEL_330;
              case 3:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::soft_assignment_visitor,std::vector<turi::flexible_type>>::operator()<std::vector<double>>(&v274, *(void *)&v293 + 8);
                goto LABEL_427;
              case 4:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                if ((uint64_t **)(*(void *)&v293 + 8) != v275) {
                  std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(*(void *)&v293 + 8, *v275, v275[1], ((char *)v275[1] - (char *)*v275) >> 4);
                }
                goto LABEL_427;
              case 5:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 8:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 9:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                unsigned int v36 = *(atomic_ullong **)&v293;
                memset(v276, 0, sizeof(v276));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v276, *v275, v275[1], ((char *)v275[1] - (char *)*v275) >> 4);
                unint64_t v37 = 0;
                uint64_t v38 = 0;
                memset(&v292, 0, sizeof(v292));
                uint64_t v39 = v276;
                break;
              default:
                goto LABEL_595;
            }
            while (2)
            {
              uint64_t v40 = (v39[1] - *v39) >> 4;
              if ((unint64_t)v38 >= v37)
              {
                std::string::size_type v42 = (void *)v292.__r_.__value_.__r.__words[0];
                uint64_t v43 = (uint64_t)((uint64_t)v38 - v292.__r_.__value_.__r.__words[0]) >> 3;
                unint64_t v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 61) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v45 = v37 - v292.__r_.__value_.__r.__words[0];
                if (v45 >> 2 > v44) {
                  unint64_t v44 = v45 >> 2;
                }
                if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v46 = v44;
                }
                if (v46)
                {
                  uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v292.__r_.__value_.__r.__words[2], v46);
                  uint64_t v38 = (void *)v292.__r_.__value_.__l.__size_;
                  std::string::size_type v42 = (void *)v292.__r_.__value_.__r.__words[0];
                }
                else
                {
                  uint64_t v47 = 0;
                }
                uint64_t v48 = (uint64_t *)&v47[8 * v43];
                *uint64_t v48 = v40;
                uint64_t v41 = v48 + 1;
                while (v38 != v42)
                {
                  uint64_t v49 = *--v38;
                  *--uint64_t v48 = v49;
                }
                v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
                v292.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
                v292.__r_.__value_.__r.__words[2] = (std::string::size_type)&v47[8 * v46];
                if (v42) {
                  operator delete(v42);
                }
              }
              else
              {
                *uint64_t v38 = v40;
                uint64_t v41 = v38 + 1;
              }
              v292.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
              char v50 = (unsigned __int8 *)*v39;
              if (v39[1] != *v39)
              {
                int v51 = v50[12];
                switch(v51)
                {
                  case 4:
                    uint64_t v39 = (uint64_t *)(*(void *)v50 + 8);
                    unint64_t v37 = v292.__r_.__value_.__r.__words[2];
                    uint64_t v38 = v41;
                    continue;
                  case 9:
                    uint64_t v150 = *(void *)v50;
                    uint64_t v151 = *(void *)(*(void *)v50 + 24);
                    if (*(void *)(*(void *)v50 + 32) != v151)
                    {
                      unint64_t v152 = 0;
                      uint64_t v153 = v41;
                      do
                      {
                        if ((unint64_t)v153 >= v292.__r_.__value_.__r.__words[2])
                        {
                          uint64_t v154 = (void *)v292.__r_.__value_.__r.__words[0];
                          uint64_t v155 = (uint64_t)((uint64_t)v153 - v292.__r_.__value_.__r.__words[0]) >> 3;
                          unint64_t v156 = v155 + 1;
                          if ((unint64_t)(v155 + 1) >> 61) {
                            std::vector<float>::__throw_length_error[abi:ne180100]();
                          }
                          int64_t v157 = v292.__r_.__value_.__r.__words[2] - v292.__r_.__value_.__r.__words[0];
                          if ((uint64_t)(v292.__r_.__value_.__r.__words[2] - v292.__r_.__value_.__r.__words[0]) >> 2 > v156) {
                            unint64_t v156 = v157 >> 2;
                          }
                          if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v158 = v156;
                          }
                          if (v158)
                          {
                            unint64_t v159 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v292.__r_.__value_.__r.__words[2], v158);
                            uint64_t v153 = (void *)v292.__r_.__value_.__l.__size_;
                            uint64_t v154 = (void *)v292.__r_.__value_.__r.__words[0];
                          }
                          else
                          {
                            unint64_t v159 = 0;
                          }
                          int64_t v160 = &v159[8 * v155];
                          *(void *)int64_t v160 = *(void *)(v151 + 8 * v152);
                          uint64_t v41 = v160 + 8;
                          while (v153 != v154)
                          {
                            uint64_t v161 = *--v153;
                            *((void *)v160 - 1) = v161;
                            v160 -= 8;
                          }
                          v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v160;
                          v292.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
                          v292.__r_.__value_.__r.__words[2] = (std::string::size_type)&v159[8 * v158];
                          if (v154) {
                            operator delete(v154);
                          }
                        }
                        else
                        {
                          *uint64_t v153 = *(void *)(v151 + 8 * v152);
                          uint64_t v41 = v153 + 1;
                        }
                        v292.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
                        ++v152;
                        uint64_t v151 = *(void *)(v150 + 24);
                        uint64_t v153 = v41;
                      }
                      while (v152 < (*(void *)(v150 + 32) - v151) >> 3);
                    }
                    break;
                  case 3:
                    uint64_t v77 = (uint64_t)(*(void *)(*(void *)v50 + 16) - *(void *)(*(void *)v50 + 8)) >> 3;
                    if ((unint64_t)v41 >= v292.__r_.__value_.__r.__words[2])
                    {
                      long long v239 = (void *)v292.__r_.__value_.__r.__words[0];
                      uint64_t v240 = (uint64_t)((uint64_t)v41 - v292.__r_.__value_.__r.__words[0]) >> 3;
                      unint64_t v241 = v240 + 1;
                      if ((unint64_t)(v240 + 1) >> 61) {
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      }
                      int64_t v242 = v292.__r_.__value_.__r.__words[2] - v292.__r_.__value_.__r.__words[0];
                      if ((uint64_t)(v292.__r_.__value_.__r.__words[2] - v292.__r_.__value_.__r.__words[0]) >> 2 > v241) {
                        unint64_t v241 = v242 >> 2;
                      }
                      if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v243 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v243 = v241;
                      }
                      if (v243)
                      {
                        unint64_t v244 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v292.__r_.__value_.__r.__words[2], v243);
                        uint64_t v41 = (void *)v292.__r_.__value_.__l.__size_;
                        long long v239 = (void *)v292.__r_.__value_.__r.__words[0];
                      }
                      else
                      {
                        unint64_t v244 = 0;
                      }
                      int64_t v245 = (uint64_t *)&v244[8 * v240];
                      *int64_t v245 = v77;
                      std::string::size_type v78 = (std::string::size_type)(v245 + 1);
                      while (v41 != v239)
                      {
                        uint64_t v246 = *--v41;
                        *--int64_t v245 = v246;
                      }
                      v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v245;
                      v292.__r_.__value_.__l.__size_ = v78;
                      v292.__r_.__value_.__r.__words[2] = (std::string::size_type)&v244[8 * v243];
                      if (v239) {
                        operator delete(v239);
                      }
                    }
                    else
                    {
                      void *v41 = v77;
                      std::string::size_type v78 = (std::string::size_type)(v41 + 1);
                    }
                    v292.__r_.__value_.__l.__size_ = v78;
                    uint64_t v41 = (void *)v78;
                    break;
                  default:
                    if ((0x3BCuLL >> v51)) {
                      turi::flexible_type_impl::get_ndvec_visitor::operator()(std::vector<turi::flexible_type>)const::$_0::operator()();
                    }
                    break;
                }
              }
              break;
            }
            double v247 = (uint64_t *)v292.__r_.__value_.__r.__words[0];
            if (v41 == (void *)v292.__r_.__value_.__l.__data_)
            {
              v290 = 0;
              uint64_t v291 = 0;
              uint64_t v286 = 0;
              char v287 = 0;
              uint64_t v288 = 0;
              v289 = 0;
              long long v277 = 0;
              long long v278 = 0;
              uint64_t v279 = 0;
              turi::flexible_type_impl::ndarray<double>::ndarray(v280, (uint64_t)&v289, (uint64_t)&v286, (uint64_t)&v277, 0);
              int64_t v2 = v268;
              if (v277)
              {
                long long v278 = (std::__shared_weak_count *)v277;
                operator delete(v277);
              }
            }
            else
            {
              unint64_t v248 = (uint64_t)((uint64_t)v41 - v292.__r_.__value_.__r.__words[0]) >> 3;
              if (v248 <= 1) {
                unint64_t v248 = 1;
              }
              unint64_t v249 = 1;
              int64_t v2 = v268;
              do
              {
                uint64_t v250 = *v247++;
                v249 *= v250;
                --v248;
              }
              while (v248);
              if (v249)
              {
                unint64_t v251 = (std::__shared_weak_count *)operator new(0x30uLL);
                v251->__shared_owners_ = 0;
                v251->__shared_weak_owners_ = 0;
                v251->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D754C90;
                v251[1].__shared_owners_ = 0;
                v251[1].__shared_weak_owners_ = 0;
                v251[1].__vftable = 0;
                uint64_t v286 = (double **)&v251[1];
                char v287 = v251;
                std::vector<double>::reserve((void **)&v251[1].__vftable, v249);
                if ((turi::flexible_type_impl::flexible_type_flatten_to_nd_vec(v276, &v292, 0, v286) & 1) == 0) {
                  turi::flexible_type_impl::get_ndvec_visitor::operator()(std::vector<turi::flexible_type>)const::$_1::operator()();
                }
                v289 = 0;
                v290 = 0;
                uint64_t v291 = 0;
                turi::flexible_type_impl::ndarray<double>::ndarray(v280, &v286, (uint64_t)&v292, (uint64_t)&v289, 0);
                if (v289)
                {
                  v290 = v289;
                  operator delete(v289);
                }
                if (v287) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v287);
                }
                goto LABEL_462;
              }
              v290 = 0;
              uint64_t v291 = 0;
              uint64_t v286 = 0;
              char v287 = 0;
              uint64_t v288 = 0;
              v289 = 0;
              turi::flexible_type_impl::ndarray<double>::ndarray(v280, (uint64_t)&v289, (uint64_t)&v292, (uint64_t)&v286, 0);
            }
            if (v286)
            {
              char v287 = (std::__shared_weak_count *)v286;
              operator delete(v286);
            }
            if (v289)
            {
              v290 = v289;
              operator delete(v289);
            }
LABEL_462:
            if (v292.__r_.__value_.__r.__words[0])
            {
              v292.__r_.__value_.__l.__size_ = v292.__r_.__value_.__r.__words[0];
              operator delete(v292.__r_.__value_.__l.__data_);
            }
            long long v252 = *(_OWORD *)v280;
            *(_OWORD *)atomic_ullong *volatile v280 = 0uLL;
            uint64_t v253 = (std::__shared_weak_count *)v36[2];
            *(_OWORD *)(v36 + 1) = v252;
            if (v253) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v253);
            }
            v254 = (void *)v36[3];
            if (v254)
            {
              v36[4] = (atomic_ullong)v254;
              operator delete(v254);
              void v36[3] = 0;
              v36[4] = 0;
              v36[5] = 0;
            }
            long long v255 = (void *)v36[6];
            *(_OWORD *)(v36 + 3) = *(_OWORD *)&v280[16];
            v36[5] = *(void *)v281;
            *(_OWORD *)&v280[16] = 0uLL;
            *(void *)v281 = 0;
            if (v255)
            {
              v36[7] = (atomic_ullong)v255;
              operator delete(v255);
              v36[6] = 0;
              v36[7] = 0;
              v36[8] = 0;
              long long v255 = *(void **)&v280[16];
            }
            *((_OWORD *)v36 + 3) = *(_OWORD *)&v281[8];
            v36[8] = *(void *)&v281[24];
            memset(&v281[8], 0, 24);
            v36[9] = v282;
            if (v255)
            {
              *(void *)&v280[24] = v255;
              operator delete(v255);
            }
            if (*(void *)&v280[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v280[8]);
            }
            v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v276;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v292);
            break;
          case 5:
            double v16 = *(double *)v8;
            switch(v295)
            {
              case 2:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                long long v101 = *(atomic_ullong **)&v293;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v280);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)"{", 1);
                uint64_t v102 = *(void *)(*(void *)&v16 + 8);
                uint64_t v103 = *(unsigned char **)(*(void *)&v16 + 16);
                if (v103 != (unsigned char *)v102)
                {
                  unint64_t v104 = (uint64_t)&v103[-v102] >> 5;
                  unint64_t v105 = (turi::flexible_type_impl *)(v102 + 16);
                  unint64_t v106 = 1;
                  do
                  {
                    if (*((unsigned char *)v105 - 4) == 2)
                    {
                      unint64_t v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)"\"", 1);
                      turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)((char *)v105 - 16), &v292);
                      if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v108 = &v292;
                      }
                      else {
                        uint64_t v108 = (std::string *)v292.__r_.__value_.__r.__words[0];
                      }
                      if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v109 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v109 = v292.__r_.__value_.__l.__size_;
                      }
                      std::string::size_type v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)v108, v109);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"\"", 1);
                    }
                    else
                    {
                      turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>((turi::flexible_type_impl *)((char *)v105 - 16), &v292);
                      if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v111 = &v292;
                      }
                      else {
                        uint64_t v111 = (std::string *)v292.__r_.__value_.__r.__words[0];
                      }
                      if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v112 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v112 = v292.__r_.__value_.__l.__size_;
                      }
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)v111, v112);
                    }
                    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v292.__r_.__value_.__l.__data_);
                    }
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)":", 1);
                    if (*((unsigned char *)v105 + 12) == 2)
                    {
                      std::string::size_type v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)"\"", 1);
                      turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(v105, &v292);
                      if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        unsigned int v114 = &v292;
                      }
                      else {
                        unsigned int v114 = (std::string *)v292.__r_.__value_.__r.__words[0];
                      }
                      if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v115 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v115 = v292.__r_.__value_.__l.__size_;
                      }
                      std::string::size_type v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)v114, v115);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)"\"", 1);
                    }
                    else
                    {
                      turi::flexible_type::apply_visitor<turi::flexible_type_impl::get_string_visitor>(v105, &v292);
                      if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        long long v117 = &v292;
                      }
                      else {
                        long long v117 = (std::string *)v292.__r_.__value_.__r.__words[0];
                      }
                      if ((v292.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v118 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v118 = v292.__r_.__value_.__l.__size_;
                      }
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)v117, v118);
                    }
                    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v292.__r_.__value_.__l.__data_);
                    }
                    if (v106 < v104) {
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)", ", 2);
                    }
                    ++v106;
                    std::string::size_type v119 = (char *)v105 + 16;
                    unint64_t v105 = (turi::flexible_type_impl *)((char *)v105 + 32);
                  }
                  while (v119 != v103);
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)"}", 1);
                std::stringbuf::str();
                *(void *)atomic_ullong *volatile v280 = v271;
                *(void *)&v280[*(void *)(v271 - 24)] = v270;
                *(void *)&v280[16] = v269;
LABEL_330:
                *(void *)&v280[24] = MEMORY[0x263F8C318] + 16;
                int64_t v2 = v268;
                if (v284 < 0) {
                  goto LABEL_331;
                }
                goto LABEL_332;
              case 3:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 4:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 5:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                if (*(void *)&v293 != *(void *)&v16) {
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(*(void *)&v293 + 8), *(uint64_t **)(*(void *)&v16 + 8), *(uint64_t **)(*(void *)&v16 + 16), (uint64_t)(*(void *)(*(void *)&v16 + 16) - *(void *)(*(void *)&v16 + 8)) >> 5);
                }
                goto LABEL_427;
              case 8:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 9:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              default:
                goto LABEL_595;
            }
          case 6:
            switch(v295)
            {
              case 0:
                *(void *)&double v9 = (uint64_t)(*(void *)v8 << 8) >> 8;
                goto LABEL_28;
              case 1:
                double v73 = (double)*(int *)(v8 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v8 << 8) >> 8);
LABEL_156:
                double v293 = v73;
                goto LABEL_427;
              case 2:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                unint64_t v75 = *(atomic_ullong **)&v293;
                int v238 = *(_DWORD *)(v8 + 8);
                v292.__r_.__value_.__r.__words[0] = *(void *)v8;
                LODWORD(v292.__r_.__value_.__r.__words[1]) = v238;
                turi::flexible_type_impl::date_time_to_string((turi::flexible_type_impl *)&v292, (std::string *)v280);
                goto LABEL_423;
              case 3:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 4:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 5:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 6:
                int v74 = *(_DWORD *)(v8 + 8);
                double v293 = *(double *)v8;
                int v294 = v74;
                goto LABEL_427;
              case 8:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 9:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              default:
                goto LABEL_595;
            }
          case 7:
            switch(v295)
            {
              case 1:
                double v9 = NAN;
LABEL_28:
                double v293 = v9;
                goto LABEL_427;
              case 2:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                long long v149 = (atomic_ullong *)(*(void *)&v293 + 8);
                if (*(char *)(*(void *)&v293 + 31) < 0) {
                  operator delete((void *)*v149);
                }
                *long long v149 = 0;
                v149[1] = 0;
                v149[2] = 0;
                goto LABEL_427;
              case 3:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 4:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 5:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 7:
                goto LABEL_427;
              case 8:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 9:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              default:
                goto LABEL_595;
            }
          case 8:
            double v17 = *(double *)v8;
            switch(v295)
            {
              case 2:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                long long v148 = *(atomic_ullong **)&v293;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v280);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)"Height: ", 8);
                std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v280[16], (uint64_t)" Width: ", 8);
                std::ostream::operator<<();
                std::stringbuf::str();
                *(void *)atomic_ullong *volatile v280 = v271;
                *(void *)&v280[*(void *)(v271 - 24)] = v270;
                *(void *)&v280[16] = v269;
LABEL_417:
                *(void *)&v280[24] = MEMORY[0x263F8C318] + 16;
                if (v284 < 0) {
LABEL_418:
                }
                  operator delete(v283);
LABEL_419:
                unint64_t v235 = v148 + 1;
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x22A614E30](v285);
                if (*((char *)v148 + 31) < 0) {
                  operator delete((void *)*v235);
                }
                long long v236 = *(_OWORD *)&v292.__r_.__value_.__l.__data_;
                atomic_ullong v237 = v292.__r_.__value_.__r.__words[2];
                goto LABEL_426;
              case 3:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                unint64_t v18 = *(atomic_ullong **)&v293;
                memset(&v292, 0, sizeof(v292));
                if (*(void *)(*(void *)&v17 + 64) == 2)
                {
                  if (*(void *)(*(void *)&v17 + 48))
                  {
                    unsigned __int16 v19 = 0;
                    unint64_t v20 = 0;
                    do
                    {
                      LOBYTE(v5) = *(unsigned char *)(*(void *)(*(void *)&v17 + 8) + v20);
                      double v21 = (double)(unint64_t)v5;
                      if ((unint64_t)v19 >= v292.__r_.__value_.__r.__words[2])
                      {
                        uint64_t v23 = (double *)v292.__r_.__value_.__r.__words[0];
                        uint64_t v24 = (uint64_t)((uint64_t)v19 - v292.__r_.__value_.__r.__words[0]) >> 3;
                        unint64_t v25 = v24 + 1;
                        if ((unint64_t)(v24 + 1) >> 61) {
                          std::vector<float>::__throw_length_error[abi:ne180100]();
                        }
                        int64_t v26 = v292.__r_.__value_.__r.__words[2] - v292.__r_.__value_.__r.__words[0];
                        if ((uint64_t)(v292.__r_.__value_.__r.__words[2] - v292.__r_.__value_.__r.__words[0]) >> 2 > v25) {
                          unint64_t v25 = v26 >> 2;
                        }
                        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v4 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v4 = v25;
                        }
                        if (v4)
                        {
                          unint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v292.__r_.__value_.__r.__words[2], v4);
                          unsigned __int16 v19 = (double *)v292.__r_.__value_.__l.__size_;
                          uint64_t v23 = (double *)v292.__r_.__value_.__r.__words[0];
                        }
                        else
                        {
                          unint64_t v27 = 0;
                        }
                        uint64_t v28 = (double *)&v27[8 * v24];
                        *uint64_t v28 = v21;
                        std::string::size_type v22 = (std::string::size_type)(v28 + 1);
                        while (v19 != v23)
                        {
                          uint64_t v29 = (atomic_ullong *)*((void *)v19-- - 1);
                          uint64_t v5 = v29;
                          *((void *)v28-- - 1) = v29;
                        }
                        v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
                        v292.__r_.__value_.__l.__size_ = v22;
                        v292.__r_.__value_.__r.__words[2] = (std::string::size_type)&v27[8 * v4];
                        if (v23) {
                          operator delete(v23);
                        }
                      }
                      else
                      {
                        *unsigned __int16 v19 = v21;
                        std::string::size_type v22 = (std::string::size_type)(v19 + 1);
                      }
                      v292.__r_.__value_.__l.__size_ = v22;
                      ++v20;
                      unsigned __int16 v19 = (double *)v22;
                    }
                    while (v20 < *(void *)(*(void *)&v17 + 48));
                  }
                }
                else
                {
                  uint64_t v79 = *(void *)(*(void *)&v17 + 16);
                  *(void *)atomic_ullong *volatile v280 = *(void *)(*(void *)&v17 + 8);
                  *(void *)&v280[8] = v79;
                  if (v79) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v79 + 8), 1u, memory_order_relaxed);
                  }
                  long long v80 = *(_OWORD *)(*(void *)&v17 + 24);
                  long long v81 = *(_OWORD *)(*(void *)&v17 + 56);
                  *(_OWORD *)v281 = *(_OWORD *)(*(void *)&v17 + 40);
                  *(_OWORD *)&v281[16] = v81;
                  *(_OWORD *)&v280[16] = v80;
                  turi::decode_image_inplace((turi *)v280, (turi::image_type *)v4);
                  if (*(void *)&v281[24] != 2) {
                    turi::flexible_type_impl::get_vec_visitor::operator()(turi::image_type const&)const::$_0::operator()();
                  }
                  if (*(void *)&v281[8])
                  {
                    unint64_t v83 = 0;
                    unint64_t v84 = (double *)v292.__r_.__value_.__l.__size_;
                    do
                    {
                      LOBYTE(v82) = *(unsigned char *)(*(void *)v280 + v83);
                      double v85 = (double)v82;
                      if ((unint64_t)v84 >= v292.__r_.__value_.__r.__words[2])
                      {
                        std::string::size_type v87 = (double *)v292.__r_.__value_.__r.__words[0];
                        uint64_t v88 = (uint64_t)((uint64_t)v84 - v292.__r_.__value_.__r.__words[0]) >> 3;
                        unint64_t v89 = v88 + 1;
                        if ((unint64_t)(v88 + 1) >> 61) {
                          std::vector<float>::__throw_length_error[abi:ne180100]();
                        }
                        int64_t v90 = v292.__r_.__value_.__r.__words[2] - v292.__r_.__value_.__r.__words[0];
                        if ((uint64_t)(v292.__r_.__value_.__r.__words[2] - v292.__r_.__value_.__r.__words[0]) >> 2 > v89) {
                          unint64_t v89 = v90 >> 2;
                        }
                        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v91 = v89;
                        }
                        if (v91)
                        {
                          unint64_t v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v292.__r_.__value_.__r.__words[2], v91);
                          unint64_t v84 = (double *)v292.__r_.__value_.__l.__size_;
                          std::string::size_type v87 = (double *)v292.__r_.__value_.__r.__words[0];
                        }
                        else
                        {
                          unint64_t v92 = 0;
                        }
                        long long v93 = (double *)&v92[8 * v88];
                        double *v93 = v85;
                        std::string::size_type v86 = (std::string::size_type)(v93 + 1);
                        while (v84 != v87)
                        {
                          unint64_t v94 = *((void *)v84-- - 1);
                          unint64_t v82 = v94;
                          *((void *)v93-- - 1) = v94;
                        }
                        v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
                        v292.__r_.__value_.__l.__size_ = v86;
                        v292.__r_.__value_.__r.__words[2] = (std::string::size_type)&v92[8 * v91];
                        if (v87) {
                          operator delete(v87);
                        }
                      }
                      else
                      {
                        double *v84 = v85;
                        std::string::size_type v86 = (std::string::size_type)(v84 + 1);
                      }
                      v292.__r_.__value_.__l.__size_ = v86;
                      ++v83;
                      unint64_t v84 = (double *)v86;
                    }
                    while (v83 < *(void *)&v281[8]);
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)&v280[8]);
                }
                unint64_t v95 = (void *)v18[1];
                if (v95)
                {
                  void v18[2] = (atomic_ullong)v95;
                  operator delete(v95);
                  v18[1] = 0;
                  void v18[2] = 0;
                  void v18[3] = 0;
                }
                *(std::string *)(v18 + 1) = v292;
                int64_t v2 = v268;
                goto LABEL_427;
              case 4:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 5:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 8:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 9:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                uint64_t v30 = *(atomic_ullong **)&v293;
                turi::flexible_type_impl::get_vec_visitor::operator()((uint64_t *)(*(void *)&v17 + 8), (double **)&v292, (unint64_t)v5);
                unint64_t v31 = (char *)operator new(0x30uLL);
                *((void *)v31 + 1) = 0;
                *((void *)v31 + 2) = 0;
                *(void *)unint64_t v31 = &unk_26D754C90;
                *(_OWORD *)(v31 + 24) = *(_OWORD *)&v292.__r_.__value_.__l.__data_;
                long long v277 = v31 + 24;
                long long v278 = (std::__shared_weak_count *)v31;
                *((void *)v31 + 5) = *((void *)&v292.__r_.__value_.__l + 2);
                memset(&v292, 0, sizeof(v292));
                uint64_t v32 = *(void *)(*(void *)&v17 + 40);
                if (v32 == 1)
                {
                  uint64_t v34 = *(void *)(*(void *)&v17 + 24);
                  uint64_t v33 = *(void *)(*(void *)&v17 + 32);
                  uint64_t v35 = (uint64_t *)operator new(0x10uLL);
                  *uint64_t v35 = v34;
                  v35[1] = v33;
                  v290 = v35 + 2;
                  uint64_t v291 = v35 + 2;
                }
                else
                {
                  uint64_t v97 = *(void *)(*(void *)&v17 + 24);
                  uint64_t v96 = *(void *)(*(void *)&v17 + 32);
                  uint64_t v35 = (uint64_t *)operator new(0x18uLL);
                  *uint64_t v35 = v97;
                  v35[1] = v96;
                  void v35[2] = v32;
                  v290 = v35 + 3;
                  uint64_t v291 = v35 + 3;
                }
                uint64_t v286 = 0;
                char v287 = 0;
                uint64_t v288 = 0;
                v289 = v35;
                turi::flexible_type_impl::ndarray<double>::ndarray(v280, &v277, (uint64_t)&v289, (uint64_t)&v286, 0);
                int64_t v2 = v268;
                if (v286)
                {
                  char v287 = (std::__shared_weak_count *)v286;
                  operator delete(v286);
                }
                if (v289)
                {
                  v290 = v289;
                  operator delete(v289);
                }
                if (v278) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v278);
                }
                if (v292.__r_.__value_.__r.__words[0])
                {
                  v292.__r_.__value_.__l.__size_ = v292.__r_.__value_.__r.__words[0];
                  operator delete(v292.__r_.__value_.__l.__data_);
                }
                long long v98 = *(_OWORD *)v280;
                *(_OWORD *)atomic_ullong *volatile v280 = 0uLL;
                long long v99 = (std::__shared_weak_count *)v30[2];
                *(_OWORD *)(v30 + 1) = v98;
                if (v99) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v99);
                }
                long long v100 = (void *)v30[3];
                if (v100)
                {
                  v30[4] = (atomic_ullong)v100;
                  operator delete(v100);
                  void v30[3] = 0;
                  v30[4] = 0;
                  v30[5] = 0;
                }
                uint64_t v70 = (void *)v30[6];
                *(_OWORD *)(v30 + 3) = *(_OWORD *)&v280[16];
                v30[5] = *(void *)v281;
                *(_OWORD *)&v280[16] = 0uLL;
                *(void *)v281 = 0;
                if (v70)
                {
                  v30[7] = (atomic_ullong)v70;
                  operator delete(v70);
                  v30[6] = 0;
                  v30[7] = 0;
                  v30[8] = 0;
                  uint64_t v70 = *(void **)&v280[16];
                }
                *((_OWORD *)v30 + 3) = *(_OWORD *)&v281[8];
                v30[8] = *(void *)&v281[24];
                memset(&v281[8], 0, 24);
                v30[9] = v282;
                if (v70) {
                  goto LABEL_206;
                }
                goto LABEL_207;
              default:
                goto LABEL_595;
            }
          case 9:
            double v11 = *(double *)v8;
            int64_t v12 = (char ***)(*(void *)&v11 + 8);
            switch(v295)
            {
              case 2:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                long long v101 = *(atomic_ullong **)&v293;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v280);
                turi::flexible_type_impl::ndarray<double>::print(v12, &v280[16]);
                std::stringbuf::str();
                *(void *)atomic_ullong *volatile v280 = v271;
                *(void *)&v280[*(void *)(v271 - 24)] = v270;
                *(void *)&v280[16] = v269;
                *(void *)&v280[24] = MEMORY[0x263F8C318] + 16;
                if (v284 < 0) {
LABEL_331:
                }
                  operator delete(v283);
LABEL_332:
                char v173 = (void **)(v101 + 1);
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x22A614E30](v285);
                if (*((char *)v101 + 31) < 0) {
                  operator delete(*v173);
                }
                long long v174 = *(_OWORD *)&v292.__r_.__value_.__l.__data_;
                v101[3] = v292.__r_.__value_.__r.__words[2];
                *(_OWORD *)char v173 = v174;
                goto LABEL_427;
              case 3:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                double v61 = (char *)(*(void *)&v293 + 8);
                if (*(void *)(*(void *)&v11 + 72)) {
                  goto LABEL_341;
                }
                uint64_t v63 = *(uint64_t **)(*(void *)&v11 + 24);
                uint64_t v62 = *(uint64_t **)(*(void *)&v11 + 32);
                uint64_t v64 = *(void **)(*(void *)&v11 + 8);
                if (v62 == v63 || v64 == 0)
                {
                  uint64_t v175 = 0;
                }
                else
                {
                  uint64_t v175 = 1;
                  do
                  {
                    uint64_t v176 = *v63++;
                    v175 *= v176;
                  }
                  while (v63 != v62);
                }
                if (v175 != (uint64_t)(v64[1] - *v64) >> 3
                  || turi::flexible_type_impl::ndarray<double>::last_index((void *)(*(void *)&v11 + 8)) != ((*v12)[1] - **v12) >> 3)
                {
LABEL_341:
                  if (!turi::flexible_type_impl::ndarray<double>::is_valid((void *)(*(void *)&v11 + 8))) {
                    turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
                  }
                  if (turi::flexible_type_impl::ndarray<double>::is_full((void *)(*(void *)&v11 + 8)))
                  {
                    turi::flexible_type_impl::ndarray<double>::ndarray(v280, *(void *)&v11 + 8);
LABEL_398:
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v280);
                    if (!turi::flexible_type_impl::ndarray<double>::is_full(v280)) {
                      turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
                    }
                    if (v61 != *(char **)v280) {
                      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v61, **(char ***)v280, *(void *)(*(void *)v280 + 8), (uint64_t)(*(void *)(*(void *)v280 + 8) - **(void **)v280) >> 3);
                    }
                    if (*(void *)&v281[8])
                    {
                      *(void *)&v281[16] = *(void *)&v281[8];
                      operator delete(*(void **)&v281[8]);
                    }
                    uint64_t v70 = *(void **)&v280[16];
                    if (*(void *)&v280[16])
                    {
LABEL_206:
                      *(void *)&v280[24] = v70;
                      operator delete(v70);
                    }
LABEL_207:
                    if (*(void *)&v280[8]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v280[8]);
                    }
                    goto LABEL_427;
                  }
                  memset(&v292, 0, sizeof(v292));
                  v290 = 0;
                  uint64_t v291 = 0;
                  uint64_t v286 = 0;
                  char v287 = 0;
                  uint64_t v288 = 0;
                  v289 = 0;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v280, (uint64_t)&v292, (uint64_t)&v289, (uint64_t)&v286, 0);
                  if (v286)
                  {
                    char v287 = (std::__shared_weak_count *)v286;
                    operator delete(v286);
                  }
                  if (v289)
                  {
                    v290 = v289;
                    operator delete(v289);
                  }
                  if (v292.__r_.__value_.__r.__words[0])
                  {
                    v292.__r_.__value_.__l.__size_ = v292.__r_.__value_.__r.__words[0];
                    operator delete(v292.__r_.__value_.__l.__data_);
                  }
                  atomic_ullong v282 = 0;
                  if (&v280[16] != (unsigned char *)(*(void *)&v11 + 24)) {
                    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v280[16], *(char **)(*(void *)&v11 + 24), *(void *)(*(void *)&v11 + 32), (uint64_t)(*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) >> 3);
                  }
                  uint64_t v178 = *(uint64_t **)(*(void *)&v11 + 24);
                  uint64_t v177 = *(uint64_t **)(*(void *)&v11 + 32);
                  if (v177 == v178 || !*v12)
                  {
                    unint64_t v179 = 0;
                  }
                  else
                  {
                    unint64_t v179 = 1;
                    do
                    {
                      uint64_t v180 = *v178++;
                      v179 *= v180;
                    }
                    while (v178 != v177);
                  }
                  std::vector<double>::resize(*(uint64_t *)v280, v179);
                  std::vector<unsigned long>::resize((uint64_t)&v281[8], (uint64_t)(*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) >> 3);
                  if (*(void *)&v280[24] == *(void *)&v280[16]
                    || *(void *)(*(void *)v280 + 8) == **(void **)v280)
                  {
                    goto LABEL_398;
                  }
                  std::vector<std::pair<unsigned long,unsigned long>>::vector(&v292, (uint64_t)(*(void *)(*(void *)&v11 + 56) - *(void *)(*(void *)&v11 + 48)) >> 3);
                  uint64_t v181 = *(void *)(*(void *)&v11 + 48);
                  uint64_t v182 = *(void *)(*(void *)&v11 + 56);
                  uint64_t v183 = (unint64_t *)v292.__r_.__value_.__r.__words[0];
                  uint64_t v184 = v182 - v181;
                  if (v182 != v181)
                  {
                    uint64_t v185 = 0;
                    unint64_t v186 = v184 >> 3;
                    if (v186 <= 1) {
                      unint64_t v186 = 1;
                    }
                    uint64_t v187 = (void *)(v292.__r_.__value_.__r.__words[0] + 8);
                    do
                    {
                      *(v187 - 1) = *(void *)(v181 + 8 * v185);
                      *uint64_t v187 = v185++;
                      v187 += 2;
                    }
                    while (v186 != v185);
                  }
                  unint64_t v188 = 126 - 2 * __clz((uint64_t)(v292.__r_.__value_.__l.__size_ - (void)v183) >> 4);
                  if ((unint64_t *)v292.__r_.__value_.__l.__size_ == v183) {
                    uint64_t v189 = 0;
                  }
                  else {
                    uint64_t v189 = v188;
                  }
                  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,false>(v292.__r_.__value_.__l.__size_, (unint64_t *)v292.__r_.__value_.__l.__size_, (uint64_t)v183, v183, (uint64_t)&v286, v189, 1);
                  std::string::size_type v190 = v292.__r_.__value_.__r.__words[0];
                  uint64_t v191 = *(void *)&v281[8];
                  *(void *)(*(void *)&v281[8] + 8 * *(void *)(v292.__r_.__value_.__r.__words[0] + 8)) = 1;
                  uint64_t v192 = *(void *)(*(void *)&v11 + 56) - *(void *)(*(void *)&v11 + 48);
                  if ((unint64_t)v192 >= 9)
                  {
                    unint64_t v193 = v192 >> 3;
                    uint64_t v194 = *(void *)&v280[16];
                    if (v193 <= 2) {
                      unint64_t v193 = 2;
                    }
                    unint64_t v195 = (uint64_t *)(v190 + 24);
                    unint64_t v196 = v193 - 1;
                    do
                    {
                      uint64_t v197 = *(void *)(v194 + 8 * *(v195 - 2)) * *(void *)(v191 + 8 * *(v195 - 2));
                      uint64_t v198 = *v195;
                      v195 += 2;
                      *(void *)(v191 + 8 * v198) = v197;
                      --v196;
                    }
                    while (v196);
                  }
                  unint64_t v199 = (uint64_t)(*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) >> 3;
                  uint64_t v286 = 0;
                  std::vector<unsigned long>::vector(&v289, v199, &v286);
                  uint64_t v200 = v289;
                  unint64_t v201 = v290;
                  uint64_t v202 = (char *)v290 - (char *)v289;
                  unint64_t v203 = v290 - v289;
                  unint64_t v204 = v203 - 1;
                  if (v203 <= 1) {
                    uint64_t v205 = 1;
                  }
                  else {
                    uint64_t v205 = v290 - v289;
                  }
                  unint64_t v206 = *(uint64_t **)&v281[8];
                  uint64_t v207 = **(void **)v280;
                  while (2)
                  {
                    if (v201 == v200)
                    {
                      uint64_t v215 = 0;
                      uint64_t v216 = *(void *)(**(void **)(*(void *)&v11 + 8) + 8
                                                                              * *(void *)(*(void *)&v11 + 72));
                    }
                    else
                    {
                      uint64_t v208 = 0;
                      uint64_t v209 = *(uint64_t **)(*(void *)&v11 + 48);
                      uint64_t v210 = v200;
                      uint64_t v211 = v205;
                      do
                      {
                        uint64_t v213 = *v210++;
                        uint64_t v212 = v213;
                        uint64_t v214 = *v209++;
                        v208 += v214 * v212;
                        --v211;
                      }
                      while (v211);
                      uint64_t v215 = 0;
                      uint64_t v216 = *(void *)(**(void **)(*(void *)&v11 + 8)
                                       + 8 * (*(void *)(*(void *)&v11 + 72) + v208));
                      uint64_t v217 = v200;
                      uint64_t v218 = v206;
                      uint64_t v219 = v205;
                      do
                      {
                        uint64_t v221 = *v217++;
                        uint64_t v220 = v221;
                        uint64_t v222 = *v218++;
                        v215 += v222 * v220;
                        --v219;
                      }
                      while (v219);
                    }
                    *(void *)(v207 + 8 * v215) = v216;
                    uint64_t v223 = v201 - v200;
                    unint64_t v224 = v203 - 1;
                    if (v202 < 1)
                    {
LABEL_387:
                      if ((v224 & 0x8000000000000000) != 0) {
                        goto LABEL_394;
                      }
                    }
                    else
                    {
                      uint64_t v225 = *(void *)(*(void *)&v11 + 24);
                      unint64_t v226 = v200[v204] + 1;
                      v200[v204] = v226;
                      if (v226 < *(void *)(v225 + 8 * v204))
                      {
                        uint64_t v223 = 1;
                        unint64_t v224 = v203 - 1;
                        goto LABEL_387;
                      }
                      uint64_t v227 = v225 - 16;
                      uint64_t v228 = v201 - v200;
                      uint64_t v229 = (unint64_t *)((char *)v200 + (v202 & 0xFFFFFFFFFFFFFFF8) - 16);
                      do
                      {
                        uint64_t v230 = v228 - 1;
                        v229[1] = 0;
                        if (v228 - 1 <= 0) {
                          goto LABEL_394;
                        }
                        unint64_t v231 = *v229 + 1;
                        *v229-- = v231;
                        unint64_t v232 = *(void *)(v227 + 8 * v228--);
                      }
                      while (v231 >= v232);
                      uint64_t v223 = 1;
                      if (v230 - 1 < 0)
                      {
LABEL_394:
                        if (v200)
                        {
                          v290 = v200;
                          operator delete(v200);
                        }
                        if (v292.__r_.__value_.__r.__words[0])
                        {
                          v292.__r_.__value_.__l.__size_ = v292.__r_.__value_.__r.__words[0];
                          operator delete(v292.__r_.__value_.__l.__data_);
                        }
                        goto LABEL_398;
                      }
                    }
                    if (!v223) {
                      goto LABEL_394;
                    }
                    continue;
                  }
                }
                if (!turi::flexible_type_impl::ndarray<double>::is_full((void *)(*(void *)&v11 + 8))) {
                  turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                }
                uint64_t v15 = *v12;
                if (v61 != (char *)*v12)
                {
                  uint64_t v71 = (uint64_t *)(v15 + 1);
                  goto LABEL_140;
                }
                break;
              case 4:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 5:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                goto LABEL_595;
              case 8:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                uint64_t v52 = *(atomic_ullong **)&v293;
                assert_msg(((*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) & 0xFFFFFFFFFFFFFFF7) == 16, "Cannot convert nd array to image");
                uint64_t v53 = *(unint64_t **)(*(void *)&v11 + 24);
                uint64_t v54 = (uint64_t)(*(void *)(*(void *)&v11 + 32) - (void)v53) >> 3;
                if (v54 == 3)
                {
                  unint64_t v55 = *v53;
                  unint64_t v56 = v53[1];
                  unint64_t v120 = v53[2];
                }
                else
                {
                  if (v54 == 2)
                  {
                    unint64_t v55 = *v53;
                    unint64_t v56 = v53[1];
                  }
                  else
                  {
                    unint64_t v55 = 0;
                    unint64_t v56 = 0;
                  }
                  unint64_t v120 = 1;
                }
                BOOL v122 = v120 == 4 || (v120 & 0xFFFFFFFFFFFFFFFDLL) == 1;
                assert_msg(v122, "Channels must be 1, 3 or 4");
                size_t v123 = v55 * v120 * v56;
                if (!v123)
                {
                  turi::image_type::image_type((turi::image_type *)v280, 0, v55, v56, v120, 0, 0, 2);
                  goto LABEL_280;
                }
                LOBYTE(v286) = 0;
                std::vector<unsigned char>::vector(&v292, v123, &v286);
                unint64_t v124 = (uint64_t)(*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) >> 3;
                uint64_t v286 = 0;
                std::vector<unsigned long>::vector(&v289, v124, &v286);
                uint64_t v125 = 0;
                size_t v126 = (char *)v289;
                unint64_t v127 = (char *)v290;
                while (2)
                {
                  uint64_t v128 = v127 - v126;
                  if (v127 == v126)
                  {
                    uint64_t v129 = 0;
                  }
                  else
                  {
                    uint64_t v129 = 0;
                    unint64_t v130 = v128 >> 3;
                    uint64_t v131 = *(uint64_t **)(*(void *)&v11 + 48);
                    if (v130 <= 1) {
                      unint64_t v130 = 1;
                    }
                    do
                    {
                      uint64_t v133 = *(void *)v126;
                      v126 += 8;
                      uint64_t v132 = v133;
                      uint64_t v134 = *v131++;
                      v129 += v134 * v132;
                      --v130;
                    }
                    while (v130);
                  }
                  *(unsigned char *)(v292.__r_.__value_.__r.__words[0] + v125) = (int)*(double *)(**(void **)(*(void *)&v11 + 8)
                                                                                        + 8
                                                                                        * (*(void *)(*(void *)&v11 + 72)
                                                                                         + v129));
                  size_t v126 = (char *)v289;
                  unint64_t v127 = (char *)v290;
                  uint64_t v135 = v290 - v289;
                  uint64_t v136 = v135 - 1;
                  if ((char *)v290 - (char *)v289 < 1) {
                    goto LABEL_273;
                  }
                  uint64_t v137 = *(void *)(*(void *)&v11 + 24);
                  unint64_t v138 = v289[v136] + 1;
                  v289[v136] = v138;
                  if (v138 < *(void *)(v137 + 8 * v136))
                  {
LABEL_272:
                    uint64_t v135 = 1;
LABEL_273:
                    if (v136 < 0) {
                      goto LABEL_275;
                    }
                    ++v125;
                    if (!v135) {
                      goto LABEL_275;
                    }
                    continue;
                  }
                  break;
                }
                uint64_t v139 = (unint64_t *)&v126[8 * v135 - 16];
                uint64_t v140 = v137 - 16;
                while (1)
                {
                  uint64_t v141 = v135 - 1;
                  v139[1] = 0;
                  if (v135 - 1 <= 0) {
                    break;
                  }
                  unint64_t v142 = *v139 + 1;
                  *v139-- = v142;
                  unint64_t v143 = *(void *)(v140 + 8 * v135--);
                  if (v142 < v143)
                  {
                    uint64_t v136 = v141 - 1;
                    goto LABEL_272;
                  }
                }
LABEL_275:
                turi::image_type::image_type((turi::image_type *)v280, v292.__r_.__value_.__l.__data_, v55, v56, v120, v292.__r_.__value_.__l.__size_ - v292.__r_.__value_.__r.__words[0], 0, 2);
                if (v289)
                {
                  v290 = v289;
                  operator delete(v289);
                }
                if (v292.__r_.__value_.__r.__words[0])
                {
                  v292.__r_.__value_.__l.__size_ = v292.__r_.__value_.__r.__words[0];
                  operator delete(v292.__r_.__value_.__l.__data_);
                }
LABEL_280:
                long long v144 = *(_OWORD *)v280;
                *(_OWORD *)atomic_ullong *volatile v280 = 0uLL;
                long long v145 = *(_OWORD *)(v52 + 1);
                *(_OWORD *)(v52 + 1) = v144;
                *(_OWORD *)&v292.__r_.__value_.__l.__data_ = v145;
                boost::detail::shared_count::~shared_count((atomic_uint **)&v292.__r_.__value_.__l.__size_);
                long long v146 = *(_OWORD *)&v280[16];
                long long v147 = *(_OWORD *)v281;
                *(_OWORD *)(v52 + 7) = *(_OWORD *)&v281[16];
                *(_OWORD *)(v52 + 5) = v147;
                *(_OWORD *)(v52 + 3) = v146;
                boost::detail::shared_count::~shared_count((atomic_uint **)&v280[8]);
                goto LABEL_427;
              case 9:
                if (**(void **)&v293 != 1) {
                  operator new();
                }
                uint64_t v57 = *(atomic_ullong **)&v293;
                atomic_ullong v59 = *(void *)(*(void *)&v11 + 8);
                atomic_ullong v58 = *(void *)(*(void *)&v11 + 16);
                if (v58) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v60 = (std::__shared_weak_count *)v57[2];
                v57[1] = v59;
                v57[2] = v58;
                if (v60) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v60);
                }
                if (v57 != *(atomic_ullong **)&v11)
                {
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v57 + 24, *(char **)(*(void *)&v11 + 24), *(void *)(*(void *)&v11 + 32), (uint64_t)(*(void *)(*(void *)&v11 + 32) - *(void *)(*(void *)&v11 + 24)) >> 3);
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v57 + 48, *(char **)(*(void *)&v11 + 48), *(void *)(*(void *)&v11 + 56), (uint64_t)(*(void *)(*(void *)&v11 + 56) - *(void *)(*(void *)&v11 + 48)) >> 3);
                }
                v57[9] = *(void *)(*(void *)&v11 + 72);
                goto LABEL_427;
              default:
                goto LABEL_595;
            }
            break;
          default:
            turi::flexible_type_fail(0);
            __break(1u);
            return;
        }
      }
LABEL_427:
      uint64_t v5 = *(atomic_ullong **)&v293;
      *(double *)(*v2 + 8 * v7++) = v293;
      uint64_t v6 = *v272;
    }
    while (v7 < (v272[1] - *v272) >> 4);
    switch(v295)
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v293, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v256 = *(atomic_ullong **)&v293;
          if (v293 != 0.0)
          {
            if (*(char *)(*(void *)&v293 + 31) < 0) {
              operator delete(*(void **)(*(void *)&v293 + 8));
            }
            long long v257 = v256;
            uint64_t v258 = 0x1012C404EF22A49;
            goto LABEL_506;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v293, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          long long v265 = *(atomic_ullong **)&v293;
          if (v293 != 0.0)
          {
            long long v266 = *(void **)(*(void *)&v293 + 8);
            if (v266)
            {
              *(void *)(*(void *)&v293 + 16) = v266;
              operator delete(v266);
            }
            long long v257 = v265;
            uint64_t v258 = 0x1080C409938AC02;
            goto LABEL_506;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v293, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v259 = *(atomic_ullong **)&v293;
          if (v293 != 0.0)
          {
            *(void *)atomic_ullong *volatile v280 = *(void *)&v293 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v280);
            goto LABEL_501;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v293, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v259 = *(atomic_ullong **)&v293;
          if (v293 != 0.0)
          {
            *(void *)atomic_ullong *volatile v280 = *(void *)&v293 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v280);
LABEL_501:
            long long v257 = v259;
            uint64_t v258 = 0x1020C405E66F15BLL;
            goto LABEL_506;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v293, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unsigned int v267 = *(atomic_ullong **)&v293;
          if (v293 != 0.0)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v293 + 16));
            long long v257 = v267;
            unsigned int v264 = -235920773;
            goto LABEL_505;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v293, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v260 = *(atomic_ullong **)&v293;
          if (v293 != 0.0)
          {
            uint64_t v261 = *(void **)(*(void *)&v293 + 48);
            if (v261)
            {
              *(void *)(*(void *)&v293 + 56) = v261;
              operator delete(v261);
            }
            uint64_t v262 = (void *)v260[3];
            if (v262)
            {
              v260[4] = (atomic_ullong)v262;
              operator delete(v262);
            }
            uint64_t v263 = (std::__shared_weak_count *)v260[2];
            if (v263) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v263);
            }
            long long v257 = v260;
            unsigned int v264 = 2071181815;
LABEL_505:
            uint64_t v258 = v264 | 0x1030C4000000000;
LABEL_506:
            MEMORY[0x22A614FA0](v257, v258);
          }
        }
        break;
      default:
        return;
    }
  }
}

void sub_223E8B594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v34 = *(void **)(v31 + 336);
  if (v34)
  {
    *(void *)(v31 + 344) = v34;
    operator delete(v34);
  }
  *(void *)(v31 + 336) = &a25;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 160));
  switch(*(unsigned char *)(v32 - 124))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v31 + 360), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v35 = *(void *)(v31 + 360);
      if (!v35) {
        goto LABEL_29;
      }
      if (*(char *)(v35 + 31) < 0) {
        operator delete(*(void **)(v35 + 8));
      }
      unsigned int v36 = (void *)v35;
      uint64_t v37 = 0x1012C404EF22A49;
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v31 + 360), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v41 = *(void **)(v31 + 360);
      if (!v41) {
        goto LABEL_29;
      }
      std::string::size_type v42 = (void *)v41[1];
      if (v42)
      {
        v41[2] = v42;
        operator delete(v42);
      }
      unsigned int v36 = v41;
      uint64_t v37 = 0x1080C409938AC02;
      goto LABEL_28;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v31 + 360), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v38 = *(void **)(v31 + 360);
      if (!v38) {
        goto LABEL_29;
      }
      *(void *)(v31 + 312) = v38 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 184));
      goto LABEL_23;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v31 + 360), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v38 = *(void **)(v31 + 360);
      if (!v38) {
        goto LABEL_29;
      }
      *(void *)(v31 + 312) = v38 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 184));
LABEL_23:
      unsigned int v36 = v38;
      uint64_t v37 = 0x1020C405E66F15BLL;
      goto LABEL_28;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v31 + 360), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v43 = *(void *)(v31 + 360);
      if (!v43) {
        goto LABEL_29;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v43 + 16));
      unsigned int v36 = (void *)v43;
      unsigned int v40 = -235920773;
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v31 + 360), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v39 = *(void **)(v31 + 360);
      if (!v39) {
        goto LABEL_29;
      }
      unsigned int v36 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v39);
      unsigned int v40 = 2071181815;
LABEL_27:
      uint64_t v37 = v40 | 0x1030C4000000000;
LABEL_28:
      MEMORY[0x22A614FA0](v36, v37);
LABEL_29:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_29;
  }
}

uint64_t turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::approx_equality_operator,std::vector<turi::flexible_type>>::operator()<std::vector<turi::flexible_type> const>(uint64_t a1, uint64_t *a2)
{
  int64_t v2 = *(void **)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3 - *a2 != v2[1] - *v2) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  unint64_t v6 = 0;
LABEL_4:
  uint64_t v7 = *v2 + 16 * v6;
  uint64_t v8 = (unsigned __int8 *)(v4 + 16 * v6);
  switch(*(unsigned char *)(v7 + 12))
  {
    case 0:
      switch(v8[12])
      {
        case 0u:
          if (*(void *)v8 != *(void *)v7) {
            return 0;
          }
          goto LABEL_104;
        case 1u:
          double v9 = *(double *)v8;
          uint64_t v10 = *(void *)v7;
          goto LABEL_73;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (*(void *)v7 != (uint64_t)(*(void *)v8 << 8) >> 8 || *((_DWORD *)v8 + 2)) {
            return 0;
          }
          goto LABEL_104;
        default:
          goto LABEL_111;
      }
    case 1:
      switch(v8[12])
      {
        case 0u:
          double v9 = *(double *)v7;
          uint64_t v10 = *(void *)v8;
LABEL_73:
          double v75 = (double)v10;
          goto LABEL_74;
        case 1u:
          double v9 = *(double *)v8;
          double v75 = *(double *)v7;
LABEL_74:
          if (v9 != v75) {
            return 0;
          }
          goto LABEL_104;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          double v76 = vabdd_f64((double)*((int *)v8 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v8 << 8) >> 8), *(double *)v7);
          goto LABEL_82;
        default:
          goto LABEL_111;
      }
    case 2:
      unsigned int v11 = v8[12];
      if (v11 == 2)
      {
        double v12 = *(double *)v8;
        int v13 = *(char *)(*(void *)v8 + 31);
        size_t v14 = *(unsigned __int8 *)(*(void *)v8 + 31);
        if (v13 < 0) {
          size_t v15 = *(void *)(*(void *)&v12 + 16);
        }
        else {
          size_t v15 = v14;
        }
        double v77 = *(double *)v7;
        if (*(char *)(*(void *)&v77 + 31) < 0) {
          uint64_t v78 = *(void *)(*(void *)&v77 + 16);
        }
        else {
          uint64_t v78 = *(unsigned __int8 *)(*(void *)&v77 + 31);
        }
        if (v15 == v78)
        {
          uint64_t v79 = (unsigned __int8 *)(*(void *)&v12 + 8);
          if ((v14 & 0x80) != 0) {
            uint64_t v79 = *(unsigned __int8 **)v79;
          }
          long long v80 = (unsigned __int8 *)(*(void *)&v77 + 8);
          if ((*(unsigned char *)(*(void *)&v77 + 31) & 0x80) != 0) {
            long long v80 = *(unsigned __int8 **)v80;
          }
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp(v79, v80, v15)) {
              goto LABEL_104;
            }
          }
          else
          {
            if (!v15) {
              goto LABEL_104;
            }
            while (*v79 == *v80)
            {
              ++v79;
              ++v80;
              if (!--v15) {
                goto LABEL_104;
              }
            }
          }
        }
        return 0;
      }
      if (v11 <= 9 && v11 != 2) {
        return 0;
      }
      goto LABEL_111;
    case 3:
      unsigned int v16 = v8[12];
      if (v16 == 3)
      {
        double v17 = *(double *)v7;
        unint64_t v18 = *(double **)(*(void *)v8 + 8);
        unsigned __int16 v19 = *(double **)(*(void *)v8 + 16);
        unint64_t v20 = v19 - v18;
        uint64_t v22 = *(void *)&v17 + 8;
        double v21 = *(double **)(*(void *)&v17 + 8);
        if (v20 == (uint64_t)(*(void *)(v22 + 8) - (void)v21) >> 3)
        {
          if (v19 == v18) {
            goto LABEL_104;
          }
          uint64_t v23 = v20 <= 1 ? 1 : v19 - v18;
          if (*v18 == *v21)
          {
            uint64_t v24 = 1;
            do
            {
              unint64_t v25 = v24;
              if (v23 == v24) {
                break;
              }
              double v26 = v18[v24];
              double v27 = v21[v24++];
            }
            while (v26 == v27);
            if (v25 >= v20) {
              goto LABEL_104;
            }
          }
        }
        return 0;
      }
      if (v16 <= 9 && v16 != 3) {
        return 0;
      }
      goto LABEL_111;
    case 4:
      uint64_t v28 = *(void *)v7 + 8;
      int64_t v90 = &v88;
      unint64_t v91 = (uint64_t *)v28;
      unsigned int v29 = v8[12];
      if (v29 == 4)
      {
        if (turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::approx_equality_operator,std::vector<turi::flexible_type>>::operator()<std::vector<turi::flexible_type> const>(&v90, *(void *)v8 + 8))goto LABEL_104; {
      }
        }
      else if (v29 > 9 || v29 == 4)
      {
LABEL_111:
        turi::flexible_type_fail(BOOL)::$_0::operator()();
      }
      return 0;
    case 5:
      unsigned int v30 = v8[12];
      if (v30 == 5)
      {
        double v31 = *(double *)v7;
        uint64_t v32 = *(uint64_t **)(*(void *)v8 + 8);
        uint64_t v33 = *(uint64_t **)(*(void *)v8 + 16);
        if ((char *)v33 - (char *)v32 == *(void *)(*(void *)&v31 + 16) - *(void *)(*(void *)&v31 + 8))
        {
          std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)&v90, v32, v33);
          std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)v89, *(uint64_t **)(*(void *)&v31 + 8), *(uint64_t **)(*(void *)&v31 + 16));
          char v34 = std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::flexible_type>>>(&v90, v89);
          std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v89);
          std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&v90);
          if (v34) {
            goto LABEL_104;
          }
        }
        return 0;
      }
      if (v30 <= 9 && v30 != 5) {
        return 0;
      }
      goto LABEL_111;
    case 6:
      switch(v8[12])
      {
        case 0u:
          if (*(void *)v8 != (uint64_t)(*(void *)v7 << 8) >> 8 || *(_DWORD *)(v7 + 8)) {
            return 0;
          }
          goto LABEL_104;
        case 1u:
          double v76 = vabdd_f64(*(double *)v8, (double)*(int *)(v7 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v7 << 8) >> 8));
LABEL_82:
          if (v76 >= 0.0000005) {
            return 0;
          }
          goto LABEL_104;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (((*(void *)v7 ^ *(void *)v8) & 0xFFFFFFFFFFFFFFLL) != 0 || *((_DWORD *)v8 + 2) != *(_DWORD *)(v7 + 8)) {
            return 0;
          }
          goto LABEL_104;
        default:
          goto LABEL_111;
      }
    case 7:
      unsigned int v35 = v8[12];
      if (v35 == 7) {
        goto LABEL_104;
      }
      if (v35 <= 9 && v35 != 7) {
        return 0;
      }
      goto LABEL_111;
    case 8:
      unsigned int v36 = v8[12];
      if (v36 == 8)
      {
        if (turi::image_type::operator==(*(void *)v8 + 8, *(void *)v7 + 8)) {
          goto LABEL_104;
        }
        return 0;
      }
      if (v36 <= 9 && v36 != 8) {
        return 0;
      }
      goto LABEL_111;
    case 9:
      unsigned int v37 = v8[12];
      if (v37 == 9)
      {
        double v38 = *(double *)v7;
        uint64_t v39 = *(void **)v8;
        if (*(void *)v7 == *(void *)v8) {
          goto LABEL_104;
        }
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v39 + 1), *(void *)&v38 + 8)) {
          return 0;
        }
        uint64_t v41 = (char *)v39[3];
        unsigned int v40 = (char *)v39[4];
        uint64_t v42 = v40 - v41;
        if (v40 == v41) {
          goto LABEL_104;
        }
        if (!v39[1]) {
          goto LABEL_104;
        }
        uint64_t v43 = 1;
        do
        {
          uint64_t v44 = *(void *)v41;
          v41 += 8;
          v43 *= v44;
        }
        while (v41 != v40);
        if (!v43) {
          goto LABEL_104;
        }
        v89[0] = 0;
        std::vector<unsigned long>::vector(&v90, v42 >> 3, v89);
        uint64_t v45 = (uint64_t *)v90;
        unint64_t v46 = v91;
        uint64_t v47 = **(void **)(*(void *)&v38 + 8);
        uint64_t v48 = (char *)v91 - v90;
        unint64_t v49 = ((char *)v91 - v90) >> 3;
        unint64_t v50 = v49 - 1;
        if (v49 <= 1) {
          uint64_t v51 = 1;
        }
        else {
          uint64_t v51 = ((char *)v91 - v90) >> 3;
        }
        while (1)
        {
          if (v46 == v45)
          {
            uint64_t v59 = 0;
            double v60 = *(double *)(*(void *)v39[1] + 8 * v39[9]);
          }
          else
          {
            uint64_t v52 = 0;
            uint64_t v53 = (uint64_t *)v39[6];
            uint64_t v54 = v45;
            uint64_t v55 = v51;
            do
            {
              uint64_t v57 = *v54++;
              uint64_t v56 = v57;
              uint64_t v58 = *v53++;
              v52 += v58 * v56;
              --v55;
            }
            while (v55);
            uint64_t v59 = 0;
            double v60 = *(double *)(*(void *)v39[1] + 8 * (v39[9] + v52));
            double v61 = *(uint64_t **)(*(void *)&v38 + 48);
            uint64_t v62 = v45;
            uint64_t v63 = v51;
            do
            {
              uint64_t v65 = *v62++;
              uint64_t v64 = v65;
              uint64_t v66 = *v61++;
              v59 += v66 * v64;
              --v63;
            }
            while (v63);
          }
          double v67 = *(double *)(v47 + 8 * (*(void *)(*(void *)&v38 + 72) + v59));
          if (v60 != v67)
          {
LABEL_68:
            if (v45)
            {
              unint64_t v91 = v45;
              operator delete(v45);
            }
            if (v60 == v67) {
              goto LABEL_104;
            }
            return 0;
          }
          uint64_t v68 = v49;
          uint64_t v69 = v49 - 1;
          if (v48 >= 1)
          {
            uint64_t v70 = v39[3];
            unint64_t v71 = v45[v50] + 1;
            v45[v50] = v71;
            unint64_t v72 = (v48 & 0xFFFFFFFFFFFFFFF8) - 16;
            uint64_t v69 = v49 - 1;
            if (v71 >= *(void *)(v70 + 8 * v50))
            {
              while (1)
              {
                *(uint64_t *)((char *)v45 + v72 + 8) = 0;
                if (v69 <= 0) {
                  break;
                }
                --v69;
                unint64_t v73 = *(uint64_t *)((char *)v45 + v72) + 1;
                *(uint64_t *)((char *)v45 + v72) = v73;
                unint64_t v74 = *(void *)(v70 + v72);
                v72 -= 8;
                if (v73 < v74)
                {
                  uint64_t v68 = 1;
                  goto LABEL_66;
                }
              }
              unint64_t v91 = v45;
              operator delete(v45);
LABEL_104:
              ++v6;
              uint64_t v4 = *a2;
              if (v6 >= (a2[1] - *a2) >> 4) {
                return 1;
              }
              goto LABEL_4;
            }
            uint64_t v68 = 1;
            uint64_t v69 = v49 - 1;
          }
LABEL_66:
          if (v69 < 0 || !v68) {
            goto LABEL_68;
          }
        }
      }
      if (v37 >= 9) {
        goto LABEL_111;
      }
      return 0;
    default:
      goto LABEL_111;
  }
}

void sub_223E8C314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t boost::multiprecision::detail::check_shift_range<int>(uint64_t result)
{
  if ((result & 0x80000000) != 0)
  {
    std::logic_error::logic_error(&v1, "Can not shift by a negative value.");
    v1.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    boost::exception_detail::throw_exception_<std::out_of_range>(&v1, (uint64_t)"void boost::multiprecision::detail::check_shift_range(V, const mpl::false_ &, const mpl::true_ &) [V = int]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/multiprecision/detail/number_base.hpp", 1510);
  }
  return result;
}

void sub_223E8C450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
}

void boost::exception_detail::throw_exception_<std::out_of_range>(std::logic_error *a1, uint64_t a2, uint64_t a3, int a4)
{
  std::logic_error::logic_error(&v7, a1);
  v7.__vftable = (std::logic_error_vtbl *)&unk_26D757098;
  uint64_t v8 = &unk_26D7570C0;
  uint64_t v9 = 0;
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  int v12 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<std::out_of_range>>((uint64_t)&v7);
}

void sub_223E8C4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v11);
  std::logic_error::~logic_error(&a10);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::exception_detail::error_info_injector<std::out_of_range>>(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v4, (const std::logic_error *)a1);
  v4.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = &unk_26D754388;
  uint64_t v6 = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  long long v7 = *(_OWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 48);
  v4.__vftable = (std::logic_error_vtbl *)&unk_26D757098;
  uint64_t v5 = &unk_26D7570C0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::clone_impl((uint64_t)exception, (uint64_t)&v4);
}

void sub_223E8C654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, uint64_t a11)
{
  std::logic_error::~logic_error(&a10);
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = &unk_26D756FF8;
  *(void *)(a1 + 16) = &unk_26D757030;
  *(void *)(a1 + 56) = &unk_26D757068;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  std::logic_error v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26D754388;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D756FF8;
  *(void *)(a1 + 16) = &unk_26D757030;
  *(void *)(a1 + 56) = &unk_26D757068;
  return a1;
}

void sub_223E8C83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::clone()
{
}

void sub_223E8C8D8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::clone_impl((uint64_t)exception, a1);
}

void sub_223E8C944(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::rethrow(void *a1)
{
}

void sub_223E8CAB0(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

void turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash128_visitor>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  switch(*((unsigned char *)a1 + 12))
  {
    case 0:
      uint64_t v3 = *a1;
      goto LABEL_4;
    case 1:
      uint64_t v3 = *a1;
LABEL_4:
      unint64_t v4 = 0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v3) ^ ((0xC6A4A7935BD1E995 * v3) >> 47));
      uint64_t v5 = 0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * (v3 ^ 0x6E626E7774E95A48)) ^ ((0xC6A4A7935BD1E995 * (v3 ^ 0x6E626E7774E95A48)) >> 47))) ^ v4);
      goto LABEL_26;
    case 2:
      uint64_t v6 = *a1;
      int v7 = *(char *)(*a1 + 31);
      if (v7 < 0)
      {
        uint64_t v8 = *(uint64_t **)(v6 + 8);
        unint64_t v9 = *(void *)(v6 + 16);
      }
      else
      {
        uint64_t v8 = (uint64_t *)(v6 + 8);
        unint64_t v9 = v7;
      }
      if (v9 < 0x10)
      {
        unint64_t v43 = 0xC3A5C85C97CB3127;
        uint64_t v44 = 0xB492B66FBE98F273;
      }
      else
      {
        unint64_t v43 = *v8;
        uint64_t v44 = v8[1] - 0x3C5A37A36834CED9;
        v8 += 2;
        v9 -= 16;
      }
      *a2 = turi::cityhash_local::CityHash128WithSeed(v8, v9, v43, v44);
      a2[1] = v45;
      return;
    case 3:
      uint64_t v10 = *a1;
      uint64_t v11 = *(uint64_t **)(*a1 + 8);
      uint64_t v12 = *(void *)(v10 + 16);
      goto LABEL_22;
    case 4:
      uint64_t v13 = *a1 + 8;
      turi::flexible_type_impl::city_hash128_visitor::operator()(a1, v13);
      return;
    case 5:
      size_t v14 = (uint64_t *)(*a1 + 8);
      turi::flexible_type_impl::city_hash128_visitor::operator()(v14, a2);
      return;
    case 6:
      uint64_t v15 = *a1;
      uint64_t v16 = *((int *)a1 + 2);
      unint64_t v17 = 0xC6A4A7935BD1E995 * ((*a1 << 8 >> 8) ^ 0x6E626E7774E95A48);
      unint64_t v18 = (0xC6A4A7935BD1E995 * (*a1 << 8 >> 8)) ^ ((0xC6A4A7935BD1E995 * (*a1 << 8 >> 8)) >> 47);
      unint64_t v19 = (0xC6A4A7935BD1E995 * (v17 ^ (v17 >> 47))) ^ (0xC6A4A7935BD1E995 * v18);
      boost::multiprecision::detail::check_shift_range<int>(64);
      uint64_t v20 = -25;
      if (v15 >> 56 < 0) {
        uint64_t v20 = 25;
      }
      uint64_t v21 = v20 + (v15 >> 56);
      unint64_t v22 = (0xC6A4A7935BD1E995 * v21) ^ ((0xC6A4A7935BD1E995 * v21) >> 47);
      unint64_t v23 = (0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * (v21 ^ 0x6E626E7774E95A48)) ^ ((0xC6A4A7935BD1E995
                                                                      * (v21 ^ 0x6E626E7774E95A48)) >> 47))) ^ (0xC6A4A7935BD1E995 * v22);
      boost::multiprecision::detail::check_shift_range<int>(64);
      uint64_t v24 = 5
          * __ROR8__((0x4CF5AD432745937FLL * ((0x23994FF200000000 * v19) | ((0x309B56691CCA7F9 * v19) >> 31))) ^ 0x5B73FF027F14F66ALL, 27)- 0x36BC04F331BA48C5;
      uint64_t v25 = 5
          * (v24
           + __ROR8__((0x87C37B91114253D5 * ((0x5F3637F580000000 * v18) | ((0x60004CFCBE6C6FEBLL * v18) >> 33))) ^ 0x5B73FF027F14F66ALL, 31))+ 944331445;
      uint64_t v26 = 5
          * (v25
           + __ROR8__(v24 ^ (0x4CF5AD432745937FLL * ((0x23994FF200000000 * v23) | ((0x309B56691CCA7F9 * v23) >> 31))), 27))+ 1390208809;
      uint64_t v27 = 5 * (v26 + __ROR8__(v25 ^ (0xBD3698860E184F87 * v22), 31)) + 944331445;
      boost::multiprecision::detail::check_shift_range<int>(64);
      unint64_t v28 = 0xC6A4A7935BD1E995 * (v16 ^ 0x6E626E7774E95A48);
      unint64_t v29 = (0xC6A4A7935BD1E995 * v16) ^ ((0xC6A4A7935BD1E995 * v16) >> 47);
      unint64_t v30 = (0xC6A4A7935BD1E995 * (v28 ^ (v28 >> 47))) ^ (0xC6A4A7935BD1E995 * v29);
      boost::multiprecision::detail::check_shift_range<int>(64);
      uint64_t v31 = 5
          * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * v27) | ((0x87C37B91114253D5 * v27) >> 31))) ^ 0x5B73FF027F14F66ALL, 27)- 0x36BC04F331BA48C5;
      uint64_t v32 = 5
          * (v31
           + __ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v26) | ((unint64_t)(0x4CF5AD432745937FLL * v26) >> 33))) ^ 0x5B73FF027F14F66ALL, 31))+ 944331445;
      unint64_t v4 = 5
         * (v32
          + __ROR8__(v31 ^ (0x4CF5AD432745937FLL * ((0x23994FF200000000 * v30) | ((0x309B56691CCA7F9 * v30) >> 31))), 27))+ 1390208809;
      uint64_t v5 = 5 * (v4 + __ROR8__(v32 ^ (0xBD3698860E184F87 * v29), 31)) + 944331445;
      goto LABEL_26;
    case 7:
      *a2 = 0;
      a2[1] = 0;
      return;
    case 8:
      uint64_t v33 = *a1;
      char v34 = *(atomic_uint **)(*a1 + 16);
      unint64_t v46 = v34;
      if (v34) {
        atomic_fetch_add_explicit(v34 + 2, 1u, memory_order_relaxed);
      }
      long long v35 = *(_OWORD *)(v33 + 24);
      long long v36 = *(_OWORD *)(v33 + 40);
      long long v49 = *(_OWORD *)(v33 + 56);
      long long v48 = v36;
      long long v47 = v35;
      *a2 = 0;
      a2[1] = 0;
      boost::detail::shared_count::~shared_count(&v46);
      return;
    case 9:
      uint64_t v37 = *(void *)(*a1 + 8);
      uint64_t v11 = *(uint64_t **)v37;
      uint64_t v12 = *(void *)(v37 + 8);
LABEL_22:
      unint64_t v38 = v12 - (void)v11;
      unint64_t v39 = v38 - 16;
      if (v38 < 0x10)
      {
        unint64_t v39 = v38;
        unint64_t v40 = 0xC3A5C85C97CB3127;
        uint64_t v41 = 0xB492B66FBE98F273;
      }
      else
      {
        unint64_t v40 = *v11;
        uint64_t v41 = v11[1] - 0x3C5A37A36834CED9;
        v11 += 2;
      }
      unint64_t v4 = turi::cityhash_local::CityHash128WithSeed(v11, v39, v40, v41);
      uint64_t v5 = v42;
LABEL_26:
      boost::multiprecision::detail::check_shift_range<int>(64);
      *a2 = v4;
      a2[1] = v5;
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

unint64_t turi::cityhash_local::CityHash128WithSeed(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 <= 0x7F)
  {
    if (a2 > 0x10)
    {
      unint64_t v64 = 0x9DDFEA08EB382D69 * ((*(uint64_t *)((char *)a1 + a2 - 8) - 0x4B6D499041670D8DLL) ^ a3);
      unint64_t v11 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (a3 ^ (v64 >> 47) ^ v64)) ^ ((0x9DDFEA08EB382D69 * (a3 ^ (v64 >> 47) ^ v64)) >> 47));
      unint64_t v65 = 0x9DDFEA08EB382D69
          * ((v11 + *(uint64_t *)((char *)a1 + a2 - 16)) ^ ((0x9DDFEA08EB382D69
                                                          * ((v11 + *(uint64_t *)((char *)a1 + a2 - 16)) ^ (a4 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v11 + *(uint64_t *)((char *)a1 + a2 - 16)) ^ (a4 + a2))));
      unint64_t v66 = 0x9DDFEA08EB382D69 * (v65 ^ (v65 >> 47));
      unint64_t v4 = v66 + a3;
      unint64_t v67 = a2 + 16;
      do
      {
        uint64_t v68 = *a1;
        uint64_t v69 = a1[1];
        a1 += 2;
        unint64_t v4 = 0xB492B66FBE98F273
           * ((0xB492B66FBE98F273 * ((0xB492B66FBE98F273 * v68) ^ ((0xB492B66FBE98F273 * v68) >> 47))) ^ v4);
        a4 ^= v4;
        unint64_t v11 = 0xB492B66FBE98F273
            * ((0xB492B66FBE98F273 * ((0xB492B66FBE98F273 * v69) ^ ((0xB492B66FBE98F273 * v69) >> 47))) ^ v11);
        v66 ^= v11;
        v67 -= 16;
      }
      while (v67 > 0x20);
      goto LABEL_21;
    }
    unint64_t v4 = 0xB492B66FBE98F273 * ((0xB492B66FBE98F273 * a3) ^ ((0xB492B66FBE98F273 * a3) >> 47));
    uint64_t v5 = 0x9AE16A3B2F90404FLL;
    if (a2 > 7)
    {
      uint64_t v6 = 2 * a2 - 0x651E95C4D06FBFB1;
      uint64_t v7 = *a1;
      uint64_t v8 = *a1 - 0x651E95C4D06FBFB1;
      uint64_t v9 = v8 + __ROR8__(*(uint64_t *)((char *)a1 + a2 - 8), 37) * v6;
      uint64_t v10 = (__ROR8__(v8, 25) + *(uint64_t *)((char *)a1 + a2 - 8)) * v6;
      unint64_t v11 = 0xB492B66FBE98F273 * a4
          + (((v10 ^ (((v10 ^ (unint64_t)v9) * v6) >> 47) ^ ((v10 ^ v9) * v6)) * v6) ^ (((v10 ^ (((v10 ^ (unint64_t)v9) * v6) >> 47) ^ ((v10 ^ v9) * v6))
                                                                                              * v6) >> 47))
          * v6;
LABEL_20:
      unint64_t v66 = (v7 + v4) ^ ((v7 + v4) >> 47);
LABEL_21:
      unint64_t v73 = 0x9DDFEA08EB382D69
          * (v11 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v4)));
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (a4 ^ ((0x9DDFEA08EB382D69 * (v66 ^ a4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v66 ^ a4)))) ^ ((0x9DDFEA08EB382D69 * (a4 ^ ((0x9DDFEA08EB382D69 * (v66 ^ a4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v66 ^ a4)))) >> 47))) ^ (0x9DDFEA08EB382D69 * (v73 ^ (v73 >> 47)));
    }
    if (a2 < 4)
    {
      if (!a2)
      {
LABEL_19:
        unint64_t v11 = v5 - 0x4B6D499041670D8DLL * a4;
        uint64_t v7 = v11;
        goto LABEL_20;
      }
      unint64_t v72 = (0xC3A5C85C97CB3127 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
    }
    else
    {
      uint64_t v5 = 2 * a2 - 0x651E95C4D06FBFB1;
      uint64_t v70 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v71 = ((a2 + 8 * *(unsigned int *)a1) ^ v70) * v5;
      unint64_t v72 = (v70 ^ (v71 >> 47) ^ v71) * v5;
    }
    v5 *= v72 ^ (v72 >> 47);
    goto LABEL_19;
  }
  unint64_t v12 = 0xB492B66FBE98F273 * a2;
  uint64_t v13 = *a1 - 0x4B6D499041670D8DLL * __ROR8__(a4 ^ 0xB492B66FBE98F273, 49);
  uint64_t v14 = a1[1] - 0x4B6D499041670D8DLL * __ROR8__(v13, 42);
  unint64_t v15 = a3 - 0x4B6D499041670D8DLL * __ROR8__(a4 - 0x4B6D499041670D8DLL * a2, 35);
  unint64_t v16 = 0xB492B66FBE98F273 * __ROR8__(a1[11] + a3, 53);
  unint64_t v17 = a1 + 8;
  for (unint64_t i = a2; i > 0x7F; i -= 128)
  {
    uint64_t v19 = *(v17 - 7);
    uint64_t v20 = *(v17 - 2);
    uint64_t v21 = *(v17 - 1);
    unint64_t v22 = (0xB492B66FBE98F273 * __ROR8__(v13 + a3 + a4 + v19, 37)) ^ v16;
    uint64_t v23 = *(v17 - 3);
    uint64_t v24 = v23 + v13 - 0x4B6D499041670D8DLL * __ROR8__(a4 + v14 + v20, 42);
    unint64_t v25 = 0xB492B66FBE98F273 * __ROR8__(v15 + v12, 33);
    uint64_t v26 = *(v17 - 6);
    uint64_t v27 = *(v17 - 5);
    uint64_t v28 = *(v17 - 8) - 0x4B6D499041670D8DLL * v14;
    uint64_t v29 = v28 + v19 + v26;
    uint64_t v30 = __ROR8__(v29, 44);
    uint64_t v31 = v29 + v27;
    uint64_t v32 = v30 + v28 + __ROR8__(v28 + v15 + v27 + v22, 21);
    unint64_t v33 = v25 + v16 + *(v17 - 4);
    uint64_t v34 = __ROR8__(v33 + v23 + v20, 44);
    uint64_t v35 = v33 + v23 + v20 + v21;
    unint64_t v36 = v34 + v33 + __ROR8__(v24 + v26 + v33 + v21, 21);
    uint64_t v37 = v17[1];
    uint64_t v38 = v17[6];
    uint64_t v39 = v17[7];
    unint64_t v12 = (0xB492B66FBE98F273 * __ROR8__(v24 + v25 + v31 + v37, 37)) ^ v36;
    uint64_t v40 = v17[5];
    a4 = v40 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v32 + v24 + v38, 42);
    uint64_t v41 = v35 + v22;
    uint64_t v42 = v12 + v35;
    uint64_t v44 = v17[2];
    uint64_t v43 = v17[3];
    uint64_t v45 = *v17 - 0x4B6D499041670D8DLL * v32;
    uint64_t v46 = v42 + v45 + v43;
    uint64_t v47 = v45 + v37 + v44;
    uint64_t v13 = v47 + v43;
    uint64_t v48 = __ROR8__(v47, 44) + v45;
    a3 = 0xB492B66FBE98F273 * __ROR8__(v41, 33);
    uint64_t v14 = v48 + __ROR8__(v46, 21);
    unint64_t v49 = a3 + v36 + v17[4];
    unint64_t v15 = v49 + v40 + v38 + v39;
    unint64_t v16 = __ROR8__(v49 + v40 + v38, 44) + v49 + __ROR8__(v44 + v49 + v39 + a4, 21);
    v17 += 16;
  }
  uint64_t v50 = a3 - 0x3C5A37A36834CED9 * __ROR8__(v13 + v12, 49);
  uint64_t v51 = __ROR8__(v16, 37) - 0x3C5A37A36834CED9 * a4;
  uint64_t v52 = __ROR8__(v15, 27) - 0x3C5A37A36834CED9 * v12;
  uint64_t v53 = 9 * v15;
  unint64_t v54 = 0xC3A5C85C97CB3127 * v13;
  if (i)
  {
    unint64_t v55 = 0;
    uint64_t v56 = (uint64_t *)((char *)a1 + a2 - 16);
    do
    {
      v55 += 32;
      uint64_t v51 = v14 - 0x3C5A37A36834CED9 * __ROR8__(v51 + v50, 42);
      uint64_t v57 = v56[1];
      v53 += *v56;
      uint64_t v50 = v53 - 0x3C5A37A36834CED9 * v50;
      uint64_t v58 = *(v56 - 2);
      uint64_t v59 = *(v56 - 1);
      v52 += v16 + v58;
      v16 += v54;
      unint64_t v60 = v58 + v54 + v52;
      uint64_t v14 = __ROR8__(v59 + *v56 + v60, 44) + v60 + __ROR8__(v57 + v14 + v60, 21);
      unint64_t v54 = 0xC3A5C85C97CB3127 * (v59 + *v56 + v60 + v57);
      v56 -= 4;
    }
    while (v55 < i);
  }
  unint64_t v61 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v54 ^ ((0x9DDFEA08EB382D69 * (v54 ^ v50)) >> 47) ^ (0x9DDFEA08EB382D69 * (v54 ^ v50)))) ^ ((0x9DDFEA08EB382D69 * (v54 ^ ((0x9DDFEA08EB382D69 * (v54 ^ v50)) >> 47) ^ (0x9DDFEA08EB382D69 * (v54 ^ v50)))) >> 47));
  unint64_t v62 = 0x9DDFEA08EB382D69
      * (v53 ^ ((0x9DDFEA08EB382D69 * ((v51 + v52) ^ v53)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v51 + v52) ^ v53)));
  return 0x9DDFEA08EB382D69
       * (((0x9DDFEA08EB382D69
          * (v16 ^ ((0x9DDFEA08EB382D69 * ((v61 + v14) ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v61 + v14) ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v16 ^ ((0x9DDFEA08EB382D69 * ((v61 + v14) ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v61 + v14) ^ v16)))) >> 47))
        + (v62 ^ (v62 >> 47)));
}

uint64_t *boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::subtract_times@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  if ((unint64_t)(*result - 0x7FFFFFFFFFFFFFFELL) >= 3)
  {
    if ((unint64_t)(v4 - 0x7FFFFFFFFFFFFFFELL) >= 3)
    {
      unint64_t v6 = v3 - v4;
      goto LABEL_15;
    }
    if (v4 == 0x7FFFFFFFFFFFFFFELL) {
      goto LABEL_13;
    }
  }
  else if (v3 == 0x7FFFFFFFFFFFFFFELL || v4 == 0x7FFFFFFFFFFFFFFELL)
  {
    goto LABEL_13;
  }
  unint64_t v6 = 0x8000000000000000;
  if (v3 == 0x8000000000000000 || (unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL, v3 == 0x7FFFFFFFFFFFFFFFLL))
  {
    if (v4 == v6) {
LABEL_13:
    }
      unint64_t v6 = 0x7FFFFFFFFFFFFFFELL;
  }
  else if (v4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v6 = 0x8000000000000000;
  }
  else if (v4 != 0x8000000000000000)
  {
    uint64_t v7 = v3 - v4;
    unint64_t v8 = 0x7FFFFFFFFFFFFFFELL;
    if (v7 == 0x8000000000000000) {
      unint64_t v8 = 0x8000000000000000;
    }
    if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
      unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v6 = v8;
    }
  }
LABEL_15:
  *a3 = v6;
  return result;
}

unint64_t *boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000ll,(unsigned short)6,long long>>::operator+@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *result;
  if (*result - 0x7FFFFFFFFFFFFFFELL >= 3)
  {
    unint64_t v5 = *a2;
    if (*a2 - 0x7FFFFFFFFFFFFFFELL >= 3) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v4 = 0x7FFFFFFFFFFFFFFELL;
    if (v3 == 0x7FFFFFFFFFFFFFFELL) {
      goto LABEL_16;
    }
    unint64_t v5 = *a2;
  }
  unint64_t v4 = 0x7FFFFFFFFFFFFFFELL;
  if (v5 == 0x7FFFFFFFFFFFFFFELL) {
    goto LABEL_16;
  }
  if (v3 == 0x8000000000000000)
  {
    unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_10:
    if (v5 == v6) {
      unint64_t v4 = 0x7FFFFFFFFFFFFFFELL;
    }
    else {
      unint64_t v4 = *result;
    }
    goto LABEL_16;
  }
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v6 = 0x8000000000000000;
    goto LABEL_10;
  }
  unint64_t v4 = 0x8000000000000000;
  if (v5 != 0x8000000000000000)
  {
    unint64_t v4 = v5;
    if (v5 != 0x7FFFFFFFFFFFFFFFLL) {
LABEL_14:
    }
      unint64_t v4 = v5 + v3;
  }
LABEL_16:
  *a3 = v4;
  return result;
}

uint64_t boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::time_input_facet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (void *)boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::date_input_facet(a1, a2, a3);
  *unint64_t v4 = &unk_26D7570E0;
  std::string::basic_string[abi:ne180100]<0>(v4 + 45, boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::default_time_duration_format[0]);
  return a1;
}

void sub_223E8D750(_Unwind_Exception *a1)
{
  boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::~date_input_facet(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::date_input_facet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26D757148;
  *(void *)(a1 + 8) = a3 - 1;
  unint64_t v4 = (long long *)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    *(void *)(a1 + 32) = *(void *)(a2 + 16);
    *unint64_t v4 = v5;
  }
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 40), "%b");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 64), "%a");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 88), "%Y");
  unint64_t v6 = std::locale::classic();
  boost::date_time::format_date_parser<boost::gregorian::date,char>::format_date_parser((std::string *)(a1 + 112), v4, v6);
  boost::date_time::date_generator_parser<boost::gregorian::date,char>::date_generator_parser(a1 + 264);
  boost::date_time::period_parser<boost::gregorian::date,char>::period_parser(a1 + 296, 1, "/", "[", ")", "]");
  boost::date_time::special_values_parser<boost::gregorian::date,char>::special_values_parser(a1 + 328);
  return a1;
}

void sub_223E8D890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__shared_count::~__shared_count(v10);
  _Unwind_Resume(a1);
}

void boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::~date_input_facet(uint64_t a1)
{
  *(void *)a1 = &unk_26D757148;
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 328, *(void **)(a1 + 336));
  int64_t v2 = (void **)(a1 + 296);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 264, *(void **)(a1 + 272));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 232, *(void **)(a1 + 240));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 200, *(void **)(a1 + 208));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 168, *(void **)(a1 + 176));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1 + 136, *(void **)(a1 + 144));
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  uint64_t vars8;

  boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::~date_input_facet(a1);
  JUMPOUT(0x22A614FA0);
}

void boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::~time_input_facet(uint64_t a1)
{
  *(void *)a1 = &unk_26D7570E0;
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::~date_input_facet(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26D7570E0;
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::~date_input_facet(a1);
  JUMPOUT(0x22A614FA0);
}

void boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::set_iso_format()
{
}

void boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::set_iso_extended_format()
{
}

uint64_t boost::date_time::format_date_parser<boost::gregorian::date,char>::~format_date_parser(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::set_iso_format()
{
}

void boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::set_iso_extended_format()
{
}

std::string *boost::date_time::format_date_parser<boost::gregorian::date,char>::format_date_parser(std::string *this, long long *a2, const std::locale *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  boost::date_time::gather_month_strings<char>(a3, 1, (uint64_t)v10);
  boost::date_time::string_parse_tree<char>::string_parse_tree((uint64_t)&this[1], v10, 1);
  unint64_t v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  boost::date_time::gather_month_strings<char>(a3, 0, (uint64_t)v9);
  boost::date_time::string_parse_tree<char>::string_parse_tree((uint64_t)&this[2].__r_.__value_.__l.__size_, v9, 1);
  unint64_t v11 = (void **)v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  boost::date_time::gather_weekday_strings<char>(a3, 1, (uint64_t)v8);
  boost::date_time::string_parse_tree<char>::string_parse_tree((uint64_t)&this[3].__r_.__value_.__r.__words[2], v8, 0);
  unint64_t v11 = (void **)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  boost::date_time::gather_weekday_strings<char>(a3, 0, (uint64_t)v7);
  boost::date_time::string_parse_tree<char>::string_parse_tree((uint64_t)&this[5], v7, 0);
  unint64_t v11 = (void **)v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  return this;
}

void sub_223E8DD28(_Unwind_Exception *a1)
{
  *(void *)(v6 - 56) = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 56));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(v4, *(void **)(v1 + 96));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(v3, *(void **)(v1 + 64));
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(v2, *(void **)(v1 + 32));
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void sub_223E8DDB4()
{
  *(void *)(v1 - 56) = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 56));
  JUMPOUT(0x223E8DD9CLL);
}

void sub_223E8DDC8()
{
}

void boost::date_time::gather_month_strings<char>(const std::locale *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  strcpy(&v32[4], "%b");
  strcpy(v32, "%B");
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(&v30, &v32[4]);
  if ((a2 & 1) == 0) {
    MEMORY[0x22A614700](v5, v32);
  }
  int v6 = 0;
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)&v26[152] = 0u;
  uint64_t v20 = *MEMORY[0x263F8C2C8];
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2C8] + 24);
  do
  {
    LODWORD(v27) = v6;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
    std::locale::use_facet(a1, MEMORY[0x263F8C160]);
    unint64_t v8 = (const std::ios_base *)((char *)v24 + *(void *)(v24[0] - 24));
    if (v8[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v8);
      uint64_t v9 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x263F8C108]);
      std::ios_base::fmtflags v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 32);
      std::locale::~locale((std::locale *)&v33);
      v8[1].__fmtflags_ = v10;
    }
    std::time_put<char,std::ostreambuf_iterator<char>>::put();
    std::stringbuf::str();
    unint64_t v12 = *(void *)(a3 + 8);
    unint64_t v11 = *(void *)(a3 + 16);
    if (v12 >= v11)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(void *)a3) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(void *)a3) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v14;
      }
      v33.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
      if (v16) {
        unint64_t v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a3 + 16, v16);
      }
      else {
        unint64_t v17 = 0;
      }
      unint64_t v18 = v17 + v13;
      v33.__first_ = v17;
      v33.__begin_ = v18;
      v33.__end_cap_.__value_ = &v17[v16];
      v18->__r_.__value_.__r.__words[2] = v23;
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      std::string::size_type v23 = 0;
      *(_OWORD *)std::string __p = 0uLL;
      v33.__end_ = v18 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &v33);
      uint64_t v19 = *(void *)(a3 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&v33);
      *(void *)(a3 + 8) = v19;
    }
    else
    {
      *(void *)(v12 + 16) = v23;
      *(_OWORD *)unint64_t v12 = *(_OWORD *)__p;
      *(void *)(a3 + 8) = v12 + 24;
    }
    v24[0] = v20;
    *(void *)((char *)v24 + *(void *)(v20 - 24)) = v7;
    v24[1] = MEMORY[0x263F8C318] + 16;
    if (v25 < 0) {
      operator delete((void *)v24[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22A614E30](v26);
    ++v6;
  }
  while (v6 != 12);
  if (v31 < 0) {
    operator delete(v30);
  }
}

void sub_223E8E184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (*(char *)(v23 - 137) < 0) {
    operator delete(*(void **)(v23 - 160));
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void boost::date_time::gather_weekday_strings<char>(const std::locale *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  strcpy(&v32[4], "%a");
  strcpy(v32, "%A");
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(&v30, &v32[4]);
  if ((a2 & 1) == 0) {
    MEMORY[0x22A614700](v5, v32);
  }
  int v6 = 0;
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)&v26[152] = 0u;
  uint64_t v20 = *MEMORY[0x263F8C2C8];
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2C8] + 24);
  do
  {
    DWORD2(v27) = v6;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
    std::locale::use_facet(a1, MEMORY[0x263F8C160]);
    unint64_t v8 = (const std::ios_base *)((char *)v24 + *(void *)(v24[0] - 24));
    if (v8[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v8);
      uint64_t v9 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x263F8C108]);
      std::ios_base::fmtflags v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 32);
      std::locale::~locale((std::locale *)&v33);
      v8[1].__fmtflags_ = v10;
    }
    std::time_put<char,std::ostreambuf_iterator<char>>::put();
    std::stringbuf::str();
    unint64_t v12 = *(void *)(a3 + 8);
    unint64_t v11 = *(void *)(a3 + 16);
    if (v12 >= v11)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(void *)a3) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(void *)a3) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v14;
      }
      v33.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
      if (v16) {
        unint64_t v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a3 + 16, v16);
      }
      else {
        unint64_t v17 = 0;
      }
      unint64_t v18 = v17 + v13;
      v33.__first_ = v17;
      v33.__begin_ = v18;
      v33.__end_cap_.__value_ = &v17[v16];
      v18->__r_.__value_.__r.__words[2] = v23;
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      std::string::size_type v23 = 0;
      *(_OWORD *)std::string __p = 0uLL;
      v33.__end_ = v18 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &v33);
      uint64_t v19 = *(void *)(a3 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&v33);
      *(void *)(a3 + 8) = v19;
    }
    else
    {
      *(void *)(v12 + 16) = v23;
      *(_OWORD *)unint64_t v12 = *(_OWORD *)__p;
      *(void *)(a3 + 8) = v12 + 24;
    }
    v24[0] = v20;
    *(void *)((char *)v24 + *(void *)(v20 - 24)) = v7;
    v24[1] = MEMORY[0x263F8C318] + 16;
    if (v25 < 0) {
      operator delete((void *)v24[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22A614E30](v26);
    ++v6;
  }
  while (v6 != 7);
  if (v31 < 0) {
    operator delete(v30);
  }
}

void sub_223E8E5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (*(char *)(v23 - 137) < 0) {
    operator delete(*(void **)(v23 - 160));
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::string_parse_tree<char>::string_parse_tree(uint64_t a1, uint64_t *a2, __int16 a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(_WORD *)(a1 + 24) = -1;
  uint64_t v4 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v7 = 0;
    unsigned __int16 v8 = 0;
    do
    {
      uint64_t v9 = v4 + 24 * v7;
      MEMORY[0x22A614D20](&v15);
      int v10 = *(char *)(v9 + 23);
      BOOL v11 = v10 < 0;
      if (v10 >= 0) {
        unint64_t v12 = (char *)v9;
      }
      else {
        unint64_t v12 = *(char **)v9;
      }
      uint64_t v13 = *(unsigned __int8 *)(v9 + 23);
      if (v11) {
        uint64_t v13 = *(void *)(v9 + 8);
      }
      std::string::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>>(&__p, v12, &v15, &v12[v13]);
      std::locale::~locale(&v15);
      boost::date_time::string_parse_tree<char>::insert(a1, (uint64_t *)&__p, v8 + a3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v7 = ++v8;
      uint64_t v4 = *a2;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) != v8);
  }
  return a1;
}

void sub_223E8E748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(v15, *(void **)(v15 + 8));
  _Unwind_Resume(a1);
}

void boost::date_time::string_parse_tree<char>::insert(uint64_t a1, uint64_t *a2, __int16 a3)
{
  int v4 = *((char *)a2 + 23);
  uint64_t v5 = *((unsigned __int8 *)a2 + 23);
  BOOL v6 = v4 < 0;
  uint64_t v7 = a2[1];
  if (v4 >= 0) {
    uint64_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v8 = a2[1];
  }
  if (v8)
  {
    uint64_t v12 = 0;
    unsigned int v13 = 1;
    do
    {
      if (v6) {
        uint64_t v5 = v7;
      }
      uint64_t v14 = v5 - 1;
      if (v13 == 1)
      {
        if (v14 == v12)
        {
          if (v6) {
            uint64_t v15 = (uint64_t *)*a2;
          }
          else {
            uint64_t v15 = a2;
          }
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v23 = &v24;
          __int16 v26 = a3;
          v27[0] = *((unsigned char *)v15 + v12);
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          long long v28 = &v29;
          __int16 v31 = a3;
          unint64_t v16 = std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::__emplace_multi<std::pair<char const,boost::date_time::string_parse_tree<char>>>(a1, (uint64_t)v27);
        }
        else
        {
          if (v6) {
            uint64_t v19 = (uint64_t *)*a2;
          }
          else {
            uint64_t v19 = a2;
          }
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v23 = &v24;
          __int16 v26 = -1;
          v27[0] = *((unsigned char *)v19 + v12);
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          long long v28 = &v29;
          __int16 v31 = -1;
          unint64_t v16 = std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::__emplace_multi<std::pair<char const,boost::date_time::string_parse_tree<char>>>(a1, (uint64_t)v27);
        }
      }
      else
      {
        uint64_t v17 = (uint64_t)(v3 + 5);
        if (v14 == v12)
        {
          if (v6) {
            unint64_t v18 = (uint64_t *)*a2;
          }
          else {
            unint64_t v18 = a2;
          }
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v23 = &v24;
          __int16 v26 = a3;
          v27[0] = *((unsigned char *)v18 + v12);
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          long long v28 = &v29;
          __int16 v31 = a3;
          unint64_t v16 = std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::__emplace_multi<std::pair<char const,boost::date_time::string_parse_tree<char>>>(v17, (uint64_t)v27);
        }
        else
        {
          if (v6) {
            uint64_t v20 = (uint64_t *)*a2;
          }
          else {
            uint64_t v20 = a2;
          }
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v23 = &v24;
          __int16 v26 = -1;
          v27[0] = *((unsigned char *)v20 + v12);
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          long long v28 = &v29;
          __int16 v31 = -1;
          unint64_t v16 = std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::__emplace_multi<std::pair<char const,boost::date_time::string_parse_tree<char>>>(v17, (uint64_t)v27);
        }
      }
      uint64_t v3 = v16;
      std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy((uint64_t)&v28, v29);
      std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy((uint64_t)&v23, v24);
      uint64_t v12 = v13;
      uint64_t v5 = *((unsigned __int8 *)a2 + 23);
      BOOL v6 = *((char *)a2 + 23) < 0;
      uint64_t v7 = a2[1];
      if (*((char *)a2 + 23) >= 0) {
        unint64_t v21 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        unint64_t v21 = a2[1];
      }
    }
    while (v21 > v13++);
  }
}

void sub_223E8E95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(v16, a16);
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void std::string::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>>(std::string *a1, char *a2, std::locale *this, char *a4)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a4)
  {
    BOOL v6 = a2;
    uint64_t v8 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      char v9 = *v6;
      int v10 = std::locale::use_facet(this, v8);
      std::string::value_type v11 = ((uint64_t (*)(const std::locale::facet *, void))v10->__vftable[1].__on_zero_shared)(v10, v9);
      std::string::push_back(a1, v11);
      ++v6;
    }
    while (v6 != a4);
  }
}

void sub_223E8EA30(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_223E8EA4C(_Unwind_Exception *a1)
{
}

uint64_t *std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::__emplace_multi<std::pair<char const,boost::date_time::string_parse_tree<char>>>(uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::__construct_node<std::pair<char const,boost::date_time::string_parse_tree<char>>>(a1, a2, (uint64_t)&v7);
  uint64_t v3 = (uint64_t **)(a1 + 8);
  int v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*((char *)v7 + 32) >= *((char *)v4 + 32)) {
          break;
        }
        int v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      int v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

unsigned char *std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::__construct_node<std::pair<char const,boost::date_time::string_parse_tree<char>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0x48uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  result[32] = *(unsigned char *)a2;
  uint64_t v7 = (void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 16);
  *((void *)result + 5) = *(void *)(a2 + 8);
  *((void *)result + 6) = v8;
  char v9 = result + 48;
  uint64_t v10 = *(void *)(a2 + 24);
  *((void *)result + 7) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a2 + 8) = v7;
    void *v7 = 0;
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    *((void *)result + 5) = v9;
  }
  *((_WORD *)result + 32) = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a2 + 5, a2[6]);
    operator delete(a2);
  }
}

uint64_t boost::date_time::date_generator_parser<boost::gregorian::date,char>::date_generator_parser(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(_WORD *)(a1 + 24) = -1;
  std::string::basic_string[abi:ne180100]<0>(&v19, "first");
  std::string::basic_string[abi:ne180100]<0>(v17, "second");
  std::string::basic_string[abi:ne180100]<0>(v15, "third");
  std::string::basic_string[abi:ne180100]<0>(v13, "fourth");
  std::string::basic_string[abi:ne180100]<0>(v11, "fifth");
  std::string::basic_string[abi:ne180100]<0>(v9, "last");
  std::string::basic_string[abi:ne180100]<0>(v7, "before");
  std::string::basic_string[abi:ne180100]<0>(v5, "after");
  std::string::basic_string[abi:ne180100]<0>(__p, "of");
  boost::date_time::date_generator_parser<boost::gregorian::date,char>::element_strings(a1, &v19, (uint64_t)v17, (uint64_t)v15, (uint64_t)v13, (uint64_t)v11, (uint64_t)v9, (uint64_t)v7, (uint64_t)v5, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  return a1;
}

void sub_223E8ED6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }
  if (*(char *)(v42 - 81) < 0) {
    operator delete(*(void **)(v42 - 104));
  }
  if (*(char *)(v42 - 57) < 0) {
    operator delete(*(void **)(v42 - 80));
  }
  if (*(char *)(v42 - 33) < 0) {
    operator delete(*(void **)(v42 - 56));
  }
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(v41, *(void **)(v41 + 8));
  _Unwind_Resume(a1);
}

void sub_223E8EE54()
{
}

void boost::date_time::date_generator_parser<boost::gregorian::date,char>::element_strings(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  uint64_t v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, a2);
  char v18 = v17;
  uint64_t v44 = v17;
  if ((unint64_t)v17 >= v45)
  {
    char v20 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (long long *)a3);
  }
  else
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      long long v19 = *(_OWORD *)a3;
      v17->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
    }
    char v20 = v18 + 1;
  }
  uint64_t v44 = v20;
  if ((unint64_t)v20 >= v45)
  {
    unint64_t v22 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (long long *)a4);
  }
  else
  {
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else
    {
      long long v21 = *(_OWORD *)a4;
      v20->__r_.__value_.__r.__words[2] = *(void *)(a4 + 16);
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
    }
    unint64_t v22 = v20 + 1;
  }
  uint64_t v44 = v22;
  if ((unint64_t)v22 >= v45)
  {
    uint64_t v24 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (long long *)a5);
  }
  else
  {
    if (*(char *)(a5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
    }
    else
    {
      long long v23 = *(_OWORD *)a5;
      v22->__r_.__value_.__r.__words[2] = *(void *)(a5 + 16);
      *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
    }
    uint64_t v24 = v22 + 1;
  }
  uint64_t v44 = v24;
  if ((unint64_t)v24 >= v45)
  {
    __int16 v26 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (long long *)a6);
  }
  else
  {
    if (*(char *)(a6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
    }
    else
    {
      long long v25 = *(_OWORD *)a6;
      v24->__r_.__value_.__r.__words[2] = *(void *)(a6 + 16);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
    }
    __int16 v26 = v24 + 1;
  }
  uint64_t v44 = v26;
  if ((unint64_t)v26 >= v45)
  {
    long long v28 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (long long *)a7);
  }
  else
  {
    if (*(char *)(a7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
    }
    else
    {
      long long v27 = *(_OWORD *)a7;
      v26->__r_.__value_.__r.__words[2] = *(void *)(a7 + 16);
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
    }
    long long v28 = v26 + 1;
  }
  uint64_t v44 = v28;
  if ((unint64_t)v28 >= v45)
  {
    uint64_t v30 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (long long *)a8);
  }
  else
  {
    if (*(char *)(a8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a8, *(void *)(a8 + 8));
    }
    else
    {
      long long v29 = *(_OWORD *)a8;
      v28->__r_.__value_.__r.__words[2] = *(void *)(a8 + 16);
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
    }
    uint64_t v30 = v28 + 1;
  }
  uint64_t v44 = v30;
  if ((unint64_t)v30 >= v45)
  {
    uint64_t v32 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (long long *)a9);
  }
  else
  {
    if (*(char *)(a9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)a9, *(void *)(a9 + 8));
    }
    else
    {
      long long v31 = *(_OWORD *)a9;
      v30->__r_.__value_.__r.__words[2] = *(void *)(a9 + 16);
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
    }
    uint64_t v32 = v30 + 1;
  }
  uint64_t v44 = v32;
  if ((unint64_t)v32 >= v45)
  {
    uint64_t v34 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v43, (long long *)a10);
  }
  else
  {
    if (*(char *)(a10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)a10, *(void *)(a10 + 8));
    }
    else
    {
      long long v33 = *(_OWORD *)a10;
      v32->__r_.__value_.__r.__words[2] = *(void *)(a10 + 16);
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
    }
    uint64_t v34 = (long long *)&v32[1];
  }
  uint64_t v44 = v34;
  memset(&v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, v43, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v43) >> 3));
  boost::date_time::string_parse_tree<char>::string_parse_tree((uint64_t)&v39, (uint64_t *)&v38, 0);
  uint64_t v35 = a1 + 8;
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1, *(void **)(a1 + 8));
  unint64_t v36 = v40;
  *(void *)a1 = v39;
  *(void *)(a1 + 8) = v36;
  uint64_t v37 = v41;
  *(void *)(a1 + 16) = v41;
  if (v37)
  {
    v36[2] = v35;
    uint64_t v39 = (long long **)&v40;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    unint64_t v36 = 0;
  }
  else
  {
    *(void *)a1 = v35;
  }
  *(_WORD *)(a1 + 24) = v42;
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy((uint64_t)&v39, v36);
  uint64_t v46 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  uint64_t v39 = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
}

void sub_223E8F208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a13 = (void **)&a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::period_parser<boost::gregorian::date,char>::period_parser(uint64_t a1, int a2, char *__s, char *a4, char *a5, char *a6)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  unint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11 >= v10)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(void *)a1) >> 3);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(void *)a1) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v16) {
      uint64_t v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v16);
    }
    else {
      uint64_t v17 = 0;
    }
    char v18 = v17 + v13;
    __v.__first_ = v17;
    __v.__begin_ = v18;
    __v.__end_cap_.__value_ = &v17[v16];
    long long v19 = *(_OWORD *)__p;
    v18->__r_.__value_.__r.__words[2] = v60;
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
    __p[1] = 0;
    std::string::size_type v60 = 0;
    __p[0] = 0;
    __v.__end_ = v18 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v20 = *(void *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v21 = SHIBYTE(v60);
    *(void *)(a1 + 8) = v20;
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v12 = *(_OWORD *)__p;
    *(void *)(v11 + 16) = v60;
    *(_OWORD *)unint64_t v11 = v12;
    *(void *)(a1 + 8) = v11 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a4);
  unint64_t v23 = *(void *)(a1 + 8);
  unint64_t v22 = *(void *)(a1 + 16);
  if (v23 >= v22)
  {
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *(void *)a1) >> 3);
    unint64_t v26 = v25 + 1;
    if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *(void *)a1) >> 3);
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 >= 0x555555555555555) {
      unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v28 = v26;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v28) {
      long long v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v28);
    }
    else {
      long long v29 = 0;
    }
    uint64_t v30 = v29 + v25;
    __v.__first_ = v29;
    __v.__begin_ = v30;
    __v.__end_cap_.__value_ = &v29[v28];
    long long v31 = *(_OWORD *)__p;
    v30->__r_.__value_.__r.__words[2] = v60;
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
    __p[1] = 0;
    std::string::size_type v60 = 0;
    __p[0] = 0;
    __v.__end_ = v30 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v32 = *(void *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v33 = SHIBYTE(v60);
    *(void *)(a1 + 8) = v32;
    if (v33 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v24 = *(_OWORD *)__p;
    *(void *)(v23 + 16) = v60;
    *(_OWORD *)unint64_t v23 = v24;
    *(void *)(a1 + 8) = v23 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a5);
  unint64_t v35 = *(void *)(a1 + 8);
  unint64_t v34 = *(void *)(a1 + 16);
  if (v35 >= v34)
  {
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(void *)a1) >> 3);
    unint64_t v38 = v37 + 1;
    if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(void *)a1) >> 3);
    if (2 * v39 > v38) {
      unint64_t v38 = 2 * v39;
    }
    if (v39 >= 0x555555555555555) {
      unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v40 = v38;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v40) {
      uint64_t v41 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v40);
    }
    else {
      uint64_t v41 = 0;
    }
    __int16 v42 = v41 + v37;
    __v.__first_ = v41;
    __v.__begin_ = v42;
    __v.__end_cap_.__value_ = &v41[v40];
    long long v43 = *(_OWORD *)__p;
    v42->__r_.__value_.__r.__words[2] = v60;
    *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
    __p[1] = 0;
    std::string::size_type v60 = 0;
    __p[0] = 0;
    __v.__end_ = v42 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v44 = *(void *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v45 = SHIBYTE(v60);
    *(void *)(a1 + 8) = v44;
    if (v45 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v36 = *(_OWORD *)__p;
    *(void *)(v35 + 16) = v60;
    *(_OWORD *)unint64_t v35 = v36;
    *(void *)(a1 + 8) = v35 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a6);
  unint64_t v47 = *(void *)(a1 + 8);
  unint64_t v46 = *(void *)(a1 + 16);
  if (v47 >= v46)
  {
    unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - *(void *)a1) >> 3);
    unint64_t v50 = v49 + 1;
    if (v49 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - *(void *)a1) >> 3);
    if (2 * v51 > v50) {
      unint64_t v50 = 2 * v51;
    }
    if (v51 >= 0x555555555555555) {
      unint64_t v52 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v52 = v50;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v52) {
      uint64_t v53 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v52);
    }
    else {
      uint64_t v53 = 0;
    }
    unint64_t v54 = v53 + v49;
    __v.__first_ = v53;
    __v.__begin_ = v54;
    __v.__end_cap_.__value_ = &v53[v52];
    long long v55 = *(_OWORD *)__p;
    v54->__r_.__value_.__r.__words[2] = v60;
    *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
    __p[1] = 0;
    std::string::size_type v60 = 0;
    __p[0] = 0;
    __v.__end_ = v54 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v56 = *(void *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v57 = SHIBYTE(v60);
    *(void *)(a1 + 8) = v56;
    if (v57 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v48 = *(_OWORD *)__p;
    *(void *)(v47 + 16) = v60;
    *(_OWORD *)unint64_t v47 = v48;
    *(void *)(a1 + 8) = v47 + 24;
  }
  return a1;
}

void sub_223E8F6F8(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

uint64_t boost::date_time::special_values_parser<boost::gregorian::date,char>::special_values_parser(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(_WORD *)(a1 + 24) = -1;
  std::string::basic_string[abi:ne180100]<0>(&v11, "not-a-date-time");
  std::string::basic_string[abi:ne180100]<0>(v9, "-infinity");
  std::string::basic_string[abi:ne180100]<0>(v7, "+infinity");
  std::string::basic_string[abi:ne180100]<0>(v5, "minimum-date-time");
  std::string::basic_string[abi:ne180100]<0>(__p, "maximum-date-time");
  boost::date_time::special_values_parser<boost::gregorian::date,char>::sv_strings(a1, &v11, (uint64_t)v9, (uint64_t)v7, (uint64_t)v5, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete((void *)v11);
  }
  return a1;
}

void sub_223E8F85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (*(char *)(v28 - 17) < 0) {
    operator delete(*(void **)(v28 - 40));
  }
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(v27, *(void **)(v27 + 8));
  _Unwind_Resume(a1);
}

void boost::date_time::special_values_parser<boost::gregorian::date,char>::sv_strings(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  long long v11 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v29, a2);
  char v12 = v11;
  uint64_t v30 = v11;
  if ((unint64_t)v11 >= v31)
  {
    unint64_t v14 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v29, (long long *)a3);
  }
  else
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      long long v13 = *(_OWORD *)a3;
      v11->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    unint64_t v14 = v12 + 1;
  }
  uint64_t v30 = v14;
  if ((unint64_t)v14 >= v31)
  {
    unint64_t v16 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v29, (long long *)a4);
  }
  else
  {
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else
    {
      long long v15 = *(_OWORD *)a4;
      v14->__r_.__value_.__r.__words[2] = *(void *)(a4 + 16);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    unint64_t v16 = v14 + 1;
  }
  uint64_t v30 = v16;
  if ((unint64_t)v16 >= v31)
  {
    char v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v29, (long long *)a5);
  }
  else
  {
    if (*(char *)(a5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
    }
    else
    {
      long long v17 = *(_OWORD *)a5;
      v16->__r_.__value_.__r.__words[2] = *(void *)(a5 + 16);
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
    }
    char v18 = v16 + 1;
  }
  uint64_t v30 = v18;
  if ((unint64_t)v18 >= v31)
  {
    uint64_t v20 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v29, (long long *)a6);
  }
  else
  {
    if (*(char *)(a6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
    }
    else
    {
      long long v19 = *(_OWORD *)a6;
      v18->__r_.__value_.__r.__words[2] = *(void *)(a6 + 16);
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
    }
    uint64_t v20 = (long long *)&v18[1];
  }
  uint64_t v30 = v20;
  memset(&v24, 0, sizeof(v24));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, v29, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v29) >> 3));
  boost::date_time::string_parse_tree<char>::string_parse_tree((uint64_t)&v25, (uint64_t *)&v24, 0);
  uint64_t v21 = a1 + 8;
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy(a1, *(void **)(a1 + 8));
  unint64_t v22 = v26;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v22;
  uint64_t v23 = v27;
  *(void *)(a1 + 16) = v27;
  if (v23)
  {
    v22[2] = v21;
    unint64_t v25 = (long long **)&v26;
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    unint64_t v22 = 0;
  }
  else
  {
    *(void *)a1 = v21;
  }
  *(_WORD *)(a1 + 24) = v28;
  std::__tree<std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::__map_value_compare<char,std::__value_type<char,boost::date_time::string_parse_tree<char>>,std::less<char>,true>,std::allocator<std::__value_type<char,boost::date_time::string_parse_tree<char>>>>::destroy((uint64_t)&v25, v22);
  uint64_t v32 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  unint64_t v25 = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
}

void sub_223E8FB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a13 = (void **)&a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(int a1)
{
  switch(a1)
  {
    case 1:
      LODWORD(v4) = 0;
      unint64_t v1 = 0x8000000000000000;
      goto LABEL_5;
    case 2:
      LODWORD(v4) = -1;
      unint64_t v1 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_5;
    case 3:
      LODWORD(v4) = 2232400;
      unint64_t v5 = 0;
      goto LABEL_8;
    case 4:
      unint64_t v4 = 86400000000;
      uint64_t v3 = 1;
      boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>>::operator-(&v4, &v3, &v5);
      LODWORD(v4) = 5373484;
      goto LABEL_8;
    default:
      LODWORD(v4) = -2;
      unint64_t v1 = 0x7FFFFFFFFFFFFFFELL;
LABEL_5:
      unint64_t v5 = v1;
LABEL_8:
      boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v6, (unsigned int *)&v4, (uint64_t *)&v5);
      return v6;
  }
}

unint64_t *boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000ll,(unsigned short)6,long long>>::operator-@<X0>(unint64_t *result@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *result;
  if (*result - 0x7FFFFFFFFFFFFFFELL >= 3)
  {
    uint64_t v5 = *a2;
    if ((unint64_t)(*a2 - 0x7FFFFFFFFFFFFFFELL) >= 3) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v4 = 0x7FFFFFFFFFFFFFFELL;
    if (v3 == 0x7FFFFFFFFFFFFFFELL) {
      goto LABEL_14;
    }
    uint64_t v5 = *a2;
  }
  unint64_t v4 = 0x7FFFFFFFFFFFFFFELL;
  if (v5 == 0x7FFFFFFFFFFFFFFELL) {
    goto LABEL_14;
  }
  unint64_t v6 = 0x8000000000000000;
  if (v3 == 0x8000000000000000 || (unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL, v3 == 0x7FFFFFFFFFFFFFFFLL))
  {
    if (v5 == v6) {
      unint64_t v4 = 0x7FFFFFFFFFFFFFFELL;
    }
    else {
      unint64_t v4 = *result;
    }
    goto LABEL_14;
  }
  unint64_t v4 = 0x8000000000000000;
  if (v5 == 0x8000000000000000)
  {
    unint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_14;
  }
  if (v5 != 0x7FFFFFFFFFFFFFFFLL) {
LABEL_13:
  }
    unint64_t v4 = v3 - v5;
LABEL_14:
  *a3 = v4;
  return result;
}

uint64_t boost::date_time::convert_string_type<char,char>@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  int v2 = *(char *)(a1 + 23);
  if (v2 >= 0) {
    unint64_t v3 = (std::string::value_type *)a1;
  }
  else {
    unint64_t v3 = *(std::string::value_type **)a1;
  }
  if (v2 >= 0) {
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v4 = *(void *)(a1 + 8);
  }
  return std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a2, (uint64_t)a2, v3, &v3[v4], v4);
}

void sub_223E8FD80(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::get(uint64_t a1, void **a2, void **a3, const std::ios_base *a4, uint64_t *a5, std::string *a6, int a7)
{
  int v12 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
  int v13 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3);
  uint64_t v14 = MEMORY[0x263EF8318];
  while (v12 != v13)
  {
    long long v15 = (char *)(*a2)[3];
    if (v15 == (char *)(*a2)[4]) {
      char v16 = (*(uint64_t (**)(void))(**a2 + 72))(*a2);
    }
    else {
      char v16 = *v15;
    }
    if (v16 < 0)
    {
      if (!__maskrune(v16, 0x4000uLL)) {
        break;
      }
    }
    else if ((*(_DWORD *)(v14 + 4 * v16 + 60) & 0x4000) == 0)
    {
      break;
    }
    long long v17 = *a2;
    uint64_t v18 = (*a2)[3];
    if (v18 == (*a2)[4]) {
      (*(void (**)(void *))(*v17 + 80))(v17);
    }
    else {
      v17[3] = v18 + 1;
    }
    int v12 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
    int v13 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3);
  }
  BOOL v19 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
  if (v19 != std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3))
  {
    uint64_t v20 = *a2;
    uint64_t v21 = (unsigned __int8 *)(*a2)[3];
    if (v21 == (unsigned __int8 *)(*a2)[4])
    {
      int v22 = (*(unsigned __int8 (**)(void *))(*v20 + 72))(v20);
      uint64_t v20 = *a2;
    }
    else
    {
      int v22 = *v21;
    }
    if (v22 == 45) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned __int8 *)v20[3];
    if (v23 == (unsigned __int8 *)v20[4]) {
      int v24 = (*(unsigned __int8 (**)(void *))(*v20 + 72))(v20);
    }
    else {
      int v24 = *v23;
    }
    if (v24 == 43)
    {
      uint64_t v20 = *a2;
LABEL_24:
      unint64_t v25 = (char *)v20[3];
      if (v25 == (char *)v20[4]) {
        char v103 = (*(uint64_t (**)(void *))(*v20 + 72))(v20);
      }
      else {
        char v103 = *v25;
      }
      goto LABEL_27;
    }
  }
  char v103 = 0;
LABEL_27:
  uint64_t v125 = 0;
  std::ios_base::getloc(a4);
  BOOL has_facet = std::locale::has_facet((const std::locale *)&__loc, MEMORY[0x263F8C138]);
  std::locale::~locale((std::locale *)&__loc);
  if (!has_facet) {
    operator new();
  }
  long long v101 = a6;
  uint64_t v27 = *(unsigned __int8 *)(a1 + 39);
  __int16 v28 = (unsigned char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    __int16 v28 = *(unsigned char **)(a1 + 16);
  }
  LOWORD(v29) = 0;
  char v111 = 0;
  uint64_t v30 = 0;
  int v31 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = a1 + 112;
  unsigned __int16 v109 = 1400;
  uint64_t v110 = 0;
  unsigned __int16 v104 = 1;
  unsigned __int16 v105 = 1;
  uint64_t v106 = 0;
  while (1)
  {
    uint64_t v32 = a1 + 16;
    if ((v27 & 0x80) != 0)
    {
      uint64_t v32 = *(void *)(a1 + 16);
      uint64_t v27 = *(void *)(a1 + 24);
    }
    if (v28 == (unsigned char *)(v32 + v27)) {
      break;
    }
    BOOL v33 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
    if (v33 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3)) {
      break;
    }
    unint64_t v34 = v28 + 1;
    if (*v28 == 37)
    {
      if (*(char *)(a1 + 39) < 0)
      {
        uint64_t v36 = *(void *)(a1 + 16);
        uint64_t v35 = *(void *)(a1 + 24);
      }
      else
      {
        uint64_t v35 = *(unsigned __int8 *)(a1 + 39);
        uint64_t v36 = a1 + 16;
      }
      if (v34 == (unsigned char *)(v36 + v35)) {
        break;
      }
      if (*v34 == 37)
      {
        unint64_t v39 = *a2;
        uint64_t v40 = (*a2)[3];
        if (v40 == (*a2)[4]) {
          (*(void (**)(void *))(*v39 + 80))(v39);
        }
        else {
          v39[3] = v40 + 1;
        }
      }
      else
      {
        int v41 = *v34;
        switch(*v34)
        {
          case 'A':
          case 'a':
LABEL_56:
            char __s = 37;
            char v123 = v41;
            char v124 = 0;
            std::string::basic_string[abi:ne180100]<0>(&v120, &__s);
            memset(&__loc, 0, 24);
            LODWORD(__loc.__ec_.__cat_) = -65536;
            if (SHIBYTE(v121) < 0)
            {
              std::string::__init_copy_ctor_external(&v116, *(const std::string::value_type **)&v120.__val_, (std::string::size_type)v120.__cat_);
            }
            else
            {
              *(std::error_code *)&v116.__r_.__value_.__l.__data_ = v120;
              v116.__r_.__value_.__r.__words[2] = v121;
            }
            boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_weekday(v113, a2, a3, (char *)&v116, (uint64_t)&__loc);
            if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v116.__r_.__value_.__l.__data_);
            }
            imp = (const char *)*((unsigned __int8 *)&__loc.__ec_.__val_ + 7);
            if (*((char *)&__loc.__ec_.__val_ + 7) < 0) {
              imp = __loc.__imp_.__imp_;
            }
            v31 |= (unint64_t)imp > LOWORD(__loc.__ec_.__cat_);
            char v50 = 1;
            if ((*((unsigned char *)&__loc.__ec_.__val_ + 7) & 0x80) != 0) {
              goto LABEL_80;
            }
            goto LABEL_81;
          case 'B':
          case 'b':
          case 'm':
            char __s = 37;
            char v123 = v41;
            char v124 = 0;
            std::string::basic_string[abi:ne180100]<0>(&v120, &__s);
            memset(&__loc, 0, 24);
            LODWORD(__loc.__ec_.__cat_) = -65536;
            if (SHIBYTE(v121) < 0)
            {
              std::string::__init_copy_ctor_external(&v117, *(const std::string::value_type **)&v120.__val_, (std::string::size_type)v120.__cat_);
            }
            else
            {
              *(std::error_code *)&v117.__r_.__value_.__l.__data_ = v120;
              v117.__r_.__value_.__r.__words[2] = v121;
            }
            unsigned __int16 v48 = boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_month(v113, a2, a3, (char *)&v117, (uint64_t)&__loc);
            if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v117.__r_.__value_.__l.__data_);
            }
            unint64_t v49 = (const char *)*((unsigned __int8 *)&__loc.__ec_.__val_ + 7);
            if (*((char *)&__loc.__ec_.__val_ + 7) < 0) {
              unint64_t v49 = __loc.__imp_.__imp_;
            }
            v31 |= (unint64_t)v49 > LOWORD(__loc.__ec_.__cat_);
            char v50 = 1;
            unsigned __int16 v105 = v48;
            if ((*((unsigned char *)&__loc.__ec_.__val_ + 7) & 0x80) != 0) {
              goto LABEL_80;
            }
            goto LABEL_81;
          case 'C':
          case 'D':
          case 'E':
          case 'G':
          case 'J':
          case 'K':
          case 'L':
          case 'N':
          case 'O':
          case 'Q':
          case 'R':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
          case '[':
          case '\\':
          case ']':
          case '^':
          case '_':
          case 'c':
          case 'g':
          case 'h':
          case 'i':
          case 'k':
            break;
          case 'F':
            uint64_t v59 = (unsigned __int8 *)(*a2)[3];
            if (v59 == (unsigned __int8 *)(*a2)[4]) {
              int v60 = (*(unsigned __int8 (**)(void))(**a2 + 72))(*a2);
            }
            else {
              int v60 = *v59;
            }
            if (v60 == 46) {
              goto LABEL_135;
            }
            goto LABEL_139;
          case 'H':
            uint64_t v46 = boost::date_time::var_string_to_int<long long,char>(a2, a3, 2u);
            goto LABEL_106;
          case 'I':
          case 'l':
            uint64_t v46 = boost::date_time::var_string_to_int<long long,char>(a2, a3, 0x13u);
            if (v46 >= 13)
            {
              unint64_t v91 = std::iostream_category();
              *(void *)&v120.__val_ = 1;
              v120.__cat_ = v91;
              unint64_t v92 = std::ios_base::failure::failure(&__loc, "Bad hour value", &v120);
              boost::throw_exception<std::ios_base::failure>((uint64_t)v92);
            }
LABEL_106:
            uint64_t v30 = v46;
            if (v46 == -1) {
              return boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::check_special_value<boost::posix_time::ptime>(a1, a2, a3, a5, v103);
            }
            break;
          case 'M':
            memset(&__loc, 0, 24);
            LODWORD(__loc.__ec_.__cat_) = -65536;
            LOBYTE(v120.__val_) = 48;
            uint64_t v58 = boost::date_time::fixed_string_to_int<long long,char>(a2, a3, (uint64_t)&__loc, 2u, (unsigned __int8 *)&v120);
            if (v58 == -1) {
              unint64_t v107 = boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::check_special_value<boost::posix_time::ptime>(a1, a2, a3, a5, v103);
            }
            if (*((char *)&__loc.__ec_.__val_ + 7) < 0) {
              operator delete(__loc.__vftable);
            }
            uint64_t v106 = v58;
            if (v58 == -1) {
              return v107;
            }
            break;
          case 'P':
            unint64_t v61 = *a2;
            unint64_t v62 = (unsigned __int8 *)(*a2)[3];
            uint64_t v63 = (unsigned __int8 *)(*a2)[4];
            if (v62 == v63)
            {
              int v64 = (*(unsigned __int8 (**)(void *))(*v61 + 72))(v61);
              unint64_t v61 = *a2;
              unint64_t v62 = (unsigned __int8 *)(*a2)[3];
              uint64_t v63 = (unsigned __int8 *)(*a2)[4];
            }
            else
            {
              int v64 = *v62;
            }
            if (v62 == v63) {
              (*(void (**)(void *))(*v61 + 80))(v61);
            }
            else {
              v61[3] = v62 + 1;
            }
            BOOL v71 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
            if (v71 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3))
            {
              long long v93 = std::iostream_category();
              *(void *)&v120.__val_ = 1;
              v120.__cat_ = v93;
              unint64_t v94 = std::ios_base::failure::failure(&__loc, "Parse failed. Insufficient characters for %P", &v120);
              boost::throw_exception<std::ios_base::failure>((uint64_t)v94);
            }
            unint64_t v72 = (unsigned __int8 *)(*a2)[3];
            if (v72 == (unsigned __int8 *)(*a2)[4]) {
              int v73 = (*(unsigned __int8 (**)(void))(**a2 + 72))(*a2);
            }
            else {
              int v73 = *v72;
            }
            if (v64 == 80 && v73 == 77)
            {
LABEL_167:
              char v111 = 1;
              uint64_t v110 = 12;
            }
            else
            {
              if (v64 != 65 || v73 != 77)
              {
                uint64_t v97 = std::iostream_category();
                *(void *)&v120.__val_ = 1;
                v120.__cat_ = v97;
                long long v98 = std::ios_base::failure::failure(&__loc, "Parse failed. Invalid expression for %P", &v120);
                boost::throw_exception<std::ios_base::failure>((uint64_t)v98);
              }
LABEL_170:
              uint64_t v110 = 0;
              char v111 = 1;
            }
            break;
          case 'S':
LABEL_64:
            memset(&__loc, 0, 24);
            LODWORD(__loc.__ec_.__cat_) = -65536;
            LOBYTE(v120.__val_) = 48;
            uint64_t v112 = boost::date_time::fixed_string_to_int<long long,char>(a2, a3, (uint64_t)&__loc, 2u, (unsigned __int8 *)&v120);
            if (v112 == -1)
            {
              unint64_t v107 = boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::check_special_value<boost::posix_time::ptime>(a1, a2, a3, a5, v103);
              int v47 = 1;
            }
            else if (*v34 == 83)
            {
              int v47 = 6;
            }
            else
            {
              BOOL v66 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
              if (v66 != std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3)) {
                int v47 = 0;
              }
              else {
                int v47 = 6;
              }
            }
            if (*((char *)&__loc.__ec_.__val_ + 7) < 0) {
              operator delete(__loc.__vftable);
            }
            if (v47 == 6) {
              break;
            }
            if (v47) {
              return v107;
            }
LABEL_128:
            unint64_t v67 = (unsigned __int8 *)(*a2)[3];
            if (v67 == (unsigned __int8 *)(*a2)[4]) {
              int v68 = (*(unsigned __int8 (**)(void))(**a2 + 72))(*a2);
            }
            else {
              int v68 = *v67;
            }
            if (v68 != 46) {
              return boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::check_special_value<boost::posix_time::ptime>(a1, a2, a3, a5, v103);
            }
LABEL_135:
            uint64_t v69 = *a2;
            uint64_t v70 = (*a2)[3];
            if (v70 == (*a2)[4]) {
              (*(void (**)(void *))(*v69 + 80))(v69);
            }
            else {
              v69[3] = v70 + 1;
            }
            boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::parse_frac_type(a1, a2, a3, &v125);
LABEL_139:
            int v31 = 1;
            break;
          case 'Y':
LABEL_62:
            char __s = 37;
            char v123 = v41;
            char v124 = 0;
            std::string::basic_string[abi:ne180100]<0>(&v120, &__s);
            memset(&__loc, 0, 24);
            LODWORD(__loc.__ec_.__cat_) = -65536;
            if (SHIBYTE(v121) < 0)
            {
              std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)&v120.__val_, (std::string::size_type)v120.__cat_);
            }
            else
            {
              *(std::error_code *)&v118.__r_.__value_.__l.__data_ = v120;
              v118.__r_.__value_.__r.__words[2] = v121;
            }
            unsigned __int16 v65 = boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_year(v113, a2, a3, (uint64_t *)&v118, (uint64_t)&__loc);
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v118.__r_.__value_.__l.__data_);
            }
            char v50 = 1;
            unsigned __int16 v109 = v65;
            if (*((char *)&__loc.__ec_.__val_ + 7) < 0) {
LABEL_80:
            }
              operator delete(__loc.__vftable);
LABEL_81:
            if ((SHIBYTE(v121) & 0x80000000) == 0) {
              goto LABEL_84;
            }
            unint64_t v52 = *(std::ios_base::failure_vtbl **)&v120.__val_;
            goto LABEL_83;
          case 'Z':
            if (!a7) {
              goto LABEL_139;
            }
            unint64_t v34 = v28 + 2;
            if (v28[2] != 80) {
              goto LABEL_172;
            }
            while (2)
            {
              BOOL v53 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
              if (v53 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3)) {
                break;
              }
              unint64_t v54 = (char *)(*a2)[3];
              if (v54 == (char *)(*a2)[4]) {
                char v55 = (*(uint64_t (**)(void))(**a2 + 72))(*a2);
              }
              else {
                char v55 = *v54;
              }
              if (v55 < 0)
              {
                if (__maskrune(v55, 0x4000uLL))
                {
LABEL_96:
                  uint64_t v56 = *a2;
                  uint64_t v57 = (*a2)[3];
                  if (v57 == (*a2)[4]) {
                    (*(void (**)(void *))(*v56 + 80))(v56);
                  }
                  else {
                    v56[3] = v57 + 1;
                  }
                  continue;
                }
              }
              else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v55 + 60) & 0x4000) != 0)
              {
                goto LABEL_96;
              }
              break;
            }
            BOOL v77 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
            if (v77 != std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3))
            {
              do
              {
                uint64_t v78 = (char *)(*a2)[3];
                if (v78 == (char *)(*a2)[4]) {
                  char v79 = (*(uint64_t (**)(void))(**a2 + 72))(*a2);
                }
                else {
                  char v79 = *v78;
                }
                if (v79 < 0)
                {
                  if (__maskrune(v79, 0x4000uLL)) {
                    goto LABEL_171;
                  }
                }
                else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v79 + 60) & 0x4000) != 0)
                {
                  goto LABEL_171;
                }
                long long v80 = (std::string::value_type *)(*a2)[3];
                if (v80 == (std::string::value_type *)(*a2)[4]) {
                  std::string::value_type v81 = (*(uint64_t (**)(void))(**a2 + 72))(*a2);
                }
                else {
                  std::string::value_type v81 = *v80;
                }
                std::string::push_back(v101, v81);
                unint64_t v82 = *a2;
                uint64_t v83 = (*a2)[3];
                if (v83 == (*a2)[4]) {
                  (*(void (**)(void *))(*v82 + 80))(v82);
                }
                else {
                  void v82[3] = v83 + 1;
                }
                BOOL v84 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
              }
              while (v84 != std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3));
            }
            break;
          case 'd':
          case 'e':
            if (v41 == 100) {
              unsigned __int16 v104 = boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_day_of_month(v113, a2, a3);
            }
            else {
              unsigned __int16 v104 = boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_var_day_of_month(v113, a2, a3);
            }
            break;
          case 'f':
            goto LABEL_128;
          case 'j':
            memset(&__loc, 0, 24);
            LODWORD(__loc.__ec_.__cat_) = -65536;
            LOBYTE(v120.__val_) = 48;
            unsigned int v29 = boost::date_time::fixed_string_to_int<unsigned short,char>(a2, a3, (uint64_t)&__loc, 3u, (unsigned __int8 *)&v120);
            if (v29 != 0xFFFF
              || (v120.__val_ = 0,
                  boost::date_time::string_parse_tree<char>::match(a1 + 328, a2, a3, (std::string *)&__loc, &v120.__val_), SWORD1(__loc.__ec_.__cat_) == -1))
            {
              LOWORD(v120.__val_) = 1;
              boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)366,boost::gregorian::bad_day_of_year>>::assign(&v120, v29);
              char v50 = 1;
            }
            else
            {
              char v50 = 0;
              *a5 = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(SWORD1(__loc.__ec_.__cat_));
              unint64_t v107 = *a2;
            }
            if ((*((char *)&__loc.__ec_.__val_ + 7) & 0x80000000) == 0) {
              goto LABEL_84;
            }
            unint64_t v52 = __loc.__vftable;
LABEL_83:
            operator delete(v52);
LABEL_84:
            if ((v50 & 1) == 0) {
              return v107;
            }
            break;
          default:
            switch(*v34)
            {
              case 'p':
                __int16 v42 = *a2;
                long long v43 = (unsigned __int8 *)(*a2)[3];
                uint64_t v44 = (unsigned __int8 *)(*a2)[4];
                if (v43 == v44)
                {
                  int v45 = (*(unsigned __int8 (**)(void *))(*v42 + 72))(v42);
                  __int16 v42 = *a2;
                  long long v43 = (unsigned __int8 *)(*a2)[3];
                  uint64_t v44 = (unsigned __int8 *)(*a2)[4];
                }
                else
                {
                  int v45 = *v43;
                }
                if (v43 == v44) {
                  (*(void (**)(void *))(*v42 + 80))(v42);
                }
                else {
                  void v42[3] = v43 + 1;
                }
                BOOL v74 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
                if (v74 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3))
                {
                  unint64_t v95 = std::iostream_category();
                  *(void *)&v120.__val_ = 1;
                  v120.__cat_ = v95;
                  uint64_t v96 = std::ios_base::failure::failure(&__loc, "Parse failed. Insufficient characters for %P", &v120);
                  boost::throw_exception<std::ios_base::failure>((uint64_t)v96);
                }
                double v75 = (unsigned __int8 *)(*a2)[3];
                if (v75 == (unsigned __int8 *)(*a2)[4]) {
                  int v76 = (*(unsigned __int8 (**)(void))(**a2 + 72))(*a2);
                }
                else {
                  int v76 = *v75;
                }
                if (v45 == 112 && v76 == 109) {
                  goto LABEL_167;
                }
                if (v45 != 97 || v76 != 109)
                {
                  long long v99 = std::iostream_category();
                  *(void *)&v120.__val_ = 1;
                  v120.__cat_ = v99;
                  long long v100 = std::ios_base::failure::failure(&__loc, "Parse failed. Invalid expression for %P", &v120);
                  boost::throw_exception<std::ios_base::failure>((uint64_t)v100);
                }
                return result;
              case 's':
                goto LABEL_64;
              case 'w':
                goto LABEL_56;
              case 'y':
                goto LABEL_62;
              default:
                goto LABEL_171;
            }
            goto LABEL_170;
        }
      }
LABEL_171:
      ++v34;
    }
    else
    {
      if ((v31 & 1) == 0)
      {
        unint64_t v37 = *a2;
        uint64_t v38 = (*a2)[3];
        if (v38 != (*a2)[4])
        {
          int v31 = 0;
          void v37[3] = v38 + 1;
          goto LABEL_172;
        }
        (*(void (**)(void *))(*v37 + 80))(v37);
      }
      int v31 = 0;
    }
LABEL_172:
    uint64_t v27 = *(unsigned __int8 *)(a1 + 39);
    __int16 v28 = v34;
  }
  if ((__int16)v29 < 1)
  {
    boost::gregorian::date::date(&__loc, v109, v105, v104);
    int v86 = (int)__loc.__vftable;
  }
  else
  {
    unsigned __int16 v115 = 1400;
    boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v115, v109);
    double v85 = boost::gregorian::date::date(&v120, v115, 1u, 1u);
    __loc.__vftable = (std::ios_base::failure_vtbl *)((unsigned __int16)v29 - 1);
    int v86 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator+(v85, (uint64_t *)&__loc);
  }
  uint64_t v87 = 12;
  if (v111) {
    uint64_t v87 = 0;
  }
  if (v30 != 12) {
    uint64_t v87 = v30;
  }
  if (v87 + v110 >= 25 && v106 >= 1)
  {
    unint64_t v89 = std::iostream_category();
    *(void *)&v120.__val_ = 1;
    v120.__cat_ = v89;
    int64_t v90 = std::ios_base::failure::failure(&__loc, "Bad hour value", &v120);
    boost::throw_exception<std::ios_base::failure>((uint64_t)v90);
  }
  uint64_t v114 = boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>::to_tick_count(v87 + v110, v106, v112, v125);
  v120.__val_ = v86;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep((uint64_t *)&__loc, (unsigned int *)&v120, &v114);
  *a5 = (uint64_t)__loc.__vftable;
  return *a2;
}

void sub_223E90F94()
{
  __cxa_end_catch();
  if (*(char *)(v0 - 161) < 0) {
    operator delete(*(void **)(v0 - 184));
  }
  if (*(char *)(v0 - 129) < 0) {
    JUMPOUT(0x223E910D4);
  }
  JUMPOUT(0x223E91104);
}

void sub_223E90FB8()
{
}

void sub_223E90FC8()
{
  if (*(char *)(v0 - 161) < 0) {
    operator delete(*(void **)(v0 - 184));
  }
  if (*(char *)(v0 - 129) < 0) {
    JUMPOUT(0x223E910D4);
  }
  JUMPOUT(0x223E91104);
}

void sub_223E90FD0()
{
}

void sub_223E910A0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 161) < 0) {
    operator delete(*(void **)(v1 - 184));
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_223E910C4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 161) < 0) {
    JUMPOUT(0x223E910D4);
  }
  _Unwind_Resume(a1);
}

void sub_223E910DC()
{
  std::locale::~locale((std::locale *)(v0 - 184));
  JUMPOUT(0x223E91104);
}

void sub_223E910E8(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 184));
  _Unwind_Resume(a1);
}

void sub_223E910F8()
{
}

uint64_t boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_year(uint64_t a1, void **a2, void **a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = MEMORY[0x263EF8318];
  while (1)
  {
    char v10 = (unsigned char *)(*a2)[3];
    char v11 = v10 == (unsigned char *)(*a2)[4] ? (*(uint64_t (**)(void))(**a2 + 72))(*a2) : *v10;
    if (v11 < 0)
    {
      if (!__maskrune(v11, 0x4000uLL)) {
        break;
      }
    }
    else if ((*(_DWORD *)(v9 + 4 * v11 + 60) & 0x4000) == 0)
    {
      break;
    }
    BOOL v12 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
    if (v12 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3)) {
      break;
    }
    int v13 = *a2;
    uint64_t v14 = (*a2)[3];
    if (v14 == (*a2)[4]) {
      (*(void (**)(void *))(*v13 + 80))(v13);
    }
    else {
      uint64_t v13[3] = v14 + 1;
    }
  }
  uint64_t v15 = *((unsigned __int8 *)a4 + 23);
  char v16 = a4;
  if (*((char *)a4 + 23) < 0) {
    char v16 = (unsigned char *)*a4;
  }
  unsigned __int16 v17 = 0;
  while (1)
  {
    uint64_t v18 = a4;
    if ((v15 & 0x80) != 0)
    {
      uint64_t v18 = (uint64_t *)*a4;
      uint64_t v15 = a4[1];
    }
    if (v16 == (char *)v18 + v15) {
      break;
    }
    BOOL v19 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
    if (v19 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3)) {
      break;
    }
    if (*v16 != 37) {
      goto LABEL_26;
    }
    if (*((char *)a4 + 23) < 0)
    {
      uint64_t v21 = (uint64_t *)*a4;
      uint64_t v20 = a4[1];
    }
    else
    {
      uint64_t v20 = *((unsigned __int8 *)a4 + 23);
      uint64_t v21 = a4;
    }
    if (++v16 == (char *)v21 + v20) {
      break;
    }
    int v22 = (char)*v16;
    if (v22 != 37)
    {
      if (v22 == 121)
      {
        unsigned __int8 v28 = 48;
        unsigned __int16 v17 = boost::date_time::fixed_string_to_int<short,char>(a2, a3, a5, 2u, &v28) + 2000;
      }
      else if (v22 == 89)
      {
        unsigned __int8 v27 = 48;
        unsigned __int16 v17 = boost::date_time::fixed_string_to_int<short,char>(a2, a3, a5, 4u, &v27);
      }
    }
    else
    {
LABEL_26:
      uint64_t v23 = *a2;
      uint64_t v24 = (*a2)[3];
      if (v24 == (*a2)[4]) {
        (*(void (**)(void *))(*v23 + 80))(v23);
      }
      else {
        void v23[3] = v24 + 1;
      }
    }
    ++v16;
    uint64_t v15 = *((unsigned __int8 *)a4 + 23);
  }
  unsigned __int16 v26 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v26, v17);
  return v26;
}

uint64_t boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_month(uint64_t a1, void **a2, void **a3, char *a4, uint64_t a5)
{
  uint64_t v10 = MEMORY[0x263EF8318];
  while (1)
  {
    char v11 = (unsigned char *)(*a2)[3];
    char v12 = v11 == (unsigned char *)(*a2)[4] ? (*(uint64_t (**)(void))(**a2 + 72))(*a2) : *v11;
    if (v12 < 0)
    {
      if (!__maskrune(v12, 0x4000uLL)) {
        break;
      }
    }
    else if ((*(_DWORD *)(v10 + 4 * v12 + 60) & 0x4000) == 0)
    {
      break;
    }
    BOOL v13 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
    if (v13 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3)) {
      break;
    }
    uint64_t v14 = *a2;
    uint64_t v15 = (*a2)[3];
    if (v15 == (*a2)[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      void v14[3] = v15 + 1;
    }
  }
  uint64_t v16 = a4[23];
  unsigned __int16 v17 = a4;
  if (a4[23] < 0) {
    unsigned __int16 v17 = *(char **)a4;
  }
  unsigned __int16 v18 = 0;
  int v19 = 0;
  uint64_t v20 = a1 + 56;
  uint64_t v21 = a1 + 24;
  while (1)
  {
    int v22 = (uint64_t *)a4;
    if ((v16 & 0x80) != 0)
    {
      int v22 = *(uint64_t **)a4;
      uint64_t v16 = *((void *)a4 + 1);
    }
    if (v17 == (char *)v22 + v16) {
      break;
    }
    BOOL v23 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
    if (v23 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3)) {
      break;
    }
    uint64_t v24 = v17 + 1;
    if (*v17 == 37)
    {
      if (a4[23] < 0)
      {
        unsigned __int16 v26 = *(uint64_t **)a4;
        uint64_t v25 = *((void *)a4 + 1);
      }
      else
      {
        uint64_t v25 = a4[23];
        unsigned __int16 v26 = (uint64_t *)a4;
      }
      if (v24 == (char *)v26 + v25) {
        break;
      }
      int v29 = *v24;
      switch(v29)
      {
        case '%':
          uint64_t v30 = *a2;
          uint64_t v31 = (*a2)[3];
          if (v31 == (*a2)[4]) {
            (*(void (**)(void *))(*v30 + 80))(v30);
          }
          else {
            void v30[3] = v31 + 1;
          }
          break;
        case 'B':
          boost::date_time::string_parse_tree<char>::match(v20, a2, a3, (uint64_t)&v37);
          if (*(char *)(a5 + 23) < 0) {
            operator delete(*(void **)a5);
          }
          *(_OWORD *)a5 = v37;
          *(void *)(a5 + 16) = v38;
          int v34 = v39;
          *(_DWORD *)(a5 + 24) = v39;
          unsigned __int16 v18 = HIWORD(v34);
          unint64_t v35 = *(unsigned __int8 *)(a5 + 23);
          if ((v35 & 0x80u) != 0) {
            unint64_t v35 = *(void *)(a5 + 8);
          }
          v19 |= v35 > (unsigned __int16)v34;
          break;
        case 'm':
          unsigned __int16 v18 = boost::date_time::var_string_to_int<short,char>(a2, a3, 2u);
          break;
        case 'b':
          boost::date_time::string_parse_tree<char>::match(v21, a2, a3, (uint64_t)&v37);
          if (*(char *)(a5 + 23) < 0) {
            operator delete(*(void **)a5);
          }
          *(_OWORD *)a5 = v37;
          *(void *)(a5 + 16) = v38;
          int v32 = v39;
          *(_DWORD *)(a5 + 24) = v39;
          unsigned __int16 v18 = HIWORD(v32);
          unint64_t v33 = *(unsigned __int8 *)(a5 + 23);
          if ((v33 & 0x80u) != 0) {
            unint64_t v33 = *(void *)(a5 + 8);
          }
          v19 |= v33 > (unsigned __int16)v32;
          break;
      }
      uint64_t v24 = v17 + 2;
    }
    else
    {
      if ((v19 & 1) == 0)
      {
        unsigned __int8 v27 = *a2;
        uint64_t v28 = (*a2)[3];
        if (v28 != (*a2)[4])
        {
          int v19 = 0;
          void v27[3] = v28 + 1;
          goto LABEL_49;
        }
        (*(void (**)(void *))(*v27 + 80))(v27);
      }
      int v19 = 0;
    }
LABEL_49:
    uint64_t v16 = a4[23];
    unsigned __int16 v17 = v24;
  }
  unsigned __int16 v40 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v40, v18);
  return v40;
}

uint64_t boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_weekday(uint64_t a1, void **a2, void **a3, char *a4, uint64_t a5)
{
  uint64_t v10 = MEMORY[0x263EF8318];
  while (1)
  {
    char v11 = (unsigned char *)(*a2)[3];
    char v12 = v11 == (unsigned char *)(*a2)[4] ? (*(uint64_t (**)(void))(**a2 + 72))(*a2) : *v11;
    if (v12 < 0)
    {
      if (!__maskrune(v12, 0x4000uLL)) {
        break;
      }
    }
    else if ((*(_DWORD *)(v10 + 4 * v12 + 60) & 0x4000) == 0)
    {
      break;
    }
    BOOL v13 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
    if (v13 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3)) {
      break;
    }
    uint64_t v14 = *a2;
    uint64_t v15 = (*a2)[3];
    if (v15 == (*a2)[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      void v14[3] = v15 + 1;
    }
  }
  uint64_t v16 = a4[23];
  unsigned __int16 v17 = a4;
  if (a4[23] < 0) {
    unsigned __int16 v17 = *(char **)a4;
  }
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = a1 + 120;
  uint64_t v21 = a1 + 88;
  while (1)
  {
    int v22 = (uint64_t *)a4;
    if ((v16 & 0x80) != 0)
    {
      int v22 = *(uint64_t **)a4;
      uint64_t v16 = *((void *)a4 + 1);
    }
    if (v17 == (char *)v22 + v16) {
      break;
    }
    BOOL v23 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
    if (v23 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3)) {
      break;
    }
    uint64_t v24 = v17 + 1;
    if (*v17 == 37)
    {
      if (a4[23] < 0)
      {
        unsigned __int16 v26 = *(uint64_t **)a4;
        uint64_t v25 = *((void *)a4 + 1);
      }
      else
      {
        uint64_t v25 = a4[23];
        unsigned __int16 v26 = (uint64_t *)a4;
      }
      if (v24 == (char *)v26 + v25) {
        break;
      }
      int v29 = *v24;
      switch(v29)
      {
        case '%':
          uint64_t v30 = *a2;
          uint64_t v31 = (*a2)[3];
          if (v31 == (*a2)[4]) {
            (*(void (**)(void *))(*v30 + 80))(v30);
          }
          else {
            void v30[3] = v31 + 1;
          }
          break;
        case 'A':
          boost::date_time::string_parse_tree<char>::match(v20, a2, a3, (uint64_t)&v37);
          if (*(char *)(a5 + 23) < 0) {
            operator delete(*(void **)a5);
          }
          *(_OWORD *)a5 = v37;
          *(void *)(a5 + 16) = v38;
          int v34 = v39;
          *(_DWORD *)(a5 + 24) = v39;
          uint64_t v18 = HIWORD(v34);
          unint64_t v35 = *(unsigned __int8 *)(a5 + 23);
          if ((v35 & 0x80u) != 0) {
            unint64_t v35 = *(void *)(a5 + 8);
          }
          v19 |= v35 > (unsigned __int16)v34;
          break;
        case 'w':
          uint64_t v18 = boost::date_time::var_string_to_int<short,char>(a2, a3, 2u);
          break;
        case 'a':
          boost::date_time::string_parse_tree<char>::match(v21, a2, a3, (uint64_t)&v37);
          if (*(char *)(a5 + 23) < 0) {
            operator delete(*(void **)a5);
          }
          *(_OWORD *)a5 = v37;
          *(void *)(a5 + 16) = v38;
          int v32 = v39;
          *(_DWORD *)(a5 + 24) = v39;
          uint64_t v18 = HIWORD(v32);
          unint64_t v33 = *(unsigned __int8 *)(a5 + 23);
          if ((v33 & 0x80u) != 0) {
            unint64_t v33 = *(void *)(a5 + 8);
          }
          v19 |= v33 > (unsigned __int16)v32;
          break;
      }
      uint64_t v24 = v17 + 2;
    }
    else
    {
      if ((v19 & 1) == 0)
      {
        unsigned __int8 v27 = *a2;
        uint64_t v28 = (*a2)[3];
        if (v28 != (*a2)[4])
        {
          int v19 = 0;
          void v27[3] = v28 + 1;
          goto LABEL_49;
        }
        (*(void (**)(void *))(*v27 + 80))(v27);
      }
      int v19 = 0;
    }
LABEL_49:
    uint64_t v16 = a4[23];
    unsigned __int16 v17 = v24;
  }
  if ((unsigned __int16)v18 >= 7u) {
    boost::CV::simple_exception_policy<unsigned short,(unsigned short)0,(unsigned short)6,boost::gregorian::bad_weekday>::on_error();
  }
  return v18;
}

uint64_t boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_day_of_month(uint64_t a1, void **a2, void **a3)
{
  uint64_t v5 = MEMORY[0x263EF8318];
  while (1)
  {
    unint64_t v6 = (unsigned char *)(*a2)[3];
    char v7 = v6 == (unsigned char *)(*a2)[4] ? (*(uint64_t (**)(void))(**a2 + 72))(*a2) : *v6;
    if (v7 < 0)
    {
      if (!__maskrune(v7, 0x4000uLL)) {
        break;
      }
    }
    else if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x4000) == 0)
    {
      break;
    }
    BOOL v8 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
    if (v8 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3)) {
      break;
    }
    uint64_t v9 = *a2;
    uint64_t v10 = (*a2)[3];
    if (v10 == (*a2)[4]) {
      (*(void (**)(void *))(*v9 + 80))(v9);
    }
    else {
      uint64_t v9[3] = v10 + 1;
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v14 = 0;
  int v15 = -65536;
  unsigned __int8 v17 = 48;
  unsigned __int16 v11 = boost::date_time::fixed_string_to_int<short,char>(a2, a3, (uint64_t)__p, 2u, &v17);
  unsigned __int16 v16 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v16, v11);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  return v16;
}

void sub_223E91C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_var_day_of_month(uint64_t a1, void **a2, void **a3)
{
  uint64_t v5 = MEMORY[0x263EF8318];
  while (1)
  {
    unint64_t v6 = (unsigned char *)(*a2)[3];
    char v7 = v6 == (unsigned char *)(*a2)[4] ? (*(uint64_t (**)(void))(**a2 + 72))(*a2) : *v6;
    if (v7 < 0)
    {
      if (!__maskrune(v7, 0x4000uLL)) {
        break;
      }
    }
    else if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x4000) == 0)
    {
      break;
    }
    BOOL v8 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
    if (v8 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3)) {
      break;
    }
    uint64_t v9 = *a2;
    uint64_t v10 = (*a2)[3];
    if (v10 == (*a2)[4]) {
      (*(void (**)(void *))(*v9 + 80))(v9);
    }
    else {
      uint64_t v9[3] = v10 + 1;
    }
  }
  unsigned __int16 v11 = boost::date_time::var_string_to_int<short,char>(a2, a3, 2u);
  unsigned __int16 v13 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v13, v11);
  return v13;
}

uint64_t boost::date_time::var_string_to_int<long long,char>(void **a1, void **a2, unsigned int a3)
{
  unsigned int v6 = 0;
  memset(&v20, 0, sizeof(v20));
  uint64_t v7 = MEMORY[0x263EF8318];
  while (1)
  {
    BOOL v8 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a1);
    if (v8 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2) || v6 >= a3) {
      break;
    }
    uint64_t v9 = (unsigned __int8 *)(*a1)[3];
    if (v9 == (unsigned __int8 *)(*a1)[4])
    {
      unsigned __int8 v11 = (*(uint64_t (**)(void))(**a1 + 72))(*a1);
      uint64_t v10 = v11;
      if ((v11 & 0x80) != 0) {
        break;
      }
    }
    else
    {
      uint64_t v10 = *v9;
      if ((v10 & 0x80) != 0) {
        break;
      }
    }
    if ((*(_DWORD *)(v7 + 4 * v10 + 60) & 0x400) == 0) {
      break;
    }
    char v12 = (std::string::value_type *)(*a1)[3];
    if (v12 == (std::string::value_type *)(*a1)[4]) {
      std::string::value_type v13 = (*(uint64_t (**)(void))(**a1 + 72))(*a1);
    }
    else {
      std::string::value_type v13 = *v12;
    }
    std::string::push_back(&v20, v13);
    uint64_t v14 = *a1;
    uint64_t v15 = (*a1)[3];
    if (v15 == (*a1)[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      void v14[3] = v15 + 1;
    }
    ++v6;
  }
  std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v20.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t v18 = -1;
    if ((*((unsigned char *)&v20.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v18;
    }
    goto LABEL_23;
  }
  unsigned __int8 v17 = &v20;
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unsigned __int8 v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  uint64_t v21 = 0;
  v22.__vftable = (std::bad_cast_vtbl *)v17;
  BOOL v23 = (char *)v17 + size;
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>((unsigned __int8 **)&v22, &v21) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v22);
    v22.__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
    uint64_t v24 = MEMORY[0x263F8C290];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v22);
  }
  uint64_t v18 = v21;
  if ((*((unsigned char *)&v20.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_23:
  }
    operator delete(v20.__r_.__value_.__l.__data_);
  return v18;
}

void sub_223E91FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::exception a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::check_special_value<boost::posix_time::ptime>(uint64_t a1, void **a2, void **a3, uint64_t *a4, int __c)
{
  std::string::value_type v5 = __c;
  memset(&v21, 0, sizeof(v21));
  int v22 = -65536;
  if (__c == 45 || __c == 43)
  {
    uint64_t v10 = (unsigned char *)(*a2)[3];
    char v11 = v10 == (unsigned char *)(*a2)[4] ? (*(uint64_t (**)(void))(**a2 + 72))(*a2) : *v10;
    if (v11 != v5) {
      std::string::push_back(&v21, v5);
    }
  }
  LODWORD(v19.__vftable) = 0;
  boost::date_time::string_parse_tree<char>::match(a1 + 328, a2, a3, &v21, (int *)&v19);
  if (SHIWORD(v22) == -1)
  {
    boost::date_time::convert_string_type<char,char>((uint64_t)&v21, &v20);
    std::operator+<char>();
    uint64_t v14 = std::string::append(&v17, "'");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *(void *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v19, &__msg, &__ec);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v19);
  }
  *a4 = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(SHIWORD(v22));
  char v12 = *a2;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_223E92190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::runtime_error::~runtime_error(&a24);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v32 - 57) < 0) {
    operator delete(*(void **)(v32 - 80));
  }
  _Unwind_Resume(a1);
}

void boost::throw_exception<std::ios_base::failure>(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x50uLL);
  std::runtime_error::runtime_error(&v3, (const std::runtime_error *)a1);
  long long v4 = *(_OWORD *)(a1 + 16);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = -1;
  v3.__vftable = (std::runtime_error_vtbl *)&unk_26D757778;
  std::string::value_type v5 = &unk_26D7577A0;
  uint64_t v6 = 0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_223E922D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, uint64_t a11, uint64_t a12, void *a13)
{
  a13 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v14);
  std::runtime_error::~runtime_error(&a10);
  if (v15) {
    __cxa_free_exception(v13);
  }
  _Unwind_Resume(a1);
}

void boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::parse_frac_type(uint64_t a1, void **a2, void **a3, void *a4)
{
  memset(&__str, 0, sizeof(__str));
  uint64_t v7 = MEMORY[0x263EF8318];
  while (1)
  {
    BOOL v8 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
    if (v8 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3)) {
      break;
    }
    int v9 = (unsigned __int8 *)(*a2)[3];
    if (v9 == (unsigned __int8 *)(*a2)[4])
    {
      unsigned __int8 v11 = (*(uint64_t (**)(void))(**a2 + 72))(*a2);
      uint64_t v10 = v11;
      if ((v11 & 0x80) != 0) {
        break;
      }
    }
    else
    {
      uint64_t v10 = *v9;
      if ((v10 & 0x80) != 0) {
        break;
      }
    }
    if ((*(_DWORD *)(v7 + 4 * v10 + 60) & 0x400) == 0) {
      break;
    }
    char v12 = (std::string::value_type *)(*a2)[3];
    if (v12 == (std::string::value_type *)(*a2)[4]) {
      std::string::value_type v13 = (*(uint64_t (**)(void))(**a2 + 72))(*a2);
    }
    else {
      std::string::value_type v13 = *v12;
    }
    std::string::push_back(&__str, v13);
    uint64_t v14 = *a2;
    uint64_t v15 = (*a2)[3];
    if (v15 == (*a2)[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      void v14[3] = v15 + 1;
    }
  }
  std::string::size_type v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
    if (!__str.__r_.__value_.__l.__size_)
    {
LABEL_37:
      operator delete(__str.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
      return;
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (size > 5)
  {
    std::string::basic_string(&__p, &__str, 0, 6uLL, (std::allocator<char> *)&v29);
    std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = (std::bad_cast_vtbl *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
    }
    else {
      p_p = (std::bad_cast_vtbl *)&__p;
    }
    uint64_t v28 = 0;
    v29.__vftable = p_p;
    uint64_t v30 = (char *)p_p + v23;
    if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>((unsigned __int8 **)&v29, &v28) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v29);
      v29.__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
      uint64_t v31 = MEMORY[0x263F8C290];
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v29);
    }
    *a4 = v28;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_37;
    }
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = 0;
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v16 = __str.__r_.__value_.__l.__size_;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    v29.__vftable = (std::bad_cast_vtbl *)p_str;
    uint64_t v30 = (char *)p_str + v16;
    if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>((unsigned __int8 **)&v29, (uint64_t *)&__p) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v29);
      v29.__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
      uint64_t v31 = MEMORY[0x263F8C290];
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v29);
    }
    std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    *a4 = __p.__r_.__value_.__r.__words[0];
    char v20 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    __int16 v21 = __str.__r_.__value_.__r.__words[1];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v21 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    if (v21 == 6)
    {
      uint64_t v22 = 1;
    }
    else
    {
      int v25 = (unsigned __int16)(6 - v21);
      uint64_t v22 = 1;
      do
      {
        v22 *= 10;
        --v25;
      }
      while (v25);
    }
    *a4 = v22 * v19;
    if (v20 < 0) {
      goto LABEL_37;
    }
  }
}

void sub_223E92628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::exception a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator+(unsigned int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t result = *a1;
  if ((unint64_t)(*a2 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    if ((result + 2) < 3) {
      LODWORD(v2) = 0;
    }
    return (v2 + result);
  }
  else
  {
    if (v2 == 0x7FFFFFFFFFFFFFFELL || result == -2) {
      return 4294967294;
    }
    if (result)
    {
      if (result != -1)
      {
        if (v2 == 0x7FFFFFFFFFFFFFFFLL) {
          unsigned int v6 = -1;
        }
        else {
          unsigned int v6 = result + v2;
        }
        if (v2 == 0x8000000000000000) {
          return 0;
        }
        else {
          return v6;
        }
      }
      unint64_t v5 = 0x8000000000000000;
    }
    else
    {
      unint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (v2 == v5) {
      return 4294967294;
    }
  }
  return result;
}

BOOL std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v2[3] != v2[4]) {
      return 0;
    }
    if ((*(unsigned int (**)(void *))(*v2 + 72))(v2) != -1) {
      return *a1 == 0;
    }
    *a1 = 0;
  }
  return 1;
}

uint64_t boost::date_time::fixed_string_to_int<short,char>(void **a1, void **a2, uint64_t a3, unsigned int a4, unsigned __int8 *a5)
{
  if (a4)
  {
    uint64_t v10 = MEMORY[0x263EF8318];
    for (unsigned int i = a4; i; --i)
    {
      BOOL v12 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a1);
      if (v12 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2)) {
        break;
      }
      std::string::value_type v13 = (unsigned __int8 *)(*a1)[3];
      if (v13 == (unsigned __int8 *)(*a1)[4])
      {
        unsigned __int8 v15 = (*(uint64_t (**)(void))(**a1 + 72))(*a1);
        uint64_t v14 = v15;
        if ((v15 & 0x80) == 0)
        {
LABEL_8:
          if ((*(_DWORD *)(v10 + 4 * v14 + 60) & 0x400) != 0) {
            goto LABEL_13;
          }
        }
      }
      else
      {
        uint64_t v14 = *v13;
        if ((v14 & 0x80) == 0) {
          goto LABEL_8;
        }
      }
      std::string::size_type v16 = (unsigned __int8 *)(*a1)[3];
      if (v16 == (unsigned __int8 *)(*a1)[4]) {
        int v17 = (*(unsigned __int8 (**)(void))(**a1 + 72))(*a1);
      }
      else {
        int v17 = *v16;
      }
      if (v17 != *a5) {
        break;
      }
LABEL_13:
      uint64_t v18 = (unsigned __int8 *)(*a1)[3];
      if (v18 == (unsigned __int8 *)(*a1)[4]) {
        int v19 = (*(unsigned __int8 (**)(void))(**a1 + 72))(*a1);
      }
      else {
        int v19 = *v18;
      }
      if (v19 == *a5)
      {
        std::string::value_type v20 = 48;
      }
      else
      {
        __int16 v21 = (std::string::value_type *)(*a1)[3];
        if (v21 == (std::string::value_type *)(*a1)[4]) {
          std::string::value_type v20 = (*(uint64_t (**)(void))(**a1 + 72))(*a1);
        }
        else {
          std::string::value_type v20 = *v21;
        }
      }
      std::string::push_back((std::string *)a3, v20);
      uint64_t v22 = *a1;
      uint64_t v23 = (*a1)[3];
      if (v23 == (*a1)[4]) {
        (*(void (**)(void *))(*v22 + 80))(v22);
      }
      else {
        void v22[3] = v23 + 1;
      }
    }
  }
  unint64_t v24 = *(unsigned __int8 *)(a3 + 23);
  int v25 = (char)v24;
  if ((v24 & 0x80u) != 0) {
    unint64_t v24 = *(void *)(a3 + 8);
  }
  if (v24 >= a4)
  {
    __int16 v29 = 0;
    if (v25 >= 0) {
      unsigned __int8 v27 = (std::bad_cast_vtbl *)a3;
    }
    else {
      unsigned __int8 v27 = *(std::bad_cast_vtbl **)a3;
    }
    v30.__vftable = v27;
    uint64_t v31 = (char *)v27 + v24;
    if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<short>((unsigned __int8 **)&v30, &v29) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v30);
      v30.__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
      uint64_t v32 = MEMORY[0x263F8C278];
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v30);
    }
    return v29;
  }
  else
  {
    return -1;
  }
}

void sub_223E92A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x223E92990);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<short>(unsigned __int8 **a1, _WORD *a2)
{
  std::runtime_error v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  unsigned __int16 v16 = 0;
  int v5 = *v3;
  if (v5 == 45 || v5 == 43) {
    *a1 = ++v3;
  }
  v11[0] = 0;
  __int16 v12 = 1;
  std::string::value_type v13 = &v16;
  uint64_t v14 = v3;
  unsigned __int8 v15 = v2;
  unsigned int v6 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned short,char>::convert((uint64_t)v11);
  LOWORD(v7) = v16;
  if ((v16 & 0x8000u) == 0) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v16 <= 0x8000u) {
    unsigned int v9 = v6;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v5 == 45)
  {
    int v7 = -v16;
    uint64_t result = v9;
  }
  else
  {
    uint64_t result = v8;
  }
  *a2 = v7;
  return result;
}

uint64_t boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned short,char>::convert(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v2 - 1;
  std::runtime_error v3 = *(_WORD **)(a1 + 8);
  *std::runtime_error v3 = 0;
  if (*(void *)(a1 + 16) <= (unint64_t)(v2 - 1))
  {
    int v4 = *(unsigned __int8 *)(v2 - 1);
    if ((v4 - 58) < 0xFFFFFFF6) {
      return 0;
    }
    *std::runtime_error v3 = v4 - 48;
    *(void *)(a1 + 24) = v2 - 2;
    MEMORY[0x22A614D20](&v30);
    unsigned int v6 = std::locale::classic();
    if (std::locale::operator==(&v30, v6))
    {
      uint64_t v1 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned short,char>::main_convert_loop(a1);
LABEL_44:
      std::locale::~locale(&v30);
      return v1;
    }
    int v7 = std::locale::use_facet(&v30, MEMORY[0x263F8C150]);
    ((void (*)(void **__return_ptr))v7->__vftable[1].__on_zero_shared)(&__p);
    if ((char)v29 < 0)
    {
      uint64_t v8 = v28;
      if (!v28) {
        goto LABEL_41;
      }
      p_p = (char *)__p;
    }
    else
    {
      uint64_t v8 = v29;
      if (!v29) {
        goto LABEL_41;
      }
      p_p = (char *)&__p;
    }
    if (*p_p >= 1)
    {
      char v10 = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[1].~facet_0)(v7);
      unsigned __int8 v11 = *(unsigned char **)(a1 + 16);
      __int16 v12 = *(unsigned char **)(a1 + 24);
      if (v12 >= v11)
      {
        unsigned __int8 v13 = 0;
        uint64_t v14 = __p;
        if ((v29 & 0x80u) == 0) {
          uint64_t v14 = &__p;
        }
        char v15 = *v14 - 1;
        do
        {
          if (v15)
          {
            unsigned int v16 = *(unsigned __int16 *)(a1 + 2);
            if (*(unsigned char *)a1) {
              BOOL v17 = 1;
            }
            else {
              BOOL v17 = v16 >> 1 > 0xCCC;
            }
            char v18 = v17;
            *(unsigned char *)a1 = v18;
            unsigned __int16 v19 = 10 * v16;
            *(_WORD *)(a1 + 2) = 10 * v16;
            int v20 = (char)*v12;
            if ((*v12 - 58) < 0xF6u) {
              goto LABEL_46;
            }
            int v21 = v20 - 48;
            unsigned __int16 v22 = (v20 - 48) * v19;
            if (v21)
            {
              if (v18) {
                goto LABEL_46;
              }
              if ((((unsigned __int16)v21 * v19) & 0xFFFF0000) != 0) {
                goto LABEL_46;
              }
              uint64_t v23 = *(_WORD **)(a1 + 8);
              int v24 = (unsigned __int16)*v23;
              if (((v24 + v22) & 0x10000) != 0) {
                goto LABEL_46;
              }
            }
            else
            {
              uint64_t v23 = *(_WORD **)(a1 + 8);
              LOWORD(v24) = *v23;
            }
            *uint64_t v23 = v24 + v22;
            --v15;
          }
          else
          {
            if (*v12 != v10) {
              goto LABEL_41;
            }
            if (v12 == v11)
            {
LABEL_46:
              uint64_t v1 = 0;
              goto LABEL_42;
            }
            if (v8 - 1 > (unint64_t)v13) {
              ++v13;
            }
            if ((v29 & 0x80u) == 0) {
              int v25 = &__p;
            }
            else {
              int v25 = __p;
            }
            char v15 = v25[v13];
          }
          *(void *)(a1 + 24) = --v12;
        }
        while (v12 >= v11);
      }
      uint64_t v1 = 1;
      goto LABEL_42;
    }
LABEL_41:
    uint64_t v1 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned short,char>::main_convert_loop(a1);
LABEL_42:
    if ((char)v29 < 0) {
      operator delete(__p);
    }
    goto LABEL_44;
  }
  return v1;
}

void sub_223E92D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned short,char>::main_convert_loop(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(unsigned char **)(a1 + 24);
  if ((unint64_t)v2 < v1) {
    return 1;
  }
  char v4 = *(unsigned char *)a1 != 0;
  while (1)
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 2);
    v4 |= v5 >> 1 > 0xCCC;
    *(unsigned char *)a1 = v4 & 1;
    unsigned __int16 v6 = 10 * v5;
    *(_WORD *)(a1 + 2) = 10 * v5;
    int v7 = (char)*v2;
    if ((*v2 - 58) < 0xF6u) {
      break;
    }
    int v8 = v7 - 48;
    unsigned __int16 v9 = (v7 - 48) * v6;
    if (v8)
    {
      if (v4) {
        return 0;
      }
      if ((((unsigned __int16)v8 * v6) & 0xFFFF0000) != 0) {
        return 0;
      }
      char v10 = *(_WORD **)(a1 + 8);
      int v11 = (unsigned __int16)*v10;
      if (((v11 + v9) & 0x10000) != 0) {
        return 0;
      }
    }
    else
    {
      char v10 = *(_WORD **)(a1 + 8);
      LOWORD(v11) = *v10;
    }
    _WORD *v10 = v11 + v9;
    *(void *)(a1 + 24) = --v2;
    if ((unint64_t)v2 < v1) {
      return 1;
    }
  }
  return 0;
}

void boost::throw_exception<boost::bad_lexical_cast>(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x48uLL);
  long long v4 = *(_OWORD *)(a1 + 8);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = -1;
  std::runtime_error v3 = &unk_26D7572B0;
  unsigned int v5 = &unk_26D7572D8;
  uint64_t v6 = 0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_223E92F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9, uint64_t a10, uint64_t a11, void *a12)
{
  a12 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v13);
  std::exception::~exception(&a9);
  if (v14) {
    __cxa_free_exception(v12);
  }
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 24) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = &unk_26D7542E8;
  *(void *)a1 = &unk_26D7572F8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 24) = &unk_26D754388;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = v5;
  *(void *)a1 = &unk_26D757210;
  *(void *)(a1 + 24) = &unk_26D757248;
  *(void *)(a1 + 64) = &unk_26D757280;
  uint64_t v10 = 0;
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 40))(&v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v10, v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v9);
    uint64_t v7 = v10;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = *(_OWORD *)(a2 + 40);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 32), v7);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 64) = &unk_26D7542E8;
  *(void *)a1 = &unk_26D7572F8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_26D754388;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = v5;
  *(void *)a1 = &unk_26D757210;
  *(void *)(a1 + 24) = &unk_26D757248;
  *(void *)(a1 + 64) = &unk_26D757280;
  return a1;
}

void sub_223E93188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

const char *boost::bad_lexical_cast::what(boost::bad_lexical_cast *this)
{
  return "bad lexical cast: source type value could not be interpreted as target";
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::clone()
{
}

void sub_223E932A0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40ABF5E694);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x48uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::clone_impl((uint64_t)exception, a1);
}

void sub_223E9330C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::exception *)(a1 - 3);
  *a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception(v1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 3) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 4);
  std::exception::~exception((std::exception *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::~clone_impl((uint64_t)a1 + *(void *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::bad_lexical_cast>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<boost::bad_lexical_cast>::~error_info_injector(uint64_t a1)
{
}

void boost::bad_lexical_cast::~bad_lexical_cast(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x22A614FA0);
}

void sub_223E93614(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::string_parse_tree<char>::match(uint64_t a1, void **a2, void **a3, std::string *a4, int *a5)
{
  uint64_t v10 = *a5;
  unint64_t v11 = (v10 + 1);
  *a5 = v11;
  unint64_t size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  int v13 = (char)size;
  if ((size & 0x80u) != 0) {
    unint64_t size = a4->__r_.__value_.__l.__size_;
  }
  char v14 = size < v11;
  if (size >= v11)
  {
    if (v13 >= 0) {
      char v18 = a4;
    }
    else {
      char v18 = (std::string *)a4->__r_.__value_.__r.__words[0];
    }
    char v17 = v18->__r_.__value_.__s.__data_[v10];
  }
  else
  {
    BOOL v15 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2);
    if (v15 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a3)) {
      return 0;
    }
    unsigned int v16 = (char *)(*a2)[3];
    if (v16 == (char *)(*a2)[4]) {
      char v17 = (*(uint64_t (**)(void))(**a2 + 72))(*a2);
    }
    else {
      char v17 = *v16;
    }
  }
  std::string::value_type v19 = __tolower(v17);
  uint64_t v22 = *(void *)(a1 + 8);
  int v21 = (void *)(a1 + 8);
  uint64_t v20 = v22;
  if (v22)
  {
    uint64_t v23 = v21;
    uint64_t v24 = v20;
    do
    {
      int v25 = *(char *)(v24 + 32);
      BOOL v26 = v25 < v19;
      if (v25 >= v19) {
        unsigned __int8 v27 = (uint64_t *)v24;
      }
      else {
        unsigned __int8 v27 = (uint64_t *)(v24 + 8);
      }
      if (!v26) {
        uint64_t v23 = (void *)v24;
      }
      uint64_t v24 = *v27;
    }
    while (*v27);
    do
    {
      int v28 = *(char *)(v20 + 32);
      BOOL v29 = v28 <= v19;
      if (v28 <= v19) {
        std::locale v30 = (uint64_t *)(v20 + 8);
      }
      else {
        std::locale v30 = (uint64_t *)v20;
      }
      if (!v29) {
        int v21 = (void *)v20;
      }
      uint64_t v20 = *v30;
    }
    while (*v30);
    if (v23 != v21)
    {
      std::string::value_type v31 = v19;
      do
      {
        if (v14)
        {
          uint64_t v32 = *a2;
          uint64_t v33 = (*a2)[3];
          if (v33 == (*a2)[4]) {
            (*(void (**)(void *))(*v32 + 80))(v32);
          }
          else {
            void v32[3] = v33 + 1;
          }
          std::string::push_back(a4, v31);
        }
        int v34 = *((unsigned __int16 *)v23 + 32);
        if (v34 != 0xFFFF)
        {
          int v35 = *a5;
          if (*a5 > LOWORD(a4[1].__r_.__value_.__l.__data_))
          {
            *(_WORD *)&a4[1].__r_.__value_.__s.__data_[2] = v34;
            LOWORD(a4[1].__r_.__value_.__l.__data_) = v35;
          }
        }
        boost::date_time::string_parse_tree<char>::match(v23 + 5, a2, a3, a4, a5);
        unint64_t v36 = (*a5 - 1);
        *a5 = v36;
        unint64_t v37 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
        if ((v37 & 0x80u) != 0) {
          unint64_t v37 = a4->__r_.__value_.__l.__size_;
        }
        BOOL v38 = v37 < v36;
        int v39 = (void *)v23[1];
        if (v39)
        {
          do
          {
            unsigned __int16 v40 = v39;
            int v39 = (void *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            unsigned __int16 v40 = (void *)v23[2];
            BOOL v41 = *v40 == (void)v23;
            uint64_t v23 = v40;
          }
          while (!v41);
        }
        v14 &= v38;
        uint64_t v23 = v40;
      }
      while (v40 != v21);
    }
  }
  return *(__int16 *)&a4[1].__r_.__value_.__s.__data_[2];
}

uint64_t boost::date_time::string_parse_tree<char>::match@<X0>(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 24) = -65536;
  return boost::date_time::string_parse_tree<char>::match(a1, a2, a3, (std::string *)a4, &v5);
}

void sub_223E938B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::date_time::var_string_to_int<short,char>(void **a1, void **a2, unsigned int a3)
{
  unsigned int v6 = 0;
  memset(&v20, 0, sizeof(v20));
  uint64_t v7 = MEMORY[0x263EF8318];
  while (1)
  {
    BOOL v8 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a1);
    if (v8 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2) || v6 >= a3) {
      break;
    }
    uint64_t v9 = (unsigned __int8 *)(*a1)[3];
    if (v9 == (unsigned __int8 *)(*a1)[4])
    {
      unsigned __int8 v11 = (*(uint64_t (**)(void))(**a1 + 72))(*a1);
      uint64_t v10 = v11;
      if ((v11 & 0x80) != 0) {
        break;
      }
    }
    else
    {
      uint64_t v10 = *v9;
      if ((v10 & 0x80) != 0) {
        break;
      }
    }
    if ((*(_DWORD *)(v7 + 4 * v10 + 60) & 0x400) == 0) {
      break;
    }
    __int16 v12 = (std::string::value_type *)(*a1)[3];
    if (v12 == (std::string::value_type *)(*a1)[4]) {
      std::string::value_type v13 = (*(uint64_t (**)(void))(**a1 + 72))(*a1);
    }
    else {
      std::string::value_type v13 = *v12;
    }
    std::string::push_back(&v20, v13);
    char v14 = *a1;
    uint64_t v15 = (*a1)[3];
    if (v15 == (*a1)[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      void v14[3] = v15 + 1;
    }
    ++v6;
  }
  std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v20.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    __int16 v18 = -1;
    if ((*((unsigned char *)&v20.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v18;
    }
    goto LABEL_23;
  }
  __int16 v21 = 0;
  char v17 = &v20;
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  v22.__vftable = (std::bad_cast_vtbl *)v17;
  uint64_t v23 = (char *)v17 + size;
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<short>((unsigned __int8 **)&v22, &v21) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v22);
    v22.__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
    uint64_t v24 = MEMORY[0x263F8C278];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v22);
  }
  __int16 v18 = v21;
  if ((*((unsigned char *)&v20.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_23:
  }
    operator delete(v20.__r_.__value_.__l.__data_);
  return v18;
}

void sub_223E93AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::exception a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void boost::CV::simple_exception_policy<unsigned short,(unsigned short)0,(unsigned short)6,boost::gregorian::bad_weekday>::on_error()
{
  boost::gregorian::bad_weekday::bad_weekday(&v0);
  boost::throw_exception<boost::gregorian::bad_weekday>(&v0);
}

void sub_223E93B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
}

void boost::throw_exception<boost::gregorian::bad_weekday>(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_26D757450;
  uint64_t v4 = &unk_26D757478;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_223E93C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::logic_error::~logic_error(&a10);
  if (v13) {
    __cxa_free_exception(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_26D7542E8;
  uint64_t v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_26D757498;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = &unk_26D7573B0;
  *(void *)(a1 + 16) = &unk_26D7573E8;
  *(void *)(a1 + 56) = &unk_26D757420;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_26D757498;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26D754388;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D7573B0;
  *(void *)(a1 + 16) = &unk_26D7573E8;
  *(void *)(a1 + 56) = &unk_26D757420;
  return a1;
}

void sub_223E93E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::clone()
{
}

void sub_223E93E9C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::clone_impl((uint64_t)exception, a1);
}

void sub_223E93F08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::rethrow(void *a1)
{
}

void sub_223E94074(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::gregorian::bad_weekday::bad_weekday(std::logic_error *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v3, "Weekday is out of range 0..6");
  std::logic_error::logic_error(this, &v3);
  this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  this->__vftable = (std::logic_error_vtbl *)&unk_26D757498;
  return this;
}

void sub_223E94118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::date_time::fixed_string_to_int<unsigned short,char>(void **a1, void **a2, uint64_t a3, unsigned int a4, unsigned __int8 *a5)
{
  if (a4)
  {
    uint64_t v10 = MEMORY[0x263EF8318];
    for (unsigned int i = a4; i; --i)
    {
      BOOL v12 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a1);
      if (v12 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2)) {
        break;
      }
      int v13 = (unsigned __int8 *)(*a1)[3];
      if (v13 == (unsigned __int8 *)(*a1)[4])
      {
        unsigned __int8 v15 = (*(uint64_t (**)(void))(**a1 + 72))(*a1);
        uint64_t v14 = v15;
        if ((v15 & 0x80) == 0)
        {
LABEL_8:
          if ((*(_DWORD *)(v10 + 4 * v14 + 60) & 0x400) != 0) {
            goto LABEL_13;
          }
        }
      }
      else
      {
        uint64_t v14 = *v13;
        if ((v14 & 0x80) == 0) {
          goto LABEL_8;
        }
      }
      unsigned int v16 = (unsigned __int8 *)(*a1)[3];
      if (v16 == (unsigned __int8 *)(*a1)[4]) {
        int v17 = (*(unsigned __int8 (**)(void))(**a1 + 72))(*a1);
      }
      else {
        int v17 = *v16;
      }
      if (v17 != *a5) {
        break;
      }
LABEL_13:
      __int16 v18 = (unsigned __int8 *)(*a1)[3];
      if (v18 == (unsigned __int8 *)(*a1)[4]) {
        int v19 = (*(unsigned __int8 (**)(void))(**a1 + 72))(*a1);
      }
      else {
        int v19 = *v18;
      }
      if (v19 == *a5)
      {
        std::string::value_type v20 = 48;
      }
      else
      {
        __int16 v21 = (std::string::value_type *)(*a1)[3];
        if (v21 == (std::string::value_type *)(*a1)[4]) {
          std::string::value_type v20 = (*(uint64_t (**)(void))(**a1 + 72))(*a1);
        }
        else {
          std::string::value_type v20 = *v21;
        }
      }
      std::string::push_back((std::string *)a3, v20);
      std::bad_cast v22 = *a1;
      uint64_t v23 = (*a1)[3];
      if (v23 == (*a1)[4]) {
        (*(void (**)(void *))(*v22 + 80))(v22);
      }
      else {
        void v22[3] = v23 + 1;
      }
    }
  }
  unint64_t v24 = *(unsigned __int8 *)(a3 + 23);
  int v25 = (char)v24;
  if ((v24 & 0x80u) != 0) {
    unint64_t v24 = *(void *)(a3 + 8);
  }
  if (v24 < a4) {
    return 0xFFFFLL;
  }
  unsigned __int16 v28 = 0;
  if (v25 >= 0) {
    unsigned __int8 v27 = (std::bad_cast_vtbl *)a3;
  }
  else {
    unsigned __int8 v27 = *(std::bad_cast_vtbl **)a3;
  }
  v29.__vftable = v27;
  std::locale v30 = (char *)v27 + v24;
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v29, &v28) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v29);
    v29.__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
    uint64_t v31 = MEMORY[0x263F8C280];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v29);
  }
  return v28;
}

void sub_223E943CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x223E94334);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>(unsigned __int8 **a1, _WORD *a2)
{
  std::string v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  int v5 = *v3;
  if (v5 == 45 || v5 == 43) {
    *a1 = ++v3;
  }
  v7[0] = 0;
  __int16 v8 = 1;
  uint64_t v9 = a2;
  uint64_t v10 = v3;
  uint64_t v11 = v2;
  uint64_t result = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned short,char>::convert((uint64_t)v7);
  if (v5 == 45) {
    *a2 = -*a2;
  }
  return result;
}

_WORD *boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)366,boost::gregorian::bad_day_of_year>>::assign(_WORD *result, unsigned int a2)
{
  if (!a2 || a2 >= 0x16F) {
    boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)366,boost::gregorian::bad_day_of_year>::on_error();
  }
  void *result = a2;
  return result;
}

void boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)366,boost::gregorian::bad_day_of_year>::on_error()
{
  boost::gregorian::bad_day_of_year::bad_day_of_year(&v0);
  boost::throw_exception<boost::gregorian::bad_day_of_year>(&v0);
}

void sub_223E944E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
}

void boost::throw_exception<boost::gregorian::bad_day_of_year>(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_26D7575F0;
  uint64_t v4 = &unk_26D757618;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_223E945B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::logic_error::~logic_error(&a10);
  if (v13) {
    __cxa_free_exception(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_26D7542E8;
  uint64_t v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_26D757638;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = &unk_26D757550;
  *(void *)(a1 + 16) = &unk_26D757588;
  *(void *)(a1 + 56) = &unk_26D7575C0;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_26D757638;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26D754388;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D757550;
  *(void *)(a1 + 16) = &unk_26D757588;
  *(void *)(a1 + 56) = &unk_26D7575C0;
  return a1;
}

void sub_223E947A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::clone()
{
}

void sub_223E94844(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::clone_impl((uint64_t)exception, a1);
}

void sub_223E948B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::rethrow(void *a1)
{
}

void sub_223E94A1C(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::gregorian::bad_day_of_year::bad_day_of_year(std::logic_error *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v3, "Day of year value is out of range 1..366");
  std::logic_error::logic_error(this, &v3);
  this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  this->__vftable = (std::logic_error_vtbl *)&unk_26D757638;
  return this;
}

void sub_223E94AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>(unsigned __int8 **a1, uint64_t *a2)
{
  std::string v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  uint64_t v16 = 0;
  int v5 = *v3;
  if (v5 == 45 || v5 == 43) {
    *a1 = ++v3;
  }
  v11[0] = 0;
  uint64_t v12 = 1;
  int v13 = &v16;
  uint64_t v14 = v3;
  unsigned __int8 v15 = v2;
  unsigned int v6 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned long long,char>::convert((uint64_t)v11);
  uint64_t v7 = v16;
  if (v16 >= 0) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = 0;
  }
  if ((unint64_t)v16 < 0x8000000000000001) {
    unsigned int v9 = v6;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v5 == 45)
  {
    uint64_t v7 = -v16;
    uint64_t result = v9;
  }
  else
  {
    uint64_t result = v8;
  }
  *a2 = v7;
  return result;
}

uint64_t boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned long long,char>::convert(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v1 - 1;
  uint64_t v2 = *(void **)(a1 + 16);
  *uint64_t v2 = 0;
  if (*(void *)(a1 + 24) <= (unint64_t)(v1 - 1))
  {
    int v3 = *(unsigned __int8 *)(v1 - 1);
    if ((v3 - 58) >= 0xFFFFFFF6)
    {
      *uint64_t v2 = (v3 - 48);
      *(void *)(a1 + 32) = v1 - 2;
      MEMORY[0x22A614D20](&v30);
      unsigned int v6 = std::locale::classic();
      if (std::locale::operator==(&v30, v6))
      {
        uint64_t v4 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned long long,char>::main_convert_loop(a1);
LABEL_45:
        std::locale::~locale(&v30);
        return v4;
      }
      uint64_t v7 = std::locale::use_facet(&v30, MEMORY[0x263F8C150]);
      ((void (*)(void **__return_ptr))v7->__vftable[1].__on_zero_shared)(&__p);
      if ((char)v29 < 0)
      {
        uint64_t v8 = v28;
        if (!v28) {
          goto LABEL_42;
        }
        p_p = (char *)__p;
      }
      else
      {
        uint64_t v8 = v29;
        if (!v29) {
          goto LABEL_42;
        }
        p_p = (char *)&__p;
      }
      if (*p_p >= 1)
      {
        char v10 = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[1].~facet_0)(v7);
        uint64_t v11 = *(char **)(a1 + 24);
        uint64_t v12 = *(char **)(a1 + 32);
        if (v12 >= v11)
        {
          unsigned __int8 v13 = 0;
          uint64_t v14 = __p;
          if ((v29 & 0x80u) == 0) {
            uint64_t v14 = &__p;
          }
          char v15 = *v14 - 1;
          do
          {
            if (v15)
            {
              unint64_t v16 = *(void *)(a1 + 8);
              if (*(unsigned char *)a1) {
                BOOL v17 = 1;
              }
              else {
                BOOL v17 = v16 > 0x1999999999999999;
              }
              char v18 = v17;
              *(unsigned char *)a1 = v18;
              unint64_t v19 = 10 * v16;
              *(void *)(a1 + 8) = 10 * v16;
              uint64_t v20 = *v12;
              if ((v20 - 58) < 0xF6u) {
                goto LABEL_47;
              }
              unint64_t v21 = v20 - 48;
              uint64_t v22 = v19 * (v20 - 48);
              if (v21)
              {
                if (v18) {
                  goto LABEL_47;
                }
                if (!is_mul_ok(v21, v19)) {
                  goto LABEL_47;
                }
                uint64_t v23 = *(void **)(a1 + 16);
                uint64_t v24 = *v23;
                if (__CFADD__(v22, *v23)) {
                  goto LABEL_47;
                }
              }
              else
              {
                uint64_t v23 = *(void **)(a1 + 16);
                uint64_t v24 = *v23;
              }
              *uint64_t v23 = v24 + v22;
              --v15;
            }
            else
            {
              if (*v12 != v10) {
                goto LABEL_42;
              }
              if (v12 == v11)
              {
LABEL_47:
                uint64_t v4 = 0;
                goto LABEL_43;
              }
              if (v8 - 1 > (unint64_t)v13) {
                ++v13;
              }
              if ((v29 & 0x80u) == 0) {
                int v25 = &__p;
              }
              else {
                int v25 = __p;
              }
              char v15 = v25[v13];
            }
            *(void *)(a1 + 32) = --v12;
          }
          while (v12 >= v11);
        }
        uint64_t v4 = 1;
        goto LABEL_43;
      }
LABEL_42:
      uint64_t v4 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned long long,char>::main_convert_loop(a1);
LABEL_43:
      if ((char)v29 < 0) {
        operator delete(__p);
      }
      goto LABEL_45;
    }
  }
  return 0;
}

void sub_223E94DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned long long,char>::main_convert_loop(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(char **)(a1 + 32);
  if ((unint64_t)v2 < v1) {
    return 1;
  }
  char v4 = *(unsigned char *)a1 != 0;
  while (1)
  {
    unint64_t v5 = *(void *)(a1 + 8);
    v4 |= v5 > 0x1999999999999999;
    *(unsigned char *)a1 = v4 & 1;
    unint64_t v6 = 10 * v5;
    *(void *)(a1 + 8) = 10 * v5;
    uint64_t v7 = *v2;
    if ((v7 - 58) < 0xF6u) {
      break;
    }
    unint64_t v8 = v7 - 48;
    uint64_t v9 = v6 * (v7 - 48);
    if (v8)
    {
      if (v4) {
        return 0;
      }
      if (!is_mul_ok(v8, v6)) {
        return 0;
      }
      char v10 = *(void **)(a1 + 16);
      uint64_t v11 = *v10;
      if (__CFADD__(v9, *v10)) {
        return 0;
      }
    }
    else
    {
      char v10 = *(void **)(a1 + 16);
      uint64_t v11 = *v10;
    }
    void *v10 = v11 + v9;
    *(void *)(a1 + 32) = --v2;
    if ((unint64_t)v2 < v1) {
      return 1;
    }
  }
  return 0;
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 32) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = &unk_26D7542E8;
  char v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C2E8] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C358] + 16);
  v4[2].__vftable = (std::runtime_error_vtbl *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)a1 = &unk_26D7576D8;
  *(void *)(a1 + 32) = &unk_26D757710;
  *(void *)(a1 + 72) = &unk_26D757748;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 40);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 40), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  std::runtime_error *v4;
  uint64_t v5;
  long long v6;

  *(void *)(a1 + 72) = &unk_26D7542E8;
  char v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C2E8] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C358] + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_26D754388;
  *(void *)(a1 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)a1 = &unk_26D7576D8;
  *(void *)(a1 + 32) = &unk_26D757710;
  *(void *)(a1 + 72) = &unk_26D757748;
  return a1;
}

void sub_223E9510C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::clone()
{
}

void sub_223E95218(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C4044841AE3);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x50uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::clone_impl((uint64_t)exception, a1);
}

void sub_223E95284(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::runtime_error *)(a1 - 4);
  *a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 4) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::~clone_impl((uint64_t)a1 + *(void *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<std::ios_base::failure>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<std::ios_base::failure>::~error_info_injector(uint64_t a1)
{
}

void sub_223E95574(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::fixed_string_to_int<long long,char>(void **a1, void **a2, uint64_t a3, unsigned int a4, unsigned __int8 *a5)
{
  if (a4)
  {
    uint64_t v10 = MEMORY[0x263EF8318];
    for (unsigned int i = a4; i; --i)
    {
      BOOL v12 = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a1);
      if (v12 == std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](a2)) {
        break;
      }
      unsigned __int8 v13 = (unsigned __int8 *)(*a1)[3];
      if (v13 == (unsigned __int8 *)(*a1)[4])
      {
        unsigned __int8 v15 = (*(uint64_t (**)(void))(**a1 + 72))(*a1);
        uint64_t v14 = v15;
        if ((v15 & 0x80) == 0)
        {
LABEL_8:
          if ((*(_DWORD *)(v10 + 4 * v14 + 60) & 0x400) != 0) {
            goto LABEL_13;
          }
        }
      }
      else
      {
        uint64_t v14 = *v13;
        if ((v14 & 0x80) == 0) {
          goto LABEL_8;
        }
      }
      unint64_t v16 = (unsigned __int8 *)(*a1)[3];
      if (v16 == (unsigned __int8 *)(*a1)[4]) {
        int v17 = (*(unsigned __int8 (**)(void))(**a1 + 72))(*a1);
      }
      else {
        int v17 = *v16;
      }
      if (v17 != *a5) {
        break;
      }
LABEL_13:
      char v18 = (unsigned __int8 *)(*a1)[3];
      if (v18 == (unsigned __int8 *)(*a1)[4]) {
        int v19 = (*(unsigned __int8 (**)(void))(**a1 + 72))(*a1);
      }
      else {
        int v19 = *v18;
      }
      if (v19 == *a5)
      {
        std::string::value_type v20 = 48;
      }
      else
      {
        unint64_t v21 = (std::string::value_type *)(*a1)[3];
        if (v21 == (std::string::value_type *)(*a1)[4]) {
          std::string::value_type v20 = (*(uint64_t (**)(void))(**a1 + 72))(*a1);
        }
        else {
          std::string::value_type v20 = *v21;
        }
      }
      std::string::push_back((std::string *)a3, v20);
      uint64_t v22 = *a1;
      uint64_t v23 = (*a1)[3];
      if (v23 == (*a1)[4]) {
        (*(void (**)(void *))(*v22 + 80))(v22);
      }
      else {
        void v22[3] = v23 + 1;
      }
    }
  }
  unint64_t v24 = *(unsigned __int8 *)(a3 + 23);
  int v25 = (char)v24;
  if ((v24 & 0x80u) != 0) {
    unint64_t v24 = *(void *)(a3 + 8);
  }
  if (v24 < a4) {
    return -1;
  }
  if (v25 >= 0) {
    unsigned __int8 v27 = (std::bad_cast_vtbl *)a3;
  }
  else {
    unsigned __int8 v27 = *(std::bad_cast_vtbl **)a3;
  }
  uint64_t v28 = 0;
  v29.__vftable = v27;
  std::locale v30 = (char *)v27 + v24;
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>((unsigned __int8 **)&v29, &v28) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v29);
    v29.__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
    uint64_t v31 = MEMORY[0x263F8C290];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v29);
  }
  return v28;
}

void sub_223E95820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x223E95788);
  }
  _Unwind_Resume(a1);
}

void *boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::time_input_facet(void *a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::default_time_input_format);
  boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::date_input_facet((uint64_t)a1, (uint64_t)__p, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = &unk_26D7570E0;
  std::string::basic_string[abi:ne180100]<0>(a1 + 45, boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::default_time_duration_format[0]);
  return a1;
}

void sub_223E958EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::~date_input_facet(v15);
  _Unwind_Resume(a1);
}

uint64_t std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, uint64_t a2, std::string::value_type *a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  char v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v7 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    char v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  std::string::size_type v7 = a2 - (void)this;
  if (!__n_add) {
    return (uint64_t)v6 + v7;
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  uint64_t v9 = this;
LABEL_6:
  if (v9 <= (std::string *)a3 && (char *)&v9->__r_.__value_.__l.__data_ + size + 1 > a3)
  {
    std::string::__init_with_sentinel[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&__p, a3, a4);
    std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v12;
  }
  return std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v7, a3, a4);
}

void sub_223E95A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  uint64_t v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      uint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = 22;
    uint64_t v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  uint64_t v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    v9->__r_.__value_.__l.__size_ = v14;
  }
  else {
    *((unsigned char *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    uint64_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  return (uint64_t)v9 + __n_copy;
}

void std::string::__init_with_sentinel[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    char v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_223E95BBC(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_223E95BD8(_Unwind_Exception *a1)
{
}

uint64_t boost::local_time::posix_time_zone_base<char>::posix_time_zone_base(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_26D7577C0;
  boost::date_time::time_zone_names_base<char>::time_zone_names_base((void *)(a1 + 8));
  *(unsigned char *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  __int16 v37 = 44;
  boost::char_separator<char,std::char_traits<char>>::char_separator((uint64_t)&v33, (char *)&v37, 0, 0);
  uint64_t v4 = boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v28, a2, &v33);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin(v4, &v21);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::end((uint64_t)v28, &v14);
  if (v18)
  {
    if (v26 && v17 == v25)
    {
LABEL_4:
      std::logic_error::logic_error((std::logic_error *)&v7, "Could not parse time zone name");
      v7.__r_.__value_.__r.__words[0] = MEMORY[0x263F8C3A0] + 16;
      boost::exception_detail::throw_exception_<std::invalid_argument>((std::logic_error *)&v7, (uint64_t)"boost::local_time::posix_time_zone_base<char>::posix_time_zone_base(const string_type &) [CharT = char]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/date_time/local_time/posix_time_zone.hpp", 105);
    }
  }
  else if (!v26)
  {
    goto LABEL_4;
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v7, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  }
  else {
    std::string v7 = v21;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v8, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  }
  else {
    std::string v8 = v22;
  }
  uint64_t v9 = v23;
  char v10 = v24;
  long long v11 = v25;
  char v12 = v26;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v27;
  }
  char v26 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v21, (std::string::value_type **)&v25, *((std::string::value_type **)&v25 + 1), &v27);
  boost::local_time::posix_time_zone_base<char>::calc_zone(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a1 + 104))
  {
    if (v18)
    {
      if (v26 && v17 == v25)
      {
LABEL_25:
        std::logic_error::logic_error((std::logic_error *)&v7, "Could not parse DST begin time");
        v7.__r_.__value_.__r.__words[0] = MEMORY[0x263F8C3A0] + 16;
        boost::exception_detail::throw_exception_<std::invalid_argument>((std::logic_error *)&v7, (uint64_t)"boost::local_time::posix_time_zone_base<char>::posix_time_zone_base(const string_type &) [CharT = char]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/date_time/local_time/posix_time_zone.hpp", 110);
      }
    }
    else if (!v26)
    {
      goto LABEL_25;
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v7, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
    }
    else {
      std::string v7 = v21;
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v8, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    }
    else {
      std::string v8 = v22;
    }
    uint64_t v9 = v23;
    char v10 = v24;
    long long v11 = v25;
    char v12 = v26;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v27;
    }
    char v26 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v21, (std::string::value_type **)&v25, *((std::string::value_type **)&v25 + 1), &v27);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v6 = __p;
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
    if (v18)
    {
      if (v26 && v17 == v25)
      {
LABEL_47:
        std::logic_error::logic_error((std::logic_error *)&v7, "Could not parse DST end time");
        v7.__r_.__value_.__r.__words[0] = MEMORY[0x263F8C3A0] + 16;
        boost::exception_detail::throw_exception_<std::invalid_argument>((std::logic_error *)&v7, (uint64_t)"boost::local_time::posix_time_zone_base<char>::posix_time_zone_base(const string_type &) [CharT = char]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/date_time/local_time/posix_time_zone.hpp", 114);
      }
    }
    else if (!v26)
    {
      goto LABEL_47;
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v7, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    }
    else {
      std::string v7 = v27;
    }
    boost::local_time::posix_time_zone_base<char>::calc_rules(a1, (uint64_t *)&v6, (uint64_t *)&v7);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v34 < 0) {
    operator delete((void *)v33);
  }
  return a1;
}

void sub_223E96168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::logic_error a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  std::logic_error::~logic_error(&a16);
  if (a14 < 0) {
    operator delete(__p);
  }
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~token_iterator((uint64_t)&a36);
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~token_iterator((uint64_t)&a50);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer(v52 - 232);
  std::pair<std::string,std::string>::~pair(v52 - 152);
  boost::detail::shared_count::~shared_count((atomic_uint **)(v50 + 152));
  boost::date_time::time_zone_names_base<char>::~time_zone_names_base(v51);
  _Unwind_Resume(a1);
}

void sub_223E96258()
{
}

void sub_223E96260()
{
}

void sub_223E96268()
{
}

void sub_223E96270()
{
}

void boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
  else {
    std::string v4 = *(std::string *)(a1 + 16);
  }
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 72);
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::token_iterator(a2, (long long *)&v4, *(void *)a1, *(void *)(a1 + 8));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_223E96340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::end(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
  else {
    std::string v4 = *(std::string *)(a1 + 16);
  }
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 72);
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::token_iterator(a2, (long long *)&v4, *(void *)(a1 + 8), *(void *)(a1 + 8));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_223E96438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::exception_detail::throw_exception_<std::invalid_argument>(std::logic_error *a1, uint64_t a2, uint64_t a3, int a4)
{
  std::logic_error::logic_error(&v7, a1);
  v7.__vftable = (std::logic_error_vtbl *)&unk_26D757970;
  std::string v8 = &unk_26D757998;
  uint64_t v9 = 0;
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  int v12 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<std::invalid_argument>>((uint64_t)&v7);
}

void sub_223E964F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v11);
  std::logic_error::~logic_error(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::local_time::posix_time_zone_base<char>::calc_zone(uint64_t a1, uint64_t a2)
{
  *(_WORD *)char __s = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  std::ostringstream::basic_ostringstream[abi:ne180100](&v33, &__p, 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (std::string::value_type *)a2;
  }
  else {
    uint64_t v5 = *(std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  std::logic_error v7 = &v5[v6];
  memset(&v32, 0, sizeof(v32));
  memset(&v31, 0, sizeof(v31));
  uint64_t v8 = MEMORY[0x263EF8318];
  while (1)
  {
    unsigned int v9 = *v5;
    if (!((v9 & 0x80000000) != 0 ? __maskrune(v9, 0x100uLL) : *(_DWORD *)(v8 + 4 * v9 + 60) & 0x100)) {
      break;
    }
    __p.__r_.__value_.__s.__data_[0] = *v5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)&__p, 1);
    ++v5;
    --v6;
  }
  std::stringbuf::str();
  std::string v32 = __p;
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  std::string::operator=(&v35, &__p);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v34);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v6) {
    goto LABEL_56;
  }
LABEL_19:
  while (1)
  {
    unsigned int v11 = *v5;
    if ((v11 & 0x80000000) != 0 ? __maskrune(v11, 0x100uLL) : *(_DWORD *)(v8 + 4 * v11 + 60) & 0x100) {
      break;
    }
    __p.__r_.__value_.__s.__data_[0] = *v5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)&__p, 1);
    ++v5;
    if (!--v6)
    {
      uint64_t v5 = v7;
      break;
    }
  }
  std::stringbuf::str();
  boost::date_time::str_from_delimited_time_duration<boost::posix_time::time_duration,char>(&__p, (uint64_t *)&v30);
  *(void *)(a1 + 112) = v30.__vftable;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  std::string::operator=(&v35, &__p);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v34);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = -43200000000;
  if (boost::date_time::int_adapter<long long>::compare((int64_t *)(a1 + 112), (int64_t *)&__p) == -1|| (v30.__vftable = (std::logic_error_vtbl *)50400000000, boost::date_time::int_adapter<long long>::compare((int64_t *)&v30, (int64_t *)(a1 + 112)) == -1))
  {
    v30.__vftable = *(std::logic_error_vtbl **)(a1 + 112);
    boost::posix_time::to_simple_string_type<char>((int64_t *)&v30);
    boost::local_time::bad_offset::bad_offset(&v30);
    boost::throw_exception<boost::local_time::bad_offset>(&v30);
  }
  if (v5 != v7)
  {
    *(unsigned char *)(a1 + 104) = 1;
    do
    {
      unsigned int v13 = *v5;
      if ((v13 & 0x80000000) != 0)
      {
        int v14 = __maskrune(v13, 0x100uLL);
        if (!v14) {
          goto LABEL_39;
        }
      }
      else
      {
        int v14 = *(_DWORD *)(v8 + 4 * v13 + 60) & 0x100;
        if (!v14) {
          goto LABEL_39;
        }
      }
      __p.__r_.__value_.__s.__data_[0] = *v5;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)&__p, 1);
      ++v5;
    }
    while (v5 != v7);
    uint64_t v5 = v7;
LABEL_39:
    std::stringbuf::str();
    std::string v31 = __p;
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    std::string::operator=(&v35, &__p);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v34);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v14) {
        goto LABEL_49;
      }
    }
    else if (!v14)
    {
LABEL_49:
      while (v5 != v7)
      {
        unsigned int v15 = *v5;
        if ((v15 & 0x80000000) != 0 ? __maskrune(v15, 0x100uLL) : *(_DWORD *)(v8 + 4 * v15 + 60) & 0x100) {
          break;
        }
        __p.__r_.__value_.__s.__data_[0] = *v5;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)&__p, 1);
        ++v5;
      }
      std::stringbuf::str();
      boost::date_time::str_from_delimited_time_duration<boost::posix_time::time_duration,char>(&__p, (uint64_t *)&v30);
      *(void *)(a1 + 12CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = v30.__vftable;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, __s);
      std::string::operator=(&v35, &__p);
      std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_54;
    }
    *(void *)(a1 + 12CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 3600000000;
LABEL_54:
    __p.__r_.__value_.__r.__words[0] = -86400000000;
    if (boost::date_time::int_adapter<long long>::compare((int64_t *)&__p, (int64_t *)(a1 + 120)) != -1|| (v30.__vftable = (std::logic_error_vtbl *)86400000000, boost::date_time::int_adapter<long long>::compare((int64_t *)(a1 + 120), (int64_t *)&v30) != -1))
    {
      v30.__vftable = *(std::logic_error_vtbl **)(a1 + 120);
      boost::posix_time::to_simple_string_type<char>((int64_t *)&v30);
      boost::local_time::bad_adjustment::bad_adjustment(&v30);
      boost::throw_exception<boost::local_time::bad_adjustment>(&v30);
    }
  }
LABEL_56:
  boost::date_time::time_zone_names_base<char>::time_zone_names_base(&__p, (long long *)&v32, (long long *)&v32, (long long *)&v31, (long long *)&v31);
  long long v17 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)long long v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)(a1 + 24) = *((void *)&__p.__r_.__value_.__l + 2);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v18 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)char v18 = v24;
  *(void *)(a1 + 48) = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24) = 0;
  int v19 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)int v19 = v26;
  *(void *)(a1 + 72) = v27;
  HIBYTE(v27) = 0;
  LOBYTE(v26) = 0;
  char v20 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*v20);
    int v21 = SHIBYTE(v27);
    *(_OWORD *)char v20 = v28;
    *(void *)(a1 + 96) = v29;
    HIBYTE(v29) = 0;
    LOBYTE(v28) = 0;
    if (v21 < 0) {
      operator delete((void *)v26);
    }
  }
  else
  {
    *(_OWORD *)char v20 = v28;
    *(void *)(a1 + 96) = v29;
    HIBYTE(v29) = 0;
    LOBYTE(v28) = 0;
  }
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  uint64_t v33 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v34[-1] + *(void *)(v33 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v34[0] = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v36);
}

void sub_223E96BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::logic_error a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  std::ostringstream::~ostringstream((uint64_t)&a39);
  _Unwind_Resume(a1);
}

uint64_t boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~token_iterator(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void boost::local_time::posix_time_zone_base<char>::calc_rules(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  __int16 v15 = 47;
  boost::char_separator<char,std::char_traits<char>>::char_separator((uint64_t)&v14, (char *)&v15, 0, 0);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v13, a2, &v14);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v12, a3, &v14);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin((uint64_t)v13, &v10);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin((uint64_t)v12, &v8);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v7, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  }
  else {
    std::string v7 = v11;
  }
  int v6 = *std::string::at(&v7, 0);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (v6 != 74)
  {
    if (v6 == 77) {
      boost::local_time::posix_time_zone_base<char>::M_func(a1, (uint64_t *)&v11, (uint64_t *)&v9);
    }
    boost::local_time::posix_time_zone_base<char>::julian_day(a1, (uint64_t)&v11, (uint64_t)&v9);
  }
  boost::local_time::posix_time_zone_base<char>::julian_no_leap(a1, &v11, &v9);
}

void sub_223E97114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~token_iterator((uint64_t)&a29);
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~token_iterator((uint64_t)&a43);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer((uint64_t)&a57);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer(v57 - 200);
  std::pair<std::string,std::string>::~pair(v57 - 120);
  _Unwind_Resume(a1);
}

uint64_t boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t boost::date_time::time_zone_names_base<char>::~time_zone_names_base(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void boost::local_time::posix_time_zone_base<char>::~posix_time_zone_base(uint64_t a1)
{
  boost::local_time::posix_time_zone_base<char>::~posix_time_zone_base(a1);
  JUMPOUT(0x22A614FA0);
}

void boost::local_time::posix_time_zone_base<char>::dst_zone_abbrev(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 80);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 96);
  }
}

void boost::local_time::posix_time_zone_base<char>::std_zone_abbrev(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 48);
  }
}

void boost::local_time::posix_time_zone_base<char>::dst_zone_name(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 56);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 72);
  }
}

void boost::local_time::posix_time_zone_base<char>::std_zone_name(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
  }
}

uint64_t boost::local_time::posix_time_zone_base<char>::has_dst(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

uint64_t boost::local_time::posix_time_zone_base<char>::dst_local_start_time(uint64_t a1, unsigned __int16 a2)
{
  if (*(unsigned char *)(a1 + 104)) {
    unsigned int v3 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 16))(*(void *)(a1 + 144), a2);
  }
  else {
    unsigned int v3 = -2;
  }
  uint64_t v5 = *(void *)(a1 + 128);
  unsigned int v6 = v3;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v7, &v6, &v5);
  return v7;
}

uint64_t boost::local_time::posix_time_zone_base<char>::dst_local_end_time(uint64_t a1, unsigned __int16 a2)
{
  if (*(unsigned char *)(a1 + 104)) {
    unsigned int v3 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 32))(*(void *)(a1 + 144), a2);
  }
  else {
    unsigned int v3 = -2;
  }
  uint64_t v5 = *(void *)(a1 + 136);
  unsigned int v6 = v3;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v7, &v6, &v5);
  return v7;
}

uint64_t boost::local_time::posix_time_zone_base<char>::base_utc_offset@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 112);
  return result;
}

uint64_t boost::local_time::posix_time_zone_base<char>::dst_offset@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 120);
  return result;
}

uint64_t boost::local_time::posix_time_zone_base<char>::to_posix_string(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
  uint64_t v2 = (const std::ios_base *)((char *)v43 + *(void *)(v43[0] - 24));
  if (v2[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v2);
    unsigned int v3 = std::locale::use_facet((const std::locale *)&v40, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 32);
    std::locale::~locale((std::locale *)&v40);
  }
  v2[1].__fmtflags_ = 48;
  uint64_t v41 = 0;
  __int16 v42 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v40, a1);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v4 = &v40;
  }
  else {
    int v4 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v40.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v4, size);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 72))(&__p, a1);
  v40.__r_.__value_.__r.__words[0] = 0;
  if (boost::date_time::int_adapter<long long>::compare((int64_t *)&__p, (int64_t *)&v40) == -1)
  {
    v40.__r_.__value_.__s.__data_[0] = 45;
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    *(void *)((char *)v7 + *(void *)(*v7 - 24) + 24) = 2;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v40, a1);
    LODWORD(__p) = -1;
    if (v40.__r_.__value_.__r.__words[0] - 0x7FFFFFFFFFFFFFFELL <= 2) {
      boost::date_time::int_adapter<long long>::mult_div_specials((int64_t *)&v40, (int *)&__p);
    }
    std::ostream::operator<<();
  }
  else
  {
    v40.__r_.__value_.__s.__data_[0] = 43;
    unsigned int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    *(void *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 2;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v40, a1);
    std::ostream::operator<<();
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v40, a1);
  if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 60000000) + 0x888888888888888, 2) > 0x444444444444444uLL|| ((*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 72))(&__p, a1), __ROR8__(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)__p / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL))
  {
    v40.__r_.__value_.__s.__data_[0] = 58;
    std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    *(void *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v40, a1);
    std::ostream::operator<<();
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v40, a1);
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      std::string v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(void *)((char *)v9 + *(void *)(*v9 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v40, a1);
      std::ostream::operator<<();
    }
  }
  if (*(void *)(a1 + 144) != v41)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v40, a1);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v10 = &v40;
    }
    else {
      std::string v10 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v11 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v11 = v40.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v10, v11);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 80))(&__p, a1);
    v40.__r_.__value_.__r.__words[0] = 0;
    if (boost::date_time::int_adapter<long long>::compare((int64_t *)&__p, (int64_t *)&v40) == -1)
    {
      v40.__r_.__value_.__s.__data_[0] = 45;
      unsigned int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(void *)((char *)v13 + *(void *)(*v13 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 80))(&v40, a1);
      LODWORD(__p) = -1;
      if (v40.__r_.__value_.__r.__words[0] - 0x7FFFFFFFFFFFFFFELL <= 2) {
        boost::date_time::int_adapter<long long>::mult_div_specials((int64_t *)&v40, (int *)&__p);
      }
      std::ostream::operator<<();
    }
    else
    {
      v40.__r_.__value_.__s.__data_[0] = 43;
      int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(void *)((char *)v12 + *(void *)(*v12 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 80))(&v40, a1);
      std::ostream::operator<<();
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 80))(&v40, a1);
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 60000000) + 0x888888888888888, 2) > 0x444444444444444uLL|| ((*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 80))(&__p, a1), __ROR8__(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)__p / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL))
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(void *)((char *)v14 + *(void *)(*v14 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 80))(&v40, a1);
      std::ostream::operator<<();
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 80))(&v40, a1);
      if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
      {
        v40.__r_.__value_.__s.__data_[0] = 58;
        __int16 v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
        *(void *)((char *)v15 + *(void *)(*v15 - 24) + 24) = 2;
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 80))(&v40, a1);
        std::ostream::operator<<();
      }
    }
    v40.__r_.__value_.__s.__data_[0] = 44;
    char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 144) + 24))(&__p);
    memset(&v40, 0, sizeof(v40));
    if ((v39 & 0x80u) == 0) {
      p_p = (std::string::value_type *)&__p;
    }
    else {
      p_p = (std::string::value_type *)__p;
    }
    if ((v39 & 0x80u) == 0) {
      std::string::size_type v18 = v39;
    }
    else {
      std::string::size_type v18 = v38;
    }
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v40, (uint64_t)&v40, p_p, &p_p[v18], v18);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v19 = &v40;
    }
    else {
      int v19 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = v40.__r_.__value_.__l.__size_;
    }
    int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v19, v20);
    char v46 = 47;
    std::string v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)&v46, 1);
    *(void *)((char *)v22 + *(void *)(*v22 - 24) + 24) = 2;
    uint64_t v23 = (void *)std::ostream::operator<<();
    char v46 = 58;
    long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v46, 1);
    *(void *)((char *)v24 + *(void *)(*v24 - 24) + 24) = 2;
    std::ostream::operator<<();
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if ((char)v39 < 0) {
      operator delete(__p);
    }
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * (*(void *)(a1 + 128) / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(void *)((char *)v25 + *(void *)(*v25 - 24) + 24) = 2;
      std::ostream::operator<<();
    }
    v40.__r_.__value_.__s.__data_[0] = 44;
    long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 144) + 40))(&__p);
    memset(&v40, 0, sizeof(v40));
    if ((v39 & 0x80u) == 0) {
      uint64_t v27 = (std::string::value_type *)&__p;
    }
    else {
      uint64_t v27 = (std::string::value_type *)__p;
    }
    if ((v39 & 0x80u) == 0) {
      std::string::size_type v28 = v39;
    }
    else {
      std::string::size_type v28 = v38;
    }
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v40, (uint64_t)&v40, v27, &v27[v28], v28);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v29 = &v40;
    }
    else {
      uint64_t v29 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v30 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v30 = v40.__r_.__value_.__l.__size_;
    }
    std::string v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v29, v30);
    char v46 = 47;
    std::string v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)&v46, 1);
    *(void *)((char *)v32 + *(void *)(*v32 - 24) + 24) = 2;
    uint64_t v33 = (void *)std::ostream::operator<<();
    char v46 = 58;
    char v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v46, 1);
    *(void *)((char *)v34 + *(void *)(*v34 - 24) + 24) = 2;
    std::ostream::operator<<();
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if ((char)v39 < 0) {
      operator delete(__p);
    }
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * (*(void *)(a1 + 136) / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      std::string v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(void *)((char *)v35 + *(void *)(*v35 - 24) + 24) = 2;
      std::ostream::operator<<();
    }
  }
  std::stringbuf::str();
  boost::detail::shared_count::~shared_count(&v42);
  v43[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v43 + *(void *)(v43[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v43[1] = MEMORY[0x263F8C318] + 16;
  if (v44 < 0) {
    operator delete((void *)v43[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v45);
}

void sub_223E982A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
}

void *boost::date_time::time_zone_names_base<char>::time_zone_names_base(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "std_name");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "std_abbrev");
  std::string::basic_string[abi:ne180100]<0>(a1 + 6, "no-dst");
  std::string::basic_string[abi:ne180100]<0>(a1 + 9, "no-dst");
  return a1;
}

void sub_223E98400(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::char_separator<char,std::char_traits<char>>::char_separator(uint64_t a1, char *a2, uint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 24), a2);
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = a4;
  *(unsigned char *)(a1 + 56) = 0;
  if (a3) {
    MEMORY[0x22A614700](a1, a3);
  }
  return a1;
}

void sub_223E984B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>(uint64_t a1, uint64_t *a2, long long *a3)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (uint64_t *)*a2;
  }
  *(void *)a1 = v5;
  uint64_t v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = (uint64_t *)*a2;
  }
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = a2[1];
  }
  *(void *)(a1 + 8) = (char *)v7 + v6;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 32) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  std::string v9 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v10 = *(long long *)((char *)a3 + 24);
    *(void *)(a1 + 56) = *((void *)a3 + 5);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  uint64_t v11 = *((void *)a3 + 6);
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a3 + 56);
  *(void *)(a1 + 64) = v11;
  return a1;
}

void sub_223E985B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::token_iterator(std::string *a1, long long *a2, std::string::size_type a3, std::string::size_type a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    a1->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v8;
  }
  std::string v9 = a1 + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  std::string::size_type v11 = *((void *)a2 + 6);
  a1[2].__r_.__value_.__s.__data_[8] = *((unsigned char *)a2 + 56);
  a1[2].__r_.__value_.__r.__words[0] = v11;
  a1[2].__r_.__value_.__r.__words[2] = a3;
  a1[3].__r_.__value_.__r.__words[0] = a4;
  a1[3].__r_.__value_.__s.__data_[8] = 0;
  a1[3].__r_.__value_.__r.__words[2] = 0;
  a1[4].__r_.__value_.__r.__words[0] = 0;
  a1[4].__r_.__value_.__l.__size_ = 0;
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::initialize((uint64_t)a1);
  return a1;
}

void sub_223E98684(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::initialize(uint64_t result)
{
  if (!*(unsigned char *)(result + 80))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(std::string::value_type **)(result + 72);
    if (*(std::string::value_type **)(result + 64) == v2) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>(result, (std::string::value_type **)(result + 64), v2, (std::string *)(result + 88));
    }
    *(unsigned char *)(v1 + 8CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = result;
  }
  return result;
}

uint64_t boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>(uint64_t a1, std::string::value_type **a2, std::string::value_type *a3, std::string *this)
{
  long long v8 = *a2;
  if (*(_DWORD *)(a1 + 52)) {
    goto LABEL_2;
  }
  if (v8 == a3) {
    return 0;
  }
  while (1)
  {
    BOOL is_dropped = boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, *v8);
    long long v8 = *a2;
    if (!is_dropped) {
      break;
    }
    *a2 = ++v8;
    if (v8 == a3)
    {
      long long v8 = a3;
      break;
    }
  }
  if (*(_DWORD *)(a1 + 52))
  {
LABEL_2:
    if (v8 != a3)
    {
      if (boost::char_separator<char,std::char_traits<char>>::is_kept(a1, *v8))
      {
        if (*(unsigned char *)(a1 + 56))
        {
          ++*a2;
          *(unsigned char *)(a1 + 56) = 0;
LABEL_25:
          std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, v8, *a2, *a2 - v8);
          return 1;
        }
      }
      else if (*(unsigned char *)(a1 + 56) || !boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, **a2))
      {
        BOOL v13 = boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, **a2);
        long long v14 = *a2;
        if (v13)
        {
          *a2 = ++v14;
          long long v8 = v14;
        }
        while (v14 != a3
             && !boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, *v14)
             && !boost::char_separator<char,std::char_traits<char>>::is_kept(a1, **a2))
        {
          long long v14 = *a2 + 1;
          *a2 = v14;
        }
      }
      *(unsigned char *)(a1 + 56) = 1;
      goto LABEL_25;
    }
    if (!*(unsigned char *)(a1 + 56))
    {
      uint64_t v12 = 1;
      *(unsigned char *)(a1 + 56) = 1;
      std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, a3, a3, 0);
      return v12;
    }
  }
  else if (v8 != a3)
  {
    BOOL is_kept = boost::char_separator<char,std::char_traits<char>>::is_kept(a1, *v8);
    std::string::size_type v11 = *a2;
    if (is_kept)
    {
      *a2 = v11 + 1;
    }
    else
    {
      while (v11 != a3
           && !boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, *v11)
           && !boost::char_separator<char,std::char_traits<char>>::is_kept(a1, **a2))
      {
        std::string::size_type v11 = *a2 + 1;
        *a2 = v11;
      }
    }
    goto LABEL_25;
  }
  return 0;
}

BOOL boost::char_separator<char,std::char_traits<char>>::is_dropped(uint64_t a1, unsigned int a2)
{
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 47))
  {
LABEL_3:
    BOOL v2 = std::string::find((const std::string *)(a1 + 24), a2, 0) == -1;
    return !v2;
  }
  if (!*(unsigned char *)(a1 + 49)) {
    return 0;
  }
  if ((a2 & 0x80000000) != 0) {
    int v3 = __maskrune(a2, 0x4000uLL);
  }
  else {
    int v3 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * a2 + 60) & 0x4000;
  }
  BOOL v2 = v3 == 0;
  return !v2;
}

BOOL boost::char_separator<char,std::char_traits<char>>::is_kept(uint64_t a1, unsigned int a2)
{
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 23))
  {
LABEL_3:
    BOOL v2 = std::string::find((const std::string *)a1, a2, 0) == -1;
    return !v2;
  }
  if (!*(unsigned char *)(a1 + 48)) {
    return 0;
  }
  if ((a2 & 0x80000000) != 0) {
    int v3 = __maskrune(a2, 0x2000uLL);
  }
  else {
    int v3 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * a2 + 60) & 0x2000;
  }
  BOOL v2 = v3 == 0;
  return !v2;
}

void std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    long long v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  long long v8 = this;
  if ((v12 & 0x80) != 0) {
    long long v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    long long v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

void boost::throw_exception<boost::exception_detail::error_info_injector<std::invalid_argument>>(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v4, (const std::logic_error *)a1);
  v4.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = &unk_26D754388;
  uint64_t v6 = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  long long v7 = *(_OWORD *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 48);
  v4.__vftable = (std::logic_error_vtbl *)&unk_26D757970;
  uint64_t v5 = &unk_26D757998;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::clone_impl((uint64_t)exception, (uint64_t)&v4);
}

void sub_223E98BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, uint64_t a11)
{
  std::logic_error::~logic_error(&a10);
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void boost::exception_detail::error_info_injector<std::invalid_argument>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = &unk_26D7578D0;
  *(void *)(a1 + 16) = &unk_26D757908;
  *(void *)(a1 + 56) = &unk_26D757940;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  std::logic_error v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26D754388;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D7578D0;
  *(void *)(a1 + 16) = &unk_26D757908;
  *(void *)(a1 + 56) = &unk_26D757940;
  return a1;
}

void sub_223E98E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<std::invalid_argument>::~error_info_injector(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x22A614FA0);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::clone()
{
}

void sub_223E98F3C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::clone_impl((uint64_t)exception, a1);
}

void sub_223E98FA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::logic_error *)(a1 - 2);
  *a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::logic_error::~logic_error(v1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 2) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::logic_error::~logic_error((std::logic_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::~clone_impl((uint64_t)a1 + *(void *)(*a1 - 40));
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<std::invalid_argument>::~error_info_injector(uint64_t a1)
{
}

void sub_223E99274(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C340] + 64;
  a1[14] = MEMORY[0x263F8C340] + 64;
  uint64_t v7 = (uint64_t)(a1 + 1);
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 24)) = v8;
  uint64_t v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 1);
  uint64_t v11 = MEMORY[0x263F8C340] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[14] = v6;
  std::stringbuf::basic_stringbuf[abi:ne180100](v7, a2, a3 | 0x10);
  return a1;
}

void sub_223E993E0(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x22A614E30](v1);
  _Unwind_Resume(a1);
}

void boost::date_time::str_from_delimited_time_duration<boost::posix_time::time_duration,char>(std::string *a1@<X0>, uint64_t *a2@<X8>)
{
  int v4 = *(unsigned __int8 *)std::string::at(a1, 0);
  strcpy(v56, "-:,.");
  boost::char_separator<char,std::char_traits<char>>::char_separator((uint64_t)&v52, v56, 0, 0);
  uint64_t v5 = boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v47, (uint64_t *)a1, &v52);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin(v5, &v40);
  unsigned __int16 v6 = 0;
  unsigned __int16 v7 = 0;
  int data = 0;
  uint64_t v9 = 0;
  for (int i = 0; ; ++i)
  {
    boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::end((uint64_t)v47, &v32);
    if (v37 && v45)
    {
      if (v35 != v43)
      {
        BOOL v11 = 0;
        goto LABEL_10;
      }
      BOOL v12 = v36 == *(void *)v44;
    }
    else
    {
      BOOL v12 = v37 == v45;
    }
    BOOL v11 = v12;
LABEL_10:
    if (v39 < 0) {
      operator delete(__p);
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (v11) {
      break;
    }
    switch(i)
    {
      case 0:
        LODWORD(v31.__r_.__value_.__l.__data_) = 0;
        std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        long long v14 = (std::string *)v46.__r_.__value_.__r.__words[0];
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v46.__r_.__value_.__l.__size_;
        }
        else {
          long long v14 = &v46;
        }
        v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        v32.__r_.__value_.__l.__size_ = (std::string::size_type)v14 + size;
        if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<int>((unsigned __int8 **)&v32, (int *)&v31) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&v32);
          v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D7572F8;
          v32.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C258];
          boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v32);
        }
        int data = (int)v31.__r_.__value_.__l.__data_;
        break;
      case 1:
        LOWORD(v31.__r_.__value_.__l.__data_) = 0;
        std::string::size_type v25 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        long long v26 = (std::string *)v46.__r_.__value_.__r.__words[0];
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v25 = v46.__r_.__value_.__l.__size_;
        }
        else {
          long long v26 = &v46;
        }
        v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        v32.__r_.__value_.__l.__size_ = (std::string::size_type)v26 + v25;
        if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v32, &v31) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&v32);
          v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D7572F8;
          v32.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C280];
          boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v32);
        }
        unsigned __int16 v6 = (unsigned __int16)v31.__r_.__value_.__l.__data_;
        break;
      case 2:
        LOWORD(v31.__r_.__value_.__l.__data_) = 0;
        std::string::size_type v15 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        char v16 = (std::string *)v46.__r_.__value_.__r.__words[0];
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v15 = v46.__r_.__value_.__l.__size_;
        }
        else {
          char v16 = &v46;
        }
        v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
        v32.__r_.__value_.__l.__size_ = (std::string::size_type)v16 + v15;
        if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v32, &v31) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&v32);
          v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D7572F8;
          v32.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C280];
          boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v32);
        }
        unsigned __int16 v7 = (unsigned __int16)v31.__r_.__value_.__l.__data_;
        break;
      case 3:
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v17 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v17 = v46.__r_.__value_.__l.__size_;
        }
        if ((int)v17 >= 6)
        {
          std::string::basic_string(&v31, &v46, 0, 6uLL, (std::allocator<char> *)&v32);
          uint64_t v57 = 0;
          std::string::size_type v27 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
          std::string::size_type v28 = (std::string *)v31.__r_.__value_.__r.__words[0];
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v27 = v31.__r_.__value_.__l.__size_;
          }
          else {
            std::string::size_type v28 = &v31;
          }
          v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
          v32.__r_.__value_.__l.__size_ = (std::string::size_type)v28 + v27;
          if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>((unsigned __int8 **)&v32, &v57) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&v32);
            v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D7572F8;
            v32.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C290];
            boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v32);
          }
          uint64_t v9 = v57;
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v31.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          v31.__r_.__value_.__r.__words[0] = 0;
          if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v18 = &v46;
          }
          else {
            std::string::size_type v18 = (std::string *)v46.__r_.__value_.__r.__words[0];
          }
          v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
          v32.__r_.__value_.__l.__size_ = (std::string::size_type)v18 + v17;
          if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>((unsigned __int8 **)&v32, (uint64_t *)&v31) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&v32);
            v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D7572F8;
            v32.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C290];
            boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v32);
          }
          int v19 = 0;
          uint32x4_t v20 = (uint32x4_t)vdupq_n_s32(5 - (int)v17);
          v21.i64[0] = 0x100000001;
          v21.i64[1] = 0x100000001;
          v22.i64[0] = 0xA0000000ALL;
          v22.i64[1] = 0xA0000000ALL;
          do
          {
            int8x16_t v23 = (int8x16_t)v21;
            int32x4_t v21 = vmulq_s32(v21, v22);
            v19 += 4;
          }
          while (((9 - v17) & 0xFFFFFFFC) != v19);
          int8x16_t v24 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v19 - 4), (int8x16_t)xmmword_2246C0930), v20), v23, (int8x16_t)v21);
          *(int32x2_t *)v24.i8 = vmul_s32(*(int32x2_t *)v24.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
          uint64_t v9 = v31.__r_.__value_.__r.__words[0] * (v24.i32[0] * v24.i32[1]);
        }
        break;
      default:
        break;
    }
    char v45 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v40, &v43, *(std::string::value_type **)v44, &v46);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v4 == 45)
  {
    uint64_t v29 = boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>::to_tick_count(data, v6, v7, v9);
    v40.__r_.__value_.__r.__words[0] = v29;
    LODWORD(v32.__r_.__value_.__l.__data_) = -1;
    if ((unint64_t)(v29 - 0x7FFFFFFFFFFFFFFELL) > 2) {
      uint64_t v30 = -v29;
    }
    else {
      uint64_t v30 = boost::date_time::int_adapter<long long>::mult_div_specials((int64_t *)&v40, (int *)&v32);
    }
    *a2 = v30;
  }
  else
  {
    *a2 = boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>::to_tick_count(data, v6, v7, v9);
  }
  if (v51 < 0) {
    operator delete(v50);
  }
  if (v49 < 0) {
    operator delete(v48);
  }
  if (v55 < 0) {
    operator delete(v54);
  }
  if (v53 < 0) {
    operator delete((void *)v52);
  }
}

void sub_223E999BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::exception a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer(v33 - 248);
  std::pair<std::string,std::string>::~pair(v33 - 168);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::local_time::bad_offset>(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_26D757AE8;
  int v4 = &unk_26D757B10;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_223E99B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::logic_error::~logic_error(&a10);
  if (v13) {
    __cxa_free_exception(v11);
  }
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::local_time::bad_adjustment>(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_26D757C88;
  int v4 = &unk_26D757CB0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_223E99C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::logic_error::~logic_error(&a10);
  if (v13) {
    __cxa_free_exception(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<int>(unsigned __int8 **a1, int *a2)
{
  std::logic_error v3 = *a1;
  BOOL v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  int v16 = 0;
  int v5 = *v3;
  if (v5 == 45 || v5 == 43) {
    *a1 = ++v3;
  }
  v11[0] = 0;
  int v12 = 1;
  int v13 = &v16;
  long long v14 = v3;
  std::string::size_type v15 = v2;
  unsigned int v6 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned int,char>::convert((uint64_t)v11);
  int v7 = v16;
  if (v16 >= 0) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v16 < 0x80000001) {
    unsigned int v9 = v6;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v5 == 45)
  {
    int v7 = -v16;
    uint64_t result = v9;
  }
  else
  {
    uint64_t result = v8;
  }
  *a2 = v7;
  return result;
}

uint64_t boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned int,char>::convert(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v2 - 1;
  std::logic_error v3 = *(_DWORD **)(a1 + 8);
  *std::logic_error v3 = 0;
  if (*(void *)(a1 + 16) <= (unint64_t)(v2 - 1))
  {
    int v4 = *(unsigned __int8 *)(v2 - 1);
    if ((v4 - 58) < 0xFFFFFFF6) {
      return 0;
    }
    *std::logic_error v3 = v4 - 48;
    *(void *)(a1 + 24) = v2 - 2;
    MEMORY[0x22A614D20](&v30);
    unsigned int v6 = std::locale::classic();
    if (std::locale::operator==(&v30, v6))
    {
      uint64_t v1 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned int,char>::main_convert_loop(a1);
LABEL_45:
      std::locale::~locale(&v30);
      return v1;
    }
    int v7 = std::locale::use_facet(&v30, MEMORY[0x263F8C150]);
    ((void (*)(void **__return_ptr))v7->__vftable[1].__on_zero_shared)(&__p);
    if ((char)v29 < 0)
    {
      uint64_t v8 = v28;
      if (!v28) {
        goto LABEL_42;
      }
      p_p = (char *)__p;
    }
    else
    {
      uint64_t v8 = v29;
      if (!v29) {
        goto LABEL_42;
      }
      p_p = (char *)&__p;
    }
    if (*p_p >= 1)
    {
      char v10 = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[1].~facet_0)(v7);
      BOOL v11 = *(unsigned char **)(a1 + 16);
      int v12 = *(unsigned char **)(a1 + 24);
      if (v12 >= v11)
      {
        unsigned __int8 v13 = 0;
        long long v14 = __p;
        if ((v29 & 0x80u) == 0) {
          long long v14 = &__p;
        }
        char v15 = *v14 - 1;
        do
        {
          if (v15)
          {
            unsigned int v16 = *(_DWORD *)(a1 + 4);
            if (*(unsigned char *)a1) {
              BOOL v17 = 1;
            }
            else {
              BOOL v17 = v16 > 0x19999999;
            }
            char v18 = v17;
            *(unsigned char *)a1 = v18;
            unsigned int v19 = 10 * v16;
            *(_DWORD *)(a1 + 4) = 10 * v16;
            int v20 = (char)*v12;
            if ((*v12 - 58) < 0xF6u) {
              goto LABEL_47;
            }
            unsigned int v21 = v20 - 48;
            int v22 = (v20 - 48) * v19;
            if (v21)
            {
              if (v18) {
                goto LABEL_47;
              }
              if (((v21 * (unint64_t)v19) & 0xFFFFFFFF00000000) != 0) {
                goto LABEL_47;
              }
              int8x16_t v23 = *(_DWORD **)(a1 + 8);
              int v24 = *v23;
              if (__CFADD__(v22, *v23)) {
                goto LABEL_47;
              }
            }
            else
            {
              int8x16_t v23 = *(_DWORD **)(a1 + 8);
              int v24 = *v23;
            }
            *int8x16_t v23 = v24 + v22;
            --v15;
          }
          else
          {
            if (*v12 != v10) {
              goto LABEL_42;
            }
            if (v12 == v11)
            {
LABEL_47:
              uint64_t v1 = 0;
              goto LABEL_43;
            }
            if (v8 - 1 > (unint64_t)v13) {
              ++v13;
            }
            if ((v29 & 0x80u) == 0) {
              std::string::size_type v25 = &__p;
            }
            else {
              std::string::size_type v25 = __p;
            }
            char v15 = v25[v13];
          }
          *(void *)(a1 + 24) = --v12;
        }
        while (v12 >= v11);
      }
      uint64_t v1 = 1;
      goto LABEL_43;
    }
LABEL_42:
    uint64_t v1 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned int,char>::main_convert_loop(a1);
LABEL_43:
    if ((char)v29 < 0) {
      operator delete(__p);
    }
    goto LABEL_45;
  }
  return v1;
}

void sub_223E99F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned int,char>::main_convert_loop(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(unsigned char **)(a1 + 24);
  if ((unint64_t)v2 < v1) {
    return 1;
  }
  char v4 = *(unsigned char *)a1 != 0;
  while (1)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 4);
    v4 |= v5 > 0x19999999;
    *(unsigned char *)a1 = v4 & 1;
    unsigned int v6 = 10 * v5;
    *(_DWORD *)(a1 + 4) = 10 * v5;
    int v7 = (char)*v2;
    if ((*v2 - 58) < 0xF6u) {
      break;
    }
    unsigned int v8 = v7 - 48;
    int v9 = (v7 - 48) * v6;
    if (v8)
    {
      if (v4) {
        return 0;
      }
      if (((v8 * (unint64_t)v6) & 0xFFFFFFFF00000000) != 0) {
        return 0;
      }
      char v10 = *(_DWORD **)(a1 + 8);
      int v11 = *v10;
      if (__CFADD__(v9, *v10)) {
        return 0;
      }
    }
    else
    {
      char v10 = *(_DWORD **)(a1 + 8);
      int v11 = *v10;
    }
    _DWORD *v10 = v11 + v9;
    *(void *)(a1 + 24) = --v2;
    if ((unint64_t)v2 < v1) {
      return 1;
    }
  }
  return 0;
}

uint64_t boost::date_time::int_adapter<long long>::mult_div_specials(int64_t *a1, int *a2)
{
  int64_t v3 = *a1;
  uint64_t result = 0x7FFFFFFFFFFFFFFELL;
  if (v3 != 0x7FFFFFFFFFFFFFFELL)
  {
    int64_t v6 = 0;
    if (boost::date_time::int_adapter<long long>::compare(a1, &v6) == 1 && *a2 > 0) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
    int64_t v7 = 0;
    if (boost::date_time::int_adapter<long long>::compare(a1, &v7) == -1 && *a2 < 0)
    {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      int64_t v6 = 0;
      if (boost::date_time::int_adapter<long long>::compare(a1, &v6) == 1 && *a2 < 0) {
        return 0x8000000000000000;
      }
      int64_t v7 = 0;
      if (boost::date_time::int_adapter<long long>::compare(a1, &v7) == -1 && *a2 > 0) {
        return 0x8000000000000000;
      }
      else {
        return 0x7FFFFFFFFFFFFFFELL;
      }
    }
  }
  return result;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_26D7542E8;
  char v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_26D757B30;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = &unk_26D757A48;
  *(void *)(a1 + 16) = &unk_26D757A80;
  *(void *)(a1 + 56) = &unk_26D757AB8;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_26D757B30;
  char v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26D754388;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D757A48;
  *(void *)(a1 + 16) = &unk_26D757A80;
  *(void *)(a1 + 56) = &unk_26D757AB8;
  return a1;
}

void sub_223E9A2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::clone()
{
}

void sub_223E9A394(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::clone_impl((uint64_t)exception, a1);
}

void sub_223E9A400(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::rethrow(void *a1)
{
}

void sub_223E9A56C(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::posix_time::to_simple_string_type<char>(int64_t *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  int64_t v2 = *a1;
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    int64_t v16 = 0;
    if (boost::date_time::int_adapter<long long>::compare(a1, &v16) == -1)
    {
      LOBYTE(v16) = 45;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v16, 1);
    }
    *(void *)((char *)&v13[3] + *(void *)(v13[0] - 24)) = 2;
    LOBYTE(v16) = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, (char *)&v16);
    int v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)":", 1);
    *(void *)((char *)&v13[3] + *(void *)(v13[0] - 24)) = 2;
    LOBYTE(v16) = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, (char *)&v16);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)":", 1);
    *(void *)((char *)&v13[3] + *(void *)(v13[0] - 24)) = 2;
    LOBYTE(v16) = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, (char *)&v16);
    std::ostream::operator<<();
    if (*a1 % 1000000)
    {
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)".", 1);
      *(void *)((char *)v11 + *(void *)(*v11 - 24) + 24) = 6;
      LOBYTE(v16) = 48;
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, (char *)&v16);
      std::ostream::operator<<();
    }
  }
  else
  {
    int64_t v3 = "not-a-date-time";
    uint64_t v4 = 15;
    uint64_t v5 = "+infinity";
    uint64_t v6 = 9;
    if (v2 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v5 = "";
      uint64_t v6 = 0;
    }
    if (v2 != 0x7FFFFFFFFFFFFFFELL)
    {
      int64_t v3 = v5;
      uint64_t v4 = v6;
    }
    if (v2 == 0x8000000000000000) {
      uint64_t v7 = "-infinity";
    }
    else {
      uint64_t v7 = v3;
    }
    if (v2 == 0x8000000000000000) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = v4;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v7, v8);
  }
  std::stringbuf::str();
  v13[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v15);
}

void sub_223E9A958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::logic_error *boost::local_time::bad_offset::bad_offset(std::logic_error *a1)
{
  std::operator+<char>();
  std::logic_error::logic_error(a1, &v3);
  a1->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  a1->__vftable = (std::logic_error_vtbl *)&unk_26D757B30;
  return a1;
}

void sub_223E9AA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_26D7542E8;
  uint64_t v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_26D757CD0;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = &unk_26D757BE8;
  *(void *)(a1 + 16) = &unk_26D757C20;
  *(void *)(a1 + 56) = &unk_26D757C58;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_26D757CD0;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26D754388;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D757BE8;
  *(void *)(a1 + 16) = &unk_26D757C20;
  *(void *)(a1 + 56) = &unk_26D757C58;
  return a1;
}

void sub_223E9ABDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_year>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::clone()
{
}

void sub_223E9AC78(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::clone_impl((uint64_t)exception, a1);
}

void sub_223E9ACE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::rethrow(void *a1)
{
}

void sub_223E9AE50(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::local_time::bad_adjustment::bad_adjustment(std::logic_error *a1)
{
  std::operator+<char>();
  std::logic_error::logic_error(a1, &v3);
  a1->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  a1->__vftable = (std::logic_error_vtbl *)&unk_26D757CD0;
  return a1;
}

void sub_223E9AEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *boost::date_time::time_zone_names_base<char>::time_zone_names_base(std::string *this, long long *a2, long long *a3, long long *a4, long long *a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v10;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v11 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v11;
  }
  int v12 = this + 3;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v13 = *a5;
    this[3].__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  return this;
}

void sub_223E9AFFC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::local_time::posix_time_zone_base<char>::M_func(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  strcpy(v38, "M.");
  boost::char_separator<char,std::char_traits<char>>::char_separator((uint64_t)&v37, v38, 0, 0);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v36, a2, &v37);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v35, a3, &v37);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin((uint64_t)v36, &v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v21, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else {
    std::string v21 = v28;
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v29;
  }
  uint64_t v23 = v30;
  char v24 = v31;
  long long v25 = v32;
  char v26 = v33;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v27, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  }
  else {
    std::string v27 = v34;
  }
  char v33 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v28, (std::string::value_type **)&v32, *((std::string::value_type **)&v32 + 1), &v34);
  __int16 v39 = 0;
  std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  long long v6 = (std::bad_cast_vtbl *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  else {
    long long v6 = (std::bad_cast_vtbl *)&v27;
  }
  v40.__vftable = v6;
  uint64_t v41 = (char *)v6 + size;
  if (boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v40, &v39))
  {
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v21, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
    }
    else {
      std::string v21 = v28;
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v29;
    }
    uint64_t v23 = v30;
    char v24 = v31;
    long long v25 = v32;
    char v26 = v33;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v27, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
    }
    else {
      std::string v27 = v34;
    }
    char v33 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v28, (std::string::value_type **)&v32, *((std::string::value_type **)&v32 + 1), &v34);
    __int16 v39 = 0;
    std::string::size_type v7 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    uint64_t v8 = (std::bad_cast_vtbl *)v27.__r_.__value_.__r.__words[0];
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v7 = v27.__r_.__value_.__l.__size_;
    }
    else {
      uint64_t v8 = (std::bad_cast_vtbl *)&v27;
    }
    v40.__vftable = v8;
    uint64_t v41 = (char *)v8 + v7;
    if (boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v40, &v39))
    {
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      LOWORD(v40.__vftable) = 0;
      std::string::size_type v9 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      long long v10 = (std::string *)v34.__r_.__value_.__r.__words[0];
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v9 = v34.__r_.__value_.__l.__size_;
      }
      else {
        long long v10 = &v34;
      }
      v21.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      v21.__r_.__value_.__l.__size_ = (std::string::size_type)v10 + v9;
      if (boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v21, &v40))
      {
        boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin((uint64_t)v35, &v21);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
        std::string v28 = v21;
        *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
        v21.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        std::string v29 = __p;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v30 = v23;
        char v31 = v24;
        long long v32 = v25;
        char v33 = v26;
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v34.__r_.__value_.__l.__data_);
          std::string v34 = v27;
          *((unsigned char *)&v27.__r_.__value_.__s + 23) = 0;
          v27.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::string v34 = v27;
          *((unsigned char *)&v27.__r_.__value_.__s + 23) = 0;
          v27.__r_.__value_.__s.__data_[0] = 0;
        }
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v21.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v21, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
        }
        else {
          std::string v21 = v28;
        }
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v29;
        }
        uint64_t v23 = v30;
        char v24 = v31;
        long long v25 = v32;
        char v26 = v33;
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v27, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
        }
        else {
          std::string v27 = v34;
        }
        char v33 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v28, (std::string::value_type **)&v32, *((std::string::value_type **)&v32 + 1), &v34);
        __int16 v39 = 0;
        std::string::size_type v11 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        int v12 = (std::bad_cast_vtbl *)v27.__r_.__value_.__r.__words[0];
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v11 = v27.__r_.__value_.__l.__size_;
        }
        else {
          int v12 = (std::bad_cast_vtbl *)&v27;
        }
        v40.__vftable = v12;
        uint64_t v41 = (char *)v12 + v11;
        if (boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v40, &v39))
        {
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v27.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v21.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v21, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
          }
          else {
            std::string v21 = v28;
          }
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__p, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
          }
          else {
            std::string __p = v29;
          }
          uint64_t v23 = v30;
          char v24 = v31;
          long long v25 = v32;
          char v26 = v33;
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v27, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
          }
          else {
            std::string v27 = v34;
          }
          char v33 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v28, (std::string::value_type **)&v32, *((std::string::value_type **)&v32 + 1), &v34);
          __int16 v39 = 0;
          std::string::size_type v13 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
          char v14 = (std::bad_cast_vtbl *)v27.__r_.__value_.__r.__words[0];
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v13 = v27.__r_.__value_.__l.__size_;
          }
          else {
            char v14 = (std::bad_cast_vtbl *)&v27;
          }
          v40.__vftable = v14;
          uint64_t v41 = (char *)v14 + v13;
          if (boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v40, &v39))
          {
            if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v27.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v21.__r_.__value_.__l.__data_);
            }
            LOWORD(v40.__vftable) = 0;
            std::string::size_type v15 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
            int64_t v16 = (std::string *)v34.__r_.__value_.__r.__words[0];
            if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v15 = v34.__r_.__value_.__l.__size_;
            }
            else {
              int64_t v16 = &v34;
            }
            v21.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
            v21.__r_.__value_.__l.__size_ = (std::string::size_type)v16 + v15;
            if (boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v21, &v40))operator new(); {
            std::bad_cast::bad_cast((std::bad_cast *)&v21);
            }
            v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D7572F8;
            v21.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C280];
            boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v21);
          }
          int v20 = std::bad_cast::bad_cast(&v40);
          v40.__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
          uint64_t v42 = MEMORY[0x263F8C280];
          boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v20);
        }
        unsigned int v19 = std::bad_cast::bad_cast(&v40);
        v40.__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
        uint64_t v42 = MEMORY[0x263F8C280];
        boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v19);
      }
      std::bad_cast::bad_cast((std::bad_cast *)&v21);
      v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D7572F8;
      v21.__r_.__value_.__r.__words[2] = MEMORY[0x263F8C280];
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v21);
    }
    char v18 = std::bad_cast::bad_cast(&v40);
    v40.__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
    uint64_t v42 = MEMORY[0x263F8C280];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v18);
  }
  BOOL v17 = std::bad_cast::bad_cast(&v40);
  v40.__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
  uint64_t v42 = MEMORY[0x263F8C280];
  boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v17);
}

void sub_223E9BA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17.__vftable);
  }
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~token_iterator((uint64_t)&a37);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer((uint64_t)&a52);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer((uint64_t)&a62);
  std::pair<std::string,std::string>::~pair(v62 - 200);
  _Unwind_Resume(a1);
}

void boost::local_time::posix_time_zone_base<char>::julian_no_leap(uint64_t a1, const std::string *a2, const std::string *a3)
{
  std::string::basic_string(&v24, a2, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v26);
  int v25 = 0;
  std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  uint64_t v5 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v24.__r_.__value_.__l.__size_;
  }
  else {
    uint64_t v5 = &v24;
  }
  v26[0].__vftable = (std::bad_cast_vtbl *)v5;
  v26[1].__vftable = (std::bad_cast_vtbl *)((char *)v5 + size);
  if (boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<int>((unsigned __int8 **)v26, &v25))
  {
    int v6 = v25;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    for (unsigned __int16 i = 1; ; ++i)
    {
      unsigned __int16 v23 = 1;
      boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v23, i);
      unsigned int v8 = v23 - 2;
      int v9 = v8 > 9 ? 31 : dword_2246C11D0[(__int16)v8];
      if (v6 < v9) {
        break;
      }
      unsigned __int16 v22 = 1;
      boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v22, i);
      unsigned int v10 = v22 - 2;
      if (v10 > 9) {
        int v11 = -31;
      }
      else {
        int v11 = dword_2246C11F8[(__int16)v10];
      }
      v6 += v11;
    }
    std::string::basic_string(&v24, a3, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v26);
    int v25 = 0;
    std::string::size_type v12 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    std::string::size_type v13 = (std::string *)v24.__r_.__value_.__r.__words[0];
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v12 = v24.__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v13 = &v24;
    }
    v26[0].__vftable = (std::bad_cast_vtbl *)v13;
    v26[1].__vftable = (std::bad_cast_vtbl *)((char *)v13 + v12);
    if (boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<int>((unsigned __int8 **)v26, &v25))
    {
      int v14 = v25;
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      for (unsigned __int16 j = 1; ; ++j)
      {
        unsigned __int16 v21 = 1;
        boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v21, j);
        unsigned int v16 = v21 - 2;
        int v17 = v16 > 9 ? 31 : dword_2246C11D0[(__int16)v16];
        if (v14 <= v17) {
          break;
        }
        unsigned __int16 v20 = 1;
        boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v20, j);
        unsigned int v18 = v20 - 2;
        if (v18 > 9) {
          int v19 = -31;
        }
        else {
          int v19 = dword_2246C11F8[(__int16)v18];
        }
        v14 += v19;
      }
      operator new();
    }
    std::bad_cast::bad_cast(v26);
    v26[0].__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
    uint64_t v27 = MEMORY[0x263F8C258];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v26);
  }
  std::bad_cast::bad_cast(v26);
  v26[0].__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
  uint64_t v27 = MEMORY[0x263F8C258];
  boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v26);
}

void sub_223E9BFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::exception a24)
{
}

void boost::local_time::posix_time_zone_base<char>::julian_day(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LODWORD(v8) = 0;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  uint64_t v5 = *(std::bad_cast_vtbl **)a2;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v5 = (std::bad_cast_vtbl *)a2;
  }
  v9[0].__vftable = v5;
  v9[1].__vftable = (std::bad_cast_vtbl *)((char *)v5 + v4);
  if (boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<int>((unsigned __int8 **)v9, (int *)&v8))
  {
    LODWORD(v8) = 0;
    uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
    std::string::size_type v7 = *(std::bad_cast_vtbl **)a3;
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a3 + 8);
    }
    else {
      std::string::size_type v7 = (std::bad_cast_vtbl *)a3;
    }
    v9[0].__vftable = v7;
    v9[1].__vftable = (std::bad_cast_vtbl *)((char *)v7 + v6);
    if (boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<int>((unsigned __int8 **)v9, (int *)&v8))operator new(); {
    std::bad_cast::bad_cast(v9);
    }
    v9[0].__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
    uint64_t v10 = MEMORY[0x263F8C258];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v9);
  }
  std::bad_cast::bad_cast(v9);
  v9[0].__vftable = (std::bad_cast_vtbl *)&unk_26D7572F8;
  uint64_t v10 = MEMORY[0x263F8C258];
  boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v9);
}

void sub_223E9C23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception a15)
{
}

void boost::date_time::nth_kday_of_month<boost::gregorian::date>::~nth_kday_of_month()
{
}

uint64_t boost::date_time::nth_kday_of_month<boost::gregorian::date>::get_date(uint64_t a1, unsigned __int16 a2)
{
  std::string v3 = boost::gregorian::date::date(&v9, a2, *(_WORD *)(a1 + 8), 1u);
  uint64_t v7 = 7;
  uint64_t v8 = 1;
  int v4 = *(unsigned __int16 *)(a1 + 16);
  while (v4 != (unsigned __int16)boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::day_of_week(v3))
  {
    unsigned int v9 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator+(&v9, &v8);
    int v4 = *(unsigned __int16 *)(a1 + 16);
    std::string v3 = &v9;
  }
  if (*(int *)(a1 + 12) >= 2)
  {
    int v5 = 1;
    do
    {
      unsigned int v9 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator+(&v9, &v7);
      ++v5;
    }
    while (v5 < *(_DWORD *)(a1 + 12));
  }
  if (*(unsigned __int16 *)(a1 + 8) == (unsigned __int16)boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::month(&v9)) {
    return v9;
  }
  else {
    return boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator-(&v9, &v7);
  }
}

uint64_t boost::date_time::nth_kday_of_month<boost::gregorian::date>::to_string()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  char v6 = 77;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v6, 1);
  std::logic_error v0 = (void *)std::ostream::operator<<();
  char v6 = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)&v6, 1);
  uint64_t v1 = (void *)std::ostream::operator<<();
  char v6 = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v6, 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v5);
}

void sub_223E9C4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::day_of_week(_DWORD *a1)
{
  int v1 = *a1 + 32044;
  unsigned int v2 = ((4 * v1) | 3u) / 0x23AB1;
  unsigned int v3 = v1 - ((146097 * v2) >> 2);
  unsigned int v4 = ((4 * v3) | 3) / 0x5B5;
  unsigned int v5 = v3 - ((1461 * v4) >> 2);
  unsigned int v6 = 5 * v5 + 2;
  unsigned int v7 = v5 - (153 * (v6 / 0x99) + 2) / 5 + 1;
  unsigned int v8 = v6 / 0x99 + 65524 * (v6 / 0x5FA) + 3;
  unsigned __int16 v15 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v15, (unsigned __int16)(v4 + 100 * v2 - 4800 + v6 / 0x5FA));
  __int16 v14 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v14, v15);
  unsigned __int16 v13 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v13, (unsigned __int16)v8);
  unsigned __int16 v12 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v12, (unsigned __int16)v7);
  int v9 = (14 - v13) / 12;
  int v10 = v12
      + (unsigned __int16)(v14 - v9)
      + ((unsigned __int16)(v14 - v9) >> 2)
      - (unsigned __int16)(v14 - v9) / 0x64u
      + (unsigned __int16)(v14 - v9) / 0x190u
      + ((357913942 * (unint64_t)(31 * (unsigned __int16)(v13 + 12 * v9 - 2))) >> 32);
  uint64_t result = (v10 % 7);
  if ((unsigned __int16)(v10 % 7) >= 7u) {
    boost::CV::simple_exception_policy<unsigned short,(unsigned short)0,(unsigned short)6,boost::gregorian::bad_weekday>::on_error();
  }
  return result;
}

uint64_t boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::month(_DWORD *a1)
{
  int v1 = *a1 + 32044;
  unsigned int v2 = ((4 * v1) | 3u) / 0x23AB1;
  unsigned int v3 = v1 - ((146097 * v2) >> 2);
  unsigned int v4 = ((4 * v3) | 3) / 0x5B5;
  unsigned int v5 = v3 - ((1461 * v4) >> 2);
  unsigned int v6 = 5 * v5 + 2;
  unsigned int v7 = v5 - (153 * (v6 / 0x99) + 2) / 5 + 1;
  unsigned int v8 = v6 / 0x99 + 65524 * (v6 / 0x5FA) + 3;
  unsigned __int16 v13 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v13, (unsigned __int16)(v4 + 100 * v2 - 4800 + v6 / 0x5FA));
  __int16 v12 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v12, v13);
  unsigned __int16 v11 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v11, (unsigned __int16)v8);
  __int16 v10 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v10, (unsigned __int16)v7);
  return v11;
}

uint64_t boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator-(unsigned int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t result = *a1;
  if ((unint64_t)(*a2 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    if ((result + 2) < 3) {
      LODWORD(v2) = 0;
    }
    return (result - v2);
  }
  else
  {
    if (v2 == 0x7FFFFFFFFFFFFFFELL || result == -2) {
      return 4294967294;
    }
    if (result)
    {
      if (result != -1)
      {
        if (v2 == 0x7FFFFFFFFFFFFFFFLL) {
          unsigned int v6 = 0;
        }
        else {
          unsigned int v6 = result - v2;
        }
        if (v2 == 0x8000000000000000) {
          return 0xFFFFFFFFLL;
        }
        else {
          return v6;
        }
      }
      unint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v5 = 0x8000000000000000;
    }
    if (v2 == v5) {
      return 4294967294;
    }
  }
  return result;
}

void boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>::~day_calc_dst_rule()
{
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>::start_day(uint64_t a1, unsigned __int16 a2)
{
  return boost::date_time::nth_kday_of_month<boost::gregorian::date>::get_date(a1 + 8, a2);
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>::start_rule_as_string()
{
  return boost::date_time::nth_kday_of_month<boost::gregorian::date>::to_string();
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>::end_day(uint64_t a1, unsigned __int16 a2)
{
  return boost::date_time::nth_kday_of_month<boost::gregorian::date>::get_date(a1 + 32, a2);
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>::end_rule_as_string()
{
  return boost::date_time::nth_kday_of_month<boost::gregorian::date>::to_string();
}

void boost::shared_ptr<boost::date_time::dst_day_calc_rule<boost::gregorian::date>>::shared_ptr<boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>>(&v2);
}

void sub_223E9C948(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::shared_count<boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_223E9C9CC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    boost::detail::shared_count::shared_count<boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>>(v1);
  }
  __cxa_rethrow();
}

void sub_223E9C9E4(_Unwind_Exception *a1)
{
}

uint64_t boost::detail::sp_counted_impl_p<boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t boost::date_time::partial_date<boost::gregorian::date>::get_date(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2 = *(unsigned __int16 *)(a1 + 8);
  int v3 = *(unsigned __int16 *)(a1 + 10);
  if (v2 == 29 && v3 == 2)
  {
    if ((a2 & 3) != 0
      || ((unsigned __int16)((a2 << 14) | ((unsigned __int16)(23593 * a2) >> 2)) <= 0x28Fu
        ? (BOOL v5 = a2 % 0x190u == 0)
        : (BOOL v5 = 1),
          !v5))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"No Feb 29th in given year of ", 29);
      unsigned int v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)".", 1);
      std::stringbuf::str();
      std::logic_error::logic_error(&v9, &v8);
      v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      boost::throw_exception<std::invalid_argument>(&v9);
    }
    LOWORD(v3) = 2;
  }
  boost::gregorian::date::date(&v11, a2, v3, v2);
  return v11;
}

void sub_223E9CB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::logic_error a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::partial_date<boost::gregorian::date>::to_string(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  boost::gregorian::date::date(&v3, 0x7D4u, *(_WORD *)(a1 + 10), *(_WORD *)(a1 + 8));
  boost::gregorian::date::day_of_year((boost::gregorian::date *)&v3);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v4[1] = MEMORY[0x263F8C318] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v6);
}

void sub_223E9CCFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::throw_exception<std::invalid_argument>(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_26D757970;
  unsigned int v4 = &unk_26D757998;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_223E9CDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::logic_error::~logic_error(&a10);
  if (v13) {
    __cxa_free_exception(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::gregorian::date::day_of_year(boost::gregorian::date *this)
{
  unsigned __int16 v2 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(this);
  boost::gregorian::date::date(&v5, v2, 1u, 1u);
  boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator-((unsigned int *)this, &v5, &v4);
  unsigned __int16 v6 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)366,boost::gregorian::bad_day_of_year>>::assign(&v6, (unsigned __int16)(v4 + 1));
  return v6;
}

uint64_t boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(_DWORD *a1)
{
  int v1 = *a1 + 32044;
  unsigned int v2 = ((4 * v1) | 3u) / 0x23AB1;
  unsigned int v3 = v1 - ((146097 * v2) >> 2);
  unsigned int v4 = ((4 * v3) | 3) / 0x5B5;
  unsigned int v5 = v3 - ((1461 * v4) >> 2);
  unsigned int v6 = 5 * v5 + 2;
  unsigned int v7 = v5 - (153 * (v6 / 0x99) + 2) / 5 + 1;
  unsigned int v8 = v6 / 0x99 + 65524 * (v6 / 0x5FA) + 3;
  unsigned __int16 v13 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v13, (unsigned __int16)(v4 + 100 * v2 - 4800 + v6 / 0x5FA));
  unsigned __int16 v12 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v12, v13);
  __int16 v11 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v11, (unsigned __int16)v8);
  __int16 v10 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v10, (unsigned __int16)v7);
  return v12;
}

unsigned int *boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator-@<X0>(unsigned int *result@<X0>, unsigned int *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  if ((v3 + 2) >= 3)
  {
    if ((v4 + 2) >= 3)
    {
      unint64_t v6 = v3 - v4;
      goto LABEL_27;
    }
    if (v4 == -2) {
      goto LABEL_17;
    }
  }
  else
  {
    BOOL v5 = v3 == -2 || v4 == -2;
    if (v5) {
      goto LABEL_17;
    }
  }
  if (!v3)
  {
    if (v4)
    {
      unint64_t v6 = 0x8000000000000000;
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v3 == -1)
  {
    if (v4 != -1)
    {
      unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_27;
    }
LABEL_17:
    unint64_t v6 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_27;
  }
  int v7 = v3 - v4;
  unint64_t v8 = 0x7FFFFFFFFFFFFFFELL;
  if (!v7) {
    unint64_t v8 = 0x8000000000000000;
  }
  BOOL v5 = v7 == -1;
  uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v5) {
    uint64_t v9 = v8;
  }
  if (!v4) {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v4 == -1) {
    unint64_t v6 = 0x8000000000000000;
  }
  else {
    unint64_t v6 = v9;
  }
LABEL_27:
  *a3 = v6;
  return result;
}

void boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>::~day_calc_dst_rule()
{
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>::start_day(uint64_t a1, unsigned __int16 a2)
{
  return boost::date_time::partial_date<boost::gregorian::date>::get_date(a1 + 8, a2);
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>::start_rule_as_string(uint64_t a1)
{
  return boost::date_time::partial_date<boost::gregorian::date>::to_string(a1 + 8);
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>::end_day(uint64_t a1, unsigned __int16 a2)
{
  return boost::date_time::partial_date<boost::gregorian::date>::get_date(a1 + 24, a2);
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>::end_rule_as_string(uint64_t a1)
{
  return boost::date_time::partial_date<boost::gregorian::date>::to_string(a1 + 24);
}

void boost::shared_ptr<boost::date_time::dst_day_calc_rule<boost::gregorian::date>>::shared_ptr<boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>>(&v2);
}

void sub_223E9D104(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::shared_count<boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_223E9D188(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    boost::detail::shared_count::shared_count<boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>>(v1);
  }
  __cxa_rethrow();
}

void sub_223E9D1A0(_Unwind_Exception *a1)
{
}

uint64_t boost::date_time::partial_date<boost::gregorian::date>::partial_date(uint64_t a1, int64_t a2)
{
  int64_t v8 = a2;
  *(void *)a1 = &unk_26D757E28;
  *(_DWORD *)(a1 + 8) = 65537;
  boost::gregorian::date::date(&v7, 0x7D0u, 1u, 1u);
  int64_t v6 = 1;
  if (boost::date_time::int_adapter<long long>::compare(&v8, &v6) == 1)
  {
    int64_t v6 = 366;
    int v3 = boost::date_time::int_adapter<long long>::compare(&v8, &v6);
    int64_t v4 = v8;
    if (v3 == 1) {
      int64_t v4 = 366;
    }
    int64_t v8 = (__PAIR128__(v4, v4 + 0x7FFFFFFFFFFFFFFFLL) - 0xFFFFFFFFFFFFFFFDLL) >> 64;
    int64_t v6 = v8;
    unsigned int v7 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator+(&v7, &v6);
  }
  *(_WORD *)(a1 + 8) = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::day(&v7);
  *(_WORD *)(a1 + 1CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::month(&v7);
  return a1;
}

uint64_t boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::day(_DWORD *a1)
{
  int v1 = *a1 + 32044;
  unsigned int v2 = ((4 * v1) | 3u) / 0x23AB1;
  unsigned int v3 = v1 - ((146097 * v2) >> 2);
  unsigned int v4 = ((4 * v3) | 3) / 0x5B5;
  unsigned int v5 = v3 - ((1461 * v4) >> 2);
  unsigned int v6 = 5 * v5 + 2;
  unsigned int v7 = v5 - (153 * (v6 / 0x99) + 2) / 5 + 1;
  unsigned int v8 = v6 / 0x99 + 65524 * (v6 / 0x5FA) + 3;
  unsigned __int16 v13 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v13, (unsigned __int16)(v4 + 100 * v2 - 4800 + v6 / 0x5FA));
  __int16 v12 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v12, v13);
  __int16 v11 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v11, (unsigned __int16)v8);
  unsigned __int16 v10 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v10, (unsigned __int16)v7);
  return v10;
}

uint64_t boost::local_time::posix_time_zone_base<char>::~posix_time_zone_base(uint64_t a1)
{
  *(void *)a1 = &unk_26D7577C0;
  boost::detail::shared_count::~shared_count((atomic_uint **)(a1 + 152));
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void boost::shared_ptr<boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::shared_ptr<boost::local_time::posix_time_zone_base<char>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::local_time::posix_time_zone_base<char>>(&v2);
}

void sub_223E9D4B0(_Unwind_Exception *a1)
{
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::shared_count<boost::local_time::posix_time_zone_base<char>>(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_223E9D534(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    boost::detail::shared_count::shared_count<boost::local_time::posix_time_zone_base<char>>(v1);
  }
  __cxa_rethrow();
}

void sub_223E9D54C(_Unwind_Exception *a1)
{
}

uint64_t boost::detail::sp_counted_impl_p<boost::local_time::posix_time_zone_base<char>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::local_date_time_base(void *a1, unsigned int a2, int64_t *a3, uint64_t *a4, int a5)
{
  unsigned int v44 = a2;
  uint64_t v43 = *a3;
  LODWORD(v37[0]) = a2;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(v39, (unsigned int *)v37, &v43);
  *a1 = v39[0];
  uint64_t v11 = *a4;
  uint64_t v10 = a4[1];
  a1[2] = v10;
  a1[1] = v11;
  if (v10) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
  }
  int64_t v12 = *a3;
  unsigned __int16 v13 = (atomic_uint *)a4[1];
  uint64_t v40 = *a4;
  uint64_t v41 = v13;
  int64_t v42 = v12;
  if (v13) {
    atomic_fetch_add_explicit(v13 + 2, 1u, memory_order_relaxed);
  }
  int v14 = boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::check_dst(a2, &v42, &v40);
  boost::detail::shared_count::~shared_count(&v41);
  switch(v14)
  {
    case 1:
      uint64_t v36 = *a3;
      LODWORD(v38.__vftable) = v44;
      boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(v39, (unsigned int *)&v38, &v36);
      uint64_t v15 = v39[0];
      unsigned int v16 = (atomic_uint *)a4[1];
      uint64_t v34 = *a4;
      std::string v35 = v16;
      if (v16) {
        atomic_fetch_add_explicit(v16 + 2, 1u, memory_order_relaxed);
      }
      v37[0] = boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::construction_adjustment((uint64_t)a1, v15, &v34, 1);
      boost::detail::shared_count::~shared_count(&v35);
      unsigned int v33 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(v37);
      uint64_t v17 = v37[0];
      if ((unint64_t)(v37[0] - 0x7FFFFFFFFFFFFFFELL) > 2)
      {
        uint64_t v17 = v37[0] % 86400000000;
      }
      else
      {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFELL;
        if (v37[0] == 0x8000000000000000) {
          unint64_t v18 = 0x8000000000000000;
        }
        if (v37[0] != 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v17 = v18;
        }
      }
      v38.__vftable = (std::logic_error_vtbl *)v17;
      boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(v39, &v33, (uint64_t *)&v38);
      break;
    case 3:
      if (!a5)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v39);
        std::string v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"time given: ", 12);
        int v25 = boost::gregorian::operator<<<char,std::char_traits<char>>(v24, (boost::gregorian *)&v44);
        LOBYTE(v37[0]) = 32;
        char v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v37, 1);
        boost::posix_time::operator<<<char,std::char_traits<char>>(v26, a3);
        std::stringbuf::str();
        boost::local_time::time_label_invalid::time_label_invalid(&v38);
        boost::throw_exception<boost::local_time::time_label_invalid>(&v38);
      }
      goto LABEL_9;
    case 2:
      if (!a5)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v39);
        uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"time given: ", 12);
        std::string v28 = boost::gregorian::operator<<<char,std::char_traits<char>>(v27, (boost::gregorian *)&v44);
        LOBYTE(v37[0]) = 32;
        std::string v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v37, 1);
        boost::posix_time::operator<<<char,std::char_traits<char>>(v29, a3);
        std::stringbuf::str();
        boost::local_time::ambiguous_result::ambiguous_result(&v38);
        boost::throw_exception<boost::local_time::ambiguous_result>(&v38);
      }
LABEL_9:
      LODWORD(v38.__vftable) = -2;
      v37[0] = 0x7FFFFFFFFFFFFFFELL;
      boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(v39, (unsigned int *)&v38, v37);
      break;
    default:
      uint64_t v32 = *a3;
      LODWORD(v38.__vftable) = v44;
      boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(v39, (unsigned int *)&v38, &v32);
      uint64_t v19 = v39[0];
      unsigned __int16 v20 = (atomic_uint *)a4[1];
      uint64_t v30 = *a4;
      char v31 = v20;
      if (v20) {
        atomic_fetch_add_explicit(v20 + 2, 1u, memory_order_relaxed);
      }
      v37[0] = boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::construction_adjustment((uint64_t)a1, v19, &v30, 0);
      boost::detail::shared_count::~shared_count(&v31);
      unsigned int v33 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(v37);
      uint64_t v21 = v37[0];
      if ((unint64_t)(v37[0] - 0x7FFFFFFFFFFFFFFELL) > 2)
      {
        uint64_t v21 = v37[0] % 86400000000;
      }
      else
      {
        unint64_t v22 = 0x7FFFFFFFFFFFFFFELL;
        if (v37[0] == 0x8000000000000000) {
          unint64_t v22 = 0x8000000000000000;
        }
        if (v37[0] != 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v21 = v22;
        }
      }
      v38.__vftable = (std::logic_error_vtbl *)v21;
      boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(v39, &v33, (uint64_t *)&v38);
      break;
  }
  *a1 = v39[0];
  return a1;
}

void sub_223E9D97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::logic_error a22,char a23)
{
  std::logic_error::~logic_error(&a22);
  if (a21 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a23);
  boost::detail::shared_count::~shared_count(v23);
  _Unwind_Resume(a1);
}

uint64_t boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::check_dst(unsigned int a1, int64_t *a2, void *a3)
{
  unsigned int v27 = a1;
  uint64_t v25 = 0;
  char v26 = 0;
  if (!*a3)
  {
    boost::detail::shared_count::~shared_count(&v26);
    return 0;
  }
  int v5 = (*(uint64_t (**)(void))(*(void *)*a3 + 48))(*a3);
  boost::detail::shared_count::~shared_count(&v26);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *a3;
  unsigned __int16 v7 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(&v27);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 56))(v6, v7);
  unsigned int v24 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&v25);
  uint64_t v8 = *a3;
  unsigned __int16 v9 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(&v27);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 56))(v8, v9);
  if ((unint64_t)(v10 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    uint64_t v11 = v10 % 86400000000;
  }
  else
  {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFELL;
    if (v10 == 0x8000000000000000) {
      uint64_t v11 = 0x8000000000000000;
    }
    if (v10 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  uint64_t v23 = v11;
  uint64_t v13 = *a3;
  unsigned __int16 v14 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(&v27);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, void))(*(void *)v13 + 64))(v13, v14);
  unsigned int v22 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&v21);
  uint64_t v15 = *a3;
  unsigned __int16 v16 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(&v27);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void))(*(void *)v15 + 64))(v15, v16);
  if ((unint64_t)(v17 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    uint64_t v18 = v17 % 86400000000;
  }
  else
  {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFELL;
    if (v17 == 0x8000000000000000) {
      uint64_t v18 = 0x8000000000000000;
    }
    if (v17 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  uint64_t v20 = v18;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a3 + 80))(&v19);
  return boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::local_is_dst(&v27, a2, &v24, &v23, &v22, &v20, &v19);
}

void sub_223E9DC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  boost::detail::shared_count::~shared_count((atomic_uint **)va);
  _Unwind_Resume(a1);
}

void *boost::posix_time::operator<<<char,std::char_traits<char>>(void *a1, int64_t *a2)
{
  unsigned int v4 = (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::fmtflags fmtflags = v4->__fmtflags_;
  uint64_t rdbuf = (uint64_t)v4->__rdbuf_;
  std::ios_base::getloc(v4);
  BOOL has_facet = std::locale::has_facet(&v14, &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::id);
  std::locale::~locale(&v14);
  if (!has_facet) {
    operator new();
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v8 = std::locale::use_facet(&v13, &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::id);
  unsigned __int16 v9 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::fmtflags v10 = v9[1].__fmtflags_;
  if (v10 == -1)
  {
    std::ios_base::getloc(v9);
    uint64_t v11 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
    std::ios_base::fmtflags v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
    std::locale::~locale(&v14);
    v9[1].__fmtflags_ = v10;
  }
  boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::put((uint64_t)v8, rdbuf, v9, (char)v10, a2);
  std::locale::~locale(&v13);
  v4->__fmtflags_ = fmtflags;
  return a1;
}

void sub_223E9DFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, char a11, std::locale a12)
{
  std::locale::~locale(&a12);
  std::locale::~locale(&a10);
  *(_DWORD *)(v12 + 8) = v13;
  _Unwind_Resume(a1);
}

void *boost::gregorian::operator<<<char,std::char_traits<char>>(void *a1, boost::gregorian *a2)
{
  unsigned int v4 = (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::fmtflags fmtflags = v4->__fmtflags_;
  uint64_t rdbuf = (boost::gregorian::date *)v4->__rdbuf_;
  std::ios_base::getloc(v4);
  BOOL has_facet = std::locale::has_facet(&v14, &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::id);
  std::locale::~locale(&v14);
  if (!has_facet) {
    operator new();
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v8 = std::locale::use_facet(&v13, &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::id);
  unsigned __int16 v9 = (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::fmtflags v10 = v9[1].__fmtflags_;
  if (v10 == -1)
  {
    std::ios_base::getloc(v9);
    uint64_t v11 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
    std::ios_base::fmtflags v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
    std::locale::~locale(&v14);
    v9[1].__fmtflags_ = v10;
  }
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::put((uint64_t)v8, rdbuf, (uint64_t)v9, (char)v10, a2);
  std::locale::~locale(&v13);
  v4->__fmtflags_ = fmtflags;
  return a1;
}

void sub_223E9E33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, char a11, std::locale a12)
{
  std::locale::~locale(&a12);
  std::locale::~locale(&a10);
  *(_DWORD *)(v12 + 8) = v13;
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::local_time::ambiguous_result>(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_26D758178;
  unsigned int v4 = &unk_26D7581A0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_223E9E494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::logic_error::~logic_error(&a10);
  if (v13) {
    __cxa_free_exception(v11);
  }
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::local_time::time_label_invalid>(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_26D758318;
  unsigned int v4 = &unk_26D758340;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_223E9E5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::logic_error::~logic_error(&a10);
  if (v13) {
    __cxa_free_exception(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::construction_adjustment(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v6 = a2;
  std::ios_base::fmtflags v10 = 0;
  uint64_t v11 = a2;
  uint64_t v9 = 0;
  uint64_t v7 = *a3;
  boost::detail::shared_count::~shared_count(&v10);
  if (v7)
  {
    if (a4 && (*(unsigned int (**)(void))(*(void *)*a3 + 48))())
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*a3 + 80))(&v9);
      boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator-=(&v11, &v9);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a3 + 72))(&v9);
    boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator-=(&v11, &v9);
    return v11;
  }
  return v6;
}

uint64_t boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::local_is_dst(unsigned int *a1, int64_t *a2, unsigned int *a3, void *a4, unsigned int *a5, void *a6, void *a7)
{
  return boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::local_is_dst(a1, a2, a3, (int)(*a4 / 60000000) % 60 + 60 * ((int)*a4 / -694967296), a5, (int)(*a6 / 60000000) % 60 + 60 * ((int)*a6 / -694967296), *a7 / 60000000 % 60 + 60 * (*a7 / 3600000000));
}

uint64_t boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::local_is_dst(unsigned int *a1, int64_t *a2, unsigned int *a3, unsigned int a4, unsigned int *a5, unsigned int a6, uint64_t a7)
{
  unsigned int v7 = *a3;
  unsigned int v8 = *a5;
  unsigned int v9 = *a1;
  if (*a3 >= *a5)
  {
    if (v9 < v7 && v8 < v9) {
      return 0;
    }
    if (v7 < v9 || v9 < v8) {
      return 1;
    }
  }
  else
  {
    if (v7 < v9 && v9 < v8) {
      return 1;
    }
    if (v9 < v7 || v8 < v9) {
      return 0;
    }
  }
  if (v9 == v7) {
    return boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::process_local_dst_start_day(a2, a4, a7);
  }
  if (v9 == v8) {
    return boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::process_local_dst_end_day(a2, a6, a7);
  }
  return 3;
}

uint64_t boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::process_local_dst_start_day(int64_t *a1, unsigned int a2, uint64_t a3)
{
  int64_t v7 = 60000000 * a2;
  if (boost::date_time::int_adapter<long long>::compare(a1, &v7) == -1) {
    return 0;
  }
  int64_t v7 = 60000000 * (a2 + a3);
  if (boost::date_time::int_adapter<long long>::compare(a1, &v7) == -1) {
    return 3;
  }
  else {
    return 1;
  }
}

uint64_t boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::process_local_dst_end_day(int64_t *a1, unsigned int a2, int a3)
{
  int64_t v6 = 60000000 * (int)(a2 - a3);
  if (boost::date_time::int_adapter<long long>::compare(a1, &v6) == -1) {
    return 1;
  }
  int64_t v6 = 60000000 * a2;
  return 2 * (boost::date_time::int_adapter<long long>::compare(a1, &v6) == -1);
}

uint64_t boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::put(uint64_t a1, uint64_t a2, std::ios_base *a3, unsigned int a4, int64_t *a5)
{
  if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) <= 2)
  {
    int64_t v7 = *(uint64_t (**)(void))(*(void *)a1 + 40);
    return v7();
  }
  if (*(char *)(a1 + 359) < 0) {
    std::string::__init_copy_ctor_external(&v247, *(const std::string::value_type **)(a1 + 336), *(void *)(a1 + 344));
  }
  else {
    std::string v247 = *(std::string *)(a1 + 336);
  }
  v239[0].__locale_ = 0;
  atomic_ullong v237 = a5;
  int v10 = boost::date_time::int_adapter<long long>::compare(a5, (int64_t *)v239);
  size_t v11 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only);
  size_t v12 = v11;
  int v13 = (std::locale::__imp *)&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v11];
  if (v10 == -1)
  {
    unsigned int v27 = (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::negative_sign;
    size_t v28 = strlen((const char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::negative_sign);
    char v29 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v247.__r_.__value_.__l.__size_;
    std::string::size_type v30 = v247.__r_.__value_.__r.__words[0];
    if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v32 = &v247;
    }
    else {
      uint64_t v32 = (std::string *)v247.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v33 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
    if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v34 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v34 = v247.__r_.__value_.__l.__size_;
    }
    if (v34 && v12)
    {
      std::string v35 = (std::string *)((char *)v32 + v34);
      std::string::size_type v36 = v34 - 1;
      while (1)
      {
        uint64_t v37 = 0;
        while (v32->__r_.__value_.__s.__data_[v37] == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v37])
        {
          uint64_t v38 = v37 + 1;
          if (v36 != v37)
          {
            BOOL v24 = v12 - 1 == v37++;
            if (!v24) {
              continue;
            }
          }
          __int16 v39 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v38];
          uint64_t v40 = (std::string *)((char *)v32 + v38);
          goto LABEL_44;
        }
        __int16 v39 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v37];
        uint64_t v40 = (std::string *)((char *)v32 + v37);
LABEL_44:
        if (v39 == (char *)v13) {
          break;
        }
        uint64_t v32 = (std::string *)((char *)v32 + 1);
        --v36;
        if (v32 == v35) {
          goto LABEL_72;
        }
      }
      if (v32 != v40)
      {
        v239[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only;
        v239[1].__locale_ = v13;
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&v247, (uint64_t *)v239, (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::negative_sign, (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::negative_sign+ v28, v32, v40, (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::negative_sign, (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::negative_sign+ v28);
        unsigned int v27 = (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::negative_sign;
        std::string::size_type v33 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
        std::string::size_type size = v247.__r_.__value_.__l.__size_;
        std::string::size_type v30 = v247.__r_.__value_.__r.__words[0];
        char v29 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
      }
    }
LABEL_72:
    uint64_t v41 = (std::locale::__imp *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always;
    size_t v42 = strlen((const char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always);
    size_t v53 = strlen(v27);
    if (v29 >= 0) {
      unsigned int v44 = &v247;
    }
    else {
      unsigned int v44 = (std::string *)v30;
    }
    if (v29 >= 0) {
      std::string::size_type v54 = v33;
    }
    else {
      std::string::size_type v54 = size;
    }
    if (!v54 || !v42) {
      goto LABEL_93;
    }
    std::string v46 = &v27[v53];
    char v55 = (std::string *)((char *)v44 + v54);
    std::string::size_type v56 = v54 - 1;
    while (1)
    {
      uint64_t v57 = 0;
      while (v44->__r_.__value_.__s.__data_[v57] == *((unsigned __int8 *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
                                                                      + v57))
      {
        uint64_t v58 = v57 + 1;
        if (v56 != v57)
        {
          BOOL v24 = v42 - 1 == v57++;
          if (!v24) {
            continue;
          }
        }
        uint64_t v59 = (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
            + v58;
        long long v52 = (std::string *)((char *)v44 + v58);
        goto LABEL_88;
      }
      uint64_t v59 = (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
          + v57;
      long long v52 = (std::string *)((char *)v44 + v57);
LABEL_88:
      if (v59 == (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
                + v42)
        break;
      unsigned int v44 = (std::string *)((char *)v44 + 1);
      --v56;
      if (v44 == v55) {
        goto LABEL_93;
      }
    }
    if (v44 == v52) {
      goto LABEL_93;
    }
  }
  else
  {
    char v14 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
    std::string::size_type v16 = v247.__r_.__value_.__l.__size_;
    std::string::size_type v15 = v247.__r_.__value_.__r.__words[0];
    if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v17 = &v247;
    }
    else {
      uint64_t v17 = (std::string *)v247.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v18 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
    if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = v247.__r_.__value_.__l.__size_;
    }
    if (v19 && v11)
    {
      uint64_t v20 = (std::string *)((char *)v17 + v19);
      std::string::size_type v21 = v19 - 1;
      while (1)
      {
        uint64_t v22 = 0;
        while (v17->__r_.__value_.__s.__data_[v22] == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v22])
        {
          uint64_t v23 = v22 + 1;
          if (v21 != v22)
          {
            BOOL v24 = v11 - 1 == v22++;
            if (!v24) {
              continue;
            }
          }
          uint64_t v25 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v23];
          uint64_t v26 = (uint64_t)v17 + v23;
          goto LABEL_25;
        }
        uint64_t v25 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v22];
        uint64_t v26 = (uint64_t)v17 + v22;
LABEL_25:
        if (v25 == (char *)v13) {
          break;
        }
        uint64_t v17 = (std::string *)((char *)v17 + 1);
        --v21;
        if (v17 == v20) {
          goto LABEL_49;
        }
      }
      if (v17 != (std::string *)v26)
      {
        v239[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only;
        v239[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v11];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v247, (uint64_t *)v239, v17, v26);
        std::string::size_type v18 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
        std::string::size_type v16 = v247.__r_.__value_.__l.__size_;
        std::string::size_type v15 = v247.__r_.__value_.__r.__words[0];
        char v14 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
      }
    }
LABEL_49:
    uint64_t v41 = (std::locale::__imp *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always;
    size_t v42 = strlen((const char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always);
    unsigned int v27 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::positive_sign;
    size_t v43 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::positive_sign);
    if (v14 >= 0) {
      unsigned int v44 = &v247;
    }
    else {
      unsigned int v44 = (std::string *)v15;
    }
    if (v14 >= 0) {
      std::string::size_type v45 = v18;
    }
    else {
      std::string::size_type v45 = v16;
    }
    if (!v45 || !v42) {
      goto LABEL_93;
    }
    std::string v46 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::positive_sign[v43];
    int v47 = (std::string *)((char *)v44 + v45);
    std::string::size_type v48 = v45 - 1;
    while (1)
    {
      uint64_t v49 = 0;
      while (v44->__r_.__value_.__s.__data_[v49] == *((unsigned __int8 *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
                                                                      + v49))
      {
        uint64_t v50 = v49 + 1;
        if (v48 != v49)
        {
          BOOL v24 = v42 - 1 == v49++;
          if (!v24) {
            continue;
          }
        }
        char v51 = (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
            + v50;
        long long v52 = (std::string *)((char *)v44 + v50);
        goto LABEL_65;
      }
      char v51 = (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
          + v49;
      long long v52 = (std::string *)((char *)v44 + v49);
LABEL_65:
      if (v51 == (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
                + v42)
        break;
      unsigned int v44 = (std::string *)((char *)v44 + 1);
      --v48;
      if (v44 == v47) {
        goto LABEL_93;
      }
    }
    if (v44 == v52) {
      goto LABEL_93;
    }
  }
  v239[0].__locale_ = v41;
  v239[1].__locale_ = (std::locale::__imp *)((char *)v41 + v42);
  boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&v247, (uint64_t *)v239, v27, v46, v44, v52, v27, v46);
LABEL_93:
  unsigned __int8 v60 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
  std::string::size_type v61 = v247.__r_.__value_.__l.__size_;
  uint64_t v62 = (std::string *)v247.__r_.__value_.__r.__words[0];
  if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v63 = &v247;
  }
  else {
    uint64_t v63 = (std::string *)v247.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v64 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
  if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v65 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v65 = v247.__r_.__value_.__l.__size_;
  }
  if (v65)
  {
    BOOL v66 = (std::string *)((char *)v63 + v65);
    std::string::size_type v67 = v65 - 1;
    while (1)
    {
      uint64_t v68 = 0;
      while (v63->__r_.__value_.__s.__data_[v68] == boost::date_time::time_formats<char>::full_24_hour_time_format[v68])
      {
        uint64_t v69 = v68 + 1;
        if (v67 != v68)
        {
          BOOL v24 = v68++ == 1;
          if (!v24) {
            continue;
          }
        }
        uint64_t v70 = &boost::date_time::time_formats<char>::full_24_hour_time_format[v69];
        BOOL v71 = (std::string *)((char *)v63 + v69);
        goto LABEL_108;
      }
      uint64_t v70 = &boost::date_time::time_formats<char>::full_24_hour_time_format[v68];
      BOOL v71 = (std::string *)((char *)v63 + v68);
LABEL_108:
      if (v70 == (char *)&unk_2246C0FF8) {
        break;
      }
      uint64_t v63 = (std::string *)((char *)v63 + 1);
      --v67;
      if (v63 == v66) {
        goto LABEL_113;
      }
    }
    if (v63 != v71)
    {
      v239[0].__locale_ = (std::locale::__imp *)boost::date_time::time_formats<char>::full_24_hour_time_format;
      v239[1].__locale_ = (std::locale::__imp *)&unk_2246C0FF8;
      boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&v247, (uint64_t *)v239, "%H:%M:%S", "", v63, v71, "%H:%M:%S", "");
      std::string::size_type v64 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
      std::string::size_type v61 = v247.__r_.__value_.__l.__size_;
      uint64_t v62 = (std::string *)v247.__r_.__value_.__r.__words[0];
      unsigned __int8 v60 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
    }
  }
LABEL_113:
  if ((v60 & 0x80u) == 0) {
    unint64_t v72 = &v247;
  }
  else {
    unint64_t v72 = v62;
  }
  if ((v60 & 0x80u) != 0) {
    std::string::size_type v64 = v61;
  }
  if (v64)
  {
    int v73 = (std::string *)((char *)v72 + v64);
    std::string::size_type v74 = v64 - 1;
    while (1)
    {
      uint64_t v75 = 0;
      while (v72->__r_.__value_.__s.__data_[v75] == boost::date_time::time_formats<char>::short_24_hour_time_format[v75])
      {
        uint64_t v76 = v75 + 1;
        if (v74 != v75)
        {
          BOOL v24 = v75++ == 1;
          if (!v24) {
            continue;
          }
        }
        BOOL v77 = &boost::date_time::time_formats<char>::short_24_hour_time_format[v76];
        uint64_t v78 = (std::string *)((char *)v72 + v76);
        goto LABEL_127;
      }
      BOOL v77 = &boost::date_time::time_formats<char>::short_24_hour_time_format[v75];
      uint64_t v78 = (std::string *)((char *)v72 + v75);
LABEL_127:
      if (v77 == (char *)&unk_2246C0FFC) {
        break;
      }
      unint64_t v72 = (std::string *)((char *)v72 + 1);
      --v74;
      if (v72 == v73) {
        goto LABEL_132;
      }
    }
    if (v72 != v78)
    {
      v239[0].__locale_ = (std::locale::__imp *)boost::date_time::time_formats<char>::short_24_hour_time_format;
      v239[1].__locale_ = (std::locale::__imp *)&unk_2246C0FFC;
      boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&v247, (uint64_t *)v239, "%H:%M", "", v72, v78, "%H:%M", "");
      unsigned __int8 v60 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
      uint64_t v62 = (std::string *)v247.__r_.__value_.__r.__words[0];
    }
  }
LABEL_132:
  long long v236 = a3;
  long long v245 = 0uLL;
  locale = 0;
  char v79 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0];
  if ((v60 & 0x80u) == 0) {
    long long v80 = &v247;
  }
  else {
    long long v80 = v62;
  }
  int64_t v81 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0]);
  if (v81)
  {
    int64_t v82 = v81;
    int64_t v83 = v247.__r_.__value_.__l.__size_;
    if ((v60 & 0x80u) == 0) {
      int64_t v83 = v60;
    }
    if (v83 >= v81)
    {
      BOOL v84 = (char *)v80 + v83;
      int v85 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0];
      int v86 = v80;
      do
      {
        int64_t v87 = v83 - v82;
        if (v87 == -1) {
          break;
        }
        char v88 = (char *)memchr(v86, v85, v87 + 1);
        if (!v88) {
          break;
        }
        unint64_t v89 = v88;
        if (!memcmp(v88, v79, v82))
        {
          if (v89 == v84 || v89 - (char *)v80 == -1) {
            break;
          }
          goto LABEL_147;
        }
        int v86 = (std::string *)(v89 + 1);
        int64_t v83 = v84 - (v89 + 1);
      }
      while (v83 >= v82);
    }
  }
  else
  {
LABEL_147:
    if (*v237 / 3600000000 >= 0) {
      uint64_t v90 = *v237 / 3600000000;
    }
    else {
      uint64_t v90 = *v237 / -3600000000;
    }
    boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v90, 2);
    if (SHIBYTE(locale) < 0) {
      operator delete((void *)v245);
    }
    long long v245 = *(_OWORD *)&v239[0].__locale_;
    locale = v239[2].__locale_;
    size_t v91 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0]);
    if (SHIBYTE(v239[2].__locale_) >= 0) {
      unint64_t v92 = (char *)&v245;
    }
    else {
      unint64_t v92 = (char *)v245;
    }
    if (SHIBYTE(v239[2].__locale_) >= 0) {
      uint64_t v93 = HIBYTE(locale);
    }
    else {
      uint64_t v93 = *((void *)&v245 + 1);
    }
    unsigned __int8 v60 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
    uint64_t v62 = (std::string *)v247.__r_.__value_.__r.__words[0];
    if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v94 = &v247;
    }
    else {
      unint64_t v94 = (std::string *)v247.__r_.__value_.__r.__words[0];
    }
    if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v95 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v95 = v247.__r_.__value_.__l.__size_;
    }
    if (v95 && v91)
    {
      uint64_t v96 = &v92[v93];
      uint64_t v97 = (std::string *)((char *)v94 + v95);
      std::string::size_type v98 = v95 - 1;
      while (1)
      {
        uint64_t v99 = 0;
        while (v94->__r_.__value_.__s.__data_[v99] == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0][v99])
        {
          uint64_t v100 = v99 + 1;
          if (v98 != v99)
          {
            BOOL v24 = v91 - 1 == v99++;
            if (!v24) {
              continue;
            }
          }
          long long v101 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0][v100];
          uint64_t v102 = (std::string *)((char *)v94 + v100);
          goto LABEL_174;
        }
        long long v101 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0][v99];
        uint64_t v102 = (std::string *)((char *)v94 + v99);
LABEL_174:
        if (v101 == &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0][v91]) {
          break;
        }
        unint64_t v94 = (std::string *)((char *)v94 + 1);
        --v98;
        if (v94 == v97) {
          goto LABEL_179;
        }
      }
      if (v94 != v102)
      {
        v239[0] = (std::locale)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0];
        v239[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0][v91];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v247, (uint64_t *)v239, v92, v96, v94, v102, v92, v96);
        unsigned __int8 v60 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
        uint64_t v62 = (std::string *)v247.__r_.__value_.__r.__words[0];
      }
    }
  }
LABEL_179:
  char v103 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::hours_format[0];
  if ((v60 & 0x80u) == 0) {
    unsigned __int16 v104 = &v247;
  }
  else {
    unsigned __int16 v104 = v62;
  }
  int64_t v105 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::hours_format[0]);
  if (v105)
  {
    int64_t v106 = v105;
    int64_t v107 = v247.__r_.__value_.__l.__size_;
    if ((v60 & 0x80u) == 0) {
      int64_t v107 = v60;
    }
    if (v107 >= v105)
    {
      uint64_t v108 = (char *)v104 + v107;
      int v109 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::hours_format[0];
      uint64_t v110 = v104;
      do
      {
        int64_t v111 = v107 - v106;
        if (v111 == -1) {
          break;
        }
        uint64_t v112 = (char *)memchr(v110, v109, v111 + 1);
        if (!v112) {
          break;
        }
        uint64_t v113 = v112;
        if (!memcmp(v112, v103, v106))
        {
          if (v113 == v108 || v113 - (char *)v104 == -1) {
            break;
          }
          goto LABEL_194;
        }
        uint64_t v110 = (std::string *)(v113 + 1);
        int64_t v107 = v108 - (v113 + 1);
      }
      while (v107 >= v106);
    }
  }
  else
  {
LABEL_194:
    unint64_t v114 = HIBYTE(locale);
    LOBYTE(v115) = HIBYTE(locale);
    std::string v116 = (std::locale::__imp *)*((void *)&v245 + 1);
    if (SHIBYTE(locale) >= 0) {
      uint64_t v117 = HIBYTE(locale);
    }
    else {
      uint64_t v117 = *((void *)&v245 + 1);
    }
    if (!v117)
    {
      if (*v237 / 3600000000 >= 0) {
        uint64_t v118 = *v237 / 3600000000;
      }
      else {
        uint64_t v118 = *v237 / -3600000000;
      }
      boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v118, 2);
      if (SHIBYTE(locale) < 0) {
        operator delete((void *)v245);
      }
      locale = v239[2].__locale_;
      long long v245 = *(_OWORD *)&v239[0].__locale_;
      char v103 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::hours_format[0];
      unint64_t v114 = (unint64_t)v239[2].__locale_ >> 56;
      std::string v116 = v239[1].__locale_;
      unsigned __int8 v60 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
      uint64_t v62 = (std::string *)v247.__r_.__value_.__r.__words[0];
      unint64_t v115 = (unint64_t)v239[2].__locale_ >> 56;
    }
    size_t v119 = strlen(v103);
    if ((v115 & 0x80u) == 0) {
      std::error_code v120 = (char *)&v245;
    }
    else {
      std::error_code v120 = (char *)v245;
    }
    if ((v115 & 0x80u) == 0) {
      unint64_t v121 = v114;
    }
    else {
      unint64_t v121 = (unint64_t)v116;
    }
    if ((v60 & 0x80u) == 0) {
      BOOL v122 = &v247;
    }
    else {
      BOOL v122 = v62;
    }
    if ((v60 & 0x80u) == 0) {
      std::string::size_type v123 = v60;
    }
    else {
      std::string::size_type v123 = v247.__r_.__value_.__l.__size_;
    }
    if (v123 && v119)
    {
      char v124 = &v120[v121];
      uint64_t v125 = (std::string *)((char *)v122 + v123);
      std::string::size_type v126 = v123 - 1;
      while (1)
      {
        uint64_t v127 = 0;
        while (v122->__r_.__value_.__s.__data_[v127] == v103[v127])
        {
          uint64_t v128 = v127 + 1;
          if (v126 != v127)
          {
            BOOL v24 = v119 - 1 == v127++;
            if (!v24) {
              continue;
            }
          }
          uint64_t v129 = &v103[v128];
          unint64_t v130 = (std::string *)((char *)v122 + v128);
          goto LABEL_226;
        }
        uint64_t v129 = &v103[v127];
        unint64_t v130 = (std::string *)((char *)v122 + v127);
LABEL_226:
        if (v129 == &v103[v119]) {
          break;
        }
        BOOL v122 = (std::string *)((char *)v122 + 1);
        --v126;
        if (v122 == v125) {
          goto LABEL_231;
        }
      }
      if (v122 != v130)
      {
        v239[0].__locale_ = (std::locale::__imp *)v103;
        v239[1].__locale_ = (std::locale::__imp *)&v103[v119];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v247, (uint64_t *)v239, v120, v124, v122, v130, v120, v124);
        unsigned __int8 v60 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
        uint64_t v62 = (std::string *)v247.__r_.__value_.__r.__words[0];
      }
    }
  }
LABEL_231:
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v244 = 0;
  uint64_t v131 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format;
  if ((v60 & 0x80u) == 0) {
    uint64_t v132 = &v247;
  }
  else {
    uint64_t v132 = v62;
  }
  int64_t v133 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format);
  if (v133)
  {
    int64_t v134 = v133;
    int64_t v135 = v247.__r_.__value_.__l.__size_;
    if ((v60 & 0x80u) == 0) {
      int64_t v135 = v60;
    }
    if (v135 >= v133)
    {
      uint64_t v136 = (char *)v132 + v135;
      int v137 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format;
      unint64_t v138 = v132;
      do
      {
        int64_t v139 = v135 - v134;
        if (v139 == -1) {
          break;
        }
        uint64_t v140 = (char *)memchr(v138, v137, v139 + 1);
        if (!v140) {
          break;
        }
        uint64_t v141 = v140;
        if (!memcmp(v140, v131, v134))
        {
          if (v141 == v136 || v141 - (char *)v132 == -1) {
            break;
          }
          goto LABEL_246;
        }
        unint64_t v138 = (std::string *)(v141 + 1);
        int64_t v135 = v136 - (v141 + 1);
      }
      while (v135 >= v134);
    }
  }
  else
  {
LABEL_246:
    uint64_t v142 = *v237 % 1000000;
    if (v142 >= 0) {
      uint64_t v143 = *v237 % 1000000;
    }
    else {
      uint64_t v143 = -v142;
    }
    boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v143, 6);
    if (SHIBYTE(v244) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)&v239[0].__locale_;
    unint64_t v244 = v239[2].__locale_;
    std::ios_base::getloc(v236);
    long long v144 = std::locale::use_facet(v239, MEMORY[0x263F8C150]);
    std::string::value_type v145 = ((uint64_t (*)(const std::locale::facet *))v144->__vftable[1].~facet)(v144);
    std::locale::~locale(v239);
    std::string::basic_string[abi:ne180100]<0>(&v242, (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_format);
    std::string::push_back(&v242, v145);
    if (SHIBYTE(v244) >= 0) {
      long long v146 = __p;
    }
    else {
      long long v146 = (void **)__p[0];
    }
    if (SHIBYTE(v244) >= 0) {
      std::string::size_type v147 = HIBYTE(v244);
    }
    else {
      std::string::size_type v147 = (std::string::size_type)__p[1];
    }
    std::string::append(&v242, (const std::string::value_type *)v146, v147);
    size_t v148 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format);
    char v149 = HIBYTE(v242.__r_.__value_.__r.__words[2]);
    std::string::size_type v150 = v242.__r_.__value_.__l.__size_;
    if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v151 = &v242;
    }
    else {
      uint64_t v151 = (std::string *)v242.__r_.__value_.__r.__words[0];
    }
    if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v150 = HIBYTE(v242.__r_.__value_.__r.__words[2]);
    }
    if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v152 = &v247;
    }
    else {
      unint64_t v152 = (std::string *)v247.__r_.__value_.__r.__words[0];
    }
    if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v153 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v153 = v247.__r_.__value_.__l.__size_;
    }
    if (v153 && v148)
    {
      uint64_t v154 = (char *)v151 + v150;
      uint64_t v155 = (std::string *)((char *)v152 + v153);
      std::string::size_type v156 = v153 - 1;
      while (1)
      {
        uint64_t v157 = 0;
        while (v152->__r_.__value_.__s.__data_[v157] == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v157])
        {
          uint64_t v158 = v157 + 1;
          if (v156 != v157)
          {
            BOOL v24 = v148 - 1 == v157++;
            if (!v24) {
              continue;
            }
          }
          unint64_t v159 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v158];
          int64_t v160 = (std::string *)((char *)v152 + v158);
          goto LABEL_278;
        }
        unint64_t v159 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v157];
        int64_t v160 = (std::string *)((char *)v152 + v157);
LABEL_278:
        if (v159 == &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v148]) {
          break;
        }
        unint64_t v152 = (std::string *)((char *)v152 + 1);
        --v156;
        if (v152 == v155) {
          goto LABEL_283;
        }
      }
      if (v152 != v160)
      {
        v239[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format;
        v239[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v148];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v247, (uint64_t *)v239, (char *)v151, v154, v152, v160, (char *)v151, v154);
        char v149 = HIBYTE(v242.__r_.__value_.__r.__words[2]);
      }
    }
LABEL_283:
    if (v149 < 0) {
      operator delete(v242.__r_.__value_.__l.__data_);
    }
    unsigned __int8 v60 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
    uint64_t v62 = (std::string *)v247.__r_.__value_.__r.__words[0];
  }
  uint64_t v161 = (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format;
  if ((v60 & 0x80u) == 0) {
    v162 = &v247;
  }
  else {
    v162 = v62;
  }
  int64_t v163 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format);
  if (v163)
  {
    int64_t v164 = v163;
    int64_t v165 = v247.__r_.__value_.__l.__size_;
    if ((v60 & 0x80u) == 0) {
      int64_t v165 = v60;
    }
    if (v165 >= v163)
    {
      uint64_t v177 = (char *)v162 + v165;
      int v178 = (char)*boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format;
      unint64_t v179 = v162;
      do
      {
        int64_t v180 = v165 - v164;
        if (v180 == -1) {
          break;
        }
        uint64_t v181 = (char *)memchr(v179, v178, v180 + 1);
        if (!v181) {
          break;
        }
        uint64_t v182 = v181;
        if (!memcmp(v181, v161, v164))
        {
          if (v182 == v177 || v182 - (char *)v162 == -1) {
            break;
          }
          goto LABEL_314;
        }
        unint64_t v179 = (std::string *)(v182 + 1);
        int64_t v165 = v177 - (v182 + 1);
      }
      while (v165 >= v164);
    }
    long long v166 = v236;
  }
  else
  {
LABEL_314:
    unint64_t v183 = HIBYTE(v244);
    LOBYTE(v184) = HIBYTE(v244);
    uint64_t v185 = (std::locale::__imp *)__p[1];
    if (SHIBYTE(v244) >= 0) {
      unint64_t v186 = (void *)HIBYTE(v244);
    }
    else {
      unint64_t v186 = __p[1];
    }
    if (!v186)
    {
      uint64_t v187 = *v237 % 1000000;
      if (v187 >= 0) {
        uint64_t v188 = *v237 % 1000000;
      }
      else {
        uint64_t v188 = -v187;
      }
      boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v188, 6);
      if (SHIBYTE(v244) < 0) {
        operator delete(__p[0]);
      }
      unint64_t v244 = v239[2].__locale_;
      *(_OWORD *)std::string __p = *(_OWORD *)&v239[0].__locale_;
      uint64_t v161 = (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format;
      unint64_t v183 = (unint64_t)v239[2].__locale_ >> 56;
      uint64_t v185 = v239[1].__locale_;
      unsigned __int8 v60 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
      uint64_t v62 = (std::string *)v247.__r_.__value_.__r.__words[0];
      unint64_t v184 = (unint64_t)v239[2].__locale_ >> 56;
    }
    size_t v189 = strlen(v161);
    if ((v184 & 0x80u) == 0) {
      std::string::size_type v190 = (char *)__p;
    }
    else {
      std::string::size_type v190 = (char *)__p[0];
    }
    if ((v184 & 0x80u) == 0) {
      unint64_t v191 = v183;
    }
    else {
      unint64_t v191 = (unint64_t)v185;
    }
    if ((v60 & 0x80u) == 0) {
      uint64_t v192 = &v247;
    }
    else {
      uint64_t v192 = v62;
    }
    if ((v60 & 0x80u) == 0) {
      std::string::size_type v193 = v60;
    }
    else {
      std::string::size_type v193 = v247.__r_.__value_.__l.__size_;
    }
    long long v166 = v236;
    if (v193 && v189)
    {
      uint64_t v194 = &v190[v191];
      unint64_t v195 = (std::string *)((char *)v192 + v193);
      std::string::size_type v196 = v193 - 1;
      while (1)
      {
        uint64_t v197 = 0;
        while (v192->__r_.__value_.__s.__data_[v197] == v161[v197])
        {
          uint64_t v198 = v197 + 1;
          if (v196 != v197)
          {
            BOOL v24 = v189 - 1 == v197++;
            if (!v24) {
              continue;
            }
          }
          unint64_t v199 = &v161[v198];
          uint64_t v200 = (std::string *)((char *)v192 + v198);
          goto LABEL_346;
        }
        unint64_t v199 = &v161[v197];
        uint64_t v200 = (std::string *)((char *)v192 + v197);
LABEL_346:
        if (v199 == &v161[v189]) {
          break;
        }
        uint64_t v192 = (std::string *)((char *)v192 + 1);
        --v196;
        if (v192 == v195) {
          goto LABEL_294;
        }
      }
      if (v192 != v200)
      {
        v239[0].__locale_ = (std::locale::__imp *)v161;
        v239[1].__locale_ = (std::locale::__imp *)&v161[v189];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v247, (uint64_t *)v239, v190, v194, v192, v200, v190, v194);
        unsigned __int8 v60 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
        uint64_t v62 = (std::string *)v247.__r_.__value_.__r.__words[0];
      }
    }
  }
LABEL_294:
  uint64_t v167 = (const void *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
  if ((v60 & 0x80u) == 0) {
    uint64_t v62 = &v247;
  }
  int64_t v168 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format);
  if (v168)
  {
    int64_t v169 = v168;
    int64_t v170 = v247.__r_.__value_.__l.__size_;
    if ((v60 & 0x80u) == 0) {
      int64_t v170 = v60;
    }
    if (v170 >= v168)
    {
      std::string::size_type v171 = (char *)v62 + v170;
      int v172 = (char)*boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
      char v173 = v62;
      do
      {
        int64_t v174 = v170 - v169;
        if (v174 == -1) {
          break;
        }
        uint64_t v175 = (char *)memchr(v173, v172, v174 + 1);
        if (!v175) {
          break;
        }
        uint64_t v176 = v175;
        if (!memcmp(v175, v167, v169))
        {
          if (v176 == v171 || v176 - (char *)v62 == -1) {
            break;
          }
          goto LABEL_353;
        }
        char v173 = (std::string *)(v176 + 1);
        int64_t v170 = v171 - (v176 + 1);
      }
      while (v170 >= v169);
    }
  }
  else
  {
LABEL_353:
    uint64_t v201 = *v237 % 1000000;
    if (v201)
    {
      if (v201 >= 0) {
        uint64_t v202 = *v237 % 1000000;
      }
      else {
        uint64_t v202 = -v201;
      }
      boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v202, 6);
    }
    else
    {
      memset(v239, 0, sizeof(v239));
    }
    if (SHIBYTE(v244) < 0) {
      operator delete(__p[0]);
    }
    unint64_t v244 = v239[2].__locale_;
    *(_OWORD *)std::string __p = *(_OWORD *)&v239[0].__locale_;
    unint64_t v203 = (unint64_t)v239[2].__locale_ >> 56;
    if (SHIBYTE(v239[2].__locale_) < 0) {
      unint64_t v203 = (unint64_t)v239[1].__locale_;
    }
    if (v203)
    {
      std::ios_base::getloc(v166);
      unint64_t v204 = std::locale::use_facet(v239, MEMORY[0x263F8C150]);
      std::string::value_type v205 = ((uint64_t (*)(const std::locale::facet *))v204->__vftable[1].~facet)(v204);
      std::locale::~locale(v239);
      memset(&v242, 0, sizeof(v242));
      std::string::push_back(&v242, v205);
      if (SHIBYTE(v244) >= 0) {
        unint64_t v206 = __p;
      }
      else {
        unint64_t v206 = (void **)__p[0];
      }
      if (SHIBYTE(v244) >= 0) {
        std::string::size_type v207 = HIBYTE(v244);
      }
      else {
        std::string::size_type v207 = (std::string::size_type)__p[1];
      }
      std::string::append(&v242, (const std::string::value_type *)v206, v207);
      size_t v208 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format);
      char v209 = HIBYTE(v242.__r_.__value_.__r.__words[2]);
      std::string::size_type v210 = v242.__r_.__value_.__l.__size_;
      if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v211 = &v242;
      }
      else {
        uint64_t v211 = (std::string *)v242.__r_.__value_.__r.__words[0];
      }
      if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v210 = HIBYTE(v242.__r_.__value_.__r.__words[2]);
      }
      if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v212 = &v247;
      }
      else {
        uint64_t v212 = (std::string *)v247.__r_.__value_.__r.__words[0];
      }
      if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v213 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v213 = v247.__r_.__value_.__l.__size_;
      }
      if (v213 && v208)
      {
        uint64_t v214 = (char *)v211 + v210;
        uint64_t v215 = (std::string *)((char *)v212 + v213);
        std::string::size_type v216 = v213 - 1;
        while (1)
        {
          uint64_t v217 = 0;
          while (v212->__r_.__value_.__s.__data_[v217] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                                                               + v217))
          {
            uint64_t v218 = v217 + 1;
            if (v216 != v217)
            {
              BOOL v24 = v208 - 1 == v217++;
              if (!v24) {
                continue;
              }
            }
            uint64_t v219 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                 + v218;
            uint64_t v220 = (std::string *)((char *)v212 + v218);
            goto LABEL_391;
          }
          uint64_t v219 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
               + v217;
          uint64_t v220 = (std::string *)((char *)v212 + v217);
LABEL_391:
          if (v219 == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                     + v208)
            break;
          uint64_t v212 = (std::string *)((char *)v212 + 1);
          --v216;
          if (v212 == v215) {
            goto LABEL_414;
          }
        }
        if (v212 != v220)
        {
          v239[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
          v239[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                   + v208);
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v247, (uint64_t *)v239, (char *)v211, v214, v212, v220, (char *)v211, v214);
          char v209 = HIBYTE(v242.__r_.__value_.__r.__words[2]);
        }
      }
LABEL_414:
      if (v209 < 0) {
        operator delete(v242.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      size_t v221 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format);
      std::string::size_type v222 = v247.__r_.__value_.__l.__size_;
      if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v223 = &v247;
      }
      else {
        uint64_t v223 = (std::string *)v247.__r_.__value_.__r.__words[0];
      }
      if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v222 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
      }
      if (v222 && v221)
      {
        unint64_t v224 = (std::string *)((char *)v223 + v222);
        std::string::size_type v225 = v222 - 1;
        while (1)
        {
          uint64_t v226 = 0;
          while (v223->__r_.__value_.__s.__data_[v226] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                                                               + v226))
          {
            uint64_t v227 = v226 + 1;
            if (v225 != v226)
            {
              BOOL v24 = v221 - 1 == v226++;
              if (!v24) {
                continue;
              }
            }
            uint64_t v228 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                 + v227;
            uint64_t v229 = (uint64_t)v223 + v227;
            goto LABEL_409;
          }
          uint64_t v228 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
               + v226;
          uint64_t v229 = (uint64_t)v223 + v226;
LABEL_409:
          if (v228 == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                     + v221)
            break;
          uint64_t v223 = (std::string *)((char *)v223 + 1);
          --v225;
          if (v223 == v224) {
            goto LABEL_418;
          }
        }
        if (v223 != (std::string *)v229)
        {
          v239[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
          v239[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                   + v221);
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v247, (uint64_t *)v239, v223, v229);
        }
      }
    }
  }
LABEL_418:
  *(_OWORD *)&v239[1].__locale_ = 0u;
  long long v240 = 0u;
  long long v241 = 0u;
  int64_t v230 = *v237;
  v231.i64[0] = *v237 / 60000000 % 60;
  v231.i64[1] = *v237 / 3600000000;
  *(int32x2_t *)((char *)&v239[0].__locale_ + 4) = vmovn_s64(vabsq_s64(v231));
  uint64_t v232 = v230 / 1000000 % 60;
  if (v232 < 0) {
    uint64_t v232 = -v232;
  }
  LODWORD(v239[0].__locale_) = v232;
  DWORD2(v24CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = -1;
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v238, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  }
  else {
    std::string v238 = v247;
  }
  uint64_t v233 = (*(uint64_t (**)(uint64_t, uint64_t, const std::ios_base *, void, std::locale *, std::string *))(*(void *)a1 + 48))(a1, a2, v166, a4, v239, &v238);
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v244) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(locale) < 0) {
    operator delete((void *)v245);
  }
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v247.__r_.__value_.__l.__data_);
  }
  return v233;
}

void sub_223E9FCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::locale a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (*(char *)(v38 - 89) < 0) {
    operator delete(*(void **)(v38 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    if (*a1 == v5)
    {
      return a3;
    }
    else
    {
      while (1)
      {
        uint64_t v6 = 0;
        do
        {
          if (*(unsigned __int8 *)(v3 + v6) != *(unsigned __int8 *)(v4 + v6)) {
            break;
          }
          if (++v6 + v3 == a3) {
            break;
          }
        }
        while (v6 + v4 != v5);
        if (v4 + v6 == v5) {
          break;
        }
        if (++v3 == a3) {
          return a3;
        }
      }
    }
  }
  return v3;
}

uint64_t boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>(uint64_t a1, uint64_t *a2, char *a3, char *a4, unsigned char *a5, unsigned char *a6, char *a7, char *a8)
{
  unsigned int v8 = a6;
  long long v38 = 0u;
  long long v39 = 0u;
  int64x2_t v37 = 0u;
  LODWORD(v1CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = *(char *)(a1 + 23);
  size_t v11 = *(unsigned char **)a1;
  if ((int)v10 >= 0) {
    size_t v12 = (unsigned char *)a1;
  }
  else {
    size_t v12 = *(unsigned char **)a1;
  }
  if (a5 == a6)
  {
    std::string::size_type v19 = v12;
  }
  else
  {
    std::string::size_type v15 = a5;
    std::string::size_type v19 = v12;
    uint64_t v20 = v12;
    do
    {
      size_t v12 = v8;
      std::string::size_type v19 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v20, v15);
      std::string::size_type v21 = (char *)(v37.i64[1] + 8 * (((void)v39 + *((void *)&v39 + 1)) >> 12));
      if ((void)v38 == v37.i64[1]) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = *(void *)v21 + (((_WORD)v39 + WORD4(v39)) & 0xFFF);
      }
      std::deque<char>::__insert_bidirectional[abi:ne180100]<char const*>(&v37, v21, v22, a7, a8, a8 - a7);
      uint64_t v23 = *(unsigned __int8 *)(a1 + 23);
      if ((v23 & 0x80u) == 0) {
        uint64_t v24 = a1;
      }
      else {
        uint64_t v24 = *(void *)a1;
      }
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *(void *)(a1 + 8);
      }
      std::string::size_type v15 = (unsigned char *)boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(a2, (uint64_t)v12, v24 + v23);
      unsigned int v8 = v25;
      uint64_t v20 = v12;
      a7 = a3;
      a8 = a4;
    }
    while (v15 != v25);
    LOBYTE(v1CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = *(unsigned char *)(a1 + 23);
    size_t v11 = *(unsigned char **)a1;
  }
  uint64_t v10 = v10;
  if ((v10 & 0x80u) == 0) {
    uint64_t v26 = a1;
  }
  else {
    uint64_t v26 = (uint64_t)v11;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  unsigned int v27 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v12, (unsigned char *)(v26 + v10));
  uint64_t v28 = *(unsigned __int8 *)(a1 + 23);
  if ((v28 & 0x80u) == 0) {
    uint64_t v29 = a1;
  }
  else {
    uint64_t v29 = *(void *)a1;
  }
  if ((v28 & 0x80u) != 0) {
    uint64_t v28 = *(void *)(a1 + 8);
  }
  uint64_t v30 = v29 + v28;
  if (*((void *)&v39 + 1))
  {
    char v31 = (char *)(v37.i64[1] + 8 * ((unint64_t)v39 >> 12));
    if ((void)v38 == v37.i64[1])
    {
      uint64_t v32 = 0;
      std::string::size_type v34 = 0;
      std::string::size_type v33 = (char *)(v37.i64[1] + 8 * (((void)v39 + *((void *)&v39 + 1)) >> 12));
    }
    else
    {
      uint64_t v32 = (std::string::value_type *)(*(void *)v31 + (v39 & 0xFFF));
      std::string::size_type v33 = (char *)(v37.i64[1] + 8 * (((void)v39 + *((void *)&v39 + 1)) >> 12));
      std::string::size_type v34 = (std::string::value_type *)(*(void *)v33 + ((v39 + *((void *)&v39 + 1)) & 0xFFF));
    }
    if (v34 == v32) {
      std::string::size_type v35 = 0;
    }
    else {
      std::string::size_type v35 = &v34[512 * (v33 - v31)] - &v32[*(void *)v33] + *(void *)v31;
    }
    std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(a1, v30, v31, v32, (uint64_t)v33, v34, v35);
  }
  else
  {
    std::string::erase((std::string *)a1, (std::string::size_type)&v27[-v29], v30 - (void)v27);
  }
  return std::deque<char>::~deque[abi:ne180100](&v37);
}

void sub_223EA0018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>(int a1, int64x2_t *a2, int a3, unsigned char *__dst, unsigned char *__src, unsigned char *a6)
{
  unsigned int v8 = __dst;
  uint64_t v10 = a2[2].i64[1];
  if (v10) {
    BOOL v11 = __dst == __src;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    do
    {
      *v8++ = *(unsigned char *)(*(void *)(a2->i64[1] + (((unint64_t)a2[2].i64[0] >> 9) & 0x7FFFFFFFFFFFF8))
                       + (a2[2].i64[0] & 0xFFF));
      a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_2246C0940);
      std::deque<char>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a2, 1);
      uint64_t v10 = a2[2].i64[1];
    }
    while (v10 && v8 != __src);
  }
  if (v10)
  {
    while (v8 != a6)
    {
      std::deque<char>::push_back(a2, v8);
      *v8++ = *(unsigned char *)(*(void *)(a2->i64[1] + (((unint64_t)a2[2].i64[0] >> 9) & 0x7FFFFFFFFFFFF8))
                       + (a2[2].i64[0] & 0xFFF));
      a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_2246C0940);
      std::deque<char>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a2, 1);
    }
  }
  else if (v8 != __src)
  {
    size_t v12 = a6 - __src;
    if (v12) {
      memmove(v8, __src, v12);
    }
    return &v8[v12];
  }
  return a6;
}

void std::deque<char>::push_back(void *a1, unsigned char *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 9) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<char>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(unsigned char *)(*(void *)(v5 + ((v7 >> 9) & 0x7FFFFFFFFFFFF8)) + (v7 & 0xFFF)) = *a2;
  ++a1[5];
}

void std::deque<char>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1000;
  unint64_t v4 = v2 - 4096;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unsigned int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unsigned int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unsigned int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      std::string::size_type v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      std::string::size_type v35 = &v34[8 * (v33 >> 2)];
      int64x2_t v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      unsigned int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unsigned int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    std::string::size_type v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unsigned int v9 = (char *)a1[1];
    }
    unsigned int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    unsigned int v44 = (void *)a1[1];
    unsigned int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unsigned int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      std::string::size_type v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      std::string::size_type v35 = &v34[8 * (v46 >> 2)];
      int64x2_t v37 = &v34[8 * v47];
      std::string::size_type v48 = (uint64_t *)a1[1];
      unsigned int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unsigned int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        char v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)char v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      size_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unsigned int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  std::string::size_type v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  size_t v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  unsigned int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_223EA04C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<char *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      std::string::size_type v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      unsigned int v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      std::string::size_type v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      unint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<char *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<char>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x1000) {
    a2 = 1;
  }
  if (v2 < 0x2000) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 4096;
  }
  return v4 ^ 1u;
}

void *std::deque<char>::__insert_bidirectional[abi:ne180100]<char const*>(int64x2_t *a1, char *a2, uint64_t a3, char *a4, char *a5, unint64_t a6)
{
  unint64_t v6 = a6;
  unint64_t v10 = a1[2].u64[0];
  unint64_t v11 = v10 >> 12;
  uint64_t v12 = a1->i64[1];
  uint64_t v13 = a1[1].i64[0];
  uint64_t v14 = (char *)(v12 + 8 * (v10 >> 12));
  if (v13 == v12) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *(void *)v14 + (a1[2].i64[0] & 0xFFF);
  }
  if (a3 == v15) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = a3 + ((a2 - v14) << 9) - (v15 + *(void *)a2) + *(void *)v14;
  }
  uint64_t v17 = a1[2].i64[1];
  if (v16 >= v17 - v16)
  {
    uint64_t v20 = ((v13 - v12) << 9) - 1;
    if (v13 == v12) {
      uint64_t v20 = 0;
    }
    unint64_t v21 = v10 + v17;
    unint64_t v22 = v20 - v21;
    if (a6 > v22)
    {
      std::deque<char>::__add_back_capacity(a1, a6 - v22);
      uint64_t v17 = a1[2].i64[1];
      uint64_t v12 = a1->i64[1];
      uint64_t v13 = a1[1].i64[0];
      unint64_t v21 = a1[2].i64[0] + v17;
    }
    uint64_t v23 = (void *)(v12 + 8 * (v21 >> 12));
    if (v13 == v12) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = (char *)(*v23 + (v21 & 0xFFF));
    }
    *(void *)&long long v68 = v12 + 8 * (v21 >> 12);
    *((void *)&v68 + 1) = v24;
    unint64_t v45 = v17 - v16;
    if (v17 - v16 < v6)
    {
      unint64_t v46 = &a5[v17 - v16 - v6];
      if (v45 < v6 >> 1) {
        unint64_t v46 = &a4[v45];
      }
      if (v46 != a5)
      {
        uint64_t v47 = v46;
        do
        {
          *v24++ = *v47;
          if (&v24[-*v23] == (char *)4096)
          {
            std::string::size_type v48 = (char *)v23[1];
            ++v23;
            uint64_t v24 = v48;
          }
          ++v47;
          ++a1[2].i64[1];
        }
        while (v47 != a5);
        a5 = v46;
      }
      unint64_t v6 = v17 - v16;
    }
    if (v6)
    {
      uint64_t v49 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v6);
      char v51 = v49;
      uint64_t v52 = v50;
      uint64_t v53 = *((void *)&v68 + 1);
      if (*((char **)&v68 + 1) != v50)
      {
        long long v54 = v49;
        long long v55 = v50;
        do
        {
          *v24++ = *v55;
          if (&v24[-*v23] == (char *)4096)
          {
            std::string::size_type v56 = (char *)v23[1];
            ++v23;
            uint64_t v24 = v56;
          }
          if (&(++v55)[-*v54] == (char *)4096)
          {
            uint64_t v57 = (char *)v54[1];
            ++v54;
            long long v55 = v57;
          }
          ++a1[2].i64[1];
          uint64_t v53 = *((void *)&v68 + 1);
        }
        while (v55 != *((char **)&v68 + 1));
      }
      if (v6 < v45)
      {
        uint64_t v58 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v45);
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>,0>(v58, v59, v51, v52, (const void **)v68, *((char **)&v68 + 1), (const void ***)&v69);
        uint64_t v53 = *((void *)&v70 + 1);
        long long v68 = v70;
      }
      if (a5 != a4)
      {
        std::string::size_type v61 = (uint64_t *)(v68 - 8);
        uint64_t v60 = *(void *)v68;
        while (1)
        {
          int64_t v62 = v53 - v60;
          if (a5 - a4 >= v62) {
            size_t v63 = v62;
          }
          else {
            size_t v63 = a5 - a4;
          }
          a5 -= v63;
          if (v63) {
            memmove((void *)(v53 - v63), a5, v63);
          }
          if (a5 == a4) {
            break;
          }
          uint64_t v64 = *v61--;
          uint64_t v60 = v64;
          uint64_t v53 = v64 + 4096;
        }
      }
    }
  }
  else
  {
    if (a6 > v10)
    {
      std::deque<char>::__add_front_capacity((void **)a1, a6 - v10);
      unint64_t v10 = a1[2].u64[0];
      uint64_t v12 = a1->i64[1];
      uint64_t v13 = a1[1].i64[0];
      unint64_t v11 = v10 >> 12;
    }
    uint64_t v18 = (void *)(v12 + 8 * v11);
    if (v13 == v12) {
      unint64_t v19 = 0;
    }
    else {
      unint64_t v19 = *v18 + (v10 & 0xFFF);
    }
    *(void *)&long long v68 = v12 + 8 * v11;
    *((void *)&v68 + 1) = v19;
    if (v6 > v16)
    {
      unint64_t v25 = &a4[v6 - v16];
      if (v16 < v6 >> 1) {
        unint64_t v25 = &a5[-v16];
      }
      if (v25 != a4)
      {
        uint64_t v26 = v25;
        do
        {
          if (v19 == *v18)
          {
            uint64_t v27 = *--v18;
            unint64_t v19 = v27 + 4096;
          }
          char v28 = *--v26;
          *(unsigned char *)--unint64_t v19 = v28;
          a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2246C0950);
        }
        while (v26 != a4);
        a4 = v25;
      }
      unint64_t v6 = v16;
    }
    if (v6)
    {
      long long v30 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v6);
      long long v31 = v29;
      long long v32 = (unsigned char *)*((void *)&v68 + 1);
      if (*((unsigned char **)&v68 + 1) != v29)
      {
        unint64_t v33 = v30;
        std::string::size_type v34 = v29;
        do
        {
          if (v19 == *v18)
          {
            uint64_t v35 = *--v18;
            unint64_t v19 = v35 + 4096;
          }
          if (v34 == (unsigned char *)*v33)
          {
            uint64_t v36 = *--v33;
            std::string::size_type v34 = (unsigned char *)(v36 + 4096);
          }
          char v37 = *--v34;
          *(unsigned char *)--unint64_t v19 = v37;
          a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2246C0950);
          long long v32 = (unsigned char *)*((void *)&v68 + 1);
        }
        while (v34 != *((unsigned char **)&v68 + 1));
      }
      if (v6 < v16)
      {
        long long v38 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v16);
        long long v69 = v68;
        std::__for_each_segment[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>>(v30, v31, (unsigned char **)v38, v39, (void ***)&v69);
        long long v32 = (unsigned char *)*((void *)&v69 + 1);
        long long v68 = v69;
      }
      if (a4 != a5)
      {
        uint64_t v41 = (void **)(v68 + 8);
        uint64_t v40 = *(unsigned char **)v68;
        while (1)
        {
          uint64_t v42 = v40 - v32 + 4096;
          if (a5 - a4 >= v42) {
            size_t v43 = v42;
          }
          else {
            size_t v43 = a5 - a4;
          }
          if (v43) {
            memmove(v32, a4, v43);
          }
          a4 += v43;
          if (a4 == a5) {
            break;
          }
          unsigned int v44 = *v41++;
          uint64_t v40 = v44;
          long long v32 = v44;
        }
      }
    }
  }
  uint64_t v65 = a1->i64[1];
  if (a1[1].i64[0] == v65) {
    uint64_t v66 = 0;
  }
  else {
    uint64_t v66 = *(void *)(v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12)) + (a1[2].i64[0] & 0xFFF);
  }
  *(void *)&long long v69 = v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12);
  *((void *)&v69 + 1) = v66;
  return std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v69, v16);
}

void std::deque<char>::__add_front_capacity(void **a1, unint64_t a2)
{
  BOOL v3 = a1[1];
  int v4 = a1[2];
  uint64_t v5 = v4 - v3;
  if (v4 == v3) {
    unint64_t v6 = a2 + 1;
  }
  else {
    unint64_t v6 = a2;
  }
  if (v4 == v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v3) << 9) - 1;
  }
  if ((v6 & 0xFFF) != 0) {
    unint64_t v8 = (v6 >> 12) + 1;
  }
  else {
    unint64_t v8 = v6 >> 12;
  }
  uint64_t v9 = (uint64_t)a1[4];
  unint64_t v10 = v7 - ((void)a1[5] + v9);
  if (v8 >= v10 >> 12) {
    unint64_t v11 = v10 >> 12;
  }
  else {
    unint64_t v11 = v8;
  }
  if (v8 <= v10 >> 12)
  {
    for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
    {
      unint64_t v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
    }
  }
  else
  {
    uint64_t v12 = (uint64_t)(a1 + 3);
    unint64_t v13 = v8 - v11;
    uint64_t v14 = (unsigned char *)a1[3] - (unsigned char *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          unint64_t v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<char *>::push_back(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          uint64_t v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
            uint64_t v20 = a1[1];
            uint64_t v21 = (unsigned char *)a1[2] - v20 == 8 ? 4095 : 4096;
            uint64_t v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13) {
              break;
            }
            if (v20 == *a1) {
              goto LABEL_30;
            }
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
      {
        uint64_t v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
      }
    }
    else
    {
      BOOL v15 = v4 == v3;
      unint64_t v16 = v8 << 12;
      if (v14 >> 2 <= v13 + (v5 >> 3)) {
        unint64_t v17 = v13 + (v5 >> 3);
      }
      else {
        unint64_t v17 = v14 >> 2;
      }
      long long v70 = a1 + 3;
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v12, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      long long v68 = v18;
      long long v69 = &v18[8 * v17];
      do
      {
        uint64_t v66 = operator new(0x1000uLL);
        std::__split_buffer<char *>::push_back(__p, &v66);
        --v13;
      }
      while (v13);
      unint64_t v25 = (char *)a1[2];
      for (unsigned __int16 i = v68; v11; --v11)
      {
        if (i == v69)
        {
          int64_t v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0]) {
              unint64_t v35 = 1;
            }
            else {
              unint64_t v35 = (i - (char *)__p[0]) >> 2;
            }
            uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v70, v35);
            long long v38 = (uint64_t *)__p[1];
            unsigned __int16 i = &v36[8 * (v35 >> 2)];
            uint64_t v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              unsigned __int16 i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v40 = 8 * (v39 >> 3);
              uint64_t v41 = &v36[8 * (v35 >> 2)];
              do
              {
                uint64_t v42 = *v38++;
                *(void *)uint64_t v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            size_t v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            long long v68 = i;
            long long v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              unsigned __int16 i = v68;
            }
          }
          else
          {
            uint64_t v28 = v27 >> 3;
            BOOL v29 = v27 >> 3 < -1;
            uint64_t v30 = (v27 >> 3) + 2;
            if (v29) {
              uint64_t v31 = v30;
            }
            else {
              uint64_t v31 = v28 + 1;
            }
            long long v32 = (char *)__p[1] - 8 * (v31 >> 1);
            int64_t v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              unsigned __int16 i = (char *)__p[1];
            }
            std::string::size_type v34 = &i[-8 * (v31 >> 1)];
            unsigned __int16 i = &v32[v33];
            __p[1] = v34;
            long long v68 = &v32[v33];
          }
        }
        *(void *)unsigned __int16 i = *((void *)v25 - 1);
        unsigned __int16 i = v68 + 8;
        v68 += 8;
        unint64_t v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      unsigned int v44 = (char *)a1[1];
      if (v44 == v25)
      {
        unsigned int v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            int64_t v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0]) {
                unint64_t v52 = 1;
              }
              else {
                unint64_t v52 = (i - (char *)__p[0]) >> 2;
              }
              uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v70, v52);
              long long v55 = (uint64_t *)__p[1];
              unsigned __int16 i = &v53[8 * (v52 >> 2)];
              uint64_t v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                unsigned __int16 i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v57 = 8 * (v56 >> 3);
                uint64_t v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  uint64_t v59 = *v55++;
                  *(void *)uint64_t v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              uint64_t v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              long long v68 = i;
              long long v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                unsigned __int16 i = v68;
              }
            }
            else
            {
              uint64_t v46 = v45 >> 3;
              BOOL v29 = v45 >> 3 < -1;
              uint64_t v47 = (v45 >> 3) + 2;
              if (v29) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = v46 + 1;
              }
              uint64_t v49 = (char *)__p[1] - 8 * (v48 >> 1);
              int64_t v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                unsigned __int16 i = (char *)__p[1];
              }
              char v51 = &i[-8 * (v48 >> 1)];
              unsigned __int16 i = &v49[v50];
              __p[1] = v51;
              long long v68 = &v49[v50];
            }
          }
          uint64_t v61 = *(void *)v44;
          v44 += 8;
          *(void *)unsigned __int16 i = v61;
          unsigned __int16 i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        unint64_t v25 = (char *)a1[1];
      }
      int64_t v62 = v69;
      size_t v63 = (char *)a1[3];
      uint64_t v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      uint64_t v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      long long v68 = v44;
      long long v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25) {
        long long v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v65) {
        operator delete(v65);
      }
    }
  }
}

void sub_223EA12A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 8) - *result + a2;
    if (v4 < 1) {
      result -= (unint64_t)(4095 - v4) >> 12;
    }
    else {
      result += (unint64_t)v4 >> 12;
    }
  }
  return result;
}

void std::deque<char>::__add_back_capacity(void *a1, unint64_t a2)
{
  BOOL v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0xFFF) != 0) {
    unint64_t v6 = (v5 >> 12) + 1;
  }
  else {
    unint64_t v6 = v5 >> 12;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 12) {
    unint64_t v8 = v7 >> 12;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 12)
  {
    for (a1[4] = v7 - (v8 << 12); v8; --v8)
    {
      unint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      unint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          BOOL v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          long long v32 = (uint64_t *)a1[1];
          BOOL v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            BOOL v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            BOOL v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            BOOL v3 = (char *)a1[1];
          }
          int64_t v27 = &v3[-8 * (v24 >> 1)];
          BOOL v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)BOOL v3 = v18;
      BOOL v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<char *>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 4095;
          }
          else {
            uint64_t v64 = 4096;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 12);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          std::string::size_type v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          long long v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              char v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v78);
              int64_t v81 = &v79[8 * (v78 >> 2)];
              int64_t v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                int v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)int v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              int64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }
              BOOL v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      size_t v91 = a1 + 3;
      if (v13) {
        BOOL v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
      }
      else {
        BOOL v15 = 0;
      }
      uint64_t v38 = v8 << 12;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        char v88 = operator new(0x1000uLL);
        std::__split_buffer<char *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v91, v48);
              char v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                uint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)uint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              int64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<char *>::push_front((uint64_t)__p, v57);
      }
      uint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_223EA1890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 8) - a2 - *result;
    if (v4 < 1) {
      result -= (unint64_t)(4095 - v4) >> 12;
    }
    else {
      result += (unint64_t)v4 >> 12;
    }
  }
  return result;
}

void ****std::__for_each_segment[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>>(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, void ***a5)
{
  uint64_t v11 = a5;
  if (a1 != a3)
  {
    unint64_t v7 = a1 + 1;
    for (uint64_t i = (unsigned char *)(*a1 + 4096); ; uint64_t i = v9 + 4096)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](&v11, a2, i);
      if (v7 == a3) {
        break;
      }
      unint64_t v9 = (unsigned char *)*v7++;
      a2 = v9;
    }
    a2 = *a3;
  }
  return std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](&v11, a2, a4);
}

void ****std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](void ****result, unsigned char *__src, unsigned char *a3)
{
  BOOL v3 = *result;
  unint64_t v5 = **result;
  uint64_t v4 = (*result)[1];
  if (__src != a3)
  {
    unint64_t v7 = __src;
    unint64_t v8 = result;
    uint64_t v10 = (char *)*v5++;
    unint64_t v9 = (void **)v10;
    while (1)
    {
      uint64_t v11 = (char *)v9 - (char *)v4 + 4096;
      if (a3 - v7 >= v11) {
        size_t v12 = v11;
      }
      else {
        size_t v12 = a3 - v7;
      }
      if (v12) {
        uint64_t result = (void ****)memmove(v4, v7, v12);
      }
      v7 += v12;
      if (v7 == a3) {
        break;
      }
      unint64_t v13 = (void **)*v5++;
      unint64_t v9 = v13;
      uint64_t v4 = v13;
    }
    uint64_t v4 = (void **)((char *)v4 + v12);
    if ((char *)*(v5 - 1) + 4096 == (char *)v4) {
      uint64_t v4 = (void **)*v5;
    }
    else {
      --v5;
    }
    BOOL v3 = *v8;
  }
  *BOOL v3 = v5;
  v3[1] = v4;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>,0>@<X0>(const void **a1@<X1>, char *a2@<X2>, const void **a3@<X3>, char *a4@<X4>, const void **a5@<X5>, char *a6@<X6>, const void ***a7@<X8>)
{
  unint64_t v8 = a5;
  if (a1 == a3)
  {
    if (a2 == a4) {
      goto LABEL_46;
    }
    uint64_t v35 = (uint64_t)*a5;
    uint64_t v36 = a4;
    while (1)
    {
      uint64_t v37 = &a6[-v35];
      if (v36 - a2 >= (uint64_t)v37) {
        size_t v38 = (size_t)v37;
      }
      else {
        size_t v38 = v36 - a2;
      }
      v36 -= v38;
      a6 -= v38;
      if (v38) {
        uint64_t result = memmove(a6, v36, v38);
      }
      if (v36 == a2) {
        break;
      }
      uint64_t v39 = (uint64_t)*--v8;
      uint64_t v35 = v39;
      a6 = (char *)(v39 + 4096);
    }
    goto LABEL_44;
  }
  unint64_t v14 = *a3;
  if (*a3 != a4)
  {
    uint64_t v15 = (uint64_t)*a5;
    unint64_t v16 = a4;
    while (1)
    {
      unint64_t v17 = &a6[-v15];
      if (v16 - v14 >= (uint64_t)v17) {
        size_t v18 = (size_t)v17;
      }
      else {
        size_t v18 = v16 - v14;
      }
      v16 -= v18;
      a6 -= v18;
      if (v18) {
        uint64_t result = memmove(a6, v16, v18);
      }
      if (v16 == v14) {
        break;
      }
      uint64_t v20 = (uint64_t)*--v8;
      uint64_t v15 = v20;
      a6 = (char *)(v20 + 4096);
    }
    if ((char *)*v8 + 4096 == a6)
    {
      uint64_t v21 = (char *)v8[1];
      ++v8;
      a6 = v21;
    }
  }
  BOOL v22 = a3 - 1;
  if (a3 - 1 != a1)
  {
    uint64_t v23 = (char *)*v8;
    do
    {
      uint64_t v24 = *v22;
      unint64_t v25 = (char *)*v22 + 4096;
      while (1)
      {
        int64_t v26 = (char *)(a6 - v23);
        if (v25 - v24 >= (uint64_t)v26) {
          size_t v27 = (size_t)v26;
        }
        else {
          size_t v27 = v25 - v24;
        }
        v25 -= v27;
        a6 -= v27;
        if (v27) {
          uint64_t result = memmove(a6, v25, v27);
        }
        if (v25 == v24) {
          break;
        }
        unint64_t v28 = (char *)*--v8;
        uint64_t v23 = v28;
        a6 = v28 + 4096;
      }
      uint64_t v23 = (char *)*v8;
      if ((char *)*v8 + 4096 == a6)
      {
        BOOL v29 = (char *)v8[1];
        ++v8;
        uint64_t v23 = v29;
        a6 = v29;
      }
      --v22;
    }
    while (v22 != a1);
  }
  uint64_t v30 = (char *)*a1 + 4096;
  if (v30 != a2)
  {
    uint64_t v31 = (uint64_t)*v8;
    while (1)
    {
      long long v32 = &a6[-v31];
      if (v30 - a2 >= (uint64_t)v32) {
        size_t v33 = (size_t)v32;
      }
      else {
        size_t v33 = v30 - a2;
      }
      v30 -= v33;
      a6 -= v33;
      if (v33) {
        uint64_t result = memmove(a6, v30, v33);
      }
      if (v30 == a2) {
        break;
      }
      uint64_t v34 = (uint64_t)*--v8;
      uint64_t v31 = v34;
      a6 = (char *)(v34 + 4096);
    }
LABEL_44:
    if ((char *)*v8 + 4096 == a6)
    {
      uint64_t v40 = (char *)v8[1];
      ++v8;
      a6 = v40;
    }
  }
LABEL_46:
  *a7 = a3;
  a7[1] = (const void **)a4;
  a7[2] = v8;
  a7[3] = (const void **)a6;
  return result;
}

char *std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(uint64_t a1, uint64_t a2, void *a3, std::string::value_type *a4, uint64_t a5, std::string::value_type *a6, std::string::size_type a7)
{
  unint64_t v8 = (std::string *)a1;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::size_type v9 = a2 - *(void *)a1;
    if (!a7)
    {
      unint64_t v8 = *(std::string **)a1;
      return (char *)v8 + v9;
    }
  }
  else
  {
    std::string::size_type v9 = a2 - a1;
    if (!a7) {
      return (char *)v8 + v9;
    }
  }
  std::string::__init_with_sentinel[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(&__p, a3, a4, a5, a6);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v8, a7, v9, (char *)p_p, (char *)p_p + size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return (char *)v12;
}

void sub_223EA1D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__init_with_sentinel[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(std::string *this, void *a2, std::string::value_type *a3, uint64_t a4, std::string::value_type *a5)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a3 != a5)
  {
    unint64_t v6 = a3;
    do
    {
      std::string::push_back(this, *v6++);
      if (&v6[-*a2] == (std::string::value_type *)4096)
      {
        std::string::size_type v9 = (std::string::value_type *)a2[1];
        ++a2;
        unint64_t v6 = v9;
      }
    }
    while (v6 != a5);
  }
}

void sub_223EA1DD8(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_223EA1DF4(_Unwind_Exception *a1)
{
}

uint64_t std::deque<char>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 4096;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>(uint64_t a1, uint64_t *a2, unsigned char *a3, uint64_t a4)
{
  long long v28 = 0u;
  long long v29 = 0u;
  int64x2_t v27 = 0u;
  if (*(char *)(a1 + 23) >= 0) {
    unint64_t v8 = (unsigned char *)a1;
  }
  else {
    unint64_t v8 = *(unsigned char **)a1;
  }
  std::string::size_type v9 = v8;
  while (a3 != (unsigned char *)a4)
  {
    std::string::size_type v9 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v30, &v27, a1, v9, v8, a3);
    uint64_t v10 = (char *)(v27.i64[1] + 8 * (((void)v29 + *((void *)&v29 + 1)) >> 12));
    if ((void)v28 == v27.i64[1]) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = *(void *)v10 + (((_WORD)v29 + WORD4(v29)) & 0xFFF);
    }
    std::deque<char>::__insert_bidirectional[abi:ne180100]<char const*>(&v27, v10, v11, 0, 0, 0);
    unint64_t v8 = (unsigned char *)a4;
    uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
    if ((v12 & 0x80u) == 0) {
      unint64_t v13 = (unsigned char *)a1;
    }
    else {
      unint64_t v13 = *(unsigned char **)a1;
    }
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a1 + 8);
    }
    a3 = (unsigned char *)boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(a2, a4, (uint64_t)&v13[v12]);
    a4 = v14;
  }
  uint64_t v15 = *(unsigned __int8 *)(a1 + 23);
  if ((v15 & 0x80u) == 0) {
    unint64_t v16 = (unsigned char *)a1;
  }
  else {
    unint64_t v16 = *(unsigned char **)a1;
  }
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a1 + 8);
  }
  unint64_t v17 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v30, &v27, a1, v9, v8, &v16[v15]);
  uint64_t v18 = *(unsigned __int8 *)(a1 + 23);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = a1;
  }
  else {
    uint64_t v19 = *(void *)a1;
  }
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a1 + 8);
  }
  uint64_t v20 = v19 + v18;
  if (*((void *)&v29 + 1))
  {
    uint64_t v21 = (char *)(v27.i64[1] + 8 * ((unint64_t)v29 >> 12));
    if ((void)v28 == v27.i64[1])
    {
      BOOL v22 = 0;
      uint64_t v24 = 0;
      uint64_t v23 = (char *)(v27.i64[1] + 8 * (((void)v29 + *((void *)&v29 + 1)) >> 12));
    }
    else
    {
      BOOL v22 = (std::string::value_type *)(*(void *)v21 + (v29 & 0xFFF));
      uint64_t v23 = (char *)(v27.i64[1] + 8 * (((void)v29 + *((void *)&v29 + 1)) >> 12));
      uint64_t v24 = (std::string::value_type *)(*(void *)v23 + ((v29 + *((void *)&v29 + 1)) & 0xFFF));
    }
    if (v24 == v22) {
      std::string::size_type v25 = 0;
    }
    else {
      std::string::size_type v25 = &v24[512 * (v23 - v21)] - &v22[*(void *)v23] + *(void *)v21;
    }
    std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(a1, v20, v21, v22, (uint64_t)v23, v24, v25);
  }
  else
  {
    std::string::erase((std::string *)a1, (std::string::size_type)&v17[-v19], v20 - (void)v17);
  }
  return std::deque<char>::~deque[abi:ne180100](&v27);
}

void sub_223EA20B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(uint64_t a1, int a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  uint64_t v3 = *(void *)(v9[0] - 24);
  unint64_t v4 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + v3));
  std::ios_base::imbue((std::ios_base *)((char *)v9 + v3), v4);
  std::locale::~locale(&v13);
  unint64_t v5 = *(std::locale **)((char *)&v9[5] + v3);
  if (v5)
  {
    (*((void (**)(std::locale *, const std::locale *))v5->__locale_ + 2))(v5, v4);
    uint64_t v6 = v5 + 1;
    std::locale::locale(&v12, v6);
    std::locale::operator=(v6, v4);
    std::locale::~locale(&v12);
  }
  std::locale::~locale(&v8);
  *(void *)((char *)&v9[3] + *(void *)(v9[0] - 24)) = a2;
  LOBYTE(v13.__locale_) = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, (char *)&v13);
  std::ostream::operator<<();
  std::stringbuf::str();
  v9[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v9[1] = MEMORY[0x263F8C318] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v11);
}

void sub_223EA22FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(uint64_t a1, uint64_t *a2, char *a3, char *a4, unsigned char *a5, unsigned char *a6, char *a7, char *a8)
{
  std::locale v8 = a6;
  long long v38 = 0u;
  long long v39 = 0u;
  int64x2_t v37 = 0u;
  LODWORD(v1CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = *(char *)(a1 + 23);
  uint64_t v11 = *(unsigned char **)a1;
  if ((int)v10 >= 0) {
    std::locale v12 = (unsigned char *)a1;
  }
  else {
    std::locale v12 = *(unsigned char **)a1;
  }
  if (a5 == a6)
  {
    uint64_t v19 = v12;
  }
  else
  {
    uint64_t v15 = a5;
    uint64_t v19 = v12;
    uint64_t v20 = v12;
    do
    {
      std::locale v12 = v8;
      uint64_t v19 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v20, v15);
      uint64_t v21 = (char *)(v37.i64[1] + 8 * (((void)v39 + *((void *)&v39 + 1)) >> 12));
      if ((void)v38 == v37.i64[1]) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = *(void *)v21 + (((_WORD)v39 + WORD4(v39)) & 0xFFF);
      }
      std::deque<char>::__insert_bidirectional[abi:ne180100]<std::__wrap_iter<char const*>>(&v37, v21, v22, a7, a8, a8 - a7);
      uint64_t v23 = *(unsigned __int8 *)(a1 + 23);
      if ((v23 & 0x80u) == 0) {
        uint64_t v24 = a1;
      }
      else {
        uint64_t v24 = *(void *)a1;
      }
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *(void *)(a1 + 8);
      }
      uint64_t v15 = (unsigned char *)boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(a2, (uint64_t)v12, v24 + v23);
      std::locale v8 = v25;
      uint64_t v20 = v12;
      a7 = a3;
      a8 = a4;
    }
    while (v15 != v25);
    LOBYTE(v1CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = *(unsigned char *)(a1 + 23);
    uint64_t v11 = *(unsigned char **)a1;
  }
  uint64_t v10 = v10;
  if ((v10 & 0x80u) == 0) {
    uint64_t v26 = a1;
  }
  else {
    uint64_t v26 = (uint64_t)v11;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  int64x2_t v27 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v12, (unsigned char *)(v26 + v10));
  uint64_t v28 = *(unsigned __int8 *)(a1 + 23);
  if ((v28 & 0x80u) == 0) {
    uint64_t v29 = a1;
  }
  else {
    uint64_t v29 = *(void *)a1;
  }
  if ((v28 & 0x80u) != 0) {
    uint64_t v28 = *(void *)(a1 + 8);
  }
  uint64_t v30 = v29 + v28;
  if (*((void *)&v39 + 1))
  {
    uint64_t v31 = (char *)(v37.i64[1] + 8 * ((unint64_t)v39 >> 12));
    if ((void)v38 == v37.i64[1])
    {
      long long v32 = 0;
      uint64_t v34 = 0;
      size_t v33 = (char *)(v37.i64[1] + 8 * (((void)v39 + *((void *)&v39 + 1)) >> 12));
    }
    else
    {
      long long v32 = (std::string::value_type *)(*(void *)v31 + (v39 & 0xFFF));
      size_t v33 = (char *)(v37.i64[1] + 8 * (((void)v39 + *((void *)&v39 + 1)) >> 12));
      uint64_t v34 = (std::string::value_type *)(*(void *)v33 + ((v39 + *((void *)&v39 + 1)) & 0xFFF));
    }
    if (v34 == v32) {
      std::string::size_type v35 = 0;
    }
    else {
      std::string::size_type v35 = &v34[512 * (v33 - v31)] - &v32[*(void *)v33] + *(void *)v31;
    }
    std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(a1, v30, v31, v32, (uint64_t)v33, v34, v35);
  }
  else
  {
    std::string::erase((std::string *)a1, (std::string::size_type)&v27[-v29], v30 - (void)v27);
  }
  return std::deque<char>::~deque[abi:ne180100](&v37);
}

void sub_223EA2560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::deque<char>::__insert_bidirectional[abi:ne180100]<std::__wrap_iter<char const*>>(int64x2_t *a1, char *a2, uint64_t a3, char *a4, char *a5, unint64_t a6)
{
  unint64_t v6 = a6;
  unint64_t v10 = a1[2].u64[0];
  unint64_t v11 = v10 >> 12;
  uint64_t v12 = a1->i64[1];
  uint64_t v13 = a1[1].i64[0];
  uint64_t v14 = (char *)(v12 + 8 * (v10 >> 12));
  if (v13 == v12) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *(void *)v14 + (a1[2].i64[0] & 0xFFF);
  }
  if (a3 == v15) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = a3 + ((a2 - v14) << 9) - (v15 + *(void *)a2) + *(void *)v14;
  }
  uint64_t v17 = a1[2].i64[1];
  if (v16 >= v17 - v16)
  {
    uint64_t v20 = ((v13 - v12) << 9) - 1;
    if (v13 == v12) {
      uint64_t v20 = 0;
    }
    unint64_t v21 = v10 + v17;
    unint64_t v22 = v20 - v21;
    if (a6 > v22)
    {
      std::deque<char>::__add_back_capacity(a1, a6 - v22);
      uint64_t v17 = a1[2].i64[1];
      uint64_t v12 = a1->i64[1];
      uint64_t v13 = a1[1].i64[0];
      unint64_t v21 = a1[2].i64[0] + v17;
    }
    uint64_t v23 = (void *)(v12 + 8 * (v21 >> 12));
    if (v13 == v12) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = (char *)(*v23 + (v21 & 0xFFF));
    }
    *(void *)&long long v68 = v12 + 8 * (v21 >> 12);
    *((void *)&v68 + 1) = v24;
    unint64_t v29 = v17 - v16;
    if (v17 - v16 >= v6)
    {
      uint64_t v30 = a5;
      if (!v6) {
        goto LABEL_84;
      }
    }
    else
    {
      if (v29 >= v6 >> 1) {
        uint64_t v30 = &a5[v17 - v16 - v6];
      }
      else {
        uint64_t v30 = &a4[v29];
      }
      if (v30 == a5)
      {
        uint64_t v30 = a5;
      }
      else
      {
        uint64_t v31 = v30;
        do
        {
          *v24++ = *v31;
          if (&v24[-*v23] == (char *)4096)
          {
            long long v32 = (char *)v23[1];
            ++v23;
            uint64_t v24 = v32;
          }
          ++v31;
          ++a1[2].i64[1];
        }
        while (v31 != a5);
      }
      unint64_t v6 = v17 - v16;
      if (!v29) {
        goto LABEL_84;
      }
    }
    uint64_t v49 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v6);
    char v51 = v49;
    uint64_t v52 = v50;
    uint64_t v53 = *((void *)&v68 + 1);
    if (*((char **)&v68 + 1) != v50)
    {
      uint64_t v54 = v49;
      uint64_t v55 = v50;
      do
      {
        *v24++ = *v55;
        if (&v24[-*v23] == (char *)4096)
        {
          uint64_t v56 = (char *)v23[1];
          ++v23;
          uint64_t v24 = v56;
        }
        if (&(++v55)[-*v54] == (char *)4096)
        {
          uint64_t v57 = (char *)v54[1];
          ++v54;
          uint64_t v55 = v57;
        }
        ++a1[2].i64[1];
        uint64_t v53 = *((void *)&v68 + 1);
      }
      while (v55 != *((char **)&v68 + 1));
    }
    if (v6 < v29)
    {
      uint64_t v58 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v29);
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>,0>(v58, v59, v51, v52, (const void **)v68, *((char **)&v68 + 1), (const void ***)&v69);
      uint64_t v53 = *((void *)&v70 + 1);
      long long v68 = v70;
    }
    if (v30 != a4)
    {
      long long v61 = (uint64_t *)(v68 - 8);
      uint64_t v60 = *(void *)v68;
      while (1)
      {
        int64_t v62 = v53 - v60;
        if (v30 - a4 >= v62) {
          size_t v63 = v62;
        }
        else {
          size_t v63 = v30 - a4;
        }
        v30 -= v63;
        if (v63) {
          memmove((void *)(v53 - v63), v30, v63);
        }
        if (v30 == a4) {
          break;
        }
        uint64_t v64 = *v61--;
        uint64_t v60 = v64;
        uint64_t v53 = v64 + 4096;
      }
    }
    goto LABEL_84;
  }
  if (a6 > v10)
  {
    std::deque<char>::__add_front_capacity((void **)a1, a6 - v10);
    unint64_t v10 = a1[2].u64[0];
    uint64_t v12 = a1->i64[1];
    uint64_t v13 = a1[1].i64[0];
    unint64_t v11 = v10 >> 12;
  }
  uint64_t v18 = (void *)(v12 + 8 * v11);
  if (v13 == v12) {
    unint64_t v19 = 0;
  }
  else {
    unint64_t v19 = *v18 + (v10 & 0xFFF);
  }
  *(void *)&long long v68 = v12 + 8 * v11;
  *((void *)&v68 + 1) = v19;
  if (v6 <= v16)
  {
    std::string::size_type v25 = a4;
    if (!v6) {
      goto LABEL_84;
    }
    goto LABEL_46;
  }
  if (v16 >= v6 >> 1) {
    std::string::size_type v25 = &a4[v6 - v16];
  }
  else {
    std::string::size_type v25 = &a5[-v16];
  }
  if (v25 == a4)
  {
    std::string::size_type v25 = a4;
  }
  else
  {
    uint64_t v26 = v25;
    do
    {
      if (v19 == *v18)
      {
        uint64_t v27 = *--v18;
        unint64_t v19 = v27 + 4096;
      }
      char v28 = *--v26;
      *(unsigned char *)--unint64_t v19 = v28;
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2246C0950);
    }
    while (v26 != a4);
  }
  unint64_t v6 = v16;
  if (v16)
  {
LABEL_46:
    uint64_t v34 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v6);
    std::string::size_type v35 = v33;
    uint64_t v36 = (unsigned char *)*((void *)&v68 + 1);
    if (*((unsigned char **)&v68 + 1) != v33)
    {
      int64x2_t v37 = v34;
      long long v38 = v33;
      do
      {
        if (v19 == *v18)
        {
          uint64_t v39 = *--v18;
          unint64_t v19 = v39 + 4096;
        }
        if (v38 == (unsigned char *)*v37)
        {
          uint64_t v40 = *--v37;
          long long v38 = (unsigned char *)(v40 + 4096);
        }
        char v41 = *--v38;
        *(unsigned char *)--unint64_t v19 = v41;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2246C0950);
        uint64_t v36 = (unsigned char *)*((void *)&v68 + 1);
      }
      while (v38 != *((unsigned char **)&v68 + 1));
    }
    if (v6 < v16)
    {
      uint64_t v42 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v16);
      long long v69 = v68;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>>(v34, v35, (unsigned char **)v42, v43, (void ***)&v69);
      uint64_t v36 = (unsigned char *)*((void *)&v69 + 1);
      long long v68 = v69;
    }
    if (v25 != a5)
    {
      int64_t v45 = (void **)(v68 + 8);
      uint64_t v44 = *(unsigned char **)v68;
      while (1)
      {
        uint64_t v46 = v44 - v36 + 4096;
        if (a5 - v25 >= v46) {
          size_t v47 = v46;
        }
        else {
          size_t v47 = a5 - v25;
        }
        if (v47) {
          memmove(v36, v25, v47);
        }
        v25 += v47;
        if (v25 == a5) {
          break;
        }
        unint64_t v48 = *v45++;
        uint64_t v44 = v48;
        uint64_t v36 = v48;
      }
    }
  }
LABEL_84:
  uint64_t v65 = a1->i64[1];
  if (a1[1].i64[0] == v65) {
    uint64_t v66 = 0;
  }
  else {
    uint64_t v66 = *(void *)(v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12)) + (a1[2].i64[0] & 0xFFF);
  }
  *(void *)&long long v69 = v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12);
  *((void *)&v69 + 1) = v66;
  return std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v69, v16);
}

uint64_t boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::time_facet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::default_time_format[0];
  boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter((uint64_t)v11, 1, "/", "[", ")", "]");
  boost::date_time::special_values_formatter<char,std::ostreambuf_iterator<char>>::special_values_formatter(&v10);
  boost::date_time::date_generator_formatter<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_generator_formatter((uint64_t)v9);
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_facet(a1, v4, (uint64_t)v11, (long long **)&v10, v9, a2);
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v19 < 0) {
    operator delete(__p);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  *(void *)a1 = &unk_26D757F88;
  std::string::basic_string[abi:ne180100]<0>(&v8, boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only);
  unint64_t v5 = std::string::append(&v8, boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::default_time_duration_format[0]);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  *(void *)(a1 + 352) = *((void *)&v5->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 336) = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_223EA2B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(v21);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_facet(uint64_t a1, char *a2, uint64_t a3, long long **a4, long long **a5, uint64_t a6)
{
  *(void *)a1 = &unk_26D758000;
  *(void *)(a1 + 8) = a6 - 1;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), a2);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 40), "%b");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 64), "%a");
  boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter(a1 + 88, a3);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 20CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  *(void *)(a1 + 208) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 192), *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 216), *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 32CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 24CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  return a1;
}

void sub_223EA2CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::~period_formatter(v6);
  if (*(char *)(v2 + 87) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  std::__shared_count::~__shared_count((std::__shared_count *)v2);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::~period_formatter(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(uint64_t a1)
{
  *(void *)a1 = &unk_26D758000;
  uint64_t v2 = (void **)(a1 + 312);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 288);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 264);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  uint64_t vars8;

  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(a1);
  JUMPOUT(0x22A614FA0);
}

void boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::~time_facet(uint64_t a1)
{
  *(void *)a1 = &unk_26D757F88;
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26D757F88;
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(a1);
  JUMPOUT(0x22A614FA0);
}

void boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::set_iso_format()
{
}

void boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::set_iso_extended_format()
{
}

void *boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::do_put_special(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unsigned int v7 = a5;
  boost::date_time::special_values_formatter<char,std::ostreambuf_iterator<char>>::put_special((void *)(a1 + 216), a2, &v7);
  return a2;
}

uint64_t boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::do_put_tm(void *a1, int a2, std::ios_base *this, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a1[39];
  if (a1[40] != v10)
  {
    uint64_t v11 = v10 + 24 * *(int *)(a5 + 24);
    int v12 = *(char *)(v11 + 23);
    uint64_t v13 = *(void *)(v11 + 8);
    if (v12 >= 0) {
      uint64_t v14 = (char *)v11;
    }
    else {
      uint64_t v14 = *(char **)v11;
    }
    uint64_t v15 = *(unsigned __int8 *)(v11 + 23);
    if (v12 < 0) {
      uint64_t v15 = v13;
    }
    int v16 = *(char *)(a6 + 23);
    char v17 = v16 >= 0 ? (unsigned char *)a6 : *(unsigned char **)a6;
    uint64_t v18 = v16 >= 0 ? *(unsigned __int8 *)(a6 + 23) : *(void *)(a6 + 8);
    if (v18)
    {
      char v19 = &v17[v18];
      uint64_t v20 = v18 - 1;
      while (1)
      {
        uint64_t v21 = 0;
        while (v17[v21] == boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::long_weekday_format[v21])
        {
          uint64_t v22 = v21 + 1;
          if (v20 != v21)
          {
            BOOL v23 = v21++ == 1;
            if (!v23) {
              continue;
            }
          }
          uint64_t v24 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::long_weekday_format[v22];
          std::string::size_type v25 = &v17[v22];
          goto LABEL_22;
        }
        uint64_t v24 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::long_weekday_format[v21];
        std::string::size_type v25 = &v17[v21];
LABEL_22:
        if (v24 == "") {
          break;
        }
        ++v17;
        --v20;
        if (v17 == v19) {
          goto LABEL_27;
        }
      }
      if (v17 != v25)
      {
        v73.__locale_ = (std::locale::__imp *)"%A";
        uint64_t v74 = "";
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(a6, (uint64_t *)&v73, v14, &v14[v15], v17, v25, v14, &v14[v15]);
      }
    }
  }
LABEL_27:
  uint64_t v26 = a1[36];
  if (a1[37] != v26)
  {
    uint64_t v27 = v26 + 24 * *(int *)(a5 + 24);
    int v28 = *(char *)(v27 + 23);
    uint64_t v29 = *(void *)(v27 + 8);
    if (v28 >= 0) {
      uint64_t v30 = (char *)v27;
    }
    else {
      uint64_t v30 = *(char **)v27;
    }
    uint64_t v31 = *(unsigned __int8 *)(v27 + 23);
    if (v28 < 0) {
      uint64_t v31 = v29;
    }
    int v32 = *(char *)(a6 + 23);
    size_t v33 = v32 >= 0 ? (unsigned char *)a6 : *(unsigned char **)a6;
    uint64_t v34 = v32 >= 0 ? *(unsigned __int8 *)(a6 + 23) : *(void *)(a6 + 8);
    if (v34)
    {
      std::string::size_type v35 = &v33[v34];
      uint64_t v36 = v34 - 1;
      while (1)
      {
        uint64_t v37 = 0;
        while (v33[v37] == boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::short_weekday_format[v37])
        {
          uint64_t v38 = v37 + 1;
          if (v36 != v37)
          {
            BOOL v23 = v37++ == 1;
            if (!v23) {
              continue;
            }
          }
          uint64_t v39 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::short_weekday_format[v38];
          uint64_t v40 = &v33[v38];
          goto LABEL_48;
        }
        uint64_t v39 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::short_weekday_format[v37];
        uint64_t v40 = &v33[v37];
LABEL_48:
        if (v39 == "") {
          break;
        }
        ++v33;
        --v36;
        if (v33 == v35) {
          goto LABEL_53;
        }
      }
      if (v33 != v40)
      {
        v73.__locale_ = (std::locale::__imp *)"%a";
        uint64_t v74 = "";
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(a6, (uint64_t *)&v73, v30, &v30[v31], v33, v40, v30, &v30[v31]);
      }
    }
  }
LABEL_53:
  uint64_t v41 = a1[33];
  if (a1[34] != v41)
  {
    uint64_t v42 = v41 + 24 * *(int *)(a5 + 16);
    int v43 = *(char *)(v42 + 23);
    uint64_t v44 = *(void *)(v42 + 8);
    if (v43 >= 0) {
      int64_t v45 = (char *)v42;
    }
    else {
      int64_t v45 = *(char **)v42;
    }
    uint64_t v46 = *(unsigned __int8 *)(v42 + 23);
    if (v43 < 0) {
      uint64_t v46 = v44;
    }
    int v47 = *(char *)(a6 + 23);
    unint64_t v48 = v47 >= 0 ? (unsigned char *)a6 : *(unsigned char **)a6;
    uint64_t v49 = v47 >= 0 ? *(unsigned __int8 *)(a6 + 23) : *(void *)(a6 + 8);
    if (v49)
    {
      uint64_t v50 = &v48[v49];
      uint64_t v51 = v49 - 1;
      while (1)
      {
        uint64_t v52 = 0;
        while (v48[v52] == boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::long_month_format[v52])
        {
          uint64_t v53 = v52 + 1;
          if (v51 != v52)
          {
            BOOL v23 = v52++ == 1;
            if (!v23) {
              continue;
            }
          }
          uint64_t v54 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::long_month_format[v53];
          uint64_t v55 = &v48[v53];
          goto LABEL_74;
        }
        uint64_t v54 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::long_month_format[v52];
        uint64_t v55 = &v48[v52];
LABEL_74:
        if (v54 == "") {
          break;
        }
        ++v48;
        --v51;
        if (v48 == v50) {
          goto LABEL_79;
        }
      }
      if (v48 != v55)
      {
        v73.__locale_ = (std::locale::__imp *)"%B";
        uint64_t v74 = "";
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(a6, (uint64_t *)&v73, v45, &v45[v46], v48, v55, v45, &v45[v46]);
      }
    }
  }
LABEL_79:
  uint64_t v56 = a1[30];
  if (a1[31] != v56)
  {
    uint64_t v57 = v56 + 24 * *(int *)(a5 + 16);
    int v58 = *(char *)(v57 + 23);
    uint64_t v59 = *(void *)(v57 + 8);
    if (v58 >= 0) {
      uint64_t v60 = (char *)v57;
    }
    else {
      uint64_t v60 = *(char **)v57;
    }
    uint64_t v61 = *(unsigned __int8 *)(v57 + 23);
    if (v58 < 0) {
      uint64_t v61 = v59;
    }
    int v62 = *(char *)(a6 + 23);
    size_t v63 = v62 >= 0 ? (unsigned char *)a6 : *(unsigned char **)a6;
    uint64_t v64 = v62 >= 0 ? *(unsigned __int8 *)(a6 + 23) : *(void *)(a6 + 8);
    if (v64)
    {
      uint64_t v65 = &v63[v64];
      uint64_t v66 = v64 - 1;
      while (1)
      {
        uint64_t v67 = 0;
        while (v63[v67] == boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::short_month_format[v67])
        {
          uint64_t v68 = v67 + 1;
          if (v66 != v67)
          {
            BOOL v23 = v67++ == 1;
            if (!v23) {
              continue;
            }
          }
          long long v69 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::short_month_format[v68];
          long long v70 = &v63[v68];
          goto LABEL_100;
        }
        long long v69 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::short_month_format[v67];
        long long v70 = &v63[v67];
LABEL_100:
        if (v69 == "") {
          break;
        }
        ++v63;
        --v66;
        if (v63 == v65) {
          goto LABEL_105;
        }
      }
      if (v63 != v70)
      {
        v73.__locale_ = (std::locale::__imp *)"%b";
        uint64_t v74 = "";
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(a6, (uint64_t *)&v73, v60, &v60[v61], v63, v70, v60, &v60[v61]);
      }
    }
  }
LABEL_105:
  std::ios_base::getloc(this);
  std::locale::use_facet(&v73, MEMORY[0x263F8C160]);
  uint64_t v71 = std::time_put<char,std::ostreambuf_iterator<char>>::put();
  std::locale::~locale(&v73);
  return v71;
}

void sub_223EA3470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter(uint64_t a1, int a2, char *__s, char *a4, char *a5, char *a6)
{
  *(_DWORD *)a1 = a2;
  uint64_t v10 = (void *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), __s);
  std::string::basic_string[abi:ne180100]<0>(v10, a4);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 56), a5);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 80), a6);
  return a1;
}

void sub_223EA3504(_Unwind_Exception *exception_object)
{
  if (v2[79] < 0) {
    operator delete(*v4);
  }
  if (v2[55] < 0) {
    operator delete(*v3);
  }
  if (v2[31] < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string> *boost::date_time::special_values_formatter<char,std::ostreambuf_iterator<char>>::special_values_formatter(std::vector<std::string> *a1)
{
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<char const(*)[17],char const(*)[17],std::back_insert_iterator<std::vector<std::string>>>((int)&v3, "not-a-date-time", byte_2247186EB, a1);
  return a1;
}

void sub_223EA359C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<char const(*)[17],char const(*)[17],std::back_insert_iterator<std::vector<std::string>>>(int a1, char *__s, char *a3, std::vector<std::string> *a4)
{
  unint64_t v4 = __s;
  std::string::size_type v9 = a4;
  if (__s == a3) {
    return __s;
  }
  unint64_t v5 = a3;
  do
  {
    std::string::basic_string[abi:ne180100]<0>(__p, v4);
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v9, (long long *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    v4 += 17;
  }
  while (v4 != v5);
  return v5;
}

void sub_223EA3634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string> **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](std::vector<std::string> **a1, long long *a2)
{
  unint64_t v4 = *a1;
  std::vector<std::string>::pointer end = (*a1)->__end_;
  uint64_t v6 = *a1;
  value = v6->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&v6->__end_cap_;
  char v8 = value;
  if (end >= value)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v4->__begin_) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v4->__begin_) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v15) {
      int v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v15);
    }
    else {
      int v16 = 0;
    }
    char v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    long long v18 = *a2;
    v17->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v4, &__v);
    uint64_t v11 = v4->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    long long v10 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    uint64_t v11 = end + 1;
    v4->__end_ = end + 1;
  }
  v4->__end_ = v11;
  return a1;
}

void sub_223EA3784(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t boost::date_time::date_generator_formatter<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_generator_formatter(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<std::string>::reserve((std::vector<std::string> *)a1, 9uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "first");
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= v2)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(void *)a1) >> 3);
    unint64_t v6 = v5 + 1;
    if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *(void *)a1) >> 3);
    if (2 * v7 > v6) {
      unint64_t v6 = 2 * v7;
    }
    if (v7 >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v8 = v6;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v8) {
      std::string::size_type v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v8);
    }
    else {
      std::string::size_type v9 = 0;
    }
    long long v10 = v9 + v5;
    __v.__first_ = v9;
    __v.__begin_ = v10;
    __v.__end_cap_.__value_ = &v9[v8];
    long long v11 = *(_OWORD *)__p;
    v10->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    __p[1] = 0;
    std::string::size_type v112 = 0;
    __p[0] = 0;
    __v.__end_ = v10 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v12 = *(void *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v13 = SHIBYTE(v112);
    *(void *)(a1 + 8) = v12;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v4 = *(_OWORD *)__p;
    *(void *)(v3 + 16) = v112;
    *(_OWORD *)unint64_t v3 = v4;
    *(void *)(a1 + 8) = v3 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "second");
  unint64_t v15 = *(void *)(a1 + 8);
  unint64_t v14 = *(void *)(a1 + 16);
  if (v15 >= v14)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)a1) >> 3);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(void *)a1) >> 3);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0x555555555555555) {
      unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v20 = v18;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v20) {
      uint64_t v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v20);
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = v21 + v17;
    __v.__first_ = v21;
    __v.__begin_ = v22;
    __v.__end_cap_.__value_ = &v21[v20];
    long long v23 = *(_OWORD *)__p;
    v22->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
    __p[1] = 0;
    std::string::size_type v112 = 0;
    __p[0] = 0;
    __v.__end_ = v22 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v24 = *(void *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v25 = SHIBYTE(v112);
    *(void *)(a1 + 8) = v24;
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v16 = *(_OWORD *)__p;
    *(void *)(v15 + 16) = v112;
    *(_OWORD *)unint64_t v15 = v16;
    *(void *)(a1 + 8) = v15 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "third");
  unint64_t v27 = *(void *)(a1 + 8);
  unint64_t v26 = *(void *)(a1 + 16);
  if (v27 >= v26)
  {
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *(void *)a1) >> 3);
    unint64_t v30 = v29 + 1;
    if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(void *)a1) >> 3);
    if (2 * v31 > v30) {
      unint64_t v30 = 2 * v31;
    }
    if (v31 >= 0x555555555555555) {
      unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v32 = v30;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v32) {
      size_t v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v32);
    }
    else {
      size_t v33 = 0;
    }
    uint64_t v34 = v33 + v29;
    __v.__first_ = v33;
    __v.__begin_ = v34;
    __v.__end_cap_.__value_ = &v33[v32];
    long long v35 = *(_OWORD *)__p;
    v34->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
    __p[1] = 0;
    std::string::size_type v112 = 0;
    __p[0] = 0;
    __v.__end_ = v34 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v36 = *(void *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v37 = SHIBYTE(v112);
    *(void *)(a1 + 8) = v36;
    if (v37 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v28 = *(_OWORD *)__p;
    *(void *)(v27 + 16) = v112;
    *(_OWORD *)unint64_t v27 = v28;
    *(void *)(a1 + 8) = v27 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "fourth");
  unint64_t v39 = *(void *)(a1 + 8);
  unint64_t v38 = *(void *)(a1 + 16);
  if (v39 >= v38)
  {
    unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *(void *)a1) >> 3);
    unint64_t v42 = v41 + 1;
    if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *(void *)a1) >> 3);
    if (2 * v43 > v42) {
      unint64_t v42 = 2 * v43;
    }
    if (v43 >= 0x555555555555555) {
      unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v44 = v42;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v44) {
      int64_t v45 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v44);
    }
    else {
      int64_t v45 = 0;
    }
    uint64_t v46 = v45 + v41;
    __v.__first_ = v45;
    __v.__begin_ = v46;
    __v.__end_cap_.__value_ = &v45[v44];
    long long v47 = *(_OWORD *)__p;
    v46->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
    __p[1] = 0;
    std::string::size_type v112 = 0;
    __p[0] = 0;
    __v.__end_ = v46 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v48 = *(void *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v49 = SHIBYTE(v112);
    *(void *)(a1 + 8) = v48;
    if (v49 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v40 = *(_OWORD *)__p;
    *(void *)(v39 + 16) = v112;
    *(_OWORD *)unint64_t v39 = v40;
    *(void *)(a1 + 8) = v39 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "fifth");
  unint64_t v51 = *(void *)(a1 + 8);
  unint64_t v50 = *(void *)(a1 + 16);
  if (v51 >= v50)
  {
    unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(void *)a1) >> 3);
    unint64_t v54 = v53 + 1;
    if (v53 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *(void *)a1) >> 3);
    if (2 * v55 > v54) {
      unint64_t v54 = 2 * v55;
    }
    if (v55 >= 0x555555555555555) {
      unint64_t v56 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v56 = v54;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v56) {
      uint64_t v57 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v56);
    }
    else {
      uint64_t v57 = 0;
    }
    int v58 = v57 + v53;
    __v.__first_ = v57;
    __v.__begin_ = v58;
    __v.__end_cap_.__value_ = &v57[v56];
    long long v59 = *(_OWORD *)__p;
    v58->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
    __p[1] = 0;
    std::string::size_type v112 = 0;
    __p[0] = 0;
    __v.__end_ = v58 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v60 = *(void *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v61 = SHIBYTE(v112);
    *(void *)(a1 + 8) = v60;
    if (v61 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v52 = *(_OWORD *)__p;
    *(void *)(v51 + 16) = v112;
    *(_OWORD *)unint64_t v51 = v52;
    *(void *)(a1 + 8) = v51 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "last");
  unint64_t v63 = *(void *)(a1 + 8);
  unint64_t v62 = *(void *)(a1 + 16);
  if (v63 >= v62)
  {
    unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - *(void *)a1) >> 3);
    unint64_t v66 = v65 + 1;
    if (v65 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - *(void *)a1) >> 3);
    if (2 * v67 > v66) {
      unint64_t v66 = 2 * v67;
    }
    if (v67 >= 0x555555555555555) {
      unint64_t v68 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v68 = v66;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v68) {
      long long v69 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v68);
    }
    else {
      long long v69 = 0;
    }
    long long v70 = v69 + v65;
    __v.__first_ = v69;
    __v.__begin_ = v70;
    __v.__end_cap_.__value_ = &v69[v68];
    long long v71 = *(_OWORD *)__p;
    v70->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v71;
    __p[1] = 0;
    std::string::size_type v112 = 0;
    __p[0] = 0;
    __v.__end_ = v70 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v72 = *(void *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v73 = SHIBYTE(v112);
    *(void *)(a1 + 8) = v72;
    if (v73 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v64 = *(_OWORD *)__p;
    *(void *)(v63 + 16) = v112;
    *(_OWORD *)unint64_t v63 = v64;
    *(void *)(a1 + 8) = v63 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "before");
  unint64_t v75 = *(void *)(a1 + 8);
  unint64_t v74 = *(void *)(a1 + 16);
  if (v75 >= v74)
  {
    unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - *(void *)a1) >> 3);
    unint64_t v78 = v77 + 1;
    if (v77 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - *(void *)a1) >> 3);
    if (2 * v79 > v78) {
      unint64_t v78 = 2 * v79;
    }
    if (v79 >= 0x555555555555555) {
      unint64_t v80 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v80 = v78;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v80) {
      int64_t v81 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v80);
    }
    else {
      int64_t v81 = 0;
    }
    int64_t v82 = v81 + v77;
    __v.__first_ = v81;
    __v.__begin_ = v82;
    __v.__end_cap_.__value_ = &v81[v80];
    long long v83 = *(_OWORD *)__p;
    v82->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v83;
    __p[1] = 0;
    std::string::size_type v112 = 0;
    __p[0] = 0;
    __v.__end_ = v82 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v84 = *(void *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v85 = SHIBYTE(v112);
    *(void *)(a1 + 8) = v84;
    if (v85 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v76 = *(_OWORD *)__p;
    *(void *)(v75 + 16) = v112;
    *(_OWORD *)unint64_t v75 = v76;
    *(void *)(a1 + 8) = v75 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "after");
  unint64_t v87 = *(void *)(a1 + 8);
  unint64_t v86 = *(void *)(a1 + 16);
  if (v87 >= v86)
  {
    unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - *(void *)a1) >> 3);
    unint64_t v90 = v89 + 1;
    if (v89 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - *(void *)a1) >> 3);
    if (2 * v91 > v90) {
      unint64_t v90 = 2 * v91;
    }
    if (v91 >= 0x555555555555555) {
      unint64_t v92 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v92 = v90;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v92) {
      uint64_t v93 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v92);
    }
    else {
      uint64_t v93 = 0;
    }
    unint64_t v94 = v93 + v89;
    __v.__first_ = v93;
    __v.__begin_ = v94;
    __v.__end_cap_.__value_ = &v93[v92];
    long long v95 = *(_OWORD *)__p;
    v94->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v95;
    __p[1] = 0;
    std::string::size_type v112 = 0;
    __p[0] = 0;
    __v.__end_ = v94 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v96 = *(void *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v97 = SHIBYTE(v112);
    *(void *)(a1 + 8) = v96;
    if (v97 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v88 = *(_OWORD *)__p;
    *(void *)(v87 + 16) = v112;
    *(_OWORD *)unint64_t v87 = v88;
    *(void *)(a1 + 8) = v87 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "of");
  unint64_t v99 = *(void *)(a1 + 8);
  unint64_t v98 = *(void *)(a1 + 16);
  if (v99 >= v98)
  {
    unint64_t v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - *(void *)a1) >> 3);
    unint64_t v102 = v101 + 1;
    if (v101 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - *(void *)a1) >> 3);
    if (2 * v103 > v102) {
      unint64_t v102 = 2 * v103;
    }
    if (v103 >= 0x555555555555555) {
      unint64_t v104 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v104 = v102;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v104) {
      int64_t v105 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v104);
    }
    else {
      int64_t v105 = 0;
    }
    int64_t v106 = v105 + v101;
    __v.__first_ = v105;
    __v.__begin_ = v106;
    __v.__end_cap_.__value_ = &v105[v104];
    long long v107 = *(_OWORD *)__p;
    v106->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v106->__r_.__value_.__l.__data_ = v107;
    __p[1] = 0;
    std::string::size_type v112 = 0;
    __p[0] = 0;
    __v.__end_ = v106 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    uint64_t v108 = *(void *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v109 = SHIBYTE(v112);
    *(void *)(a1 + 8) = v108;
    if (v109 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v100 = *(_OWORD *)__p;
    *(void *)(v99 + 16) = v112;
    *(_OWORD *)unint64_t v99 = v100;
    *(void *)(a1 + 8) = v99 + 24;
  }
  return a1;
}

void sub_223EA40FC(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_223EA4240(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::set_iso_format()
{
}

void boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::set_iso_extended_format()
{
}

uint64_t boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  unint64_t v7 = (std::string *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_223EA43AC(_Unwind_Exception *exception_object)
{
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *boost::date_time::special_values_formatter<char,std::ostreambuf_iterator<char>>::put_special(void *a1, void *a2, unsigned int *a3)
{
  unint64_t v4 = *a3;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) > v4)
  {
    long long v5 = (unsigned __int8 *)(*a1 + 24 * v4);
    if ((char)v5[23] < 0)
    {
      unint64_t v7 = v5;
      long long v5 = *(unsigned __int8 **)v5;
      uint64_t v6 = *((void *)v7 + 1);
    }
    else
    {
      uint64_t v6 = v5[23];
    }
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>,std::ostreambuf_iterator<char>,0>(v5, &v5[v6], a2);
  }
  return a2;
}

unsigned __int8 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>,std::ostreambuf_iterator<char>,0>(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  unint64_t v3 = a1;
  unint64_t v7 = a3;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v4 = a2;
  do
  {
    unsigned __int8 v5 = *v3++;
    std::ostreambuf_iterator<char>::operator=[abi:ne180100](&v7, v5);
  }
  while (v3 != v4);
  return v4;
}

void **std::ostreambuf_iterator<char>::operator=[abi:ne180100](void **a1, unsigned __int8 a2)
{
  unint64_t v3 = *a1;
  if (v3)
  {
    unint64_t v4 = (unsigned __int8 *)v3[6];
    if (v4 == (unsigned __int8 *)v3[7])
    {
      if ((*(unsigned int (**)(void *, void))(*v3 + 104))(v3, a2) == -1) {
        *a1 = 0;
      }
    }
    else
    {
      v3[6] = v4 + 1;
      *unint64_t v4 = a2;
    }
  }
  return a1;
}

uint64_t boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::put(uint64_t a1, boost::gregorian::date *a2, uint64_t a3, uint64_t a4, boost::gregorian *this)
{
  if (*(_DWORD *)this != 0 && *(_DWORD *)this < 0xFFFFFFFE)
  {
    boost::gregorian::to_tm(this, (uint64_t)v13);
    if (*(char *)(a1 + 39) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
    }
    else {
      std::string __p = *(std::string *)(a1 + 16);
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t, boost::gregorian::date *, uint64_t, uint64_t, unsigned char *, std::string *))(*(void *)a1 + 48))(a1, a2, a3, a4, v13, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v11;
  }
  else
  {
    std::string::size_type v9 = *(uint64_t (**)(void))(*(void *)a1 + 40);
    return v9();
  }
}

void sub_223EA4694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::gregorian::to_tm@<X0>(boost::gregorian *this@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)this == 0 || *(_DWORD *)this >= 0xFFFFFFFE)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "tm unable to handle ");
    unsigned int v7 = *(_DWORD *)this + 2;
    if (v7 >= 3) {
      long long v8 = "a special date value";
    }
    else {
      long long v8 = off_2646D6C08[v7];
    }
    std::string::append(&v10, v8);
    std::logic_error::logic_error(&v9, &v10);
    v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    boost::throw_exception<std::out_of_range>(&v9);
  }
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  unint64_t v5 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year_month_day(this);
  *(_DWORD *)(a2 + 16) = WORD1(v5) - 1;
  *(_DWORD *)(a2 + 2CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = (unsigned __int16)v5 - 1900;
  *(_DWORD *)(a2 + 12) = WORD2(v5);
  *(_DWORD *)(a2 + 24) = (unsigned __int16)boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::day_of_week(this);
  uint64_t result = boost::gregorian::date::day_of_year(this);
  *(_DWORD *)(a2 + 28) = (unsigned __int16)result - 1;
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

void sub_223EA47C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void boost::throw_exception<std::out_of_range>(const std::logic_error *a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_26D757098;
  unint64_t v4 = &unk_26D7570C0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_223EA48B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11)
{
  a11 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::logic_error::~logic_error(&a10);
  if (v13) {
    __cxa_free_exception(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_facet(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D758000;
  *(void *)(a1 + 8) = a2 - 1;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "%Y-%b-%d");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 40), "%b");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 64), "%a");
  boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter(a1 + 88, 1, "/", "[", ")", "]");
  boost::date_time::date_generator_formatter<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_generator_formatter(a1 + 192);
  boost::date_time::special_values_formatter<char,std::ostreambuf_iterator<char>>::special_values_formatter((std::vector<std::string> *)(a1 + 216));
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 32CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 24CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  return a1;
}

void sub_223EA49E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  long long v16 = v13;
  a10 = v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::~period_formatter(v15);
  if (*(char *)(v10 + 87) < 0) {
    operator delete(*v14);
  }
  if (*(char *)(v10 + 63) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v10 + 39) < 0) {
    operator delete(*v11);
  }
  std::__shared_count::~__shared_count((std::__shared_count *)v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_26D7542E8;
  unint64_t v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_26D7581C0;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = &unk_26D7580D8;
  *(void *)(a1 + 16) = &unk_26D758110;
  *(void *)(a1 + 56) = &unk_26D758148;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_26D7581C0;
  unint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26D754388;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D7580D8;
  *(void *)(a1 + 16) = &unk_26D758110;
  *(void *)(a1 + 56) = &unk_26D758148;
  return a1;
}

void sub_223EA4C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::clone()
{
}

void sub_223EA4D7C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::clone_impl((uint64_t)exception, a1);
}

void sub_223EA4DE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::logic_error *)(a1 - 2);
  *a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::logic_error::~logic_error(v1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 2) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::logic_error::~logic_error((std::logic_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::~clone_impl((uint64_t)a1 + *(void *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>::~error_info_injector(uint64_t a1)
{
}

void boost::local_time::ambiguous_result::~ambiguous_result(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x22A614FA0);
}

void sub_223EA50EC(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::local_time::ambiguous_result::ambiguous_result(std::logic_error *a1)
{
  std::operator+<char>();
  std::logic_error::logic_error(a1, &v3);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  a1->__vftable = (std::logic_error_vtbl *)&unk_26D7581C0;
  return a1;
}

void sub_223EA5174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_26D7542E8;
  unint64_t v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_26D758360;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_26D754388;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = &unk_26D758278;
  *(void *)(a1 + 16) = &unk_26D7582B0;
  *(void *)(a1 + 56) = &unk_26D7582E8;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_26D7542E8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_26D758360;
  unint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_26D754388;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_26D758278;
  *(void *)(a1 + 16) = &unk_26D7582B0;
  *(void *)(a1 + 56) = &unk_26D7582E8;
  return a1;
}

void sub_223EA533C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::~clone_impl(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::clone()
{
}

void sub_223EA53D8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::clone_impl((uint64_t)exception, a1);
}

void sub_223EA5444(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::rethrow(void *a1)
{
}

void sub_223EA55B0(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::local_time::time_label_invalid::time_label_invalid(std::logic_error *a1)
{
  std::operator+<char>();
  std::logic_error::logic_error(a1, &v3);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  a1->__vftable = (std::logic_error_vtbl *)&unk_26D758360;
  return a1;
}

void sub_223EA5638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator-=(uint64_t *a1, uint64_t *a2)
{
  unsigned int v9 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(a1);
  unint64_t v4 = *a1;
  unint64_t v5 = 0x7FFFFFFFFFFFFFFELL;
  if (*a1 == 0x8000000000000000) {
    unint64_t v5 = 0x8000000000000000;
  }
  if (v4 != 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v4 = v5;
  }
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) > 2) {
    unint64_t v4 = *a1 % 86400000000;
  }
  unint64_t v7 = v4;
  boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>>::operator-(&v7, a2, &v8);
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v10, &v9, (uint64_t *)&v8);
  uint64_t result = v10;
  *a1 = v10;
  return result;
}

void turi::flexible_type_impl::ndarray<double>::print(void *a1, void *a2)
{
  unint64_t v4 = (uint64_t)(a1[3] - a1[2]) >> 3;
  uint64_t v32 = 0;
  std::vector<unsigned long>::vector(&v33, v4, &v32);
  long long v6 = (uint64_t *)a1[2];
  unint64_t v5 = (uint64_t *)a1[3];
  if (v5 == v6) {
    goto LABEL_6;
  }
  if (!*a1) {
    goto LABEL_6;
  }
  uint64_t v7 = 1;
  do
  {
    uint64_t v8 = *v6++;
    v7 *= v8;
  }
  while (v6 != v5);
  if (!v7) {
LABEL_6:
  }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[]", 2);
  unsigned int v9 = v34;
  if (v34 == v33)
  {
    uint64_t v11 = v34;
  }
  else
  {
    unint64_t v10 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
      ++v10;
      unsigned int v9 = v33;
      uint64_t v11 = v34;
    }
    while (v10 < v34 - v33);
  }
  while (1)
  {
    uint64_t v12 = 0;
    if (v11 != v9)
    {
      unint64_t v13 = v11 - v9;
      unint64_t v14 = (uint64_t *)a1[5];
      if (v13 <= 1) {
        unint64_t v13 = 1;
      }
      do
      {
        uint64_t v16 = *v9++;
        uint64_t v15 = v16;
        uint64_t v17 = *v14++;
        v12 += v17 * v15;
        --v13;
      }
      while (v13);
    }
    std::ostream::operator<<();
    unsigned int v9 = v33;
    uint64_t v11 = v34;
    unint64_t v18 = v34 - v33;
    unint64_t v19 = v18 - 1;
    if ((char *)v34 - (char *)v33 < 1)
    {
      unint64_t v22 = v34 - v33;
      goto LABEL_23;
    }
    uint64_t v20 = a1[2];
    unint64_t v21 = v33[v19] + 1;
    v33[v19] = v21;
    unint64_t v22 = v18;
    if (v21 >= *(void *)(v20 + 8 * v19)) {
      break;
    }
LABEL_23:
    if ((v19 & 0x8000000000000000) != 0 || !v22) {
      goto LABEL_34;
    }
    unint64_t v28 = v22;
    if (v22 < v18)
    {
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
        ++v28;
        unsigned int v9 = v33;
        uint64_t v11 = v34;
      }
      while (v28 < v34 - v33);
      unint64_t v18 = v34 - v33;
    }
    if (v22 < v18)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)",", 1);
      unsigned int v9 = v33;
      uint64_t v11 = v34;
    }
    uint64_t v29 = (char *)v11 - (char *)v9;
    unint64_t v30 = v22;
    if (v22 < v11 - v9)
    {
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
        ++v30;
        unsigned int v9 = v33;
        uint64_t v11 = v34;
        uint64_t v29 = (char *)v34 - (char *)v33;
      }
      while (v30 < v34 - v33);
    }
    if (v22 >= v29 >> 3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)",", 1);
      unsigned int v9 = v33;
      uint64_t v11 = v34;
    }
  }
  long long v23 = (unint64_t *)&v9[v18 - 2];
  uint64_t v24 = v20 - 16;
  unint64_t v25 = v18;
  while (1)
  {
    unint64_t v22 = v25 - 1;
    v23[1] = 0;
    if ((uint64_t)(v25 - 1) <= 0) {
      break;
    }
    unint64_t v26 = *v23 + 1;
    *v23-- = v26;
    unint64_t v27 = *(void *)(v24 + 8 * v25--);
    if (v26 < v27)
    {
      unint64_t v19 = v22 - 1;
      goto LABEL_23;
    }
  }
LABEL_34:
  if (v11 != v9)
  {
    unint64_t v31 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
      ++v31;
      uint64_t v11 = v33;
    }
    while (v31 < v34 - v33);
  }
  if (v11)
  {
    uint64_t v34 = v11;
    operator delete(v11);
  }
}

void sub_223EA59C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](a1, a2);
    long long v6 = (unsigned char *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_223EA5A5C(_Unwind_Exception *exception_object)
{
  std::string v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    size_t v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_multi<std::pair<turi::flexible_type,turi::flexible_type> const&>((void *)a1, v5);
      v5 += 4;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_223EA5ADC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_multi<std::pair<turi::flexible_type,turi::flexible_type> const&>(void *a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__construct_node<std::pair<turi::flexible_type,turi::flexible_type> const&>((uint64_t)a1, a2, (uint64_t)v5);
  uint64_t inserted = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_223EA5B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__construct_node<std::pair<turi::flexible_type,turi::flexible_type> const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  long long v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  void *v6 = 0;
  v6[1] = 0;
  uint64_t v7 = (unsigned __int8 *)std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>((uint64_t)(v6 + 2), a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(v7);
  v6[1] = result;
  return result;
}

void sub_223EA5BBC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi(void *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  unint64_t v5 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(a2 + 16));
  *(void *)(a2 + 8) = v5;
  uint64_t inserted = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi_perform(a1, (void *)a2, inserted);
  return a2;
}

uint64_t std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>(uint64_t result, uint64_t *a2)
{
  *(void *)unint64_t result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(result + 12) = 0;
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = *a2;
    *(void *)(result + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)unint64_t result = v2;
    LODWORD(v2) = *((unsigned __int8 *)a2 + 12);
    *(unsigned char *)(result + 12) = v2;
    BOOL v3 = v2 > 9;
    int v4 = (1 << v2) & 0x33C;
    if (!v3 && v4 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)result, 1uLL);
    }
  }
  *(void *)(result + 16) = 0;
  long long v6 = (atomic_ullong *volatile *)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  *(unsigned char *)(result + 28) = 0;
  if (a2 != (uint64_t *)result)
  {
    uint64_t v7 = (atomic_ullong *)a2[2];
    *(void *)(result + 21) = *(uint64_t *)((char *)a2 + 21);
    atomic_ullong *volatile *v6 = v7;
    unsigned int v8 = *((unsigned __int8 *)a2 + 28);
    *(unsigned char *)(result + 28) = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 32;
  float v7 = *(float *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    BOOL v10 = 1;
    if (v8 >= 3) {
      BOOL v10 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v8);
    unint64_t v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__rehash<false>(a1, v13);
    unint64_t v8 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = a2;
    if (v8 <= a2) {
      unint64_t v16 = a2 % v8;
    }
  }
  else
  {
    unint64_t v16 = (v8 - 1) & a2;
  }
  uint64_t v17 = *(void **)(*(void *)a1 + 8 * v16);
  if (v17)
  {
    unint64_t v18 = (void *)*v17;
    if (*v17)
    {
      int v19 = 0;
      do
      {
        unint64_t v20 = v18[1];
        if (v15 > 1)
        {
          unint64_t v21 = v18[1];
          if (v20 >= v8) {
            unint64_t v21 = v20 % v8;
          }
        }
        else
        {
          unint64_t v21 = v20 & (v8 - 1);
        }
        if (v21 != v16) {
          break;
        }
        int v22 = v20 == a2 ? std::equal_to<turi::flexible_type>::operator()[abi:ne180100](v6, v18 + 2, a3) : 0;
        if (v19 & (v22 ^ 1)) {
          break;
        }
        v19 |= v22;
        uint64_t v17 = (void *)*v17;
        unint64_t v18 = (void *)*v17;
      }
      while (*v17);
    }
  }
  return v17;
}

void *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v12 = (void *)*v7;
      if (*v7)
      {
        unint64_t v18 = v9.u32[0];
        do
        {
          unint64_t v13 = v12[1];
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            uint64_t v7 = v12;
          }
          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            uint8x8_t v14 = (void *)*v12;
            if (*v12)
            {
              unint64_t v15 = v12;
              while (1)
              {
                int v16 = std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, v12 + 2, v14 + 2);
                uint64_t v17 = (void *)*v15;
                if (!v16) {
                  break;
                }
                uint8x8_t v14 = (void *)*v17;
                unint64_t v15 = (void *)*v15;
                if (!*v17) {
                  goto LABEL_32;
                }
              }
              uint8x8_t v14 = (void *)*v15;
              uint64_t v17 = v15;
LABEL_32:
              unint64_t v10 = v18;
            }
            else
            {
              uint64_t v17 = v12;
            }
            void *v7 = v14;
            *uint64_t v17 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = v12;
            unint64_t v8 = v13;
          }
          unint64_t v12 = (void *)*v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<turi::flexible_type const,turi::flexible_type>::~pair((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::pair<turi::flexible_type const,turi::flexible_type>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          int8x8_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v5 = *(void **)(a1 + 16);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          int8x8_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        if (v7)
        {
          unint64_t v27 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        if (v7)
        {
          unint64_t v27 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_18:
          int8x8_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 16);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          int8x8_t v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v10 = *(void **)(a1 + 16);
        if (v10)
        {
          unint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          unint64_t v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          unint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          int8x8_t v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v14 + 31) < 0) {
            operator delete((void *)v14[1]);
          }
          atomic_ullong *volatile v15 = v14;
          uint64_t v16 = 0x1012C404EF22A49;
          goto LABEL_64;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v18 = (void *)v17[1];
          if (v18)
          {
            uint64_t v17[2] = (atomic_ullong)v18;
            operator delete(v18);
          }
          atomic_ullong *volatile v15 = v17;
          uint64_t v16 = 0x1080C409938AC02;
          goto LABEL_64;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v27 = (void **)(v19 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
          goto LABEL_50;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v27 = (void **)(v19 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_50:
          atomic_ullong *volatile v15 = v19;
          uint64_t v16 = 0x1020C405E66F15BLL;
          goto LABEL_64;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
          atomic_ullong *volatile v15 = v20;
          unsigned int v21 = -235920773;
          goto LABEL_63;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          long long v23 = (void *)v22[6];
          if (v23)
          {
            v22[7] = (atomic_ullong)v23;
            operator delete(v23);
          }
          uint64_t v24 = (void *)v22[3];
          if (v24)
          {
            v22[4] = (atomic_ullong)v24;
            operator delete(v24);
          }
          unint64_t v25 = (std::__shared_weak_count *)v22[2];
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
          atomic_ullong *volatile v15 = v22;
          unsigned int v21 = 2071181815;
LABEL_63:
          uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_64:
          MEMORY[0x22A614FA0](v15, v16);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int8x8_t v3 = (void *)*v2;
      std::pair<turi::flexible_type const,turi::flexible_type>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__equal_range_multi<turi::flexible_type>(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::find<turi::flexible_type>(a1, a2);
  unint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = (uint64_t)(a1 + 4);
    uint64_t v7 = v4;
    do
      uint64_t v7 = *(unsigned __int8 **)v7;
    while (v7 && (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](v6, v7 + 16, (uint64_t)a2) & 1) != 0);
  }
  return v5;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::find<turi::flexible_type>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](v12, v11 + 16, (uint64_t)a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__is_permutation[abi:ne180100]<std::_ClassicAlgPolicy,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__equal_to &>(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  int8x8_t v5 = a1;
  if (a1 != a2)
  {
    while (std::operator==[abi:ne180100]<turi::flexible_type const,turi::flexible_type,turi::flexible_type const,turi::flexible_type>(v5 + 16, (uint64_t)(a3 + 2)))
    {
      int8x8_t v5 = *(unsigned __int8 **)v5;
      a3 = (void *)*a3;
      if (v5 == a2) {
        return 1;
      }
    }
  }
  if (v5 == a2) {
    return 1;
  }
  unint64_t v6 = 1;
  uint8x8_t v7 = v5;
  do
  {
    uint8x8_t v7 = *(unsigned __int8 **)v7;
    ++v6;
  }
  while (v7 != a2);
  if (v6 == 2) {
    return 0;
  }
  unint64_t v9 = a3;
  do
  {
    unint64_t v9 = (void *)*v9;
    --v6;
  }
  while (v6 > 1);
  return std::__is_permutation_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__identity,std::__identity,std::__equal_to &>(v5, a2, a3, v9);
}

uint64_t std::__is_permutation_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__identity,std::__identity,std::__equal_to &>(unsigned __int8 *a1, unsigned __int8 *a2, void *a3, void *a4)
{
  if (a1 == a2) {
    return 1;
  }
  unint64_t v8 = a1;
  while (1)
  {
    if (v8 == a1)
    {
      unint64_t v9 = a1;
    }
    else
    {
      unint64_t v9 = a1;
      while ((std::operator==[abi:ne180100]<turi::flexible_type const,turi::flexible_type,turi::flexible_type const,turi::flexible_type>(v9 + 16, (uint64_t)(v8 + 16)) & 1) == 0)
      {
        unint64_t v9 = *(unsigned __int8 **)v9;
        if (v9 == v8) {
          goto LABEL_10;
        }
      }
    }
    if (v9 != v8) {
      goto LABEL_18;
    }
LABEL_10:
    if (a3 == a4) {
      return 0;
    }
    uint64_t v10 = 0;
    unint64_t v11 = a3;
    do
    {
      v10 += std::operator==[abi:ne180100]<turi::flexible_type const,turi::flexible_type,turi::flexible_type const,turi::flexible_type>(v8 + 16, (uint64_t)(v11 + 2));
      unint64_t v11 = (void *)*v11;
    }
    while (v11 != a4);
    if (!v10) {
      return 0;
    }
    uint64_t v12 = *(unsigned __int8 **)v8;
    uint64_t v13 = 1;
    while (v12 != a2)
    {
      v13 += std::operator==[abi:ne180100]<turi::flexible_type const,turi::flexible_type,turi::flexible_type const,turi::flexible_type>(v8 + 16, (uint64_t)(v12 + 16));
      uint64_t v12 = *(unsigned __int8 **)v12;
    }
    if (v13 != v10) {
      return 0;
    }
LABEL_18:
    unint64_t v8 = *(unsigned __int8 **)v8;
    if (v8 == a2) {
      return 1;
    }
  }
}

uint64_t std::operator==[abi:ne180100]<turi::flexible_type const,turi::flexible_type,turi::flexible_type const,turi::flexible_type>(unsigned __int8 *a1, uint64_t a2)
{
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      switch(a1[12])
      {
        case 0u:
          if (*(void *)a1 == *(void *)a2) {
            goto LABEL_94;
          }
          return 0;
        case 1u:
          double v29 = *(double *)a1;
          uint64_t v52 = *(void *)a2;
          goto LABEL_88;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (*(void *)a2 == (uint64_t)(*(void *)a1 << 8) >> 8 && !*((_DWORD *)a1 + 2)) {
            goto LABEL_94;
          }
          return 0;
        default:
          goto LABEL_215;
      }
    case 1:
      switch(a1[12])
      {
        case 0u:
          double v29 = *(double *)a2;
          uint64_t v52 = *(void *)a1;
LABEL_88:
          double v36 = (double)v52;
          goto LABEL_89;
        case 1u:
          double v29 = *(double *)a1;
          double v36 = *(double *)a2;
          goto LABEL_89;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          double v67 = vabdd_f64((double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a1 << 8) >> 8), *(double *)a2);
          goto LABEL_93;
        default:
          goto LABEL_215;
      }
    case 2:
      unsigned int v46 = a1[12];
      BOOL v47 = v46 - 3 >= 7 && v46 >= 2;
      if (!v47) {
        return 0;
      }
      if (v46 != 2) {
        goto LABEL_215;
      }
      double v48 = *(double *)a2;
      double v49 = *(double *)a1;
      char v50 = *(unsigned char *)(*(void *)a1 + 31);
      if (v50 < 0) {
        size_t v51 = *(void *)(*(void *)&v49 + 16);
      }
      else {
        size_t v51 = *(unsigned __int8 *)(*(void *)a1 + 31);
      }
      if (*(char *)(*(void *)&v48 + 31) < 0) {
        uint64_t v122 = *(void *)(*(void *)&v48 + 16);
      }
      else {
        uint64_t v122 = *(unsigned __int8 *)(*(void *)&v48 + 31);
      }
      if (v51 != v122) {
        return 0;
      }
      std::string::size_type v123 = (unsigned __int8 *)(*(void *)&v49 + 8);
      if (v50 < 0) {
        std::string::size_type v123 = *(unsigned __int8 **)v123;
      }
      char v124 = (unsigned __int8 *)(*(void *)&v48 + 8);
      if ((*(unsigned char *)(*(void *)&v48 + 31) & 0x80) != 0) {
        char v124 = *(unsigned __int8 **)v124;
      }
      if (v50 < 0)
      {
        if (memcmp(v123, v124, v51)) {
          return 0;
        }
      }
      else
      {
        if (!v51) {
          goto LABEL_94;
        }
        do
        {
          if (*v123 != *v124) {
            return 0;
          }
          ++v123;
          ++v124;
          --v51;
        }
        while (v51);
      }
      goto LABEL_94;
    case 3:
      unsigned int v53 = a1[12];
      if (v53 > 9) {
        goto LABEL_215;
      }
      if (v53 != 3) {
        return 0;
      }
      unint64_t v54 = *(double **)(*(void *)a1 + 8);
      unint64_t v55 = *(double **)(*(void *)a1 + 16);
      unint64_t v56 = v55 - v54;
      uint64_t v57 = *(double **)(*(void *)a2 + 8);
      if (v56 != (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v57) >> 3) {
        return 0;
      }
      if (v55 == v54) {
        goto LABEL_94;
      }
      if (v56 <= 1) {
        unint64_t v56 = 1;
      }
      while (*v54 == *v57)
      {
        ++v54;
        ++v57;
        if (!--v56) {
          goto LABEL_94;
        }
      }
      return 0;
    case 4:
      uint64_t v4 = *(void *)a2 + 8;
      std::string __p = &v136;
      int64_t v139 = (uint64_t *)v4;
      unsigned int v5 = a1[12];
      if (v5 > 9) {
        goto LABEL_215;
      }
      if (v5 == 4
        && (turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::approx_equality_operator,std::vector<turi::flexible_type>>::operator()<std::vector<turi::flexible_type> const>((uint64_t)&__p, (uint64_t *)(*(void *)a1 + 8)) & 1) != 0)
      {
        goto LABEL_94;
      }
      return 0;
    case 5:
      unsigned int v59 = a1[12];
      if (v59 > 9) {
        goto LABEL_215;
      }
      if (v59 == 5)
      {
        double v60 = *(double *)a2;
        int v61 = *(uint64_t **)(*(void *)a1 + 8);
        unint64_t v62 = *(uint64_t **)(*(void *)a1 + 16);
        if ((char *)v62 - (char *)v61 == *(void *)(*(void *)a2 + 16) - *(void *)(*(void *)a2 + 8))
        {
          std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)&__p, v61, v62);
          std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)v137, *(uint64_t **)(*(void *)&v60 + 8), *(uint64_t **)(*(void *)&v60 + 16));
          char v63 = std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::flexible_type>>>(&__p, v137);
          std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v137);
          std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&__p);
          if (v63) {
            goto LABEL_94;
          }
        }
      }
      return 0;
    case 6:
      switch(a1[12])
      {
        case 0u:
          if (*(void *)a1 == (uint64_t)(*(void *)a2 << 8) >> 8 && !*(_DWORD *)(a2 + 8)) {
            goto LABEL_94;
          }
          return 0;
        case 1u:
          double v67 = vabdd_f64(*(double *)a1, (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8));
LABEL_93:
          if (v67 < 0.0000005) {
            goto LABEL_94;
          }
          return 0;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (((*(void *)a2 ^ *(void *)a1) & 0xFFFFFFFFFFFFFFLL) == 0 && *((_DWORD *)a1 + 2) == *(_DWORD *)(a2 + 8)) {
            goto LABEL_94;
          }
          return 0;
        default:
          goto LABEL_215;
      }
    case 7:
      unsigned int v58 = a1[12];
      if (v58 < 7 || v58 - 8 < 2) {
        return 0;
      }
      if (v58 != 7) {
        goto LABEL_215;
      }
      goto LABEL_94;
    case 8:
      unsigned int v64 = a1[12];
      if (v64 < 8) {
        return 0;
      }
      if (v64 != 8)
      {
        if (v64 != 9) {
LABEL_215:
        }
          turi::flexible_type_fail(BOOL)::$_0::operator()();
        return 0;
      }
      if (!turi::image_type::operator==(*(void *)a1 + 8, *(void *)a2 + 8)) {
        return 0;
      }
      goto LABEL_94;
    case 9:
      unsigned int v6 = a1[12];
      if (v6 < 9) {
        return 0;
      }
      if (v6 != 9) {
        goto LABEL_215;
      }
      double v7 = *(double *)a2;
      unint64_t v8 = *(void **)a1;
      if (*(void *)a2 == *(void *)a1) {
        goto LABEL_94;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v8 + 1), *(void *)&v7 + 8)) {
        return 0;
      }
      uint64_t v10 = (char *)v8[3];
      unint64_t v9 = (char *)v8[4];
      uint64_t v11 = v9 - v10;
      if (v9 == v10) {
        goto LABEL_94;
      }
      if (!v8[1]) {
        goto LABEL_94;
      }
      uint64_t v12 = 1;
      do
      {
        uint64_t v13 = *(void *)v10;
        v10 += 8;
        v12 *= v13;
      }
      while (v10 != v9);
      if (!v12) {
        goto LABEL_94;
      }
      v137[0] = 0;
      std::vector<unsigned long>::vector(&__p, v11 >> 3, v137);
      atomic_ullong *volatile v14 = (uint64_t *)__p;
      atomic_ullong *volatile v15 = v139;
      uint64_t v16 = **(void **)(*(void *)&v7 + 8);
      uint64_t v17 = (char *)v139 - (unsigned char *)__p;
      unint64_t v18 = ((char *)v139 - (unsigned char *)__p) >> 3;
      unint64_t v19 = v18 - 1;
      if (v18 <= 1) {
        uint64_t v20 = 1;
      }
      else {
        uint64_t v20 = ((char *)v139 - (unsigned char *)__p) >> 3;
      }
      break;
    default:
      goto LABEL_215;
  }
  do
  {
    if (v15 == v14)
    {
      uint64_t v28 = 0;
      double v29 = *(double *)(*(void *)v8[1] + 8 * v8[9]);
    }
    else
    {
      uint64_t v21 = 0;
      atomic_ullong *volatile v22 = (uint64_t *)v8[6];
      long long v23 = v14;
      uint64_t v24 = v20;
      do
      {
        uint64_t v26 = *v23++;
        uint64_t v25 = v26;
        uint64_t v27 = *v22++;
        v21 += v27 * v25;
        --v24;
      }
      while (v24);
      uint64_t v28 = 0;
      double v29 = *(double *)(*(void *)v8[1] + 8 * (v8[9] + v21));
      unint64_t v30 = *(uint64_t **)(*(void *)&v7 + 48);
      unint64_t v31 = v14;
      uint64_t v32 = v20;
      do
      {
        uint64_t v34 = *v31++;
        uint64_t v33 = v34;
        uint64_t v35 = *v30++;
        v28 += v35 * v33;
        --v32;
      }
      while (v32);
    }
    double v36 = *(double *)(v16 + 8 * (*(void *)(*(void *)&v7 + 72) + v28));
    if (v29 != v36) {
      break;
    }
    uint64_t v37 = v18;
    uint64_t v38 = v18 - 1;
    if (v17 >= 1)
    {
      uint64_t v39 = v8[3];
      unint64_t v40 = v14[v19] + 1;
      v14[v19] = v40;
      unint64_t v41 = (v17 & 0xFFFFFFFFFFFFFFF8) - 16;
      uint64_t v38 = v18 - 1;
      if (v40 >= *(void *)(v39 + 8 * v19))
      {
        while (1)
        {
          *(uint64_t *)((char *)v14 + v41 + 8) = 0;
          if (v38 <= 0) {
            break;
          }
          --v38;
          unint64_t v42 = *(uint64_t *)((char *)v14 + v41) + 1;
          *(uint64_t *)((char *)v14 + v41) = v42;
          unint64_t v43 = *(void *)(v39 + v41);
          v41 -= 8;
          if (v42 < v43)
          {
            uint64_t v37 = 1;
            goto LABEL_35;
          }
        }
        int64_t v139 = v14;
        operator delete(v14);
        goto LABEL_94;
      }
      uint64_t v37 = 1;
      uint64_t v38 = v18 - 1;
    }
LABEL_35:
    ;
  }
  while ((v38 & 0x8000000000000000) == 0 && v37);
  if (v14)
  {
    int64_t v139 = v14;
    double v44 = v29;
    double v45 = v36;
    operator delete(v14);
    if (v44 != v45) {
      return 0;
    }
  }
  else
  {
LABEL_89:
    if (v29 != v36) {
      return 0;
    }
  }
LABEL_94:
  switch(*(unsigned char *)(a2 + 28))
  {
    case 0:
      uint64_t v65 = 0;
      switch(a1[28])
      {
        case 0u:
          return *((void *)a1 + 2) == *(void *)(a2 + 16);
        case 1u:
          double v112 = *((double *)a1 + 2);
          uint64_t v113 = *(void *)(a2 + 16);
          return v112 == (double)v113;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v65;
        case 6u:
          return *(void *)(a2 + 16) == (uint64_t)(*((void *)a1 + 2) << 8) >> 8 && *((_DWORD *)a1 + 6) == 0;
        default:
          goto LABEL_215;
      }
    case 1:
      uint64_t v65 = 0;
      switch(a1[28])
      {
        case 0u:
          double v112 = *(double *)(a2 + 16);
          uint64_t v113 = *((void *)a1 + 2);
          return v112 == (double)v113;
        case 1u:
          return *((double *)a1 + 2) == *(double *)(a2 + 16);
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v65;
        case 6u:
          double v125 = *(double *)(a2 + 16);
          double v126 = (double)*((int *)a1 + 6) / 1000000.0 + (double)((uint64_t)(*((void *)a1 + 2) << 8) >> 8);
          return vabdd_f64(v126, v125) < 0.0000005;
        default:
          goto LABEL_215;
      }
    case 2:
      unsigned int v69 = a1[28];
      if (v69 - 3 < 7 || v69 < 2) {
        return 0;
      }
      if (v69 != 2) {
        goto LABEL_215;
      }
      uint64_t v71 = *(void *)(a2 + 16);
      uint64_t v72 = *((void *)a1 + 2);
      if (*(char *)(v72 + 31) < 0) {
        size_t v73 = *(void *)(v72 + 16);
      }
      else {
        size_t v73 = *(unsigned __int8 *)(v72 + 31);
      }
      if (*(char *)(v71 + 31) < 0) {
        uint64_t v127 = *(void *)(v71 + 16);
      }
      else {
        uint64_t v127 = *(unsigned __int8 *)(v71 + 31);
      }
      if (v73 != v127) {
        return 0;
      }
      uint64_t v128 = (void *)(v72 + 8);
      if ((*(unsigned char *)(v72 + 31) & 0x80) != 0) {
        uint64_t v128 = (void *)*v128;
      }
      uint64_t v129 = (void *)(v71 + 8);
      if ((*(unsigned char *)(v71 + 31) & 0x80) != 0) {
        uint64_t v129 = (void *)*v129;
      }
      if ((*(unsigned char *)(v72 + 31) & 0x80) != 0)
      {
        return memcmp(v128, v129, v73) == 0;
      }
      else if (v73)
      {
        size_t v130 = v73 - 1;
        do
        {
          int v132 = *(unsigned __int8 *)v128;
          uint64_t v128 = (void *)((char *)v128 + 1);
          int v131 = v132;
          int v134 = *(unsigned __int8 *)v129;
          uint64_t v129 = (void *)((char *)v129 + 1);
          int v133 = v134;
          BOOL v47 = v130-- != 0;
          char v135 = v47;
          uint64_t v65 = v131 == v133;
        }
        while (v131 == v133 && (v135 & 1) != 0);
      }
      else
      {
        return 1;
      }
      return v65;
    case 3:
      unsigned int v74 = a1[28];
      if (v74 > 9) {
        goto LABEL_215;
      }
      if (v74 != 3) {
        return 0;
      }
      unint64_t v75 = *(double **)(*((void *)a1 + 2) + 8);
      long long v76 = *(double **)(*((void *)a1 + 2) + 16);
      unint64_t v77 = v76 - v75;
      unint64_t v78 = *(double **)(*(void *)(a2 + 16) + 8);
      if (v77 != (uint64_t)(*(void *)(*(void *)(a2 + 16) + 16) - (void)v78) >> 3) {
        return 0;
      }
      if (v76 == v75) {
        return 1;
      }
      if (v77 <= 1) {
        uint64_t v79 = 1;
      }
      else {
        uint64_t v79 = v76 - v75;
      }
      if (*v75 != *v78) {
        return 0;
      }
      uint64_t v80 = 1;
      do
      {
        unint64_t v81 = v80;
        if (v79 == v80) {
          break;
        }
        double v82 = v75[v80];
        double v83 = v78[v80++];
      }
      while (v82 == v83);
      return v81 >= v77;
    case 4:
      uint64_t v84 = *(void *)(a2 + 16) + 8;
      std::string __p = v137;
      int64_t v139 = (uint64_t *)v84;
      unsigned int v85 = a1[28];
      if (v85 > 9) {
        goto LABEL_215;
      }
      if (v85 != 4) {
        return 0;
      }
      return turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::approx_equality_operator,std::vector<turi::flexible_type>>::operator()<std::vector<turi::flexible_type> const>((uint64_t)&__p, (uint64_t *)(*((void *)a1 + 2) + 8));
    case 5:
      unsigned int v114 = a1[28];
      if (v114 > 9) {
        goto LABEL_215;
      }
      if (v114 != 5) {
        return 0;
      }
      uint64_t v115 = *(void *)(a2 + 16);
      uint64_t v116 = *((void *)a1 + 2);
      uint64_t v117 = *(uint64_t **)(v116 + 8);
      uint64_t v118 = *(uint64_t **)(v116 + 16);
      if ((char *)v118 - (char *)v117 != *(void *)(v115 + 16) - *(void *)(v115 + 8)) {
        return 0;
      }
      std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)&__p, v117, v118);
      std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)v137, *(uint64_t **)(v115 + 8), *(uint64_t **)(v115 + 16));
      uint64_t v65 = std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::flexible_type>>>(&__p, v137);
      std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v137);
      std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&__p);
      return v65;
    case 6:
      uint64_t v65 = 0;
      switch(a1[28])
      {
        case 0u:
          return *((void *)a1 + 2) == (uint64_t)(*(void *)(a2 + 16) << 8) >> 8 && *(_DWORD *)(a2 + 24) == 0;
        case 1u:
          double v126 = *((double *)a1 + 2);
          double v125 = (double)*(int *)(a2 + 24) / 1000000.0 + (double)((uint64_t)(*(void *)(a2 + 16) << 8) >> 8);
          return vabdd_f64(v126, v125) < 0.0000005;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v65;
        case 6u:
          return ((*(void *)(a2 + 16) ^ *((void *)a1 + 2)) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)a1 + 6) == *(_DWORD *)(a2 + 24);
        default:
          goto LABEL_215;
      }
    case 7:
      unsigned int v119 = a1[28];
      if (v119 >= 0xA) {
        goto LABEL_215;
      }
      return v119 == 7;
    case 8:
      unsigned int v120 = a1[28];
      if (v120 < 8 || v120 == 9) {
        return 0;
      }
      if (v120 != 8) {
        goto LABEL_215;
      }
      return turi::image_type::operator==(*((void *)a1 + 2) + 8, *(void *)(a2 + 16) + 8);
    case 9:
      unsigned int v87 = a1[28];
      if (v87 < 9) {
        return 0;
      }
      if (v87 != 9) {
        goto LABEL_215;
      }
      uint64_t v88 = *(void *)(a2 + 16);
      unint64_t v89 = (void *)*((void *)a1 + 2);
      if ((void *)v88 == v89) {
        return 1;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v89 + 1), v88 + 8)) {
        return 0;
      }
      unint64_t v91 = (char *)v89[3];
      unint64_t v90 = (char *)v89[4];
      uint64_t v92 = v90 - v91;
      if (v90 == v91) {
        return 1;
      }
      if (!v89[1]) {
        return 1;
      }
      uint64_t v93 = 1;
      do
      {
        uint64_t v94 = *(void *)v91;
        v91 += 8;
        v93 *= v94;
      }
      while (v91 != v90);
      if (!v93) {
        return 1;
      }
      v137[0] = 0;
      std::vector<unsigned long>::vector(&__p, v92 >> 3, v137);
      break;
    default:
      goto LABEL_215;
  }
  while (1)
  {
    long long v95 = (uint64_t *)__p;
    if (v139 == __p)
    {
      uint64_t v104 = 0;
      double v105 = *(double *)(*(void *)v89[1] + 8 * v89[9]);
    }
    else
    {
      uint64_t v96 = 0;
      unint64_t v97 = ((char *)v139 - (unsigned char *)__p) >> 3;
      unint64_t v98 = (uint64_t *)v89[6];
      if (v97 <= 1) {
        unint64_t v97 = 1;
      }
      unint64_t v99 = (uint64_t *)__p;
      unint64_t v100 = v97;
      do
      {
        uint64_t v102 = *v99++;
        uint64_t v101 = v102;
        uint64_t v103 = *v98++;
        v96 += v103 * v101;
        --v100;
      }
      while (v100);
      uint64_t v104 = 0;
      double v105 = *(double *)(*(void *)v89[1] + 8 * (v89[9] + v96));
      int64_t v106 = *(uint64_t **)(v88 + 48);
      long long v107 = (uint64_t *)__p;
      do
      {
        uint64_t v109 = *v107++;
        uint64_t v108 = v109;
        uint64_t v110 = *v106++;
        v104 += v110 * v108;
        --v97;
      }
      while (v97);
    }
    double v111 = *(double *)(**(void **)(v88 + 8) + 8 * (*(void *)(v88 + 72) + v104));
    uint64_t v65 = v105 == v111;
    if (v105 != v111) {
      break;
    }
    if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v89 + 1), (uint64_t *)&__p))
    {
      long long v95 = (uint64_t *)__p;
      break;
    }
  }
  if (v95)
  {
    int64_t v139 = v95;
    operator delete(v95);
  }
  return v65;
}

void sub_223EA7594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

void *OUTLINED_FUNCTION_0_2@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = *(_OWORD *)(a3 + 24);
  long long v5 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  void *result = a2;
  *(void *)a2 = 1;
  atomic_fetch_add(v3, 0xFFFFFFFFFFFFFFFFLL);
  return result;
}

void **OUTLINED_FUNCTION_1_1(void **result, void *a2)
{
  uint64_t v2 = *result;
  *a2 = **result;
  uint64_t v3 = v2[2];
  a2[1] = v2[1];
  a2[2] = v3;
  return result;
}

void OUTLINED_FUNCTION_2_0()
{
  JUMPOUT(0x22A614FA0);
}

void *OUTLINED_FUNCTION_3_0(void *result, void *a2, atomic_ullong *a3)
{
  *a2 = result;
  void *result = 1;
  atomic_fetch_add(a3, 0xFFFFFFFFFFFFFFFFLL);
  return result;
}

void OUTLINED_FUNCTION_4_0()
{
  JUMPOUT(0x22A614FA0);
}

void OUTLINED_FUNCTION_6_0()
{
  atomic_fetch_add_explicit((atomic_uint *volatile)(v0 + 8), 1u, memory_order_relaxed);
}

__n128 OUTLINED_FUNCTION_8_0(__n128 *a1)
{
  __n128 result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_9_0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *OUTLINED_FUNCTION_10_0(uint64_t a1, uint64_t a2, void *a3)
{
  return std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a3);
}

double get_last_err_str@<D0>(int a1@<W0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = strerror(a1);
  std::string::basic_string[abi:ne180100]<0>(&v5, v3);
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  a2[2] = v6;
  return result;
}

void turi::flexible_type_internals::throw_type_conversion_error(turi::flexible_type_internals *this, const turi::flexible_type *a2, const char *a3)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Type conversion failure in flexible_type converter: expected ", 61);
  size_t v6 = strlen((const char *)a2);
  double v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)a2, v6);
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; got ", 6);
  unint64_t v9 = *((char *)this + 12);
  if (v9 > 9) {
    uint64_t v10 = "undefined";
  }
  else {
    uint64_t v10 = off_2646D6C20[v9];
  }
  size_t v11 = strlen(v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str();
  std::runtime_error::runtime_error(exception, &v13);
  exception->__vftable = (std::runtime_error_vtbl *)&unk_26D758388;
}

void sub_223EA7DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v33 & 1) == 0)
    {
LABEL_6:
      a15 = *MEMORY[0x263F8C2C8];
      *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      a16 = MEMORY[0x263F8C318] + 16;
      if (a29 < 0) {
        operator delete(a24);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22A614E30](&a32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v32);
  goto LABEL_6;
}

void turi::flexible_type_internals::type_conversion_error::~type_conversion_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x22A614FA0);
}

void boost::spirit::utree::list_type::~list_type(boost::spirit::utree::list_type *this)
{
  switch(*((char *)this + 31) >> 1)
  {
    case 2:
      uint64_t v2 = *(void *)this;
      if (*(void *)this)
      {
        do
        {
          uint64_t v3 = *(void *)(v2 + 32);
          boost::spirit::detail::list::node::~node((boost::spirit::detail::list::node **)v2);
          MEMORY[0x22A614FA0]();
          uint64_t v2 = v3;
        }
        while (v3);
      }
      break;
    case 6:
      uint64_t v4 = *(void *)this;
      if (*(void *)this) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      break;
    case 10:
    case 12:
    case 13:
      if ((*((unsigned char *)this + 31) & 1) != 0 && *(void *)this) {
        MEMORY[0x22A614F80]();
      }
      break;
    default:
      break;
  }
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

void turi::flexible_type_parser::flexible_type_parser()
{
}

void sub_223EA8228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  MEMORY[0x22A614FA0](v22, 0x10F2C40DFD12FE7);
  uint64_t v24 = *(std::__shared_weak_count **)(v21 + 8);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_parser::general_flexible_type_parse@<X0>(turi::flexible_type_parser *this@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  memset(v23, 0, 13);
  char v24 = 0;
  unint64_t v8 = *a2;
  unint64_t v9 = &(*a2)[a3];
  if (!*((unsigned char *)this + 32))
  {
    std::string v13 = *(void **)this;
    uint64_t v22 = &(*a2)[a3];
    atomic_ullong *volatile v14 = (void *)(**(void **)this + 32);
    if (*(void *)(*v13 + 32)) {
      atomic_ullong *volatile v15 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::dummy::nonnull;
    }
    else {
      atomic_ullong *volatile v15 = 0;
    }
    if (v15
      && boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v14))
    {
      for (uint64_t i = *a2; i != v22; *a2 = ++i)
      {
        if ((boost::spirit::char_encoding::iso8859_1_char_types[*(unsigned __int8 *)i] & 0x40) == 0) {
          break;
        }
      }
      char v24 = 1;
      goto LABEL_17;
    }
LABEL_20:
    char v12 = 0;
    char v24 = 0;
    goto LABEL_29;
  }
  uint64_t v10 = (void *)(**((void **)this + 2) + 32);
  if (*v10) {
    size_t v11 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::dummy::nonnull;
  }
  else {
    size_t v11 = 0;
  }
  if (!v11) {
    goto LABEL_20;
  }
  char v24 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v10);
  if ((v24 & 1) == 0)
  {
    char v12 = 0;
LABEL_29:
    *(void *)(a4 + 5) = *(void *)((char *)v23 + 5);
    *(void *)a4 = v23[0];
    *(unsigned char *)(a4 + 12) = BYTE4(v23[1]);
    BYTE4(v23[1]) = 0;
    *(unsigned char *)(a4 + 16) = v12;
    return std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)v23);
  }
LABEL_17:
  uint64_t v17 = *a2;
  if (*a2 - v8 >= (int)a3) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)this;
  if (*(char *)(*(void *)this + 823) < 0)
  {
    unint64_t v19 = *(unsigned __int8 **)(v18 + 800);
    int64_t v20 = *(void *)(v18 + 808);
  }
  else
  {
    unint64_t v19 = (unsigned __int8 *)(v18 + 800);
    int64_t v20 = *(unsigned __int8 *)(*(void *)this + 823);
  }
  if (v20 <= v9 - v17)
  {
    if (v20)
    {
      while (*(unsigned __int8 *)v17 == *v19)
      {
        ++v17;
        ++v19;
        char v12 = 1;
        if (!--v20) {
          goto LABEL_29;
        }
      }
      goto LABEL_23;
    }
LABEL_28:
    char v12 = 1;
    goto LABEL_29;
  }
LABEL_23:
  *a2 = v8;
  turi::flexible_type_parser::string_parse(this, a2, a3, a4);
  return std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)v23);
}

void sub_223EA84FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void *turi::flexible_type_parser::string_parse@<X0>(turi::flexible_type_parser *this@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 12) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  size_t v11 = &(*a2)[a3];
  uint64_t v5 = *(void *)(*(void *)this + 736);
  uint64_t v7 = *(void *)(v5 + 32);
  double result = (void *)(v5 + 32);
  if (v7) {
    unint64_t v8 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::dummy::nonnull;
  }
  else {
    unint64_t v8 = 0;
  }
  if (v8)
  {
    double result = (void *)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(result);
    if (result)
    {
      for (uint64_t i = *a2; i != v11; *a2 = ++i)
      {
        if ((boost::spirit::char_encoding::iso8859_1_char_types[*(unsigned __int8 *)i] & 0x40) == 0) {
          break;
        }
      }
      LOBYTE(v8) = 1;
    }
    else
    {
      LOBYTE(v8) = 0;
    }
  }
  *(unsigned char *)(a4 + 16) = (_BYTE)v8;
  return result;
}

void sub_223EA85E8(_Unwind_Exception *a1)
{
  std::pair<turi::flexible_type,BOOL>::~pair(v1);
  _Unwind_Resume(a1);
}

void *turi::flexible_type_parser::non_string_flexible_type_parse@<X0>(turi::flexible_type_parser *this@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  *a4 = 0;
  *((_DWORD *)a4 + 2) = 0;
  *((unsigned char *)a4 + 12) = 0;
  *((unsigned char *)a4 + 16) = 0;
  int64_t v20 = &(*a2)[a3];
  uint64_t v5 = *(void *)(*(void *)this + 96);
  uint64_t v7 = *(void *)(v5 + 32);
  double result = (void *)(v5 + 32);
  if (v7) {
    unint64_t v8 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::dummy::nonnull;
  }
  else {
    unint64_t v8 = 0;
  }
  if (!v8)
  {
    *((unsigned char *)a4 + 16) = 0;
LABEL_38:
    *a4 = 0;
    *((_DWORD *)a4 + 2) = 0;
    *((unsigned char *)a4 + 12) = 7;
    return result;
  }
  v21[0] = (void **)a4;
  double result = (void *)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(result);
  if (!result)
  {
    int v11 = *((unsigned __int8 *)a4 + 12);
    *((unsigned char *)a4 + 16) = 0;
    switch(v11)
    {
      case 2:
        if (atomic_fetch_add((atomic_ullong *volatile)*a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          char v12 = (void **)*a4;
          if (!*a4) {
            goto LABEL_37;
          }
          if (*((char *)v12 + 31) < 0) {
            operator delete(v12[1]);
          }
          std::string v13 = v12;
          uint64_t v14 = 0x1012C404EF22A49;
          goto LABEL_36;
        }
        break;
      case 3:
        if (atomic_fetch_add((atomic_ullong *volatile)*a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v15 = *a4;
          if (!*a4) {
            goto LABEL_37;
          }
          uint64_t v16 = (void *)v15[1];
          if (v16)
          {
            void v15[2] = v16;
            operator delete(v16);
          }
          std::string v13 = v15;
          uint64_t v14 = 0x1080C409938AC02;
          goto LABEL_36;
        }
        break;
      case 4:
        if (atomic_fetch_add((atomic_ullong *volatile)*a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v17 = *a4;
          if (!*a4) {
            goto LABEL_37;
          }
          v21[0] = (void **)(v17 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v21);
          goto LABEL_28;
        }
        break;
      case 5:
        if (atomic_fetch_add((atomic_ullong *volatile)*a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v17 = *a4;
          if (!*a4) {
            goto LABEL_37;
          }
          v21[0] = (void **)(v17 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v21);
LABEL_28:
          std::string v13 = v17;
          uint64_t v14 = 0x1020C405E66F15BLL;
          goto LABEL_36;
        }
        break;
      case 8:
        if (atomic_fetch_add((atomic_ullong *volatile)*a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v18 = (atomic_uint **)*a4;
          if (!*a4) {
            goto LABEL_37;
          }
          boost::detail::shared_count::~shared_count(v18 + 2);
          std::string v13 = v18;
          unsigned int v19 = -235920773;
          goto LABEL_35;
        }
        break;
      case 9:
        if (atomic_fetch_add((atomic_ullong *volatile)*a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          double result = *a4;
          if (*a4)
          {
            std::string v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(result);
            unsigned int v19 = 2071181815;
LABEL_35:
            uint64_t v14 = v19 | 0x1030C4000000000;
LABEL_36:
            double result = (void *)MEMORY[0x22A614FA0](v13, v14);
          }
LABEL_37:
          *a4 = 0;
        }
        break;
      default:
        goto LABEL_38;
    }
    goto LABEL_38;
  }
  for (uint64_t i = *a2; i != v20; *a2 = ++i)
  {
    if ((boost::spirit::char_encoding::iso8859_1_char_types[*(unsigned __int8 *)i] & 0x40) == 0) {
      break;
    }
  }
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_223EA887C(_Unwind_Exception *a1)
{
  std::pair<turi::flexible_type,BOOL>::~pair(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_parser::dict_parse@<X0>(turi::flexible_type_parser *this@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  *a4 = 0;
  *((_DWORD *)a4 + 2) = 0;
  *((unsigned char *)a4 + 12) = 0;
  *((unsigned char *)a4 + 16) = 0;
  uint64_t v6 = *(void *)this;
  int64_t v20 = &(*a2)[a3];
  char v19 = 0;
  v18[0] = (void **)a4;
  uint64_t result = boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::parse<boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::spirit::locals<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>(*(void *)(v6 + 480));
  if (!result)
  {
    *((unsigned char *)a4 + 16) = 0;
    switch(*((unsigned char *)a4 + 12))
    {
      case 2:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        uint64_t v10 = (void **)*a4;
        if (!*a4) {
          goto LABEL_32;
        }
        if (*((char *)v10 + 31) < 0) {
          operator delete(v10[1]);
        }
        int v11 = v10;
        uint64_t v12 = 0x1012C404EF22A49;
        goto LABEL_31;
      case 3:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        std::string v13 = *a4;
        if (!*a4) {
          goto LABEL_32;
        }
        uint64_t v14 = (void *)v13[1];
        if (v14)
        {
          void v13[2] = v14;
          operator delete(v14);
        }
        int v11 = v13;
        uint64_t v12 = 0x1080C409938AC02;
        goto LABEL_31;
      case 4:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        atomic_ullong *volatile v15 = (char *)*a4;
        if (!*a4) {
          goto LABEL_32;
        }
        v18[0] = (void **)(v15 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v18);
        goto LABEL_23;
      case 5:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        atomic_ullong *volatile v15 = (char *)*a4;
        if (!*a4) {
          goto LABEL_32;
        }
        v18[0] = (void **)(v15 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v18);
LABEL_23:
        int v11 = v15;
        uint64_t v12 = 0x1020C405E66F15BLL;
        goto LABEL_31;
      case 8:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        uint64_t v16 = (atomic_uint **)*a4;
        if (!*a4) {
          goto LABEL_32;
        }
        boost::detail::shared_count::~shared_count(v16 + 2);
        int v11 = v16;
        unsigned int v17 = -235920773;
        goto LABEL_30;
      case 9:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        if (!*a4) {
          goto LABEL_32;
        }
        int v11 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a4);
        unsigned int v17 = 2071181815;
LABEL_30:
        uint64_t v12 = v17 | 0x1030C4000000000;
LABEL_31:
        MEMORY[0x22A614FA0](v11, v12);
LABEL_32:
        *a4 = 0;
LABEL_33:
        *a4 = 0;
        *((_DWORD *)a4 + 2) = 0;
        *((unsigned char *)a4 + 12) = 5;
        operator new();
      default:
        goto LABEL_33;
    }
  }
  unint64_t v8 = (unsigned __int8 *)*a2;
  unint64_t v9 = (unsigned __int8 *)v20;
  if (*a2 != v20)
  {
    do
    {
      if ((boost::spirit::char_encoding::iso8859_1_char_types[*v8] & 0x40) == 0) {
        break;
      }
      *a2 = (const char *)++v8;
    }
    while (v8 != v9);
  }
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_223EA8B3C(_Unwind_Exception *a1)
{
  std::pair<turi::flexible_type,BOOL>::~pair(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_parser::recursive_parse@<X0>(turi::flexible_type_parser *this@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  *a4 = 0;
  *((_DWORD *)a4 + 2) = 0;
  *((unsigned char *)a4 + 12) = 0;
  *((unsigned char *)a4 + 16) = 0;
  uint64_t v6 = *(void *)this;
  int64_t v20 = &(*a2)[a3];
  char v19 = 0;
  v18[0] = (void **)a4;
  uint64_t result = boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::parse<boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::spirit::locals<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>(*(void *)(v6 + 608));
  if (!result)
  {
    *((unsigned char *)a4 + 16) = 0;
    switch(*((unsigned char *)a4 + 12))
    {
      case 2:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        uint64_t v10 = (void **)*a4;
        if (!*a4) {
          goto LABEL_32;
        }
        if (*((char *)v10 + 31) < 0) {
          operator delete(v10[1]);
        }
        int v11 = v10;
        uint64_t v12 = 0x1012C404EF22A49;
        goto LABEL_31;
      case 3:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        std::string v13 = *a4;
        if (!*a4) {
          goto LABEL_32;
        }
        uint64_t v14 = (void *)v13[1];
        if (v14)
        {
          void v13[2] = v14;
          operator delete(v14);
        }
        int v11 = v13;
        uint64_t v12 = 0x1080C409938AC02;
        goto LABEL_31;
      case 4:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        atomic_ullong *volatile v15 = (char *)*a4;
        if (!*a4) {
          goto LABEL_32;
        }
        v18[0] = (void **)(v15 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v18);
        goto LABEL_23;
      case 5:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        atomic_ullong *volatile v15 = (char *)*a4;
        if (!*a4) {
          goto LABEL_32;
        }
        v18[0] = (void **)(v15 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v18);
LABEL_23:
        int v11 = v15;
        uint64_t v12 = 0x1020C405E66F15BLL;
        goto LABEL_31;
      case 8:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        uint64_t v16 = (atomic_uint **)*a4;
        if (!*a4) {
          goto LABEL_32;
        }
        boost::detail::shared_count::~shared_count(v16 + 2);
        int v11 = v16;
        unsigned int v17 = -235920773;
        goto LABEL_30;
      case 9:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        if (!*a4) {
          goto LABEL_32;
        }
        int v11 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a4);
        unsigned int v17 = 2071181815;
LABEL_30:
        uint64_t v12 = v17 | 0x1030C4000000000;
LABEL_31:
        MEMORY[0x22A614FA0](v11, v12);
LABEL_32:
        *a4 = 0;
LABEL_33:
        *a4 = 0;
        *((_DWORD *)a4 + 2) = 0;
        *((unsigned char *)a4 + 12) = 4;
        operator new();
      default:
        goto LABEL_33;
    }
  }
  unint64_t v8 = (unsigned __int8 *)*a2;
  unint64_t v9 = (unsigned __int8 *)v20;
  if (*a2 != v20)
  {
    do
    {
      if ((boost::spirit::char_encoding::iso8859_1_char_types[*v8] & 0x40) == 0) {
        break;
      }
      *a2 = (const char *)++v8;
    }
    while (v8 != v9);
  }
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_223EA8DFC(_Unwind_Exception *a1)
{
  std::pair<turi::flexible_type,BOOL>::~pair(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_parser::vector_parse@<X0>(turi::flexible_type_parser *this@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  *a4 = 0;
  *((_DWORD *)a4 + 2) = 0;
  *((unsigned char *)a4 + 12) = 0;
  *((unsigned char *)a4 + 16) = 0;
  uint64_t v6 = *(void *)this;
  int64_t v20 = &(*a2)[a3];
  char v19 = 0;
  v18[0] = (void **)a4;
  uint64_t result = boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::parse<boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::spirit::locals<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>(*(void *)(v6 + 672));
  if (!result)
  {
    *((unsigned char *)a4 + 16) = 0;
    switch(*((unsigned char *)a4 + 12))
    {
      case 2:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        uint64_t v10 = (void **)*a4;
        if (!*a4) {
          goto LABEL_32;
        }
        if (*((char *)v10 + 31) < 0) {
          operator delete(v10[1]);
        }
        int v11 = v10;
        uint64_t v12 = 0x1012C404EF22A49;
        goto LABEL_31;
      case 3:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        std::string v13 = *a4;
        if (!*a4) {
          goto LABEL_32;
        }
        uint64_t v14 = (void *)v13[1];
        if (v14)
        {
          void v13[2] = v14;
          operator delete(v14);
        }
        int v11 = v13;
        uint64_t v12 = 0x1080C409938AC02;
        goto LABEL_31;
      case 4:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        atomic_ullong *volatile v15 = (char *)*a4;
        if (!*a4) {
          goto LABEL_32;
        }
        v18[0] = (void **)(v15 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v18);
        goto LABEL_23;
      case 5:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        atomic_ullong *volatile v15 = (char *)*a4;
        if (!*a4) {
          goto LABEL_32;
        }
        v18[0] = (void **)(v15 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v18);
LABEL_23:
        int v11 = v15;
        uint64_t v12 = 0x1020C405E66F15BLL;
        goto LABEL_31;
      case 8:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        uint64_t v16 = (atomic_uint **)*a4;
        if (!*a4) {
          goto LABEL_32;
        }
        boost::detail::shared_count::~shared_count(v16 + 2);
        int v11 = v16;
        unsigned int v17 = -235920773;
        goto LABEL_30;
      case 9:
        if (atomic_fetch_add(*a4, 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_33;
        }
        if (!*a4) {
          goto LABEL_32;
        }
        int v11 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a4);
        unsigned int v17 = 2071181815;
LABEL_30:
        uint64_t v12 = v17 | 0x1030C4000000000;
LABEL_31:
        MEMORY[0x22A614FA0](v11, v12);
LABEL_32:
        *a4 = 0;
LABEL_33:
        *a4 = 0;
        *((_DWORD *)a4 + 2) = 0;
        *((unsigned char *)a4 + 12) = 3;
        operator new();
      default:
        goto LABEL_33;
    }
  }
  unint64_t v8 = (unsigned __int8 *)*a2;
  unint64_t v9 = (unsigned __int8 *)v20;
  if (*a2 != v20)
  {
    do
    {
      if ((boost::spirit::char_encoding::iso8859_1_char_types[*v8] & 0x40) == 0) {
        break;
      }
      *a2 = (const char *)++v8;
    }
    while (v8 != v9);
  }
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_223EA90BC(_Unwind_Exception *a1)
{
  std::pair<turi::flexible_type,BOOL>::~pair(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_parser::double_parse@<X0>(const char **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  double v9 = 0.0;
  std::string v13 = &(*a1)[a2];
  char v12 = 0;
  int v11 = &v9;
  uint64_t result = boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>((uint64_t)&v10, (unsigned __int8 **)a1, (unsigned __int8 **)&v13, (uint64_t)&v11, (uint64_t)&v12, &v9);
  if (result)
  {
    uint64_t v7 = (unsigned __int8 *)*a1;
    unint64_t v8 = v13;
    if (*a1 != v13)
    {
      do
      {
        if ((boost::spirit::char_encoding::iso8859_1_char_types[*v7] & 0x40) == 0) {
          break;
        }
        *a1 = (const char *)++v7;
      }
      while (v7 != (unsigned __int8 *)v8);
    }
    *(unsigned char *)(a3 + 16) = 1;
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 1;
    *(double *)a3 = v9;
  }
  else
  {
    *(unsigned char *)(a3 + 16) = 0;
  }
  return result;
}

void sub_223EA91B8(_Unwind_Exception *a1)
{
  std::pair<turi::flexible_type,BOOL>::~pair(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_parser::int_parse@<X0>(const char **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v9 = 0;
  std::string v13 = &(*a1)[a2];
  char v12 = 0;
  int v11 = &v9;
  uint64_t result = boost::spirit::qi::any_int_parser<long long,10u,1u,-1>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,long long>((uint64_t)&v10, (uint64_t *)a1, (uint64_t *)&v13, (uint64_t)&v11, (uint64_t)&v12, &v9);
  if (result)
  {
    uint64_t v7 = *a1;
    for (uint64_t i = v13; v7 != i; *a1 = ++v7)
    {
      if ((boost::spirit::char_encoding::iso8859_1_char_types[*(unsigned __int8 *)v7] & 0x40) == 0) {
        break;
      }
    }
    *(unsigned char *)(a3 + 16) = 1;
    *(_DWORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 12) = 0;
    *(void *)a3 = v9;
  }
  else
  {
    *(unsigned char *)(a3 + 16) = 0;
  }
  return result;
}

void sub_223EA9294(_Unwind_Exception *a1)
{
  std::pair<turi::flexible_type,BOOL>::~pair(v1);
  _Unwind_Resume(a1);
}

void boost::spirit::utree::~utree(boost::spirit::utree *this)
{
  switch(*((char *)this + 31) >> 1)
  {
    case 2:
      uint64_t v2 = *(void *)this;
      if (*(void *)this)
      {
        do
        {
          uint64_t v3 = *(void *)(v2 + 32);
          boost::spirit::detail::list::node::~node((boost::spirit::detail::list::node **)v2);
          MEMORY[0x22A614FA0]();
          uint64_t v2 = v3;
        }
        while (v3);
      }
      break;
    case 6:
      uint64_t v4 = *(void *)this;
      if (*(void *)this) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      break;
    case 10:
    case 12:
    case 13:
      if ((*((unsigned char *)this + 31) & 1) != 0 && *(void *)this) {
        MEMORY[0x22A614F80]();
      }
      break;
    default:
      break;
  }
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  switch(*((char *)this + 31) >> 1)
  {
    case 2:
      uint64_t v2 = *(void *)this;
      if (*(void *)this)
      {
        do
        {
          uint64_t v3 = *(void *)(v2 + 32);
          boost::spirit::detail::list::node::~node((boost::spirit::detail::list::node **)v2);
          MEMORY[0x22A614FA0]();
          uint64_t v2 = v3;
        }
        while (v3);
      }
      break;
    case 6:
      uint64_t v4 = *(void *)this;
      if (*(void *)this) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      break;
    case 10:
    case 12:
    case 13:
      if ((*((unsigned char *)this + 31) & 1) != 0 && *(void *)this) {
        MEMORY[0x22A614F80]();
      }
      break;
    default:
      break;
  }
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

void boost::exception_detail::throw_exception_<boost::spirit::bad_type_exception>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>::error_info_injector((uint64_t)v7, a1);
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  int v10 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>((uint64_t)v7);
}

void sub_223EA9510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  a14 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v14 + 40));
  boost::spirit::bad_type_exception::~bad_type_exception(&a10);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x50uLL);
  uint64_t v4 = &unk_26D758558;
  if (*(char *)(a1 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else {
    std::string v5 = *(std::string *)(a1 + 8);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v6 = &unk_26D754388;
  uint64_t v7 = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  long long v8 = *(_OWORD *)(a1 + 48);
  int v9 = *(_DWORD *)(a1 + 64);
  uint64_t v4 = &unk_26D758510;
  uint64_t v6 = &unk_26D758538;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::clone_impl((uint64_t)exception, (uint64_t)&v4);
}

void sub_223EA96A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  boost::spirit::bad_type_exception::~bad_type_exception(&a10);
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  boost::spirit::bad_type_exception::~bad_type_exception((std::exception *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 32) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  boost::spirit::bad_type_exception::~bad_type_exception((std::exception *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = &unk_26D7542E8;
  *(void *)a1 = &unk_26D758558;
  uint64_t v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = v6;
  *(void *)(a1 + 32) = &unk_26D754388;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)a1 = &unk_26D758470;
  *(void *)(a1 + 32) = &unk_26D7584A8;
  *(void *)(a1 + 72) = &unk_26D7584E0;
  uint64_t v12 = 0;
  uint64_t v8 = *(void *)(a2 + 40);
  if (v8)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 40))(&v11);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v12, v11);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
    uint64_t v9 = v12;
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 40), v9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v12);
  return a1;
}

{
  std::string *v4;
  long long v5;
  uint64_t v6;
  long long v7;

  *(void *)(a1 + 72) = &unk_26D7542E8;
  *(void *)a1 = &unk_26D758558;
  uint64_t v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_26D754388;
  *(void *)(a1 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = v6;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)a1 = &unk_26D758470;
  *(void *)(a1 + 32) = &unk_26D7584A8;
  *(void *)(a1 + 72) = &unk_26D7584E0;
  return a1;
}

void sub_223EA9918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::exception::~exception(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  boost::spirit::bad_type_exception::~bad_type_exception((std::exception *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::spirit::bad_type_exception::what(boost::spirit::bad_type_exception *this)
{
  uint64_t result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::clone()
{
}

void sub_223EA9A50(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F3C402ED5D3D6);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x50uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::clone_impl((uint64_t)exception, a1);
}

void sub_223EA9ABC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::exception *)(a1 - 4);
  *a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  boost::spirit::bad_type_exception::~bad_type_exception(v1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 4) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 5);
  boost::spirit::bad_type_exception::~bad_type_exception((std::exception *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::~clone_impl((uint64_t)a1 + *(void *)(*a1 - 40));
}

void boost::spirit::bad_type_exception::~bad_type_exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26D758558;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  boost::spirit::bad_type_exception::~bad_type_exception(this);
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>::~error_info_injector(uint64_t a1)
{
}

void sub_223EA9E44(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>::error_info_injector(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D758558;
  uint64_t v3 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(void *)(a1 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(void *)a1 = &unk_26D758510;
  *(void *)(a1 + 32) = &unk_26D758538;
  return a1;
}

void sub_223EA9F20(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::bad_type_exception::bad_type_exception(uint64_t a1, const char *a2, unsigned int a3)
{
  *(void *)a1 = &unk_26D758558;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"utree: ", 7);
  size_t v8 = strlen(a2);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a2, v8);
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (got utree type '", 18);
  uint64_t v11 = boost::spirit::operator<<(v10, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"')", 2);
  std::stringbuf::str();
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v6);
  }
  *(_OWORD *)uint64_t v6 = v13;
  *(void *)(v6 + 16) = v14;
  v15[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v15[1] = MEMORY[0x263F8C318] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&v17);
  return a1;
}

void sub_223EAA10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  if (*(char *)(v4 + 31) < 0) {
    operator delete(*v5);
  }
  std::exception::~exception((std::exception *)v4);
  _Unwind_Resume(a1);
}

void *boost::spirit::operator<<(void *a1, unsigned int a2)
{
  boost::io::basic_ios_all_saver<char,std::char_traits<char>>::basic_ios_all_saver((uint64_t)v8, (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  if (a2 >= 0xE)
  {
    uint64_t v4 = "unknown";
    uint64_t v5 = 7;
  }
  else
  {
    uint64_t v4 = off_2646D6C70[a2];
    uint64_t v5 = *(void *)&asc_2246C5810[8 * a2];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v4, v5);
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[0x", 3);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"]", 1);
  boost::io::basic_ios_all_saver<char,std::char_traits<char>>::~basic_ios_all_saver(v8);
  return a1;
}

void sub_223EAA22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::io::basic_ios_all_saver<char,std::char_traits<char>>::~basic_ios_all_saver((std::locale *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::io::basic_ios_all_saver<char,std::char_traits<char>>::basic_ios_all_saver(uint64_t a1, std::ios_base *this)
{
  *(void *)a1 = this;
  *(_DWORD *)(a1 + 8) = this->__fmtflags_;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&this->__precision_;
  *(void *)(a1 + 32) = *(void *)&this->__rdstate_;
  uint64_t rdbuf = this->__rdbuf_;
  *(void *)(a1 + 4CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = this[1].__vftable;
  *(void *)(a1 + 48) = rdbuf;
  std::ios_base::fmtflags fmtflags = this[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(this);
    uint64_t v6 = std::locale::use_facet(&v8, MEMORY[0x263F8C108]);
    std::ios_base::fmtflags fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 32);
    std::locale::~locale(&v8);
    this[1].__fmtflags_ = fmtflags;
  }
  *(unsigned char *)(a1 + 56) = fmtflags;
  std::ios_base::getloc(this);
  return a1;
}

void sub_223EAA310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

std::locale *boost::io::basic_ios_all_saver<char,std::char_traits<char>>::~basic_ios_all_saver(std::locale *a1)
{
  return a1;
}

__n128 boost::io::basic_ios_all_saver<char,std::char_traits<char>>::restore(uint64_t a1)
{
  uint64_t v2 = (const std::locale *)(a1 + 64);
  uint64_t v3 = *(std::ios_base **)a1;
  std::ios_base::getloc(*(const std::ios_base **)a1);
  std::ios_base::imbue(v3, v2);
  std::locale::~locale(&v16);
  uint64_t rdbuf = (std::locale *)v3->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, v2);
    uint64_t v5 = rdbuf + 1;
    std::locale::locale(&v15, v5);
    std::locale::operator=(v5, v2);
    std::locale::~locale(&v15);
  }
  std::locale::~locale(&v14);
  uint64_t v6 = *(const std::ios_base **)a1;
  std::ios_base::fmtflags v7 = *(char *)(a1 + 56);
  std::locale v8 = *(std::ios_base **)a1;
  if (*(_DWORD *)(*(void *)a1 + 144) == -1)
  {
    std::ios_base::getloc(*(const std::ios_base **)a1);
    uint64_t v9 = std::locale::use_facet(&v16, MEMORY[0x263F8C108]);
    std::ios_base::fmtflags v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 32);
    std::locale::~locale(&v16);
    v6[1].__fmtflags_ = v10;
    std::locale v8 = *(std::ios_base **)a1;
  }
  v6[1].__fmtflags_ = v7;
  v8->__rdbuf_ = *(void **)(a1 + 48);
  std::ios_base::clear(v8, 0);
  uint64_t v11 = *(std::ios_base **)a1;
  v11[1].__vftable = *(std::ios_base_vtbl **)(a1 + 40);
  v11->__exceptions_ = *(_DWORD *)(a1 + 36);
  std::ios_base::clear(v11, v11->__rdstate_);
  std::ios_base::clear(*(std::ios_base **)a1, *(_DWORD *)(a1 + 32));
  uint64_t v12 = *(const std::ios_base **)a1;
  __n128 result = *(__n128 *)(a1 + 16);
  *(__n128 *)&v12->__precision_ = result;
  v12->__fmtflags_ = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_223EAA4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

void boost::spirit::detail::list::node::~node(boost::spirit::detail::list::node **this)
{
  switch(*((char *)this + 31) >> 1)
  {
    case 2:
      uint64_t v2 = *this;
      if (*this)
      {
        do
        {
          uint64_t v3 = (boost::spirit::detail::list::node *)*((void *)v2 + 4);
          boost::spirit::detail::list::node::~node(v2);
          MEMORY[0x22A614FA0]();
          uint64_t v2 = v3;
        }
        while (v3);
      }
      break;
    case 6:
      uint64_t v4 = *this;
      if (*this) {
        (*(void (**)(boost::spirit::detail::list::node *))(*(void *)v4 + 8))(v4);
      }
      break;
    case 10:
    case 12:
    case 13:
      if ((*((unsigned char *)this + 31) & 1) != 0 && *this) {
        MEMORY[0x22A614F80]();
      }
      break;
    default:
      break;
  }
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

uint64_t std::pair<turi::flexible_type,BOOL>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          std::locale v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          std::locale v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          long long v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

void turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>::flexible_type_parser_impl(uint64_t a1, const std::string *a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  void v82[3] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-grammar");
  *(void *)a1 = a1 + 32;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)(a1 + 8) = __p;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(void *)(a1 + 32) = a1 + 32;
  std::locale v14 = (std::string *)(a1 + 40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 64) = 0;
    if (v15 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 56) = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a1 + 64) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(void *)(a1 + 96) = a1 + 96;
  std::locale v16 = (std::string *)(a1 + 104);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 128) = 0;
    if (v17 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 12CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a1 + 128) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(void *)(a1 + 16CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = a1 + 160;
  uint64_t v18 = (std::string *)(a1 + 168);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 192) = 0;
    if (v19 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 184) = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a1 + 192) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(void *)(a1 + 224) = a1 + 224;
  int64_t v20 = (std::string *)(a1 + 232);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v21 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 256) = 0;
    if (v21 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 248) = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a1 + 256) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(void *)(a1 + 288) = a1 + 288;
  uint64_t v22 = (std::string *)(a1 + 296);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 32CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
    if (v23 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 312) = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a1 + 32CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(void *)(a1 + 352) = a1 + 352;
  char v24 = (std::string *)(a1 + 360);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 384) = 0;
    if (v25 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 376) = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a1 + 384) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(void *)(a1 + 416) = a1 + 416;
  uint64_t v26 = (std::string *)(a1 + 424);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 448) = 0;
    if (v27 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 44CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a1 + 448) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(void *)(a1 + 48CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = a1 + 480;
  uint64_t v28 = (std::string *)(a1 + 488);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v29 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 512) = 0;
    if (v29 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 504) = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a1 + 512) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(void *)(a1 + 544) = a1 + 544;
  unint64_t v30 = (std::string *)(a1 + 552);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v31 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 576) = 0;
    if (v31 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 568) = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a1 + 576) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(void *)(a1 + 608) = a1 + 608;
  uint64_t v32 = (std::string *)(a1 + 616);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v32, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v33 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 64CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
    if (v33 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v32->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 632) = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a1 + 64CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(void *)(a1 + 672) = a1 + 672;
  uint64_t v34 = (std::string *)(a1 + 680);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v34, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v35 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 704) = 0;
    if (v35 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v34->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 696) = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a1 + 704) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(void *)(a1 + 736) = a1 + 736;
  double v36 = (std::string *)(a1 + 744);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v36, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v37 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a1 + 768) = 0;
    if (v37 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(a1 + 76CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a1 + 768) = 0;
  }
  uint64_t v38 = (std::string *)(a1 + 800);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v38, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v39 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    *(void *)(a1 + 816) = *((void *)&a2->__r_.__value_.__l + 2);
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
  }
  long long v71 = 0u;
  *(_OWORD *)long long v70 = 0u;
  *(_OWORD *)unsigned int v69 = 0u;
  __int16 v72 = 23553;
  char v73 = 1;
  memset(v74, 0, sizeof(v74));
  int v75 = 1065353216;
  memset(v76, 0, sizeof(v76));
  memset(v78, 0, sizeof(v78));
  int v77 = 1065353216;
  int v79 = 1065353216;
  char v80 = 0;
  MEMORY[0x22A614700](v69, ",{}[]");
  LOBYTE(v72) = a3;
  HIBYTE(v72) = a4;
  char v73 = 1;
  if (v74 != (void *)a5)
  {
    int v75 = *(_DWORD *)(a5 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v74, *(uint64_t **)(a5 + 16), 0);
  }
  if (v76 != (_OWORD *)a6)
  {
    int v77 = *(_DWORD *)(a6 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v76, *(uint64_t **)(a6 + 16), 0);
  }
  if (v78 != (void *)a7)
  {
    int v79 = *(_DWORD *)(a7 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v78, *(uint64_t **)(a7 + 16), 0);
  }
  char v80 = a8;
  *(_OWORD *)unsigned int v58 = 0u;
  long long v59 = 0u;
  *(_OWORD *)uint64_t v57 = 0u;
  __int16 v60 = 23553;
  char v61 = 1;
  memset(v62, 0, sizeof(v62));
  int v63 = 1065353216;
  memset(v64, 0, sizeof(v64));
  memset(v66, 0, sizeof(v66));
  int v65 = 1065353216;
  int v67 = 1065353216;
  char v68 = 0;
  MEMORY[0x22A614700](v57, " ,\t{}[]:;");
  LOBYTE(v6CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = a3;
  HIBYTE(v6CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = a4;
  char v61 = 1;
  if (v62 != (void *)a5)
  {
    int v63 = *(_DWORD *)(a5 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v62, *(uint64_t **)(a5 + 16), 0);
  }
  if (v64 != (_OWORD *)a6)
  {
    int v65 = *(_DWORD *)(a6 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v64, *(uint64_t **)(a6 + 16), 0);
  }
  if (v66 != (void *)a7)
  {
    int v67 = *(_DWORD *)(a7 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v66, *(uint64_t **)(a7 + 16), 0);
  }
  char v68 = a8;
  *(_OWORD *)unsigned int v46 = 0u;
  long long v47 = 0u;
  *(_OWORD *)double v45 = 0u;
  __int16 v48 = 23553;
  char v49 = 1;
  memset(v50, 0, sizeof(v50));
  int v51 = 1065353216;
  memset(v52, 0, sizeof(v52));
  memset(v54, 0, sizeof(v54));
  int v53 = 1065353216;
  int v55 = 1065353216;
  char v56 = 0;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    unint64_t size = a2->__r_.__value_.__l.__size_;
  }
  else {
    unint64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  if (size >= 2) {
    unint64_t v41 = (std::string *)&v46[1];
  }
  else {
    unint64_t v41 = (std::string *)v45;
  }
  std::string::operator=(v41, a2);
  LOBYTE(v48) = a3;
  HIBYTE(v48) = a4;
  char v49 = 1;
  if (v50 != (void *)a5)
  {
    int v51 = *(_DWORD *)(a5 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v50, *(uint64_t **)(a5 + 16), 0);
  }
  if (v52 != (_OWORD *)a6)
  {
    int v53 = *(_DWORD *)(a6 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v52, *(uint64_t **)(a6 + 16), 0);
  }
  if (v54 != (void *)a7)
  {
    int v55 = *(_DWORD *)(a7 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v54, *(uint64_t **)(a7 + 16), 0);
  }
  char v56 = a8;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((long long *)v45, &__p);
  LOWORD(v81) = 0;
  v82[0] = &__p;
  v82[1] = &v81;
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l>>(a1 + 736, (uint64_t)v82);
}

void sub_223EABD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (*(char *)(a26 + 31) < 0) {
    operator delete(*a11);
  }
  _Unwind_Resume(a1);
}

void sub_223EABFD4()
{
}

void sub_223EABFDC()
{
}

void boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>(long long *a1@<X1>, std::string *a2@<X8>)
{
  parser_impl::parser_config::parser_config(&v3, a1);
  parser_impl::parser_config::parser_config(&v9, (long long *)&v3);
  parser_impl::parser_config::parser_config(a2, (long long *)&v9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v6);
  if (v5 < 0) {
    operator delete(v4);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_223EAC0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l>::~expr(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      atomic_ullong *volatile v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        atomic_ullong *volatile v10 = (void **)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        uint64_t v4 = (uint64_t *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        uint64_t v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_multi<std::string const&>(a1, (uint64_t)(v4 + 2));
    uint64_t v4 = (uint64_t *)*v4;
  }
}

void sub_223EAC234(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_223EAC250(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(void *a1, void *a2)
{
  uint64_t v4 = (unsigned __int8 *)(a2 + 2);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  uint64_t inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    atomic_ullong *volatile v2 = __p;
    do
    {
      std::string v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      atomic_ullong *volatile v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = a1 + 32;
  float v7 = *(float *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    BOOL v10 = 1;
    if (v8 >= 3) {
      BOOL v10 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v8);
    unint64_t v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<false>(a1, v13);
    unint64_t v8 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = a2;
    if (v8 <= a2) {
      unint64_t v16 = a2 % v8;
    }
  }
  else
  {
    unint64_t v16 = (v8 - 1) & a2;
  }
  int v17 = *(unsigned __int8 **)(*(void *)a1 + 8 * v16);
  if (v17)
  {
    uint64_t v18 = *(unsigned __int8 **)v17;
    if (*(void *)v17)
    {
      int v19 = 0;
      do
      {
        unint64_t v20 = *((void *)v18 + 1);
        if (v15 > 1)
        {
          unint64_t v21 = *((void *)v18 + 1);
          if (v20 >= v8) {
            unint64_t v21 = v20 % v8;
          }
        }
        else
        {
          unint64_t v21 = v20 & (v8 - 1);
        }
        if (v21 != v16) {
          break;
        }
        int v22 = v20 == a2 ? std::equal_to<std::string>::operator()[abi:ne180100](v6, v18 + 16, a3) : 0;
        if (v19 & (v22 ^ 1)) {
          break;
        }
        v19 |= v22;
        int v17 = *(unsigned __int8 **)v17;
        uint64_t v18 = *(unsigned __int8 **)v17;
      }
      while (*(void *)v17);
    }
  }
  return v17;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v12 = *v7;
      if (*v7)
      {
        unint64_t v18 = v9.u32[0];
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            uint64_t v7 = (unsigned __int8 **)v12;
          }
          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            uint8x8_t v14 = *(unsigned __int8 **)v12;
            if (*(void *)v12)
            {
              unint64_t v15 = v12;
              while (1)
              {
                int v16 = std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v12 + 16, v14 + 16);
                int v17 = *(unsigned __int8 **)v15;
                if (!v16) {
                  break;
                }
                uint8x8_t v14 = *(unsigned __int8 **)v17;
                unint64_t v15 = *(unsigned __int8 **)v15;
                if (!*(void *)v17) {
                  goto LABEL_32;
                }
              }
              uint8x8_t v14 = *(unsigned __int8 **)v15;
              int v17 = v15;
LABEL_32:
              unint64_t v10 = v18;
            }
            else
            {
              int v17 = v12;
            }
            void *v7 = v14;
            *(void *)int v17 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = (unsigned __int8 **)v12;
            unint64_t v8 = v13;
          }
          unint64_t v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_multi<std::string const&>(void *a1, uint64_t a2)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node<std::string const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v4);
}

void sub_223EAC784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node<std::string const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x28uLL);
  unint64_t v8 = v7;
  *(void *)(a3 + 8) = v6;
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 16) = 0;
  uint8x8_t v9 = v7 + 16;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    _OWORD *v9 = *(_OWORD *)a2;
    *((void *)v7 + 4) = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)v9);
  *((void *)v8 + 1) = result;
  return result;
}

void sub_223EAC848(_Unwind_Exception *a1)
{
  *atomic_ullong *volatile v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

std::string *parser_impl::parser_config::parser_config(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  __int16 v6 = *((_WORD *)a2 + 24);
  this[2].__r_.__value_.__s.__data_[2] = *((unsigned char *)a2 + 50);
  LOWORD(this[2].__r_.__value_.__l.__data_) = v6;
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)a2 + 56);
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[4], (uint64_t)(a2 + 6));
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[5].__r_.__value_.__r.__words[2], (uint64_t)a2 + 136);
  this[7].__r_.__value_.__s.__data_[8] = *((unsigned char *)a2 + 176);
  return this;
}

void sub_223EAC998(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_223EACA4C(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_223EACCC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_223EACD6C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  atomic_ullong *volatile v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l>>(uint64_t a1, uint64_t a2)
{
  boost::spirit::detail::make_action<boost::spirit::qi::domain,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type &>::operator()(a2, (uint64_t)v3);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)v4, (uint64_t)v3);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_6actionIN11parser_impl13string_parserENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS14_6tagns_3tag6assignENS14_7argsns_5list2INS13_INS6_9attributeILi0EEEEENS13_INS6_8argumentILi0EEEEEEELl2EEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES1R_(a1 + 32, (uint64_t)v4);
}

void sub_223EACEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_6actionIN11parser_impl13string_parserENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS14_6tagns_3tag6assignENS14_7argsns_5list2INS13_INS6_9attributeILi0EEEEENS13_INS6_8argumentILi0EEEEEEELl2EEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES1R_(uint64_t a1, uint64_t a2)
{
  parser_impl::parser_config::parser_config(&v3, (long long *)a2);
  __int16 v4 = *(_WORD *)(a2 + 184);
  char v5 = *(unsigned char *)(a2 + 186);
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)v6, a2 + 192);
  unsigned char v6[40] = *(unsigned char *)(a2 + 232);
  __int16 v7 = *(_WORD *)(a2 + 240);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEC2INSJ_6detail13parser_binderINSJ_6actionIN11parser_impl13string_parserENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS14_6tagns_3tag6assignENS14_7argsns_5list2INS13_INS6_9attributeILi0EEEEENS13_INS6_8argumentILi0EEEEEEELl2EEEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS1Q_EE5valueEiE4typeE(v8, (uint64_t)&v3);
}

void sub_223EACFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  boost::function0<void>::~function0((uint64_t *)(v21 - 80));
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(uint64_t a1, uint64_t a2)
{
  __int16 v4 = parser_impl::parser_config::parser_config((std::string *)a1, (long long *)a2);
  __int16 v5 = *(_WORD *)(a2 + 184);
  v4[7].__r_.__value_.__s.__data_[18] = *(unsigned char *)(a2 + 186);
  LOWORD(v4[7].__r_.__value_.__r.__words[2]) = v5;
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)&v4[8], a2 + 192);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_WORD *)(a1 + 24CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = *(_WORD *)(a2 + 240);
  return a1;
}

void sub_223EAD0C4(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 96);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 56);
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,turi::flexible_type>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type> const&>(a1, (unsigned __int8 *)i + 16, (std::string *)(i + 2));
  return a1;
}

void sub_223EAD160(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type> const&>(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  __int16 v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__construct_node_hash<std::pair<std::string const,turi::flexible_type> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_223EAD3E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__construct_node_hash<std::pair<std::string const,turi::flexible_type> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t result = std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_223EAD45C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  atomic_ullong *volatile v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  atomic_ullong *volatile v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    atomic_ullong *volatile v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      atomic_ullong *volatile v2 = v3;
    }
    while (v3);
  }
}

void boost::spirit::detail::make_action<boost::spirit::qi::domain,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type &>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  boost::spirit::detail::make_terminal_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,mpl_::void_ const&,boost::spirit::unused_type &,boost::spirit::qi::domain>::operator()(*(long long **)a1, &v5);
  __int16 v4 = **(_WORD **)(a1 + 8);
  boost::fusion::cons<parser_impl::string_parser,boost::fusion::cons<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>,boost::fusion::nil_>>::cons((uint64_t)v12, (uint64_t)&v5, &v4);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  if (v7 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::action(a2, (uint64_t)v12, v19[24]);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_223EAD648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
}

uint64_t boost::fusion::cons<parser_impl::string_parser,boost::fusion::cons<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>,boost::fusion::nil_>>::cons(uint64_t a1, uint64_t a2, _WORD *a3)
{
  __int16 v6 = parser_impl::parser_config::parser_config((std::string *)a1, (long long *)a2);
  __int16 v7 = *(_WORD *)(a2 + 184);
  v6[7].__r_.__value_.__s.__data_[18] = *(unsigned char *)(a2 + 186);
  LOWORD(v6[7].__r_.__value_.__r.__words[2]) = v7;
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)&v6[8], a2 + 192);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_WORD *)(a1 + 24CoreML::Specification::CoreMLModels::Gazetteer::New(this, 0) = *a3;
  return a1;
}

void sub_223EAD6D0(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 96);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 56);
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((void **)v1);
  _Unwind_Resume(a1);
}

void boost::spirit::detail::make_terminal_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,mpl_::void_ const&,boost::spirit::unused_type &,boost::spirit::qi::domain>::operator()(long long *a1@<X1>, std::string *a2@<X8>)
{
  parser_impl::parser_config::parser_config(&v3, a1);
  boost::spirit::qi::make_primitive<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>,boost::spirit::unused_type,void>::operator()<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>((long long *)&v3, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v6);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_223EAD788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::spirit::qi::make_primitive<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>,boost::spirit::unused_type,void>::operator()<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>(long long *a1@<X1>, std::string *a2@<X8>)
{
  parser_impl::parser_config::parser_config(&v3, a1);
  parser_impl::string_parser::string_parser(a2, (uint64_t)&v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v6);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_223EAD814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l>::~expr((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *parser_impl::string_parser::string_parser(std::string *a1, uint64_t a2)
{
  __int16 v4 = parser_impl::parser_config::parser_config(a1, (long long *)a2);
  *(_OWORD *)&v4[8].__r_.__value_.__l.__data_ = 0u;
  uint64_t v5 = (uint64_t)&v4[8];
  v4[7].__r_.__value_.__s.__data_[16] = 0;
  v4[7].__r_.__value_.__s.__data_[18] = 0;
  *(_OWORD *)&v4[8].__r_.__value_.__r.__words[2] = 0u;
  LODWORD(v4[9].__r_.__value_.__r.__words[1]) = 1065353216;
  v4[9].__r_.__value_.__s.__data_[16] = 0;
  if (*(char *)(a2 + 47) < 0) {
    uint64_t v6 = *(void *)(a2 + 32);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 47);
  }
  a1[7].__r_.__value_.__s.__data_[16] = v6 != 0;
  if (*(char *)(a2 + 47) < 0) {
    uint64_t v7 = *(void *)(a2 + 32);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 47);
  }
  a1[7].__r_.__value_.__s.__data_[18] = v7 == 1;
  if (v6)
  {
    uint64_t v8 = (void *)(a2 + 24);
    if (*(char *)(a2 + 47) < 0) {
      uint64_t v8 = (void *)*v8;
    }
    a1[7].__r_.__value_.__s.__data_[17] = *(unsigned char *)v8;
  }
  for (uint64_t i = *(uint64_t **)(a2 + 72); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0) {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[2], i[3]);
    }
    else {
      std::string __p = *(std::string *)(i + 2);
    }
    p_p = &__p;
    uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
    uint64_t v11 = v10;
    switch(v10[52])
    {
      case 2u:
        if (atomic_fetch_add(*((atomic_ullong *volatile *)v10 + 5), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v12 = *((void *)v10 + 5);
          if (!v12) {
            goto LABEL_47;
          }
          if (*(char *)(v12 + 31) < 0) {
            operator delete(*(void **)(v12 + 8));
          }
          char v13 = (void *)v12;
          uint64_t v14 = 0x1012C404EF22A49;
          goto LABEL_46;
        }
        break;
      case 3u:
        if (atomic_fetch_add(*((atomic_ullong *volatile *)v10 + 5), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          char v15 = (void *)*((void *)v10 + 5);
          if (!v15) {
            goto LABEL_47;
          }
          uint64_t v16 = (void *)v15[1];
          if (v16)
          {
            void v15[2] = v16;
            operator delete(v16);
          }
          char v13 = v15;
          uint64_t v14 = 0x1080C409938AC02;
          goto LABEL_46;
        }
        break;
      case 4u:
        if (atomic_fetch_add(*((atomic_ullong *volatile *)v10 + 5), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v17 = *((void *)v10 + 5);
          if (!v17) {
            goto LABEL_47;
          }
          p_p = (std::string *)(v17 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
          goto LABEL_32;
        }
        break;
      case 5u:
        if (atomic_fetch_add(*((atomic_ullong *volatile *)v10 + 5), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v17 = *((void *)v10 + 5);
          if (!v17) {
            goto LABEL_47;
          }
          p_p = (std::string *)(v17 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
LABEL_32:
          char v13 = (void *)v17;
          uint64_t v14 = 0x1020C405E66F15BLL;
          goto LABEL_46;
        }
        break;
      case 8u:
        if (atomic_fetch_add(*((atomic_ullong *volatile *)v10 + 5), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v18 = *((void *)v10 + 5);
          if (!v18) {
            goto LABEL_47;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v18 + 16));
          char v13 = (void *)v18;
          unsigned int v19 = -235920773;
          goto LABEL_45;
        }
        break;
      case 9u:
        if (atomic_fetch_add(*((atomic_ullong *volatile *)v10 + 5), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v20 = (void *)*((void *)v10 + 5);
          if (v20)
          {
            size_t v21 = (void *)v20[6];
            if (v21)
            {
              v20[7] = v21;
              operator delete(v21);
            }
            int v22 = (void *)v20[3];
            if (v22)
            {
              v20[4] = v22;
              operator delete(v22);
            }
            unint64_t v23 = (std::__shared_weak_count *)v20[2];
            if (v23) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
            }
            char v13 = v20;
            unsigned int v19 = 2071181815;
LABEL_45:
            uint64_t v14 = v19 | 0x1030C4000000000;
LABEL_46:
            MEMORY[0x22A614FA0](v13, v14);
          }
LABEL_47:
          *((void *)v11 + 5) = 0;
        }
        break;
      default:
        break;
    }
    *((void *)v11 + 5) = 0;
    *((_DWORD *)v11 + 12) = 0;
    v11[52] = 7;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  for (unsigned __int16 j = *(uint64_t **)(a2 + 112); j; unsigned __int16 j = (uint64_t *)*j)
  {
    if (*((char *)j + 39) < 0) {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)j[2], j[3]);
    }
    else {
      std::string __p = *(std::string *)(j + 2);
    }
    p_p = &__p;
    int v25 = std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
    uint64_t v26 = v25;
    switch(v25[52])
    {
      case 2u:
        if (atomic_fetch_add(*((atomic_ullong *volatile *)v25 + 5), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v27 = *((void *)v25 + 5);
          if (!v27) {
            goto LABEL_87;
          }
          if (*(char *)(v27 + 31) < 0) {
            operator delete(*(void **)(v27 + 8));
          }
          uint64_t v28 = (void *)v27;
          uint64_t v29 = 0x1012C404EF22A49;
          goto LABEL_86;
        }
        break;
      case 3u:
        if (atomic_fetch_add(*((atomic_ullong *volatile *)v25 + 5), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v30 = (void *)*((void *)v25 + 5);
          if (!v30) {
            goto LABEL_87;
          }
          int v31 = (void *)v30[1];
          if (v31)
          {
            v30[2] = v31;
            operator delete(v31);
          }
          uint64_t v28 = v30;
          uint64_t v29 = 0x1080C409938AC02;
          goto LABEL_86;
        }
        break;
      case 4u:
        if (atomic_fetch_add(*((atomic_ullong *volatile *)v25 + 5), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v32 = *((void *)v25 + 5);
          if (!v32) {
            goto LABEL_87;
          }
          p_p = (std::string *)(v32 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
          goto LABEL_72;
        }
        break;
      case 5u:
        if (atomic_fetch_add(*((atomic_ullong *volatile *)v25 + 5), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v32 = *((void *)v25 + 5);
          if (!v32) {
            goto LABEL_87;
          }
          p_p = (std::string *)(v32 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
LABEL_72:
          uint64_t v28 = (void *)v32;
          uint64_t v29 = 0x1020C405E66F15BLL;
          goto LABEL_86;
        }
        break;
      case 8u:
        if (atomic_fetch_add(*((atomic_ullong *volatile *)v25 + 5), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v33 = *((void *)v25 + 5);
          if (!v33) {
            goto LABEL_87;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v33 + 16));
          uint64_t v28 = (void *)v33;
          unsigned int v34 = -235920773;
          goto LABEL_85;
        }
        break;
      case 9u:
        if (atomic_fetch_add(*((atomic_ullong *volatile *)v25 + 5), 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          int v35 = (void *)*((void *)v25 + 5);
          if (v35)
          {
            double v36 = (void *)v35[6];
            if (v36)
            {
              v35[7] = v36;
              operator delete(v36);
            }
            int v37 = (void *)v35[3];
            if (v37)
            {
              void v35[4] = v37;
              operator delete(v37);
            }
            uint64_t v38 = (std::__shared_weak_count *)v35[2];
            if (v38) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v38);
            }
            uint64_t v28 = v35;
            unsigned int v34 = 2071181815;
LABEL_85:
            uint64_t v29 = v34 | 0x1030C4000000000;
LABEL_86:
            MEMORY[0x22A614FA0](v28, v29);
          }
LABEL_87:
          *((void *)v26 + 5) = 0;
        }
        break;
      default:
        break;
    }
    *((_DWORD *)v26 + 12) = 0;
    v26[52] = 0;
    *((void *)v26 + 5) = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  for (uint64_t k = *(uint64_t **)(a2 + 152); k; uint64_t k = (uint64_t *)*k)
  {
    if (*((char *)k + 39) < 0) {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)k[2], k[3]);
    }
    else {
      std::string __p = *(std::string *)(k + 2);
    }
    p_p = &__p;
    unint64_t v40 = std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
    unint64_t v41 = v40 + 40;
    switch(v40[52])
    {
      case 2u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v42 = *(atomic_ullong *volatile *)v41;
          if (!*(void *)v41) {
            goto LABEL_127;
          }
          if (*((char *)v42 + 31) < 0) {
            operator delete((void *)v42[1]);
          }
          atomic_ullong *volatile v43 = v42;
          uint64_t v44 = 0x1012C404EF22A49;
          goto LABEL_126;
        }
        break;
      case 3u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v45 = *(atomic_ullong *volatile *)v41;
          if (!*(void *)v41) {
            goto LABEL_127;
          }
          unsigned int v46 = (void *)v45[1];
          if (v46)
          {
            v45[2] = (atomic_ullong)v46;
            operator delete(v46);
          }
          atomic_ullong *volatile v43 = v45;
          uint64_t v44 = 0x1080C409938AC02;
          goto LABEL_126;
        }
        break;
      case 4u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v47 = *(atomic_ullong *volatile *)v41;
          if (!*(void *)v41) {
            goto LABEL_127;
          }
          p_p = (std::string *)(v47 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
          goto LABEL_112;
        }
        break;
      case 5u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v47 = *(atomic_ullong *volatile *)v41;
          if (!*(void *)v41) {
            goto LABEL_127;
          }
          p_p = (std::string *)(v47 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
LABEL_112:
          atomic_ullong *volatile v43 = v47;
          uint64_t v44 = 0x1020C405E66F15BLL;
          goto LABEL_126;
        }
        break;
      case 8u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v48 = *(atomic_ullong *volatile *)v41;
          if (!*(void *)v41) {
            goto LABEL_127;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v48 + 2);
          atomic_ullong *volatile v43 = v48;
          unsigned int v49 = -235920773;
          goto LABEL_125;
        }
        break;
      case 9u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v50 = *(atomic_ullong *volatile *)v41;
          if (*(void *)v41)
          {
            int v51 = (void *)v50[6];
            if (v51)
            {
              v50[7] = (atomic_ullong)v51;
              operator delete(v51);
            }
            uint64_t v52 = (void *)v50[3];
            if (v52)
            {
              void v50[4] = (atomic_ullong)v52;
              operator delete(v52);
            }
            int v53 = (std::__shared_weak_count *)v50[2];
            if (v53) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v53);
            }
            atomic_ullong *volatile v43 = v50;
            unsigned int v49 = 2071181815;
LABEL_125:
            uint64_t v44 = v49 | 0x1030C4000000000;
LABEL_126:
            MEMORY[0x22A614FA0](v43, v44);
          }
LABEL_127:
          *(void *)unint64_t v41 = 0;
        }
        break;
      default:
        break;
    }
    *(void *)(v41 + 5) = 0;
    *(void *)unint64_t v41 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  a1[9].__r_.__value_.__s.__data_[16] = *(unsigned char *)(a2 + 176);
  return a1;
}