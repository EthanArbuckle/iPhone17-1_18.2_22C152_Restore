unsigned int *png_do_expand(unsigned int *result, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3;
  int v4;
  char *v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned __int8 *v16;
  unsigned char *v17;
  int v18;
  int v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  char *v27;
  int v28;
  char v29;
  unsigned __int8 v30;
  unsigned int v31;
  int v32;
  unsigned __int8 *v33;
  char *v34;
  int v35;
  char v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  unsigned char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  char v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  char v53;
  char v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;

  v3 = *result;
  if (!*((unsigned char *)result + 16))
  {
    if (a3) {
      v13 = a3[4];
    }
    else {
      v13 = 0;
    }
    v14 = *((unsigned __int8 *)result + 17);
    if (v14 > 7) {
      goto LABEL_59;
    }
    switch(v14)
    {
      case 1u:
        v13 = ((int)(v13 << 31) >> 31);
        if (v3)
        {
          v32 = -(int)v3 & 7;
          v33 = (unsigned __int8 *)(a2 + ((v3 - 1) >> 3));
          v34 = (char *)(v3 + a2 - 1);
          v35 = *result;
          do
          {
            if ((*v33 >> v32)) {
              v36 = -1;
            }
            else {
              v36 = 0;
            }
            *v34-- = v36;
            v37 = v32 == 7;
            if (v32 == 7) {
              v32 = 0;
            }
            else {
              ++v32;
            }
            v33 -= v37;
            --v35;
          }
          while (v35);
          goto LABEL_56;
        }
        break;
      case 2u:
        v13 = 85 * (v13 & 3);
        if (v3)
        {
          v38 = ~(2 * v3 + 6) & 6;
          v39 = (unsigned __int8 *)(a2 + ((v3 - 1) >> 2));
          v40 = (unsigned char *)(v3 + a2 - 1);
          v41 = *result;
          do
          {
            *v40-- = 85 * ((*v39 >> v38) & 3);
            v20 = v38 == 6;
            v42 = v38 == 6;
            v38 += 2;
            if (v20) {
              v38 = 0;
            }
            v39 -= v42;
            --v41;
          }
          while (v41);
          goto LABEL_56;
        }
        break;
      case 4u:
        v13 = v13 & 0xF | (16 * (v13 & 0xF));
        if (v3)
        {
          v15 = 4 * (*result & 1);
          v16 = (unsigned __int8 *)(a2 + ((v3 - 1) >> 1));
          v17 = (unsigned char *)(v3 + a2 - 1);
          v18 = *result;
          do
          {
            v19 = *v16 >> v15;
            v20 = v15 == 0;
            v21 = v15 == 0;
            *v17-- = v19 & 0xF | (16 * v19);
            v22 = !v20;
            v15 = 4 * v21;
            v16 -= v22;
            --v18;
          }
          while (v18);
          goto LABEL_56;
        }
        break;
      default:
LABEL_56:
        v43 = v3;
LABEL_58:
        v14 = 8;
        *((unsigned char *)result + 17) = 8;
        *((unsigned char *)result + 19) = 8;
        *((void *)result + 1) = v43;
LABEL_59:
        if (!a3) {
          return result;
        }
        if (v14 == 16)
        {
          if (v3)
          {
            v49 = *((void *)result + 1);
            v50 = (char *)(a2 + 2 * v49 - 1);
            v51 = (char *)(a2 + v49 - 1);
            v52 = v3;
            do
            {
              if (*(v51 - 1) == v13 >> 8 && *v51 == v13) {
                v53 = 0;
              }
              else {
                v53 = -1;
              }
              *v50 = v53;
              *(v50 - 1) = v53;
              *(v50 - 2) = *v51;
              v54 = *(v51 - 1);
              v51 -= 2;
              *(v50 - 3) = v54;
              v50 -= 4;
              --v52;
            }
            while (v52);
          }
        }
        else if (v14 == 8 && v3)
        {
          v44 = (char *)(a2 + 2 * v3 - 1);
          v45 = (char *)(v3 + a2 - 1);
          v46 = v3;
          do
          {
            if (*v45 == v13) {
              v47 = 0;
            }
            else {
              v47 = -1;
            }
            *v44 = v47;
            v48 = *v45--;
            *(v44 - 1) = v48;
            v44 -= 2;
            --v46;
          }
          while (v46);
        }
        *((unsigned char *)result + 16) = 4;
        *((unsigned char *)result + 18) = 2;
        v30 = 2 * *((unsigned char *)result + 17);
        v31 = v30;
        goto LABEL_77;
    }
    v43 = 0;
    goto LABEL_58;
  }
  if (!a3 || *((unsigned char *)result + 16) != 2) {
    return result;
  }
  v4 = *((unsigned __int8 *)result + 17);
  if (v4 == 16)
  {
    if (v3)
    {
      v23 = a3[1];
      v24 = a3[2];
      v25 = a3[3];
      v26 = (char *)(a2 + 8 * v3 - 1);
      v27 = (char *)(*((void *)result + 1) + a2 - 3);
      v28 = *result;
      do
      {
        if (v23 >> 8 == *(v27 - 3)
          && *(v27 - 2) == v23
          && v24 >> 8 == *(v27 - 1)
          && *v27 == v24
          && v25 >> 8 == v27[1]
          && v27[2] == v25)
        {
          v29 = 0;
        }
        else
        {
          v29 = -1;
        }
        *v26 = v29;
        *(v26 - 1) = v29;
        *(v26 - 2) = v27[2];
        *(v26 - 3) = v27[1];
        *(v26 - 4) = *v27;
        *(v26 - 5) = *(v27 - 1);
        *(v26 - 6) = *(v27 - 2);
        *(v26 - 7) = *(v27 - 3);
        v26 -= 8;
        v27 -= 6;
        --v28;
      }
      while (v28);
    }
  }
  else if (v4 == 8 && v3)
  {
    v5 = (char *)(a2 + 4 * v3 - 1);
    v6 = (char *)(a2 + *((void *)result + 1) - 1);
    v7 = *((unsigned __int8 *)a3 + 6);
    v8 = *((unsigned __int8 *)a3 + 4);
    v9 = *((unsigned __int8 *)a3 + 2);
    v10 = *result;
    do
    {
      if (*(v6 - 2) == v9 && *(v6 - 1) == v8 && *v6 == v7) {
        v11 = 0;
      }
      else {
        v11 = -1;
      }
      *v5 = v11;
      *(v5 - 1) = *v6;
      *(v5 - 2) = *(v6 - 1);
      v12 = *(v6 - 2);
      v6 -= 3;
      *(v5 - 3) = v12;
      v5 -= 4;
      --v10;
    }
    while (v10);
  }
  *((unsigned char *)result + 16) = 6;
  *((unsigned char *)result + 18) = 4;
  v30 = 4 * *((unsigned char *)result + 17);
  v31 = v30;
LABEL_77:
  *((unsigned char *)result + 19) = v30;
  v55 = v31 >= 8;
  v56 = (v30 * (unint64_t)v3 + 7) >> 3;
  v57 = v3 * (unint64_t)(v30 >> 3);
  if (!v55) {
    v57 = v56;
  }
  *((void *)result + 1) = v57;
  return result;
}

unsigned int *png_do_gray_to_rgb(unsigned int *result, uint64_t a2)
{
  unsigned int v2 = *((unsigned __int8 *)result + 17);
  if (v2 >= 8)
  {
    int v3 = *((unsigned __int8 *)result + 16);
    if ((v3 & 2) == 0)
    {
      uint64_t v4 = *result;
      int v5 = *result;
      if (v3 == 4)
      {
        if (v2 == 8)
        {
          if (v5)
          {
            v9 = (unsigned char *)(a2 + 2 * v4 - 1);
            v10 = &v9[2 * v4];
            do
            {
              unsigned char *v10 = *v9;
              *(v10 - 1) = *(v9 - 1);
              *(v10 - 2) = *(v9 - 1);
              *(v10 - 3) = *(v9 - 1);
              v10 -= 4;
              v9 -= 2;
              --v5;
            }
            while (v5);
          }
        }
        else if (v5)
        {
          v13 = (unsigned char *)(a2 + 4 * v4 - 1);
          v14 = &v13[4 * v4];
          do
          {
            unsigned char *v14 = *v13;
            *(v14 - 1) = *(v13 - 1);
            *(v14 - 2) = *(v13 - 2);
            *(v14 - 3) = *(v13 - 3);
            *(v14 - 4) = *(v13 - 2);
            *(v14 - 5) = *(v13 - 3);
            *(v14 - 6) = *(v13 - 2);
            *(v14 - 7) = *(v13 - 3);
            v14 -= 8;
            v13 -= 4;
            --v5;
          }
          while (v5);
        }
      }
      else if (!*((unsigned char *)result + 16))
      {
        if (v2 == 8)
        {
          if (v5)
          {
            v6 = (char *)(a2 + v4 - 1);
            v7 = &v6[2 * v4];
            do
            {
              char *v7 = *v6;
              *(v7 - 1) = *v6;
              char v8 = *v6--;
              *(v7 - 2) = v8;
              v7 -= 3;
              --v5;
            }
            while (v5);
          }
        }
        else if (v5)
        {
          v11 = (unsigned char *)(a2 + 2 * v4 - 1);
          v12 = &v11[4 * v4];
          do
          {
            unsigned char *v12 = *v11;
            *(v12 - 1) = *(v11 - 1);
            *(v12 - 2) = *v11;
            *(v12 - 3) = *(v11 - 1);
            *(v12 - 4) = *v11;
            *(v12 - 5) = *(v11 - 1);
            v12 -= 6;
            v11 -= 2;
            --v5;
          }
          while (v5);
        }
      }
      char v15 = *((unsigned char *)result + 18) + 2;
      *((unsigned char *)result + 18) = v15;
      *((unsigned char *)result + 16) |= 2u;
      unsigned __int8 v16 = *((unsigned char *)result + 17) * v15;
      *((unsigned char *)result + 19) = v16;
      unint64_t v17 = (v16 * (unint64_t)v4 + 7) >> 3;
      unint64_t v18 = v4 * (unint64_t)(v16 >> 3);
      if (v16 < 8u) {
        unint64_t v18 = v17;
      }
      *((void *)result + 1) = v18;
    }
  }
  return result;
}

uint64_t png_read_sig(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 *)(result + 613);
  if (v2 <= 7)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 1132) = 17;
    uint64_t v4 = a2 + 44;
    png_read_data(result);
    *(unsigned char *)(v3 + 613) = 8;
    result = png_sig_cmp(v4, v2, 8 - v2);
    if (result)
    {
      if (v2 <= 3 && png_sig_cmp(v4, v2, 4 - v2)) {
        int v5 = "Not a PNG file";
      }
      else {
        int v5 = "PNG file corrupted by ASCII conversion";
      }
      png_error(v3, v5);
    }
    if (v2 <= 2) {
      *(_DWORD *)(v3 + 292) |= 0x1000u;
    }
  }
  return result;
}

uint64_t png_read_chunk_header(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 1132) = 33;
  png_read_data(a1);
  uint64_t v2 = bswap32(v4);
  if ((v2 & 0x80000000) != 0) {
    png_error(a1, "PNG unsigned integer out of range");
  }
  *(_DWORD *)(a1 + 528) = bswap32(v5);
  png_reset_crc(a1);
  png_calculate_crc(a1, (Bytef *)&v5, 4);
  png_check_chunk_name(a1, *(_DWORD *)(a1 + 528));
  png_check_chunk_length(a1, v2);
  *(_DWORD *)(a1 + 1132) = 65;
  return v2;
}

uint64_t png_check_chunk_name(uint64_t result, unsigned int a2)
{
  int v2 = 4;
  do
  {
    if (a2 - 123 < 0xFFFFFFC6 || a2 - 91 <= 5) {
      png_chunk_error(result, "invalid chunk type");
    }
    a2 >>= 8;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t png_check_chunk_length(uint64_t result, unsigned int a2)
{
  unint64_t v2 = *(void *)(result + 1064);
  if (v2 - 1 >= 0x7FFFFFFE) {
    unint64_t v2 = 0x7FFFFFFFLL;
  }
  if (*(_DWORD *)(result + 528) == 1229209940)
  {
    uint64_t v3 = 6;
    if (!*(unsigned char *)(result + 604)) {
      uint64_t v3 = 0;
    }
    unint64_t v4 = ((*(unsigned __int8 *)(result + 611) * (unint64_t)*(unsigned int *)(result + 496)) << (*(unsigned __int8 *)(result + 608) > 8u))
       + v3;
    unint64_t v5 = *(unsigned int *)(result + 500);
    if (0xFFFFFFFF / (v4 + 1) >= v5) {
      unint64_t v6 = (v4 + 1) * v5;
    }
    else {
      unint64_t v6 = 0x7FFFFFFFLL;
    }
    if (v4 + 1 < 0x7F36) {
      unint64_t v7 = v4 + 1;
    }
    else {
      unint64_t v7 = 32566;
    }
    unint64_t v8 = 5 * (v6 / v7) + v6 + 11;
    if (v8 >= 0x7FFFFFFF) {
      unint64_t v8 = 0x7FFFFFFFLL;
    }
    if (v2 <= v8) {
      unint64_t v2 = v8;
    }
  }
  if (v2 < a2) {
    png_chunk_error(result, "chunk data is too large");
  }
  return result;
}

uint64_t png_crc_read(uint64_t result, Bytef *a2, unsigned int a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = a3;
    png_read_data(result);
    return png_calculate_crc(v4, a2, v5);
  }
  return result;
}

BOOL png_crc_finish(uint64_t a1, unsigned int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2)
  {
    unsigned int v3 = a2;
    do
    {
      if (v3 >= 0x400) {
        unsigned int v4 = 1024;
      }
      else {
        unsigned int v4 = v3;
      }
      v3 -= v4;
      png_crc_read(a1, v7, v4);
    }
    while (v3);
  }
  BOOL result = png_crc_error((_DWORD *)a1);
  if (result)
  {
    int v6 = *(_DWORD *)(a1 + 296);
    if ((*(unsigned char *)(a1 + 531) & 0x20) != 0)
    {
      if ((v6 & 0x200) == 0) {
        goto LABEL_10;
      }
    }
    else if ((v6 & 0x400) != 0)
    {
LABEL_10:
      png_chunk_warning(a1, "CRC error");
      return 1;
    }
    png_chunk_error(a1, "CRC error");
  }
  return result;
}

BOOL png_crc_error(_DWORD *a1)
{
  int v2 = a1[132];
  int v3 = a1[74];
  a1[283] = 129;
  png_read_data((uint64_t)a1);
  if ((v2 & 0x20000000) != 0)
  {
    if ((~v3 & 0x300) == 0) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  return bswap32(v5) != a1[145];
}

uint64_t png_zlib_inflate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 616) || !*(_DWORD *)(a1 + 320)) {
    return inflate((z_streamp)(a1 + 312), a2);
  }
  if ((**(char **)(a1 + 312) & 0x80000000) == 0)
  {
    *(unsigned char *)(a1 + 616) = 0;
    return inflate((z_streamp)(a1 + 312), a2);
  }
  *(void *)(a1 + 360) = "invalid window size (libpng)";
  return 4294967293;
}

uint64_t png_handle_IHDR(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a1 + 292);
  if (v4)
  {
    v19 = "out of place";
    goto LABEL_13;
  }
  if (a3 != 13)
  {
    v19 = "invalid";
LABEL_13:
    png_chunk_error(a1, v19);
  }
  *(_DWORD *)(a1 + 292) = v4 | 1;
  png_crc_read(a1, (Bytef *)v20, 0xDu);
  png_crc_finish(a1, 0);
  unsigned int v6 = bswap32(v20[0]);
  if ((v6 & 0x80000000) != 0 || (unsigned int v7 = bswap32(v20[1]), (v7 & 0x80000000) != 0)) {
    png_error(a1, "PNG unsigned integer out of range");
  }
  unsigned __int8 v8 = v21;
  unint64_t v9 = v22;
  unsigned __int8 v10 = v23;
  unsigned __int8 v11 = v24;
  unsigned __int8 v12 = v25;
  *(_DWORD *)(a1 + 496) = v6;
  *(_DWORD *)(a1 + 500) = v7;
  *(unsigned char *)(a1 + 608) = v8;
  *(unsigned char *)(a1 + 604) = v12;
  *(unsigned char *)(a1 + 607) = v9;
  *(unsigned char *)(a1 + 988) = v11;
  *(unsigned char *)(a1 + 1048) = v10;
  unint64_t v13 = 0x4010201030101uLL >> (8 * v9);
  if (v9 >= 7) {
    LOBYTE(v13) = 1;
  }
  *(unsigned char *)(a1 + 611) = v13;
  unsigned __int8 v14 = v13 * v8;
  *(unsigned char *)(a1 + 610) = v14;
  BOOL v15 = v14 >= 8u;
  unint64_t v16 = (v14 * (unint64_t)v6 + 7) >> 3;
  unint64_t v17 = v6 * (unint64_t)(v14 >> 3);
  if (!v15) {
    unint64_t v17 = v16;
  }
  *(void *)(a1 + 512) = v17;
  return png_set_IHDR(a1, a2, v6, v7, v8, v9, v12, v10, v11);
}

uint64_t png_handle_PLTE(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
  {
    unint64_t v16 = "missing IHDR";
    goto LABEL_38;
  }
  if ((v4 & 2) != 0)
  {
    unint64_t v16 = "duplicate";
    goto LABEL_38;
  }
  if ((v4 & 4) != 0)
  {
    png_crc_finish(a1, a3);
    unsigned int v7 = "out of place";
    goto LABEL_7;
  }
  *(_DWORD *)(a1 + 292) = v4 | 2;
  int v6 = *(unsigned __int8 *)(a1 + 607);
  if ((v6 & 2) == 0)
  {
    png_crc_finish(a1, a3);
    unsigned int v7 = "ignored in grayscale PNG";
LABEL_7:
    return png_chunk_benign_error(a1, v7);
  }
  if (a3 > 0x300 || a3 % 3)
  {
    png_crc_finish(a1, a3);
    if (*(unsigned char *)(a1 + 607) != 3)
    {
      unsigned int v7 = "invalid";
      goto LABEL_7;
    }
    unint64_t v16 = "invalid";
LABEL_38:
    png_chunk_error(a1, v16);
  }
  if (v6 == 3) {
    int v10 = 1 << *(unsigned char *)(a1 + 608);
  }
  else {
    int v10 = 256;
  }
  if (v10 >= (int)((unsigned __int16)a3 / 3u)) {
    int v11 = (unsigned __int16)a3 / 3u;
  }
  else {
    int v11 = v10;
  }
  if (v11 >= 1)
  {
    unsigned __int8 v12 = v19;
    int v13 = v11;
    do
    {
      png_crc_read(a1, &v17, 3u);
      unsigned char *v12 = v17;
      *(_WORD *)(v12 + 1) = v18;
      v12 += 3;
      --v13;
    }
    while (v13);
  }
  png_crc_finish(a1, -3 * v11 + a3);
  uint64_t result = (uint64_t)png_set_PLTE((unsigned char *)a1, a2, v19, v11);
  if (*(_WORD *)(a1 + 600))
  {
    *(_WORD *)(a1 + 600) = 0;
    if (!a2)
    {
      unsigned __int8 v14 = "tRNS must be after";
      return png_chunk_benign_error(a1, v14);
    }
    goto LABEL_29;
  }
  if (!a2) {
    return result;
  }
  int v15 = *(_DWORD *)(a2 + 8);
  if ((v15 & 0x10) != 0)
  {
    *(_WORD *)(a1 + 600) = 0;
LABEL_29:
    *(_WORD *)(a2 + 34) = 0;
    uint64_t result = png_chunk_benign_error(a1, "tRNS must be after");
    int v15 = *(_DWORD *)(a2 + 8);
  }
  if ((v15 & 0x40) != 0) {
    uint64_t result = png_chunk_benign_error(a1, "hIST must be after");
  }
  if ((*(unsigned char *)(a2 + 8) & 0x20) != 0)
  {
    unsigned __int8 v14 = "bKGD must be after";
    return png_chunk_benign_error(a1, v14);
  }
  return result;
}

uint64_t png_handle_IEND(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((~v4 & 5) != 0) {
    png_chunk_error(a1, "out of place");
  }
  *(_DWORD *)(a1 + 292) = v4 | 0x18;
  uint64_t result = png_crc_finish(a1, a3);
  if (a3)
  {
    return png_chunk_benign_error(a1, "invalid");
  }
  return result;
}

void png_handle_gAMA(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  if ((v4 & 6) != 0)
  {
    png_crc_finish(a1, a3);
    unsigned int v5 = "out of place";
LABEL_12:
    png_chunk_benign_error(a1, v5);
    return;
  }
  if (a3 != 4)
  {
    png_crc_finish(a1, a3);
    unsigned int v5 = "invalid";
    goto LABEL_12;
  }
  png_crc_read(a1, (Bytef *)&v9, 4u);
  if (!png_crc_finish(a1, 0))
  {
    int v7 = bswap32(v9);
    if (v7 < 0) {
      int v8 = -1;
    }
    else {
      int v8 = v7;
    }
    png_colorspace_set_gamma(a1, a1 + 1176, v8);
    png_colorspace_sync(a1, a2);
  }
}

uint64_t png_handle_sBIT(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  if ((v4 & 6) != 0)
  {
    png_crc_finish(a1, a3);
    int v6 = "out of place";
LABEL_4:
    return png_chunk_benign_error(a1, v6);
  }
  if (a2 && (*(unsigned char *)(a2 + 8) & 2) != 0)
  {
    png_crc_finish(a1, a3);
    int v6 = "duplicate";
    goto LABEL_4;
  }
  int v9 = *(unsigned __int8 *)(a1 + 607);
  if (v9 == 3)
  {
    unsigned __int8 v10 = 8;
  }
  else
  {
    int v9 = *(unsigned __int8 *)(a1 + 611);
    unsigned __int8 v10 = *(unsigned char *)(a1 + 608);
  }
  if (a3 <= 4 && v9 == a3)
  {
    int v19 = 16843009 * v10;
    png_crc_read(a1, (Bytef *)&v19, a3);
    uint64_t result = png_crc_finish(a1, 0);
    if (!result)
    {
      if (a3)
      {
        uint64_t v11 = a3;
        unsigned __int8 v12 = &v19;
        while (1)
        {
          char v13 = *(unsigned char *)v12;
          unsigned __int8 v12 = (int *)((char *)v12 + 1);
          if ((v13 - 1) >= v10) {
            return png_chunk_benign_error(a1, "invalid");
          }
          if (!--v11) {
            goto LABEL_19;
          }
        }
      }
      else
      {
LABEL_19:
        char v14 = v19;
        if ((*(unsigned char *)(a1 + 607) & 2) != 0)
        {
          int v15 = (char *)&v19 + 3;
          char v16 = BYTE1(v19);
          char v17 = BYTE2(v19);
        }
        else
        {
          int v15 = (char *)&v19 + 1;
          *(unsigned char *)(a1 + 723) = v19;
          char v16 = v14;
          char v17 = v14;
        }
        char v18 = *v15;
        *(unsigned char *)(a1 + 720) = v14;
        *(unsigned char *)(a1 + 721) = v16;
        *(unsigned char *)(a1 + 722) = v17;
        *(unsigned char *)(a1 + 724) = v18;
        return png_set_sBIT(a1, a2, a1 + 720);
      }
    }
  }
  else
  {
    png_chunk_benign_error(a1, "invalid");
    return png_crc_finish(a1, a3);
  }
  return result;
}

void png_handle_cHRM(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  if ((v4 & 6) != 0)
  {
    png_crc_finish(a1, a3);
    unsigned int v5 = "out of place";
LABEL_42:
    png_chunk_benign_error(a1, v5);
    return;
  }
  if (a3 != 32)
  {
    png_crc_finish(a1, a3);
    unsigned int v5 = "invalid";
    goto LABEL_42;
  }
  png_crc_read(a1, (Bytef *)v26, 0x20u);
  if (png_crc_finish(a1, 0)) {
    return;
  }
  int v7 = bswap32(v26[0]);
  if (v7 < 0) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  int v9 = bswap32(v26[1]);
  if (v9 < 0) {
    int v10 = -1;
  }
  else {
    int v10 = v9;
  }
  v25[6] = v8;
  v25[7] = v10;
  int v11 = bswap32(v26[2]);
  if (v11 < 0) {
    int v12 = -1;
  }
  else {
    int v12 = v11;
  }
  int v13 = bswap32(v26[3]);
  if (v13 < 0) {
    int v14 = -1;
  }
  else {
    int v14 = v13;
  }
  v25[0] = v12;
  v25[1] = v14;
  int v15 = bswap32(v26[4]);
  if (v15 < 0) {
    int v16 = -1;
  }
  else {
    int v16 = v15;
  }
  int v17 = bswap32(v26[5]);
  if (v17 < 0) {
    int v18 = -1;
  }
  else {
    int v18 = v17;
  }
  v25[2] = v16;
  v25[3] = v18;
  int v19 = bswap32(v26[6]);
  if (v19 < 0) {
    int v20 = -1;
  }
  else {
    int v20 = v19;
  }
  int v21 = bswap32(v26[7]);
  if (v21 < 0) {
    int v22 = -1;
  }
  else {
    int v22 = v21;
  }
  v25[4] = v20;
  v25[5] = v22;
  if (v7 < 0 || v9 < 0 || v11 < 0 || v13 < 0 || v15 < 0 || v17 < 0 || v19 < 0 || v21 < 0)
  {
    unsigned __int8 v24 = "invalid values";
  }
  else
  {
    int v23 = *(__int16 *)(a1 + 1250);
    if (v23 < 0) {
      return;
    }
    if ((v23 & 0x10) == 0)
    {
      *(_WORD *)(a1 + 1250) = v23 | 0x10;
      png_colorspace_set_chromaticities(a1, a1 + 1176, v25, 1);
      png_colorspace_sync(a1, a2);
      return;
    }
    *(_WORD *)(a1 + 1250) = v23 | 0x8000;
    png_colorspace_sync(a1, a2);
    unsigned __int8 v24 = "duplicate";
  }
  png_chunk_benign_error(a1, v24);
}

void png_handle_sRGB(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  if ((v4 & 6) != 0)
  {
    png_crc_finish(a1, a3);
    unsigned int v5 = "out of place";
LABEL_8:
    png_chunk_benign_error(a1, v5);
    return;
  }
  if (a3 != 1)
  {
    png_crc_finish(a1, a3);
    unsigned int v5 = "invalid";
    goto LABEL_8;
  }
  Bytef v8 = 0;
  png_crc_read(a1, &v8, 1u);
  if (!png_crc_finish(a1, 0))
  {
    int v7 = *(__int16 *)(a1 + 1250);
    if ((v7 & 0x80000000) == 0)
    {
      if ((v7 & 4) != 0)
      {
        *(_WORD *)(a1 + 1250) = v7 | 0x8000;
        png_colorspace_sync(a1, a2);
        png_chunk_benign_error(a1, "too many profiles");
      }
      else
      {
        png_colorspace_set_sRGB(a1, a1 + 1176, v8);
        png_colorspace_sync(a1, a2);
      }
    }
  }
}

void png_handle_iCCP(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  unsigned int v35 = a3;
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  if ((v4 & 6) != 0)
  {
    png_crc_finish(a1, a3);
    int v6 = "out of place";
LABEL_6:
    png_chunk_benign_error(a1, v6);
    return;
  }
  if (a3 <= 0xD)
  {
    png_crc_finish(a1, a3);
    int v6 = "too short";
    goto LABEL_6;
  }
  int v7 = *(__int16 *)(a1 + 1250);
  if ((v7 & 0x80000000) == 0)
  {
    if ((v7 & 4) != 0)
    {
      int v12 = "too many profiles";
LABEL_32:
      png_crc_finish(a1, v35);
LABEL_33:
      *(_WORD *)(a1 + 1250) |= 0x8000u;
      png_colorspace_sync(a1, a2);
      if (!v12) {
        return;
      }
      uint64_t v11 = a1;
      int v10 = v12;
      goto LABEL_35;
    }
    if (a3 >= 0x51) {
      unsigned int v9 = 81;
    }
    else {
      unsigned int v9 = a3;
    }
    png_crc_read(a1, __src, v9);
    unsigned int v35 = a3 - v9;
    if (a3 - v9 < 0xB)
    {
      png_crc_finish(a1, a3 - v9);
      int v10 = "too short";
      uint64_t v11 = a1;
LABEL_35:
      png_chunk_benign_error(v11, v10);
      return;
    }
    uint64_t v13 = 0;
    if (a3 >= 0x50) {
      uint64_t v14 = 80;
    }
    else {
      uint64_t v14 = a3;
    }
    while (__src[v13])
    {
      if (v14 == ++v13) {
        goto LABEL_27;
      }
    }
    LODWORD(v14) = v13;
LABEL_27:
    if ((v14 - 1) > 0x4E)
    {
      int v12 = "bad keyword";
      goto LABEL_32;
    }
    size_t v15 = v14 + 1;
    if (v15 >= v9 || __src[v15])
    {
      int v12 = "bad compression method";
      goto LABEL_32;
    }
    if (png_inflate_claim(a1, 1766015824))
    {
      int v12 = *(const char **)(a1 + 360);
      goto LABEL_32;
    }
    uint64_t v16 = (v14 + 2);
    int v45 = 0;
    long long v44 = 0u;
    long long v43 = 0u;
    long long v42 = 0u;
    long long v41 = 0u;
    long long v40 = 0u;
    long long v39 = 0u;
    long long v38 = 0u;
    long long v37 = 0u;
    unint64_t v34 = 132;
    *(void *)(a1 + 312) = &__src[v16];
    *(_DWORD *)(a1 + 320) = v9 - v16;
    png_inflate_read(a1, v36, &v35, (uint64_t)&v37, (uint64_t *)&v34, 0);
    if (v34) {
      goto LABEL_40;
    }
    unint64_t v17 = bswap32(v37);
    if (!png_icc_check_length(a1, a1 + 1176, __src, v17)
      || !png_icc_check_header(a1, a1 + 1176, __src, v17, (uint64_t)&v37, *(unsigned char *)(a1 + 607)))
    {
      goto LABEL_49;
    }
    int v18 = v45;
    int v19 = BYTE1(v45);
    int v20 = BYTE2(v45);
    unsigned int v21 = HIBYTE(v45);
    buffer = png_read_buffer(a1, v17, 2);
    if (!buffer)
    {
      int v12 = "out of memory";
      goto LABEL_50;
    }
    _OWORD *buffer = v37;
    long long v23 = v38;
    long long v24 = v39;
    long long v25 = v41;
    buffer[3] = v40;
    buffer[4] = v25;
    buffer[1] = v23;
    buffer[2] = v24;
    long long v26 = v42;
    long long v27 = v43;
    long long v28 = v44;
    *((_DWORD *)buffer + 32) = v45;
    buffer[6] = v27;
    buffer[7] = v28;
    buffer[5] = v26;
    uint64_t v29 = 12 * ((v18 << 24) | (v19 << 16) | (v20 << 8) | v21);
    v33 = (unsigned int *)buffer;
    unint64_t v34 = v29;
    v30 = (char *)buffer + 132;
    png_inflate_read(a1, v36, &v35, (uint64_t)buffer + 132, (uint64_t *)&v34, 0);
    if (v34) {
      goto LABEL_40;
    }
    if (!png_icc_check_tag_table(a1, a1 + 1176, __src, v17, (uint64_t)v33))
    {
LABEL_49:
      int v12 = 0;
      goto LABEL_50;
    }
    unint64_t v34 = v17 - v29 - 132;
    png_inflate_read(a1, v36, &v35, (uint64_t)&v30[v29], (uint64_t *)&v34, 1);
    unsigned int v31 = v35;
    if (v35)
    {
      if ((*(unsigned char *)(a1 + 298) & 0x10) == 0)
      {
        int v12 = "extra compressed data";
        goto LABEL_50;
      }
      if (!v34)
      {
        png_chunk_warning(a1, "extra compressed data");
        goto LABEL_56;
      }
    }
    else if (!v34)
    {
LABEL_56:
      png_crc_finish(a1, v31);
      png_icc_set_sRGB(a1, a1 + 1176, v33, *(void *)(a1 + 408));
      if (a2)
      {
        png_free_data(a1, a2, 0x10u, 0);
        v32 = png_malloc_base(a1, v15);
        *(void *)(a2 + 128) = v32;
        if (!v32)
        {
          *(_WORD *)(a1 + 1250) |= 0x8000u;
          png_colorspace_sync(a1, a2);
          *(_DWORD *)(a1 + 304) = 0;
          int v12 = "out of memory";
          goto LABEL_33;
        }
        memcpy(v32, __src, v15);
        *(_DWORD *)(a2 + 144) = v17;
        *(void *)(a2 + 136) = v33;
        *(void *)(a1 + 1112) = 0;
        *(_DWORD *)(a2 + 300) |= 0x10u;
        *(_DWORD *)(a2 + 8) |= 0x1000u;
        png_colorspace_sync(a1, a2);
      }
      *(_DWORD *)(a1 + 304) = 0;
      return;
    }
LABEL_40:
    int v12 = *(const char **)(a1 + 360);
LABEL_50:
    *(_DWORD *)(a1 + 304) = 0;
    goto LABEL_32;
  }
  png_crc_finish(a1, a3);
}

uint64_t png_inflate_claim(uint64_t a1, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(_DWORD *)(a1 + 304);
  if (v4)
  {
    *(_DWORD *)Bytef v8 = bswap32(v4);
    png_safecat((uint64_t)v8, 0x40uLL, 4uLL, " using zstream");
    png_chunk_warning(a1, v8);
    *(_DWORD *)(a1 + 304) = 0;
  }
  if ((*(_DWORD *)(a1 + 896) & 0xC) == 0xC) {
    int v5 = 15;
  }
  else {
    int v5 = 0;
  }
  *(unsigned char *)(a1 + 616) = (*(_DWORD *)(a1 + 896) & 0xC) != 12;
  *(void *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  if ((*(unsigned char *)(a1 + 296) & 2) != 0)
  {
    uint64_t v6 = inflateReset2((z_streamp)(a1 + 312), v5);
  }
  else
  {
    uint64_t v6 = inflateInit2_((z_streamp)(a1 + 312), v5, "1.2.12", 112);
    if (!v6) {
      *(_DWORD *)(a1 + 296) |= 2u;
    }
  }
  if ((~*(_DWORD *)(a1 + 896) & 0x300) == 0) {
    uint64_t v6 = inflateValidate((z_streamp)(a1 + 312), 0);
  }
  if (v6) {
    png_zstream_error(a1, v6);
  }
  else {
    *(_DWORD *)(a1 + 304) = a2;
  }
  return v6;
}

uint64_t png_inflate_read(uint64_t result, Bytef *a2, unsigned int *a3, uint64_t a4, uint64_t *a5, int a6)
{
  uint64_t v6 = result;
  if (*(_DWORD *)(result + 304) == *(_DWORD *)(result + 528))
  {
    *(void *)(result + 336) = a4;
    *(_DWORD *)(result + 344) = 0;
    if (a6) {
      int v10 = 4;
    }
    else {
      int v10 = 2;
    }
    unsigned int v11 = 1024;
    while (1)
    {
      if (!*(_DWORD *)(v6 + 320))
      {
        if (v11 >= *a3) {
          unsigned int v11 = *a3;
        }
        *a3 -= v11;
        if (v11) {
          png_crc_read(v6, a2, v11);
        }
        *(void *)(v6 + 312) = a2;
        *(_DWORD *)(v6 + 320) = v11;
      }
      if (!*(_DWORD *)(v6 + 344))
      {
        if ((unint64_t)*a5 >= 0xFFFFFFFF) {
          uint64_t v12 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v12 = *a5;
        }
        *a5 -= v12;
        *(_DWORD *)(v6 + 344) = v12;
      }
      int v13 = *a3 ? 0 : v10;
      int v14 = png_zlib_inflate(v6, v13);
      if (v14) {
        break;
      }
      if (!*a5 && !*(_DWORD *)(v6 + 344))
      {
        uint64_t v15 = 0;
        goto LABEL_26;
      }
    }
    uint64_t v15 = *a5 + *(unsigned int *)(v6 + 344);
LABEL_26:
    *a5 = v15;
    *(_DWORD *)(v6 + 344) = 0;
    return png_zstream_error(v6, v14);
  }
  else
  {
    *(void *)(result + 360) = "zstream unclaimed";
  }
  return result;
}

void *png_read_buffer(uint64_t a1, size_t __size, int a3)
{
  uint64_t v6 = *(void **)(a1 + 1112);
  if (v6)
  {
    if (*(void *)(a1 + 1120) >= __size) {
      return v6;
    }
    *(void *)(a1 + 1112) = 0;
    *(void *)(a1 + 1120) = 0;
    png_free(a1, v6);
  }
  int v7 = png_malloc_base(a1, __size);
  if (v7)
  {
    uint64_t v6 = v7;
    bzero(v7, __size);
    *(void *)(a1 + 1112) = v6;
    *(void *)(a1 + 1120) = __size;
  }
  else
  {
    if (a3 <= 1)
    {
      if (!a3) {
        png_chunk_error(a1, "insufficient memory to read chunk");
      }
      png_chunk_warning(a1, "insufficient memory to read chunk");
    }
    return 0;
  }
  return v6;
}

void png_handle_sPLT(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(_DWORD *)(a1 + 1060);
  if (v6)
  {
    int v7 = v6 - 1;
    if (!v7)
    {
LABEL_5:
      png_crc_finish(a1, a3);
      return;
    }
    *(_DWORD *)(a1 + 1060) = v7;
    if (v7 == 1)
    {
      png_warning(a1, "No space in chunk cache for sPLT");
      goto LABEL_5;
    }
  }
  int v8 = *(_DWORD *)(a1 + 292);
  if ((v8 & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  if ((v8 & 4) != 0)
  {
    png_crc_finish(a1, a3);
    unsigned int v11 = "out of place";
LABEL_15:
    png_chunk_benign_error(a1, v11);
    return;
  }
  buffer = (Bytef *)png_read_buffer(a1, a3 + 1, 2);
  if (!buffer)
  {
    png_crc_finish(a1, a3);
    unsigned int v11 = "out of memory";
    goto LABEL_15;
  }
  int v10 = buffer;
  png_crc_read(a1, buffer, a3);
  if (png_crc_finish(a1, 0)) {
    return;
  }
  uint64_t v12 = 0;
  long long v25 = 0u;
  *(_OWORD *)long long v26 = 0u;
  v10[a3] = 0;
  while (v10[v12++])
    ;
  if (a3 < 2 || &v10[v12] > &v10[a3 - 2])
  {
    int v19 = "malformed sPLT chunk";
    goto LABEL_28;
  }
  uint64_t v15 = &v10[v12 + 1];
  BYTE8(v25) = v10[v12];
  int v14 = BYTE8(v25);
  if (BYTE8(v25) == 8) {
    unsigned int v16 = 6;
  }
  else {
    unsigned int v16 = 10;
  }
  unsigned int v17 = a3 - 1 - v12;
  uint64_t v18 = v17 / v16;
  if (v17 % v16)
  {
    int v19 = "sPLT chunk has bad length";
LABEL_28:
    png_warning(a1, v19);
    return;
  }
  LODWORD(v26[1]) = v17 / v16;
  int v20 = png_malloc_warn((void *)a1, 10 * (v17 / v16));
  v26[0] = v20;
  if (!v20)
  {
    int v19 = "sPLT chunk requires too much memory";
    goto LABEL_28;
  }
  if (v16 <= v17)
  {
    unsigned int v21 = (_WORD *)v20 + 2;
    do
    {
      if (v14 == 8)
      {
        *(v21 - 2) = *v15;
        *(v21 - 1) = v15[1];
        *unsigned int v21 = v15[2];
        LOWORD(v22) = v15[3];
        long long v23 = (unsigned __int16 *)(v15 + 4);
      }
      else
      {
        *(v21 - 2) = bswap32(*(unsigned __int16 *)v15) >> 16;
        *(v21 - 1) = bswap32(*((unsigned __int16 *)v15 + 1)) >> 16;
        *unsigned int v21 = bswap32(*((unsigned __int16 *)v15 + 2)) >> 16;
        unsigned int v22 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
        long long v23 = (unsigned __int16 *)(v15 + 8);
      }
      v21[1] = v22;
      unsigned int v24 = *v23;
      uint64_t v15 = (Bytef *)(v23 + 1);
      v21[2] = bswap32(v24) >> 16;
      v21 += 5;
      --v18;
    }
    while (v18);
  }
  *(void *)&long long v25 = v10;
  png_set_sPLT(a1, a2, (uint64_t)&v25, 1);
  png_free(a1, v26[0]);
}

void png_handle_tRNS(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  __int16 v5 = a3;
  if ((v4 & 4) != 0) {
    goto LABEL_12;
  }
  if (a2 && (*(unsigned char *)(a2 + 8) & 0x10) != 0)
  {
    png_crc_finish(a1, a3);
    int v8 = "duplicate";
    goto LABEL_13;
  }
  int v7 = *(unsigned __int8 *)(a1 + 607);
  if (v7 == 3)
  {
    if ((v4 & 2) != 0)
    {
      if (a3 > 0x100 || a3 - 1 >= *(unsigned __int16 *)(a1 + 592))
      {
        png_crc_finish(a1, a3);
        int v8 = "invalid";
        goto LABEL_13;
      }
      png_crc_read(a1, (Bytef *)v9, a3);
      *(_WORD *)(a1 + 600) = v5;
LABEL_23:
      if (png_crc_finish(a1, 0)) {
        *(_WORD *)(a1 + 600) = 0;
      }
      else {
        png_set_tRNS((void *)a1, a2, v9, *(unsigned __int16 *)(a1 + 600), a1 + 744);
      }
      return;
    }
LABEL_12:
    png_crc_finish(a1, a3);
    int v8 = "out of place";
    goto LABEL_13;
  }
  if (v7 == 2)
  {
    if (a3 != 6) {
      goto LABEL_19;
    }
    png_crc_read(a1, (Bytef *)v9, 6u);
    *(_WORD *)(a1 + 600) = 1;
    *(_WORD *)(a1 + 746) = bswap32(v9[0]) >> 16;
    *(_WORD *)(a1 + 748) = bswap32(v9[1]) >> 16;
    *(_WORD *)(a1 + 750) = bswap32(v9[2]) >> 16;
    goto LABEL_23;
  }
  if (!*(unsigned char *)(a1 + 607))
  {
    if (a3 == 2)
    {
      png_crc_read(a1, (Bytef *)v9, 2u);
      *(_WORD *)(a1 + 600) = 1;
      *(_WORD *)(a1 + 752) = bswap32(v9[0]) >> 16;
      goto LABEL_23;
    }
LABEL_19:
    png_crc_finish(a1, a3);
    png_chunk_benign_error(a1, "invalid");
    return;
  }
  png_crc_finish(a1, a3);
  int v8 = "invalid with alpha channel";
LABEL_13:
  png_chunk_benign_error(a1, v8);
}

uint64_t png_handle_bKGD(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  if ((v4 & 4) == 0)
  {
    int v6 = *(unsigned __int8 *)(a1 + 607);
    if ((v4 & 2) != 0 || v6 != 3)
    {
      if (a2 && (*(unsigned char *)(a2 + 8) & 0x20) != 0)
      {
        png_crc_finish(a1, a3);
        int v7 = "duplicate";
        goto LABEL_6;
      }
      if ((v6 & 2) != 0) {
        int v9 = 6;
      }
      else {
        int v9 = 2;
      }
      if (v6 == 3) {
        int v10 = 1;
      }
      else {
        int v10 = v9;
      }
      if (v10 != a3)
      {
        png_crc_finish(a1, a3);
        int v7 = "invalid";
        goto LABEL_6;
      }
      __int16 v20 = 0;
      uint64_t v19 = 0;
      png_crc_read(a1, (Bytef *)&v21, a3);
      uint64_t result = png_crc_finish(a1, 0);
      if (result) {
        return result;
      }
      int v11 = *(unsigned __int8 *)(a1 + 607);
      if (v11 == 3)
      {
        LOBYTE(v19) = v21;
        if (!a2 || !*(_WORD *)(a2 + 32))
        {
          HIWORD(v19) = 0;
          *(_DWORD *)((char *)&v19 + 2) = 0;
LABEL_42:
          __int16 v20 = 0;
          return png_set_bKGD(a1, a2, (uint64_t)&v19);
        }
        if (*(unsigned __int16 *)(a2 + 32) > v21)
        {
          uint64_t v12 = (unsigned __int8 *)(*(void *)(a1 + 584) + 3 * v21);
          WORD1(v19) = *v12;
          WORD2(v19) = v12[1];
          __int16 v13 = v12[2];
LABEL_41:
          HIWORD(v19) = v13;
          goto LABEL_42;
        }
        unsigned int v16 = "invalid index";
        return png_chunk_benign_error(a1, v16);
      }
      unsigned int v14 = *(unsigned __int8 *)(a1 + 608);
      if ((v11 & 2) != 0)
      {
        if (v14 >= 9)
        {
          __int16 v18 = v22;
          __int16 v17 = v24;
        }
        else
        {
          if ((_BYTE)v21 || v22 || (__int16 v17 = v24) != 0)
          {
            unsigned int v16 = "invalid color";
            return png_chunk_benign_error(a1, v16);
          }
          __int16 v18 = 0;
        }
        LOBYTE(v19) = 0;
        WORD1(v19) = _byteswap_ushort(v21);
        WORD2(v19) = v23 | (unsigned __int16)(v18 << 8);
        __int16 v13 = v25 | (unsigned __int16)(v17 << 8);
        goto LABEL_41;
      }
      if (v14 >= 9)
      {
        __int16 v15 = HIBYTE(v21);
      }
      else if ((_BYTE)v21 || (__int16 v15 = HIBYTE(v21), HIBYTE(v21) >> v14))
      {
        unsigned int v16 = "invalid gray level";
        return png_chunk_benign_error(a1, v16);
      }
      LOBYTE(v19) = 0;
      __int16 v20 = v15 | (v21 << 8);
      HIWORD(v19) = v20;
      WORD2(v19) = v20;
      WORD1(v19) = v20;
      return png_set_bKGD(a1, a2, (uint64_t)&v19);
    }
  }
  png_crc_finish(a1, a3);
  int v7 = "out of place";
LABEL_6:
  return png_chunk_benign_error(a1, v7);
}

void png_handle_eXIf(uint64_t a1, uint64_t a2, size_t __size)
{
  if ((*(unsigned char *)(a1 + 292) & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  unsigned int v4 = __size;
  if (__size <= 1)
  {
    png_crc_finish(a1, __size);
    __int16 v5 = "too short";
LABEL_15:
    png_chunk_benign_error(a1, v5);
    return;
  }
  if (!a2 || (*(unsigned char *)(a2 + 10) & 1) != 0)
  {
    png_crc_finish(a1, __size);
    __int16 v5 = "duplicate";
    goto LABEL_15;
  }
  *(_DWORD *)(a2 + 300) |= 0x8000u;
  int v7 = png_malloc_warn((void *)a1, __size);
  *(void *)(a2 + 248) = v7;
  if (!v7)
  {
    png_crc_finish(a1, v4);
    __int16 v5 = "out of memory";
    goto LABEL_15;
  }
  uint64_t v8 = 0;
  do
  {
    png_crc_read(a1, &v9, 1u);
    *(unsigned char *)(*(void *)(a2 + 248) + v8) = v9;
    if (v8 == 1 && (v9 | 4) != 0x4D && **(unsigned __int8 **)(a2 + 248) != v9)
    {
      png_crc_finish(a1, v4);
      png_chunk_benign_error(a1, "incorrect byte-order specifier");
      goto LABEL_20;
    }
    ++v8;
  }
  while (v4 != v8);
  if (png_crc_finish(a1, 0)) {
    return;
  }
  png_set_eXIf_1((void *)a1, a2, v4, *(void *)(a2 + 248));
LABEL_20:
  png_free(a1, *(void **)(a2 + 248));
  *(void *)(a2 + 248) = 0;
}

uint64_t png_handle_hIST(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)(a1 + 292) & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  if ((*(_DWORD *)(a1 + 292) & 6) == 2)
  {
    if (a2 && (*(unsigned char *)(a2 + 8) & 0x40) != 0)
    {
      png_crc_finish(a1, a3);
      Bytef v9 = "duplicate";
    }
    else
    {
      if (a3 <= 0x201)
      {
        unsigned int v5 = a3 >> 1;
        if (a3 >> 1 == *(unsigned __int16 *)(a1 + 592))
        {
          if (a3 >= 2)
          {
            if (v5 <= 1) {
              uint64_t v6 = 1;
            }
            else {
              uint64_t v6 = v5;
            }
            int v7 = v11;
            do
            {
              png_crc_read(a1, (Bytef *)&v10, 2u);
              *v7++ = bswap32(v10) >> 16;
              --v6;
            }
            while (v6);
          }
          uint64_t result = png_crc_finish(a1, 0);
          if (!result) {
            return (uint64_t)png_set_hIST((void *)a1, a2, v11);
          }
          return result;
        }
      }
      png_crc_finish(a1, a3);
      Bytef v9 = "invalid";
    }
  }
  else
  {
    png_crc_finish(a1, a3);
    Bytef v9 = "out of place";
  }
  return png_chunk_benign_error(a1, v9);
}

uint64_t png_handle_pHYs(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  if ((v4 & 4) != 0)
  {
    png_crc_finish(a1, a3);
    int v7 = "out of place";
  }
  else if (a2 && (*(unsigned char *)(a2 + 8) & 0x80) != 0)
  {
    png_crc_finish(a1, a3);
    int v7 = "duplicate";
  }
  else
  {
    if (a3 == 9)
    {
      png_crc_read(a1, (Bytef *)v8, 9u);
      uint64_t result = png_crc_finish(a1, 0);
      if (!result) {
        return png_set_pHYs(a1, a2, bswap32(v8[0]), bswap32(v8[1]), v9);
      }
      return result;
    }
    png_crc_finish(a1, a3);
    int v7 = "invalid";
  }
  return png_chunk_benign_error(a1, v7);
}

uint64_t png_handle_oFFs(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  if ((v4 & 4) != 0)
  {
    png_crc_finish(a1, a3);
    uint64_t v8 = "out of place";
  }
  else if (a2 && (*(unsigned char *)(a2 + 9) & 1) != 0)
  {
    png_crc_finish(a1, a3);
    uint64_t v8 = "duplicate";
  }
  else
  {
    if (a3 == 9)
    {
      png_crc_read(a1, (Bytef *)&v10, 9u);
      uint64_t result = png_crc_finish(a1, 0);
      if (!result)
      {
        if ((char)v10 < 0) {
          int v7 = -((2147418112 * BYTE1(v10) - ((v10 << 24) | (BYTE2(v10) << 8) | HIBYTE(v10))) & 0x7FFFFFFF);
        }
        else {
          int v7 = _byteswap_ulong(v10);
        }
        if ((char)v11 < 0) {
          int v9 = -((2147418112 * BYTE1(v11) - ((v11 << 24) | (BYTE2(v11) << 8) | HIBYTE(v11))) & 0x7FFFFFFF);
        }
        else {
          int v9 = _byteswap_ulong(v11);
        }
        return png_set_oFFs(a1, a2, v7, v9, v12);
      }
      return result;
    }
    png_crc_finish(a1, a3);
    uint64_t v8 = "invalid";
  }
  return png_chunk_benign_error(a1, v8);
}

void png_handle_pCAL(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  if ((v4 & 4) != 0)
  {
    png_crc_finish(a1, a3);
    int v9 = "out of place";
LABEL_29:
    png_chunk_benign_error(a1, v9);
    return;
  }
  if (a2 && (*(unsigned char *)(a2 + 9) & 4) != 0)
  {
    png_crc_finish(a1, a3);
    int v9 = "duplicate";
    goto LABEL_29;
  }
  buffer = (Bytef *)png_read_buffer(a1, a3 + 1, 2);
  if (!buffer)
  {
    png_crc_finish(a1, a3);
LABEL_11:
    int v9 = "out of memory";
    goto LABEL_29;
  }
  uint64_t v8 = (char *)buffer;
  png_crc_read(a1, buffer, a3);
  if (png_crc_finish(a1, 0)) {
    return;
  }
  uint64_t v10 = 0;
  unsigned int v11 = &v8[a3];
  char *v11 = 0;
  while (v8[v10++])
    ;
  if (a3 - v10 + 1 <= 12)
  {
    int v9 = "invalid";
    goto LABEL_29;
  }
  uint64_t v13 = &v8[v10];
  if (v8[v10] < 0) {
    int v14 = -((2147418112 * v8[v10 + 1]
  }
           - ((v8[v10] << 24) | (v8[v10 + 2] << 8) | v8[v10 + 3])) & 0x7FFFFFFF);
  else {
    int v14 = _byteswap_ulong(*(_DWORD *)&v8[v10]);
  }
  __int16 v15 = (unsigned __int8 *)&v8[v10];
  int v16 = v8[v10 + 4];
  if (v8[v10 + 4] < 0) {
    int v17 = -((2147418112 * v15[5] - ((v16 << 24) | (v15[6] << 8) | v15[7])) & 0x7FFFFFFF);
  }
  else {
    int v17 = (v16 << 24) | (v15[5] << 16) | (v15[6] << 8) | v15[7];
  }
  __int16 v18 = &v8[v10];
  unsigned int v19 = v18[8];
  uint64_t v20 = v18[9];
  if (!v18[8] && v20 != 2 || v19 - 1 <= 1 && v20 != 3 || v19 == 3 && v20 != 4)
  {
    int v9 = "invalid parameter count";
    goto LABEL_29;
  }
  unsigned __int16 v21 = v13 + 9;
  long long v26 = v18 + 10;
  if (v19 >= 4) {
    png_chunk_benign_error(a1, "unrecognized equation type");
  }
  while (*++v21)
    ;
  unsigned __int8 v23 = png_malloc_warn((void *)a1, 8 * v20);
  if (!v23) {
    goto LABEL_11;
  }
  unsigned __int8 v24 = v23;
  if (v20)
  {
    uint64_t v25 = 0;
    while (2)
    {
      v23[v25] = ++v21;
      while (1)
      {
        if (v21 > v11)
        {
          png_free(a1, v23);
          int v9 = "invalid data";
          goto LABEL_29;
        }
        if (!*v21) {
          break;
        }
        ++v21;
      }
      if (++v25 != v20) {
        continue;
      }
      break;
    }
  }
  png_set_pCAL((void *)a1, a2, v8, v14, v17, v19, v20, v26, (const char **)v23);
  png_free(a1, v24);
}

uint64_t png_handle_sCAL(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  if ((v4 & 4) != 0)
  {
    png_crc_finish(a1, a3);
    int v7 = "out of place";
    goto LABEL_18;
  }
  if (a2 && (*(unsigned char *)(a2 + 9) & 0x40) != 0)
  {
    png_crc_finish(a1, a3);
    int v7 = "duplicate";
    goto LABEL_18;
  }
  if (a3 <= 3)
  {
    png_crc_finish(a1, a3);
    int v7 = "invalid";
LABEL_18:
    return png_chunk_benign_error(a1, v7);
  }
  buffer = (Bytef *)png_read_buffer(a1, a3 + 1, 2);
  if (buffer)
  {
    int v9 = (char *)buffer;
    png_crc_read(a1, buffer, a3);
    v9[a3] = 0;
    uint64_t result = png_crc_finish(a1, 0);
    if (result) {
      return result;
    }
    if (*v9 - 1 >= 2)
    {
      int v7 = "invalid unit";
      goto LABEL_18;
    }
    unint64_t v15 = 1;
    unsigned int v14 = 0;
    if (png_check_fp_number((uint64_t)v9, a3, &v14, &v15)
      && (unint64_t v11 = v15, v15 < a3)
      && (uint64_t v12 = v15 + 1, ++v15, !v9[v11]))
    {
      if ((v14 & 0x188) == 0x108)
      {
        unsigned int v14 = 0;
        if (png_check_fp_number((uint64_t)v9, a3, &v14, &v15) && v15 == a3)
        {
          if ((v14 & 0x188) == 0x108) {
            return (uint64_t)png_set_sCAL_s((void *)a1, a2, *v9, v9 + 1, &v9[v12]);
          }
          uint64_t v13 = "non-positive height";
        }
        else
        {
          uint64_t v13 = "bad height format";
        }
      }
      else
      {
        uint64_t v13 = "non-positive width";
      }
    }
    else
    {
      uint64_t v13 = "bad width format";
    }
    return png_chunk_benign_error(a1, v13);
  }
  else
  {
    png_chunk_benign_error(a1, "out of memory");
    return png_crc_finish(a1, a3);
  }
}

uint64_t png_handle_tIME(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  if (a2 && (*(unsigned char *)(a2 + 9) & 2) != 0)
  {
    png_crc_finish(a1, a3);
    int v7 = "duplicate";
  }
  else
  {
    if ((v4 & 4) != 0) {
      *(_DWORD *)(a1 + 292) = v4 | 8;
    }
    if (a3 == 7)
    {
      uint64_t v8 = 0;
      png_crc_read(a1, (Bytef *)&v9, 7u);
      uint64_t result = png_crc_finish(a1, 0);
      if (!result)
      {
        BYTE6(v8) = v11;
        *(_DWORD *)((char *)&v8 + 2) = v10;
        LOWORD(v8) = bswap32(v9) >> 16;
        return png_set_tIME(a1, a2, (uint64_t)&v8);
      }
      return result;
    }
    png_crc_finish(a1, a3);
    int v7 = "invalid";
  }
  return png_chunk_benign_error(a1, v7);
}

uint64_t png_handle_tEXt(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(_DWORD *)(a1 + 1060);
  if (v6)
  {
    int v7 = v6 - 1;
    if (!v7)
    {
      return png_crc_finish(a1, a3);
    }
    *(_DWORD *)(a1 + 1060) = v7;
    if (v7 == 1)
    {
      png_crc_finish(a1, a3);
      unsigned __int16 v9 = "no space in chunk cache";
LABEL_22:
      return png_chunk_benign_error(a1, v9);
    }
  }
  int v10 = *(_DWORD *)(a1 + 292);
  if ((v10 & 1) == 0) {
    png_chunk_error(a1, "missing IHDR");
  }
  if ((v10 & 4) != 0) {
    *(_DWORD *)(a1 + 292) = v10 | 8;
  }
  buffer = (Bytef *)png_read_buffer(a1, a3 + 1, 1);
  if (!buffer)
  {
    unsigned __int16 v9 = "out of memory";
    goto LABEL_22;
  }
  uint64_t v12 = buffer;
  png_crc_read(a1, buffer, a3);
  uint64_t result = png_crc_finish(a1, 0);
  if (!result)
  {
    uint64_t v13 = 0;
    v16[0] = 0;
    v12[a3] = 0;
    while (v12[v13++])
      ;
    unint64_t v15 = a3 + 1 == v13 ? v12 : v12 + 1;
    LODWORD(v16[0]) = -1;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    v16[1] = v12;
    int v17 = (const char *)&v15[v13 - 1];
    size_t v18 = strlen(v17);
    uint64_t result = png_set_text_2(a1, a2, (uint64_t)v16, 1);
    if (result) {
      return png_warning(a1, "Insufficient memory to process text chunk");
    }
  }
  return result;
}

uint64_t png_handle_zTXt(uint64_t a1, uint64_t a2, size_t __size)
{
  unsigned int v3 = __size;
  int v6 = *(_DWORD *)(a1 + 1060);
  if (!v6) {
    goto LABEL_8;
  }
  int v7 = v6 - 1;
  if (!v7)
  {
    return png_crc_finish(a1, __size);
  }
  *(_DWORD *)(a1 + 1060) = v7;
  if (v7 == 1)
  {
    png_crc_finish(a1, __size);
    unsigned __int16 v9 = "no space in chunk cache";
  }
  else
  {
LABEL_8:
    int v10 = *(_DWORD *)(a1 + 292);
    if ((v10 & 1) == 0) {
      png_chunk_error(a1, "missing IHDR");
    }
    if ((v10 & 4) != 0) {
      *(_DWORD *)(a1 + 292) = v10 | 8;
    }
    buffer = (Bytef *)png_read_buffer(a1, __size, 2);
    if (buffer)
    {
      uint64_t v12 = buffer;
      png_crc_read(a1, buffer, v3);
      uint64_t result = png_crc_finish(a1, 0);
      if (result) {
        return result;
      }
      if (!v3) {
        goto LABEL_19;
      }
      uint64_t v13 = 0;
      while (v12[v13])
      {
        if (v3 == ++v13)
        {
          LODWORD(v13) = v3;
          break;
        }
      }
      if ((v13 - 80) >= 0xFFFFFFB1)
      {
        if ((int)v13 + 3 <= v3)
        {
          if (v12[v13 + 1])
          {
            unsigned int v14 = "unknown compression type";
          }
          else
          {
            uint64_t v18 = -1;
            uint64_t result = png_decompress_chunk(a1, v3, (int)v13 + 2, &v18);
            if (result == 1)
            {
              v17[0] = 0;
              uint64_t v15 = *(void *)(a1 + 1112);
              if (v15)
              {
                uint64_t v16 = v18;
                *(unsigned char *)(v15 + v18 + (v13 + 2)) = 0;
                v17[1] = v15;
                v17[2] = v15 + v13 + 2;
                v17[3] = v16;
                memset(&v17[4], 0, 24);
                uint64_t result = png_set_text_2(a1, a2, (uint64_t)v17, 1);
                if (result) {
                  unsigned int v14 = "insufficient memory";
                }
                else {
                  unsigned int v14 = 0;
                }
              }
              else
              {
                unsigned int v14 = "Read failure in png_handle_zTXt";
              }
            }
            else
            {
              unsigned int v14 = *(const char **)(a1 + 360);
            }
            if (!v14) {
              return result;
            }
          }
        }
        else
        {
          unsigned int v14 = "truncated";
        }
      }
      else
      {
LABEL_19:
        unsigned int v14 = "bad keyword";
      }
      return png_chunk_benign_error(a1, v14);
    }
    png_crc_finish(a1, v3);
    unsigned __int16 v9 = "out of memory";
  }
  return png_chunk_benign_error(a1, v9);
}

uint64_t png_decompress_chunk(uint64_t a1, int a2, unsigned int a3, uint64_t *a4)
{
  unint64_t v8 = *(void *)(a1 + 1064);
  if (v8 + 1 > 1)
  {
    unint64_t v9 = a3 + 1;
    if (v8 < v9)
    {
      uint64_t v12 = 4294967292;
      png_zstream_error(a1, -4);
      return v12;
    }
  }
  else
  {
    unint64_t v9 = a3 + 1;
    unint64_t v8 = -1;
  }
  unint64_t v10 = v8 - v9;
  if (v10 < *a4) {
    *a4 = v10;
  }
  unsigned int v11 = png_inflate_claim(a1, *(_DWORD *)(a1 + 528));
  if (!v11)
  {
    int v13 = a2 - a3;
    int v20 = a2 - a3;
    uint64_t v12 = png_inflate(a1, *(_DWORD *)(a1 + 528), *(void *)(a1 + 1112) + a3, &v20, 0, a4);
    if (v12 == 1)
    {
      if (inflateReset((z_streamp)(a1 + 312)))
      {
        png_zstream_error(a1, 1);
        uint64_t v12 = 4294967289;
      }
      else
      {
        uint64_t v14 = *a4;
        size_t v15 = a3 + *a4 + 1;
        uint64_t v16 = png_malloc_base(a1, v15);
        if (v16)
        {
          int v17 = v16;
          bzero(v16, v15);
          uint64_t v12 = png_inflate(a1, *(_DWORD *)(a1 + 528), *(void *)(a1 + 1112) + a3, &v20, (uint64_t)&v17[a3], a4);
          if (v12 == 1)
          {
            if (v14 == *a4)
            {
              v17[v14 + a3] = 0;
              uint64_t v18 = *(void **)(a1 + 1112);
              if (a3) {
                memcpy(v17, *(const void **)(a1 + 1112), a3);
              }
              *(void *)(a1 + 1112) = v17;
              *(void *)(a1 + 1120) = v15;
              png_free(a1, v18);
              if (v13 != v20) {
                png_chunk_benign_error(a1, "extra compressed data");
              }
              uint64_t v12 = 1;
              goto LABEL_25;
            }
            uint64_t v12 = 4294967289;
          }
          png_free(a1, v17);
        }
        else
        {
          uint64_t v12 = 4294967292;
          png_zstream_error(a1, -4);
        }
      }
    }
LABEL_25:
    *(_DWORD *)(a1 + 304) = 0;
    return v12;
  }
  if (v11 == 1) {
    return 4294967289;
  }
  else {
    return v11;
  }
}

uint64_t png_handle_iTXt(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(_DWORD *)(a1 + 1060);
  if (!v6) {
    goto LABEL_8;
  }
  int v7 = v6 - 1;
  if (!v7)
  {
    return png_crc_finish(a1, a3);
  }
  *(_DWORD *)(a1 + 1060) = v7;
  if (v7 != 1)
  {
LABEL_8:
    int v10 = *(_DWORD *)(a1 + 292);
    if ((v10 & 1) == 0) {
      png_chunk_error(a1, "missing IHDR");
    }
    if ((v10 & 4) != 0) {
      *(_DWORD *)(a1 + 292) = v10 | 8;
    }
    buffer = (Bytef *)png_read_buffer(a1, a3 + 1, 1);
    if (!buffer)
    {
      png_crc_finish(a1, a3);
      unint64_t v9 = "out of memory";
      goto LABEL_23;
    }
    uint64_t v12 = buffer;
    png_crc_read(a1, buffer, a3);
    uint64_t result = png_crc_finish(a1, 0);
    if (result) {
      return result;
    }
    if (!a3) {
      goto LABEL_19;
    }
    uint64_t v13 = 0;
    while (v12[v13])
    {
      if (a3 == ++v13)
      {
        LODWORD(v13) = a3;
        break;
      }
    }
    if ((v13 - 80) >= 0xFFFFFFB1)
    {
      if ((int)v13 + 5 <= a3)
      {
        size_t v15 = &v12[v13];
        int v16 = v15[1];
        if (v15[1] && (v16 != 1 || v15[2]))
        {
          uint64_t v14 = "bad compression info";
        }
        else
        {
          uint64_t v17 = (v13 + 3);
          uint64_t v18 = v17;
          while (v12[v18])
          {
            if (a3 == ++v18)
            {
              LODWORD(v18) = a3;
              break;
            }
          }
          int v19 = v18 + 1;
          if ((int)v18 + 1 >= a3)
          {
            unsigned int v21 = v18 + 1;
          }
          else
          {
            int v20 = &v12[v19];
            unsigned int v21 = v18 + 1;
            while (*v20++)
            {
              if (a3 == ++v21)
              {
                unsigned int v21 = a3;
                break;
              }
            }
          }
          unsigned int v23 = v21 + 1;
          if (v16 || a3 < v23)
          {
            uint64_t v14 = "truncated";
            if (!v16 || a3 <= v23) {
              return png_chunk_benign_error(a1, v14);
            }
            uint64_t v27 = -1;
            if (png_decompress_chunk(a1, a3, v21 + 1, &v27) == 1)
            {
              uint64_t v12 = *(Bytef **)(a1 + 1112);
            }
            else
            {
              uint64_t v14 = *(const char **)(a1 + 360);
              if (v14) {
                return png_chunk_benign_error(a1, v14);
              }
            }
          }
          else
          {
            uint64_t v27 = a3 - v23;
          }
          v26[0] = 0;
          uint64_t v24 = v27;
          v12[v27 + v23] = 0;
          if (v16) {
            int v25 = 2;
          }
          else {
            int v25 = 1;
          }
          LODWORD(v26[0]) = v25;
          v26[5] = &v12[v17];
          v26[6] = &v12[v19];
          v26[1] = v12;
          v26[2] = &v12[v23];
          v26[3] = 0;
          v26[4] = v24;
          uint64_t result = png_set_text_2(a1, a2, (uint64_t)v26, 1);
          if (!result) {
            return result;
          }
          uint64_t v14 = "insufficient memory";
        }
      }
      else
      {
        uint64_t v14 = "truncated";
      }
    }
    else
    {
LABEL_19:
      uint64_t v14 = "bad keyword";
    }
    return png_chunk_benign_error(a1, v14);
  }
  png_crc_finish(a1, a3);
  unint64_t v9 = "no space in chunk cache";
LABEL_23:
  return png_chunk_benign_error(a1, v9);
}

void png_handle_unknown(uint64_t a1, uint64_t a2, size_t __size, int a4)
{
  int v4 = a4;
  if (*(void *)(a1 + 944))
  {
    if (!png_cache_unknown_chunk(a1, __size)) {
      goto LABEL_22;
    }
    int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 944))(a1, a1 + 1072);
    if (v7 < 0)
    {
      unsigned int v11 = "error in user chunk";
LABEL_33:
      png_chunk_error(a1, v11);
    }
    if (v7) {
      goto LABEL_25;
    }
    if (v4 <= 1)
    {
      if (*(int *)(a1 + 952) <= 1)
      {
        png_chunk_warning(a1, "Saving unknown chunk:");
        png_app_warning(a1, "forcing save of an unhandled chunk; please call png_set_keep_unknown_chunks");
      }
      goto LABEL_17;
    }
  }
  else
  {
    if (!a4) {
      int v4 = *(_DWORD *)(a1 + 952);
    }
    if (v4 == 3 || v4 == 2 && (*(unsigned char *)(a1 + 531) & 0x20) != 0)
    {
      if (!png_cache_unknown_chunk(a1, __size)) {
        goto LABEL_22;
      }
    }
    else
    {
      png_crc_finish(a1, __size);
    }
  }
  if (v4 == 3) {
    goto LABEL_18;
  }
  if (v4 != 2) {
    goto LABEL_22;
  }
LABEL_17:
  if ((*(unsigned char *)(a1 + 531) & 0x20) == 0) {
    goto LABEL_22;
  }
LABEL_18:
  int v8 = *(_DWORD *)(a1 + 1060);
  if (v8)
  {
    if (v8 != 1)
    {
      if (v8 == 2)
      {
        int v9 = 1;
        *(_DWORD *)(a1 + 1060) = 1;
        png_chunk_benign_error(a1, "no space in chunk cache");
        goto LABEL_26;
      }
      *(_DWORD *)(a1 + 1060) = v8 - 1;
      goto LABEL_24;
    }
LABEL_22:
    int v9 = 1;
    goto LABEL_26;
  }
LABEL_24:
  png_set_unknown_chunks(a1, a2, a1 + 1072, 1);
LABEL_25:
  int v9 = 0;
LABEL_26:
  int v10 = *(void **)(a1 + 1080);
  if (v10) {
    png_free(a1, v10);
  }
  *(void *)(a1 + 1080) = 0;
  if (v9 && (*(unsigned char *)(a1 + 531) & 0x20) == 0)
  {
    unsigned int v11 = "unhandled critical chunk";
    goto LABEL_33;
  }
}

uint64_t png_cache_unknown_chunk(uint64_t a1, size_t __size)
{
  unsigned int v2 = __size;
  int v4 = *(void **)(a1 + 1080);
  if (v4)
  {
    png_free(a1, v4);
    *(void *)(a1 + 1080) = 0;
  }
  unint64_t v5 = *(void *)(a1 + 1064);
  if (v5 + 1 > 1 && v5 < v2)
  {
    int v6 = 0;
    if (!v2)
    {
LABEL_11:
      if (v2) {
        png_crc_read(a1, v6, v2);
      }
      goto LABEL_14;
    }
LABEL_9:
    if (!v6)
    {
      png_crc_finish(a1, v2);
      png_chunk_benign_error(a1, "unknown chunk exceeds memory limits");
      return 0;
    }
    goto LABEL_11;
  }
  int v7 = *(_DWORD *)(a1 + 528);
  *(unsigned char *)(a1 + 1072) = HIBYTE(v7);
  *(unsigned char *)(a1 + 1073) = BYTE2(v7);
  *(unsigned char *)(a1 + 1074) = BYTE1(v7);
  *(unsigned char *)(a1 + 1075) = v7;
  *(unsigned char *)(a1 + 1076) = 0;
  *(void *)(a1 + 1088) = v2;
  *(unsigned char *)(a1 + 1096) = *(_DWORD *)(a1 + 292);
  if (v2)
  {
    int v6 = (Bytef *)png_malloc_warn((void *)a1, v2);
    *(void *)(a1 + 1080) = v6;
    goto LABEL_9;
  }
  *(void *)(a1 + 1080) = 0;
LABEL_14:
  png_crc_finish(a1, 0);
  return 1;
}

uint64_t png_combine_row(uint64_t result, char *__dst, int a3)
{
  unint64_t v3 = *(unsigned __int8 *)(result + 615);
  if (!*(unsigned char *)(result + 615)) {
    png_error(result, "internal row logic error");
  }
  int v4 = __dst;
  uint64_t v5 = *(void *)(result + 544);
  unint64_t v6 = *(unsigned int *)(result + 496);
  uint64_t v7 = *(unsigned __int8 *)(result + 605);
  uint64_t v8 = *(void *)(result + 568);
  if (v8)
  {
    unint64_t v9 = (v6 * (unint64_t)*(unsigned __int8 *)(result + 615) + 7) >> 3;
    if (v3 >= 8) {
      unint64_t v9 = v6 * (unint64_t)(v3 >> 3);
    }
    if (v8 != v9) {
      png_error(result, "internal row size calculation error");
    }
  }
  if (!v6) {
    png_error(result, "internal row width error");
  }
  int v10 = (char *)(v5 + 1);
  unint64_t v11 = v6 * (unint64_t)*(unsigned __int8 *)(result + 615);
  unint64_t v12 = v3 >> 3;
  char v13 = v11 & 7;
  if ((v11 & 7) != 0)
  {
    unint64_t v14 = v12 * (unint64_t)v6;
    if (v3 <= 7) {
      unint64_t v14 = (v11 + 7) >> 3;
    }
    size_t v15 = &__dst[v14 - 1];
    char v16 = *v15;
    unsigned int v17 = 0xFFu >> v13;
    int v18 = 255 << v13;
    if (*(unsigned char *)(result + 302)) {
      char v19 = v18;
    }
    else {
      char v19 = v17;
    }
  }
  else
  {
    size_t v15 = 0;
    char v16 = 0;
    char v19 = 0;
  }
  if (!*(unsigned char *)(result + 604)) {
    goto LABEL_21;
  }
  int v20 = *(_DWORD *)(result + 300);
  if ((v20 & 2) == 0 || v7 > 5) {
    goto LABEL_21;
  }
  if (a3 != 1)
  {
    if (!a3)
    {
      int v21 = v7 & 1;
      goto LABEL_29;
    }
LABEL_21:
    if (v3 <= 7) {
      size_t v22 = (v11 + 7) >> 3;
    }
    else {
      size_t v22 = v12 * (unint64_t)v6;
    }
    uint64_t result = (uint64_t)memcpy(__dst, v10, v22);
LABEL_25:
    if (v15) {
      *size_t v15 = *v15 & ~v19 | v19 & v16;
    }
    return result;
  }
  if ((v7 & 1) == 0) {
    goto LABEL_21;
  }
  int v21 = 1;
LABEL_29:
  unsigned int v23 = (v21 << (3 - ((v7 + 1) >> 1))) & 7;
  if (v6 <= v23) {
    return result;
  }
  if (v3 <= 7)
  {
    unint64_t v24 = 8 / v3;
    uint64_t v25 = 1;
    if (v3 != 2) {
      uint64_t v25 = 2;
    }
    if (v3 == 1) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = v25;
    }
    uint64_t v27 = (char *)&png_combine_row_row_mask + 24 * v26 + 4 * v7 + 72;
    if (a3) {
      uint64_t v27 = (char *)&png_combine_row_display_mask + 12 * v26 + ((2 * (int)v7) & 0x1FCLL) + 36;
    }
    long long v28 = (char *)&png_combine_row_display_mask + 12 * v26 + ((2 * (int)v7) & 0x1FCLL);
    if (!a3) {
      long long v28 = (char *)&png_combine_row_row_mask + 24 * v26 + 4 * *(unsigned __int8 *)(result + 605);
    }
    if ((v20 & 0x10000) == 0) {
      long long v28 = v27;
    }
    int v29 = *(_DWORD *)v28;
    while (1)
    {
      if ((_BYTE)v29)
      {
        if (v29 == 255) {
          char v30 = *v10;
        }
        else {
          char v30 = v29 & *v10 | *v4 & ~(_BYTE)v29;
        }
        *int v4 = v30;
      }
      BOOL v31 = v6 > v24;
      v6 -= v24;
      if (!v31) {
        break;
      }
      HIDWORD(v32) = v29;
      LODWORD(v32) = v29;
      int v29 = v32 >> 8;
      ++v4;
      ++v10;
    }
    goto LABEL_25;
  }
  if ((v3 & 7) != 0) {
    png_error(result, "invalid user transform pixel depth");
  }
  uint64_t v33 = v23 * v12;
  unint64_t v34 = v6 * (unint64_t)v12 - v33;
  uint64_t result = (uint64_t)&__dst[v33];
  unsigned int v35 = (__int16 *)&v10[v33];
  unint64_t v36 = (v12 << ((6 - v7) >> 1));
  if (v34 < v36) {
    LODWORD(v36) = v6 * v12 - v33;
  }
  if (a3) {
    size_t v37 = v36;
  }
  else {
    size_t v37 = v12;
  }
  unint64_t v38 = (v12 << ((7 - v7) >> 1));
  switch(v37)
  {
    case 1:
      *(unsigned char *)uint64_t result = *(unsigned char *)v35;
      if (v34 > v38)
      {
        uint64_t v43 = v38 + v33;
        do
        {
          v34 -= v38;
          v4[v43] = v10[v43];
          v43 += v38;
        }
        while (v34 > v38);
      }
      break;
    case 2:
      while (1)
      {
        long long v42 = &v4[v33];
        *long long v42 = *(unsigned char *)(v5 + v33 + 1);
        v42[1] = *(unsigned char *)(v5 + v33 + 2);
        BOOL v31 = v34 > v38;
        v34 -= v38;
        if (!v31) {
          break;
        }
        v33 += v38;
        if (v34 <= 1)
        {
          v4[v33] = *(unsigned char *)(v5 + v33 + 1);
          return result;
        }
      }
      break;
    case 3:
      *(unsigned char *)uint64_t result = *(unsigned char *)v35;
      *(unsigned char *)(result + 1) = *((unsigned char *)v35 + 1);
      *(unsigned char *)(result + 2) = *((unsigned char *)v35 + 2);
      if (v34 > v38)
      {
        uint64_t v39 = v5 + 3;
        uint64_t v40 = v38 + v33;
        do
        {
          long long v41 = &v4[v40];
          v34 -= v38;
          *long long v41 = *(unsigned char *)(v39 + v40 - 2);
          v41[1] = *(unsigned char *)(v39 + v40 - 1);
          v41[2] = *(unsigned char *)(v39 + v40);
          v40 += v38;
        }
        while (v34 > v38);
      }
      break;
    default:
      if (v37 > 0xF
        || (result & 1) != 0
        || (v35 & 1) != 0
        || (v37 & 1) != 0
        || (v38 & 1) != 0)
      {
        uint64_t result = (uint64_t)memcpy((void *)result, v35, v37);
        if (v34 > v38)
        {
          uint64_t v53 = v38 + v33;
          unsigned int v54 = v6 * v12 - v33 - v38;
          do
          {
            unint64_t v55 = v34 - v38;
            if (v34 - v38 >= v37) {
              size_t v37 = v37;
            }
            else {
              size_t v37 = v54;
            }
            uint64_t result = (uint64_t)memcpy(&v4[v53], &v10[v53], v37);
            v53 += v38;
            v54 -= v38;
            v34 -= v38;
          }
          while (v55 > v38);
        }
      }
      else
      {
        unsigned int v44 = v38 - v37;
        if ((((v35 | v38) | (result | v37)) & 3) != 0)
        {
          uint64_t v45 = v44 >> 1;
          uint64_t v46 = v45;
          while (1)
          {
            uint64_t v47 = (_WORD *)result;
            v48 = v35;
            size_t v49 = v37;
            do
            {
              __int16 v50 = *v48++;
              *v47++ = v50;
              v49 -= 2;
            }
            while (v49);
            BOOL v31 = v34 > v38;
            v34 -= v38;
            if (!v31) {
              break;
            }
            unsigned int v35 = &v48[v46];
            uint64_t result = (uint64_t)&v47[v46];
            if (v34 < v37)
            {
              uint64_t v51 = 0;
              uint64_t v52 = v45;
              do
              {
                *((unsigned char *)&v47[v52] + v51) = *((unsigned char *)&v48[v52] + v51);
                ++v51;
              }
              while (v34 != v51);
              return result;
            }
          }
        }
        else
        {
          uint64_t v56 = v44 >> 2;
          uint64_t v57 = v56;
          while (1)
          {
            v58 = (_DWORD *)result;
            v59 = (int *)v35;
            size_t v60 = v37;
            do
            {
              int v61 = *v59++;
              *v58++ = v61;
              v60 -= 4;
            }
            while (v60);
            BOOL v31 = v34 > v38;
            v34 -= v38;
            if (!v31) {
              break;
            }
            unsigned int v35 = (__int16 *)&v59[v57];
            uint64_t result = (uint64_t)&v58[v57];
            if (v34 < v37)
            {
              uint64_t v62 = 0;
              uint64_t v63 = v56;
              do
              {
                *((unsigned char *)&v58[v63] + v62) = *((unsigned char *)&v59[v63] + v62);
                ++v62;
              }
              while (v34 != v62);
              return result;
            }
          }
        }
      }
      break;
  }
  return result;
}

uint64_t png_do_read_interlace(uint64_t result, uint64_t a2, int a3, int a4)
{
  v57[1] = *MEMORY[0x263EF8340];
  if (!result || !a2) {
    return result;
  }
  uint64_t v4 = result;
  int v5 = *(_DWORD *)result;
  int v6 = png_do_read_interlace_png_pass_inc[a3];
  unsigned int v7 = v6 * *(_DWORD *)result;
  unint64_t v8 = *(unsigned __int8 *)(result + 19);
  switch(v8)
  {
    case 4:
      int v36 = (4 * (*(_DWORD *)result & 1)) ^ 4;
      int v37 = ~(4 * v7) & 4;
      if ((a4 & 0x10000) != 0)
      {
        int v38 = 4;
      }
      else
      {
        int v36 = 4 * (*(_DWORD *)result & 1);
        int v37 = 4 * (v7 & 1);
        int v38 = 0;
      }
      if ((a4 & 0x10000) != 0) {
        int v39 = 0;
      }
      else {
        int v39 = 4;
      }
      if ((a4 & 0x10000) != 0) {
        int v40 = -4;
      }
      else {
        int v40 = 4;
      }
      if (v5)
      {
        unsigned int v41 = 0;
        long long v42 = (unsigned __int8 *)(a2 + ((v5 - 1) >> 1));
        uint64_t v43 = (unsigned char *)(a2 + ((v7 - 1) >> 1));
        if (v6 <= 1) {
          int v6 = 1;
        }
        uint64_t result = 3855;
        do
        {
          int v44 = (*v42 >> v36) & 0xF;
          int v45 = v6;
          do
          {
            *uint64_t v43 = (0xF0Fu >> (4 - v37)) & *v43 | (v44 << v37);
            BOOL v20 = v37 == v39;
            uint64_t v46 = v37 == v39;
            v37 += v40;
            if (v20) {
              int v37 = v38;
            }
            v43 -= v46;
            --v45;
          }
          while (v45);
          BOOL v20 = v36 == v39;
          uint64_t v47 = v36 == v39;
          v36 += v40;
          if (v20) {
            int v36 = v38;
          }
          v42 -= v47;
          ++v41;
        }
        while (v41 < *(_DWORD *)v4);
      }
      goto LABEL_79;
    case 2:
      int v23 = (2 * (_BYTE)v5 + 6) & 6 ^ 6;
      int v24 = 2 * v7 + 6;
      int v25 = ~v24 & 6;
      if ((a4 & 0x10000) != 0)
      {
        int v23 = (2 * (_BYTE)v5 + 6) & 6;
        int v25 = v24 & 6;
        int v26 = 6;
      }
      else
      {
        int v26 = 0;
      }
      if ((a4 & 0x10000) != 0) {
        int v27 = 0;
      }
      else {
        int v27 = 6;
      }
      if ((a4 & 0x10000) != 0) {
        int v28 = -2;
      }
      else {
        int v28 = 2;
      }
      if (v5)
      {
        unsigned int v29 = 0;
        char v30 = (unsigned __int8 *)(a2 + ((v5 - 1) >> 2));
        BOOL v31 = (unsigned char *)(a2 + ((v7 - 1) >> 2));
        if (v6 <= 1) {
          int v6 = 1;
        }
        uint64_t result = 16191;
        do
        {
          int v32 = (*v30 >> v23) & 3;
          int v33 = v6;
          do
          {
            *BOOL v31 = (0x3F3Fu >> (6 - v25)) & *v31 | (v32 << v25);
            BOOL v20 = v25 == v27;
            uint64_t v34 = v25 == v27;
            v25 += v28;
            if (v20) {
              int v25 = v26;
            }
            v31 -= v34;
            --v33;
          }
          while (v33);
          BOOL v20 = v23 == v27;
          uint64_t v35 = v23 == v27;
          v23 += v28;
          if (v20) {
            int v23 = v26;
          }
          v30 -= v35;
          ++v29;
        }
        while (v29 < *(_DWORD *)v4);
      }
      goto LABEL_79;
    case 1:
      unsigned int v9 = v5 - 1;
      int v10 = (v5 - 1) & 7;
      int v11 = -v7 & 7;
      uint64_t result = (v7 - 1) & 7;
      if ((a4 & 0x10000) != 0) {
        int v11 = (v7 - 1) & 7;
      }
      else {
        v10 ^= 7u;
      }
      if ((a4 & 0x10000) != 0) {
        int v12 = 7;
      }
      else {
        int v12 = 0;
      }
      if ((a4 & 0x10000) != 0) {
        int v13 = 0;
      }
      else {
        int v13 = 7;
      }
      if ((a4 & 0x10000) != 0) {
        int v14 = -1;
      }
      else {
        int v14 = 1;
      }
      if (v5)
      {
        unsigned int v15 = 0;
        char v16 = (unsigned __int8 *)(a2 + (v9 >> 3));
        unsigned int v17 = (unsigned char *)(a2 + ((v7 - 1) >> 3));
        if (v6 <= 1) {
          int v6 = 1;
        }
        uint64_t result = 32639;
        do
        {
          int v18 = (*v16 >> v10) & 1;
          int v19 = v6;
          do
          {
            *unsigned int v17 = (0x7F7Fu >> (7 - v11)) & *v17 | (v18 << v11);
            BOOL v20 = v11 == v13;
            uint64_t v21 = v11 == v13;
            v11 += v14;
            if (v20) {
              int v11 = v12;
            }
            v17 -= v21;
            --v19;
          }
          while (v19);
          BOOL v20 = v10 == v13;
          uint64_t v22 = v10 == v13;
          v10 += v14;
          if (v20) {
            int v10 = v12;
          }
          v16 -= v22;
          ++v15;
        }
        while (v15 < *(_DWORD *)v4);
      }
      goto LABEL_79;
  }
  if (v5)
  {
    unsigned int v48 = 0;
    size_t v49 = v8 >> 3;
    __int16 v50 = (char *)(a2 + (v8 >> 3) * (unint64_t)(v7 - 1));
    uint64_t v51 = a2 + (v8 >> 3) * (unint64_t)(v5 - 1);
    if (v6 <= 1) {
      int v52 = 1;
    }
    else {
      int v52 = png_do_read_interlace_png_pass_inc[a3];
    }
    do
    {
      __memcpy_chk();
      int v53 = v52;
      do
      {
        uint64_t result = (uint64_t)memcpy(v50, v57, v49);
        v50 -= v49;
        --v53;
      }
      while (v53);
      v51 -= v49;
      ++v48;
    }
    while (v48 < *(_DWORD *)v4);
LABEL_79:
    LODWORD(v8) = *(unsigned __int8 *)(v4 + 19);
  }
  *(_DWORD *)uint64_t v4 = v7;
  BOOL v54 = v8 >= 8;
  unint64_t v55 = (v7 * (unint64_t)v8 + 7) >> 3;
  unint64_t v56 = v7 * (unint64_t)(v8 >> 3);
  if (v54) {
    unint64_t v55 = v56;
  }
  *(void *)(v4 + 8) = v55;
  return result;
}

uint64_t png_read_filter_row(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5 = a5 - 1;
  if ((a5 - 1) <= 3)
  {
    uint64_t v9 = result;
    if (!*(void *)(result + 1144))
    {
      unsigned int v10 = (*(unsigned __int8 *)(result + 610) + 7) >> 3;
      *(void *)(result + 1144) = png_read_filter_row_sub;
      *(void *)(result + 1152) = png_read_filter_row_up;
      *(void *)(result + 1160) = png_read_filter_row_avg;
      int v11 = png_read_filter_row_paeth_multibyte_pixel;
      if (v10 == 1) {
        int v11 = png_read_filter_row_paeth_1byte_pixel;
      }
      *(void *)(result + 1168) = v11;
      png_init_filter_functions_neon((void *)result, v10);
    }
    int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8 * v5 + 1144);
    return v12(a2, a3, a4);
  }
  return result;
}

uint64_t png_read_IDAT_data(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a2) {
    unint64_t v5 = a3;
  }
  else {
    unint64_t v5 = 0;
  }
  *(void *)(a1 + 336) = a2;
  *(_DWORD *)(a1 + 344) = 0;
  while (1)
  {
    if (*(_DWORD *)(a1 + 320))
    {
      if (!a2) {
        goto LABEL_19;
      }
    }
    else
    {
      unsigned int chunk_header = *(_DWORD *)(a1 + 576);
      while (!chunk_header)
      {
        png_crc_finish(a1, 0);
        unsigned int chunk_header = png_read_chunk_header(a1);
        *(_DWORD *)(a1 + 576) = chunk_header;
        if (*(_DWORD *)(a1 + 528) != 1229209940) {
          goto LABEL_33;
        }
      }
      unsigned int v11 = *(_DWORD *)(a1 + 1128);
      if (v11 >= chunk_header) {
        size_t v12 = chunk_header;
      }
      else {
        size_t v12 = v11;
      }
      buffer = (Bytef *)png_read_buffer(a1, v12, 0);
      png_crc_read(a1, buffer, v12);
      *(_DWORD *)(a1 + 576) -= v12;
      *(void *)(a1 + 312) = buffer;
      *(_DWORD *)(a1 + 320) = v12;
      if (!a2)
      {
LABEL_19:
        *(void *)(a1 + 336) = &v15;
        *(_DWORD *)(a1 + 344) = 1024;
        uint64_t result = png_zlib_inflate(a1, 0);
        int v9 = result;
        unint64_t v5 = v5 - *(unsigned int *)(a1 + 344) + 1024;
        goto LABEL_20;
      }
    }
    uint64_t v6 = v5 >= 0xFFFFFFFF ? 0xFFFFFFFFLL : v5;
    unint64_t v7 = v5 - v6;
    *(_DWORD *)(a1 + 344) = v6;
    uint64_t result = png_zlib_inflate(a1, 0);
    int v9 = result;
    unint64_t v5 = v7 + *(unsigned int *)(a1 + 344);
LABEL_20:
    *(_DWORD *)(a1 + 344) = 0;
    if (v9) {
      break;
    }
    if (!v5) {
      return result;
    }
  }
  if (v9 != 1)
  {
    png_zstream_error(a1, v9);
    int v14 = *(const char **)(a1 + 360);
    if (a2) {
      png_chunk_error(a1, v14);
    }
    return png_chunk_benign_error(a1, v14);
  }
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 292) |= 0x800000008uLL;
  if (*(_DWORD *)(a1 + 320) || *(_DWORD *)(a1 + 576)) {
    uint64_t result = png_chunk_benign_error(a1, "Extra compressed data");
  }
  if (v5)
  {
    if (a2) {
LABEL_33:
    }
      png_error(a1, "Not enough image data");
    int v14 = "Too much image data";
    return png_chunk_benign_error(a1, v14);
  }
  return result;
}

uint64_t png_read_finish_IDAT(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(unsigned char *)(result + 296) & 8) == 0)
  {
    uint64_t result = png_read_IDAT_data(result, 0, 0);
    *(void *)(v1 + 336) = 0;
    int v2 = *(_DWORD *)(v1 + 296);
    if ((v2 & 8) == 0)
    {
      *(_DWORD *)(v1 + 292) |= 8u;
      *(_DWORD *)(v1 + 296) = v2 | 8;
    }
  }
  if (*(_DWORD *)(v1 + 304) == 1229209940)
  {
    *(void *)(v1 + 312) = 0;
    *(_DWORD *)(v1 + 320) = 0;
    *(_DWORD *)(v1 + 304) = 0;
    unsigned int v3 = *(_DWORD *)(v1 + 576);
    return png_crc_finish(v1, v3);
  }
  return result;
}

void png_read_finish_row(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 524) + 1;
  *(_DWORD *)(a1 + 524) = v1;
  if (v1 >= *(_DWORD *)(a1 + 504))
  {
    if (*(unsigned char *)(a1 + 604))
    {
      *(_DWORD *)(a1 + 524) = 0;
      bzero(*(void **)(a1 + 536), *(void *)(a1 + 512) + 1);
      unsigned __int8 v3 = *(unsigned char *)(a1 + 605);
      while (++v3 <= 6u)
      {
        unsigned int v4 = png_read_start_row_png_pass_inc[v3];
        unsigned int v5 = *(_DWORD *)(a1 + 496) + v4 + ~png_read_start_row_png_pass_start[v3];
        *(_DWORD *)(a1 + 520) = v5 / v4;
        if ((*(unsigned char *)(a1 + 300) & 2) == 0)
        {
          unsigned int v6 = png_read_finish_row_png_pass_yinc[v3];
          unsigned int v7 = *(_DWORD *)(a1 + 500) + v6 + ~png_read_finish_row_png_pass_ystart[v3];
          *(_DWORD *)(a1 + 504) = v7 / v6;
          if (v7 < v6 || v5 < v4) {
            continue;
          }
        }
        *(unsigned char *)(a1 + 605) = v3;
        return;
      }
      *(unsigned char *)(a1 + 605) = v3;
    }
    png_read_finish_IDAT(a1);
  }
}

uint64_t png_read_start_row(uint64_t a1)
{
  png_init_read_transformations(a1);
  if (*(unsigned char *)(a1 + 604))
  {
    int v2 = *(_DWORD *)(a1 + 300);
    unsigned int v3 = *(_DWORD *)(a1 + 500);
    if ((v2 & 2) == 0) {
      unsigned int v3 = (v3 + 7) >> 3;
    }
    *(_DWORD *)(a1 + 504) = v3;
    int v4 = *(_DWORD *)(a1 + 496);
    *(_DWORD *)(a1 + 520) = (v4
                           + png_read_start_row_png_pass_inc[*(unsigned __int8 *)(a1 + 605)]
                           + ~png_read_start_row_png_pass_start[*(unsigned __int8 *)(a1 + 605)])
                          / png_read_start_row_png_pass_inc[*(unsigned __int8 *)(a1 + 605)];
  }
  else
  {
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 500);
    int v4 = *(_DWORD *)(a1 + 496);
    *(_DWORD *)(a1 + 520) = v4;
    int v2 = *(_DWORD *)(a1 + 300);
  }
  unsigned int v5 = *(unsigned __int8 *)(a1 + 610);
  if ((v2 & 4) != 0 && *(unsigned __int8 *)(a1 + 608) < 8u) {
    unsigned int v5 = 8;
  }
  if ((v2 & 0x1000) == 0)
  {
    if ((v2 & 0x200) != 0) {
      *(_DWORD *)(a1 + 300) = v2 & 0xFFFFFDFF;
    }
    goto LABEL_25;
  }
  int v6 = *(unsigned __int8 *)(a1 + 607);
  if (!*(unsigned char *)(a1 + 607))
  {
    if (v5 <= 8) {
      unsigned int v5 = 8;
    }
    v5 <<= *(_WORD *)(a1 + 600) != 0;
    goto LABEL_23;
  }
  if (v6 != 2)
  {
    if (v6 == 3)
    {
      if (*(_WORD *)(a1 + 600)) {
        unsigned int v5 = 32;
      }
      else {
        unsigned int v5 = 24;
      }
      if ((v2 & 0x200) == 0) {
        goto LABEL_25;
      }
LABEL_24:
      v5 <<= *(unsigned __int8 *)(a1 + 608) < 0x10u;
      goto LABEL_25;
    }
LABEL_23:
    if ((v2 & 0x200) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (*(_WORD *)(a1 + 600)) {
    unsigned int v5 = (87384 * v5) >> 16;
  }
  if ((v2 & 0x200) != 0) {
    goto LABEL_24;
  }
LABEL_25:
  unsigned int v7 = *(_DWORD *)(a1 + 300);
  if ((v7 & 0x8000) == 0)
  {
    if ((v7 & 0x4000) != 0) {
      goto LABEL_37;
    }
LABEL_46:
    if ((v7 & 0x100000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_47;
  }
  if (v5 <= 0x20) {
    int v8 = 32;
  }
  else {
    int v8 = 64;
  }
  if (v5 >= 9) {
    int v9 = 32;
  }
  else {
    int v9 = 16;
  }
  if (!*(unsigned char *)(a1 + 607)) {
    unsigned int v5 = v9;
  }
  if (*(unsigned __int8 *)(a1 + 607) - 2 < 2) {
    unsigned int v5 = v8;
  }
  if ((v7 & 0x4000) == 0) {
    goto LABEL_46;
  }
LABEL_37:
  if ((v7 & 0x8000) != 0
    || ((*(_WORD *)(a1 + 600) != 0) & (v7 >> 12)) != 0
    || (int v10 = *(unsigned __int8 *)(a1 + 607), v10 == 4))
  {
    if (v5 >= 0x11) {
      unsigned int v5 = 64;
    }
    else {
      unsigned int v5 = 32;
    }
    if ((v7 & 0x100000) == 0) {
      goto LABEL_49;
    }
  }
  else
  {
    BOOL v20 = v10 == 6;
    if (v10 == 6) {
      int v21 = 64;
    }
    else {
      int v21 = 48;
    }
    if (v20) {
      int v22 = 32;
    }
    else {
      int v22 = 24;
    }
    if (v5 <= 8) {
      unsigned int v5 = v22;
    }
    else {
      unsigned int v5 = v21;
    }
    if ((v7 & 0x100000) == 0) {
      goto LABEL_49;
    }
  }
LABEL_47:
  if (*(unsigned __int8 *)(a1 + 289) * *(unsigned __int8 *)(a1 + 288) > v5) {
    unsigned int v5 = *(unsigned __int8 *)(a1 + 289) * *(unsigned __int8 *)(a1 + 288);
  }
LABEL_49:
  *(unsigned char *)(a1 + 614) = v5;
  *(unsigned char *)(a1 + 615) = 0;
  unsigned int v11 = (v4 + 7) & 0xFFFFFFF8;
  unint64_t v12 = v11 * (unint64_t)(v5 >> 3);
  unint64_t v13 = (v11 * (unint64_t)v5) >> 3;
  if (v5 > 7) {
    unint64_t v13 = v12;
  }
  size_t v14 = v13 + ((v5 + 7) >> 3) + 49;
  if (v14 > *(void *)(a1 + 1104))
  {
    png_free(a1, *(void **)(a1 + 1016));
    png_free(a1, *(void **)(a1 + 1136));
    if (*(unsigned char *)(a1 + 604)) {
      char v15 = png_calloc((void *)a1, v14);
    }
    else {
      char v15 = png_malloc((void *)a1, v14);
    }
    *(void *)(a1 + 1016) = v15;
    uint64_t v16 = png_malloc((void *)a1, v14);
    *(void *)(a1 + 1136) = v16;
    *(void *)(a1 + 544) = ((*(void *)(a1 + 1016) + 32) & 0xFFFFFFFFFFFFFFF0) - 1;
    *(void *)(a1 + 536) = ((unint64_t)(v16 + 4) & 0xFFFFFFFFFFFFFFF0) - 1;
    *(void *)(a1 + 1104) = v14;
  }
  uint64_t v17 = *(void *)(a1 + 512);
  if (v17 == -1)
  {
    int v23 = "Row has too many bytes to allocate in memory";
    goto LABEL_78;
  }
  bzero(*(void **)(a1 + 536), v17 + 1);
  int v18 = *(void **)(a1 + 1112);
  if (v18)
  {
    *(void *)(a1 + 1112) = 0;
    *(void *)(a1 + 1120) = 0;
    png_free(a1, v18);
  }
  uint64_t result = png_inflate_claim(a1, 1229209940);
  if (result)
  {
    int v23 = *(const char **)(a1 + 360);
LABEL_78:
    png_error(a1, v23);
  }
  *(_DWORD *)(a1 + 296) |= 0x40u;
  return result;
}

uint64_t png_inflate(uint64_t a1, int a2, uint64_t a3, int *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 304) == a2)
  {
    uint64_t v10 = *a6;
    int v11 = *a4;
    *(void *)(a1 + 312) = a3;
    *(_DWORD *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 344) = 0;
    if (a5) {
      *(void *)(a1 + 336) = a5;
    }
    do
    {
      *(_DWORD *)(a1 + 320) += v11;
      if (a5)
      {
        LODWORD(v12) = -1;
      }
      else
      {
        *(void *)(a1 + 336) = &v19;
        LODWORD(v12) = 1024;
      }
      unint64_t v13 = v10 + *(unsigned int *)(a1 + 344);
      if (v13 >= v12) {
        uint64_t v12 = v12;
      }
      else {
        uint64_t v12 = v13;
      }
      *(_DWORD *)(a1 + 344) = v12;
      uint64_t v10 = v13 - v12;
      uint64_t v14 = png_zlib_inflate(a1, 4 * (v13 == v12));
      int v11 = 0;
    }
    while (!v14);
    uint64_t v15 = v14;
    if (!a5) {
      *(void *)(a1 + 336) = 0;
    }
    int v16 = *(_DWORD *)(a1 + 320);
    uint64_t v17 = v10 + *(unsigned int *)(a1 + 344);
    if (v17) {
      *a6 -= v17;
    }
    if (v16) {
      *a4 -= v16;
    }
    png_zstream_error(a1, v14);
  }
  else
  {
    *(void *)(a1 + 360) = "zstream unclaimed";
    return 4294967294;
  }
  return v15;
}

uint64_t png_read_filter_row_sub(uint64_t result, unsigned char *a2)
{
  unint64_t v2 = *(void *)(result + 8);
  unint64_t v3 = ((unint64_t)*(unsigned __int8 *)(result + 19) + 7) >> 3;
  if (v3 < v2)
  {
    do
    {
      a2[v3] += *a2;
      ++a2;
      --v2;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t png_read_filter_row_up(uint64_t result, unsigned char *a2, char *a3)
{
  for (uint64_t i = *(void *)(result + 8); i; --i)
  {
    char v4 = *a3++;
    *a2++ += v4;
  }
  return result;
}

uint64_t png_read_filter_row_avg(uint64_t result, unsigned char *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *(unsigned __int8 *)(result + 19);
  unint64_t v4 = (unint64_t)(v3 + 7) >> 3;
  uint64_t v5 = *(void *)(result + 8);
  if (*(unsigned char *)(result + 19))
  {
    if (v4 <= 1) {
      unint64_t v6 = 1;
    }
    else {
      unint64_t v6 = (unint64_t)(v3 + 7) >> 3;
    }
    do
    {
      unsigned int v7 = *a3++;
      *a2++ += v7 >> 1;
      --v6;
    }
    while (v6);
  }
  if (v5 != v4)
  {
    uint64_t v8 = -(uint64_t)v4;
    uint64_t v9 = -v5;
    do
    {
      int v10 = *a3++;
      *a2 += (a2[v8] + v10) >> 1;
      ++a2;
      ++v9;
    }
    while (v8 != v9);
  }
  return result;
}

uint64_t png_read_filter_row_paeth_1byte_pixel(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  int v4 = *a3;
  unsigned __int8 v5 = *a2 + v4;
  *a2 = v5;
  if (v3 >= 2)
  {
    unint64_t v6 = &a2[v3];
    unsigned int v7 = a2 + 1;
    uint64_t v8 = a3 + 1;
    do
    {
      int v10 = *v8++;
      int v9 = v10;
      unsigned int v11 = v10 - v4;
      int v12 = v5 - v4;
      if (v10 - v4 >= 0) {
        unsigned int v13 = v11;
      }
      else {
        unsigned int v13 = -v11;
      }
      if (v12 >= 0) {
        unsigned int v14 = v5 - v4;
      }
      else {
        unsigned int v14 = v4 - v5;
      }
      int v15 = v11 + v12;
      if (v15 < 0) {
        int v15 = -v15;
      }
      if (v14 >= v13)
      {
        unsigned int v16 = v13;
      }
      else
      {
        unsigned __int8 v5 = v9;
        unsigned int v16 = v14;
      }
      if (v15 >= v16) {
        LOBYTE(v4) = v5;
      }
      unsigned __int8 v5 = v4 + *v7;
      *v7++ = v5;
      int v4 = v9;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t png_read_filter_row_paeth_multibyte_pixel(uint64_t result, unsigned char *a2, char *a3)
{
  uint64_t v3 = *(unsigned __int8 *)(result + 19);
  unint64_t v4 = (unint64_t)(v3 + 7) >> 3;
  if (*(unsigned char *)(result + 19))
  {
    unint64_t v5 = (unint64_t)&a2[(unint64_t)(v3 + 7) >> 3];
    if (&a2[v4] <= a2 + 1) {
      unint64_t v6 = a2 + 1;
    }
    else {
      unint64_t v6 = &a2[v4];
    }
    unsigned int v7 = a2;
    do
    {
      char v8 = *a3++;
      *v7++ += v8;
    }
    while ((unint64_t)v7 < v5);
  }
  else
  {
    unint64_t v6 = a2;
    unsigned int v7 = a2;
  }
  uint64_t v9 = *(void *)(result + 8);
  if (v7 < &a2[v9])
  {
    uint64_t v10 = -(uint64_t)v4;
    unsigned int v11 = (unsigned char *)(&a2[v9] - v6);
    do
    {
      int v12 = a3[v10];
      int v13 = v7[v10];
      int v15 = *a3++;
      char v14 = v15;
      unsigned int v16 = v15 - v12;
      int v17 = v13 - v12;
      if (v15 - v12 >= 0) {
        unsigned int v18 = v16;
      }
      else {
        unsigned int v18 = -v16;
      }
      if (v17 >= 0) {
        unsigned int v19 = v13 - v12;
      }
      else {
        unsigned int v19 = v12 - v13;
      }
      int v20 = v16 + v17;
      if (v20 < 0) {
        int v20 = -v20;
      }
      if (v19 >= v18)
      {
        unsigned int v21 = v18;
      }
      else
      {
        LOBYTE(v13) = v14;
        unsigned int v21 = v19;
      }
      if (v20 >= v21) {
        LOBYTE(v12) = v13;
      }
      *v7++ += v12;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t png_set_bKGD(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && a2)
  {
    if (a3)
    {
      *(void *)(a2 + 202) = *(void *)a3;
      *(_WORD *)(a2 + 210) = *(_WORD *)(a3 + 8);
      *(_DWORD *)(a2 + 8) |= 0x20u;
    }
  }
  return result;
}

void *png_set_eXIf_1(void *result, uint64_t a2, int a3, uint64_t a4)
{
  if (result && a2)
  {
    unsigned int v7 = result;
    char v8 = *(void **)(a2 + 240);
    if (v8)
    {
      png_free((uint64_t)result, v8);
      *(void *)(a2 + 240) = 0;
    }
    *(_DWORD *)(a2 + 236) = a3;
    uint64_t result = png_malloc_warn(v7, a3);
    *(void *)(a2 + 240) = result;
    if (result)
    {
      *(_DWORD *)(a2 + 300) |= 0x8000u;
      if (*(int *)(a2 + 236) >= 1)
      {
        uint64_t v9 = 0;
        do
        {
          *(unsigned char *)(*(void *)(a2 + 240) + v9) = *(unsigned char *)(a4 + v9);
          ++v9;
        }
        while (v9 < *(int *)(a2 + 236));
      }
      *(_DWORD *)(a2 + 8) |= 0x10000u;
    }
    else
    {
      return (void *)png_warning((uint64_t)v7, "Insufficient memory for eXIf chunk data");
    }
  }
  return result;
}

void *png_set_hIST(void *result, uint64_t a2, const void *a3)
{
  if (!result || !a2) {
    return result;
  }
  unint64_t v4 = result;
  if (*(unsigned __int16 *)(a2 + 32) - 257 <= 0xFFFFFEFF)
  {
    unint64_t v5 = "Invalid palette size, hIST allocation skipped";
LABEL_11:
    return (void *)png_warning((uint64_t)v4, v5);
  }
  png_free_data((uint64_t)result, a2, 8u, 0);
  uint64_t result = png_malloc_warn(v4, 0x200uLL);
  *(void *)(a2 + 256) = result;
  if (!result)
  {
    unint64_t v5 = "Insufficient memory for hIST chunk data";
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 300) |= 8u;
  if (*(_WORD *)(a2 + 32)) {
    uint64_t result = memcpy(result, a3, 2 * *(unsigned __int16 *)(a2 + 32));
  }
  *(_DWORD *)(a2 + 8) |= 0x40u;
  return result;
}

uint64_t png_set_IHDR(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7, unsigned __int8 a8, unsigned __int8 a9)
{
  if (!result || !a2) {
    return result;
  }
  *(_DWORD *)a2 = a3;
  *(_DWORD *)(a2 + 4) = a4;
  *(unsigned char *)(a2 + 36) = a5;
  *(unsigned char *)(a2 + 37) = a6;
  *(unsigned char *)(a2 + 38) = a8;
  *(unsigned char *)(a2 + 39) = a9;
  *(unsigned char *)(a2 + 40) = a7;
  uint64_t result = png_check_IHDR(result, a3, a4, a5, a6, a7, a8, a9);
  int v11 = *(unsigned __int8 *)(a2 + 37);
  if (v11 == 3)
  {
    char v12 = 1;
LABEL_7:
    *(unsigned char *)(a2 + 41) = v12;
    goto LABEL_8;
  }
  char v12 = v11 & 2 | 1;
  *(unsigned char *)(a2 + 41) = v12;
  if ((v11 & 4) != 0)
  {
    char v12 = (v11 & 2) + 2;
    goto LABEL_7;
  }
LABEL_8:
  unsigned __int8 v13 = *(unsigned char *)(a2 + 36) * v12;
  *(unsigned char *)(a2 + 42) = v13;
  BOOL v14 = v13 >= 8u;
  unint64_t v15 = (v13 * (unint64_t)a3 + 7) >> 3;
  unint64_t v16 = a3 * (unint64_t)(v13 >> 3);
  if (!v14) {
    unint64_t v16 = v15;
  }
  *(void *)(a2 + 16) = v16;
  return result;
}

uint64_t png_set_oFFs(uint64_t result, uint64_t a2, int a3, int a4, char a5)
{
  if (result)
  {
    if (a2)
    {
      *(_DWORD *)(a2 + 212) = a3;
      *(_DWORD *)(a2 + 216) = a4;
      *(unsigned char *)(a2 + 220) = a5;
      *(_DWORD *)(a2 + 8) |= 0x100u;
    }
  }
  return result;
}

void png_set_pCAL(void *a1, uint64_t a2, char *__s, int a4, int a5, unsigned int a6, int a7, const char *a8, const char **a9)
{
  if (!a1) {
    return;
  }
  if (!a2) {
    return;
  }
  if (!__s) {
    return;
  }
  if (!a8) {
    return;
  }
  int v17 = a9;
  if (a7 >= 1 && !a9) {
    return;
  }
  size_t v18 = strlen(__s);
  if (a6 >= 4)
  {
    unsigned int v19 = "Invalid pCAL equation type";
LABEL_27:
    png_chunk_report((uint64_t)a1, v19, 1);
    return;
  }
  if (a7 > 0xFF)
  {
    unsigned int v19 = "Invalid pCAL parameter count";
    goto LABEL_27;
  }
  size_t v32 = v18;
  int v31 = a5;
  if (a7)
  {
    uint64_t v20 = a7;
    while (*v17)
    {
      size_t v21 = strlen(*v17);
      if (!png_check_fp_string((uint64_t)*v17, v21)) {
        break;
      }
      ++v17;
      if (!--v20) {
        goto LABEL_17;
      }
    }
    unsigned int v19 = "Invalid format for pCAL parameter";
    goto LABEL_27;
  }
LABEL_17:
  int v22 = png_malloc_warn(a1, v32 + 1);
  *(void *)(a2 + 264) = v22;
  if (!v22)
  {
    unsigned int v19 = "Insufficient memory for pCAL purpose";
    goto LABEL_27;
  }
  memcpy(v22, __s, v32 + 1);
  *(_DWORD *)(a2 + 272) = a4;
  *(_DWORD *)(a2 + 276) = v31;
  *(unsigned char *)(a2 + 296) = a6;
  *(unsigned char *)(a2 + 297) = a7;
  size_t v23 = strlen(a8) + 1;
  int v24 = png_malloc_warn(a1, v23);
  *(void *)(a2 + 280) = v24;
  if (v24)
  {
    memcpy(v24, a8, v23);
    int v25 = png_malloc_warn(a1, 8 * (a7 + 1));
    *(void *)(a2 + 288) = v25;
    if (v25)
    {
      bzero(v25, 8 * (a7 + 1));
      if (a7 < 1)
      {
LABEL_24:
        *(_DWORD *)(a2 + 8) |= 0x400u;
        *(_DWORD *)(a2 + 300) |= 0x80u;
        return;
      }
      unint64_t v26 = 0;
      uint64_t v27 = 8 * a7;
      while (1)
      {
        size_t v28 = strlen(a9[v26 / 8]) + 1;
        *(void *)(*(void *)(a2 + 288) + v26) = png_malloc_warn(a1, v28);
        unsigned int v29 = *(void **)(*(void *)(a2 + 288) + v26);
        if (!v29) {
          break;
        }
        memcpy(v29, a9[v26 / 8], v28);
        v26 += 8;
        if (v27 == v26) {
          goto LABEL_24;
        }
      }
      char v30 = "Insufficient memory for pCAL parameter";
    }
    else
    {
      char v30 = "Insufficient memory for pCAL params";
    }
  }
  else
  {
    char v30 = "Insufficient memory for pCAL units";
  }
  png_warning((uint64_t)a1, v30);
}

void *png_set_sCAL_s(void *result, uint64_t a2, int a3, char *__s, const char *a5)
{
  if (!result || !a2) {
    return result;
  }
  char v6 = a3;
  unsigned int v7 = result;
  if ((a3 - 3) <= 0xFFFFFFFD)
  {
    unint64_t v16 = "Invalid sCAL unit";
LABEL_22:
    png_error((uint64_t)v7, v16);
  }
  if (!__s
    || (size_t v10 = strlen(__s)) == 0
    || *__s == 45
    || (size_t v11 = v10, !png_check_fp_string((uint64_t)__s, v10)))
  {
    unint64_t v16 = "Invalid sCAL width";
    goto LABEL_22;
  }
  if (!a5 || (size_t v12 = strlen(a5)) == 0 || *a5 == 45 || (v13 = v12, !png_check_fp_string((uint64_t)a5, v12)))
  {
    unint64_t v16 = "Invalid sCAL height";
    goto LABEL_22;
  }
  *(unsigned char *)(a2 + 332) = v6;
  BOOL v14 = png_malloc_warn(v7, v11 + 1);
  *(void *)(a2 + 336) = v14;
  if (v14)
  {
    memcpy(v14, __s, v11 + 1);
    unint64_t v15 = png_malloc_warn(v7, v13 + 1);
    *(void *)(a2 + 344) = v15;
    if (v15)
    {
      uint64_t result = memcpy(v15, a5, v13 + 1);
      *(_DWORD *)(a2 + 8) |= 0x4000u;
      *(_DWORD *)(a2 + 300) |= 0x100u;
      return result;
    }
    png_free((uint64_t)v7, *(void **)(a2 + 336));
    *(void *)(a2 + 336) = 0;
  }
  return (void *)png_warning((uint64_t)v7, "Memory allocation failed while processing sCAL");
}

uint64_t png_set_pHYs(uint64_t result, uint64_t a2, int a3, int a4, char a5)
{
  if (result)
  {
    if (a2)
    {
      *(_DWORD *)(a2 + 224) = a3;
      *(_DWORD *)(a2 + 228) = a4;
      *(unsigned char *)(a2 + 232) = a5;
      *(_DWORD *)(a2 + 8) |= 0x80u;
    }
  }
  return result;
}

unsigned char *png_set_PLTE(unsigned char *result, uint64_t a2, const void *a3, unsigned int a4)
{
  if (!result || !a2) {
    return result;
  }
  unsigned int v7 = result;
  if (*(unsigned char *)(a2 + 37) == 3)
  {
    if ((a4 & 0x80000000) != 0 || 1 << *(unsigned char *)(a2 + 36) < (int)a4)
    {
      char v8 = "Invalid palette length";
      goto LABEL_20;
    }
  }
  else if (a4 > 0x100)
  {
    return (unsigned char *)png_warning((uint64_t)result, "Invalid palette length");
  }
  if (!a3 && a4 || !a4 && (result[984] & 1) == 0)
  {
    char v8 = "Invalid palette";
LABEL_20:
    png_error((uint64_t)result, v8);
  }
  png_free_data((uint64_t)result, a2, 0x1000u, 0);
  uint64_t result = png_calloc(v7, 0x300uLL);
  uint64_t v9 = result;
  *((void *)v7 + 73) = result;
  if (a4) {
    uint64_t result = memcpy(result, a3, 3 * a4);
  }
  *(void *)(a2 + 24) = v9;
  *((_WORD *)v7 + 296) = a4;
  *(_WORD *)(a2 + 32) = a4;
  *(_DWORD *)(a2 + 300) |= 0x1000u;
  *(_DWORD *)(a2 + 8) |= 8u;
  return result;
}

uint64_t png_set_sBIT(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && a2)
  {
    if (a3)
    {
      *(_DWORD *)(a2 + 176) = *(_DWORD *)a3;
      *(unsigned char *)(a2 + 180) = *(unsigned char *)(a3 + 4);
      *(_DWORD *)(a2 + 8) |= 2u;
    }
  }
  return result;
}

uint64_t png_set_text_2(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  uint64_t v4 = 0;
  if (!a3) {
    return v4;
  }
  uint64_t v5 = a1;
  if (!a1) {
    return v4;
  }
  uint64_t v6 = a2;
  if (!a2 || a4 < 1) {
    return v4;
  }
  unsigned int v9 = *(_DWORD *)(a2 + 148);
  if ((int)(*(_DWORD *)(a2 + 152) - v9) < a4)
  {
    if ((v9 ^ 0x7FFFFFFF) < a4
      || ((int)(v9 + a4) >= 2147483639 ? (unsigned int v10 = 0x7FFFFFFF) : (unsigned int v10 = ((v9 + a4) & 0xFFFFFFF8) + 8),
          (size_t v11 = png_realloc_array(a1, *(const void **)(a2 + 160), v9, v10 - v9, 0x38uLL)) == 0))
    {
      unsigned int v41 = "too many text chunks";
      uint64_t v4 = 1;
      uint64_t v42 = v5;
      goto LABEL_46;
    }
    size_t v12 = v11;
    png_free(v5, *(void **)(v6 + 160));
    *(void *)(v6 + 160) = v12;
    *(_DWORD *)(v6 + 300) |= 0x4000u;
    *(_DWORD *)(v6 + 152) = v10;
  }
  uint64_t v13 = a4;
  BOOL v14 = (const char **)(a3 + 48);
  uint64_t v46 = v5;
  uint64_t v44 = v6;
  while (1)
  {
    unint64_t v15 = *(v14 - 5);
    if (v15) {
      break;
    }
LABEL_42:
    v14 += 7;
    if (!--v13) {
      return 0;
    }
  }
  int v16 = *((_DWORD *)v14 - 12);
  if ((v16 - 3) <= 0xFFFFFFFB)
  {
    png_chunk_report(v5, "text compression mode is out of range", 1);
    goto LABEL_42;
  }
  uint64_t v17 = *(void *)(v6 + 160);
  int v18 = *(_DWORD *)(v6 + 148);
  size_t v19 = strlen(v15);
  if (v16 < 1)
  {
    size_t v21 = 0;
LABEL_23:
    size_t v22 = 0;
    goto LABEL_24;
  }
  uint64_t v20 = *(v14 - 1);
  if (v20) {
    size_t v21 = strlen(v20);
  }
  else {
    size_t v21 = 0;
  }
  if (!*v14) {
    goto LABEL_23;
  }
  size_t v22 = strlen(*v14);
LABEL_24:
  size_t v23 = *(v14 - 4);
  if (v23 && *v23)
  {
    size_t v24 = v22;
    size_t v25 = strlen(v23);
    size_t v22 = v24;
  }
  else
  {
    size_t v25 = 0;
    if (v16 < 1) {
      int v16 = -1;
    }
    else {
      int v16 = 1;
    }
  }
  uint64_t v45 = v17 + 56 * v18;
  *(_DWORD *)uint64_t v45 = v16;
  size_t v26 = v22;
  size_t __n = v25;
  uint64_t v27 = png_malloc_base(v46, v19 + v21 + v22 + v25 + 4);
  *(void *)(v45 + 8) = v27;
  size_t v28 = (void *)(v45 + 8);
  if (v27)
  {
    uint64_t v29 = v17;
    memcpy(v27, *(v14 - 5), v19);
    *(unsigned char *)(*v28 + v19) = 0;
    if (*((int *)v14 - 12) < 1)
    {
      int v31 = v18;
      uint64_t v34 = v29 + 56 * v18;
      *(void *)(v34 + 40) = 0;
      *(void *)(v34 + 48) = 0;
      size_t v26 = v19;
    }
    else
    {
      char v30 = (void *)(*v28 + v19 + 1);
      int v31 = v18;
      uint64_t v32 = v29 + 56 * v18;
      *(void *)(v32 + 40) = v30;
      memcpy(v30, *(v14 - 1), v21);
      *(unsigned char *)(*(void *)(v32 + 40) + v21) = 0;
      int v33 = (void *)(*(void *)(v32 + 40) + v21 + 1);
      *(void *)(v32 + 48) = v33;
      size_t v28 = (void *)(v32 + 48);
      memcpy(v33, *v14, v26);
      *(unsigned char *)(*v28 + v26) = 0;
    }
    uint64_t v6 = v44;
    uint64_t v35 = (void *)(*v28 + v26 + 1);
    uint64_t v36 = v29 + 56 * v31;
    *(void *)(v36 + 16) = v35;
    int v37 = (void **)(v36 + 16);
    size_t v38 = __n;
    if (__n)
    {
      memcpy(v35, *(v14 - 4), __n);
      size_t v38 = __n;
      uint64_t v35 = *v37;
    }
    uint64_t v5 = v46;
    *((unsigned char *)v35 + v38) = 0;
    if (*(int *)v45 <= 0) {
      size_t v39 = v38;
    }
    else {
      size_t v39 = 0;
    }
    if (*(int *)v45 <= 0) {
      size_t v38 = 0;
    }
    uint64_t v40 = v29 + 56 * v31;
    *(void *)(v40 + 24) = v39;
    *(void *)(v40 + 32) = v38;
    ++*(_DWORD *)(v44 + 148);
    goto LABEL_42;
  }
  unsigned int v41 = "text chunk: out of memory";
  uint64_t v4 = 1;
  uint64_t v42 = v46;
LABEL_46:
  png_chunk_report(v42, v41, 1);
  return v4;
}

uint64_t png_set_tIME(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && a2 && a3 && (*(unsigned char *)(result + 293) & 2) == 0)
  {
    if (*(unsigned __int8 *)(a3 + 2) - 13 >= 0xFFFFFFF4
      && *(unsigned __int8 *)(a3 + 3) - 32 >= 0xFFFFFFE1
      && *(unsigned __int8 *)(a3 + 4) <= 0x17u
      && *(unsigned __int8 *)(a3 + 5) <= 0x3Bu
      && *(unsigned __int8 *)(a3 + 6) < 0x3Du)
    {
      *(void *)(a2 + 168) = *(void *)a3;
      *(_DWORD *)(a2 + 8) |= 0x200u;
    }
    else
    {
      return png_warning(result, "Ignoring invalid time value");
    }
  }
  return result;
}

void png_set_tRNS(void *a1, uint64_t a2, const void *a3, unsigned int a4, uint64_t a5)
{
  if (a1 && a2)
  {
    if (a3)
    {
      png_free_data((uint64_t)a1, a2, 0x2000u, 0);
      if (a4 - 1 >= 0x100)
      {
        unsigned int v10 = *(void **)(a2 + 184);
      }
      else
      {
        unsigned int v10 = png_malloc(a1, 0x100uLL);
        *(void *)(a2 + 184) = v10;
        memcpy(v10, a3, a4);
      }
      a1[92] = v10;
    }
    if (a5)
    {
      unsigned int v11 = *(unsigned __int8 *)(a2 + 36);
      if (v11 <= 0xF)
      {
        unsigned int v12 = ~(-1 << v11);
        if (*(unsigned char *)(a2 + 37) == 2)
        {
          if (*(unsigned __int16 *)(a5 + 2) > v12 || *(unsigned __int16 *)(a5 + 4) > v12) {
            goto LABEL_19;
          }
          unsigned int v13 = *(unsigned __int16 *)(a5 + 6);
        }
        else
        {
          if (*(unsigned char *)(a2 + 37)) {
            goto LABEL_20;
          }
          unsigned int v13 = *(unsigned __int16 *)(a5 + 8);
        }
        if (v13 > v12) {
LABEL_19:
        }
          png_warning((uint64_t)a1, "tRNS chunk has out-of-range samples for bit_depth");
      }
LABEL_20:
      *(void *)(a2 + 192) = *(void *)a5;
      *(_WORD *)(a2 + 200) = *(_WORD *)(a5 + 8);
      if (a4 <= 1) {
        __int16 v14 = 1;
      }
      else {
        __int16 v14 = a4;
      }
      *(_WORD *)(a2 + 34) = v14;
      goto LABEL_24;
    }
    *(_WORD *)(a2 + 34) = a4;
    if (a4)
    {
LABEL_24:
      *(_DWORD *)(a2 + 8) |= 0x10u;
      *(_DWORD *)(a2 + 300) |= 0x2000u;
    }
  }
}

void png_set_sPLT(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  if (!a3) {
    return;
  }
  if (!a1) {
    return;
  }
  if (!a2) {
    return;
  }
  int v6 = a4;
  if (a4 < 1) {
    return;
  }
  uint64_t v7 = a3;
  char v8 = png_realloc_array(a1, *(const void **)(a2 + 320), *(_DWORD *)(a2 + 328), a4, 0x20uLL);
  if (!v8)
  {
    int v16 = "too many sPLT chunks";
    goto LABEL_19;
  }
  unsigned int v9 = v8;
  png_free(a1, *(void **)(a2 + 320));
  *(void *)(a2 + 320) = v9;
  *(_DWORD *)(a2 + 300) |= 0x20u;
  unsigned int v10 = &v9[32 * *(int *)(a2 + 328)];
  while (1)
  {
    unsigned int v11 = *(const char **)v7;
    if (!*(void *)v7 || !*(void *)(v7 + 16))
    {
      png_app_error(a1, "png_set_sPLT: invalid sPLT");
      goto LABEL_13;
    }
    v10[8] = *(unsigned char *)(v7 + 8);
    size_t v12 = strlen(v11) + 1;
    unsigned int v13 = png_malloc_base(a1, v12);
    *(void *)unsigned int v10 = v13;
    if (!v13) {
      goto LABEL_17;
    }
    memcpy(v13, *(const void **)v7, v12);
    __int16 v14 = png_malloc_array(a1, *(_DWORD *)(v7 + 24), 0xAuLL);
    *((void *)v10 + 2) = v14;
    if (!v14) {
      break;
    }
    uint64_t v15 = *(unsigned int *)(v7 + 24);
    *((_DWORD *)v10 + 6) = v15;
    memcpy(v14, *(const void **)(v7 + 16), 10 * v15);
    *(_DWORD *)(a2 + 8) |= 0x2000u;
    ++*(_DWORD *)(a2 + 328);
    v10 += 32;
    v7 += 32;
LABEL_13:
    if (!--v6) {
      return;
    }
  }
  png_free(a1, *(void **)v10);
  *(void *)unsigned int v10 = 0;
LABEL_17:
  if (v6 >= 1)
  {
    int v16 = "sPLT out of memory";
LABEL_19:
    png_chunk_report(a1, v16, 1);
  }
}

uint64_t png_set_unknown_chunks(uint64_t result, uint64_t a2, uint64_t a3, signed int a4)
{
  if (a3)
  {
    uint64_t v4 = result;
    if (result)
    {
      if (a2 && a4 >= 1)
      {
        char v8 = png_realloc_array(result, *(const void **)(a2 + 304), *(_DWORD *)(a2 + 312), a4, 0x20uLL);
        if (v8)
        {
          unsigned int v9 = v8;
          png_free(v4, *(void **)(a2 + 304));
          *(void *)(a2 + 304) = v9;
          *(_DWORD *)(a2 + 300) |= 0x200u;
          unsigned int v10 = &v9[32 * *(int *)(a2 + 312)];
          int v11 = a4 + 1;
          for (uint64_t i = a3 + 16; ; i += 32)
          {
            *(_DWORD *)unsigned int v10 = *(_DWORD *)(i - 16);
            v10[4] = 0;
            uint64_t result = check_location(v4, *(unsigned char *)(i + 8));
            v10[24] = result;
            if (*(void *)i)
            {
              unsigned int v13 = png_malloc_base(v4, *(void *)i);
              *((void *)v10 + 1) = v13;
              if (!v13)
              {
                uint64_t result = png_chunk_report(v4, "unknown chunk: out of memory", 1);
                goto LABEL_13;
              }
              size_t v14 = *(void *)i;
              uint64_t result = (uint64_t)memcpy(v13, *(const void **)(i - 8), *(void *)i);
              *((void *)v10 + 2) = v14;
            }
            else
            {
              *((void *)v10 + 1) = 0;
              *((void *)v10 + 2) = 0;
            }
            v10 += 32;
            ++*(_DWORD *)(a2 + 312);
LABEL_13:
            if (--v11 <= 1) {
              return result;
            }
          }
        }
        return png_chunk_report(v4, "too many unknown chunks", 1);
      }
    }
  }
  return result;
}

uint64_t check_location(uint64_t a1, char a2)
{
  int v2 = a2 & 0xB;
  if ((a2 & 0xB) == 0)
  {
    if ((*(unsigned char *)(a1 + 293) & 0x80) != 0
      || (png_app_warning(a1, "png_set_unknown_chunks now expects a valid location"),
          (int v2 = *(_DWORD *)(a1 + 292) & 0xB) == 0))
    {
      png_error(a1, "invalid location in png_set_unknown_chunks");
    }
  }
  do
  {
    int v4 = v2;
    int v5 = v2 & -v2;
    v2 ^= v5;
  }
  while (v4 != v5);
  return v4;
}

void png_set_rows(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2)
  {
    uint64_t v5 = *(void *)(a2 + 352);
    if (v5) {
      BOOL v6 = v5 == a3;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6) {
      png_free_data(a1, a2, 0x40u, 0);
    }
    *(void *)(a2 + 352) = a3;
    if (a3) {
      *(_DWORD *)(a2 + 8) |= 0x8000u;
    }
  }
}

uint64_t png_check_keyword(uint64_t a1, unsigned __int8 *a2, unsigned char *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a2)
  {
    unsigned int v4 = *a2;
    if (*a2)
    {
      unsigned int v5 = 0;
      unsigned int v6 = 0;
      int v7 = 1;
      char v8 = a2;
      do
      {
        if (v4 > 0xA0 || v4 - 33 <= 0x5D)
        {
          int v7 = 0;
          *a3++ = v4;
          ++v6;
        }
        else
        {
          if (v7)
          {
            if (!v5) {
              unsigned int v5 = v4;
            }
          }
          else
          {
            *a3++ = 32;
            ++v6;
            if (v4 != 32) {
              unsigned int v5 = v4;
            }
          }
          int v7 = 1;
        }
        unsigned int v9 = *++v8;
        unsigned int v4 = v9;
      }
      while (v9 && v6 < 0x4F);
    }
    else
    {
      unsigned int v6 = 0;
      unsigned int v5 = 0;
      int v7 = 1;
      char v8 = a2;
    }
    if (v6) {
      BOOL v11 = v7 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    uint64_t v12 = !v11;
    if ((v12 & (v5 == 0)) != 0) {
      unint64_t v13 = 32;
    }
    else {
      unint64_t v13 = v5;
    }
    a3[-v12] = 0;
    uint64_t v10 = v6 - v12;
    if (v10)
    {
      if (*v8)
      {
        png_warning(a1, "keyword truncated");
      }
      else if (v13)
      {
        memset(v15, 0, sizeof(v15));
        png_warning_parameter((uint64_t)v15, 1, a2);
        png_warning_parameter_signed((uint64_t)v15, 2, 4, v13);
        png_formatted_warning(a1, (uint64_t)v15, "keyword \"@1\": bad character '0x@2'");
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    *a3 = 0;
  }
  return v10;
}

uint64_t png_set_bgr(uint64_t result)
{
  if (result) {
    *(_DWORD *)(result + 300) |= 1u;
  }
  return result;
}

uint64_t png_set_swap(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 608) == 16) {
      *(_DWORD *)(result + 300) |= 0x10u;
    }
  }
  return result;
}

uint64_t png_set_packing(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 608) <= 7u)
    {
      *(_DWORD *)(result + 300) |= 4u;
      *(unsigned char *)(result + 609) = 8;
    }
  }
  return result;
}

uint64_t png_set_packswap(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 608) <= 7u) {
      *(_DWORD *)(result + 300) |= 0x10000u;
    }
  }
  return result;
}

uint64_t png_set_shift(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(_DWORD *)(result + 300) |= 8u;
    *(_DWORD *)(result + 725) = *(_DWORD *)a2;
    *(unsigned char *)(result + 729) = *(unsigned char *)(a2 + 4);
  }
  return result;
}

uint64_t png_set_interlace_handling(uint64_t a1)
{
  if (!a1 || !*(unsigned char *)(a1 + 604)) {
    return 1;
  }
  *(_DWORD *)(a1 + 300) |= 2u;
  return 7;
}

uint64_t png_set_filler(uint64_t result, __int16 a2, int a3)
{
  if (!result) {
    return result;
  }
  if ((*(unsigned char *)(result + 293) & 0x80) == 0)
  {
    if (*(unsigned char *)(result + 607))
    {
      if (*(unsigned char *)(result + 607) == 2)
      {
        char v3 = 4;
LABEL_9:
        *(unsigned char *)(result + 612) = v3;
        goto LABEL_10;
      }
      unsigned int v6 = "png_set_filler: inappropriate color type";
    }
    else
    {
      if (*(unsigned __int8 *)(result + 608) >= 8u)
      {
        char v3 = 2;
        goto LABEL_9;
      }
      unsigned int v6 = "png_set_filler is invalid for low bit depth gray output";
    }
    return png_app_error(result, v6);
  }
  *(_WORD *)(result + 618) = a2;
LABEL_10:
  *(_DWORD *)(result + 300) |= 0x8000u;
  int v4 = *(_DWORD *)(result + 296);
  if (a3 == 1) {
    unsigned int v5 = v4 | 0x80;
  }
  else {
    unsigned int v5 = v4 & 0xFFFFFF7F;
  }
  *(_DWORD *)(result + 296) = v5;
  return result;
}

uint64_t png_set_swap_alpha(uint64_t result)
{
  if (result) {
    *(_DWORD *)(result + 300) |= 0x20000u;
  }
  return result;
}

uint64_t png_set_invert_alpha(uint64_t result)
{
  if (result) {
    *(_DWORD *)(result + 300) |= 0x80000u;
  }
  return result;
}

uint64_t png_set_invert_mono(uint64_t result)
{
  if (result) {
    *(_DWORD *)(result + 300) |= 0x20u;
  }
  return result;
}

uint64_t png_do_invert(uint64_t result, unsigned char *a2)
{
  if (*(unsigned char *)(result + 16) == 4)
  {
    int v3 = *(unsigned __int8 *)(result + 17);
    if (v3 == 16)
    {
      unint64_t v6 = *(void *)(result + 8);
      if (v6)
      {
        for (unint64_t i = 0; i < v6; i += 4)
        {
          char v8 = &a2[i];
          *char v8 = ~a2[i];
          v8[1] = ~a2[i + 1];
        }
      }
    }
    else if (v3 == 8)
    {
      unint64_t v4 = *(void *)(result + 8);
      if (v4)
      {
        for (unint64_t j = 0; j < v4; j += 2)
          a2[j] = ~a2[j];
      }
    }
  }
  else if (!*(unsigned char *)(result + 16))
  {
    for (uint64_t k = *(void *)(result + 8); k; --k)
    {
      *a2 = ~*a2;
      ++a2;
    }
  }
  return result;
}

uint64_t png_do_swap(uint64_t result, char *a2)
{
  if (*(unsigned char *)(result + 17) == 16)
  {
    for (int i = *(_DWORD *)result * *(unsigned __int8 *)(result + 18); i; --i)
    {
      char v3 = *a2;
      *a2 = a2[1];
      a2[1] = v3;
      a2 += 2;
    }
  }
  return result;
}

uint64_t png_do_packswap(uint64_t result, unsigned char *a2)
{
  unsigned int v2 = *(unsigned __int8 *)(result + 17);
  if (v2 <= 7)
  {
    uint64_t v3 = *(void *)(result + 8);
    switch(v2)
    {
      case 1u:
        unint64_t v4 = &onebppswaptable;
        break;
      case 4u:
        unint64_t v4 = &fourbppswaptable;
        break;
      case 2u:
        unint64_t v4 = &twobppswaptable;
        break;
      default:
        return result;
    }
    if (v3 >= 1)
    {
      unsigned int v5 = &a2[v3];
      do
      {
        *a2 = v4[*a2];
        ++a2;
      }
      while (a2 < v5);
    }
  }
  return result;
}

uint64_t png_do_strip_channel(uint64_t result, unsigned char *a2, int a3)
{
  uint64_t v3 = *(void *)(result + 8);
  unint64_t v4 = (unint64_t)&a2[v3];
  int v5 = *(unsigned __int8 *)(result + 18);
  if (v5 == 4)
  {
    int v10 = *(unsigned __int8 *)(result + 17);
    if (v10 == 16)
    {
      uint64_t v17 = 8;
      if (a3) {
        uint64_t v17 = 2;
      }
      uint64_t v18 = 6;
      if (a3) {
        uint64_t v18 = 0;
      }
      char v8 = &a2[v18];
      if (v17 < v3)
      {
        size_t v19 = &a2[v17];
        do
        {
          *char v8 = *v19;
          v8[1] = v19[1];
          unsigned int v8[2] = v19[2];
          v8[3] = v19[3];
          v8[4] = v19[4];
          v8[5] = v19[5];
          v8 += 6;
          v19 += 8;
        }
        while ((unint64_t)v19 < v4);
      }
      char v14 = 48;
    }
    else
    {
      if (v10 != 8) {
        return result;
      }
      if (a3) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = 4;
      }
      uint64_t v12 = 3;
      if (a3) {
        uint64_t v12 = 0;
      }
      char v8 = &a2[v12];
      if (v11 < v3)
      {
        unint64_t v13 = &a2[v11];
        do
        {
          *char v8 = *v13;
          v8[1] = v13[1];
          unsigned int v8[2] = v13[2];
          v8 += 3;
          v13 += 4;
        }
        while ((unint64_t)v13 < v4);
      }
      char v14 = 24;
    }
    *(unsigned char *)(result + 19) = v14;
    *(unsigned char *)(result + 18) = 3;
    if (*(unsigned char *)(result + 16) == 6) {
      *(unsigned char *)(result + 16) = 2;
    }
  }
  else
  {
    if (v5 != 2) {
      return result;
    }
    int v6 = *(unsigned __int8 *)(result + 17);
    if (v6 == 16)
    {
      uint64_t v15 = a2 + 4;
      if (a3)
      {
        uint64_t v15 = a2 + 2;
        uint64_t v16 = a2;
      }
      else
      {
        uint64_t v16 = a2 + 2;
      }
      if ((unint64_t)v15 >= v4)
      {
        char v8 = v16;
      }
      else
      {
        do
        {
          *uint64_t v16 = *v15;
          char v8 = v16 + 2;
          v16[1] = v15[1];
          v15 += 4;
          v16 += 2;
        }
        while ((unint64_t)v15 < v4);
      }
    }
    else
    {
      if (v6 != 8) {
        return result;
      }
      if (a3) {
        int v7 = a2 + 1;
      }
      else {
        int v7 = a2 + 2;
      }
      if (a3) {
        char v8 = a2;
      }
      else {
        char v8 = a2 + 1;
      }
      while ((unint64_t)v7 < v4)
      {
        char v9 = *v7;
        v7 += 2;
        *v8++ = v9;
      }
    }
    *(unsigned char *)(result + 19) = v6;
    *(unsigned char *)(result + 18) = 1;
    if (*(unsigned char *)(result + 16) == 4) {
      *(unsigned char *)(result + 16) = 0;
    }
  }
  *(void *)(result + 8) = v8 - a2;
  return result;
}

int *png_do_bgr(int *result, __int16 *a2)
{
  int v2 = *((unsigned __int8 *)result + 16);
  if ((v2 & 2) != 0)
  {
    int v3 = *result;
    int v4 = *((unsigned __int8 *)result + 17);
    if (v4 == 16)
    {
      if (v2 == 2)
      {
        for (; v3; --v3)
        {
          __int16 v9 = *a2;
          *a2 = a2[2];
          a2[2] = v9;
          a2 += 3;
        }
      }
      else if (v2 == 6 && v3 != 0)
      {
        do
        {
          __int16 v7 = *a2;
          *a2 = a2[2];
          a2[2] = v7;
          a2 += 4;
          --v3;
        }
        while (v3);
      }
    }
    else if (v4 == 8)
    {
      if (v2 == 2)
      {
        for (; v3; --v3)
        {
          char v8 = *(unsigned char *)a2;
          *(unsigned char *)a2 = *((unsigned char *)a2 + 2);
          *((unsigned char *)a2 + 2) = v8;
          a2 = (__int16 *)((char *)a2 + 3);
        }
      }
      else if (v2 == 6 && v3)
      {
        do
        {
          char v5 = *(unsigned char *)a2;
          *(unsigned char *)a2 = *((unsigned char *)a2 + 2);
          *((unsigned char *)a2 + 2) = v5;
          a2 += 2;
          --v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t png_do_check_palette_indexes(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 17);
  if (*(_WORD *)(result + 592)) {
    BOOL v3 = 1 << v2 <= *(unsigned __int16 *)(result + 592);
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    int v4 = v2 - 1;
    int v5 = -(*(_DWORD *)a2 * *(unsigned __int8 *)(a2 + 19)) & 7;
    unint64_t v6 = *(void *)(result + 544);
    __int16 v7 = (unsigned __int8 *)(v6 + *(void *)(a2 + 8) - 1);
    switch(v4)
    {
      case 0:
        for (; (unint64_t)v7 > v6; --v7)
        {
          if (*v7 >> v5) {
            *(_DWORD *)(result + 596) = 1;
          }
          LOBYTE(v5) = 0;
        }
        break;
      case 1:
        if ((unint64_t)v7 > v6)
        {
          int v8 = *(_DWORD *)(result + 596);
          do
          {
            int v9 = v8;
            unsigned int v10 = *v7 >> v5;
            int v11 = v10 & 3;
            if (v11 <= v8) {
              unsigned int v12 = v8;
            }
            else {
              unsigned int v12 = v10 & 3;
            }
            unsigned int v13 = (v10 >> 2) & 3;
            if (v13 <= v12) {
              unsigned int v14 = v12;
            }
            else {
              unsigned int v14 = (v10 >> 2) & 3;
            }
            unsigned int v15 = (v10 >> 4) & 3;
            if (v15 <= v14) {
              unsigned int v16 = v14;
            }
            else {
              unsigned int v16 = (v10 >> 4) & 3;
            }
            unsigned int v17 = v10 >> 6;
            if (v17 <= v16) {
              int v8 = v16;
            }
            else {
              int v8 = v17;
            }
            if (v11 > v9 || v13 > v12 || v15 > v14 || v17 > v16) {
              *(_DWORD *)(result + 596) = v8;
            }
            LOBYTE(v5) = 0;
            --v7;
          }
          while ((unint64_t)v7 > v6);
        }
        break;
      case 3:
        if ((unint64_t)v7 > v6)
        {
          int v21 = *(_DWORD *)(result + 596);
          do
          {
            int v22 = v21;
            unsigned int v23 = *v7 >> v5;
            int v24 = v23 & 0xF;
            if (v24 <= v21) {
              unsigned int v25 = v21;
            }
            else {
              unsigned int v25 = v23 & 0xF;
            }
            unsigned int v26 = v23 >> 4;
            if (v26 <= v25) {
              int v21 = v25;
            }
            else {
              int v21 = v26;
            }
            if (v24 > v22 || v26 > v25) {
              *(_DWORD *)(result + 596) = v21;
            }
            LOBYTE(v5) = 0;
            --v7;
          }
          while ((unint64_t)v7 > v6);
        }
        break;
      case 7:
        if ((unint64_t)v7 > v6)
        {
          int v28 = *(_DWORD *)(result + 596);
          do
          {
            int v29 = *v7;
            if (v28 < v29)
            {
              *(_DWORD *)(result + 596) = v29;
              int v28 = v29;
            }
            --v7;
          }
          while ((unint64_t)v7 > v6);
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t png_write_data(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (**)(void))(a1 + 240);
  if (!v1) {
    png_error(a1, "Call to NULL write function");
  }
  return v1();
}

size_t png_default_write_data(size_t result, void *__ptr, size_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = fwrite(__ptr, 1uLL, a3, *(FILE **)(result + 256));
    if (result != a3) {
      png_error(v4, "Write Error");
    }
  }
  return result;
}

uint64_t png_flush(uint64_t result)
{
  unsigned int v1 = *(uint64_t (**)(void))(result + 648);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t png_default_flush(uint64_t result)
{
  if (result) {
    return fflush(*(FILE **)(result + 256));
  }
  return result;
}

void *png_set_write_fn(void *result, uint64_t a2, size_t (*a3)(size_t result, void *__ptr, size_t a3), uint64_t (*a4)(uint64_t result))
{
  if (result)
  {
    result[32] = a2;
    if (a3) {
      uint64_t v4 = a3;
    }
    else {
      uint64_t v4 = png_default_write_data;
    }
    result[30] = v4;
    if (a4) {
      int v5 = a4;
    }
    else {
      int v5 = png_default_flush;
    }
    result[81] = v5;
    if (result[31])
    {
      result[31] = 0;
      return (void *)png_warning((uint64_t)result, "Can't set both read_data_fn and write_data_fn in the same structure");
    }
  }
  return result;
}

uint64_t png_write_info_before_PLTE(uint64_t result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t v3 = result;
  if ((*(unsigned char *)(result + 293) & 4) != 0) {
    return result;
  }
  png_write_sig(result);
  if ((*(unsigned char *)(v3 + 293) & 0x10) != 0 && *(_DWORD *)(v3 + 984))
  {
    png_warning(v3, "MNG features are not allowed in a PNG datastream");
    *(_DWORD *)(v3 + 984) = 0;
  }
  png_write_IHDR(v3, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int8 *)(a2 + 36), *(unsigned __int8 *)(a2 + 37), *(unsigned __int8 *)(a2 + 38), *(unsigned __int8 *)(a2 + 39), *(unsigned __int8 *)(a2 + 40));
  __int16 v4 = *(_WORD *)(a2 + 126);
  if ((v4 & 0x8008) == 8)
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      goto LABEL_11;
    }
    png_write_gAMA_fixed(v3, *(_DWORD *)(a2 + 52));
    __int16 v4 = *(_WORD *)(a2 + 126);
  }
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    int v5 = *(_DWORD *)(a2 + 8);
    if ((v5 & 0x1000) != 0)
    {
      if ((v5 & 0x800) != 0) {
        png_app_warning(v3, "profile matches sRGB but writing iCCP instead");
      }
      png_write_iCCP(v3, *(unsigned __int8 **)(a2 + 128), *(void *)(a2 + 136));
    }
    else if ((v5 & 0x800) != 0)
    {
      png_write_sRGB(v3, *(unsigned __int16 *)(a2 + 124));
    }
  }
  if ((*(unsigned char *)(a2 + 8) & 2) != 0) {
    png_write_sBIT(v3, (Bytef *)(a2 + 176), *(unsigned __int8 *)(a2 + 37));
  }
  if ((*(_WORD *)(a2 + 126) & 0x8010) == 0x10 && (*(unsigned char *)(a2 + 8) & 4) != 0) {
    png_write_cHRM_fixed(v3, (unsigned int *)(a2 + 56));
  }
  uint64_t result = write_unknown_chunks(v3, a2, 1u);
  *(_DWORD *)(v3 + 292) |= 0x400u;
  return result;
}

uint64_t write_unknown_chunks(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3 = *(int *)(a2 + 312);
  if ((int)v3 > 0)
  {
    uint64_t v5 = result;
    unint64_t v6 = *(void *)(a2 + 304);
    unint64_t v7 = v6 + 32 * v3;
    do
    {
      if ((*(unsigned char *)(v6 + 24) & a3) != 0)
      {
        uint64_t result = png_handle_as_unknown(v5, (_DWORD *)v6);
        if (result != 1
          && (result == 3 || (*(unsigned char *)(v6 + 3) & 0x20) != 0 || !result && *(_DWORD *)(v5 + 952) == 3))
        {
          unint64_t v8 = *(void *)(v6 + 16);
          if (!v8)
          {
            png_warning(v5, "Writing zero-length unknown chunk");
            unint64_t v8 = *(void *)(v6 + 16);
          }
          uint64_t result = png_write_chunk(v5, (unsigned int *)v6, *(Bytef **)(v6 + 8), v8);
        }
      }
      v6 += 32;
    }
    while (v6 < v7);
  }
  return result;
}

uint64_t png_write_info(uint64_t result, uint64_t a2)
{
  if (!result || !a2) {
    return result;
  }
  uint64_t v3 = result;
  png_write_info_before_PLTE(result, a2);
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 8) != 0)
  {
    png_write_PLTE(v3, *(void *)(a2 + 24), *(unsigned __int16 *)(a2 + 32));
    int v4 = *(_DWORD *)(a2 + 8);
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 37) == 3) {
      png_error(v3, "Valid palette required for paletted images");
    }
    if ((v4 & 0x10) == 0)
    {
LABEL_6:
      if ((v4 & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
  }
  if ((*(unsigned char *)(v3 + 302) & 8) != 0 && *(unsigned char *)(a2 + 37) == 3)
  {
    uint64_t v5 = *(unsigned __int16 *)(a2 + 34) >= 0x100u ? 256 : *(unsigned __int16 *)(a2 + 34);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(unsigned char *)(*(void *)(a2 + 184) + i) = ~*(unsigned char *)(*(void *)(a2 + 184) + i);
    }
  }
  png_write_tRNS(v3, *(Bytef **)(a2 + 184), (unsigned __int16 *)(a2 + 192), *(unsigned __int16 *)(a2 + 34), *(unsigned __int8 *)(a2 + 37));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  png_write_bKGD(v3, (unsigned __int8 *)(a2 + 202), *(unsigned __int8 *)(a2 + 37));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  png_write_eXIf(v3, *(Bytef **)(a2 + 240), *(_DWORD *)(a2 + 236));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  png_write_hIST(v3, *(unsigned __int16 **)(a2 + 256), *(unsigned __int16 *)(a2 + 32));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  png_write_oFFs(v3, *(unsigned int *)(a2 + 212), *(unsigned int *)(a2 + 216), *(unsigned __int8 *)(a2 + 220));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  png_write_pCAL((void *)v3, *(unsigned __int8 **)(a2 + 264), *(_DWORD *)(a2 + 272), *(_DWORD *)(a2 + 276), *(unsigned __int8 *)(a2 + 296), *(unsigned __int8 *)(a2 + 297), *(const char **)(a2 + 280), *(const char ***)(a2 + 288));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  png_write_sCAL_s(v3, *(unsigned char *)(a2 + 332), *(char **)(a2 + 336), *(const char **)(a2 + 344));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x80) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  png_write_pHYs(v3, *(_DWORD *)(a2 + 224), *(_DWORD *)(a2 + 228), *(unsigned __int8 *)(a2 + 232));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_38;
    }
LABEL_35:
    if (*(int *)(a2 + 328) >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      do
      {
        png_write_sPLT(v3, *(void *)(a2 + 320) + v7);
        ++v8;
        v7 += 32;
      }
      while (v8 < *(int *)(a2 + 328));
    }
    goto LABEL_38;
  }
LABEL_34:
  png_write_tIME(v3, (unsigned __int16 *)(a2 + 168));
  *(_DWORD *)(v3 + 292) |= 0x200u;
  if ((*(_DWORD *)(a2 + 8) & 0x2000) != 0) {
    goto LABEL_35;
  }
LABEL_38:
  if (*(int *)(a2 + 148) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(a2 + 160);
    while (1)
    {
      int v12 = *(_DWORD *)(v11 + v9);
      if (v12 >= 1) {
        break;
      }
      if (v12 == -1)
      {
        png_write_tEXt(v3, *(unsigned __int8 **)(v11 + v9 + 8), *(char **)(v11 + v9 + 16));
        uint64_t v11 = *(void *)(a2 + 160);
LABEL_48:
        *(_DWORD *)(v11 + v9) = -3;
        goto LABEL_49;
      }
      if (!v12)
      {
        png_write_zTXt(v3, *(unsigned __int8 **)(v11 + v9 + 8), *(char **)(v11 + v9 + 16), 0);
        uint64_t v11 = *(void *)(a2 + 160);
LABEL_46:
        *(_DWORD *)(v11 + v9) = -2;
      }
LABEL_49:
      ++v10;
      v9 += 56;
      if (v10 >= *(int *)(a2 + 148)) {
        goto LABEL_50;
      }
    }
    png_write_iTXt(v3, v12, *(unsigned __int8 **)(v11 + v9 + 8), *(char **)(v11 + v9 + 40), *(char **)(v11 + v9 + 48), *(char **)(v11 + v9 + 16));
    uint64_t v11 = *(void *)(a2 + 160);
    if (*(_DWORD *)(v11 + v9) == -1) {
      goto LABEL_48;
    }
    goto LABEL_46;
  }
LABEL_50:
  return write_unknown_chunks(v3, a2, 2u);
}

uint64_t png_write_end(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((*(unsigned char *)(result + 292) & 4) == 0) {
      png_error(result, "No IDATs written into file");
    }
    if (*(_DWORD *)(result + 596) > (int)*(unsigned __int16 *)(result + 592)) {
      png_benign_error(result, "Wrote palette index exceeding num_palette");
    }
    if (a2)
    {
      if ((*(unsigned char *)(a2 + 9) & 2) != 0 && (*(unsigned char *)(v2 + 293) & 2) == 0) {
        png_write_tIME(v2, (unsigned __int16 *)(a2 + 168));
      }
      if (*(int *)(a2 + 148) >= 1)
      {
        uint64_t v4 = 0;
        uint64_t v5 = 0;
        uint64_t v6 = *(void *)(a2 + 160);
        do
        {
          int v7 = *(_DWORD *)(v6 + v4);
          if (v7 < 1)
          {
            if ((v7 & 0x80000000) == 0)
            {
              png_write_zTXt(v2, *(unsigned __int8 **)(v6 + v4 + 8), *(char **)(v6 + v4 + 16), 0);
              uint64_t v6 = *(void *)(a2 + 160);
LABEL_16:
              *(_DWORD *)(v6 + v4) = -2;
              goto LABEL_17;
            }
            if (v7 != -1) {
              goto LABEL_17;
            }
            png_write_tEXt(v2, *(unsigned __int8 **)(v6 + v4 + 8), *(char **)(v6 + v4 + 16));
            uint64_t v6 = *(void *)(a2 + 160);
          }
          else
          {
            png_write_iTXt(v2, v7, *(unsigned __int8 **)(v6 + v4 + 8), *(char **)(v6 + v4 + 40), *(char **)(v6 + v4 + 48), *(char **)(v6 + v4 + 16));
            uint64_t v6 = *(void *)(a2 + 160);
            if (*(_DWORD *)(v6 + v4) != -1) {
              goto LABEL_16;
            }
          }
          *(_DWORD *)(v6 + v4) = -3;
LABEL_17:
          ++v5;
          v4 += 56;
        }
        while (v5 < *(int *)(a2 + 148));
      }
      if (*(unsigned char *)(a2 + 10)) {
        png_write_eXIf(v2, *(Bytef **)(a2 + 240), *(_DWORD *)(a2 + 236));
      }
      write_unknown_chunks(v2, a2, 8u);
    }
    *(_DWORD *)(v2 + 292) |= 8u;
    return png_write_IEND(v2);
  }
  return result;
}

void *png_create_write_struct(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return png_create_write_struct_2(a1, a2, a3, a4, 0, 0, 0);
}

void *png_create_write_struct_2(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  png_struct = png_create_png_struct(a1, a2, a3, a4, a5, a6, a7);
  uint64_t v8 = png_struct;
  if (png_struct)
  {
    *((_DWORD *)png_struct + 118) = 0;
    png_struct[58] = 0x80000000FLL;
    *((_OWORD *)png_struct + 27) = xmmword_2246EE580;
    *((_OWORD *)png_struct + 28) = xmmword_2246EE590;
    *((_DWORD *)png_struct + 74) |= 0x200000u;
    png_set_write_fn(png_struct, 0, 0, 0);
  }
  return v8;
}

void png_write_row(uint64_t a1, void *__src)
{
  if (!a1) {
    return;
  }
  if (!*(_DWORD *)(a1 + 524) && !*(unsigned char *)(a1 + 605))
  {
    if ((*(unsigned char *)(a1 + 293) & 4) == 0)
    {
      unsigned int v23 = "png_write_info was never called before png_write_row";
      goto LABEL_68;
    }
    png_write_start_row(a1);
  }
  if (!*(unsigned char *)(a1 + 604) || (*(unsigned char *)(a1 + 300) & 2) == 0)
  {
LABEL_8:
    uint64_t v24 = 0;
    size_t v25 = 0;
    unsigned int v4 = *(_DWORD *)(a1 + 508);
    char v5 = *(unsigned char *)(a1 + 612);
    char v6 = *(unsigned char *)(a1 + 609);
    if ((v6 * v5) >= 8u) {
      size_t v7 = v4 * (unint64_t)((v6 * v5) >> 3);
    }
    else {
      size_t v7 = ((v6 * v5) * (unint64_t)v4 + 7) >> 3;
    }
    unsigned __int8 v8 = *(unsigned char *)(a1 + 607);
    size_t v25 = v7;
    uint64_t v26 = v8;
    LODWORD(v24) = v4;
    BYTE2(v26) = v5;
    BYTE1(v26) = v6;
    *(_DWORD *)((char *)&v26 + 3) = (v6 * v5);
    memcpy((void *)(*(void *)(a1 + 544) + 1), __src, v7);
    if (*(unsigned char *)(a1 + 604))
    {
      unsigned int v10 = *(unsigned __int8 *)(a1 + 605);
      if (v10 <= 5 && (*(unsigned char *)(a1 + 300) & 2) != 0)
      {
        png_do_write_interlace((uint64_t)&v24, (unsigned __int8 *)(*(void *)(a1 + 544) + 1), v10);
        if (!v24)
        {
          png_write_finish_row(a1);
          return;
        }
      }
    }
    if (*(_DWORD *)(a1 + 300)) {
      png_do_write_transformations(a1, (int *)&v24, v9);
    }
    if (BYTE3(v26) == *(unsigned __int8 *)(a1 + 610) && BYTE3(v26) == *(unsigned __int8 *)(a1 + 615))
    {
      if ((*(unsigned char *)(a1 + 984) & 4) == 0 || *(unsigned char *)(a1 + 988) != 64) {
        goto LABEL_60;
      }
      int v11 = v26;
      if ((v26 & 2) == 0) {
        goto LABEL_61;
      }
      uint64_t v12 = *(void *)(a1 + 544);
      int v13 = v24;
      if (BYTE1(v26) != 16)
      {
        if (BYTE1(v26) == 8)
        {
          if (v26 == 2)
          {
            uint64_t v14 = 3;
LABEL_52:
            if (v24)
            {
              unsigned int v16 = (unsigned char *)(v12 + 3);
              do
              {
                char v17 = *(v16 - 1);
                *(v16 - 2) -= v17;
                *v16 -= v17;
                v16 += v14;
                --v13;
              }
              while (v13);
            }
            goto LABEL_60;
          }
          if (v26 == 6)
          {
            uint64_t v14 = 4;
            goto LABEL_52;
          }
        }
LABEL_60:
        int v11 = v26;
LABEL_61:
        if (v11 == 3 && (*(_DWORD *)(a1 + 596) & 0x80000000) == 0) {
          png_do_check_palette_indexes(a1, (uint64_t)&v24);
        }
        png_write_find_filter(a1, (uint64_t)&v24);
        int v22 = *(void (**)(uint64_t, void, void))(a1 + 768);
        if (v22) {
          v22(a1, *(unsigned int *)(a1 + 524), *(unsigned __int8 *)(a1 + 605));
        }
        return;
      }
      if (v26 == 2)
      {
        uint64_t v15 = 6;
      }
      else
      {
        if (v26 != 6) {
          goto LABEL_60;
        }
        uint64_t v15 = 8;
      }
      if (v24)
      {
        uint64_t v18 = (unsigned __int16 *)(v12 + 3);
        do
        {
          unsigned int v19 = bswap32(*v18);
          unsigned int v20 = __rev16(*(v18 - 1)) - HIWORD(v19);
          unsigned int v21 = __rev16(v18[1]) - HIWORD(v19);
          *((unsigned char *)v18 - 2) = BYTE1(v20);
          *((unsigned char *)v18 - 1) = v20;
          *((unsigned char *)v18 + 2) = BYTE1(v21);
          *((unsigned char *)v18 + 3) = v21;
          uint64_t v18 = (unsigned __int16 *)((char *)v18 + v15);
          --v13;
        }
        while (v13);
      }
      goto LABEL_60;
    }
    unsigned int v23 = "internal write transform logic error";
LABEL_68:
    png_error(a1, v23);
  }
  switch(*(unsigned char *)(a1 + 605))
  {
    case 0:
      if ((*(unsigned char *)(a1 + 524) & 7) == 0) {
        goto LABEL_8;
      }
      goto LABEL_45;
    case 1:
      if ((*(unsigned char *)(a1 + 524) & 7) != 0 || *(_DWORD *)(a1 + 496) <= 4u) {
        goto LABEL_45;
      }
      goto LABEL_8;
    case 2:
      if ((*(_DWORD *)(a1 + 524) & 7) != 4) {
        goto LABEL_45;
      }
      goto LABEL_8;
    case 3:
      if ((*(unsigned char *)(a1 + 524) & 3) != 0 || *(_DWORD *)(a1 + 496) <= 2u) {
        goto LABEL_45;
      }
      goto LABEL_8;
    case 4:
      if ((*(_DWORD *)(a1 + 524) & 3) != 2) {
        goto LABEL_45;
      }
      goto LABEL_8;
    case 5:
      if ((*(unsigned char *)(a1 + 524) & 1) != 0 || *(_DWORD *)(a1 + 496) <= 1u) {
        goto LABEL_45;
      }
      goto LABEL_8;
    case 6:
      if (*(unsigned char *)(a1 + 524)) {
        goto LABEL_8;
      }
LABEL_45:
      png_write_finish_row(a1);
      break;
    default:
      goto LABEL_8;
  }
}

void png_write_image(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    int v4 = png_set_interlace_handling(a1);
    if (v4 >= 1)
    {
      int v5 = v4;
      int v6 = 0;
      unsigned int v7 = *(_DWORD *)(a1 + 500);
      do
      {
        if (v7)
        {
          uint64_t v8 = 0;
          do
          {
            png_write_row(a1, *(void **)(a2 + 8 * v8));
            unsigned int v7 = *(_DWORD *)(a1 + 500);
            ++v8;
          }
          while (v8 < v7);
        }
        ++v6;
      }
      while (v6 != v5);
    }
  }
}

uint64_t png_write_flush(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(_DWORD *)(result + 524) < *(_DWORD *)(result + 504))
    {
      png_compress_IDAT(result, 0, 0, 2);
      *(_DWORD *)(v1 + 660) = 0;
      return png_flush(v1);
    }
  }
  return result;
}

void png_destroy_write_struct(uint64_t *a1, void **a2)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      png_destroy_info_struct(*a1, a2);
      *a1 = 0;
      if ((*(unsigned char *)(v3 + 296) & 2) != 0) {
        deflateEnd((z_streamp)(v3 + 312));
      }
      png_free_buffer_list(v3, (void **)(v3 + 424));
      png_free(v3, *(void **)(v3 + 544));
      *(void *)(v3 + 544) = 0;
      png_free(v3, *(void **)(v3 + 536));
      png_free(v3, *(void **)(v3 + 552));
      png_free(v3, *(void **)(v3 + 560));
      *(void *)(v3 + 536) = 0;
      *(_OWORD *)(v3 + 552) = 0u;
      png_free(v3, *(void **)(v3 + 960));
      *(void *)(v3 + 960) = 0;
      png_destroy_png_struct((void *)v3);
    }
  }
}

uint64_t png_write_png(uint64_t result, uint64_t a2, __int16 a3)
{
  if (!result || !a2) {
    return result;
  }
  uint64_t v4 = result;
  if ((*(unsigned char *)(a2 + 9) & 0x80) == 0)
  {
    return png_app_error(result, "no rows for png_write_image to write");
  }
  png_write_info(result, a2);
  if ((a3 & 0x20) != 0) {
    png_set_invert_mono(v4);
  }
  if ((a3 & 0x40) != 0 && (*(unsigned char *)(a2 + 8) & 2) != 0) {
    png_set_shift(v4, a2 + 176);
  }
  if ((a3 & 4) != 0) {
    png_set_packing(v4);
  }
  if ((a3 & 0x100) != 0) {
    png_set_swap_alpha(v4);
  }
  if ((a3 & 0x1800) != 0)
  {
    if ((a3 & 0x1000) != 0)
    {
      if ((a3 & 0x800) != 0) {
        png_app_error(v4, "PNG_TRANSFORM_STRIP_FILLER: BEFORE+AFTER not supported");
      }
      int v6 = 1;
    }
    else
    {
      if ((a3 & 0x800) == 0) {
        goto LABEL_25;
      }
      int v6 = 0;
    }
    png_set_filler(v4, 0, v6);
  }
LABEL_25:
  if ((a3 & 0x80) != 0)
  {
    png_set_bgr(v4);
    if ((a3 & 0x200) == 0)
    {
LABEL_27:
      if ((a3 & 8) == 0) {
        goto LABEL_28;
      }
LABEL_35:
      png_set_packswap(v4);
      if ((a3 & 0x400) == 0) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
  }
  else if ((a3 & 0x200) == 0)
  {
    goto LABEL_27;
  }
  png_set_swap(v4);
  if ((a3 & 8) != 0) {
    goto LABEL_35;
  }
LABEL_28:
  if ((a3 & 0x400) != 0) {
LABEL_29:
  }
    png_set_invert_alpha(v4);
LABEL_30:
  png_write_image(v4, *(void *)(a2 + 352));
  return png_write_end(v4, a2);
}

uint64_t png_do_write_transformations(uint64_t result, int *a2, uint8x8_t a3)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 300);
  if ((v5 & 0x100000) != 0)
  {
    int v6 = *(uint64_t (**)(uint64_t, int *, uint64_t))(result + 272);
    if (v6)
    {
      uint64_t result = v6(result, a2, *(void *)(result + 544) + 1);
      int v5 = *(_DWORD *)(v4 + 300);
    }
  }
  if ((v5 & 0x8000) != 0)
  {
    uint64_t result = png_do_strip_channel((uint64_t)a2, (unsigned char *)(*(void *)(v4 + 544) + 1), ((*(_DWORD *)(v4 + 296) >> 7) & 1) == 0);
    int v5 = *(_DWORD *)(v4 + 300);
    if ((v5 & 0x10000) == 0)
    {
LABEL_7:
      if ((v5 & 4) == 0) {
        goto LABEL_47;
      }
LABEL_11:
      if (*((unsigned char *)a2 + 17) == 8 && *((unsigned char *)a2 + 18) == 1)
      {
        unsigned int v7 = (unsigned char *)(*(void *)(v4 + 544) + 1);
        int v8 = *(unsigned __int8 *)(v4 + 608);
        switch(v8)
        {
          case 4:
            int v23 = *a2;
            if (*a2)
            {
              uint64_t v24 = (unsigned char *)(*(void *)(v4 + 544) + 1);
              while (v23 != 1)
              {
                *v7++ = v24[1] & 0xF | (16 * *v24);
                v24 += 2;
                v23 -= 2;
                if (!v23) {
                  goto LABEL_44;
                }
              }
              LOBYTE(v14) = 16 * *v24;
LABEL_43:
              unsigned char *v7 = v14;
            }
            break;
          case 2:
            if (*a2)
            {
              int v17 = 0;
              int v18 = -*a2;
              uint64_t v19 = *(void *)(v4 + 544) + 1;
LABEL_29:
              uint64_t v20 = 0;
              int v14 = 0;
              int v21 = 6;
              do
              {
                v14 |= (*(unsigned char *)(v19 + v20) & 3) << v21;
                if (!v21)
                {
                  *v7++ = v14;
                  v19 += v20 + 1;
                  int v22 = v17 + v20;
                  v17 += v20 + 1;
                  if (v22 + v18 != -1) {
                    goto LABEL_29;
                  }
                  goto LABEL_44;
                }
                v21 -= 2;
                ++v20;
              }
              while (v18 + v17 + v20);
              if (v21 != 6) {
                goto LABEL_43;
              }
            }
            break;
          case 1:
            int v9 = *a2;
            if (*a2)
            {
              int v10 = 0;
              int v11 = *a2;
              uint64_t v12 = (unsigned char *)(*(void *)(v4 + 544) + 1);
              do
              {
                uint64_t v13 = 0;
                LOBYTE(v14) = 0;
                unsigned int v15 = 128;
                while (1)
                {
                  char v16 = v7[v13] ? v15 : 0;
                  LOBYTE(v14) = v16 | v14;
                  if (v13 == 7) {
                    break;
                  }
                  v15 >>= 1;
                  if (v11 == ++v13)
                  {
                    unsigned int v7 = v12;
                    goto LABEL_43;
                  }
                }
                *v12++ = v14;
                v10 += 8;
                v7 += v13 + 1;
                v11 -= 8;
              }
              while (v10 != v9);
            }
            break;
        }
LABEL_44:
        *((unsigned char *)a2 + 17) = v8;
        unsigned __int8 v25 = *((unsigned char *)a2 + 18) * v8;
        *((unsigned char *)a2 + 19) = v25;
        BOOL v26 = v25 >= 8u;
        unint64_t v27 = (*a2 * (unint64_t)v25 + 7) >> 3;
        unint64_t v28 = *a2 * (unint64_t)(v25 >> 3);
        if (!v26) {
          unint64_t v28 = v27;
        }
        *((void *)a2 + 1) = v28;
        int v5 = *(_DWORD *)(v4 + 300);
      }
      goto LABEL_47;
    }
  }
  else if ((v5 & 0x10000) == 0)
  {
    goto LABEL_7;
  }
  uint64_t result = png_do_packswap((uint64_t)a2, (unsigned char *)(*(void *)(v4 + 544) + 1));
  int v5 = *(_DWORD *)(v4 + 300);
  if ((v5 & 4) != 0) {
    goto LABEL_11;
  }
LABEL_47:
  if ((v5 & 0x10) != 0)
  {
    uint64_t result = png_do_swap((uint64_t)a2, (char *)(*(void *)(v4 + 544) + 1));
    int v5 = *(_DWORD *)(v4 + 300);
  }
  if ((v5 & 8) != 0)
  {
    int v29 = *((unsigned __int8 *)a2 + 16);
    if (v29 != 3)
    {
      uint64_t v30 = *(void *)(v4 + 544);
      unsigned int v31 = *((unsigned __int8 *)a2 + 17);
      if ((v29 & 2) != 0)
      {
        int v32 = *(unsigned __int8 *)(v4 + 725);
        int v34 = *(unsigned __int8 *)(v4 + 726);
        int v35 = *(unsigned __int8 *)(v4 + 727);
        v86[1] = v31 - v34;
        v86[2] = v31 - v35;
        v85[1] = v34;
        v85[2] = v35;
        unsigned int v33 = 3;
      }
      else
      {
        int v32 = *(unsigned __int8 *)(v4 + 728);
        unsigned int v33 = 1;
      }
      uint64_t v36 = (unsigned __int8 *)(v30 + 1);
      v86[0] = v31 - v32;
      v85[0] = v32;
      if ((v29 & 4) != 0)
      {
        int v37 = *(unsigned __int8 *)(v4 + 729);
        v86[v33] = v31 - v37;
        v85[v33++] = v37;
      }
      if (v31 > 7)
      {
        int v49 = *a2 * v33;
        if (v31 == 8)
        {
          if (v49)
          {
            for (unsigned int i = 0; i != v49; ++i)
            {
              unsigned __int8 v51 = 0;
              int v52 = v86[i % v33];
              int v53 = v85[i % v33];
              if (v52 > -v53)
              {
                unsigned __int8 v51 = 0;
                unsigned int v54 = *v36;
                LODWORD(result) = -v52;
                do
                {
                  unsigned int v55 = v54 >> result;
                  int v56 = v52 - v53;
                  uint64_t result = (result + v53);
                  BOOL v57 = v52 <= 0;
                  if (v52 <= 0) {
                    LOBYTE(v58) = v55;
                  }
                  else {
                    int v58 = v54 << v52;
                  }
                  v51 |= v58;
                  int v52 = v56;
                }
                while (!v57);
              }
              *v36++ = v51;
            }
          }
        }
        else if (v49)
        {
          for (unsigned int j = 0; j != v49; ++j)
          {
            unsigned int v60 = 0;
            int v61 = v86[j % v33];
            int v62 = v85[j % v33];
            if (v61 > -v62)
            {
              unsigned int v60 = 0;
              unsigned int v63 = __rev16(*(unsigned __int16 *)v36);
              LODWORD(result) = -v61;
              do
              {
                unsigned int v64 = v63 >> result;
                int v65 = v61 - v62;
                uint64_t result = (result + v62);
                BOOL v66 = v61 <= 0;
                if (v61 <= 0) {
                  unsigned int v67 = v64;
                }
                else {
                  unsigned int v67 = v63 << v61;
                }
                v60 |= v67;
                int v61 = v65;
              }
              while (!v66);
            }
            *(_WORD *)uint64_t v36 = bswap32(v60) >> 16;
            v36 += 2;
          }
        }
      }
      else
      {
        uint64_t v38 = *((void *)a2 + 1);
        int v39 = *(unsigned __int8 *)(v4 + 728);
        if (v39 == 3 && v31 == 4) {
          int v41 = 17;
        }
        else {
          int v41 = 255;
        }
        if (v39 == 1 && v31 == 2) {
          int v43 = 85;
        }
        else {
          int v43 = v41;
        }
        if (v38)
        {
          for (uint64_t k = 0; k != v38; ++k)
          {
            unsigned __int8 v45 = 0;
            if (v31)
            {
              unsigned int v46 = *v36;
              LODWORD(result) = v31;
              char v47 = v32 - v31;
              do
              {
                if ((int)result - v32 <= 0) {
                  int v48 = (v46 >> v47) & v43;
                }
                else {
                  int v48 = v46 << (result - v32);
                }
                v45 |= v48;
                v47 += v32;
                uint64_t result = (result - v32);
              }
              while ((int)result > 0);
            }
            *v36++ = v45;
          }
        }
      }
      int v5 = *(_DWORD *)(v4 + 300);
    }
  }
  if ((v5 & 0x20000) != 0)
  {
    v68 = (int8x8_t *)(*(void *)(v4 + 544) + 1);
    int v69 = *((unsigned __int8 *)a2 + 16);
    if (v69 == 4)
    {
      int v72 = *a2;
      if (*((unsigned char *)a2 + 17) == 8)
      {
        for (; v72; --v72)
        {
          __int8 v73 = v68->i8[0];
          v68->i8[0] = v68->i8[1];
          v68->i8[1] = v73;
          v68 = (int8x8_t *)((char *)v68 + 2);
        }
      }
      else
      {
        for (; v72; --v72)
        {
          a3.i32[0] = v68->i32[0];
          int16x8_t v74 = (int16x8_t)vmovl_u8(a3);
          *(int8x8_t *)v74.i8 = vext_s8(*(int8x8_t *)v74.i8, *(int8x8_t *)v74.i8, 4uLL);
          a3 = (uint8x8_t)vmovn_s16(v74);
          v68->i32[0] = a3.i32[0];
          v68 = (int8x8_t *)((char *)v68 + 4);
        }
      }
    }
    else if (v69 == 6)
    {
      int v70 = *a2;
      if (*((unsigned char *)a2 + 17) == 8)
      {
        for (; v70; --v70)
        {
          a3.i32[0] = v68->i32[0];
          int16x8_t v71 = (int16x8_t)vmovl_u8(a3);
          *(int8x8_t *)v71.i8 = vext_s8(*(int8x8_t *)v71.i8, *(int8x8_t *)v71.i8, 2uLL);
          a3 = (uint8x8_t)vmovn_s16(v71);
          v68->i32[0] = a3.i32[0];
          v68 = (int8x8_t *)((char *)v68 + 4);
        }
      }
      else
      {
        for (; v70; --v70)
        {
          int8x8_t *v68 = vext_s8(*v68, *v68, 2uLL);
          ++v68;
        }
      }
    }
  }
  if ((*(unsigned char *)(v4 + 302) & 8) != 0)
  {
    v75 = *(unsigned char **)(v4 + 544);
    int v76 = *((unsigned __int8 *)a2 + 16);
    if (v76 == 4)
    {
      int v79 = *a2;
      if (*((unsigned char *)a2 + 17) == 8)
      {
        if (v79)
        {
          v80 = v75 + 2;
          do
          {
            unsigned char *v80 = ~*v80;
            v80 += 2;
            --v79;
          }
          while (v79);
        }
      }
      else if (v79)
      {
        v82 = v75 + 4;
        do
        {
          *(v82 - 1) = ~*(v82 - 1);
          unsigned char *v82 = ~*v82;
          v82 += 4;
          --v79;
        }
        while (v79);
      }
    }
    else if (v76 == 6)
    {
      int v77 = *a2;
      if (*((unsigned char *)a2 + 17) == 8)
      {
        if (v77)
        {
          v78 = v75 + 4;
          do
          {
            unsigned char *v78 = ~*v78;
            v78 += 4;
            --v77;
          }
          while (v77);
        }
      }
      else if (v77)
      {
        v81 = v75 + 8;
        do
        {
          *(v81 - 1) = ~*(v81 - 1);
          unsigned char *v81 = ~*v81;
          v81 += 8;
          --v77;
        }
        while (v77);
      }
    }
  }
  int v83 = *(_DWORD *)(v4 + 300);
  if (v83)
  {
    uint64_t result = (uint64_t)png_do_bgr(a2, (__int16 *)(*(void *)(v4 + 544) + 1));
    int v83 = *(_DWORD *)(v4 + 300);
  }
  if ((v83 & 0x20) != 0)
  {
    v84 = (unsigned char *)(*(void *)(v4 + 544) + 1);
    return png_do_invert((uint64_t)a2, v84);
  }
  return result;
}

_DWORD *png_save_uint_32(_DWORD *result, unsigned int a2)
{
  *uint64_t result = bswap32(a2);
  return result;
}

uint64_t png_write_sig(uint64_t a1)
{
  *(_DWORD *)(a1 + 1132) = 18;
  uint64_t result = png_write_data(a1);
  if (*(unsigned __int8 *)(a1 + 613) <= 2u) {
    *(_DWORD *)(a1 + 292) |= 0x1000u;
  }
  return result;
}

uint64_t png_write_chunk_header(uint64_t result, int a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 1132) = 34;
    v4[0] = HIBYTE(a2);
    v4[1] = BYTE2(a2);
    v4[2] = BYTE1(a2);
    v4[3] = a2;
    png_write_data(result);
    *(_DWORD *)(v3 + 528) = a2;
    png_reset_crc(v3);
    uint64_t result = png_calculate_crc(v3, v4, 4);
    *(_DWORD *)(v3 + 1132) = 66;
  }
  return result;
}

uint64_t png_write_chunk_data(uint64_t result, Bytef *a2, uint64_t a3)
{
  if (result && a2 && a3)
  {
    uint64_t v5 = result;
    png_write_data(result);
    return png_calculate_crc(v5, a2, a3);
  }
  return result;
}

uint64_t png_write_chunk_end(uint64_t result)
{
  if (result)
  {
    *(_DWORD *)(result + 1132) = 130;
    return png_write_data(result);
  }
  return result;
}

uint64_t png_write_chunk(uint64_t a1, unsigned int *a2, Bytef *a3, unint64_t a4)
{
  return png_write_complete_chunk(a1, bswap32(*a2), a3, a4);
}

uint64_t png_write_complete_chunk(uint64_t result, int a2, Bytef *a3, unint64_t a4)
{
  if (result)
  {
    uint64_t v5 = result;
    if (a4 >> 31) {
      png_error(result, "length exceeds PNG maximum");
    }
    png_write_chunk_header(result, a2);
    png_write_chunk_data(v5, a3, a4);
    *(_DWORD *)(v5 + 1132) = 130;
    return png_write_data(v5);
  }
  return result;
}

void png_free_buffer_list(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  if (v3)
  {
    *a2 = 0;
    do
    {
      uint64_t v5 = (void *)*v3;
      png_free(a1, v3);
      uint64_t v3 = v5;
    }
    while (v5);
  }
}

uint64_t png_write_IHDR(uint64_t a1, unsigned int a2, int a3, unsigned int a4, int a5, int a6, int a7, unsigned int a8)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  Bytef v12 = a4;
  switch(a5)
  {
    case 0:
      if (a4 <= 0x10)
      {
        char v15 = 1;
        if (((1 << a4) & 0x10116) != 0) {
          goto LABEL_16;
        }
      }
      char v16 = "Invalid bit depth for grayscale image";
      goto LABEL_45;
    case 2:
      char v15 = 3;
      if (a4 == 8 || a4 == 16) {
        goto LABEL_16;
      }
      char v16 = "Invalid bit depth for RGB image";
      goto LABEL_45;
    case 3:
      if (a4 - 1 >= 8 || ((0x8Bu >> (a4 - 1)) & 1) == 0)
      {
        char v16 = "Invalid bit depth for paletted image";
LABEL_45:
        png_error(a1, v16);
      }
      char v15 = 1;
LABEL_16:
      *(unsigned char *)(a1 + 611) = v15;
      if (a6) {
        png_warning(a1, "Invalid compression type specified");
      }
      if ((*(unsigned char *)(a1 + 984) & 4) == 0 || (*(unsigned char *)(a1 + 293) & 0x10) != 0)
      {
        if (!a7) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
      BOOL v18 = (a5 & 0xFFFFFFFB) != 2 || a7 != 64;
      if (a7 && v18)
      {
LABEL_30:
        png_warning(a1, "Invalid filter type specified");
        LOBYTE(a7) = 0;
      }
LABEL_31:
      if (a8 >= 2)
      {
        png_warning(a1, "Invalid interlace type specified");
        LOBYTE(a8) = 1;
      }
      *(unsigned char *)(a1 + 608) = v12;
      *(unsigned char *)(a1 + 607) = a5;
      *(unsigned char *)(a1 + 604) = a8;
      *(unsigned char *)(a1 + 988) = a7;
      *(unsigned char *)(a1 + 1048) = 0;
      *(_DWORD *)(a1 + 496) = a2;
      *(_DWORD *)(a1 + 500) = a3;
      char v19 = *(unsigned char *)(a1 + 611);
      *(unsigned char *)(a1 + 610) = v19 * v12;
      unint64_t v20 = a2 * (unint64_t)((v19 * v12) >> 3);
      if ((v19 * v12) < 8u) {
        unint64_t v20 = ((v19 * v12) * (unint64_t)a2 + 7) >> 3;
      }
      *(void *)(a1 + 512) = v20;
      *(_DWORD *)(a1 + 508) = a2;
      *(unsigned char *)(a1 + 609) = v12;
      *(unsigned char *)(a1 + 612) = v19;
      v23[0] = HIBYTE(a2);
      v23[1] = BYTE2(a2);
      v23[2] = BYTE1(a2);
      v23[3] = a2;
      v23[4] = HIBYTE(a3);
      v23[5] = BYTE2(a3);
      v23[6] = BYTE1(a3);
      v23[7] = a3;
      v23[8] = v12;
      v23[9] = a5;
      v23[10] = 0;
      v23[11] = a7;
      v23[12] = a8;
      uint64_t result = png_write_complete_chunk(a1, 1229472850, v23, 0xDuLL);
      if (!*(unsigned char *)(a1 + 606))
      {
        char v22 = 8;
        if (*(unsigned char *)(a1 + 607) != 3)
        {
          if (*(unsigned __int8 *)(a1 + 608) < 8u) {
            char v22 = 8;
          }
          else {
            char v22 = -8;
          }
        }
        *(unsigned char *)(a1 + 606) = v22;
      }
      *(_DWORD *)(a1 + 292) = 1;
      return result;
    case 4:
      char v15 = 2;
      if (a4 == 8 || a4 == 16) {
        goto LABEL_16;
      }
      char v16 = "Invalid bit depth for grayscale+alpha image";
      goto LABEL_45;
    case 6:
      char v15 = 4;
      if (a4 == 8 || a4 == 16) {
        goto LABEL_16;
      }
      char v16 = "Invalid bit depth for RGBA image";
      goto LABEL_45;
    default:
      char v16 = "Invalid image color type specified";
      goto LABEL_45;
  }
}

uint64_t png_write_PLTE(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = a3;
  int v6 = *(unsigned __int8 *)(a1 + 607);
  if (v6 == 3)
  {
    if (*(_DWORD *)(a1 + 984) & 1 | a3) {
      BOOL v7 = 1 << *(unsigned char *)(a1 + 608) >= a3;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7) {
      png_error(a1, "Invalid number of colors in palette");
    }
    goto LABEL_11;
  }
  if (a3 <= 0x100 && *(_DWORD *)(a1 + 984) & 1 | a3)
  {
    if ((v6 & 2) != 0)
    {
LABEL_11:
      *(_WORD *)(a1 + 592) = a3;
      png_write_chunk_header(a1, 1347179589);
      for (; v3; --v3)
      {
        Bytef v10 = *(unsigned char *)a2;
        __int16 v11 = *(_WORD *)(a2 + 1);
        png_write_chunk_data(a1, &v10, 3);
        a2 += 3;
      }
      uint64_t result = png_write_chunk_end(a1);
      *(_DWORD *)(a1 + 292) |= 2u;
      return result;
    }
    int v8 = "Ignoring request to write a PLTE chunk in grayscale PNG";
  }
  else
  {
    int v8 = "Invalid number of colors in palette";
  }
  return png_warning(a1, v8);
}

uint64_t png_compress_IDAT(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  if (*(_DWORD *)(a1 + 304) != 1229209940)
  {
    int v8 = *(void ***)(a1 + 424);
    if (v8)
    {
      int v9 = *v8;
      if (*v8)
      {
        *int v8 = 0;
        do
        {
          Bytef v10 = (void *)*v9;
          png_free(a1, v9);
          int v9 = v10;
        }
        while (v10);
      }
    }
    else
    {
      __int16 v11 = png_malloc((void *)a1, *(unsigned int *)(a1 + 432) + 8);
      *(void *)(a1 + 424) = v11;
      void *v11 = 0;
    }
    unint64_t v12 = png_image_size(a1);
    if (png_deflate_claim(a1, 1229209940, v12)) {
      goto LABEL_41;
    }
    *(void *)(a1 + 336) = *(void *)(a1 + 424) + 8;
    *(_DWORD *)(a1 + 344) = *(_DWORD *)(a1 + 432);
  }
  *(void *)(a1 + 312) = a2;
  while (1)
  {
    do
    {
      uint64_t v13 = a3 >= 0xFFFFFFFF ? 0xFFFFFFFFLL : a3;
      *(_DWORD *)(a1 + 320) = v13;
      unint64_t v14 = a3 - v13;
      int v15 = HIDWORD(a3) ? 0 : a4;
      uint64_t result = deflate((z_streamp)(a1 + 312), v15);
      int v17 = result;
      a3 = v14 + *(unsigned int *)(a1 + 320);
      *(_DWORD *)(a1 + 320) = 0;
      LODWORD(v14) = *(_DWORD *)(a1 + 344);
      if (v14) {
        break;
      }
      BOOL v18 = (Bytef *)(*(void *)(a1 + 424) + 8);
      unint64_t v14 = *(unsigned int *)(a1 + 432);
      if ((*(unsigned char *)(a1 + 292) & 4) != 0 || *(unsigned char *)(a1 + 1048))
      {
        if (!v14) {
          goto LABEL_25;
        }
LABEL_24:
        uint64_t result = png_write_complete_chunk(a1, 1229209940, v18, v14);
        goto LABEL_25;
      }
      unint64_t v19 = png_image_size(a1);
      uint64_t result = (uint64_t)optimize_cmf(v18, v19);
      if (v14) {
        goto LABEL_24;
      }
LABEL_25:
      *(_DWORD *)(a1 + 292) |= 4u;
      *(void *)(a1 + 336) = v18;
      *(_DWORD *)(a1 + 344) = v14;
    }
    while (a4 && !v17);
    if (v17) {
      break;
    }
    if (!a3)
    {
      if (a4 != 4) {
        return result;
      }
      int v23 = "Z_OK on Z_FINISH with output space";
LABEL_43:
      png_error(a1, v23);
    }
  }
  if (a4 != 4 || v17 != 1)
  {
    png_zstream_error(a1, v17);
LABEL_41:
    int v23 = *(const char **)(a1 + 360);
    goto LABEL_43;
  }
  unint64_t v20 = (unsigned __int8 *)(*(void *)(a1 + 424) + 8);
  int v21 = *(_DWORD *)(a1 + 432);
  if ((*(unsigned char *)(a1 + 292) & 4) == 0 && !*(unsigned char *)(a1 + 1048))
  {
    unint64_t v22 = png_image_size(a1);
    uint64_t result = (uint64_t)optimize_cmf(v20, v22);
  }
  if (v21 != v14) {
    uint64_t result = png_write_complete_chunk(a1, 1229209940, v20, (v21 - v14));
  }
  *(_DWORD *)(a1 + 344) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 292) |= 0xCu;
  *(_DWORD *)(a1 + 304) = 0;
  return result;
}

uint64_t png_deflate_claim(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v6 = *(_DWORD *)(a1 + 304);
  if (!v6) {
    goto LABEL_5;
  }
  v17[0] = HIBYTE(a2);
  v17[1] = BYTE2(a2);
  v17[2] = BYTE1(a2);
  v17[3] = a2;
  __int16 v18 = 8250;
  char v19 = HIBYTE(v6);
  char v20 = BYTE2(v6);
  char v21 = BYTE1(v6);
  char v22 = v6;
  png_safecat((uint64_t)v17, 0x40uLL, 0xAuLL, " using zstream");
  png_warning(a1, v17);
  if (*(_DWORD *)(a1 + 304) != 1229209940)
  {
    *(_DWORD *)(a1 + 304) = 0;
LABEL_5:
    if (a2 == 1229209940)
    {
      int v8 = *(_DWORD *)(a1 + 436);
      int v9 = *(_DWORD *)(a1 + 440);
      int v10 = *(_DWORD *)(a1 + 444);
      int v11 = *(_DWORD *)(a1 + 448);
      if (*(unsigned char *)(a1 + 296)) {
        int v12 = *(_DWORD *)(a1 + 452);
      }
      else {
        int v12 = *(unsigned __int8 *)(a1 + 606) != 8;
      }
    }
    else
    {
      int v8 = *(_DWORD *)(a1 + 456);
      int v9 = *(_DWORD *)(a1 + 460);
      int v10 = *(_DWORD *)(a1 + 464);
      int v11 = *(_DWORD *)(a1 + 468);
      int v12 = *(_DWORD *)(a1 + 472);
    }
    if (a3 <= 0x4000)
    {
      unint64_t v13 = (1 << (v10 - 1));
      if (a3 + 262 <= v13)
      {
        do
        {
          LODWORD(v13) = v13 >> 1;
          --v10;
        }
        while (v13 >= (int)a3 + 262);
      }
    }
    unsigned int v14 = *(_DWORD *)(a1 + 296);
    if ((v14 & 2) != 0
      && (*(_DWORD *)(a1 + 476) != v8
       || *(_DWORD *)(a1 + 480) != v9
       || *(_DWORD *)(a1 + 484) != v10
       || *(_DWORD *)(a1 + 488) != v11
       || *(_DWORD *)(a1 + 492) != v12))
    {
      if (deflateEnd((z_streamp)(a1 + 312))) {
        png_warning(a1, "deflateEnd failed (ignored)");
      }
      unsigned int v14 = *(_DWORD *)(a1 + 296) & 0xFFFFFFFD;
      *(_DWORD *)(a1 + 296) = v14;
    }
    int v15 = (z_stream *)(a1 + 312);
    *(void *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 320) = 0;
    *(void *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 344) = 0;
    if ((v14 & 2) != 0)
    {
      uint64_t v7 = deflateReset(v15);
      if (!v7) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v7 = deflateInit2_(v15, v8, v9, v10, v11, v12, "1.2.12", 112);
      if (!v7)
      {
        *(_DWORD *)(a1 + 296) |= 2u;
LABEL_27:
        uint64_t v7 = 0;
        *(_DWORD *)(a1 + 304) = a2;
        return v7;
      }
    }
    png_zstream_error(a1, v7);
    return v7;
  }
  *(void *)(a1 + 360) = "in use by IDAT";
  return 4294967294;
}

uint64_t png_image_size(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 500);
  unint64_t v2 = *(void *)(a1 + 512);
  if (v2 >> 15) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v1 >> 15 == 0;
  }
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  if (!*(unsigned char *)(a1 + 604)) {
    return v1 + v1 * v2;
  }
  uint64_t result = 0;
  unint64_t v6 = *(unsigned __int8 *)(a1 + 610);
  int v7 = *(_DWORD *)(a1 + 496);
  unsigned int v8 = 7;
  unsigned int v9 = 1;
  do
  {
    unsigned int v10 = v9 - 1;
    if (v9 - 1 <= 1) {
      char v11 = 3;
    }
    else {
      char v11 = v8 >> 1;
    }
    unsigned int v12 = (v7 + ~(-1 << v11) - (((v10 & 1) << (3 - (v9 >> 1))) & 7)) >> v11;
    if (v12)
    {
      unint64_t v13 = (v6 >> 3) * (unint64_t)v12;
      unint64_t v14 = (v6 * (unint64_t)v12 + 7) >> 3;
      if (v6 > 7) {
        unint64_t v14 = v13;
      }
      unsigned int v15 = (v8 + 1) >> 1;
      if (v10 < 3) {
        LOBYTE(v15) = 3;
      }
      uint64_t v16 = (v1 - ((!(v10 & 1) << (3 - (v10 >> 1))) & 7) + ~(-1 << v15)) >> v15;
      result += v16 + v16 * v14;
    }
    ++v9;
    --v8;
  }
  while (v8);
  return result;
}

unsigned __int8 *optimize_cmf(unsigned __int8 *result, unint64_t a2)
{
  if (a2 <= 0x4000)
  {
    unint64_t v2 = *result;
    if ((v2 & 0xF) == 8)
    {
      unint64_t v3 = v2 >> 4;
      unint64_t v4 = 128 << (*result >> 4);
      BOOL v5 = (v2 & 0xF0) <= 0x70 && v4 >= a2;
      if (v5)
      {
        int v6 = ((v3 & 0xF) << 12) | 0x800;
        unsigned __int8 v7 = (v2 & 0xF0) + 8;
        int v8 = v3 - 1;
        do
        {
          v6 -= 4096;
          v7 -= 16;
          BOOL v5 = v8-- != 0;
          if (!v5) {
            break;
          }
          unint64_t v4 = v4 >> 1;
        }
        while (v4 >= a2);
        *uint64_t result = v7;
        result[1] = (result[1] & 0xE0 | ((result[1] & 0xE0) - 31 * (((result[1] & 0xE0u) + v6) / 0x1F))) ^ 0x1F;
      }
    }
  }
  return result;
}

uint64_t png_write_IEND(uint64_t a1)
{
  uint64_t result = png_write_complete_chunk(a1, 1229278788, 0, 0);
  *(_DWORD *)(a1 + 292) |= 0x10u;
  return result;
}

uint64_t png_write_gAMA_fixed(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = bswap32(a2);
  return png_write_complete_chunk(a1, 1732332865, (Bytef *)&v3, 4uLL);
}

uint64_t png_write_sRGB(uint64_t a1, int a2)
{
  Bytef v2 = a2;
  if (a2 >= 4) {
    png_warning(a1, "Invalid sRGB rendering intent specified");
  }
  Bytef v5 = v2;
  return png_write_complete_chunk(a1, 1934772034, &v5, 1uLL);
}

uint64_t png_write_iCCP(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    unsigned int v10 = "No profile for iCCP chunk";
    goto LABEL_15;
  }
  uint64_t v5 = _byteswap_ulong(*(_DWORD *)a3);
  if (v5 <= 0x83)
  {
    unsigned int v10 = "ICC profile too short";
    goto LABEL_15;
  }
  if ((*(unsigned char *)(a3 + 3) & 3) != 0 && *(unsigned __int8 *)(a3 + 8) >= 4u)
  {
    unsigned int v10 = "ICC profile length invalid (not a multiple of 4)";
    goto LABEL_15;
  }
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  int v7 = png_check_keyword(a1, a2, v43);
  if (!v7)
  {
    unsigned int v10 = "iCCP: invalid keyword";
    goto LABEL_15;
  }
  v43[v7 + 1] = 0;
  uint64_t v8 = (v7 + 2);
  v11[0] = a3;
  v11[1] = v5;
  LODWORD(v12) = 0;
  if (png_text_compress(a1, 1766015824, (uint64_t)v11, v8))
  {
    unsigned int v10 = *(const char **)(a1 + 360);
LABEL_15:
    png_error(a1, v10);
  }
  png_write_chunk_header(a1, 1766015824);
  png_write_chunk_data(a1, v43, v8);
  png_write_compressed_data_out(a1, (uint64_t)v11);
  return png_write_chunk_end(a1);
}

uint64_t png_text_compress(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v7 = png_deflate_claim(a1, a2, *(void *)(a3 + 8));
  if (v7) {
    return v7;
  }
  uint64_t v8 = (void **)(a1 + 424);
  unint64_t v9 = *(void *)(a3 + 8);
  *(void *)(a1 + 312) = *(void *)a3;
  *(void *)(a1 + 336) = a3 + 20;
  int v10 = 1024;
  *(_DWORD *)(a1 + 344) = 1024;
  while (1)
  {
    if (v9 >= 0xFFFFFFFF) {
      uint64_t v11 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v9;
    }
    v9 -= v11;
    *(_DWORD *)(a1 + 320) = v11;
    if (*(_DWORD *)(a1 + 344)) {
      goto LABEL_12;
    }
    if (v10 + a4 < 0) {
      goto LABEL_14;
    }
    long long v12 = *v8;
    if (!*v8) {
      break;
    }
LABEL_11:
    *(void *)(a1 + 336) = v12 + 1;
    int v13 = *(_DWORD *)(a1 + 432);
    *(_DWORD *)(a1 + 344) = v13;
    v10 += v13;
    uint64_t v8 = (void **)v12;
LABEL_12:
    uint64_t v14 = deflate((z_streamp)(a1 + 312), 4 * (v9 == 0));
    v9 += *(unsigned int *)(a1 + 320);
    *(_DWORD *)(a1 + 320) = 0;
    if (v14)
    {
      uint64_t v7 = v14;
      goto LABEL_15;
    }
  }
  long long v12 = png_malloc_base(a1, *(unsigned int *)(a1 + 432) + 8);
  if (v12)
  {
    void *v12 = 0;
    *uint64_t v8 = v12;
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v7 = 4294967292;
LABEL_15:
  int v15 = v10 - *(_DWORD *)(a1 + 344);
  *(_DWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a3 + 16) = v15;
  if ((v15 + a4) < 0x7FFFFFFF)
  {
    png_zstream_error(a1, v7);
    *(_DWORD *)(a1 + 304) = 0;
    if (v7 == 1 && !v9)
    {
      optimize_cmf((unsigned __int8 *)(a3 + 20), *(void *)(a3 + 8));
      return 0;
    }
  }
  else
  {
    *(void *)(a1 + 360) = "compressed data too long";
    *(_DWORD *)(a1 + 304) = 0;
    return 4294967292;
  }
  return v7;
}

uint64_t png_write_compressed_data_out(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a2 + 16);
  unint64_t v4 = (Bytef *)(a2 + 20);
  uint64_t v5 = *(void **)(a1 + 424);
  if (v3 >= 0x400) {
    uint64_t v6 = 1024;
  }
  else {
    uint64_t v6 = v3;
  }
  uint64_t result = png_write_chunk_data(a1, v4, v6);
  unsigned int v8 = v3 - v6;
  BOOL v9 = v8 == 0;
  if (v8) {
    BOOL v10 = v5 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    do
    {
      unsigned int v11 = *(_DWORD *)(a1 + 432);
      uint64_t v14 = (void *)*v5;
      long long v12 = (Bytef *)(v5 + 1);
      int v13 = v14;
      if (v11 >= v8) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = v11;
      }
      uint64_t result = png_write_chunk_data(a1, v12, v15);
      v8 -= v15;
      BOOL v9 = v8 == 0;
      if (v8) {
        BOOL v16 = v13 == 0;
      }
      else {
        BOOL v16 = 1;
      }
      uint64_t v5 = v13;
    }
    while (!v16);
  }
  if (!v9) {
    png_error(a1, "error writing ancillary chunked compressed data");
  }
  return result;
}

uint64_t png_write_sPLT(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t v4 = (Bytef *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8) == 8) {
    uint64_t v5 = 6;
  }
  else {
    uint64_t v5 = 10;
  }
  int v6 = png_check_keyword(a1, *(unsigned __int8 **)a2, v21);
  if (!v6) {
    png_error(a1, "sPLT: invalid keyword");
  }
  int v7 = v6;
  png_write_chunk_header(a1, 1934642260);
  png_write_chunk_data(a1, v21, (v7 + 1));
  png_write_chunk_data(a1, v4, 1);
  if (*(int *)(a2 + 24) >= 1)
  {
    unsigned int v8 = (unsigned __int16 *)(*(void *)(a2 + 16) + 4);
    do
    {
      BOOL v9 = v8 - 2;
      if (*v4 == 8)
      {
        LOBYTE(v16) = *(v8 - 2);
        HIBYTE(v16) = *((unsigned char *)v8 - 2);
        LOBYTE(v17) = *(unsigned char *)v8;
        unsigned __int16 v10 = v8[1];
        unsigned int v11 = &v18;
        long long v12 = (char *)&v17 + 1;
        int v13 = (char *)&v18 + 1;
      }
      else
      {
        __int16 v16 = __rev16(*(v8 - 2));
        __int16 v17 = bswap32(*(v8 - 1)) >> 16;
        __int16 v18 = bswap32(*v8) >> 16;
        unsigned __int16 v10 = v8[1];
        char v19 = HIBYTE(v10);
        long long v12 = v20;
        unsigned int v11 = (__int16 *)&v20[1];
        int v13 = &v20[2];
      }
      unsigned char *v12 = v10;
      unsigned __int16 v14 = v8[2];
      *(unsigned char *)unsigned int v11 = HIBYTE(v14);
      unsigned char *v13 = v14;
      png_write_chunk_data(a1, (Bytef *)&v16, v5);
      v8 += 5;
    }
    while ((unint64_t)(v9 + 5) < *(void *)(a2 + 16) + 10 * *(int *)(a2 + 24));
  }
  return png_write_chunk_end(a1);
}

uint64_t png_write_sBIT(uint64_t a1, Bytef *a2, int a3)
{
  if ((a3 & 2) != 0)
  {
    if (a3 == 3) {
      unsigned int v4 = 8;
    }
    else {
      unsigned int v4 = *(unsigned __int8 *)(a1 + 609);
    }
    if (*a2) {
      BOOL v5 = v4 >= *a2;
    }
    else {
      BOOL v5 = 0;
    }
    if (!v5) {
      goto LABEL_21;
    }
    unsigned int v6 = a2[1];
    if (!a2[1]) {
      goto LABEL_21;
    }
    if (v4 < v6) {
      goto LABEL_21;
    }
    unsigned int v7 = a2[2];
    if (!a2[2] || v4 < v7) {
      goto LABEL_21;
    }
    v10[0] = *a2;
    v10[1] = v6;
    unint64_t v3 = 3;
    v10[2] = v7;
    if ((a3 & 4) == 0) {
      return png_write_complete_chunk(a1, 1933723988, v10, v3);
    }
    goto LABEL_19;
  }
  if (a2[3] && a2[3] <= *(unsigned __int8 *)(a1 + 609))
  {
    v10[0] = a2[3];
    unint64_t v3 = 1;
    if ((a3 & 4) == 0) {
      return png_write_complete_chunk(a1, 1933723988, v10, v3);
    }
LABEL_19:
    unsigned int v8 = a2[4];
    if (!a2[4] || v8 > *(unsigned __int8 *)(a1 + 609)) {
      goto LABEL_21;
    }
    v10[v3++] = v8;
    return png_write_complete_chunk(a1, 1933723988, v10, v3);
  }
LABEL_21:
  return png_warning(a1, "Invalid sBIT depth specified");
}

uint64_t png_write_cHRM_fixed(uint64_t a1, unsigned int *a2)
{
  *((void *)&v9 + 1) = *MEMORY[0x263EF8340];
  png_save_int_32(v5, a2[6]);
  png_save_int_32(&v6, a2[7]);
  png_save_int_32(&v7, *a2);
  png_save_int_32((char *)&v7 + 4, a2[1]);
  png_save_int_32(&v8, a2[2]);
  png_save_int_32((char *)&v8 + 4, a2[3]);
  png_save_int_32(&v9, a2[4]);
  png_save_int_32((char *)&v9 + 4, a2[5]);
  return png_write_complete_chunk(a1, 1665684045, v5, 0x20uLL);
}

uint64_t png_write_tRNS(uint64_t a1, Bytef *a2, unsigned __int16 *a3, int a4, int a5)
{
  if (!a5)
  {
    signed int v6 = a3[4];
    if (1 << *(unsigned char *)(a1 + 608) <= v6)
    {
      BOOL v5 = "Ignoring attempt to write tRNS chunk out-of-range for bit_depth";
      goto LABEL_21;
    }
    v16[0] = __rev16(v6);
    unint64_t v7 = 2;
    return png_write_complete_chunk(a1, 1951551059, (Bytef *)v16, v7);
  }
  if (a5 == 2)
  {
    unsigned int v8 = a3[1];
    unsigned int v9 = v8 >> 8;
    v16[0] = __rev16(v8);
    unsigned int v10 = a3[2];
    unsigned int v11 = v10 >> 8;
    v16[1] = __rev16(v10);
    unsigned int v12 = a3[3];
    void v16[2] = __rev16(v12);
    int v13 = v11 | (v12 >> 8) | v9;
    if (*(unsigned char *)(a1 + 608) == 8 && v13 != 0)
    {
      BOOL v5 = "Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8";
      goto LABEL_21;
    }
    unint64_t v7 = 6;
    return png_write_complete_chunk(a1, 1951551059, (Bytef *)v16, v7);
  }
  if (a5 != 3)
  {
    BOOL v5 = "Can't write tRNS with an alpha channel";
    goto LABEL_21;
  }
  if (a4 < 1 || *(unsigned __int16 *)(a1 + 592) < a4)
  {
    BOOL v5 = "Invalid number of transparent colors specified";
LABEL_21:
    return png_app_warning(a1, v5);
  }
  return png_write_complete_chunk(a1, 1951551059, a2, a4);
}

uint64_t png_write_bKGD(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a3 != 3)
  {
    if ((a3 & 2) != 0)
    {
      unsigned int v7 = *((unsigned __int16 *)a2 + 1);
      unsigned int v8 = v7 >> 8;
      v15[0] = __rev16(v7);
      unsigned int v9 = *((unsigned __int16 *)a2 + 2);
      unsigned int v10 = v9 >> 8;
      v15[1] = __rev16(v9);
      unsigned int v11 = *((unsigned __int16 *)a2 + 3);
      v15[2] = __rev16(v11);
      int v12 = v10 | (v11 >> 8) | v8;
      if (*(unsigned char *)(a1 + 608) == 8 && v12 != 0)
      {
        unsigned int v4 = "Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8";
        goto LABEL_19;
      }
      unint64_t v6 = 6;
    }
    else
    {
      signed int v5 = *((unsigned __int16 *)a2 + 4);
      if (1 << *(unsigned char *)(a1 + 608) <= v5)
      {
        unsigned int v4 = "Ignoring attempt to write bKGD chunk out-of-range for bit_depth";
        goto LABEL_19;
      }
      v15[0] = __rev16(v5);
      unint64_t v6 = 2;
    }
    return png_write_complete_chunk(a1, 1649100612, (Bytef *)v15, v6);
  }
  if (!*(_WORD *)(a1 + 592) && (*(unsigned char *)(a1 + 984) & 1) != 0)
  {
    LOBYTE(v3) = *a2;
    goto LABEL_17;
  }
  unsigned int v3 = *a2;
  if (*(unsigned __int16 *)(a1 + 592) > v3)
  {
LABEL_17:
    LOBYTE(v15[0]) = v3;
    unint64_t v6 = 1;
    return png_write_complete_chunk(a1, 1649100612, (Bytef *)v15, v6);
  }
  unsigned int v4 = "Invalid background palette index";
LABEL_19:
  return png_warning(a1, v4);
}

uint64_t png_write_eXIf(uint64_t a1, Bytef *a2, int a3)
{
  LODWORD(v3) = a3;
  png_write_chunk_header(a1, 1700284774);
  if ((int)v3 >= 1)
  {
    uint64_t v3 = v3;
    do
    {
      Bytef v6 = *a2++;
      Bytef v8 = v6;
      png_write_chunk_data(a1, &v8, 1);
      --v3;
    }
    while (v3);
  }
  return png_write_chunk_end(a1);
}

uint64_t png_write_hIST(uint64_t a1, unsigned __int16 *a2, int a3)
{
  if (*(unsigned __int16 *)(a1 + 592) >= a3)
  {
    LODWORD(v5) = a3;
    png_write_chunk_header(a1, 1749635924);
    if ((int)v5 >= 1)
    {
      uint64_t v5 = v5;
      do
      {
        unsigned int v7 = *a2++;
        *(_WORD *)Bytef v8 = bswap32(v7) >> 16;
        png_write_chunk_data(a1, v8, 2);
        --v5;
      }
      while (v5);
    }
    return png_write_chunk_end(a1);
  }
  else
  {
    return png_warning(a1, "Invalid number of histogram entries specified");
  }
}

uint64_t png_write_tEXt(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v5 = png_check_keyword(a1, a2, v10);
  if (!v5)
  {
    Bytef v8 = "tEXt: invalid keyword";
LABEL_11:
    png_error(a1, v8);
  }
  int v6 = v5;
  if (a3 && *a3)
  {
    size_t v7 = strlen(a3);
    if (v7 > (2147483646 - v6))
    {
      Bytef v8 = "tEXt: text too long";
      goto LABEL_11;
    }
  }
  else
  {
    size_t v7 = 0;
  }
  png_write_chunk_header(a1, 1950701684);
  png_write_chunk_data(a1, v10, (v6 + 1));
  if (v7) {
    png_write_chunk_data(a1, (Bytef *)a3, v7);
  }
  return png_write_chunk_end(a1);
}

uint64_t png_write_zTXt(uint64_t a1, unsigned __int8 *a2, char *a3, int a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    long long v42 = 0u;
    long long v41 = 0u;
    long long v40 = 0u;
    long long v39 = 0u;
    long long v38 = 0u;
    long long v37 = 0u;
    long long v36 = 0u;
    long long v35 = 0u;
    long long v34 = 0u;
    long long v33 = 0u;
    long long v32 = 0u;
    long long v31 = 0u;
    long long v30 = 0u;
    long long v29 = 0u;
    long long v28 = 0u;
    long long v27 = 0u;
    long long v26 = 0u;
    long long v25 = 0u;
    long long v24 = 0u;
    long long v23 = 0u;
    long long v22 = 0u;
    long long v21 = 0u;
    long long v20 = 0u;
    long long v19 = 0u;
    long long v18 = 0u;
    long long v17 = 0u;
    long long v16 = 0u;
    long long v15 = 0u;
    long long v14 = 0u;
    long long v13 = 0u;
    long long v12 = 0u;
    int v7 = png_check_keyword(a1, a2, v43);
    if (v7)
    {
      v43[v7 + 1] = 0;
      uint64_t v8 = (v7 + 2);
      if (a3) {
        size_t v9 = strlen(a3);
      }
      else {
        size_t v9 = 0;
      }
      v11[0] = a3;
      v11[1] = v9;
      LODWORD(v12) = 0;
      if (!png_text_compress(a1, 2052348020, (uint64_t)v11, v8))
      {
        png_write_chunk_header(a1, 2052348020);
        png_write_chunk_data(a1, v43, v8);
        png_write_compressed_data_out(a1, (uint64_t)v11);
        return png_write_chunk_end(a1);
      }
      unsigned int v10 = *(const char **)(a1 + 360);
    }
    else
    {
      unsigned int v10 = "zTXt: invalid keyword";
    }
LABEL_15:
    png_error(a1, v10);
  }
  if (a4 != -1)
  {
    unsigned int v10 = "zTXt: invalid compression type";
    goto LABEL_15;
  }
  return png_write_tEXt(a1, a2, a3);
}

uint64_t png_write_iTXt(uint64_t a1, int a2, unsigned __int8 *a3, char *a4, char *a5, char *a6)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  int v11 = png_check_keyword(a1, a3, v56);
  if (!v11)
  {
    long long v23 = "iTXt: invalid keyword";
    goto LABEL_26;
  }
  char v12 = a2 + 1;
  if ((a2 + 1) >= 4)
  {
    long long v23 = "iTXt: invalid compression";
    goto LABEL_26;
  }
  int v13 = v11;
  v56[v11 + 1] = 0x1000100u >> (8 * v12);
  v56[v11 + 2] = 0;
  uint64_t v14 = (v11 + 3);
  if (!a4) {
    a4 = "";
  }
  unint64_t v15 = strlen(a4) + 1;
  if (!a5) {
    a5 = "";
  }
  unint64_t v16 = strlen(a5) + 1;
  if (!a6) {
    a6 = "";
  }
  int v17 = v14 + v15;
  if (v15 > (2147483644 - v13)) {
    int v17 = 0x7FFFFFFF;
  }
  unint64_t v18 = v17 ^ 0x7FFFFFFFu;
  int v19 = v17 + v16;
  if (v16 <= v18) {
    int v20 = v19;
  }
  else {
    int v20 = 0x7FFFFFFF;
  }
  size_t v21 = strlen(a6);
  v24[0] = a6;
  v24[1] = v21;
  LODWORD(v25) = 0;
  if ((v12 & 1) == 0)
  {
    if (v21 <= (v20 ^ 0x7FFFFFFFu))
    {
      LODWORD(v25) = v21;
      goto LABEL_18;
    }
    long long v23 = "iTXt: uncompressed text too long";
LABEL_26:
    png_error(a1, v23);
  }
  if (png_text_compress(a1, 1767135348, (uint64_t)v24, v20))
  {
    long long v23 = *(const char **)(a1 + 360);
    goto LABEL_26;
  }
LABEL_18:
  png_write_chunk_header(a1, 1767135348);
  png_write_chunk_data(a1, v56, v14);
  png_write_chunk_data(a1, (Bytef *)a4, v15);
  png_write_chunk_data(a1, (Bytef *)a5, v16);
  if (v12) {
    png_write_compressed_data_out(a1, (uint64_t)v24);
  }
  else {
    png_write_chunk_data(a1, (Bytef *)a6, v25);
  }
  return png_write_chunk_end(a1);
}

uint64_t png_write_oFFs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char v4 = a4;
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a4 >= 2) {
    png_warning(a1, "Unrecognized unit type for oFFs chunk");
  }
  png_save_int_32(v9, a2);
  png_save_int_32(v10, a3);
  Bytef v10[4] = v4;
  return png_write_complete_chunk(a1, 1866876531, v9, 9uLL);
}

uint64_t png_write_pCAL(void *a1, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5, int a6, const char *a7, const char **a8)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (a5 >= 4)
  {
    long long v35 = "Unrecognized equation type for pCAL chunk";
    goto LABEL_18;
  }
  char v12 = a5;
  int v15 = png_check_keyword((uint64_t)a1, a2, v42);
  if (!v15)
  {
    long long v35 = "pCAL: invalid keyword";
LABEL_18:
    png_error((uint64_t)a1, v35);
  }
  unsigned int v37 = a3;
  unsigned int v38 = a4;
  char v39 = v12;
  uint64_t v16 = (v15 + 1);
  long long v41 = (Bytef *)a7;
  size_t v17 = strlen(a7);
  if (a6) {
    size_t v18 = v17 + 1;
  }
  else {
    size_t v18 = v17;
  }
  uint64_t v36 = v18;
  uint64_t v19 = v16 + v18 + 10;
  int v20 = png_malloc(a1, 8 * a6);
  uint64_t v21 = a6;
  uint64_t v22 = (a6 - 1);
  long long v40 = v20;
  if (a6 >= 1)
  {
    uint64_t v23 = a6;
    long long v24 = a8;
    long long v25 = (size_t *)v20;
    do
    {
      long long v26 = *v24++;
      size_t v27 = strlen(v26);
      BOOL v28 = v22-- != 0;
      if (v28) {
        size_t v29 = v27 + 1;
      }
      else {
        size_t v29 = v27;
      }
      *v25++ = v29;
      v19 += v27 + v28;
      --v23;
    }
    while (v23);
  }
  png_write_chunk_header((uint64_t)a1, 1883455820);
  png_write_chunk_data((uint64_t)a1, v42, v16);
  png_save_int_32(v43, v37);
  png_save_int_32(v44, v38);
  v44[4] = v39;
  v44[5] = a6;
  png_write_chunk_data((uint64_t)a1, v43, 10);
  png_write_chunk_data((uint64_t)a1, v41, v36);
  if (a6 >= 1)
  {
    long long v30 = v40;
    do
    {
      long long v32 = (Bytef *)*a8++;
      long long v31 = v32;
      uint64_t v33 = *v30++;
      png_write_chunk_data((uint64_t)a1, v31, v33);
      --v21;
    }
    while (v21);
  }
  png_free((uint64_t)a1, v40);
  return png_write_chunk_end((uint64_t)a1);
}

uint64_t png_write_sCAL_s(uint64_t a1, Bytef a2, char *__s, const char *a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  size_t v7 = strlen(__s);
  size_t v8 = strlen(a4);
  unint64_t v9 = v7 + v8 + 2;
  if (v9 < 0x41)
  {
    size_t v11 = v8;
    v12[0] = a2;
    __memcpy_chk();
    memcpy(&v12[v7 + 2], a4, v11);
    return png_write_complete_chunk(a1, 1933787468, v12, v9);
  }
  else
  {
    return png_warning(a1, "Can't write sCAL (buffer too small)");
  }
}

uint64_t png_write_pHYs(uint64_t a1, int a2, int a3, int a4)
{
  Bytef v4 = a4;
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a4 >= 2) {
    png_warning(a1, "Unrecognized unit type for pHYs chunk");
  }
  v9[0] = HIBYTE(a2);
  v9[1] = BYTE2(a2);
  v9[2] = BYTE1(a2);
  v9[3] = a2;
  Bytef v9[4] = HIBYTE(a3);
  v9[5] = BYTE2(a3);
  v9[6] = BYTE1(a3);
  v9[7] = a3;
  v9[8] = v4;
  return png_write_complete_chunk(a1, 1883789683, v9, 9uLL);
}

uint64_t png_write_tIME(uint64_t a1, unsigned __int16 *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 2);
  if ((v2 - 13) >= 0xFFFFFFF4
    && (int v3 = *((unsigned __int8 *)a2 + 3), (v3 - 32) >= 0xFFFFFFE1)
    && (unsigned int v4 = *((unsigned __int8 *)a2 + 4), v4 <= 0x17)
    && (unsigned int v5 = *((unsigned __int8 *)a2 + 6), v5 < 0x3D))
  {
    unsigned __int16 v7 = *a2;
    v8[0] = HIBYTE(*a2);
    v8[1] = v7;
    unsigned int v8[2] = v2;
    Bytef v8[3] = v3;
    v8[4] = v4;
    v8[5] = *((unsigned char *)a2 + 5);
    v8[6] = v5;
    return png_write_complete_chunk(a1, 1950960965, v8, 7uLL);
  }
  else
  {
    return png_warning(a1, "Invalid time specified for tIME chunk");
  }
}

void *png_write_start_row(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 609) * *(unsigned __int8 *)(a1 + 612);
  unsigned int v3 = *(_DWORD *)(a1 + 496);
  unint64_t v4 = (v3 * (unint64_t)v2 + 7) >> 3;
  unint64_t v5 = v3 * (unint64_t)(v2 >> 3);
  if (v2 < 8) {
    unint64_t v5 = v4;
  }
  size_t v6 = v5 + 1;
  *(unsigned char *)(a1 + 615) = *(unsigned char *)(a1 + 610);
  *(unsigned char *)(a1 + 614) = v2;
  uint64_t result = png_malloc((void *)a1, v5 + 1);
  *(void *)(a1 + 544) = result;
  *(unsigned char *)uint64_t result = 0;
  unsigned int v8 = *(unsigned __int8 *)(a1 + 606);
  if (*(_DWORD *)(a1 + 500) == 1) {
    v8 &= 0x1Fu;
  }
  if (*(_DWORD *)(a1 + 496) == 1) {
    v8 &= 0x2Fu;
  }
  if ((_BYTE)v8) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = 8;
  }
  *(unsigned char *)(a1 + 606) = v9;
  if (v9 >= 0x10)
  {
    if (!*(void *)(a1 + 552))
    {
      uint64_t result = png_malloc((void *)a1, v6);
      *(void *)(a1 + 552) = result;
      if (((v9 >> 5) & 1) + (v9 >> 7) + ((v9 >> 4) & 1) + ((v9 >> 6) & 1) >= 2)
      {
        uint64_t result = png_malloc((void *)a1, v6);
        *(void *)(a1 + 560) = result;
      }
    }
    if (v9 >= 0x20)
    {
      uint64_t result = png_calloc((void *)a1, v6);
      *(void *)(a1 + 536) = result;
    }
  }
  if (!*(unsigned char *)(a1 + 604))
  {
    int v10 = *(_DWORD *)(a1 + 500);
    goto LABEL_20;
  }
  int v10 = *(_DWORD *)(a1 + 500);
  if ((*(unsigned char *)(a1 + 300) & 2) != 0)
  {
LABEL_20:
    *(_DWORD *)(a1 + 504) = v10;
    unsigned int v11 = *(_DWORD *)(a1 + 496);
    goto LABEL_21;
  }
  *(_DWORD *)(a1 + 504) = (v10 + 7) >> 3;
  unsigned int v11 = (*(_DWORD *)(a1 + 496) + 7) >> 3;
LABEL_21:
  *(_DWORD *)(a1 + 508) = v11;
  return result;
}

void png_write_finish_row(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 524) + 1;
  *(_DWORD *)(a1 + 524) = v1;
  if (v1 >= *(_DWORD *)(a1 + 504))
  {
    if (!*(unsigned char *)(a1 + 604)) {
      goto LABEL_15;
    }
    *(_DWORD *)(a1 + 524) = 0;
    unsigned __int8 v2 = *(unsigned char *)(a1 + 605);
    if ((*(unsigned char *)(a1 + 300) & 2) != 0)
    {
      ++v2;
    }
    else
    {
      while (++v2 <= 6u)
      {
        unsigned int v3 = png_do_write_interlace_png_pass_inc[v2];
        unsigned int v4 = *(_DWORD *)(a1 + 496) + v3 + ~png_do_write_interlace_png_pass_start[v2];
        *(_DWORD *)(a1 + 508) = v4 / v3;
        unsigned int v5 = png_write_finish_row_png_pass_yinc[v2];
        unsigned int v6 = *(_DWORD *)(a1 + 500) + v5 + ~png_write_finish_row_png_pass_ystart[v2];
        *(_DWORD *)(a1 + 504) = v6 / v5;
        if (v4 >= v3 && v6 >= v5) {
          break;
        }
      }
    }
    *(unsigned char *)(a1 + 605) = v2;
    if (v2 <= 6u)
    {
      if (*(void *)(a1 + 536))
      {
        unsigned int v7 = *(unsigned __int8 *)(a1 + 609) * *(unsigned __int8 *)(a1 + 612);
        unsigned int v8 = *(_DWORD *)(a1 + 496);
        BOOL v9 = v7 >= 8;
        unint64_t v10 = (v8 * (unint64_t)v7 + 7) >> 3;
        unint64_t v11 = v8 * (unint64_t)(v7 >> 3);
        if (!v9) {
          unint64_t v11 = v10;
        }
        bzero(*(void **)(a1 + 536), v11 + 1);
      }
    }
    else
    {
LABEL_15:
      png_compress_IDAT(a1, 0, 0, 4);
    }
  }
}

uint64_t png_do_write_interlace(uint64_t result, unsigned __int8 *__dst, int a3)
{
  if (a3 > 5) {
    return result;
  }
  uint64_t v4 = result;
  unint64_t v5 = *(unsigned __int8 *)(result + 19);
  if (v5 == 4)
  {
    unsigned int v14 = *(_DWORD *)result;
    uint64_t v7 = a3;
    unsigned int v8 = png_do_write_interlace_png_pass_start[a3];
    if (*(_DWORD *)result <= v8) {
      goto LABEL_34;
    }
    int v9 = 0;
    int v15 = png_do_write_interlace_png_pass_inc[a3];
    int v16 = 4 * v8;
    unsigned int v17 = png_do_write_interlace_png_pass_start[a3];
    int v18 = 4;
    uint64_t v13 = __dst;
    do
    {
      uint64_t result = ~v16 & 4;
      v9 |= ((__dst[(unint64_t)v17 >> 1] >> (~(_BYTE)v16 & 4)) & 0xF) << v18;
      if (v18)
      {
        v18 -= 4;
      }
      else
      {
        *v13++ = v9;
        int v18 = 4;
        int v9 = 0;
      }
      v17 += v15;
      v16 += 4 * v15;
    }
    while (v17 < v14);
    if (v18 == 4) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  if (v5 == 2)
  {
    unsigned int v19 = *(_DWORD *)result;
    uint64_t v7 = a3;
    unsigned int v8 = png_do_write_interlace_png_pass_start[a3];
    if (*(_DWORD *)result <= v8) {
      goto LABEL_34;
    }
    int v9 = 0;
    int v20 = png_do_write_interlace_png_pass_inc[a3];
    int v21 = 2 * v8;
    unsigned int v22 = png_do_write_interlace_png_pass_start[a3];
    int v23 = 6;
    uint64_t v13 = __dst;
    do
    {
      uint64_t result = ~v21 & 6;
      v9 |= ((__dst[(unint64_t)v22 >> 2] >> (~(_BYTE)v21 & 6)) & 3) << v23;
      if (v23)
      {
        v23 -= 2;
      }
      else
      {
        *v13++ = v9;
        int v23 = 6;
        int v9 = 0;
      }
      v22 += v20;
      v21 += 2 * v20;
    }
    while (v22 < v19);
    if (v23 == 6) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }
  if (v5 != 1)
  {
    unsigned int v24 = *(_DWORD *)result;
    uint64_t v7 = a3;
    unsigned int v8 = png_do_write_interlace_png_pass_start[a3];
    if (*(_DWORD *)result > v8)
    {
      size_t v25 = v5 >> 3;
      int v26 = png_do_write_interlace_png_pass_inc[a3];
      unsigned int v27 = png_do_write_interlace_png_pass_start[a3];
      BOOL v28 = __dst;
      do
      {
        size_t v29 = &__dst[v25 * (unint64_t)v27];
        if (v28 != v29) {
          uint64_t result = (uint64_t)memcpy(v28, v29, v25);
        }
        v28 += v25;
        v27 += v26;
      }
      while (v27 < v24);
    }
    goto LABEL_34;
  }
  unsigned int v6 = *(_DWORD *)result;
  uint64_t v7 = a3;
  unsigned int v8 = png_do_write_interlace_png_pass_start[a3];
  if (*(_DWORD *)result > v8)
  {
    int v9 = 0;
    int v10 = png_do_write_interlace_png_pass_inc[a3];
    unsigned int v11 = png_do_write_interlace_png_pass_start[a3];
    int v12 = 7;
    uint64_t v13 = __dst;
    do
    {
      v9 |= ((__dst[(unint64_t)v11 >> 3] >> (~(_BYTE)v11 & 7)) & 1) << v12;
      if (v12)
      {
        --v12;
      }
      else
      {
        *v13++ = v9;
        int v12 = 7;
        int v9 = 0;
      }
      v11 += v10;
    }
    while (v11 < v6);
    if (v12 != 7) {
LABEL_28:
    }
      unsigned char *v13 = v9;
  }
LABEL_34:
  unsigned int v30 = (*(_DWORD *)v4 + ~v8 + png_do_write_interlace_png_pass_inc[v7]) / png_do_write_interlace_png_pass_inc[v7];
  *(_DWORD *)uint64_t v4 = v30;
  unint64_t v31 = *(unsigned __int8 *)(v4 + 19);
  unint64_t v32 = (v31 * v30 + 7) >> 3;
  unint64_t v33 = (v31 >> 3) * (unint64_t)v30;
  if (v31 < 8) {
    unint64_t v33 = v32;
  }
  *(void *)(v4 + 8) = v33;
  return result;
}

void png_write_find_filter(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 606);
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 19);
  unint64_t v6 = (unint64_t)(v5 + 7) >> 3;
  uint64_t v7 = *(void *)(a1 + 544);
  if (v4 < 0x1FFFFFFFFFFFFFFLL)
  {
    unint64_t v8 = -257;
    if ((v3 & 8) != 0 && v3 != 8)
    {
      unint64_t v8 = 0;
      if (v4)
      {
        int v9 = (unsigned __int8 *)(v7 + 1);
        uint64_t v10 = *(void *)(a2 + 8);
        do
        {
          int v12 = *v9++;
          LODWORD(v11) = v12;
          unsigned int v13 = 256 - v12;
          if ((v12 & 0x80u) == 0) {
            uint64_t v11 = v11;
          }
          else {
            uint64_t v11 = v13;
          }
          v8 += v11;
          --v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v3 &= -v3;
    unint64_t v8 = -257;
  }
  if (v3 == 16)
  {
    unsigned int v14 = *(unsigned char **)(a1 + 552);
    unsigned char *v14 = 1;
    int v15 = v14 + 1;
    int v16 = (char *)(v7 + 1);
    if (v5)
    {
      unint64_t v17 = (unint64_t)(v5 + 7) >> 3;
      int v18 = (char *)(v7 + 1);
      do
      {
        char v19 = *v18++;
        *v15++ = v19;
        --v17;
      }
      while (v17);
    }
    else
    {
      int v18 = (char *)(v7 + 1);
    }
    unint64_t v29 = v4 - v6;
    if (v4 > v6)
    {
      do
      {
        char v31 = *v18++;
        char v30 = v31;
        char v32 = *v16++;
        *v15++ = v30 - v32;
        --v29;
      }
      while (v29);
    }
  }
  else
  {
    unsigned int v14 = *(unsigned char **)(a1 + 544);
    if ((v3 & 0x10) != 0)
    {
      int v20 = *(unsigned char **)(a1 + 552);
      *int v20 = 1;
      int v21 = v20 + 1;
      unsigned int v22 = (char *)(v7 + 1);
      unint64_t v23 = 0;
      if (v5)
      {
        uint64_t v24 = v6;
        size_t v25 = (char *)(v7 + 1);
        do
        {
          int v27 = *v25++;
          LODWORD(v26) = v27;
          *v21++ = v27;
          unsigned int v28 = 256 - v27;
          if ((v27 & 0x80u) == 0) {
            uint64_t v26 = v26;
          }
          else {
            uint64_t v26 = v28;
          }
          v23 += v26;
          --v24;
        }
        while (v24);
      }
      else
      {
        size_t v25 = (char *)(v7 + 1);
      }
      if (v4 > v6)
      {
        unint64_t v33 = v6 + 1;
        do
        {
          char v35 = *v25++;
          char v34 = v35;
          char v36 = *v22++;
          unsigned __int8 v37 = v34 - v36;
          int v38 = (char)v37;
          *v21++ = v37;
          unsigned int v39 = v37;
          LODWORD(v40) = 256 - v37;
          if (v38 >= 0) {
            uint64_t v40 = v39;
          }
          else {
            uint64_t v40 = v40;
          }
          v23 += v40;
        }
        while (v23 <= v8 && v33++ < v4);
      }
      if (v23 < v8)
      {
        uint64_t v42 = *(void *)(a1 + 560);
        if (v42)
        {
          *(void *)(a1 + 552) = v42;
          *(void *)(a1 + 560) = v20;
        }
        unint64_t v8 = v23;
        unsigned int v14 = v20;
      }
    }
  }
  if (v3 == 32)
  {
    unsigned int v14 = *(unsigned char **)(a1 + 552);
    unsigned char *v14 = 2;
    if (!v4) {
      goto LABEL_158;
    }
    uint64_t v43 = 0;
    uint64_t v44 = *(void *)(a1 + 536) + 1;
    do
    {
      v14[v43 + 1] = *(unsigned char *)(v7 + 1 + v43) - *(unsigned char *)(v44 + v43);
      ++v43;
    }
    while (v4 != v43);
  }
  else if ((v3 & 0x20) != 0)
  {
    uint64_t v45 = *(unsigned char **)(a1 + 552);
    *uint64_t v45 = 2;
    unint64_t v46 = 0;
    if (v4)
    {
      long long v47 = (char *)(v7 + 1);
      long long v48 = (char *)(*(void *)(a1 + 536) + 1);
      long long v49 = v45 + 1;
      unint64_t v50 = v4 - 1;
      do
      {
        char v52 = *v47++;
        char v51 = v52;
        char v53 = *v48++;
        unsigned __int8 v54 = v51 - v53;
        int v55 = (char)v54;
        *v49++ = v54;
        unsigned int v56 = v54;
        LODWORD(v57) = 256 - v54;
        if (v55 >= 0) {
          uint64_t v57 = v56;
        }
        else {
          uint64_t v57 = v57;
        }
        v46 += v57;
      }
      while (v46 <= v8 && v50-- != 0);
    }
    if (v46 < v8)
    {
      uint64_t v59 = *(void *)(a1 + 560);
      if (v59)
      {
        *(void *)(a1 + 552) = v59;
        *(void *)(a1 + 560) = v45;
      }
      unint64_t v8 = v46;
      unsigned int v14 = v45;
    }
  }
  if (v3 == 64)
  {
    unsigned int v14 = *(unsigned char **)(a1 + 552);
    unsigned char *v14 = 3;
    unsigned int v60 = v14 + 1;
    int v61 = (unsigned __int8 *)(*(void *)(a1 + 536) + 1);
    int v62 = (unsigned __int8 *)(v7 + 1);
    if (v5)
    {
      unint64_t v63 = (unint64_t)(v5 + 7) >> 3;
      unsigned int v64 = (char *)(v7 + 1);
      do
      {
        char v66 = *v64++;
        char v65 = v66;
        unsigned int v67 = *v61++;
        *v60++ = v65 - (v67 >> 1);
        LODWORD(v63) = v63 - 1;
      }
      while (v63);
    }
    else
    {
      unsigned int v64 = (char *)(v7 + 1);
    }
    if (v4 > v6)
    {
      unsigned int v82 = v6 + 1;
      do
      {
        char v84 = *v64++;
        char v83 = v84;
        int v86 = *v61++;
        int v85 = v86;
        int v87 = *v62++;
        *v60++ = v83 - ((v87 + v85) >> 1);
        BOOL v99 = v4 > v82++;
      }
      while (v99);
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    v68 = *(unsigned char **)(a1 + 552);
    unsigned char *v68 = 3;
    int v69 = v68 + 1;
    int v70 = (unsigned __int8 *)(*(void *)(a1 + 536) + 1);
    int16x8_t v71 = (unsigned __int8 *)(v7 + 1);
    unint64_t v72 = 0;
    if (v5)
    {
      unint64_t v73 = (unint64_t)(v5 + 7) >> 3;
      int16x8_t v74 = (char *)(v7 + 1);
      do
      {
        char v76 = *v74++;
        char v75 = v76;
        unsigned int v77 = *v70++;
        unsigned __int8 v78 = v75 - (v77 >> 1);
        int v79 = (char)v78;
        *v69++ = v78;
        unsigned int v80 = v78;
        LODWORD(v81) = 256 - v78;
        if (v79 >= 0) {
          uint64_t v81 = v80;
        }
        else {
          uint64_t v81 = v81;
        }
        v72 += v81;
        LODWORD(v73) = v73 - 1;
      }
      while (v73);
    }
    else
    {
      int16x8_t v74 = (char *)(v7 + 1);
    }
    if (v4 > v6)
    {
      unsigned int v88 = v6 + 1;
      do
      {
        char v90 = *v74++;
        char v89 = v90;
        int v92 = *v70++;
        int v91 = v92;
        int v93 = *v71++;
        unsigned __int8 v94 = v89 - ((v93 + v91) >> 1);
        int v95 = (char)v94;
        *v69++ = v94;
        unsigned int v96 = v94;
        LODWORD(v97) = 256 - v94;
        if (v95 >= 0) {
          uint64_t v97 = v96;
        }
        else {
          uint64_t v97 = v97;
        }
        v72 += v97;
        unint64_t v98 = v88++;
        BOOL v99 = v72 <= v8 && v4 > v98;
      }
      while (v99);
    }
    if (v72 < v8)
    {
      uint64_t v100 = *(void *)(a1 + 560);
      if (v100)
      {
        *(void *)(a1 + 552) = v100;
        *(void *)(a1 + 560) = v68;
      }
      unint64_t v8 = v72;
      unsigned int v14 = v68;
    }
  }
  if (v3 == 128)
  {
    unsigned int v14 = *(unsigned char **)(a1 + 552);
    unsigned char *v14 = 4;
    v101 = v14 + 1;
    uint64_t v102 = *(void *)(a1 + 536);
    unint64_t v103 = v6;
    v104 = (unsigned __int8 *)(v102 + 1);
    v105 = (unsigned __int8 *)(v7 + 1);
    if (v5)
    {
      uint64_t v106 = 0;
      do
      {
        v101[v106] = v105[v106] - v104[v106];
        ++v106;
      }
      while (v103 != v106);
      v107 = &v105[v106];
      v108 = &v104[v106];
      v101 += v106;
    }
    else
    {
      v108 = (unsigned __int8 *)(v102 + 1);
      v107 = v105;
    }
    BOOL v99 = v4 > v103;
    unint64_t v123 = v4 - v103;
    if (v99)
    {
      do
      {
        int v125 = *v108++;
        int v124 = v125;
        int v127 = *v104++;
        int v126 = v127;
        int v129 = *v105++;
        char v128 = v129;
        int v130 = v129 - v126;
        if (v124 - v126 >= 0) {
          unsigned int v131 = v124 - v126;
        }
        else {
          unsigned int v131 = v126 - v124;
        }
        if (v130 >= 0) {
          unsigned int v132 = v130;
        }
        else {
          unsigned int v132 = -v130;
        }
        int v133 = v130 + v124 - v126;
        if (v133 < 0) {
          int v133 = -v133;
        }
        if (v132 > v133) {
          LOBYTE(v124) = v126;
        }
        if (v131 <= v133 && v131 <= v132) {
          LOBYTE(v124) = v128;
        }
        char v135 = *v107++;
        *v101++ = v135 - v124;
        --v123;
      }
      while (v123);
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    v109 = *(unsigned char **)(a1 + 552);
    unsigned char *v109 = 4;
    v110 = v109 + 1;
    uint64_t v111 = *(void *)(a1 + 536);
    unint64_t v112 = v6;
    v113 = (unsigned __int8 *)(v111 + 1);
    v114 = (unsigned __int8 *)(v7 + 1);
    if (v5)
    {
      unint64_t v115 = 0;
      uint64_t v116 = 0;
      do
      {
        unsigned __int8 v117 = v114[v116] - v113[v116];
        int v118 = (char)v117;
        v110[v116] = v117;
        unsigned int v119 = v117;
        LODWORD(v120) = 256 - v117;
        if (v118 >= 0) {
          uint64_t v120 = v119;
        }
        else {
          uint64_t v120 = v120;
        }
        v115 += v120;
        ++v116;
      }
      while (v112 != v116);
      v121 = &v114[v116];
      v122 = &v113[v116];
      v110 += v116;
    }
    else
    {
      unint64_t v115 = 0;
      v122 = (unsigned __int8 *)(v111 + 1);
      v121 = v114;
    }
    if (v4 > v112)
    {
      unint64_t v136 = v112 + 1;
      do
      {
        int v138 = *v122++;
        int v137 = v138;
        int v140 = *v113++;
        int v139 = v140;
        int v142 = *v114++;
        char v141 = v142;
        int v143 = v142 - v139;
        if (v137 - v139 >= 0) {
          unsigned int v144 = v137 - v139;
        }
        else {
          unsigned int v144 = v139 - v137;
        }
        if (v143 >= 0) {
          unsigned int v145 = v143;
        }
        else {
          unsigned int v145 = -v143;
        }
        int v146 = v143 + v137 - v139;
        if (v146 < 0) {
          int v146 = -v146;
        }
        if (v145 > v146) {
          LOBYTE(v137) = v139;
        }
        if (v144 <= v146 && v144 <= v145) {
          LOBYTE(v137) = v141;
        }
        char v148 = *v121++;
        unsigned __int8 v149 = v148 - v137;
        int v150 = (char)v149;
        *v110++ = v149;
        unsigned int v151 = v149;
        LODWORD(v152) = 256 - v149;
        if (v150 >= 0) {
          uint64_t v152 = v151;
        }
        else {
          uint64_t v152 = v152;
        }
        v115 += v152;
      }
      while (v115 <= v8 && v136++ < v4);
    }
    if (v115 < v8)
    {
      uint64_t v154 = *(void *)(a1 + 560);
      if (v154)
      {
        *(void *)(a1 + 552) = v154;
        *(void *)(a1 + 560) = v109;
      }
      unsigned int v14 = v109;
    }
  }
LABEL_158:
  png_compress_IDAT(a1, (uint64_t)v14, *(void *)(a2 + 8) + 1, 0);
  uint64_t v155 = *(void *)(a1 + 536);
  if (v155)
  {
    *(void *)(a1 + 536) = *(void *)(a1 + 544);
    *(void *)(a1 + 544) = v155;
  }
  png_write_finish_row(a1);
  unsigned int v156 = *(_DWORD *)(a1 + 660) + 1;
  *(_DWORD *)(a1 + 660) = v156;
  if (*(_DWORD *)(a1 + 656) - 1 < v156)
  {
    png_write_flush(a1);
  }
}

uint64_t jinit_arith_decoder(uint64_t a1)
{
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 624) = result;
  *(void *)uint64_t result = start_pass_0;
  *(void *)(result + 16) = finish_pass;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(unsigned char *)(result + 336) = 113;
  if (*(_DWORD *)(a1 + 316))
  {
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, (uint64_t)*(int *)(a1 + 56) << 8);
    *(void *)(a1 + 192) = result;
    if (*(int *)(a1 + 56) >= 1)
    {
      int v3 = 0;
      *(void *)&long long v4 = -1;
      *((void *)&v4 + 1) = -1;
      do
      {
        *(_OWORD *)(result + 224) = v4;
        *(_OWORD *)(result + 240) = v4;
        *(_OWORD *)(result + 192) = v4;
        *(_OWORD *)(result + 208) = v4;
        *(_OWORD *)(result + 160) = v4;
        *(_OWORD *)(result + 176) = v4;
        *(_OWORD *)(result + 128) = v4;
        *(_OWORD *)(result + 144) = v4;
        *(_OWORD *)(result + 96) = v4;
        *(_OWORD *)(result + 112) = v4;
        *(_OWORD *)(result + 64) = v4;
        *(_OWORD *)(result + 80) = v4;
        *(_OWORD *)(result + 32) = v4;
        *(_OWORD *)(result + 48) = v4;
        *(_OWORD *)uint64_t result = v4;
        *(_OWORD *)(result + 16) = v4;
        result += 256;
        ++v3;
      }
      while (v3 < *(_DWORD *)(a1 + 56));
    }
  }
  return result;
}

uint64_t start_pass_0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 624);
  int v3 = *(_DWORD *)(result + 540);
  if (*(_DWORD *)(result + 316))
  {
    int v4 = *(_DWORD *)(result + 544);
    if (v3)
    {
      if (v4 < v3 || v4 > *(_DWORD *)(result + 568) || *(_DWORD *)(result + 448) != 1) {
        goto LABEL_18;
      }
    }
    else if (v4)
    {
      goto LABEL_18;
    }
    int v7 = *(_DWORD *)(result + 548);
    if (v7)
    {
      int v8 = v7 - 1;
      if (v8 != *(_DWORD *)(result + 552)) {
        goto LABEL_18;
      }
    }
    else
    {
      int v8 = *(_DWORD *)(result + 552);
    }
    if (v8 < 14)
    {
LABEL_19:
      LODWORD(v6) = *(_DWORD *)(v1 + 448);
      if ((int)v6 >= 1)
      {
        uint64_t v10 = 0;
        do
        {
          uint64_t v11 = *(int *)(*(void *)(v1 + 8 * v10 + 456) + 4);
          int v12 = (_DWORD *)(*(void *)(v1 + 192) + (v11 << 8));
          int v13 = *(_DWORD *)(v1 + 540);
          if (v13 && (*v12 & 0x80000000) != 0)
          {
            uint64_t v14 = *(void *)v1;
            *(_DWORD *)(v14 + 40) = 118;
            *(_DWORD *)(v14 + 44) = v11;
            *(_DWORD *)(*(void *)v1 + 48) = 0;
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 8))(v1, 0xFFFFFFFFLL);
            int v13 = *(_DWORD *)(v1 + 540);
          }
          if (v13 <= *(_DWORD *)(v1 + 544))
          {
            uint64_t v15 = v13;
            do
            {
              if (*(_DWORD *)(v1 + 548) != (v12[v15] & ~((int)v12[v15] >> 31)))
              {
                uint64_t v16 = *(void *)v1;
                *(_DWORD *)(v16 + 40) = 118;
                *(_DWORD *)(v16 + 44) = v11;
                *(_DWORD *)(*(void *)v1 + 48) = v15;
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 8))(v1, 0xFFFFFFFFLL);
              }
              v12[v15] = *(_DWORD *)(v1 + 552);
            }
            while (v15++ < *(int *)(v1 + 544));
          }
          ++v10;
          uint64_t v6 = *(int *)(v1 + 448);
        }
        while (v10 < v6);
      }
      int v18 = *(_DWORD *)(v1 + 540);
      if (*(_DWORD *)(v1 + 548))
      {
        if (v18) {
          char v19 = decode_mcu_AC_refine_0;
        }
        else {
          char v19 = decode_mcu_DC_refine_0;
        }
      }
      else if (v18)
      {
        char v19 = decode_mcu_AC_first_0;
      }
      else
      {
        char v19 = decode_mcu_DC_first_0;
      }
      *(void *)(v2 + 8) = v19;
      goto LABEL_38;
    }
LABEL_18:
    uint64_t v9 = *(void *)result;
    *(_DWORD *)(v9 + 40) = 17;
    *(_DWORD *)(v9 + 44) = v3;
    *(_DWORD *)(*(void *)result + 48) = *(_DWORD *)(result + 544);
    *(_DWORD *)(*(void *)result + 52) = *(_DWORD *)(result + 548);
    *(_DWORD *)(*(void *)result + 56) = *(_DWORD *)(result + 552);
    uint64_t result = (**(uint64_t (***)(uint64_t))result)(result);
    goto LABEL_19;
  }
  if (v3
    || *(_DWORD *)(result + 548)
    || *(_DWORD *)(result + 552)
    || (int v33 = *(_DWORD *)(result + 544), v33 <= 63) && v33 != *(_DWORD *)(result + 568))
  {
    uint64_t v5 = *(void *)result;
    *(_DWORD *)(v5 + 40) = 125;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(result, 0xFFFFFFFFLL);
  }
  *(void *)(v2 + 8) = decode_mcu_0;
  LODWORD(v6) = *(_DWORD *)(v1 + 448);
LABEL_38:
  if ((int)v6 >= 1)
  {
    for (uint64_t i = 0; i < *(int *)(v1 + 448); ++i)
    {
      uint64_t v21 = *(void *)(v1 + 8 * i + 456);
      if (!*(_DWORD *)(v1 + 316)) {
        goto LABEL_43;
      }
      if (*(_DWORD *)(v1 + 540)) {
        goto LABEL_51;
      }
      if (!*(_DWORD *)(v1 + 548))
      {
LABEL_43:
        unsigned int v22 = *(_DWORD *)(v21 + 20);
        if (v22 >= 0x10)
        {
          uint64_t v23 = *(void *)v1;
          *(_DWORD *)(v23 + 40) = 50;
          *(_DWORD *)(v23 + 44) = v22;
          (**(void (***)(uint64_t))v1)(v1);
        }
        uint64_t v24 = v2 + 8 * (int)v22;
        uint64_t v26 = *(void *)(v24 + 80);
        size_t v25 = (uint64_t *)(v24 + 80);
        uint64_t result = v26;
        if (!v26)
        {
          uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v1, 1, 64);
          *size_t v25 = result;
        }
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)uint64_t result = 0u;
        *(_OWORD *)(result + 16) = 0u;
        uint64_t v27 = v2 + 4 * i;
        *(_DWORD *)(v27 + 44) = 0;
        *(_DWORD *)(v27 + 60) = 0;
        if (*(_DWORD *)(v1 + 316))
        {
          if (*(_DWORD *)(v1 + 540)) {
            goto LABEL_51;
          }
        }
        else if (*(_DWORD *)(v1 + 568))
        {
LABEL_51:
          unsigned int v28 = *(_DWORD *)(v21 + 24);
          if (v28 >= 0x10)
          {
            uint64_t v29 = *(void *)v1;
            *(_DWORD *)(v29 + 40) = 50;
            *(_DWORD *)(v29 + 44) = v28;
            (**(void (***)(uint64_t))v1)(v1);
          }
          uint64_t v30 = v2 + 8 * (int)v28;
          uint64_t v32 = *(void *)(v30 + 208);
          char v31 = (uint64_t *)(v30 + 208);
          uint64_t result = v32;
          if (!v32)
          {
            uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v1, 1, 256);
            *char v31 = result;
          }
          *(_OWORD *)(result + 224) = 0u;
          *(_OWORD *)(result + 240) = 0u;
          *(_OWORD *)(result + 192) = 0u;
          *(_OWORD *)(result + 208) = 0u;
          *(_OWORD *)(result + 160) = 0u;
          *(_OWORD *)(result + 176) = 0u;
          *(_OWORD *)(result + 128) = 0u;
          *(_OWORD *)(result + 144) = 0u;
          *(_OWORD *)(result + 96) = 0u;
          *(_OWORD *)(result + 112) = 0u;
          *(_OWORD *)(result + 64) = 0u;
          *(_OWORD *)(result + 80) = 0u;
          *(_OWORD *)(result + 32) = 0u;
          *(_OWORD *)(result + 48) = 0u;
          *(_OWORD *)uint64_t result = 0u;
          *(_OWORD *)(result + 16) = 0u;
        }
      }
    }
  }
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 40) = -16;
  *(_DWORD *)(v2 + 76) = *(_DWORD *)(v1 + 372);
  return result;
}

uint64_t decode_mcu_DC_first_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    int v4 = *(_DWORD *)(v3 + 76);
    if (!v4)
    {
      process_restart_0((uint64_t *)a1);
      int v4 = *(_DWORD *)(v3 + 76);
    }
    *(_DWORD *)(v3 + 76) = v4 - 1;
  }
  if (*(_DWORD *)(v3 + 40) == -1 || *(int *)(a1 + 496) < 1) {
    return 1;
  }
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = *(_WORD **)(a2 + 8 * v5);
    uint64_t v7 = *(int *)(a1 + 4 * v5 + 500);
    uint64_t v8 = *(int *)(*(void *)(a1 + 8 * v7 + 456) + 20);
    uint64_t v9 = v3 + 8 * v8;
    uint64_t v12 = *(void *)(v9 + 80);
    uint64_t v11 = (void *)(v9 + 80);
    uint64_t v10 = v12;
    uint64_t v13 = v3 + 4 * v7;
    uint64_t v15 = *(int *)(v13 + 60);
    uint64_t v14 = (int *)(v13 + 60);
    uint64_t v16 = v10 + v15;
    if (arith_decode(a1, (unsigned char *)(v10 + v15))) {
      break;
    }
    int *v14 = 0;
    int v20 = *(_DWORD *)(v3 + 4 * v7 + 44);
LABEL_30:
    _WORD *v6 = v20 << *(_DWORD *)(a1 + 552);
    if (++v5 >= *(int *)(a1 + 496)) {
      return 1;
    }
  }
  unsigned int v17 = arith_decode(a1, (unsigned char *)(v16 + 1));
  int v18 = (unsigned char *)(v16 + v17 + 2);
  if (!arith_decode(a1, v18))
  {
    int v19 = 0;
    goto LABEL_16;
  }
  int v18 = (unsigned char *)(*v11 + 20);
  int v19 = 1;
  if (!arith_decode(a1, v18))
  {
LABEL_16:
    if (v19 >= (int)((unint64_t)(1 << *(unsigned char *)(a1 + v8 + 324)) >> 1))
    {
      int v21 = 4 * v17 + 4;
      if (v19 > (int)((unint64_t)(1 << *(unsigned char *)(a1 + v8 + 340)) >> 1)) {
        int v21 = 4 * v17 + 12;
      }
    }
    else
    {
      int v21 = 0;
    }
    int *v14 = v21;
    if (v19 >= 2)
    {
      uint64_t v23 = v18 + 14;
      int v22 = v19;
      do
      {
        if (arith_decode(a1, v23)) {
          int v24 = v19 >> 1;
        }
        else {
          int v24 = 0;
        }
        v22 |= v24;
        BOOL v25 = v19 > 3;
        v19 >>= 1;
      }
      while (v25);
    }
    else
    {
      int v22 = v19;
    }
    int v26 = ~v22;
    if (!v17) {
      int v26 = v22 + 1;
    }
    uint64_t v27 = v3 + 4 * v7;
    int v20 = *(_DWORD *)(v27 + 44) + v26;
    *(_DWORD *)(v27 + 44) = v20;
    goto LABEL_30;
  }
  while (1)
  {
    v19 *= 2;
    if (v19 == 0x8000) {
      break;
    }
    if (!arith_decode(a1, ++v18)) {
      goto LABEL_16;
    }
  }
  uint64_t v28 = *(void *)a1;
  *(_DWORD *)(v28 + 40) = 117;
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(a1, 0xFFFFFFFFLL);
  *(_DWORD *)(v3 + 40) = -1;
  return 1;
}

uint64_t decode_mcu_AC_first_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    int v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      process_restart_0((uint64_t *)a1);
      int v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(_DWORD *)(v4 + 40) != -1)
  {
    uint64_t v6 = *(void *)(a1 + 560);
    uint64_t v7 = *(int *)(*(void *)(a1 + 456) + 24);
    int v8 = *(_DWORD *)(a1 + 540) - 1;
    uint64_t v9 = (uint64_t *)(v4 + 8 * v7 + 208);
    uint64_t v28 = *a2;
    int v26 = (unsigned __int8 *)(a1 + v7 + 356);
    uint64_t v27 = v6;
    do
    {
      uint64_t v10 = *v9;
      if (arith_decode(a1, (unsigned char *)(*v9 + 3 * v8))) {
        break;
      }
      uint64_t v11 = (unsigned char *)(v10 + 3 * v8 + 2);
      uint64_t v12 = (int *)(v6 + 4 * (v8 + 1));
      while (1)
      {
        int v13 = v8 + 1;
        if (arith_decode(a1, v11 - 1)) {
          break;
        }
        v11 += 3;
        ++v12;
        ++v8;
        if (v13 >= *(_DWORD *)(a1 + 544)) {
          goto LABEL_32;
        }
      }
      int v14 = arith_decode(a1, (unsigned char *)(v4 + 336));
      if (arith_decode(a1, v11))
      {
        if (arith_decode(a1, v11))
        {
          uint64_t v15 = *v9;
          uint64_t v16 = 217;
          if (v8 < *v26) {
            uint64_t v16 = 189;
          }
          unsigned int v17 = (unsigned char *)(v15 + v16 + 14);
          int v18 = 2;
          if (arith_decode(a1, (unsigned char *)(v15 + v16)))
          {
            while (1)
            {
              v18 *= 2;
              if (v18 == 0x8000) {
                break;
              }
              int v19 = arith_decode(a1, v17 - 13);
              ++v17;
              if (!v19)
              {
                if (!v18) {
                  goto LABEL_28;
                }
                goto LABEL_20;
              }
            }
LABEL_32:
            uint64_t v24 = *(void *)a1;
            *(_DWORD *)(v24 + 40) = 117;
            (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, 0xFFFFFFFFLL);
            *(_DWORD *)(v4 + 40) = -1;
            return 1;
          }
LABEL_20:
          int v20 = v18;
          do
          {
            if (arith_decode(a1, v17)) {
              int v21 = v20 >> 1;
            }
            else {
              int v21 = 0;
            }
            v18 |= v21;
            BOOL v22 = v20 > 3;
            v20 >>= 1;
          }
          while (v22);
        }
        else
        {
          int v18 = 1;
        }
      }
      else
      {
        int v18 = 0;
      }
LABEL_28:
      int v23 = ~v18;
      if (!v14) {
        int v23 = v18 + 1;
      }
      uint64_t v6 = v27;
      *(_WORD *)(v28 + 2 * *v12) = v23 << *(_DWORD *)(a1 + 552);
      int v8 = v13;
    }
    while (v13 < *(_DWORD *)(a1 + 544));
  }
  return 1;
}

uint64_t decode_mcu_DC_refine_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    int v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      process_restart_0((uint64_t *)a1);
      int v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(int *)(a1 + 496) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (unsigned char *)(v4 + 336);
    int v8 = 1 << *(_DWORD *)(a1 + 552);
    do
    {
      if (arith_decode(a1, v7)) {
        **(_WORD **)(a2 + 8 * v6) |= v8;
      }
      ++v6;
    }
    while (v6 < *(int *)(a1 + 496));
  }
  return 1;
}

uint64_t decode_mcu_AC_refine_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    int v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      process_restart_0((uint64_t *)a1);
      int v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(_DWORD *)(v4 + 40) != -1)
  {
    uint64_t v6 = *(void *)(a1 + 560);
    uint64_t v7 = *a2;
    int v24 = 1 << *(_DWORD *)(a1 + 552);
    uint64_t v8 = *(int *)(a1 + 544);
    do
    {
      if (*(_WORD *)(v7 + 2 * *(int *)(v6 + 4 * v8))) {
        break;
      }
      --v8;
    }
    while (v8);
    int v9 = *(_DWORD *)(a1 + 540) - 1;
    uint64_t v10 = (uint64_t *)(v4 + 8 * *(int *)(*(void *)(a1 + 456) + 24) + 208);
    uint64_t v11 = v6 + 4;
    do
    {
      uint64_t v12 = *v10;
      int v13 = 3 * v9;
      if (v9 >= (int)v8 && arith_decode(a1, (unsigned char *)(v12 + v13))) {
        break;
      }
      uint64_t v14 = v13;
      uint64_t v15 = v9++;
      for (uint64_t i = (unsigned char *)(v12 + v14 + 2); ; i += 3)
      {
        uint64_t v17 = *(int *)(v11 + 4 * v15);
        if (*(_WORD *)(v7 + 2 * v17)) {
          break;
        }
        if (arith_decode(a1, i - 1))
        {
          int v18 = (__int16 *)(v7 + 2 * v17);
          int v21 = arith_decode(a1, (unsigned char *)(v4 + 336));
          __int16 v20 = v24;
          if (v21) {
            __int16 v20 = -(__int16)v24;
          }
          goto LABEL_23;
        }
        ++v15;
        ++v9;
        if (v15 >= *(int *)(a1 + 544))
        {
          uint64_t v22 = *(void *)a1;
          *(_DWORD *)(v22 + 40) = 117;
          (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, 0xFFFFFFFFLL);
          *(_DWORD *)(v4 + 40) = -1;
          return 1;
        }
      }
      if (!arith_decode(a1, i)) {
        continue;
      }
      int v18 = (__int16 *)(v7 + 2 * v17);
      int v19 = *v18;
      __int16 v20 = v19 < 0 ? v19 - v24 : v19 + v24;
LABEL_23:
      *int v18 = v20;
    }
    while (*(_DWORD *)(a1 + 544) > v9);
  }
  return 1;
}

uint64_t decode_mcu_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    int v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      process_restart_0((uint64_t *)a1);
      int v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(_DWORD *)(v4 + 40) == -1 || *(int *)(a1 + 496) < 1) {
    return 1;
  }
  uint64_t v6 = 0;
  uint64_t v49 = *(void *)(a1 + 560);
  uint64_t v48 = a2;
  while (1)
  {
    unint64_t v50 = *(_WORD **)(a2 + 8 * v6);
    uint64_t v7 = *(int *)(a1 + 4 * v6 + 500);
    uint64_t v8 = *(void *)(a1 + 8 * v7 + 456);
    uint64_t v9 = *(int *)(v8 + 20);
    uint64_t v10 = v4 + 8 * v9;
    uint64_t v13 = *(void *)(v10 + 80);
    uint64_t v12 = (void *)(v10 + 80);
    uint64_t v11 = v13;
    uint64_t v14 = v4 + 4 * v7;
    uint64_t v16 = *(int *)(v14 + 60);
    uint64_t v15 = (int *)(v14 + 60);
    uint64_t v17 = v11 + v16;
    if (arith_decode(a1, (unsigned char *)(v11 + v16))) {
      break;
    }
    *uint64_t v15 = 0;
    int v21 = *(_DWORD *)(v4 + 4 * v7 + 44);
LABEL_30:
    *unint64_t v50 = v21;
    if (*(_DWORD *)(a1 + 568))
    {
      int v29 = 0;
      uint64_t v30 = *(int *)(v8 + 24);
      char v31 = (uint64_t *)(v4 + 8 * v30 + 208);
      unint64_t v46 = (unsigned __int8 *)(a1 + v30 + 356);
      do
      {
        uint64_t v32 = *v31;
        if (arith_decode(a1, (unsigned char *)(*v31 + 3 * v29))) {
          break;
        }
        int v33 = (unsigned char *)(v32 + 3 * v29 + 2);
        char v34 = (int *)(v49 + 4 * (v29 + 1));
        while (1)
        {
          int v35 = v29 + 1;
          if (arith_decode(a1, v33 - 1)) {
            break;
          }
          v33 += 3;
          ++v34;
          ++v29;
          if (v35 >= *(_DWORD *)(a1 + 568)) {
            goto LABEL_58;
          }
        }
        int v47 = arith_decode(a1, (unsigned char *)(v4 + 336));
        if (arith_decode(a1, v33))
        {
          if (arith_decode(a1, v33))
          {
            uint64_t v36 = *v31;
            uint64_t v37 = 217;
            if (v29 < *v46) {
              uint64_t v37 = 189;
            }
            int v38 = (unsigned char *)(v36 + v37 + 14);
            int v39 = 2;
            if (arith_decode(a1, (unsigned char *)(v36 + v37)))
            {
              while (1)
              {
                v39 *= 2;
                if (v39 == 0x8000) {
                  goto LABEL_58;
                }
                int v40 = arith_decode(a1, v38 - 13);
                ++v38;
                if (!v40)
                {
                  if (!v39) {
                    goto LABEL_53;
                  }
                  break;
                }
              }
            }
            int v41 = v39;
            do
            {
              if (arith_decode(a1, v38)) {
                int v42 = v41 >> 1;
              }
              else {
                LOWORD(v42) = 0;
              }
              LOWORD(v39) = v42 | v39;
              BOOL v26 = v41 > 3;
              v41 >>= 1;
            }
            while (v26);
          }
          else
          {
            LOWORD(v39) = 1;
          }
        }
        else
        {
          LOWORD(v39) = 0;
        }
LABEL_53:
        __int16 v43 = ~(_WORD)v39;
        if (!v47) {
          __int16 v43 = v39 + 1;
        }
        v50[*v34] = v43;
        int v29 = v35;
      }
      while (v35 < *(_DWORD *)(a1 + 568));
    }
    ++v6;
    a2 = v48;
    if (v6 >= *(int *)(a1 + 496)) {
      return 1;
    }
  }
  unsigned int v18 = arith_decode(a1, (unsigned char *)(v17 + 1));
  int v19 = (unsigned char *)(v17 + v18 + 2);
  if (!arith_decode(a1, v19))
  {
    int v20 = 0;
    goto LABEL_16;
  }
  int v19 = (unsigned char *)(*v12 + 20);
  int v20 = 1;
  if (!arith_decode(a1, v19))
  {
LABEL_16:
    if (v20 >= (int)((unint64_t)(1 << *(unsigned char *)(a1 + v9 + 324)) >> 1))
    {
      int v22 = 4 * v18 + 4;
      if (v20 > (int)((unint64_t)(1 << *(unsigned char *)(a1 + v9 + 340)) >> 1)) {
        int v22 = 4 * v18 + 12;
      }
    }
    else
    {
      int v22 = 0;
    }
    *uint64_t v15 = v22;
    if (v20 >= 2)
    {
      int v24 = v19 + 14;
      int v23 = v20;
      do
      {
        if (arith_decode(a1, v24)) {
          int v25 = v20 >> 1;
        }
        else {
          int v25 = 0;
        }
        v23 |= v25;
        BOOL v26 = v20 > 3;
        v20 >>= 1;
      }
      while (v26);
    }
    else
    {
      int v23 = v20;
    }
    int v27 = ~v23;
    if (!v18) {
      int v27 = v23 + 1;
    }
    uint64_t v28 = v4 + 4 * v7;
    int v21 = *(_DWORD *)(v28 + 44) + v27;
    *(_DWORD *)(v28 + 44) = v21;
    goto LABEL_30;
  }
  while (1)
  {
    v20 *= 2;
    if (v20 == 0x8000) {
      break;
    }
    if (!arith_decode(a1, ++v19)) {
      goto LABEL_16;
    }
  }
LABEL_58:
  uint64_t v44 = *(void *)a1;
  *(_DWORD *)(v44 + 40) = 117;
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(a1, 0xFFFFFFFFLL);
  *(_DWORD *)(v4 + 40) = -1;
  return 1;
}

uint64_t process_restart_0(uint64_t *a1)
{
  uint64_t v2 = a1[78];
  uint64_t result = (*(uint64_t (**)(void))(a1[77] + 16))();
  if (!result)
  {
    uint64_t v4 = *a1;
    *(_DWORD *)(v4 + 40) = 25;
    uint64_t result = (*(uint64_t (**)(uint64_t *))v4)(a1);
  }
  if (*((int *)a1 + 112) >= 1)
  {
    for (uint64_t i = 0; i < *((int *)a1 + 112); ++i)
    {
      uint64_t v6 = a1[i + 57];
      if (!*((_DWORD *)a1 + 79)) {
        goto LABEL_8;
      }
      if (*((_DWORD *)a1 + 135)) {
        goto LABEL_10;
      }
      if (!*((_DWORD *)a1 + 137))
      {
LABEL_8:
        uint64_t v7 = *(_OWORD **)(v2 + 8 * *(int *)(v6 + 20) + 80);
        v7[2] = 0uLL;
        v7[3] = 0uLL;
        _OWORD *v7 = 0uLL;
        v7[1] = 0uLL;
        uint64_t v8 = v2 + 4 * i;
        *(_DWORD *)(v8 + 44) = 0;
        *(_DWORD *)(v8 + 60) = 0;
        if (!*((_DWORD *)a1 + 79))
        {
          if (!*((_DWORD *)a1 + 142)) {
            continue;
          }
LABEL_10:
          uint64_t v9 = *(_OWORD **)(v2 + 8 * *(int *)(v6 + 24) + 208);
          v9[14] = 0uLL;
          v9[15] = 0uLL;
          v9[12] = 0uLL;
          v9[13] = 0uLL;
          v9[10] = 0uLL;
          v9[11] = 0uLL;
          v9[8] = 0uLL;
          Bytef v9[9] = 0uLL;
          v9[6] = 0uLL;
          v9[7] = 0uLL;
          Bytef v9[4] = 0uLL;
          v9[5] = 0uLL;
          v9[2] = 0uLL;
          v9[3] = 0uLL;
          _OWORD *v9 = 0uLL;
          v9[1] = 0uLL;
          continue;
        }
        if (*((_DWORD *)a1 + 135)) {
          goto LABEL_10;
        }
      }
    }
  }
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 40) = -16;
  *(_DWORD *)(v2 + 76) = *((_DWORD *)a1 + 93);
  return result;
}

uint64_t arith_decode(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = *(void *)(a1 + 624);
  uint64_t v4 = *(void *)(v3 + 32);
  if (v4 >= 0x8000)
  {
    int v6 = *(_DWORD *)(v3 + 40);
  }
  else
  {
    int v6 = *(_DWORD *)(v3 + 40);
    do
    {
      int v7 = v6--;
      *(_DWORD *)(v3 + 40) = v6;
      if (v7 <= 0)
      {
        if (*(_DWORD *)(a1 + 572))
        {
          unsigned int byte = 0;
        }
        else
        {
          unsigned int byte = get_byte((uint64_t *)a1);
          if (byte == 255)
          {
            do
              int v9 = get_byte((uint64_t *)a1);
            while (v9 == 255);
            if ((_BYTE)v9)
            {
              int v10 = v9;
              unsigned int byte = 0;
              *(_DWORD *)(a1 + 572) = v10;
            }
            else
            {
              unsigned int byte = 255;
            }
          }
          int v6 = *(_DWORD *)(v3 + 40);
        }
        *(void *)(v3 + 24) = byte | (*(void *)(v3 + 24) << 8);
        *(_DWORD *)(v3 + 40) = v6 + 8;
        int v13 = v6 + 9;
        BOOL v11 = v6 == -9;
        BOOL v12 = v6 <= -9;
        v6 += 8;
        if (v12)
        {
          *(_DWORD *)(v3 + 40) = v13;
          int v6 = v13;
          if (v11)
          {
            int v6 = 0;
            *(void *)(v3 + 32) = 0x8000;
          }
        }
      }
      uint64_t v4 = 2 * *(void *)(v3 + 32);
      *(void *)(v3 + 32) = v4;
    }
    while (v4 < 0x8000);
  }
  unsigned int v14 = *a2;
  uint64_t v15 = jpeg_aritab[v14 & 0x7F];
  uint64_t v16 = v15 >> 16;
  uint64_t v17 = v4 - (v15 >> 16);
  *(void *)(v3 + 32) = v17;
  uint64_t v18 = v17 << v6;
  uint64_t v19 = *(void *)(v3 + 24);
  BOOL v20 = __OFSUB__(v19, v18);
  uint64_t v21 = v19 - v18;
  if (v21 < 0 == v20)
  {
    *(void *)(v3 + 24) = v21;
    *(void *)(v3 + 32) = v16;
    char v22 = v14 & 0x80;
    if (v17 >= v16) {
      goto LABEL_26;
    }
LABEL_24:
    *a2 = v22 ^ BYTE1(v15);
    return v14 >> 7;
  }
  if (v17 < 0x8000)
  {
    char v22 = v14 & 0x80;
    if (v17 < v16)
    {
LABEL_26:
      *a2 = v22 ^ v15;
      v14 ^= 0x80u;
      return v14 >> 7;
    }
    goto LABEL_24;
  }
  return v14 >> 7;
}

uint64_t get_byte(uint64_t *a1)
{
  uint64_t v1 = (unsigned __int8 **)a1[5];
  if (!v1[1] && !((unsigned int (*)(void))v1[3])())
  {
    uint64_t v3 = *a1;
    *(_DWORD *)(v3 + 40) = 25;
    (*(void (**)(uint64_t *))v3)(a1);
  }
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)(v1[1] - 1);
  ++*v1;
  v1[1] = (unsigned __int8 *)v5;
  return *v4;
}

uint64_t LZ4_compressBound(unsigned int a1)
{
  if (a1 <= 0x7E000000) {
    return a1 + a1 / 0xFF + 16;
  }
  else {
    return 0;
  }
}

uint64_t LZ4_compress()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  int v2 = v1;
  uint64_t v4 = v3;
  unint64_t v5 = v0;
  uint64_t v113 = *MEMORY[0x263EF8340];
  bzero(v112, 0x4000uLL);
  if (v2 > 65546)
  {
    if (v2 <= 0x7E000000)
    {
      int v109 = v2;
      unint64_t v54 = v5 + v2;
      int v55 = v4;
      unint64_t v56 = v54 - 12;
      uint64_t v57 = (_DWORD *)(v5 + 2);
      unint64_t v103 = v54 - 8;
      unint64_t v105 = v54 - 5;
      unint64_t v107 = v54;
      unint64_t v101 = v54 - 6;
      int v111 = (int)v55;
      unint64_t v7 = v5;
LABEL_65:
      unint64_t v58 = v7 + 1;
      int v59 = *(_DWORD *)(v7 + 1);
      unsigned int v60 = 68;
      while (1)
      {
        int v61 = v57;
        unsigned int v62 = (-1640531535 * v59) >> 20;
        int v59 = *v57;
        uint64_t v63 = *(unsigned int *)&v112[2 * v62];
        *(_DWORD *)&v112[2 * v62] = v58 - v5;
        if (v5 + v63 + 0xFFFF >= v58 && *(_DWORD *)(v5 + v63) == *(_DWORD *)v58) {
          break;
        }
        uint64_t v64 = v60++ >> 6;
        uint64_t v57 = (_DWORD *)((char *)v57 + v64);
        unint64_t v58 = (unint64_t)v61;
        if ((unint64_t)v57 > v56) {
          goto LABEL_115;
        }
      }
      uint64_t v65 = 0;
      int v66 = v58 - v7;
      char v67 = v58 - v7 - 14;
      uint64_t v68 = (v58 << 32) - (v7 << 32);
      int v69 = v58 - v7 - 15;
      do
      {
        int v70 = v69;
        uint64_t v71 = v65;
        uint64_t v72 = v68;
        unint64_t v73 = v58 + v65;
        unint64_t v74 = v5 + v63 + v65;
        if (v73 <= v7 || v74 <= v5) {
          break;
        }
        int v76 = *(unsigned __int8 *)(v74 - 1);
        --v69;
        uint64_t v65 = v71 - 1;
        v68 -= 0x100000000;
      }
      while (*(unsigned __int8 *)(v73 - 1) == v76);
      unsigned int v77 = v55 + 1;
      if (v66 + (int)v71 < 15)
      {
        *int v55 = 16 * (v73 - v7);
      }
      else
      {
        *int v55 = -16;
        if ((v66 + v71) <= 0x10D)
        {
          char v80 = v71 + v58 - v7 - 15;
        }
        else
        {
          if (v70 >= 509) {
            int v78 = 509;
          }
          else {
            int v78 = v70;
          }
          unsigned int v79 = v66 - v78 + v71 + 239;
          char v99 = v67;
          memset(v77, 255, v79 / 0xFF + 1);
          unsigned int v77 = &v55[v79 / 0xFFuLL + 2];
          char v80 = v79 / 0xFF + v99 + v71;
        }
        *(unsigned char *)unsigned int v77 = v80;
        unsigned int v77 = (void *)((char *)v77 + 1);
      }
      uint64_t v81 = (_DWORD *)(v5 + v63 + v71);
      unsigned int v82 = (_WORD *)((char *)v77 + (v72 >> 32));
      do
      {
        uint64_t v83 = *(void *)v7;
        v7 += 8;
        *v77++ = v83;
      }
      while (v77 < (void *)v82);
      while (1)
      {
        char v84 = v55;
        _WORD *v82 = v73 - (_WORD)v81;
        int v55 = v82 + 1;
        int v85 = v73 + 4;
        int v86 = v81 + 1;
        unint64_t v7 = v73 + 4;
        if (v73 + 4 >= v56)
        {
LABEL_93:
          if (v7 < v103 && *v86 == *(_DWORD *)v7)
          {
            v7 += 4;
            ++v86;
          }
          if (v7 < v101 && *(unsigned __int16 *)v86 == *(unsigned __int16 *)v7)
          {
            v7 += 2;
            int v86 = (_DWORD *)((char *)v86 + 2);
          }
          if (v7 < v105 && *(unsigned __int8 *)v86 == *(unsigned __int8 *)v7) {
            ++v7;
          }
        }
        else
        {
          while (1)
          {
            unint64_t v87 = *(void *)v7 ^ *(void *)v86;
            if (v87) {
              break;
            }
            v7 += 8;
            v86 += 2;
            if (v7 >= v56) {
              goto LABEL_93;
            }
          }
          v7 += __clz(__rbit64(v87)) >> 3;
        }
        char v88 = v7 - v85;
        BOOL v42 = __OFSUB__(v7 - v85, 15);
        unsigned int v89 = v7 - v85 - 15;
        if (((v89 & 0x80000000) != 0) != v42)
        {
          *v84 += v88;
        }
        else
        {
          *v84 += 15;
          if (v89 >= 0x1FE)
          {
            unsigned int v90 = v7 - v73 - 529;
            uint64_t v91 = v90 / 0x1FE;
            memset(v82 + 1, 255, v91 * 2 + 2);
            unsigned int v89 = v90 % 0x1FE;
            int v55 = &v82[v91 + 2];
          }
          if (v89 >= 0xFF)
          {
            *v55++ = -1;
            LOBYTE(v89) = v89 + 1;
          }
          *v55++ = v89;
        }
        if (v7 > v56) {
          break;
        }
        *(_DWORD *)&v112[2 * ((-1640531535 * *(_DWORD *)(v7 - 2)) >> 20)] = v7 - 2 - v5;
        unsigned int v92 = (-1640531535 * *(_DWORD *)v7) >> 20;
        uint64_t v81 = (_DWORD *)(v5 + *(unsigned int *)&v112[2 * v92]);
        *(_DWORD *)&v112[2 * v92] = v7 - v5;
        if ((unint64_t)v81 + 0xFFFF < v7 || *v81 != *(_DWORD *)v7)
        {
          uint64_t v57 = (_DWORD *)(v7 + 2);
          if (v7 + 2 <= v56) {
            goto LABEL_65;
          }
          break;
        }
        *int v55 = 0;
        unsigned int v82 = v55 + 1;
        unint64_t v73 = v7;
      }
LABEL_115:
      size_t v48 = v107 - v7;
      int v93 = v107 - v7 - 15;
      LODWORD(v4) = v111;
      if ((int)v107 - (int)v7 < 15)
      {
        *int v55 = 16 * v48;
      }
      else
      {
        *int v55 = -16;
        unsigned __int8 v94 = v55 + 1;
        if (v48 >= 0x10E)
        {
          int v95 = v5 + v109;
          if (v93 >= 509) {
            int v93 = 509;
          }
          unint64_t v96 = (v95 - (v93 + v7) + 239) / 0xFFuLL;
          memset(v94, 255, v96 + 1);
          LOBYTE(v93) = v95 - v7 + v96 - 14;
          unsigned __int8 v94 = &v55[v96 + 2];
        }
        *unsigned __int8 v94 = v93;
        int v55 = v94;
      }
      uint64_t v97 = v55 + 1;
      goto LABEL_125;
    }
    return 0;
  }
  if (v2 > 0x7E000000) {
    return 0;
  }
  unint64_t v6 = v5 + v2;
  unint64_t v7 = v5;
  uint64_t v8 = v4;
  if (v2 >= 0xE)
  {
    int v108 = v2;
    uint64_t v8 = v4;
    unint64_t v9 = v6 - 12;
    int v10 = (_DWORD *)(v5 + 2);
    unint64_t v102 = v6 - 8;
    unint64_t v104 = v6 - 5;
    unint64_t v106 = v5 + v2;
    unint64_t v100 = v6 - 6;
    int v110 = (int)v8;
    unint64_t v7 = v5;
LABEL_5:
    unint64_t v11 = v7 + 1;
    int v12 = *(_DWORD *)(v7 + 1);
    unsigned int v13 = 68;
    while (1)
    {
      unsigned int v14 = v10;
      unsigned int v15 = (-1640531535 * v12) >> 19;
      int v12 = *v10;
      uint64_t v16 = (unsigned __int16)v112[v15];
      v112[v15] = v11 - v5;
      if (v5 + v16 + 0xFFFF >= v11 && *(_DWORD *)(v5 + v16) == *(_DWORD *)v11) {
        break;
      }
      uint64_t v17 = v13++ >> 6;
      int v10 = (_DWORD *)((char *)v10 + v17);
      unint64_t v11 = (unint64_t)v14;
      if ((unint64_t)v10 > v9) {
        goto LABEL_55;
      }
    }
    uint64_t v18 = 0;
    int v19 = v11 - v7;
    char v20 = v11 - v7 - 14;
    uint64_t v21 = (v11 << 32) - (v7 << 32);
    int v22 = v11 - v7 - 15;
    do
    {
      int v23 = v22;
      uint64_t v24 = v18;
      uint64_t v25 = v21;
      unint64_t v26 = v11 + v18;
      unint64_t v27 = v5 + v16 + v18;
      if (v26 <= v7 || v27 <= v5) {
        break;
      }
      int v29 = *(unsigned __int8 *)(v27 - 1);
      --v22;
      uint64_t v18 = v24 - 1;
      v21 -= 0x100000000;
    }
    while (*(unsigned __int8 *)(v26 - 1) == v29);
    uint64_t v30 = v8 + 1;
    if (v19 + (int)v24 < 15)
    {
      *uint64_t v8 = 16 * (v26 - v7);
    }
    else
    {
      *uint64_t v8 = -16;
      if ((v19 + v24) <= 0x10D)
      {
        char v33 = v24 + v11 - v7 - 15;
      }
      else
      {
        if (v23 >= 509) {
          int v31 = 509;
        }
        else {
          int v31 = v23;
        }
        unsigned int v32 = v19 - v31 + v24 + 239;
        char v98 = v20;
        memset(v30, 255, v32 / 0xFF + 1);
        uint64_t v30 = &v8[v32 / 0xFFuLL + 2];
        char v33 = v32 / 0xFF + v98 + v24;
      }
      *(unsigned char *)uint64_t v30 = v33;
      uint64_t v30 = (void *)((char *)v30 + 1);
    }
    char v34 = (_DWORD *)(v5 + v16 + v24);
    int v35 = (_WORD *)((char *)v30 + (v25 >> 32));
    do
    {
      uint64_t v36 = *(void *)v7;
      v7 += 8;
      *v30++ = v36;
    }
    while (v30 < (void *)v35);
    while (1)
    {
      uint64_t v37 = v8;
      *int v35 = v26 - (_WORD)v34;
      uint64_t v8 = v35 + 1;
      int v38 = v26 + 4;
      int v39 = v34 + 1;
      unint64_t v7 = v26 + 4;
      if (v26 + 4 >= v9)
      {
LABEL_33:
        if (v7 < v102 && *v39 == *(_DWORD *)v7)
        {
          v7 += 4;
          ++v39;
        }
        if (v7 < v100 && *(unsigned __int16 *)v39 == *(unsigned __int16 *)v7)
        {
          v7 += 2;
          int v39 = (_DWORD *)((char *)v39 + 2);
        }
        if (v7 < v104 && *(unsigned __int8 *)v39 == *(unsigned __int8 *)v7) {
          ++v7;
        }
      }
      else
      {
        while (1)
        {
          unint64_t v40 = *(void *)v7 ^ *(void *)v39;
          if (v40) {
            break;
          }
          v7 += 8;
          v39 += 2;
          if (v7 >= v9) {
            goto LABEL_33;
          }
        }
        v7 += __clz(__rbit64(v40)) >> 3;
      }
      char v41 = v7 - v38;
      BOOL v42 = __OFSUB__(v7 - v38, 15);
      unsigned int v43 = v7 - v38 - 15;
      if (((v43 & 0x80000000) != 0) != v42)
      {
        *v37 += v41;
      }
      else
      {
        *v37 += 15;
        if (v43 >= 0x1FE)
        {
          unsigned int v44 = v7 - v26 - 529;
          uint64_t v45 = v44 / 0x1FE;
          memset(v35 + 1, 255, v45 * 2 + 2);
          unsigned int v43 = v44 % 0x1FE;
          uint64_t v8 = &v35[v45 + 2];
        }
        if (v43 >= 0xFF)
        {
          *v8++ = -1;
          LOBYTE(v43) = v43 + 1;
        }
        *v8++ = v43;
      }
      if (v7 > v9) {
        break;
      }
      v112[(-1640531535 * *(_DWORD *)(v7 - 2)) >> 19] = v7 - 2 - v5;
      int v46 = *(_DWORD *)v7;
      unsigned int v47 = (-1640531535 * *(_DWORD *)v7) >> 19;
      char v34 = (_DWORD *)(v5 + (unsigned __int16)v112[v47]);
      v112[v47] = v7 - v5;
      if ((unint64_t)v34 + 0xFFFF < v7 || *v34 != v46)
      {
        int v10 = (_DWORD *)(v7 + 2);
        if (v7 + 2 <= v9) {
          goto LABEL_5;
        }
        break;
      }
      *uint64_t v8 = 0;
      int v35 = v8 + 1;
      unint64_t v26 = v7;
    }
LABEL_55:
    LODWORD(v4) = v110;
    int v2 = v108;
    unint64_t v6 = v106;
  }
  size_t v48 = v6 - v7;
  BOOL v42 = __OFSUB__(v6 - v7, 15);
  int v49 = v6 - v7 - 15;
  if (v49 < 0 != v42)
  {
    *uint64_t v8 = 16 * v48;
  }
  else
  {
    *uint64_t v8 = -16;
    unint64_t v50 = v8 + 1;
    if (v48 >= 0x10E)
    {
      int v51 = v5 + v2;
      if (v49 >= 509) {
        int v49 = 509;
      }
      unint64_t v52 = (v51 - (v49 + v7) + 239) / 0xFFuLL;
      memset(v50, 255, v52 + 1);
      LOBYTE(v49) = v51 - v7 + v52 - 14;
      unint64_t v50 = &v8[v52 + 2];
    }
    *unint64_t v50 = v49;
    uint64_t v8 = v50;
  }
  uint64_t v97 = v8 + 1;
LABEL_125:
  memcpy(v97, (const void *)v7, v48);
  return (v97 + v48 - v4);
}

uint64_t LZ4_decompress_safe(unsigned __int8 *a1, char *__dst, int a3, int a4)
{
  if (a4)
  {
    unint64_t v5 = &a1[a3];
    unint64_t v6 = &__dst[a4];
    unint64_t v7 = v6 - 12;
    uint64_t v8 = __dst;
    unint64_t v9 = a1;
    while (1)
    {
      unsigned int v11 = *v9++;
      char v10 = v11;
      size_t v12 = (unint64_t)v11 >> 4;
      if (v12 == 15)
      {
        size_t v12 = 15;
        if (v9 < v5)
        {
          do
          {
            unsigned int v14 = *v9++;
            unsigned int v13 = v14;
            v12 += v14;
          }
          while (v9 < v5 && v13 == 255);
        }
      }
      unsigned int v15 = &v8[v12];
      unint64_t v16 = (unint64_t)&v9[v12];
      if (&v8[v12] > v7 || v16 > (unint64_t)(v5 - 8)) {
        break;
      }
      do
      {
        uint64_t v18 = *(void *)v9;
        v9 += 8;
        *(void *)uint64_t v8 = v18;
        v8 += 8;
        v12 -= 8;
      }
      while (v8 < v15);
      int v19 = &v9[v12];
      int v20 = *(unsigned __int16 *)v19;
      unint64_t v9 = v19 + 2;
      uint64_t v21 = &v15[-v20];
      if (v21 < __dst) {
        return (~v9 + a1);
      }
      uint64_t v22 = v10 & 0xF;
      if ((v10 & 0xF) == 0xF)
      {
        uint64_t v22 = 15;
        do
        {
          if (v9 >= v5 - 6) {
            break;
          }
          unsigned int v23 = *v9++;
          v22 += v23;
        }
        while (v23 == 255);
      }
      int64_t v24 = v15 - v21;
      if (v15 - v21 <= 7)
      {
        uint64_t v29 = LZ4_decompress_generic_dec64table[v24];
        *unsigned int v15 = *v21;
        v15[1] = v21[1];
        v15[2] = v21[2];
        _WORD v15[3] = v21[3];
        uint64_t v30 = &v21[qword_2246EE5C8[v24]];
        *((_DWORD *)v15 + 1) = *(_DWORD *)v30;
        uint64_t v25 = &v30[-v29];
      }
      else
      {
        uint64_t v26 = *(void *)v21;
        uint64_t v25 = v21 + 8;
        *(void *)unsigned int v15 = v26;
      }
      unint64_t v27 = v15 + 8;
      uint64_t v8 = &v15[v22 + 4];
      if (v8 > v7)
      {
        if (v8 > v6 - 5) {
          return (~v9 + a1);
        }
        while (v27 < (void *)v6 - 1)
        {
          uint64_t v31 = *(void *)v25;
          v25 += 8;
          *v27++ = v31;
        }
        while (v27 < (void *)v8)
        {
          char v32 = *v25++;
          *(unsigned char *)unint64_t v27 = v32;
          unint64_t v27 = (void *)((char *)v27 + 1);
        }
      }
      else
      {
        do
        {
          uint64_t v28 = *(void *)v25;
          v25 += 8;
          *v27++ = v28;
        }
        while (v27 < (void *)v8);
      }
    }
    if ((unsigned __int8 *)v16 == v5 && v15 <= v6)
    {
      memcpy(v8, v9, v12);
      return (v15 - __dst);
    }
    return (~v9 + a1);
  }
  else if (a3 == 1)
  {
    if (*a1) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/NonMaximumSuppression.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::_NonMaximumSuppression_PickTop_default_instance_ = (uint64_t)&unk_26D7778D0;
  qword_26808D998 = 0;
  byte_26808D9A0 = 0;
  dword_26808D9A4 = 0;
  byte_26808D9A8 = 1;
  CoreML::Specification::_NonMaximumSuppression_default_instance_ = (uint64_t)&unk_26D777968;
  *(void *)algn_26808D9B8 = 0;
  qword_26808D9C0 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808D9C8 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_26808D9D0 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808D9D8 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_26808D9E0 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808D9E8 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_26808D9F0 = 0;
  unk_26808D9F8 = 0;
  dword_26808DA18 = 0;
  qword_26808DA10 = 0;
  byte_26808DA20 = 1;
}

void CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2242E9A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::NonMaximumSuppression_PickTop *CoreML::Specification::NonMaximumSuppression_PickTop::NonMaximumSuppression_PickTop(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  *(void *)this = &unk_26D7778D0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::NonMaximumSuppression_PickTop *)&CoreML::Specification::_NonMaximumSuppression_PickTop_default_instance_) {
    CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(this);
  }
  *((unsigned char *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  return this;
}

void sub_2242E9A8C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NonMaximumSuppression_PickTop::~NonMaximumSuppression_PickTop(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  *(void *)this = &unk_26D7778D0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D7778D0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::NonMaximumSuppression_PickTop::New(CoreML::Specification::NonMaximumSuppression_PickTop *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242E9B9C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::NonMaximumSuppression_PickTop>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NonMaximumSuppression_PickTop>);
  }
  return result;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::Clear(uint64_t this)
{
  *(unsigned char *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::MergePartialFromCodedStream(CoreML::Specification::NonMaximumSuppression_PickTop *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      unint64_t v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_6:
        TagFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      unsigned int v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        Varint64Fallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v13 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        Varint64Fallbacuint64_t k = *v11;
        *a2 = v11 + 1;
      }
      *((unsigned char *)this + 16) = Varint64Fallback != 0;
    }
    if (v7) {
      BOOL v10 = (v7 & 7) == 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(this + 16)) {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(1, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::ByteSizeLong(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  uint64_t v1 = 2 * *((unsigned __int8 *)this + 16);
  *((_DWORD *)this + 5) = v1;
  return v1;
}

std::string *CoreML::Specification::NonMaximumSuppression_PickTop::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  char v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (*((unsigned char *)a2 + 16)) {
    v3->__r_.__value_.__s.__data_[16] = 1;
  }
  return this;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::IsInitialized(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  return 1;
}

void *CoreML::Specification::NonMaximumSuppression_PickTop::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NonMaximumSuppression.PickTop");
}

CoreML::Specification::NonMaximumSuppression *CoreML::Specification::NonMaximumSuppression::NonMaximumSuppression(CoreML::Specification::NonMaximumSuppression *this)
{
  *(void *)this = &unk_26D777968;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::NonMaximumSuppression *)&CoreML::Specification::_NonMaximumSuppression_default_instance_) {
    CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 5) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 6) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 26) = 0;
  *((void *)this + 12) = 0;
  return this;
}

void sub_2242E9DE8(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NonMaximumSuppression::~NonMaximumSuppression(CoreML::Specification::NonMaximumSuppression *this)
{
  *(void *)this = &unk_26D777968;
  CoreML::Specification::NonMaximumSuppression::SharedDtor(this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::NonMaximumSuppression::~NonMaximumSuppression(this);
  JUMPOUT(0x22A614FA0);
}

void *CoreML::Specification::NonMaximumSuppression::SharedDtor(void *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v2 = this[2];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (void *)MEMORY[0x22A614FA0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *(void *)(v1 + 24);
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    this = (void *)MEMORY[0x22A614FA0](v4, 0x1012C40EC159624);
  }
  uint64_t v6 = *(void *)(v1 + 32);
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    this = (void *)MEMORY[0x22A614FA0](v6, 0x1012C40EC159624);
  }
  uint64_t v8 = *(void *)(v1 + 40);
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    this = (void *)MEMORY[0x22A614FA0](v8, 0x1012C40EC159624);
  }
  uint64_t v10 = *(void *)(v1 + 48);
  if ((uint64_t *)v10 != &_tc_google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    this = (void *)MEMORY[0x22A614FA0](v10, 0x1012C40EC159624);
  }
  uint64_t v11 = *(void *)(v1 + 56);
  if ((uint64_t *)v11 != &_tc_google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    this = (void *)MEMORY[0x22A614FA0](v11, 0x1012C40EC159624);
  }
  int v12 = *(_DWORD *)(v1 + 100);
  if (v12)
  {
    if (v12 == 1)
    {
      this = *(void **)(v1 + 80);
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
    }
    *(_DWORD *)(v1 + 100) = 0;
  }
  if (*(_DWORD *)(v1 + 104))
  {
    return (void *)CoreML::Specification::NonMaximumSuppression::clear_ClassLabels(v1);
  }
  return this;
}

uint64_t CoreML::Specification::NonMaximumSuppression::clear_ClassLabels(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 104);
  if (v2 == 101 || v2 == 100)
  {
    this = *(void *)(this + 88);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 104) = 0;
  return this;
}

uint64_t *CoreML::Specification::NonMaximumSuppression::default_instance(CoreML::Specification::NonMaximumSuppression *this)
{
  return &CoreML::Specification::_NonMaximumSuppression_default_instance_;
}

void CoreML::Specification::NonMaximumSuppression::New(CoreML::Specification::NonMaximumSuppression *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242EA150(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40D18C2FB1);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::NonMaximumSuppression>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NonMaximumSuppression>);
  }
  return result;
}

uint64_t CoreML::Specification::NonMaximumSuppression::Clear(CoreML::Specification::NonMaximumSuppression *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 4);
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
  uint64_t v5 = *((void *)this + 5);
  if ((uint64_t *)v5 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
  uint64_t v6 = *((void *)this + 6);
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
  uint64_t v7 = *((void *)this + 7);
  if ((uint64_t *)v7 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v7 + 23) < 0)
    {
      **(unsigned char **)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v7 = 0;
      *(unsigned char *)(v7 + 23) = 0;
    }
  }
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  if (*((_DWORD *)this + 25) == 1)
  {
    uint64_t v8 = *((void *)this + 10);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  *((_DWORD *)this + 25) = 0;
  return CoreML::Specification::NonMaximumSuppression::clear_ClassLabels((uint64_t)this);
}

uint64_t CoreML::Specification::NonMaximumSuppression::MergePartialFromCodedStream(CoreML::Specification::NonMaximumSuppression *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int v43 = (std::string **)((char *)this + 56);
  uint64_t v5 = (std::string **)((char *)this + 48);
  uint64_t v6 = (std::string **)((char *)this + 40);
  uint64_t v7 = (std::string **)((char *)this + 32);
  uint64_t v8 = (std::string **)((char *)this + 24);
  unint64_t v9 = (std::string **)((char *)this + 16);
  while (1)
  {
LABEL_2:
    uint64_t v10 = *(unsigned __int8 **)a2;
    unint64_t v11 = *((void *)a2 + 1);
    if (*(void *)a2 >= v11)
    {
      uint64_t v13 = 0;
    }
    else
    {
      int v12 = v10 + 1;
      uint64_t v13 = *v10;
      if ((char)*v10 >= 1)
      {
        *(void *)a2 = v12;
        unint64_t v14 = v13 | 0x100000000;
        if ((v14 & 0x100000000) == 0) {
          goto LABEL_9;
        }
        goto LABEL_17;
      }
      if ((unint64_t)v12 < v11)
      {
        int v15 = *v12;
        if ((v13 & ~v15) >= 0x80)
        {
          *(void *)a2 = v10 + 2;
          unint64_t v14 = (v13 + (v15 << 7) - 128) | 0x100000000;
          goto LABEL_17;
        }
      }
    }
    TagFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v13);
    unint64_t v14 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v14 & 0x100000000) == 0) {
      goto LABEL_9;
    }
LABEL_17:
    unsigned int v18 = v14 >> 3;
    if (v14 >> 3 > 0x6D) {
      break;
    }
    if (v18 == 1)
    {
      if (v14 != 10) {
        goto LABEL_9;
      }
      if (*((_DWORD *)this + 25) != 1)
      {
        *((_DWORD *)this + 25) = 1;
        operator new();
      }
      uint64_t v25 = (CoreML::Specification::NonMaximumSuppression_PickTop *)*((void *)this + 10);
      uint64_t v31 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v31 < 0)
      {
        VarintSizeAsIntFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        VarintSizeAsIntFallbacuint64_t k = *v31;
        *(void *)a2 = v31 + 1;
      }
      unint64_t v38 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v38 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v37 = v38;
      uint64_t result = CoreML::Specification::NonMaximumSuppression_PickTop::MergePartialFromCodedStream(v25, (char **)a2, v39);
      if (!result) {
        return result;
      }
    }
    else if (v18 == 100)
    {
      if (v14 != 34) {
        goto LABEL_9;
      }
      if (*((_DWORD *)this + 26) != 100)
      {
        CoreML::Specification::NonMaximumSuppression::clear_ClassLabels((uint64_t)this);
        *((_DWORD *)this + 26) = 100;
        operator new();
      }
      uint64_t v26 = (CoreML::Specification::StringVector *)*((void *)this + 11);
      char v33 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v33 < 0)
      {
        int v34 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v34 < 0) {
          return 0;
        }
      }
      else
      {
        int v34 = *v33;
        *(void *)a2 = v33 + 1;
      }
      unint64_t v40 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v34);
      if ((v40 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v37 = v40;
      uint64_t result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v26, (char **)a2, v41);
      if (!result) {
        return result;
      }
    }
    else
    {
      if (v18 != 101 || v14 != 42) {
        goto LABEL_9;
      }
      if (*((_DWORD *)this + 26) != 101)
      {
        CoreML::Specification::NonMaximumSuppression::clear_ClassLabels((uint64_t)this);
        *((_DWORD *)this + 26) = 101;
        operator new();
      }
      uint64_t v22 = (CoreML::Specification::Int64Vector *)*((void *)this + 11);
      uint64_t v29 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v29 < 0)
      {
        int v30 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v30 < 0) {
          return 0;
        }
      }
      else
      {
        int v30 = *v29;
        *(void *)a2 = v29 + 1;
      }
      unint64_t v35 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v30);
      if ((v35 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v37 = v35;
      uint64_t result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v22, (char **)a2, v36);
      if (!result) {
        return result;
      }
    }
    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v37)) {
      return 0;
    }
  }
  switch(v18)
  {
    case 0xC8u:
      if (v14 != 66) {
        goto LABEL_9;
      }
      if (*v9 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v9);
      if (!result) {
        return result;
      }
      int v20 = *v9;
      if (SHIBYTE((*v9)->__r_.__value_.__r.__words[2]) < 0)
      {
        int v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (const char *)(*v9)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v9)->__r_.__value_.__r.__words[2]);
      }
      BOOL v42 = "CoreML.Specification.NonMaximumSuppression.confidenceInputFeatureName";
      goto LABEL_114;
    case 0xC9u:
      if (v14 != 74) {
        goto LABEL_9;
      }
      if (*v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v8);
      if (!result) {
        return result;
      }
      int v20 = *v8;
      if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
      {
        int v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (const char *)(*v8)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
      }
      BOOL v42 = "CoreML.Specification.NonMaximumSuppression.coordinatesInputFeatureName";
      goto LABEL_114;
    case 0xCAu:
      if (v14 != 82) {
        goto LABEL_9;
      }
      if (*v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v7);
      if (!result) {
        return result;
      }
      int v20 = *v7;
      if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
      {
        int v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (const char *)(*v7)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
      }
      BOOL v42 = "CoreML.Specification.NonMaximumSuppression.iouThresholdInputFeatureName";
      goto LABEL_114;
    case 0xCBu:
      if (v14 != 90) {
        goto LABEL_9;
      }
      if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v6);
      if (!result) {
        return result;
      }
      int v20 = *v6;
      if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
      {
        int v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (const char *)(*v6)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
      }
      BOOL v42 = "CoreML.Specification.NonMaximumSuppression.confidenceThresholdInputFeatureName";
      goto LABEL_114;
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
      goto LABEL_9;
    case 0xD2u:
      if (v14 != 146) {
        goto LABEL_9;
      }
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v5);
      if (!result) {
        return result;
      }
      int v20 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        int v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      BOOL v42 = "CoreML.Specification.NonMaximumSuppression.confidenceOutputFeatureName";
      goto LABEL_114;
    case 0xD3u:
      if (v14 != 154) {
        goto LABEL_9;
      }
      if (*v43 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v43);
      if (!result) {
        return result;
      }
      int v20 = *v43;
      if (SHIBYTE((*v43)->__r_.__value_.__r.__words[2]) < 0)
      {
        int v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (const char *)(*v43)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v43)->__r_.__value_.__r.__words[2]);
      }
      BOOL v42 = "CoreML.Specification.NonMaximumSuppression.coordinatesOutputFeatureName";
LABEL_114:
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v20, size, 0, (uint64_t)v42))return 0; {
      goto LABEL_2;
      }
    default:
      if (v18 != 110)
      {
        if (v18 != 111 || v14 != 121) {
          goto LABEL_9;
        }
        unint64_t v44 = 0;
        unsigned int v23 = *(unint64_t **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) < 8)
        {
          uint64_t result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v44);
          if (!result) {
            return result;
          }
          unint64_t v24 = v44;
        }
        else
        {
          unint64_t v24 = *v23;
          *(void *)a2 = v23 + 1;
        }
        *((void *)this + 9) = v24;
        goto LABEL_2;
      }
      if (v14 == 113)
      {
        unint64_t v44 = 0;
        unint64_t v27 = *(unint64_t **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) < 8)
        {
          uint64_t result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v44);
          if (!result) {
            return result;
          }
          unint64_t v28 = v44;
        }
        else
        {
          unint64_t v28 = *v27;
          *(void *)a2 = v27 + 1;
        }
        *((void *)this + 8) = v28;
        goto LABEL_2;
      }
LABEL_9:
      if (v14) {
        BOOL v16 = (v14 & 7) == 4;
      }
      else {
        BOOL v16 = 1;
      }
      if (!v16)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v14, a3) & 1) == 0)return 0; {
        goto LABEL_2;
        }
      }
      return 1;
  }
}

void sub_2242EA978(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NonMaximumSuppression::SerializeWithCachedSizes(CoreML::Specification::NonMaximumSuppression *this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*((_DWORD *)this + 25) == 1) {
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *((void *)this + 10), a2, a4);
  }
  int v6 = *((_DWORD *)this + 26);
  if (v6 == 100)
  {
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, *((void *)this + 11), a2, a4);
    int v6 = *((_DWORD *)this + 26);
  }
  if (v6 == 101) {
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x65, *((void *)this + 11), a2, a4);
  }
  double v7 = *((double *)this + 8);
  if (v7 != 0.0) {
    _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)0x6E, a2, v7, a3);
  }
  double v8 = *((double *)this + 9);
  if (v8 != 0.0) {
    _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)0x6F, a2, v8, a3);
  }
  unint64_t v9 = (_tc_google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v9 + 23) < 0)
  {
    uint64_t v10 = (const char *)*((void *)v9 + 1);
    if (!v10) {
      goto LABEL_17;
    }
    unint64_t v9 = *(_tc_google::protobuf::internal **)v9;
    goto LABEL_16;
  }
  uint64_t v10 = (const char *)*((unsigned __int8 *)v9 + 23);
  if (*((unsigned char *)v9 + 23))
  {
LABEL_16:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v9, v10, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.confidenceInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(200, *((void *)this + 2), a2);
  }
LABEL_17:
  unint64_t v11 = (_tc_google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v11 + 23) < 0)
  {
    int v12 = (const char *)*((void *)v11 + 1);
    if (!v12) {
      goto LABEL_23;
    }
    unint64_t v11 = *(_tc_google::protobuf::internal **)v11;
    goto LABEL_22;
  }
  int v12 = (const char *)*((unsigned __int8 *)v11 + 23);
  if (*((unsigned char *)v11 + 23))
  {
LABEL_22:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.coordinatesInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(201, *((void *)this + 3), a2);
  }
LABEL_23:
  uint64_t v13 = (_tc_google::protobuf::internal *)*((void *)this + 4);
  if (*((char *)v13 + 23) < 0)
  {
    unint64_t v14 = (const char *)*((void *)v13 + 1);
    if (!v14) {
      goto LABEL_29;
    }
    uint64_t v13 = *(_tc_google::protobuf::internal **)v13;
    goto LABEL_28;
  }
  unint64_t v14 = (const char *)*((unsigned __int8 *)v13 + 23);
  if (*((unsigned char *)v13 + 23))
  {
LABEL_28:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, v14, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.iouThresholdInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(202, *((void *)this + 4), a2);
  }
LABEL_29:
  int v15 = (_tc_google::protobuf::internal *)*((void *)this + 5);
  if (*((char *)v15 + 23) < 0)
  {
    BOOL v16 = (const char *)*((void *)v15 + 1);
    if (!v16) {
      goto LABEL_35;
    }
    int v15 = *(_tc_google::protobuf::internal **)v15;
    goto LABEL_34;
  }
  BOOL v16 = (const char *)*((unsigned __int8 *)v15 + 23);
  if (*((unsigned char *)v15 + 23))
  {
LABEL_34:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v15, v16, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.confidenceThresholdInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(203, *((void *)this + 5), a2);
  }
LABEL_35:
  uint64_t v17 = (_tc_google::protobuf::internal *)*((void *)this + 6);
  if (*((char *)v17 + 23) < 0)
  {
    unsigned int v18 = (const char *)*((void *)v17 + 1);
    if (!v18) {
      goto LABEL_41;
    }
    uint64_t v17 = *(_tc_google::protobuf::internal **)v17;
    goto LABEL_40;
  }
  unsigned int v18 = (const char *)*((unsigned __int8 *)v17 + 23);
  if (*((unsigned char *)v17 + 23))
  {
LABEL_40:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v17, v18, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.confidenceOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(210, *((void *)this + 6), a2);
  }
LABEL_41:
  uint64_t result = *((void *)this + 7);
  if (*(char *)(result + 23) < 0)
  {
    int v20 = *(const char **)(result + 8);
    if (!v20) {
      return result;
    }
    uint64_t result = *(void *)result;
  }
  else
  {
    int v20 = (const char *)*(unsigned __int8 *)(result + 23);
    if (!*(unsigned char *)(result + 23)) {
      return result;
    }
  }
  _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v20, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.coordinatesOutputFeatureName");
  uint64_t v21 = *((void *)this + 7);
  return _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(211, v21, a2);
}

uint64_t CoreML::Specification::NonMaximumSuppression::ByteSizeLong(CoreML::Specification::NonMaximumSuppression *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  uint64_t v9 = *((void *)this + 4);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(void *)(v9 + 8)) {
      goto LABEL_18;
    }
  }
  else if (!*(unsigned char *)(v9 + 23))
  {
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)(v9 + 8);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v10;
  }
  v5 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_18:
  uint64_t v12 = *((void *)this + 5);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(void *)(v12 + 8)) {
      goto LABEL_23;
    }
  }
  else if (!*(unsigned char *)(v12 + 23))
  {
    goto LABEL_23;
  }
  uint64_t v14 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = v13;
  }
  v5 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_23:
  uint64_t v15 = *((void *)this + 6);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(void *)(v15 + 8)) {
      goto LABEL_28;
    }
  }
  else if (!*(unsigned char *)(v15 + 23))
  {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v15 + 8);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = v16;
  }
  v5 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_28:
  uint64_t v18 = *((void *)this + 7);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(void *)(v18 + 8)) {
      goto LABEL_33;
    }
  }
  else if (!*(unsigned char *)(v18 + 23))
  {
    goto LABEL_33;
  }
  uint64_t v20 = *(void *)(v18 + 8);
  if ((v19 & 0x80u) == 0) {
    uint64_t v20 = v19;
  }
  v5 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_33:
  if (*((double *)this + 8) != 0.0) {
    v5 += 10;
  }
  if (*((double *)this + 9) == 0.0) {
    uint64_t v21 = v5;
  }
  else {
    uint64_t v21 = v5 + 10;
  }
  if (*((_DWORD *)this + 25) == 1)
  {
    uint64_t v22 = *((void *)this + 10);
    uint64_t v23 = *(unsigned __int8 *)(v22 + 16);
    *(_DWORD *)(v22 + 20) = 2 * v23;
    v21 += 2 * v23 + 2;
  }
  int v24 = *((_DWORD *)this + 26);
  if (v24 == 101)
  {
    uint64_t v25 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 11));
    goto LABEL_54;
  }
  if (v24 == 100)
  {
    uint64_t v25 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 11));
LABEL_54:
    v21 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 24) = v21;
  return v21;
}

std::string *CoreML::Specification::NonMaximumSuppression::MergeFrom(std::string *this, const CoreML::Specification::NonMaximumSuppression *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_11;
  }
  this = (std::string *)(v3 + 16);
  uint64_t v6 = *(uint64_t **)(v3 + 16);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=(*(std::string **)(v3 + 16), (const std::string *)v5);
  }
LABEL_11:
  uint64_t v7 = *((void *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(void *)(v7 + 8)) {
      goto LABEL_19;
    }
  }
  else if (!*(unsigned char *)(v7 + 23))
  {
    goto LABEL_19;
  }
  this = (std::string *)(v3 + 24);
  uint64_t v8 = *(uint64_t **)(v3 + 24);
  if (v8 != (uint64_t *)v7)
  {
    if (v8 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=(*(std::string **)(v3 + 24), (const std::string *)v7);
  }
LABEL_19:
  uint64_t v9 = *((void *)a2 + 4);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(void *)(v9 + 8)) {
      goto LABEL_27;
    }
  }
  else if (!*(unsigned char *)(v9 + 23))
  {
    goto LABEL_27;
  }
  this = (std::string *)(v3 + 32);
  uint64_t v10 = *(uint64_t **)(v3 + 32);
  if (v10 != (uint64_t *)v9)
  {
    if (v10 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=(*(std::string **)(v3 + 32), (const std::string *)v9);
  }
LABEL_27:
  uint64_t v11 = *((void *)a2 + 5);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(void *)(v11 + 8)) {
      goto LABEL_35;
    }
  }
  else if (!*(unsigned char *)(v11 + 23))
  {
    goto LABEL_35;
  }
  this = (std::string *)(v3 + 40);
  uint64_t v12 = *(uint64_t **)(v3 + 40);
  if (v12 != (uint64_t *)v11)
  {
    if (v12 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=(*(std::string **)(v3 + 40), (const std::string *)v11);
  }
LABEL_35:
  uint64_t v13 = *((void *)a2 + 6);
  if (*(char *)(v13 + 23) < 0)
  {
    if (!*(void *)(v13 + 8)) {
      goto LABEL_43;
    }
  }
  else if (!*(unsigned char *)(v13 + 23))
  {
    goto LABEL_43;
  }
  this = (std::string *)(v3 + 48);
  uint64_t v14 = *(uint64_t **)(v3 + 48);
  if (v14 != (uint64_t *)v13)
  {
    if (v14 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=(*(std::string **)(v3 + 48), (const std::string *)v13);
  }
LABEL_43:
  uint64_t v15 = *((void *)a2 + 7);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(void *)(v15 + 8)) {
      goto LABEL_51;
    }
  }
  else if (!*(unsigned char *)(v15 + 23))
  {
    goto LABEL_51;
  }
  this = (std::string *)(v3 + 56);
  uint64_t v16 = *(uint64_t **)(v3 + 56);
  if (v16 != (uint64_t *)v15)
  {
    if (v16 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=(*(std::string **)(v3 + 56), (const std::string *)v15);
  }
LABEL_51:
  double v17 = *((double *)a2 + 8);
  if (v17 != 0.0) {
    *(double *)(v3 + 64) = v17;
  }
  double v18 = *((double *)a2 + 9);
  if (v18 != 0.0) {
    *(double *)(v3 + 72) = v18;
  }
  if (*((_DWORD *)a2 + 25) == 1)
  {
    if (*(_DWORD *)(v3 + 100) != 1)
    {
      *(_DWORD *)(v3 + 100) = 1;
      operator new();
    }
    uint64_t v19 = *(void *)(v3 + 80);
    uint64_t v20 = *((void *)a2 + 10);
    uint64_t v21 = *(void *)(v20 + 8);
    if (v21) {
      this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)(v19 + 8), v21 & 0xFFFFFFFFFFFFFFFELL);
    }
    if (*(unsigned char *)(v20 + 16)) {
      *(unsigned char *)(v19 + 16) = 1;
    }
  }
  int v22 = *((_DWORD *)a2 + 26);
  if (v22 == 101)
  {
    if (*(_DWORD *)(v3 + 104) != 101)
    {
      CoreML::Specification::NonMaximumSuppression::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 104) = 101;
      operator new();
    }
    int v24 = (const CoreML::Specification::GLMRegressor_DoubleArray *)*((void *)a2 + 11);
    uint64_t v26 = *(unint64_t **)(v3 + 88);
    return (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom(v26, v24);
  }
  else if (v22 == 100)
  {
    if (*(_DWORD *)(v3 + 104) != 100)
    {
      CoreML::Specification::NonMaximumSuppression::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 104) = 100;
      operator new();
    }
    uint64_t v23 = (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)*((void *)a2 + 11);
    uint64_t v25 = *(std::string **)(v3 + 88);
    return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom(v25, v23);
  }
  return this;
}

void sub_2242EB310(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NonMaximumSuppression::IsInitialized(CoreML::Specification::NonMaximumSuppression *this)
{
  return 1;
}

void *CoreML::Specification::NonMaximumSuppression::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NonMaximumSuppression");
}

void CoreML::Specification::NonMaximumSuppression_PickTop::New(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
}

void CoreML::Specification::NonMaximumSuppression::New(CoreML::Specification::NonMaximumSuppression *this)
{
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NonMaximumSuppression_PickTop>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NonMaximumSuppression>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_2242EB65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, turi::neural_net::model_spec *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a19, 0);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v26, a25);

  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::validate<(MLModelType)304>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = CoreML::Result::Result((CoreML::Result *)a2);
  if (*(void *)(a1 + 16)) {
    uint64_t v5 = *(uint64_t **)(a1 + 16);
  }
  else {
    uint64_t v5 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  if (*((int *)v5 + 6) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (void **)(a2 + 8);
    do
    {
      CoreML::validateSchemaTypesIsMultiArray(*(void *)(v5[4] + 8 * v6 + 8), 131104, 1, 2, (CoreML::Result *)&v8);
      *(void *)a2 = v8;
      if (*(char *)(a2 + 31) < 0) {
        operator delete(*v7);
      }
      *(_OWORD *)uint64_t v7 = v9;
      *(void *)(a2 + 24) = v10;
      uint64_t result = (CoreML::Result *)CoreML::Result::good((CoreML::Result *)a2);
      if ((result & 1) == 0) {
        break;
      }
      ++v6;
    }
    while (v6 < *((int *)v5 + 6));
  }
  return result;
}

void sub_2242EB7A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validateSchemaTypesIsMultiArray@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, CoreML::Result *a5@<X8>)
{
  if (*(void *)(a1 + 32)) {
    uint64_t v8 = *(uint64_t **)(a1 + 32);
  }
  else {
    uint64_t v8 = &CoreML::Specification::_FeatureType_default_instance_;
  }
  if (*((_DWORD *)v8 + 9) != 5)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v68);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Unsupported type \"", 18);
    uint64_t v20 = *(uint64_t **)(a1 + 32);
    if (!v20) {
      uint64_t v20 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    uint64_t v21 = *((int *)v20 + 9);
    if (v21 > 7) {
      int v22 = "INVALID";
    }
    else {
      int v22 = off_2646D79B8[v21];
    }
    size_t v26 = strlen(v22);
    unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v22, v26);
    unint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\" for feature \"", 15);
    uint64_t v29 = *(const void ***)(a1 + 16);
    if (*((char *)v29 + 23) >= 0) {
      size_t v30 = *((unsigned __int8 *)v29 + 23);
    }
    else {
      size_t v30 = (size_t)v29[1];
    }
    locale = (char *)&v65;
    std::string::basic_string[abi:ne180100]((uint64_t)&v65, v30 + 3);
    if ((v67 & 0x80u) != 0) {
      locale = (char *)v65.__locale_;
    }
    if (v30)
    {
      if (*((char *)v29 + 23) >= 0) {
        char v32 = v29;
      }
      else {
        char v32 = *v29;
      }
      memmove(locale, v32, v30);
    }
    *(_DWORD *)&locale[v30] = 2108962;
    if ((v67 & 0x80u) == 0) {
      char v33 = &v65;
    }
    else {
      char v33 = v65.__locale_;
    }
    if ((v67 & 0x80u) == 0) {
      uint64_t v34 = v67;
    }
    else {
      uint64_t v34 = v66;
    }
    unint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v33, v34);
    unsigned int v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Should be of: ", 14);
    int v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"MLFeatureTypeType_multiArrayType", 32);
    unint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" with data type of: ", 20);
    switch(a2)
    {
      case 131104:
        unsigned int v39 = "MLArrayDataTypeINT32";
        break;
      case 65600:
        unsigned int v39 = "MLArrayDataTypeDOUBLE";
        break;
      case 65568:
        unsigned int v39 = "MLArrayDataTypeFLOAT32";
        break;
      default:
        unsigned int v39 = "INVALID";
        break;
    }
    size_t v56 = strlen(v39);
    uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v56);
    unint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)".", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
    int v59 = std::locale::use_facet(&v74, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v67 < 0) {
      operator delete(v65.__locale_);
    }
    goto LABEL_84;
  }
  uint64_t v9 = v8[3];
  if (*(_DWORD *)(v9 + 36) != a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v68);
    uint64_t v23 = (CoreML::Specification::ArrayFeatureType *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Unsupported array type \"", 24);
    int v24 = v23;
    if (*((_DWORD *)v8 + 9) == 5) {
      uint64_t v25 = (uint64_t *)v8[3];
    }
    else {
      uint64_t v25 = CoreML::Specification::ArrayFeatureType::default_instance(v23);
    }
    unsigned int v41 = "INVALID";
    int v42 = *((_DWORD *)v25 + 9);
    if (v42 == 65568) {
      unsigned int v41 = "MLArrayDataTypeFLOAT32";
    }
    if (v42 == 65600) {
      unsigned int v41 = "MLArrayDataTypeDOUBLE";
    }
    if (v42 == 131104) {
      unsigned int v43 = "MLArrayDataTypeINT32";
    }
    else {
      unsigned int v43 = v41;
    }
    size_t v44 = strlen(v43);
    uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v43, v44);
    int v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"\" for feature \"", 15);
    unsigned int v47 = *(const void ***)(a1 + 16);
    if (*((char *)v47 + 23) >= 0) {
      size_t v48 = *((unsigned __int8 *)v47 + 23);
    }
    else {
      size_t v48 = (size_t)v47[1];
    }
    int v49 = (char *)&v65;
    std::string::basic_string[abi:ne180100]((uint64_t)&v65, v48 + 3);
    if ((v67 & 0x80u) != 0) {
      int v49 = (char *)v65.__locale_;
    }
    if (v48)
    {
      if (*((char *)v47 + 23) >= 0) {
        unint64_t v50 = v47;
      }
      else {
        unint64_t v50 = *v47;
      }
      memmove(v49, v50, v48);
    }
    *(_DWORD *)&v49[v48] = 2108962;
    if ((v67 & 0x80u) == 0) {
      int v51 = &v65;
    }
    else {
      int v51 = v65.__locale_;
    }
    if ((v67 & 0x80u) == 0) {
      uint64_t v52 = v67;
    }
    else {
      uint64_t v52 = v66;
    }
    char v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v51, v52);
    unint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Should be of: ", 14);
    switch(a2)
    {
      case 131104:
        int v55 = "MLArrayDataTypeINT32";
        break;
      case 65600:
        int v55 = "MLArrayDataTypeDOUBLE";
        break;
      case 65568:
        int v55 = "MLArrayDataTypeFLOAT32";
        break;
      default:
        int v55 = "INVALID";
        break;
    }
    size_t v60 = strlen(v55);
    int v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, v60);
    unsigned int v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)".", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
    uint64_t v63 = std::locale::use_facet(&v74, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v67 < 0) {
      operator delete(v65.__locale_);
    }
LABEL_84:
    std::stringbuf::str();
    CoreML::Result::Result(a5, 8);
    if ((char)v67 < 0) {
      operator delete(v65.__locale_);
    }
    v68[0] = *MEMORY[0x263F8C2B8];
    uint64_t v64 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v68 + *(void *)(v68[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v69 = v64;
    uint64_t v70 = MEMORY[0x263F8C318] + 16;
    if (v72 < 0) {
      operator delete(__p);
    }
    goto LABEL_88;
  }
  int v10 = *(_DWORD *)(v9 + 16);
  if (v10 < a3 || v10 > a4)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Unsupported array rank ", 23);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" should be in range [", 21);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)",", 1);
    uint64_t v14 = (void *)std::ostream::operator<<();
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)".", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    double v17 = std::locale::use_facet(&v65, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v65);
    std::ostream::put();
    std::ostream::flush();
    std::stringbuf::str();
    CoreML::Result::Result(a5, 8);
    if ((char)v67 < 0) {
      operator delete(v65.__locale_);
    }
    v68[0] = *MEMORY[0x263F8C2B8];
    uint64_t v18 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v68 + *(void *)(v68[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v69 = v18;
    uint64_t v70 = MEMORY[0x263F8C318] + 16;
    if (v72 < 0) {
      operator delete(__p);
    }
LABEL_88:
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (CoreML::Result *)MEMORY[0x22A614E30](&v73);
  }
  return CoreML::Result::Result(a5);
}

void sub_2242EC0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

id turi::neural_net::convert_hwc_array_to_chw_data(uint64_t *a1)
{
  size_t v2 = 4 * (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
  uint64_t v3 = malloc_type_malloc(v2, 0x66E1F5CCuLL);
  uint64_t v4 = [MEMORY[0x263EFF8F8] dataWithBytesNoCopy:v3 length:v2 freeWhenDone:1];
  (*(void (**)(uint64_t *))(*a1 + 24))(a1);
  turi::neural_net::convert_hwc_to_chw(a1, (uint64_t)v3);
  return v4;
}

void sub_2242EC208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::convert_chw_data_to_hwc_array(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a1;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v20, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(v21 - 24, v21 - 8, v21);
  uint64_t v6 = (char *)v20;
  if (v20 == (unint64_t *)v21)
  {
    unint64_t v9 = 1;
  }
  else
  {
    int v7 = 1;
    do
    {
      int v8 = *(_DWORD *)v6;
      v6 += 8;
      v7 *= v8;
    }
    while (v6 != v21);
    unint64_t v9 = v7;
  }
  id v10 = v5;
  uint64_t v11 = (const float *)[v10 bytes];
  turi::neural_net::external_float_array::external_float_array((turi::neural_net::external_float_array *)v18, v11, v9, v20, (v21 - (char *)v20) >> 3);
  std::vector<float>::vector(v16, v19);
  turi::neural_net::convert_chw_to_hwc((uint64_t)v18, (char *)v16[0]);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v16;
  uint64_t v15 = v17;
  v16[1] = 0;
  uint64_t v17 = 0;
  v16[0] = 0;
  *(_OWORD *)__p = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  turi::neural_net::shared_float_array::wrap((uint64_t)v14, (uint64_t)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (v20)
  {
    uint64_t v21 = (char *)v20;
    operator delete(v20);
  }
}

void sub_2242EC37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a17) {
    operator delete(a17);
  }
  uint64_t v21 = *(void **)(v19 - 72);
  if (v21)
  {
    *(void *)(v19 - 64) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(char *__src, char *a2, char *a3)
{
  uint64_t v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      uint64_t v6 = *(void *)__src;
      int64_t v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      uint64_t v4 = &__src[v7];
      *(void *)uint64_t v4 = v6;
    }
    else if (a2 + 8 == a3)
    {
      uint64_t v8 = *((void *)a3 - 1);
      uint64_t v4 = __src + 8;
      size_t v9 = a3 - 8 - __src;
      if (a3 - 8 != __src) {
        memmove(__src + 8, __src, v9);
      }
      *(void *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>>(__src, a2, a3);
    }
  }
  return v4;
}

void *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>>(void *a1, void *a2, void *a3)
{
  uint64_t v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      uint64_t v4 = a1 + 1;
      id v5 = a2 + 1;
      do
      {
        uint64_t v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2) {
          break;
        }
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    uint64_t v8 = a3 - a2;
    uint64_t v9 = a2 - a1;
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = v8;
      uint64_t v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      uint64_t v11 = &a1[v9];
      do
      {
        uint64_t v13 = *--v11;
        uint64_t v12 = v13;
        uint64_t v14 = &v11[v3];
        uint64_t v15 = v11;
        do
        {
          uint64_t v16 = v14;
          *uint64_t v15 = *v14;
          uint64_t v17 = &v14[v3];
          BOOL v18 = __OFSUB__(v3, a3 - v14);
          uint64_t v20 = v3 - (a3 - v14);
          char v19 = (v20 < 0) ^ v18;
          uint64_t v14 = &a1[v20];
          if (v19) {
            uint64_t v14 = v17;
          }
          uint64_t v15 = v16;
        }
        while (v14 != v11);
        *uint64_t v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

void turi::neural_net::model_spec::model_spec(turi::neural_net::model_spec *this)
{
}

void sub_2242EC5CC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40280AC348);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::model_spec()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_2242EC8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  MEMORY[0x22A614FA0](v31, 0x10A1C40280AC348);
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)&a30);
  if (__p) {
    operator delete(__p);
  }
  uint64_t v33 = *v30;
  uint64_t *v30 = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  _Unwind_Resume(a1);
}

void *turi::neural_net::model_spec::model_spec(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

void turi::neural_net::model_spec::~model_spec(turi::neural_net::model_spec *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void turi::neural_net::model_spec::export_params_view(turi::neural_net::model_spec *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = *(void *)(*(void *)this + 32);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(int *)(*(void *)this + 24);
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    int64x2_t v149 = vdupq_n_s64(1uLL);
    do
    {
      uint64_t v7 = *v4;
      int v8 = *(_DWORD *)(*v4 + 140);
      if (v8 > 159)
      {
        if (v8 == 160)
        {
          int v126 = *(const void ***)(v7 + 112);
          uint64_t v127 = *(void *)(v7 + 128);
          uint64_t v128 = *(void *)(v127 + 48);
          int v129 = operator new(8uLL);
          v191 = v129;
          *int v129 = v128;
          v193 = (std::__shared_weak_count *)(v129 + 1);
          v192 = v129 + 1;
          if (*(void *)(v127 + 16)) {
            int v130 = *(uint64_t **)(v127 + 16);
          }
          else {
            int v130 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v191)
          {
            v192 = v191;
            operator delete(v191);
          }
          if (*((char *)v126 + 23) >= 0) {
            size_t v131 = *((unsigned __int8 *)v126 + 23);
          }
          else {
            size_t v131 = (size_t)v126[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v209, v131 + 6);
          if (SHIBYTE(v210) >= 0) {
            unsigned int v132 = v209;
          }
          else {
            unsigned int v132 = (const void **)v209[0];
          }
          if (v131)
          {
            if (*((char *)v126 + 23) >= 0) {
              int v133 = v126;
            }
            else {
              int v133 = *v126;
            }
            memmove(v132, v133, v131);
          }
          strcpy((char *)v132 + v131, "_gamma");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, v209, (uint64_t)v209, (uint64_t)v214);
          if (SHIBYTE(v210) < 0) {
            operator delete((void *)v209[0]);
          }
          v134 = operator new(8uLL);
          v185 = v134;
          void *v134 = v128;
          v187 = (std::__shared_weak_count *)(v134 + 1);
          v186 = v134 + 1;
          if (*(void *)(v127 + 24)) {
            char v135 = *(uint64_t **)(v127 + 24);
          }
          else {
            char v135 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v185)
          {
            v186 = v185;
            operator delete(v185);
          }
          if (*((char *)v126 + 23) >= 0) {
            size_t v136 = *((unsigned __int8 *)v126 + 23);
          }
          else {
            size_t v136 = (size_t)v126[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v136 + 5);
          if (SHIBYTE(v205) >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          if (v136)
          {
            if (*((char *)v126 + 23) >= 0) {
              int v138 = v126;
            }
            else {
              int v138 = *v126;
            }
            memmove(p_p, v138, v136);
          }
          strcpy((char *)p_p + v136, "_beta");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)&__p, (uint64_t)&__p, (uint64_t)v209);
          if (SHIBYTE(v205) < 0) {
            operator delete(__p);
          }
          if (!*(unsigned char *)(v127 + 57))
          {
            int v139 = operator new(8uLL);
            v180[0] = v139;
            *int v139 = v128;
            v180[1] = v139 + 1;
            v181 = (std::__shared_weak_count *)(v139 + 1);
            if (*(void *)(v127 + 32)) {
              int v140 = *(uint64_t **)(v127 + 32);
            }
            else {
              int v140 = &CoreML::Specification::_WeightParams_default_instance_;
            }
            if (v180[0]) {
              operator delete(v180[0]);
            }
            if (*((char *)v126 + 23) >= 0) {
              size_t v141 = *((unsigned __int8 *)v126 + 23);
            }
            else {
              size_t v141 = (size_t)v126[1];
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v197, v141 + 13);
            if (SHIBYTE(v199) >= 0) {
              int v142 = &v197;
            }
            else {
              int v142 = v197;
            }
            if (v141)
            {
              if (*((char *)v126 + 23) >= 0) {
                int v143 = v126;
              }
              else {
                int v143 = *v126;
              }
              memmove(v142, v143, v141);
            }
            strcpy((char *)v142 + v141, "_running_mean");
            std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)&v197, (uint64_t)&v197, (uint64_t)&__p);
            if (SHIBYTE(v199) < 0) {
              operator delete(v197);
            }
            unsigned int v144 = operator new(8uLL);
            v175[0] = v144;
            *unsigned int v144 = v128;
            v175[1] = v144 + 1;
            v176 = (std::__shared_weak_count *)(v144 + 1);
            if (*(void *)(v127 + 40)) {
              unsigned int v145 = *(uint64_t **)(v127 + 40);
            }
            else {
              unsigned int v145 = &CoreML::Specification::_WeightParams_default_instance_;
            }
            if (v175[0]) {
              operator delete(v175[0]);
            }
            if (*((char *)v126 + 23) >= 0) {
              size_t v146 = *((unsigned __int8 *)v126 + 23);
            }
            else {
              size_t v146 = (size_t)v126[1];
            }
            std::string::basic_string[abi:ne180100]((uint64_t)v170, v146 + 12);
            if (SHIBYTE(v171) >= 0) {
              v147 = v170;
            }
            else {
              v147 = (void **)v170[0];
            }
            if (v146)
            {
              if (*((char *)v126 + 23) >= 0) {
                char v148 = v126;
              }
              else {
                char v148 = *v126;
              }
              memmove(v147, v148, v146);
            }
            strcpy((char *)v147 + v146, "_running_var");
            std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)v170, (uint64_t)v170, (uint64_t)&v197);
            if (SHIBYTE(v171) < 0) {
              operator delete(v170[0]);
            }
LABEL_410:
            v197 = &unk_26D752D58;
            if (v199) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v199);
            }
            __p = &unk_26D752D58;
            if (v205) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v205);
            }
          }
LABEL_414:
          v209[0] = &unk_26D752D58;
          if (v210) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v210);
          }
LABEL_416:
          v214[0] = &unk_26D752D58;
          if (v215) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v215);
          }
          goto LABEL_418;
        }
        if (v8 == 420)
        {
          uint64_t v23 = *(const void ***)(v7 + 112);
          int v24 = *(void **)(v7 + 128);
          uint64_t v26 = v24[7];
          uint64_t v25 = v24[8];
          unint64_t v27 = operator new(0x10uLL);
          v212 = v27 + 2;
          v213 = v27 + 2;
          *unint64_t v27 = v25;
          v27[1] = v26;
          v211 = v27;
          unint64_t v28 = (uint64_t *)v24[6];
          if (!v28) {
            unint64_t v28 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          }
          uint64_t v29 = (uint64_t *)v28[2];
          if (v29) {
            size_t v30 = v29;
          }
          else {
            size_t v30 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v211)
          {
            v212 = v211;
            operator delete(v211);
          }
          if (*((char *)v23 + 23) >= 0) {
            size_t v31 = *((unsigned __int8 *)v23 + 23);
          }
          else {
            size_t v31 = (size_t)v23[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v209, v31 + 13);
          if (SHIBYTE(v210) >= 0) {
            char v32 = v209;
          }
          else {
            char v32 = (const void **)v209[0];
          }
          if (v31)
          {
            if (*((char *)v23 + 23) >= 0) {
              uint64_t v33 = v23;
            }
            else {
              uint64_t v33 = *v23;
            }
            memmove(v32, v33, v31);
          }
          strcpy((char *)v32 + v31, "_i2h_i_weight");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, v209, (uint64_t)v209, (uint64_t)v214);
          if (SHIBYTE(v210) < 0) {
            operator delete((void *)v209[0]);
          }
          uint64_t v34 = operator new(0x10uLL);
          v207 = v34 + 2;
          v208 = v34 + 2;
          *uint64_t v34 = v25;
          v34[1] = v26;
          v206 = v34;
          unint64_t v35 = (uint64_t *)v24[6];
          if (!v35) {
            unint64_t v35 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          }
          unsigned int v36 = (uint64_t *)v35[3];
          if (v36) {
            int v37 = v36;
          }
          else {
            int v37 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v206)
          {
            v207 = v206;
            operator delete(v206);
          }
          if (*((char *)v23 + 23) >= 0) {
            size_t v38 = *((unsigned __int8 *)v23 + 23);
          }
          else {
            size_t v38 = (size_t)v23[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v38 + 13);
          if (SHIBYTE(v205) >= 0) {
            unsigned int v39 = &__p;
          }
          else {
            unsigned int v39 = __p;
          }
          if (v38)
          {
            if (*((char *)v23 + 23) >= 0) {
              unint64_t v40 = v23;
            }
            else {
              unint64_t v40 = *v23;
            }
            memmove(v39, v40, v38);
          }
          strcpy((char *)v39 + v38, "_i2h_f_weight");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)&__p, (uint64_t)&__p, (uint64_t)v209);
          if (SHIBYTE(v205) < 0) {
            operator delete(__p);
          }
          unsigned int v41 = operator new(0x10uLL);
          v202 = v41 + 2;
          *unsigned int v41 = v25;
          v41[1] = v26;
          v200 = v41;
          v201 = v41 + 2;
          int v42 = (uint64_t *)v24[6];
          if (!v42) {
            int v42 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          }
          unsigned int v43 = (uint64_t *)v42[4];
          if (v43) {
            size_t v44 = v43;
          }
          else {
            size_t v44 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v200)
          {
            v201 = v200;
            operator delete(v200);
          }
          if (*((char *)v23 + 23) >= 0) {
            size_t v45 = *((unsigned __int8 *)v23 + 23);
          }
          else {
            size_t v45 = (size_t)v23[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v197, v45 + 13);
          if (SHIBYTE(v199) >= 0) {
            int v46 = &v197;
          }
          else {
            int v46 = v197;
          }
          if (v45)
          {
            if (*((char *)v23 + 23) >= 0) {
              unsigned int v47 = v23;
            }
            else {
              unsigned int v47 = *v23;
            }
            memmove(v46, v47, v45);
          }
          strcpy((char *)v46 + v45, "_i2h_c_weight");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)&v197, (uint64_t)&v197, (uint64_t)&__p);
          if (SHIBYTE(v199) < 0) {
            operator delete(v197);
          }
          size_t v48 = operator new(0x10uLL);
          v196 = v48 + 2;
          void *v48 = v25;
          v48[1] = v26;
          v194 = v48;
          v195 = v48 + 2;
          int v49 = (uint64_t *)v24[6];
          if (!v49) {
            int v49 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          }
          unint64_t v50 = (uint64_t *)v49[5];
          if (v50) {
            int v51 = v50;
          }
          else {
            int v51 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v194)
          {
            v195 = v194;
            operator delete(v194);
          }
          if (*((char *)v23 + 23) >= 0) {
            size_t v52 = *((unsigned __int8 *)v23 + 23);
          }
          else {
            size_t v52 = (size_t)v23[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v191, v52 + 13);
          if (SHIBYTE(v193) >= 0) {
            char v53 = &v191;
          }
          else {
            char v53 = v191;
          }
          if (v52)
          {
            if (*((char *)v23 + 23) >= 0) {
              unint64_t v54 = v23;
            }
            else {
              unint64_t v54 = *v23;
            }
            memmove(v53, v54, v52);
          }
          strcpy((char *)v53 + v52, "_i2h_o_weight");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)&v191, (uint64_t)&v191, (uint64_t)&v197);
          if (SHIBYTE(v193) < 0) {
            operator delete(v191);
          }
          int v55 = operator new(0x10uLL);
          v190 = v55 + 2;
          *int v55 = v25;
          v55[1] = v25;
          v188 = v55;
          v189 = v55 + 2;
          size_t v56 = (uint64_t *)v24[6];
          if (!v56) {
            size_t v56 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          }
          uint64_t v57 = (uint64_t *)v56[6];
          if (v57) {
            unint64_t v58 = v57;
          }
          else {
            unint64_t v58 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v188)
          {
            v189 = v188;
            operator delete(v188);
          }
          if (*((char *)v23 + 23) >= 0) {
            size_t v59 = *((unsigned __int8 *)v23 + 23);
          }
          else {
            size_t v59 = (size_t)v23[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v185, v59 + 13);
          if (SHIBYTE(v187) >= 0) {
            size_t v60 = &v185;
          }
          else {
            size_t v60 = v185;
          }
          if (v59)
          {
            if (*((char *)v23 + 23) >= 0) {
              int v61 = v23;
            }
            else {
              int v61 = *v23;
            }
            memmove(v60, v61, v59);
          }
          strcpy((char *)v60 + v59, "_h2h_i_weight");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)&v185, (uint64_t)&v185, (uint64_t)&v191);
          if (SHIBYTE(v187) < 0) {
            operator delete(v185);
          }
          unsigned int v62 = operator new(0x10uLL);
          v184 = v62 + 2;
          *unsigned int v62 = v25;
          v62[1] = v25;
          v182 = v62;
          v183 = v62 + 2;
          uint64_t v63 = (uint64_t *)v24[6];
          if (!v63) {
            uint64_t v63 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          }
          uint64_t v64 = (uint64_t *)v63[7];
          if (v64) {
            std::locale v65 = v64;
          }
          else {
            std::locale v65 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v182)
          {
            v183 = v182;
            operator delete(v182);
          }
          if (*((char *)v23 + 23) >= 0) {
            size_t v66 = *((unsigned __int8 *)v23 + 23);
          }
          else {
            size_t v66 = (size_t)v23[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v180, v66 + 13);
          if (SHIBYTE(v181) >= 0) {
            unsigned __int8 v67 = v180;
          }
          else {
            unsigned __int8 v67 = (void **)v180[0];
          }
          if (v66)
          {
            if (*((char *)v23 + 23) >= 0) {
              uint64_t v68 = v23;
            }
            else {
              uint64_t v68 = *v23;
            }
            memmove(v67, v68, v66);
          }
          strcpy((char *)v67 + v66, "_h2h_f_weight");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)v180, (uint64_t)v180, (uint64_t)&v185);
          if (SHIBYTE(v181) < 0) {
            operator delete(v180[0]);
          }
          uint64_t v69 = operator new(0x10uLL);
          v178 = v69 + 2;
          v179 = v69 + 2;
          *uint64_t v69 = v25;
          v69[1] = v25;
          v177 = v69;
          uint64_t v70 = (uint64_t *)v24[6];
          if (!v70) {
            uint64_t v70 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          }
          uint64_t v71 = (uint64_t *)v70[8];
          if (v71) {
            char v72 = v71;
          }
          else {
            char v72 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v177)
          {
            v178 = v177;
            operator delete(v177);
          }
          if (*((char *)v23 + 23) >= 0) {
            size_t v73 = *((unsigned __int8 *)v23 + 23);
          }
          else {
            size_t v73 = (size_t)v23[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v175, v73 + 13);
          if (SHIBYTE(v176) >= 0) {
            std::locale v74 = v175;
          }
          else {
            std::locale v74 = (void **)v175[0];
          }
          if (v73)
          {
            if (*((char *)v23 + 23) >= 0) {
              char v75 = v23;
            }
            else {
              char v75 = *v23;
            }
            memmove(v74, v75, v73);
          }
          strcpy((char *)v74 + v73, "_h2h_c_weight");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)v175, (uint64_t)v175, (uint64_t)v180);
          if (SHIBYTE(v176) < 0) {
            operator delete(v175[0]);
          }
          int v76 = operator new(0x10uLL);
          v173 = v76 + 2;
          v174 = v76 + 2;
          *int v76 = v25;
          v76[1] = v25;
          v172 = v76;
          unsigned int v77 = (uint64_t *)v24[6];
          if (!v77) {
            unsigned int v77 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          }
          int v78 = (uint64_t *)v77[9];
          if (v78) {
            unsigned int v79 = v78;
          }
          else {
            unsigned int v79 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v172)
          {
            v173 = v172;
            operator delete(v172);
          }
          if (*((char *)v23 + 23) >= 0) {
            size_t v80 = *((unsigned __int8 *)v23 + 23);
          }
          else {
            size_t v80 = (size_t)v23[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v170, v80 + 13);
          if (SHIBYTE(v171) >= 0) {
            uint64_t v81 = v170;
          }
          else {
            uint64_t v81 = (void **)v170[0];
          }
          if (v80)
          {
            if (*((char *)v23 + 23) >= 0) {
              unsigned int v82 = v23;
            }
            else {
              unsigned int v82 = *v23;
            }
            memmove(v81, v82, v80);
          }
          strcpy((char *)v81 + v80, "_h2h_o_weight");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)v170, (uint64_t)v170, (uint64_t)v175);
          if (SHIBYTE(v171) < 0) {
            operator delete(v170[0]);
          }
          uint64_t v83 = operator new(8uLL);
          v167 = v83;
          *uint64_t v83 = v25;
          v168 = v83 + 1;
          v169 = v83 + 1;
          char v84 = (uint64_t *)v24[6];
          if (!v84) {
            char v84 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          }
          int v85 = (uint64_t *)v84[10];
          if (v85) {
            int v86 = v85;
          }
          else {
            int v86 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v167)
          {
            v168 = v167;
            operator delete(v167);
          }
          if (*((char *)v23 + 23) >= 0) {
            size_t v87 = *((unsigned __int8 *)v23 + 23);
          }
          else {
            size_t v87 = (size_t)v23[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v165, v87 + 11);
          if (SHIBYTE(v166) >= 0) {
            char v88 = v165;
          }
          else {
            char v88 = (void **)v165[0];
          }
          if (v87)
          {
            if (*((char *)v23 + 23) >= 0) {
              unsigned int v89 = v23;
            }
            else {
              unsigned int v89 = *v23;
            }
            memmove(v88, v89, v87);
          }
          strcpy((char *)v88 + v87, "_h2h_i_bias");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)v165, (uint64_t)v165, (uint64_t)v170);
          if (SHIBYTE(v166) < 0) {
            operator delete(v165[0]);
          }
          unsigned int v90 = operator new(8uLL);
          v162 = v90;
          *unsigned int v90 = v25;
          v163 = v90 + 1;
          v164 = v90 + 1;
          uint64_t v91 = (uint64_t *)v24[6];
          if (!v91) {
            uint64_t v91 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          }
          unsigned int v92 = (uint64_t *)v91[11];
          if (v92) {
            int v93 = v92;
          }
          else {
            int v93 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v162)
          {
            v163 = v162;
            operator delete(v162);
          }
          if (*((char *)v23 + 23) >= 0) {
            size_t v94 = *((unsigned __int8 *)v23 + 23);
          }
          else {
            size_t v94 = (size_t)v23[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v160, v94 + 11);
          if (SHIBYTE(v161) >= 0) {
            int v95 = v160;
          }
          else {
            int v95 = (void **)v160[0];
          }
          if (v94)
          {
            if (*((char *)v23 + 23) >= 0) {
              unint64_t v96 = v23;
            }
            else {
              unint64_t v96 = *v23;
            }
            memmove(v95, v96, v94);
          }
          strcpy((char *)v95 + v94, "_h2h_f_bias");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)v160, (uint64_t)v160, (uint64_t)v165);
          if (SHIBYTE(v161) < 0) {
            operator delete(v160[0]);
          }
          uint64_t v97 = operator new(8uLL);
          v157 = v97;
          *uint64_t v97 = v25;
          v158 = v97 + 1;
          v159 = v97 + 1;
          char v98 = (uint64_t *)v24[6];
          if (!v98) {
            char v98 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          }
          char v99 = (uint64_t *)v98[12];
          if (v99) {
            unint64_t v100 = v99;
          }
          else {
            unint64_t v100 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v157)
          {
            v158 = v157;
            operator delete(v157);
          }
          if (*((char *)v23 + 23) >= 0) {
            size_t v101 = *((unsigned __int8 *)v23 + 23);
          }
          else {
            size_t v101 = (size_t)v23[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v155, v101 + 11);
          if (SHIBYTE(v156) >= 0) {
            unint64_t v102 = v155;
          }
          else {
            unint64_t v102 = (void **)v155[0];
          }
          if (v101)
          {
            if (*((char *)v23 + 23) >= 0) {
              unint64_t v103 = v23;
            }
            else {
              unint64_t v103 = *v23;
            }
            memmove(v102, v103, v101);
          }
          strcpy((char *)v102 + v101, "_h2h_c_bias");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)v155, (uint64_t)v155, (uint64_t)v160);
          if (SHIBYTE(v156) < 0) {
            operator delete(v155[0]);
          }
          unint64_t v104 = operator new(8uLL);
          uint64_t v152 = v104;
          void *v104 = v25;
          v153 = v104 + 1;
          uint64_t v154 = v104 + 1;
          unint64_t v105 = (uint64_t *)v24[6];
          if (!v105) {
            unint64_t v105 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          }
          unint64_t v106 = (uint64_t *)v105[13];
          if (v106) {
            unint64_t v107 = v106;
          }
          else {
            unint64_t v107 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v152)
          {
            v153 = v152;
            operator delete(v152);
          }
          if (*((char *)v23 + 23) >= 0) {
            size_t v108 = *((unsigned __int8 *)v23 + 23);
          }
          else {
            size_t v108 = (size_t)v23[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v150, v108 + 11);
          if (v151 >= 0) {
            int v109 = v150;
          }
          else {
            int v109 = (void **)v150[0];
          }
          if (v108)
          {
            if (*((char *)v23 + 23) >= 0) {
              int v110 = v23;
            }
            else {
              int v110 = *v23;
            }
            memmove(v109, v110, v108);
          }
          strcpy((char *)v109 + v108, "_h2h_o_bias");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)v150, (uint64_t)v150, (uint64_t)v155);
          if (v151 < 0) {
            operator delete(v150[0]);
          }
          v155[0] = &unk_26D752D58;
          if (v156) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v156);
          }
          v160[0] = &unk_26D752D58;
          if (v161) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v161);
          }
          v165[0] = &unk_26D752D58;
          if (v166) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v166);
          }
          v170[0] = &unk_26D752D58;
          if (v171) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v171);
          }
          v175[0] = &unk_26D752D58;
          if (v176) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v176);
          }
          v180[0] = &unk_26D752D58;
          if (v181) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v181);
          }
          v185 = &unk_26D752D58;
          if (v187) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v187);
          }
          v191 = &unk_26D752D58;
          if (v193) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v193);
          }
          goto LABEL_410;
        }
      }
      else
      {
        if (v8 == 100)
        {
          int v111 = *(const void ***)(v7 + 112);
          uint64_t v112 = *(void *)(v7 + 128);
          LODWORD(v209[0]) = *(_DWORD *)(v112 + 16);
          if (LODWORD(v209[0]) != 2)
          {
            v214[0] = v209;
          }
          uint64_t v114 = *(void *)(v112 + 128);
          uint64_t v113 = *(void *)(v112 + 136);
          uint64_t v115 = *(void *)(v112 + 24);
          uint64_t v116 = *(void *)(v115 + 8);
          uint64_t v117 = *(void *)(v115 + 16);
          int v118 = (char *)operator new(0x20uLL);
          v205 = (std::__shared_weak_count *)(v118 + 32);
          *(void *)int v118 = v114;
          *((void *)v118 + 1) = v113;
          *((void *)v118 + 2) = v116;
          *((void *)v118 + 3) = v117;
          __p = v118;
          v204 = v118 + 32;
          if (*(void *)(v112 + 112)) {
            unsigned int v119 = *(uint64_t **)(v112 + 112);
          }
          else {
            unsigned int v119 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (__p) {
            operator delete(__p);
          }
          if (*((char *)v111 + 23) >= 0) {
            size_t v120 = *((unsigned __int8 *)v111 + 23);
          }
          else {
            size_t v120 = (size_t)v111[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v209, v120 + 7);
          if (SHIBYTE(v210) >= 0) {
            v121 = v209;
          }
          else {
            v121 = (const void **)v209[0];
          }
          if (v120)
          {
            if (*((char *)v111 + 23) >= 0) {
              v122 = v111;
            }
            else {
              v122 = *v111;
            }
            memmove(v121, v122, v120);
          }
          strcpy((char *)v121 + v120, "_weight");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, v209, (uint64_t)v209, (uint64_t)v214);
          if (SHIBYTE(v210) < 0) {
            operator delete((void *)v209[0]);
          }
          if ((uint64_t *)v112 == &CoreML::Specification::_ConvolutionLayerParams_default_instance_) {
            goto LABEL_416;
          }
          uint64_t v123 = *(void *)(v112 + 120);
          if (!v123) {
            goto LABEL_416;
          }
          int v124 = operator new(8uLL);
          v197 = v124;
          *int v124 = v114;
          v199 = (std::__shared_weak_count *)(v124 + 1);
          v198 = v124 + 1;
          if (v197) {
            operator delete(v197);
          }
          if (*((char *)v111 + 23) >= 0) {
            size_t v20 = *((unsigned __int8 *)v111 + 23);
          }
          else {
            size_t v20 = (size_t)v111[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v191, v20 + 5);
          if (SHIBYTE(v193) >= 0) {
            uint64_t v21 = &v191;
          }
          else {
            uint64_t v21 = v191;
          }
          if (v20)
          {
            if (*((char *)v111 + 23) >= 0) {
              int v125 = v111;
            }
            else {
              int v125 = *v111;
            }
            memmove(v21, v125, v20);
          }
          goto LABEL_335;
        }
        if (v8 == 140)
        {
          uint64_t v9 = *(const void ***)(v7 + 112);
          uint64_t v10 = *(uint64_t **)(v7 + 128);
          uint64_t v11 = v10[4];
          uint64_t v12 = v10[5];
          uint64_t v13 = (char *)operator new(0x20uLL);
          v205 = (std::__shared_weak_count *)(v13 + 32);
          *(void *)uint64_t v13 = v12;
          *((void *)v13 + 1) = v11;
          *((int64x2_t *)v13 + 1) = v149;
          __p = v13;
          v204 = v13 + 32;
          if (v10[2]) {
            uint64_t v14 = (uint64_t *)v10[2];
          }
          else {
            uint64_t v14 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          if (__p) {
            operator delete(__p);
          }
          if (*((char *)v9 + 23) >= 0) {
            size_t v15 = *((unsigned __int8 *)v9 + 23);
          }
          else {
            size_t v15 = (size_t)v9[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v209, v15 + 7);
          if (SHIBYTE(v210) >= 0) {
            uint64_t v16 = v209;
          }
          else {
            uint64_t v16 = (const void **)v209[0];
          }
          if (v15)
          {
            if (*((char *)v9 + 23) >= 0) {
              uint64_t v17 = v9;
            }
            else {
              uint64_t v17 = *v9;
            }
            memmove(v16, v17, v15);
          }
          strcpy((char *)v16 + v15, "_weight");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, v209, (uint64_t)v209, (uint64_t)v214);
          if (SHIBYTE(v210) < 0) {
            operator delete((void *)v209[0]);
          }
          if (v10 == &CoreML::Specification::_InnerProductLayerParams_default_instance_) {
            goto LABEL_416;
          }
          uint64_t v18 = v10[3];
          if (!v18) {
            goto LABEL_416;
          }
          char v19 = operator new(8uLL);
          v197 = v19;
          void *v19 = v12;
          v199 = (std::__shared_weak_count *)(v19 + 1);
          v198 = v19 + 1;
          if (v197) {
            operator delete(v197);
          }
          if (*((char *)v9 + 23) >= 0) {
            size_t v20 = *((unsigned __int8 *)v9 + 23);
          }
          else {
            size_t v20 = (size_t)v9[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v191, v20 + 5);
          if (SHIBYTE(v193) >= 0) {
            uint64_t v21 = &v191;
          }
          else {
            uint64_t v21 = v191;
          }
          if (v20)
          {
            if (*((char *)v9 + 23) >= 0) {
              uint64_t v22 = v9;
            }
            else {
              uint64_t v22 = *v9;
            }
            memmove(v21, v22, v20);
          }
LABEL_335:
          strcpy((char *)v21 + v20, "_bias");
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>((uint64_t **)a2, (const void **)&v191, (uint64_t)&v191, (uint64_t)v209);
          if (SHIBYTE(v193) < 0) {
            operator delete(v191);
          }
          goto LABEL_414;
        }
      }
LABEL_418:
      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
}

void sub_2242EDF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  STACK[0x2C8] = (unint64_t)&unk_26D752D58;
  if (STACK[0x2D8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2D8]);
  }
  STACK[0x318] = (unint64_t)&unk_26D752D58;
  if (STACK[0x328]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x328]);
  }
  *(void *)(v54 - 232) = &unk_26D752D58;
  size_t v56 = *(std::__shared_weak_count **)(v54 - 216);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  *(void *)(v54 - 152) = &unk_26D752D58;
  uint64_t v57 = *(std::__shared_weak_count **)(v54 - 136);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v53, *(void **)(v53 + 8));
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::update_params(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(int *)(*(void *)a1 + 24);
  if (v5)
  {
    uint64_t v8 = 8 * v5;
    do
    {
      uint64_t v9 = *v4++;
      v8 -= 8;
    }
    while (v8);
  }
}

std::string *turi::neural_net::model_spec::add_relu(void *a1, std::string *a2, std::string *a3)
{
  uint64_t v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v6 = (std::string *)*((void *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v6, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, a3);
  uint64_t result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 130)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 130;
    operator new();
  }
  uint64_t v8 = *((void *)v5 + 16);
  if (*(_DWORD *)(v8 + 28) != 10)
  {
    CoreML::Specification::ActivationParams::clear_NonlinearityType(v8);
    *(_DWORD *)(v8 + 28) = 10;
    operator new();
  }
  return result;
}

void sub_2242EE628(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::NeuralNetworkLayer::add_input(uint64_t a1, std::string *__str)
{
  uint64_t v4 = (_tc_google::protobuf::Arena **)(a1 + 16);
  uint64_t v5 = *(int **)(a1 + 32);
  if (!v5)
  {
    int v7 = *(_DWORD *)(a1 + 28);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 16), v7 + 1);
    uint64_t v5 = *(int **)(a1 + 32);
    int v7 = *v5;
    goto LABEL_7;
  }
  uint64_t v6 = *(int *)(a1 + 24);
  int v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(a1 + 24) = v6 + 1;
    Aligned = *(std::string **)&v5[2 * v6 + 2];
    goto LABEL_10;
  }
  if (v7 == *(_DWORD *)(a1 + 28)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v5 = v7 + 1;
  uint64_t v9 = *v4;
  if (!*v4) {
    operator new();
  }
  Aligned->__r_.__value_.__l.__size_ = 0;
  Aligned->__r_.__value_.__r.__words[2] = 0;
  Aligned->__r_.__value_.__r.__words[0] = 0;
  _tc_google::protobuf::Arena::AddListNode(v9, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v11 + 1;
  *(void *)(v10 + 8 * v11 + 8) = Aligned;
LABEL_10:
  return std::string::operator=(Aligned, __str);
}

std::string *CoreML::Specification::NeuralNetworkLayer::add_output(uint64_t a1, std::string *__str)
{
  uint64_t v4 = (_tc_google::protobuf::Arena **)(a1 + 40);
  uint64_t v5 = *(int **)(a1 + 56);
  if (!v5)
  {
    int v7 = *(_DWORD *)(a1 + 52);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 40), v7 + 1);
    uint64_t v5 = *(int **)(a1 + 56);
    int v7 = *v5;
    goto LABEL_7;
  }
  uint64_t v6 = *(int *)(a1 + 48);
  int v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(a1 + 48) = v6 + 1;
    Aligned = *(std::string **)&v5[2 * v6 + 2];
    goto LABEL_10;
  }
  if (v7 == *(_DWORD *)(a1 + 52)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v5 = v7 + 1;
  uint64_t v9 = *v4;
  if (!*v4) {
    operator new();
  }
  Aligned->__r_.__value_.__l.__size_ = 0;
  Aligned->__r_.__value_.__r.__words[2] = 0;
  Aligned->__r_.__value_.__r.__words[0] = 0;
  _tc_google::protobuf::Arena::AddListNode(v9, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(int *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v11 + 1;
  *(void *)(v10 + 8 * v11 + 8) = Aligned;
LABEL_10:
  return std::string::operator=(Aligned, __str);
}

std::string *turi::neural_net::model_spec::add_sigmoid(void *a1, std::string *a2, std::string *a3)
{
  uint64_t v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v6 = (std::string *)*((void *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v6, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, a3);
  uint64_t result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 130)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 130;
    operator new();
  }
  uint64_t v8 = *((void *)v5 + 16);
  if (*(_DWORD *)(v8 + 28) != 40)
  {
    CoreML::Specification::ActivationParams::clear_NonlinearityType(v8);
    *(_DWORD *)(v8 + 28) = 40;
    operator new();
  }
  return result;
}

void sub_2242EE9C4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_pooling(void *a1, std::string *a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9, unsigned int a10)
{
  uint64_t v17 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v18 = (std::string *)*((void *)v17 + 14);
  if (v18 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v18, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v17, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v17, a2);
  if (*((_DWORD *)v17 + 35) != 120)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v17);
    *((_DWORD *)v17 + 35) = 120;
    operator new();
  }
  uint64_t v19 = *((void *)v17 + 16);
  int v20 = *(_DWORD *)(v19 + 16);
  int v21 = *(_DWORD *)(v19 + 20);
  if (v20 == v21)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v19 + 16), v20 + 1);
    int v20 = *(_DWORD *)(v19 + 16);
    int v21 = *(_DWORD *)(v19 + 20);
  }
  uint64_t v22 = *(void *)(v19 + 24);
  int v23 = v20 + 1;
  *(_DWORD *)(v19 + 16) = v20 + 1;
  *(void *)(v22 + 8 * v20 + 8) = a4;
  if (v20 + 1 == v21)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v19 + 16), v20 + 2);
    int v23 = *(_DWORD *)(v19 + 16);
    uint64_t v22 = *(void *)(v19 + 24);
  }
  int v24 = *(_DWORD *)(v19 + 40);
  *(_DWORD *)(v19 + 16) = v23 + 1;
  *(void *)(v22 + 8 * v23 + 8) = a5;
  int v25 = *(_DWORD *)(v19 + 44);
  if (v24 == v25)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v19 + 40), v24 + 1);
    int v24 = *(_DWORD *)(v19 + 40);
    int v25 = *(_DWORD *)(v19 + 44);
  }
  uint64_t v26 = *(void *)(v19 + 48);
  int v27 = v24 + 1;
  *(_DWORD *)(v19 + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = v24 + 1;
  *(void *)(v26 + 8 * v24 + 8) = a6;
  if (v24 + 1 == v25)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v19 + 40), v24 + 2);
    int v27 = *(_DWORD *)(v19 + 40);
    uint64_t v26 = *(void *)(v19 + 48);
  }
  *(_DWORD *)(v19 + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = v27 + 1;
  *(void *)(v26 + 8 * v27 + 8) = a7;
  if (a8 == 1)
  {
    if (*(_DWORD *)(v19 + 84) != 31)
    {
      CoreML::Specification::PoolingLayerParams::clear_PoolingPaddingType(v19);
      *(_DWORD *)(v19 + 84) = 31;
      operator new();
    }
  }
  else if (!a8)
  {
    if (*(_DWORD *)(v19 + 84) != 30)
    {
      CoreML::Specification::PoolingLayerParams::clear_PoolingPaddingType(v19);
      *(_DWORD *)(v19 + 84) = 30;
      operator new();
    }
    uint64_t v28 = *(void *)(*(void *)(v19 + 72) + 16);
    if (!v28) {
      operator new();
    }
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BorderAmounts_EdgeSizes>::TypeHandler>(v28 + 16);
    if (*(_DWORD *)(v19 + 84) != 30)
    {
      CoreML::Specification::PoolingLayerParams::clear_PoolingPaddingType(v19);
      *(_DWORD *)(v19 + 84) = 30;
      operator new();
    }
    uint64_t v29 = *(void *)(*(void *)(v19 + 72) + 16);
    if (!v29) {
      operator new();
    }
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BorderAmounts_EdgeSizes>::TypeHandler>(v29 + 16);
  }
  if (a9) {
    *(unsigned char *)(v19 + 64) = 1;
  }
  if (a10 <= 2) {
    *(_DWORD *)(v19 + 6CoreML::Specification::NonMaximumSuppression::New(this, 0) = a10;
  }
}

void sub_2242EED28(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::model_spec::add_convolution(void *a1, std::string *a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  int v20 = (std::string *)*((void *)v19 + 14);
  if (v20 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v20, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v19, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v19, a2);
  if (*((_DWORD *)v19 + 35) != 100)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v19);
    *((_DWORD *)v19 + 35) = 100;
    operator new();
  }
  uint64_t v21 = *((void *)v19 + 16);
  int v22 = *(_DWORD *)(v21 + 16);
  *(void *)(v21 + 128) = a4;
  *(void *)(v21 + 136) = a5;
  *(void *)(v21 + 144) = 1;
  int v23 = *(_DWORD *)(v21 + 20);
  if (v22 == v23)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v21 + 16), v22 + 1);
    int v22 = *(_DWORD *)(v21 + 16);
    int v23 = *(_DWORD *)(v21 + 20);
  }
  uint64_t v24 = *(void *)(v21 + 24);
  int v25 = v22 + 1;
  *(_DWORD *)(v21 + 16) = v22 + 1;
  *(void *)(v24 + 8 * v22 + 8) = a6;
  if (v22 + 1 == v23)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v21 + 16), v22 + 2);
    int v25 = *(_DWORD *)(v21 + 16);
    uint64_t v24 = *(void *)(v21 + 24);
  }
  int v26 = *(_DWORD *)(v21 + 40);
  *(_DWORD *)(v21 + 16) = v25 + 1;
  *(void *)(v24 + 8 * v25 + 8) = a7;
  int v27 = *(_DWORD *)(v21 + 44);
  if (v26 == v27)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v21 + 40), v26 + 1);
    int v26 = *(_DWORD *)(v21 + 40);
    int v27 = *(_DWORD *)(v21 + 44);
  }
  uint64_t v28 = *(void *)(v21 + 48);
  int v29 = v26 + 1;
  *(_DWORD *)(v21 + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = v26 + 1;
  *(void *)(v28 + 8 * v26 + 8) = a8;
  if (v26 + 1 == v27)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v21 + 40), v26 + 2);
    int v29 = *(_DWORD *)(v21 + 40);
    uint64_t v28 = *(void *)(v21 + 48);
  }
  int v30 = *(_DWORD *)(v21 + 64);
  *(_DWORD *)(v21 + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = v29 + 1;
  *(void *)(v28 + 8 * v29 + 8) = a9;
  int v31 = *(_DWORD *)(v21 + 68);
  if (v30 == v31)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v21 + 64), v30 + 1);
    int v30 = *(_DWORD *)(v21 + 64);
    int v31 = *(_DWORD *)(v21 + 68);
  }
  uint64_t v32 = *(void *)(v21 + 72);
  int v33 = v30 + 1;
  *(_DWORD *)(v21 + 64) = v30 + 1;
  *(void *)(v32 + 8 * v30 + 8) = 1;
  if (v30 + 1 == v31)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v21 + 64), v30 + 2);
    int v33 = *(_DWORD *)(v21 + 64);
    uint64_t v32 = *(void *)(v21 + 72);
  }
  *(_DWORD *)(v21 + 64) = v33 + 1;
  *(void *)(v32 + 8 * v33 + 8) = 1;
  if (a10 == 1)
  {
    if (*(_DWORD *)(v21 + 172) != 51)
    {
      CoreML::Specification::ConvolutionLayerParams::clear_ConvolutionPaddingType(v21);
      *(_DWORD *)(v21 + 172) = 51;
      operator new();
    }
    *(_DWORD *)(*(void *)(v21 + 160) + 16) = 1;
  }
  else if (!a10)
  {
    if (*(_DWORD *)(v21 + 172) != 50)
    {
      CoreML::Specification::ConvolutionLayerParams::clear_ConvolutionPaddingType(v21);
      *(_DWORD *)(v21 + 172) = 50;
      operator new();
    }
    uint64_t v34 = *(void *)(*(void *)(v21 + 160) + 16);
    if (!v34) {
      operator new();
    }
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BorderAmounts_EdgeSizes>::TypeHandler>(v34 + 16);
    if (*(_DWORD *)(v21 + 172) != 50)
    {
      CoreML::Specification::ConvolutionLayerParams::clear_ConvolutionPaddingType(v21);
      *(_DWORD *)(v21 + 172) = 50;
      operator new();
    }
    uint64_t v35 = *(void *)(*(void *)(v21 + 160) + 16);
    if (!v35) {
      operator new();
    }
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BorderAmounts_EdgeSizes>::TypeHandler>(v35 + 16);
  }
  uint64_t v36 = *(void *)(v21 + 112);
  if (!v36) {
    operator new();
  }
  if (*(void *)(a12 + 24))
  {
    *(unsigned char *)(v21 + 153) = 1;
    uint64_t v38 = *(void *)(v21 + 120);
    if (!v38) {
      operator new();
    }
  }
  return result;
}

void sub_2242EF210(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::anonymous namespace'::init_weight_params(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) >= (int)a2)
  {
    uint64_t v7 = *(void *)(a1 + 24);
  }
  else
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(a1 + 16), a2);
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = 4 * (int)a2 - 4 * *(int *)(a1 + 16);
    if (v8 >= 1) {
      bzero((void *)(v7 + 8 + 4 * *(int *)(a1 + 16)), 4 * (((unint64_t)v8 >> 2) - ((unint64_t)v8 > 3)) + 4);
    }
  }
  _DWORD *v6 = a2;
  if (v7) {
    uint64_t v9 = v7 + 8;
  }
  else {
    uint64_t v9 = 0;
  }
  return std::function<void ()(float *,float *)>::operator()(a3, v9, v9 + 4 * a2);
}

CoreML::Specification::BorderAmounts_EdgeSizes *turi::neural_net::model_spec::add_padding(void *a1, std::string *a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  size_t v15 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v16 = (std::string *)*((void *)v15 + 14);
  if (v16 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v16, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v15, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v15, a2);
  if (*((_DWORD *)v15 + 35) != 200)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v15);
    *((_DWORD *)v15 + 35) = 200;
    operator new();
  }
  uint64_t v17 = *((void *)v15 + 16);
  uint64_t v18 = *(void *)(v17 + 16);
  if (!v18) {
    operator new();
  }
  uint64_t v19 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BorderAmounts_EdgeSizes>::TypeHandler>(v18 + 16);
  uint64_t v20 = *(void *)(v17 + 16);
  if (!v20) {
    operator new();
  }
  uint64_t result = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BorderAmounts_EdgeSizes>::TypeHandler>(v20 + 16);
  *((void *)v19 + 2) = a4;
  *((void *)v19 + 3) = a5;
  *((void *)result + 2) = a6;
  *((void *)result + 3) = a7;
  if (a8 == 2)
  {
    if (*(_DWORD *)(v17 + 36) != 1)
    {
      CoreML::Specification::PaddingLayerParams::clear_PaddingType(v17);
      *(_DWORD *)(v17 + 36) = 1;
      operator new();
    }
    *(_DWORD *)(*(void *)(v17 + 24) + 16) = 0;
  }
  else if (a8 == 1)
  {
    if (*(_DWORD *)(v17 + 36) != 3)
    {
      CoreML::Specification::PaddingLayerParams::clear_PaddingType(v17);
      *(_DWORD *)(v17 + 36) = 3;
      operator new();
    }
  }
  else if (!a8 && *(_DWORD *)(v17 + 36) != 2)
  {
    CoreML::Specification::PaddingLayerParams::clear_PaddingType(v17);
    *(_DWORD *)(v17 + 36) = 2;
    operator new();
  }
  return result;
}

void sub_2242EF5B4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_upsampling(void *a1, std::string *a2, std::string *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v10 = (std::string *)*((void *)v9 + 14);
  if (v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v10, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v9, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v9, a2);
  if (*((_DWORD *)v9 + 35) != 210)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v9);
    *((_DWORD *)v9 + 35) = 210;
    operator new();
  }
  uint64_t v11 = *((void *)v9 + 16);
  int v12 = *(_DWORD *)(v11 + 16);
  int v13 = *(_DWORD *)(v11 + 20);
  if (v12 == v13)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v11 + 16), v12 + 1);
    int v12 = *(_DWORD *)(v11 + 16);
    int v13 = *(_DWORD *)(v11 + 20);
  }
  uint64_t v14 = *(void *)(v11 + 24);
  int v15 = v12 + 1;
  *(_DWORD *)(v11 + 16) = v12 + 1;
  *(void *)(v14 + 8 * v12 + 8) = a4;
  if (v12 + 1 == v13)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v11 + 16), v12 + 2);
    int v15 = *(_DWORD *)(v11 + 16);
    uint64_t v14 = *(void *)(v11 + 24);
  }
  *(_DWORD *)(v11 + 16) = v15 + 1;
  *(void *)(v14 + 8 * v15 + 8) = a5;
}

void sub_2242EF768(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40BDAE892FLL);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::model_spec::add_inner_product(void *a1, std::string *a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v14 = (std::string *)*((void *)v13 + 14);
  if (v14 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v14, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v13, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v13, a2);
  if (*((_DWORD *)v13 + 35) != 140)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v13);
    *((_DWORD *)v13 + 35) = 140;
    operator new();
  }
  uint64_t v15 = *((void *)v13 + 16);
  *(void *)(v15 + 32) = a5;
  *(void *)(v15 + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = a4;
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16) {
    operator new();
  }
  if (*(void *)(a7 + 24))
  {
    *(unsigned char *)(v15 + 48) = 1;
    if (!*(void *)(v15 + 24)) {
      operator new();
    }
    uint64_t v18 = *(void *)(v15 + 24);
  }
  return result;
}

void sub_2242EF928(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_batchnorm(void *a1, std::string *a2, std::string *a3, uint64_t a4, float a5)
{
  uint64_t v9 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v10 = (std::string *)*((void *)v9 + 14);
  if (v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v10, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v9, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v9, a2);
  if (*((_DWORD *)v9 + 35) != 160)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v9);
    *((_DWORD *)v9 + 35) = 160;
    operator new();
  }
  uint64_t v11 = *((void *)v9 + 16);
  *(void *)(v11 + 48) = a4;
  *(float *)(v11 + 6CoreML::Specification::NonMaximumSuppression::New(this, 0) = a5;
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    operator new();
  }
  if (*(_DWORD *)(v12 + 16) < (int)a4)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v12 + 16), a4);
    uint64_t v13 = 4 * (int)a4 - 4 * *(int *)(v12 + 16);
    if (v13 >= 1) {
      memset_pattern16((void *)(*(void *)(v12 + 24) + 8 + 4 * *(int *)(v12 + 16)), &unk_2246B8370, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
    }
  }
  *(_DWORD *)(v12 + 16) = a4;
  uint64_t v14 = *(void *)(v11 + 24);
  if (!v14) {
    operator new();
  }
  if (*(_DWORD *)(v14 + 16) < (int)a4)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v14 + 16), a4);
    uint64_t v15 = 4 * (int)a4 - 4 * *(int *)(v14 + 16);
    if (v15 >= 1) {
      bzero((void *)(*(void *)(v14 + 24) + 8 + 4 * *(int *)(v14 + 16)), 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
    }
  }
  *(_DWORD *)(v14 + 16) = a4;
  uint64_t v16 = *(void *)(v11 + 32);
  if (!v16) {
    operator new();
  }
  if (*(_DWORD *)(v16 + 16) < (int)a4)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v16 + 16), a4);
    uint64_t v17 = 4 * (int)a4 - 4 * *(int *)(v16 + 16);
    if (v17 >= 1) {
      bzero((void *)(*(void *)(v16 + 24) + 8 + 4 * *(int *)(v16 + 16)), 4 * (((unint64_t)v17 >> 2) - ((unint64_t)v17 > 3)) + 4);
    }
  }
  *(_DWORD *)(v16 + 16) = a4;
  uint64_t v18 = *(void *)(v11 + 40);
  if (!v18) {
    operator new();
  }
  if (*(_DWORD *)(v18 + 16) < (int)a4)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v18 + 16), a4);
    uint64_t v19 = 4 * (int)a4 - 4 * *(int *)(v18 + 16);
    if (v19 >= 1) {
      memset_pattern16((void *)(*(void *)(v18 + 24) + 8 + 4 * *(int *)(v18 + 16)), &unk_2246B8370, 4 * (((unint64_t)v19 >> 2) - ((unint64_t)v19 > 3)) + 4);
    }
  }
  *(_DWORD *)(v18 + 16) = a4;
}

void sub_2242EFC90(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_instancenorm(void *a1, std::string *a2, std::string *a3, uint64_t a4, float a5)
{
  uint64_t v9 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v10 = (std::string *)*((void *)v9 + 14);
  if (v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v10, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v9, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v9, a2);
  if (*((_DWORD *)v9 + 35) != 160)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v9);
    *((_DWORD *)v9 + 35) = 160;
    operator new();
  }
  uint64_t v11 = *((void *)v9 + 16);
  *(void *)(v11 + 48) = a4;
  *(float *)(v11 + 6CoreML::Specification::NonMaximumSuppression::New(this, 0) = a5;
  *(_WORD *)(v11 + 56) = 257;
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    operator new();
  }
  if (*(_DWORD *)(v12 + 16) < (int)a4)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v12 + 16), a4);
    uint64_t v13 = 4 * (int)a4 - 4 * *(int *)(v12 + 16);
    if (v13 >= 1) {
      memset_pattern16((void *)(*(void *)(v12 + 24) + 8 + 4 * *(int *)(v12 + 16)), &unk_2246B8370, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
    }
  }
  *(_DWORD *)(v12 + 16) = a4;
  uint64_t v14 = *(void *)(v11 + 24);
  if (!v14) {
    operator new();
  }
  if (*(_DWORD *)(v14 + 16) < (int)a4)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v14 + 16), a4);
    uint64_t v15 = 4 * (int)a4 - 4 * *(int *)(v14 + 16);
    if (v15 >= 1) {
      bzero((void *)(*(void *)(v14 + 24) + 8 + 4 * *(int *)(v14 + 16)), 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
    }
  }
  *(_DWORD *)(v14 + 16) = a4;
}

void sub_2242EFEE8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_channel_concat(void *a1, std::string *a2, std::string **a3)
{
  uint64_t v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v6 = (std::string *)*((void *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v6, a2);
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  while (v8 != v7)
    CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, v8++);
  uint64_t result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 320)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 320;
    operator new();
  }
  return result;
}

void sub_2242F0000(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_softmax(void *a1, std::string *a2, std::string *a3)
{
  uint64_t v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v6 = (std::string *)*((void *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v6, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, a3);
  uint64_t result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 175)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 175;
    operator new();
  }
  return result;
}

void sub_2242F00E8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_addition(void *a1, std::string *a2, std::string **a3)
{
  uint64_t v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v6 = (std::string *)*((void *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v6, a2);
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  while (v8 != v7)
    CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, v8++);
  uint64_t result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 230)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 230;
    operator new();
  }
  return result;
}

void sub_2242F01E0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_multiplication(void *a1, std::string *a2, std::string **a3)
{
  uint64_t v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v6 = (std::string *)*((void *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v6, a2);
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  while (v8 != v7)
    CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, v8++);
  uint64_t result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 231)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 231;
    operator new();
  }
  return result;
}

void sub_2242F02D8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::model_spec::add_scale(void *a1, std::string *a2, std::string *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v10 = (std::string *)*((void *)v9 + 14);
  if (v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v10, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v9, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v9, a2);
  if (*((_DWORD *)v9 + 35) != 245)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v9);
    *((_DWORD *)v9 + 35) = 245;
    operator new();
  }
  uint64_t v11 = *((void *)v9 + 16);
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  if (v13 == *a4)
  {
    uint64_t v16 = 1;
  }
  else
  {
    unint64_t v14 = 0;
    int v15 = *(_DWORD *)(v11 + 16);
    uint64_t v16 = 1;
    do
    {
      uint64_t v17 = *(void *)(v12 + 8 * v14);
      if (v15 == *(_DWORD *)(v11 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v11 + 16), v15 + 1);
        int v15 = *(_DWORD *)(v11 + 16);
        uint64_t v12 = *a4;
        uint64_t v13 = a4[1];
        uint64_t v18 = *(void *)(*a4 + 8 * v14);
      }
      else
      {
        uint64_t v18 = *(void *)(v12 + 8 * v14);
      }
      uint64_t v19 = *(void *)(v11 + 24) + 8 * v15++;
      *(_DWORD *)(v11 + 16) = v15;
      *(void *)(v19 + 8) = v17;
      v16 *= v18;
      ++v14;
    }
    while (v14 < (v13 - v12) >> 3);
  }
  if (!*(void *)(v11 + 64)) {
    operator new();
  }
  uint64_t v20 = *(void *)(v11 + 64);
}

void sub_2242F04A4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_reshape(void *a1, std::string *a2, std::string *a3, uint64_t a4)
{
  uint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v8 = (std::string *)*((void *)v7 + 14);
  if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v8, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v7, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v7, a2);
  if (*((_DWORD *)v7 + 35) != 300)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v7);
    *((_DWORD *)v7 + 35) = 300;
    operator new();
  }
  uint64_t v9 = *((void *)v7 + 16);
  uint64_t v10 = 0;
  int v11 = *(_DWORD *)(v9 + 16);
  do
  {
    uint64_t v12 = *(void *)(a4 + v10);
    if (v11 == *(_DWORD *)(v9 + 20))
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v9 + 16), v11 + 1);
      int v11 = *(_DWORD *)(v9 + 16);
    }
    uint64_t v13 = *(void *)(v9 + 24) + 8 * v11++;
    *(_DWORD *)(v9 + 16) = v11;
    *(void *)(v13 + 8) = v12;
    v10 += 8;
  }
  while (v10 != 32);
}

void sub_2242F0600(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40EA59D502);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_channel_slice(void *a1, std::string *a2, std::string *a3, int a4, int a5, uint64_t a6)
{
  int v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v12 = (std::string *)*((void *)v11 + 14);
  if (v12 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v12, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v11, a3);
  uint64_t result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v11, a2);
  if (*((_DWORD *)v11 + 35) != 350)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v11);
    *((_DWORD *)v11 + 35) = 350;
    operator new();
  }
  uint64_t v14 = *((void *)v11 + 16);
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  *(void *)(v14 + 32) = a6;
  *(_DWORD *)(v14 + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = 0;
  return result;
}

void sub_2242F0718(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40DAA165ECLL);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::model_spec::add_lstm(void *a1, std::string *a2, std::string *a3, std::string *a4, std::string *a5, std::string *a6, std::string *a7, uint64_t a8, float a9, uint64_t a10, void *a11)
{
  if (a11[35]) {
    BOOL v19 = a11[39] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  BOOL v46 = !v19 && a11[43] != 0 && a11[47] != 0;
  uint64_t v21 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  int v22 = (std::string *)*((void *)v21 + 14);
  if (v22 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v22, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v21, a3);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v21, a4);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v21, a5);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v21, a2);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v21, a6);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v21, a7);
  if (*((_DWORD *)v21 + 35) != 420)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v21);
    *((_DWORD *)v21 + 35) = 420;
    operator new();
  }
  int v23 = (void *)*((void *)v21 + 16);
  v23[7] = a8;
  v23[8] = a10;
  uint64_t v24 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ActivationParams>::TypeHandler>((uint64_t)(v23 + 2));
  if (*((_DWORD *)v24 + 7) != 40)
  {
    int v25 = v24;
    CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)v24);
    *((_DWORD *)v25 + 7) = 40;
    operator new();
  }
  int v26 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ActivationParams>::TypeHandler>((uint64_t)(v23 + 2));
  if (*((_DWORD *)v26 + 7) != 30)
  {
    int v27 = v26;
    CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)v26);
    *((_DWORD *)v27 + 7) = 30;
    operator new();
  }
  uint64_t v28 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ActivationParams>::TypeHandler>((uint64_t)(v23 + 2));
  if (*((_DWORD *)v28 + 7) != 30)
  {
    int v29 = v28;
    CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)v28);
    *((_DWORD *)v29 + 7) = 30;
    operator new();
  }
  uint64_t v30 = v23[5];
  if (!v30) {
    operator new();
  }
  *(unsigned char *)(v30 + 21) = v46;
  *(float *)(v30 + 16) = a9;
  int v31 = (void *)v23[6];
  if (!v31) {
    operator new();
  }
  uint64_t v32 = v31[2];
  if (!v32) {
    operator new();
  }
  uint64_t v33 = a10 * a8;
  uint64_t v34 = v31[3];
  if (!v34) {
    operator new();
  }
  uint64_t v35 = v31[4];
  if (!v35) {
    operator new();
  }
  uint64_t v36 = v31[5];
  if (!v36) {
    operator new();
  }
  uint64_t v37 = v31[6];
  if (!v37) {
    operator new();
  }
  uint64_t v38 = v31[7];
  if (!v38) {
    operator new();
  }
  uint64_t v39 = v31[8];
  if (!v39) {
    operator new();
  }
  uint64_t v40 = v31[9];
  if (!v40) {
    operator new();
  }
  uint64_t v41 = v31[10];
  if (!v41) {
    operator new();
  }
  uint64_t v42 = v31[11];
  if (!v42) {
    operator new();
  }
  uint64_t v43 = v31[12];
  if (!v43) {
    operator new();
  }
  uint64_t v44 = v31[13];
  if (!v44) {
    operator new();
  }
}

void sub_2242F0CE8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

void sub_2242F0D94()
{
}

void turi::neural_net::model_spec::add_transpose(void *a1, std::string *a2, std::string *a3, uint64_t **a4)
{
  uint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v8 = (std::string *)*((void *)v7 + 14);
  if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v8, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v7, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v7, a2);
  if (*((_DWORD *)v7 + 35) != 985)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v7);
    *((_DWORD *)v7 + 35) = 985;
    operator new();
  }
  uint64_t v9 = *((void *)v7 + 16);
  uint64_t v10 = *a4;
  int v11 = a4[1];
  if (*a4 != v11)
  {
    int v12 = *(_DWORD *)(v9 + 16);
    do
    {
      uint64_t v13 = *v10;
      if (v12 == *(_DWORD *)(v9 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v9 + 16), v12 + 1);
        int v12 = *(_DWORD *)(v9 + 16);
      }
      uint64_t v14 = *(void *)(v9 + 24) + 8 * v12++;
      *(_DWORD *)(v9 + 16) = v12;
      *(void *)(v14 + 8) = v13;
      ++v10;
    }
    while (v10 != v11);
  }
}

void sub_2242F0ED4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_split_nd(void *a1, uint64_t a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t **a6)
{
  uint64_t v9 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v10 = (std::string *)*((void *)v9 + 14);
  if (v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v10, (const std::string *)a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v9, a3);
  if (a5)
  {
    unint64_t v11 = 0;
    do
    {
      if (*(char *)(a2 + 23) >= 0) {
        size_t v12 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v12 = *(void *)(a2 + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v28, v12 + 1);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v13 = &v28;
      }
      else {
        uint64_t v13 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if (v12)
      {
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v14 = (const void *)a2;
        }
        else {
          uint64_t v14 = *(const void **)a2;
        }
        memmove(v13, v14, v12);
      }
      *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 95;
      std::to_string(&v27, v11);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v15 = &v27;
      }
      else {
        int v15 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v27.__r_.__value_.__l.__size_;
      }
      uint64_t v17 = std::string::append(&v28, (const std::string::value_type *)v15, size);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      std::string::size_type v30 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v9 + 40, (long long *)__p);
      if (SHIBYTE(v30) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      ++v11;
    }
    while (a5 != v11);
  }
  if (*((_DWORD *)v9 + 35) != 975)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v9);
    *((_DWORD *)v9 + 35) = 975;
    operator new();
  }
  uint64_t v19 = *((void *)v9 + 16);
  *(void *)(v19 + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = a4;
  *(void *)(v19 + 48) = a5;
  uint64_t v20 = *a6;
  uint64_t v21 = a6[1];
  if (*a6 != v21)
  {
    int v22 = *(_DWORD *)(v19 + 16);
    do
    {
      uint64_t v23 = *v20;
      if (v22 == *(_DWORD *)(v19 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v19 + 16), v22 + 1);
        int v22 = *(_DWORD *)(v19 + 16);
      }
      uint64_t v24 = *(void *)(v19 + 24) + 8 * v22++;
      *(_DWORD *)(v19 + 16) = v22;
      *(void *)(v24 + 8) = v23;
      ++v20;
    }
    while (v20 != v21);
  }
}

void sub_2242F113C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  MEMORY[0x22A614FA0](v28, 0x10A1C40C7CBD27BLL);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_concat_nd(void *a1, std::string *a2, std::string **a3, uint64_t a4)
{
  uint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v8 = (std::string *)*((void *)v7 + 14);
  if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v8, a2);
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  while (v10 != v9)
    CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v7, v10++);
  uint64_t result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v7, a2);
  if (*((_DWORD *)v7 + 35) != 980)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v7);
    *((_DWORD *)v7 + 35) = 980;
    operator new();
  }
  *(void *)(*((void *)v7 + 16) + 16) = a4;
  return result;
}

void sub_2242F1294(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40E45386B4);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_reshape_static(void *a1, std::string *a2, std::string *a3, uint64_t *a4)
{
  uint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v8 = (std::string *)*((void *)v7 + 14);
  if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v8, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v7, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v7, a2);
  if (*((_DWORD *)v7 + 35) != 1140)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v7);
    *((_DWORD *)v7 + 35) = 1140;
    operator new();
  }
  uint64_t v9 = *((void *)v7 + 16);
  uint64_t v11 = *a4;
  uint64_t v10 = a4[1];
  if (v10 != *a4)
  {
    unint64_t v12 = 0;
    int v13 = *(_DWORD *)(v9 + 16);
    do
    {
      uint64_t v14 = *(void *)(v11 + 8 * v12);
      if (v13 == *(_DWORD *)(v9 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v9 + 16), v13 + 1);
        int v13 = *(_DWORD *)(v9 + 16);
        uint64_t v11 = *a4;
        uint64_t v10 = a4[1];
      }
      uint64_t v15 = *(void *)(v9 + 24) + 8 * v13++;
      *(_DWORD *)(v9 + 16) = v13;
      *(void *)(v15 + 8) = v14;
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
}

void sub_2242F13F0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_reshape_dynamic(void *a1, std::string *a2, std::string **a3)
{
  uint64_t v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v6 = (std::string *)*((void *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v6, a2);
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  while (v8 != v7)
    CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, v8++);
  uint64_t result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 1145)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 1145;
    operator new();
  }
  return result;
}

void sub_2242F14E8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_expand_dims(void *a1, std::string *a2, std::string *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  unint64_t v12 = (std::string *)*((void *)v11 + 14);
  if (v12 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v12, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v11, a3);
  int v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Tensor>::TypeHandler>((uint64_t)v11 + 64);
  uint64_t v15 = *a5;
  uint64_t v14 = a5[1];
  BOOL v16 = v14 == *a5;
  *((_DWORD *)v13 + 9) = (unint64_t)(v14 - *a5) >> 3;
  if (!v16)
  {
    uint64_t v17 = v13;
    unint64_t v18 = 0;
    uint64_t v20 = (unsigned int *)((char *)v13 + 16);
    signed int v19 = *((_DWORD *)v13 + 4);
    do
    {
      uint64_t v21 = *(void *)(v15 + 8 * v18);
      if (v19 == *((_DWORD *)v17 + 5))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve(v20, v19 + 1);
        signed int v19 = *v20;
        uint64_t v15 = *a5;
        uint64_t v14 = a5[1];
      }
      uint64_t v22 = *((void *)v17 + 3) + 8 * v19++;
      *((_DWORD *)v17 + 4) = v19;
      *(void *)(v22 + 8) = v21;
      ++v18;
    }
    while (v18 < (v14 - v15) >> 3);
  }
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v11, a2);
  uint64_t v23 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Tensor>::TypeHandler>((uint64_t)v11 + 88);
  uint64_t v25 = *a6;
  uint64_t v24 = a6[1];
  BOOL v16 = v24 == *a6;
  *((_DWORD *)v23 + 9) = (unint64_t)(v24 - *a6) >> 3;
  if (!v16)
  {
    int v26 = v23;
    unint64_t v27 = 0;
    int v29 = (unsigned int *)((char *)v23 + 16);
    signed int v28 = *((_DWORD *)v23 + 4);
    do
    {
      uint64_t v30 = *(void *)(v25 + 8 * v27);
      if (v28 == *((_DWORD *)v26 + 5))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve(v29, v28 + 1);
        signed int v28 = *v29;
        uint64_t v25 = *a6;
        uint64_t v24 = a6[1];
      }
      uint64_t v31 = *((void *)v26 + 3) + 8 * v28++;
      *((_DWORD *)v26 + 4) = v28;
      *(void *)(v31 + 8) = v30;
      ++v27;
    }
    while (v27 < (v24 - v25) >> 3);
  }
  if (*((_DWORD *)v11 + 35) != 1125)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v11);
    *((_DWORD *)v11 + 35) = 1125;
    operator new();
  }
  uint64_t v32 = *((void *)v11 + 16);
  uint64_t v34 = *a4;
  uint64_t v33 = a4[1];
  if (v33 != *a4)
  {
    unint64_t v35 = 0;
    int v36 = *(_DWORD *)(v32 + 16);
    do
    {
      uint64_t v37 = *(void *)(v34 + 8 * v35);
      if (v36 == *(_DWORD *)(v32 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v32 + 16), v36 + 1);
        int v36 = *(_DWORD *)(v32 + 16);
        uint64_t v34 = *a4;
        uint64_t v33 = a4[1];
      }
      uint64_t v38 = *(void *)(v32 + 24) + 8 * v36++;
      *(_DWORD *)(v32 + 16) = v36;
      *(void *)(v38 + 8) = v37;
      ++v35;
    }
    while (v35 < (v33 - v34) >> 3);
  }
}

void sub_2242F174C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_squeeze(void *a1, std::string *a2, std::string *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  unint64_t v12 = (std::string *)*((void *)v11 + 14);
  if (v12 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v12, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v11, a3);
  int v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Tensor>::TypeHandler>((uint64_t)v11 + 64);
  uint64_t v15 = *a5;
  uint64_t v14 = a5[1];
  BOOL v16 = v14 == *a5;
  *((_DWORD *)v13 + 9) = (unint64_t)(v14 - *a5) >> 3;
  if (!v16)
  {
    uint64_t v17 = v13;
    unint64_t v18 = 0;
    uint64_t v20 = (unsigned int *)((char *)v13 + 16);
    signed int v19 = *((_DWORD *)v13 + 4);
    do
    {
      uint64_t v21 = *(void *)(v15 + 8 * v18);
      if (v19 == *((_DWORD *)v17 + 5))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve(v20, v19 + 1);
        signed int v19 = *v20;
        uint64_t v15 = *a5;
        uint64_t v14 = a5[1];
      }
      uint64_t v22 = *((void *)v17 + 3) + 8 * v19++;
      *((_DWORD *)v17 + 4) = v19;
      *(void *)(v22 + 8) = v21;
      ++v18;
    }
    while (v18 < (v14 - v15) >> 3);
  }
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v11, a2);
  uint64_t v23 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Tensor>::TypeHandler>((uint64_t)v11 + 88);
  uint64_t v25 = *a6;
  uint64_t v24 = a6[1];
  BOOL v16 = v24 == *a6;
  *((_DWORD *)v23 + 9) = (unint64_t)(v24 - *a6) >> 3;
  if (!v16)
  {
    int v26 = v23;
    unint64_t v27 = 0;
    int v29 = (unsigned int *)((char *)v23 + 16);
    signed int v28 = *((_DWORD *)v23 + 4);
    do
    {
      uint64_t v30 = *(void *)(v25 + 8 * v27);
      if (v28 == *((_DWORD *)v26 + 5))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve(v29, v28 + 1);
        signed int v28 = *v29;
        uint64_t v25 = *a6;
        uint64_t v24 = a6[1];
      }
      uint64_t v31 = *((void *)v26 + 3) + 8 * v28++;
      *((_DWORD *)v26 + 4) = v28;
      *(void *)(v31 + 8) = v30;
      ++v27;
    }
    while (v27 < (v24 - v25) >> 3);
  }
  if (*((_DWORD *)v11 + 35) != 1120)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v11);
    *((_DWORD *)v11 + 35) = 1120;
    operator new();
  }
  uint64_t v32 = *((void *)v11 + 16);
  uint64_t v34 = *a4;
  uint64_t v33 = a4[1];
  if (v33 != *a4)
  {
    unint64_t v35 = 0;
    int v36 = *(_DWORD *)(v32 + 16);
    do
    {
      uint64_t v37 = *(void *)(v34 + 8 * v35);
      if (v36 == *(_DWORD *)(v32 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v32 + 16), v36 + 1);
        int v36 = *(_DWORD *)(v32 + 16);
        uint64_t v34 = *a4;
        uint64_t v33 = a4[1];
      }
      uint64_t v38 = *(void *)(v32 + 24) + 8 * v36++;
      *(_DWORD *)(v32 + 16) = v36;
      *(void *)(v38 + 8) = v37;
      ++v35;
    }
    while (v35 < (v33 - v34) >> 3);
  }
}

void sub_2242F19B0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4095A926F0);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_add_broadcastable(void *a1, std::string *a2, std::string **a3)
{
  uint64_t v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v6 = (std::string *)*((void *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v6, a2);
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  while (v8 != v7)
    CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, v8++);
  uint64_t result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 880)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 880;
    operator new();
  }
  return result;
}

void sub_2242F1AA8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_gather(void *a1, std::string *a2, std::string **a3)
{
  uint64_t v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v6 = (std::string *)*((void *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v6, a2);
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  while (v8 != v7)
    CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, v8++);
  uint64_t result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 930)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 930;
    operator new();
  }
  return result;
}

void sub_2242F1BA0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::model_spec::add_constant_nd(void *a1, std::string *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v8 = (std::string *)*((void *)v7 + 14);
  if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v8, a2);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v7, a2);
  if (*((_DWORD *)v7 + 35) != 1070)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v7);
    *((_DWORD *)v7 + 35) = 1070;
    operator new();
  }
  uint64_t v9 = *((void *)v7 + 16);
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  if (v11 == *a3)
  {
    uint64_t v14 = 1;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = *(_DWORD *)(v9 + 16);
    uint64_t v14 = 1;
    do
    {
      uint64_t v15 = *(void *)(v10 + 8 * v12);
      if (v13 == *(_DWORD *)(v9 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v9 + 16), v13 + 1);
        int v13 = *(_DWORD *)(v9 + 16);
        uint64_t v10 = *a3;
        uint64_t v11 = a3[1];
        uint64_t v16 = *(void *)(*a3 + 8 * v12);
      }
      else
      {
        uint64_t v16 = *(void *)(v10 + 8 * v12);
      }
      uint64_t v17 = *(void *)(v9 + 24) + 8 * v13++;
      *(_DWORD *)(v9 + 16) = v13;
      *(void *)(v17 + 8) = v15;
      v14 *= v16;
      ++v12;
    }
    while (v12 < (v11 - v10) >> 3);
  }
  if (!*(void *)(v9 + 40)) {
    operator new();
  }
  uint64_t v18 = *(void *)(v9 + 40);
}

void sub_2242F1D5C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_get_shape(void *a1, std::string *a2, std::string *a3)
{
  uint64_t v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  uint64_t v6 = (std::string *)*((void *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v6, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, a3);
  uint64_t result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 1065)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 1065;
    operator new();
  }
  return result;
}

void sub_2242F1E58(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

void turi::neural_net::anonymous namespace'::wrap_network_params(std::string const&,CoreML::Specification::ConvolutionLayerParams const&,std::map<std::string,turi::neural_net::shared_float_array> *)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/model_spec.cpp", 94);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"2", 1);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"convolution.kernelsize_size()", 29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/model_spec.cpp", "operator()", 163, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int v13 = v16;
}

void sub_2242F2008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::neural_net::anonymous namespace'::weight_params_float_array::create_view(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x40uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26D777A30;
  uint64_t v7 = *(uint64_t **)a1;
  long long v8 = *(_OWORD *)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *((void *)v6 + 3) = &unk_26D777A80;
  *((void *)v6 + 4) = v7;
  *(_OWORD *)(v6 + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = v8;
  *((void *)v6 + 7) = a2;
  int v9 = 1;
  while (v7 != (uint64_t *)v8)
  {
    uint64_t v10 = *v7++;
    v9 *= v10;
  }
  if (*(_DWORD *)(a2 + 16) != v9)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"WeightParams size ", 18);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" inconsistent with expected size ", 33);
    std::ostream::operator<<();
    uint64_t v14 = v15;
  }
  unint64_t v12 = v6 + 24;
  int v13 = (std::__shared_weak_count *)v6;
  turi::neural_net::shared_float_array::shared_float_array(a3, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_2242F2254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  a12 = *MEMORY[0x263F8C2B8];
  uint64_t v33 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)&a12 + *(void *)(a12 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  a14 = v33;
  a15 = MEMORY[0x263F8C318] + 16;
  if (a28 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22A614E30](&a31);
  shared_owners = (void *)v31[1].__shared_owners_;
  if (shared_owners)
  {
    v31[1].__shared_weak_owners_ = (uint64_t)shared_owners;
    operator delete(shared_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v35);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::anonymous namespace'::weight_params_float_array>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D777A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::anonymous namespace'::weight_params_float_array>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D777A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<turi::neural_net::anonymous namespace'::weight_params_float_array>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = v2;
    operator delete(v2);
  }
}

void turi::neural_net::anonymous namespace'::weight_params_float_array::~weight_params_float_array(turi::neural_net::_anonymous_namespace_::weight_params_float_array *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::neural_net::anonymous namespace'::weight_params_float_array::data(turi::neural_net::_anonymous_namespace_::weight_params_float_array *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 4) + 24);
  if (v1) {
    return v1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t turi::neural_net::anonymous namespace'::weight_params_float_array::size(turi::neural_net::_anonymous_namespace_::weight_params_float_array *this)
{
  return *(int *)(*((void *)this + 4) + 16);
}

uint64_t turi::neural_net::anonymous namespace'::weight_params_float_array::shape(turi::neural_net::_anonymous_namespace_::weight_params_float_array *this)
{
  return *((void *)this + 1);
}

uint64_t turi::neural_net::anonymous namespace'::weight_params_float_array::dim(turi::neural_net::_anonymous_namespace_::weight_params_float_array *this)
{
  return (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3;
}

_OWORD *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(uint64_t **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v16, a2);
  long long v8 = *v7;
  if (!*v7)
  {
    int v9 = (uint64_t **)v7;
    long long v8 = operator new(0x70uLL);
    v14[1] = a1 + 1;
    unsigned int v8[2] = *(_OWORD *)a3;
    uint64_t v10 = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *((void *)v8 + 6) = v10;
    *((void *)v8 + 7) = &unk_26D752D58;
    long long v11 = *(_OWORD *)(a4 + 8);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    long long v12 = *(_OWORD *)(a4 + 24);
    v8[4] = v11;
    v8[5] = v12;
    v8[6] = *(_OWORD *)(a4 + 40);
    char v15 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v16, v9, (uint64_t *)v8);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
  }
  return v8;
}

void turi::neural_net::anonymous namespace'::update_network_params(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = *(_DWORD *)(a2 + 140);
  if (v4 > 159)
  {
    if (v4 != 160)
    {
      if (v4 != 420) {
        return;
      }
      uint64_t v14 = *(const void ***)(a2 + 112);
      uint64_t v15 = *(void *)(a2 + 128);
      if (!a3) {
        goto LABEL_305;
      }
      if (*((char *)v14 + 23) >= 0) {
        size_t v16 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v16 = (size_t)v14[1];
      }
      uint64_t v17 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v16 + 13);
      if (v195 < 0) {
        uint64_t v17 = (void **)__p[0];
      }
      if (v16)
      {
        if (*((char *)v14 + 23) >= 0) {
          uint64_t v18 = v14;
        }
        else {
          uint64_t v18 = *v14;
        }
        memmove(v17, v18, v16);
      }
      strcpy((char *)v17 + v16, "_i2h_i_weight");
      char v20 = is_layer_params_convertible_fp16;
      if (SHIBYTE(v195) < 0)
      {
        operator delete(__p[0]);
        if ((v20 & 1) == 0) {
          goto LABEL_305;
        }
      }
      else if ((is_layer_params_convertible_fp16 & 1) == 0)
      {
        goto LABEL_305;
      }
      if (*((char *)v14 + 23) >= 0) {
        size_t v56 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v56 = (size_t)v14[1];
      }
      uint64_t v57 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v56 + 13);
      if (v195 < 0) {
        uint64_t v57 = (void **)__p[0];
      }
      if (v56)
      {
        if (*((char *)v14 + 23) >= 0) {
          unint64_t v58 = v14;
        }
        else {
          unint64_t v58 = *v14;
        }
        memmove(v57, v58, v56);
      }
      strcpy((char *)v57 + v56, "_i2h_f_weight");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      if (v59)
      {
        if (*((char *)v14 + 23) >= 0) {
          size_t v60 = *((unsigned __int8 *)v14 + 23);
        }
        else {
          size_t v60 = (size_t)v14[1];
        }
        int v61 = __p;
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v60 + 13);
        if (v195 < 0) {
          int v61 = (void **)__p[0];
        }
        if (v60)
        {
          if (*((char *)v14 + 23) >= 0) {
            unsigned int v62 = v14;
          }
          else {
            unsigned int v62 = *v14;
          }
          memmove(v61, v62, v60);
        }
        strcpy((char *)v61 + v60, "_i2h_c_weight");
        if (SHIBYTE(v195) < 0) {
          operator delete(__p[0]);
        }
        if (v63)
        {
          if (*((char *)v14 + 23) >= 0) {
            size_t v64 = *((unsigned __int8 *)v14 + 23);
          }
          else {
            size_t v64 = (size_t)v14[1];
          }
          std::locale v65 = __p;
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v64 + 13);
          if (v195 < 0) {
            std::locale v65 = (void **)__p[0];
          }
          if (v64)
          {
            if (*((char *)v14 + 23) >= 0) {
              size_t v66 = v14;
            }
            else {
              size_t v66 = *v14;
            }
            memmove(v65, v66, v64);
          }
          strcpy((char *)v65 + v64, "_i2h_o_weight");
          if (SHIBYTE(v195) < 0) {
            operator delete(__p[0]);
          }
          if (v67)
          {
            if (*((char *)v14 + 23) >= 0) {
              size_t v68 = *((unsigned __int8 *)v14 + 23);
            }
            else {
              size_t v68 = (size_t)v14[1];
            }
            uint64_t v69 = __p;
            std::string::basic_string[abi:ne180100]((uint64_t)__p, v68 + 13);
            if (v195 < 0) {
              uint64_t v69 = (void **)__p[0];
            }
            if (v68)
            {
              if (*((char *)v14 + 23) >= 0) {
                uint64_t v70 = v14;
              }
              else {
                uint64_t v70 = *v14;
              }
              memmove(v69, v70, v68);
            }
            strcpy((char *)v69 + v68, "_h2h_i_weight");
            if (SHIBYTE(v195) < 0) {
              operator delete(__p[0]);
            }
            if (v71)
            {
              if (*((char *)v14 + 23) >= 0) {
                size_t v72 = *((unsigned __int8 *)v14 + 23);
              }
              else {
                size_t v72 = (size_t)v14[1];
              }
              size_t v73 = __p;
              std::string::basic_string[abi:ne180100]((uint64_t)__p, v72 + 13);
              if (v195 < 0) {
                size_t v73 = (void **)__p[0];
              }
              if (v72)
              {
                if (*((char *)v14 + 23) >= 0) {
                  std::locale v74 = v14;
                }
                else {
                  std::locale v74 = *v14;
                }
                memmove(v73, v74, v72);
              }
              strcpy((char *)v73 + v72, "_h2h_f_weight");
              if (SHIBYTE(v195) < 0) {
                operator delete(__p[0]);
              }
              if (v75)
              {
                if (*((char *)v14 + 23) >= 0) {
                  size_t v76 = *((unsigned __int8 *)v14 + 23);
                }
                else {
                  size_t v76 = (size_t)v14[1];
                }
                unsigned int v77 = __p;
                std::string::basic_string[abi:ne180100]((uint64_t)__p, v76 + 13);
                if (v195 < 0) {
                  unsigned int v77 = (void **)__p[0];
                }
                if (v76)
                {
                  if (*((char *)v14 + 23) >= 0) {
                    int v78 = v14;
                  }
                  else {
                    int v78 = *v14;
                  }
                  memmove(v77, v78, v76);
                }
                strcpy((char *)v77 + v76, "_h2h_c_weight");
                if (SHIBYTE(v195) < 0) {
                  operator delete(__p[0]);
                }
                if (v79)
                {
                  if (*((char *)v14 + 23) >= 0) {
                    size_t v80 = *((unsigned __int8 *)v14 + 23);
                  }
                  else {
                    size_t v80 = (size_t)v14[1];
                  }
                  uint64_t v81 = __p;
                  std::string::basic_string[abi:ne180100]((uint64_t)__p, v80 + 13);
                  if (v195 < 0) {
                    uint64_t v81 = (void **)__p[0];
                  }
                  if (v80)
                  {
                    if (*((char *)v14 + 23) >= 0) {
                      unsigned int v82 = v14;
                    }
                    else {
                      unsigned int v82 = *v14;
                    }
                    memmove(v81, v82, v80);
                  }
                  strcpy((char *)v81 + v80, "_h2h_o_weight");
                  if (SHIBYTE(v195) < 0) {
                    operator delete(__p[0]);
                  }
                  if (v83)
                  {
                    if (*((char *)v14 + 23) >= 0) {
                      size_t v84 = *((unsigned __int8 *)v14 + 23);
                    }
                    else {
                      size_t v84 = (size_t)v14[1];
                    }
                    int v85 = __p;
                    std::string::basic_string[abi:ne180100]((uint64_t)__p, v84 + 11);
                    if (v195 < 0) {
                      int v85 = (void **)__p[0];
                    }
                    if (v84)
                    {
                      if (*((char *)v14 + 23) >= 0) {
                        int v86 = v14;
                      }
                      else {
                        int v86 = *v14;
                      }
                      memmove(v85, v86, v84);
                    }
                    strcpy((char *)v85 + v84, "_h2h_i_bias");
                    if (SHIBYTE(v195) < 0) {
                      operator delete(__p[0]);
                    }
                    if (v87)
                    {
                      if (*((char *)v14 + 23) >= 0) {
                        size_t v88 = *((unsigned __int8 *)v14 + 23);
                      }
                      else {
                        size_t v88 = (size_t)v14[1];
                      }
                      unsigned int v89 = __p;
                      std::string::basic_string[abi:ne180100]((uint64_t)__p, v88 + 11);
                      if (v195 < 0) {
                        unsigned int v89 = (void **)__p[0];
                      }
                      if (v88)
                      {
                        if (*((char *)v14 + 23) >= 0) {
                          unsigned int v90 = v14;
                        }
                        else {
                          unsigned int v90 = *v14;
                        }
                        memmove(v89, v90, v88);
                      }
                      strcpy((char *)v89 + v88, "_h2h_f_bias");
                      if (SHIBYTE(v195) < 0) {
                        operator delete(__p[0]);
                      }
                      if (v91)
                      {
                        if (*((char *)v14 + 23) >= 0) {
                          size_t v92 = *((unsigned __int8 *)v14 + 23);
                        }
                        else {
                          size_t v92 = (size_t)v14[1];
                        }
                        int v93 = __p;
                        std::string::basic_string[abi:ne180100]((uint64_t)__p, v92 + 11);
                        if (v195 < 0) {
                          int v93 = (void **)__p[0];
                        }
                        if (v92)
                        {
                          if (*((char *)v14 + 23) >= 0) {
                            size_t v94 = v14;
                          }
                          else {
                            size_t v94 = *v14;
                          }
                          memmove(v93, v94, v92);
                        }
                        strcpy((char *)v93 + v92, "_h2h_c_bias");
                        if (SHIBYTE(v195) < 0) {
                          operator delete(__p[0]);
                        }
                        if (v95)
                        {
                          if (*((char *)v14 + 23) >= 0) {
                            size_t v96 = *((unsigned __int8 *)v14 + 23);
                          }
                          else {
                            size_t v96 = (size_t)v14[1];
                          }
                          uint64_t v97 = __p;
                          std::string::basic_string[abi:ne180100]((uint64_t)__p, v96 + 11);
                          if (v195 < 0) {
                            uint64_t v97 = (void **)__p[0];
                          }
                          if (v96)
                          {
                            if (*((char *)v14 + 23) >= 0) {
                              char v98 = v14;
                            }
                            else {
                              char v98 = *v14;
                            }
                            memmove(v97, v98, v96);
                          }
                          strcpy((char *)v97 + v96, "_h2h_o_bias");
                          if (SHIBYTE(v195) < 0) {
                            operator delete(__p[0]);
                          }
                          goto LABEL_306;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_305:
      int v99 = 0;
LABEL_306:
      unint64_t v100 = *(void **)(v15 + 48);
      if (!v100) {
        operator new();
      }
      if (*((char *)v14 + 23) >= 0) {
        size_t v101 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v101 = (size_t)v14[1];
      }
      unint64_t v102 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v101 + 13);
      if (v195 < 0) {
        unint64_t v102 = (void **)__p[0];
      }
      if (v101)
      {
        if (*((char *)v14 + 23) >= 0) {
          unint64_t v103 = v14;
        }
        else {
          unint64_t v103 = *v14;
        }
        memmove(v102, v103, v101);
      }
      strcpy((char *)v102 + v101, "_i2h_i_weight");
      uint64_t v104 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      uint64_t v105 = a1 + 8;
      if (a1 + 8 != v104)
      {
        uint64_t v106 = v100[2];
        if (!v106) {
          operator new();
        }
      }
      if (*((char *)v14 + 23) >= 0) {
        size_t v107 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v107 = (size_t)v14[1];
      }
      size_t v108 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v107 + 13);
      if (v193 < 0) {
        size_t v108 = (long long *)v192;
      }
      if (v107)
      {
        if (*((char *)v14 + 23) >= 0) {
          int v109 = v14;
        }
        else {
          int v109 = *v14;
        }
        memmove(v108, v109, v107);
      }
      strcpy((char *)v108 + v107, "_i2h_f_weight");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v192;
      uint64_t v195 = v193;
      uint64_t v110 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v110)
      {
        uint64_t v111 = v100[3];
        if (!v111) {
          operator new();
        }
      }
      if (*((char *)v14 + 23) >= 0) {
        size_t v112 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v112 = (size_t)v14[1];
      }
      uint64_t v113 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v112 + 13);
      if (v193 < 0) {
        uint64_t v113 = (long long *)v192;
      }
      if (v112)
      {
        if (*((char *)v14 + 23) >= 0) {
          uint64_t v114 = v14;
        }
        else {
          uint64_t v114 = *v14;
        }
        memmove(v113, v114, v112);
      }
      strcpy((char *)v113 + v112, "_i2h_c_weight");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v192;
      uint64_t v195 = v193;
      uint64_t v115 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v115)
      {
        uint64_t v116 = v100[4];
        if (!v116) {
          operator new();
        }
      }
      if (*((char *)v14 + 23) >= 0) {
        size_t v117 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v117 = (size_t)v14[1];
      }
      int v118 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v117 + 13);
      if (v193 < 0) {
        int v118 = (long long *)v192;
      }
      if (v117)
      {
        if (*((char *)v14 + 23) >= 0) {
          unsigned int v119 = v14;
        }
        else {
          unsigned int v119 = *v14;
        }
        memmove(v118, v119, v117);
      }
      strcpy((char *)v118 + v117, "_i2h_o_weight");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v192;
      uint64_t v195 = v193;
      uint64_t v120 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v120)
      {
        uint64_t v121 = v100[5];
        if (!v121) {
          operator new();
        }
      }
      if (*((char *)v14 + 23) >= 0) {
        size_t v122 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v122 = (size_t)v14[1];
      }
      uint64_t v123 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v122 + 13);
      if (v193 < 0) {
        uint64_t v123 = (long long *)v192;
      }
      if (v122)
      {
        if (*((char *)v14 + 23) >= 0) {
          int v124 = v14;
        }
        else {
          int v124 = *v14;
        }
        memmove(v123, v124, v122);
      }
      strcpy((char *)v123 + v122, "_h2h_i_weight");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v192;
      uint64_t v195 = v193;
      uint64_t v125 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v125)
      {
        uint64_t v126 = v100[6];
        if (!v126) {
          operator new();
        }
      }
      if (*((char *)v14 + 23) >= 0) {
        size_t v127 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v127 = (size_t)v14[1];
      }
      uint64_t v128 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v127 + 13);
      if (v193 < 0) {
        uint64_t v128 = (long long *)v192;
      }
      if (v127)
      {
        if (*((char *)v14 + 23) >= 0) {
          int v129 = v14;
        }
        else {
          int v129 = *v14;
        }
        memmove(v128, v129, v127);
      }
      strcpy((char *)v128 + v127, "_h2h_f_weight");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v192;
      uint64_t v195 = v193;
      uint64_t v130 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v130)
      {
        uint64_t v131 = v100[7];
        if (!v131) {
          operator new();
        }
      }
      if (*((char *)v14 + 23) >= 0) {
        size_t v132 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v132 = (size_t)v14[1];
      }
      int v133 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v132 + 13);
      if (v193 < 0) {
        int v133 = (long long *)v192;
      }
      if (v132)
      {
        if (*((char *)v14 + 23) >= 0) {
          v134 = v14;
        }
        else {
          v134 = *v14;
        }
        memmove(v133, v134, v132);
      }
      strcpy((char *)v133 + v132, "_h2h_c_weight");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v192;
      uint64_t v195 = v193;
      uint64_t v135 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v135)
      {
        uint64_t v136 = v100[8];
        if (!v136) {
          operator new();
        }
      }
      if (*((char *)v14 + 23) >= 0) {
        size_t v137 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v137 = (size_t)v14[1];
      }
      int v138 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v137 + 13);
      if (v193 < 0) {
        int v138 = (long long *)v192;
      }
      if (v137)
      {
        if (*((char *)v14 + 23) >= 0) {
          int v139 = v14;
        }
        else {
          int v139 = *v14;
        }
        memmove(v138, v139, v137);
      }
      strcpy((char *)v138 + v137, "_h2h_o_weight");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v192;
      uint64_t v195 = v193;
      uint64_t v140 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v140)
      {
        uint64_t v141 = v100[9];
        if (!v141) {
          operator new();
        }
      }
      if (*((char *)v14 + 23) >= 0) {
        size_t v142 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v142 = (size_t)v14[1];
      }
      int v143 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v142 + 11);
      if (v193 < 0) {
        int v143 = (long long *)v192;
      }
      if (v142)
      {
        if (*((char *)v14 + 23) >= 0) {
          unsigned int v144 = v14;
        }
        else {
          unsigned int v144 = *v14;
        }
        memmove(v143, v144, v142);
      }
      strcpy((char *)v143 + v142, "_h2h_i_bias");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v192;
      uint64_t v195 = v193;
      uint64_t v145 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v145)
      {
        uint64_t v146 = v100[10];
        if (!v146) {
          operator new();
        }
      }
      if (*((char *)v14 + 23) >= 0) {
        size_t v147 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v147 = (size_t)v14[1];
      }
      char v148 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v147 + 11);
      if (v193 < 0) {
        char v148 = (long long *)v192;
      }
      if (v147)
      {
        if (*((char *)v14 + 23) >= 0) {
          int64x2_t v149 = v14;
        }
        else {
          int64x2_t v149 = *v14;
        }
        memmove(v148, v149, v147);
      }
      strcpy((char *)v148 + v147, "_h2h_f_bias");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v192;
      uint64_t v195 = v193;
      uint64_t v150 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v150)
      {
        uint64_t v151 = v100[11];
        if (!v151) {
          operator new();
        }
      }
      if (*((char *)v14 + 23) >= 0) {
        size_t v152 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v152 = (size_t)v14[1];
      }
      v153 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v152 + 11);
      if (v193 < 0) {
        v153 = (long long *)v192;
      }
      if (v152)
      {
        if (*((char *)v14 + 23) >= 0) {
          uint64_t v154 = v14;
        }
        else {
          uint64_t v154 = *v14;
        }
        memmove(v153, v154, v152);
      }
      strcpy((char *)v153 + v152, "_h2h_c_bias");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v192;
      uint64_t v195 = v193;
      uint64_t v155 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v155)
      {
        uint64_t v156 = v100[12];
        if (!v156) {
          operator new();
        }
      }
      if (*((char *)v14 + 23) >= 0) {
        size_t v157 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v157 = (size_t)v14[1];
      }
      v158 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v157 + 11);
      if (v193 < 0) {
        v158 = (long long *)v192;
      }
      if (v157)
      {
        if (*((char *)v14 + 23) >= 0) {
          v159 = v14;
        }
        else {
          v159 = *v14;
        }
        memmove(v158, v159, v157);
      }
      strcpy((char *)v158 + v157, "_h2h_o_bias");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v192;
      uint64_t v195 = v193;
      uint64_t v160 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v160)
      {
        uint64_t v161 = v100[13];
        if (!v161) {
          operator new();
        }
      }
      goto LABEL_600;
    }
    int v29 = *(const void ***)(a2 + 112);
    uint64_t v30 = *(void **)(a2 + 128);
    if (!a3) {
      goto LABEL_537;
    }
    if (*((char *)v29 + 23) >= 0) {
      size_t v31 = *((unsigned __int8 *)v29 + 23);
    }
    else {
      size_t v31 = (size_t)v29[1];
    }
    uint64_t v32 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v31 + 6);
    if (v195 < 0) {
      uint64_t v32 = (void **)__p[0];
    }
    if (v31)
    {
      if (*((char *)v29 + 23) >= 0) {
        uint64_t v33 = v29;
      }
      else {
        uint64_t v33 = *v29;
      }
      memmove(v32, v33, v31);
    }
    strcpy((char *)v32 + v31, "_gamma");
    char v35 = v34;
    if (SHIBYTE(v195) < 0)
    {
      operator delete(__p[0]);
      if ((v35 & 1) == 0) {
        goto LABEL_537;
      }
    }
    else if ((v34 & 1) == 0)
    {
      goto LABEL_537;
    }
    if (*((char *)v29 + 23) >= 0) {
      size_t v162 = *((unsigned __int8 *)v29 + 23);
    }
    else {
      size_t v162 = (size_t)v29[1];
    }
    v163 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v162 + 5);
    if (v195 < 0) {
      v163 = (void **)__p[0];
    }
    if (v162)
    {
      if (*((char *)v29 + 23) >= 0) {
        v164 = v29;
      }
      else {
        v164 = *v29;
      }
      memmove(v163, v164, v162);
    }
    strcpy((char *)v163 + v162, "_beta");
    if (SHIBYTE(v195) < 0) {
      operator delete(__p[0]);
    }
    if (v165)
    {
      if (*((char *)v29 + 23) >= 0) {
        size_t v166 = *((unsigned __int8 *)v29 + 23);
      }
      else {
        size_t v166 = (size_t)v29[1];
      }
      v167 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v166 + 13);
      if (v195 < 0) {
        v167 = (void **)__p[0];
      }
      if (v166)
      {
        if (*((char *)v29 + 23) >= 0) {
          v168 = v29;
        }
        else {
          v168 = *v29;
        }
        memmove(v167, v168, v166);
      }
      strcpy((char *)v167 + v166, "_running_mean");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      if (v169)
      {
        if (*((char *)v29 + 23) >= 0) {
          size_t v170 = *((unsigned __int8 *)v29 + 23);
        }
        else {
          size_t v170 = (size_t)v29[1];
        }
        v171 = __p;
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v170 + 12);
        if (v195 < 0) {
          v171 = (void **)__p[0];
        }
        if (v170)
        {
          if (*((char *)v29 + 23) >= 0) {
            v172 = v29;
          }
          else {
            v172 = *v29;
          }
          memmove(v171, v172, v170);
        }
        strcpy((char *)v171 + v170, "_running_var");
        if (SHIBYTE(v195) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_538;
      }
    }
LABEL_537:
    int v13 = 0;
LABEL_538:
    if (*((char *)v29 + 23) >= 0) {
      size_t v173 = *((unsigned __int8 *)v29 + 23);
    }
    else {
      size_t v173 = (size_t)v29[1];
    }
    v174 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v173 + 6);
    if (v195 < 0) {
      v174 = (void **)__p[0];
    }
    if (v173)
    {
      if (*((char *)v29 + 23) >= 0) {
        v175 = v29;
      }
      else {
        v175 = *v29;
      }
      memmove(v174, v175, v173);
    }
    strcpy((char *)v174 + v173, "_gamma");
    uint64_t v176 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    uint64_t v177 = a1 + 8;
    if (a1 + 8 != v176)
    {
      uint64_t v178 = v30[2];
      if (!v178) {
        operator new();
      }
    }
    if (*((char *)v29 + 23) >= 0) {
      size_t v179 = *((unsigned __int8 *)v29 + 23);
    }
    else {
      size_t v179 = (size_t)v29[1];
    }
    v180 = &v192;
    std::string::basic_string[abi:ne180100]((uint64_t)&v192, v179 + 5);
    if (v193 < 0) {
      v180 = (long long *)v192;
    }
    if (v179)
    {
      if (*((char *)v29 + 23) >= 0) {
        v181 = v29;
      }
      else {
        v181 = *v29;
      }
      memmove(v180, v181, v179);
    }
    strcpy((char *)v180 + v179, "_beta");
    if (SHIBYTE(v195) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = v192;
    uint64_t v195 = v193;
    uint64_t v182 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    if (v177 != v182)
    {
      uint64_t v183 = v30[3];
      if (!v183) {
        operator new();
      }
    }
    if (*((char *)v29 + 23) >= 0) {
      size_t v184 = *((unsigned __int8 *)v29 + 23);
    }
    else {
      size_t v184 = (size_t)v29[1];
    }
    v185 = &v192;
    std::string::basic_string[abi:ne180100]((uint64_t)&v192, v184 + 13);
    if (v193 < 0) {
      v185 = (long long *)v192;
    }
    if (v184)
    {
      if (*((char *)v29 + 23) >= 0) {
        v186 = v29;
      }
      else {
        v186 = *v29;
      }
      memmove(v185, v186, v184);
    }
    strcpy((char *)v185 + v184, "_running_mean");
    if (SHIBYTE(v195) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = v192;
    uint64_t v195 = v193;
    uint64_t v187 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    if (v177 != v187)
    {
      uint64_t v188 = v30[4];
      if (!v188) {
        operator new();
      }
    }
    if (*((char *)v29 + 23) >= 0) {
      size_t v189 = *((unsigned __int8 *)v29 + 23);
    }
    else {
      size_t v189 = (size_t)v29[1];
    }
    v190 = &v192;
    std::string::basic_string[abi:ne180100]((uint64_t)&v192, v189 + 12);
    if (v193 < 0) {
      v190 = (long long *)v192;
    }
    if (v189)
    {
      if (*((char *)v29 + 23) >= 0) {
        v191 = v29;
      }
      else {
        v191 = *v29;
      }
      memmove(v190, v191, v189);
    }
    strcpy((char *)v190 + v189, "_running_var");
    if (SHIBYTE(v195) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = v192;
    uint64_t v195 = v193;
    uint64_t v45 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    if (v177 == v45) {
      goto LABEL_600;
    }
    uint64_t v46 = v30[5];
    if (!v46) {
      operator new();
    }
    goto LABEL_599;
  }
  if (v4 == 100)
  {
    uint64_t v21 = *(const void ***)(a2 + 112);
    uint64_t v22 = *(uint64_t **)(a2 + 128);
    if (a3)
    {
      if (*((char *)v21 + 23) >= 0) {
        size_t v23 = *((unsigned __int8 *)v21 + 23);
      }
      else {
        size_t v23 = (size_t)v21[1];
      }
      uint64_t v24 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v23 + 7);
      if (v195 < 0) {
        uint64_t v24 = (void **)__p[0];
      }
      if (v23)
      {
        if (*((char *)v21 + 23) >= 0) {
          uint64_t v25 = v21;
        }
        else {
          uint64_t v25 = *v21;
        }
        memmove(v24, v25, v23);
      }
      strcpy((char *)v24 + v23, "_weight");
        goto LABEL_127;
      if (v22 == &CoreML::Specification::_ConvolutionLayerParams_default_instance_ || !v22[15]) {
        goto LABEL_75;
      }
      if (*((char *)v21 + 23) >= 0) {
        size_t v26 = *((unsigned __int8 *)v21 + 23);
      }
      else {
        size_t v26 = (size_t)v21[1];
      }
      unint64_t v27 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v26 + 5);
      if (v193 < 0) {
        unint64_t v27 = (long long *)v192;
      }
      if (v26)
      {
        if (*((char *)v21 + 23) >= 0) {
          signed int v28 = v21;
        }
        else {
          signed int v28 = *v21;
        }
        memmove(v27, v28, v26);
      }
      strcpy((char *)v27 + v26, "_bias");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v192;
      uint64_t v195 = v193;
LABEL_75:
        int v13 = 1;
      else {
LABEL_127:
      }
        int v13 = 0;
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      int v13 = 0;
    }
    if (*((char *)v21 + 23) >= 0) {
      size_t v47 = *((unsigned __int8 *)v21 + 23);
    }
    else {
      size_t v47 = (size_t)v21[1];
    }
    size_t v48 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v47 + 7);
    if (v195 < 0) {
      size_t v48 = (void **)__p[0];
    }
    if (v47)
    {
      if (*((char *)v21 + 23) >= 0) {
        int v49 = v21;
      }
      else {
        int v49 = *v21;
      }
      memmove(v48, v49, v47);
    }
    strcpy((char *)v48 + v47, "_weight");
    uint64_t v50 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    uint64_t v51 = a1 + 8;
    if (a1 + 8 != v50)
    {
      uint64_t v52 = v22[14];
      if (!v52) {
        operator new();
      }
    }
    if (v22 == &CoreML::Specification::_ConvolutionLayerParams_default_instance_ || !v22[15]) {
      goto LABEL_600;
    }
    if (*((char *)v21 + 23) >= 0) {
      size_t v53 = *((unsigned __int8 *)v21 + 23);
    }
    else {
      size_t v53 = (size_t)v21[1];
    }
    uint64_t v54 = &v192;
    std::string::basic_string[abi:ne180100]((uint64_t)&v192, v53 + 5);
    if (v193 < 0) {
      uint64_t v54 = (long long *)v192;
    }
    if (v53)
    {
      if (*((char *)v21 + 23) >= 0) {
        int v55 = v21;
      }
      else {
        int v55 = *v21;
      }
      memmove(v54, v55, v53);
    }
    strcpy((char *)v54 + v53, "_bias");
    if (SHIBYTE(v195) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = v192;
    uint64_t v195 = v193;
    uint64_t v45 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    if (v51 == v45) {
      goto LABEL_600;
    }
    uint64_t v46 = v22[15];
    if (!v46) {
      operator new();
    }
  }
  else
  {
    if (v4 != 140) {
      return;
    }
    uint64_t v5 = *(const void ***)(a2 + 112);
    uint64_t v6 = *(uint64_t **)(a2 + 128);
    if (a3)
    {
      if (*((char *)v5 + 23) >= 0) {
        size_t v7 = *((unsigned __int8 *)v5 + 23);
      }
      else {
        size_t v7 = (size_t)v5[1];
      }
      long long v8 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v7 + 7);
      if (v195 < 0) {
        long long v8 = (void **)__p[0];
      }
      if (v7)
      {
        if (*((char *)v5 + 23) >= 0) {
          int v9 = v5;
        }
        else {
          int v9 = *v5;
        }
        memmove(v8, v9, v7);
      }
      strcpy((char *)v8 + v7, "_weight");
        goto LABEL_92;
      if (v6 == &CoreML::Specification::_InnerProductLayerParams_default_instance_ || !v6[3]) {
        goto LABEL_31;
      }
      if (*((char *)v5 + 23) >= 0) {
        size_t v10 = *((unsigned __int8 *)v5 + 23);
      }
      else {
        size_t v10 = (size_t)v5[1];
      }
      long long v11 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v10 + 5);
      if (v193 < 0) {
        long long v11 = (long long *)v192;
      }
      if (v10)
      {
        if (*((char *)v5 + 23) >= 0) {
          long long v12 = v5;
        }
        else {
          long long v12 = *v5;
        }
        memmove(v11, v12, v10);
      }
      strcpy((char *)v11 + v10, "_bias");
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)__p = v192;
      uint64_t v195 = v193;
LABEL_31:
        int v13 = 1;
      else {
LABEL_92:
      }
        int v13 = 0;
      if (SHIBYTE(v195) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      int v13 = 0;
    }
    if (*((char *)v5 + 23) >= 0) {
      size_t v36 = *((unsigned __int8 *)v5 + 23);
    }
    else {
      size_t v36 = (size_t)v5[1];
    }
    uint64_t v37 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v36 + 7);
    if (v195 < 0) {
      uint64_t v37 = (void **)__p[0];
    }
    if (v36)
    {
      if (*((char *)v5 + 23) >= 0) {
        uint64_t v38 = v5;
      }
      else {
        uint64_t v38 = *v5;
      }
      memmove(v37, v38, v36);
    }
    strcpy((char *)v37 + v36, "_weight");
    uint64_t v39 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    uint64_t v40 = a1 + 8;
    if (a1 + 8 != v39)
    {
      uint64_t v41 = v6[2];
      if (!v41) {
        operator new();
      }
    }
    if (v6 == &CoreML::Specification::_InnerProductLayerParams_default_instance_ || !v6[3]) {
      goto LABEL_600;
    }
    if (*((char *)v5 + 23) >= 0) {
      size_t v42 = *((unsigned __int8 *)v5 + 23);
    }
    else {
      size_t v42 = (size_t)v5[1];
    }
    uint64_t v43 = &v192;
    std::string::basic_string[abi:ne180100]((uint64_t)&v192, v42 + 5);
    if (v193 < 0) {
      uint64_t v43 = (long long *)v192;
    }
    if (v42)
    {
      if (*((char *)v5 + 23) >= 0) {
        uint64_t v44 = v5;
      }
      else {
        uint64_t v44 = *v5;
      }
      memmove(v43, v44, v42);
    }
    strcpy((char *)v43 + v42, "_bias");
    if (SHIBYTE(v195) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = v192;
    uint64_t v195 = v193;
    uint64_t v45 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    if (v40 == v45) {
      goto LABEL_600;
    }
    uint64_t v46 = v6[3];
    if (!v46) {
      operator new();
    }
  }
LABEL_599:
LABEL_600:
  if (SHIBYTE(v195) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2242F45C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::anonymous namespace'::update_weight_params(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = *(_DWORD *)(a3 + 16);
  if (v8 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    size_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"float_array ", 12);
    int v17 = *(char *)(a1 + 23);
    if (v17 >= 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = *(void *)a1;
    }
    if (v17 >= 0) {
      uint64_t v19 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v19 = *(void *)(a1 + 8);
    }
    char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" has size ", 10);
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" inconsistent with expected size ", 33);
    std::ostream::operator<<();
    p_p = &__p;
  }
  int v9 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  uint64_t v11 = v10;
  if (a4)
  {
    if (v10) {
      long long v12 = v9;
    }
    else {
      long long v12 = 0;
    }
    turi::neural_net::get_half_precision_weights(v12, v11, (uint64_t)&p_p);
    std::string::basic_string[abi:ne180100](&__p, p_p, v23 - (unsigned char *)p_p);
    _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)(a3 + 40), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string, &__p);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    *(_DWORD *)(a3 + 16) = 0;
    if (p_p)
    {
      size_t v23 = p_p;
      operator delete(p_p);
    }
  }
  else if (v10)
  {
    size_t v13 = 4 * v10;
    uint64_t v14 = *(void *)(a3 + 24);
    if (v14) {
      uint64_t v15 = (void *)(v14 + 8);
    }
    else {
      uint64_t v15 = 0;
    }
    memmove(v15, v9, v13);
  }
}

void sub_2242F4978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

uint64_t turi::neural_net::anonymous namespace'::is_layer_params_convertible_fp16(const void **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, a1);
  if (a2 + 8 == v3) {
    return 0;
  }
  uint64_t v4 = v3 + 56;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 56) + 16))(v3 + 56);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  if (v6) {
    size_t v7 = (float *)v5;
  }
  else {
    size_t v7 = 0;
  }
  return turi::neural_net::is_convertible_to_fp16(v7, v6);
}

uint64_t std::function<void ()(float *,float *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

id turi::neural_net::anonymous namespace'::create_rng_batch(turi::neural_net::_anonymous_namespace_ *this, unsigned int a2)
{
  v12[313] = *MEMORY[0x263EF8340];
  id v8 = (id)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:this];
  if (this)
  {
    uint64_t v4 = 0;
    do
    {
      v11[0] = __PAIR64__(v4, a2);
      std::seed_seq::seed_seq[abi:ne180100]<int,(void *)0>(__p, (int *)v11, 2);
      v11[0] = 0;
      v11[1] = v11;
      void v11[2] = 0x9F812000000;
      v11[3] = __Block_byref_object_copy__2;
      v11[4] = __Block_byref_object_dispose__2;
      v11[5] = "";
      std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::__seed<std::seed_seq>(v12, (unint64_t)__p);
      v9[0] = MEMORY[0x263EF8330];
      v9[1] = 3221225472;
      v9[2] = ___ZN4turi10neural_net12_GLOBAL__N_116create_rng_batchEmi_block_invoke;
      v9[3] = &unk_2646D7A00;
      Bytef v9[4] = v11;
      uint64_t v5 = (void *)MEMORY[0x22A615930](v9);
      uint64_t v6 = (void *)MEMORY[0x22A615930]();
      [v8 addObject:v6];

      _Block_object_dispose(v11, 8);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      uint64_t v4 = (turi::neural_net::_anonymous_namespace_ *)((char *)v4 + 1);
    }
    while (this != v4);
  }
  return v8;
}

void sub_2242F4C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  _Block_object_dispose(&a18, 8);
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mps_image_augmenter::mps_image_augmenter(uint64_t a1, float *a2, void *a3)
{
  v31[2] = *MEMORY[0x263EF8340];
  id v5 = a3;
  *(void *)a1 = &unk_26D777AD8;
  long long v6 = *((_OWORD *)a2 + 4);
  long long v7 = *((_OWORD *)a2 + 5);
  long long v8 = *((_OWORD *)a2 + 6);
  long long v9 = *((_OWORD *)a2 + 7);
  long long v10 = *(_OWORD *)a2;
  long long v11 = *((_OWORD *)a2 + 1);
  long long v12 = *((_OWORD *)a2 + 2);
  long long v13 = *((_OWORD *)a2 + 3);
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = v12;
  *(_OWORD *)(a1 + 56) = v13;
  *(_OWORD *)(a1 + 8) = v10;
  *(_OWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 104) = v8;
  *(_OWORD *)(a1 + 12CoreML::Specification::NonMaximumSuppression::New(this, 0) = v9;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 88) = v7;
  *(void *)(a1 + 144) = 0;
  id v14 = v5;
  *(void *)(a1 + 152) = v14;
  uint64_t v15 = (void *)MEMORY[0x22A615770]();
  uint64_t v16 = *MEMORY[0x263F00858];
  v30[0] = *MEMORY[0x263F00850];
  v30[1] = v16;
  v31[0] = MEMORY[0x263EFFA88];
  int v17 = [MEMORY[0x263EFF9D0] null];
  v31[1] = v17;
  uint64_t v18 = [NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:2];

  uint64_t v19 = [MEMORY[0x263F00628] contextWithOptions:v18];
  char v20 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v19;

  id v21 = objc_alloc_init(MEMORY[0x263EFF980]);
  if (a2[7] > 0.0)
  {
    uint64_t v22 = objc_alloc_init(TCMPSRandomCropAugmenter);
    [(TCMPSRandomCropAugmenter *)v22 setSkipProbability:(float)(1.0 - a2[7])];
    [(TCMPSRandomCropAugmenter *)v22 setMinAspectRatio:a2[8]];
    [(TCMPSRandomCropAugmenter *)v22 setMaxAspectRatio:a2[9]];
    [(TCMPSRandomCropAugmenter *)v22 setMinAreaFraction:a2[10]];
    [(TCMPSRandomCropAugmenter *)v22 setMaxAreaFraction:a2[11]];
    [(TCMPSRandomCropAugmenter *)v22 setMinObjectCovered:a2[12]];
    [(TCMPSRandomCropAugmenter *)v22 setMaxAttempts:*((void *)a2 + 7)];
    [(TCMPSRandomCropAugmenter *)v22 setMinEjectCoverage:a2[16]];
    [v21 addObject:v22];
  }
  if (a2[18] > 0.0)
  {
    size_t v23 = objc_alloc_init(TCMPSRandomPadAugmenter);
    [(TCMPSRandomPadAugmenter *)v23 setSkipProbability:(float)(1.0 - a2[18])];
    [(TCMPSRandomPadAugmenter *)v23 setMinAspectRatio:a2[20]];
    [(TCMPSRandomPadAugmenter *)v23 setMaxAspectRatio:a2[21]];
    [(TCMPSRandomPadAugmenter *)v23 setMinAreaFraction:a2[22]];
    [(TCMPSRandomPadAugmenter *)v23 setMaxAreaFraction:a2[23]];
    [(TCMPSRandomPadAugmenter *)v23 setMaxAttempts:*((void *)a2 + 12)];
    [v21 addObject:v23];
  }
  if (a2[26] > 0.0)
  {
    uint64_t v24 = objc_alloc_init(TCMPSHorizontalFlipAugmenter);
    [(TCMPSHorizontalFlipAugmenter *)v24 setSkipProbability:(float)(1.0 - a2[26])];
    [v21 addObject:v24];
  }
  if (a2[27] > 0.0 || a2[28] > 0.0 || a2[29] > 0.0)
  {
    uint64_t v25 = objc_alloc_init(TCMPSColorControlAugmenter);
    [(TCMPSColorControlAugmenter *)v25 setMaxBrightnessDelta:a2[27]];
    [(TCMPSColorControlAugmenter *)v25 setMaxContrastProportion:a2[28]];
    [(TCMPSColorControlAugmenter *)v25 setMaxSaturationProportion:a2[29]];
    [v21 addObject:v25];
  }
  if (a2[30] > 0.0)
  {
    size_t v26 = objc_alloc_init(TCMPSHueAdjustAugmenter);
    [(TCMPSHueAdjustAugmenter *)v26 setMaxHueAdjust:a2[30]];
    [v21 addObject:v26];
  }
  unint64_t v27 = -[TCMPSResizeAugmenter initWithSize:]([TCMPSResizeAugmenter alloc], "initWithSize:", (double)*(unint64_t *)(a1 + 16), (double)*(unint64_t *)(a1 + 24));
  [v21 addObject:v27];

  signed int v28 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v21;

  return a1;
}

void sub_2242F50B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mps_image_augmenter::mps_image_augmenter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = ;
  turi::neural_net::mps_image_augmenter::mps_image_augmenter(a1, (float *)a2, v4);

  return a1;
}

void sub_2242F51C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::neural_net::mps_image_augmenter::prepare_images(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  long long v6 = (void *)MEMORY[0x22A615770]();
  unint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v35 = v9;
  unint64_t v36 = v7;
  uint64_t v34 = v8;
  if (v7 < (a2[1] - *a2) >> 6) {
    std::vector<turi::neural_net::labeled_image>::resize(a2, v7);
  }
  long long v10 = (uint64_t *)turi::neural_net::shared_float_array::shared_float_array((turi::neural_net::shared_float_array *)a3);
  v10[7] = 0;
  v10[8] = 0;
  v10 += 7;
  v10[2] = 0;
  std::vector<std::vector<turi::neural_net::image_annotation>>::resize(v10, (a2[1] - *a2) >> 6);
  std::vector<float>::vector(v32, 3 * v9 * v8 * v7);
  long long v11 = v32[0];
  if (v32[1] == v32[0]) {
    long long v11 = 0;
  }
  v31[0] = v11;
  v31[1] = ((char *)v32[1] - (char *)v32[0]) >> 2;
  turi::neural_net::TaskQueue::GetGlobalConcurrentQueue(&v27);
  long long v12 = v27;
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  uint64_t v38 = 0;
  uint64_t v15 = operator new(0x40uLL);
  *uint64_t v15 = &unk_26D777B20;
  v15[1] = a2;
  v15[2] = a1;
  _WORD v15[3] = &v34;
  v15[4] = &v35;
  v15[5] = v31;
  v15[6] = &v36;
  v15[7] = a3;
  uint64_t v38 = v15;
  (*(void (**)(void *, uint64_t, void *))(*(void *)v12 + 32))(v12, (v13 - v14) >> 6, v37);
  std::__function::__value_func<void ()(unsigned long)>::~__value_func[abi:ne180100](v37);
  if ((void)v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v28);
  }
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v32;
  uint64_t v26 = v33;
  v32[0] = 0;
  v32[1] = 0;
  uint64_t v33 = 0;
  uint64_t v17 = v35;
  unint64_t v16 = v36;
  uint64_t v18 = v34;
  uint64_t v19 = operator new(0x20uLL);
  size_t v23 = v19 + 4;
  uint64_t v24 = v19 + 4;
  void *v19 = v16;
  v19[1] = v17;
  v19[2] = v18;
  v19[3] = 3;
  __n128 __p = v19;
  turi::neural_net::shared_float_array::wrap((uint64_t)v25, (uint64_t)&__p, (uint64_t)&v27);
  long long v20 = v28;
  long long v28 = 0uLL;
  id v21 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v20;
  if (v21)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    id v21 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  }
  *(_OWORD *)(a3 + 24) = v29;
  *(_OWORD *)(a3 + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = v30;
  unint64_t v27 = &unk_26D752D58;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (__p)
  {
    size_t v23 = __p;
    operator delete(__p);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
}

void sub_2242F5444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
}

void turi::neural_net::mps_image_augmenter::~mps_image_augmenter(id *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x22A614FA0);
}

void *__Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  return memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x9C8uLL);
}

double ___ZN4turi10neural_net12_GLOBAL__N_116create_rng_batchEmi_block_invoke(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  double v5 = a3 - a2;
  double v6 = (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v4);
  return a2
       + v5
       * ((v6
         + (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v4)
         * 4294967300.0)
        * 5.42101086e-20);
}

void std::__function::__func<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0,std::allocator<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0>,void ()(unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0,std::allocator<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0>,void ()(unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26D777B20;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0,std::allocator<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0>,void ()(unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D777B20;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0,std::allocator<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0>,void ()(unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 16);
  MEMORY[0x22A615770]();
  obunsigned int j = (void **)a1;
  uint64_t v5 = **(void **)(a1 + 8);
  double v6 = objc_opt_new();
  unint64_t v7 = *(uint64_t **)(v5 + (v3 << 6));
  uint64_t v8 = *v7;
  if (v9)
  {
    id v10 = v9[1];
  }
  else
  {
    long long v11 = (void *)MEMORY[0x263EFF990];
    uint64_t v12 = (*(uint64_t (**)(uint64_t *))(v8 + 16))(v7);
    id v13 = [v11 dataWithLength:12 * v12 * (*(uint64_t (**)(uint64_t *))(*v7 + 24))(v7)];
    uint64_t v14 = [v13 mutableBytes];
    uint64_t v15 = (*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
    if (3 * v15 * (*(uint64_t (**)(uint64_t *))(*v7 + 24))(v7)) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = 0;
    }
    (*(void (**)(uint64_t *, uint64_t))(*v7 + 40))(v7, v16);
    uint64_t v17 = (void *)MEMORY[0x263EFF990];
    uint64_t v18 = (*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
    id v19 = [v17 dataWithLength:16 * v18 * (*(uint64_t (**)(uint64_t *))(*v7 + 24))(v7)];
    *(void *)&src[0].a = [v19 mutableBytes];
    *(void *)&src[0].c = (*(uint64_t (**)(uint64_t *))(*v7 + 24))(v7);
    *(void *)&src[0].b = (*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
    unint64_t v20 = [v19 length];
    uint64_t v61 = v5;
    uint64_t v21 = v3;
    *(void *)&src[0].d = v20 / (*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);

    id v22 = v13;
    v68.data = (void *)[v22 mutableBytes];
    v68.width = (*(uint64_t (**)(uint64_t *))(*v7 + 24))(v7);
    v68.height = (*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
    unint64_t v23 = [v22 length];
    v68.rowBytes = v23 / (*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);

    if (vImageConvert_RGBFFFtoRGBAFFFF(&v68, 0, 1.0, (const vImage_Buffer *)src, 1, 0x10u))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::string::basic_string[abi:ne180100]<0>(&dest, "converting RGB bitmap to RGBA");
      turi::TuriException::TuriException(exception, 10, &dest);
    }
    uint64_t v24 = (void *)MEMORY[0x263F00650];
    unint64_t v25 = [v19 length];
    unint64_t v26 = (*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7);
    unint64_t v27 = (*(uint64_t (**)(uint64_t *))(*v7 + 24))(v7);
    objc_msgSend(v24, "imageWithBitmapData:bytesPerRow:size:format:colorSpace:", v19, v25 / v26, *MEMORY[0x263F008B8], 0, (double)v27, (double)(unint64_t)(*(uint64_t (**)(uint64_t *))(*v7 + 16))(v7));
    id v10 = (id)objc_claimAutoreleasedReturnValue();

    uint64_t v5 = v61;
    uint64_t v3 = v21;
  }
  long long v28 = [v10 imageByClampingToExtent];
  [v6 setImage:v28];

  [v10 extent];
  objc_msgSend(v6, "setBounds:");
  [v6 bounds];
  CGFloat v30 = v29;
  CGFloat v32 = v31;
  uint64_t v33 = (int **)(v5 + (v3 << 6));
  uint64_t v34 = v33[2];
  v33 += 2;
  uint64_t v35 = v33 + 1;
  unint64_t v36 = [MEMORY[0x263EFF980] arrayWithCapacity:0xAAAAAAAAAAAAAAABLL * (((char *)v33[1] - (char *)v34) >> 3)];
  uint64_t v37 = *v33;
  for (uint64_t i = *v35; v37 != i; v37 += 6)
  {
    uint64_t v39 = objc_opt_new();
    [v39 setIdentifier:*v37];
    [v39 setConfidence:*((float *)v37 + 5)];
    CGFloat v40 = *((float *)v37 + 1);
    CGFloat v41 = *((float *)v37 + 2);
    CGFloat v42 = *((float *)v37 + 3);
    CGFloat v43 = *((float *)v37 + 4);
    v71.width = v30;
    v71.height = v32;
    v72.origin.x = v40;
    v72.origin.y = v41;
    v72.size.width = v42;
    v72.size.height = v43;
    CGRect v73 = CGRectApplyAffineTransform(v72, src);
    objc_msgSend(v39, "setBoundingBox:", v73.origin.x, v73.origin.y, v73.size.width, v73.size.height);
    [v36 addObject:v39];
  }
  [v6 setAnnotations:v36];

  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  id v44 = *(id *)(v4 + 144);
  uint64_t v45 = [v44 countByEnumeratingWithState:&v63 objects:&v68 count:16];
  if (v45)
  {
    uint64_t v46 = *(void *)v64;
    do
    {
      uint64_t v47 = 0;
      size_t v48 = v6;
      do
      {
        if (*(void *)v64 != v46) {
          objc_enumerationMutation(v44);
        }
        id v49 = *(id *)(*((void *)&v63 + 1) + 8 * v47);
        uint64_t v50 = [*(id *)(v4 + 152) objectAtIndexedSubscript:v3];
        double v6 = [v49 imageAugmentedFromImage:v48 generator:v50];

        ++v47;
        size_t v48 = v6;
      }
      while (v45 != v47);
      uint64_t v45 = [v44 countByEnumeratingWithState:&v63 objects:&v68 count:16];
    }
    while (v45);
  }

  uint64_t v51 = *(void **)(v4 + 136);
  uint64_t v52 = *obj[3];
  uint64_t v53 = *obj[4];
  turi::Span<float,18446744073709551615ul>::SliceByDimension(obj[5], *obj[6], v3);
  uint64_t v55 = v54;
  id v56 = v6;
  id v57 = v51;
  id v58 = [v56 image];
  v57;
  if (3 * v53 * v52 == v55) {
    operator new[]();
  }
  char v59 = __cxa_allocate_exception(0x40uLL);
  memset(src, 0, 24);
  turi::TuriException::TuriException(v59, 4, src);
}

void sub_2242F6294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
  {
    operator delete(__p);
    if ((v42 & 1) == 0)
    {
LABEL_6:

      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v41);
  goto LABEL_6;
}

uint64_t std::__function::__func<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0,std::allocator<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0>,void ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0,std::allocator<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0>,void ()(unsigned long)>::target_type()
{
}

CGAffineTransform *turi::neural_net::anonymous namespace'::transform_to_core_image@<X0>(CGSize a1@<0:D0, 8:D1>, CGAffineTransform *a2@<X8>)
{
  CGFloat height = a1.height;
  CGAffineTransformMakeScale(&t1, a1.width, -a1.height);
  CGAffineTransformMakeTranslation(&v6, 0.0, height);
  return CGAffineTransformConcat(a2, &t1, &v6);
}

void std::vector<turi::neural_net::image_annotation>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    CGAffineTransform v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v3, a2);
    unint64_t v7 = &v6[24 * v5];
    uint64_t v9 = &v6[24 * v8];
    long long v11 = (char *)*a1;
    id v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      id v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

double CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/GLMClassifier.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::_GLMClassifier_DoubleArray_default_instance_ = (uint64_t)&unk_26D777BB0;
  *(void *)algn_26808DA48 = 0;
  qword_26808DA50 = 0;
  unk_26808DA58 = 0;
  dword_26808DA64 = 0;
  byte_26808DA68 = 1;
  CoreML::Specification::_GLMClassifier_default_instance_ = (uint64_t)&unk_26D777C48;
  double result = 0.0;
  unk_26808DA78 = 0u;
  unk_26808DA88 = 0u;
  unk_26808DA98 = 0u;
  unk_26808DAAC = 0;
  qword_26808DAC0 = 0;
  byte_26808DAC8 = 1;
  return result;
}

void CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(CoreML::Specification::protobuf_GLMClassifier_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2242F6768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::GLMClassifier_DoubleArray *CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D777BB0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::GLMClassifier_DoubleArray *)&CoreML::Specification::_GLMClassifier_DoubleArray_default_instance_) {
    CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_2242F67E8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::GLMClassifier_DoubleArray::~GLMClassifier_DoubleArray(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  *(void *)this = &unk_26D777BB0;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::GLMClassifier_DoubleArray::~GLMClassifier_DoubleArray(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::GLMClassifier_DoubleArray::New(CoreML::Specification::GLMClassifier_DoubleArray *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242F6900(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::GLMClassifier_DoubleArray>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier_DoubleArray>);
  }
  return result;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::GLMClassifier_DoubleArray::MergePartialFromCodedStream(CoreML::Specification::GLMClassifier_DoubleArray *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          CGAffineTransform v6 = *a2;
          if (*a2 < a2[1]) {
            break;
          }
          uint64_t v7 = 0;
LABEL_7:
          TagFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0) {
            goto LABEL_8;
          }
LABEL_14:
          if (v8) {
            BOOL v12 = (v8 & 7) == 4;
          }
          else {
            BOOL v12 = 1;
          }
          if (v12) {
            return 1;
          }
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
        }
          }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_14;
        }
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8) {
          goto LABEL_14;
        }
        if (v8 != 9) {
          break;
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0xAu, (unint64_t **)a2, (uint64_t)v5))return 0; {
      }
        }
      if (v8 != 10) {
        goto LABEL_14;
      }
      id v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0) {
          return 0;
        }
      }
      else
      {
        VarintSizeAsIntFallbacuint64_t k = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0) {
        return 0;
      }
      signed int v13 = *v5;
      unsigned int v14 = VarintSizeAsIntFallback >> 3;
      int v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      int v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15) {
        int v17 = v15;
      }
      else {
        int v17 = v16;
      }
      if (v15 == -1) {
        int v17 = v16;
      }
      if (v17 >= (uint64_t)VarintSizeAsIntFallback) {
        break;
      }
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v14 <= 1) {
          int v18 = 1;
        }
        else {
          int v18 = VarintSizeAsIntFallback >> 3;
        }
        do
        {
          unint64_t v28 = 0;
          id v19 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v28);
            if (!result) {
              return result;
            }
            unint64_t v20 = v28;
          }
          else
          {
            unint64_t v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          signed int v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v21 + 1);
            signed int v21 = *v5;
          }
          uint64_t v22 = *((void *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(void *)(v22 + 8 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    signed int v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      uint64_t v25 = *((void *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v13 + v14);
      uint64_t v25 = *((void *)this + 3);
      uint64_t v26 = 8 * v24 - 8 * *((int *)this + 4);
      if (v26 >= 1) {
        bzero((void *)(v25 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v26 >> 3) - ((unint64_t)v26 > 7)) + 8);
      }
    }
    *uint64_t v5 = v24;
    uint64_t v27 = v25 + 8;
    if (!v25) {
      uint64_t v27 = 0;
    }
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 8 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    BOOL result = 0;
    *uint64_t v5 = v13;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(void *)(v5 + 24);
    if (v13) {
      unsigned int v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    }
    else {
      unsigned int v14 = 0;
    }
    int v15 = (const double *)*(unsigned int *)(v5 + 16);
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v14, v15, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::ByteSizeLong(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v2 = 8 * v1;
  if (v1)
  {
    if ((v2 & 0x80000000) != 0) {
      uint64_t v3 = 11;
    }
    else {
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::IsInitialized(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  return 1;
}

void *CoreML::Specification::GLMClassifier_DoubleArray::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.GLMClassifier.DoubleArray");
}

CoreML::Specification::GLMClassifier *CoreML::Specification::GLMClassifier::GLMClassifier(CoreML::Specification::GLMClassifier *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_26D777C48;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = 0u;
  if (this != (CoreML::Specification::GLMClassifier *)&CoreML::Specification::_GLMClassifier_default_instance_) {
    CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(this);
  }
  *(void *)((char *)this + 6CoreML::Specification::NonMaximumSuppression::New(this, 0) = 0;
  *((void *)this + 1CoreML::Specification::NonMaximumSuppression::New(this, 0) = 0;
  return this;
}

void sub_2242F6DE8(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)(v2 + 48);
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::GLMClassifier *CoreML::Specification::GLMClassifier::GLMClassifier(CoreML::Specification::GLMClassifier *this, const CoreML::Specification::GLMClassifier *a2)
{
  *(void *)this = &unk_26D777C48;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (unint64_t *)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  unsigned int v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    uint64_t v7 = *((void *)a2 + 4);
    uint64_t v8 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::GLMClassifier *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>(v5, (CoreML::Specification::GLMRegressor_DoubleArray **)v8, (CoreML::Specification::GLMRegressor_DoubleArray **)(v7 + 8), v6, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    signed int v9 = *((_DWORD *)this + 6) + v6;
    *((_DWORD *)this + 6) = v9;
    unsigned int v10 = (signed int *)*((void *)this + 4);
    if (*v10 < v9) {
      signed int *v10 = v9;
    }
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  int v11 = *((_DWORD *)a2 + 10);
  if (v11)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 10, v11);
    memcpy((void *)(*((void *)this + 6) + 8), (const void *)(*((void *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *((_DWORD *)this + 1CoreML::Specification::NonMaximumSuppression::New(this, 0) = *((_DWORD *)a2 + 10);
  }
  *((_DWORD *)this + 2CoreML::Specification::NonMaximumSuppression::New(this, 0) = 0;
  uint64_t v12 = *((void *)a2 + 1);
  if (v12) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v12 & 0xFFFFFFFFFFFFFFFELL);
  }
  *(void *)((char *)this + 6CoreML::Specification::NonMaximumSuppression::New(this, 0) = *(void *)((char *)a2 + 60);
  *((_DWORD *)this + 21) = 0;
  int v13 = *((_DWORD *)a2 + 21);
  if (v13 == 100)
  {
    CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
    *((_DWORD *)this + 21) = 100;
    operator new();
  }
  if (v13 == 101)
  {
    CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
    *((_DWORD *)this + 21) = 101;
    operator new();
  }
  return this;
}

void sub_2242F7008(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v4, 0x10A1C40290C9B23);
  unsigned int v6 = *(void **)(v3 + 48);
  if (v6)
  {
    if (!*v6) {
      operator delete(v6);
    }
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::GLMClassifier::~GLMClassifier(CoreML::Specification::GLMClassifier *this)
{
  *(void *)this = &unk_26D777C48;
  if (*((_DWORD *)this + 21)) {
    CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
  }
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::GLMClassifier::~GLMClassifier(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t CoreML::Specification::GLMClassifier::clear_ClassLabels(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 84);
  if (v2 == 101 || v2 == 100)
  {
    this = *(void *)(this + 72);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 84) = 0;
  return this;
}

uint64_t *CoreML::Specification::GLMClassifier::default_instance(CoreML::Specification::GLMClassifier *this)
{
  return &CoreML::Specification::_GLMClassifier_default_instance_;
}

void CoreML::Specification::GLMClassifier::New(CoreML::Specification::GLMClassifier *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242F7214(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40D1CF0537);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::GLMClassifier>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier>);
  }
  return result;
}

uint64_t CoreML::Specification::GLMClassifier::Clear(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    int v2 = (uint64_t *)(*(void *)(this + 32) + 8);
    do
    {
      uint64_t v3 = *v2++;
      *(_DWORD *)(v3 + 16) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 4CoreML::Specification::NonMaximumSuppression::New(this, 0) = 0;
  *(void *)(this + 6CoreML::Specification::NonMaximumSuppression::New(this, 0) = 0;
  return CoreML::Specification::GLMClassifier::clear_ClassLabels(this);
}

uint64_t CoreML::Specification::GLMClassifier::MergePartialFromCodedStream(CoreML::Specification::GLMClassifier *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 40);
  unsigned int v6 = (char *)this + 16;
  while (1)
  {
LABEL_2:
    uint64_t v7 = *(unsigned __int8 **)a2;
    unint64_t v8 = *((void *)a2 + 1);
    if (*(void *)a2 >= v8)
    {
      uint64_t v10 = 0;
    }
    else
    {
      signed int v9 = v7 + 1;
      uint64_t v10 = *v7;
      if ((char)*v7 >= 1)
      {
        *(void *)a2 = v9;
        unint64_t v11 = v10 | 0x100000000;
        if ((v11 & 0x100000000) != 0) {
          goto LABEL_9;
        }
        goto LABEL_88;
      }
      if ((unint64_t)v9 < v8)
      {
        int v12 = *v9;
        if ((v10 & ~v12) >= 0x80)
        {
          *(void *)a2 = v7 + 2;
          unint64_t v11 = (v10 + (v12 << 7) - 128) | 0x100000000;
LABEL_9:
          unsigned int v13 = v11 >> 3;
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10) {
                goto LABEL_88;
              }
              unsigned int v14 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>((uint64_t)v6);
              int v15 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v15 < 0)
              {
                VarintSizeAsIntFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (VarintSizeAsIntFallback < 0) {
                  return 0;
                }
              }
              else
              {
                VarintSizeAsIntFallbacuint64_t k = *v15;
                *(void *)a2 = v15 + 1;
              }
              unint64_t v29 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
              if ((v29 & 0x8000000000000000) != 0) {
                return 0;
              }
              int v31 = v29;
              uint64_t result = CoreML::Specification::GLMClassifier_DoubleArray::MergePartialFromCodedStream(v14, (char **)a2, v30);
              if (result) {
                goto LABEL_56;
              }
              return result;
            case 2u:
              if (v11 == 17)
              {
                if (_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0x12u, (unint64_t **)a2, (uint64_t)v5))
                {
                  continue;
                }
                return 0;
              }
              if (v11 != 18) {
                goto LABEL_88;
              }
              int v18 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1) || *v18 < 0)
              {
                unsigned int v19 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if ((v19 & 0x80000000) != 0) {
                  return 0;
                }
              }
              else
              {
                unsigned int v19 = *v18;
                *(void *)a2 = v18 + 1;
              }
              if ((v19 & 7) != 0) {
                return 0;
              }
              signed int v37 = *v5;
              unsigned int v38 = v19 >> 3;
              int v39 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit(a2);
              int v40 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2);
              if (v40 >= v39) {
                int v41 = v39;
              }
              else {
                int v41 = v40;
              }
              if (v39 == -1) {
                int v41 = v40;
              }
              if (v41 < (uint64_t)v19)
              {
                if (v19 < 8) {
                  continue;
                }
                if (v38 <= 1) {
                  int v42 = 1;
                }
                else {
                  int v42 = v19 >> 3;
                }
                while (1)
                {
                  unint64_t v55 = 0;
                  CGFloat v43 = *(unint64_t **)a2;
                  if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) < 8)
                  {
                    uint64_t result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v55);
                    if (!result) {
                      return result;
                    }
                    unint64_t v44 = v55;
                  }
                  else
                  {
                    unint64_t v44 = *v43;
                    *(void *)a2 = v43 + 1;
                  }
                  signed int v45 = *((_DWORD *)this + 10);
                  if (v45 == *((_DWORD *)this + 11))
                  {
                    _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v45 + 1);
                    signed int v45 = *v5;
                  }
                  uint64_t v46 = *((void *)this + 6);
                  *((_DWORD *)this + 1CoreML::Specification::NonMaximumSuppression::New(this, 0) = v45 + 1;
                  *(void *)(v46 + 8 * v45 + 8) = v44;
                  if (!--v42) {
                    goto LABEL_2;
                  }
                }
              }
              signed int v47 = v37 + v38;
              if ((int)*v5 >= (int)(v37 + v38))
              {
                uint64_t v48 = *((void *)this + 6);
              }
              else
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v37 + v38);
                uint64_t v48 = *((void *)this + 6);
                uint64_t v49 = 8 * v47 - 8 * *((int *)this + 10);
                if (v49 >= 1) {
                  bzero((void *)(v48 + 8 + 8 * *((int *)this + 10)), 8 * (((unint64_t)v49 >> 3) - ((unint64_t)v49 > 7)) + 8);
                }
              }
              *uint64_t v5 = v47;
              uint64_t v50 = v48 + 8;
              if (!v48) {
                uint64_t v50 = 0;
              }
              if (_tc_google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v50 + 8 * v37), v19)) {
                continue;
              }
              if ((int)*v5 < 1) {
                return 0;
              }
              uint64_t result = 0;
              *uint64_t v5 = v37;
              return result;
            case 3u:
              if (v11 != 24) {
                goto LABEL_88;
              }
              unint64_t v20 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1))
              {
                int v21 = 0;
              }
              else
              {
                int v21 = *v20;
                if ((*v20 & 0x80000000) == 0)
                {
                  *(void *)a2 = v20 + 1;
LABEL_96:
                  *((_DWORD *)this + 15) = v21;
                  continue;
                }
              }
              Varint32Fallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v21);
              int v21 = Varint32Fallback;
              if (Varint32Fallback < 0) {
                return 0;
              }
              goto LABEL_96;
            case 4u:
              if (v11 != 32) {
                goto LABEL_88;
              }
              uint64_t v22 = *(char **)a2;
              if (*(void *)a2 >= *((void *)a2 + 1))
              {
                int v23 = 0;
              }
              else
              {
                int v23 = *v22;
                if ((*v22 & 0x80000000) == 0)
                {
                  *(void *)a2 = v22 + 1;
                  goto LABEL_99;
                }
              }
              uint64_t v54 = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v23);
              int v23 = v54;
              if (v54 < 0) {
                return 0;
              }
LABEL_99:
              *((_DWORD *)this + 16) = v23;
              continue;
            default:
              if (v13 == 100)
              {
                if (v11 != 34) {
                  goto LABEL_88;
                }
                if (*((_DWORD *)this + 21) != 100)
                {
                  CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
                  *((_DWORD *)this + 21) = 100;
                  operator new();
                }
                signed int v24 = (CoreML::Specification::StringVector *)*((void *)this + 9);
                uint64_t v27 = *(char **)a2;
                if (*(void *)a2 >= *((void *)a2 + 1) || *v27 < 0)
                {
                  int v28 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v28 < 0) {
                    return 0;
                  }
                }
                else
                {
                  int v28 = *v27;
                  *(void *)a2 = v27 + 1;
                }
                unint64_t v35 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v28);
                if ((v35 & 0x8000000000000000) != 0) {
                  return 0;
                }
                int v31 = v35;
                uint64_t result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v24, (char **)a2, v36);
                if (!result) {
                  return result;
                }
              }
              else
              {
                if (v13 != 101 || v11 != 42) {
                  goto LABEL_88;
                }
                if (*((_DWORD *)this + 21) != 101)
                {
                  CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
                  *((_DWORD *)this + 21) = 101;
                  operator new();
                }
                int v17 = (CoreML::Specification::Int64Vector *)*((void *)this + 9);
                uint64_t v25 = *(char **)a2;
                if (*(void *)a2 >= *((void *)a2 + 1) || *v25 < 0)
                {
                  int v26 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v26 < 0) {
                    return 0;
                  }
                }
                else
                {
                  int v26 = *v25;
                  *(void *)a2 = v25 + 1;
                }
                unint64_t v33 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v26);
                if ((v33 & 0x8000000000000000) != 0) {
                  return 0;
                }
                int v31 = v33;
                uint64_t result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v17, (char **)a2, v34);
                if (!result) {
                  return result;
                }
              }
LABEL_56:
              if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v31)) {
                return 0;
              }
              continue;
          }
        }
      }
    }
    TagFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
    unint64_t v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v11 & 0x100000000) != 0) {
      goto LABEL_9;
    }
LABEL_88:
    if (!v11 || (v11 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_2242F7818(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::GLMClassifier::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  if (*(int *)(v5 + 40) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x12u);
      int v8 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 18;
      int v8 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v8;
    }
    unsigned int v9 = *(_DWORD *)(v5 + 56);
    if (v8 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v9);
    }
    else
    {
      uint64_t v10 = *((void *)a2 + 1);
      if (v9 < 0x80)
      {
        unsigned int v12 = *(_DWORD *)(v5 + 56);
        unint64_t v11 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unint64_t v11 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v11++ = v9 | 0x80;
          unsigned int v12 = v9 >> 7;
          unsigned int v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
      }
      unsigned char *v11 = v12;
      int v14 = v11 - v10 + 1;
      *((void *)a2 + 1) += v14;
      *((_DWORD *)a2 + 4) -= v14;
    }
    uint64_t v15 = *(void *)(v5 + 48);
    if (v15) {
      int v16 = (_tc_google::protobuf::internal::WireFormatLite *)(v15 + 8);
    }
    else {
      int v16 = 0;
    }
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v16, (const double *)*(unsigned int *)(v5 + 40), a2, a4);
  }
  signed int v17 = *(_DWORD *)(v5 + 60);
  if (v17) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(3, v17, a2, a4);
  }
  signed int v18 = *(_DWORD *)(v5 + 64);
  if (v18) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(4, v18, a2, a4);
  }
  int v19 = *(_DWORD *)(v5 + 84);
  if (v19 == 100)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, *(void *)(v5 + 72), a2, a4);
    int v19 = *(_DWORD *)(v5 + 84);
  }
  if (v19 == 101)
  {
    uint64_t v20 = *(void *)(v5 + 72);
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x65, v20, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::GLMClassifier::ByteSizeLong(CoreML::Specification::GLMClassifier *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((void *)this + 4);
    uint64_t v5 = *((unsigned int *)this + 6);
    do
    {
      int v6 = *(unsigned int **)(v4 + 8 * v3 + 8);
      uint64_t v7 = v6[4];
      uint64_t v8 = 8 * v7;
      if (v7)
      {
        if ((v8 & 0x80000000) != 0) {
          uint64_t v9 = 11;
        }
        else {
          uint64_t v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
      uint64_t v10 = v9 + v8;
      v6[8] = v8;
      v6[9] = v10;
      v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v11 = *((unsigned int *)this + 10);
  uint64_t v12 = 8 * v11;
  if (v11)
  {
    if ((v12 & 0x80000000) != 0) {
      uint64_t v13 = 11;
    }
    else {
      uint64_t v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v5 += v13;
  }
  *((_DWORD *)this + 14) = v12;
  uint64_t v14 = v5 + v12;
  int v15 = *((_DWORD *)this + 15);
  if (v15)
  {
    if (v15 < 0) {
      uint64_t v16 = 11;
    }
    else {
      uint64_t v16 = ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v14 += v16;
  }
  int v17 = *((_DWORD *)this + 16);
  if (v17)
  {
    if (v17 < 0) {
      uint64_t v18 = 11;
    }
    else {
      uint64_t v18 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v14 += v18;
  }
  int v19 = *((_DWORD *)this + 21);
  if (v19 == 101)
  {
    uint64_t v20 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 9));
    goto LABEL_30;
  }
  if (v19 == 100)
  {
    uint64_t v20 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 9));
LABEL_30:
    v14 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 2CoreML::Specification::NonMaximumSuppression::New(this, 0) = v14;
  return v14;
}

std::string *CoreML::Specification::GLMClassifier::MergeFrom(std::string *this, const CoreML::Specification::GLMClassifier *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    int v6 = (CoreML::Specification::GLMRegressor_DoubleArray **)(*((void *)a2 + 4) + 8);
    uint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 16), *((_DWORD *)a2 + 6));
    this = (std::string *)_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>((unint64_t *)(v3 + 16), (CoreML::Specification::GLMRegressor_DoubleArray **)v7, v6, v5, **(_DWORD **)(v3 + 32) - *(_DWORD *)(v3 + 24));
    signed int v8 = *(_DWORD *)(v3 + 24) + v5;
    *(_DWORD *)(v3 + 24) = v8;
    uint64_t v9 = *(signed int **)(v3 + 32);
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
  int v10 = *((_DWORD *)a2 + 10);
  if (v10)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 40), *(_DWORD *)(v3 + 40) + v10);
    this = (std::string *)memcpy((void *)(*(void *)(v3 + 48) + 8 * *(int *)(v3 + 40) + 8), (const void *)(*((void *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
  }
  int v11 = *((_DWORD *)a2 + 15);
  if (v11) {
    *(_DWORD *)(v3 + 6CoreML::Specification::NonMaximumSuppression::New(this, 0) = v11;
  }
  int v12 = *((_DWORD *)a2 + 16);
  if (v12) {
    *(_DWORD *)(v3 + 64) = v12;
  }
  int v13 = *((_DWORD *)a2 + 21);
  if (v13 == 101)
  {
    if (*(_DWORD *)(v3 + 84) != 101)
    {
      CoreML::Specification::GLMClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 84) = 101;
      operator new();
    }
    int v15 = (const CoreML::Specification::GLMRegressor_DoubleArray *)*((void *)a2 + 9);
    int v17 = *(unint64_t **)(v3 + 72);
    return (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom(v17, v15);
  }
  else if (v13 == 100)
  {
    if (*(_DWORD *)(v3 + 84) != 100)
    {
      CoreML::Specification::GLMClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 84) = 100;
      operator new();
    }
    uint64_t v14 = (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)*((void *)a2 + 9);
    uint64_t v16 = *(std::string **)(v3 + 72);
    return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom(v16, v14);
  }
  return this;
}

void sub_2242F7E08(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::GLMClassifier::IsInitialized(CoreML::Specification::GLMClassifier *this)
{
  return 1;
}

void *CoreML::Specification::GLMClassifier::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.GLMClassifier");
}

void CoreML::Specification::GLMClassifier_DoubleArray::New(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
}

void CoreML::Specification::GLMClassifier::New(CoreML::Specification::GLMClassifier *this)
{
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier_DoubleArray>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator(uint64_t a1, uint64_t a2, uint64_t **a3, char a4, int a5, uint64_t **a6)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  int v10 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 4CoreML::Specification::GLMClassifier::New(this, 0) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  int v11 = (uint64_t **)(a1 + 32);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 72) = 0;
  if (a1 + 56 != a2) {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>((uint64_t **)(a1 + 56), *(long long **)a2, (long long *)(a2 + 8));
  }
  if (v10 != a3) {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(v10, *a3, a3 + 1);
  }
  *(unsigned char *)a1 = a4;
  *(_DWORD *)(a1 + 8CoreML::Specification::GLMClassifier::New(this, 0) = a5;
  if (v11 != a6) {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(v11, *a6, a6 + 1);
  }
  return a1;
}

void sub_2242F7FAC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v4, *v3);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v2, *v6);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *v5);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, _DWORD *a3@<X8>)
{
  int v3 = *((_DWORD *)a2 + 35);
  if (v3 <= 879)
  {
    if (v3 <= 604)
    {
      if (v3 > 249)
      {
        if (v3 > 329)
        {
          if (v3 > 409)
          {
            if (v3 <= 429)
            {
              if (v3 == 410)
              {
                CoreML::NeuralNetworkSpecValidator::validateGRULayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
              }
              if (v3 == 420)
              {
                CoreML::NeuralNetworkSpecValidator::validateUniDirectionalLSTMLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
              }
            }
            else
            {
              switch(v3)
              {
                case 430:
                  CoreML::NeuralNetworkSpecValidator::validateBiDirectionalLSTMLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                  return;
                case 500:
                  CoreML::NeuralNetworkSpecValidator::validateCustomLayer((CoreML::Specification::CustomLayerParams **)a2, (uint64_t)a3);
                  return;
                case 600:
                  CoreML::NeuralNetworkSpecValidator::validateCopyLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                  return;
              }
            }
          }
          else if (v3 <= 344)
          {
            if (v3 == 330)
            {
              CoreML::NeuralNetworkSpecValidator::validateSplitLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
            if (v3 == 340)
            {
              CoreML::NeuralNetworkSpecValidator::validateSequenceRepeatLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
          }
          else
          {
            switch(v3)
            {
              case 345:
                CoreML::NeuralNetworkSpecValidator::validateReorganizeDataLayer(this, a2, (uint64_t)a3);
                return;
              case 350:
                CoreML::NeuralNetworkSpecValidator::validateSliceLayer(this, a2, (uint64_t)a3);
                return;
              case 400:
                CoreML::NeuralNetworkSpecValidator::validateSimpleRecurrentLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
            }
          }
        }
        else if (v3 > 289)
        {
          if (v3 <= 300)
          {
            if (v3 == 290)
            {
              CoreML::NeuralNetworkSpecValidator::validateLoadConstantLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
            if (v3 == 300)
            {
              CoreML::NeuralNetworkSpecValidator::validateReshapeLayer(this, a2, (uint64_t)a3);
              return;
            }
          }
          else
          {
            switch(v3)
            {
              case 301:
                CoreML::NeuralNetworkSpecValidator::validateFlattenLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
              case 310:
                CoreML::NeuralNetworkSpecValidator::validatePermuteLayer(this, a2, (uint64_t)a3);
                return;
              case 320:
                CoreML::NeuralNetworkSpecValidator::validateConcatLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
            }
          }
        }
        else if (v3 <= 260)
        {
          if (v3 == 250)
          {
            CoreML::NeuralNetworkSpecValidator::validateBiasLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
          if (v3 == 260)
          {
            CoreML::NeuralNetworkSpecValidator::validateMaxLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          switch(v3)
          {
            case 261:
              CoreML::NeuralNetworkSpecValidator::validateMinLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 270:
              CoreML::NeuralNetworkSpecValidator::validateDotLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 280:
              CoreML::NeuralNetworkSpecValidator::validateReduceLayer(this, a2, (uint64_t)a3);
              return;
          }
        }
      }
      else if (v3 > 189)
      {
        if (v3 > 219)
        {
          if (v3 <= 230)
          {
            if (v3 == 220)
            {
              CoreML::NeuralNetworkSpecValidator::validateUnaryFunctionLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
            if (v3 == 230)
            {
              CoreML::NeuralNetworkSpecValidator::validateAddLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
          }
          else
          {
            switch(v3)
            {
              case 231:
                CoreML::NeuralNetworkSpecValidator::validateMultiplyLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
              case 240:
                CoreML::NeuralNetworkSpecValidator::validateAverageLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
              case 245:
                CoreML::NeuralNetworkSpecValidator::validateScaleLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
            }
          }
        }
        else if (v3 <= 209)
        {
          if (v3 == 190)
          {
            CoreML::NeuralNetworkSpecValidator::validateCropLayer(this, a2, (uint64_t)a3);
            return;
          }
          if (v3 == 200)
          {
            CoreML::NeuralNetworkSpecValidator::validatePaddingLayer(this, a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          switch(v3)
          {
            case 210:
              CoreML::NeuralNetworkSpecValidator::validateUpsampleLayer(this, (int **)a2, (uint64_t)a3);
              return;
            case 211:
              CoreML::NeuralNetworkSpecValidator::validateResizeBilinearLayer(this, a2, (uint64_t)a3);
              return;
            case 212:
              CoreML::NeuralNetworkSpecValidator::validateCropResizeLayer(this, a2, (uint64_t)a3);
              return;
          }
        }
      }
      else if (v3 > 159)
      {
        if (v3 <= 169)
        {
          if (v3 == 160)
          {
            CoreML::NeuralNetworkSpecValidator::validateBatchnormLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
          if (v3 == 165)
          {
            CoreML::NeuralNetworkSpecValidator::validateMvnLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          switch(v3)
          {
            case 170:
              CoreML::NeuralNetworkSpecValidator::validateL2NormLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 175:
              CoreML::NeuralNetworkSpecValidator::validateSoftmaxLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 180:
              CoreML::NeuralNetworkSpecValidator::validateLRNLayer(this, a2, (uint64_t)a3);
              return;
          }
        }
      }
      else if (v3 <= 129)
      {
        if (v3 == 100)
        {
          CoreML::NeuralNetworkSpecValidator::validateConvolutionLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
        if (v3 == 120)
        {
          CoreML::NeuralNetworkSpecValidator::validatePoolingLayer(this, a2, (uint64_t)a3);
          return;
        }
      }
      else
      {
        switch(v3)
        {
          case 130:
            CoreML::NeuralNetworkSpecValidator::validateActivation(this, a2, (uint64_t)a3);
            return;
          case 140:
            CoreML::NeuralNetworkSpecValidator::validateInnerProductLayer(this, a2, (uint64_t)a3);
            return;
          case 150:
            CoreML::NeuralNetworkSpecValidator::validateEmbeddingLayer(this, a2, (uint64_t)a3);
            return;
        }
      }
      goto LABEL_314;
    }
    if (v3 <= 749)
    {
      if (v3 <= 669)
      {
        if (v3 > 634)
        {
          if (v3 > 659)
          {
            if (v3 == 660)
            {
              CoreML::NeuralNetworkSpecValidator::validateClipLayer(a2, (uint64_t)a3);
              return;
            }
            if (v3 == 665)
            {
              CoreML::NeuralNetworkSpecValidator::validateCeilLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
          }
          else
          {
            if (v3 == 635)
            {
              CoreML::NeuralNetworkSpecValidator::validateRangeStaticLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
            if (v3 == 640)
            {
              CoreML::NeuralNetworkSpecValidator::validateRangeDynamicLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
          }
        }
        else if (v3 > 619)
        {
          if (v3 == 620 || v3 == 625)
          {
            CoreML::NeuralNetworkSpecValidator::validateLoopContinueBreakLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          if (v3 == 605)
          {
            CoreML::NeuralNetworkSpecValidator::validateBranchLayer(this, a2, (uint64_t)a3);
            return;
          }
          if (v3 == 615)
          {
            CoreML::NeuralNetworkSpecValidator::validateLoopLayer(this, a2, (uint64_t)a3);
            return;
          }
        }
        goto LABEL_314;
      }
      uint64_t v4 = (v3 - 685);
      if (v4 <= 0x37)
      {
        if (((1 << (v3 + 83)) & 0x84200842000000) != 0)
        {
LABEL_311:
          CoreML::NeuralNetworkSpecValidator::validateTrigonometryLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
        if (v3 == 685)
        {
          CoreML::NeuralNetworkSpecValidator::validateRoundLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
        if (v4 == 15)
        {
          CoreML::NeuralNetworkSpecValidator::validateExp2Layer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
      }
      if (v3 == 670)
      {
        CoreML::NeuralNetworkSpecValidator::validateFloorLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        return;
      }
      if (v3 == 680)
      {
        CoreML::NeuralNetworkSpecValidator::validateSignLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        return;
      }
      goto LABEL_314;
    }
    if (v3 > 864)
    {
      switch(v3)
      {
        case 865:
          CoreML::NeuralNetworkSpecValidator::validateModBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        case 870:
          CoreML::NeuralNetworkSpecValidator::validateMinBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        case 875:
          CoreML::NeuralNetworkSpecValidator::validateMaxBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
      }
      goto LABEL_314;
    }
    if ((v3 - 795) <= 0x3C)
    {
      if (((1 << (v3 - 27)) & 0x1084202942100000) != 0)
      {
        CoreML::NeuralNetworkSpecValidator::validateBooleanElementwiseLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        return;
      }
      if (v3 == 795) {
        goto LABEL_313;
      }
    }
    uint64_t v5 = (v3 - 750);
    if (v5 <= 0x28)
    {
      if (((1 << v5) & 0x42100421) != 0) {
        goto LABEL_311;
      }
      if (v5 == 40)
      {
LABEL_313:
        CoreML::NeuralNetworkSpecValidator::validateActivationLayers((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        return;
      }
    }
LABEL_314:
    CoreML::NeuralNetworkSpecValidator::validateFailUnknownType((const CoreML::Specification::NeuralNetworkLayer *)a2, a3);
    return;
  }
  if (v3 <= 1139)
  {
    if (v3 > 994)
    {
      if (v3 > 1079)
      {
        if (v3 > 1109)
        {
          if (v3 <= 1124)
          {
            if (v3 == 1110)
            {
              CoreML::NeuralNetworkSpecValidator::validateBroadcastToDynamicLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
            if (v3 == 1120)
            {
              CoreML::NeuralNetworkSpecValidator::validateSqueezeLayer(a2, (uint64_t)a3);
              return;
            }
          }
          else
          {
            switch(v3)
            {
              case 1125:
                CoreML::NeuralNetworkSpecValidator::validateExpandDimsLayer(a2, (uint64_t)a3);
                return;
              case 1130:
                CoreML::NeuralNetworkSpecValidator::validateFlattenTo2DLayer(a2, (uint64_t)a3);
                return;
              case 1135:
                CoreML::NeuralNetworkSpecValidator::validateReshapeLikeLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
            }
          }
        }
        else if (v3 <= 1089)
        {
          if (v3 == 1080)
          {
            CoreML::NeuralNetworkSpecValidator::validateFillLikeLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
          if (v3 == 1085)
          {
            CoreML::NeuralNetworkSpecValidator::validateFillStaticLayer(a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          switch(v3)
          {
            case 1090:
              CoreML::NeuralNetworkSpecValidator::validateFillDynamicLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 1100:
              CoreML::NeuralNetworkSpecValidator::validateBroadcastToLikeLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 1105:
              CoreML::NeuralNetworkSpecValidator::validateBroadcastToStaticLayer(a2, (uint64_t)a3);
              return;
          }
        }
      }
      else if (v3 > 1024)
      {
        if (v3 <= 1044)
        {
          if (v3 == 1025)
          {
            CoreML::NeuralNetworkSpecValidator::validateArgMaxLayer(this, a2, (uint64_t)a3);
            return;
          }
          if (v3 == 1040)
          {
            CoreML::NeuralNetworkSpecValidator::validateEmbeddingNDLayer(this, a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          switch(v3)
          {
            case 1045:
              CoreML::NeuralNetworkSpecValidator::validateBatchedMatmulLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 1065:
              CoreML::NeuralNetworkSpecValidator::validateGetShapeLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 1070:
              CoreML::NeuralNetworkSpecValidator::validateLoadConstantNDLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
          }
        }
      }
      else if (v3 <= 1004)
      {
        if (v3 == 995)
        {
          CoreML::NeuralNetworkSpecValidator::validateSliceStaticLayer(a2, (uint64_t)a3);
          return;
        }
        if (v3 == 1000)
        {
          CoreML::NeuralNetworkSpecValidator::validateSliceDynamicLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
      }
      else
      {
        switch(v3)
        {
          case 1005:
            CoreML::NeuralNetworkSpecValidator::validateSlidingWindowsLayer(a2, (uint64_t)a3);
            return;
          case 1015:
            CoreML::NeuralNetworkSpecValidator::validateTopKLayer(this, a2, (uint64_t)a3);
            return;
          case 1020:
            CoreML::NeuralNetworkSpecValidator::validateArgMinLayer(this, a2, (uint64_t)a3);
            return;
        }
      }
      goto LABEL_314;
    }
    if (v3 <= 939)
    {
      if (v3 > 904)
      {
        if (v3 <= 924)
        {
          if (v3 == 905)
          {
            CoreML::NeuralNetworkSpecValidator::validateSubtractBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
          if (v3 == 920)
          {
            CoreML::NeuralNetworkSpecValidator::validateTileLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          switch(v3)
          {
            case 925:
              CoreML::NeuralNetworkSpecValidator::validateStackLayer(a2, (uint64_t)a3);
              return;
            case 930:
              CoreML::NeuralNetworkSpecValidator::validateGatherLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 935:
              CoreML::NeuralNetworkSpecValidator::validateScatterLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
          }
        }
      }
      else if (v3 <= 889)
      {
        if (v3 == 880)
        {
          CoreML::NeuralNetworkSpecValidator::validateAddBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
        if (v3 == 885)
        {
          CoreML::NeuralNetworkSpecValidator::validatePowBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
      }
      else
      {
        switch(v3)
        {
          case 890:
            CoreML::NeuralNetworkSpecValidator::validateDivideBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          case 895:
            CoreML::NeuralNetworkSpecValidator::validateFloorDivBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          case 900:
            CoreML::NeuralNetworkSpecValidator::validateMultiplyBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
        }
      }
      goto LABEL_314;
    }
    if (v3 > 959)
    {
      if (v3 <= 974)
      {
        if (v3 == 960)
        {
          CoreML::NeuralNetworkSpecValidator::validateReverseLayer(a2, (uint64_t)a3);
          return;
        }
        if (v3 == 965)
        {
          CoreML::NeuralNetworkSpecValidator::validateReverseSeqLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
      }
      else
      {
        switch(v3)
        {
          case 975:
            CoreML::NeuralNetworkSpecValidator::validateSplitNDLayer(a2, (uint64_t)a3);
            return;
          case 980:
            CoreML::NeuralNetworkSpecValidator::validateConcatNDLayer(a2, (uint64_t)a3);
            return;
          case 985:
            CoreML::NeuralNetworkSpecValidator::validateTransposeLayer(a2, (uint64_t)a3);
            return;
        }
      }
      goto LABEL_314;
    }
    switch(v3)
    {
      case 945:
        CoreML::NeuralNetworkSpecValidator::validateScatterNDLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        break;
      case 946:
      case 947:
      case 948:
      case 949:
      case 951:
      case 953:
        goto LABEL_314;
      case 950:
        CoreML::NeuralNetworkSpecValidator::validateSoftmaxNDLayer(a2, (uint64_t)a3);
        break;
      case 952:
        CoreML::NeuralNetworkSpecValidator::validateGatherAlongAxisLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        break;
      case 954:
        CoreML::NeuralNetworkSpecValidator::validateScatterAlongAxisLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        break;
      default:
        if (v3 != 940) {
          goto LABEL_314;
        }
        CoreML::NeuralNetworkSpecValidator::validateGatherNDLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        break;
    }
    return;
  }
  if (v3 <= 1274)
  {
    if (v3 <= 1199)
    {
      if (v3 <= 1169)
      {
        if (v3 > 1149)
        {
          if (v3 == 1150)
          {
            CoreML::NeuralNetworkSpecValidator::validateRankPreservingReshapeLayer(a2, (uint64_t)a3);
            return;
          }
          if (v3 == 1155)
          {
            CoreML::NeuralNetworkSpecValidator::validateConstantPadLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          if (v3 == 1140)
          {
            CoreML::NeuralNetworkSpecValidator::validateReshapeStaticLayer(a2, (uint64_t)a3);
            return;
          }
          if (v3 == 1145)
          {
            CoreML::NeuralNetworkSpecValidator::validateReshapeDynamicLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
        }
      }
      else if (v3 <= 1179)
      {
        if (v3 == 1170)
        {
          CoreML::NeuralNetworkSpecValidator::validateRandomNormalLikeLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
        if (v3 == 1175)
        {
          CoreML::NeuralNetworkSpecValidator::validateRandomNormalStaticLayer(a2, (uint64_t)a3);
          return;
        }
      }
      else
      {
        switch(v3)
        {
          case 1180:
            CoreML::NeuralNetworkSpecValidator::validateRandomNormalDynamicLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          case 1190:
            CoreML::NeuralNetworkSpecValidator::validateRandomUniformLikeLayer(a2, (uint64_t)a3);
            return;
          case 1195:
            CoreML::NeuralNetworkSpecValidator::validateRandomUniformStaticLayer(a2, (uint64_t)a3);
            return;
        }
      }
      goto LABEL_314;
    }
    if (v3 <= 1249)
    {
      if (v3 <= 1214)
      {
        if (v3 == 1200)
        {
          CoreML::NeuralNetworkSpecValidator::validateRandomUniformDynamicLayer(a2, (uint64_t)a3);
          return;
        }
        if (v3 == 1210)
        {
          CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliLikeLayer(a2, (uint64_t)a3);
          return;
        }
      }
      else
      {
        switch(v3)
        {
          case 1215:
            CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliStaticLayer(a2, (uint64_t)a3);
            return;
          case 1220:
            CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliDynamicLayer(a2, (uint64_t)a3);
            return;
          case 1230:
            CoreML::NeuralNetworkSpecValidator::validateCategoricalDistributionLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
        }
      }
      goto LABEL_314;
    }
    if (v3 <= 1259)
    {
      if (v3 != 1250 && v3 != 1255) {
        goto LABEL_314;
      }
    }
    else if (v3 != 1260 && v3 != 1265 && v3 != 1270)
    {
      goto LABEL_314;
    }
    goto LABEL_216;
  }
  if (v3 <= 1349)
  {
    if (v3 > 1312)
    {
      if (v3 <= 1319)
      {
        if (v3 == 1313)
        {
          CoreML::NeuralNetworkSpecValidator::validateWhereNonZeroLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
        if (v3 == 1315)
        {
          CoreML::NeuralNetworkSpecValidator::validateMatrixBandPartLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
      }
      else
      {
        switch(v3)
        {
          case 1320:
            CoreML::NeuralNetworkSpecValidator::validateLowerTriangularLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          case 1325:
            CoreML::NeuralNetworkSpecValidator::validateUpperTriangularLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          case 1330:
            CoreML::NeuralNetworkSpecValidator::validateWhereLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
        }
      }
      goto LABEL_314;
    }
    if (v3 <= 1284)
    {
      if (v3 != 1275 && v3 != 1280) {
        goto LABEL_314;
      }
    }
    else if (v3 != 1285 && v3 != 1290 && v3 != 1295)
    {
      goto LABEL_314;
    }
LABEL_216:
    CoreML::NeuralNetworkSpecValidator::validateReductionTypeLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
    return;
  }
  if (v3 <= 1454)
  {
    switch(v3)
    {
      case 1350:
        CoreML::NeuralNetworkSpecValidator::validateLayerNormalizationLayer(a2, (uint64_t)a3);
        return;
      case 1400:
        CoreML::NeuralNetworkSpecValidator::validateNMSLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        return;
      case 1450:
        CoreML::NeuralNetworkSpecValidator::validateOneHotLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        return;
    }
    goto LABEL_314;
  }
  switch(v3)
  {
    case 1455:
      CoreML::NeuralNetworkSpecValidator::validateCumSumLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
      break;
    case 1460:
      goto LABEL_313;
    case 1461:
      CoreML::NeuralNetworkSpecValidator::validateArgsortLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
      break;
    case 1465:
      CoreML::NeuralNetworkSpecValidator::validatePooling3dLayer(this, a2, (uint64_t)a3);
      break;
    case 1466:
      CoreML::NeuralNetworkSpecValidator::validateGlobalPooling3dLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
      break;
    case 1470:
      CoreML::NeuralNetworkSpecValidator::validateSliceBySizeLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
      break;
    case 1471:
      CoreML::NeuralNetworkSpecValidator::validateConvolution3DLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
      break;
    default:
      goto LABEL_314;
  }
}

void CoreML::validate<(MLModelType)403>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 44) == 403) {
    uint64_t v4 = *(uint64_t **)(a1 + 32);
  }
  else {
    uint64_t v4 = CoreML::Specification::NeuralNetworkClassifier::default_instance((CoreML::Specification::NeuralNetworkClassifier *)a1);
  }
  CoreML::validateClassifierInterface<CoreML::Specification::Model,CoreML::Specification::NeuralNetworkClassifier>(a1, (uint64_t)v4, 0, 0, (uint64_t)&v49);
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v49);
  if (!v5)
  {
    *(void *)a2 = v49;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
    *(void *)(a2 + 24) = v51;
    return;
  }
  v48[0] = 0;
  v48[1] = 0;
  signed int v47 = v48;
  if (*(void *)(a1 + 16)) {
    int v6 = *(uint64_t **)(a1 + 16);
  }
  else {
    int v6 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  if (*(_DWORD *)(a1 + 44) == 403) {
    uint64_t v7 = *(uint64_t **)(a1 + 32);
  }
  else {
    uint64_t v7 = CoreML::Specification::NeuralNetworkClassifier::default_instance((CoreML::Specification::NeuralNetworkClassifier *)v5);
  }
  validateNeuralNetworkTopLevel<CoreML::Specification::NeuralNetworkClassifier>((uint64_t)v6, (uint64_t)v7, (uint64_t **)&v47, *(unsigned __int8 *)(a1 + 28), (uint64_t)&v45);
  std::string::size_type v49 = v45.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)__n128 __p = *(_OWORD *)&v45.__r_.__value_.__r.__words[1];
  uint64_t v51 = v46;
  BOOL v8 = CoreML::Result::good((CoreML::Result *)&v49);
  if (v8)
  {
    if (*(_DWORD *)(a1 + 44) == 403) {
      uint64_t v9 = *(uint64_t **)(a1 + 32);
    }
    else {
      uint64_t v9 = CoreML::Specification::NeuralNetworkClassifier::default_instance((CoreML::Specification::NeuralNetworkClassifier *)v8);
    }
    uint64_t v10 = v9[8];
    if (*(char *)(v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
    }
    else
    {
      long long v11 = *(_OWORD *)v10;
      v45.__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v11;
    }
    std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v45.__r_.__value_.__l.__size_;
    }
    if (size
      && v48 == (char **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v47, (const void **)&v45.__r_.__value_.__l.__data_))
    {
      std::operator+<char>();
      signed int v37 = std::string::append(&v42, "' which was not found in the network.");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      std::string::size_type v44 = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)CGFloat v43 = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v41 = a2;
      int v13 = *(uint64_t **)(a1 + 16);
      if (!v13) {
        int v13 = &CoreML::Specification::_ModelDescription_default_instance_;
      }
      uint64_t v14 = v13[7];
      if (v14) {
        uint64_t v15 = v14 + 8;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *((int *)v13 + 12);
      if (!v16)
      {
LABEL_69:
        *(void *)uint64_t v41 = v49;
        *(_OWORD *)(v41 + 8) = *(_OWORD *)__p;
        *(void *)(v41 + 24) = v51;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v51 = 0;
LABEL_77:
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        goto LABEL_79;
      }
      uint64_t v17 = 8 * v16;
      while (1)
      {
        uint64_t v18 = *(void *)v15;
        if (v48 == (char **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v47, *(const void ***)(*(void *)v15 + 16)))
        {
          int v19 = *(const void ***)(v18 + 16);
          if (*(void *)(a1 + 16)) {
            uint64_t v20 = *(uint64_t **)(a1 + 16);
          }
          else {
            uint64_t v20 = &CoreML::Specification::_ModelDescription_default_instance_;
          }
          int v21 = (const void *)*((unsigned __int8 *)v19 + 23);
          uint64_t v22 = v21;
          int v23 = v19;
          if (*((char *)v19 + 23) < 0)
          {
            int v23 = *v19;
            uint64_t v22 = v19[1];
          }
          uint64_t v24 = v20[11];
          int v25 = *(char *)(v24 + 23);
          int v26 = v25 >= 0 ? (const void *)*(unsigned __int8 *)(v24 + 23) : *(const void **)(v24 + 8);
          uint64_t v27 = v25 >= 0 ? (const void *)v20[11] : *(const void **)v24;
          size_t v28 = (size_t)(v26 >= v22 ? v22 : v26);
          if (memcmp(v23, v27, v28) || v26 != v22)
          {
            unsigned int v30 = v19;
            if ((v21 & 0x80) != 0)
            {
              unsigned int v30 = *v19;
              int v21 = v19[1];
            }
            uint64_t v31 = v20[12];
            int v32 = *(char *)(v31 + 23);
            unint64_t v33 = v32 >= 0 ? (const void *)*(unsigned __int8 *)(v31 + 23) : *(const void **)(v31 + 8);
            unsigned int v34 = v32 >= 0 ? (const void *)v20[12] : *(const void **)v31;
            size_t v35 = (size_t)(v33 >= v21 ? v21 : v33);
            if (memcmp(v30, v34, v35) || v33 != v21) {
              break;
            }
          }
        }
        v15 += 8;
        v17 -= 8;
        if (!v17) {
          goto LABEL_69;
        }
      }
      std::operator+<char>();
      int v39 = std::string::append(&v42, "' is not produced by any layer of the neural network.");
      a2 = v41;
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      std::string::size_type v44 = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)CGFloat v43 = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if (SHIBYTE(v44) < 0) {
      operator delete(v43[0]);
    }
    goto LABEL_77;
  }
  *(void *)a2 = v49;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
  *(void *)(a2 + 24) = v51;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v51 = 0;
LABEL_79:
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v47, v48[0]);
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2242F8C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,char *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a30, a31);
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

void CoreML::validateClassifierInterface<CoreML::Specification::Model,CoreML::Specification::NeuralNetworkClassifier>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7 = *(_DWORD *)(a2 + 100);
  if (!v7)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier models must provide class labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
LABEL_15:
    if (*(void *)(a1 + 16)) {
      uint64_t v9 = *(CoreML **)(a1 + 16);
    }
    else {
      uint64_t v9 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
    }
    CoreML::validateFeatureDescriptions(v9, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (uint64_t)&__p);
    if (!CoreML::Result::good((CoreML::Result *)&__p))
    {
      *(void *)a5 = __p;
      *(_OWORD *)(a5 + 8) = v12;
      *(void *)(a5 + 24) = v13;
      return;
    }
    CoreML::validateClassifierFeatureDescriptions(v9, (const CoreML::Specification::ModelDescription *)a4, a5);
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      return;
    }
    uint64_t v10 = (void *)v12;
    goto LABEL_27;
  }
  if (v7 == 100)
  {
    if ((a3 & 1) == 0 && !*(_DWORD *)(*(void *)(a2 + 88) + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have String class labels must provide labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
    if (*((_DWORD *)CoreML::Specification::Int64Vector::default_instance((CoreML::Specification::Int64Vector *)a1) + 4))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with String class labels must provide exclusively String class labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
    goto LABEL_14;
  }
  if (v7 != 101)
  {
LABEL_14:
    a4 = 0;
    goto LABEL_15;
  }
  if ((a3 & 1) == 0 && !*(_DWORD *)(*(void *)(a2 + 88) + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have Int64 class labels must provide labels.");
    CoreML::Result::Result((_DWORD *)a5, 13);
    goto LABEL_25;
  }
  if (!*((_DWORD *)CoreML::Specification::StringVector::default_instance((CoreML::Specification::StringVector *)a1) + 6))
  {
    a4 = 1;
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with Int64 class labels must provide exclusively Int64 class labels.");
  CoreML::Result::Result((_DWORD *)a5, 13);
LABEL_25:
  if ((SHIBYTE(v12) & 0x80000000) == 0) {
    return;
  }
  uint64_t v10 = __p;
LABEL_27:
  operator delete(v10);
}

void sub_2242F8ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void validateNeuralNetworkTopLevel<CoreML::Specification::NeuralNetworkClassifier>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  v92[3] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v86);
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    long long v12 = (uint64_t *)(v11 + 8);
  }
  else {
    long long v12 = 0;
  }
  uint64_t v13 = *(int *)(a1 + 24);
  if (v13)
  {
    uint64_t v14 = 8 * v13 - 8;
    do
    {
      uint64_t v15 = *v12++;
      uint64_t v16 = *(uint64_t **)(v15 + 32);
      if (!v16) {
        uint64_t v16 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      int v17 = *((_DWORD *)v16 + 9);
      BOOL v18 = v17 != 5;
      BOOL v19 = v17 == 5 || v14 == 0;
      v14 -= 8;
    }
    while (!v19);
  }
  else
  {
    BOOL v18 = 1;
  }
  int v20 = *(_DWORD *)(a2 + 80);
  int v21 = *(_DWORD *)(a2 + 84);
  uint64_t v22 = *(void *)(a2 + 32);
  if (v22) {
    int v23 = (CoreML **)(v22 + 8);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = *(int *)(a2 + 24);
  if (v24)
  {
    uint64_t v25 = 8 * v24;
    while ((CoreML::isIOS12NeuralNetworkLayer(*v23, v10) & 1) != 0)
    {
      ++v23;
      v25 -= 8;
      if (!v25) {
        goto LABEL_22;
      }
    }
    if (v20) {
      char v34 = 1;
    }
    else {
      char v34 = v18;
    }
    if ((v34 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v89, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the network contains a layer added in version 4 (iOS 13) or later. Use 'EXACT_ARRAY_MAPPING' instead.");
      CoreML::Result::Result((_DWORD *)a5, 12);
      goto LABEL_52;
    }
    BOOL v26 = 1;
  }
  else
  {
LABEL_22:
    BOOL v26 = (v20 | v21) != 0;
  }
  if (v20) {
    BOOL v27 = 1;
  }
  else {
    BOOL v27 = v21 == 0;
  }
  char v28 = v27 || v18;
  if ((v28 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the image input Shape mapping is not 'RANK5_IMAGE_MAPPING'");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  uint64_t v29 = *(int *)(a1 + 24);
  if (!v29)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one input.");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  if (!*(_DWORD *)(a1 + 48))
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks produce at least one output.");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  if (!*(_DWORD *)(a2 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one layer.");
    CoreML::Result::Result((_DWORD *)a5, 13);
LABEL_52:
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    goto LABEL_54;
  }
  uint64_t v30 = *(void *)(a1 + 32);
  if (v30) {
    uint64_t v31 = v30 + 8;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = 8 * v29;
  while (1)
  {
    unint64_t v33 = *(uint64_t **)(*(void *)v31 + 32);
    if (!v33) {
      unint64_t v33 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (!*((unsigned char *)v33 + 16)) {
      break;
    }
    v31 += 8;
    v32 -= 8;
    if (!v32)
    {
      std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one non-optional input.");
      CoreML::Result::Result((_DWORD *)a5, 12);
      goto LABEL_52;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "inputs");
  CoreML::validateInputOutputTypes(a1 + 16, 1, (CoreML::Result *)a5);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)a5)) {
    goto LABEL_54;
  }
  if (*(char *)(a5 + 31) < 0) {
    operator delete(*(void **)(a5 + 8));
  }
  int v77 = a4;
  v85[0] = 0;
  v85[1] = 0;
  size_t v84 = v85;
  if (v26)
  {
    uint64_t v35 = *(void *)(a1 + 32);
    if (v35) {
      unsigned int v36 = (uint64_t *)(v35 + 8);
    }
    else {
      unsigned int v36 = 0;
    }
    uint64_t v37 = *(int *)(a1 + 24);
    if (v37)
    {
      uint64_t v38 = 8 * v37;
      while (1)
      {
        uint64_t v39 = *v36;
        long long v40 = *(uint64_t **)(*v36 + 32);
        if (!v40) {
          long long v40 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        int v41 = *((_DWORD *)v40 + 9);
        if (v41 == 4) {
          break;
        }
        if (v41 == 5)
        {
          if (!*(_DWORD *)(a2 + 80))
          {
            v89.__r_.__value_.__r.__words[0] = *(void *)(v39 + 16);
            std::string::size_type v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v89);
            goto LABEL_78;
          }
          int v42 = *(_DWORD *)(v40[3] + 16);
          v89.__r_.__value_.__r.__words[0] = *(void *)(v39 + 16);
          *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v89)+ 14) = v42;
        }
LABEL_80:
        ++v36;
        v38 -= 8;
        if (!v38) {
          goto LABEL_81;
        }
      }
      CGFloat v43 = *(const void ***)(v39 + 16);
      if (*(_DWORD *)(a2 + 84))
      {
        v89.__r_.__value_.__r.__words[0] = *(void *)(v39 + 16);
        std::string::size_type v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, v43, (uint64_t)&std::piecewise_construct, (long long **)&v89);
        int v45 = 4;
      }
      else
      {
        v89.__r_.__value_.__r.__words[0] = *(void *)(v39 + 16);
        std::string::size_type v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, v43, (uint64_t)&std::piecewise_construct, (long long **)&v89);
LABEL_78:
        int v45 = 5;
      }
      *((_DWORD *)v44 + 14) = v45;
      goto LABEL_80;
    }
LABEL_81:
    uint64_t v46 = *(void *)(a1 + 56);
    if (v46) {
      uint64_t v47 = v46 + 8;
    }
    else {
      uint64_t v47 = 0;
    }
    uint64_t v48 = *(int *)(a1 + 48);
    if (v48)
    {
      uint64_t v49 = 8 * v48;
      do
      {
        uint64_t v50 = *(uint64_t **)(*(void *)v47 + 32);
        if (!v50) {
          uint64_t v50 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v50 + 9) == 5)
        {
          int v51 = *(_DWORD *)(v50[3] + 16);
          if (v51)
          {
            v89.__r_.__value_.__r.__words[0] = *(void *)(*(void *)v47 + 16);
            *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v89)+ 14) = v51;
          }
        }
        v47 += 8;
        v49 -= 8;
      }
      while (v49);
    }
  }
  v83[0] = 0;
  v83[1] = 0;
  unsigned int v82 = (uint64_t *)v83;
  uint64_t v52 = *(void *)(a1 + 32);
  if (v52) {
    uint64_t v53 = (uint64_t *)(v52 + 8);
  }
  else {
    uint64_t v53 = 0;
  }
  uint64_t v54 = *(int *)(a1 + 24);
  if (!v54)
  {
LABEL_139:
    CGRect v73 = (uint64_t **)CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v89, (uint64_t)&v82, (uint64_t **)&v84, v26, 0, (uint64_t **)&v84);
    CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(v73, a2, (uint64_t)&v79);
    int v86 = v79;
    if (SHIBYTE(v88) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v80;
    std::string::size_type v88 = v81;
    if (CoreML::Result::good((CoreML::Result *)&v86))
    {
      std::locale v74 = v91;
      if (v91 != v92)
      {
        do
        {
          if (v83 == (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v82, v74 + 4)|| (unint64_t)v74[9] >= 2)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a3, v74 + 4, (uint64_t)(v74 + 4));
          }
          char v75 = (const void **)v74[1];
          if (v75)
          {
            do
            {
              size_t v76 = (const void ***)v75;
              char v75 = (const void **)*v75;
            }
            while (v75);
          }
          else
          {
            do
            {
              size_t v76 = (const void ***)v74[2];
              BOOL v19 = *v76 == v74;
              std::locale v74 = (const void **)v76;
            }
            while (!v19);
          }
          std::locale v74 = (const void **)v76;
        }
        while (v76 != v92);
      }
      if (!v26)
      {
        CoreML::NeuralNetworkShaper::NeuralNetworkShaper(&v79, a1, a2 + 16, 1);
        CoreML::NeuralNetworkShaper::~NeuralNetworkShaper((CoreML::NeuralNetworkShaper *)&v79);
      }
      if ((CoreML::Result::good((CoreML::Result *)&v86) & v77) == 1)
      {
        validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(a2, (CoreML::Result *)&v79);
        int v86 = v79;
        if (SHIBYTE(v88) < 0) {
          operator delete((void *)__p);
        }
        long long __p = v80;
        std::string::size_type v88 = v81;
        if (CoreML::Result::good((CoreML::Result *)&v86))
        {
          validateTrainingInputs<CoreML::Specification::NeuralNetworkClassifier>(a1, a2, (CoreML::Result *)&v79);
          int v86 = v79;
          if (SHIBYTE(v88) < 0) {
            operator delete((void *)__p);
          }
          long long __p = v80;
          std::string::size_type v88 = v81;
          CoreML::Result::good((CoreML::Result *)&v86);
        }
      }
    }
    *(void *)a5 = v86;
    *(_OWORD *)(a5 + 8) = __p;
    *(void *)(a5 + 24) = v88;
    long long __p = 0uLL;
    std::string::size_type v88 = 0;
    CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator((CoreML::NeuralNetworkSpecValidator *)&v89);
    goto LABEL_162;
  }
  int v78 = &v53[v54];
  while (1)
  {
    uint64_t v55 = *v53;
    std::string::basic_string[abi:ne180100]<0>(&v89, "__input");
    char v79 = *(const void ***)(v55 + 16);
    id v56 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v82, v79, (uint64_t)&std::piecewise_construct, (long long **)&v79);
    id v57 = std::__tree<std::string>::__assign_unique<std::string const*>((uint64_t **)v56 + 7, &v89, &v90);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    id v58 = *(uint64_t **)(v55 + 32);
    if (!v58) {
      id v58 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v58 + 9) != 5) {
      goto LABEL_138;
    }
    if (v26)
    {
      CoreML::validateNdMultiArrayInputType((CoreML *)v58[3], (CoreML::Result *)&v89);
      int v86 = (const void **)v89.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v88) < 0) {
        operator delete((void *)__p);
      }
      long long __p = *(_OWORD *)&v89.__r_.__value_.__r.__words[1];
      std::string::size_type v88 = v90.__r_.__value_.__r.__words[0];
      v90.__r_.__value_.__s.__data_[7] = 0;
      v89.__r_.__value_.__s.__data_[8] = 0;
      BOOL v59 = CoreML::Result::good((CoreML::Result *)&v86);
      if (v90.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v89.__r_.__value_.__l.__size_);
      }
      if (!v59)
      {
        *(void *)a5 = v86;
        *(_OWORD *)(a5 + 8) = __p;
        *(void *)(a5 + 24) = v88;
        long long __p = 0uLL;
        std::string::size_type v88 = 0;
        goto LABEL_162;
      }
      goto LABEL_138;
    }
    uint64_t v60 = v58[3];
    int v61 = *(_DWORD *)(v60 + 16);
    if (v61 >= 1 && (v61 | 2) != 3) {
      break;
    }
    int v63 = *(_DWORD *)(v60 + 60);
    if (v63)
    {
      if (v63 != 21)
      {
        if (v63 != 31 || *(_DWORD *)(*(void *)(v60 + 40) + 24) == 1) {
          goto LABEL_138;
        }
        long long v64 = *(uint64_t **)(v55 + 32);
        if (!v64) {
          long long v64 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v64 + 9) == 5) {
          long long v65 = (uint64_t *)v64[3];
        }
        else {
          long long v65 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v57);
        }
        if (*((_DWORD *)v65 + 15) == 31) {
          CGRect v72 = (uint64_t *)v65[5];
        }
        else {
          CGRect v72 = CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v65);
        }
        BOOL v71 = *((_DWORD *)v72 + 6) == 3;
        goto LABEL_136;
      }
      uint64_t v66 = *(void *)(v60 + 40);
      uint64_t v67 = *(void *)(v66 + 32);
      if (v67) {
        uint64_t v68 = v67 + 8;
      }
      else {
        uint64_t v68 = 0;
      }
      uint64_t v69 = *(int *)(v66 + 24);
      if (!v69) {
        goto LABEL_138;
      }
      uint64_t v70 = 8 * v69;
      while ((*(_DWORD *)(*(void *)v68 + 16) | 2) == 3)
      {
        v68 += 8;
        v70 -= 8;
        if (!v70) {
          goto LABEL_138;
        }
      }
    }
    BOOL v71 = 0;
LABEL_136:
    if (v61 <= 0 && !v71) {
      break;
    }
LABEL_138:
    if (++v53 == v78) {
      goto LABEL_139;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "Input MLMultiArray to neural networks must have dimension 1 (vector) or 3 (image-like arrays).");
  CoreML::Result::Result((_DWORD *)a5, 12);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
LABEL_162:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v82, v83[0]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v84, v85[0]);
LABEL_54:
  if (SHIBYTE(v88) < 0) {
    operator delete((void *)__p);
  }
}

void sub_2242F9804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, std::string *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,void *a35,uint64_t a36,char a37,char *a38,uint64_t a39,uint64_t a40,void *__pa,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (*(char *)(v46 - 161) < 0) {
    operator delete(*(void **)(v46 - 184));
  }
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&a34, a35);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a37, a38);
  if (a46 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

void CoreML::validate<(MLModelType)303>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(void *)(a1 + 16)) {
    BOOL v5 = *(CoreML **)(a1 + 16);
  }
  else {
    BOOL v5 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::validateRegressorInterface(v5, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (uint64_t)&v10);
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v10);
  if (v6)
  {
    v9[0] = 0;
    v9[1] = 0;
    BOOL v8 = v9;
    if (*(void *)(a1 + 16)) {
      uint64_t v4 = *(uint64_t **)(a1 + 16);
    }
    if (*(_DWORD *)(a1 + 44) == 303) {
      int v7 = *(uint64_t **)(a1 + 32);
    }
    else {
      int v7 = CoreML::Specification::NeuralNetworkRegressor::default_instance((CoreML::Specification::NeuralNetworkRegressor *)v6);
    }
    validateNeuralNetworkTopLevel<CoreML::Specification::NeuralNetworkRegressor>((uint64_t)v4, (uint64_t)v7, (uint64_t **)&v8, *(unsigned __int8 *)(a1 + 28), a2);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v8, v9[0]);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(void *)a2 = v10;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
    *(void *)(a2 + 24) = v12;
  }
}

void sub_2242F9B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void validateNeuralNetworkTopLevel<CoreML::Specification::NeuralNetworkRegressor>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  v92[3] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v86);
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    uint64_t v12 = (uint64_t *)(v11 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(int *)(a1 + 24);
  if (v13)
  {
    uint64_t v14 = 8 * v13 - 8;
    do
    {
      uint64_t v15 = *v12++;
      uint64_t v16 = *(uint64_t **)(v15 + 32);
      if (!v16) {
        uint64_t v16 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      int v17 = *((_DWORD *)v16 + 9);
      BOOL v18 = v17 != 5;
      BOOL v19 = v17 == 5 || v14 == 0;
      v14 -= 8;
    }
    while (!v19);
  }
  else
  {
    BOOL v18 = 1;
  }
  int v20 = *(_DWORD *)(a2 + 72);
  int v21 = *(_DWORD *)(a2 + 76);
  uint64_t v22 = *(void *)(a2 + 32);
  if (v22) {
    int v23 = (CoreML **)(v22 + 8);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = *(int *)(a2 + 24);
  if (v24)
  {
    uint64_t v25 = 8 * v24;
    while ((CoreML::isIOS12NeuralNetworkLayer(*v23, v10) & 1) != 0)
    {
      ++v23;
      v25 -= 8;
      if (!v25) {
        goto LABEL_22;
      }
    }
    if (v20) {
      char v34 = 1;
    }
    else {
      char v34 = v18;
    }
    if ((v34 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v89, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the network contains a layer added in version 4 (iOS 13) or later. Use 'EXACT_ARRAY_MAPPING' instead.");
      CoreML::Result::Result((_DWORD *)a5, 12);
      goto LABEL_52;
    }
    BOOL v26 = 1;
  }
  else
  {
LABEL_22:
    BOOL v26 = (v20 | v21) != 0;
  }
  if (v20) {
    BOOL v27 = 1;
  }
  else {
    BOOL v27 = v21 == 0;
  }
  char v28 = v27 || v18;
  if ((v28 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the image input Shape mapping is not 'RANK5_IMAGE_MAPPING'");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  uint64_t v29 = *(int *)(a1 + 24);
  if (!v29)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one input.");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  if (!*(_DWORD *)(a1 + 48))
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks produce at least one output.");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  if (!*(_DWORD *)(a2 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one layer.");
    CoreML::Result::Result((_DWORD *)a5, 13);
LABEL_52:
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    goto LABEL_54;
  }
  uint64_t v30 = *(void *)(a1 + 32);
  if (v30) {
    uint64_t v31 = v30 + 8;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = 8 * v29;
  while (1)
  {
    unint64_t v33 = *(uint64_t **)(*(void *)v31 + 32);
    if (!v33) {
      unint64_t v33 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (!*((unsigned char *)v33 + 16)) {
      break;
    }
    v31 += 8;
    v32 -= 8;
    if (!v32)
    {
      std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one non-optional input.");
      CoreML::Result::Result((_DWORD *)a5, 12);
      goto LABEL_52;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "inputs");
  CoreML::validateInputOutputTypes(a1 + 16, 1, (CoreML::Result *)a5);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)a5)) {
    goto LABEL_54;
  }
  if (*(char *)(a5 + 31) < 0) {
    operator delete(*(void **)(a5 + 8));
  }
  int v77 = a4;
  v85[0] = 0;
  v85[1] = 0;
  size_t v84 = v85;
  if (v26)
  {
    uint64_t v35 = *(void *)(a1 + 32);
    if (v35) {
      unsigned int v36 = (uint64_t *)(v35 + 8);
    }
    else {
      unsigned int v36 = 0;
    }
    uint64_t v37 = *(int *)(a1 + 24);
    if (v37)
    {
      uint64_t v38 = 8 * v37;
      while (1)
      {
        uint64_t v39 = *v36;
        long long v40 = *(uint64_t **)(*v36 + 32);
        if (!v40) {
          long long v40 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        int v41 = *((_DWORD *)v40 + 9);
        if (v41 == 4) {
          break;
        }
        if (v41 == 5)
        {
          if (!*(_DWORD *)(a2 + 72))
          {
            v89.__r_.__value_.__r.__words[0] = *(void *)(v39 + 16);
            std::string::size_type v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v89);
            goto LABEL_78;
          }
          int v42 = *(_DWORD *)(v40[3] + 16);
          v89.__r_.__value_.__r.__words[0] = *(void *)(v39 + 16);
          *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v89)+ 14) = v42;
        }
LABEL_80:
        ++v36;
        v38 -= 8;
        if (!v38) {
          goto LABEL_81;
        }
      }
      CGFloat v43 = *(const void ***)(v39 + 16);
      if (*(_DWORD *)(a2 + 76))
      {
        v89.__r_.__value_.__r.__words[0] = *(void *)(v39 + 16);
        std::string::size_type v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, v43, (uint64_t)&std::piecewise_construct, (long long **)&v89);
        int v45 = 4;
      }
      else
      {
        v89.__r_.__value_.__r.__words[0] = *(void *)(v39 + 16);
        std::string::size_type v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, v43, (uint64_t)&std::piecewise_construct, (long long **)&v89);
LABEL_78:
        int v45 = 5;
      }
      *((_DWORD *)v44 + 14) = v45;
      goto LABEL_80;
    }
LABEL_81:
    uint64_t v46 = *(void *)(a1 + 56);
    if (v46) {
      uint64_t v47 = v46 + 8;
    }
    else {
      uint64_t v47 = 0;
    }
    uint64_t v48 = *(int *)(a1 + 48);
    if (v48)
    {
      uint64_t v49 = 8 * v48;
      do
      {
        uint64_t v50 = *(uint64_t **)(*(void *)v47 + 32);
        if (!v50) {
          uint64_t v50 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v50 + 9) == 5)
        {
          int v51 = *(_DWORD *)(v50[3] + 16);
          if (v51)
          {
            v89.__r_.__value_.__r.__words[0] = *(void *)(*(void *)v47 + 16);
            *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v89)+ 14) = v51;
          }
        }
        v47 += 8;
        v49 -= 8;
      }
      while (v49);
    }
  }
  v83[0] = 0;
  v83[1] = 0;
  unsigned int v82 = (uint64_t *)v83;
  uint64_t v52 = *(void *)(a1 + 32);
  if (v52) {
    uint64_t v53 = (uint64_t *)(v52 + 8);
  }
  else {
    uint64_t v53 = 0;
  }
  uint64_t v54 = *(int *)(a1 + 24);
  if (!v54)
  {
LABEL_139:
    CGRect v73 = (uint64_t **)CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v89, (uint64_t)&v82, (uint64_t **)&v84, v26, 0, (uint64_t **)&v84);
    CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(v73, a2, (uint64_t)&v79);
    int v86 = v79;
    if (SHIBYTE(v88) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v80;
    std::string::size_type v88 = v81;
    if (CoreML::Result::good((CoreML::Result *)&v86))
    {
      std::locale v74 = v91;
      if (v91 != v92)
      {
        do
        {
          if (v83 == (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v82, v74 + 4)|| (unint64_t)v74[9] >= 2)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a3, v74 + 4, (uint64_t)(v74 + 4));
          }
          char v75 = (const void **)v74[1];
          if (v75)
          {
            do
            {
              size_t v76 = (const void ***)v75;
              char v75 = (const void **)*v75;
            }
            while (v75);
          }
          else
          {
            do
            {
              size_t v76 = (const void ***)v74[2];
              BOOL v19 = *v76 == v74;
              std::locale v74 = (const void **)v76;
            }
            while (!v19);
          }
          std::locale v74 = (const void **)v76;
        }
        while (v76 != v92);
      }
      if (!v26)
      {
        CoreML::NeuralNetworkShaper::NeuralNetworkShaper(&v79, a1, a2 + 16, 1);
        CoreML::NeuralNetworkShaper::~NeuralNetworkShaper((CoreML::NeuralNetworkShaper *)&v79);
      }
      if ((CoreML::Result::good((CoreML::Result *)&v86) & v77) == 1)
      {
        validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkRegressor>(a2, (CoreML::Result *)&v79);
        int v86 = v79;
        if (SHIBYTE(v88) < 0) {
          operator delete((void *)__p);
        }
        long long __p = v80;
        std::string::size_type v88 = v81;
        if (CoreML::Result::good((CoreML::Result *)&v86))
        {
          validateTrainingInputs<CoreML::Specification::NeuralNetworkRegressor>(a1, (void *)a2, (CoreML::Result *)&v79);
          int v86 = v79;
          if (SHIBYTE(v88) < 0) {
            operator delete((void *)__p);
          }
          long long __p = v80;
          std::string::size_type v88 = v81;
          CoreML::Result::good((CoreML::Result *)&v86);
        }
      }
    }
    *(void *)a5 = v86;
    *(_OWORD *)(a5 + 8) = __p;
    *(void *)(a5 + 24) = v88;
    long long __p = 0uLL;
    std::string::size_type v88 = 0;
    CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator((CoreML::NeuralNetworkSpecValidator *)&v89);
    goto LABEL_162;
  }
  int v78 = &v53[v54];
  while (1)
  {
    uint64_t v55 = *v53;
    std::string::basic_string[abi:ne180100]<0>(&v89, "__input");
    char v79 = *(const void ***)(v55 + 16);
    id v56 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v82, v79, (uint64_t)&std::piecewise_construct, (long long **)&v79);
    id v57 = std::__tree<std::string>::__assign_unique<std::string const*>((uint64_t **)v56 + 7, &v89, &v90);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    id v58 = *(uint64_t **)(v55 + 32);
    if (!v58) {
      id v58 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v58 + 9) != 5) {
      goto LABEL_138;
    }
    if (v26)
    {
      CoreML::validateNdMultiArrayInputType((CoreML *)v58[3], (CoreML::Result *)&v89);
      int v86 = (const void **)v89.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v88) < 0) {
        operator delete((void *)__p);
      }
      long long __p = *(_OWORD *)&v89.__r_.__value_.__r.__words[1];
      std::string::size_type v88 = v90.__r_.__value_.__r.__words[0];
      v90.__r_.__value_.__s.__data_[7] = 0;
      v89.__r_.__value_.__s.__data_[8] = 0;
      BOOL v59 = CoreML::Result::good((CoreML::Result *)&v86);
      if (v90.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v89.__r_.__value_.__l.__size_);
      }
      if (!v59)
      {
        *(void *)a5 = v86;
        *(_OWORD *)(a5 + 8) = __p;
        *(void *)(a5 + 24) = v88;
        long long __p = 0uLL;
        std::string::size_type v88 = 0;
        goto LABEL_162;
      }
      goto LABEL_138;
    }
    uint64_t v60 = v58[3];
    int v61 = *(_DWORD *)(v60 + 16);
    if (v61 >= 1 && (v61 | 2) != 3) {
      break;
    }
    int v63 = *(_DWORD *)(v60 + 60);
    if (v63)
    {
      if (v63 != 21)
      {
        if (v63 != 31 || *(_DWORD *)(*(void *)(v60 + 40) + 24) == 1) {
          goto LABEL_138;
        }
        long long v64 = *(uint64_t **)(v55 + 32);
        if (!v64) {
          long long v64 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v64 + 9) == 5) {
          long long v65 = (uint64_t *)v64[3];
        }
        else {
          long long v65 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v57);
        }
        if (*((_DWORD *)v65 + 15) == 31) {
          CGRect v72 = (uint64_t *)v65[5];
        }
        else {
          CGRect v72 = CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v65);
        }
        BOOL v71 = *((_DWORD *)v72 + 6) == 3;
        goto LABEL_136;
      }
      uint64_t v66 = *(void *)(v60 + 40);
      uint64_t v67 = *(void *)(v66 + 32);
      if (v67) {
        uint64_t v68 = v67 + 8;
      }
      else {
        uint64_t v68 = 0;
      }
      uint64_t v69 = *(int *)(v66 + 24);
      if (!v69) {
        goto LABEL_138;
      }
      uint64_t v70 = 8 * v69;
      while ((*(_DWORD *)(*(void *)v68 + 16) | 2) == 3)
      {
        v68 += 8;
        v70 -= 8;
        if (!v70) {
          goto LABEL_138;
        }
      }
    }
    BOOL v71 = 0;
LABEL_136:
    if (v61 <= 0 && !v71) {
      break;
    }
LABEL_138:
    if (++v53 == v78) {
      goto LABEL_139;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "Input MLMultiArray to neural networks must have dimension 1 (vector) or 3 (image-like arrays).");
  CoreML::Result::Result((_DWORD *)a5, 12);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
LABEL_162:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v82, v83[0]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v84, v85[0]);
LABEL_54:
  if (SHIBYTE(v88) < 0) {
    operator delete((void *)__p);
  }
}

void sub_2242FA464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, std::string *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,void *a35,uint64_t a36,char a37,char *a38,uint64_t a39,uint64_t a40,void *__pa,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (*(char *)(v46 - 161) < 0) {
    operator delete(*(void **)(v46 - 184));
  }
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&a34, a35);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a37, a38);
  if (a46 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

void CoreML::validate<(MLModelType)500>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v26[2] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 16)) {
    uint64_t v4 = *(uint64_t **)(a1 + 16);
  }
  else {
    uint64_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "outputs");
  CoreML::validateInputOutputTypes((uint64_t)(v4 + 5), 2, (CoreML::Result *)a2);
  if (SHIBYTE(v22[1]) < 0) {
    operator delete(__p);
  }
  BOOL v5 = CoreML::Result::good((CoreML::Result *)a2);
  if (v5)
  {
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    v25[0] = 0;
    v25[1] = 0;
    uint64_t v24 = v25;
    if (*(void *)(a1 + 16)) {
      BOOL v6 = *(uint64_t **)(a1 + 16);
    }
    else {
      BOOL v6 = &CoreML::Specification::_ModelDescription_default_instance_;
    }
    if (*(_DWORD *)(a1 + 44) == 500) {
      int v7 = *(uint64_t **)(a1 + 32);
    }
    else {
      int v7 = CoreML::Specification::NeuralNetwork::default_instance((CoreML::Specification::NeuralNetwork *)v5);
    }
    validateNeuralNetworkTopLevel<CoreML::Specification::NeuralNetwork>((uint64_t)v6, (uint64_t)v7, (uint64_t **)&v24, *(unsigned __int8 *)(a1 + 28), (uint64_t)&__p);
    if (!CoreML::Result::good((CoreML::Result *)&__p)) {
      goto LABEL_34;
    }
    BOOL v8 = *(uint64_t **)(a1 + 16);
    if (!v8) {
      BOOL v8 = &CoreML::Specification::_ModelDescription_default_instance_;
    }
    uint64_t v9 = v8[7];
    uint64_t v10 = v9 ? v9 + 8 : 0;
    uint64_t v11 = *((int *)v8 + 12);
    if (v11)
    {
      uint64_t v12 = 8 * v11;
      while (1)
      {
        uint64_t v13 = *(const void ***)(*(void *)v10 + 16);
        BOOL v19 = 0;
        long long v20 = 0uLL;
        uint64_t v14 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v24, v13);
        if (v14)
        {
          std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)&v24, v13);
        }
        else
        {
          std::operator+<char>();
          uint64_t v15 = std::string::append(&v18, "' which is not produced by any layer in the neural network.");
          uint64_t v16 = (void *)v15->__r_.__value_.__r.__words[0];
          v26[0] = v15->__r_.__value_.__l.__size_;
          *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
          char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v20) < 0) {
            operator delete(v19);
          }
          BOOL v19 = v16;
          *(void *)&long long v20 = v26[0];
          *(void *)((char *)&v20 + 7) = *(void *)((char *)v26 + 7);
          HIBYTE(v2CoreML::Specification::GLMClassifier::New(this, 0) = v17;
          if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v18.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result((_DWORD *)a2, 12);
        }
        if (SHIBYTE(v20) < 0) {
          operator delete(v19);
        }
        if (!v14) {
          break;
        }
        v10 += 8;
        v12 -= 8;
        if (!v12) {
          goto LABEL_34;
        }
      }
      if (SHIBYTE(v23) < 0) {
        operator delete(v22[0]);
      }
    }
    else
    {
LABEL_34:
      *(void *)a2 = __p;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)v22;
      *(void *)(a2 + 24) = v23;
    }
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v24, v25[0]);
  }
}

void sub_2242FA944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,char a31,char *a32)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a31, a32);
  _Unwind_Resume(a1);
}

void CoreML::validateInputOutputTypes(uint64_t a1@<X0>, int a2@<W1>, CoreML::Result *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    uint64_t v5 = v4 + 8;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(int *)(a1 + 8);
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    while (1)
    {
      uint64_t v9 = *(uint64_t **)(*(void *)v5 + 32);
      if (!v9) {
        uint64_t v9 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if ((*((_DWORD *)v9 + 9) & 0xFFFFFFFE) != 4) {
        break;
      }
      v5 += 8;
      v8 -= 8;
      if (!v8) {
        goto LABEL_10;
      }
    }
    std::operator+<char>();
    uint64_t v10 = std::string::append(&v12, " to be images or MLMultiArray.");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a3, 12, a2);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
LABEL_10:
    CoreML::Result::Result(a3);
  }
}

void sub_2242FAAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void validateNeuralNetworkTopLevel<CoreML::Specification::NeuralNetwork>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  v92[3] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v86);
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    std::string v12 = (uint64_t *)(v11 + 8);
  }
  else {
    std::string v12 = 0;
  }
  uint64_t v13 = *(int *)(a1 + 24);
  if (v13)
  {
    uint64_t v14 = 8 * v13 - 8;
    do
    {
      uint64_t v15 = *v12++;
      uint64_t v16 = *(uint64_t **)(v15 + 32);
      if (!v16) {
        uint64_t v16 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      int v17 = *((_DWORD *)v16 + 9);
      BOOL v18 = v17 != 5;
      BOOL v19 = v17 == 5 || v14 == 0;
      v14 -= 8;
    }
    while (!v19);
  }
  else
  {
    BOOL v18 = 1;
  }
  int v20 = *(_DWORD *)(a2 + 72);
  int v21 = *(_DWORD *)(a2 + 76);
  uint64_t v22 = *(void *)(a2 + 32);
  if (v22) {
    uint64_t v23 = (CoreML **)(v22 + 8);
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = *(int *)(a2 + 24);
  if (v24)
  {
    uint64_t v25 = 8 * v24;
    while ((CoreML::isIOS12NeuralNetworkLayer(*v23, v10) & 1) != 0)
    {
      ++v23;
      v25 -= 8;
      if (!v25) {
        goto LABEL_22;
      }
    }
    if (v20) {
      char v34 = 1;
    }
    else {
      char v34 = v18;
    }
    if ((v34 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v89, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the network contains a layer added in version 4 (iOS 13) or later. Use 'EXACT_ARRAY_MAPPING' instead.");
      CoreML::Result::Result((_DWORD *)a5, 12);
      goto LABEL_52;
    }
    BOOL v26 = 1;
  }
  else
  {
LABEL_22:
    BOOL v26 = (v20 | v21) != 0;
  }
  if (v20) {
    BOOL v27 = 1;
  }
  else {
    BOOL v27 = v21 == 0;
  }
  char v28 = v27 || v18;
  if ((v28 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the image input Shape mapping is not 'RANK5_IMAGE_MAPPING'");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  uint64_t v29 = *(int *)(a1 + 24);
  if (!v29)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one input.");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  if (!*(_DWORD *)(a1 + 48))
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks produce at least one output.");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  if (!*(_DWORD *)(a2 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one layer.");
    CoreML::Result::Result((_DWORD *)a5, 13);
LABEL_52:
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    goto LABEL_54;
  }
  uint64_t v30 = *(void *)(a1 + 32);
  if (v30) {
    uint64_t v31 = v30 + 8;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = 8 * v29;
  while (1)
  {
    unint64_t v33 = *(uint64_t **)(*(void *)v31 + 32);
    if (!v33) {
      unint64_t v33 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (!*((unsigned char *)v33 + 16)) {
      break;
    }
    v31 += 8;
    v32 -= 8;
    if (!v32)
    {
      std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one non-optional input.");
      CoreML::Result::Result((_DWORD *)a5, 12);
      goto LABEL_52;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "inputs");
  CoreML::validateInputOutputTypes(a1 + 16, 1, (CoreML::Result *)a5);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)a5)) {
    goto LABEL_54;
  }
  if (*(char *)(a5 + 31) < 0) {
    operator delete(*(void **)(a5 + 8));
  }
  int v77 = a4;
  v85[0] = 0;
  v85[1] = 0;
  size_t v84 = v85;
  if (v26)
  {
    uint64_t v35 = *(void *)(a1 + 32);
    if (v35) {
      unsigned int v36 = (uint64_t *)(v35 + 8);
    }
    else {
      unsigned int v36 = 0;
    }
    uint64_t v37 = *(int *)(a1 + 24);
    if (v37)
    {
      uint64_t v38 = 8 * v37;
      while (1)
      {
        uint64_t v39 = *v36;
        long long v40 = *(uint64_t **)(*v36 + 32);
        if (!v40) {
          long long v40 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        int v41 = *((_DWORD *)v40 + 9);
        if (v41 == 4) {
          break;
        }
        if (v41 == 5)
        {
          if (!*(_DWORD *)(a2 + 72))
          {
            v89.__r_.__value_.__r.__words[0] = *(void *)(v39 + 16);
            std::string::size_type v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v89);
            goto LABEL_78;
          }
          int v42 = *(_DWORD *)(v40[3] + 16);
          v89.__r_.__value_.__r.__words[0] = *(void *)(v39 + 16);
          *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v89)+ 14) = v42;
        }
LABEL_80:
        ++v36;
        v38 -= 8;
        if (!v38) {
          goto LABEL_81;
        }
      }
      CGFloat v43 = *(const void ***)(v39 + 16);
      if (*(_DWORD *)(a2 + 76))
      {
        v89.__r_.__value_.__r.__words[0] = *(void *)(v39 + 16);
        std::string::size_type v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, v43, (uint64_t)&std::piecewise_construct, (long long **)&v89);
        int v45 = 4;
      }
      else
      {
        v89.__r_.__value_.__r.__words[0] = *(void *)(v39 + 16);
        std::string::size_type v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, v43, (uint64_t)&std::piecewise_construct, (long long **)&v89);
LABEL_78:
        int v45 = 5;
      }
      *((_DWORD *)v44 + 14) = v45;
      goto LABEL_80;
    }
LABEL_81:
    uint64_t v46 = *(void *)(a1 + 56);
    if (v46) {
      uint64_t v47 = v46 + 8;
    }
    else {
      uint64_t v47 = 0;
    }
    uint64_t v48 = *(int *)(a1 + 48);
    if (v48)
    {
      uint64_t v49 = 8 * v48;
      do
      {
        uint64_t v50 = *(uint64_t **)(*(void *)v47 + 32);
        if (!v50) {
          uint64_t v50 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v50 + 9) == 5)
        {
          int v51 = *(_DWORD *)(v50[3] + 16);
          if (v51)
          {
            v89.__r_.__value_.__r.__words[0] = *(void *)(*(void *)v47 + 16);
            *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v89)+ 14) = v51;
          }
        }
        v47 += 8;
        v49 -= 8;
      }
      while (v49);
    }
  }
  v83[0] = 0;
  v83[1] = 0;
  unsigned int v82 = (uint64_t *)v83;
  uint64_t v52 = *(void *)(a1 + 32);
  if (v52) {
    uint64_t v53 = (uint64_t *)(v52 + 8);
  }
  else {
    uint64_t v53 = 0;
  }
  uint64_t v54 = *(int *)(a1 + 24);
  if (!v54)
  {
LABEL_139:
    CGRect v73 = (uint64_t **)CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v89, (uint64_t)&v82, (uint64_t **)&v84, v26, 0, (uint64_t **)&v84);
    CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(v73, a2, (uint64_t)&v79);
    int v86 = v79;
    if (SHIBYTE(v88) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v80;
    std::string::size_type v88 = v81;
    if (CoreML::Result::good((CoreML::Result *)&v86))
    {
      std::locale v74 = v91;
      if (v91 != v92)
      {
        do
        {
          if (v83 == (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v82, v74 + 4)|| (unint64_t)v74[9] >= 2)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a3, v74 + 4, (uint64_t)(v74 + 4));
          }
          char v75 = (const void **)v74[1];
          if (v75)
          {
            do
            {
              size_t v76 = (const void ***)v75;
              char v75 = (const void **)*v75;
            }
            while (v75);
          }
          else
          {
            do
            {
              size_t v76 = (const void ***)v74[2];
              BOOL v19 = *v76 == v74;
              std::locale v74 = (const void **)v76;
            }
            while (!v19);
          }
          std::locale v74 = (const void **)v76;
        }
        while (v76 != v92);
      }
      if (!v26)
      {
        CoreML::NeuralNetworkShaper::NeuralNetworkShaper(&v79, a1, a2 + 16, 1);
        CoreML::NeuralNetworkShaper::~NeuralNetworkShaper((CoreML::NeuralNetworkShaper *)&v79);
      }
      if ((CoreML::Result::good((CoreML::Result *)&v86) & v77) == 1)
      {
        validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetwork>(a2, (CoreML::Result *)&v79);
        int v86 = v79;
        if (SHIBYTE(v88) < 0) {
          operator delete((void *)__p);
        }
        long long __p = v80;
        std::string::size_type v88 = v81;
        if (CoreML::Result::good((CoreML::Result *)&v86))
        {
          validateTrainingInputs<CoreML::Specification::NeuralNetwork>(a1, (void *)a2, (CoreML::Result *)&v79);
          int v86 = v79;
          if (SHIBYTE(v88) < 0) {
            operator delete((void *)__p);
          }
          long long __p = v80;
          std::string::size_type v88 = v81;
          CoreML::Result::good((CoreML::Result *)&v86);
        }
      }
    }
    *(void *)a5 = v86;
    *(_OWORD *)(a5 + 8) = __p;
    *(void *)(a5 + 24) = v88;
    long long __p = 0uLL;
    std::string::size_type v88 = 0;
    CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator((CoreML::NeuralNetworkSpecValidator *)&v89);
    goto LABEL_162;
  }
  int v78 = &v53[v54];
  while (1)
  {
    uint64_t v55 = *v53;
    std::string::basic_string[abi:ne180100]<0>(&v89, "__input");
    char v79 = *(const void ***)(v55 + 16);
    id v56 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v82, v79, (uint64_t)&std::piecewise_construct, (long long **)&v79);
    id v57 = std::__tree<std::string>::__assign_unique<std::string const*>((uint64_t **)v56 + 7, &v89, &v90);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    id v58 = *(uint64_t **)(v55 + 32);
    if (!v58) {
      id v58 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v58 + 9) != 5) {
      goto LABEL_138;
    }
    if (v26)
    {
      CoreML::validateNdMultiArrayInputType((CoreML *)v58[3], (CoreML::Result *)&v89);
      int v86 = (const void **)v89.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v88) < 0) {
        operator delete((void *)__p);
      }
      long long __p = *(_OWORD *)&v89.__r_.__value_.__r.__words[1];
      std::string::size_type v88 = v90.__r_.__value_.__r.__words[0];
      v90.__r_.__value_.__s.__data_[7] = 0;
      v89.__r_.__value_.__s.__data_[8] = 0;
      BOOL v59 = CoreML::Result::good((CoreML::Result *)&v86);
      if (v90.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v89.__r_.__value_.__l.__size_);
      }
      if (!v59)
      {
        *(void *)a5 = v86;
        *(_OWORD *)(a5 + 8) = __p;
        *(void *)(a5 + 24) = v88;
        long long __p = 0uLL;
        std::string::size_type v88 = 0;
        goto LABEL_162;
      }
      goto LABEL_138;
    }
    uint64_t v60 = v58[3];
    int v61 = *(_DWORD *)(v60 + 16);
    if (v61 >= 1 && (v61 | 2) != 3) {
      break;
    }
    int v63 = *(_DWORD *)(v60 + 60);
    if (v63)
    {
      if (v63 != 21)
      {
        if (v63 != 31 || *(_DWORD *)(*(void *)(v60 + 40) + 24) == 1) {
          goto LABEL_138;
        }
        long long v64 = *(uint64_t **)(v55 + 32);
        if (!v64) {
          long long v64 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v64 + 9) == 5) {
          long long v65 = (uint64_t *)v64[3];
        }
        else {
          long long v65 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v57);
        }
        if (*((_DWORD *)v65 + 15) == 31) {
          CGRect v72 = (uint64_t *)v65[5];
        }
        else {
          CGRect v72 = CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v65);
        }
        BOOL v71 = *((_DWORD *)v72 + 6) == 3;
        goto LABEL_136;
      }
      uint64_t v66 = *(void *)(v60 + 40);
      uint64_t v67 = *(void *)(v66 + 32);
      if (v67) {
        uint64_t v68 = v67 + 8;
      }
      else {
        uint64_t v68 = 0;
      }
      uint64_t v69 = *(int *)(v66 + 24);
      if (!v69) {
        goto LABEL_138;
      }
      uint64_t v70 = 8 * v69;
      while ((*(_DWORD *)(*(void *)v68 + 16) | 2) == 3)
      {
        v68 += 8;
        v70 -= 8;
        if (!v70) {
          goto LABEL_138;
        }
      }
    }
    BOOL v71 = 0;
LABEL_136:
    if (v61 <= 0 && !v71) {
      break;
    }
LABEL_138:
    if (++v53 == v78) {
      goto LABEL_139;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "Input MLMultiArray to neural networks must have dimension 1 (vector) or 3 (image-like arrays).");
  CoreML::Result::Result((_DWORD *)a5, 12);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
LABEL_162:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v82, v83[0]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v84, v85[0]);
LABEL_54:
  if (SHIBYTE(v88) < 0) {
    operator delete((void *)__p);
  }
}

void sub_2242FB40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, std::string *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,void *a35,uint64_t a36,char a37,char *a38,uint64_t a39,uint64_t a40,void *__pa,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (*(char *)(v46 - 161) < 0) {
    operator delete(*(void **)(v46 - 184));
  }
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&a34, a35);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a37, a38);
  if (a46 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    int v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::set<std::string> &>::operator=[abi:ne180100]<std::string const,std::set<std::string>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          int v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_multi<std::pair<std::string const,std::set<std::string>> const&>(v5, a2 + 2);
      uint64_t v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2242FB7E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::set<std::string> &>::operator=[abi:ne180100]<std::string const,std::set<std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(uint64_t ***)(a1 + 8);
  if (v4 != (uint64_t **)(a2 + 24)) {
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v4, *(void **)(a2 + 24), (void *)(a2 + 32));
  }
  return a1;
}

uint64_t **std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    int v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          int v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::string>::__emplace_multi<std::string const&>(v5, (uint64_t)(a2 + 4));
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2242FB9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const void **std::__tree<std::string>::__emplace_multi<std::string const&>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_2242FBA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        int v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_multi<std::pair<std::string const,std::set<std::string>> const&>(uint64_t **a1, long long *a2)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::pair<std::string const,std::set<std::string>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_2242FBB0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::pair<std::string const,std::set<std::string>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2242FBB78(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (const void ***)a2 + 3);
  return this;
}

void sub_2242FBBEC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    int v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_DWORD *)v8 + 14) = *((_DWORD *)v9 + 14);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          int v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_multi<std::pair<std::string const,int> const&>(v5, (uint64_t)(a2 + 4));
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2242FBD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const void **std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_multi<std::pair<std::string const,int> const&>(uint64_t **a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::string,turi::unary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unary_op>>>::__construct_node<std::pair<std::string const,turi::unary_op> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_2242FBDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateNdMultiArrayInputType(CoreML *this@<X0>, CoreML::Result *a2@<X8>)
{
  int v4 = *((_DWORD *)this + 4);
  if (v4 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Input MLMultiArray to neural networks must have at least 1 dimension.");
    CoreML::Result::Result(a2, 12);
  }
  else
  {
    if (*((_DWORD *)this + 15) != 31 || *(_DWORD *)(*((void *)this + 5) + 24) == v4)
    {
      CoreML::Result::Result(a2);
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "For MLMultiArray input: Rank of the flexible shape range must match the rank of the default shape.");
    CoreML::Result::Result(a2, 12);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2242FBED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v148);
  uint64_t v6 = *(void *)(a2 + 32);
  int v7 = (void *)(v6 + 8);
  if (!v6) {
    int v7 = 0;
  }
  uint64_t v8 = *(int *)(a2 + 24);
  if (!v8)
  {
LABEL_58:
    CoreML::Result::Result((CoreML::Result *)a3);
    goto LABEL_206;
  }
  uint64_t v130 = &v7[v8];
  uint64_t v135 = a1 + 2;
  uint64_t v136 = a1 + 1;
  uint64_t v9 = a1 + 4;
  uint64_t v133 = a3;
  v134 = a1 + 5;
  uint64_t v10 = a1 + 7;
  size_t v137 = a1 + 8;
  size_t v132 = (CoreML::NeuralNetworkSpecValidator *)a1;
  while (1)
  {
    uint64_t v131 = v7;
    uint64_t v11 = *v7;
    if (!CoreML::Result::good((CoreML::Result *)&v148))
    {
LABEL_89:
      *(void *)a3 = v148;
      *(_OWORD *)(a3 + 8) = v149;
      *(void *)(a3 + 24) = v150;
      goto LABEL_90;
    }
    if (*(unsigned char *)a1)
    {
      uint64_t v12 = *(int *)(v11 + 72);
      if (v12)
      {
        if (*(_DWORD *)(v11 + 24) == v12)
        {
          uint64_t v13 = *(void *)(v11 + 80);
          if (v13) {
            uint64_t v14 = v13 + 8;
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v15 = -8 * v12;
          uint64_t v16 = 8;
          while (1)
          {
            int v17 = *(CoreML **)(v14 + v16 - 8);
            CoreML::validateTensorMessage(v17, (const CoreML::Specification::Tensor *)v11, (CoreML::Result *)&v144);
            std::string::size_type v148 = v144.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v150) < 0) {
              operator delete((void *)v149);
            }
            long long v149 = *(_OWORD *)&v144.__r_.__value_.__r.__words[1];
            uint64_t v150 = v145;
            if (!CoreML::Result::good((CoreML::Result *)&v148)) {
              goto LABEL_59;
            }
            if (v135 != (unsigned char *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v136, *(const void ***)(*(void *)(v11 + 32) + v16)))
            {
              int v18 = *((_DWORD *)v17 + 9);
              v144.__r_.__value_.__r.__words[0] = *(void *)(*(void *)(v11 + 32) + v16);
              if (v18 != *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v136, (const void **)v144.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v144)+ 14))
              {
                int v42 = *(long long **)(v11 + 112);
                if (*((char *)v42 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)v42, *((void *)v42 + 1));
                }
                else
                {
                  long long v43 = *v42;
                  v141.__r_.__value_.__r.__words[2] = *((void *)v42 + 2);
                  *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v43;
                }
                std::string::size_type v44 = (_DWORD *)v133;
                unsigned int v82 = std::string::insert(&v141, 0, "Layer '");
                long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
                v142.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v83;
                v82->__r_.__value_.__l.__size_ = 0;
                v82->__r_.__value_.__r.__words[2] = 0;
                v82->__r_.__value_.__r.__words[0] = 0;
                size_t v84 = std::string::append(&v142, "''s input '");
                long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
                v143.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v85;
                v84->__r_.__value_.__l.__size_ = 0;
                v84->__r_.__value_.__r.__words[2] = 0;
                v84->__r_.__value_.__r.__words[0] = 0;
                int v86 = *(long long **)(*(void *)(v11 + 32) + v16);
                if (*((char *)v86 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v140, *(const std::string::value_type **)v86, *((void *)v86 + 1));
                }
                else
                {
                  long long v87 = *v86;
                  v140.__r_.__value_.__r.__words[2] = *((void *)v86 + 2);
                  *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v87;
                }
                if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v88 = &v140;
                }
                else {
                  std::string::size_type v88 = (std::string *)v140.__r_.__value_.__r.__words[0];
                }
                if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v140.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v140.__r_.__value_.__l.__size_;
                }
                std::string v90 = std::string::append(&v143, (const std::string::value_type *)v88, size);
                long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
                v146.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v91;
                v90->__r_.__value_.__l.__size_ = 0;
                v90->__r_.__value_.__r.__words[2] = 0;
                v90->__r_.__value_.__r.__words[0] = 0;
                size_t v92 = std::string::append(&v146, "' is also an input to the model. However, for this tensor the rank provided in the layer description");
                long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
                v147.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v93;
                v92->__r_.__value_.__l.__size_ = 0;
                v92->__r_.__value_.__r.__words[2] = 0;
                v92->__r_.__value_.__r.__words[0] = 0;
                size_t v94 = std::string::append(&v147, " does not match the one provided in the model description");
                long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
                v144.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v95;
                v94->__r_.__value_.__l.__size_ = 0;
                v94->__r_.__value_.__r.__words[2] = 0;
                v94->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v147.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v146.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v140.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v143.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v142.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v141.__r_.__value_.__l.__data_);
                }
LABEL_152:
                CoreML::Result::Result(v44, 13);
                goto LABEL_204;
              }
            }
            if (v134 == (unsigned char *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v9, *(const void ***)(*(void *)(v11 + 32) + v16)))
            {
              int v19 = *((_DWORD *)v17 + 9);
              v144.__r_.__value_.__r.__words[0] = *(void *)(*(void *)(v11 + 32) + v16);
              *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)v144.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v144)+ 14) = v19;
            }
            else
            {
              v144.__r_.__value_.__r.__words[0] = *(void *)(*(void *)(v11 + 32) + v16);
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)v144.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v144)+ 14) != *((_DWORD *)v17 + 9))
              {
                int v45 = *(long long **)(*(void *)(v11 + 32) + v16);
                if (*((char *)v45 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v45, *((void *)v45 + 1));
                }
                else
                {
                  long long v46 = *v45;
                  v146.__r_.__value_.__r.__words[2] = *((void *)v45 + 2);
                  *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v46;
                }
                uint64_t v47 = (_DWORD *)v133;
                size_t v96 = std::string::insert(&v146, 0, "Inconsistent rank for the blob named '");
                long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
                v147.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v97;
                v96->__r_.__value_.__l.__size_ = 0;
                v96->__r_.__value_.__r.__words[2] = 0;
                v96->__r_.__value_.__r.__words[0] = 0;
                char v98 = std::string::append(&v147, "'.");
                long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
                v144.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v99;
                v98->__r_.__value_.__l.__size_ = 0;
                v98->__r_.__value_.__r.__words[2] = 0;
                v98->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v147.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v146.__r_.__value_.__l.__data_);
                }
                goto LABEL_203;
              }
            }
            v16 += 8;
            if (v15 + v16 == 8) {
              goto LABEL_23;
            }
          }
        }
        int v118 = *(long long **)(v11 + 112);
        if (*((char *)v118 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v118, *((void *)v118 + 1));
        }
        else
        {
          long long v119 = *v118;
          v146.__r_.__value_.__r.__words[2] = *((void *)v118 + 2);
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v119;
        }
        uint64_t v47 = (_DWORD *)v133;
        size_t v122 = std::string::insert(&v146, 0, "Layer '");
        long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
        v147.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v123;
        v122->__r_.__value_.__l.__size_ = 0;
        v122->__r_.__value_.__r.__words[2] = 0;
        v122->__r_.__value_.__r.__words[0] = 0;
        int v124 = std::string::append(&v147, "''s input and inputTensors have different lengths");
        long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
        v144.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v125;
        v124->__r_.__value_.__l.__size_ = 0;
        v124->__r_.__value_.__r.__words[2] = 0;
        v124->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v147.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v146.__r_.__value_.__l.__data_);
        }
        goto LABEL_203;
      }
LABEL_23:
      uint64_t v20 = *(int *)(v11 + 96);
      if (v20)
      {
        if (*(_DWORD *)(v11 + 48) == v20)
        {
          uint64_t v21 = *(void *)(v11 + 104);
          if (v21) {
            uint64_t v22 = v21 + 8;
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v23 = -8 * v20;
          uint64_t v24 = 8;
          while (1)
          {
            uint64_t v25 = *(CoreML **)(v22 + v24 - 8);
            CoreML::validateTensorMessage(v25, (const CoreML::Specification::Tensor *)v11, (CoreML::Result *)&v144);
            std::string::size_type v148 = v144.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v150) < 0) {
              operator delete((void *)v149);
            }
            long long v149 = *(_OWORD *)&v144.__r_.__value_.__r.__words[1];
            uint64_t v150 = v145;
            if (!CoreML::Result::good((CoreML::Result *)&v148)) {
              break;
            }
            if (v135 != (unsigned char *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v136, *(const void ***)(*(void *)(v11 + 56) + v24)))
            {
              int v26 = *((_DWORD *)v25 + 9);
              v144.__r_.__value_.__r.__words[0] = *(void *)(*(void *)(v11 + 56) + v24);
              if (v26 != *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v136, (const void **)v144.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v144)+ 14))
              {
                BOOL v59 = *(long long **)(v11 + 112);
                if (*((char *)v59 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)v59, *((void *)v59 + 1));
                }
                else
                {
                  long long v60 = *v59;
                  v141.__r_.__value_.__r.__words[2] = *((void *)v59 + 2);
                  *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v60;
                }
                std::string::size_type v44 = (_DWORD *)v133;
                unint64_t v100 = std::string::insert(&v141, 0, "Layer '");
                long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
                v142.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v101;
                v100->__r_.__value_.__l.__size_ = 0;
                v100->__r_.__value_.__r.__words[2] = 0;
                v100->__r_.__value_.__r.__words[0] = 0;
                unint64_t v102 = std::string::append(&v142, "''s output '");
                long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
                v143.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v103;
                v102->__r_.__value_.__l.__size_ = 0;
                v102->__r_.__value_.__r.__words[2] = 0;
                v102->__r_.__value_.__r.__words[0] = 0;
                uint64_t v104 = *(long long **)(*(void *)(v11 + 56) + v24);
                if (*((char *)v104 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v140, *(const std::string::value_type **)v104, *((void *)v104 + 1));
                }
                else
                {
                  long long v105 = *v104;
                  v140.__r_.__value_.__r.__words[2] = *((void *)v104 + 2);
                  *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v105;
                }
                if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v106 = &v140;
                }
                else {
                  uint64_t v106 = (std::string *)v140.__r_.__value_.__r.__words[0];
                }
                if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v107 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v107 = v140.__r_.__value_.__l.__size_;
                }
                size_t v108 = std::string::append(&v143, (const std::string::value_type *)v106, v107);
                long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
                v146.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v109;
                v108->__r_.__value_.__l.__size_ = 0;
                v108->__r_.__value_.__r.__words[2] = 0;
                v108->__r_.__value_.__r.__words[0] = 0;
                uint64_t v110 = std::string::append(&v146, "' is also an output of the model. However, for this tensor the rank provided in the layer description");
                long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
                v147.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v111;
                v110->__r_.__value_.__l.__size_ = 0;
                v110->__r_.__value_.__r.__words[2] = 0;
                v110->__r_.__value_.__r.__words[0] = 0;
                size_t v112 = std::string::append(&v147, " does not match the one provided in the model description");
                long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
                v144.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v113;
                v112->__r_.__value_.__l.__size_ = 0;
                v112->__r_.__value_.__r.__words[2] = 0;
                v112->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v147.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v146.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v140.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v143.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v142.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v141.__r_.__value_.__l.__data_);
                }
                goto LABEL_152;
              }
            }
            if (v134 == (unsigned char *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v9, *(const void ***)(*(void *)(v11 + 56) + v24)))
            {
              int v27 = *((_DWORD *)v25 + 9);
              v144.__r_.__value_.__r.__words[0] = *(void *)(*(void *)(v11 + 56) + v24);
              *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)v144.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v144)+ 14) = v27;
            }
            else
            {
              v144.__r_.__value_.__r.__words[0] = *(void *)(*(void *)(v11 + 56) + v24);
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)v144.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v144)+ 14) != *((_DWORD *)v25 + 9))
              {
                int v61 = *(long long **)(*(void *)(v11 + 56) + v24);
                if (*((char *)v61 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v61, *((void *)v61 + 1));
                }
                else
                {
                  long long v62 = *v61;
                  v146.__r_.__value_.__r.__words[2] = *((void *)v61 + 2);
                  *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v62;
                }
                uint64_t v47 = (_DWORD *)v133;
                uint64_t v114 = std::string::insert(&v146, 0, "Inconsistent rank for the blob named '");
                long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
                v147.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v115;
                v114->__r_.__value_.__l.__size_ = 0;
                v114->__r_.__value_.__r.__words[2] = 0;
                v114->__r_.__value_.__r.__words[0] = 0;
                uint64_t v116 = std::string::append(&v147, "'.");
                long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
                v144.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v117;
                v116->__r_.__value_.__l.__size_ = 0;
                v116->__r_.__value_.__r.__words[2] = 0;
                v116->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v147.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v146.__r_.__value_.__l.__data_);
                }
                goto LABEL_203;
              }
            }
            v24 += 8;
            if (v23 + v24 == 8) {
              goto LABEL_39;
            }
          }
LABEL_59:
          *(void *)uint64_t v133 = v148;
          *(_OWORD *)(v133 + 8) = v149;
          *(void *)(v133 + 24) = v150;
LABEL_90:
          long long v149 = 0uLL;
          uint64_t v150 = 0;
          goto LABEL_206;
        }
        uint64_t v120 = *(long long **)(v11 + 112);
        if (*((char *)v120 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v120, *((void *)v120 + 1));
        }
        else
        {
          long long v121 = *v120;
          v146.__r_.__value_.__r.__words[2] = *((void *)v120 + 2);
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v121;
        }
        uint64_t v126 = std::string::insert(&v146, 0, "Layer '");
        uint64_t v47 = (_DWORD *)v133;
        long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
        v147.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v127;
        v126->__r_.__value_.__l.__size_ = 0;
        v126->__r_.__value_.__r.__words[2] = 0;
        v126->__r_.__value_.__r.__words[0] = 0;
        uint64_t v128 = std::string::append(&v147, "''s output and \"outputTensors\" property have different lengths");
        long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
        v144.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v129;
        v128->__r_.__value_.__l.__size_ = 0;
        v128->__r_.__value_.__r.__words[2] = 0;
        v128->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v147.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v146.__r_.__value_.__l.__data_);
        }
LABEL_203:
        CoreML::Result::Result(v47, 13);
        goto LABEL_204;
      }
    }
LABEL_39:
    CoreML::NeuralNetworkSpecValidator::validateLayer(v132, (uint64_t **)v11, &v144);
    std::string::size_type v148 = v144.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v150) < 0) {
      operator delete((void *)v149);
    }
    long long v149 = *(_OWORD *)&v144.__r_.__value_.__r.__words[1];
    uint64_t v150 = v145;
    a3 = v133;
    if (!CoreML::Result::good((CoreML::Result *)&v148)) {
      goto LABEL_89;
    }
    uint64_t v28 = *(void *)(v11 + 32);
    uint64_t v29 = v28 ? (const void ***)(v28 + 8) : 0;
    uint64_t v30 = *(int *)(v11 + 24);
    if (v30) {
      break;
    }
LABEL_49:
    uint64_t v33 = *(void *)(v11 + 56);
    if (v33) {
      char v34 = (const void ***)(v33 + 8);
    }
    else {
      char v34 = 0;
    }
    uint64_t v35 = *(int *)(v11 + 48);
    if (v35)
    {
      uint64_t v36 = 8 * v35;
      while (1)
      {
        uint64_t v37 = *v34;
        if (v137 != (unsigned char *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v10, *v34)&& *(_DWORD *)(v11 + 140) != 600)
        {
          break;
        }
        v144.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
        uint64_t v38 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v37, (uint64_t)&std::piecewise_construct, (long long **)&v144);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v38 + 7, *(const void ***)(v11 + 112), *(void *)(v11 + 112));
        ++v34;
        v36 -= 8;
        if (!v36) {
          goto LABEL_57;
        }
      }
      v147.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
      uint64_t v41 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v37, (uint64_t)&std::piecewise_construct, (long long **)&v147)[7];
      if (*(char *)(v41 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)(v41 + 32), *(void *)(v41 + 40));
      }
      else {
        std::string v144 = *(std::string *)(v41 + 32);
      }
      int v63 = *(long long **)(v11 + 112);
      if (*((char *)v63 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v63, *((void *)v63 + 1));
      }
      else
      {
        long long v64 = *v63;
        v139.__r_.__value_.__r.__words[2] = *((void *)v63 + 2);
        *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v64;
      }
      long long v65 = std::string::insert(&v139, 0, "Layer '");
      long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      uint64_t v67 = std::string::append(&v140, "' produces an output named '");
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v141.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)v37 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v138, (const std::string::value_type *)*v37, (std::string::size_type)v37[1]);
      }
      else
      {
        long long v69 = *(_OWORD *)v37;
        v138.__r_.__value_.__r.__words[2] = (std::string::size_type)v37[2];
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v69;
      }
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v70 = &v138;
      }
      else {
        uint64_t v70 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v71 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v71 = v138.__r_.__value_.__l.__size_;
      }
      CGRect v72 = std::string::append(&v141, (const std::string::value_type *)v70, v71);
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v142.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      std::locale v74 = std::string::append(&v142, "' which is also an output produced by the layer '");
      long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v143.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v76 = &v144;
      }
      else {
        size_t v76 = (std::string *)v144.__r_.__value_.__r.__words[0];
      }
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v77 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v77 = v144.__r_.__value_.__l.__size_;
      }
      int v78 = std::string::append(&v143, (const std::string::value_type *)v76, v77);
      long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      long long v80 = std::string::append(&v146, "'.");
      long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v147.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v146.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v143.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v142.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v138.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v141.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v140.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v139.__r_.__value_.__l.__data_);
      }
      CoreML::Result::Result((_DWORD *)v133, 13);
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v147.__r_.__value_.__l.__data_);
      }
      goto LABEL_204;
    }
LABEL_57:
    int v7 = v131 + 1;
    a1 = (uint64_t **)v132;
    if (v131 + 1 == v130) {
      goto LABEL_58;
    }
  }
  uint64_t v31 = 8 * v30;
  while (1)
  {
    uint64_t v32 = *v29;
    if (v137 == (unsigned char *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v10, *v29))break; {
    ++v29;
    }
    v31 -= 8;
    if (!v31) {
      goto LABEL_49;
    }
  }
  uint64_t v39 = *(long long **)(v11 + 112);
  if (*((char *)v39 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)v39, *((void *)v39 + 1));
  }
  else
  {
    long long v40 = *v39;
    v142.__r_.__value_.__r.__words[2] = *((void *)v39 + 2);
    *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v40;
  }
  uint64_t v48 = std::string::insert(&v142, 0, "Layer '");
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v143.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  uint64_t v50 = std::string::append(&v143, "' consumes an input named '");
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v146.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)v32 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v141, (const std::string::value_type *)*v32, (std::string::size_type)v32[1]);
  }
  else
  {
    long long v52 = *(_OWORD *)v32;
    v141.__r_.__value_.__r.__words[2] = (std::string::size_type)v32[2];
    *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v52;
  }
  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v53 = &v141;
  }
  else {
    uint64_t v53 = (std::string *)v141.__r_.__value_.__r.__words[0];
  }
  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v54 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v54 = v141.__r_.__value_.__l.__size_;
  }
  uint64_t v55 = std::string::append(&v146, (const std::string::value_type *)v53, v54);
  long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  id v57 = std::string::append(&v147, "' which is not present in this network.");
  long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v144.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v147.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v146.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v143.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v142.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)v133, 13);
LABEL_204:
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
LABEL_206:
  if (SHIBYTE(v150) < 0) {
    operator delete((void *)v149);
  }
}

void sub_2242FCE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (*(char *)(v57 - 89) < 0) {
    operator delete(*(void **)(v57 - 112));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkShaper::~NeuralNetworkShaper(CoreML::NeuralNetworkShaper *this)
{
}

uint64_t **std::__tree<std::string>::__assign_unique<std::string const*>(uint64_t **result, std::string *a2, std::string *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v10 = result;
    uint64_t v11 = v8;
    uint64_t v12 = v8;
    if (v8)
    {
      uint64_t v11 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      while (a2 != a3)
      {
        std::__tree<std::string>::__node_assign_unique(v5, a2, (uint64_t)v8);
        if (v9)
        {
          uint64_t v8 = v11;
          uint64_t v12 = v11;
          if (!v11)
          {
            ++a2;
            break;
          }
          uint64_t v11 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v11);
        }
        else
        {
          uint64_t v8 = v12;
        }
        ++a2;
        if (!v8) {
          break;
        }
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    uint64_t result = (uint64_t **)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)a2);
    ++a2;
  }
  return result;
}

void sub_2242FD210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__node_assign_unique(uint64_t **a1, std::string *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v9, (const void **)&a2->__r_.__value_.__l.__data_);
  if (*v6) {
    return *v6;
  }
  int v7 = v6;
  std::string::operator=((std::string *)(a3 + 32), a2);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v7, (uint64_t *)a3);
  return (uint64_t *)a3;
}

void CoreML::validateTensorMessage(CoreML *this@<X0>, const CoreML::Specification::Tensor *a2@<X1>, CoreML::Result *a3@<X8>)
{
  v22[2] = *MEMORY[0x263EF8340];
  long long __p = 0;
  long long v21 = 0uLL;
  int v5 = *((_DWORD *)this + 4);
  if (v5 < 1) {
    goto LABEL_4;
  }
  int v6 = *((_DWORD *)this + 9);
  if (v6 == v5)
  {
    if (v6 > 0)
    {
LABEL_4:
      CoreML::Result::Result(a3);
      goto LABEL_20;
    }
    uint64_t v9 = (long long *)*((void *)a2 + 14);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v18.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
    }
    uint64_t v14 = std::string::insert(&v18, 0, "Tensor in layer '");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v13 = std::string::append(&v19, "': rank must be positive");
  }
  else
  {
    int v7 = (long long *)*((void *)a2 + 14);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v8 = *v7;
      v18.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
    }
    uint64_t v11 = std::string::insert(&v18, 0, "Tensor in layer '");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    uint64_t v13 = std::string::append(&v19, "': rank must match the length of dimValue");
  }
  uint64_t v16 = (void *)v13->__r_.__value_.__r.__words[0];
  v22[0] = v13->__r_.__value_.__l.__size_;
  *(void *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
  char v17 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  long long __p = v16;
  *(void *)&long long v21 = v22[0];
  *(void *)((char *)&v21 + 7) = *(void *)((char *)v22 + 7);
  HIBYTE(v21) = v17;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result(a3, 13);
LABEL_20:
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_2242FD48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::ShapeConstraint>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::ShapeConstraint>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<int>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<int>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *turi::ErrorCodeToString@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xA) {
    uint64_t v2 = "Unknown error";
  }
  else {
    uint64_t v2 = off_2646D7A20[a1];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void *CoreML::TreeEnsembleBase::TreeEnsembleBase(void *a1, const CoreML::Model *a2, int a3)
{
  int v5 = CoreML::Model::Model(a1, a2);
  *int v5 = &unk_26D777D10;
  Bytef v5[4] = 0;
  v5[3] = v5 + 4;
  v5[5] = 0;
  uint64_t v6 = v5[1];
  int v7 = *(_DWORD *)(v6 + 44);
  if (a3)
  {
    if (v7 != 402)
    {
      CoreML::Specification::Model::clear_Type(v5[1]);
      *(_DWORD *)(v6 + 44) = 402;
      operator new();
    }
    uint64_t v8 = *(void *)(*(void *)(v6 + 32) + 16);
    if (!v8) {
      operator new();
    }
  }
  else
  {
    if (v7 != 302)
    {
      CoreML::Specification::Model::clear_Type(v5[1]);
      *(_DWORD *)(v6 + 44) = 302;
      operator new();
    }
    uint64_t v8 = *(void *)(*(void *)(v6 + 32) + 16);
    if (!v8) {
      operator new();
    }
  }
  a1[6] = v8;
  return a1;
}

void sub_2242FD7CC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  MEMORY[0x22A614FA0](v4, 0x10A1C40CFA7A0FDLL);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v2, *((void **)v1 + 4));
  CoreML::Model::~Model(v1);
  _Unwind_Resume(a1);
}

void *CoreML::TreeEnsembleClassifier::TreeEnsembleClassifier(void *a1, const std::string *a2, const std::string *a3, const std::string *a4)
{
  CoreML::Model::Model((CoreML::Model *)v13, a4);
  CoreML::TreeEnsembleBase::TreeEnsembleBase(a1, (const CoreML::Model *)v13, 1);
  CoreML::Model::~Model((CoreML::Model *)v13);
  *a1 = &unk_26D777D40;
  uint64_t v7 = a1[1];
  if (*(_DWORD *)(v7 + 44) != 402)
  {
    CoreML::Specification::Model::clear_Type(a1[1]);
    *(_DWORD *)(v7 + 44) = 402;
    operator new();
  }
  a1[7] = *(void *)(v7 + 32);
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    operator new();
  }
  uint64_t v9 = *(std::string **)(v8 + 88);
  if (v9 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v9, a2);
  uint64_t v10 = *(void *)(a1[1] + 16);
  if (!v10) {
    operator new();
  }
  uint64_t v11 = *(std::string **)(v10 + 96);
  if (v11 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v11, a3);
  return a1;
}

void sub_2242FD9C0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x10A1C40FD9EAC30);
  CoreML::TreeEnsembleBase::~TreeEnsembleBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::TreeEnsembleBase::~TreeEnsembleBase(CoreML::TreeEnsembleBase *this)
{
  *(void *)this = &unk_26D777D10;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  CoreML::Model::~Model(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D777D10;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  CoreML::Model::~Model(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D777D10;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  CoreML::Model::~Model(this);
  JUMPOUT(0x22A614FA0);
}

void *CoreML::TreeEnsembleRegressor::TreeEnsembleRegressor(void *a1, const std::string *a2, const std::string *a3)
{
  CoreML::Model::Model((CoreML::Model *)v9, a3);
  CoreML::TreeEnsembleBase::TreeEnsembleBase(a1, (const CoreML::Model *)v9, 0);
  CoreML::Model::~Model((CoreML::Model *)v9);
  *a1 = &unk_26D777D70;
  uint64_t v5 = a1[1];
  if (*(_DWORD *)(v5 + 44) != 302)
  {
    CoreML::Specification::Model::clear_Type(a1[1]);
    *(_DWORD *)(v5 + 44) = 302;
    operator new();
  }
  a1[7] = *(void *)(v5 + 32);
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6) {
    operator new();
  }
  uint64_t v7 = *(std::string **)(v6 + 88);
  if (v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v7, a2);
  return a1;
}

void sub_2242FDBA4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x10A1C40FD9EAC30);
  CoreML::TreeEnsembleBase::~TreeEnsembleBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::TreeEnsembleRegressor::~TreeEnsembleRegressor(CoreML::TreeEnsembleRegressor *this)
{
  *(void *)this = &unk_26D777D10;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  CoreML::Model::~Model(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D777D10;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  CoreML::Model::~Model(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::TreeEnsembleClassifier::~TreeEnsembleClassifier(CoreML::TreeEnsembleClassifier *this)
{
  *(void *)this = &unk_26D777D10;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  CoreML::Model::~Model(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D777D10;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  CoreML::Model::~Model(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::TreeEnsembleBase::setDefaultPredictionValue(CoreML::TreeEnsembleBase *this, double a2)
{
  signed int v3 = 0;
  uint64_t v4 = *((void *)this + 6);
  *(_DWORD *)(v4 + 4CoreML::Specification::GLMClassifier::New(this, 0) = 0;
  uint64_t v5 = (unsigned int *)(v4 + 40);
  uint64_t v6 = v4;
  if (!*(_DWORD *)(v4 + 44))
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v5, 1);
    signed int v3 = *v5;
    uint64_t v6 = *((void *)this + 6);
  }
  uint64_t v8 = *(void *)(v4 + 48);
  *(_DWORD *)(v4 + 4CoreML::Specification::GLMClassifier::New(this, 0) = v3 + 1;
  *(double *)(v8 + 8 * v3 + 8) = a2;
  *(void *)(v6 + 64) = 1;
}

void CoreML::TreeEnsembleBase::setDefaultPredictionValue(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_DWORD *)(v2 + 4CoreML::Specification::GLMClassifier::New(this, 0) = 0;
  signed int v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4)
  {
    long long v12 = *a2;
  }
  else
  {
    do
    {
      uint64_t v7 = *v3;
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v10 = (unsigned int *)(v8 + 40);
      signed int v9 = *(_DWORD *)(v8 + 40);
      if (v9 == *(_DWORD *)(v8 + 44))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve(v10, v9 + 1);
        signed int v9 = *v10;
      }
      uint64_t v11 = *(void *)(v8 + 48);
      *(_DWORD *)(v8 + 4CoreML::Specification::GLMClassifier::New(this, 0) = v9 + 1;
      *(void *)(v11 + 8 * v9 + 8) = v7;
      ++v3;
    }
    while (v3 != v4);
    uint64_t v2 = *(void *)(a1 + 48);
    signed int v3 = *a2;
    long long v12 = a2[1];
  }
  *(void *)(v2 + 64) = v12 - v3;
}

CoreML::Specification::TreeEnsembleParameters_TreeNode *CoreML::TreeEnsembleBase::setupBranchNode(CoreML::TreeEnsembleBase *a1, unint64_t a2, unint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t result = CoreML::TreeEnsembleBase::_getNode(a1, a2, a3, 1);
  *((void *)result + 8) = a4;
  *((_DWORD *)result + 14) = a5;
  *((double *)result + 9) = a8;
  *((void *)result + 1CoreML::Specification::GLMClassifier::New(this, 0) = a6;
  *((void *)result + 11) = a7;
  return result;
}

CoreML::Specification::TreeEnsembleParameters_TreeNode *CoreML::TreeEnsembleBase::_getNode(CoreML::TreeEnsembleBase *this, unint64_t a2, unint64_t a3, int a4)
{
  uint64_t v6 = (char *)*((void *)this + 4);
  uint64_t v7 = (void *)((char *)this + 32);
  if (v6)
  {
    uint64_t v8 = (char *)this + 32;
    do
    {
      unint64_t v9 = *((void *)v6 + 4);
      if (v9 >= a2)
      {
        if (v9 <= a2)
        {
          if (*((void *)v6 + 5) < a3) {
            v6 += 8;
          }
          else {
            uint64_t v8 = v6;
          }
        }
        else
        {
          uint64_t v8 = v6;
        }
      }
      else
      {
        v6 += 8;
      }
      uint64_t v6 = *(char **)v6;
    }
    while (v6);
    if (v8 != (char *)this + 32)
    {
      if (*((void *)v8 + 4) == a2 && *((void *)v8 + 5) == a3)
      {
        if (a4)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Setup routine called multiple times for treeId=", 47);
          std::string v18 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", nodeID=", 9);
          std::string v19 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)".", 1);
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::logic_error::logic_error(exception, &v21);
          __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
        }
        return *(CoreML::Specification::TreeEnsembleParameters_TreeNode **)(*(void *)(*((void *)this + 6) + 32)
                                                                          + 8 * *((int *)v8 + 12)
                                                                          + 8);
      }
      uint64_t v7 = v8;
    }
  }
  if ((a4 & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Setup routine not called yet for node with treeId=", 50);
    long long v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", nodeID=", 9);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)".", 1);
    char v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(v17, &v21);
    __cxa_throw(v17, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  uint64_t v11 = (uint64_t **)((char *)this + 24);
  uint64_t v12 = *((void *)this + 6);
  int v13 = *(_DWORD *)(v12 + 24);
  uint64_t v10 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode>::TypeHandler>((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v12 + 16));
  *((void *)v10 + 5) = a2;
  *((void *)v10 + 6) = a3;
  v22[0] = a2;
  v22[1] = a3;
  int v23 = v13;
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__emplace_hint_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,int>>(v11, v7, v22, (uint64_t)v22);
  return v10;
}

void sub_2242FE234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

CoreML::Specification::TreeEnsembleParameters_TreeNode *CoreML::TreeEnsembleBase::setMissingValueBehavior(CoreML::TreeEnsembleBase *this, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t result = CoreML::TreeEnsembleBase::_getNode(this, a2, a3, 0);
  *((unsigned char *)result + 6CoreML::Specification::GLMClassifier::New(this, 0) = a4;
  return result;
}

double CoreML::TreeEnsembleBase::setupLeafNode(CoreML::TreeEnsembleBase *a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  Node = CoreML::TreeEnsembleBase::_getNode(a1, a2, a3, 1);
  uint64_t v7 = Node;
  *((_DWORD *)Node + 14) = 6;
  uint64_t v8 = *((unsigned int *)Node + 6);
  if ((int)v8 >= 1)
  {
    unint64_t v9 = (uint64_t *)(*((void *)Node + 4) + 8);
    do
    {
      uint64_t v10 = *v9++;
      CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::Clear(v10);
      --v8;
    }
    while (v8);
    *((_DWORD *)v7 + 6) = 0;
  }
  uint64_t v11 = *a4;
  uint64_t v12 = a4[1];
  if (*a4 != v12)
  {
    do
    {
      int v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::TypeHandler>((CoreML::Specification::TreeEnsembleParameters_TreeNode *)((char *)v7 + 16));
      *((void *)v13 + 2) = *(void *)v11;
      double result = *(double *)(v11 + 8);
      *((double *)v13 + 3) = result;
      v11 += 16;
    }
    while (v11 != v12);
  }
  return result;
}

void CoreML::TreeEnsembleBase::finish(CoreML::TreeEnsembles **this)
{
  CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(this[1], &v1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t CoreML::TreeEnsembleClassifier::setOutputClassList(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v4 + 44) != 402)
  {
    CoreML::Specification::Model::clear_Type(*(void *)(a1 + 8));
    *(_DWORD *)(v4 + 44) = 402;
    operator new();
  }
  uint64_t v5 = *(void *)(v4 + 32);
  if (*(_DWORD *)(v5 + 44) != 100)
  {
    CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(v5);
    *(_DWORD *)(v5 + 44) = 100;
    operator new();
  }
  uint64_t result = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(*(void *)(v5 + 32) + 16);
  if (a2[1] != *a2)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v9 + 44) != 402)
      {
        CoreML::Specification::Model::clear_Type(*(void *)(a1 + 8));
        *(_DWORD *)(v9 + 44) = 402;
        operator new();
      }
      uint64_t v10 = *(void *)(v9 + 32);
      if (*(_DWORD *)(v10 + 44) != 100)
      {
        CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(v10);
        *(_DWORD *)(v10 + 44) = 100;
        operator new();
      }
      uint64_t v11 = *(void *)(v10 + 32);
      uint64_t v12 = (_tc_google::protobuf::Arena **)(v11 + 16);
      int v13 = *(int **)(v11 + 32);
      if (!v13) {
        break;
      }
      uint64_t v14 = *(int *)(v11 + 24);
      int v15 = *v13;
      if ((int)v14 >= *v13)
      {
        if (v15 == *(_DWORD *)(v11 + 28))
        {
LABEL_20:
          _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v11 + 16), v15 + 1);
          int v13 = *(int **)(v11 + 32);
          int v15 = *v13;
        }
        int *v13 = v15 + 1;
        char v17 = *v12;
        if (!*v12) {
          operator new();
        }
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
        Aligned->__r_.__value_.__r.__words[0] = 0;
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
        uint64_t v18 = *(void *)(v11 + 32);
        uint64_t v19 = *(int *)(v11 + 24);
        *(_DWORD *)(v11 + 24) = v19 + 1;
        *(void *)(v18 + 8 * v19 + 8) = Aligned;
        goto LABEL_24;
      }
      *(_DWORD *)(v11 + 24) = v14 + 1;
      Aligned = *(std::string **)&v13[2 * v14 + 2];
LABEL_24:
      uint64_t result = (uint64_t)std::string::operator=(Aligned, (const std::string *)(*a2 + v7));
      ++v8;
      v7 += 24;
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3)) {
        return result;
      }
    }
    int v15 = *(_DWORD *)(v11 + 28);
    goto LABEL_20;
  }
  return result;
}

void sub_2242FE628(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

void CoreML::TreeEnsembleClassifier::setOutputClassList(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v4 + 44) != 402)
  {
    CoreML::Specification::Model::clear_Type(*(void *)(a1 + 8));
    *(_DWORD *)(v4 + 44) = 402;
    operator new();
  }
  uint64_t v5 = *(void *)(v4 + 32);
  if (*(_DWORD *)(v5 + 44) != 101)
  {
    CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(v5);
    *(_DWORD *)(v5 + 44) = 101;
    operator new();
  }
  *(_DWORD *)(*(void *)(v5 + 32) + 16) = 0;
  if (a2[1] != *a2)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v7 + 44) != 402)
      {
        CoreML::Specification::Model::clear_Type(*(void *)(a1 + 8));
        *(_DWORD *)(v7 + 44) = 402;
        operator new();
      }
      uint64_t v8 = *(void *)(v7 + 32);
      if (*(_DWORD *)(v8 + 44) != 101)
      {
        CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(v8);
        *(_DWORD *)(v8 + 44) = 101;
        operator new();
      }
      uint64_t v9 = *(void *)(v8 + 32);
      uint64_t v10 = *a2;
      uint64_t v11 = *(void *)(*a2 + 8 * v6);
      int v12 = *(_DWORD *)(v9 + 16);
      if (v12 == *(_DWORD *)(v9 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v9 + 16), v12 + 1);
        int v12 = *(_DWORD *)(v9 + 16);
        uint64_t v10 = *a2;
      }
      uint64_t v13 = *(void *)(v9 + 24);
      *(_DWORD *)(v9 + 16) = v12 + 1;
      *(void *)(v13 + 8 * v12 + 8) = v11;
      ++v6;
    }
    while (v6 < (a2[1] - v10) >> 3);
  }
}

void sub_2242FE83C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::TreeEnsembleClassifier::setPostEvaluationTransform(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 56) + 24) = a2;
  return result;
}

CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::TypeHandler>(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  uint64_t v2 = (int *)*((void *)this + 2);
  if (!v2)
  {
    int v4 = *((_DWORD *)this + 3);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this, v4 + 1);
    uint64_t v2 = (int *)*((void *)this + 2);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *((int *)this + 2);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  unint64_t v6 = *(_tc_google::protobuf::Arena **)this;
  if (!*(void *)this) {
    operator new();
  }
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::TreeEnsembleParameters_TreeNode_EvaluationInfo(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>);
  uint64_t v7 = *((void *)this + 2);
  uint64_t v8 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2242FE99C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::TreeEnsembleParameters_TreeNode *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode>::TypeHandler>(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  uint64_t v2 = (int *)*((void *)this + 2);
  if (!v2)
  {
    int v4 = *((_DWORD *)this + 3);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this, v4 + 1);
    uint64_t v2 = (int *)*((void *)this + 2);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *((int *)this + 2);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::TreeEnsembleParameters_TreeNode **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  unint64_t v6 = *(_tc_google::protobuf::Arena **)this;
  if (!*(void *)this) {
    operator new();
  }
  CoreML::Specification::TreeEnsembleParameters_TreeNode::TreeEnsembleParameters_TreeNode(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::TreeEnsembleParameters_TreeNode>);
  uint64_t v7 = *((void *)this + 2);
  uint64_t v8 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2242FEAE8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40FA1F30E5);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::TreeEnsembleParameters_TreeNode>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

_OWORD *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__emplace_hint_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,int>>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v6 = (void **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__find_equal<std::pair<unsigned long,unsigned long>>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *turi::neural_net::external_float_array::external_float_array(void *this, const float *a2, uint64_t a3, const unint64_t *a4, uint64_t a5)
{
  *this = &unk_26D777DE8;
  this[1] = a2;
  this[2] = a3;
  this[3] = a4;
  this[4] = a5;
  if (a5)
  {
    uint64_t v5 = 8 * a5;
    uint64_t v6 = 8 * a5;
    uint64_t v7 = a4;
    do
    {
      if (!*v7)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        memset(v14, 0, sizeof(v14));
        turi::TuriException::TuriException(exception, 6, v14);
      }
      ++v7;
      v6 -= 8;
    }
    while (v6);
    unsigned int v8 = 1;
    do
    {
      uint64_t v9 = *a4++;
      v8 *= v9;
      v5 -= 8;
    }
    while (v5);
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v10 = 1;
  }
  if (v10 != a3)
  {
    int v12 = __cxa_allocate_exception(0x40uLL);
    memset(v13, 0, sizeof(v13));
    turi::TuriException::TuriException(v12, 6, v13);
  }
  return this;
}

void sub_2242FEF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v21) {
    __cxa_free_exception(v20);
  }
  _Unwind_Resume(exception_object);
}

void *turi::neural_net::float_buffer::float_buffer(void *a1, const void *a2, uint64_t a3)
{
  *a1 = &unk_26D777E28;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)a3;
  a1[3] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  int v4 = (uint64_t *)a1[1];
  uint64_t v5 = (uint64_t *)a1[2];
  if (v4 == v5)
  {
    unint64_t v8 = 1;
  }
  else
  {
    unsigned int v6 = 1;
    do
    {
      uint64_t v7 = *v4++;
      v6 *= v7;
    }
    while (v4 != v5);
    unint64_t v8 = v6;
  }
  a1[5] = 0;
  a1[4] = v8;
  a1[6] = 0;
  a1[7] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(a1 + 5, a2, (uint64_t)a2 + 4 * v8, v8);
  if (!a1[4])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v11, 0, sizeof(v11));
    turi::TuriException::TuriException(exception, 5, v11);
  }
  return a1;
}

void sub_2242FF07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v18) {
    __cxa_free_exception(v17);
  }
  uint64_t v20 = *v16;
  if (*v16)
  {
    *(void *)(v15 + 48) = v20;
    operator delete(v20);
  }
  char v21 = *a9;
  if (*a9)
  {
    *(void *)(v15 + 16) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

__n128 turi::neural_net::float_buffer::float_buffer(void *a1, __n128 *a2, uint64_t a3)
{
  *a1 = &unk_26D777E28;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)a3;
  a1[3] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v3 = (uint64_t *)a1[1];
  int v4 = (uint64_t *)a1[2];
  if (v3 == v4)
  {
    uint64_t v7 = 1;
  }
  else
  {
    unsigned int v5 = 1;
    do
    {
      uint64_t v6 = *v3++;
      v5 *= v6;
    }
    while (v3 != v4);
    uint64_t v7 = v5;
  }
  a1[5] = 0;
  a1[4] = v7;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *a2;
  *(__n128 *)(a1 + 5) = *a2;
  a1[7] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  if (a1[4] != (uint64_t)(a1[6] - a1[5]) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v10, 0, sizeof(v10));
    turi::TuriException::TuriException(exception, 5, v10);
  }
  return result;
}

void sub_2242FF208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v18) {
    __cxa_free_exception(v17);
  }
  uint64_t v20 = *a9;
  if (*a9)
  {
    *(void *)(a11 + 48) = v20;
    operator delete(v20);
  }
  char v21 = *a10;
  if (*a10)
  {
    *(void *)(a11 + 16) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::neural_net::shared_float_array::shared_float_array(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  *(void *)a1 = &unk_26D752D58;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 4CoreML::Specification::GLMClassifier::New(this, 0) = a5;
  if (a5)
  {
    uint64_t v6 = 8 * a5;
    unsigned int v7 = 1;
    do
    {
      uint64_t v8 = *a4++;
      v7 *= v8;
      v6 -= 8;
    }
    while (v6);
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = 1;
  }
  *(void *)(a1 + 48) = v9;
  if (v9 + a3 > (unint64_t)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v20, 0, sizeof(v20));
    turi::TuriException::TuriException(exception, 6, v20);
  }
  unint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  unint64_t v11 = *(void *)(a1 + 32);
  if (v10 > v11)
  {
    int v16 = __cxa_allocate_exception(0x40uLL);
    memset(v19, 0, sizeof(v19));
    turi::TuriException::TuriException(v16, 6, v19);
  }
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  if (v11 + 8 * v12 > v13 + 8 * (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)))
  {
    char v17 = __cxa_allocate_exception(0x40uLL);
    memset(v18, 0, sizeof(v18));
    turi::TuriException::TuriException(v17, 6, v18);
  }
  return a1;
}

void sub_2242FF4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v29) {
    __cxa_free_exception(v28);
  }
  uint64_t v31 = *(std::__shared_weak_count **)(v27 + 16);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::shared_float_array::default_value(void *a1@<X8>)
{
  {
    operator new();
  }
  uint64_t v3 = *(void *)(turi::neural_net::shared_float_array::default_value(void)::singleton + 8);
  *a1 = *(void *)turi::neural_net::shared_float_array::default_value(void)::singleton;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2242FF600(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

void *turi::neural_net::deferred_float_array::deferred_float_array(void *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  *__n128 result = &unk_26D777E68;
  result[1] = v3;
  *a2 = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  *((_OWORD *)result + 1) = *(_OWORD *)a3;
  result[4] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  int v4 = (uint64_t *)result[2];
  unsigned int v5 = (uint64_t *)result[3];
  if (v4 == v5)
  {
    uint64_t v8 = 1;
  }
  else
  {
    unsigned int v6 = 1;
    do
    {
      uint64_t v7 = *v4++;
      v6 *= v7;
    }
    while (v4 != v5);
    uint64_t v8 = v6;
  }
  result[5] = v8;
  return result;
}

uint64_t turi::neural_net::deferred_float_array::data(std::__assoc_sub_state **this)
{
  std::__assoc_state<turi::neural_net::shared_float_array>::copy(this[1]);
  uint64_t v3 = v2;
  int v4 = this[5];
  if (v4 != (std::__assoc_sub_state *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v16, 0, sizeof(v16));
    turi::TuriException::TuriException(exception, 5, v16);
  }
  uint64_t v5 = (char *)this[3] - (char *)this[2];
  if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3) != v5 >> 3)
  {
    uint64_t v12 = __cxa_allocate_exception(0x40uLL);
    memset(v15, 0, sizeof(v15));
    turi::TuriException::TuriException(v12, 6, v15);
  }
  uint64_t v7 = this[2];
  unsigned int v6 = this[3];
  uint64_t v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
  if (memcmp(v7, v8, (char *)v6 - (char *)v7))
  {
    uint64_t v13 = __cxa_allocate_exception(0x40uLL);
    memset(v14, 0, sizeof(v14));
    turi::TuriException::TuriException(v13, 6, v14);
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 16);
  return v9(v3);
}

void sub_2242FF8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v28) {
    __cxa_free_exception(v27);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::deferred_float_array::~deferred_float_array(turi::neural_net::deferred_float_array *this)
{
  *(void *)this = &unk_26D777E68;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (atomic_ullong *)*((void *)this + 1);
  if (v3)
  {
    if (!atomic_fetch_add(v3 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      (*(void (**)(atomic_ullong *))(*v3 + 16))(v3);
    }
  }
}

{
  void *v2;
  atomic_ullong *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D777E68;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (atomic_ullong *)*((void *)this + 1);
  if (v3 && !atomic_fetch_add(v3 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    (*(void (**)(atomic_ullong *))(*v3 + 16))(v3);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::neural_net::deferred_float_array::dim(turi::neural_net::deferred_float_array *this)
{
  return (uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3;
}

void turi::neural_net::external_float_array::~external_float_array(turi::neural_net::external_float_array *this)
{
}

uint64_t turi::neural_net::external_float_array::shape(turi::neural_net::external_float_array *this)
{
  return *((void *)this + 3);
}

void turi::neural_net::float_buffer::~float_buffer(turi::neural_net::float_buffer *this)
{
  *(void *)this = &unk_26D777E28;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D777E28;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::neural_net::float_buffer::dim(turi::neural_net::float_buffer *this)
{
  return (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3;
}

void std::__assoc_state<turi::neural_net::shared_float_array>::copy(std::__assoc_sub_state *a1)
{
  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_2242FFBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(a1);
}

void CoreML::validateInt64Parameter(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, CoreML::Result *a4@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  if (a3 && v6 <= 0)
  {
    std::to_string(&v86, v6);
    uint64_t v7 = std::string::insert(&v86, 0, "Default Value (");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = std::string::append(&v87, ") for '");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    int v11 = *(char *)(a1 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (const std::string::value_type *)a1;
    }
    else {
      uint64_t v12 = *(const std::string::value_type **)a1;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(a1 + 8);
    }
    uint64_t v14 = std::string::append(&v88, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    int v16 = std::string::append(&v89, "' expected to be a positive value.");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v91 = v16->__r_.__value_.__r.__words[2];
    long long v90 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v87.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
LABEL_17:
    CoreML::Result::Result(a4, 15);
    if (SHIBYTE(v91) < 0) {
      operator delete((void *)v90);
    }
    return;
  }
  int v18 = *(_DWORD *)(a2 + 36);
  if (v18 == 10)
  {
    uint64_t v23 = *(void *)(a2 + 24);
    uint64_t v24 = *(void *)(v23 + 16);
    if (v24 <= 0 && a3 != 0)
    {
      std::to_string(&v86, v24);
      long long v40 = std::string::insert(&v86, 0, "Non-positive min value (");
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      int v42 = std::string::append(&v87, ") in Allowed Value Range for '");
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      int v44 = *(char *)(a1 + 23);
      if (v44 >= 0) {
        int v45 = (const std::string::value_type *)a1;
      }
      else {
        int v45 = *(const std::string::value_type **)a1;
      }
      if (v44 >= 0) {
        std::string::size_type v46 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        std::string::size_type v46 = *(void *)(a1 + 8);
      }
      uint64_t v47 = std::string::append(&v88, v45, v46);
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      long long v49 = std::string::append(&v89, "' is not allowed.");
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      std::string::size_type v91 = v49->__r_.__value_.__r.__words[2];
      long long v90 = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      goto LABEL_17;
    }
    uint64_t v26 = *(void *)(v23 + 24);
    if (v26 <= 0 && a3 != 0)
    {
      std::to_string(&v86, v26);
      long long v64 = std::string::insert(&v86, 0, "Non-positive max value (");
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      long long v66 = std::string::append(&v87, ") in Allowed Value Range for '");
      long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      int v68 = *(char *)(a1 + 23);
      if (v68 >= 0) {
        long long v69 = (const std::string::value_type *)a1;
      }
      else {
        long long v69 = *(const std::string::value_type **)a1;
      }
      if (v68 >= 0) {
        std::string::size_type v70 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        std::string::size_type v70 = *(void *)(a1 + 8);
      }
      std::string::size_type v71 = std::string::append(&v88, v69, v70);
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      long long v73 = std::string::append(&v89, "' is not allowed.");
      long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      std::string::size_type v91 = v73->__r_.__value_.__r.__words[2];
      long long v90 = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      goto LABEL_17;
    }
    if (v6 < v24 || v6 > v26)
    {
      std::to_string(&v86, v6);
      int v29 = std::string::insert(&v86, 0, "Specified Default Value (");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      uint64_t v31 = std::string::append(&v87, ") out of Allowed Value Range for '");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      int v33 = *(char *)(a1 + 23);
      if (v33 >= 0) {
        char v34 = (const std::string::value_type *)a1;
      }
      else {
        char v34 = *(const std::string::value_type **)a1;
      }
      if (v33 >= 0) {
        std::string::size_type v35 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        std::string::size_type v35 = *(void *)(a1 + 8);
      }
      uint64_t v36 = std::string::append(&v88, v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      uint64_t v38 = std::string::append(&v89, "'");
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      std::string::size_type v91 = v38->__r_.__value_.__r.__words[2];
      long long v90 = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      goto LABEL_17;
    }
  }
  else if (v18 == 11)
  {
    uint64_t v19 = *(void *)(a2 + 24);
    uint64_t v20 = *(void *)(v19 + 24);
    if (v20) {
      char v21 = (uint64_t *)(v20 + 8);
    }
    else {
      char v21 = 0;
    }
    if (v20) {
      uint64_t v22 = v20 + 8 + 8 * *(int *)(v19 + 16);
    }
    else {
      uint64_t v22 = 0;
    }
    while (v21 != (uint64_t *)v22)
    {
      uint64_t v51 = *v21;
      if (*v21 == v6) {
        goto LABEL_80;
      }
      if (v51 <= 0 && a3 != 0)
      {
        std::to_string(&v86, v51);
        long long v75 = std::string::insert(&v86, 0, "Non-positive value (");
        long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v87.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        std::string::size_type v77 = std::string::append(&v87, ") in Allowed Values Set for '");
        long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        int v79 = *(char *)(a1 + 23);
        if (v79 >= 0) {
          long long v80 = (const std::string::value_type *)a1;
        }
        else {
          long long v80 = *(const std::string::value_type **)a1;
        }
        if (v79 >= 0) {
          std::string::size_type v81 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          std::string::size_type v81 = *(void *)(a1 + 8);
        }
        unsigned int v82 = std::string::append(&v88, v80, v81);
        long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v83;
        v82->__r_.__value_.__l.__size_ = 0;
        v82->__r_.__value_.__r.__words[2] = 0;
        v82->__r_.__value_.__r.__words[0] = 0;
        size_t v84 = std::string::append(&v89, "' is not allowed.");
        long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
        std::string::size_type v91 = v84->__r_.__value_.__r.__words[2];
        long long v90 = v85;
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v86.__r_.__value_.__l.__data_);
        }
        goto LABEL_17;
      }
      ++v21;
    }
    std::to_string(&v86, v6);
    uint64_t v53 = std::string::insert(&v86, 0, "Specified Default Value (");
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    uint64_t v55 = std::string::append(&v87, ") not found in Allowed Values Set for '");
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    int v57 = *(char *)(a1 + 23);
    if (v57 >= 0) {
      long long v58 = (const std::string::value_type *)a1;
    }
    else {
      long long v58 = *(const std::string::value_type **)a1;
    }
    if (v57 >= 0) {
      std::string::size_type v59 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v59 = *(void *)(a1 + 8);
    }
    long long v60 = std::string::append(&v88, v58, v59);
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    long long v62 = std::string::append(&v89, "'");
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    std::string::size_type v91 = v62->__r_.__value_.__r.__words[2];
    long long v90 = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v87.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    goto LABEL_17;
  }
LABEL_80:
  CoreML::Result::Result(a4);
}

void sub_224300384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateDoubleParameter(uint64_t a1@<X0>, uint64_t a2@<X1>, CoreML::Result *a3@<X8>)
{
  if (*(_DWORD *)(a2 + 36) == 10
    && ((double v5 = *(double *)(a2 + 16), v6 = *(void *)(a2 + 24), v5 < *(double *)(v6 + 16)) || v5 > *(double *)(v6 + 24)))
  {
    std::to_string(&v18, v5);
    uint64_t v7 = std::string::insert(&v18, 0, "Specified Default Value (");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = std::string::append(&v19, ") out of Allowed Value Range for '");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    int v11 = *(char *)(a1 + 23);
    if (v11 >= 0) {
      uint64_t v12 = (const std::string::value_type *)a1;
    }
    else {
      uint64_t v12 = *(const std::string::value_type **)a1;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(a1 + 8);
    }
    uint64_t v14 = std::string::append(&v20, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    int v16 = std::string::append(&v21, "'");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v16->__r_.__value_.__r.__words[2];
    long long v22 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result(a3, 15);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)v22);
    }
  }
  else
  {
    CoreML::Result::Result(a3);
  }
}

void sub_2243005F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkShaper::shapeConvolutionLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  uint64_t v114 = *(void *)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v114, (uint64_t)&std::piecewise_construct, (long long **)&v114)+ 7);
  uint64_t v114 = *(void *)(*((void *)a2 + 7) + 8);
  double v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v114, (uint64_t)&std::piecewise_construct, (long long **)&v114)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeConstraint::updateSequenceRange(v5, v6);
  uint64_t v7 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeConstraint::updateBatchRange(v5, v7);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v8);
  uint64_t v9 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v9);
  if (*((_DWORD *)a2 + 35) == 100) {
    int v11 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    int v11 = CoreML::Specification::ConvolutionLayerParams::default_instance(v10);
  }
  if (*((unsigned char *)v11 + 152))
  {
    unint64_t v12 = v11[17];
  }
  else
  {
    unint64_t v13 = v11[18];
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    unint64_t v12 = v13 * v11[17];
  }
  CoreML::ShapeConstraint::setChannel(v4, (int)v12);
  if (*((_DWORD *)v11 + 4))
  {
    uint64_t v14 = v11[3];
    int v15 = *(_DWORD *)(v14 + 8);
    int v16 = *(_DWORD *)(v14 + 16);
  }
  else
  {
    int v16 = 3;
    int v15 = 3;
  }
  if (*((_DWORD *)v11 + 10))
  {
    uint64_t v17 = v11[6];
    int v18 = *(_DWORD *)(v17 + 8);
    int v19 = *(_DWORD *)(v17 + 16);
  }
  else
  {
    int v19 = 1;
    int v18 = 1;
  }
  if (*((_DWORD *)v11 + 16))
  {
    uint64_t v20 = v11[9];
    int v21 = *(_DWORD *)(v20 + 8);
    int v22 = *(_DWORD *)(v20 + 16);
  }
  else
  {
    int v22 = 1;
    int v21 = 1;
  }
  CoreML::ShapeConstraint::setChannel(v5, v11[16]);
  if (*((unsigned char *)v11 + 152) && *((_DWORD *)v11 + 22) == 2)
  {
    CoreML::ShapeConstraint::setHeight(v5, *(void *)(v11[12] + 8));
    CoreML::ShapeConstraint::setWidth(v5, *(void *)(v11[12] + 16));
    return result;
  }
  int v24 = *((_DWORD *)v11 + 43);
  switch(v24)
  {
    case 50:
      int v26 = v21 * (v15 - 1);
      int v27 = v22 * (v16 - 1);
      uint64_t v28 = *(uint64_t **)(v11[20] + 16);
      if (!v28) {
        uint64_t v28 = &CoreML::Specification::_BorderAmounts_default_instance_;
      }
      if (*((_DWORD *)v28 + 6))
      {
        uint64_t v29 = v28[4];
        uint64_t v31 = *(void *)(v29 + 8);
        uint64_t v30 = *(void *)(v29 + 16);
        unsigned int v32 = *(_DWORD *)(v31 + 16);
        unsigned int v33 = *(_DWORD *)(v31 + 24);
        unsigned int v104 = *(_DWORD *)(v30 + 24);
        unsigned int v105 = *(_DWORD *)(v30 + 16);
      }
      else
      {
        unsigned int v104 = 0;
        unsigned int v105 = 0;
        unsigned int v33 = 0;
        unsigned int v32 = 0;
      }
      int v36 = v26 + 1;
      signed int v106 = v27 + 1;
      if (*((unsigned char *)v11 + 152))
      {
        long long v37 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
        int v38 = (int)(v32 + v33 + ~v26 + CoreML::ShapeRange::minimumValue(v37)) / v18;
        long long v39 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
        uint64_t v107 = CoreML::ShapeRange::maximum(v39);
        uint64_t v108 = v40;
        uint64_t v109 = CoreML::RangeValue::operator+(&v107, v33);
        uint64_t v110 = v41;
        *(void *)&v111[0] = CoreML::RangeValue::operator+(&v109, v32);
        *((void *)&v111[0] + 1) = v42;
        uint64_t v112 = CoreML::RangeValue::operator-(v111);
        uint64_t v113 = v43;
        uint64_t v114 = CoreML::RangeValue::operator/((CoreML::RangeValue *)&v112, v18);
        uint64_t v115 = v44;
        BOOL v116 = CoreML::RangeValue::operator+(&v114, 1);
        uint64_t v117 = v45;
        if ((v38 & 0x80000000) == 0) {
          CoreML::ShapeConstraint::lowerBoundHeight(v4, (v38 + 1));
        }
        CoreML::ShapeConstraint::upperBoundHeight(v4, (const CoreML::RangeValue *)&v116);
        uint64_t v46 = CoreML::ShapeConstraint::heightRange(v4);
        CoreML::ShapeRange::operator-(v46, 1u, (uint64_t)&v107);
        CoreML::ShapeRange::operator*((uint64_t)&v107, v18, (uint64_t)&v109);
        CoreML::ShapeRange::operator+((uint64_t)&v109, v26 + 1, (uint64_t)v111);
        CoreML::ShapeRange::operator-((uint64_t)v111, v32, (uint64_t)&v112);
        CoreML::ShapeRange::operator-((uint64_t)&v112, v33, (uint64_t)&v114);
        CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)&v114);
        uint64_t v47 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
        int v48 = (int)(v104 + v105 + ~v27 + CoreML::ShapeRange::minimumValue(v47)) / v19;
        long long v49 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
        uint64_t v107 = CoreML::ShapeRange::maximum(v49);
        uint64_t v108 = v50;
        uint64_t v109 = CoreML::RangeValue::operator+(&v107, v105);
        uint64_t v110 = v51;
        *(void *)&v111[0] = CoreML::RangeValue::operator+(&v109, v104);
        *((void *)&v111[0] + 1) = v52;
        uint64_t v112 = CoreML::RangeValue::operator-(v111);
        uint64_t v113 = v53;
        uint64_t v114 = CoreML::RangeValue::operator/((CoreML::RangeValue *)&v112, v19);
        uint64_t v115 = v54;
        BOOL v116 = CoreML::RangeValue::operator+(&v114, 1);
        uint64_t v117 = v55;
        if ((v48 & 0x80000000) == 0) {
          CoreML::ShapeConstraint::lowerBoundWidth(v4, (v48 + 1));
        }
        CoreML::ShapeConstraint::upperBoundWidth(v4, (const CoreML::RangeValue *)&v116);
        uint64_t v56 = CoreML::ShapeConstraint::widthRange(v4);
        CoreML::ShapeRange::operator-(v56, 1u, (uint64_t)&v107);
        CoreML::ShapeRange::operator*((uint64_t)&v107, v19, (uint64_t)&v109);
        CoreML::ShapeRange::operator+((uint64_t)&v109, v106, (uint64_t)v111);
        CoreML::ShapeRange::operator-((uint64_t)v111, v104, (uint64_t)&v112);
        CoreML::ShapeRange::operator-((uint64_t)&v112, v105, (uint64_t)&v114);
      }
      else
      {
        signed int v69 = v32 + v33;
        int v70 = v36 - (v32 + v33);
        if (v70 >= 1)
        {
          std::string::size_type v71 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
          if (CoreML::ShapeRange::minimumValue(v71))
          {
            long long v72 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
            uint64_t v73 = CoreML::ShapeRange::minimumValue(v72) - 1;
          }
          else
          {
            uint64_t v73 = 0;
          }
          CoreML::ShapeConstraint::lowerBoundHeight(v4, v73 * v18 + v70);
          long long v74 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
          uint64_t v109 = CoreML::ShapeRange::maximum(v74);
          uint64_t v110 = v75;
          *(void *)&v111[0] = CoreML::RangeValue::operator-(&v109);
          *((void *)&v111[0] + 1) = v76;
          uint64_t v112 = CoreML::RangeValue::operator*(v111);
          uint64_t v113 = v77;
          uint64_t v114 = CoreML::RangeValue::operator+(&v112);
          uint64_t v115 = v78;
          int v79 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
          uint64_t v112 = CoreML::ShapeRange::maximum(v79);
          uint64_t v113 = v80;
          if ((CoreML::RangeValue::isUnbound((CoreML::RangeValue *)&v112) & 1) == 0)
          {
            std::string::size_type v81 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
            *(void *)&v111[0] = CoreML::ShapeRange::maximum(v81);
            *((void *)&v111[0] + 1) = v82;
            uint64_t v83 = CoreML::RangeValue::value((CoreML::RangeValue *)v111);
            int v84 = (v69 - v36) & 1;
            if (v69 < v36) {
              int v84 = -v84;
            }
            if (v83 != -v84)
            {
              uint64_t v114 = CoreML::RangeValue::operator+(&v114, 1);
              uint64_t v115 = v85;
            }
          }
          CoreML::ShapeConstraint::upperBoundHeight(v4, (const CoreML::RangeValue *)&v114);
        }
        uint64_t v86 = CoreML::ShapeConstraint::heightRange(v4);
        CoreML::ShapeRange::operator+(v86, v69 - v36, (uint64_t)v111);
        CoreML::ShapeRange::operator/(v111, v18, (uint64_t)&v112);
        CoreML::ShapeRange::operator+((uint64_t)&v112, 1u, (uint64_t)&v114);
        CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)&v114);
        signed int v87 = v104 + v105;
        if ((int)(v106 - (v104 + v105)) >= 1)
        {
          std::string v88 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
          if (CoreML::ShapeRange::minimumValue(v88))
          {
            std::string v89 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
            uint64_t v90 = CoreML::ShapeRange::minimumValue(v89) - 1;
          }
          else
          {
            uint64_t v90 = 0;
          }
          CoreML::ShapeConstraint::lowerBoundWidth(v4, v90 * v19 + v106 - (v104 + v105));
          std::string::size_type v91 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
          uint64_t v109 = CoreML::ShapeRange::maximum(v91);
          uint64_t v110 = v92;
          *(void *)&v111[0] = CoreML::RangeValue::operator-(&v109);
          *((void *)&v111[0] + 1) = v93;
          uint64_t v112 = CoreML::RangeValue::operator*(v111);
          uint64_t v113 = v94;
          uint64_t v114 = CoreML::RangeValue::operator+(&v112);
          uint64_t v115 = v95;
          size_t v96 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
          uint64_t v112 = CoreML::ShapeRange::maximum(v96);
          uint64_t v113 = v97;
          if ((CoreML::RangeValue::isUnbound((CoreML::RangeValue *)&v112) & 1) == 0)
          {
            char v98 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
            *(void *)&v111[0] = CoreML::ShapeRange::maximum(v98);
            *((void *)&v111[0] + 1) = v99;
            uint64_t v100 = CoreML::RangeValue::value((CoreML::RangeValue *)v111);
            int v101 = (v87 - v106) & 1;
            if (v87 < v106) {
              int v101 = -v101;
            }
            if (v100 != -v101)
            {
              uint64_t v114 = CoreML::RangeValue::operator+(&v114, 1);
              uint64_t v115 = v102;
            }
          }
          CoreML::ShapeConstraint::upperBoundWidth(v4, (const CoreML::RangeValue *)&v114);
        }
        uint64_t v103 = CoreML::ShapeConstraint::widthRange(v4);
        CoreML::ShapeRange::operator+(v103, v87 - v106, (uint64_t)v111);
        CoreML::ShapeRange::operator/(v111, v19, (uint64_t)&v112);
        CoreML::ShapeRange::operator+((uint64_t)&v112, 1u, (uint64_t)&v114);
      }
      return CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)&v114);
    case 51:
      if (!*((unsigned char *)v11 + 152))
      {
        uint64_t v57 = CoreML::ShapeConstraint::heightRange(v4);
        CoreML::ShapeRange::operator-(v57, 1u, (uint64_t)v111);
        CoreML::ShapeRange::operator/((uint64_t)v111, v18, (uint64_t)&v112);
        CoreML::ShapeRange::operator+((uint64_t)&v112, 1u, (uint64_t)&v114);
        CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)&v114);
        long long v58 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
        uint64_t v59 = CoreML::ShapeRange::minimumValue(v58);
        CoreML::ShapeConstraint::lowerBoundHeight(v4, v59);
        long long v60 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
        uint64_t v112 = CoreML::ShapeRange::maximum(v60);
        uint64_t v113 = v61;
        uint64_t v114 = CoreML::RangeValue::operator*(&v112);
        uint64_t v115 = v62;
        CoreML::ShapeConstraint::upperBoundHeight(v4, (const CoreML::RangeValue *)&v114);
        uint64_t v63 = CoreML::ShapeConstraint::widthRange(v4);
        CoreML::ShapeRange::operator-(v63, 1u, (uint64_t)v111);
        CoreML::ShapeRange::operator/((uint64_t)v111, v19, (uint64_t)&v112);
        CoreML::ShapeRange::operator+((uint64_t)&v112, 1u, (uint64_t)&v114);
        CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)&v114);
        long long v64 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
        uint64_t v65 = CoreML::ShapeRange::minimumValue(v64);
        CoreML::ShapeConstraint::lowerBoundWidth(v4, v65);
        long long v66 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
        uint64_t v112 = CoreML::ShapeRange::maximum(v66);
        uint64_t v113 = v67;
        uint64_t v114 = CoreML::RangeValue::operator*(&v112);
        uint64_t v115 = v68;
        return CoreML::ShapeConstraint::upperBoundWidth(v4, (const CoreML::RangeValue *)&v114);
      }
      uint64_t v34 = CoreML::ShapeConstraint::heightRange(v4);
      CoreML::ShapeRange::operator*(v34, v18, (uint64_t)&v114);
      CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)&v114);
      uint64_t v35 = CoreML::ShapeConstraint::widthRange(v4);
      CoreML::ShapeRange::operator*(v35, v19, (uint64_t)&v114);
      return CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)&v114);
    case 0:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Convolution padding type not set");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_224300ED8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double CoreML::NeuralNetworkShaper::shapePoolingLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v65[0] = *(long long **)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v65[0], (uint64_t)&std::piecewise_construct, v65)+ 7);
  v65[0] = *(long long **)(*((void *)a2 + 7) + 8);
  double v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v65[0], (uint64_t)&std::piecewise_construct, v65)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v5);
  uint64_t v7 = v6;
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeRange::intersect(v7, v8, (uint64_t)v65);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v65);
  uint64_t v9 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  long long v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v9, v10, (uint64_t)v65);
  CoreML::ShapeConstraint::updateBatchRange(v5, (const CoreML::ShapeRange *)v65);
  int v11 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  CoreML::ShapeConstraint::updateChannelRange(v5, v11);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v12);
  unint64_t v13 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v13);
  uint64_t v14 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  double result = CoreML::ShapeConstraint::updateChannelRange(v4, v14);
  if (*((_DWORD *)a2 + 35) == 120) {
    uint64_t v17 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v17 = CoreML::Specification::PoolingLayerParams::default_instance(v15);
  }
  if (*((_DWORD *)v17 + 4))
  {
    uint64_t v18 = v17[3];
    int v19 = *(_DWORD *)(v18 + 8);
    int v20 = *(_DWORD *)(v18 + 16);
  }
  else
  {
    int v20 = 3;
    int v19 = 3;
  }
  if (*((_DWORD *)v17 + 10))
  {
    uint64_t v21 = v17[6];
    int v22 = *(_DWORD *)(v21 + 8);
    int v23 = *(_DWORD *)(v21 + 16);
  }
  else
  {
    int v22 = 1;
    int v23 = 1;
  }
  if (*((unsigned char *)v17 + 65))
  {
    CoreML::ShapeConstraint::setHeight(v5, 1uLL);
    CoreML::ShapeConstraint::setWidth(v5, 1uLL);
    return result;
  }
  int v24 = *((_DWORD *)v17 + 21);
  if (v24 > 30)
  {
    if (v24 != 31)
    {
      if (v24 == 32)
      {
        uint64_t v25 = v17[9];
        if (*(_DWORD *)(v25 + 16))
        {
          uint64_t v26 = *(void *)(v25 + 24);
          int v27 = *(_DWORD *)(v26 + 8);
          int v28 = *(_DWORD *)(v26 + 16);
        }
        else
        {
          int v28 = 0;
          int v27 = 0;
        }
        if (v27 | v28)
        {
          signed int v39 = CoreML::ShapeConstraint::minimumHeight(v4) - v19 + 2 * (v27 + v22) - 2;
          if (v39 < (int)(v27 + CoreML::ShapeConstraint::minimumHeight(v4))) {
            unsigned int v40 = 0;
          }
          else {
            unsigned int v40 = -1;
          }
        }
        else
        {
          unsigned int v40 = 0;
        }
        uint64_t v41 = CoreML::ShapeConstraint::heightRange(v4);
        CoreML::ShapeRange::operator+(v41, 2 * v27 - v19, (uint64_t)v62);
        CoreML::ShapeRange::divideAndRoundUp((CoreML::ShapeRange *)v62, v22, (uint64_t)v63);
        CoreML::ShapeRange::operator+((uint64_t)v63, 1u, (uint64_t)v64);
        CoreML::ShapeRange::operator+((uint64_t)v64, v40, (uint64_t)v65);
        CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v65);
        int v42 = v19 - 2 * v27;
        if (v42 >= 1)
        {
          uint64_t v43 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
          uint64_t v44 = CoreML::ShapeRange::minimumValue(v43);
          CoreML::ShapeConstraint::lowerBoundHeight(v4, v44 + v42 - 1);
        }
        if (v27 | v28)
        {
          signed int v45 = CoreML::ShapeConstraint::minimumWidth(v4) - v20 + 2 * (v28 + v23) - 2;
          if (v45 < (int)(v28 + CoreML::ShapeConstraint::minimumWidth(v4))) {
            unsigned int v46 = 0;
          }
          else {
            unsigned int v46 = -1;
          }
        }
        else
        {
          unsigned int v46 = 0;
        }
        uint64_t v47 = CoreML::ShapeConstraint::widthRange(v4);
        CoreML::ShapeRange::operator+(v47, 2 * v28 - v20, (uint64_t)v62);
        CoreML::ShapeRange::divideAndRoundUp((CoreML::ShapeRange *)v62, v23, (uint64_t)v63);
        CoreML::ShapeRange::operator+((uint64_t)v63, 1u, (uint64_t)v64);
        CoreML::ShapeRange::operator+((uint64_t)v64, v46, (uint64_t)v65);
        double result = CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v65);
        int v48 = v20 - 2 * v28;
        if (v48 >= 1)
        {
          long long v49 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
          uint64_t v50 = CoreML::ShapeRange::minimumValue(v49);
          return CoreML::ShapeConstraint::lowerBoundHeight(v4, v50 + v48 - 1);
        }
      }
      return result;
    }
    uint64_t v35 = CoreML::ShapeConstraint::heightRange(v4);
    CoreML::ShapeRange::operator-(v35, 1u, (uint64_t)v63);
    CoreML::ShapeRange::operator/((uint64_t)v63, v22, (uint64_t)v64);
    CoreML::ShapeRange::operator+((uint64_t)v64, 1u, (uint64_t)v65);
    CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v65);
    uint64_t v36 = CoreML::ShapeConstraint::widthRange(v4);
    CoreML::ShapeRange::operator-(v36, 1u, (uint64_t)v63);
    uint64_t v37 = v23;
LABEL_54:
    CoreML::ShapeRange::operator/((uint64_t)v63, v37, (uint64_t)v64);
    CoreML::ShapeRange::operator+((uint64_t)v64, 1u, (uint64_t)v65);
    return CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v65);
  }
  if (v24 == 30)
  {
    uint64_t v29 = *(uint64_t **)(v17[9] + 16);
    if (!v29) {
      uint64_t v29 = &CoreML::Specification::_BorderAmounts_default_instance_;
    }
    if (*((_DWORD *)v29 + 6))
    {
      uint64_t v30 = v29[4];
      uint64_t v32 = *(void *)(v30 + 8);
      uint64_t v31 = *(void *)(v30 + 16);
      int v61 = *(_DWORD *)(v31 + 16);
      int v33 = *(_DWORD *)(v31 + 24);
      int v34 = *(_DWORD *)(v32 + 24) + *(_DWORD *)(v32 + 16);
    }
    else
    {
      int v61 = 0;
      int v33 = 0;
      int v34 = 0;
    }
    if (v19 - v34 <= 0)
    {
      uint64_t v54 = v22;
    }
    else
    {
      uint64_t v51 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      if (CoreML::ShapeRange::minimumValue(v51))
      {
        uint64_t v52 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
        uint64_t v53 = CoreML::ShapeRange::minimumValue(v52) - 1;
      }
      else
      {
        uint64_t v53 = 0;
      }
      uint64_t v54 = v22;
      CoreML::ShapeConstraint::lowerBoundHeight(v4, v53 * v22 + (v19 - v34));
    }
    uint64_t v55 = CoreML::ShapeConstraint::heightRange(v4);
    CoreML::ShapeRange::operator+(v55, v34 - v19, (uint64_t)v63);
    CoreML::ShapeRange::operator/((uint64_t)v63, v54, (uint64_t)v64);
    CoreML::ShapeRange::operator+((uint64_t)v64, 1u, (uint64_t)v65);
    CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v65);
    if (v20 - (v33 + v61) <= 0)
    {
      uint64_t v59 = v23;
    }
    else
    {
      uint64_t v56 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
      if (CoreML::ShapeRange::minimumValue(v56))
      {
        uint64_t v57 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
        uint64_t v58 = CoreML::ShapeRange::minimumValue(v57) - 1;
      }
      else
      {
        uint64_t v58 = 0;
      }
      uint64_t v59 = v23;
      CoreML::ShapeConstraint::lowerBoundWidth(v4, v58 * v23 + (v20 - (v33 + v61)));
    }
    uint64_t v60 = CoreML::ShapeConstraint::widthRange(v4);
    CoreML::ShapeRange::operator+(v60, v33 + v61 - v20, (uint64_t)v63);
    uint64_t v37 = v59;
    goto LABEL_54;
  }
  if (!v24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Pooling padding type not set");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_224301498(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double CoreML::NeuralNetworkShaper::shapeUnchanged(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  uint64_t v7 = *(const void ***)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (const CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, v7, (uint64_t)&std::piecewise_construct, (long long **)&v7)+ 7);
  uint64_t v7 = *(const void ***)(*((void *)a2 + 7) + 8);
  double v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v7, (uint64_t)&std::piecewise_construct, (long long **)&v7)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  CoreML::ShapeConstraint::copyFrom(v5, v4);
  return CoreML::ShapeConstraint::copyFrom(v4, v5);
}

uint64_t CoreML::NeuralNetworkShaper::shapeInnerProductLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v16[0] = *(long long **)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v16[0], (uint64_t)&std::piecewise_construct, v16)+ 7);
  v16[0] = *(long long **)(*((void *)a2 + 7) + 8);
  double v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v16[0], (uint64_t)&std::piecewise_construct, v16)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v5);
  uint64_t v7 = v6;
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeRange::intersect(v7, v8, (uint64_t)v16);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v16);
  uint64_t v9 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  long long v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v9, v10, (uint64_t)v16);
  CoreML::ShapeConstraint::updateBatchRange(v5, (const CoreML::ShapeRange *)v16);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v11);
  unint64_t v12 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v12);
  if (*((_DWORD *)a2 + 35) == 140) {
    uint64_t v14 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v14 = CoreML::Specification::InnerProductLayerParams::default_instance(v13);
  }
  CoreML::ShapeConstraint::setChannel(v4, v14[4]);
  CoreML::ShapeConstraint::setHeight(v4, 1uLL);
  CoreML::ShapeConstraint::setWidth(v4, 1uLL);
  CoreML::ShapeConstraint::setChannel(v5, v14[5]);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  return CoreML::ShapeConstraint::setWidth(v5, 1uLL);
}

void CoreML::NeuralNetworkShaper::shapeEmbeddingLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v12[0] = *(long long **)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v12[0], (uint64_t)&std::piecewise_construct, v12)+ 7);
  v12[0] = *(long long **)(*((void *)a2 + 7) + 8);
  double v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v12[0], (uint64_t)&std::piecewise_construct, v12)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeConstraint::updateSequenceRange(v5, v6);
  uint64_t v7 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeConstraint::updateBatchRange(v5, v7);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v8);
  uint64_t v9 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v9);
  if (*((_DWORD *)a2 + 35) == 150) {
    int v11 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    int v11 = CoreML::Specification::EmbeddingLayerParams::default_instance(v10);
  }
  CoreML::Specification::EmbeddingLayerParams::EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)v12, (const CoreML::Specification::EmbeddingLayerParams *)v11);
  CoreML::ShapeConstraint::setChannel(v4, 1uLL);
  CoreML::ShapeConstraint::setHeight(v4, 1uLL);
  CoreML::ShapeConstraint::setWidth(v4, 1uLL);
  CoreML::ShapeConstraint::setChannel(v5, (unint64_t)v12[5]);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  CoreML::ShapeConstraint::setWidth(v5, 1uLL);
  CoreML::Specification::EmbeddingLayerParams::~EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)v12);
}

void sub_224301830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CoreML::NeuralNetworkShaper::shapeCropLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v35[0] = *(long long **)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v35[0], (uint64_t)&std::piecewise_construct, v35)+ 7);
  v35[0] = *(long long **)(*((void *)a2 + 7) + 8);
  double v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v35[0], (uint64_t)&std::piecewise_construct, v35)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v5);
  uint64_t v7 = v6;
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeRange::intersect(v7, v8, (uint64_t)v35);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v35);
  uint64_t v9 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  long long v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v9, v10, (uint64_t)v35);
  CoreML::ShapeConstraint::updateBatchRange(v5, (const CoreML::ShapeRange *)v35);
  int v11 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  unint64_t v12 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  CoreML::ShapeRange::intersect(v11, v12, (uint64_t)v35);
  CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v35);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v13);
  uint64_t v14 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v14);
  int v15 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  CoreML::ShapeConstraint::updateChannelRange(v4, v15);
  if (*((_DWORD *)a2 + 35) == 190) {
    uint64_t v17 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v17 = CoreML::Specification::CropLayerParams::default_instance(v16);
  }
  CoreML::Specification::CropLayerParams::CropLayerParams((CoreML::Specification::CropLayerParams *)v35, (const CoreML::Specification::CropLayerParams *)v17);
  if (*((_DWORD *)a2 + 6) == 1)
  {
    uint64_t v18 = v36;
    if (!v36) {
      uint64_t v18 = &CoreML::Specification::_BorderAmounts_default_instance_;
    }
    if (*((_DWORD *)v18 + 6))
    {
      uint64_t v19 = v18[4];
      uint64_t v21 = *(void *)(v19 + 8);
      uint64_t v20 = *(void *)(v19 + 16);
      unsigned int v22 = *(_DWORD *)(v21 + 16);
      unsigned int v23 = *(_DWORD *)(v21 + 24);
      unsigned int v24 = *(_DWORD *)(v20 + 16);
      unsigned int v25 = *(_DWORD *)(v20 + 24);
    }
    else
    {
      unsigned int v24 = 0;
      unsigned int v25 = 0;
      unsigned int v22 = 0;
      unsigned int v23 = 0;
    }
    uint64_t v31 = CoreML::ShapeConstraint::heightRange(v4);
    CoreML::ShapeRange::operator-(v31, v22, (uint64_t)v33);
    CoreML::ShapeRange::operator-((uint64_t)v33, v23, (uint64_t)v34);
    CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v34);
    uint64_t v32 = CoreML::ShapeConstraint::widthRange(v4);
    CoreML::ShapeRange::operator-(v32, v25, (uint64_t)v33);
    CoreML::ShapeRange::operator-((uint64_t)v33, v24, (uint64_t)v34);
    CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v34);
    CoreML::ShapeConstraint::lowerBoundHeight(v4, (int)(v22 + v23 + 1));
    CoreML::ShapeConstraint::lowerBoundWidth(v4, (int)(v24 + v25 + 1));
  }
  else
  {
    uint64_t v26 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
    CoreML::ShapeConstraint::updateChannelRange(v5, v26);
    v34[0] = *(long long **)(*((void *)a2 + 4) + 16);
    int v27 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v34[0], (uint64_t)&std::piecewise_construct, v34);
    int v28 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange((CoreML::ShapeConstraint *)(v27 + 7));
    CoreML::ShapeConstraint::updateHeightRange(v5, v28);
    v34[0] = *(long long **)(*((void *)a2 + 4) + 16);
    uint64_t v29 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v34[0], (uint64_t)&std::piecewise_construct, v34);
    uint64_t v30 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange((CoreML::ShapeConstraint *)(v29 + 7));
    CoreML::ShapeConstraint::updateWidthRange(v5, v30);
  }
  CoreML::Specification::CropLayerParams::~CropLayerParams((CoreML::Specification::CropLayerParams *)v35);
}

void sub_224301B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  CoreML::Specification::CropLayerParams::~CropLayerParams((CoreML::Specification::CropLayerParams *)va);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::shapePaddingLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v32[0] = *(long long **)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v32[0], (uint64_t)&std::piecewise_construct, v32)+ 7);
  v32[0] = *(long long **)(*((void *)a2 + 7) + 8);
  double v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v32[0], (uint64_t)&std::piecewise_construct, v32)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v5);
  uint64_t v7 = v6;
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeRange::intersect(v7, v8, (uint64_t)v32);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v32);
  uint64_t v9 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  long long v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v9, v10, (uint64_t)v32);
  CoreML::ShapeConstraint::updateBatchRange(v5, (const CoreML::ShapeRange *)v32);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v11);
  unint64_t v12 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v12);
  unint64_t v13 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  CoreML::ShapeConstraint::updateChannelRange(v4, v13);
  if (*((_DWORD *)a2 + 35) == 200) {
    int v15 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    int v15 = CoreML::Specification::PaddingLayerParams::default_instance(v14);
  }
  CoreML::Specification::PaddingLayerParams::PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)v32, (const CoreML::Specification::PaddingLayerParams *)v15);
  int v16 = v33;
  if (!v33) {
    int v16 = &CoreML::Specification::_BorderAmounts_default_instance_;
  }
  if (*((_DWORD *)v16 + 6))
  {
    uint64_t v17 = v16[4];
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v18 = *(void *)(v17 + 16);
    unint64_t v21 = *(void *)(v19 + 16);
    unint64_t v20 = *(void *)(v19 + 24);
    unint64_t v23 = *(void *)(v18 + 16);
    unint64_t v22 = *(void *)(v18 + 24);
  }
  else
  {
    unint64_t v23 = 0;
    unint64_t v22 = 0;
    unint64_t v21 = 0;
    unint64_t v20 = 0;
  }
  unsigned int v24 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  unsigned int v25 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  CoreML::ShapeRange::intersect(v24, v25, (uint64_t)v31);
  CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v31);
  uint64_t v26 = CoreML::ShapeConstraint::heightRange(v4);
  CoreML::ShapeRange::operator+(v26, v21, (uint64_t)v30);
  CoreML::ShapeRange::operator+((uint64_t)v30, v20, (uint64_t)v31);
  CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v31);
  uint64_t v27 = CoreML::ShapeConstraint::widthRange(v4);
  CoreML::ShapeRange::operator+(v27, v22, (uint64_t)v30);
  CoreML::ShapeRange::operator+((uint64_t)v30, v23, (uint64_t)v31);
  CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v31);
  uint64_t v28 = CoreML::ShapeConstraint::heightRange(v5);
  CoreML::ShapeRange::operator-(v28, v21, (uint64_t)v30);
  CoreML::ShapeRange::operator-((uint64_t)v30, v20, (uint64_t)v31);
  CoreML::ShapeConstraint::updateHeightRange(v4, (const CoreML::ShapeRange *)v31);
  uint64_t v29 = CoreML::ShapeConstraint::widthRange(v5);
  CoreML::ShapeRange::operator-(v29, v23, (uint64_t)v30);
  CoreML::ShapeRange::operator-((uint64_t)v30, v22, (uint64_t)v31);
  CoreML::ShapeConstraint::updateWidthRange(v4, (const CoreML::ShapeRange *)v31);
  CoreML::Specification::PaddingLayerParams::~PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)v32);
}

void sub_224301DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  CoreML::Specification::PaddingLayerParams::~PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)va);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::shapeUpsampleLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v25[0] = *(long long **)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v25[0], (uint64_t)&std::piecewise_construct, v25)+ 7);
  v25[0] = *(long long **)(*((void *)a2 + 7) + 8);
  double v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v25[0], (uint64_t)&std::piecewise_construct, v25)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v5);
  uint64_t v7 = v6;
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeRange::intersect(v7, v8, (uint64_t)v25);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v25);
  uint64_t v9 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  long long v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v9, v10, (uint64_t)v25);
  CoreML::ShapeConstraint::updateBatchRange(v5, (const CoreML::ShapeRange *)v25);
  int v11 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  unint64_t v12 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  CoreML::ShapeRange::intersect(v11, v12, (uint64_t)v25);
  CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v25);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v13);
  uint64_t v14 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v14);
  int v15 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  CoreML::ShapeConstraint::updateChannelRange(v4, v15);
  if (*((_DWORD *)a2 + 35) == 210) {
    uint64_t v17 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v17 = CoreML::Specification::UpsampleLayerParams::default_instance(v16);
  }
  CoreML::Specification::UpsampleLayerParams::UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)v25, (const CoreML::Specification::UpsampleLayerParams *)v17);
  if (v26)
  {
    if (*(void *)(v27 + 8) <= 1uLL) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = *(void *)(v27 + 8);
    }
    if (*(void *)(v27 + 16) <= 1uLL) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = *(void *)(v27 + 16);
    }
  }
  else
  {
    uint64_t v18 = 1;
    uint64_t v19 = 1;
  }
  uint64_t v20 = CoreML::ShapeConstraint::heightRange(v4);
  CoreML::ShapeRange::operator*(v20, v18, (uint64_t)v24);
  CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v24);
  uint64_t v21 = CoreML::ShapeConstraint::widthRange(v4);
  CoreML::ShapeRange::operator*(v21, v19, (uint64_t)v24);
  CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v24);
  uint64_t v22 = CoreML::ShapeConstraint::heightRange(v5);
  CoreML::ShapeRange::operator/(v22, v18, (uint64_t)v24);
  CoreML::ShapeConstraint::updateHeightRange(v4, (const CoreML::ShapeRange *)v24);
  uint64_t v23 = CoreML::ShapeConstraint::widthRange(v5);
  CoreML::ShapeRange::operator/(v23, v19, (uint64_t)v24);
  CoreML::ShapeConstraint::updateWidthRange(v4, (const CoreML::ShapeRange *)v24);
  CoreML::Specification::UpsampleLayerParams::~UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)v25);
}

void sub_224302050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  CoreML::Specification::UpsampleLayerParams::~UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)va);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::shapeBroadcastLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  *(void *)&long long v54 = *(void *)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v54, (uint64_t)&std::piecewise_construct, (long long **)&v54)+ 7);
  turi::neural_net::float_scalar::~float_scalar(v4);
  long long v6 = v5[1];
  long long v54 = *v5;
  long long v55 = v6;
  uint64_t v7 = (long long *)CoreML::ShapeConstraint::batchRange(v4);
  long long v8 = v7[1];
  long long v52 = *v7;
  long long v53 = v8;
  uint64_t v9 = (long long *)CoreML::ShapeConstraint::channelRange(v4);
  long long v10 = v9[1];
  long long v50 = *v9;
  long long v51 = v10;
  int v11 = (long long *)CoreML::ShapeConstraint::heightRange(v4);
  long long v12 = v11[1];
  long long v48 = *v11;
  long long v49 = v12;
  unint64_t v13 = (long long *)CoreML::ShapeConstraint::widthRange(v4);
  long long v14 = v13[1];
  long long v46 = *v13;
  long long v47 = v14;
  BOOL hasFixedCHW = CoreML::ShapeConstraint::hasFixedCHW(v4);
  if (*((int *)a2 + 6) >= 2)
  {
    uint64_t v16 = 2;
    do
    {
      *(void *)&long long v44 = *(void *)(*((void *)a2 + 4) + 8 * v16);
      uint64_t v17 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v44, (uint64_t)&std::piecewise_construct, (long long **)&v44);
      uint64_t v18 = (turi::neural_net::float_scalar *)(v17 + 7);
      BOOL hasFixedCHW = hasFixedCHW && CoreML::ShapeConstraint::hasFixedCHW((CoreML::ShapeConstraint *)(v17 + 7));
      turi::neural_net::float_scalar::~float_scalar(v18);
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v54, v19, (uint64_t)&v44);
      long long v54 = v44;
      long long v55 = v45;
      uint64_t v20 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v18);
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v52, v20, (uint64_t)&v44);
      long long v52 = v44;
      long long v53 = v45;
      uint64_t v21 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v18);
      CoreML::ShapeRange::unify((CoreML::ShapeRange *)&v50, v21, (uint64_t)&v44);
      long long v50 = v44;
      long long v51 = v45;
      uint64_t v22 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v18);
      CoreML::ShapeRange::unify((CoreML::ShapeRange *)&v48, v22, (uint64_t)&v44);
      long long v48 = v44;
      long long v49 = v45;
      uint64_t v23 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v18);
      CoreML::ShapeRange::unify((CoreML::ShapeRange *)&v46, v23, (uint64_t)&v44);
      long long v46 = v44;
      long long v47 = v45;
    }
    while (v16++ < *((int *)a2 + 6));
  }
  *(void *)&long long v44 = *(void *)(*((void *)a2 + 7) + 8);
  unsigned int v25 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v44, (uint64_t)&std::piecewise_construct, (long long **)&v44)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v25, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v25);
  CoreML::ShapeRange::intersect(v26, (const CoreML::ShapeRange *)&v54, (uint64_t)&v44);
  CoreML::ShapeConstraint::updateSequenceRange(v25, (const CoreML::ShapeRange *)&v44);
  uint64_t v27 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v25);
  CoreML::ShapeRange::intersect(v27, (const CoreML::ShapeRange *)&v52, (uint64_t)&v44);
  CoreML::ShapeConstraint::updateBatchRange(v25, (const CoreML::ShapeRange *)&v44);
  if (hasFixedCHW)
  {
    *(void *)&long long v44 = CoreML::ShapeRange::maximum((CoreML::ShapeRange *)&v50);
    *((void *)&v44 + 1) = v28;
    unint64_t v29 = CoreML::RangeValue::value((CoreML::RangeValue *)&v44);
    CoreML::ShapeConstraint::setChannel(v25, v29);
    *(void *)&long long v44 = CoreML::ShapeRange::maximum((CoreML::ShapeRange *)&v48);
    *((void *)&v44 + 1) = v30;
    unint64_t v31 = CoreML::RangeValue::value((CoreML::RangeValue *)&v44);
    CoreML::ShapeConstraint::setHeight(v25, v31);
    *(void *)&long long v44 = CoreML::ShapeRange::maximum((CoreML::ShapeRange *)&v46);
    *((void *)&v44 + 1) = v32;
    unint64_t v33 = CoreML::RangeValue::value((CoreML::RangeValue *)&v44);
    CoreML::ShapeConstraint::setWidth(v25, v33);
  }
  else
  {
    int v34 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v25);
    CoreML::ShapeRange::intersect(v34, (const CoreML::ShapeRange *)&v50, (uint64_t)&v44);
    CoreML::ShapeConstraint::updateChannelRange(v25, (const CoreML::ShapeRange *)&v44);
    uint64_t v35 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v25);
    CoreML::ShapeRange::intersect(v35, (const CoreML::ShapeRange *)&v48, (uint64_t)&v44);
    CoreML::ShapeConstraint::updateHeightRange(v25, (const CoreML::ShapeRange *)&v44);
    uint64_t v36 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v25);
    CoreML::ShapeRange::intersect(v36, (const CoreML::ShapeRange *)&v46, (uint64_t)&v44);
    CoreML::ShapeConstraint::updateWidthRange(v25, (const CoreML::ShapeRange *)&v44);
  }
  if (*((int *)a2 + 6) >= 1)
  {
    uint64_t v37 = 0;
    do
    {
      *(void *)&long long v44 = *(void *)(*((void *)a2 + 4) + 8 * v37 + 8);
      int v38 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v44, (uint64_t)&std::piecewise_construct, (long long **)&v44)+ 7);
      turi::neural_net::float_scalar::~float_scalar(v25);
      CoreML::ShapeConstraint::updateSequenceRange(v38, v39);
      unsigned int v40 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v25);
      CoreML::ShapeConstraint::updateBatchRange(v38, v40);
      if (!CoreML::ShapeConstraint::hasFixedCHW(v38))
      {
        uint64_t v41 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v25);
        CoreML::ShapeConstraint::updateChannelRange(v38, v41);
        int v42 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v25);
        CoreML::ShapeConstraint::updateHeightRange(v38, v42);
        uint64_t v43 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v25);
        CoreML::ShapeConstraint::updateWidthRange(v38, v43);
      }
      ++v37;
    }
    while (v37 < *((int *)a2 + 6));
  }
}

void CoreML::NeuralNetworkShaper::shapeDotLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  *(void *)&v29[0] = *(void *)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, *(const void ***)&v29[0], (uint64_t)&std::piecewise_construct, (long long **)v29);
  *(void *)&v29[0] = *(void *)(*((void *)a2 + 4) + 16);
  double v5 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, *(const void ***)&v29[0], (uint64_t)&std::piecewise_construct, (long long **)v29);
  v28[0] = *(long long **)(*((void *)a2 + 7) + 8);
  long long v6 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v28[0], (uint64_t)&std::piecewise_construct, v28);
  long long v7 = *(_OWORD *)(v6 + 21);
  v29[6] = *(_OWORD *)(v6 + 19);
  v29[7] = v7;
  long long v8 = *(_OWORD *)(v6 + 25);
  v29[8] = *(_OWORD *)(v6 + 23);
  v29[9] = v8;
  long long v9 = *(_OWORD *)(v6 + 13);
  v29[2] = *(_OWORD *)(v6 + 11);
  v29[3] = v9;
  long long v10 = *(_OWORD *)(v6 + 17);
  v29[4] = *(_OWORD *)(v6 + 15);
  v29[5] = v10;
  long long v11 = *(_OWORD *)(v6 + 9);
  v29[0] = *(_OWORD *)(v6 + 7);
  v29[1] = v11;
  if (*((char *)v6 + 239) < 0) {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v6[27], v6[28]);
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)v6 + 9);
  }
  CoreML::ShapeConstraint::setName((uint64_t)v29, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)v29);
  unint64_t v13 = v12;
  long long v14 = (turi::neural_net::float_scalar *)(v4 + 7);
  turi::neural_net::float_scalar::~float_scalar(v14);
  CoreML::ShapeRange::intersect(v13, v15, (uint64_t)v28);
  CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)v29, (const CoreML::ShapeRange *)v28);
  uint64_t v16 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange((CoreML::ShapeConstraint *)v29);
  uint64_t v17 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v14);
  CoreML::ShapeRange::intersect(v16, v17, (uint64_t)v28);
  CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)v29, (const CoreML::ShapeRange *)v28);
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)v29);
  uint64_t v19 = v18;
  uint64_t v20 = (turi::neural_net::float_scalar *)(v5 + 7);
  turi::neural_net::float_scalar::~float_scalar(v20);
  CoreML::ShapeRange::intersect(v19, v21, (uint64_t)v28);
  CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)v29, (const CoreML::ShapeRange *)v28);
  uint64_t v22 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange((CoreML::ShapeConstraint *)v29);
  uint64_t v23 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v20);
  CoreML::ShapeRange::intersect(v22, v23, (uint64_t)v28);
  CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)v29, (const CoreML::ShapeRange *)v28);
  CoreML::ShapeConstraint::setHeight(v14, 1uLL);
  CoreML::ShapeConstraint::setWidth(v14, 1uLL);
  CoreML::ShapeConstraint::setHeight(v20, 1uLL);
  CoreML::ShapeConstraint::setWidth(v20, 1uLL);
  CoreML::ShapeConstraint::copyFrom(v14, v20);
  CoreML::ShapeConstraint::copyFrom(v20, v14);
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)v29);
  CoreML::ShapeConstraint::updateSequenceRange(v14, v24);
  unsigned int v25 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange((CoreML::ShapeConstraint *)v29);
  CoreML::ShapeConstraint::updateBatchRange(v14, v25);
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)v29);
  CoreML::ShapeConstraint::updateSequenceRange(v20, v26);
  uint64_t v27 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange((CoreML::ShapeConstraint *)v29);
  CoreML::ShapeConstraint::updateBatchRange(v20, v27);
  CoreML::ShapeConstraint::setChannel((CoreML::ShapeConstraint *)v29, 1uLL);
  CoreML::ShapeConstraint::setHeight((CoreML::ShapeConstraint *)v29, 1uLL);
  CoreML::ShapeConstraint::setWidth((CoreML::ShapeConstraint *)v29, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_224302708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkShaper::shapeReduceLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v37[0] = *(long long **)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v37[0], (uint64_t)&std::piecewise_construct, v37)+ 7);
  v37[0] = *(long long **)(*((void *)a2 + 7) + 8);
  double v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v37[0], (uint64_t)&std::piecewise_construct, v37)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v5);
  long long v7 = v6;
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeRange::intersect(v7, v8, (uint64_t)v37);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v37);
  long long v9 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  long long v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v9, v10, (uint64_t)v37);
  CoreML::ShapeConstraint::updateBatchRange(v5, (const CoreML::ShapeRange *)v37);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v11);
  long long v12 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v12);
  if (*((_DWORD *)a2 + 35) == 280) {
    long long v14 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    long long v14 = CoreML::Specification::ReduceLayerParams::default_instance(v13);
  }
  CoreML::Specification::ReduceLayerParams::ReduceLayerParams((CoreML::Specification::ReduceLayerParams *)v37, (const CoreML::Specification::ReduceLayerParams *)v14);
  switch(v38)
  {
    case 0:
      CoreML::ShapeConstraint::setChannel(v5, 1uLL);
      goto LABEL_14;
    case 1:
      unint64_t v33 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
      int v34 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
      CoreML::ShapeRange::intersect(v33, v34, (uint64_t)v36);
      CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v36);
      uint64_t v35 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
      CoreML::ShapeConstraint::updateChannelRange(v4, v35);
LABEL_14:
      CoreML::ShapeConstraint::setHeight(v5, 1uLL);
      goto LABEL_15;
    case 2:
      CoreML::ShapeConstraint::setChannel(v5, 1uLL);
      uint64_t v22 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      uint64_t v23 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
      CoreML::ShapeRange::intersect(v22, v23, (uint64_t)v36);
      CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v36);
      unsigned int v24 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      CoreML::ShapeConstraint::updateHeightRange(v4, v24);
      unsigned int v25 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
      int v26 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
      CoreML::ShapeRange::intersect(v25, v26, (uint64_t)v36);
      CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v36);
      uint64_t v27 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
      std::exception_ptr v4 = v5;
      goto LABEL_12;
    case 3:
      uint64_t v28 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
      unint64_t v29 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
      CoreML::ShapeRange::intersect(v28, v29, (uint64_t)v36);
      CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v36);
      uint64_t v30 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
      CoreML::ShapeConstraint::updateChannelRange(v4, v30);
      CoreML::ShapeConstraint::setHeight(v5, 1uLL);
      unint64_t v31 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
      uint64_t v32 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
      CoreML::ShapeRange::intersect(v31, v32, (uint64_t)v36);
      CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v36);
      uint64_t v27 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
LABEL_12:
      CoreML::ShapeConstraint::updateWidthRange(v4, v27);
      break;
    case 4:
      uint64_t v16 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
      uint64_t v17 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
      CoreML::ShapeRange::intersect(v16, v17, (uint64_t)v36);
      CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v36);
      uint64_t v18 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
      CoreML::ShapeConstraint::updateChannelRange(v4, v18);
      uint64_t v19 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      uint64_t v20 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
      CoreML::ShapeRange::intersect(v19, v20, (uint64_t)v36);
      CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v36);
      uint64_t v21 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      CoreML::ShapeConstraint::updateHeightRange(v4, v21);
LABEL_15:
      CoreML::ShapeConstraint::setWidth(v5, 1uLL);
      break;
    default:
      if (v38 == 0x80000000 || v38 == 0x7FFFFFFF)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Reduce layer axis not set -- should have been caught in validator.");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      return;
  }
  CoreML::Specification::ReduceLayerParams::~ReduceLayerParams((CoreML::Specification::ReduceLayerParams *)v37);
}

void sub_224302B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v13);
  CoreML::Specification::ReduceLayerParams::~ReduceLayerParams((CoreML::Specification::ReduceLayerParams *)&a13);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::shapeLoadConstantLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  v6[0] = *(long long **)(*((void *)a2 + 7) + 8);
  std::exception_ptr v3 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v6[0], (uint64_t)&std::piecewise_construct, v6)+ 7);
  std::exception_ptr v4 = CoreML::ShapeConstraint::setName((uint64_t)v3, *(const std::string **)(*((void *)a2 + 7) + 8));
  if (*((_DWORD *)a2 + 35) == 290) {
    double v5 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    double v5 = CoreML::Specification::LoadConstantLayerParams::default_instance((CoreML::Specification::LoadConstantLayerParams *)v4);
  }
  CoreML::Specification::LoadConstantLayerParams::LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)v6, (const CoreML::Specification::LoadConstantLayerParams *)v5);
  CoreML::ShapeConstraint::setSequence(v3, 1uLL);
  CoreML::ShapeConstraint::setBatch(v3, 1uLL);
  CoreML::ShapeConstraint::setChannel(v3, v7[1]);
  CoreML::ShapeConstraint::setHeight(v3, v7[2]);
  CoreML::ShapeConstraint::setWidth(v3, v7[3]);
  CoreML::Specification::LoadConstantLayerParams::~LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)v6);
}

void sub_224302C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CoreML::NeuralNetworkShaper::shapeReshapeLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v14[0] = *(long long **)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v14[0], (uint64_t)&std::piecewise_construct, v14)+ 7);
  v14[0] = *(long long **)(*((void *)a2 + 7) + 8);
  double v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v14[0], (uint64_t)&std::piecewise_construct, v14)+ 7);
  long long v6 = CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  if (*((_DWORD *)a2 + 35) == 300) {
    long long v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    long long v7 = CoreML::Specification::ReshapeLayerParams::default_instance((CoreML::Specification::ReshapeLayerParams *)v6);
  }
  CoreML::Specification::ReshapeLayerParams::ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)v14, (const CoreML::Specification::ReshapeLayerParams *)v7);
  long long v8 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeConstraint::updateBatchRange(v5, v8);
  if (v15 == 3)
  {
    turi::neural_net::float_scalar::~float_scalar(v5);
    long long v10 = v9;
    turi::neural_net::float_scalar::~float_scalar(v4);
    CoreML::ShapeRange::intersect(v10, v11, (uint64_t)v13);
    CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v13);
    CoreML::ShapeConstraint::setChannel(v5, v16[1]);
    CoreML::ShapeConstraint::setHeight(v5, v16[2]);
    long long v12 = v16 + 3;
  }
  else
  {
    CoreML::ShapeRange::ShapeRange((uint64_t)v13, v16[1]);
    CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v13);
    CoreML::ShapeConstraint::setChannel(v5, v16[2]);
    CoreML::ShapeConstraint::setHeight(v5, v16[3]);
    long long v12 = v16 + 4;
  }
  CoreML::ShapeConstraint::setWidth(v5, *v12);
  CoreML::Specification::ReshapeLayerParams::~ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)v14);
}

void sub_224302DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  CoreML::Specification::ReshapeLayerParams::~ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)va);
  _Unwind_Resume(a1);
}

uint64_t CoreML::NeuralNetworkShaper::shapeFlattenLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v15[0] = *(long long **)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v15[0], (uint64_t)&std::piecewise_construct, v15)+ 7);
  v15[0] = *(long long **)(*((void *)a2 + 7) + 8);
  double v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v15[0], (uint64_t)&std::piecewise_construct, v15)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeConstraint::updateSequenceRange(v5, v6);
  long long v7 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeConstraint::updateBatchRange(v5, v7);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v8);
  long long v9 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v9);
  uint64_t v10 = CoreML::ShapeConstraint::channelRange(v4);
  long long v11 = (long long *)CoreML::ShapeConstraint::heightRange(v4);
  CoreML::ShapeRange::operator*(v10, v11, (uint64_t)v14);
  long long v12 = (long long *)CoreML::ShapeConstraint::widthRange(v4);
  CoreML::ShapeRange::operator*((uint64_t)v14, v12, (uint64_t)v15);
  CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v15);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  return CoreML::ShapeConstraint::setWidth(v5, 1uLL);
}

void CoreML::NeuralNetworkShaper::shapePermuteLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v38[0] = *(long long **)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v38[0], (uint64_t)&std::piecewise_construct, v38)+ 7);
  std::vector<CoreML::ShapeRange>::vector(v40, 4uLL);
  turi::neural_net::float_scalar::~float_scalar(v4);
  double v5 = v40[0];
  long long v7 = v6[1];
  *(_OWORD *)v40[0] = *v6;
  v5[1] = v7;
  long long v8 = (_OWORD *)CoreML::ShapeConstraint::channelRange(v4);
  long long v9 = v40[0];
  long long v10 = v8[1];
  *((_OWORD *)v40[0] + 2) = *v8;
  v9[3] = v10;
  long long v11 = (_OWORD *)CoreML::ShapeConstraint::heightRange(v4);
  long long v12 = v40[0];
  long long v13 = v11[1];
  *((_OWORD *)v40[0] + 4) = *v11;
  v12[5] = v13;
  long long v14 = (CoreML::Specification::PermuteLayerParams *)CoreML::ShapeConstraint::widthRange(v4);
  int v15 = v40[0];
  long long v16 = *((_OWORD *)v14 + 1);
  *((_OWORD *)v40[0] + 6) = *(_OWORD *)v14;
  v15[7] = v16;
  if (*((_DWORD *)a2 + 35) == 310) {
    uint64_t v17 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v17 = CoreML::Specification::PermuteLayerParams::default_instance(v14);
  }
  CoreML::Specification::PermuteLayerParams::PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)v38, (const CoreML::Specification::PermuteLayerParams *)v17);
  uint64_t v19 = v39[1];
  uint64_t v18 = v39[2];
  uint64_t v21 = v39[3];
  uint64_t v20 = v39[4];
  __p[0] = *(void **)(*((void *)a2 + 7) + 8);
  uint64_t v22 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)__p[0], (uint64_t)&std::piecewise_construct, (long long **)__p)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v22, *(const std::string **)(*((void *)a2 + 7) + 8));
  CoreML::ShapeConstraint::setName((uint64_t)v22, *(const std::string **)(*((void *)a2 + 7) + 8));
  CoreML::ShapeConstraint::updateSequenceRange(v22, (const CoreML::ShapeRange *)((char *)v40[0] + 32 * v19));
  CoreML::ShapeConstraint::updateChannelRange(v22, (const CoreML::ShapeRange *)((char *)v40[0] + 32 * v18));
  CoreML::ShapeConstraint::updateHeightRange(v22, (const CoreML::ShapeRange *)((char *)v40[0] + 32 * v21));
  CoreML::ShapeConstraint::updateWidthRange(v22, (const CoreML::ShapeRange *)((char *)v40[0] + 32 * v20));
  std::vector<CoreML::ShapeRange>::vector(__p, 4uLL);
  turi::neural_net::float_scalar::~float_scalar(v22);
  uint64_t v23 = (char *)__p[0] + 32 * v19;
  long long v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  int v26 = (_OWORD *)CoreML::ShapeConstraint::channelRange(v22);
  uint64_t v27 = (char *)__p[0] + 32 * v18;
  long long v28 = v26[1];
  *uint64_t v27 = *v26;
  v27[1] = v28;
  unint64_t v29 = (_OWORD *)CoreML::ShapeConstraint::heightRange(v22);
  uint64_t v30 = (char *)__p[0] + 32 * v21;
  long long v31 = v29[1];
  _OWORD *v30 = *v29;
  v30[1] = v31;
  uint64_t v32 = (_OWORD *)CoreML::ShapeConstraint::widthRange(v22);
  unint64_t v33 = (const CoreML::ShapeRange *)__p[0];
  int v34 = (char *)__p[0] + 32 * v20;
  long long v35 = v32[1];
  *int v34 = *v32;
  v34[1] = v35;
  CoreML::ShapeConstraint::updateSequenceRange(v4, v33);
  CoreML::ShapeConstraint::updateChannelRange(v4, (const CoreML::ShapeRange *)((char *)__p[0] + 32));
  CoreML::ShapeConstraint::updateHeightRange(v4, (const CoreML::ShapeRange *)((char *)__p[0] + 64));
  CoreML::ShapeConstraint::updateWidthRange(v4, (const CoreML::ShapeRange *)((char *)__p[0] + 96));
  uint64_t v36 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v22);
  CoreML::ShapeConstraint::updateBatchRange(v4, v36);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  CoreML::Specification::PermuteLayerParams::~PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)v38);
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
}

void sub_2243031A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double CoreML::NeuralNetworkShaper::shapeConcatLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  *(void *)&long long v40 = *(void *)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v40, (uint64_t)&std::piecewise_construct, (long long **)&v40)+ 7);
  *(void *)&long long v40 = *(void *)(*((void *)a2 + 7) + 8);
  double v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v40, (uint64_t)&std::piecewise_construct, (long long **)&v40)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  long long v6 = (CoreML::Specification::ConcatLayerParams *)CoreML::ShapeRange::ShapeRange((uint64_t)&v40);
  if (*((_DWORD *)a2 + 35) == 320) {
    long long v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    long long v7 = CoreML::Specification::ConcatLayerParams::default_instance(v6);
  }
  if (*((unsigned char *)v7 + 16))
  {
    turi::neural_net::float_scalar::~float_scalar(v4);
    long long v9 = v8[1];
    long long v40 = *v8;
    long long v41 = v9;
    long long v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
    CoreML::ShapeConstraint::updateChannelRange(v5, v10);
  }
  else
  {
    long long v11 = (long long *)CoreML::ShapeConstraint::channelRange(v4);
    long long v12 = v11[1];
    long long v40 = *v11;
    long long v41 = v12;
    turi::neural_net::float_scalar::~float_scalar(v4);
    CoreML::ShapeConstraint::updateSequenceRange(v5, v13);
  }
  long long v14 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeConstraint::updateBatchRange(v5, v14);
  int v15 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
  CoreML::ShapeConstraint::updateHeightRange(v5, v15);
  long long v16 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
  CoreML::ShapeConstraint::updateWidthRange(v5, v16);
  if (*((int *)a2 + 6) >= 2)
  {
    uint64_t v18 = 2;
    do
    {
      *(void *)&long long v38 = *(void *)(*((void *)a2 + 4) + 8 * v18);
      uint64_t v19 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v38, (uint64_t)&std::piecewise_construct, (long long **)&v38);
      uint64_t v20 = v19;
      if (*((_DWORD *)a2 + 35) == 320) {
        uint64_t v21 = (uint64_t *)*((void *)a2 + 16);
      }
      else {
        uint64_t v21 = CoreML::Specification::ConcatLayerParams::default_instance((CoreML::Specification::ConcatLayerParams *)v19);
      }
      uint64_t v22 = (turi::neural_net::float_scalar *)(v20 + 7);
      if (*((unsigned char *)v21 + 16))
      {
        turi::neural_net::float_scalar::~float_scalar(v22);
        CoreML::ShapeRange::operator+((uint64_t)&v40, v23, (uint64_t)&v38);
        long long v40 = v38;
        long long v41 = v39;
        unsigned int v24 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v22);
        CoreML::ShapeConstraint::updateChannelRange(v5, v24);
        long long v25 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
        CoreML::ShapeConstraint::updateChannelRange(v22, v25);
      }
      else
      {
        int v26 = (long long *)CoreML::ShapeConstraint::channelRange(v22);
        CoreML::ShapeRange::operator+((uint64_t)&v40, v26, (uint64_t)&v38);
        long long v40 = v38;
        long long v41 = v39;
        turi::neural_net::float_scalar::~float_scalar(v22);
        CoreML::ShapeConstraint::updateSequenceRange(v5, v27);
        turi::neural_net::float_scalar::~float_scalar(v5);
        CoreML::ShapeConstraint::updateSequenceRange(v22, v28);
      }
      unint64_t v29 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v22);
      CoreML::ShapeConstraint::updateBatchRange(v5, v29);
      uint64_t v30 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
      CoreML::ShapeConstraint::updateBatchRange(v22, v30);
      long long v31 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v22);
      CoreML::ShapeConstraint::updateHeightRange(v5, v31);
      uint64_t v32 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      CoreML::ShapeConstraint::updateHeightRange(v22, v32);
      unint64_t v33 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v22);
      CoreML::ShapeConstraint::updateWidthRange(v5, v33);
      int v34 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
      CoreML::ShapeConstraint::updateWidthRange(v22, v34);
    }
    while (v18++ < *((int *)a2 + 6));
  }
  if (*((_DWORD *)a2 + 35) == 320) {
    uint64_t v36 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v36 = CoreML::Specification::ConcatLayerParams::default_instance(v17);
  }
  if (*((unsigned char *)v36 + 16)) {
    return CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)&v40);
  }
  else {
    return CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)&v40);
  }
}

double CoreML::NeuralNetworkShaper::shapeSplitLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v23[0] = *(long long **)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v23[0], (uint64_t)&std::piecewise_construct, v23);
  double v5 = (turi::neural_net::float_scalar *)(v4 + 7);
  if (*((_DWORD *)a2 + 35) == 330) {
    long long v6 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    long long v6 = CoreML::Specification::SplitLayerParams::default_instance((CoreML::Specification::SplitLayerParams *)v4);
  }
  uint64_t v7 = v6[2];
  if (*((int *)a2 + 12) >= 1)
  {
    uint64_t v8 = 1;
    do
    {
      v23[0] = *(long long **)(*((void *)a2 + 7) + 8 * v8);
      long long v9 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v23[0], (uint64_t)&std::piecewise_construct, v23)+ 7);
      CoreML::ShapeConstraint::setName((uint64_t)v9, *(const std::string **)(*((void *)a2 + 7) + 8 * v8));
      turi::neural_net::float_scalar::~float_scalar(v5);
      CoreML::ShapeConstraint::updateSequenceRange(v9, v10);
      long long v11 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
      CoreML::ShapeConstraint::updateBatchRange(v9, v11);
      long long v12 = (long long *)CoreML::ShapeConstraint::channelRange(v5);
      CoreML::ShapeRange::operator/(v12, v7, (uint64_t)v23);
      CoreML::ShapeConstraint::updateChannelRange(v9, (const CoreML::ShapeRange *)v23);
      long long v13 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      CoreML::ShapeConstraint::updateHeightRange(v9, v13);
      long long v14 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
      CoreML::ShapeConstraint::updateWidthRange(v9, v14);
    }
    while (v8++ < *((int *)a2 + 12));
  }
  v23[0] = *(long long **)(*((void *)a2 + 7) + 8);
  long long v16 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v23[0], (uint64_t)&std::piecewise_construct, v23)+ 7);
  turi::neural_net::float_scalar::~float_scalar(v16);
  CoreML::ShapeConstraint::updateSequenceRange(v5, v17);
  uint64_t v18 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v16);
  CoreML::ShapeConstraint::updateBatchRange(v5, v18);
  uint64_t v19 = CoreML::ShapeConstraint::channelRange(v16);
  CoreML::ShapeRange::operator*(v19, (int)v7, (uint64_t)v23);
  CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v23);
  uint64_t v20 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v16);
  CoreML::ShapeConstraint::updateHeightRange(v5, v20);
  uint64_t v21 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v16);
  return CoreML::ShapeConstraint::updateWidthRange(v5, v21);
}

double CoreML::NeuralNetworkShaper::shapeSequenceRepeatLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v20[0] = *(long long **)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v20[0], (uint64_t)&std::piecewise_construct, v20);
  v20[0] = *(long long **)(*((void *)a2 + 7) + 8);
  double v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v20[0], (uint64_t)&std::piecewise_construct, v20)+ 7);
  long long v6 = CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  if (*((_DWORD *)a2 + 35) == 340) {
    uint64_t v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v7 = CoreML::Specification::SequenceRepeatLayerParams::default_instance((CoreML::Specification::SequenceRepeatLayerParams *)v6);
  }
  uint64_t v8 = (turi::neural_net::float_scalar *)(v4 + 7);
  uint64_t v9 = v7[2];
  turi::neural_net::float_scalar::~float_scalar(v8);
  CoreML::ShapeRange::operator*(v10, v9, (uint64_t)v20);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v20);
  long long v11 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v8);
  CoreML::ShapeConstraint::updateBatchRange(v5, v11);
  long long v12 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v8);
  CoreML::ShapeConstraint::updateChannelRange(v5, v12);
  long long v13 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v8);
  CoreML::ShapeConstraint::updateHeightRange(v5, v13);
  long long v14 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v8);
  CoreML::ShapeConstraint::updateWidthRange(v5, v14);
  int v15 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v8, v15);
  long long v16 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  CoreML::ShapeConstraint::updateChannelRange(v8, v16);
  uint64_t v17 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
  CoreML::ShapeConstraint::updateHeightRange(v8, v17);
  uint64_t v18 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
  return CoreML::ShapeConstraint::updateWidthRange(v8, v18);
}

void CoreML::NeuralNetworkShaper::shapeReorganizeDataLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v26[0] = *(long long **)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v26[0], (uint64_t)&std::piecewise_construct, v26)+ 7);
  v26[0] = *(long long **)(*((void *)a2 + 7) + 8);
  double v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v26[0], (uint64_t)&std::piecewise_construct, v26)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeConstraint::updateSequenceRange(v5, v6);
  uint64_t v7 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeConstraint::updateBatchRange(v5, v7);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v8);
  uint64_t v9 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v9);
  if (*((_DWORD *)a2 + 35) == 345) {
    long long v11 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    long long v11 = CoreML::Specification::ReorganizeDataLayerParams::default_instance(v10);
  }
  CoreML::Specification::ReorganizeDataLayerParams::ReorganizeDataLayerParams((CoreML::Specification::ReorganizeDataLayerParams *)v26, (const CoreML::Specification::ReorganizeDataLayerParams *)v11);
  uint64_t v12 = (uint64_t)v26[2];
  if (v27)
  {
    uint64_t v13 = CoreML::ShapeConstraint::channelRange(v4);
    CoreML::ShapeRange::operator/(v13, v12 * v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v25);
    uint64_t v14 = CoreML::ShapeConstraint::heightRange(v4);
    CoreML::ShapeRange::operator*(v14, v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v25);
    uint64_t v15 = CoreML::ShapeConstraint::widthRange(v4);
    CoreML::ShapeRange::operator*(v15, v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v25);
    uint64_t v16 = CoreML::ShapeConstraint::channelRange(v5);
    CoreML::ShapeRange::operator*(v16, v12 * v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateChannelRange(v4, (const CoreML::ShapeRange *)v25);
    uint64_t v17 = CoreML::ShapeConstraint::heightRange(v5);
    CoreML::ShapeRange::operator/(v17, v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateHeightRange(v4, (const CoreML::ShapeRange *)v25);
    uint64_t v18 = CoreML::ShapeConstraint::widthRange(v5);
    CoreML::ShapeRange::operator/(v18, v12, (uint64_t)v25);
  }
  else
  {
    uint64_t v19 = CoreML::ShapeConstraint::channelRange(v4);
    CoreML::ShapeRange::operator*(v19, v12 * v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v25);
    uint64_t v20 = CoreML::ShapeConstraint::heightRange(v4);
    CoreML::ShapeRange::operator/(v20, v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v25);
    uint64_t v21 = CoreML::ShapeConstraint::widthRange(v4);
    CoreML::ShapeRange::operator/(v21, v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v25);
    uint64_t v22 = CoreML::ShapeConstraint::channelRange(v5);
    CoreML::ShapeRange::operator/(v22, v12 * v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateChannelRange(v4, (const CoreML::ShapeRange *)v25);
    uint64_t v23 = CoreML::ShapeConstraint::heightRange(v5);
    CoreML::ShapeRange::operator*(v23, v12, (uint64_t)v25);
    CoreML::ShapeConstraint::updateHeightRange(v4, (const CoreML::ShapeRange *)v25);
    uint64_t v24 = CoreML::ShapeConstraint::widthRange(v5);
    CoreML::ShapeRange::operator*(v24, v12, (uint64_t)v25);
  }
  CoreML::ShapeConstraint::updateWidthRange(v4, (const CoreML::ShapeRange *)v25);
  CoreML::Specification::ReorganizeDataLayerParams::~ReorganizeDataLayerParams((CoreML::Specification::ReorganizeDataLayerParams *)v26);
}

void sub_224303B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  CoreML::Specification::ReorganizeDataLayerParams::~ReorganizeDataLayerParams((CoreML::Specification::ReorganizeDataLayerParams *)va);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::shapeSliceLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v51[0] = *(long long **)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v51[0], (uint64_t)&std::piecewise_construct, v51)+ 7);
  v51[0] = *(long long **)(*((void *)a2 + 7) + 8);
  double v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v51[0], (uint64_t)&std::piecewise_construct, v51)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeConstraint::updateSequenceRange(v5, v6);
  uint64_t v7 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeConstraint::updateBatchRange(v5, v7);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v8);
  uint64_t v9 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v9);
  if (*((_DWORD *)a2 + 35) == 350) {
    long long v11 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    long long v11 = CoreML::Specification::SliceLayerParams::default_instance(v10);
  }
  CoreML::Specification::SliceLayerParams::SliceLayerParams((CoreML::Specification::SliceLayerParams *)v51, (const CoreML::Specification::SliceLayerParams *)v11);
  int v12 = v52;
  int v13 = v53;
  int v14 = v54;
  int v15 = v55;
  if (v52 < 0 || (unsigned int v16 = v53, v53 <= 0))
  {
    if ((v52 & 0x80000000) == 0 || v53 > 0)
    {
      CoreML::ShapeRange::ShapeRange((uint64_t)v50);
      if (v15)
      {
        if (v15 == 1)
        {
          uint64_t v21 = (_OWORD *)CoreML::ShapeConstraint::heightRange(v4);
        }
        else
        {
          if (v15 != 2)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Slice layer axis incorrect -- should be caught in validator.");
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          uint64_t v21 = (_OWORD *)CoreML::ShapeConstraint::widthRange(v4);
        }
      }
      else
      {
        uint64_t v21 = (_OWORD *)CoreML::ShapeConstraint::channelRange(v4);
      }
      long long v30 = v21[1];
      v50[0] = *v21;
      v50[1] = v30;
      if (v13 < 1) {
        int v31 = v12;
      }
      else {
        int v31 = -v12;
      }
      if (v13 >= 0) {
        int v32 = v13;
      }
      else {
        int v32 = -v13;
      }
      signed int v33 = v32 + v31 + 1;
      CoreML::ShapeRange::operator-((uint64_t)v50, v33, (uint64_t)v47);
      CoreML::ShapeRange::operator/(v47, v14, (uint64_t)v48);
      CoreML::ShapeRange::operator+((uint64_t)v48, 1u, (uint64_t)v49);
      if (v15)
      {
        if (v15 != 1)
        {
          int v34 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
          CoreML::ShapeConstraint::updateChannelRange(v5, v34);
          long long v35 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
          CoreML::ShapeConstraint::updateHeightRange(v5, v35);
          CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v49);
          uint64_t v36 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
          CoreML::ShapeConstraint::updateChannelRange(v4, v36);
          uint64_t v37 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
          CoreML::ShapeConstraint::updateHeightRange(v4, v37);
          CoreML::ShapeConstraint::lowerBoundWidth(v4, v33);
          goto LABEL_34;
        }
        long long v38 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
        CoreML::ShapeConstraint::updateChannelRange(v5, v38);
        CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v49);
        long long v39 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
        CoreML::ShapeConstraint::updateWidthRange(v5, v39);
        long long v40 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
        CoreML::ShapeConstraint::updateChannelRange(v4, v40);
        CoreML::ShapeConstraint::lowerBoundHeight(v4, v33);
      }
      else
      {
        CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v49);
        long long v41 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
        CoreML::ShapeConstraint::updateHeightRange(v5, v41);
        int v42 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
        CoreML::ShapeConstraint::updateWidthRange(v5, v42);
        CoreML::ShapeConstraint::lowerBoundChannel(v4, v33);
        uint64_t v43 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
        CoreML::ShapeConstraint::updateHeightRange(v4, v43);
      }
      long long v44 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
      CoreML::ShapeConstraint::updateWidthRange(v4, v44);
      goto LABEL_34;
    }
    unsigned int v16 = -v52;
  }
  int v17 = (v53 + ~v52) / v54 + 1;
  if (v55 == 2)
  {
    int v26 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
    CoreML::ShapeConstraint::updateChannelRange(v5, v26);
    int v27 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
    CoreML::ShapeConstraint::updateHeightRange(v5, v27);
    CoreML::ShapeConstraint::setWidth(v5, v17);
    long long v28 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
    CoreML::ShapeConstraint::updateChannelRange(v4, v28);
    unint64_t v29 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
    CoreML::ShapeConstraint::updateHeightRange(v4, v29);
    CoreML::ShapeConstraint::lowerBoundWidth(v4, v16);
  }
  else
  {
    if (v55 == 1)
    {
      uint64_t v22 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
      CoreML::ShapeConstraint::updateChannelRange(v5, v22);
      CoreML::ShapeConstraint::setHeight(v5, v17);
      uint64_t v23 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
      CoreML::ShapeConstraint::updateWidthRange(v5, v23);
      uint64_t v24 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
      CoreML::ShapeConstraint::updateChannelRange(v4, v24);
      CoreML::ShapeConstraint::lowerBoundHeight(v4, v16);
    }
    else
    {
      if (v55)
      {
        long long v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v45, "Slice layer axis incorrect -- should be caught in validator.");
        __cxa_throw(v45, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      CoreML::ShapeConstraint::setChannel(v5, v17);
      uint64_t v18 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
      CoreML::ShapeConstraint::updateHeightRange(v5, v18);
      uint64_t v19 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
      CoreML::ShapeConstraint::updateWidthRange(v5, v19);
      CoreML::ShapeConstraint::lowerBoundChannel(v4, v16);
      uint64_t v20 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      CoreML::ShapeConstraint::updateHeightRange(v4, v20);
    }
    long long v25 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
    CoreML::ShapeConstraint::updateWidthRange(v4, v25);
  }
LABEL_34:
  CoreML::Specification::SliceLayerParams::~SliceLayerParams((CoreML::Specification::SliceLayerParams *)v51);
}

void sub_22430406C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  CoreML::Specification::SliceLayerParams::~SliceLayerParams((CoreML::Specification::SliceLayerParams *)(v2 - 112));
  _Unwind_Resume(a1);
}

uint64_t CoreML::NeuralNetworkShaper::shapeSimpleRecurrentLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  int v13 = *(const void ***)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, v13, (uint64_t)&std::piecewise_construct, (long long **)&v13)+ 7);
  int v13 = *(const void ***)(*((void *)a2 + 7) + 8);
  double v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v13, (uint64_t)&std::piecewise_construct, (long long **)&v13)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  int v13 = *(const void ***)(*((void *)a2 + 4) + 16);
  long long v6 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v13, (uint64_t)&std::piecewise_construct, (long long **)&v13);
  int v13 = *(const void ***)(*((void *)a2 + 7) + 16);
  uint64_t v7 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v13, (uint64_t)&std::piecewise_construct, (long long **)&v13)+ 7);
  uint64_t v8 = CoreML::ShapeConstraint::setName((uint64_t)v7, *(const std::string **)(*((void *)a2 + 7) + 16));
  if (*((_DWORD *)a2 + 35) == 400) {
    uint64_t v9 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v9 = CoreML::Specification::SimpleRecurrentLayerParams::default_instance((CoreML::Specification::SimpleRecurrentLayerParams *)v8);
  }
  unint64_t v10 = v9[7];
  CoreML::ShapeConstraint::setChannel(v4, v9[6]);
  CoreML::ShapeConstraint::setHeight(v4, 1uLL);
  CoreML::ShapeConstraint::setWidth(v4, 1uLL);
  CoreML::ShapeConstraint::setChannel(v5, v10);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  CoreML::ShapeConstraint::setWidth(v5, 1uLL);
  if (*((unsigned char *)v9 + 64))
  {
    turi::neural_net::float_scalar::~float_scalar(v4);
    CoreML::ShapeConstraint::updateSequenceRange(v5, v11);
  }
  else
  {
    CoreML::ShapeConstraint::setSequence(v5, 1uLL);
  }
  CoreML::ShapeConstraint::setSequence((CoreML::ShapeConstraint *)(v6 + 7), 1uLL);
  CoreML::ShapeConstraint::setChannel((CoreML::ShapeConstraint *)(v6 + 7), v10);
  CoreML::ShapeConstraint::setHeight((CoreML::ShapeConstraint *)(v6 + 7), 1uLL);
  CoreML::ShapeConstraint::setWidth((CoreML::ShapeConstraint *)(v6 + 7), 1uLL);
  CoreML::ShapeConstraint::setSequence(v7, 1uLL);
  CoreML::ShapeConstraint::setChannel(v7, v10);
  CoreML::ShapeConstraint::setHeight(v7, 1uLL);
  return CoreML::ShapeConstraint::setWidth(v7, 1uLL);
}

void CoreML::NeuralNetworkShaper::shapeGRULayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  int v12 = *(const void ***)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, v12, (uint64_t)&std::piecewise_construct, (long long **)&v12)+ 7);
  int v12 = *(const void ***)(*((void *)a2 + 7) + 8);
  double v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v12, (uint64_t)&std::piecewise_construct, (long long **)&v12)+ 7);
  long long v6 = CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  if (*((_DWORD *)a2 + 35) == 410) {
    uint64_t v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v7 = CoreML::Specification::GRULayerParams::default_instance((CoreML::Specification::GRULayerParams *)v6);
  }
  unint64_t v8 = v7[15];
  CoreML::ShapeConstraint::setChannel(v4, v7[14]);
  CoreML::ShapeConstraint::setHeight(v4, 1uLL);
  CoreML::ShapeConstraint::setWidth(v4, 1uLL);
  CoreML::ShapeConstraint::setChannel(v5, v8);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  CoreML::ShapeConstraint::setWidth(v5, 1uLL);
  if (*((unsigned char *)v7 + 128))
  {
    turi::neural_net::float_scalar::~float_scalar(v4);
    CoreML::ShapeConstraint::updateSequenceRange(v5, v9);
  }
  else
  {
    CoreML::ShapeConstraint::setSequence(v5, 1uLL);
  }
  if (*((int *)a2 + 6) >= 2)
  {
    int v12 = *(const void ***)(*((void *)a2 + 4) + 16);
    unint64_t v10 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v12, (uint64_t)&std::piecewise_construct, (long long **)&v12)+ 7);
    int v12 = *(const void ***)(*((void *)a2 + 7) + 16);
    long long v11 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v12, (uint64_t)&std::piecewise_construct, (long long **)&v12)+ 7);
    CoreML::ShapeConstraint::setName((uint64_t)v11, *(const std::string **)(*((void *)a2 + 7) + 16));
    CoreML::ShapeConstraint::setSequence(v10, 1uLL);
    CoreML::ShapeConstraint::setChannel(v10, v8);
    CoreML::ShapeConstraint::setHeight(v10, 1uLL);
    CoreML::ShapeConstraint::setWidth(v10, 1uLL);
    CoreML::ShapeConstraint::setSequence(v11, 1uLL);
    CoreML::ShapeConstraint::setChannel(v11, v8);
    CoreML::ShapeConstraint::setHeight(v11, 1uLL);
    CoreML::ShapeConstraint::setWidth(v11, 1uLL);
  }
}

void CoreML::NeuralNetworkShaper::shapeUnidirectionalLSTMLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  int v15 = *(const void ***)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, v15, (uint64_t)&std::piecewise_construct, (long long **)&v15)+ 7);
  int v15 = *(const void ***)(*((void *)a2 + 7) + 8);
  double v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v15, (uint64_t)&std::piecewise_construct, (long long **)&v15)+ 7);
  long long v6 = CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  if (*((_DWORD *)a2 + 35) == 420) {
    uint64_t v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v7 = CoreML::Specification::UniDirectionalLSTMLayerParams::default_instance((CoreML::Specification::UniDirectionalLSTMLayerParams *)v6);
  }
  unint64_t v8 = v7[8];
  CoreML::ShapeConstraint::setChannel(v4, v7[7]);
  CoreML::ShapeConstraint::setHeight(v4, 1uLL);
  CoreML::ShapeConstraint::setWidth(v4, 1uLL);
  CoreML::ShapeConstraint::setChannel(v5, v8);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  CoreML::ShapeConstraint::setWidth(v5, 1uLL);
  uint64_t v9 = (uint64_t *)v7[5];
  if (!v9) {
    uint64_t v9 = &CoreML::Specification::_LSTMParams_default_instance_;
  }
  if (*((unsigned char *)v9 + 20))
  {
    turi::neural_net::float_scalar::~float_scalar(v4);
    CoreML::ShapeConstraint::updateSequenceRange(v5, v10);
  }
  else
  {
    CoreML::ShapeConstraint::setSequence(v5, 1uLL);
  }
  if (*((int *)a2 + 6) >= 3)
  {
    int v15 = *(const void ***)(*((void *)a2 + 4) + 16);
    long long v11 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v15, (uint64_t)&std::piecewise_construct, (long long **)&v15)+ 7);
    int v15 = *(const void ***)(*((void *)a2 + 7) + 16);
    int v12 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v15, (uint64_t)&std::piecewise_construct, (long long **)&v15)+ 7);
    CoreML::ShapeConstraint::setName((uint64_t)v12, *(const std::string **)(*((void *)a2 + 7) + 16));
    int v15 = *(const void ***)(*((void *)a2 + 4) + 24);
    int v13 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v15, (uint64_t)&std::piecewise_construct, (long long **)&v15)+ 7);
    int v15 = *(const void ***)(*((void *)a2 + 7) + 24);
    int v14 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v15, (uint64_t)&std::piecewise_construct, (long long **)&v15)+ 7);
    CoreML::ShapeConstraint::setName((uint64_t)v14, *(const std::string **)(*((void *)a2 + 7) + 24));
    CoreML::ShapeConstraint::setSequence(v11, 1uLL);
    CoreML::ShapeConstraint::setChannel(v11, v8);
    CoreML::ShapeConstraint::setHeight(v11, 1uLL);
    CoreML::ShapeConstraint::setWidth(v11, 1uLL);
    CoreML::ShapeConstraint::setSequence(v13, 1uLL);
    CoreML::ShapeConstraint::setChannel(v13, v8);
    CoreML::ShapeConstraint::setHeight(v13, 1uLL);
    CoreML::ShapeConstraint::setWidth(v13, 1uLL);
    CoreML::ShapeConstraint::setSequence(v12, 1uLL);
    CoreML::ShapeConstraint::setChannel(v12, v8);
    CoreML::ShapeConstraint::setHeight(v12, 1uLL);
    CoreML::ShapeConstraint::setWidth(v12, 1uLL);
    CoreML::ShapeConstraint::setSequence(v14, 1uLL);
    CoreML::ShapeConstraint::setChannel(v14, v8);
    CoreML::ShapeConstraint::setHeight(v14, 1uLL);
    CoreML::ShapeConstraint::setWidth(v14, 1uLL);
  }
}

void CoreML::NeuralNetworkShaper::shapeBidirectionalLSTMLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  uint64_t v20 = *(const void ***)(*((void *)a2 + 4) + 8);
  std::exception_ptr v4 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, v20, (uint64_t)&std::piecewise_construct, (long long **)&v20)+ 7);
  uint64_t v20 = *(const void ***)(*((void *)a2 + 7) + 8);
  double v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (long long **)&v20)+ 7);
  long long v6 = CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  if (*((_DWORD *)a2 + 35) == 430) {
    uint64_t v7 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v7 = CoreML::Specification::BiDirectionalLSTMLayerParams::default_instance((CoreML::Specification::BiDirectionalLSTMLayerParams *)v6);
  }
  unint64_t v9 = v7[12];
  unint64_t v8 = v7[13];
  CoreML::ShapeConstraint::upperBoundSequence(v4, 0x2710uLL);
  CoreML::ShapeConstraint::setChannel(v4, v9);
  CoreML::ShapeConstraint::setHeight(v4, 1uLL);
  CoreML::ShapeConstraint::setWidth(v4, 1uLL);
  CoreML::ShapeConstraint::setChannel(v5, 2 * v8);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  CoreML::ShapeConstraint::setWidth(v5, 1uLL);
  unint64_t v10 = (uint64_t *)v7[11];
  if (!v10) {
    unint64_t v10 = &CoreML::Specification::_LSTMParams_default_instance_;
  }
  if (*((unsigned char *)v10 + 20))
  {
    turi::neural_net::float_scalar::~float_scalar(v4);
    CoreML::ShapeConstraint::updateSequenceRange(v5, v11);
  }
  else
  {
    CoreML::ShapeConstraint::setSequence(v5, 1uLL);
  }
  if (*((int *)a2 + 6) >= 5)
  {
    uint64_t v20 = *(const void ***)(*((void *)a2 + 4) + 16);
    int v12 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (long long **)&v20)+ 7);
    uint64_t v20 = *(const void ***)(*((void *)a2 + 7) + 16);
    int v13 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (long long **)&v20)+ 7);
    CoreML::ShapeConstraint::setName((uint64_t)v13, *(const std::string **)(*((void *)a2 + 7) + 16));
    uint64_t v20 = *(const void ***)(*((void *)a2 + 4) + 24);
    int v14 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (long long **)&v20)+ 7);
    uint64_t v20 = *(const void ***)(*((void *)a2 + 7) + 24);
    int v15 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (long long **)&v20)+ 7);
    CoreML::ShapeConstraint::setName((uint64_t)v15, *(const std::string **)(*((void *)a2 + 7) + 24));
    uint64_t v20 = *(const void ***)(*((void *)a2 + 4) + 32);
    uint64_t v19 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (long long **)&v20)+ 7);
    uint64_t v20 = *(const void ***)(*((void *)a2 + 7) + 32);
    unsigned int v16 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (long long **)&v20)+ 7);
    CoreML::ShapeConstraint::setName((uint64_t)v16, *(const std::string **)(*((void *)a2 + 7) + 32));
    uint64_t v20 = *(const void ***)(*((void *)a2 + 4) + 40);
    int v17 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (long long **)&v20)+ 7);
    uint64_t v20 = *(const void ***)(*((void *)a2 + 7) + 40);
    uint64_t v18 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v20, (uint64_t)&std::piecewise_construct, (long long **)&v20)+ 7);
    CoreML::ShapeConstraint::setName((uint64_t)v18, *(const std::string **)(*((void *)a2 + 7) + 40));
    CoreML::ShapeConstraint::setSequence(v12, 1uLL);
    CoreML::ShapeConstraint::setChannel(v12, v8);
    CoreML::ShapeConstraint::setHeight(v12, 1uLL);
    CoreML::ShapeConstraint::setWidth(v12, 1uLL);
    CoreML::ShapeConstraint::setSequence(v14, 1uLL);
    CoreML::ShapeConstraint::setChannel(v14, v8);
    CoreML::ShapeConstraint::setHeight(v14, 1uLL);
    CoreML::ShapeConstraint::setWidth(v14, 1uLL);
    CoreML::ShapeConstraint::setSequence(v13, 1uLL);
    CoreML::ShapeConstraint::setChannel(v13, v8);
    CoreML::ShapeConstraint::setHeight(v13, 1uLL);
    CoreML::ShapeConstraint::setWidth(v13, 1uLL);
    CoreML::ShapeConstraint::setSequence(v15, 1uLL);
    CoreML::ShapeConstraint::setChannel(v15, v8);
    CoreML::ShapeConstraint::setHeight(v15, 1uLL);
    CoreML::ShapeConstraint::setWidth(v15, 1uLL);
    CoreML::ShapeConstraint::setSequence(v19, 1uLL);
    CoreML::ShapeConstraint::setChannel(v19, v8);
    CoreML::ShapeConstraint::setHeight(v19, 1uLL);
    CoreML::ShapeConstraint::setWidth(v19, 1uLL);
    CoreML::ShapeConstraint::setSequence(v17, 1uLL);
    CoreML::ShapeConstraint::setChannel(v17, v8);
    CoreML::ShapeConstraint::setHeight(v17, 1uLL);
    CoreML::ShapeConstraint::setWidth(v17, 1uLL);
    CoreML::ShapeConstraint::setSequence(v16, 1uLL);
    CoreML::ShapeConstraint::setChannel(v16, v8);
    CoreML::ShapeConstraint::setHeight(v16, 1uLL);
    CoreML::ShapeConstraint::setWidth(v16, 1uLL);
    CoreML::ShapeConstraint::setSequence(v18, 1uLL);
    CoreML::ShapeConstraint::setChannel(v18, v8);
    CoreML::ShapeConstraint::setHeight(v18, 1uLL);
    CoreML::ShapeConstraint::setWidth(v18, 1uLL);
  }
}

std::string *CoreML::NeuralNetworkShaper::shapeCustomLayer(std::string *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  if (*((int *)a2 + 12) >= 1)
  {
    p_std::string::size_type size = (uint64_t **)&this[1].__r_.__value_.__l.__size_;
    uint64_t v4 = 1;
    do
    {
      unint64_t v9 = *(const void ***)(*((void *)a2 + 7) + 8 * v4);
      double v5 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(p_size, v9, (uint64_t)&std::piecewise_construct, (long long **)&v9);
      this = CoreML::ShapeConstraint::setName((uint64_t)(v5 + 7), *(const std::string **)(*((void *)a2 + 7) + 8 * v4));
      uint64_t v6 = *((int *)a2 + 12);
      BOOL v8 = __OFSUB__(v4, v6);
      BOOL v7 = v4 - v6 < 0;
      ++v4;
    }
    while (v7 != v8);
  }
  return this;
}

void CoreML::NeuralNetworkShaper::shapeResizeBilinearLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v25[0] = *(long long **)(*((void *)a2 + 4) + 8);
  uint64_t v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v25[0], (uint64_t)&std::piecewise_construct, v25)+ 7);
  v25[0] = *(long long **)(*((void *)a2 + 7) + 8);
  double v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v25[0], (uint64_t)&std::piecewise_construct, v25)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v5);
  BOOL v7 = v6;
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeRange::intersect(v7, v8, (uint64_t)v25);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v25);
  unint64_t v9 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  unint64_t v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v9, v10, (uint64_t)v25);
  CoreML::ShapeConstraint::updateBatchRange(v5, (const CoreML::ShapeRange *)v25);
  long long v11 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  int v12 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  CoreML::ShapeRange::intersect(v11, v12, (uint64_t)v25);
  CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v25);
  if (*((_DWORD *)a2 + 35) == 211) {
    int v14 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    int v14 = CoreML::Specification::ResizeBilinearLayerParams::default_instance(v13);
  }
  CoreML::Specification::ResizeBilinearLayerParams::ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)v25, (const CoreML::Specification::ResizeBilinearLayerParams *)v14);
  if (v26 == 2)
  {
    if (*(void *)(v27 + 8) <= 1uLL) {
      unint64_t v15 = 1;
    }
    else {
      unint64_t v15 = *(void *)(v27 + 8);
    }
    if (*(void *)(v27 + 16) <= 1uLL) {
      unint64_t v16 = 1;
    }
    else {
      unint64_t v16 = *(void *)(v27 + 16);
    }
  }
  else
  {
    unint64_t v15 = 1;
    unint64_t v16 = 1;
  }
  CoreML::ShapeConstraint::setHeight(v5, v15);
  CoreML::ShapeConstraint::setWidth(v5, v16);
  turi::neural_net::float_scalar::~float_scalar(v4);
  uint64_t v18 = v17;
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeRange::intersect(v18, v19, (uint64_t)v24);
  CoreML::ShapeConstraint::updateSequenceRange(v4, (const CoreML::ShapeRange *)v24);
  uint64_t v20 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  uint64_t v21 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeRange::intersect(v20, v21, (uint64_t)v24);
  CoreML::ShapeConstraint::updateBatchRange(v4, (const CoreML::ShapeRange *)v24);
  uint64_t v22 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  uint64_t v23 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  CoreML::ShapeRange::intersect(v22, v23, (uint64_t)v24);
  CoreML::ShapeConstraint::updateChannelRange(v4, (const CoreML::ShapeRange *)v24);
  CoreML::Specification::ResizeBilinearLayerParams::~ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)v25);
}

void sub_224304E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  CoreML::Specification::ResizeBilinearLayerParams::~ResizeBilinearLayerParams((CoreML::Specification::ResizeBilinearLayerParams *)va);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::shapeCropResizeLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  std::exception_ptr v3 = this + 4;
  v24[0] = *(long long **)(*((void *)a2 + 4) + 8);
  uint64_t v4 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v24[0], (uint64_t)&std::piecewise_construct, v24)+ 7);
  v24[0] = *(long long **)(*((void *)a2 + 4) + 16);
  double v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v24[0], (uint64_t)&std::piecewise_construct, v24)+ 7);
  v24[0] = *(long long **)(*((void *)a2 + 7) + 8);
  uint64_t v6 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v24[0], (uint64_t)&std::piecewise_construct, v24)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v6, *(const std::string **)(*((void *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v6);
  BOOL v8 = v7;
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeRange::intersect(v8, v9, (uint64_t)v24);
  CoreML::ShapeConstraint::updateSequenceRange(v6, (const CoreML::ShapeRange *)v24);
  unint64_t v10 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v6);
  long long v11 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v10, v11, (uint64_t)v24);
  CoreML::ShapeConstraint::updateBatchRange(v6, (const CoreML::ShapeRange *)v24);
  int v12 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v6);
  int v13 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  CoreML::ShapeRange::intersect(v12, v13, (uint64_t)v24);
  CoreML::ShapeConstraint::updateChannelRange(v6, (const CoreML::ShapeRange *)v24);
  if (*((_DWORD *)a2 + 35) == 212) {
    unint64_t v15 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    unint64_t v15 = CoreML::Specification::CropResizeLayerParams::default_instance(v14);
  }
  CoreML::Specification::CropResizeLayerParams::CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)v24, (const CoreML::Specification::CropResizeLayerParams *)v15);
  if (v25 == 2)
  {
    if (*(void *)(v26 + 8) <= 1uLL) {
      unint64_t v16 = 1;
    }
    else {
      unint64_t v16 = *(void *)(v26 + 8);
    }
    if (*(void *)(v26 + 16) <= 1uLL) {
      unint64_t v17 = 1;
    }
    else {
      unint64_t v17 = *(void *)(v26 + 16);
    }
  }
  else
  {
    unint64_t v16 = 1;
    unint64_t v17 = 1;
  }
  CoreML::ShapeConstraint::setHeight(v6, v16);
  CoreML::ShapeConstraint::setWidth(v6, v17);
  uint64_t v18 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  uint64_t v19 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v6);
  CoreML::ShapeRange::intersect(v18, v19, (uint64_t)v23);
  CoreML::ShapeConstraint::updateChannelRange(v4, (const CoreML::ShapeRange *)v23);
  turi::neural_net::float_scalar::~float_scalar(v5);
  uint64_t v21 = v20;
  turi::neural_net::float_scalar::~float_scalar(v6);
  CoreML::ShapeRange::intersect(v21, v22, (uint64_t)v23);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v23);
  CoreML::ShapeConstraint::setBatch(v5, 1uLL);
  CoreML::ShapeRange::ShapeRange((CoreML::ShapeRange *)v23, 4uLL, 5uLL);
  CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v23);
  CoreML::ShapeConstraint::setWidth(v5, 1uLL);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  CoreML::Specification::CropResizeLayerParams::~CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)v24);
}

void sub_2243050E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  CoreML::Specification::CropResizeLayerParams::~CropResizeLayerParams((CoreML::Specification::CropResizeLayerParams *)va);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::ProcessLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  int v2 = *((_DWORD *)a2 + 35);
  if (v2 <= 244)
  {
    if (v2 <= 179)
    {
      if (v2 <= 149)
      {
        if (v2 > 129)
        {
          if (v2 == 130) {
            goto LABEL_95;
          }
          if (v2 != 140) {
            goto LABEL_142;
          }
          CoreML::NeuralNetworkShaper::shapeInnerProductLayer(this, a2);
        }
        else
        {
          switch(v2)
          {
            case 100:
              CoreML::NeuralNetworkShaper::shapeConvolutionLayer(this, a2);
              break;
            case 120:
              CoreML::NeuralNetworkShaper::shapePoolingLayer(this, a2);
              break;
            case 0:
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Layer type not found.");
              goto LABEL_143;
            default:
              goto LABEL_142;
          }
        }
      }
      else
      {
        if (v2 > 164)
        {
          if (v2 != 165 && v2 != 170 && v2 != 175) {
            goto LABEL_142;
          }
          goto LABEL_95;
        }
        if (v2 != 150)
        {
          if (v2 != 160) {
            goto LABEL_142;
          }
          goto LABEL_95;
        }
        CoreML::NeuralNetworkShaper::shapeEmbeddingLayer(this, a2);
      }
    }
    else if (v2 > 211)
    {
      if (v2 <= 229)
      {
        if (v2 != 212)
        {
          if (v2 != 220) {
            goto LABEL_142;
          }
          goto LABEL_95;
        }
        CoreML::NeuralNetworkShaper::shapeCropResizeLayer(this, a2);
      }
      else
      {
        if (v2 != 230 && v2 != 231 && v2 != 240) {
          goto LABEL_142;
        }
        CoreML::NeuralNetworkShaper::shapeBroadcastLayer(this, a2);
      }
    }
    else if (v2 <= 199)
    {
      if (v2 == 180) {
        goto LABEL_95;
      }
      if (v2 != 190) {
        goto LABEL_142;
      }
      CoreML::NeuralNetworkShaper::shapeCropLayer(this, a2);
    }
    else
    {
      switch(v2)
      {
        case 200:
          CoreML::NeuralNetworkShaper::shapePaddingLayer(this, a2);
          break;
        case 210:
          CoreML::NeuralNetworkShaper::shapeUpsampleLayer(this, a2);
          break;
        case 211:
          CoreML::NeuralNetworkShaper::shapeResizeBilinearLayer(this, a2);
          break;
        default:
          goto LABEL_142;
      }
    }
  }
  else if (v2 > 319)
  {
    if (v2 > 399)
    {
      if (v2 <= 419)
      {
        if (v2 == 400)
        {
          CoreML::NeuralNetworkShaper::shapeSimpleRecurrentLayer(this, a2);
        }
        else
        {
          if (v2 != 410) {
            goto LABEL_142;
          }
          CoreML::NeuralNetworkShaper::shapeGRULayer(this, a2);
        }
      }
      else
      {
        switch(v2)
        {
          case 420:
            CoreML::NeuralNetworkShaper::shapeUnidirectionalLSTMLayer(this, a2);
            break;
          case 430:
            CoreML::NeuralNetworkShaper::shapeBidirectionalLSTMLayer(this, a2);
            break;
          case 500:
            CoreML::NeuralNetworkShaper::shapeCustomLayer((std::string *)this, a2);
            break;
          default:
            goto LABEL_142;
        }
      }
    }
    else if (v2 <= 339)
    {
      if (v2 == 320)
      {
        CoreML::NeuralNetworkShaper::shapeConcatLayer(this, a2);
      }
      else
      {
        if (v2 != 330) {
          goto LABEL_142;
        }
        CoreML::NeuralNetworkShaper::shapeSplitLayer(this, a2);
      }
    }
    else
    {
      switch(v2)
      {
        case 340:
          CoreML::NeuralNetworkShaper::shapeSequenceRepeatLayer(this, a2);
          break;
        case 345:
          CoreML::NeuralNetworkShaper::shapeReorganizeDataLayer(this, a2);
          break;
        case 350:
          CoreML::NeuralNetworkShaper::shapeSliceLayer(this, a2);
          break;
        default:
          goto LABEL_142;
      }
    }
  }
  else
  {
    if (v2 <= 279)
    {
      if (v2 > 259)
      {
        if (v2 != 260 && v2 != 261)
        {
          if (v2 == 270)
          {
            CoreML::NeuralNetworkShaper::shapeDotLayer(this, a2);
            return;
          }
          goto LABEL_142;
        }
        goto LABEL_95;
      }
      if (v2 != 245 && v2 != 250)
      {
LABEL_142:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Shape inference not implemented for this layer type.");
LABEL_143:
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
LABEL_95:
      CoreML::NeuralNetworkShaper::shapeUnchanged(this, a2);
      return;
    }
    if (v2 <= 299)
    {
      if (v2 == 280)
      {
        CoreML::NeuralNetworkShaper::shapeReduceLayer(this, a2);
      }
      else
      {
        if (v2 != 290) {
          goto LABEL_142;
        }
        CoreML::NeuralNetworkShaper::shapeLoadConstantLayer(this, a2);
      }
    }
    else
    {
      switch(v2)
      {
        case 300:
          CoreML::NeuralNetworkShaper::shapeReshapeLayer(this, a2);
          break;
        case 301:
          CoreML::NeuralNetworkShaper::shapeFlattenLayer(this, a2);
          break;
        case 310:
          CoreML::NeuralNetworkShaper::shapePermuteLayer(this, a2);
          break;
        default:
          goto LABEL_142;
      }
    }
  }
}

void sub_224305620(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *CoreML::NeuralNetworkShaper::PassColorsDown(char *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v2 = *((void *)a2 + 4);
  if (v2) {
    std::exception_ptr v3 = (const void ***)(v2 + 8);
  }
  else {
    std::exception_ptr v3 = 0;
  }
  uint64_t v4 = *((int *)a2 + 6);
  if (v4)
  {
    uint64_t v18 = &v3[v4];
    uint64_t v6 = (uint64_t **)(this + 8);
    do
    {
      uint64_t v19 = *v3;
      this = (char *)std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v19, (uint64_t)&std::piecewise_construct, (long long **)&v19);
      uint64_t v7 = *((void *)a2 + 7);
      if (v7) {
        BOOL v8 = (const void ***)(v7 + 8);
      }
      else {
        BOOL v8 = 0;
      }
      uint64_t v9 = *((int *)a2 + 12);
      if (v9)
      {
        uint64_t v10 = (uint64_t)this;
        long long v11 = &v8[v9];
        int v12 = this + 64;
        do
        {
          uint64_t v19 = *v8;
          this = (char *)std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v19, (uint64_t)&std::piecewise_construct, (long long **)&v19);
          int v13 = *(void **)(v10 + 56);
          if (v13 != v12)
          {
            int v14 = (uint64_t **)(this + 56);
            do
            {
              LODWORD(v19) = *((_DWORD *)v13 + 7);
              this = (char *)std::__tree<int>::__emplace_unique_key_args<int,int const&>(v14, (int *)&v19, &v19);
              unint64_t v15 = (void *)v13[1];
              if (v15)
              {
                do
                {
                  unint64_t v16 = v15;
                  unint64_t v15 = (void *)*v15;
                }
                while (v15);
              }
              else
              {
                do
                {
                  unint64_t v16 = (void *)v13[2];
                  BOOL v17 = *v16 == (void)v13;
                  int v13 = v16;
                }
                while (!v17);
              }
              int v13 = v16;
            }
            while (v16 != v12);
          }
          ++v8;
        }
        while (v8 != v11);
      }
      ++v3;
    }
    while (v3 != v18);
  }
  return this;
}

char *CoreML::NeuralNetworkShaper::PassColorsUp(char *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t v2 = *((void *)a2 + 7);
  if (v2) {
    std::exception_ptr v3 = (const void ***)(v2 + 8);
  }
  else {
    std::exception_ptr v3 = 0;
  }
  uint64_t v4 = *((int *)a2 + 12);
  if (v4)
  {
    uint64_t v18 = &v3[v4];
    uint64_t v6 = (uint64_t **)(this + 8);
    do
    {
      uint64_t v19 = *v3;
      this = (char *)std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v19, (uint64_t)&std::piecewise_construct, (long long **)&v19);
      uint64_t v7 = *((void *)a2 + 4);
      if (v7) {
        BOOL v8 = (const void ***)(v7 + 8);
      }
      else {
        BOOL v8 = 0;
      }
      uint64_t v9 = *((int *)a2 + 6);
      if (v9)
      {
        uint64_t v10 = (uint64_t)this;
        long long v11 = &v8[v9];
        int v12 = this + 64;
        do
        {
          uint64_t v19 = *v8;
          this = (char *)std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v19, (uint64_t)&std::piecewise_construct, (long long **)&v19);
          int v13 = *(void **)(v10 + 56);
          if (v13 != v12)
          {
            int v14 = (uint64_t **)(this + 56);
            do
            {
              LODWORD(v19) = *((_DWORD *)v13 + 7);
              this = (char *)std::__tree<int>::__emplace_unique_key_args<int,int const&>(v14, (int *)&v19, &v19);
              unint64_t v15 = (void *)v13[1];
              if (v15)
              {
                do
                {
                  unint64_t v16 = v15;
                  unint64_t v15 = (void *)*v15;
                }
                while (v15);
              }
              else
              {
                do
                {
                  unint64_t v16 = (void *)v13[2];
                  BOOL v17 = *v16 == (void)v13;
                  int v13 = v16;
                }
                while (!v17);
              }
              int v13 = v16;
            }
            while (v16 != v12);
          }
          ++v8;
        }
        while (v8 != v11);
      }
      ++v3;
    }
    while (v3 != v18);
  }
  return this;
}

BOOL CoreML::NeuralNetworkShaper::AllShapesDone(CoreML::NeuralNetworkShaper *this)
{
  uint64_t v1 = (char *)*((void *)this + 1);
  uint64_t v2 = (char *)this + 16;
  if (v1 == (char *)this + 16) {
    return 1;
  }
  int v3 = *(_DWORD *)this;
  do
  {
    int v4 = *((_DWORD *)v1 + 18);
    BOOL result = v3 == v4;
    if (v3 != v4) {
      break;
    }
    uint64_t v6 = (char *)*((void *)v1 + 1);
    if (v6)
    {
      do
      {
        uint64_t v7 = v6;
        uint64_t v6 = *(char **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v1 + 2);
        BOOL v8 = *(void *)v7 == (void)v1;
        uint64_t v1 = v7;
      }
      while (!v8);
    }
    uint64_t v1 = v7;
  }
  while (v7 != v2);
  return result;
}

uint64_t CoreML::NeuralNetworkShaper::NeuralNetworkShaper(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  uint64_t v9 = (uint64_t **)(a1 + 8);
  *(_DWORD *)a1 = v8;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 4CoreML::Specification::GLMClassifier::New(this, 0) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  uint64_t v74 = a1 + 40;
  uint64_t v75 = (uint64_t **)(a1 + 32);
  *(void *)(a1 + 48) = 0;
  int v78 = 0;
  if (*(int *)(a2 + 24) >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(*(void *)(a2 + 32) + 8 * v10 + 8);
      uint64_t v76 = *(const void ***)(v11 + 16);
      int v12 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v75, v76, (uint64_t)&std::piecewise_construct, (long long **)&v76)+ 7);
      CoreML::ShapeConstraint::setName((uint64_t)v12, *(const std::string **)(v11 + 16));
      uint64_t v76 = *(const void ***)(v11 + 16);
      int v13 = std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, v76, (uint64_t)&std::piecewise_construct, (long long **)&v76);
      std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)v13 + 7, &v78, &v78);
      if (a4)
      {
        if (*(void *)(v11 + 32)) {
          int v14 = *(const CoreML::Specification::FeatureType **)(v11 + 32);
        }
        else {
          int v14 = (const CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_;
        }
        CoreML::ShapeConstraint::updateConstraint(v12, v14);
      }
      int v10 = v78 + 1;
      int v78 = v10;
    }
    while (v10 < *(_DWORD *)(a2 + 24));
  }
  do
  {
    std::map<std::string,std::set<int>>::map[abi:ne180100]((uint64_t *)&v76, (const void ***)v9);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
    if ((int)v15 >= 1)
    {
      uint64_t v16 = 0;
      do
      {
        BOOL v17 = *(const CoreML::Specification::NeuralNetworkLayer **)(*(void *)(a3 + 16) + 8 * v16 + 8);
        CoreML::NeuralNetworkShaper::PassColorsDown((char *)a1, v17);
        CoreML::NeuralNetworkShaper::ProcessLayer((uint64_t **)a1, v17);
        ++v16;
        uint64_t v15 = *(int *)(a3 + 8);
      }
      while (v16 < v15);
    }
    for (uint64_t i = v15; (int)i > 0; --i)
    {
      uint64_t v19 = *(const CoreML::Specification::NeuralNetworkLayer **)(*(void *)(a3 + 16) + 8 * i);
      CoreML::NeuralNetworkShaper::PassColorsUp((char *)a1, v19);
      CoreML::NeuralNetworkShaper::ProcessLayer((uint64_t **)a1, v19);
    }
    BOOL v20 = CoreML::NeuralNetworkShaper::AllShapesDone((CoreML::NeuralNetworkShaper *)a1);
    if (v77[1] == *(void **)(a1 + 24))
    {
      uint64_t v21 = (long long *)v76;
      if (v76 == (const void **)v77)
      {
        BOOL v23 = 1;
      }
      else
      {
        uint64_t v22 = *v9;
        do
        {
          BOOL v23 = std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::set<int>>,std::pair<std::string const,std::set<int>>>((uint64_t)&v78, (unsigned __int8 *)v21 + 32, (unsigned __int8 *)v22 + 32);
          if (!v23) {
            break;
          }
          uint64_t v24 = (long long *)*((void *)v21 + 1);
          int v25 = v21;
          if (v24)
          {
            do
            {
              uint64_t v21 = v24;
              uint64_t v24 = *(long long **)v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              uint64_t v21 = (long long *)*((void *)v25 + 2);
              BOOL v39 = *(void *)v21 == (void)v25;
              int v25 = v21;
            }
            while (!v39);
          }
          uint64_t v26 = (uint64_t *)v22[1];
          if (v26)
          {
            do
            {
              uint64_t v27 = v26;
              uint64_t v26 = (uint64_t *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v27 = (uint64_t *)v22[2];
              BOOL v39 = *v27 == (void)v22;
              uint64_t v22 = v27;
            }
            while (!v39);
          }
          uint64_t v22 = v27;
        }
        while (v21 != (long long *)v77);
      }
    }
    else
    {
      BOOL v23 = 0;
    }
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy((uint64_t)&v76, v77[0]);
  }
  while (!v23 && !v20);
  if (a4 && *(int *)(a2 + 48) >= 1)
  {
    for (uint64_t j = 0; j < *(int *)(a2 + 48); ++j)
    {
      uint64_t v29 = *(void *)(*(void *)(a2 + 56) + 8 * j + 8);
      long long v30 = *(const void ***)(v29 + 16);
      size_t v31 = *((unsigned __int8 *)v30 + 23);
      size_t v32 = v31;
      signed int v33 = v30;
      if (*((char *)v30 + 23) < 0)
      {
        signed int v33 = *v30;
        size_t v32 = (size_t)v30[1];
      }
      uint64_t v34 = *(void *)(a2 + 96);
      int v35 = *(char *)(v34 + 23);
      if (v35 >= 0) {
        size_t v36 = *(unsigned __int8 *)(v34 + 23);
      }
      else {
        size_t v36 = *(void *)(v34 + 8);
      }
      if (v35 >= 0) {
        uint64_t v37 = *(const void **)(a2 + 96);
      }
      else {
        uint64_t v37 = *(const void **)v34;
      }
      if (v36 >= v32) {
        size_t v38 = v32;
      }
      else {
        size_t v38 = v36;
      }
      BOOL v39 = !memcmp(v33, v37, v38) && v36 == v32;
      if (v39) {
        continue;
      }
      long long v40 = v30;
      if ((v31 & 0x80) != 0)
      {
        long long v40 = *v30;
        size_t v31 = (size_t)v30[1];
      }
      uint64_t v41 = *(void *)(a2 + 88);
      int v42 = *(char *)(v41 + 23);
      size_t v43 = v42 >= 0 ? *(unsigned __int8 *)(v41 + 23) : *(void *)(v41 + 8);
      long long v44 = v42 >= 0 ? *(const void **)(a2 + 88) : *(const void **)v41;
      size_t v45 = v43 >= v31 ? v31 : v43;
      BOOL v46 = !memcmp(v40, v44, v45) && v43 == v31;
      if (v46
        || v74 == std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v75, v30))
      {
        continue;
      }
      long long v47 = (CoreML::ShapeConstraint *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v75, *(const void ***)(v29 + 16));
      long long v48 = v47;
      long long v49 = *(uint64_t **)(v29 + 32);
      if (!v49) {
        long long v49 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      int v50 = *((_DWORD *)v49 + 9);
      if (v50 == 5)
      {
        int v55 = (uint64_t *)v49[3];
      }
      else
      {
        if (v50 == 4)
        {
          if (*(_DWORD *)(v49[3] + 32) == 10) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = 3;
          }
          int v52 = (CoreML::Specification::ImageFeatureType *)CoreML::ShapeConstraint::setChannel(v47, v51);
          int v53 = *(uint64_t **)(v29 + 32);
          if (!v53) {
            int v53 = &CoreML::Specification::_FeatureType_default_instance_;
          }
          if (*((_DWORD *)v53 + 9) == 4) {
            int v54 = (uint64_t *)v53[3];
          }
          else {
            int v54 = CoreML::Specification::ImageFeatureType::default_instance(v52);
          }
          uint64_t v60 = (CoreML::Specification::ImageFeatureType *)CoreML::ShapeConstraint::setHeight(v48, v54[3]);
          int v61 = *(uint64_t **)(v29 + 32);
          if (!v61) {
            int v61 = &CoreML::Specification::_FeatureType_default_instance_;
          }
          if (*((_DWORD *)v61 + 9) == 4) {
            uint64_t v62 = (uint64_t *)v61[3];
          }
          else {
            uint64_t v62 = CoreML::Specification::ImageFeatureType::default_instance(v60);
          }
          uint64_t v68 = (unint64_t *)(v62 + 2);
LABEL_113:
          unint64_t v72 = *v68;
          goto LABEL_116;
        }
        int v55 = CoreML::Specification::ArrayFeatureType::default_instance(v47);
      }
      uint64_t v56 = *(uint64_t **)(v29 + 32);
      if (!v56) {
        uint64_t v56 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      int v57 = *((_DWORD *)v56 + 9);
      if (*((_DWORD *)v55 + 4) == 3)
      {
        if (v57 == 5) {
          uint64_t v58 = (uint64_t *)v56[3];
        }
        else {
          uint64_t v58 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v55);
        }
        uint64_t v63 = (CoreML::Specification::ArrayFeatureType *)CoreML::ShapeConstraint::setChannel(v48, *(void *)(v58[3] + 8));
        long long v64 = *(uint64_t **)(v29 + 32);
        if (!v64) {
          long long v64 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v64 + 9) == 5) {
          uint64_t v65 = (uint64_t *)v64[3];
        }
        else {
          uint64_t v65 = CoreML::Specification::ArrayFeatureType::default_instance(v63);
        }
        signed int v69 = (CoreML::Specification::ArrayFeatureType *)CoreML::ShapeConstraint::setHeight(v48, *(void *)(v65[3] + 16));
        int v70 = *(uint64_t **)(v29 + 32);
        if (!v70) {
          int v70 = &CoreML::Specification::_FeatureType_default_instance_;
        }
        if (*((_DWORD *)v70 + 9) == 5) {
          std::string::size_type v71 = (uint64_t *)v70[3];
        }
        else {
          std::string::size_type v71 = CoreML::Specification::ArrayFeatureType::default_instance(v69);
        }
        uint64_t v68 = (unint64_t *)(v71[3] + 24);
        goto LABEL_113;
      }
      if (v57 == 5) {
        uint64_t v59 = (uint64_t *)v56[3];
      }
      else {
        uint64_t v59 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v55);
      }
      if (*((_DWORD *)v59 + 4) != 1) {
        continue;
      }
      long long v66 = *(uint64_t **)(v29 + 32);
      if (!v66) {
        long long v66 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v66 + 9) == 5) {
        uint64_t v67 = (uint64_t *)v66[3];
      }
      else {
        uint64_t v67 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v59);
      }
      CoreML::ShapeConstraint::setChannel(v48, *(void *)(v67[3] + 8));
      CoreML::ShapeConstraint::setHeight(v48, 1uLL);
      unint64_t v72 = 1;
LABEL_116:
      CoreML::ShapeConstraint::setWidth(v48, v72);
    }
  }
  return a1;
}

void sub_224305E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12)
{
  std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(a12, *a11);
  std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(v12, *a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0xF0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL result = std::pair<std::string const,CoreML::ShapeConstraint>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_224305FD8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,CoreML::ShapeConstraint>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::ShapeConstraint::ShapeConstraint((CoreML::ShapeConstraint *)&this[1]);
  return this;
}

void sub_224306048(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,CoreML::ShapeConstraint>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::ShapeConstraint>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *std::vector<CoreML::ShapeRange>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    unint64_t v5 = v4 + 32 * a2;
    uint64_t v6 = 32 * a2;
    do
    {
      CoreML::ShapeRange::ShapeRange(v4);
      v4 += 32;
      v6 -= 32;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_224306124(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_224306278(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<int>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::map<std::string,std::set<int>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::set<int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<int>>,std::__tree_node<std::__value_type<std::string,std::set<int>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_224306328(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::set<int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::set<int>>,std::__tree_node<std::__value_type<std::string,std::set<int>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      BOOL result = std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<int>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::set<int>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__construct_node<std::pair<std::string const,std::set<int>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::__construct_node<std::pair<std::string const,std::set<int>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL result = std::pair<std::string const,std::set<int>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2243064B8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<int>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::set<int>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<int>::set[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_22430652C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_224306588(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      BOOL result = std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(v5, v6, v4 + 7, v4 + 7);
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          int v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t v6 = std::__tree<int>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<int>::__find_equal<int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        int v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      BOOL v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,std::set<int>>,std::pair<std::string const,std::set<int>>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5)) {
      return 0;
    }
  }
  else if (v4)
  {
    uint64_t v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  if (*((void *)a2 + 5) != *((void *)a3 + 5)) {
    return 0;
  }
  uint64_t v12 = (unsigned __int8 *)*((void *)a2 + 3);
  if (v12 == a2 + 32) {
    return 1;
  }
  int v13 = (void *)*((void *)a3 + 3);
  do
  {
    int v14 = *((_DWORD *)v12 + 7);
    int v15 = *((_DWORD *)v13 + 7);
    BOOL result = v14 == v15;
    if (v14 != v15) {
      break;
    }
    BOOL v17 = (unsigned __int8 *)*((void *)v12 + 1);
    int v18 = v12;
    if (v17)
    {
      do
      {
        uint64_t v12 = v17;
        BOOL v17 = *(unsigned __int8 **)v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        uint64_t v12 = (unsigned __int8 *)*((void *)v18 + 2);
        BOOL v19 = *(void *)v12 == (void)v18;
        int v18 = v12;
      }
      while (!v19);
    }
    uint64_t v20 = (void *)v13[1];
    if (v20)
    {
      do
      {
        uint64_t v21 = v20;
        uint64_t v20 = (void *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        uint64_t v21 = (void *)v13[2];
        BOOL v19 = *v21 == (void)v13;
        int v13 = v21;
      }
      while (!v19);
    }
    int v13 = v21;
  }
  while (v12 != a2 + 32);
  return result;
}

void CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/AudioFeaturePrint.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  qword_26808DAE8 = 0;
  *(void *)&dword_26808DAF0 = 0;
  CoreML::Specification::CoreMLModels::_AudioFeaturePrint_Sound_default_instance_ = (uint64_t)&unk_26D777EF0;
  byte_26808DAF8 = 1;
  CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_ = (uint64_t)&unk_26D777F88;
  unk_26808DB08 = 0;
  qword_26808DB18 = 0;
  byte_26808DB20 = 1;
}

void CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_224306ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::AudioFeaturePrint_Sound(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  *(void *)this = &unk_26D777EF0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)&CoreML::Specification::CoreMLModels::_AudioFeaturePrint_Sound_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  return this;
}

void sub_224306B30(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::~AudioFeaturePrint_Sound(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  *(void *)this = &unk_26D777EF0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D777EF0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224306C40(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>);
  }
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      size_t v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_6:
        TagFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = *a2;
      if (*a2 >= a2[1])
      {
        int v12 = 0;
      }
      else
      {
        int v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_22;
        }
      }
      Varint32Fallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v12);
      int v12 = Varint32Fallback;
      if (Varint32Fallback < 0) {
        return 0;
      }
LABEL_22:
      *((_DWORD *)this + 4) = v12;
    }
    if (v7) {
      BOOL v10 = (v7 & 7) == 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  signed int v5 = *(_DWORD *)(this + 16);
  if (v5) {
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt32(1, v5, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::ByteSizeLong(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  int v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0) {
      uint64_t v2 = 11;
    }
    else {
      uint64_t v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

std::string *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  char v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5) {
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::IsInitialized(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
  return 1;
}

void *CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.AudioFeaturePrint.Sound");
}

CoreML::Specification::CoreMLModels::AudioFeaturePrint *CoreML::Specification::CoreMLModels::AudioFeaturePrint::AudioFeaturePrint(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  *(void *)this = &unk_26D777F88;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)&CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_224306E98(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint::~AudioFeaturePrint(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  *(void *)this = &unk_26D777F88;
  CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::CoreMLModels::AudioFeaturePrint::~AudioFeaturePrint(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::CoreMLModels::AudioFeaturePrint::default_instance(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  return &CoreML::Specification::CoreMLModels::_AudioFeaturePrint_default_instance_;
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224306FB0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::AudioFeaturePrint>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint>);
  }
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::Clear(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_DWORD *)(this + 28) == 20)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = *(unsigned __int8 **)a2;
      unint64_t v6 = *((void *)a2 + 1);
      if (*(void *)a2 < v6) {
        break;
      }
      uint64_t v8 = 0;
LABEL_22:
      TagFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0) {
        goto LABEL_23;
      }
LABEL_8:
      if (v9 != 162 || (v9 & 0xFFFFFFF8) != 0xA0) {
        goto LABEL_23;
      }
      if (*((_DWORD *)this + 7) != 20)
      {
        *((_DWORD *)this + 7) = 20;
        operator new();
      }
      uint64_t v11 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *)*((void *)this + 2);
      int v12 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        VarintSizeAsIntFallbacuint64_t k = *v12;
        *(void *)a2 = v12 + 1;
      }
      unint64_t v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        int v16 = v14;
        uint64_t result = CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::MergePartialFromCodedStream(v11, (char **)a2, v15);
        if (!result) {
          return result;
        }
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v16)) {
          continue;
        }
      }
      return 0;
    }
    unint64_t v7 = v5 + 1;
    uint64_t v8 = *v5;
    if ((char)*v5 < 1)
    {
      if ((unint64_t)v7 < v6)
      {
        int v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(void *)a2 = v5 + 2;
          unint64_t v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_8;
        }
      }
      goto LABEL_22;
    }
    *(void *)a2 = v7;
    unint64_t v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0) {
      goto LABEL_8;
    }
LABEL_23:
    if (!v9 || (v9 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_2243071F0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_DWORD *)(this + 28) == 20) {
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x14, *(void *)(this + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::ByteSizeLong(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  if (*((_DWORD *)this + 7) == 20)
  {
    uint64_t v1 = *((void *)this + 2);
    int v2 = *(_DWORD *)(v1 + 16);
    if (v2)
    {
      if (v2 < 0) {
        uint64_t v3 = 11;
      }
      else {
        uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
    *(_DWORD *)(v1 + 2CoreML::Specification::GLMClassifier::New(this, 0) = v3;
    uint64_t v4 = v3 + 3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 6) = v4;
  return v4;
}

std::string *CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::AudioFeaturePrint *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (*((_DWORD *)a2 + 7) == 20)
  {
    if (HIDWORD(v3[1].__r_.__value_.__r.__words[0]) != 20)
    {
      HIDWORD(v3[1].__r_.__value_.__r.__words[0]) = 20;
      operator new();
    }
    std::string::size_type v5 = v3->__r_.__value_.__r.__words[2];
    uint64_t v6 = *((void *)a2 + 2);
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7) {
      this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)(v5 + 8), v7 & 0xFFFFFFFFFFFFFFFELL);
    }
    int v8 = *(_DWORD *)(v6 + 16);
    if (v8) {
      *(_DWORD *)(v5 + 16) = v8;
    }
  }
  return this;
}

void sub_224307368(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::AudioFeaturePrint::IsInitialized(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
  return 1;
}

void *CoreML::Specification::CoreMLModels::AudioFeaturePrint::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.AudioFeaturePrint");
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound *this)
{
}

void CoreML::Specification::CoreMLModels::AudioFeaturePrint::New(CoreML::Specification::CoreMLModels::AudioFeaturePrint *this)
{
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint_Sound>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::AudioFeaturePrint>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void turi::wrap_image(turi *this, const turi::image_type *a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  MEMORY[0x22A615770]();
  v2[0] = 0;
  v2[1] = v2;
  void v2[2] = 0x4012000000;
  v2[3] = __Block_byref_object_copy__3;
  v2[4] = __Block_byref_object_dispose__3;
  v2[5] = "";
  *(void *)&v3[5] = 0x800000000000000;
  *(void *)uint64_t v3 = 0;
  operator new();
}

void sub_224307CD0(_Unwind_Exception *a1)
{
  *(void *)(v1 - 96) = v1 - 128;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 96));
  switch(*(unsigned char *)(v1 - 60))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v1 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v3 = *(void *)(v1 - 72);
      if (!v3) {
        goto LABEL_27;
      }
      if (*(char *)(v3 + 31) < 0) {
        operator delete(*(void **)(v3 + 8));
      }
      uint64_t v4 = (void *)v3;
      uint64_t v5 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v1 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v9 = *(void **)(v1 - 72);
      if (!v9) {
        goto LABEL_27;
      }
      int v10 = (void *)v9[1];
      if (v10)
      {
        v9[2] = v10;
        operator delete(v10);
      }
      uint64_t v4 = v9;
      uint64_t v5 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v1 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v6 = *(void **)(v1 - 72);
      if (!v6) {
        goto LABEL_27;
      }
      *(void *)(v1 - 96) = v6 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 96));
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v1 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v6 = *(void **)(v1 - 72);
      if (!v6) {
        goto LABEL_27;
      }
      *(void *)(v1 - 96) = v6 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 96));
LABEL_21:
      uint64_t v4 = v6;
      uint64_t v5 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v1 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v11 = *(void *)(v1 - 72);
      if (!v11) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v11 + 16));
      uint64_t v4 = (void *)v11;
      unsigned int v8 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v1 - 72), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v7 = *(void **)(v1 - 72);
      if (!v7) {
        goto LABEL_27;
      }
      uint64_t v4 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v7);
      unsigned int v8 = 2071181815;
LABEL_25:
      uint64_t v5 = v8 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v4, v5);
LABEL_27:
      *(void *)(v1 - 72) = 0;
      *(_DWORD *)(v1 - 64) = 0;
      *(unsigned char *)(v1 - 6CoreML::Specification::CoreMLModels::AudioFeaturePrint::New(this, 0) = 0;
      switch(*(unsigned char *)(v1 - 76))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v1 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          uint64_t v12 = *(void *)(v1 - 88);
          if (!v12) {
            goto LABEL_53;
          }
          if (*(char *)(v12 + 31) < 0) {
            operator delete(*(void **)(v12 + 8));
          }
          int v13 = (void *)v12;
          uint64_t v14 = 0x1012C404EF22A49;
          goto LABEL_52;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v1 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          int v18 = *(void **)(v1 - 88);
          if (!v18) {
            goto LABEL_53;
          }
          BOOL v19 = (void *)v18[1];
          if (v19)
          {
            uint64_t v18[2] = v19;
            operator delete(v19);
          }
          int v13 = v18;
          uint64_t v14 = 0x1080C409938AC02;
          goto LABEL_52;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v1 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          unsigned int v15 = *(void **)(v1 - 88);
          if (!v15) {
            goto LABEL_53;
          }
          *(void *)(v1 - 96) = v15 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 96));
          goto LABEL_51;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v1 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          unsigned int v15 = *(void **)(v1 - 88);
          if (!v15) {
            goto LABEL_53;
          }
          *(void *)(v1 - 96) = v15 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 96));
LABEL_51:
          int v13 = v15;
          uint64_t v14 = 0x1020C405E66F15BLL;
          goto LABEL_52;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v1 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          uint64_t v20 = *(void *)(v1 - 88);
          if (!v20) {
            goto LABEL_53;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v20 + 16));
          int v13 = (void *)v20;
          unsigned int v17 = -235920773;
          goto LABEL_50;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v1 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_53;
          }
          int v16 = *(void **)(v1 - 88);
          if (!v16) {
            goto LABEL_53;
          }
          int v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v16);
          unsigned int v17 = 2071181815;
LABEL_50:
          uint64_t v14 = v17 | 0x1030C4000000000;
LABEL_52:
          MEMORY[0x22A614FA0](v13, v14);
LABEL_53:
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_53;
      }
    default:
      goto LABEL_27;
  }
}

__n128 __Block_byref_object_copy__3(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN4turi10wrap_imageERKNS_10image_typeE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  int v2 = *(std::__shared_weak_count **)(v1 + 56);
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__shared_ptr_emplace<turi::image_type>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D778050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::image_type>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D778050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<turi::image_type>::__on_zero_shared(uint64_t a1)
{
}

void *std::allocate_shared[abi:ne180100]<turi::neural_net::CoreImageImage,std::allocator<turi::neural_net::CoreImageImage>,CIImage * {__strong}&,void>@<X0>(CIImage **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x28uLL);
  __n128 result = std::__shared_ptr_emplace<turi::neural_net::CoreImageImage>::__shared_ptr_emplace[abi:ne180100]<CIImage * {__strong}&,std::allocator<turi::neural_net::CoreImageImage>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_224308388(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::neural_net::CoreImageImage>::__shared_ptr_emplace[abi:ne180100]<CIImage * {__strong}&,std::allocator<turi::neural_net::CoreImageImage>,0>(void *a1, CIImage **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D7780A0;
  turi::neural_net::CoreImageImage::CoreImageImage((turi::neural_net::CoreImageImage *)(a1 + 3), *a2);
  return a1;
}

void sub_2243083E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::CoreImageImage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7780A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CoreImageImage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7780A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CoreImageImage>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

float turi::neural_net::xavier_weight_initializer::xavier_weight_initializer(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  float result = sqrtf(3.0 / (float)((float)((float)a3 * 0.5) + (float)((float)a2 * 0.5)));
  *(float *)a1 = -result;
  *(float *)(a1 + 4) = result;
  *(void *)(a1 + 8) = a4;
  return result;
}

uint64_t turi::neural_net::xavier_weight_initializer::operator()(uint64_t result, float *a2, float *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    do
    {
      float v6 = *(float *)(v5 + 4) - *(float *)v5;
      float result = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)(v5 + 8));
      *v4++ = *(float *)v5 + (float)(v6 * (float)((float)result * 2.3283e-10));
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t turi::neural_net::uniform_weight_initializer::uniform_weight_initializer(uint64_t result, uint64_t a2, float a3, float a4)
{
  *(float *)float result = a3;
  *(float *)(result + 4) = a4;
  *(void *)(result + 8) = a2;
  return result;
}

float *turi::neural_net::scalar_weight_initializer::scalar_weight_initializer(float *this, float a2)
{
  *this = a2;
  return this;
}

float turi::neural_net::scalar_weight_initializer::operator()(float *a1, _DWORD *a2, _DWORD *a3)
{
  while (a2 != a3)
  {
    float result = *a1;
    *a2++ = *(_DWORD *)a1;
  }
  return result;
}

void *turi::neural_net::lstm_weight_initializers::create_with_xavier_method@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  float v5 = (float)a2 * 0.5;
  float v6 = sqrtf(3.0 / (float)(v5 + (float)((float)a1 * 0.5)));
  a4[3] = 0;
  a4[7] = 0;
  a4[11] = 0;
  a4[15] = 0;
  a4[19] = 0;
  a4[23] = 0;
  a4[27] = 0;
  a4[31] = 0;
  a4[35] = 0;
  float v7 = sqrtf(3.0 / (float)(v5 + v5));
  unsigned int v8 = a4 + 4;
  unint64_t v9 = a4 + 8;
  int v10 = a4 + 12;
  a4[39] = 0;
  a4[43] = 0;
  a4[47] = 0;
  uint64_t v11 = a4 + 16;
  uint64_t v12 = a4 + 20;
  int v13 = a4 + 24;
  uint64_t v14 = a4 + 28;
  float v21 = -v6;
  float v22 = v6;
  unsigned int v15 = a4 + 32;
  unsigned int v17 = a4 + 36;
  int v18 = a4 + 40;
  BOOL v19 = a4 + 44;
  uint64_t v20 = &unk_26D755798;
  uint64_t v23 = a3;
  uint64_t v24 = &v20;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](&v20, a4);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v20);
  uint64_t v20 = &unk_26D755798;
  float v21 = -v6;
  float v22 = v6;
  uint64_t v23 = a3;
  uint64_t v24 = &v20;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](&v20, v8);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v20);
  uint64_t v20 = &unk_26D755798;
  float v21 = -v6;
  float v22 = v6;
  uint64_t v23 = a3;
  uint64_t v24 = &v20;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](&v20, v9);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v20);
  uint64_t v20 = &unk_26D755798;
  float v21 = -v6;
  float v22 = v6;
  uint64_t v23 = a3;
  uint64_t v24 = &v20;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](&v20, v10);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v20);
  uint64_t v20 = &unk_26D755798;
  float v21 = -v7;
  float v22 = v7;
  uint64_t v23 = a3;
  uint64_t v24 = &v20;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](&v20, v11);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v20);
  uint64_t v20 = &unk_26D755798;
  float v21 = -v7;
  float v22 = v7;
  uint64_t v23 = a3;
  uint64_t v24 = &v20;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](&v20, v12);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v20);
  uint64_t v20 = &unk_26D755798;
  float v21 = -v7;
  float v22 = v7;
  uint64_t v23 = a3;
  uint64_t v24 = &v20;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](&v20, v13);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v20);
  uint64_t v20 = &unk_26D755798;
  float v21 = -v7;
  float v22 = v7;
  uint64_t v23 = a3;
  uint64_t v24 = &v20;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](&v20, v14);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v20);
  uint64_t v20 = &unk_26D755828;
  uint64_t v24 = &v20;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](&v20, v15);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v20);
  uint64_t v20 = &unk_26D755828;
  uint64_t v24 = &v20;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](&v20, v17);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v20);
  uint64_t v20 = &unk_26D755828;
  uint64_t v24 = &v20;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](&v20, v18);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v20);
  uint64_t v20 = &unk_26D755828;
  uint64_t v24 = &v20;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](&v20, v19);
  return std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](&v20);
}

void *turi::neural_net::lstm_weight_initializers::create_with_zero@<X0>(void *a1@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  a1[3] = 0;
  int v2 = a1 + 4;
  a1[7] = 0;
  uint64_t v3 = a1 + 8;
  a1[11] = 0;
  uint64_t v4 = a1 + 12;
  a1[15] = 0;
  float v5 = a1 + 16;
  a1[19] = 0;
  float v6 = a1 + 20;
  a1[23] = 0;
  float v7 = a1 + 24;
  a1[27] = 0;
  unsigned int v8 = a1 + 28;
  a1[31] = 0;
  unint64_t v9 = a1 + 32;
  a1[35] = 0;
  int v10 = a1 + 36;
  a1[39] = 0;
  a1[43] = 0;
  uint64_t v12 = a1 + 40;
  int v13 = a1 + 44;
  a1[47] = 0;
  v14[0] = &unk_26D755828;
  unsigned int v15 = v14;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](v14, a1);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v14);
  v14[0] = &unk_26D755828;
  unsigned int v15 = v14;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](v14, v2);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v14);
  v14[0] = &unk_26D755828;
  unsigned int v15 = v14;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](v14, v3);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v14);
  v14[0] = &unk_26D755828;
  unsigned int v15 = v14;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](v14, v4);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v14);
  v14[0] = &unk_26D755828;
  unsigned int v15 = v14;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](v14, v5);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v14);
  v14[0] = &unk_26D755828;
  unsigned int v15 = v14;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](v14, v6);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v14);
  v14[0] = &unk_26D755828;
  unsigned int v15 = v14;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](v14, v7);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v14);
  v14[0] = &unk_26D755828;
  unsigned int v15 = v14;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](v14, v8);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v14);
  v14[0] = &unk_26D755828;
  unsigned int v15 = v14;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](v14, v9);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v14);
  v14[0] = &unk_26D755828;
  unsigned int v15 = v14;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](v14, v10);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v14);
  v14[0] = &unk_26D755828;
  unsigned int v15 = v14;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](v14, v12);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v14);
  v14[0] = &unk_26D755828;
  unsigned int v15 = v14;
  std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](v14, v13);
  return std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](v14);
}

void *std::__function::__value_func<void ()(float *,float *)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    float v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        float result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        float result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      float result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_224308EBC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void CoreML::Specification::protobuf_LinkedModel_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_LinkedModel_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/LinkedModel.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(v5);
  CoreML::Specification::_LinkedModel_default_instance_ = (uint64_t)&unk_26D7780F0;
  unk_26808DB38 = 0;
  qword_26808DB48 = 0;
  byte_26808DB50 = 1;
  CoreML::Specification::_LinkedModelFile_default_instance_ = (uint64_t)&unk_26D778188;
  *(void *)algn_26808DB68 = 0;
  dword_26808DB80 = 0;
  byte_26808DB88 = 1;
  qword_26808DB70 = (uint64_t)&CoreML::Specification::_StringParameter_default_instance_;
  unk_26808DB78 = &CoreML::Specification::_StringParameter_default_instance_;
}

void CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(CoreML::Specification::protobuf_LinkedModel_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::protobuf_LinkedModel_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_224308FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::LinkedModel *CoreML::Specification::LinkedModel::LinkedModel(CoreML::Specification::LinkedModel *this)
{
  *(void *)this = &unk_26D7780F0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::LinkedModel *)&CoreML::Specification::_LinkedModel_default_instance_) {
    CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_224309060(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::LinkedModelFile::MergeFrom(std::string *this, const CoreML::Specification::LinkedModelFile *a2)
{
  char v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (a2 != (const CoreML::Specification::LinkedModelFile *)&CoreML::Specification::_LinkedModelFile_default_instance_)
  {
    if (*((void *)a2 + 2))
    {
      float v5 = (std::string *)v3->__r_.__value_.__r.__words[2];
      if (!v5) {
        operator new();
      }
      this = CoreML::Specification::V5::TensorValue_RepeatedBytes::MergeFrom(v5, *((const CoreML::Specification::V5::TensorValue_RepeatedBytes **)a2 + 2));
    }
    if (*((void *)a2 + 3))
    {
      if (!v3[1].__r_.__value_.__r.__words[0]) {
        operator new();
      }
      float v6 = (const CoreML::Specification::V5::TensorValue_RepeatedBytes *)*((void *)a2 + 3);
      data = (std::string *)v3[1].__r_.__value_.__l.__data_;
      return CoreML::Specification::V5::TensorValue_RepeatedBytes::MergeFrom(data, v6);
    }
  }
  return this;
}

void sub_22430917C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

void CoreML::Specification::LinkedModel::~LinkedModel(CoreML::Specification::LinkedModel *this)
{
  *(void *)this = &unk_26D7780F0;
  CoreML::Specification::LinkedModel::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::LinkedModel::~LinkedModel(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t CoreML::Specification::LinkedModel::SharedDtor(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 28);
  if (v1)
  {
    uint64_t v2 = this;
    if (v1 == 1)
    {
      this = *(void *)(this + 16);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
    }
    *(_DWORD *)(v2 + 28) = 0;
  }
  return this;
}

uint64_t *CoreML::Specification::LinkedModel::default_instance(CoreML::Specification::LinkedModel *this)
{
  return &CoreML::Specification::_LinkedModel_default_instance_;
}

void CoreML::Specification::LinkedModel::New(CoreML::Specification::LinkedModel *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224309304(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::LinkedModel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinkedModel>);
  }
  return result;
}

uint64_t CoreML::Specification::LinkedModel::Clear(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_DWORD *)(this + 28) == 1)
  {
    this = *(void *)(this + 16);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

BOOL CoreML::Specification::LinkedModel::MergePartialFromCodedStream(CoreML::Specification::LinkedModel *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      float v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_6:
        TagFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      if (*((_DWORD *)this + 7) != 1)
      {
        *((_DWORD *)this + 7) = 1;
        operator new();
      }
      uint64_t v11 = (CoreML::Specification::LinkedModelFile *)*((void *)this + 2);
      uint64_t v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        VarintSizeAsIntFallbacuint64_t k = *v12;
        *a2 = v12 + 1;
      }
      unint64_t v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        int v16 = v14;
        BOOL result = CoreML::Specification::LinkedModelFile::MergePartialFromCodedStream(v11, a2, v15);
        if (!result) {
          return result;
        }
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_22430950C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::LinkedModel::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_DWORD *)(this + 28) == 1) {
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::LinkedModel::ByteSizeLong(CoreML::Specification::LinkedModelFile **this)
{
  if (*((_DWORD *)this + 7) == 1)
  {
    uint64_t v2 = CoreML::Specification::LinkedModelFile::ByteSizeLong(this[2]);
    uint64_t result = v2 + ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

std::string *CoreML::Specification::LinkedModel::MergeFrom(std::string *this, const CoreML::Specification::LinkedModel *a2)
{
  char v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (*((_DWORD *)a2 + 7) == 1)
  {
    if (HIDWORD(v3[1].__r_.__value_.__r.__words[0]) != 1)
    {
      HIDWORD(v3[1].__r_.__value_.__r.__words[0]) = 1;
      operator new();
    }
    float v5 = (const CoreML::Specification::LinkedModelFile *)*((void *)a2 + 2);
    uint64_t v6 = (std::string *)v3->__r_.__value_.__r.__words[2];
    return CoreML::Specification::LinkedModelFile::MergeFrom(v6, v5);
  }
  return this;
}

void sub_224309684(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::LinkedModel::IsInitialized(CoreML::Specification::LinkedModel *this)
{
  return 1;
}

void *CoreML::Specification::LinkedModel::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.LinkedModel");
}

CoreML::Specification::LinkedModelFile *CoreML::Specification::LinkedModelFile::LinkedModelFile(CoreML::Specification::LinkedModelFile *this)
{
  *(void *)this = &unk_26D778188;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::LinkedModelFile *)&CoreML::Specification::_LinkedModelFile_default_instance_) {
    CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_224309724(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::LinkedModelFile *CoreML::Specification::LinkedModelFile::LinkedModelFile(CoreML::Specification::LinkedModelFile *this, const CoreML::Specification::LinkedModelFile *a2)
{
  *(void *)this = &unk_26D778188;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (a2 == (const CoreML::Specification::LinkedModelFile *)&CoreML::Specification::_LinkedModelFile_default_instance_)
  {
    *((void *)this + 2) = 0;
  }
  else
  {
    if (*((void *)a2 + 2)) {
      operator new();
    }
    *((void *)this + 2) = 0;
    if (*((void *)a2 + 3)) {
      operator new();
    }
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_224309830(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x10A1C4084265165);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::LinkedModelFile::~LinkedModelFile(CoreML::Specification::LinkedModelFile *this)
{
  *(void *)this = &unk_26D778188;
  CoreML::Specification::LinkedModelFile::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::LinkedModelFile::~LinkedModelFile(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::LinkedModelFile::SharedDtor(uint64_t *this)
{
  if (this != &CoreML::Specification::_LinkedModelFile_default_instance_)
  {
    uint64_t v1 = this;
    uint64_t v2 = this[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    this = (uint64_t *)v1[3];
    if (this)
    {
      char v3 = *(uint64_t (**)(void))(*this + 8);
      return (uint64_t *)v3();
    }
  }
  return this;
}

uint64_t *CoreML::Specification::LinkedModelFile::default_instance(CoreML::Specification::LinkedModelFile *this)
{
  return &CoreML::Specification::_LinkedModelFile_default_instance_;
}

void CoreML::Specification::LinkedModelFile::New(CoreML::Specification::LinkedModelFile *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224309A0C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::LinkedModelFile>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinkedModelFile>);
  }
  return result;
}

uint64_t CoreML::Specification::LinkedModelFile::Clear(CoreML::Specification::LinkedModelFile *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

BOOL CoreML::Specification::LinkedModelFile::MergePartialFromCodedStream(CoreML::Specification::LinkedModelFile *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      float v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_6:
        TagFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_21;
      }
LABEL_7:
      if (v7 >> 3 != 2) {
        break;
      }
      if (v7 != 18) {
        goto LABEL_21;
      }
      int v10 = (CoreML::Specification::StringParameter *)*((void *)this + 3);
      if (!v10) {
        operator new();
      }
LABEL_18:
      uint64_t v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        VarintSizeAsIntFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        VarintSizeAsIntFallbacuint64_t k = *v11;
        *a2 = v11 + 1;
      }
      unint64_t v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        int v16 = v14;
        BOOL result = CoreML::Specification::StringParameter::MergePartialFromCodedStream(v10, a2, v15);
        if (!result) {
          return result;
        }
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      int v10 = (CoreML::Specification::StringParameter *)*((void *)this + 2);
      if (!v10) {
        operator new();
      }
      goto LABEL_18;
    }
LABEL_21:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_224309C60(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::LinkedModelFile::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (this != &CoreML::Specification::_LinkedModelFile_default_instance_)
  {
    float v5 = this;
    uint64_t v6 = this[2];
    if (v6) {
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    }
    uint64_t v7 = v5[3];
    if (v7)
    {
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
    }
  }
  return this;
}

uint64_t CoreML::Specification::LinkedModelFile::ByteSizeLong(CoreML::Specification::LinkedModelFile *this)
{
  if (this == (CoreML::Specification::LinkedModelFile *)&CoreML::Specification::_LinkedModelFile_default_instance_)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v2 = (CoreML::Specification::StringParameter *)*((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = CoreML::Specification::StringParameter::ByteSizeLong(v2);
      uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      uint64_t v4 = 0;
    }
    float v5 = (CoreML::Specification::StringParameter *)*((void *)this + 3);
    if (v5)
    {
      uint64_t v6 = CoreML::Specification::StringParameter::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::LinkedModelFile::IsInitialized(CoreML::Specification::LinkedModelFile *this)
{
  return 1;
}

void *CoreML::Specification::LinkedModelFile::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.LinkedModelFile");
}

void CoreML::Specification::LinkedModel::New(CoreML::Specification::LinkedModel *this)
{
}

void CoreML::Specification::LinkedModelFile::New(CoreML::Specification::LinkedModelFile *this)
{
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinkedModel>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::LinkedModelFile>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

double CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/BayesianProbitRegressor.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_ = (uint64_t)&unk_26D778250;
  *(void *)algn_26808DB98 = 0;
  qword_26808DBA0 = 0;
  unk_26808DBA8 = 0;
  dword_26808DBB0 = 0;
  byte_26808DBB8 = 1;
  CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_ = (uint64_t)&unk_26D7782E8;
  *(void *)algn_26808DBC8 = 0;
  unk_26808DBD8 = 0;
  byte_26808DBE0 = 1;
  CoreML::Specification::_BayesianProbitRegressor_FeatureWeight_default_instance_ = (uint64_t)&unk_26D778380;
  double result = 0.0;
  unk_26808DBF0 = 0u;
  unk_26808DC00 = 0u;
  qword_26808DC10 = 0;
  byte_26808DC18 = 1;
  CoreML::Specification::_BayesianProbitRegressor_default_instance_ = (uint64_t)&unk_26D778418;
  unk_26808DC38 = 0u;
  unk_26808DC28 = 0u;
  qword_26808DC48 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808DC50 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_26808DC58 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808DC60 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_26808DC68 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808DC70 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_26808DC78 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808DC80 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  byte_26808DC98 = 1;
  qword_26808DBD0 = (uint64_t)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_;
  qword_26808DC88 = (uint64_t)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_;
  unk_26808DC90 = 0;
  return result;
}

void CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_224309FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::BayesianProbitRegressor_Gaussian *CoreML::Specification::BayesianProbitRegressor_Gaussian::BayesianProbitRegressor_Gaussian(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  *(void *)this = &unk_26D778250;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::BayesianProbitRegressor_Gaussian *)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_) {
    CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_22430A03C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::BayesianProbitRegressor_Gaussian::~BayesianProbitRegressor_Gaussian(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  *(void *)this = &unk_26D778250;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D778250;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::BayesianProbitRegressor_Gaussian::New(CoreML::Specification::BayesianProbitRegressor_Gaussian *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_22430A14C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_Gaussian>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_Gaussian>);
  }
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::MergePartialFromCodedStream(CoreML::Specification::BayesianProbitRegressor_Gaussian *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        float v5 = *a2;
        if (*a2 < a2[1]) {
          break;
        }
        uint64_t v6 = 0;
LABEL_6:
        TagFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0) {
          goto LABEL_7;
        }
LABEL_20:
        if (v7) {
          BOOL v14 = (v7 & 7) == 4;
        }
        else {
          BOOL v14 = 1;
        }
        uint64_t v15 = v14;
        if (v14
          || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        {
          return v15;
        }
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_20;
      }
LABEL_7:
      if (v7 >> 3 == 2) {
        break;
      }
      if (v7 >> 3 != 1 || v7 != 9) {
        goto LABEL_20;
      }
      unint64_t v17 = 0;
      int v10 = (unint64_t *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17)) {
          return 0;
        }
        unint64_t v11 = v17;
      }
      else
      {
        unint64_t v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((void *)this + 2) = v11;
    }
    if (v7 != 17) {
      goto LABEL_20;
    }
    unint64_t v17 = 0;
    uint64_t v12 = (unint64_t *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 8)
    {
      unint64_t v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_19;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17)) {
      return 0;
    }
    unint64_t v13 = v17;
LABEL_19:
    *((void *)this + 3) = v13;
  }
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  double v5 = *(double *)(this + 16);
  if (v5 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v5, a3);
  }
  double v6 = *(double *)(v4 + 24);
  if (v6 != 0.0)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  }
  return this;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::ByteSizeLong(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  uint64_t v1 = 9;
  if (*((double *)this + 2) == 0.0) {
    uint64_t v1 = 0;
  }
  if (*((double *)this + 3) != 0.0) {
    v1 += 9;
  }
  *((_DWORD *)this + 8) = v1;
  return v1;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_Gaussian::IsInitialized(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
  return 1;
}

void *CoreML::Specification::BayesianProbitRegressor_Gaussian::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.BayesianProbitRegressor.Gaussian");
}

CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  *(void *)this = &unk_26D7782E8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_) {
    CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  return this;
}

void sub_22430A400(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::~BayesianProbitRegressor_FeatureValueWeight(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  *(void *)this = &unk_26D7782E8;
  if (this != (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::~BayesianProbitRegressor_FeatureValueWeight(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::New(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_22430A528(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>);
  }
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::Clear(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::MergePartialFromCodedStream(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        double v5 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v6 = 0;
LABEL_6:
          TagFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_22;
          }
          goto LABEL_7;
        }
        uint64_t v6 = *v5;
        if (*v5 < 1) {
          goto LABEL_6;
        }
        *a2 = v5 + 1;
        unint64_t v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_22;
        }
LABEL_7:
        if (v7 >> 3 != 2) {
          break;
        }
        if (v7 != 18) {
          goto LABEL_22;
        }
        uint64_t v12 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)*((void *)this + 2);
        if (!v12) {
          operator new();
        }
        unint64_t v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          VarintSizeAsIntFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          VarintSizeAsIntFallbacuint64_t k = *v13;
          *a2 = v13 + 1;
        }
        unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v16 & 0x8000000000000000) == 0)
        {
          int v18 = v16;
          uint64_t result = CoreML::Specification::BayesianProbitRegressor_Gaussian::MergePartialFromCodedStream(v12, a2, v17);
          if (!result) {
            return result;
          }
          if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18))
          {
            continue;
          }
        }
        return 0;
      }
      if (v7 >> 3 != 1 || v7 != 8) {
        break;
      }
      int v10 = *a2;
      if (*a2 >= a2[1])
      {
        int v11 = 0;
        goto LABEL_34;
      }
      int v11 = *v10;
      if (*v10 < 0)
      {
LABEL_34:
        Varint32Fallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v11);
        *((_DWORD *)this + 6) = Varint32Fallback;
        if (Varint32Fallback < 0) {
          return 0;
        }
      }
      else
      {
        *((_DWORD *)this + 6) = v11;
        *a2 = v10 + 1;
      }
    }
LABEL_22:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_22430A760(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  double v5 = (uint64_t *)this;
  unsigned int v6 = *(_DWORD *)(this + 24);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(1, v6, a2, a4);
  }
  if (v5 != &CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_)
  {
    uint64_t v7 = v5[2];
    if (v7)
    {
      return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
    }
  }
  return this;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::ByteSizeLong(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  if (this == (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_)
  {
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v1 = *((void *)this + 2);
    if (v1)
    {
      uint64_t v2 = 9;
      if (*(double *)(v1 + 16) == 0.0) {
        uint64_t v2 = 0;
      }
      if (*(double *)(v1 + 24) != 0.0) {
        v2 += 9;
      }
      *(_DWORD *)(v1 + 32) = v2;
      uint64_t v1 = v2 + ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  int v3 = *((_DWORD *)this + 6);
  if (v3) {
    v1 += ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 7) = v1;
  return v1;
}

std::string *CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::MergeFrom(std::string *this, const CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *a2)
{
  int v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (a2 != (const CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureValueWeight_default_instance_
    && v5 != 0)
  {
    uint64_t v7 = (std::string *)v3->__r_.__value_.__r.__words[2];
    if (!v7) {
      operator new();
    }
    if (v5) {
      unsigned int v8 = (const CoreML::Specification::SigmoidKernel *)*((void *)a2 + 2);
    }
    else {
      unsigned int v8 = (const CoreML::Specification::SigmoidKernel *)&CoreML::Specification::_BayesianProbitRegressor_Gaussian_default_instance_;
    }
    this = CoreML::Specification::SigmoidKernel::MergeFrom(v7, v8);
  }
  int v9 = *((_DWORD *)a2 + 6);
  if (v9) {
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v9;
  }
  return this;
}

void sub_22430A93C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::IsInitialized(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
  return 1;
}

void *CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.BayesianProbitRegressor.FeatureValueWeight");
}

CoreML::Specification::BayesianProbitRegressor_FeatureWeight *CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  *(void *)this = &unk_26D778380;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::BayesianProbitRegressor_FeatureWeight *)&CoreML::Specification::_BayesianProbitRegressor_FeatureWeight_default_instance_) {
    CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(this);
  }
  *((void *)this + 5) = 0;
  return this;
}

void sub_22430A9EC(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::BayesianProbitRegressor_FeatureWeight::~BayesianProbitRegressor_FeatureWeight(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  *(void *)this = &unk_26D778380;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::BayesianProbitRegressor_FeatureWeight::~BayesianProbitRegressor_FeatureWeight(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::BayesianProbitRegressor_FeatureWeight::New(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_22430AAEC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>);
  }
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::Clear(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  uint64_t result = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>((uint64_t)this + 16);
  *((_DWORD *)this + 1CoreML::Specification::LinkedModelFile::New(this, 0) = 0;
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::MergePartialFromCodedStream(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (CoreML::Specification::BayesianProbitRegressor_FeatureWeight *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v6 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v7 = 0;
LABEL_7:
          TagFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0) {
            goto LABEL_21;
          }
          goto LABEL_8;
        }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_21;
        }
LABEL_8:
        if (v8 >> 3 != 2) {
          break;
        }
        if (v8 != 18) {
          goto LABEL_21;
        }
        unint64_t v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(v5);
        BOOL v14 = *a2;
        if (*a2 >= a2[1] || *v14 < 0)
        {
          VarintSizeAsIntFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          VarintSizeAsIntFallbacuint64_t k = *v14;
          *a2 = v14 + 1;
        }
        unint64_t v17 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v17 & 0x8000000000000000) == 0)
        {
          int v19 = v17;
          uint64_t result = CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::MergePartialFromCodedStream(v13, a2, v18);
          if (!result) {
            return result;
          }
          if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v19))
          {
            continue;
          }
        }
        return 0;
      }
      if (v8 >> 3 != 1 || v8 != 8) {
        break;
      }
      int v11 = *a2;
      if (*a2 >= a2[1])
      {
        int v12 = 0;
        goto LABEL_33;
      }
      int v12 = *v11;
      if (*v11 < 0)
      {
LABEL_33:
        Varint32Fallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v12);
        *((_DWORD *)this + 1CoreML::Specification::LinkedModelFile::New(this, 0) = Varint32Fallback;
        if (Varint32Fallback < 0) {
          return 0;
        }
      }
      else
      {
        *((_DWORD *)this + 1CoreML::Specification::LinkedModelFile::New(this, 0) = v12;
        *a2 = v11 + 1;
      }
    }
LABEL_21:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unsigned int v6 = *(_DWORD *)(this + 40);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(1, v6, a2, a4);
  }
  int v7 = *(_DWORD *)(v5 + 24);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(void *)(*(void *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::ByteSizeLong(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::ByteSizeLong(*(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  int v6 = *((_DWORD *)this + 10);
  if (v6) {
    v4 += ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 11) = v4;
  return v4;
}

std::string *CoreML::Specification::BayesianProbitRegressor_FeatureWeight::MergeFrom(std::string *this, const CoreML::Specification::BayesianProbitRegressor_FeatureWeight *a2)
{
  int v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    int v6 = (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **)(*((void *)a2 + 4) + 8);
    int v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 6));
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    signed int v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    std::string::size_type size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8) {
      signed int *size = v8;
    }
  }
  int v10 = *((_DWORD *)a2 + 10);
  if (v10) {
    LODWORD(v3[1].__r_.__value_.__r.__words[2]) = v10;
  }
  return this;
}

uint64_t CoreML::Specification::BayesianProbitRegressor_FeatureWeight::IsInitialized(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
  return 1;
}

void *CoreML::Specification::BayesianProbitRegressor_FeatureWeight::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.BayesianProbitRegressor.FeatureWeight");
}

CoreML::Specification::BayesianProbitRegressor *CoreML::Specification::BayesianProbitRegressor::BayesianProbitRegressor(CoreML::Specification::BayesianProbitRegressor *this)
{
  *(void *)this = &unk_26D778418;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_) {
    CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(this);
  }
  *((void *)this + 5) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 6) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 8) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 9) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 1CoreML::Specification::LinkedModelFile::New(this, 0) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 11) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 12) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  return this;
}

void sub_22430AF68(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::BayesianProbitRegressor::~BayesianProbitRegressor(CoreML::Specification::BayesianProbitRegressor *this)
{
  *(void *)this = &unk_26D778418;
  CoreML::Specification::BayesianProbitRegressor::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::BayesianProbitRegressor::~BayesianProbitRegressor(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::BayesianProbitRegressor::SharedDtor(uint64_t *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[5];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (uint64_t *)MEMORY[0x22A614FA0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = v1[6];
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    this = (uint64_t *)MEMORY[0x22A614FA0](v4, 0x1012C40EC159624);
  }
  uint64_t v6 = v1[7];
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    this = (uint64_t *)MEMORY[0x22A614FA0](v6, 0x1012C40EC159624);
  }
  uint64_t v8 = v1[8];
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    this = (uint64_t *)MEMORY[0x22A614FA0](v8, 0x1012C40EC159624);
  }
  uint64_t v10 = v1[9];
  if ((uint64_t *)v10 != &_tc_google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    this = (uint64_t *)MEMORY[0x22A614FA0](v10, 0x1012C40EC159624);
  }
  uint64_t v11 = v1[10];
  if ((uint64_t *)v11 != &_tc_google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    this = (uint64_t *)MEMORY[0x22A614FA0](v11, 0x1012C40EC159624);
  }
  uint64_t v12 = v1[11];
  if ((uint64_t *)v12 != &_tc_google::protobuf::internal::fixed_address_empty_string && v12)
  {
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    this = (uint64_t *)MEMORY[0x22A614FA0](v12, 0x1012C40EC159624);
  }
  uint64_t v13 = v1[12];
  if ((uint64_t *)v13 != &_tc_google::protobuf::internal::fixed_address_empty_string && v13)
  {
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    this = (uint64_t *)MEMORY[0x22A614FA0](v13, 0x1012C40EC159624);
  }
  if (v1 != &CoreML::Specification::_BayesianProbitRegressor_default_instance_)
  {
    this = (uint64_t *)v1[13];
    if (this)
    {
      BOOL v14 = *(uint64_t (**)(void))(*this + 8);
      return (uint64_t *)v14();
    }
  }
  return this;
}

uint64_t *CoreML::Specification::BayesianProbitRegressor::default_instance(CoreML::Specification::BayesianProbitRegressor *this)
{
  return &CoreML::Specification::_BayesianProbitRegressor_default_instance_;
}

void CoreML::Specification::BayesianProbitRegressor::New(CoreML::Specification::BayesianProbitRegressor *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_22430B2E0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4092A090F6);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::BayesianProbitRegressor>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor>);
  }
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor::Clear(CoreML::Specification::BayesianProbitRegressor *this)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>((uint64_t)this + 16);
  uint64_t v2 = *((void *)this + 5);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 6);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 7);
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
  uint64_t v5 = *((void *)this + 8);
  if ((uint64_t *)v5 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
  uint64_t v6 = *((void *)this + 9);
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
  uint64_t v7 = *((void *)this + 10);
  if ((uint64_t *)v7 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v7 + 23) < 0)
    {
      **(unsigned char **)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v7 = 0;
      *(unsigned char *)(v7 + 23) = 0;
    }
  }
  uint64_t v8 = *((void *)this + 11);
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v8 + 23) < 0)
    {
      **(unsigned char **)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v8 = 0;
      *(unsigned char *)(v8 + 23) = 0;
    }
  }
  uint64_t v9 = *((void *)this + 12);
  if ((uint64_t *)v9 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v9 + 23) < 0)
    {
      **(unsigned char **)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v9 = 0;
      *(unsigned char *)(v9 + 23) = 0;
    }
  }
  uint64_t result = *((void *)this + 13);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  return result;
}

uint64_t CoreML::Specification::BayesianProbitRegressor::MergePartialFromCodedStream(CoreML::Specification::BayesianProbitRegressor *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  size_t v38 = (std::string **)((char *)this + 88);
  BOOL v39 = (std::string **)((char *)this + 96);
  uint64_t v37 = (std::string **)((char *)this + 80);
  uint64_t v5 = (std::string **)((char *)this + 72);
  uint64_t v6 = (std::string **)((char *)this + 64);
  uint64_t v7 = (std::string **)((char *)this + 56);
  uint64_t v8 = (std::string **)((char *)this + 48);
  uint64_t v9 = (std::string **)((char *)this + 40);
  size_t v36 = (CoreML::Specification::BayesianProbitRegressor *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v10 = *(unsigned __int8 **)a2;
      unint64_t v11 = *((void *)a2 + 1);
      if (*(void *)a2 >= v11)
      {
        uint64_t v13 = 0;
        goto LABEL_16;
      }
      uint64_t v12 = v10 + 1;
      uint64_t v13 = *v10;
      if ((char)*v10 >= 1) {
        break;
      }
      if ((unint64_t)v12 < v11)
      {
        int v15 = *v12;
        if ((v13 & ~v15) >= 0x80)
        {
          *(void *)a2 = v10 + 2;
          unint64_t v14 = (v13 + (v15 << 7) - 128) | 0x100000000;
          goto LABEL_17;
        }
      }
LABEL_16:
      TagFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v13);
      unint64_t v14 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v14 & 0x100000000) == 0) {
        goto LABEL_9;
      }
LABEL_17:
      switch(v14 >> 3)
      {
        case 1u:
          if (v14 != 8) {
            goto LABEL_9;
          }
          unsigned int v18 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1))
          {
            int v19 = 0;
          }
          else
          {
            int v19 = *v18;
            if ((*v18 & 0x80000000) == 0)
            {
              *((_DWORD *)this + 28) = v19;
              *(void *)a2 = v18 + 1;
              continue;
            }
          }
          Varint32Fallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v19);
          *((_DWORD *)this + 28) = Varint32Fallback;
          if (Varint32Fallback < 0) {
            return 0;
          }
          break;
        case 2u:
          if (v14 != 18) {
            goto LABEL_9;
          }
          uint64_t v20 = (CoreML::Specification::BayesianProbitRegressor_Gaussian *)*((void *)this + 13);
          if (!v20) {
            operator new();
          }
          float v21 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v21 < 0)
          {
            VarintSizeAsIntFallbacuint64_t k = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            VarintSizeAsIntFallbacuint64_t k = *v21;
            *(void *)a2 = v21 + 1;
          }
          unint64_t v32 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
          if ((v32 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v31 = v32;
          uint64_t result = CoreML::Specification::BayesianProbitRegressor_Gaussian::MergePartialFromCodedStream(v20, (char **)a2, v33);
          if (!result) {
            return result;
          }
LABEL_87:
          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v31)) {
            return 0;
          }
          continue;
        case 3u:
          if (v14 != 26) {
            goto LABEL_9;
          }
          uint64_t v23 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>(v36);
          uint64_t v24 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v24 < 0)
          {
            int v25 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v25 < 0) {
              return 0;
            }
          }
          else
          {
            int v25 = *v24;
            *(void *)a2 = v24 + 1;
          }
          unint64_t v29 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v25);
          if ((v29 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v31 = v29;
          uint64_t result = CoreML::Specification::BayesianProbitRegressor_FeatureWeight::MergePartialFromCodedStream(v23, (char **)a2, v30);
          if (!result) {
            return result;
          }
          goto LABEL_87;
        case 0xAu:
          if (v14 != 82) {
            goto LABEL_9;
          }
          if (*v9 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v9);
          if (!result) {
            return result;
          }
          uint64_t v27 = *v9;
          if (SHIBYTE((*v9)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            std::string::size_type size = (const char *)(*v9)->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = (const char *)HIBYTE((*v9)->__r_.__value_.__r.__words[2]);
          }
          uint64_t v34 = "CoreML.Specification.BayesianProbitRegressor.regressionInputFeatureName";
          goto LABEL_105;
        case 0xBu:
          if (v14 != 90) {
            goto LABEL_9;
          }
          if (*v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v8);
          if (!result) {
            return result;
          }
          uint64_t v27 = *v8;
          if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            std::string::size_type size = (const char *)(*v8)->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = (const char *)HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
          }
          uint64_t v34 = "CoreML.Specification.BayesianProbitRegressor.optimismInputFeatureName";
          goto LABEL_105;
        case 0xCu:
          if (v14 != 98) {
            goto LABEL_9;
          }
          if (*v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v7);
          if (!result) {
            return result;
          }
          uint64_t v27 = *v7;
          if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            std::string::size_type size = (const char *)(*v7)->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = (const char *)HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
          }
          uint64_t v34 = "CoreML.Specification.BayesianProbitRegressor.samplingScaleInputFeatureName";
          goto LABEL_105;
        case 0xDu:
          if (v14 != 106) {
            goto LABEL_9;
          }
          if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v6);
          if (!result) {
            return result;
          }
          uint64_t v27 = *v6;
          if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            std::string::size_type size = (const char *)(*v6)->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
          }
          uint64_t v34 = "CoreML.Specification.BayesianProbitRegressor.samplingTruncationInputFeatureName";
          goto LABEL_105;
        case 0x14u:
          if (v14 != 162) {
            goto LABEL_9;
          }
          if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v5);
          if (!result) {
            return result;
          }
          uint64_t v27 = *v5;
          if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            std::string::size_type size = (const char *)(*v5)->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
          }
          uint64_t v34 = "CoreML.Specification.BayesianProbitRegressor.meanOutputFeatureName";
          goto LABEL_105;
        case 0x15u:
          if (v14 != 170) {
            goto LABEL_9;
          }
          if (*v37 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v37);
          if (!result) {
            return result;
          }
          uint64_t v27 = *v37;
          if (SHIBYTE((*v37)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            std::string::size_type size = (const char *)(*v37)->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = (const char *)HIBYTE((*v37)->__r_.__value_.__r.__words[2]);
          }
          uint64_t v34 = "CoreML.Specification.BayesianProbitRegressor.varianceOutputFeatureName";
          goto LABEL_105;
        case 0x16u:
          if (v14 != 178) {
            goto LABEL_9;
          }
          if (*v38 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v38);
          if (!result) {
            return result;
          }
          uint64_t v27 = *v38;
          if (SHIBYTE((*v38)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            std::string::size_type size = (const char *)(*v38)->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = (const char *)HIBYTE((*v38)->__r_.__value_.__r.__words[2]);
          }
          uint64_t v34 = "CoreML.Specification.BayesianProbitRegressor.pessimisticProbabilityOutputFeatureName";
          goto LABEL_105;
        case 0x17u:
          if (v14 != 186) {
            goto LABEL_9;
          }
          if (*v39 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v39);
          if (!result) {
            return result;
          }
          uint64_t v27 = *v39;
          if (SHIBYTE((*v39)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
            std::string::size_type size = (const char *)(*v39)->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = (const char *)HIBYTE((*v39)->__r_.__value_.__r.__words[2]);
          }
          uint64_t v34 = "CoreML.Specification.BayesianProbitRegressor.sampledProbabilityOutputFeatureName";
LABEL_105:
          if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v27, size, 0, (uint64_t)v34))return 0; {
          continue;
          }
        default:
          goto LABEL_9;
      }
    }
    *(void *)a2 = v12;
    unint64_t v14 = v13 | 0x100000000;
    if ((v14 & 0x100000000) != 0) {
      goto LABEL_17;
    }
LABEL_9:
    if (!v14 || (v14 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v14, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_22430BAB4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::BayesianProbitRegressor::SerializeWithCachedSizes(CoreML::Specification::BayesianProbitRegressor *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 28);
  if (v6) {
    _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(1, v6, a2, a4);
  }
  if (this != (CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_)
  {
    uint64_t v7 = *((void *)this + 13);
    if (v7) {
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
    }
  }
  int v8 = *((_DWORD *)this + 6);
  if (v8)
  {
    for (int i = 0; i != v8; ++i)
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *(void *)(*((void *)this + 4) + 8 * i + 8), a2, a4);
  }
  uint64_t v10 = (_tc_google::protobuf::internal *)*((void *)this + 5);
  if (*((char *)v10 + 23) < 0)
  {
    unint64_t v11 = (const char *)*((void *)v10 + 1);
    if (!v11) {
      goto LABEL_15;
    }
    uint64_t v10 = *(_tc_google::protobuf::internal **)v10;
    goto LABEL_14;
  }
  unint64_t v11 = (const char *)*((unsigned __int8 *)v10 + 23);
  if (*((unsigned char *)v10 + 23))
  {
LABEL_14:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.regressionInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(10, *((void *)this + 5), a2);
  }
LABEL_15:
  uint64_t v12 = (_tc_google::protobuf::internal *)*((void *)this + 6);
  if (*((char *)v12 + 23) < 0)
  {
    uint64_t v13 = (const char *)*((void *)v12 + 1);
    if (!v13) {
      goto LABEL_21;
    }
    uint64_t v12 = *(_tc_google::protobuf::internal **)v12;
    goto LABEL_20;
  }
  uint64_t v13 = (const char *)*((unsigned __int8 *)v12 + 23);
  if (*((unsigned char *)v12 + 23))
  {
LABEL_20:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v12, v13, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.optimismInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(11, *((void *)this + 6), a2);
  }
LABEL_21:
  unint64_t v14 = (_tc_google::protobuf::internal *)*((void *)this + 7);
  if (*((char *)v14 + 23) < 0)
  {
    int v15 = (const char *)*((void *)v14 + 1);
    if (!v15) {
      goto LABEL_27;
    }
    unint64_t v14 = *(_tc_google::protobuf::internal **)v14;
    goto LABEL_26;
  }
  int v15 = (const char *)*((unsigned __int8 *)v14 + 23);
  if (*((unsigned char *)v14 + 23))
  {
LABEL_26:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v14, v15, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.samplingScaleInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(12, *((void *)this + 7), a2);
  }
LABEL_27:
  unint64_t v16 = (_tc_google::protobuf::internal *)*((void *)this + 8);
  if (*((char *)v16 + 23) < 0)
  {
    unint64_t v17 = (const char *)*((void *)v16 + 1);
    if (!v17) {
      goto LABEL_33;
    }
    unint64_t v16 = *(_tc_google::protobuf::internal **)v16;
    goto LABEL_32;
  }
  unint64_t v17 = (const char *)*((unsigned __int8 *)v16 + 23);
  if (*((unsigned char *)v16 + 23))
  {
LABEL_32:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v16, v17, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.samplingTruncationInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(13, *((void *)this + 8), a2);
  }
LABEL_33:
  unsigned int v18 = (_tc_google::protobuf::internal *)*((void *)this + 9);
  if (*((char *)v18 + 23) < 0)
  {
    int v19 = (const char *)*((void *)v18 + 1);
    if (!v19) {
      goto LABEL_39;
    }
    unsigned int v18 = *(_tc_google::protobuf::internal **)v18;
    goto LABEL_38;
  }
  int v19 = (const char *)*((unsigned __int8 *)v18 + 23);
  if (*((unsigned char *)v18 + 23))
  {
LABEL_38:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v18, v19, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.meanOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(20, *((void *)this + 9), a2);
  }
LABEL_39:
  uint64_t v20 = (_tc_google::protobuf::internal *)*((void *)this + 10);
  if (*((char *)v20 + 23) < 0)
  {
    float v21 = (const char *)*((void *)v20 + 1);
    if (!v21) {
      goto LABEL_45;
    }
    uint64_t v20 = *(_tc_google::protobuf::internal **)v20;
    goto LABEL_44;
  }
  float v21 = (const char *)*((unsigned __int8 *)v20 + 23);
  if (*((unsigned char *)v20 + 23))
  {
LABEL_44:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v20, v21, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.varianceOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(21, *((void *)this + 10), a2);
  }
LABEL_45:
  float v22 = (_tc_google::protobuf::internal *)*((void *)this + 11);
  if (*((char *)v22 + 23) < 0)
  {
    uint64_t v23 = (const char *)*((void *)v22 + 1);
    if (!v23) {
      goto LABEL_51;
    }
    float v22 = *(_tc_google::protobuf::internal **)v22;
    goto LABEL_50;
  }
  uint64_t v23 = (const char *)*((unsigned __int8 *)v22 + 23);
  if (*((unsigned char *)v22 + 23))
  {
LABEL_50:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v22, v23, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.pessimisticProbabilityOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(22, *((void *)this + 11), a2);
  }
LABEL_51:
  uint64_t result = *((void *)this + 12);
  if (*(char *)(result + 23) < 0)
  {
    int v25 = *(const char **)(result + 8);
    if (!v25) {
      return result;
    }
    uint64_t result = *(void *)result;
  }
  else
  {
    int v25 = (const char *)*(unsigned __int8 *)(result + 23);
    if (!*(unsigned char *)(result + 23)) {
      return result;
    }
  }
  _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v25, 1, (uint64_t)"CoreML.Specification.BayesianProbitRegressor.sampledProbabilityOutputFeatureName");
  uint64_t v26 = *((void *)this + 12);
  return _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(23, v26, a2);
}

uint64_t CoreML::Specification::BayesianProbitRegressor::ByteSizeLong(CoreML::Specification::BayesianProbitRegressor *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::BayesianProbitRegressor_FeatureWeight::ByteSizeLong(*(CoreML::Specification::BayesianProbitRegressor_FeatureWeight **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *((void *)this + 5);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_11;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_11:
  uint64_t v9 = *((void *)this + 6);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(void *)(v9 + 8)) {
      goto LABEL_16;
    }
  }
  else if (!*(unsigned char *)(v9 + 23))
  {
    goto LABEL_16;
  }
  uint64_t v11 = *(void *)(v9 + 8);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v10;
  }
  v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_16:
  uint64_t v12 = *((void *)this + 7);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(void *)(v12 + 8)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(v12 + 23))
  {
    goto LABEL_21;
  }
  uint64_t v14 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = v13;
  }
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_21:
  uint64_t v15 = *((void *)this + 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(void *)(v15 + 8)) {
      goto LABEL_26;
    }
  }
  else if (!*(unsigned char *)(v15 + 23))
  {
    goto LABEL_26;
  }
  uint64_t v17 = *(void *)(v15 + 8);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = v16;
  }
  v4 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_26:
  uint64_t v18 = *((void *)this + 9);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(void *)(v18 + 8)) {
      goto LABEL_31;
    }
  }
  else if (!*(unsigned char *)(v18 + 23))
  {
    goto LABEL_31;
  }
  uint64_t v20 = *(void *)(v18 + 8);
  if ((v19 & 0x80u) == 0) {
    uint64_t v20 = v19;
  }
  v4 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_31:
  uint64_t v21 = *((void *)this + 10);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
  if (*(char *)(v21 + 23) < 0)
  {
    if (!*(void *)(v21 + 8)) {
      goto LABEL_36;
    }
  }
  else if (!*(unsigned char *)(v21 + 23))
  {
    goto LABEL_36;
  }
  uint64_t v23 = *(void *)(v21 + 8);
  if ((v22 & 0x80u) == 0) {
    uint64_t v23 = v22;
  }
  v4 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_36:
  uint64_t v24 = *((void *)this + 11);
  uint64_t v25 = *(unsigned __int8 *)(v24 + 23);
  if (*(char *)(v24 + 23) < 0)
  {
    if (!*(void *)(v24 + 8)) {
      goto LABEL_41;
    }
  }
  else if (!*(unsigned char *)(v24 + 23))
  {
    goto LABEL_41;
  }
  uint64_t v26 = *(void *)(v24 + 8);
  if ((v25 & 0x80u) == 0) {
    uint64_t v26 = v25;
  }
  v4 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_41:
  uint64_t v27 = *((void *)this + 12);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 23);
  if (*(char *)(v27 + 23) < 0)
  {
    if (!*(void *)(v27 + 8)) {
      goto LABEL_46;
    }
  }
  else if (!*(unsigned char *)(v27 + 23))
  {
    goto LABEL_46;
  }
  uint64_t v29 = *(void *)(v27 + 8);
  if ((v28 & 0x80u) == 0) {
    uint64_t v29 = v28;
  }
  v4 += v29 + ((9 * (__clz(v29 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_46:
  if (this != (CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_)
  {
    uint64_t v30 = *((void *)this + 13);
    if (v30)
    {
      uint64_t v31 = 9;
      if (*(double *)(v30 + 16) == 0.0) {
        uint64_t v31 = 0;
      }
      if (*(double *)(v30 + 24) != 0.0) {
        v31 += 9;
      }
      *(_DWORD *)(v30 + 32) = v31;
      v4 += v31 + ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  int v32 = *((_DWORD *)this + 28);
  if (v32) {
    v4 += ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *((_DWORD *)this + 29) = v4;
  return v4;
}

std::string *CoreML::Specification::BayesianProbitRegressor::MergeFrom(std::string *this, const CoreML::Specification::BayesianProbitRegressor *a2)
{
  int v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::BayesianProbitRegressor_FeatureWeight **)(*((void *)a2 + 4) + 8);
    uint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 6));
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    signed int v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    std::string::size_type size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8) {
      signed int *size = v8;
    }
  }
  uint64_t v10 = *((void *)a2 + 5);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(void *)(v10 + 8)) {
      goto LABEL_14;
    }
  }
  else if (!*(unsigned char *)(v10 + 23))
  {
    goto LABEL_14;
  }
  this = (std::string *)((char *)v3 + 40);
  uint64_t v11 = (uint64_t *)v3[1].__r_.__value_.__r.__words[2];
  if (v11 != (uint64_t *)v10)
  {
    if (v11 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[1].__r_.__value_.__r.__words[2], (const std::string *)v10);
  }
LABEL_14:
  uint64_t v12 = *((void *)a2 + 6);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(void *)(v12 + 8)) {
      goto LABEL_22;
    }
  }
  else if (!*(unsigned char *)(v12 + 23))
  {
    goto LABEL_22;
  }
  this = v3 + 2;
  data = (uint64_t *)v3[2].__r_.__value_.__l.__data_;
  if (data != (uint64_t *)v12)
  {
    if (data == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[2].__r_.__value_.__l.__data_, (const std::string *)v12);
  }
LABEL_22:
  uint64_t v14 = *((void *)a2 + 7);
  if (*(char *)(v14 + 23) < 0)
  {
    if (!*(void *)(v14 + 8)) {
      goto LABEL_30;
    }
  }
  else if (!*(unsigned char *)(v14 + 23))
  {
    goto LABEL_30;
  }
  this = (std::string *)((char *)v3 + 56);
  uint64_t v15 = (uint64_t *)v3[2].__r_.__value_.__l.__size_;
  if (v15 != (uint64_t *)v14)
  {
    if (v15 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[2].__r_.__value_.__l.__size_, (const std::string *)v14);
  }
LABEL_30:
  uint64_t v16 = *((void *)a2 + 8);
  if (*(char *)(v16 + 23) < 0)
  {
    if (!*(void *)(v16 + 8)) {
      goto LABEL_38;
    }
  }
  else if (!*(unsigned char *)(v16 + 23))
  {
    goto LABEL_38;
  }
  this = (std::string *)((char *)v3 + 64);
  uint64_t v17 = (uint64_t *)v3[2].__r_.__value_.__r.__words[2];
  if (v17 != (uint64_t *)v16)
  {
    if (v17 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[2].__r_.__value_.__r.__words[2], (const std::string *)v16);
  }
LABEL_38:
  uint64_t v18 = *((void *)a2 + 9);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(void *)(v18 + 8)) {
      goto LABEL_46;
    }
  }
  else if (!*(unsigned char *)(v18 + 23))
  {
    goto LABEL_46;
  }
  this = v3 + 3;
  uint64_t v19 = (uint64_t *)v3[3].__r_.__value_.__l.__data_;
  if (v19 != (uint64_t *)v18)
  {
    if (v19 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[3].__r_.__value_.__l.__data_, (const std::string *)v18);
  }
LABEL_46:
  uint64_t v20 = *((void *)a2 + 10);
  if (*(char *)(v20 + 23) < 0)
  {
    if (!*(void *)(v20 + 8)) {
      goto LABEL_54;
    }
  }
  else if (!*(unsigned char *)(v20 + 23))
  {
    goto LABEL_54;
  }
  this = (std::string *)((char *)v3 + 80);
  uint64_t v21 = (uint64_t *)v3[3].__r_.__value_.__l.__size_;
  if (v21 != (uint64_t *)v20)
  {
    if (v21 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[3].__r_.__value_.__l.__size_, (const std::string *)v20);
  }
LABEL_54:
  uint64_t v22 = *((void *)a2 + 11);
  if (*(char *)(v22 + 23) < 0)
  {
    if (!*(void *)(v22 + 8)) {
      goto LABEL_62;
    }
  }
  else if (!*(unsigned char *)(v22 + 23))
  {
    goto LABEL_62;
  }
  this = (std::string *)((char *)v3 + 88);
  uint64_t v23 = (uint64_t *)v3[3].__r_.__value_.__r.__words[2];
  if (v23 != (uint64_t *)v22)
  {
    if (v23 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[3].__r_.__value_.__r.__words[2], (const std::string *)v22);
  }
LABEL_62:
  uint64_t v24 = *((void *)a2 + 12);
  if (*(char *)(v24 + 23) < 0)
  {
    if (!*(void *)(v24 + 8)) {
      goto LABEL_70;
    }
  }
  else if (!*(unsigned char *)(v24 + 23))
  {
    goto LABEL_70;
  }
  this = v3 + 4;
  uint64_t v25 = (uint64_t *)v3[4].__r_.__value_.__l.__data_;
  if (v25 != (uint64_t *)v24)
  {
    if (v25 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[4].__r_.__value_.__l.__data_, (const std::string *)v24);
  }
LABEL_70:
  if (a2 != (const CoreML::Specification::BayesianProbitRegressor *)&CoreML::Specification::_BayesianProbitRegressor_default_instance_
    && *((void *)a2 + 13))
  {
    uint64_t v26 = (std::string *)v3[4].__r_.__value_.__l.__size_;
    if (!v26) {
      operator new();
    }
    this = CoreML::Specification::SigmoidKernel::MergeFrom(v26, *((const CoreML::Specification::SigmoidKernel **)a2 + 13));
  }
  int v27 = *((_DWORD *)a2 + 28);
  if (v27) {
    LODWORD(v3[4].__r_.__value_.__r.__words[2]) = v27;
  }
  return this;
}

void sub_22430C568(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::BayesianProbitRegressor::IsInitialized(CoreML::Specification::BayesianProbitRegressor *this)
{
  return 1;
}

void *CoreML::Specification::BayesianProbitRegressor::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.BayesianProbitRegressor");
}

void CoreML::Specification::BayesianProbitRegressor_Gaussian::New(CoreML::Specification::BayesianProbitRegressor_Gaussian *this)
{
}

void CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::New(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *this)
{
}

void CoreML::Specification::BayesianProbitRegressor_FeatureWeight::New(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *this)
{
}

void CoreML::Specification::BayesianProbitRegressor::New(CoreML::Specification::BayesianProbitRegressor *this)
{
}

uint64_t CoreML::Specification::BayesianProbitRegressor::GetCachedSize(CoreML::Specification::BayesianProbitRegressor *this)
{
  return *((unsigned int *)this + 29);
}

CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int v2 = (int *)*((void *)this + 2);
  if (!v2)
  {
    int v4 = *((_DWORD *)this + 3);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this, v4 + 1);
    int v2 = (int *)*((void *)this + 2);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *((int *)this + 2);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3)) {
    goto LABEL_6;
  }
LABEL_7:
  *int v2 = v4 + 1;
  uint64_t v6 = *(_tc_google::protobuf::Arena **)this;
  if (!*(void *)this) {
    operator new();
  }
  CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>);
  uint64_t v7 = *((void *)this + 2);
  uint64_t v8 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_22430C6D0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::BayesianProbitRegressor_FeatureWeight *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int v2 = (int *)*((void *)this + 2);
  if (!v2)
  {
    int v4 = *((_DWORD *)this + 3);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this, v4 + 1);
    int v2 = (int *)*((void *)this + 2);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *((int *)this + 2);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::BayesianProbitRegressor_FeatureWeight **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3)) {
    goto LABEL_6;
  }
LABEL_7:
  *int v2 = v4 + 1;
  uint64_t v6 = *(_tc_google::protobuf::Arena **)this;
  if (!*(void *)this) {
    operator new();
  }
  CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>);
  uint64_t v7 = *((void *)this + 2);
  uint64_t v8 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_22430C81C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 16) + 8;
    do
    {
      uint64_t v4 = *(void *)v3;
      uint64_t result = *(void *)(*(void *)v3 + 16);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      *(void *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 0;
      v3 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)(*(void *)(result + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(v4 + 16);
      *(_DWORD *)(v4 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_Gaussian>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    uint64_t v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *v9;
    uint64_t v19 = &a3[a5];
    uint64_t v20 = (CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight **)&a2[a5];
    do
    {
      uint64_t v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::BayesianProbitRegressor_FeatureValueWeight(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>);
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::Merge(v21, (std::string *)Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_22430CAD0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight>::Merge(CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight *a1, std::string *this)
{
  return CoreML::Specification::BayesianProbitRegressor_FeatureValueWeight::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::BayesianProbitRegressor>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::BayesianProbitRegressor_FeatureWeight **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    uint64_t v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *v9;
    uint64_t v19 = &a3[a5];
    uint64_t v20 = (CoreML::Specification::BayesianProbitRegressor_FeatureWeight **)&a2[a5];
    do
    {
      uint64_t v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::BayesianProbitRegressor_FeatureWeight::BayesianProbitRegressor_FeatureWeight(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>);
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::Merge(v21, (std::string *)Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_22430CC3C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C408C5061CCLL);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BayesianProbitRegressor_FeatureWeight>::Merge(CoreML::Specification::BayesianProbitRegressor_FeatureWeight *a1, std::string *this)
{
  return CoreML::Specification::BayesianProbitRegressor_FeatureWeight::MergeFrom(this, a1);
}

void xgboost_old::gbm::CreateGradBooster(xgboost_old::gbm *this, const char *a2)
{
  if (strcmp("gbtree", (const char *)this))
  {
    if (strcmp("gblinear", (const char *)this)) {
      xgboost_old::utils::Error((xgboost_old::utils *)"unknown booster type: %s", v3, this);
    }
    operator new();
  }
  operator new();
}

void sub_22430CDC8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B3C406AF4250DLL);
  _Unwind_Resume(a1);
}

void xgboost_old::utils::Error(xgboost_old::utils *this, const char *a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = operator new(0x1008uLL);
  bzero(v3, 0x1001uLL);
  vsnprintf((char *)v3, 0x1000uLL, (const char *)this, va);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, (const char *)v3);
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_22430CE70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::gbm::GBTree::SetParam(xgboost_old::gbm::GBTree *this, char *__s1, char *a3)
{
  if (!strncmp(__s1, "bst:", 4uLL))
  {
    std::string::basic_string[abi:ne180100]<0>(v11, __s1 + 4);
    std::string::basic_string[abi:ne180100]<0>(v9, a3);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v11;
    uint64_t v14 = v12;
    v11[1] = 0;
    uint64_t v12 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v9;
    uint64_t v16 = v10;
    v9[0] = 0;
    v9[1] = 0;
    uint64_t v10 = 0;
    v11[0] = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)((char *)this + 304), (long long *)v13);
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(v13[0]);
    }
    if (SHIBYTE(v10) < 0) {
      operator delete(v9[0]);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[0]);
    }
    uint64_t v6 = *((void *)this + 44);
    if (*((void *)this + 45) != v6)
    {
      unint64_t v7 = 0;
      do
      {
        (***(void (****)(void, const char *, char *))(v6 + 8 * v7))(*(void *)(v6 + 8 * v7), __s1 + 4, a3);
        ++v7;
        uint64_t v6 = *((void *)this + 44);
      }
      while (v7 < (*((void *)this + 45) - v6) >> 3);
    }
  }
  if (!strcmp(__s1, "silent")) {
    (**(void (***)(xgboost_old::gbm::GBTree *, const char *, char *))this)(this, "bst:silent", a3);
  }
  uint64_t result = xgboost_old::gbm::GBTree::TrainParam::SetParam((xgboost_old::gbm::GBTree *)((char *)this + 8), __s1, a3);
  if (*((void *)this + 27) == *((void *)this + 26)) {
    return xgboost_old::gbm::GBTree::ModelParam::SetParam((xgboost_old::gbm::GBTree *)((char *)this + 48), __s1, a3);
  }
  return result;
}

void sub_22430D048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void xgboost_old::gbm::GBTree::LoadModel(xgboost_old::gbm::GBTree *this, dmlc::Stream *a2, int a3)
{
  xgboost_old::gbm::GBTree::Clear(this);
  BOOL v6 = (**(uint64_t (***)(dmlc::Stream *, char *, uint64_t))a2)(a2, (char *)this + 48, 160) != 0;
  xgboost_old::utils::Check(v6, "GBTree: invalid model file", v7);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)this + 208, *((int *)this + 12));
  if (*((void *)this + 27) != *((void *)this + 26)) {
    operator new();
  }
  std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 232), *((int *)this + 12));
  uint64_t v8 = *((int *)this + 12);
  if (v8)
  {
    BOOL v9 = (**(uint64_t (***)(dmlc::Stream *, void, uint64_t))a2)(a2, *((void *)this + 29), 4 * v8) != 0;
    xgboost_old::utils::Check(v9, "GBTree: invalid model file", v10);
  }
  uint64_t v11 = *((void *)this + 8);
  if (v11 && a3)
  {
    std::vector<float>::resize((uint64_t)this + 256, v11 * *((int *)this + 18) + v11 * *((int *)this + 18) * *((int *)this + 19));
    uint64_t v12 = *((void *)this + 8) * *((int *)this + 18);
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 280), v12 + v12 * *((int *)this + 19));
    BOOL v13 = (**(uint64_t (***)(dmlc::Stream *))a2)(a2) != 0;
    xgboost_old::utils::Check(v13, "GBTree: invalid model file", v14);
    BOOL v15 = (**(uint64_t (***)(dmlc::Stream *))a2)(a2) != 0;
    xgboost_old::utils::Check(v15, "GBTree: invalid model file", v16);
  }
}

void sub_22430D2F8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B0C406D2B3AE9);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::gbm::GBTree::SaveModel(uint64_t a1, uint64_t a2, const char *a3)
{
  int v3 = (int)a3;
  BOOL v6 = (long long *)(a1 + 48);
  xgboost_old::utils::Assert(*(_DWORD *)(a1 + 48) == ((*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3), "GBTree", a3);
  if (v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a2 + 8))(a2, v6, 160);
  }
  else
  {
    long long v9 = v6[7];
    long long v29 = v6[6];
    long long v30 = v9;
    long long v10 = v6[9];
    long long v31 = v6[8];
    long long v32 = v10;
    long long v11 = v6[3];
    long long v25 = v6[2];
    long long v26 = v11;
    long long v12 = v6[5];
    long long v27 = v6[4];
    long long v28 = v12;
    long long v13 = v6[1];
    long long v22 = *v6;
    uint64_t v24 = *((void *)&v13 + 1);
    uint64_t v23 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a2 + 8))(a2, &v22, 160);
  }
  uint64_t v14 = *(void *)(a1 + 208);
  if (*(void *)(a1 + 216) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t result = xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::SaveModel(*(uint64_t **)(v14 + 8 * v15++), a2, v8);
      uint64_t v14 = *(void *)(a1 + 208);
    }
    while (v15 < (*(void *)(a1 + 216) - v14) >> 3);
  }
  if (*(void *)(a1 + 240) != *(void *)(a1 + 232)) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  if (*(void *)(a1 + 64) && v3)
  {
    uint64_t v17 = *(void *)(a1 + 256);
    uint64_t v16 = *(void *)(a1 + 264);
    if (v16 == v17) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = *(void *)(a1 + 256);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, v18, v16 - v17);
    uint64_t v20 = *(void *)(a1 + 280);
    uint64_t v19 = *(void *)(a1 + 288);
    if (v19 == v20) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = *(void *)(a1 + 280);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, v21, v19 - v20);
  }
  return result;
}

void xgboost_old::gbm::GBTree::LoadLegacyModel(xgboost_old::gbm::GBTree *this, dmlc::Stream *a2, int a3)
{
  xgboost_old::gbm::GBTree::Clear(this);
  BOOL v6 = (**(uint64_t (***)(dmlc::Stream *, char *, uint64_t))a2)(a2, (char *)this + 48, 160) != 0;
  xgboost_old::utils::Check(v6, "GBTree: invalid model file", v7);
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)this + 208, *((int *)this + 12));
  if (*((void *)this + 27) != *((void *)this + 26)) {
    operator new();
  }
  std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 232), *((int *)this + 12));
  uint64_t v8 = *((int *)this + 12);
  if (v8)
  {
    BOOL v9 = (**(uint64_t (***)(dmlc::Stream *, void, uint64_t))a2)(a2, *((void *)this + 29), 4 * v8) != 0;
    xgboost_old::utils::Check(v9, "GBTree: invalid model file", v10);
  }
  uint64_t v11 = *((void *)this + 8);
  if (v11 && a3)
  {
    std::vector<float>::resize((uint64_t)this + 256, v11 * *((int *)this + 18) + v11 * *((int *)this + 18) * *((int *)this + 19));
    uint64_t v12 = *((void *)this + 8) * *((int *)this + 18);
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 280), v12 + v12 * *((int *)this + 19));
    BOOL v13 = (**(uint64_t (***)(dmlc::Stream *))a2)(a2) != 0;
    xgboost_old::utils::Check(v13, "GBTree: invalid model file", v14);
    BOOL v15 = (**(uint64_t (***)(dmlc::Stream *))a2)(a2) != 0;
    xgboost_old::utils::Check(v15, "GBTree: invalid model file", v16);
  }
}

void sub_22430D74C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10B0C406D2B3AE9);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::gbm::GBTree::InitModel(xgboost_old::gbm::GBTree *this)
{
  *((void *)this + 33) = *((void *)this + 32);
  *((void *)this + 36) = *((void *)this + 35);
  uint64_t v2 = *((void *)this + 8) * *((int *)this + 18);
  unint64_t v3 = v2 + v2 * *((int *)this + 19);
  int v10 = 0;
  std::vector<float>::resize((uint64_t)this + 256, v3, &v10);
  uint64_t v4 = *((void *)this + 8) * *((int *)this + 18);
  std::vector<unsigned int>::size_type v5 = v4 + v4 * *((int *)this + 19);
  std::vector<unsigned int>::value_type __x = 0;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 280), v5, &__x);
  xgboost_old::utils::Assert(*((_DWORD *)this + 12) == 0, "GBTree: model already initialized", v6);
  return xgboost_old::utils::Assert(*((void *)this + 27) == *((void *)this + 26), "GBTree: model already initialized", v7);
}

void xgboost_old::gbm::GBTree::ResetPredBuffer(xgboost_old::gbm::GBTree *this, uint64_t a2)
{
  *((void *)this + 8) = a2;
  *((void *)this + 33) = *((void *)this + 32);
  *((void *)this + 36) = *((void *)this + 35);
  unint64_t v3 = *((int *)this + 18) * a2 + *((int *)this + 18) * a2 * *((int *)this + 19);
  int v7 = 0;
  std::vector<float>::resize((uint64_t)this + 256, v3, &v7);
  uint64_t v4 = *((void *)this + 8) * *((int *)this + 18);
  std::vector<unsigned int>::size_type v5 = v4 + v4 * *((int *)this + 19);
  std::vector<unsigned int>::value_type __x = 0;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 280), v5, &__x);
}

BOOL xgboost_old::gbm::GBTree::AllowLazyCheckPoint(xgboost_old::gbm::GBTree *this)
{
  return !*((_DWORD *)this + 5) || *((_DWORD *)this + 18) == 1;
}

void xgboost_old::gbm::GBTree::DoBoost(uint64_t a1, uint64_t a2, const char *a3, uint64_t *a4, void *a5)
{
  memset(v22, 0, sizeof(v22));
  int v10 = *(_DWORD *)(a1 + 72);
  if (v10 == 1)
  {
    xgboost_old::gbm::GBTree::BoostNewTrees(a1, (uint64_t)a5, a2, (uint64_t)a3, a4, 0, (uint64_t **)&__p);
    std::vector<std::vector<xgboost_old::tree::RegTree *>>::push_back[abi:ne180100](v22, (uint64_t)&__p);
    uint64_t v11 = __p;
    if (!__p) {
      goto LABEL_11;
    }
    BOOL v15 = __p;
    goto LABEL_10;
  }
  int v21 = *(_DWORD *)(a1 + 72);
  xgboost_old::utils::Check(((uint64_t)(a5[1] - *a5) >> 3) % (unint64_t)v10 == 0, "must have exactly ngroup*nrow gpairs", a3);
  std::vector<xgboost_old::bst_gpair>::vector(&v19, ((uint64_t)(a5[1] - *a5) >> 3) / (unint64_t)v10);
  int v18 = 0;
  if (v10 >= 1)
  {
    do
    {
      std::string __p = &v19;
      BOOL v15 = a5;
      uint64_t v16 = &v21;
      uint64_t v17 = &v18;
      turi::parallel_for<xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(0, ((unint64_t)(v20 - (unsigned char *)v19) >> 3), (uint64_t)&__p);
      xgboost_old::gbm::GBTree::BoostNewTrees(a1, (uint64_t)&v19, a2, (uint64_t)a3, a4, v18, (uint64_t **)&__p);
      std::vector<std::vector<xgboost_old::tree::RegTree *>>::push_back[abi:ne180100](v22, (uint64_t)&__p);
      if (__p)
      {
        BOOL v15 = __p;
        operator delete(__p);
      }
      ++v18;
    }
    while (v18 < v21);
  }
  uint64_t v11 = v19;
  if (v19)
  {
    uint64_t v20 = v19;
LABEL_10:
    operator delete(v11);
  }
LABEL_11:
  if (*(int *)(a1 + 72) >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      xgboost_old::gbm::GBTree::CommitModel(a1, (uint64_t *)(v22[0] + v12), v13++);
      v12 += 24;
    }
    while (v13 < *(int *)(a1 + 72));
  }
  std::string __p = v22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_22430DA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::string __p = &a18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::gbm::GBTree::Predict(uint64_t a1, uint64_t (***a2)(void), uint64_t a3, void *a4, uint64_t a5, int a6)
{
  uint64_t v30 = a3;
  int v29 = a6;
  int v10 = turi::thread::cpu_count((turi::thread *)a1);
  int v11 = -1431655765 * ((uint64_t)(*(void *)(a1 + 336) - *(void *)(a1 + 328)) >> 3);
  if (v11 < v10)
  {
    std::string __p = 0;
    long long v22 = 0;
    uint64_t v23 = 0;
    std::vector<xgboost_old::tree::RegTree::FVec>::resize((uint64_t *)(a1 + 328), v10, (uint64_t)&__p);
    if (__p)
    {
      long long v22 = __p;
      operator delete(__p);
    }
    int v12 = v10 - v11;
    uint64_t v13 = 24 * v11;
    do
    {
      uint64_t v14 = *(void *)(a1 + 328) + v13;
      std::vector<xgboost_old::tree::RegTree::FVec::Entry>::resize(v14, *(int *)(a1 + 56));
      uint64_t v15 = *(void *)(v14 + 8) - *(void *)v14;
      if (v15 >= 1) {
        memset(*(void **)v14, 255, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
      }
      v13 += 24;
      --v12;
    }
    while (v12);
  }
  uint64_t v16 = *(int *)(a1 + 76);
  uint64_t v28 = *a4 * *(int *)(a1 + 72);
  std::vector<float>::resize(a5, v28 + v28 * v16);
  uint64_t v17 = (**a2)(a2);
  (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
  if (result)
  {
    do
    {
      uint64_t v19 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17);
      unint64_t v20 = *v19;
      std::string __p = (void *)a1;
      long long v22 = v19;
      uint64_t v23 = a4;
      uint64_t v24 = &v30;
      uint64_t v25 = a5;
      long long v26 = &v28;
      long long v27 = &v29;
      turi::parallel_for<xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(0, v20, (uint64_t)&__p);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_22430DD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost_old::gbm::GBTree::Predict(uint64_t a1, uint64_t a2, void *a3, int a4, int a5)
{
  if (*(void *)(a1 + 336) == *(void *)(a1 + 328))
  {
    std::string __p = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    std::vector<xgboost_old::tree::RegTree::FVec>::resize((uint64_t *)(a1 + 328), 1uLL, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
    uint64_t v10 = *(void *)(a1 + 328);
    std::vector<xgboost_old::tree::RegTree::FVec::Entry>::resize(v10, *(int *)(a1 + 56));
    uint64_t v11 = *(void *)(v10 + 8) - *(void *)v10;
    if (v11 >= 1) {
      memset(*(void **)v10, 255, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
    }
  }
  std::vector<float>::resize((uint64_t)a3, *(int *)(a1 + 72) + *(int *)(a1 + 72) * (uint64_t)*(int *)(a1 + 76));
  LODWORD(v12) = *(_DWORD *)(a1 + 72);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      xgboost_old::gbm::GBTree::Pred(a1, a2, -1, v14++, a5, *(void **)(a1 + 328), (float *)(*a3 + v13), (int)v12, a4);
      v13 += 4;
      uint64_t v12 = *(int *)(a1 + 72);
    }
    while (v14 < v12);
  }
}

void sub_22430DE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost_old::gbm::GBTree::PredictLeaf(uint64_t a1, uint64_t (***a2)(void), void *a3, uint64_t a4, unsigned int a5)
{
  int v10 = turi::thread::cpu_count((turi::thread *)a1);
  int v11 = -1431655765 * ((uint64_t)(*(void *)(a1 + 336) - *(void *)(a1 + 328)) >> 3);
  if (v11 < v10)
  {
    std::string __p = 0;
    int v18 = 0;
    uint64_t v19 = 0;
    std::vector<xgboost_old::tree::RegTree::FVec>::resize((uint64_t *)(a1 + 328), v10, (uint64_t)&__p);
    if (__p)
    {
      int v18 = __p;
      operator delete(__p);
    }
    int v12 = v10 - v11;
    uint64_t v13 = 24 * v11;
    do
    {
      uint64_t v14 = *(void *)(a1 + 328) + v13;
      std::vector<xgboost_old::tree::RegTree::FVec::Entry>::resize(v14, *(int *)(a1 + 56));
      uint64_t v15 = *(void *)(v14 + 8) - *(void *)v14;
      if (v15 >= 1) {
        memset(*(void **)v14, 255, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
      }
      v13 += 24;
      --v12;
    }
    while (v12);
  }
  return xgboost_old::gbm::GBTree::PredPath(a1, a2, a3, a4, a5);
}

void sub_22430DFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost_old::gbm::GBTree::DumpModel(xgboost_old::gbm::GBTree *this@<X0>, const xgboost_old::utils::FeatMap *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v5 = *((void *)this + 26);
  if (*((void *)this + 27) != v5)
  {
    char v6 = a3;
    unint64_t v9 = 0;
    int v10 = (a3 >> 1) & 1;
    do
    {
      xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::DumpModel(*(void *)(v5 + 8 * v9), a2, v6 & 1, v10);
      unint64_t v12 = *(void *)(a4 + 8);
      unint64_t v11 = *(void *)(a4 + 16);
      if (v12 >= v11)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(void *)a4) >> 3);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(void *)a4) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
        if (v16) {
          uint64_t v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a4 + 16, v16);
        }
        else {
          uint64_t v17 = 0;
        }
        int v18 = v17 + v13;
        __v.__first_ = v17;
        __v.__begin_ = v18;
        __v.__end_cap_.__value_ = &v17[v16];
        v18->__r_.__value_.__r.__words[2] = v21;
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        std::string::size_type v21 = 0;
        *(_OWORD *)std::string __p = 0uLL;
        __v.__end_ = v18 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
        uint64_t v19 = *(void *)(a4 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        *(void *)(a4 + 8) = v19;
      }
      else
      {
        *(void *)(v12 + 16) = v21;
        *(_OWORD *)unint64_t v12 = *(_OWORD *)__p;
        *(void *)(a4 + 8) = v12 + 24;
      }
      ++v9;
      uint64_t v5 = *((void *)this + 26);
    }
    while (v9 < (*((void *)this + 27) - v5) >> 3);
  }
}

void sub_22430E16C(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

void xgboost_old::gbm::GBTree::~GBTree(xgboost_old::gbm::GBTree *this)
{
  xgboost_old::gbm::GBTree::~GBTree(this);
  JUMPOUT(0x22A614FA0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  *(void *)this = &unk_26D778510;
  xgboost_old::gbm::GBTree::Clear(this);
  uint64_t v2 = (void *)*((void *)this + 44);
  if (v2)
  {
    *((void *)this + 45) = v2;
    operator delete(v2);
  }
  int v7 = (void **)((char *)this + 328);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v7 = (void **)((char *)this + 304);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v7);
  unint64_t v3 = (void *)*((void *)this + 35);
  if (v3)
  {
    *((void *)this + 36) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 32);
  if (v4)
  {
    *((void *)this + 33) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 29);
  if (v5)
  {
    *((void *)this + 3CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v5;
    operator delete(v5);
  }
  char v6 = (void *)*((void *)this + 26);
  if (v6)
  {
    *((void *)this + 27) = v6;
    operator delete(v6);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

void xgboost_old::gbm::IGradBooster::LoadLegacyModel()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = "Load legacy model not implemented";
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

xgboost_old::gbm::GBTree::TrainParam *xgboost_old::gbm::GBTree::TrainParam::TrainParam(xgboost_old::gbm::GBTree::TrainParam *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(_DWORD *)this = 0;
  MEMORY[0x22A614700]((char *)this + 16, "grow_colmaker,prune");
  *(void *)((char *)this + 4) = 1;
  *((_DWORD *)this + 3) = 0;
  return this;
}

void sub_22430E278(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost_old::gbm::GBTree::TrainParam::SetParam(xgboost_old::gbm::GBTree::TrainParam *this, const char *__s1, const char *a3)
{
  if (!strcmp(__s1, "updater"))
  {
    char v6 = (char *)this + 16;
    if (*((char *)this + 39) < 0) {
      char v6 = (const char *)*((void *)this + 2);
    }
    if (strcmp(v6, a3))
    {
      MEMORY[0x22A614700]((char *)this + 16, a3);
      *((_DWORD *)this + 2) = 0;
    }
  }
  if (!strcmp(__s1, "dsplit") && !strcmp(a3, "col")) {
    *((_DWORD *)this + 3) = 1;
  }
  if (!strcmp(__s1, "nthread")) {
    *(_DWORD *)this = atoi(a3);
  }
  uint64_t result = strcmp(__s1, "num_parallel_tree");
  if (!result)
  {
    uint64_t result = atoi(a3);
    *((_DWORD *)this + 1) = result;
  }
  return result;
}

uint64_t xgboost_old::gbm::GBTree::ModelParam::SetParam(xgboost_old::gbm::GBTree::ModelParam *this, const char *a2, const char *a3)
{
  if (!strcmp("num_pbuffer", a2)) {
    *((void *)this + 2) = atol(a3);
  }
  if (!strcmp("num_output_group", a2)) {
    *((_DWORD *)this + 6) = atol(a3);
  }
  if (!strcmp("bst:num_roots", a2)) {
    *((_DWORD *)this + 1) = atoi(a3);
  }
  if (!strcmp("bst:num_feature", a2)) {
    *((_DWORD *)this + 2) = atoi(a3);
  }
  uint64_t result = strcmp("bst:size_leaf_vector", a2);
  if (!result)
  {
    uint64_t result = atoi(a3);
    *((_DWORD *)this + 7) = result;
  }
  return result;
}

void *xgboost_old::gbm::GBTree::Clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[26];
  uint64_t v3 = this[27];
  if (v3 == v2)
  {
    uint64_t v2 = this[27];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v2 + 8 * v4);
      if (v5)
      {
        char v6 = *(void **)(v5 + 72);
        if (v6)
        {
          *(void *)(v5 + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v6;
          operator delete(v6);
        }
        int v7 = *(void **)(v5 + 48);
        if (v7)
        {
          *(void *)(v5 + 56) = v7;
          operator delete(v7);
        }
        uint64_t v8 = *(void **)(v5 + 24);
        if (v8)
        {
          *(void *)(v5 + 32) = v8;
          operator delete(v8);
        }
        unint64_t v9 = *(void **)v5;
        if (*(void *)v5)
        {
          *(void *)(v5 + 8) = v9;
          operator delete(v9);
        }
        this = (void *)MEMORY[0x22A614FA0](v5, 0x10B0C406D2B3AE9);
        uint64_t v2 = v1[26];
        uint64_t v3 = v1[27];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v10 = v1[44];
  uint64_t v11 = v1[45];
  if (v11 == v10)
  {
    uint64_t v10 = v1[45];
  }
  else
  {
    unint64_t v12 = 0;
    do
    {
      this = *(void **)(v10 + 8 * v12);
      if (this)
      {
        this = (void *)(*(uint64_t (**)(void *))(*this + 32))(this);
        uint64_t v10 = v1[44];
        uint64_t v11 = v1[45];
      }
      ++v12;
    }
    while (v12 < (v11 - v10) >> 3);
    uint64_t v2 = v1[26];
  }
  v1[45] = v10;
  v1[27] = v2;
  v1[33] = v1[32];
  v1[36] = v1[35];
  return this;
}

uint64_t xgboost_old::utils::Check(uint64_t this, const char *a2, const char *a3, ...)
{
  va_start(va, a3);
  if ((this & 1) == 0)
  {
    unint64_t v4 = operator new(0x1008uLL);
    bzero(v4, 0x1001uLL);
    vsnprintf((char *)v4, 0x1000uLL, a2, va);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, (const char *)v4);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return this;
}

void sub_22430E608(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::LoadModel(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  BOOL v4 = (**a2)(a2, a1 + 96, 148) != 0;
  xgboost_old::utils::Check(v4, "TreeModel: wrong format", v5);
  std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::resize(a1, *(int *)(a1 + 100));
  std::vector<xgboost_old::tree::RTreeNodeStat>::resize(a1 + 48, *(int *)(a1 + 100));
  xgboost_old::utils::Assert(*(_DWORD *)(a1 + 100) != 0, "invalid model", v6);
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7 == *(void *)a1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)a1;
  }
  BOOL v9 = (**a2)(a2, v8, v7 - *(void *)a1) != 0;
  xgboost_old::utils::Check(v9, "TreeModel: wrong format", v10);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  if (v11 == v12) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)(a1 + 48);
  }
  BOOL v14 = (**a2)(a2, v13, v11 - v12) != 0;
  xgboost_old::utils::Check(v14, "TreeModel: wrong format", v15);
  if (*(_DWORD *)(a1 + 116))
  {
    unint64_t v35 = 0;
    uint64_t v16 = (**a2)(a2, (uint64_t)&v35, 8);
    if (v16)
    {
      unint64_t v18 = v35;
      std::vector<float>::resize(a1 + 72, v35);
      if (!v35 || (uint64_t v16 = (**a2)(a2, *(void *)(a1 + 72), 4 * v18)) != 0) {
        uint64_t v16 = 1;
      }
    }
    xgboost_old::utils::Check(v16, "TreeModel: wrong format", v17);
  }
  uint64_t v19 = (void **)(a1 + 24);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 24), 0);
  uint64_t v21 = *(unsigned int *)(a1 + 100);
  uint64_t v22 = *(int *)(a1 + 96);
  if ((int)v22 < (int)v21)
  {
    do
    {
      if (*(_DWORD *)(*(void *)a1 + 20 * v22 + 12) == -1)
      {
        uint64_t v24 = *(char **)(a1 + 32);
        unint64_t v23 = *(void *)(a1 + 40);
        if ((unint64_t)v24 >= v23)
        {
          long long v26 = (char *)*v19;
          uint64_t v27 = (v24 - (unsigned char *)*v19) >> 2;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v29 = v23 - (void)v26;
          if (v29 >> 1 > v28) {
            unint64_t v28 = v29 >> 1;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            long long v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 40, v30);
            long long v26 = *(char **)(a1 + 24);
            uint64_t v24 = *(char **)(a1 + 32);
          }
          else
          {
            long long v31 = 0;
          }
          long long v32 = &v31[4 * v27];
          *(_DWORD *)long long v32 = v22;
          uint64_t v25 = v32 + 4;
          while (v24 != v26)
          {
            int v33 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *((_DWORD *)v32 - 1) = v33;
            v32 -= 4;
          }
          *(void *)(a1 + 24) = v32;
          *(void *)(a1 + 32) = v25;
          *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = &v31[4 * v30];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v24 = v22;
          uint64_t v25 = v24 + 4;
        }
        *(void *)(a1 + 32) = v25;
        uint64_t v21 = *(unsigned int *)(a1 + 100);
      }
      ++v22;
    }
    while (v22 < (int)v21);
  }
  return xgboost_old::utils::Assert(*(_DWORD *)(a1 + 104) == ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2), "number of deleted nodes do not match, num_deleted=%d, dnsize=%lu, num_nodes=%d", v20, *(unsigned int *)(a1 + 104), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2, v21);
}

_OWORD *xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::TreeModel(_OWORD *a1)
{
  a1[3] = 0u;
  *(_OWORD *)((char *)a1 + 228) = 0u;
  *(_OWORD *)((char *)a1 + 212) = 0u;
  *(_OWORD *)((char *)a1 + 196) = 0u;
  *(_OWORD *)((char *)a1 + 18CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *(_OWORD *)((char *)a1 + 164) = 0u;
  *(_OWORD *)((char *)a1 + 148) = 0u;
  *(_OWORD *)((char *)a1 + 132) = 0u;
  *(_OWORD *)((char *)a1 + 116) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = xmmword_2246B81B0;
  std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::resize((uint64_t)a1, 1uLL);
  return a1;
}

void sub_22430E9D8(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)(v1 + 72);
  if (v5)
  {
    *(void *)(v1 + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v5;
    operator delete(v5);
  }
  xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::TreeModel(v2, v3, v1);
  _Unwind_Resume(a1);
}

void std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 20 * a2;
  }
}

void std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::__append(void **a1, unint64_t a2)
{
  char v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v6[-v7] >> 2) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = (void *)(v7 + 20 * a2);
      uint64_t v14 = 20 * a2;
      unint64_t v15 = (_DWORD *)(v7 + 12);
      do
      {
        *unint64_t v15 = 0;
        v15 += 5;
        v14 -= 20;
      }
      while (v14);
    }
    else
    {
      uint64_t v13 = *(void **)(v4 - 8);
    }
    a1[1] = v13;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (uint64_t)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v16 = &v12[20 * v8];
    uint64_t v17 = &v16[20 * a2];
    uint64_t v18 = 20 * a2;
    uint64_t v19 = v16 + 12;
    do
    {
      _DWORD *v19 = 0;
      v19 += 5;
      v18 -= 20;
    }
    while (v18);
    unint64_t v20 = &v12[20 * v11];
    uint64_t v22 = (char *)*a1;
    uint64_t v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        long long v23 = *(_OWORD *)(v21 - 20);
        *((_DWORD *)v16 - 1) = *((_DWORD *)v21 - 1);
        *(_OWORD *)(v16 - 2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v23;
        v16 -= 20;
        v21 -= 20;
      }
      while (v21 != v22);
      uint64_t v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
    {
      operator delete(v21);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(20 * a2);
}

void std::vector<xgboost_old::tree::RTreeNodeStat>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<xgboost_old::tree::RTreeNodeStat>::__append((void **)a1, a2 - v2);
  }
}

uint64_t xgboost_old::utils::Assert(uint64_t this, const char *a2, const char *a3, ...)
{
  va_start(va, a3);
  if ((this & 1) == 0)
  {
    uint64_t v4 = operator new(0x1008uLL);
    bzero(v4, 0x1001uLL);
    vsnprintf((char *)v4, 0x1000uLL, a2, va);
    fprintf((FILE *)*MEMORY[0x263EF8348], "AssertError:%s\n", (const char *)v4);
    exit(-1);
  }
  return this;
}

void sub_22430ECB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<xgboost_old::tree::RTreeNodeStat>::__append(void **a1, unint64_t a2)
{
  char v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    unint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::SaveModel(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t v5 = a1 + 12;
  xgboost_old::utils::Assert(*((_DWORD *)a1 + 25) == -858993459 * ((unint64_t)(a1[1] - *a1) >> 2), "Tree::SaveModel", a3);
  xgboost_old::utils::Assert(*((_DWORD *)a1 + 25) == ((unint64_t)(a1[7] - a1[6]) >> 4), "Tree::SaveModel", v6);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, v5, 148);
  xgboost_old::utils::Assert(*((_DWORD *)a1 + 25) != 0, "invalid model", v7);
  uint64_t v8 = a1[1];
  if (v8 == *a1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, v9, v8 - *a1);
  if (a1[7] == a1[6]) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = a1[6];
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)a2 + 8))(a2, v10, 0xCCCCCCCCCCCCCCD0 * ((unint64_t)(a1[1] - *a1) >> 2));
  if (*((_DWORD *)a1 + 29))
  {
    uint64_t v12 = (a1[10] - a1[9]) >> 2;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v12, 8);
    if (v12) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a1[9], a1[10] - a1[9]);
    }
  }
  return result;
}

uint64_t xgboost_old::tree::RegTree::LoadLegacyModel(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  BOOL v4 = (**a2)(a2, a1 + 96, 148) != 0;
  xgboost_old::utils::Check(v4, "TreeModel: wrong format", v5);
  std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::resize(a1, *(int *)(a1 + 100));
  std::vector<xgboost_old::tree::RTreeNodeStat>::resize(a1 + 48, *(int *)(a1 + 100));
  xgboost_old::utils::Assert(*(_DWORD *)(a1 + 100) != 0, "invalid model", v6);
  std::string __p = 0;
  int v50 = 0;
  uint64_t v51 = 0;
  std::vector<xgboost_old::tree::LegacyNode>::resize((uint64_t)&__p, *(int *)(a1 + 100));
  if (v50 == __p) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = __p;
  }
  BOOL v8 = (**a2)(a2, (uint64_t)v7, v50 - (unsigned char *)__p) != 0;
  xgboost_old::utils::Check(v8, "TreeModel: wrong format", v9);
  int v10 = *(_DWORD *)(a1 + 100);
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      *(_OWORD *)(*(void *)a1 + v12) = *(_OWORD *)((char *)__p + v11);
      float v14 = *(double *)((char *)__p + v11 + 16);
      *(float *)(*(void *)a1 + v12 + 16) = v14;
      ++v13;
      v12 += 20;
      v11 += 24;
    }
    while (v13 < *(int *)(a1 + 100));
    int v10 = *(_DWORD *)(a1 + 100);
  }
  if (__p)
  {
    int v50 = __p;
    operator delete(__p);
    int v10 = *(_DWORD *)(a1 + 100);
  }
  std::string __p = 0;
  int v50 = 0;
  uint64_t v51 = 0;
  std::vector<xgboost_old::tree::LegacyRTreeNodeStat>::resize((uint64_t)&__p, v10);
  if (v50 == __p) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = __p;
  }
  BOOL v16 = (**a2)(a2, (uint64_t)v15, v50 - (unsigned char *)__p) != 0;
  xgboost_old::utils::Check(v16, "TreeModel: wrong format", v17);
  uint64_t v18 = *(int *)(a1 + 100);
  uint64_t v19 = __p;
  if (v18)
  {
    unint64_t v20 = (double *)((char *)__p + 24);
    uint64_t v21 = (float *)(*(void *)(a1 + 48) + 12);
    do
    {
      *(float32x2_t *)(v21 - 3) = vcvt_f32_f64(*(float64x2_t *)(v20 - 3));
      float v22 = *(v20 - 1);
      *(v21 - 1) = v22;
      int v23 = *(_DWORD *)v20;
      v20 += 4;
      *(_DWORD *)uint64_t v21 = v23;
      v21 += 4;
      --v18;
    }
    while (v18);
  }
  else if (!__p)
  {
    goto LABEL_19;
  }
  int v50 = v19;
  operator delete(v19);
LABEL_19:
  if (!*(_DWORD *)(a1 + 116)) {
    goto LABEL_32;
  }
  std::string __p = 0;
  int v50 = 0;
  uint64_t v51 = 0;
  unint64_t v52 = 0;
  uint64_t v24 = (**a2)(a2, (uint64_t)&v52, 8);
  if (v24)
  {
    unint64_t v26 = v52;
    std::vector<double>::resize((uint64_t)&__p, v52);
    if (!v52 || (uint64_t v24 = (**a2)(a2, (uint64_t)__p, 8 * v26)) != 0) {
      uint64_t v24 = 1;
    }
  }
  xgboost_old::utils::Check(v24, "TreeModel: wrong format", v25);
  uint64_t v27 = __p;
  if (v50 == __p)
  {
    if (!__p) {
      goto LABEL_32;
    }
  }
  else
  {
    unint64_t v28 = (v50 - (unsigned char *)__p) >> 3;
    uint64_t v29 = *(float **)(a1 + 72);
    if (v28 <= 1) {
      unint64_t v28 = 1;
    }
    unint64_t v30 = (double *)__p;
    do
    {
      double v31 = *v30++;
      float v32 = v31;
      *v29++ = v32;
      --v28;
    }
    while (v28);
  }
  int v50 = v27;
  operator delete(v27);
LABEL_32:
  int v33 = (void **)(a1 + 24);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 24), 0);
  uint64_t v35 = *(unsigned int *)(a1 + 100);
  uint64_t v36 = *(int *)(a1 + 96);
  if ((int)v36 < (int)v35)
  {
    do
    {
      if (*(_DWORD *)(*(void *)a1 + 20 * v36 + 12) == -1)
      {
        size_t v38 = *(char **)(a1 + 32);
        unint64_t v37 = *(void *)(a1 + 40);
        if ((unint64_t)v38 >= v37)
        {
          long long v40 = (char *)*v33;
          uint64_t v41 = (v38 - (unsigned char *)*v33) >> 2;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v43 = v37 - (void)v40;
          if (v43 >> 1 > v42) {
            unint64_t v42 = v43 >> 1;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            size_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 40, v44);
            long long v40 = *(char **)(a1 + 24);
            size_t v38 = *(char **)(a1 + 32);
          }
          else
          {
            size_t v45 = 0;
          }
          BOOL v46 = &v45[4 * v41];
          *(_DWORD *)BOOL v46 = v36;
          BOOL v39 = v46 + 4;
          while (v38 != v40)
          {
            int v47 = *((_DWORD *)v38 - 1);
            v38 -= 4;
            *((_DWORD *)v46 - 1) = v47;
            v46 -= 4;
          }
          *(void *)(a1 + 24) = v46;
          *(void *)(a1 + 32) = v39;
          *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = &v45[4 * v44];
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(_DWORD *)size_t v38 = v36;
          BOOL v39 = v38 + 4;
        }
        *(void *)(a1 + 32) = v39;
        uint64_t v35 = *(unsigned int *)(a1 + 100);
      }
      ++v36;
    }
    while (v36 < (int)v35);
  }
  return xgboost_old::utils::Assert(*(_DWORD *)(a1 + 104) == ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2), "number of deleted nodes do not match, num_deleted=%d, dnsize=%lu, num_nodes=%d", v34, *(unsigned int *)(a1 + 104), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2, v35);
}

void sub_22430F3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<xgboost_old::tree::LegacyNode>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<xgboost_old::tree::LegacyNode>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void std::vector<xgboost_old::tree::LegacyRTreeNodeStat>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<xgboost_old::tree::LegacyRTreeNodeStat>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<xgboost_old::tree::LegacyNode>::__append(void **a1, unint64_t a2)
{
  char v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    float v14 = &v12[24 * v8];
    unint64_t v15 = &v12[24 * v11];
    size_t v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    uint64_t v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void std::vector<xgboost_old::tree::LegacyRTreeNodeStat>::__append(void **a1, unint64_t a2)
{
  char v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v4, v12);
    }
    else {
      size_t v13 = 0;
    }
    float v14 = &v13[32 * v10];
    unint64_t v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    size_t v16 = &v14[32 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::size_type v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v3, __x);
  }
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  unint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v6, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v18 = &v15[4 * v12];
    long long v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_DWORD *)uint64_t v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    float v22 = &v15[4 * v14];
    int v23 = (char *)*a1;
    for (int i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  unint64_t v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      std::vector<unsigned int>::size_type v16 = 4 * __n;
      uint64_t v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (char *)this->__begin_;
    unint64_t v11 = __n + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v18 = (unsigned int *)&v15[4 * v12];
    long long v19 = &v18[__n];
    std::vector<unsigned int>::size_type v20 = 4 * __n;
    uint64_t v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    float v22 = (unsigned int *)&v15[4 * v14];
    std::vector<unsigned int>::pointer begin = this->__begin_;
    for (std::vector<unsigned int>::pointer i = this->__end_; i != begin; --i)
    {
      unsigned int v25 = *(i - 1);
      *--uint64_t v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t std::vector<std::vector<xgboost_old::tree::RegTree *>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(result, v12);
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = 0;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v16[2] = v14 + 24;
    std::vector<std::vector<xgboost_old::tree::RegTree *>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_22430FB08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost_old::gbm::GBTree::BoostNewTrees(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, int a6@<W5>, uint64_t **a7@<X8>)
{
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  xgboost_old::gbm::GBTree::InitUpdater((xgboost_old::gbm::GBTree *)a1);
  if (*(int *)(a1 + 12) >= 1) {
    operator new();
  }
  uint64_t v10 = *(void *)(a1 + 352);
  uint64_t v9 = *(void *)(a1 + 360);
  if (v9 == v10)
  {
    uint64_t v10 = *(void *)(a1 + 360);
  }
  else
  {
    unint64_t v11 = 0;
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t *, uint64_t **))(**(void **)(v10 + 8 * v11) + 8))(*(void *)(v10 + 8 * v11), a2, a3, a5, a7);
      ++v11;
      uint64_t v10 = *(void *)(a1 + 352);
      uint64_t v9 = *(void *)(a1 + 360);
    }
    while (v11 < (v9 - v10) >> 3);
  }
  if ((a4 & 0x8000000000000000) == 0 && v9 != v10 && (char *)a7[1] - (char *)*a7 == 8)
  {
    if ((*(uint64_t (**)(void))(**(void **)(v9 - 8) + 16))(*(void *)(v9 - 8)))
    {
      uint64_t v13 = *a5;
      unint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 64))(a3);
      xgboost_old::utils::Check(v13 == (uint64_t)(v14[1] - *v14) >> 2, "distributed mode is not compatible with prob_buffer_row", v15);
      uint64_t v16 = **a7;
      uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 360) - 8) + 16))(*(void *)(*(void *)(a1 + 360) - 8));
      uint64_t v28 = a4;
      int v27 = a6;
      uint64_t v26 = v17;
      uint64_t v18 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 64))(a3);
      unint64_t v19 = ((v18[1] - *v18) >> 2);
      v25[0] = v18;
      v25[1] = a1;
      v25[2] = &v28;
      v25[3] = &v27;
      v25[4] = &v26;
      v25[5] = v16;
      turi::parallel_for<xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}>(0, v19, (uint64_t)v25);
    }
  }
}

void sub_22430FF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

turi::thread_pool *turi::parallel_for<xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    void v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v13[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
    {
      *(void *)(**(void **)a3 + 8 * v5) = *(void *)(**(void **)(a3 + 8)
                                                        + 8 * (**(int **)(a3 + 24) + v5 * **(int **)(a3 + 16)));
      ++v5;
    }
    while (a2 != v5);
  }
  return result;
}

void sub_224310150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void xgboost_old::gbm::GBTree::CommitModel(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1] - *a2;
  if (v5)
  {
    unint64_t v8 = 0;
    BOOL v9 = (char **)(a1 + 208);
    uint64_t v10 = (void **)(a1 + 232);
    do
    {
      unint64_t v12 = *(void **)(a1 + 216);
      unint64_t v11 = *(void *)(a1 + 224);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v9) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v9;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 224, v17);
        }
        else {
          uint64_t v18 = 0;
        }
        unint64_t v19 = &v18[8 * v14];
        *(void *)unint64_t v19 = *(void *)(v4 + 8 * v8);
        uint64_t v13 = v19 + 8;
        uint64_t v21 = *(char **)(a1 + 208);
        std::vector<unsigned int>::size_type v20 = *(char **)(a1 + 216);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          std::vector<unsigned int>::size_type v20 = *v9;
        }
        *(void *)(a1 + 208) = v19;
        *(void *)(a1 + 216) = v13;
        *(void *)(a1 + 224) = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        void *v12 = *(void *)(v4 + 8 * v8);
        uint64_t v13 = v12 + 1;
      }
      *(void *)(a1 + 216) = v13;
      uint64_t v24 = *(char **)(a1 + 240);
      unint64_t v23 = *(void *)(a1 + 248);
      if ((unint64_t)v24 >= v23)
      {
        uint64_t v26 = (char *)*v10;
        uint64_t v27 = (v24 - (unsigned char *)*v10) >> 2;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = v23 - (void)v26;
        if (v29 >> 1 > v28) {
          unint64_t v28 = v29 >> 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          double v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 248, v30);
          uint64_t v26 = *(char **)(a1 + 232);
          uint64_t v24 = *(char **)(a1 + 240);
        }
        else
        {
          double v31 = 0;
        }
        float v32 = &v31[4 * v27];
        *(_DWORD *)float v32 = a3;
        unsigned int v25 = v32 + 4;
        while (v24 != v26)
        {
          int v33 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v32 - 1) = v33;
          v32 -= 4;
        }
        *(void *)(a1 + 232) = v32;
        *(void *)(a1 + 24CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v25;
        *(void *)(a1 + 248) = &v31[4 * v30];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v24 = a3;
        unsigned int v25 = v24 + 4;
      }
      *(void *)(a1 + 24CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v25;
      ++v8;
      uint64_t v4 = *a2;
      uint64_t v5 = a2[1] - *a2;
    }
    while (v8 < v5 >> 3);
  }
  *(_DWORD *)(a1 + 48) += v5 >> 3;
}

uint64_t std::vector<std::vector<xgboost_old::tree::RegTree *>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::RegTree *>>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::RegTree *>>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::RegTree *>>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::RegTree *>>,std::reverse_iterator<std::vector<xgboost_old::tree::RegTree *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void xgboost_old::gbm::GBTree::InitUpdater(xgboost_old::gbm::GBTree *this)
{
  if (!*((_DWORD *)this + 4))
  {
    uint64_t v3 = *((void *)this + 44);
    uint64_t v2 = *((void *)this + 45);
    if (v2 == v3)
    {
      uint64_t v3 = *((void *)this + 45);
    }
    else
    {
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(v3 + 8 * v4);
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
          uint64_t v3 = *((void *)this + 44);
          uint64_t v2 = *((void *)this + 45);
        }
        ++v4;
      }
      while (v4 < (v2 - v3) >> 3);
    }
    *((void *)this + 45) = v3;
    if (*((char *)this + 47) < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 3), *((void *)this + 4));
    }
    else {
      std::string __p = *(std::string *)((unsigned char *)this + 1);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v7 = strtok((char *)p_p, ",");
    if (v7) {
      xgboost_old::tree::CreateUpdater((xgboost_old::tree *)v7, v8);
    }
    *((_DWORD *)this + 4) = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_224310740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

turi::thread_pool *turi::parallel_for<xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v16 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = (unint64_t)v7 > 1;
  }
  if (v10)
  {
    unint64_t v11 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v15, v11);
    double v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v13 = (unint64_t)((double)v5 + v12 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v13 = a2;
    }
    void v14[2] = (unint64_t)((double)v5 + v12 * (double)0);
    void v14[3] = v13;
    v14[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v14[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v15, v14);
  }
  if (a2 > v5)
  {
    do
      uint64_t result = (turi::thread_pool *)xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}::operator()(a3, v5++, v9);
    while (a2 != v5);
  }
  return result;
}

void sub_2243108B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(**(void **)a1 + 4 * a2);
  uint64_t v6 = **(void **)(a1 + 16) + v5;
  if (v6 < 0)
  {
    uint64_t v8 = -1;
  }
  else
  {
    uint64_t v7 = **(int **)(a1 + 24);
    xgboost_old::utils::Check(*(void *)(v4 + 64) > v6, "buffer_index exceed num_pbuffer", a3);
    uint64_t v8 = v6 + *(void *)(v4 + 64) * v7 + (v6 + *(void *)(v4 + 64) * v7) * *(int *)(v4 + 76);
  }
  uint64_t v9 = *(int *)(**(void **)(a1 + 32) + 4 * v5);
  xgboost_old::utils::Assert(*(unsigned int *)(*(void *)(v4 + 280) + 4 * v8) == (uint64_t)(*(void *)(v4 + 216) - *(void *)(v4 + 208)) >> 3, "cached buffer not up to date", a3);
  uint64_t result = xgboost_old::utils::Assert(v9 >= 0, "invalid leaf position", v10);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(v4 + 256);
  *(float *)(v13 + 4 * v8) = *(float *)(*(void *)v12 + 20 * (int)v9 + 16) + *(float *)(v13 + 4 * v8);
  uint64_t v14 = *(unsigned int *)(v4 + 76);
  if ((int)v14 >= 1)
  {
    uint64_t v15 = (float *)(*(void *)(v12 + 72) + 4 * *(_DWORD *)(v12 + 116) * (int)v9);
    uint64_t v16 = (float *)(v13 + 4 * v8 + 4);
    do
    {
      float v17 = *v15++;
      *uint64_t v16 = v17 + *v16;
      ++v16;
      --v14;
    }
    while (v14);
  }
  *(_DWORD *)(*(void *)(v4 + 280) + 4 * v8) += *(_DWORD *)(v4 + 12);
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246EECCDLL & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246EECCDLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t result, uint64_t a2, const char *a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 < *(void *)(result + 16))
  {
    uint64_t v4 = (uint64_t *)result;
    do
      uint64_t result = xgboost_old::gbm::GBTree::UpdateBufferByPosition(xgboost_old::IFMatrix *,long long,int,xgboost_old::tree::RegTree const&,int const*)::{lambda(unsigned long)#1}::operator()(*v4, v3++, a3);
    while (v3 < v4[2]);
  }
  return result;
}

void *std::vector<xgboost_old::bst_gpair>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    a1[1] += 8 * a2;
  }
  return a1;
}

void sub_224310B58(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246EED54 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246EED54 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::DoBoost(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(void *result)
{
  for (unint64_t i = result[1]; i < result[2]; ++i)
    *(void *)(**(void **)*result + 8 * i) = *(void *)(**(void **)(*result + 8)
                                                          + 8
                                                          * (**(int **)(*result + 24) + i * **(int **)(*result + 16)));
  return result;
}

void turi::parallel_for<xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    BOOL v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    void v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v13[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_224310DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::vector<xgboost_old::tree::RegTree::FVec>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<xgboost_old::tree::RegTree::FVec>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      uint64_t v9 = a1[1];
      do
      {
        double v11 = *(void **)(v9 - 24);
        v9 -= 24;
        BOOL v10 = v11;
        if (v11)
        {
          *(void *)(v4 - 16) = v10;
          operator delete(v10);
        }
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void *std::vector<xgboost_old::tree::RegTree::FVec>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = (void *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        void *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(v9, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v21 = result;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    float v17 = v14;
    uint64_t v18 = &v14[24 * v10];
    unint64_t v19 = v18;
    std::vector<unsigned int>::size_type v20 = &v14[24 * v13];
    std::__split_buffer<xgboost_old::tree::RegTree::FVec>::__construct_at_end(&v17, a2, a3);
    std::vector<xgboost_old::tree::RegTree::FVec>::__swap_out_circular_buffer(a1, &v17);
    return (void *)std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_224310FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<xgboost_old::tree::RegTree::FVec>::__construct_at_end(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  uint64_t v4 = (void *)result[2];
  if (a2)
  {
    BOOL v6 = &v4[3 * a2];
    uint64_t v7 = 24 * a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(v4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_224311078(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost_old::tree::RegTree::FVec>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::tree::RegTree::FVec>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::tree::RegTree::FVec>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::tree::RegTree::FVec>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::tree::RegTree::FVec>,std::reverse_iterator<xgboost_old::tree::RegTree::FVec*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<xgboost_old::tree::RegTree::FVec::Entry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<xgboost_old::tree::RegTree::FVec::Entry>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<xgboost_old::tree::RegTree::FVec::Entry>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 2);
    if (v9 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 1 > v9) {
      unint64_t v9 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    long long v14 = &v13[4 * v10];
    uint64_t v15 = &v13[4 * v12];
    bzero(v14, 4 * a2);
    uint64_t v16 = &v14[4 * a2];
    uint64_t v18 = (char *)*a1;
    float v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        int v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v14 - 1) = v19;
        v14 -= 4;
      }
      while (v17 != v18);
      float v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  int v5 = *(_DWORD *)turi::thread::get_tls_data((turi::thread *)a1);
  uint64_t v6 = *(void *)(v4 + 328);
  unint64_t v7 = *(void *)(*(void *)(a1 + 8) + 8) + a2;
  xgboost_old::utils::Assert(v7 < **(void **)(a1 + 16), "data row index exceed bound", v8);
  LODWORD(v9) = *(_DWORD *)(v4 + 72);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (void *)(v6 + 24 * v5);
    do
    {
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v13 = *(void *)(*(void *)(a1 + 8) + 16);
      uint64_t v14 = *(void *)(v13 + 8 * a2);
      uint64_t v15 = *(void *)(v13 + 8 * (a2 + 1)) - v14;
      v20[0] = *(void *)(*(void *)(a1 + 8) + 24) + 8 * v14;
      v20[1] = v15;
      uint64_t v16 = **(void **)(a1 + 24);
      if (v16 < 0) {
        uint64_t v17 = -1;
      }
      else {
        uint64_t v17 = v16 + v7;
      }
      uint64_t v18 = *(void *)(v12 + 16);
      if (*(void *)(v12 + 24) == v18) {
        int v19 = 0;
      }
      else {
        int v19 = *(_DWORD *)(v18 + 4 * v7);
      }
      xgboost_old::gbm::GBTree::Pred(v4, (uint64_t)v20, v17, v10, v19, v11, (float *)(**(void **)(a1 + 32) + 4 * (v10 + v7 * (int)v9)), **(void **)(a1 + 40), **(_DWORD **)(a1 + 48));
      ++v10;
      uint64_t v9 = *(int *)(v4 + 72);
    }
    while (v10 < v9);
  }
}

void xgboost_old::gbm::GBTree::Pred(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, void *a6, float *a7, uint64_t a8, int a9)
{
  int v17 = a9;
  unint64_t v18 = *(int *)(a1 + 76);
  int v67 = 0;
  std::vector<float>::vector(__p, v18, &v67);
  if (a3 < 0)
  {
    int v22 = 0;
    unsigned int v23 = 0;
    if (!a9) {
      int v17 = -1;
    }
    float v21 = 0.0;
    uint64_t v20 = -1;
  }
  else
  {
    xgboost_old::utils::Check(*(void *)(a1 + 64) > a3, "buffer_index exceed num_pbuffer", v19);
    uint64_t v20 = (a3 + *(void *)(a1 + 64) * a4) * (*(int *)(a1 + 76) + 1);
    float v21 = 0.0;
    if (a9)
    {
      int v22 = 0;
      unsigned int v23 = 0;
    }
    else if (v20 < 0)
    {
      int v22 = 0;
      unsigned int v23 = 0;
      int v17 = -1;
    }
    else
    {
      uint64_t v24 = *(unsigned int *)(a1 + 76);
      unsigned int v23 = *(_DWORD *)(*(void *)(a1 + 280) + 4 * v20);
      uint64_t v25 = *(void *)(a1 + 256);
      float v21 = *(float *)(v25 + 4 * v20);
      if ((int)v24 >= 1)
      {
        uint64_t v26 = __p[0];
        uint64_t v27 = (int *)(v25 + 4 * v20 + 4);
        do
        {
          int v28 = *v27++;
          *v26++ = v28;
          --v24;
        }
        while (v24);
      }
      int v17 = -1;
      int v22 = 1;
    }
  }
  uint64_t v29 = *(void *)(a1 + 208);
  unint64_t v30 = (*(void *)(a1 + 216) - v29) >> 3;
  if (v30 != v23)
  {
    unint64_t v31 = v23;
    unint64_t v32 = *(unsigned int *)(a2 + 8);
    if (v32)
    {
      uint64_t v33 = 0;
      for (unint64_t i = 0; i < v32; ++i)
      {
        unint64_t v35 = *(unsigned int *)(*(void *)a2 + v33);
        if (v35 < (uint64_t)(a6[1] - *a6) >> 2)
        {
          *(_DWORD *)(*a6 + 4 * v35) = *(_DWORD *)(*(void *)a2 + v33 + 4);
          unint64_t v32 = *(unsigned int *)(a2 + 8);
        }
        v33 += 8;
      }
      uint64_t v29 = *(void *)(a1 + 208);
      unint64_t v30 = (*(void *)(a1 + 216) - v29) >> 3;
    }
    else
    {
      unint64_t v32 = 0;
    }
    if (v30 > v31)
    {
      uint64_t v36 = *(void *)(a1 + 232);
      unint64_t v37 = (float *)__p[0];
      do
      {
        if (*(_DWORD *)(v36 + 4 * v31) == a4)
        {
          size_t v38 = *(uint64_t **)(v29 + 8 * v31);
          uint64_t v39 = *v38;
          LODWORD(v4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = a5;
          int v41 = a5;
          if (*(_DWORD *)(*v38 + 20 * a5 + 4) != -1)
          {
            uint64_t v40 = a5;
            do
            {
              int v42 = *(_DWORD *)(v39 + 20 * v40 + 12);
              float v43 = *(float *)(*a6 + 4 * (v42 & 0x7FFFFFFF));
              if (v43 == NAN)
              {
                uint64_t v47 = v39 + 20 * v40;
                long long v48 = (int *)(v47 + 4);
                BOOL v46 = (int *)(v47 + 8);
                if (v42 < 0) {
                  BOOL v46 = v48;
                }
              }
              else
              {
                float v44 = *(float *)(v39 + 20 * v40 + 16);
                uint64_t v45 = v39 + 20 * v40;
                if (v44 <= v43) {
                  BOOL v46 = (int *)(v45 + 8);
                }
                else {
                  BOOL v46 = (int *)(v45 + 4);
                }
              }
              int v41 = *v46;
              uint64_t v40 = v41;
            }
            while (*(_DWORD *)(v39 + 20 * v41 + 4) != -1);
          }
          float v49 = *(float *)(v39 + 20 * (int)v40 + 16);
          uint64_t v50 = *(unsigned int *)(a1 + 76);
          if ((int)v50 >= 1)
          {
            uint64_t v51 = (float *)(v38[9] + 4 * *((_DWORD *)v38 + 29) * v41);
            unint64_t v52 = v37;
            do
            {
              float v53 = *v51++;
              *unint64_t v52 = v53 + *v52;
              ++v52;
              --v50;
            }
            while (v50);
          }
          float v21 = v21 + v49;
          if (!--v17) {
            break;
          }
        }
        ++v31;
      }
      while (v31 != v30);
    }
    if (v32)
    {
      uint64_t v54 = 0;
      for (unint64_t j = 0; j < v32; ++j)
      {
        unint64_t v56 = *(unsigned int *)(*(void *)a2 + v54);
        if (v56 < (uint64_t)(a6[1] - *a6) >> 2)
        {
          *(_DWORD *)(*a6 + 4 * v56) = -1;
          unint64_t v32 = *(unsigned int *)(a2 + 8);
        }
        v54 += 8;
      }
    }
  }
  if (v22)
  {
    *(_DWORD *)(*(void *)(a1 + 280) + 4 * v2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = (*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3;
    uint64_t v57 = *(void *)(a1 + 256);
    *(float *)(v57 + 4 * v2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v21;
    uint64_t v58 = *(unsigned int *)(a1 + 76);
    if ((int)v58 <= 0)
    {
      *a7 = v21;
      uint64_t v63 = (char *)__p[0];
LABEL_53:
      if (!v63) {
        return;
      }
      goto LABEL_54;
    }
    uint64_t v59 = (int *)__p[0];
    uint64_t v60 = (_DWORD *)(v57 + 4 * v20 + 4);
    do
    {
      int v61 = *v59++;
      *v60++ = v61;
      --v58;
    }
    while (v58);
  }
  uint64_t v62 = *(unsigned int *)(a1 + 76);
  *a7 = v21;
  uint64_t v63 = (char *)__p[0];
  if ((int)v62 < 1) {
    goto LABEL_53;
  }
  uint64_t v64 = 0;
  uint64_t v65 = 4 * v62;
  long long v66 = &a7[a8];
  do
  {
    *long long v66 = *(float *)&v63[v64];
    v64 += 4;
    v66 += a8;
  }
  while (v65 != v64);
LABEL_54:
  __p[1] = v63;
  operator delete(v63);
}

void sub_2243117D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246EEDFCLL & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246EEDFCLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  for (unint64_t i = a1[1]; i < a1[2]; ++i)
    xgboost_old::gbm::GBTree::Predict(xgboost_old::IFMatrix *,long long,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}::operator()(*a1, i);
}

uint64_t xgboost_old::gbm::GBTree::PredPath(uint64_t a1, uint64_t (***a2)(void), void *a3, uint64_t a4, unsigned int a5)
{
  unsigned int v16 = a5;
  if (!a5)
  {
    uint64_t v10 = *(void *)(a1 + 216) - *(void *)(a1 + 208);
    goto LABEL_5;
  }
  uint64_t v9 = a5;
  uint64_t v10 = *(void *)(a1 + 216) - *(void *)(a1 + 208);
  if (a5 > (unint64_t)(v10 >> 3))
  {
LABEL_5:
    unsigned int v16 = (unint64_t)v10 >> 3;
    uint64_t v9 = v16;
  }
  std::vector<float>::resize(a4, *a3 * v9);
  uint64_t v11 = (**a2)(a2);
  (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
  if (result)
  {
    do
    {
      uint64_t v13 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11);
      unint64_t v14 = *v13;
      v15[0] = v13;
      v15[1] = a1;
      v15[2] = &v16;
      void v15[3] = a3;
      v15[4] = a4;
      turi::parallel_for<xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(0, v14, (uint64_t)v15);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
    while ((result & 1) != 0);
  }
  return result;
}

turi::thread_pool *turi::parallel_for<xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  unint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    void v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v13[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      uint64_t result = (turi::thread_pool *)xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
  return result;
}

void sub_224311BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = (uint64_t)turi::thread::get_tls_data((turi::thread *)a1);
  uint64_t v6 = (void *)(*(void *)(v4 + 328) + 24 * *(int *)result);
  uint64_t v8 = *(void *)(*(void *)a1 + 8);
  uint64_t v7 = *(void *)(*(void *)a1 + 16);
  uint64_t v9 = *(void *)(v7 + 8 * a2);
  uint64_t v10 = *(void *)(v7 + 8 * (a2 + 1)) - v9;
  if (v10)
  {
    double v11 = (_DWORD *)(*(void *)(*(void *)a1 + 24) + 8 * v9 + 4);
    do
    {
      unint64_t v12 = *(v11 - 1);
      if (v12 < (uint64_t)(v6[1] - *v6) >> 2) {
        *(_DWORD *)(*v6 + 4 * v12) = *v11;
      }
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  uint64_t v13 = **(unsigned int **)(a1 + 16);
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v8 + a2;
    uint64_t v16 = *(void *)(v4 + 208);
    uint64_t v18 = *(void *)(*(void *)(a1 + 24) + 16);
    uint64_t v17 = *(void *)(*(void *)(a1 + 24) + 24);
    uint64_t v19 = **(void **)(a1 + 32);
    uint64_t result = 20;
    do
    {
      if (v17 == v18) {
        int v20 = 0;
      }
      else {
        int v20 = *(_DWORD *)(v18 + 4 * v15);
      }
      uint64_t v21 = **(void **)(v16 + 8 * v14);
      if (*(_DWORD *)(v21 + 20 * v20 + 4) != -1)
      {
        uint64_t v22 = v20;
        do
        {
          int v23 = *(_DWORD *)(v21 + 20 * v22 + 12);
          float v24 = *(float *)(*v6 + 4 * (v23 & 0x7FFFFFFF));
          if (v24 == NAN)
          {
            uint64_t v28 = v21 + 20 * v22;
            uint64_t v29 = (int *)(v28 + 4);
            uint64_t v27 = (int *)(v28 + 8);
            if (v23 < 0) {
              uint64_t v27 = v29;
            }
          }
          else
          {
            float v25 = *(float *)(v21 + 20 * v22 + 16);
            uint64_t v26 = v21 + 20 * v22;
            if (v25 <= v24) {
              uint64_t v27 = (int *)(v26 + 8);
            }
            else {
              uint64_t v27 = (int *)(v26 + 4);
            }
          }
          int v30 = *v27;
          uint64_t v22 = v30;
        }
        while (*(_DWORD *)(v21 + 20 * v30 + 4) != -1);
        int v20 = v30;
      }
      *(float *)(v19 + 4 * (v15 * v13 + v14++)) = (float)v20;
    }
    while (v14 != v13);
  }
  uint64_t v31 = *(void *)(*(void *)a1 + 16);
  uint64_t v32 = *(void *)(v31 + 8 * a2);
  uint64_t v33 = *(void *)(v31 + 8 * (a2 + 1)) - v32;
  if (v33)
  {
    uint64_t v34 = (unsigned int *)(*(void *)(*(void *)a1 + 24) + 8 * v32);
    do
    {
      unsigned int v36 = *v34;
      v34 += 2;
      uint64_t v35 = v36;
      if (v36 < (unint64_t)((uint64_t)(v6[1] - *v6) >> 2)) {
        *(_DWORD *)(*v6 + 4 * v35) = -1;
      }
      --v33;
    }
    while (v33);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246EEE95 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246EEE95 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (v1 < *(void *)(result + 16))
  {
    unint64_t v2 = (uint64_t *)result;
    do
      uint64_t result = xgboost_old::gbm::GBTree::PredPath(xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<float> *,unsigned int)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

uint64_t xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::DumpModel(uint64_t a1, xgboost_old::utils::FeatMap *a2, uint64_t a3, int a4)
{
  if (a4) {
    internalJSONNode::newInternal((internalJSONNode *)4);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t *)&__str, &__p, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(int *)(a1 + 96) >= 1)
  {
    int v7 = 0;
    do
      xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Dump((void *)a1, v7++, (uint64_t)&__str, a2, 0, a3);
    while (v7 < *(_DWORD *)(a1 + 96));
  }
  std::stringbuf::str();
  __str.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B8];
  std::string::size_type v8 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words
                            + *(void *)(__str.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8]
                                                                                                + 64);
  __str.__r_.__value_.__r.__words[2] = v8;
  uint64_t v12 = MEMORY[0x263F8C318] + 16;
  if (v14 < 0) {
    operator delete(v13);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v15);
}

void sub_22431228C(void *a1)
{
}

void sub_2243122C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::DumpJson()
{
}

void sub_224313C54(_Unwind_Exception *exception_object, internalJSONNode *a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,internalJSONNode *a22,internalJSONNode *a23,internalJSONNode *a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    uint64_t v25 = *((void *)a22 + 10) - 1;
    *((void *)a22 + 1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v25;
    if (!v25) {
      internalJSONNode::deleteInternal(a22, a2);
    }
  }
  if (a23)
  {
    uint64_t v26 = *((void *)a23 + 10) - 1;
    *((void *)a23 + 1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v26;
    if (!v26) {
      internalJSONNode::deleteInternal(a23, a2);
    }
  }
  if (a24)
  {
    uint64_t v27 = *((void *)a24 + 10) - 1;
    *((void *)a24 + 1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v27;
    if (!v27) {
      internalJSONNode::deleteInternal(a24, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void *xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Dump(void *a1, int a2, uint64_t a3, xgboost_old::utils::FeatMap *a4, int a5, uint64_t a6)
{
  if (a5 >= 1)
  {
    int v12 = a5;
    do
    {
      char v37 = 9;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a3 + 16), (uint64_t)&v37, 1);
      --v12;
    }
    while (v12);
  }
  uint64_t v13 = a2;
  if (*(_DWORD *)(*a1 + 20 * a2 + 4) == -1)
  {
    uint64_t v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":leaf=", 6);
    std::ostream::operator<<();
    if (a6)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a3 + 16), (uint64_t)",cover=", 7);
      std::ostream::operator<<();
    }
    char v38 = 10;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a3 + 16), (uint64_t)&v38, 1);
  }
  else
  {
    unint64_t v14 = *(_DWORD *)(*a1 + 20 * a2 + 12) & 0x7FFFFFFF;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a4 + 1) - *(void *)a4) >> 3) > v14)
    {
      xgboost_old::utils::Assert(1, "utils::FMap::name feature index exceed bound", (const char *)a3);
      switch(*(_DWORD *)(*((void *)a4 + 3) + 4 * v14))
      {
        case 0:
          int v30 = (void *)std::ostream::operator<<();
          uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)":[", 2);
          uint64_t v33 = xgboost_old::utils::FeatMap::name(a4, v14, v32);
          size_t v34 = strlen(v33);
          uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] yes=", 6);
          unsigned int v36 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)",no=", 4);
          goto LABEL_13;
        case 1:
        case 2:
        case 3:
          uint64_t v16 = (void *)std::ostream::operator<<();
          uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":[", 2);
          uint64_t v19 = xgboost_old::utils::FeatMap::name(a4, v14, v18);
          size_t v20 = strlen(v19);
          uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
          goto LABEL_12;
        default:
          xgboost_old::utils::Error((xgboost_old::utils *)"unknown fmap type", v15);
      }
    }
    float v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)":[f", 3);
    uint64_t v21 = (void *)std::ostream::operator<<();
LABEL_12:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"<", 1);
    uint64_t v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] yes=", 6);
    uint64_t v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)",no=", 4);
    uint64_t v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)",missing=", 9);
LABEL_13:
    std::ostream::operator<<();
    if (a6)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a3 + 16), (uint64_t)",gain=", 6);
      uint64_t v28 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)",cover=", 7);
      std::ostream::operator<<();
    }
    char v39 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a3 + 16), (uint64_t)&v39, 1);
    uint64_t v29 = (a5 + 1);
    xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Dump(a1, *(unsigned int *)(*a1 + 20 * v13 + 4), a3, a4, v29, a6);
    return (void *)xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Dump(a1, *(unsigned int *)(*a1 + 20 * v13 + 8), a3, a4, v29, a6);
  }
}

void *xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::float_to_hexadecimal@<X0>(void *a1@<X8>, float a2@<S0>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  snprintf(__str, 9uLL, "%02X%02X%02X%02X", LOBYTE(a2), BYTE1(a2), BYTE2(a2), HIBYTE(LODWORD(a2)));
  __str[8] = 0;
  return std::string::basic_string[abi:ne180100]<0>(a1, __str);
}

char *xgboost_old::utils::FeatMap::name(xgboost_old::utils::FeatMap *this, unint64_t a2, const char *a3)
{
  xgboost_old::utils::Assert(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) > a2, "utils::FMap::name feature index exceed bound", a3);
  uint64_t result = (char *)(*(void *)this + 24 * a2);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

void xgboost_old::gbm::GBLinear::SetParam(xgboost_old::gbm::GBLinear *this, const char *__s1, const char *a3)
{
  if (!strncmp(__s1, "bst:", 4uLL)) {
    xgboost_old::gbm::GBLinear::ParamTrain::SetParam((xgboost_old::gbm::GBLinear *)((char *)this + 168), __s1 + 4, a3);
  }
  if (*((void *)this + 19) == *((void *)this + 18))
  {
    if (!strcmp(__s1, "bst:num_feature")) {
      *((_DWORD *)this + 2) = atoi(a3);
    }
    if (!strcmp(__s1, "num_output_group")) {
      *((_DWORD *)this + 3) = atoi(a3);
    }
  }
}

void xgboost_old::gbm::GBLinear::LoadModel(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  BOOL v4 = (**a2)(a2, a1 + 8, 136) != 0;
  xgboost_old::utils::Assert(v4, "Load LinearBooster", v5);
  unint64_t v8 = 0;
  if ((**a2)(a2, (uint64_t)&v8, 8))
  {
    uint64_t v6 = (uint64_t *)(a1 + 144);
    unint64_t v7 = v8;
    std::vector<float>::resize((uint64_t)v6, v8);
    if (v8) {
      (**a2)(a2, *v6, 4 * v7);
    }
  }
}

uint64_t xgboost_old::gbm::GBLinear::SaveModel(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a1 + 8, 136);
  uint64_t v5 = (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v5, 8);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 144), *(void *)(a1 + 152) - *(void *)(a1 + 144));
  }
  return result;
}

void xgboost_old::gbm::GBLinear::InitModel(xgboost_old::gbm::GBLinear *this)
{
  std::vector<float>::resize((uint64_t)this + 144, (*((_DWORD *)this + 3) + *((_DWORD *)this + 3) * *((_DWORD *)this + 2)));
  unint64_t v2 = (void *)*((void *)this + 18);
  uint64_t v3 = *((void *)this + 19) - (void)v2;
  if (v3 >= 1)
  {
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
  }
}

uint64_t xgboost_old::gbm::GBLinear::DoBoost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  uint64_t v9 = (int **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  if ((int)v8 >= 1)
  {
    uint64_t v10 = 0;
    double v11 = *v9;
    unint64_t v12 = (char *)v9[1] - (char *)*v9;
    uint64_t v13 = v12 & 0x3FFFFFFFCLL;
    uint64_t v14 = *(void *)(a1 + 144) + 4 * (*(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8));
    uint64_t v15 = (v12 >> 2);
    do
    {
      if (v13)
      {
        uint64_t v16 = *a5;
        double v17 = 0.0;
        uint64_t v18 = v15;
        uint64_t v19 = v11;
        double v20 = 0.0;
        do
        {
          int v21 = *v19++;
          uint64_t v22 = (v10 + v21 * v8);
          float v23 = *(float *)(v16 + 8 * v22 + 4);
          if (v23 >= 0.0)
          {
            double v17 = v17 + *(float *)(v16 + 8 * v22);
            double v20 = v20 + v23;
          }
          --v18;
        }
        while (v18);
      }
      else
      {
        double v20 = 0.0;
        double v17 = 0.0;
      }
      float v24 = *(float *)(v14 + 4 * v10);
      float v25 = -(v17 + *(float *)(a1 + 180) * v24) / (v20 + *(float *)(a1 + 180)) * *(float *)(a1 + 168);
      *(float *)(v14 + 4 * v1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v24 + v25;
      if (v13)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = v15;
        uint64_t v28 = v11;
        do
        {
          int v29 = *v28++;
          uint64_t v30 = (v10 + v29 * v8);
          float v31 = *(float *)(v26 + 8 * v30 + 4);
          if (v31 >= 0.0) {
            *(float *)(v26 + 8 * v3CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *(float *)(v26 + 8 * v30) + (float)(v31 * v25);
          }
          --v27;
        }
        while (v27);
      }
      ++v10;
    }
    while (v10 != v8);
  }
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  for (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
        result;
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32))
  {
    size_t v34 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v32 + 32))(v32);
    uint64_t v35 = *v34;
    if (*v34)
    {
      uint64_t v36 = 0;
      uint64_t v37 = *((void *)v34 + 1);
      uint64_t v38 = *((void *)v34 + 2);
      do
      {
        if ((int)v8 >= 1)
        {
          uint64_t v39 = 0;
          uint64_t v40 = (uint64_t *)(v38 + 16 * v36);
          uint64_t v41 = *v40;
          uint64_t v42 = *((unsigned int *)v40 + 2);
          unint64_t v43 = *(void *)(a1 + 144) + 4 * *(int *)(a1 + 12) * (unint64_t)*(unsigned int *)(v37 + 4 * v36);
          float v44 = (float *)(v41 + 4);
          do
          {
            if (v42)
            {
              uint64_t v45 = *a5;
              double v46 = 0.0;
              uint64_t v47 = v42;
              long long v48 = v44;
              double v49 = 0.0;
              do
              {
                uint64_t v50 = (v39 + *((_DWORD *)v48 - 1) * v8);
                float v51 = *(float *)(v45 + 8 * v50 + 4);
                if (v51 >= 0.0)
                {
                  double v49 = v49 + (float)(*v48 * *(float *)(v45 + 8 * v50));
                  double v46 = v46 + (float)(*v48 * (float)(v51 * *v48));
                }
                v48 += 2;
                --v47;
              }
              while (v47);
              float v52 = *(float *)(v43 + 4 * v39);
              double v53 = 0.0;
              if (v46 >= 0.00000999999975)
              {
                double v54 = *(float *)(a1 + 172);
                double v55 = v49 + v54 * v52;
                double v56 = v46 + v54;
                double v57 = v52 - v55 / (v46 + v54);
                double v58 = *(float *)(a1 + 176);
                double v59 = -v52;
                if (v57 >= 0.0)
                {
                  double v61 = -(v55 + v58) / v56;
                  if (v61 >= v59) {
                    double v53 = v61;
                  }
                  else {
                    double v53 = -v52;
                  }
                }
                else
                {
                  double v60 = -(v55 - v58) / v56;
                  if (v60 <= v59) {
                    double v53 = v60;
                  }
                  else {
                    double v53 = -v52;
                  }
                }
              }
              float v62 = v53 * *(float *)(a1 + 168);
              *(float *)(v43 + 4 * v39) = v52 + v62;
              uint64_t v63 = *a5;
              uint64_t v64 = v42;
              uint64_t v65 = v44;
              do
              {
                uint64_t v66 = (v39 + *((_DWORD *)v65 - 1) * v8);
                float v67 = *(float *)(v63 + 8 * v66 + 4);
                if (v67 >= 0.0) {
                  *(float *)(v63 + 8 * v66) = *(float *)(v63 + 8 * v66) + (float)((float)(v67 * *v65) * v62);
                }
                v65 += 2;
                --v64;
              }
              while (v64);
            }
            else
            {
              *(float *)(v43 + 4 * v39) = *(float *)(v43 + 4 * v39) + (float)(*(float *)(a1 + 168) * 0.0);
            }
            ++v39;
          }
          while (v39 != v8);
        }
        ++v36;
      }
      while (v36 != v35);
    }
  }
  return result;
}

uint64_t xgboost_old::gbm::GBLinear::Predict(uint64_t a1, uint64_t (***a2)(void), const char *a3, uint64_t a4, void *a5, int a6)
{
  xgboost_old::utils::Check(a6 == 0, "GBLinear::Predict ntrees is only valid for gbtree predictor", a3);
  std::vector<float>::resize((uint64_t)a5, 0);
  uint64_t v9 = (**a2)(a2);
  uint64_t v10 = *(int *)(a1 + 12);
  for (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
        result;
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9))
  {
    unint64_t v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
    xgboost_old::utils::Assert(v12[1] * v10 == (uint64_t)(a5[1] - *a5) >> 2, "base_rowid is not set correctly", v13);
    std::vector<float>::resize((uint64_t)a5, *v12 * v10 + ((uint64_t)(a5[1] - *a5) >> 2));
    uint64_t v14 = *(unsigned int *)v12;
    if (*(_DWORD *)v12)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v12[2];
      uint64_t v17 = v12[1];
      uint64_t v18 = v12[3] + 4;
      do
      {
        if ((int)v10 <= 0)
        {
          ++v15;
        }
        else
        {
          int v19 = 0;
          uint64_t v20 = *(void *)(v16 + 8 * v15);
          uint64_t v21 = *a5 + 4 * (v17 + v15) * v10;
          uint64_t v22 = *(unsigned int *)(a1 + 12);
          ++v15;
          do
          {
            if ((int)v22 >= 1)
            {
              uint64_t v23 = 0;
              uint64_t v24 = (*(_DWORD *)(v16 + 8 * v15) - v20);
              unsigned int v25 = *(_DWORD *)(a1 + 8);
              uint64_t v26 = *(void *)(a1 + 144);
              do
              {
                float v27 = *(float *)(v26 + 4 * v25 * v22 + 4 * v23);
                if (v24)
                {
                  uint64_t v28 = v24;
                  int v29 = (float *)(v18 + 8 * v20);
                  do
                  {
                    unsigned int v30 = *((_DWORD *)v29 - 1);
                    if (v30 < v25) {
                      float v27 = v27
                    }
                          + (float)(*v29 * *(float *)(v26 + 4 * v23 + 4 * v30 * (unint64_t)v22));
                    v29 += 2;
                    --v28;
                  }
                  while (v28);
                }
                *(float *)(v21 + 4 * v23++) = v27;
              }
              while (v23 != v22);
            }
            ++v19;
          }
          while (v19 != v10);
        }
      }
      while (v15 != v14);
    }
  }
  return result;
}

uint64_t xgboost_old::gbm::GBLinear::Predict(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned int *)(result + 12);
  if ((int)v3 >= 1)
  {
    int v4 = 0;
    if (a3[1] == *a3) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = *a3;
    }
    unsigned int v6 = *(_DWORD *)(result + 8);
    uint64_t v7 = *(void *)(result + 144);
    uint64_t v8 = *(unsigned int *)(a2 + 8);
    do
    {
      uint64_t v9 = 0;
      uint64_t v10 = *(void *)a2 + 4;
      do
      {
        float v11 = *(float *)(v7 + 4 * v6 * v3 + 4 * v9);
        if (v8)
        {
          uint64_t result = v8;
          unint64_t v12 = (float *)v10;
          do
          {
            unsigned int v13 = *((_DWORD *)v12 - 1);
            if (v13 < v6) {
              float v11 = v11 + (float)(*v12 * *(float *)(v7 + 4 * v9 + 4 * v13 * (unint64_t)v3));
            }
            v12 += 2;
            --result;
          }
          while (result);
        }
        *(float *)(v5 + 4 * v9++) = v11;
      }
      while (v9 != v3);
      ++v4;
    }
    while (v4 != v3);
  }
  return result;
}

void xgboost_old::gbm::GBLinear::PredictLeaf(uint64_t a1, const char *a2)
{
}

uint64_t xgboost_old::gbm::GBLinear::DumpModel@<X0>(xgboost_old::gbm::GBLinear *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v34, "");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v30, (const std::string *)&v34, 24);
  if (SHIBYTE(v34.__end_) < 0) {
    operator delete(v34.__first_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"bias:\n", 6);
  if (*((int *)this + 3) >= 1)
  {
    uint64_t v5 = 0;
    unsigned int v6 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v7 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
      uint64_t v8 = std::locale::use_facet((const std::locale *)&v34, v6);
      ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
      std::locale::~locale((std::locale *)&v34);
      std::ostream::put();
      std::ostream::flush();
      ++v5;
    }
    while (v5 < *((int *)this + 3));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"weight:\n", 8);
  int v9 = *((_DWORD *)this + 3);
  if (v9 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    LODWORD(v12) = *((_DWORD *)this + 2);
    unsigned int v13 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      if (v12)
      {
        unint64_t v14 = 0;
        do
        {
          uint64_t v15 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
          uint64_t v16 = std::locale::use_facet((const std::locale *)&v34, v13);
          ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
          std::locale::~locale((std::locale *)&v34);
          std::ostream::put();
          std::ostream::flush();
          ++v14;
          unint64_t v12 = *((unsigned int *)this + 2);
        }
        while (v14 < v12);
        int v9 = *((_DWORD *)this + 3);
      }
      ++v11;
      v10 += 4;
    }
    while (v11 < v9);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::stringbuf::str();
  unint64_t v17 = *(void *)(a2 + 16);
  unint64_t v18 = *(void *)(a2 + 8);
  if (v18 >= v17)
  {
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(void *)a2) >> 3);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(void *)a2) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v20;
    }
    v34.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v22) {
      uint64_t v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a2 + 16, v22);
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = v23 + v19;
    v34.__first_ = v23;
    v34.__begin_ = v24;
    v34.__end_cap_.__value_ = &v23[v22];
    v24->__r_.__value_.__r.__words[2] = v29;
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v34.__end_ = v24 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &v34);
    uint64_t v25 = *(void *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&v34);
    *(void *)(a2 + 8) = v25;
  }
  else
  {
    *(void *)(v18 + 16) = v29;
    *(_OWORD *)unint64_t v18 = *(_OWORD *)__p;
    *(void *)(a2 + 8) = v18 + 24;
  }
  v30[0] = *MEMORY[0x263F8C2B8];
  uint64_t v26 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v30 + *(void *)(v30[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v31[0] = v26;
  v31[1] = MEMORY[0x263F8C318] + 16;
  if (v32 < 0) {
    operator delete((void *)v31[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v33);
}

void sub_224315214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v16 - 120));
  if (a15 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void xgboost_old::gbm::GBLinear::~GBLinear(xgboost_old::gbm::GBLinear *this)
{
  xgboost_old::gbm::GBLinear::~GBLinear(this);
  JUMPOUT(0x22A614FA0);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_26D778638;
  unint64_t v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + 24) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
}

float xgboost_old::gbm::GBLinear::ParamTrain::SetParam(xgboost_old::gbm::GBLinear::ParamTrain *this, const char *a2, const char *a3)
{
  if (!strcmp("eta", a2))
  {
    float v6 = atof(a3);
    *(float *)this = v6;
  }
  if (!strcmp("lambda", a2))
  {
    float v7 = atof(a3);
    *((float *)this + 1) = v7;
  }
  if (!strcmp("alpha", a2))
  {
    float v8 = atof(a3);
    *((float *)this + 2) = v8;
  }
  if (!strcmp("lambda_bias", a2))
  {
    float v9 = atof(a3);
    *((float *)this + 3) = v9;
  }
  if (!strcmp("learning_rate", a2))
  {
    float v10 = atof(a3);
    *(float *)this = v10;
  }
  if (!strcmp("reg_lambda", a2))
  {
    float v11 = atof(a3);
    *((float *)this + 1) = v11;
  }
  if (!strcmp("reg_alpha", a2))
  {
    float v12 = atof(a3);
    *((float *)this + 2) = v12;
  }
  if (!strcmp("reg_lambda_bias", a2))
  {
    float result = atof(a3);
    *((float *)this + 3) = result;
  }
  return result;
}

uint64_t dmlc::Stream::Create(dmlc::Stream *this, char *a2, const char *a3)
{
  BOOL v6 = strncmp((const char *)this, "s3://", 5uLL) != 0;
  xgboost_old::utils::Check(v6, "%s", v7, "xgboost is compiled in local mode\nto use hdfs, s3 or distributed version, compile with make dmlc=1");
  BOOL v8 = strncmp((const char *)this, "hdfs://", 7uLL) != 0;
  xgboost_old::utils::Check(v8, "%s", v9, "xgboost is compiled in local mode\nto use hdfs, s3 or distributed version, compile with make dmlc=1");
  int v10 = strcmp((const char *)this, "stdin");
  if (v10) {
    float v11 = 0;
  }
  else {
    float v11 = (FILE *)*MEMORY[0x263EF8350];
  }
  int v12 = strcmp((const char *)this, "stdout");
  if (!v12) {
    float v11 = (FILE *)*MEMORY[0x263EF8358];
  }
  if (v10) {
    BOOL v13 = v12 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!strncmp((const char *)this, "file://", 7uLL)) {
    uint64_t v15 = 7;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = (char *)this + v15;
  if (v13)
  {
LABEL_31:
    if (v11) {
      goto LABEL_32;
    }
    goto LABEL_34;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  int v17 = v24;
  if ((char)v24 < 0)
  {
    if (v23 != 1) {
      goto LABEL_23;
    }
    unint64_t v18 = __p;
  }
  else
  {
    if (v24 != 1)
    {
LABEL_21:
      if (v17 != 1) {
        goto LABEL_27;
      }
      p_p = &__p;
      goto LABEL_25;
    }
    unint64_t v18 = &__p;
  }
  if (*v18 == 119)
  {
    MEMORY[0x22A614700](&__p, "wb");
    int v17 = v24;
  }
  if ((v17 & 0x80) == 0) {
    goto LABEL_21;
  }
LABEL_23:
  if (v23 != 1) {
    goto LABEL_27;
  }
  p_p = __p;
LABEL_25:
  if (*p_p == 114)
  {
    MEMORY[0x22A614700](&__p, "rb");
    LOBYTE(v17) = v24;
  }
LABEL_27:
  if ((v17 & 0x80u) == 0) {
    unint64_t v20 = (const char *)&__p;
  }
  else {
    unint64_t v20 = (const char *)__p;
  }
  float v11 = fopen(v16, v20);
  if (((char)v24 & 0x80000000) == 0) {
    goto LABEL_31;
  }
  operator delete(__p);
  if (v11) {
LABEL_32:
  }
    operator new();
LABEL_34:
  xgboost_old::utils::Check((uint64_t)a3, "fail to open file %s", v14, v16);
  return 0;
}

void sub_2243156C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t xgboost_old::utils::StdFile::Read(FILE **this, void *__ptr, size_t a3)
{
  return fread(__ptr, 1uLL, a3, this[1]);
}

size_t xgboost_old::utils::StdFile::Write(FILE **this, const void *__ptr, size_t __size)
{
  return fwrite(__ptr, __size, 1uLL, this[1]);
}

void xgboost_old::utils::StdFile::~StdFile(xgboost_old::utils::StdFile *this)
{
  xgboost_old::utils::StdFile::~StdFile(this);
  JUMPOUT(0x22A614FA0);
}

{
  FILE *v2;

  *(void *)this = &unk_26D7786D0;
  unint64_t v2 = (FILE *)*((void *)this + 1);
  if (v2)
  {
    if (!*((unsigned char *)this + 16))
    {
      fclose(v2);
      *((void *)this + 1) = 0;
    }
  }
}

uint64_t xgboost_old::utils::StdFile::Seek(FILE **this, uint64_t a2)
{
  return fseek(this[1], a2, 0);
}

void xgboost_old::utils::StdFile::Tell(xgboost_old::utils::StdFile *this)
{
}

BOOL xgboost_old::utils::StdFile::AtEnd(FILE **this)
{
  return feof(this[1]) != 0;
}

void xgboost_old::io::DMatrixSimple::DMatrixSimple(xgboost_old::io::DMatrixSimple *this)
{
  *((_DWORD *)this + 2) = -21759;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *((void *)this + 22) = 0;
  *(void *)this = &unk_26D778740;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  operator new();
}

void sub_2243159C8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x10F1C401CF98B50);
  uint64_t v5 = (void *)*((void *)v1 + 26);
  if (v5)
  {
    *((void *)v1 + 27) = v5;
    operator delete(v5);
  }
  BOOL v6 = *v3;
  if (*v3)
  {
    *((void *)v1 + 24) = v6;
    operator delete(v6);
  }
  xgboost_old::learner::DMatrix::~DMatrix(v1);
  _Unwind_Resume(a1);
}

void xgboost_old::learner::DMatrix::~DMatrix(xgboost_old::learner::DMatrix *this)
{
  *(void *)this = &unk_26D778790;
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 10);
  if (v5)
  {
    *((void *)this + 11) = v5;
    operator delete(v5);
  }
  BOOL v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    *((void *)this + 8) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    *((void *)this + 5) = v7;
    operator delete(v7);
  }
}

uint64_t xgboost_old::io::DMatrixSimple::fmat(xgboost_old::io::DMatrixSimple *this)
{
  return *((void *)this + 29);
}

void xgboost_old::io::DMatrixSimple::~DMatrixSimple(xgboost_old::io::DMatrixSimple *this)
{
  xgboost_old::io::DMatrixSimple::~DMatrixSimple(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26D778740;
  uint64_t v2 = *((void *)this + 29);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 26);
  if (v3)
  {
    *((void *)this + 27) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 23);
  if (v4)
  {
    *((void *)this + 24) = v4;
    operator delete(v4);
  }
  xgboost_old::learner::DMatrix::~DMatrix(this);
}

uint64_t xgboost_old::io::DMatrixSimple::OneBatchIter::BeforeFirst(uint64_t this)
{
  *(unsigned char *)(this + 8) = 1;
  return this;
}

BOOL xgboost_old::io::DMatrixSimple::OneBatchIter::Next(xgboost_old::io::DMatrixSimple::OneBatchIter *this)
{
  int v1 = *((unsigned __int8 *)this + 8);
  if (*((unsigned char *)this + 8))
  {
    *((unsigned char *)this + 8) = 0;
    uint64_t v2 = (void *)*((void *)this + 2);
    uint64_t v3 = v2[23];
    uint64_t v4 = (v2[24] - v3) >> 3;
    if (v2[24] == v3) {
      uint64_t v3 = 0;
    }
    *((void *)this + 3) = v4 - 1;
    *((void *)this + 4) = 0;
    BOOL v6 = v2 + 26;
    uint64_t v5 = v2[26];
    if (v6[1] == v5) {
      uint64_t v5 = 0;
    }
    *((void *)this + 5) = v3;
    *((void *)this + 6) = v5;
  }
  return v1 != 0;
}

void xgboost_old::io::DMatrixSimple::OneBatchIter::~OneBatchIter(xgboost_old::io::DMatrixSimple::OneBatchIter *this)
{
}

uint64_t xgboost_old::io::FMatrixS::RowIterator(xgboost_old::io::FMatrixS *this)
{
  return *((void *)this + 16);
}

uint64_t xgboost_old::io::FMatrixS::ColIterator(xgboost_old::io::FMatrixS *this)
{
  uint64_t v2 = (std::vector<unsigned int> *)((char *)this + 16);
  std::vector<unsigned int>::size_type v3 = (*(uint64_t (**)(xgboost_old::io::FMatrixS *))(*(void *)this + 40))(this);
  std::vector<int>::resize(v2, v3);
  if (v3)
  {
    uint64_t v4 = 0;
    std::vector<unsigned int>::pointer begin = v2->__begin_;
    do
    {
      begin[v4] = v4;
      ++v4;
    }
    while (v3 != v4);
  }
  uint64_t result = (uint64_t)this + 8;
  *((void *)this + 11) = 0;
  return result;
}

void *xgboost_old::io::FMatrixS::ColIterator(void *a1, uint64_t *a2)
{
  uint64_t v4 = (std::vector<unsigned int> *)(a1 + 2);
  unint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  std::vector<int>::resize(v4, 0);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = *(unsigned int *)(v7 + 4 * v8);
      if (v5 > v9)
      {
        float v11 = (_DWORD *)a1[3];
        unint64_t v10 = a1[4];
        if ((unint64_t)v11 >= v10)
        {
          std::vector<unsigned int>::pointer begin = v4->__begin_;
          uint64_t v14 = v11 - v4->__begin_;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v10 - (void)begin;
          if (v16 >> 1 > v15) {
            unint64_t v15 = v16 >> 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 4), v17);
            std::vector<unsigned int>::pointer begin = (std::vector<unsigned int>::pointer)a1[2];
            float v11 = (_DWORD *)a1[3];
            LODWORD(v9) = *(_DWORD *)(v7 + 4 * v8);
          }
          else
          {
            unint64_t v18 = 0;
          }
          unint64_t v19 = &v18[4 * v14];
          *(_DWORD *)unint64_t v19 = v9;
          int v12 = v19 + 4;
          while (v11 != begin)
          {
            int v20 = *--v11;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          a1[2] = v19;
          a1[3] = v12;
          a1[4] = &v18[4 * v17];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          _DWORD *v11 = v9;
          int v12 = v11 + 1;
        }
        a1[3] = v12;
        uint64_t v7 = *a2;
        uint64_t v6 = a2[1];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 2);
  }
  uint64_t result = a1 + 1;
  a1[11] = 0;
  return result;
}

void xgboost_old::io::FMatrixS::InitColAccess(uint64_t a1, uint64_t a2, unint64_t a3, float a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) & 1) == 0)
  {
    xgboost_old::io::FMatrixS::InitColData(a1, a2, a3, a4);
  }
}

BOOL xgboost_old::io::FMatrixS::HaveColAccess(xgboost_old::io::FMatrixS *this)
{
  return *((void *)this + 21) != *((void *)this + 20);
}

uint64_t xgboost_old::io::FMatrixS::NumCol(xgboost_old::io::FMatrixS *this)
{
  uint64_t v2 = (*(uint64_t (**)(xgboost_old::io::FMatrixS *))(*(void *)this + 32))(this);
  xgboost_old::utils::Check(v2, "NumCol:need column access", v3);
  return (uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 3;
}

uint64_t xgboost_old::io::FMatrixS::GetColSize(xgboost_old::io::FMatrixS *this, uint64_t a2)
{
  return *(void *)(*((void *)this + 20) + 8 * a2);
}

float xgboost_old::io::FMatrixS::GetColDensity(xgboost_old::io::FMatrixS *this, uint64_t a2)
{
  uint64_t v2 = (uint64_t)(*((void *)this + 18) - *((void *)this + 17)) >> 2;
  return 1.0
       - (float)((float)(unint64_t)(v2 - *(void *)(*((void *)this + 20) + 8 * a2))
               / (float)(unint64_t)v2);
}

uint64_t xgboost_old::io::FMatrixS::buffered_rowset(xgboost_old::io::FMatrixS *this)
{
  return (uint64_t)this + 136;
}

void xgboost_old::io::FMatrixS::~FMatrixS(xgboost_old::io::FMatrixS *this)
{
  xgboost_old::io::FMatrixS::~FMatrixS(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t v2;
  void *v3;
  void *v4;

  *(void *)this = &unk_26D778828;
  uint64_t v2 = *((void *)this + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  std::vector<unsigned int>::size_type v3 = (void *)*((void *)this + 20);
  if (v3)
  {
    *((void *)this + 21) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 17);
  if (v4)
  {
    *((void *)this + 18) = v4;
    operator delete(v4);
  }
  xgboost_old::io::FMatrixS::ColBatchIter::~ColBatchIter((xgboost_old::io::FMatrixS *)((char *)this + 8));
}

uint64_t xgboost_old::io::FMatrixS::ColBatchIter::BeforeFirst(uint64_t this)
{
  *(void *)(this + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  return this;
}

BOOL xgboost_old::io::FMatrixS::ColBatchIter::Next(xgboost_old::io::FMatrixS::ColBatchIter *this)
{
  unint64_t v1 = *((void *)this + 10);
  uint64_t v2 = *((void *)this + 7);
  unint64_t v3 = (*((void *)this + 8) - v2) >> 3;
  if (v1 < v3)
  {
    *((void *)this + 1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v1 + 1;
    unint64_t v5 = *(void **)(v2 + 8 * v1);
    unint64_t v6 = (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 2;
    *((void *)this + 11) = v6;
    *(void *)&long long v18 = 0;
    DWORD2(v18) = 0;
    std::vector<xgboost_old::SparseBatch::Inst>::resize((uint64_t)this + 32, v6, &v18);
    uint64_t v7 = *((void *)this + 4);
    uint64_t v8 = *((void *)this + 5);
    if (v8 == v7)
    {
      uint64_t v7 = *((void *)this + 5);
    }
    else
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(unsigned int *)(*((void *)this + 1) + 4 * v10);
        if (v5[4] == v5[3]) {
          uint64_t v12 = 0;
        }
        else {
          uint64_t v12 = v5[3];
        }
        uint64_t v13 = *(void *)(*v5 + 8 * v11);
        int v14 = *(void *)(*v5 + 8 * (v11 + 1)) - v13;
        uint64_t v15 = v7 + v9;
        *(void *)uint64_t v15 = v12 + 8 * v13;
        *(_DWORD *)(v15 + 8) = v14;
        ++v10;
        uint64_t v7 = *((void *)this + 4);
        uint64_t v8 = *((void *)this + 5);
        v9 += 16;
      }
      while (v10 < (v8 - v7) >> 4);
    }
    if (*((void *)this + 2) == *((void *)this + 1)) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = *((void *)this + 1);
    }
    if (v8 == v7) {
      uint64_t v7 = 0;
    }
    *((void *)this + 12) = v16;
    *((void *)this + 13) = v7;
  }
  return v1 < v3;
}

uint64_t xgboost_old::io::FMatrixS::ColBatchIter::Value(xgboost_old::io::FMatrixS::ColBatchIter *this)
{
  return (uint64_t)this + 88;
}

void xgboost_old::io::FMatrixS::ColBatchIter::~ColBatchIter(xgboost_old::io::FMatrixS::ColBatchIter *this)
{
  xgboost_old::io::FMatrixS::ColBatchIter::~ColBatchIter(this);
  JUMPOUT(0x22A614FA0);
}

{
  void *v2;
  void *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  *(void *)this = &unk_26D7788B8;
  uint64_t v4 = (char *)this + 56;
  uint64_t v2 = (void *)*((void *)this + 7);
  unint64_t v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      unint64_t v6 = v2[v5];
      if (v6)
      {
        uint64_t v7 = *(void **)(v6 + 48);
        if (v7)
        {
          *(void *)(v6 + 56) = v7;
          operator delete(v7);
        }
        uint64_t v8 = *(void **)(v6 + 24);
        if (v8)
        {
          *(void *)(v6 + 32) = v8;
          operator delete(v8);
        }
        uint64_t v9 = *(void **)v6;
        if (*(void *)v6)
        {
          *(void *)(v6 + 8) = v9;
          operator delete(v9);
        }
        MEMORY[0x22A614FA0](v6, 0x30C40F4AB5C29);
        uint64_t v2 = (void *)*((void *)this + 7);
        unint64_t v3 = (void *)*((void *)this + 8);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  *((void *)this + 8) = v2;
  if (v2) {
    operator delete(v2);
  }
  unint64_t v10 = (void *)*((void *)this + 4);
  if (v10)
  {
    *((void *)this + 5) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 1);
  if (v11)
  {
    *((void *)this + 2) = v11;
    operator delete(v11);
  }
}

void std::vector<xgboost_old::SparseBatch::Inst>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<xgboost_old::SparseBatch::Inst>::__append((char **)a1, a2 - v3, a3);
  }
}

void std::vector<xgboost_old::SparseBatch::Inst>::__append(char **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(char **)(v6 - 8);
  if (a2 <= (v8 - v9) >> 4)
  {
    if (a2)
    {
      uint64_t v16 = 16 * a2;
      unint64_t v17 = &v9[16 * a2];
      do
      {
        *(_OWORD *)uint64_t v9 = *a3;
        v9 += 16;
        v16 -= 16;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = v9 - *a1;
    unint64_t v11 = a2 + (v10 >> 4);
    if (v11 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 4;
    uint64_t v13 = v7 - *a1;
    if (v13 >> 3 > v11) {
      unint64_t v11 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    long long v18 = &v15[16 * v12];
    unint64_t v19 = &v18[16 * a2];
    uint64_t v20 = 16 * a2;
    unint64_t v21 = v18;
    do
    {
      *(_OWORD *)unint64_t v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    unint64_t v22 = &v15[16 * v14];
    unsigned __int8 v24 = *a1;
    uint64_t v23 = a1[1];
    if (v23 != *a1)
    {
      do
      {
        uint64_t v25 = *((void *)v23 - 2);
        v23 -= 16;
        int v26 = *((_DWORD *)v23 + 2);
        *((void *)v18 - 2) = v25;
        v18 -= 16;
        *((_DWORD *)v18 + 2) = v26;
      }
      while (v23 != v24);
      uint64_t v23 = *a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void xgboost_old::io::SparsePage::~SparsePage(xgboost_old::io::SparsePage *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

void xgboost_old::io::FMatrixS::InitColData(uint64_t a1, uint64_t a2, unint64_t a3, float a4)
{
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  if (v9 == v8)
  {
    uint64_t v8 = *(void *)(a1 + 72);
  }
  else
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(v8 + 8 * v10);
      if (v11)
      {
        uint64_t v12 = *(void **)(v11 + 48);
        if (v12)
        {
          *(void *)(v11 + 56) = v12;
          operator delete(v12);
        }
        uint64_t v13 = *(void **)(v11 + 24);
        if (v13)
        {
          *(void *)(v11 + 32) = v13;
          operator delete(v13);
        }
        unint64_t v14 = *(void **)v11;
        if (*(void *)v11)
        {
          *(void *)(v11 + 8) = v14;
          operator delete(v14);
        }
        MEMORY[0x22A614FA0](v11, 0x30C40F4AB5C29);
        uint64_t v8 = *(void *)(a1 + 64);
        uint64_t v9 = *(void *)(a1 + 72);
      }
      ++v10;
    }
    while (v10 < (v9 - v8) >> 3);
  }
  *(void *)(a1 + 72) = v8;
  if (**(void **)(a1 + 120) < a3) {
    operator new();
  }
  xgboost_old::io::FMatrixS::MakeManyBatch(a1, a4, a2, a3);
  std::vector<unsigned long>::resize(a1 + 160, *(void *)(*(void *)(a1 + 120) + 8));
  uint64_t v15 = *(void **)(a1 + 160);
  uint64_t v16 = *(void *)(a1 + 168) - (void)v15;
  if (v16 >= 1) {
    bzero(*(void **)(a1 + 160), 8 * (((unint64_t)v16 >> 3) - ((unint64_t)v16 > 7)) + 8);
  }
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v18 = *(void *)(a1 + 72);
  uint64_t v19 = v18 - v17;
  if (v18 != v17)
  {
    uint64_t v20 = 0;
    unint64_t v21 = v19 >> 3;
    if (v21 <= 1) {
      unint64_t v21 = 1;
    }
    do
    {
      unint64_t v22 = *(uint64_t **)(v17 + 8 * v20);
      uint64_t v23 = *v22;
      uint64_t v24 = ((v22[1] - *v22) >> 3) - 1;
      if (v24)
      {
        uint64_t v25 = (void *)(v23 + 8);
        int v26 = v15;
        do
        {
          *v26++ += *v25 - *(v25 - 1);
          ++v25;
          --v24;
        }
        while (v24);
      }
      ++v20;
    }
    while (v20 != v21);
  }
}

void sub_224316590(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x30C40F4AB5C29);
  _Unwind_Resume(a1);
}

void xgboost_old::io::FMatrixS::MakeOneBatch(uint64_t a1, uint64_t a2, void *a3, float a4)
{
  uint64_t v80 = 0;
  std::string::size_type v81 = a3;
  uint64_t v7 = (void **)(a1 + 136);
  *(void *)(a1 + 144) = *(void *)(a1 + 136);
  std::string __p = 0;
  uint64_t v79 = 0;
  int v8 = turi::thread::cpu_count((turi::thread *)a1);
  uint64_t v9 = (void *)*a3;
  a3[1] = *a3;
  unint64_t v10 = a3[2];
  if ((unint64_t)v9 >= v10)
  {
    uint64_t v12 = v10 - (void)v9;
    uint64_t v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v14);
    uint64_t v16 = (char *)*a3;
    uint64_t v17 = (char *)a3[1];
    uint64_t v19 = &v15[v18];
    *uint64_t v15 = 0;
    uint64_t v11 = v15 + 1;
    while (v17 != v16)
    {
      uint64_t v20 = *((void *)v17 - 1);
      v17 -= 8;
      *--uint64_t v15 = v20;
    }
    *a3 = v15;
    a3[1] = v11;
    a3[2] = v19;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v9 = 0;
    uint64_t v11 = v9 + 1;
  }
  a3[1] = v11;
  a3[4] = a3[3];
  unint64_t v72 = a3;
  uint64_t v73 = a3 + 3;
  uint64_t v74 = &v75;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  unint64_t v21 = *(void *)(*(void *)(a1 + 120) + 8);
  std::vector<std::vector<unsigned long>>::resize(&v75, v8);
  uint64_t v22 = v75;
  if (v76 != v75)
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    do
    {
      std::vector<unsigned long>::resize(v22 + v23, v21);
      uint64_t v22 = *v74;
      uint64_t v25 = *v74 + v23;
      int v26 = *(void **)v25;
      uint64_t v27 = *(void *)(v25 + 8) - *(void *)v25;
      if (v27 >= 1) {
        bzero(v26, 8 * (((unint64_t)v27 >> 3) - ((unint64_t)v27 > 7)) + 8);
      }
      ++v24;
      v23 += 24;
    }
    while (v24 < 0xAAAAAAAAAAAAAAABLL * ((v74[1] - v22) >> 3));
  }
  (*(void (**)(void))(**(void **)(a1 + 128) + 16))(*(void *)(a1 + 128));
  while ((*(unsigned int (**)(void))(**(void **)(a1 + 128) + 24))(*(void *)(a1 + 128)))
  {
    uint64_t v28 = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128));
    std::vector<BOOL>::resize((uint64_t)&__p, *(void *)v28 + v79, 1);
    unint64_t v29 = *(void *)v28;
    if (*(uint64_t *)v28 >= 1)
    {
      unint64_t v30 = 0;
      do
      {
        int v31 = *(_DWORD *)(v28 + 8);
        if (a4 == 1.0 || (double)rand() * 4.65661287e-10 < a4)
        {
          int v32 = v31 + v30;
          std::__split_buffer<std::string> v34 = *(char **)(a1 + 144);
          unint64_t v33 = *(void *)(a1 + 152);
          if ((unint64_t)v34 >= v33)
          {
            uint64_t v36 = (char *)*v7;
            uint64_t v37 = (v34 - (unsigned char *)*v7) >> 2;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v39 = v33 - (void)v36;
            if (v39 >> 1 > v38) {
              unint64_t v38 = v39 >> 1;
            }
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v38;
            }
            if (v40)
            {
              uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 152, v40);
              uint64_t v36 = *(char **)(a1 + 136);
              std::__split_buffer<std::string> v34 = *(char **)(a1 + 144);
            }
            else
            {
              uint64_t v41 = 0;
            }
            uint64_t v42 = &v41[4 * v37];
            *(_DWORD *)uint64_t v42 = v32;
            uint64_t v35 = v42 + 4;
            while (v34 != v36)
            {
              int v43 = *((_DWORD *)v34 - 1);
              v34 -= 4;
              *((_DWORD *)v42 - 1) = v43;
              v42 -= 4;
            }
            *(void *)(a1 + 136) = v42;
            *(void *)(a1 + 144) = v35;
            *(void *)(a1 + 152) = &v41[4 * v40];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            *(_DWORD *)std::__split_buffer<std::string> v34 = v32;
            uint64_t v35 = v34 + 4;
          }
          *(void *)(a1 + 144) = v35;
        }
        else
        {
          *(void *)((char *)__p + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v30);
        }
        ++v30;
      }
      while (v30 != v29);
    }
    uint64_t v68 = (uint64_t *)v28;
    p_p = &__p;
    uint64_t v70 = a2;
    std::string::size_type v71 = &v72;
    turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(0, v29, (turi::thread *)&v68);
  }
  float v44 = v74;
  uint64_t v45 = v74[1];
  if (v45 == *v74)
  {
    unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((v45 - *v74) >> 3);
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v47 = 0;
    uint64_t v45 = *v74;
    do
    {
      unint64_t v48 = (uint64_t)(*(void *)(v45 + v46 + 8) - *(void *)(v45 + v46)) >> 3;
      if (v48 >= (v72[1] - *v72) >> 3)
      {
        std::vector<unsigned long>::resize((uint64_t)v72, v48 + 1);
        float v44 = v74;
        uint64_t v45 = *v74;
      }
      ++v47;
      unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((v44[1] - v45) >> 3);
      v46 += 24;
    }
    while (v47 < v49);
  }
  uint64_t v50 = *v72;
  uint64_t v51 = v72[1] - *v72;
  if ((unint64_t)v51 < 9)
  {
    unint64_t v52 = 0;
  }
  else
  {
    unint64_t v52 = 0;
    unint64_t v53 = 0;
    unint64_t v54 = v51 >> 3;
    if (v54 <= 2) {
      unint64_t v54 = 2;
    }
    double v55 = (void *)(v45 + 8);
    uint64_t v56 = 1;
    do
    {
      unint64_t v57 = v56;
      double v58 = v55;
      for (unint64_t i = v49; i; --i)
      {
        uint64_t v60 = *(v58 - 1);
        if (v53 < (*v58 - v60) >> 3)
        {
          uint64_t v61 = *(void *)(v60 + 8 * v53);
          *(void *)(v60 + 8 * v53) = v52;
          v52 += v61;
        }
        v58 += 3;
      }
      *(void *)(v50 + 8 * v57) = v52;
      uint64_t v56 = v57 + 1;
      unint64_t v53 = v57;
    }
    while (v57 + 1 != v54);
  }
  std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)v73, v52);
  (*(void (**)(void))(**(void **)(a1 + 128) + 16))(*(void *)(a1 + 128));
  while ((*(unsigned int (**)(void))(**(void **)(a1 + 128) + 24))(*(void *)(a1 + 128)))
  {
    uint64_t v63 = (unint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128));
    unint64_t v64 = *v63;
    uint64_t v68 = (uint64_t *)v63;
    p_p = &__p;
    uint64_t v70 = a2;
    std::string::size_type v71 = &v72;
    turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(0, v64, (uint64_t)&v68);
  }
  uint64_t v65 = v81;
  xgboost_old::utils::Assert(((uint64_t)(v81[1] - *v81) >> 3) - 1 == *(void *)(*(void *)(a1 + 120) + 8), "inconsistent col data", v62);
  unint64_t v66 = ((v65[1] - *v65) >> 3) - 1;
  uint64_t v68 = (uint64_t *)&v81;
  turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(0, v66, &v68);
  uint64_t v68 = &v75;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  if (__p) {
    operator delete(__p);
  }
}

void sub_224316B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p)
{
  a12 = a10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void xgboost_old::io::FMatrixS::MakeManyBatch(uint64_t a1, float a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = (void **)(a1 + 136);
  *(void *)(a1 + 144) = *(void *)(a1 + 136);
  xgboost_old::io::SparsePage::SparsePage((xgboost_old::io::SparsePage *)&v37);
  int v8 = (char *)v37;
  unint64_t v38 = (char *)v37;
  if ((unint64_t)v37 >= v39)
  {
    unint64_t v10 = (uint64_t)(v39 - (void)v37) >> 2;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    if (v39 - (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v39, v11);
    uint64_t v13 = (char *)v37;
    unint64_t v14 = v38;
    uint64_t v16 = &v12[8 * v15];
    *(void *)uint64_t v12 = 0;
    uint64_t v9 = v12 + 8;
    while (v14 != v13)
    {
      uint64_t v17 = *((void *)v14 - 1);
      v14 -= 8;
      *((void *)v12 - 1) = v17;
      v12 -= 8;
    }
    uint64_t v37 = v12;
    unint64_t v38 = v9;
    unint64_t v39 = (unint64_t)v16;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *(void *)uint64_t v37 = 0;
    uint64_t v9 = v8 + 8;
  }
  unint64_t v38 = v9;
  uint64_t v41 = v40;
  (*(void (**)(void))(**(void **)(a1 + 128) + 16))(*(void *)(a1 + 128));
  while ((*(unsigned int (**)(void))(**(void **)(a1 + 128) + 24))(*(void *)(a1 + 128)))
  {
    uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128));
    if (*(void *)v18)
    {
      unint64_t v19 = 0;
      do
      {
        int v20 = *(_DWORD *)(v18 + 8);
        if (a2 == 1.0 || (double)rand() * 4.65661287e-10 < a2)
        {
          int v21 = v20 + v19;
          uint64_t v23 = *(char **)(a1 + 144);
          unint64_t v22 = *(void *)(a1 + 152);
          if ((unint64_t)v23 >= v22)
          {
            uint64_t v25 = (char *)*v7;
            uint64_t v26 = (v23 - (unsigned char *)*v7) >> 2;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v28 = v22 - (void)v25;
            if (v28 >> 1 > v27) {
              unint64_t v27 = v28 >> 1;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 152, v29);
              uint64_t v25 = *(char **)(a1 + 136);
              uint64_t v23 = *(char **)(a1 + 144);
            }
            else
            {
              unint64_t v30 = 0;
            }
            int v31 = &v30[4 * v26];
            *(_DWORD *)int v31 = v21;
            unint64_t v24 = v31 + 4;
            while (v23 != v25)
            {
              int v32 = *((_DWORD *)v23 - 1);
              v23 -= 4;
              *((_DWORD *)v31 - 1) = v32;
              v31 -= 4;
            }
            *(void *)(a1 + 136) = v31;
            *(void *)(a1 + 144) = v24;
            *(void *)(a1 + 152) = &v30[4 * v29];
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v23 = v21;
            unint64_t v24 = v23 + 4;
          }
          *(void *)(a1 + 144) = v24;
          uint64_t v33 = *(void *)(v18 + 16) + 8 * v19;
          uint64_t v34 = *(void *)(v18 + 24) + 8 * *(void *)v33;
          uint64_t v35 = *(_DWORD *)(v33 + 8) - *(void *)v33;
          v36[0] = v34;
          v36[1] = v35;
          xgboost_old::io::SparsePage::Push((uint64_t)&v37, (uint64_t)v36);
        }
        if (((v38 - (unsigned char *)v37) >> 3) - 1 >= a4) {
          operator new();
        }
        ++v19;
      }
      while (v19 < *(void *)v18);
    }
  }
  if (v38 - (unsigned char *)v37 != 8) {
    operator new();
  }
  if (__p)
  {
    int v43 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  if (v37)
  {
    unint64_t v38 = (char *)v37;
    operator delete(v37);
  }
}

void sub_2243171D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  xgboost_old::io::SparsePage::~SparsePage((xgboost_old::io::SparsePage *)va);
  _Unwind_Resume(a1);
}

xgboost_old::io::SparsePage *xgboost_old::io::SparsePage::SparsePage(xgboost_old::io::SparsePage *this)
{
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v2 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 16, 1uLL);
  unint64_t v3 = *(char **)this;
  uint64_t v4 = (char *)*((void *)this + 1);
  uint64_t v6 = &v2[v5];
  *uint64_t v2 = 0;
  uint64_t v7 = v2 + 1;
  while (v4 != v3)
  {
    uint64_t v8 = *((void *)v4 - 1);
    v4 -= 8;
    *--uint64_t v2 = v8;
  }
  *(void *)this = v2;
  *((void *)this + 1) = v7;
  *((void *)this + 2) = v6;
  if (v3) {
    operator delete(v3);
  }
  *((void *)this + 1) = v7;
  *((void *)this + 4) = *((void *)this + 3);
  return this;
}

void sub_2243172CC(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)(v1 + 48);
  if (v5)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  xgboost_old::io::SparsePage::SparsePage(v2, v1, v3);
  _Unwind_Resume(a1);
}

void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, turi::thread *a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    unint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    void v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v13[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_22431744C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

turi::thread_pool *turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v30 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v25 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v29, v25);
    double v26 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v27 = (unint64_t)((double)v5 + v26 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v27 = a2;
    }
    v28[2] = (unint64_t)((double)v5 + v26 * (double)0);
    v28[3] = v27;
    v28[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>(xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2})::stored_vtable
           + 1;
    v28[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v29, v28);
  }
  if (a2 > v5)
  {
    do
    {
      uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(result);
      uint64_t v10 = *(void *)a3;
      if ((*(void *)(**(void **)(a3 + 8) + 8 * ((*(_DWORD *)(*(void *)a3 + 8) + v5) >> 6)) >> (*(unsigned char *)(*(void *)a3 + 8) + v5)))
      {
        uint64_t v11 = *(void *)(v10 + 16);
        uint64_t v12 = *(void *)(v11 + 8 * v5);
        unint64_t v13 = v5 + 1;
        uint64_t v14 = *(void *)(v11 + 8 * (v5 + 1)) - v12;
        if (v14)
        {
          uint64_t v15 = *(void *)(a3 + 24);
          uint64_t v16 = **(void **)(a3 + 16);
          int v17 = *(void *)result;
          uint64_t v18 = (int *)(*(void *)(v10 + 24) + 8 * v12 + 4);
          do
          {
            unint64_t v19 = *(v18 - 1);
            if ((*(void *)(v16 + ((v19 >> 3) & 0x1FFFFFF8)) >> v19))
            {
              int v20 = *(_DWORD *)(v10 + 8) + v5;
              int v21 = *v18;
              unint64_t v22 = *(void **)(v15 + 8);
              uint64_t result = *(turi::thread_pool **)(**(void **)(v15 + 16) + 24 * v17);
              uint64_t v23 = *((void *)result + v19);
              *((void *)result + v19) = v23 + 1;
              unint64_t v24 = (_DWORD *)(*v22 + 8 * v23);
              *unint64_t v24 = v20;
              v24[1] = v21;
            }
            v18 += 2;
            --v14;
          }
          while (v14);
        }
      }
      else
      {
        unint64_t v13 = v5 + 1;
      }
      unint64_t v5 = v13;
    }
    while (v13 != a2);
  }
  return result;
}

void sub_22431767C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

turi::thread_pool *turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(turi::thread_pool *a1, unint64_t a2, void **a3)
{
  unint64_t v5 = (unint64_t)a1;
  v20[24] = *(uint64_t (**)(uint64_t *, uint64_t *))MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v16 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v20, v16);
    double v17 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v18 = (unint64_t)((double)v5 + v17 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v18 = a2;
    }
    v19[2] = (unint64_t)((double)v5 + v17 * (double)0);
    void v19[3] = v18;
    v19[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>(xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3})::stored_vtable
           + 1;
    v19[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v20, v19);
  }
  if (a2 > v5)
  {
    do
    {
      uint64_t v10 = (void *)**a3;
      uint64_t v11 = (unint64_t *)(*v10 + 8 * v5);
      unint64_t v12 = *v11;
      unint64_t v13 = v11[1];
      if (v12 < v13)
      {
        uint64_t v15 = v10 + 3;
        uint64_t v14 = v10[3];
        if (v15[1] == v14) {
          uint64_t v14 = 0;
        }
        v20[0] = (uint64_t (*)(uint64_t *, uint64_t *))xgboost_old::SparseBatch::Entry::CmpValue;
        uint64_t result = (turi::thread_pool *)std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(v14 + 8 * v12, (char *)(v14 + 8 * v13), v20, 126 - 2 * __clz((uint64_t)(8 * v13 - 8 * v12) >> 3), 1);
      }
      ++v5;
    }
    while (a2 != v5);
  }
  return result;
}

void sub_224317850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<unsigned long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned long>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        BOOL v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<unsigned long>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    unint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    double v17 = &v16[v14];
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_224317A78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}::operator()(turi::thread *a1, uint64_t a2)
{
  tls_data = turi::thread::get_tls_data(a1);
  uint64_t v5 = *(void *)a1;
  if ((*(void *)(**((void **)a1 + 1) + 8 * ((*(_DWORD *)(*(void *)a1 + 8) + a2) >> 6)) >> (*(unsigned char *)(*(void *)a1 + 8) + a2)))
  {
    uint64_t v6 = *(void *)(v5 + 16) + 8 * a2;
    uint64_t v7 = *(void *)v6;
    LODWORD(v6) = *(_DWORD *)(v6 + 8);
    uint64_t v8 = (v6 - v7);
    if (v6 != v7)
    {
      unint64_t v9 = (unsigned int *)(*(void *)(v5 + 24) + 8 * v7);
      int v10 = *tls_data;
      do
      {
        unsigned int v12 = *v9;
        v9 += 2;
        unint64_t v11 = v12;
        if ((*(void *)(**((void **)a1 + 2) + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) >> v12))
        {
          size_t v13 = (uint64_t *)(**(void **)(*((void *)a1 + 3) + 16) + 24 * v10);
          uint64_t v14 = *v13;
          if (v11 >= (v13[1] - *v13) >> 3)
          {
            uint64_t v15 = 0;
            std::vector<unsigned long>::resize((uint64_t)v13, v11 + 1, &v15);
            uint64_t v14 = *v13;
          }
          ++*(void *)(v14 + 8 * v11);
        }
        --v8;
      }
      while (v8);
    }
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246EEFADLL & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246EEFADLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  for (unint64_t i = *(void *)(a1 + 8); i < *(void *)(a1 + 16); ++i)
    xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}::operator()(*(turi::thread **)a1, i);
}

void std::vector<xgboost_old::SparseBatch::Entry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<xgboost_old::SparseBatch::Entry>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<xgboost_old::SparseBatch::Entry>::__append(char **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long v5 = a1[2];
  uint64_t v6 = a1[1];
  if (a2 <= (v5 - v6) >> 3)
  {
    a1[1] = &v6[8 * a2];
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v8 = v6 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - v7;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
      uint64_t v7 = *a1;
      uint64_t v6 = a1[1];
    }
    else
    {
      size_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    uint64_t v16 = &v14[8 * a2];
    if (v6 != v7)
    {
      do
      {
        uint64_t v17 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v14 - 1) = v17;
        v14 -= 8;
      }
      while (v6 != v7);
      uint64_t v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002247102F2 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002247102F2 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t **boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2} const&)::{lambda(void)#1},void>::invoke(uint64_t **result)
{
  unint64_t v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    unint64_t v2 = result;
    do
    {
      uint64_t v3 = *v2;
      uint64_t result = (uint64_t **)turi::thread::get_tls_data((turi::thread *)result);
      uint64_t v4 = *v3;
      if ((*(void *)(*(void *)v3[1] + 8 * ((*(_DWORD *)(*v3 + 8) + v1) >> 6)) >> (*(unsigned char *)(*v3 + 8) + v1)))
      {
        uint64_t v5 = *(void *)(v4 + 16);
        uint64_t v6 = *(void *)(v5 + 8 * v1);
        unint64_t v7 = v1 + 1;
        uint64_t v8 = *(void *)(v5 + 8 * (v1 + 1)) - v6;
        if (v8)
        {
          uint64_t v9 = *(void *)v3[2];
          unsigned int v10 = *result;
          uint64_t v11 = (int *)(*(void *)(v4 + 24) + 8 * v6 + 4);
          do
          {
            unint64_t v12 = *(v11 - 1);
            if ((*(void *)(v9 + ((v12 >> 3) & 0x1FFFFFF8)) >> v12))
            {
              int v13 = *(_DWORD *)(v4 + 8) + v1;
              int v14 = *v11;
              uint64_t v15 = *(void **)(v3[3] + 8);
              uint64_t result = *(uint64_t ***)(**(void **)(v3[3] + 16) + 24 * (int)v10);
              uint64_t v16 = result[v12];
              result[v12] = (uint64_t *)((char *)v16 + 1);
              uint64_t v17 = (_DWORD *)(*v15 + 8 * (void)v16);
              *uint64_t v17 = v13;
              v17[1] = v14;
            }
            v11 += 2;
            --v8;
          }
          while (v8);
        }
      }
      else
      {
        unint64_t v7 = v1 + 1;
      }
      unint64_t v1 = v7;
    }
    while (v7 < (unint64_t)v2[2]);
  }
  return result;
}

BOOL xgboost_old::SparseBatch::Entry::CmpValue(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 4) < *(float *)(a2 + 4);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(uint64_t result, char *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  unsigned int v10 = (uint64_t *)result;
LABEL_2:
  uint64_t v11 = (uint64_t *)(a2 - 8);
  unint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    unsigned int v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = a2 - (char *)v12;
    unint64_t v16 = (a2 - (char *)v12) >> 3;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)((uint64_t *)a2 - 1, v12);
          if (result)
          {
            uint64_t v23 = *v12;
            uint64_t *v12 = *v11;
            uint64_t *v11 = v23;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v12, v12 + 1, (uint64_t *)a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v12, v12 + 1, v12 + 2, (uint64_t *)a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v12, v12 + 1, v12 + 2, v12 + 3, (uint64_t *)a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (uint64_t *)a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,xgboost_old::SparseBatch::Entry*>((char *)v12, a2, a2, (unsigned int (**)(char *, uint64_t))a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v12, &v12[v16 >> 1], (uint64_t *)a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v12 + 1, v18 - 1, (uint64_t *)a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v12 + 2, &v12[v17 + 1], (uint64_t *)a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v18 - 1, v18, &v12[v17 + 1], a3);
      uint64_t v19 = *v12;
      uint64_t *v12 = *v18;
      *unint64_t v18 = v19;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(&v12[v16 >> 1], v12, (uint64_t *)a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(v12 - 1, v12) & 1) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::SparseBatch::Entry *,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&)>(v12, (uint64_t *)a2, a3);
      unint64_t v12 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    int v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::SparseBatch::Entry *,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&)>(v12, (uint64_t *)a2, a3);
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v12, v20, a3);
    unint64_t v12 = v20 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(v20 + 1, (uint64_t *)a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = (char *)v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v22)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(v10, v20, a3, -v14, a5 & 1);
      unint64_t v12 = v20 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>((uint64_t)v12, a2, (uint64_t (**)(void *, void))a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>((uint64_t)v12, a2, (uint64_t (**)(void *, void))a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t result, void *a2, uint64_t (**a3)(void *, void))
{
  if ((void *)result != a2)
  {
    v14[7] = v3;
    v14[8] = v4;
    char v6 = (void *)result;
    unint64_t v7 = (void *)(result + 8);
    if ((void *)(result + 8) != a2)
    {
      uint64_t v9 = 0;
      unsigned int v10 = (void *)result;
      do
      {
        uint64_t v11 = v10;
        unsigned int v10 = v7;
        uint64_t result = (*a3)(v7, v11);
        if (result)
        {
          v14[0] = *v10;
          uint64_t v12 = v9;
          while (1)
          {
            *(void *)((char *)v6 + v12 + 8) = *(void *)((char *)v6 + v12);
            if (!v12) {
              break;
            }
            v12 -= 8;
            uint64_t result = (*a3)(v14, (char *)v6 + v12);
            if ((result & 1) == 0)
            {
              uint64_t v13 = (void *)((char *)v6 + v12 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v6;
LABEL_10:
          void *v13 = v14[0];
        }
        unint64_t v7 = v10 + 1;
        v9 += 8;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t result, void *a2, uint64_t (**a3)(void *, void))
{
  if ((void *)result != a2)
  {
    v12[7] = v3;
    v12[8] = v4;
    char v6 = (void *)result;
    unint64_t v7 = (void *)(result + 8);
    if ((void *)(result + 8) != a2)
    {
      uint64_t v9 = result - 8;
      do
      {
        unsigned int v10 = v6;
        char v6 = v7;
        uint64_t result = (*a3)(v7, v10);
        if (result)
        {
          v12[0] = *v6;
          uint64_t v11 = v9;
          do
          {
            *(void *)(v11 + 16) = *(void *)(v11 + 8);
            uint64_t result = (*a3)(v12, v11);
            v11 -= 8;
          }
          while ((result & 1) != 0);
          *(void *)(v11 + 16) = v12[0];
        }
        unint64_t v7 = v6 + 1;
        v9 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    uint64_t v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  uint64_t v10 = *a1;
  if (!result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(a3, a2)) {
      return 1;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::SparseBatch::Entry *,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v4 = a2;
  uint64_t v11 = *a1;
  if ((*a3)(&v11, a2 - 1))
  {
    char v6 = a1;
    do
      ++v6;
    while (((*a3)(&v11, v6) & 1) == 0);
  }
  else
  {
    unint64_t v7 = a1 + 1;
    do
    {
      char v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v11, v7);
      unint64_t v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while (((*a3)(&v11, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    uint64_t v9 = *v6;
    uint64_t *v6 = *v4;
    *uint64_t v4 = v9;
    do
      ++v6;
    while (!(*a3)(&v11, v6));
    do
      --v4;
    while (((*a3)(&v11, v4) & 1) != 0);
  }
  if (v6 - 1 != a1) {
    *a1 = *(v6 - 1);
  }
  *(v6 - 1) = v11;
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::SparseBatch::Entry *,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = 0;
  uint64_t v13 = *a1;
  do
    ++v6;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  unint64_t v7 = &a1[v6];
  int v8 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      --a2;
    }
    while (((*a3)(a2, &v13) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!(*a3)(a2, &v13));
  }
  if (v7 < a2)
  {
    uint64_t v9 = &a1[v6];
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = *v9;
      uint64_t *v9 = *v10;
      uint64_t *v10 = v11;
      do
        ++v9;
      while (((*a3)(v9, &v13) & 1) != 0);
      do
        --v10;
      while (!(*a3)(v10, &v13));
    }
    while (v9 < v10);
    int v8 = v9 - 1;
  }
  if (v8 != a1) {
    *a1 = *v8;
  }
  *int v8 = v13;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        uint64_t v9 = *a1;
        *a1 = *v8;
        *int v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      uint64_t v17 = *v11;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = (uint64_t *)((char *)a1 + v14);
        *(uint64_t *)((char *)a1 + v14 + 24) = *(uint64_t *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if (((*a3)(&v17, v15 + 1) & 1) == 0)
        {
          unint64_t v16 = (uint64_t *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v17;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = (*a5)(a3, a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = (*a5)(a2, a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = (*a6)(a4, a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = (*a6)(a3, a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = (*a6)(a2, a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,xgboost_old::SparseBatch::Entry*>(char *a1, char *a2, char *a3, unsigned int (**a4)(char *, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if ((*a4)(v14, (uint64_t)a1))
        {
          uint64_t v15 = *(void *)v14;
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 < 9)
    {
      return v13;
    }
    else
    {
      unint64_t v24 = v13;
      uint64_t v16 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v17 = 0;
        uint64_t v25 = *(void *)a1;
        unint64_t v18 = a1;
        do
        {
          uint64_t v19 = &v18[8 * v17 + 8];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && (*a4)(&v18[8 * v17 + 8], (uint64_t)&v18[8 * v17 + 16]))
          {
            v19 += 8;
            uint64_t v20 = v21;
          }
          *(void *)unint64_t v18 = *(void *)v19;
          unint64_t v18 = v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 8;
        if (v19 == v6)
        {
          *(void *)uint64_t v19 = v25;
        }
        else
        {
          *(void *)uint64_t v19 = *(void *)v6;
          *(void *)uint64_t v6 = v25;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>((uint64_t)a1, (uint64_t)(v19 + 8), (uint64_t (**)(void *, uint64_t))a4, (v19 + 8 - a1) >> 3);
        }
      }
      while (v16-- > 2);
      return v24;
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t result, unsigned int (**a2)(void, void), uint64_t a3, void *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    v19[11] = v4;
    v19[12] = v5;
    unint64_t v7 = a4;
    uint64_t v8 = result;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v12 = ((uint64_t)a4 - result) >> 2;
      uint64_t v13 = v12 + 1;
      uint64_t v14 = (void *)(result + 8 * (v12 + 1));
      uint64_t v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 1))
      {
        ++v14;
        uint64_t v13 = v15;
      }
      uint64_t result = ((uint64_t (*)(void *, void *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v19[0] = *v7;
        do
        {
          uint64_t v16 = v14;
          void *v7 = *v14;
          if (v9 < v13) {
            break;
          }
          uint64_t v17 = (2 * v13) | 1;
          uint64_t v14 = (void *)(v8 + 8 * v17);
          uint64_t v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 8 * v17, v14 + 1))
            {
              ++v14;
              uint64_t v17 = v18;
            }
          }
          uint64_t result = ((uint64_t (*)(void *, void *))*a2)(v14, v19);
          unint64_t v7 = v16;
          uint64_t v13 = v17;
        }
        while (!result);
        *uint64_t v16 = v19[0];
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*>(uint64_t result, uint64_t a2, uint64_t (**a3)(void *, uint64_t), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    v13[7] = v4;
    v13[8] = v5;
    uint64_t v8 = result;
    unint64_t v9 = v6 >> 1;
    unint64_t v10 = (void *)(result + 8 * (v6 >> 1));
    unint64_t v11 = (void *)(a2 - 8);
    uint64_t result = (*a3)(v10, a2 - 8);
    if (result)
    {
      v13[0] = *v11;
      do
      {
        uint64_t v12 = v10;
        void *v11 = *v10;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        unint64_t v10 = (void *)(v8 + 8 * v9);
        uint64_t result = (*a3)(v10, (uint64_t)v13);
        unint64_t v11 = v12;
      }
      while ((result & 1) != 0);
      void *v12 = v13[0];
    }
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000224710382 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x8000000224710382 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeOneBatch(std::vector<BOOL> const&,float,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3} const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v2 = *(void *)(result + 8);
  unint64_t v1 = *(void *)(result + 16);
  if (v2 < v1)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = ***(void ****)v3;
      long long v5 = (unint64_t *)(*v4 + 8 * v2);
      unint64_t v6 = *v5;
      unint64_t v7 = v5[1];
      if (v6 < v7)
      {
        unint64_t v9 = v4 + 3;
        uint64_t v8 = v4[3];
        if (v9[1] == v8) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = v8;
        }
        unint64_t v11 = xgboost_old::SparseBatch::Entry::CmpValue;
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(v10 + 8 * v6, (char *)(v10 + 8 * v7), (uint64_t (**)(uint64_t *, uint64_t *))&v11, 126 - 2 * __clz((uint64_t)(8 * v7 - 8 * v6) >> 3), 1);
        unint64_t v1 = *(void *)(v3 + 16);
      }
      ++v2;
    }
    while (v2 < v1);
  }
  return result;
}

void xgboost_old::io::SparsePage::Push(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(v6 - 1) + *(unsigned int *)(a2 + 8);
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v9 = *(void **)a1;
    uint64_t v10 = ((uint64_t)v6 - *(void *)a1) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - (void)v9;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      unint64_t v9 = *(void **)a1;
      unint64_t v6 = *(void **)(a1 + 8);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *(void *)uint64_t v15 = v7;
    uint64_t v8 = v15 + 8;
    while (v6 != v9)
    {
      uint64_t v17 = *--v6;
      *((void *)v15 - 1) = v17;
      v15 -= 8;
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v16;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    void *v6 = v7;
    uint64_t v8 = v6 + 1;
  }
  uint64_t v18 = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = v8;
  uint64_t v19 = *(void *)(a1 + 32) - v18;
  std::vector<xgboost_old::SparseBatch::Entry>::resize(a1 + 24, *(unsigned int *)(a2 + 8) + (v19 >> 3));
  uint64_t v20 = *(unsigned int *)(a2 + 8);
  if (v20)
  {
    if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = *(void *)(a1 + 24);
    }
    BOOL v22 = *(const void **)a2;
    memcpy((void *)(v21 + 8 * (v19 >> 3)), v22, 8 * v20);
  }
}

void xgboost_old::io::FMatrixS::MakeColPage(turi::thread *a1, uint64_t *a2, uint64_t a3, uint64_t **a4, void *a5)
{
  uint64_t v60 = a5;
  uint64_t v61 = a3;
  int v9 = turi::thread::cpu_count(a1);
  uint64_t v10 = (void *)*a5;
  a5[1] = *a5;
  unint64_t v11 = a5[2];
  if ((unint64_t)v10 >= v11)
  {
    uint64_t v13 = v11 - (void)v10;
    uint64_t v14 = v13 >> 2;
    if ((unint64_t)(v13 >> 2) <= 1) {
      uint64_t v14 = 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a5 + 2), v15);
    uint64_t v17 = (char *)*a5;
    uint64_t v18 = (char *)a5[1];
    uint64_t v20 = &v16[v19];
    *uint64_t v16 = 0;
    uint64_t v12 = v16 + 1;
    while (v18 != v17)
    {
      uint64_t v21 = *((void *)v18 - 1);
      v18 -= 8;
      *--uint64_t v16 = v21;
    }
    *a5 = v16;
    a5[1] = v12;
    a5[2] = v20;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    void *v10 = 0;
    uint64_t v12 = v10 + 1;
  }
  a5[1] = v12;
  a5[4] = a5[3];
  unint64_t v54 = a5;
  double v55 = a5 + 3;
  uint64_t v56 = &v57;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  unint64_t v22 = *(void *)(*((void *)a1 + 15) + 8);
  std::vector<std::vector<unsigned long>>::resize(&v57, v9);
  uint64_t v23 = v57;
  if (v58 != v57)
  {
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    do
    {
      std::vector<unsigned long>::resize(v23 + v24, v22);
      uint64_t v23 = *v56;
      uint64_t v26 = *v56 + v24;
      unint64_t v27 = *(void **)v26;
      uint64_t v28 = *(void *)(v26 + 8) - *(void *)v26;
      if (v28 >= 1) {
        bzero(v27, 8 * (((unint64_t)v28 >> 3) - ((unint64_t)v28 > 7)) + 8);
      }
      ++v25;
      v24 += 24;
    }
    while (v25 < 0xAAAAAAAAAAAAAAABLL * ((v56[1] - v23) >> 3));
  }
  unint64_t v29 = *(unsigned int *)a2;
  uint64_t v51 = a2;
  unint64_t v52 = a4;
  unint64_t v53 = (uint64_t *)&v54;
  turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(0, v29, (uint64_t)&v51);
  uint64_t v30 = v56;
  uint64_t v31 = v56[1];
  if (v31 == *v56)
  {
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v31 - *v56) >> 3);
  }
  else
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    uint64_t v31 = *v56;
    do
    {
      unint64_t v34 = (uint64_t)(*(void *)(v31 + v32 + 8) - *(void *)(v31 + v32)) >> 3;
      if (v34 >= (v54[1] - *v54) >> 3)
      {
        std::vector<unsigned long>::resize((uint64_t)v54, v34 + 1);
        uint64_t v30 = v56;
        uint64_t v31 = *v56;
      }
      ++v33;
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v30[1] - v31) >> 3);
      v32 += 24;
    }
    while (v33 < v35);
  }
  uint64_t v36 = *v54;
  uint64_t v37 = v54[1] - *v54;
  if ((unint64_t)v37 < 9)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v38 = 0;
    unint64_t v39 = 0;
    unint64_t v40 = v37 >> 3;
    if (v40 <= 2) {
      unint64_t v40 = 2;
    }
    uint64_t v41 = (void *)(v31 + 8);
    uint64_t v42 = 1;
    do
    {
      unint64_t v43 = v42;
      float v44 = v41;
      for (unint64_t i = v35; i; --i)
      {
        uint64_t v46 = *(v44 - 1);
        if (v39 < (*v44 - v46) >> 3)
        {
          uint64_t v47 = *(void *)(v46 + 8 * v39);
          *(void *)(v46 + 8 * v39) = v38;
          v38 += v47;
        }
        v44 += 3;
      }
      *(void *)(v36 + 8 * v43) = v38;
      uint64_t v42 = v43 + 1;
      unint64_t v39 = v43;
    }
    while (v43 + 1 != v40);
  }
  std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)v55, v38);
  uint64_t v51 = a2;
  unint64_t v52 = &v54;
  unint64_t v53 = &v61;
  turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(0, v29, (uint64_t)&v51);
  unint64_t v48 = v60;
  xgboost_old::utils::Assert(((uint64_t)(v60[1] - *v60) >> 3) - 1 == *(void *)(*((void *)a1 + 15) + 8), "inconsistent col data", v49);
  unint64_t v50 = ((v48[1] - *v48) >> 3) - 1;
  uint64_t v51 = (uint64_t *)&v60;
  turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(0, v50, &v51);
  uint64_t v51 = &v57;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
}

void sub_224319524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  v24[24] = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v20 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v24, v20);
    double v21 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v22 = (unint64_t)((double)v5 + v21 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v22 = a2;
    }
    v23[2] = (unint64_t)((double)v5 + v21 * (double)0);
    v23[3] = v22;
    v23[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v23[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v24, v23);
  }
  if (a2 > v5)
  {
    do
    {
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(tls_data);
      uint64_t v10 = *(void *)(*(void *)a3 + 16);
      uint64_t v11 = *(void *)(v10 + 8 * v5++);
      uint64_t v12 = *(void *)(v10 + 8 * v5);
      uint64_t v13 = (v12 - v11);
      if (v12 != v11)
      {
        uint64_t v14 = (unsigned int *)(*(void *)(*(void *)a3 + 24) + 8 * v11);
        int v15 = *(_DWORD *)tls_data;
        do
        {
          unsigned int v17 = *v14;
          v14 += 2;
          unint64_t v16 = v17;
          if ((*(void *)(**(void **)(a3 + 8) + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) >> v17))
          {
            uint64_t v18 = (uint64_t *)(**(void **)(*(void *)(a3 + 16) + 16) + 24 * v15);
            uint64_t v19 = *v18;
            if (v16 >= (v18[1] - *v18) >> 3)
            {
              v24[0] = 0;
              std::vector<unsigned long>::resize((uint64_t)v18, v16 + 1, v24);
              uint64_t v19 = *v18;
            }
            ++*(void *)(v19 + 8 * v16);
          }
          --v13;
        }
        while (v13);
      }
    }
    while (v5 != a2);
  }
}

void sub_22431973C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

turi::thread_pool *turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v28 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v23 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v27, v23);
    double v24 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v25 = (unint64_t)((double)v5 + v24 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v25 = a2;
    }
    v26[2] = (unint64_t)((double)v5 + v24 * (double)0);
    void v26[3] = v25;
    v26[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>(xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2})::stored_vtable
           + 1;
    v26[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v27, v26);
  }
  if (a2 > v5)
  {
    do
    {
      uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(result);
      uint64_t v10 = *(void *)(*(void *)a3 + 16);
      uint64_t v11 = *(void *)(v10 + 8 * v5);
      unint64_t v12 = v5 + 1;
      uint64_t v13 = *(void *)(v10 + 8 * (v5 + 1)) - v11;
      if (v13)
      {
        uint64_t v14 = **(void **)(a3 + 16);
        uint64_t v15 = *(void *)(**(void **)(*(void *)(a3 + 8) + 16) + 24 * *(int *)result);
        uint64_t v16 = **(void **)(*(void *)(a3 + 8) + 8);
        unsigned int v17 = (int *)(*(void *)(*(void *)a3 + 24) + 8 * v11 + 4);
        do
        {
          uint64_t v18 = *(v17 - 1);
          int v19 = *v17;
          int v20 = *(_DWORD *)(v14 + 4 * v5);
          uint64_t v21 = *(void *)(v15 + 8 * v18);
          uint64_t result = (turi::thread_pool *)(v21 + 1);
          *(void *)(v15 + 8 * v18) = v21 + 1;
          unint64_t v22 = (_DWORD *)(v16 + 8 * v21);
          *unint64_t v22 = v20;
          v22[1] = v19;
          v17 += 2;
          --v13;
        }
        while (v13);
      }
      ++v5;
    }
    while (v12 != a2);
  }
  return result;
}

void sub_224319928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

turi::thread_pool *turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(turi::thread_pool *a1, unint64_t a2, void **a3)
{
  unint64_t v5 = (unint64_t)a1;
  v20[24] = *(uint64_t (**)(uint64_t *, uint64_t *))MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v16 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v20, v16);
    double v17 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v18 = (unint64_t)((double)v5 + v17 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v18 = a2;
    }
    v19[2] = (unint64_t)((double)v5 + v17 * (double)0);
    void v19[3] = v18;
    v19[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>(xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3})::stored_vtable
           + 1;
    v19[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v20, v19);
  }
  if (a2 > v5)
  {
    do
    {
      uint64_t v10 = (void *)**a3;
      uint64_t v11 = (unint64_t *)(*v10 + 8 * v5);
      unint64_t v12 = *v11;
      unint64_t v13 = v11[1];
      if (v12 < v13)
      {
        uint64_t v15 = v10 + 3;
        uint64_t v14 = v10[3];
        if (v15[1] == v14) {
          uint64_t v14 = 0;
        }
        v20[0] = (uint64_t (*)(uint64_t *, uint64_t *))xgboost_old::SparseBatch::Entry::CmpValue;
        uint64_t result = (turi::thread_pool *)std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(v14 + 8 * v12, (char *)(v14 + 8 * v13), v20, 126 - 2 * __clz((uint64_t)(8 * v13 - 8 * v12) >> 3), 1);
      }
      ++v5;
    }
    while (a2 != v5);
  }
  return result;
}

void sub_224319AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x8000000224710412 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x8000000224710412 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t *tls_data)
{
  unint64_t v1 = tls_data[1];
  if (v1 < tls_data[2])
  {
    unint64_t v2 = tls_data;
    do
    {
      uint64_t v3 = *v2;
      tls_data = (uint64_t *)turi::thread::get_tls_data((turi::thread *)tls_data);
      uint64_t v4 = *(void *)(*(void *)v3 + 16);
      uint64_t v5 = *(void *)(v4 + 8 * v1++);
      uint64_t v6 = *(void *)(v4 + 8 * v1);
      uint64_t v7 = (v6 - v5);
      if (v6 != v5)
      {
        uint64_t v8 = (unsigned int *)(*(void *)(*(void *)v3 + 24) + 8 * v5);
        int v9 = *(_DWORD *)tls_data;
        do
        {
          unsigned int v11 = *v8;
          v8 += 2;
          unint64_t v10 = v11;
          if ((*(void *)(**(void **)(v3 + 8) + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) >> v11))
          {
            unint64_t v12 = (uint64_t *)(**(void **)(*(void *)(v3 + 16) + 16) + 24 * v9);
            uint64_t v13 = *v12;
            if (v10 >= (v12[1] - *v12) >> 3)
            {
              uint64_t v14 = 0;
              std::vector<unsigned long>::resize((uint64_t)v12, v10 + 1, &v14);
              uint64_t v13 = *v12;
            }
            ++*(void *)(v13 + 8 * v10);
          }
          --v7;
        }
        while (v7);
      }
    }
    while (v1 < v2[2]);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002247104B2 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002247104B2 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#2} const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    unint64_t v2 = result;
    do
    {
      uint64_t v3 = *v2;
      uint64_t result = (uint64_t *)turi::thread::get_tls_data((turi::thread *)result);
      uint64_t v4 = *(void *)(*(void *)v3 + 16);
      uint64_t v5 = *(void *)(v4 + 8 * v1);
      unint64_t v6 = v1 + 1;
      uint64_t v7 = *(void *)(v4 + 8 * (v1 + 1)) - v5;
      if (v7)
      {
        uint64_t v8 = **(void **)(v3 + 16);
        uint64_t v9 = *(void *)(**(void **)(*(void *)(v3 + 8) + 16) + 24 * *(int *)result);
        uint64_t v10 = **(void **)(*(void *)(v3 + 8) + 8);
        unsigned int v11 = (int *)(*(void *)(*(void *)v3 + 24) + 8 * v5 + 4);
        do
        {
          int v12 = *(_DWORD *)(v8 + 4 * v1);
          uint64_t v13 = *(v11 - 1);
          uint64_t v14 = *(void *)(v9 + 8 * v13);
          *(void *)(v9 + 8 * v13) = v14 + 1;
          int v15 = *v11;
          v11 += 2;
          uint64_t v16 = (_DWORD *)(v10 + 8 * v14);
          *uint64_t v16 = v12;
          v16[1] = v15;
          --v7;
        }
        while (v7);
      }
      ++v1;
    }
    while (v6 < v2[2]);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246EF03CLL & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246EF03CLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::io::FMatrixS::MakeColPage(xgboost_old::RowBatch const&,unsigned int const*,std::vector<BOOL> const&,xgboost_old::io::SparsePage *)::{lambda(unsigned long)#3} const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v2 = *(void *)(result + 8);
  unint64_t v1 = *(void *)(result + 16);
  if (v2 < v1)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = ***(void ****)v3;
      long long v5 = (unint64_t *)(*v4 + 8 * v2);
      unint64_t v6 = *v5;
      unint64_t v7 = v5[1];
      if (v6 < v7)
      {
        uint64_t v9 = v4 + 3;
        uint64_t v8 = v4[3];
        if (v9[1] == v8) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = v8;
        }
        unsigned int v11 = xgboost_old::SparseBatch::Entry::CmpValue;
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(v10 + 8 * v6, (char *)(v10 + 8 * v7), (uint64_t (**)(uint64_t *, uint64_t *))&v11, 126 - 2 * __clz((uint64_t)(8 * v7 - 8 * v6) >> 3), 1);
        unint64_t v1 = *(void *)(v3 + 16);
      }
      ++v2;
    }
    while (v2 < v1);
  }
  return result;
}

void xgboost_old::utils::Printf(xgboost_old::utils *this, const char *a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = operator new(0x1008uLL);
  bzero(v3, 0x1001uLL);
  vsnprintf((char *)v3, 0x1000uLL, (const char *)this, va);
  printf("%s", (const char *)v3);
  operator delete(v3);
}

uint64_t xgboost_old::utils::SPrintf(xgboost_old::utils *this, char *a2, const char *a3, const char *a4, ...)
{
  va_start(va, a4);
  return vsnprintf((char *)this, (size_t)a2, a3, va);
}

void xgboost_old::tree::CreateUpdater(xgboost_old::tree *this, const char *a2)
{
  if (strcmp((const char *)this, "prune"))
  {
    if (strcmp((const char *)this, "refresh"))
    {
      if (strcmp((const char *)this, "grow_colmaker"))
      {
        if (strcmp((const char *)this, "sync"))
        {
          if (strcmp((const char *)this, "grow_histmaker"))
          {
            if (strcmp((const char *)this, "grow_skmaker"))
            {
              if (strcmp((const char *)this, "distcol")) {
                xgboost_old::utils::Error((xgboost_old::utils *)"unknown updater:%s", v3, this);
              }
              operator new();
            }
            operator new();
          }
          operator new();
        }
        operator new();
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_22431A504(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C40AB30E009);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::tree::TreePruner::SetParam(xgboost_old::tree::TreePruner *this, const char *a2, const char *a3)
{
  xgboost_old::tree::TrainParam::SetParam((xgboost_old::tree::TreePruner *)((char *)this + 20), a2, a3);
  uint64_t result = strcmp(a2, "silent");
  if (!result)
  {
    uint64_t result = atoi(a3);
    *((_DWORD *)this + 4) = result;
  }
  return result;
}

void xgboost_old::tree::TreePruner::Update(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t *a5)
{
  float v7 = *(float *)(a1 + 20);
  uint64_t v8 = *a5;
  uint64_t v9 = a5[1] - *a5;
  *(float *)(a1 + 2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v7 / (float)(unint64_t)(v9 >> 3);
  if (v9)
  {
    unint64_t v10 = 0;
    do
    {
      xgboost_old::tree::TreePruner::DoPrune(a1, *(void *)(v8 + 8 * v10++), a3);
      uint64_t v8 = *a5;
    }
    while (v10 < (a5[1] - *a5) >> 3);
  }
  *(float *)(a1 + 2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v7;
  xgboost_old::tree::TreeSyncher::SyncTrees((rabit::engine *)(a1 + 8), a5);
}

void xgboost_old::tree::TreePruner::~TreePruner(xgboost_old::tree::TreePruner *this)
{
}

uint64_t xgboost_old::tree::TrainParam::SetParam(xgboost_old::tree::TrainParam *this, const char *__s1, const char *a3)
{
  if (!strcmp(__s1, "gamma"))
  {
    float v6 = atof(a3);
    *((float *)this + 1) = v6;
  }
  if (!strcmp(__s1, "eta"))
  {
    float v7 = atof(a3);
    *(float *)this = v7;
  }
  if (!strcmp(__s1, "lambda"))
  {
    float v8 = atof(a3);
    *((float *)this + 4) = v8;
  }
  if (!strcmp(__s1, "alpha"))
  {
    float v9 = atof(a3);
    *((float *)this + 5) = v9;
  }
  if (!strcmp(__s1, "learning_rate"))
  {
    float v10 = atof(a3);
    *(float *)this = v10;
  }
  if (!strcmp(__s1, "min_child_weight"))
  {
    float v11 = atof(a3);
    *((float *)this + 3) = v11;
  }
  if (!strcmp(__s1, "min_split_loss"))
  {
    float v12 = atof(a3);
    *((float *)this + 1) = v12;
  }
  if (!strcmp(__s1, "max_delta_step"))
  {
    float v13 = atof(a3);
    *((float *)this + 7) = v13;
  }
  if (!strcmp(__s1, "reg_lambda"))
  {
    float v14 = atof(a3);
    *((float *)this + 4) = v14;
  }
  if (!strcmp(__s1, "reg_alpha"))
  {
    float v15 = atof(a3);
    *((float *)this + 5) = v15;
  }
  if (!strcmp(__s1, "subsample"))
  {
    float v16 = atof(a3);
    *((float *)this + 8) = v16;
  }
  if (!strcmp(__s1, "colsample_bylevel"))
  {
    float v17 = atof(a3);
    *((float *)this + 9) = v17;
  }
  if (!strcmp(__s1, "colsample_bytree"))
  {
    float v18 = atof(a3);
    *((float *)this + 1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v18;
  }
  if (!strcmp(__s1, "sketch_eps"))
  {
    float v19 = atof(a3);
    *((float *)this + 12) = v19;
  }
  if (!strcmp(__s1, "sketch_ratio"))
  {
    float v20 = atof(a3);
    *((float *)this + 13) = v20;
  }
  if (!strcmp(__s1, "opt_dense_col"))
  {
    float v21 = atof(a3);
    *((float *)this + 11) = v21;
  }
  if (!strcmp(__s1, "size_leaf_vector")) {
    *((_DWORD *)this + 14) = atoi(a3);
  }
  if (!strcmp(__s1, "cache_opt")) {
    *((_DWORD *)this + 16) = atoi(a3);
  }
  if (!strcmp(__s1, "max_depth")) {
    *((_DWORD *)this + 2) = atoi(a3);
  }
  if (!strcmp(__s1, "nthread")) {
    *((_DWORD *)this + 17) = atoi(a3);
  }
  if (!strcmp(__s1, "parallel_option")) {
    *((_DWORD *)this + 15) = atoi(a3);
  }
  uint64_t result = strcmp(__s1, "default_direction");
  if (!result)
  {
    if (!strcmp(a3, "learn")) {
      *((_DWORD *)this + 6) = 0;
    }
    if (!strcmp(a3, "left")) {
      *((_DWORD *)this + 6) = 1;
    }
    uint64_t result = strcmp(a3, "right");
    if (!result) {
      *((_DWORD *)this + 6) = 2;
    }
  }
  return result;
}

void xgboost_old::tree::TreePruner::DoPrune(uint64_t a1, uint64_t a2, const char *a3)
{
  int v5 = *(_DWORD *)(a2 + 100);
  if (v5 < 1)
  {
    uint64_t v9 = 0;
  }
  else
  {
    float v6 = (_DWORD *)(*(void *)(a2 + 48) + 12);
    uint64_t v7 = *(unsigned int *)(a2 + 100);
    do
    {
      _DWORD *v6 = 0;
      v6 += 4;
      --v7;
    }
    while (v7);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)a2;
    do
    {
      if (*(_DWORD *)(v10 + 20 * v8 + 4) == -1)
      {
        int v11 = *(_DWORD *)(v10 + 20 * v8);
        if (v11 != -1)
        {
          uint64_t v12 = v11 & 0x7FFFFFFF;
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = v13 + 16 * v12;
          int v15 = *(_DWORD *)(v14 + 12);
          *(_DWORD *)(v14 + 12) = v15 + 1;
          if (v15 >= 1)
          {
            while (1)
            {
              int v16 = v9;
              if (*(float *)(a1 + 24) <= *(float *)(v13 + 16 * v12)) {
                break;
              }
              xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::ChangeToLeaf((uint64_t *)a2, v12, a3, *(float *)(a1 + 20) * *(float *)(v13 + 16 * v12 + 8));
              uint64_t v10 = *(void *)a2;
              int v17 = *(_DWORD *)(*(void *)a2 + 20 * v12);
              if (v17 != -1)
              {
                uint64_t v12 = v17 & 0x7FFFFFFF;
                uint64_t v13 = *(void *)(a2 + 48);
                uint64_t v18 = v13 + 16 * v12;
                int v19 = *(_DWORD *)(v18 + 12);
                *(_DWORD *)(v18 + 12) = v19 + 1;
                uint64_t v9 = (v9 + 2);
                if (v19 >= 1) {
                  continue;
                }
              }
              uint64_t v9 = (v16 + 2);
              break;
            }
          }
          int v5 = *(_DWORD *)(a2 + 100);
        }
      }
      ++v8;
    }
    while (v8 < v5);
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    uint64_t v20 = *(unsigned int *)(a2 + 96);
    uint64_t v21 = (v5 - (v20 + *(_DWORD *)(a2 + 104)));
    if ((int)v20 < 1)
    {
      uint64_t v23 = 0;
    }
    else
    {
      int v22 = 0;
      LODWORD(v23) = 0;
      do
      {
        int v24 = xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::MaxDepth((void *)a2, v22);
        if ((int)v23 <= v24) {
          uint64_t v23 = v24;
        }
        else {
          uint64_t v23 = v23;
        }
        ++v22;
      }
      while (v22 < *(_DWORD *)(a2 + 96));
    }
    xgboost_old::utils::Printf((xgboost_old::utils *)"tree prunning end, %d roots, %d extra nodes, %d pruned nodes ,max_depth=%d\n", (const char *)a2, v20, v21, v9, v23);
  }
}

void xgboost_old::tree::TreeSyncher::Update(rabit::engine *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
}

double xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::ChangeToLeaf(uint64_t *a1, int a2, const char *a3, float a4)
{
  uint64_t v7 = 5 * a2;
  xgboost_old::utils::Assert(*(_DWORD *)(*a1 + 20 * *(int *)(*a1 + 20 * a2 + 4) + 4) == -1, "can not delete a non terminal child", a3);
  xgboost_old::utils::Assert(*(_DWORD *)(*a1 + 20 * *(int *)(*a1 + 4 * v7 + 8) + 4) == -1, "can not delete a non terminal child", v8);
  int v9 = *(_DWORD *)(*a1 + 4 * v7 + 4);
  xgboost_old::utils::Assert(*((_DWORD *)a1 + 24) <= v9, "can not delete root", v10);
  unint64_t v12 = a1[5];
  uint64_t v13 = (void **)(a1 + 3);
  uint64_t v14 = (char *)a1[4];
  if ((unint64_t)v14 >= v12)
  {
    int v16 = (char *)*v13;
    uint64_t v17 = (v14 - (unsigned char *)*v13) >> 2;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 62) {
      goto LABEL_34;
    }
    uint64_t v19 = v12 - (void)v16;
    if (v19 >> 1 > v18) {
      unint64_t v18 = v19 >> 1;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 5), v20);
      int v16 = (char *)a1[3];
      uint64_t v14 = (char *)a1[4];
    }
    else
    {
      uint64_t v21 = 0;
    }
    int v22 = &v21[4 * v17];
    uint64_t v23 = &v21[4 * v20];
    *(_DWORD *)int v22 = v9;
    int v15 = v22 + 4;
    while (v14 != v16)
    {
      int v24 = *((_DWORD *)v14 - 1);
      v14 -= 4;
      *((_DWORD *)v22 - 1) = v24;
      v22 -= 4;
    }
    a1[3] = (uint64_t)v22;
    a1[4] = (uint64_t)v15;
    a1[5] = (uint64_t)v23;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v14 = v9;
    int v15 = v14 + 4;
  }
  a1[4] = (uint64_t)v15;
  uint64_t v25 = *a1;
  *(_DWORD *)(*a1 + 20 * v9 + 12) = -1;
  ++*((_DWORD *)a1 + 26);
  int v26 = *(_DWORD *)(v25 + 20 * a2 + 8);
  xgboost_old::utils::Assert(*((_DWORD *)a1 + 24) <= v26, "can not delete root", v11);
  uint64_t v28 = (char *)a1[4];
  unint64_t v27 = a1[5];
  if ((unint64_t)v28 < v27)
  {
    *(_DWORD *)uint64_t v28 = v26;
    unint64_t v29 = v28 + 4;
    goto LABEL_33;
  }
  uint64_t v30 = (char *)*v13;
  uint64_t v31 = (v28 - (unsigned char *)*v13) >> 2;
  unint64_t v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 62) {
LABEL_34:
  }
    std::vector<float>::__throw_length_error[abi:ne180100]();
  uint64_t v33 = v27 - (void)v30;
  if (v33 >> 1 > v32) {
    unint64_t v32 = v33 >> 1;
  }
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v34)
  {
    unint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 5), v34);
    uint64_t v30 = (char *)a1[3];
    uint64_t v28 = (char *)a1[4];
  }
  else
  {
    unint64_t v35 = 0;
  }
  uint64_t v36 = &v35[4 * v31];
  uint64_t v37 = &v35[4 * v34];
  *(_DWORD *)uint64_t v36 = v26;
  unint64_t v29 = v36 + 4;
  while (v28 != v30)
  {
    int v38 = *((_DWORD *)v28 - 1);
    v28 -= 4;
    *((_DWORD *)v36 - 1) = v38;
    v36 -= 4;
  }
  a1[3] = (uint64_t)v36;
  a1[4] = (uint64_t)v29;
  a1[5] = (uint64_t)v37;
  if (v30) {
    operator delete(v30);
  }
LABEL_33:
  a1[4] = (uint64_t)v29;
  uint64_t v39 = *a1;
  *(_DWORD *)(*a1 + 20 * v26 + 12) = -1;
  ++*((_DWORD *)a1 + 26);
  uint64_t v40 = v39 + 20 * a2;
  *(float *)(v40 + 16) = a4;
  double result = NAN;
  *(void *)(v40 + 4) = -1;
  return result;
}

uint64_t xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::MaxDepth(void *a1, int a2)
{
  if (*(_DWORD *)(*a1 + 20 * a2 + 4) == -1) {
    return 0;
  }
  unsigned int v4 = ((uint64_t (*)(void))xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::MaxDepth)() + 1;
  int v5 = xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::MaxDepth(a1, *(unsigned int *)(*a1 + 20 * a2 + 8));
  if ((int)v4 <= v5 + 1) {
    return (v5 + 1);
  }
  else {
    return v4;
  }
}

void xgboost_old::tree::TreeSyncher::SyncTrees(rabit::engine *a1, uint64_t *a2)
{
  Engine = rabit::engine::GetEngine(a1);
  unsigned int v4 = (rabit::engine *)(*(uint64_t (**)(uint64_t *))(*Engine + 64))(Engine);
  if (v4 != 1)
  {
    memset(&v22, 0, sizeof(v22));
    v20[0] = (uint64_t (**)(void, uint64_t, uint64_t))&unk_26D778A60;
    v20[1] = (uint64_t (**)(void, uint64_t, uint64_t))&v22;
    uint64_t v21 = 0;
    int v5 = rabit::engine::GetEngine(v4);
    float v6 = (rabit::engine *)(*(uint64_t (**)(uint64_t *))(*v5 + 56))(v5);
    if (!v6)
    {
      uint64_t v8 = *a2;
      if (a2[1] != *a2)
      {
        unint64_t v9 = 0;
        do
        {
          float v6 = (rabit::engine *)xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::SaveModel(*(uint64_t **)(v8 + 8 * v9++), (uint64_t)v20, v7);
          uint64_t v8 = *a2;
        }
        while (v9 < (a2[1] - *a2) >> 3);
      }
    }
    uint64_t v21 = 0;
    std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v22.__r_.__value_.__l.__size_;
    }
    std::string::size_type v23 = size;
    int v11 = rabit::engine::GetEngine(v6);
    unint64_t v12 = (rabit::engine *)(*(uint64_t (**)(uint64_t *, std::string::size_type *, uint64_t, void))(*v11 + 8))(v11, &v23, 8, 0);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = v22.__r_.__value_.__l.__size_;
    }
    if (v13 != v23)
    {
      std::string::resize(&v22, v23, 0);
      std::string::size_type v13 = v23;
    }
    if (v13)
    {
      int v14 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
      std::string::size_type v15 = v22.__r_.__value_.__r.__words[0];
      int v16 = rabit::engine::GetEngine(v12);
      if (v14 >= 0) {
        uint64_t v17 = &v22;
      }
      else {
        uint64_t v17 = (std::string *)v15;
      }
      (*(void (**)(uint64_t *, std::string *, std::string::size_type, void))(*v16 + 8))(v16, v17, v13, 0);
    }
    uint64_t v18 = *a2;
    if (a2[1] != *a2)
    {
      unint64_t v19 = 0;
      do
      {
        xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::LoadModel(*(void *)(v18 + 8 * v19++), v20);
        uint64_t v18 = *a2;
      }
      while (v19 < (a2[1] - *a2) >> 3);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22431B0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rabit::utils::MemoryBufferStream::Seek(uint64_t this, uint64_t a2)
{
  *(void *)(this + 16) = a2;
  return this;
}

size_t rabit::utils::MemoryBufferStream::Read(rabit::utils::MemoryBufferStream *this, void *a2, const char *a3)
{
  size_t v3 = (size_t)a3;
  uint64_t v6 = *((void *)this + 1);
  if (*(char *)(v6 + 23) < 0) {
    unint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    unint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  }
  xgboost_old::utils::Assert(*((void *)this + 2) <= v7, "read can not have position excceed buffer length", a3);
  uint64_t v8 = (uint64_t **)*((void *)this + 1);
  if ((*((char *)v8 + 23) & 0x80000000) == 0)
  {
    uint64_t v9 = *((void *)this + 2);
    if ((unint64_t)*((unsigned __int8 *)v8 + 23) - v9 < v3) {
      size_t v3 = *((unsigned __int8 *)v8 + 23) - v9;
    }
    if (!v3) {
      goto LABEL_14;
    }
LABEL_13:
    memcpy(a2, (char *)v8 + v9, v3);
    uint64_t v9 = *((void *)this + 2);
    goto LABEL_14;
  }
  uint64_t v9 = *((void *)this + 2);
  if ((unint64_t)v8[1] - v9 < v3) {
    size_t v3 = (size_t)v8[1] - v9;
  }
  if (v3)
  {
    uint64_t v8 = (uint64_t **)*v8;
    goto LABEL_13;
  }
LABEL_14:
  *((void *)this + 2) = v9 + v3;
  return v3;
}

char *rabit::utils::MemoryBufferStream::Write(char *this, const void *__src, size_t __n)
{
  if (__n)
  {
    int v5 = this;
    unint64_t v7 = this + 8;
    uint64_t v6 = (std::string *)*((void *)this + 1);
    std::string::size_type v8 = *((void *)v7 + 1) + __n;
    int v9 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
    if (v9 < 0) {
      std::string::size_type size = v6->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    }
    if (v8 > size)
    {
      std::string::resize(v6, v8, 0);
      uint64_t v6 = (std::string *)v5[1];
      LOBYTE(v9) = *((unsigned char *)&v6->__r_.__value_.__s + 23);
    }
    if ((v9 & 0x80) != 0) {
      uint64_t v6 = (std::string *)v6->__r_.__value_.__r.__words[0];
    }
    this = (char *)memcpy((char *)v6 + v5[2], __src, __n);
    v5[2] += __n;
  }
  return this;
}

BOOL rabit::utils::MemoryBufferStream::AtEnd(rabit::utils::MemoryBufferStream *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (*(char *)(v1 + 23) < 0) {
    uint64_t v2 = *(void *)(v1 + 8);
  }
  else {
    uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  }
  return *((void *)this + 2) == v2;
}

uint64_t xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::SetParam(uint64_t a1, const char *a2, const char *a3)
{
  return xgboost_old::tree::TrainParam::SetParam((xgboost_old::tree::TrainParam *)(a1 + 8), a2, a3);
}

void xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v28 = a3;
  if (a5[1] != *a5)
  {
    memset(v27, 0, sizeof(v27));
    int v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v23 = turi::thread::cpu_count((turi::thread *)a1);
    std::string __p = 0;
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    std::vector<xgboost_old::tree::RegTree::FVec>::resize((uint64_t *)((char *)&v23 + 4), (int)v23, (uint64_t)&__p);
    if (__p)
    {
      unint64_t v32 = __p;
      operator delete(__p);
    }
    std::string __p = 0;
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    std::vector<std::vector<xgboost_old::tree::GradStats>>::resize(v27, (int)v23, (uint64_t)&__p);
    if (__p)
    {
      unint64_t v32 = __p;
      operator delete(__p);
    }
    int v9 = operator new(0x28uLL);
    void *v9 = &unk_26D778B10;
    v9[1] = a5;
    v9[2] = v27;
    v9[3] = a1;
    Bytef v9[4] = (char *)&v23 + 4;
    unint64_t v34 = v9;
    turi::in_parallel((turi::thread_pool *)&__p);
    std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](&__p);
    int v11 = *(unsigned char **)v27[0];
    uint64_t v10 = *(unsigned char **)(v27[0] + 8);
    uint64_t v30 = 0;
    unint64_t v12 = operator new(0x40uLL);
    void *v12 = &unk_26D778B90;
    v12[1] = &v28;
    if (v10 == v11) {
      std::string::size_type v13 = 0;
    }
    else {
      std::string::size_type v13 = v11;
    }
    v12[2] = (char *)&v23 + 4;
    v12[3] = a5;
    v12[4] = a2;
    v12[5] = a4;
    v12[6] = v27;
    v12[7] = &v23;
    uint64_t v30 = v12;
    rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(a1 + 20), v13, 0x10uLL, (v10 - v11) >> 4, (uint64_t (*)(void *, void *))rabit::InvokeLambda_, v29);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v29);
    float v14 = a1[2];
    uint64_t v15 = *a5;
    uint64_t v16 = a5[1];
    BOOL v17 = v16 == *a5;
    a1[2] = v14 / (float)(unint64_t)((v16 - *a5) >> 3);
    if (!v17)
    {
      unint64_t v18 = 0;
      int v19 = 0;
      do
      {
        uint64_t v20 = *(void *)(v15 + 8 * v18);
        if (*(int *)(v20 + 96) >= 1)
        {
          int v21 = 0;
          do
          {
            uint64_t v22 = *(void *)v27[0];
            if (*(void *)(v27[0] + 8) == *(void *)v27[0]) {
              uint64_t v22 = 0;
            }
            xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Refresh(a1, v22 + 16 * v19, v21++, (uint64_t *)v20);
            uint64_t v15 = *a5;
            uint64_t v20 = *(void *)(*a5 + 8 * v18);
          }
          while (v21 < *(_DWORD *)(v20 + 96));
          uint64_t v16 = a5[1];
        }
        v19 += *(_DWORD *)(v20 + 100);
        ++v18;
      }
      while (v18 < (v16 - v15) >> 3);
    }
    a1[2] = v14;
    std::string __p = (char *)&v23 + 4;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    std::string __p = v27;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
}

void sub_22431B4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *__p,uint64_t a23)
{
  std::string __p = &a11;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a14;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::~TreeRefresher(void *a1)
{
  *a1 = &unk_26D778AC0;
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(a1 + 10));
  return a1;
}

void xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::~TreeRefresher(void *a1)
{
  *a1 = &unk_26D778AC0;
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(a1 + 10));
  JUMPOUT(0x22A614FA0);
}

float64x2_t rabit::ReducerSafe_<xgboost_old::tree::GradStats,&xgboost_old::tree::GradStats::Reduce>(float64x2_t *a1, float64x2_t *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      float64x2_t v4 = *a1++;
      float64x2_t result = vaddq_f64(*a2, v4);
      *a2++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

void std::vector<std::vector<xgboost_old::tree::GradStats>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<xgboost_old::tree::GradStats>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      uint64_t v9 = a1[1];
      do
      {
        int v11 = *(void **)(v9 - 24);
        v9 -= 24;
        uint64_t v10 = v11;
        if (v11)
        {
          *(void *)(v4 - 16) = v10;
          operator delete(v10);
        }
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

double xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Refresh(float *a1, uint64_t a2, int a3, uint64_t *a4)
{
  while (1)
  {
    unint64_t v7 = (double *)(a2 + 16 * a3);
    double v8 = *v7;
    double v9 = v7[1];
    double v10 = a1[5];
    double v11 = 0.0;
    if (v9 >= v10)
    {
      float v12 = a1[7];
      double v13 = *v7;
      if (v12 != 0.0)
      {
        double v14 = v12;
        BOOL v15 = v8 < -v12;
        double v16 = v8 + v12;
        if (!v15) {
          double v16 = 0.0;
        }
        if (v8 > v14) {
          double v13 = v8 - v14;
        }
        else {
          double v13 = v16;
        }
      }
      double v11 = -v13 / (v9 + a1[6]);
      float v17 = a1[9];
      if (v17 != 0.0)
      {
        if (v11 > v17) {
          double v11 = v17;
        }
        double v18 = (float)-v17;
        if (v11 < v18) {
          double v11 = v18;
        }
      }
    }
    int v19 = a3;
    float v20 = v11;
    int v21 = (float *)(a4[6] + 16 * a3);
    float v22 = v9;
    v21[1] = v22;
    v21[2] = v20;
    uint64_t v23 = *a4;
    uint64_t v24 = *a4 + 20 * a3;
    uint64_t v27 = *(int *)(v24 + 4);
    uint64_t v26 = (void *)(v24 + 4);
    uint64_t v25 = v27;
    if (v27 == -1) {
      break;
    }
    uint64_t v28 = (double *)(a2 + 16 * v25);
    double v29 = v28[1];
    double v30 = 0.0;
    double v31 = 0.0;
    if (v29 >= v10)
    {
      double v32 = *v28;
      float v33 = a1[9];
      float v34 = a1[7];
      if (v33 == 0.0)
      {
        if (v34 == 0.0)
        {
          double v35 = v32 * v32;
        }
        else
        {
          double v43 = v34;
          if (v32 <= v43)
          {
            double v44 = 0.0;
            if (v32 < -v43) {
              double v44 = v32 + v43;
            }
          }
          else
          {
            double v44 = v32 - v43;
          }
          double v35 = v44 * v44;
        }
        double v31 = v35 / (v29 + a1[6]);
      }
      else
      {
        double v36 = v34;
        double v37 = v32 + v34;
        if (v32 >= -v34) {
          double v37 = 0.0;
        }
        if (v32 > v36) {
          double v37 = v32 - v36;
        }
        if (v34 == 0.0) {
          double v37 = *v28;
        }
        double v38 = v29 + a1[6];
        double v39 = -v37 / v38;
        if (v39 > v33) {
          double v39 = v33;
        }
        double v40 = (float)-v33;
        if (v39 >= v40) {
          double v40 = v39;
        }
        double v41 = v38 * 0.5 * (v40 * v40) + v32 * v40;
        double v42 = v41 + v36 * fabs(v40);
        if (v34 != 0.0) {
          double v41 = v42;
        }
        double v31 = v41 * -2.0;
      }
    }
    uint64_t v45 = (double *)(a2 + 16 * *(int *)(v23 + 20 * v19 + 8));
    double v46 = v45[1];
    if (v46 >= v10)
    {
      double v47 = *v45;
      float v48 = a1[9];
      float v49 = a1[7];
      if (v48 == 0.0)
      {
        if (v49 == 0.0)
        {
          double v50 = v47 * v47;
        }
        else
        {
          double v58 = v49;
          if (v47 <= v58)
          {
            double v59 = 0.0;
            if (v47 < -v58) {
              double v59 = v47 + v58;
            }
          }
          else
          {
            double v59 = v47 - v58;
          }
          double v50 = v59 * v59;
        }
        double v30 = v50 / (v46 + a1[6]);
      }
      else
      {
        double v51 = v49;
        double v52 = v47 + v49;
        if (v47 >= -v49) {
          double v52 = 0.0;
        }
        if (v47 > v51) {
          double v52 = v47 - v51;
        }
        if (v49 == 0.0) {
          double v52 = *v45;
        }
        double v53 = v46 + a1[6];
        double v54 = -v52 / v53;
        if (v54 > v48) {
          double v54 = v48;
        }
        double v55 = (float)-v48;
        if (v54 >= v55) {
          double v55 = v54;
        }
        double v56 = v53 * 0.5 * (v55 * v55) + v47 * v55;
        double v57 = v56 + v51 * fabs(v55);
        if (v49 != 0.0) {
          double v56 = v57;
        }
        double v30 = v56 * -2.0;
      }
    }
    double v60 = 0.0;
    if (v9 >= v10)
    {
      float v61 = a1[9];
      float v62 = a1[7];
      if (v61 == 0.0)
      {
        if (v62 == 0.0)
        {
          double v63 = v8 * v8;
        }
        else
        {
          double v71 = v62;
          if (v8 <= v71)
          {
            if (v8 < -v71) {
              double v60 = v8 + v71;
            }
          }
          else
          {
            double v60 = v8 - v71;
          }
          double v63 = v60 * v60;
        }
        double v60 = v63 / (v9 + a1[6]);
      }
      else
      {
        double v64 = v62;
        double v65 = v8;
        if (v62 != 0.0)
        {
          double v65 = v8 + v64;
          if (v8 >= -v64) {
            double v65 = 0.0;
          }
          if (v8 > v64) {
            double v65 = v8 - v64;
          }
        }
        double v66 = v9 + a1[6];
        double v67 = -v65 / v66;
        if (v67 > v61) {
          double v67 = v61;
        }
        double v68 = (float)-v61;
        if (v67 >= v68) {
          double v68 = v67;
        }
        double v69 = v66 * 0.5 * (v68 * v68) + v8 * v68;
        double v70 = v69 + v64 * fabs(v68);
        if (v62 != 0.0) {
          double v69 = v70;
        }
        double v60 = v69 * -2.0;
      }
    }
    float v72 = v31 + v30 - v60;
    *int v21 = v72;
    xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Refresh(a1, a2);
    a3 = *(_DWORD *)(*a4 + 20 * v19 + 8);
  }
  *(float *)(v23 + 20 * v19 + 16) = a1[2] * v20;
  double result = NAN;
  *uint64_t v26 = -1;
  return result;
}

void *std::vector<std::vector<xgboost_old::tree::GradStats>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  double result = a1 + 2;
  uint64_t v7 = v8;
  double v9 = (void *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      BOOL v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        void *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        double result = std::vector<xgboost_old::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost_old::tree::GradStats*,xgboost_old::tree::GradStats*>(v9, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      double v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    int v21 = result;
    if (v13) {
      double v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, v13);
    }
    else {
      double v14 = 0;
    }
    float v17 = v14;
    double v18 = &v14[24 * v10];
    int v19 = v18;
    float v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<xgboost_old::tree::GradStats>>::__construct_at_end(&v17, a2, a3);
    std::vector<std::vector<xgboost_old::tree::GradStats>>::__swap_out_circular_buffer(a1, &v17);
    return (void *)std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_22431BC54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<std::vector<xgboost_old::tree::GradStats>>::__construct_at_end(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = (void *)result[2];
  if (a2)
  {
    BOOL v6 = &v4[3 * a2];
    uint64_t v7 = 24 * a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      double result = std::vector<xgboost_old::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost_old::tree::GradStats*,xgboost_old::tree::GradStats*>(v4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_22431BCF0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<xgboost_old::tree::GradStats>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::vector<xgboost_old::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost_old::tree::GradStats*,xgboost_old::tree::GradStats*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22431BDD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::GradStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::GradStats>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D778B10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D778B10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>((uint64_t ***)(a1 + 8), a2);
}

uint64_t std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void *std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(uint64_t ***a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = **a1;
  uint64_t v5 = (char *)(*a1)[1] - (char *)v4;
  if (v5)
  {
    LODWORD(v6) = 0;
    unint64_t v7 = v5 >> 3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    do
    {
      uint64_t v8 = *v4++;
      unint64_t v6 = *(int *)(v8 + 100) + (uint64_t)(int)v6;
      --v7;
    }
    while (v7);
  }
  else
  {
    unint64_t v6 = 0;
  }
  uint64_t v9 = (uint64_t)&(*a1[1])[3 * v3];
  long long v16 = 0uLL;
  std::vector<xgboost_old::tree::GradStats>::resize(v9, v6, &v16);
  uint64_t v10 = (uint64_t)&(*a1[1])[3 * v3];
  unint64_t v11 = *(void **)v10;
  uint64_t v12 = *(void *)(v10 + 8) - *(void *)v10;
  if (v12 >= 1) {
    bzero(v11, 16 * (((unint64_t)v12 >> 4) - ((unint64_t)v12 > 0xF)) + 16);
  }
  long long v13 = (void **)&(*a1[3])[3 * v3];
  std::vector<xgboost_old::tree::RegTree::FVec::Entry>::resize((uint64_t)v13, *(int *)(***a1 + 112));
  __n128 result = *v13;
  uint64_t v15 = (unsigned char *)v13[1] - (unsigned char *)*v13;
  if (v15 >= 1) {
    return memset(result, 255, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
  }
  return result;
}

void std::vector<xgboost_old::tree::GradStats>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<xgboost_old::tree::GradStats>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<xgboost_old::tree::GradStats>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  uint64_t v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 4)
  {
    if (a2)
    {
      uint64_t v16 = 16 * a2;
      float v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 4);
    if (v11 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 4;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 3 > v11) {
      unint64_t v11 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    double v18 = &v15[16 * v12];
    int v19 = &v18[16 * a2];
    uint64_t v20 = 16 * a2;
    int v21 = v18;
    do
    {
      *(_OWORD *)int v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    float v22 = &v15[16 * v14];
    uint64_t v24 = (char *)*a1;
    uint64_t v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      uint64_t v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

uint64_t rabit::InvokeLambda_(rabit *this, void *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);
  return v3();
}

void std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26D778B90;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D778B90;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

turi::thread_pool *std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator()(a1 + 8);
}

uint64_t std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

turi::thread_pool *xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v2 = (****(uint64_t (*****)(void))a1)(**(void **)a1);
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 24))(v2))
  {
    do
    {
      long long v3 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
      xgboost_old::utils::Check(*(void *)v3 < 0xFFFFFFFFuLL, "too large batch size ", v4);
      unint64_t v5 = *v3;
      uint64_t v9 = v3;
      long long v10 = *(_OWORD *)(a1 + 8);
      long long v11 = *(_OWORD *)(a1 + 24);
      uint64_t v12 = *(void *)(a1 + 40);
      turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(0, v5, (uint64_t)&v9);
    }
    while (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2) & 1) != 0);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = ((*(void *)(*(void *)v6 + 8) - **(void **)v6) >> 4);
  uint64_t v9 = *(unsigned int **)(a1 + 48);
  *(void *)&long long v10 = v6;
  return turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2}>(0, v7, &v9);
}

turi::thread_pool *turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  unint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  __n128 result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    long long v10 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    void v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v13[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      __n128 result = (turi::thread_pool *)xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
  return result;
}

void sub_22431C678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

turi::thread_pool *turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2}>(turi::thread_pool *a1, unint64_t a2, unsigned int **a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v22 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  unint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  __n128 result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    float v17 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v21, v17);
    double v18 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v19 = (unint64_t)((double)v5 + v18 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v19 = a2;
    }
    void v20[2] = (unint64_t)((double)v5 + v18 * (double)0);
    void v20[3] = v19;
    v20[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>(xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2})::stored_vtable
           + 1;
    v20[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v21, v20);
  }
  if (a2 > v5)
  {
    long long v10 = a3[1];
    uint64_t v11 = **a3;
    do
    {
      if ((int)v11 >= 2)
      {
        unint64_t v12 = (uint64_t *)(*(void *)v10 + 24);
        uint64_t v13 = **(void **)v10;
        float64x2_t v14 = *(float64x2_t *)(v13 + 16 * v5);
        uint64_t v15 = v11 - 1;
        do
        {
          uint64_t v16 = *v12;
          v12 += 3;
          float64x2_t v14 = vaddq_f64(v14, *(float64x2_t *)(v16 + 16 * v5));
          *(float64x2_t *)(v13 + 16 * v5) = v14;
          --v15;
        }
        while (v15);
      }
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_22431C828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

int *xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = *(void *)(*(void *)a1 + 16) + 8 * a2;
  unint64_t v5 = (unsigned int *)(*(void *)(*(void *)a1 + 24) + 8 * *(void *)v4);
  uint64_t v6 = *(_DWORD *)(v4 + 8) - *(void *)v4;
  __n128 result = (int *)turi::thread::get_tls_data((turi::thread *)a1);
  int v8 = *result;
  uint64_t v9 = *(void *)(*(void *)a1 + 8);
  long long v10 = (uint64_t *)(**(void **)(a1 + 8) + 24 * *result);
  if (v6)
  {
    uint64_t v11 = v5 + 1;
    uint64_t v12 = v6;
    do
    {
      unint64_t v13 = *(v11 - 1);
      if (v13 < (v10[1] - *v10) >> 2) {
        *(_DWORD *)(*v10 + 4 * v13) = *v11;
      }
      v11 += 2;
      --v12;
    }
    while (v12);
  }
  uint64_t v14 = **(void **)(a1 + 16);
  uint64_t v15 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v16 = v15 - v14;
  if (v15 != v14)
  {
    uint64_t v17 = 0;
    int v18 = 0;
    unsigned int v19 = v9 + v2;
    unint64_t v20 = v16 >> 3;
    uint64_t v21 = *(void *)(a1 + 32);
    uint64_t v23 = (uint64_t *)(**(void **)(a1 + 40) + 24 * v8);
    uint64_t v22 = *v23;
    if (v23[1] == *v23) {
      uint64_t v22 = 0;
    }
    uint64_t v24 = (v9 + v2);
    float32x2_t v25 = *(float32x2_t *)(**(void **)(a1 + 24) + 8 * v19);
    uint64_t v27 = *(void *)(v21 + 16);
    uint64_t v26 = *(void *)(v21 + 24);
    float64x2_t v28 = vcvtq_f64_f32(v25);
    if (v20 <= 1) {
      unint64_t v20 = 1;
    }
    do
    {
      if (v26 == v27) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = *(int *)(v27 + 4 * v24);
      }
      double v30 = *(uint64_t **)(v14 + 8 * v17);
      uint64_t v31 = v22 + 16 * v18;
      *(float64x2_t *)(v31 + 16 * v29) = vaddq_f64(*(float64x2_t *)(v31 + 16 * v29), v28);
      uint64_t v32 = *v30;
      if (*(_DWORD *)(*v30 + 20 * (int)v29 + 4) != -1)
      {
        uint64_t v33 = *v10;
        do
        {
          int v34 = *(_DWORD *)(v32 + 20 * v29 + 12);
          float v35 = *(float *)(v33 + 4 * (v34 & 0x7FFFFFFF));
          if (v35 == NAN)
          {
            uint64_t v39 = v32 + 20 * v29;
            double v40 = (int *)(v39 + 4);
            double v38 = (int *)(v39 + 8);
            if (v34 < 0) {
              double v38 = v40;
            }
          }
          else
          {
            float v36 = *(float *)(v32 + 20 * v29 + 16);
            uint64_t v37 = v32 + 20 * v29;
            if (v36 <= v35) {
              double v38 = (int *)(v37 + 8);
            }
            else {
              double v38 = (int *)(v37 + 4);
            }
          }
          uint64_t v29 = *v38;
          *(float64x2_t *)(v31 + 16 * v29) = vaddq_f64(*(float64x2_t *)(v31 + 16 * v29), v28);
        }
        while (*(_DWORD *)(v32 + 20 * (int)v29 + 4) != -1);
      }
      __n128 result = (int *)*((unsigned int *)v30 + 25);
      v18 += (int)result;
      ++v17;
    }
    while (v17 != v20);
  }
  for (; v6; --v6)
  {
    unsigned int v42 = *v5;
    v5 += 2;
    uint64_t v41 = v42;
    if (v42 < (unint64_t)((v10[1] - *v10) >> 2)) {
      *(_DWORD *)(*v10 + 4 * v41) = -1;
    }
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246EF462 & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)(0x80000002246EF462 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

int *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(int *result)
{
  unint64_t v1 = *((void *)result + 1);
  if (v1 < *((void *)result + 2))
  {
    int v2 = (uint64_t *)result;
    do
      __n128 result = xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246EF551 & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)(0x80000002246EF551 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

unsigned int ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::tree::TreeRefresher<xgboost_old::tree::GradStats>::Update(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<xgboost_old::tree::RegTree *> const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#2} const&)::{lambda(void)#1},void>::invoke(unsigned int ***result)
{
  unint64_t v1 = result[1];
  int v2 = result[2];
  if (v1 < v2)
  {
    uint64_t v3 = (uint64_t)*result;
    uint64_t v4 = ***result;
    do
    {
      if ((int)v4 >= 2)
      {
        long long v5 = **(uint64_t ***)(v3 + 8);
        uint64_t v8 = *v5;
        uint64_t v6 = v5 + 3;
        uint64_t v7 = v8;
        float64x2_t v9 = *(float64x2_t *)(v8 + 16 * (void)v1);
        uint64_t v10 = v4 - 1;
        do
        {
          uint64_t v11 = *v6;
          v6 += 3;
          float64x2_t v9 = vaddq_f64(v9, *(float64x2_t *)(v11 + 16 * (void)v1));
          *(float64x2_t *)(v7 + 16 * (void)v1) = v9;
          --v10;
        }
        while (v10);
      }
      unint64_t v1 = (unsigned int **)((char *)v1 + 1);
    }
    while (v1 != v2);
  }
  return result;
}

void xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Update(uint64_t a1, uint64_t *a2, const char *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  uint64_t v6 = (float *)(a1 + 8);
  float v7 = *(float *)(a1 + 8);
  uint64_t v8 = a5[1] - *a5;
  *(float *)(a1 + 8) = v7 / (float)(unint64_t)(v8 >> 3);
  if (v8)
  {
    unint64_t v13 = 0;
    do
    {
      v14[0] = (uint64_t)&unk_26D778CA0;
      v14[1] = (uint64_t)v6;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long __p = 0u;
      uint64_t v22 = 0;
      xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::Update(v14, a2, a3, a4, *(void *)(v5 + 8 * v13));
      v14[0] = (uint64_t)&unk_26D778CA0;
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (*((void *)&v19 + 1))
      {
        *(void *)&long long v20 = *((void *)&v19 + 1);
        operator delete(*((void **)&v19 + 1));
      }
      uint64_t v23 = (void **)&v18;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v23);
      if (*((void *)&v16 + 1))
      {
        *(void *)&long long v17 = *((void *)&v16 + 1);
        operator delete(*((void **)&v16 + 1));
      }
      if ((void)v15)
      {
        *((void *)&v15 + 1) = v15;
        operator delete((void *)v15);
      }
      ++v13;
      uint64_t v5 = *a5;
    }
    while (v13 < (a5[1] - *a5) >> 3);
  }
  float *v6 = v7;
}

void sub_22431CD7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::~Builder((uint64_t)va);
  _Unwind_Resume(a1);
}

void xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::~ColMaker()
{
}

float xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::Update(uint64_t *a1, uint64_t *a2, const char *a3, uint64_t a4, uint64_t a5)
{
  xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitData((uint64_t)a1, a2, a3, (uint64_t *)(a4 + 16), a5);
  xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(a1, a1 + 15, (uint64_t)a2, (uint64_t)a3, a4, a5);
  if (*(int *)(a1[1] + 8) <= 0)
  {
    uint64_t v14 = a1[15];
    uint64_t v15 = a1[16];
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::FindSplit((uint64_t)a1, v11, a1 + 15, (uint64_t)a2, (uint64_t)a3, a4, (void *)a5);
      (*(void (**)(uint64_t *, uint64_t *, const char *, uint64_t))(*a1 + 24))(a1, a1 + 15, a3, a5);
      uint64_t v12 = (void *)(*(uint64_t (**)(const char *))(*(void *)a3 + 64))(a3);
      unint64_t v13 = ((v12[1] - *v12) >> 2);
      v23[0] = v12;
      v23[1] = a1;
      v23[2] = a5;
      turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v13, (uint64_t)v23);
      xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateQueueExpand((int)a1, (void *)a5, (char *)a1 + 120);
      xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(a1, a1 + 15, (uint64_t)a2, (uint64_t)a3, a4, a5);
      uint64_t v14 = a1[15];
      uint64_t v15 = a1[16];
      if (v15 == v14) {
        break;
      }
      uint64_t v11 = (v11 + 1);
    }
    while ((int)v11 < *(_DWORD *)(a1[1] + 8));
  }
  if (v15 != v14)
  {
    unint64_t v16 = 0;
    float result = NAN;
    do
    {
      int v17 = *(_DWORD *)(v14 + 4 * v16);
      float v18 = *(float *)(a1[12] + 40 * v17 + 20) * *(float *)a1[1];
      uint64_t v19 = *(void *)a5 + 20 * v17;
      *(float *)(v19 + 16) = v18;
      *(void *)(v19 + 4) = -1;
      ++v16;
      uint64_t v14 = a1[15];
    }
    while (v16 < (a1[16] - v14) >> 2);
  }
  uint64_t v20 = *(unsigned int *)(a5 + 100);
  if ((int)v20 >= 1)
  {
    uint64_t v21 = (double *)(a1[12] + 24);
    uint64_t v22 = (float *)(*(void *)(a5 + 48) + 8);
    do
    {
      *(v22 - 2) = *(float *)v21;
      *uint64_t v22 = *((float *)v21 - 1);
      float result = *(v21 - 2);
      *(v22 - 1) = result;
      v21 += 5;
      v22 += 4;
      --v20;
    }
    while (v20);
  }
  return result;
}

uint64_t xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::~Builder(uint64_t a1)
{
  *(void *)a1 = &unk_26D778CA0;
  int v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  float v7 = (void **)(a1 + 72);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
  }
  return a1;
}

turi::thread_pool *xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(turi::thread_pool *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float64x2_t v9 = result;
  uint64_t v10 = *a2;
  int v11 = *(_DWORD *)(*((void *)result + 1) + 60);
  if (v11 == 2) {
    int v11 = *((_DWORD *)result + 4) > 2 * (int)v10;
  }
  uint64_t v12 = *a2;
  if (v11)
  {
    if (v10)
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = a2[1];
        long long v15 = *(_OWORD *)(a2[2] + 16 * v13);
        float result = (turi::thread_pool *)xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(v9, &v15, *(_DWORD *)(v14 + 4 * v13++), a4, a3, a5);
      }
      while (v12 != v13);
    }
  }
  else
  {
    *(void *)&long long v15 = a2;
    *((void *)&v15 + 1) = result;
    uint64_t v16 = a4;
    uint64_t v17 = a3;
    uint64_t v18 = a5;
    return turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(0, v10, (turi::thread *)&v15);
  }
  return result;
}

uint64_t xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SyncBestSolution(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = v3 - *a2;
  if (v3 != *a2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 2;
    uint64_t v7 = *(void *)(result + 96);
    uint64_t v8 = *(unsigned int *)(result + 16);
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    do
    {
      if ((int)v8 >= 1)
      {
        int v9 = *(_DWORD *)(v2 + 4 * v5);
        uint64_t v10 = v7 + 40 * v9;
        float v12 = *(float *)(v10 + 24);
        uint64_t v11 = v10 + 24;
        float v13 = v12;
        uint64_t v14 = *(uint64_t **)(result + 72);
        int v15 = *(_DWORD *)(v11 + 4);
        uint64_t v16 = v8;
        do
        {
          uint64_t v17 = *v14;
          uint64_t v18 = *v14 + 56 * v9;
          float v19 = *(float *)(v18 + 40);
          int v20 = *(_DWORD *)(v18 + 44);
          if ((v15 & 0x7FFFFFFFu) <= (v20 & 0x7FFFFFFFu)) {
            BOOL v21 = v13 < v19;
          }
          else {
            BOOL v21 = v13 <= v19;
          }
          if (v21)
          {
            *(float *)uint64_t v11 = v19;
            *(_DWORD *)(v11 + 4) = v20;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v17 + 56 * v9 + 48);
            float v13 = v19;
            int v15 = v20;
          }
          v14 += 3;
          --v16;
        }
        while (v16);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

void xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  memset(&__p, 0, sizeof(__p));
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    std::vector<unsigned int>::pointer end = 0;
    unint64_t v10 = 0;
    do
    {
      int v11 = *(_DWORD *)(v7 + 4 * v10);
      if (*(_DWORD *)(*a4 + 20 * v11 + 4) != -1)
      {
        int v12 = *(_DWORD *)(*a4 + 20 * v11 + 12) & 0x7FFFFFFF;
        if (end >= __p.__end_cap_.__value_)
        {
          std::vector<unsigned int>::pointer begin = __p.__begin_;
          uint64_t v15 = end - __p.__begin_;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          int64_t v17 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
          if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v18);
            uint64_t v20 = v19;
            std::vector<unsigned int>::pointer begin = __p.__begin_;
            std::vector<unsigned int>::pointer end = __p.__end_;
          }
          else
          {
            uint64_t v20 = 0;
          }
          BOOL v21 = (unsigned int *)(v18 + 4 * v15);
          *BOOL v21 = v12;
          float v13 = v21 + 1;
          while (end != begin)
          {
            unsigned int v22 = *--end;
            *--BOOL v21 = v22;
          }
          __p.__begin_ = v21;
          __p.__end_ = v13;
          __p.__end_cap_.__value_ = (unsigned int *)(v18 + 4 * v20);
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *std::vector<unsigned int>::pointer end = v12;
          float v13 = end + 1;
        }
        __p.__end_ = v13;
        std::vector<unsigned int>::pointer end = v13;
        uint64_t v7 = *a2;
        uint64_t v6 = a2[1];
      }
      ++v10;
    }
    while (v10 < (v6 - v7) >> 2);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  uint64_t v23 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::__equal_to &>((int *)__p.__begin_, (int *)__p.__end_);
  std::vector<int>::resize(&__p, ((char *)v23 - (char *)__p.__begin_) >> 2);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, std::vector<unsigned int> *))(*(void *)a3 + 16))(a3, &__p);
  while ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 24))(v24))
  {
    float32x2_t v25 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 32))(v24);
    if (*v25)
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      do
      {
        unint64_t v28 = v25[1];
        uint64_t v29 = (uint64_t *)(v25[2] + v26);
        uint64_t v31 = *v29;
        uint64_t v30 = v29[1];
        v35[0] = v31;
        v35[1] = v30;
        int v34 = 0;
        int v34 = *(_DWORD *)(v28 + 4 * v27);
        v33[0] = v35;
        v33[1] = a1;
        v33[2] = a4;
        v33[3] = &v34;
        turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v30, (uint64_t)v33);
        ++v27;
        v26 += 16;
      }
      while (v27 < *v25);
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_22431D4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

turi::thread_pool *turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, turi::thread *a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  float result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    unint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    void v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v13[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      float result = (turi::thread_pool *)xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
  return result;
}

void sub_22431D630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void *xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(void *a1, _DWORD *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unsigned int v24 = a3;
  int v11 = a2[2];
  if (v11) {
    BOOL v12 = *(float *)(*(void *)a2 + 4) != *(float *)(*(void *)a2 + 8 * (v11 - 1) + 4);
  }
  else {
    BOOL v12 = 1;
  }
  uint64_t v13 = a1[1];
  uint64_t v14 = a3;
  (*(void (**)(uint64_t, void))(*(void *)a4 + 56))(a4, a3);
  int v16 = *(_DWORD *)(v13 + 24);
  if (v16 == 2)
  {
    BOOL v12 = 1;
  }
  else if (v16 || *(float *)(v13 + 44) <= v15)
  {
    BOOL v12 = 0;
  }
  BOOL v23 = v12;
  uint64_t v17 = a1[1];
  (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 56))(a4, v14);
  BOOL v22 = *(_DWORD *)(v17 + 24) != 2;
  unint64_t v18 = (int *)operator new(0x30uLL);
  *(void *)unint64_t v18 = &unk_26D778D00;
  *((void *)v18 + 1) = a1;
  *((void *)v18 + 2) = a1 + 15;
  *((void *)v18 + 3) = a2;
  *((void *)v18 + 4) = a5;
  *((void *)v18 + 5) = a6;
  uint64_t v26 = v18;
  turi::in_parallel((turi::thread_pool *)v25);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v25);
  unint64_t v19 = ((a1[16] - a1[15]) >> 2);
  v25[0] = a1 + 15;
  v25[1] = a1;
  v25[2] = &v23;
  uint64_t v26 = (int *)&v24;
  unint64_t v27 = &v22;
  turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(0, v19, (uint64_t)v25);
  uint64_t v20 = (int *)operator new(0x40uLL);
  *(void *)uint64_t v20 = &unk_26D778DA0;
  *((void *)v20 + 1) = a1;
  *((void *)v20 + 2) = a2;
  *((void *)v20 + 3) = a5;
  *((void *)v20 + 4) = a6;
  *((void *)v20 + 5) = &v23;
  *((void *)v20 + 6) = &v24;
  *((void *)v20 + 7) = &v22;
  uint64_t v26 = v20;
  turi::in_parallel((turi::thread_pool *)v25);
  return std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v25);
}

void sub_22431D874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}::operator()(turi::thread *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(unsigned int *)(*(void *)(*(void *)a1 + 8) + 4 * a2);
  uint64_t v6 = *(void *)turi::thread::get_tls_data(a1);
  uint64_t v7 = (uint64_t *)(*(void *)(*(void *)a1 + 16) + 16 * a2);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  uint64_t v10 = v8;
  if (v8) {
    BOOL v11 = *(float *)(v9 + 4) != *(float *)(v9 + 8 * (v8 - 1) + 4);
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v12 = *(void *)(v4 + 8);
  (*(void (**)(void, uint64_t))(**((void **)a1 + 2) + 56))(*((void *)a1 + 2), v5);
  int v14 = *(_DWORD *)(v12 + 24);
  if (v14 == 2 || !v14 && (*(float *)(v12 + 44) > v13 ? (BOOL v15 = v11) : (BOOL v15 = 0), v15)) {
    xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::EnumerateSplit(v4, (unsigned int *)v9, (unsigned int *)(v9 + 8 * v10), 1, v5, *((uint64_t **)a1 + 3), *((void *)a1 + 4), (uint64_t *)(*(void *)(v4 + 72) + 24 * (int)v6));
  }
  uint64_t v16 = *(void *)(v4 + 8);
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)a1 + 2) + 56))(*((void *)a1 + 2), v5);
  if (*(_DWORD *)(v16 + 24) != 2)
  {
    unint64_t v18 = (uint64_t *)*((void *)a1 + 3);
    uint64_t v19 = *((void *)a1 + 4);
    uint64_t v20 = (uint64_t *)(*(void *)(v4 + 72) + 24 * (int)v6);
    return xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::EnumerateSplit(v4, (unsigned int *)(v9 - 8 + 8 * v10), (unsigned int *)(v9 - 8), -1, v5, v18, v19, v20);
  }
  return result;
}

uint64_t xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::EnumerateSplit(uint64_t result, unsigned int *a2, unsigned int *a3, int a4, unsigned int a5, uint64_t *a6, uint64_t a7, uint64_t *a8)
{
  if (*(_DWORD *)(*(void *)(result + 8) + 64))
  {
    return xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::EnumerateSplitCacheOpt(result, a2, a3, a4, a5, a6, a8);
  }
  else
  {
    uint64_t v10 = *(_DWORD **)(result + 120);
    uint64_t v9 = *(int **)(result + 128);
    if (v9 == v10)
    {
      uint64_t v14 = v9 - v10;
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v9 = *(int **)(result + 120);
      do
      {
        uint64_t v12 = (void *)(*a8 + 56 * v9[v11]);
        void *v12 = 0;
        v12[1] = 0;
        ++v11;
        uint64_t v9 = *(int **)(result + 120);
        uint64_t v13 = *(void *)(result + 128) - (void)v9;
      }
      while (v11 < v13 >> 2);
      uint64_t v14 = v13 >> 2;
    }
    if (a2 != a3)
    {
      uint64_t v15 = *(void *)(result + 48);
      uint64_t v16 = *a8;
      unsigned int v17 = a5 | 0x80000000;
      if (a4 != -1) {
        unsigned int v17 = a5;
      }
      uint64_t v18 = *a6;
      do
      {
        uint64_t v19 = *a2;
        unsigned int v20 = *(_DWORD *)(v15 + 4 * v19);
        if ((v20 & 0x80000000) == 0)
        {
          float v21 = *((float *)a2 + 1);
          BOOL v22 = (float64x2_t *)(v16 + 56 * v20);
          double v23 = v22->f64[1];
          if (v23 == 0.0)
          {
            *BOOL v22 = vaddq_f64(*v22, vcvtq_f64_f32(*(float32x2_t *)(v18 + 8 * v19)));
            unsigned int v24 = (float *)(v16 + 56 * v20 + 32);
          }
          else
          {
            uint64_t v25 = v16 + 56 * v20;
            float v26 = *(float *)(v25 + 32);
            unsigned int v24 = (float *)(v25 + 32);
            float v27 = v26;
            if (vabds_f32(v21, v26) <= 0.00002)
            {
              v30.f64[0] = v22->f64[0];
            }
            else
            {
              uint64_t v28 = *(float **)(result + 8);
              double v29 = v28[3];
              v30.f64[0] = v22->f64[0];
              if (v23 >= v29)
              {
                uint64_t v31 = *(void *)(result + 96);
                uint64_t v32 = (double *)(v31 + 40 * v20);
                double v33 = v32[1] - v23;
                if (v33 >= v29)
                {
                  double v34 = 0.0;
                  double v35 = 0.0;
                  if (v23 >= v29)
                  {
                    float v36 = v28[7];
                    float v37 = v28[5];
                    if (v36 == 0.0)
                    {
                      if (v37 == 0.0)
                      {
                        double v38 = v30.f64[0] * v30.f64[0];
                      }
                      else
                      {
                        double v47 = v37;
                        if (v30.f64[0] <= v47)
                        {
                          double v48 = 0.0;
                          if (v30.f64[0] < -v47) {
                            double v48 = v30.f64[0] + v47;
                          }
                        }
                        else
                        {
                          double v48 = v30.f64[0] - v47;
                        }
                        double v38 = v48 * v48;
                      }
                      double v35 = v38 / (v23 + v28[4]);
                    }
                    else
                    {
                      double v39 = v37;
                      double v40 = v30.f64[0] + v37;
                      if (v30.f64[0] >= -v37) {
                        double v40 = 0.0;
                      }
                      if (v30.f64[0] > v39) {
                        double v40 = v30.f64[0] - v39;
                      }
                      if (v37 == 0.0) {
                        double v40 = v22->f64[0];
                      }
                      double v41 = v23 + v28[4];
                      double v42 = -v40 / v41;
                      if (v42 > v36) {
                        double v42 = v36;
                      }
                      double v43 = (float)-v36;
                      if (v42 >= v43) {
                        double v43 = v42;
                      }
                      double v44 = v41 * 0.5 * (v43 * v43) + v30.f64[0] * v43;
                      double v45 = v44 + v39 * fabs(v43);
                      if (v37 == 0.0) {
                        double v46 = v44;
                      }
                      else {
                        double v46 = v45;
                      }
                      double v35 = v46 * -2.0;
                    }
                  }
                  if (v33 >= v29)
                  {
                    double v49 = *v32 - v30.f64[0];
                    float v50 = v28[7];
                    float v51 = v28[5];
                    if (v50 == 0.0)
                    {
                      if (v51 == 0.0)
                      {
                        double v52 = v49 * v49;
                      }
                      else
                      {
                        double v60 = v51;
                        if (v49 <= v60)
                        {
                          double v61 = 0.0;
                          if (v49 < -v60) {
                            double v61 = v49 + v60;
                          }
                        }
                        else
                        {
                          double v61 = v49 - v60;
                        }
                        double v52 = v61 * v61;
                      }
                      double v34 = v52 / (v33 + v28[4]);
                    }
                    else
                    {
                      double v53 = v51;
                      double v54 = v49 + v51;
                      if (v49 >= -v51) {
                        double v54 = 0.0;
                      }
                      if (v49 > v53) {
                        double v54 = v49 - v53;
                      }
                      if (v51 == 0.0) {
                        double v54 = *v32 - v30.f64[0];
                      }
                      double v55 = v33 + v28[4];
                      double v56 = -v54 / v55;
                      if (v56 > v50) {
                        double v56 = v50;
                      }
                      double v57 = (float)-v50;
                      if (v56 >= v57) {
                        double v57 = v56;
                      }
                      double v58 = v55 * 0.5 * (v57 * v57) + v49 * v57;
                      double v59 = v58 + v53 * fabs(v57);
                      if (v51 != 0.0) {
                        double v58 = v59;
                      }
                      double v34 = v58 * -2.0;
                    }
                  }
                  float v62 = v35 + v34 - *(float *)(v31 + 40 * v20 + 16);
                  uint64_t v63 = v16 + 56 * v20;
                  float v65 = *(float *)(v63 + 40);
                  uint64_t v64 = v63 + 40;
                  BOOL v66 = v65 < v62;
                  BOOL v67 = v65 <= v62;
                  if ((*(_DWORD *)(v64 + 4) & 0x7FFFFFFFu) <= a5) {
                    BOOL v68 = v66;
                  }
                  else {
                    BOOL v68 = v67;
                  }
                  if (v68)
                  {
                    *(float *)uint64_t v64 = v62;
                    *(_DWORD *)(v64 + 4) = v17;
                    *(float *)(v16 + 56 * v20 + 48) = (float)(v21 + v27) * 0.5;
                  }
                }
              }
            }
            v30.f64[1] = v23;
            *BOOL v22 = vaddq_f64(v30, vcvtq_f64_f32(*(float32x2_t *)(v18 + 8 * v19)));
          }
          *unsigned int v24 = v21;
        }
        a2 += 2 * a4;
      }
      while (a2 != a3);
    }
    if (v14)
    {
      uint64_t v69 = *a8;
      uint64_t v70 = *(void *)(result + 96);
      double v71 = *(float **)(result + 8);
      double v72 = v71[3];
      unsigned int v73 = a5 | 0x80000000;
      if (a4 != -1) {
        unsigned int v73 = a5;
      }
      do
      {
        int v75 = *v9++;
        int v74 = v75;
        uint64_t result = v69 + 56 * v75;
        uint64_t v76 = (double *)(v70 + 40 * v75);
        double v77 = *(double *)(result + 8);
        double v78 = v76[1] - v77;
        if (v77 >= v72 && v78 >= v72)
        {
          double v80 = *(double *)result;
          double v81 = 0.0;
          double v82 = 0.0;
          if (v77 >= v72)
          {
            float v83 = v71[7];
            float v84 = v71[5];
            if (v83 == 0.0)
            {
              if (v84 == 0.0)
              {
                double v85 = v80 * v80;
              }
              else
              {
                double v94 = v84;
                if (v80 <= v94)
                {
                  double v95 = 0.0;
                  if (v80 < -v94) {
                    double v95 = v80 + v94;
                  }
                }
                else
                {
                  double v95 = v80 - v94;
                }
                double v85 = v95 * v95;
              }
              double v82 = v85 / (v77 + v71[4]);
            }
            else
            {
              double v86 = v84;
              double v87 = v80 + v84;
              if (v80 >= -v84) {
                double v87 = 0.0;
              }
              if (v80 > v86) {
                double v87 = v80 - v86;
              }
              if (v84 == 0.0) {
                double v87 = *(double *)result;
              }
              double v88 = v77 + v71[4];
              double v89 = -v87 / v88;
              if (v89 > v83) {
                double v89 = v83;
              }
              double v90 = (float)-v83;
              if (v89 >= v90) {
                double v90 = v89;
              }
              double v91 = v88 * 0.5 * (v90 * v90) + v80 * v90;
              double v92 = v91 + v86 * fabs(v90);
              if (v84 == 0.0) {
                double v93 = v91;
              }
              else {
                double v93 = v92;
              }
              double v82 = v93 * -2.0;
            }
          }
          if (v78 >= v72)
          {
            double v96 = *v76 - v80;
            float v97 = v71[7];
            float v98 = v71[5];
            if (v97 == 0.0)
            {
              if (v98 == 0.0)
              {
                double v99 = v96 * v96;
              }
              else
              {
                double v107 = v98;
                if (v96 <= v107)
                {
                  double v108 = 0.0;
                  if (v96 < -v107) {
                    double v108 = v96 + v107;
                  }
                }
                else
                {
                  double v108 = v96 - v107;
                }
                double v99 = v108 * v108;
              }
              double v81 = v99 / (v78 + v71[4]);
            }
            else
            {
              double v100 = v98;
              double v101 = v96 + v98;
              if (v96 >= -v98) {
                double v101 = 0.0;
              }
              if (v96 > v100) {
                double v101 = v96 - v100;
              }
              if (v98 == 0.0) {
                double v101 = v96;
              }
              double v102 = v78 + v71[4];
              double v103 = -v101 / v102;
              if (v103 > v97) {
                double v103 = v97;
              }
              double v104 = (float)-v97;
              if (v103 >= v104) {
                double v104 = v103;
              }
              double v105 = v102 * 0.5 * (v104 * v104) + v96 * v104;
              double v106 = v105 + v100 * fabs(v104);
              if (v98 != 0.0) {
                double v105 = v106;
              }
              double v81 = v105 * -2.0;
            }
          }
          float v109 = v82 + v81 - *(float *)(v70 + 40 * v74 + 16);
          uint64_t v110 = v69 + 56 * v74;
          float v112 = *(float *)(v110 + 40);
          uint64_t v111 = v110 + 40;
          uint64_t result = v111 + 4;
          BOOL v113 = v112 < v109;
          BOOL v114 = v112 <= v109;
          if ((*(_DWORD *)(v111 + 4) & 0x7FFFFFFFu) <= a5) {
            BOOL v115 = v113;
          }
          else {
            BOOL v115 = v114;
          }
          if (v115)
          {
            uint64_t v116 = v69 + 56 * v74;
            float v117 = *(float *)(v116 + 32);
            float v118 = fabsf(v117) + 0.00001;
            if (a4 != 1) {
              float v118 = -v118;
            }
            *(float *)uint64_t v111 = v109;
            *(_DWORD *)uint64_t result = v73;
            *(float *)(v116 + 48) = v117 + v118;
          }
        }
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::EnumerateSplitCacheOpt(uint64_t result, unsigned int *a2, unsigned int *a3, int a4, unsigned int a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v8 = a2;
  uint64_t v9 = (void *)result;
  uint64_t v97 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(result + 120);
  if (*(void *)(result + 128) != v10)
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = (void *)(*a7 + 56 * *(int *)(v10 + 4 * v11));
      void *v12 = 0;
      v12[1] = 0;
      ++v11;
      uint64_t v10 = *(void *)(result + 120);
    }
    while (v11 < (*(void *)(result + 128) - v10) >> 2);
  }
  float64x2_t v93 = 0uLL;
  if (a4 <= 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = a3;
  }
  if (a4 <= 0) {
    uint64_t v14 = a3;
  }
  else {
    uint64_t v14 = a2;
  }
  uint64_t v15 = 32;
  if (a4 <= 0) {
    uint64_t v15 = -32;
  }
  uint64_t v16 = (((char *)v13 - (char *)v14) >> 3) / v15;
  unsigned int v17 = &a2[64 * v16];
  if (v16)
  {
    uint64_t v18 = 8 * a4;
    uint64_t v89 = 256 * a4;
    do
    {
      uint64_t v19 = 0;
      uint64_t v20 = v9[6];
      uint64_t v21 = *a6;
      BOOL v22 = v8;
      do
      {
        uint64_t v23 = *v22;
        v96[v19] = *(_DWORD *)(v20 + 4 * v23);
        *(void *)&v94[8 * v19++] = *(void *)(v21 + 8 * v23);
        BOOL v22 = (unsigned int *)((char *)v22 + v18);
      }
      while (v19 != 32);
      uint64_t v24 = 0;
      uint64_t v25 = 4;
      float v26 = (float *)v95;
      do
      {
        int v27 = v96[v24];
        if ((v27 & 0x80000000) == 0) {
          uint64_t result = xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateEnumeration((uint64_t)v9, v27, a4, a5, v93.f64, a7, *(v26 - 1), *v26, *(float *)((char *)v8 + v25));
        }
        ++v24;
        v26 += 2;
        v25 += v18;
      }
      while (v24 != 32);
      uint64_t v8 = (unsigned int *)((char *)v8 + v89);
    }
    while (v8 != v17);
  }
  if (v17 != a3)
  {
    uint64_t v28 = v9[6];
    uint64_t v29 = *a6;
    float64x2_t v30 = v94;
    uint64_t v31 = v96;
    uint64_t v32 = v17;
    do
    {
      uint64_t v33 = *v32;
      *v31++ = *(_DWORD *)(v28 + 4 * v33);
      *v30++ = *(void *)(v29 + 8 * v33);
      v32 += 2 * a4;
    }
    while (v32 != a3);
    double v34 = (float *)v95;
    double v35 = v96;
    do
    {
      int v37 = *v35++;
      int v36 = v37;
      if ((v37 & 0x80000000) == 0) {
        uint64_t result = xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateEnumeration((uint64_t)v9, v36, a4, a5, v93.f64, a7, *(v34 - 1), *v34, *((float *)v17 + 1));
      }
      v34 += 2;
      v17 += 2 * a4;
    }
    while (v17 != a3);
  }
  double v38 = (int *)v9[15];
  uint64_t v39 = v9[16] - (void)v38;
  if (v39)
  {
    unint64_t v40 = v39 >> 2;
    uint64_t v41 = *a7;
    uint64_t v42 = v9[12];
    double v43 = (float *)v9[1];
    double v44 = v43[3];
    unsigned int v45 = a5 | 0x80000000;
    if (a4 != -1) {
      unsigned int v45 = a5;
    }
    if (v40 <= 1) {
      unint64_t v40 = 1;
    }
    do
    {
      int v47 = *v38++;
      int v46 = v47;
      double v48 = (float64x2_t *)(v41 + 56 * v47);
      uint64_t result = 40 * v47;
      float64x2_t v49 = vsubq_f64(*(float64x2_t *)(v42 + result), *v48);
      float64x2_t v93 = v49;
      double v50 = v48->f64[1];
      if (v50 >= v44 && v49.f64[1] >= v44)
      {
        double v52 = 0.0;
        double v53 = 0.0;
        if (v50 >= v44)
        {
          double v54 = v48->f64[0];
          float v55 = v43[7];
          float v56 = v43[5];
          if (v55 == 0.0)
          {
            if (v56 == 0.0)
            {
              double v57 = v54 * v54;
            }
            else
            {
              double v65 = v56;
              if (v54 <= v65)
              {
                double v66 = 0.0;
                if (v54 < -v65) {
                  double v66 = v54 + v65;
                }
              }
              else
              {
                double v66 = v54 - v65;
              }
              double v57 = v66 * v66;
            }
            double v53 = v57 / (v50 + v43[4]);
          }
          else
          {
            double v58 = v56;
            double v59 = v54 + v56;
            if (v54 >= -v56) {
              double v59 = 0.0;
            }
            if (v54 > v58) {
              double v59 = v54 - v58;
            }
            if (v56 == 0.0) {
              double v59 = v48->f64[0];
            }
            double v60 = v50 + v43[4];
            double v61 = -v59 / v60;
            if (v61 > v55) {
              double v61 = v55;
            }
            double v62 = (float)-v55;
            if (v61 >= v62) {
              double v62 = v61;
            }
            double v63 = v60 * 0.5 * (v62 * v62) + v54 * v62;
            double v64 = v63 + v58 * fabs(v62);
            if (v56 != 0.0) {
              double v63 = v64;
            }
            double v53 = v63 * -2.0;
          }
        }
        if (v49.f64[1] >= v44)
        {
          float v67 = v43[7];
          float v68 = v43[5];
          if (v67 == 0.0)
          {
            if (v68 == 0.0)
            {
              double v52 = vmulq_f64(v49, v49).f64[0] / (v49.f64[1] + v43[4]);
            }
            else
            {
              double v76 = v68;
              double v77 = v49.f64[0] + v76;
              if (v49.f64[0] >= -v76) {
                double v77 = 0.0;
              }
              if (v49.f64[0] > v76) {
                v49.f64[0] = v49.f64[0] - v76;
              }
              else {
                v49.f64[0] = v77;
              }
              double v52 = v49.f64[0] * v49.f64[0] / (v49.f64[1] + v43[4]);
            }
          }
          else
          {
            double v69 = v68;
            double v70 = v49.f64[0] + v68;
            if (v49.f64[0] >= -v68) {
              double v70 = 0.0;
            }
            if (v49.f64[0] > v69) {
              double v70 = v49.f64[0] - v69;
            }
            if (v68 == 0.0) {
              double v70 = v49.f64[0];
            }
            double v71 = v49.f64[1] + v43[4];
            double v72 = -v70 / v71;
            if (v72 > v67) {
              double v72 = v67;
            }
            double v73 = (float)-v67;
            if (v72 >= v73) {
              double v73 = v72;
            }
            double v74 = v71 * 0.5 * (v73 * v73) + v49.f64[0] * v73;
            double v75 = v74 + v69 * fabs(v73);
            if (v68 != 0.0) {
              double v74 = v75;
            }
            double v52 = v74 * -2.0;
          }
        }
        float v78 = v53 + v52 - *(float *)(v42 + 40 * v46 + 16);
        uint64_t v79 = v41 + 56 * v46;
        float v81 = *(float *)(v79 + 40);
        uint64_t v80 = v79 + 40;
        uint64_t result = v80 + 4;
        BOOL v82 = v81 < v78;
        BOOL v83 = v81 <= v78;
        if ((*(_DWORD *)(v80 + 4) & 0x7FFFFFFFu) <= a5) {
          BOOL v84 = v82;
        }
        else {
          BOOL v84 = v83;
        }
        if (v84)
        {
          uint64_t v85 = v41 + 56 * v46;
          float v86 = *(float *)(v85 + 32);
          float v87 = fabsf(v86) + 0.00001;
          if (a4 != 1) {
            float v87 = -v87;
          }
          *(float *)uint64_t v80 = v78;
          *(_DWORD *)uint64_t result = v45;
          *(float *)(v85 + 48) = v86 + v87;
        }
      }
      --v40;
    }
    while (v40);
  }
  return result;
}

uint64_t xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateEnumeration(uint64_t result, int a2, int a3, unsigned int a4, double *a5, uint64_t *a6, float a7, float a8, float a9)
{
  uint64_t v9 = *a6;
  uint64_t v10 = (double *)(*a6 + 56 * a2);
  double v11 = v10[1];
  if (v11 == 0.0)
  {
    double *v10 = *v10 + a7;
    v10[1] = v11 + a8;
    uint64_t v12 = (float *)(v9 + 56 * a2 + 32);
  }
  else
  {
    uint64_t v13 = v9 + 56 * a2;
    float v14 = *(float *)(v13 + 32);
    uint64_t v12 = (float *)(v13 + 32);
    float v15 = v14;
    if (vabds_f32(a9, v14) <= 0.00002)
    {
      double v18 = *v10;
    }
    else
    {
      uint64_t v16 = *(float **)(result + 8);
      double v17 = v16[3];
      double v18 = *v10;
      if (v11 >= v17)
      {
        uint64_t v19 = *(void *)(result + 96);
        uint64_t v20 = (double *)(v19 + 40 * a2);
        double v21 = *v20 - v18;
        double v22 = v20[1] - v11;
        *a5 = v21;
        a5[1] = v22;
        double v18 = *v10;
        double v11 = v10[1];
        if (v22 >= v17)
        {
          double v23 = 0.0;
          double v24 = 0.0;
          if (v11 >= v17)
          {
            float v25 = v16[7];
            float v26 = v16[5];
            if (v25 == 0.0)
            {
              if (v26 == 0.0)
              {
                double v27 = v18 * v18;
              }
              else
              {
                double v36 = v26;
                if (v18 <= v36)
                {
                  double v37 = 0.0;
                  if (v18 < -v36) {
                    double v37 = v18 + v36;
                  }
                }
                else
                {
                  double v37 = v18 - v36;
                }
                double v27 = v37 * v37;
              }
              double v24 = v27 / (v11 + v16[4]);
            }
            else
            {
              double v28 = v26;
              double v29 = v18 + v26;
              if (v18 >= -v26) {
                double v29 = 0.0;
              }
              if (v18 > v28) {
                double v29 = v18 - v28;
              }
              if (v26 == 0.0) {
                double v29 = *v10;
              }
              double v30 = v11 + v16[4];
              double v31 = -v29 / v30;
              if (v31 > v25) {
                double v31 = v25;
              }
              double v32 = (float)-v25;
              if (v31 >= v32) {
                double v32 = v31;
              }
              double v33 = v30 * 0.5 * (v32 * v32) + v18 * v32;
              double v34 = v33 + v28 * fabs(v32);
              if (v26 == 0.0) {
                double v35 = v33;
              }
              else {
                double v35 = v34;
              }
              double v24 = v35 * -2.0;
            }
          }
          if (v22 >= v17)
          {
            float v38 = v16[7];
            float v39 = v16[5];
            if (v38 == 0.0)
            {
              if (v39 == 0.0)
              {
                double v40 = v21 * v21;
              }
              else
              {
                double v48 = v39;
                if (v21 <= v48)
                {
                  double v49 = 0.0;
                  if (v21 < -v48) {
                    double v49 = v21 + v48;
                  }
                }
                else
                {
                  double v49 = v21 - v48;
                }
                double v40 = v49 * v49;
              }
              double v23 = v40 / (v22 + v16[4]);
            }
            else
            {
              double v41 = v39;
              double v42 = v21 + v39;
              if (v21 >= -v39) {
                double v42 = 0.0;
              }
              if (v21 > v41) {
                double v42 = v21 - v41;
              }
              if (v39 == 0.0) {
                double v42 = v21;
              }
              double v43 = v22 + v16[4];
              double v44 = -v42 / v43;
              if (v44 > v38) {
                double v44 = v38;
              }
              double v45 = (float)-v38;
              if (v44 >= v45) {
                double v45 = v44;
              }
              double v46 = v43 * 0.5 * (v45 * v45) + v21 * v45;
              double v47 = v46 + v41 * fabs(v45);
              if (v39 != 0.0) {
                double v46 = v47;
              }
              double v23 = v46 * -2.0;
            }
          }
          float v50 = v24 + v23 - *(float *)(v19 + 40 * a2 + 16);
          uint64_t v51 = v9 + 56 * a2;
          float v53 = *(float *)(v51 + 40);
          uint64_t v52 = v51 + 40;
          double v54 = (unsigned int *)(v52 + 4);
          BOOL v55 = v53 < v50;
          BOOL v56 = v53 <= v50;
          if ((*(_DWORD *)(v52 + 4) & 0x7FFFFFFFu) <= a4) {
            BOOL v57 = v55;
          }
          else {
            BOOL v57 = v56;
          }
          if (v57)
          {
            float v58 = (float)(v15 + a9) * 0.5;
            *(float *)uint64_t v52 = v50;
            unsigned int v59 = a4 | 0x80000000;
            if (a3 != -1) {
              unsigned int v59 = a4;
            }
            *double v54 = v59;
            *(float *)(v9 + 56 * a2 + 48) = v58;
          }
        }
      }
    }
    double *v10 = v18 + a7;
    v10[1] = v11 + a8;
  }
  float *v12 = a9;
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246EF761 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246EF761 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (v1 < *(void *)(result + 16))
  {
    uint64_t v2 = result;
    do
      uint64_t result = xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateSolution(xgboost_old::ColBatch const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}::operator()(*(turi::thread **)v2, v1++);
    while (v1 < *(void *)(v2 + 16));
  }
  return result;
}

turi::thread_pool *turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    void v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v13[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
      uint64_t result = (turi::thread_pool *)xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
  return result;
}

void sub_22431EB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D778D00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D778D00;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double *std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>((double *)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

double *std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(double *result, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = *(void *)result;
  uint64_t v6 = (uint64_t *)*((void *)result + 1);
  uint64_t v7 = (uint64_t *)(*(void *)(*(void *)result + 72) + 24 * *a2);
  uint64_t v8 = *v6;
  if (v6[1] != *v6)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = (void *)(*v7 + 56 * *(int *)(v8 + 4 * v9));
      void *v10 = 0;
      v10[1] = 0;
      ++v9;
      uint64_t v8 = **((void **)result + 1);
    }
    while (v9 < (*(void *)(*((void *)result + 1) + 8) - v8) >> 2);
  }
  double v11 = (uint64_t *)*((void *)result + 2);
  unint64_t v12 = *((unsigned int *)v11 + 2);
  unint64_t v13 = (v4 + v12 - 1) / v4;
  unint64_t v14 = v13 * v3 + v13;
  if (v14 >= v12) {
    unint64_t v14 = *((unsigned int *)v11 + 2);
  }
  unsigned int v15 = v13 * v3;
  if ((int)v13 * (int)v3 < v14)
  {
    uint64_t v16 = *v11;
    uint64_t v17 = *(void *)(v5 + 48);
    uint64_t v18 = v15;
    uint64_t v19 = (void *)*((void *)result + 3);
    do
    {
      uint64_t v20 = *(unsigned int *)(v16 + 8 * v18);
      unsigned int v21 = *(_DWORD *)(v17 + 4 * v20);
      if ((v21 & 0x80000000) == 0)
      {
        int v22 = *(_DWORD *)(v16 + 8 * v18 + 4);
        uint64_t v23 = *v7;
        __n128 result = (double *)(*v7 + 56 * v21);
        double v24 = result[1];
        if (v24 == 0.0) {
          *(_DWORD *)(v23 + 56 * v21 + 36) = v22;
        }
        v25.f64[0] = *result;
        v25.f64[1] = v24;
        *(float64x2_t *)__n128 result = vaddq_f64(v25, vcvtq_f64_f32(*(float32x2_t *)(*v19 + 8 * v20)));
        *(_DWORD *)(v23 + 56 * v21 + 32) = v22;
      }
      ++v18;
    }
    while (v18 != v14);
  }
  return result;
}

uint64_t xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(int *)(**(void **)result + 4 * a2);
  uint64_t v4 = *(unsigned int *)(v2 + 16);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(v2 + 72);
    double v7 = 0.0;
    uint64_t v8 = 56 * v3;
    double v9 = 0.0;
    do
    {
      uint64_t v10 = *(void *)(v6 + v5);
      double v11 = (double *)(v10 + 56 * (int)v3);
      double v12 = *v11;
      double v13 = v11[1];
      double *v11 = v9;
      v11[1] = v7;
      if (v5)
      {
        uint64_t v14 = *(void *)(v6 + v5 - 24) + v8;
        uint64_t v15 = v10 + v8;
        int v16 = *(_DWORD *)(v14 + 32);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v15 + 36);
        *(_DWORD *)(v15 + 36) = v16;
      }
      double v9 = v9 + v12;
      double v7 = v7 + v13;
      v5 += 24;
    }
    while (24 * v4 != v5);
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(v2 + 72);
    while (1)
    {
      uint64_t v19 = *(void *)(v18 + v17);
      uint64_t v20 = (double *)(v19 + 56 * (int)v3);
      void v20[2] = v9;
      void v20[3] = v7;
      if (!v17) {
        break;
      }
      float v21 = *(float *)(*(void *)(v18 + v17 - 24) + v8 + 32);
      float v22 = *(float *)(v19 + v8 + 36);
      if (vabds_f32(v21, v22) > 0.00002)
      {
        float v23 = (float)(v21 - v22) * 0.5;
        if (**(unsigned char **)(result + 16))
        {
          uint64_t v24 = *(void *)(v2 + 96);
          float64x2_t v25 = (double *)(v24 + 40 * (int)v3);
          double v26 = v20[1];
          double v27 = v25[1] - v26;
          double v28 = *(float **)(v2 + 8);
          double v29 = v28[3];
          if (v27 >= v29 && v26 >= v29)
          {
            double v31 = *v20;
            double v32 = 0.0;
            double v33 = 0.0;
            if (v26 >= v29)
            {
              float v34 = v28[7];
              float v35 = v28[5];
              if (v34 == 0.0)
              {
                if (v35 == 0.0)
                {
                  double v36 = v31 * v31;
                }
                else
                {
                  double v89 = v35;
                  if (v31 <= v89)
                  {
                    double v90 = 0.0;
                    if (v31 < -v89) {
                      double v90 = v31 + v89;
                    }
                  }
                  else
                  {
                    double v90 = v31 - v89;
                  }
                  double v36 = v90 * v90;
                }
                double v33 = v36 / (v26 + v28[4]);
              }
              else
              {
                double v60 = v35;
                double v61 = v31 + v35;
                if (v31 >= -v35) {
                  double v61 = 0.0;
                }
                if (v31 > v60) {
                  double v61 = v31 - v60;
                }
                if (v35 == 0.0) {
                  double v61 = *v20;
                }
                double v62 = v26 + v28[4];
                double v63 = -v61 / v62;
                if (v63 > v34) {
                  double v63 = v34;
                }
                double v64 = (float)-v34;
                if (v63 >= v64) {
                  double v64 = v63;
                }
                double v65 = v62 * 0.5 * (v64 * v64) + v31 * v64;
                double v66 = v65 + v60 * fabs(v64);
                if (v35 == 0.0) {
                  double v67 = v65;
                }
                else {
                  double v67 = v66;
                }
                double v33 = v67 * -2.0;
              }
            }
            if (v27 >= v29)
            {
              double v91 = *v25 - v31;
              float v92 = v28[7];
              float v93 = v28[5];
              if (v92 == 0.0)
              {
                if (v93 == 0.0)
                {
                  double v94 = v91 * v91;
                }
                else
                {
                  double v102 = v93;
                  if (v91 <= v102)
                  {
                    double v103 = 0.0;
                    if (v91 < -v102) {
                      double v103 = v91 + v102;
                    }
                  }
                  else
                  {
                    double v103 = v91 - v102;
                  }
                  double v94 = v103 * v103;
                }
                double v32 = v94 / (v27 + v28[4]);
              }
              else
              {
                double v95 = v93;
                double v96 = v91 + v93;
                if (v91 >= -v93) {
                  double v96 = 0.0;
                }
                if (v91 > v95) {
                  double v96 = v91 - v95;
                }
                if (v93 == 0.0) {
                  double v96 = v91;
                }
                double v97 = v27 + v28[4];
                double v98 = -v96 / v97;
                if (v98 > v92) {
                  double v98 = v92;
                }
                double v99 = (float)-v92;
                if (v98 >= v99) {
                  double v99 = v98;
                }
                double v100 = v97 * 0.5 * (v99 * v99) + v91 * v99;
                double v101 = v100 + v95 * fabs(v99);
                if (v93 != 0.0) {
                  double v100 = v101;
                }
                double v32 = v100 * -2.0;
              }
            }
            float v104 = v33 + v32 - *(float *)(v24 + 40 * (int)v3 + 16);
            uint64_t v105 = v19 + 56 * (int)v3;
            float v107 = *(float *)(v105 + 40);
            uint64_t v106 = v105 + 40;
            unsigned int v108 = **(_DWORD **)(result + 24);
            BOOL v109 = v107 < v104;
            BOOL v110 = v107 <= v104;
            if ((*(_DWORD *)(v106 + 4) & 0x7FFFFFFFu) <= v108) {
              BOOL v111 = v109;
            }
            else {
              BOOL v111 = v110;
            }
            if (v111)
            {
              *(float *)uint64_t v106 = v104;
              *(_DWORD *)(v106 + 4) = v108;
              *(float *)(v19 + 56 * (int)v3 + 48) = v23;
            }
          }
        }
        goto LABEL_19;
      }
LABEL_90:
      v17 += 24;
      if (24 * v4 == v17) {
        goto LABEL_127;
      }
    }
    float v23 = *(float *)(v19 + 56 * (int)v3 + 36) + -0.00001;
LABEL_19:
    if (**(unsigned char **)(result + 32))
    {
      double v37 = v7 - v20[1];
      uint64_t v38 = *(void *)(v2 + 96);
      float v39 = (double *)(v38 + 40 * (int)v3);
      double v40 = v39[1] - v37;
      double v41 = *(float **)(v2 + 8);
      double v42 = v41[3];
      if (v40 >= v42 && v37 >= v42)
      {
        double v44 = v9 - *v20;
        double v45 = 0.0;
        double v46 = 0.0;
        if (v37 >= v42)
        {
          float v47 = v41[7];
          float v48 = v41[5];
          if (v47 == 0.0)
          {
            if (v48 == 0.0)
            {
              double v49 = v44 * v44;
            }
            else
            {
              double v58 = v48;
              if (v44 <= v58)
              {
                double v59 = 0.0;
                if (v44 < -v58) {
                  double v59 = v44 + v58;
                }
              }
              else
              {
                double v59 = v44 - v58;
              }
              double v49 = v59 * v59;
            }
            double v46 = v49 / (v37 + v41[4]);
          }
          else
          {
            double v50 = v48;
            double v51 = v44 + v48;
            if (v44 >= -v48) {
              double v51 = 0.0;
            }
            if (v44 > v50) {
              double v51 = v44 - v50;
            }
            if (v48 == 0.0) {
              double v51 = v9 - *v20;
            }
            double v52 = v37 + v41[4];
            double v53 = -v51 / v52;
            if (v53 > v47) {
              double v53 = v47;
            }
            double v54 = (float)-v47;
            if (v53 >= v54) {
              double v54 = v53;
            }
            double v55 = v52 * 0.5 * (v54 * v54) + v44 * v54;
            double v56 = v55 + v50 * fabs(v54);
            if (v48 == 0.0) {
              double v57 = v55;
            }
            else {
              double v57 = v56;
            }
            double v46 = v57 * -2.0;
          }
        }
        if (v40 >= v42)
        {
          double v68 = *v39 - v44;
          float v69 = v41[7];
          float v70 = v41[5];
          if (v69 == 0.0)
          {
            if (v70 == 0.0)
            {
              double v71 = v68 * v68;
            }
            else
            {
              double v79 = v70;
              if (v68 <= v79)
              {
                double v80 = 0.0;
                if (v68 < -v79) {
                  double v80 = v68 + v79;
                }
              }
              else
              {
                double v80 = v68 - v79;
              }
              double v71 = v80 * v80;
            }
            double v45 = v71 / (v40 + v41[4]);
          }
          else
          {
            double v72 = v70;
            double v73 = v68 + v70;
            if (v68 >= -v70) {
              double v73 = 0.0;
            }
            if (v68 > v72) {
              double v73 = v68 - v72;
            }
            if (v70 == 0.0) {
              double v73 = v68;
            }
            double v74 = v40 + v41[4];
            double v75 = -v73 / v74;
            if (v75 > v69) {
              double v75 = v69;
            }
            double v76 = (float)-v69;
            if (v75 >= v76) {
              double v76 = v75;
            }
            double v77 = v74 * 0.5 * (v76 * v76) + v68 * v76;
            double v78 = v77 + v72 * fabs(v76);
            if (v70 != 0.0) {
              double v77 = v78;
            }
            double v45 = v77 * -2.0;
          }
        }
        float v81 = v46 + v45 - *(float *)(v38 + 40 * (int)v3 + 16);
        uint64_t v82 = v19 + 56 * (int)v3;
        float v84 = *(float *)(v82 + 40);
        uint64_t v83 = v82 + 40;
        unsigned int v85 = **(_DWORD **)(result + 24);
        BOOL v86 = v84 < v81;
        BOOL v87 = v84 <= v81;
        if ((*(_DWORD *)(v83 + 4) & 0x7FFFFFFFu) <= v85) {
          BOOL v88 = v86;
        }
        else {
          BOOL v88 = v87;
        }
        if (v88)
        {
          *(float *)uint64_t v83 = v81;
          *(_DWORD *)(v83 + 4) = v85 | 0x80000000;
          *(float *)(v19 + 56 * (int)v3 + 48) = v23;
        }
      }
    }
    goto LABEL_90;
  }
  double v7 = 0.0;
  double v9 = 0.0;
LABEL_127:
  if (**(unsigned char **)(result + 32))
  {
    uint64_t v112 = *(void *)(v2 + 96);
    BOOL v113 = (double *)(v112 + 40 * (int)v3);
    double v114 = v113[1] - v7;
    BOOL v115 = *(float **)(v2 + 8);
    double v116 = v115[3];
    if (v114 >= v116 && v7 >= v116)
    {
      uint64_t v118 = *(void *)(v2 + 72);
      uint64_t v119 = 24 * ((int)v4 - 1);
      double v120 = 0.0;
      double v121 = 0.0;
      if (v7 >= v116)
      {
        float v122 = v115[7];
        float v123 = v115[5];
        if (v122 == 0.0)
        {
          if (v123 == 0.0)
          {
            double v124 = v9 * v9;
          }
          else
          {
            double v132 = v123;
            if (v9 <= v132)
            {
              double v133 = 0.0;
              if (v9 < -v132) {
                double v133 = v9 + v132;
              }
            }
            else
            {
              double v133 = v9 - v132;
            }
            double v124 = v133 * v133;
          }
          double v121 = v124 / (v7 + v115[4]);
        }
        else
        {
          double v125 = v123;
          double v126 = v9;
          if (v123 != 0.0)
          {
            double v126 = v9 + v125;
            if (v9 >= -v125) {
              double v126 = 0.0;
            }
            if (v9 > v125) {
              double v126 = v9 - v125;
            }
          }
          double v127 = v7 + v115[4];
          double v128 = -v126 / v127;
          if (v128 > v122) {
            double v128 = v122;
          }
          double v129 = (float)-v122;
          if (v128 >= v129) {
            double v129 = v128;
          }
          double v130 = v127 * 0.5 * (v129 * v129) + v9 * v129;
          double v131 = v130 + v125 * fabs(v129);
          if (v123 != 0.0) {
            double v130 = v131;
          }
          double v121 = v130 * -2.0;
        }
      }
      uint64_t v134 = *(void *)(v118 + v119);
      if (v114 >= v116)
      {
        double v135 = *v113 - v9;
        float v136 = v115[7];
        float v137 = v115[5];
        if (v136 == 0.0)
        {
          if (v137 == 0.0)
          {
            double v138 = v135 * v135;
          }
          else
          {
            double v146 = v137;
            if (v135 <= v146)
            {
              double v147 = 0.0;
              if (v135 < -v146) {
                double v147 = v135 + v146;
              }
            }
            else
            {
              double v147 = v135 - v146;
            }
            double v138 = v147 * v147;
          }
          double v120 = v138 / (v114 + v115[4]);
        }
        else
        {
          double v139 = v137;
          double v140 = v135 + v137;
          if (v135 >= -v137) {
            double v140 = 0.0;
          }
          if (v135 > v139) {
            double v140 = v135 - v139;
          }
          if (v137 == 0.0) {
            double v140 = v135;
          }
          double v141 = v114 + v115[4];
          double v142 = -v140 / v141;
          if (v142 > v136) {
            double v142 = v136;
          }
          double v143 = (float)-v136;
          if (v142 >= v143) {
            double v143 = v142;
          }
          double v144 = v141 * 0.5 * (v143 * v143) + v135 * v143;
          double v145 = v144 + v139 * fabs(v143);
          if (v137 != 0.0) {
            double v144 = v145;
          }
          double v120 = v144 * -2.0;
        }
      }
      float v148 = v121 + v120 - *(float *)(v112 + 40 * (int)v3 + 16);
      uint64_t v149 = v134 + 56 * (int)v3;
      float v151 = *(float *)(v149 + 40);
      uint64_t v150 = v149 + 40;
      unsigned int v152 = **(_DWORD **)(result + 24);
      BOOL v153 = v151 < v148;
      BOOL v154 = v151 <= v148;
      if ((*(_DWORD *)(v150 + 4) & 0x7FFFFFFFu) <= v152) {
        BOOL v155 = v153;
      }
      else {
        BOOL v155 = v154;
      }
      if (v155)
      {
        uint64_t v156 = v134 + 56 * (int)v3;
        float v157 = *(float *)(v156 + 32) + 0.00001;
        *(float *)uint64_t v150 = v148;
        *(_DWORD *)(v150 + 4) = v152 | 0x80000000;
        *(float *)(v156 + 48) = v157;
      }
    }
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246EF9EDLL & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)(0x80000002246EF9EDLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (v1 < *(void *)(result + 16))
  {
    uint64_t v2 = (uint64_t *)result;
    do
      __n128 result = xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26D778DA0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D778DA0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}::operator()((void *)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2},std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void *xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ParallelFindSplit(xgboost_old::SparseBatch::Inst const&,unsigned int,xgboost_old::IFMatrix const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::BoosterInfo const&)::{lambda(unsigned long,unsigned long)#2}::operator()(void *result, uint64_t a2, unint64_t a3)
{
  long long v3 = (uint64_t *)result[1];
  uint64_t v4 = *((unsigned int *)v3 + 2);
  unint64_t v5 = (a3 + v4 - 1) / a3;
  unsigned int v6 = v5 + v5 * a2;
  if (v4 >= v6) {
    uint64_t v4 = v6;
  }
  else {
    uint64_t v4 = v4;
  }
  LODWORD(v7) = v5 * a2;
  if (v4 > (int)v5 * (int)a2)
  {
    uint64_t v8 = *result;
    double v9 = (uint64_t *)(*(void *)(*result + 72) + 24 * a2);
    uint64_t v10 = *v3;
    uint64_t v11 = *(void *)(*result + 48);
    uint64_t v7 = v7;
    do
    {
      uint64_t v12 = *(unsigned int *)(v10 + 8 * v7);
      unsigned int v13 = *(_DWORD *)(v11 + 4 * v12);
      if ((v13 & 0x80000000) == 0)
      {
        float v14 = *(float *)(v10 + 8 * v7 + 4);
        uint64_t v15 = *v9;
        int v16 = (float64x2_t *)(*v9 + 56 * v13);
        double v17 = v16->f64[1];
        if (v17 == 0.0)
        {
          *int v16 = vaddq_f64(*v16, vcvtq_f64_f32(*(float32x2_t *)(*(void *)result[2] + 8 * v12)));
          uint64_t v18 = (float *)(v15 + 56 * v13 + 36);
        }
        else
        {
          uint64_t v19 = v15 + 56 * v13;
          float v20 = *(float *)(v19 + 36);
          uint64_t v18 = (float *)(v19 + 36);
          float v21 = v20;
          if (vabds_f32(v14, v20) <= 0.00002)
          {
            v22.f64[0] = v16->f64[0];
          }
          else
          {
            v22.f64[0] = v16->f64[0];
            if (*(unsigned char *)result[4])
            {
              uint64_t v23 = *(void *)(v8 + 96);
              uint64_t v24 = (double *)(v23 + 40 * v13);
              double v25 = v24[1] - v17;
              double v26 = *(float **)(v8 + 8);
              double v27 = v26[3];
              if (v25 >= v27 && v17 >= v27)
              {
                double v29 = 0.0;
                double v30 = 0.0;
                if (v17 >= v27)
                {
                  float v31 = v26[7];
                  float v32 = v26[5];
                  if (v31 == 0.0)
                  {
                    if (v32 == 0.0)
                    {
                      double v33 = v22.f64[0] * v22.f64[0];
                    }
                    else
                    {
                      double v42 = v32;
                      if (v22.f64[0] <= v42)
                      {
                        double v43 = 0.0;
                        if (v22.f64[0] < -v42) {
                          double v43 = v22.f64[0] + v42;
                        }
                      }
                      else
                      {
                        double v43 = v22.f64[0] - v42;
                      }
                      double v33 = v43 * v43;
                    }
                    double v30 = v33 / (v17 + v26[4]);
                  }
                  else
                  {
                    double v34 = v32;
                    double v35 = v22.f64[0] + v32;
                    if (v22.f64[0] >= -v32) {
                      double v35 = 0.0;
                    }
                    if (v22.f64[0] > v34) {
                      double v35 = v22.f64[0] - v34;
                    }
                    if (v32 == 0.0) {
                      double v35 = v16->f64[0];
                    }
                    double v36 = v17 + v26[4];
                    double v37 = -v35 / v36;
                    if (v37 > v31) {
                      double v37 = v31;
                    }
                    double v38 = (float)-v31;
                    if (v37 >= v38) {
                      double v38 = v37;
                    }
                    double v39 = v36 * 0.5 * (v38 * v38) + v22.f64[0] * v38;
                    double v40 = v39 + v34 * fabs(v38);
                    if (v32 == 0.0) {
                      double v41 = v39;
                    }
                    else {
                      double v41 = v40;
                    }
                    double v30 = v41 * -2.0;
                  }
                }
                if (v25 >= v27)
                {
                  double v44 = *v24 - v22.f64[0];
                  float v45 = v26[7];
                  float v46 = v26[5];
                  if (v45 == 0.0)
                  {
                    if (v46 == 0.0)
                    {
                      double v47 = v44 * v44;
                    }
                    else
                    {
                      double v55 = v46;
                      if (v44 <= v55)
                      {
                        double v56 = 0.0;
                        if (v44 < -v55) {
                          double v56 = v44 + v55;
                        }
                      }
                      else
                      {
                        double v56 = v44 - v55;
                      }
                      double v47 = v56 * v56;
                    }
                    double v29 = v47 / (v25 + v26[4]);
                  }
                  else
                  {
                    double v48 = v46;
                    double v49 = v44 + v46;
                    if (v44 >= -v46) {
                      double v49 = 0.0;
                    }
                    if (v44 > v48) {
                      double v49 = v44 - v48;
                    }
                    if (v46 == 0.0) {
                      double v49 = *v24 - v22.f64[0];
                    }
                    double v50 = v25 + v26[4];
                    double v51 = -v49 / v50;
                    if (v51 > v45) {
                      double v51 = v45;
                    }
                    double v52 = (float)-v45;
                    if (v51 >= v52) {
                      double v52 = v51;
                    }
                    double v53 = v50 * 0.5 * (v52 * v52) + v44 * v52;
                    double v54 = v53 + v48 * fabs(v52);
                    if (v46 != 0.0) {
                      double v53 = v54;
                    }
                    double v29 = v53 * -2.0;
                  }
                }
                float v57 = v30 + v29 - *(float *)(v23 + 40 * v13 + 16);
                uint64_t v58 = v15 + 56 * v13;
                float v60 = *(float *)(v58 + 40);
                uint64_t v59 = v58 + 40;
                unsigned int v61 = *(_DWORD *)result[5];
                BOOL v62 = v60 < v57;
                BOOL v63 = v60 <= v57;
                if ((*(_DWORD *)(v59 + 4) & 0x7FFFFFFFu) <= v61) {
                  BOOL v64 = v62;
                }
                else {
                  BOOL v64 = v63;
                }
                if (v64)
                {
                  *(float *)uint64_t v59 = v57;
                  *(_DWORD *)(v59 + 4) = v61;
                  *(float *)(v15 + 56 * v13 + 48) = (float)(v14 + v21) * 0.5;
                }
              }
            }
            if (*(unsigned char *)result[6])
            {
              uint64_t v65 = v15 + 56 * v13;
              double v66 = *(double *)(v65 + 24) - v17;
              uint64_t v67 = *(void *)(v8 + 96);
              double v68 = (double *)(v67 + 40 * v13);
              double v69 = v68[1] - v66;
              float v70 = *(float **)(v8 + 8);
              double v71 = v70[3];
              if (v69 >= v71 && v66 >= v71)
              {
                double v73 = *(double *)(v65 + 16) - v22.f64[0];
                double v74 = 0.0;
                double v75 = 0.0;
                if (v66 >= v71)
                {
                  float v76 = v70[7];
                  float v77 = v70[5];
                  if (v76 == 0.0)
                  {
                    if (v77 == 0.0)
                    {
                      double v78 = v73 * v73;
                    }
                    else
                    {
                      double v87 = v77;
                      if (v73 <= v87)
                      {
                        double v88 = 0.0;
                        if (v73 < -v87) {
                          double v88 = v73 + v87;
                        }
                      }
                      else
                      {
                        double v88 = v73 - v87;
                      }
                      double v78 = v88 * v88;
                    }
                    double v75 = v78 / (v66 + v70[4]);
                  }
                  else
                  {
                    double v79 = v77;
                    double v80 = v73 + v77;
                    if (v73 >= -v77) {
                      double v80 = 0.0;
                    }
                    if (v73 > v79) {
                      double v80 = v73 - v79;
                    }
                    if (v77 == 0.0) {
                      double v80 = *(double *)(v65 + 16) - v22.f64[0];
                    }
                    double v81 = v66 + v70[4];
                    double v82 = -v80 / v81;
                    if (v82 > v76) {
                      double v82 = v76;
                    }
                    double v83 = (float)-v76;
                    if (v82 >= v83) {
                      double v83 = v82;
                    }
                    double v84 = v81 * 0.5 * (v83 * v83) + v73 * v83;
                    double v85 = v84 + v79 * fabs(v83);
                    if (v77 == 0.0) {
                      double v86 = v84;
                    }
                    else {
                      double v86 = v85;
                    }
                    double v75 = v86 * -2.0;
                  }
                }
                if (v69 >= v71)
                {
                  double v89 = *v68 - v73;
                  float v90 = v70[7];
                  float v91 = v70[5];
                  if (v90 == 0.0)
                  {
                    if (v91 == 0.0)
                    {
                      double v92 = v89 * v89;
                    }
                    else
                    {
                      double v100 = v91;
                      if (v89 <= v100)
                      {
                        double v101 = 0.0;
                        if (v89 < -v100) {
                          double v101 = v89 + v100;
                        }
                      }
                      else
                      {
                        double v101 = v89 - v100;
                      }
                      double v92 = v101 * v101;
                    }
                    double v74 = v92 / (v69 + v70[4]);
                  }
                  else
                  {
                    double v93 = v91;
                    double v94 = v89 + v91;
                    if (v89 >= -v91) {
                      double v94 = 0.0;
                    }
                    if (v89 > v93) {
                      double v94 = v89 - v93;
                    }
                    if (v91 == 0.0) {
                      double v94 = v89;
                    }
                    double v95 = v69 + v70[4];
                    double v96 = -v94 / v95;
                    if (v96 > v90) {
                      double v96 = v90;
                    }
                    double v97 = (float)-v90;
                    if (v96 >= v97) {
                      double v97 = v96;
                    }
                    double v98 = v95 * 0.5 * (v97 * v97) + v89 * v97;
                    double v99 = v98 + v93 * fabs(v97);
                    if (v91 != 0.0) {
                      double v98 = v99;
                    }
                    double v74 = v98 * -2.0;
                  }
                }
                float v102 = v75 + v74 - *(float *)(v67 + 40 * v13 + 16);
                uint64_t v103 = v15 + 56 * v13;
                float v105 = *(float *)(v103 + 40);
                uint64_t v104 = v103 + 40;
                unsigned int v106 = *(_DWORD *)result[5];
                BOOL v107 = v105 < v102;
                BOOL v108 = v105 <= v102;
                if ((*(_DWORD *)(v104 + 4) & 0x7FFFFFFFu) <= v106) {
                  BOOL v109 = v107;
                }
                else {
                  BOOL v109 = v108;
                }
                if (v109)
                {
                  *(float *)uint64_t v104 = v102;
                  *(_DWORD *)(v104 + 4) = v106 | 0x80000000;
                  *(float *)(v15 + 56 * v13 + 48) = (float)(v14 + v21) * 0.5;
                }
              }
            }
          }
          v22.f64[1] = v17;
          *int v16 = vaddq_f64(v22, vcvtq_f64_f32(*(float32x2_t *)(*(void *)result[2] + 8 * v12)));
        }
        *uint64_t v18 = v14;
      }
      ++v7;
    }
    while (v7 != v4);
  }
  return result;
}

turi::thread_pool *turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  __n128 result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v19 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v23, v19);
    double v20 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    unint64_t v21 = (unint64_t)((double)(unint64_t)a1 + v20 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v21 = a2;
    }
    unint64_t v22[2] = (unint64_t)((double)(unint64_t)a1 + v20 * (double)0);
    uint64_t v22[3] = v21;
    v22[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v22[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v23, v22);
  }
  unint64_t v10 = a2 - (void)a1;
  if (a2 > (unint64_t)a1)
  {
    uint64_t v11 = *(void *)(*(void *)(a3 + 8) + 48);
    uint64_t v12 = *(_DWORD **)(a3 + 24);
    uint64_t v13 = **(void **)(a3 + 16);
    float v14 = (float *)(**(void **)a3 + 8 * (void)a1 + 4);
    do
    {
      uint64_t v15 = *((unsigned int *)v14 - 1);
      int v16 = *(_DWORD *)(v11 + 4 * v15);
      int v17 = v16 ^ (v16 >> 31);
      int v18 = *(_DWORD *)(v13 + 20 * v17 + 4);
      if (v18 != -1)
      {
        __n128 result = (turi::thread_pool *)(*(_DWORD *)(v13 + 20 * v17 + 12) & 0x7FFFFFFF);
        if (result == *v12)
        {
          __n128 result = (turi::thread_pool *)(v13 + 20 * v17);
          if (*v14 >= *((float *)result + 4)) {
            int v18 = *(_DWORD *)(v13 + 20 * v17 + 8);
          }
          *(_DWORD *)(v11 + 4 * v15) = v18 ^ (v16 >> 31);
        }
      }
      v14 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_224320030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

int *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::__equal_to &>(int *a1, int *a2)
{
  __n128 result = a2;
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 1;
    do
    {
      if (v4 == a2) {
        return a2;
      }
      int v5 = *(v4 - 1);
      int v6 = *v4++;
    }
    while (v5 != v6);
    uint64_t v7 = v4 - 2;
    while (v4 != a2)
    {
      int v8 = v5;
      int v5 = *v4;
      if (v8 != *v4)
      {
        v7[1] = v5;
        ++v7;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246EFC88 & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)(0x80000002246EFC88 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

float *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(float *result)
{
  unint64_t v2 = *((void *)result + 1);
  unint64_t v1 = *((void *)result + 2);
  BOOL v3 = v1 > v2;
  unint64_t v4 = v1 - v2;
  if (v3)
  {
    uint64_t v5 = *(void *)result;
    uint64_t v6 = *(void *)(*(void *)(*(void *)result + 8) + 48);
    uint64_t v7 = **(void **)(*(void *)result + 16);
    int v8 = (float *)(***(void ***)result + 8 * v2 + 4);
    do
    {
      uint64_t v9 = *((unsigned int *)v8 - 1);
      int v10 = *(_DWORD *)(v6 + 4 * v9);
      int v11 = v10 ^ (v10 >> 31);
      int v12 = *(_DWORD *)(v7 + 20 * v11 + 4);
      if (v12 != -1)
      {
        __n128 result = (float *)(*(_DWORD *)(v7 + 20 * v11 + 12) & 0x7FFFFFFF);
        if (result == **(_DWORD **)(v5 + 24))
        {
          __n128 result = (float *)(v7 + 20 * v11);
          if (*v8 >= result[4]) {
            int v12 = *(_DWORD *)(v7 + 20 * v11 + 8);
          }
          *(_DWORD *)(v6 + 4 * v9) = v12 ^ (v10 >> 31);
        }
      }
      v8 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

void xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitData(uint64_t a1, uint64_t *a2, const char *a3, uint64_t *a4, uint64_t a5)
{
  xgboost_old::utils::Assert(*(_DWORD *)(a5 + 100) == *(_DWORD *)(a5 + 96), "ColMaker: can only grow new tree", a3);
  int v10 = (uint64_t *)(*(uint64_t (**)(const char *))(*(void *)a3 + 64))(a3);
  int v11 = (uint64_t *)(a1 + 48);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 48), (a2[1] - *a2) >> 3);
  uint64_t v14 = *v10;
  uint64_t v13 = v10[1];
  if (a4[1] == *a4)
  {
    if (v13 != v14)
    {
      uint64_t v18 = 0;
      unint64_t v19 = (v13 - v14) >> 2;
      uint64_t v20 = *v11;
      if (v19 <= 1) {
        unint64_t v19 = 1;
      }
      do
        *(_DWORD *)(v20 + 4 * *(unsigned int *)(v14 + 4 * v18++)) = 0;
      while (v19 != v18);
      goto LABEL_10;
    }
LABEL_17:
    char v25 = 1;
    goto LABEL_20;
  }
  if (v13 == v14) {
    goto LABEL_17;
  }
  unint64_t v15 = 0;
  do
  {
    uint64_t v16 = *(unsigned int *)(v14 + 4 * v15);
    uint64_t v17 = *a4;
    *(_DWORD *)(*v11 + 4 * v16) = *(_DWORD *)(*a4 + 4 * v16);
    xgboost_old::utils::Assert(*(_DWORD *)(v17 + 4 * v16) < *(_DWORD *)(a5 + 96), "root index exceed setting", v12);
    ++v15;
    uint64_t v14 = *v10;
    uint64_t v13 = v10[1];
  }
  while (v15 < (v13 - *v10) >> 2);
LABEL_10:
  if (v13 == v14)
  {
    char v25 = 1;
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v22 = (v13 - v14) >> 2;
    uint64_t v23 = *a2;
    if (v22 <= 1) {
      unint64_t v22 = 1;
    }
    do
    {
      uint64_t v24 = *(unsigned int *)(v14 + 4 * v21);
      if (*(float *)(v23 + 8 * v24 + 4) < 0.0) {
        *(_DWORD *)(*v11 + 4 * v24) = ~*(_DWORD *)(*v11 + 4 * v24);
      }
      ++v21;
    }
    while (v22 != v21);
    char v25 = 0;
  }
  uint64_t v13 = v14;
LABEL_20:
  if (*(float *)(*(void *)(a1 + 8) + 32) < 1.0 && (v25 & 1) == 0)
  {
    unint64_t v26 = 0;
    do
    {
      uint64_t v27 = *(unsigned int *)(v13 + 4 * v26);
      if (*(float *)(*a2 + 8 * v27 + 4) >= 0.0)
      {
        double v28 = *(float *)(*(void *)(a1 + 8) + 32);
        if ((double)rand() * 4.65661287e-10 >= v28) {
          *(_DWORD *)(*v11 + 4 * v27) = ~*(_DWORD *)(*v11 + 4 * v27);
        }
      }
      ++v26;
      uint64_t v13 = *v10;
    }
    while (v26 < (v10[1] - *v10) >> 2);
  }
  uint64_t v29 = (*(unsigned int (**)(const char *))(*(void *)a3 + 40))(a3);
  if (v29)
  {
    uint64_t v30 = 0;
    float v31 = (void **)(a1 + 24);
    do
    {
      if ((*(uint64_t (**)(const char *, uint64_t))(*(void *)a3 + 48))(a3, v30))
      {
        double v33 = *(char **)(a1 + 32);
        unint64_t v32 = *(void *)(a1 + 40);
        if ((unint64_t)v33 >= v32)
        {
          double v35 = (char *)*v31;
          uint64_t v36 = (v33 - (unsigned char *)*v31) >> 2;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v38 = v32 - (void)v35;
          if (v38 >> 1 > v37) {
            unint64_t v37 = v38 >> 1;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            double v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 40, v39);
            double v35 = *(char **)(a1 + 24);
            double v33 = *(char **)(a1 + 32);
          }
          else
          {
            double v40 = 0;
          }
          double v41 = &v40[4 * v36];
          *(_DWORD *)double v41 = v30;
          double v34 = v41 + 4;
          while (v33 != v35)
          {
            int v42 = *((_DWORD *)v33 - 1);
            v33 -= 4;
            *((_DWORD *)v41 - 1) = v42;
            v41 -= 4;
          }
          *(void *)(a1 + 24) = v41;
          *(void *)(a1 + 32) = v34;
          *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = &v40[4 * v39];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *(_DWORD *)double v33 = v30;
          double v34 = v33 + 4;
        }
        *(void *)(a1 + 32) = v34;
      }
      ++v30;
    }
    while (v30 != v29);
  }
  uint64_t v44 = *(void *)(a1 + 24);
  uint64_t v43 = *(void *)(a1 + 32);
  unint64_t v45 = (unint64_t)(v43 - v44) >> 2;
  uint64_t v46 = (v45 - 1);
  uint64_t v47 = v43 - v44;
  unsigned int v48 = (float)(*(float *)(*(void *)(a1 + 8) + 40) * (float)(unint64_t)(v47 >> 2));
  if (v47) {
    BOOL v49 = v45 == 1;
  }
  else {
    BOOL v49 = 1;
  }
  if (!v49)
  {
    do
    {
      unsigned int v50 = vcvtmd_u64_f64((double)rand() * 4.65661287e-10 * (double)v45);
      int v51 = *(_DWORD *)(v44 + 4 * v46);
      *(_DWORD *)(v44 + 4 * v46) = *(_DWORD *)(v44 + 4 * v50);
      *(_DWORD *)(v44 + 4 * v5CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v51;
      LODWORD(v45) = v45 - 1;
      --v46;
    }
    while (v46);
  }
  if (v48 <= 1) {
    std::vector<unsigned int>::size_type v52 = 1;
  }
  else {
    std::vector<unsigned int>::size_type v52 = v48;
  }
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 24), v52);
  *(_DWORD *)(a1 + 16) = turi::thread::cpu_count(v53);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 72));
  unint64_t v54 = *(int *)(a1 + 16);
  std::vector<unsigned int> __p = 0;
  double v72 = 0;
  uint64_t v73 = 0;
  std::vector<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::resize((uint64_t *)(a1 + 72), v54, (uint64_t)&__p);
  if (__p)
  {
    double v72 = __p;
    operator delete(__p);
  }
  uint64_t v55 = *(void *)(a1 + 72);
  if (*(void *)(a1 + 80) != v55)
  {
    uint64_t v56 = 0;
    unint64_t v57 = 0;
    do
    {
      *(void *)(v55 + v56 + 8) = *(void *)(v55 + v56);
      std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::reserve((void **)(v55 + v56), 0x100uLL);
      ++v57;
      uint64_t v55 = *(void *)(a1 + 72);
      v56 += 24;
    }
    while (v57 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v55) >> 3));
  }
  std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry>>::reserve((void **)(a1 + 96), 0x100uLL);
  uint64_t v58 = (void **)(a1 + 120);
  std::vector<int>::reserve((std::vector<unsigned int> *)(a1 + 120), 0x100uLL);
  uint64_t v59 = *(char **)(a1 + 120);
  *(void *)(a1 + 128) = v59;
  if (*(int *)(a5 + 96) >= 1)
  {
    int v60 = 0;
    unsigned int v61 = (void *)(a1 + 136);
    do
    {
      if ((unint64_t)v59 >= *v61)
      {
        BOOL v63 = (char *)*v58;
        uint64_t v64 = (v59 - (unsigned char *)*v58) >> 2;
        unint64_t v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v66 = *v61 - (void)v63;
        if (v66 >> 1 > v65) {
          unint64_t v65 = v66 >> 1;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v67 = v65;
        }
        if (v67)
        {
          double v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 136, v67);
          BOOL v63 = *(char **)(a1 + 120);
          uint64_t v59 = *(char **)(a1 + 128);
        }
        else
        {
          double v68 = 0;
        }
        double v69 = &v68[4 * v64];
        *(_DWORD *)double v69 = v60;
        BOOL v62 = v69 + 4;
        while (v59 != v63)
        {
          int v70 = *((_DWORD *)v59 - 1);
          v59 -= 4;
          *((_DWORD *)v69 - 1) = v70;
          v69 -= 4;
        }
        *(void *)(a1 + 12CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v69;
        *(void *)(a1 + 128) = v62;
        *(void *)(a1 + 136) = &v68[4 * v67];
        if (v63) {
          operator delete(v63);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v59 = v60;
        BOOL v62 = v59 + 4;
      }
      *(void *)(a1 + 128) = v62;
      ++v60;
      uint64_t v59 = v62;
    }
    while (v60 < *(_DWORD *)(a5 + 96));
  }
}

void sub_224320774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

turi::thread_pool *xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = a1[9];
  if (a1[10] != v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      unint64_t v15 = *(int *)(a6 + 100);
      uint64_t v61 = 0;
      int v62 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::resize(v12 + v13, v15, &v58);
      ++v14;
      uint64_t v12 = a1[9];
      v13 += 24;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((a1[10] - v12) >> 3));
  }
  unint64_t v16 = *(int *)(a6 + 100);
  int v60 = 0;
  long long v58 = 0u;
  long long v59 = 0u;
  std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry>>::resize((uint64_t)(a1 + 12), v16, &v58);
  uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 64))(a4);
  unint64_t v18 = ((v17[1] - *v17) >> 2);
  *(void *)&long long v58 = v17;
  *((void *)&v58 + 1) = a1;
  *(void *)&long long v59 = a3;
  *((void *)&v59 + 1) = a5;
  __n128 result = turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v18, (uint64_t)&v58);
  uint64_t v20 = *a2;
  uint64_t v21 = a2[1];
  uint64_t v22 = v21 - *a2;
  if (v21 != *a2)
  {
    uint64_t v23 = 0;
    unint64_t v24 = v22 >> 2;
    unint64_t v26 = (char *)a1[9];
    char v25 = (char *)a1[10];
    unint64_t v27 = (v25 - v26) / 24;
    uint64_t v28 = a1[12];
    uint64_t v29 = (float *)a1[1];
    double v30 = v29[3];
    if (v27 <= 1) {
      unint64_t v27 = 1;
    }
    if (v24 <= 1) {
      unint64_t v24 = 1;
    }
    while (1)
    {
      int v31 = *(_DWORD *)(v20 + 4 * v23);
      double v32 = 0.0;
      double v33 = 0.0;
      if (v25 != v26)
      {
        double v34 = v26;
        unint64_t v35 = v27;
        do
        {
          uint64_t v36 = *(void *)v34;
          v34 += 24;
          unint64_t v37 = (double *)(v36 + 56 * v31);
          double v32 = v32 + *v37;
          double v33 = v33 + v37[1];
          --v35;
        }
        while (v35);
      }
      uint64_t v38 = (double *)(v28 + 40 * v31);
      *uint64_t v38 = v32;
      v38[1] = v33;
      if (v33 >= v30) {
        break;
      }
      *(_DWORD *)(v28 + 40 * v31 + 16) = 0;
      double v39 = 0.0;
LABEL_45:
      float v57 = v39;
      __n128 result = (turi::thread_pool *)(v28 + 40 * v31);
      *((float *)result + 5) = v57;
      if (++v23 == v24) {
        return result;
      }
    }
    float v40 = v29[7];
    float v41 = v29[5];
    float v42 = -v40;
    if (v40 == 0.0)
    {
      if (v41 == 0.0)
      {
        float v43 = v29[4];
        float v44 = v32 * v32 / (v33 + v43);
        *(float *)(v28 + 40 * v31 + 16) = v44;
        goto LABEL_40;
      }
      double v53 = v41;
      if (v32 <= v41)
      {
        double v54 = 0.0;
        if (v32 < -v53) {
          double v54 = v32 + v53;
        }
      }
      else
      {
        double v54 = v32 - v53;
      }
      float v43 = v29[4];
      float v55 = v54 * v54 / (v33 + v43);
      *(float *)(v28 + 40 * v31 + 16) = v55;
    }
    else
    {
      double v45 = v41;
      double v46 = v32;
      if (v41 != 0.0)
      {
        double v47 = v32 + v45;
        if (v32 >= -v45) {
          double v47 = 0.0;
        }
        double v46 = v32 - v45;
        if (v32 <= v45) {
          double v46 = v47;
        }
      }
      float v43 = v29[4];
      double v48 = v33 + v43;
      double v49 = -v46 / v48;
      if (v49 > v40) {
        double v49 = v40;
      }
      if (v49 < v42) {
        double v49 = v42;
      }
      double v50 = v48 * 0.5 * (v49 * v49) + v32 * v49;
      double v51 = v50 + v45 * fabs(v49);
      if (v41 == 0.0) {
        double v51 = v50;
      }
      float v52 = v51 * -2.0;
      *(float *)(v28 + 40 * v31 + 16) = v52;
      if (v41 == 0.0) {
        goto LABEL_40;
      }
    }
    double v56 = v41;
    if (v32 <= v56)
    {
      if (v32 >= -v56) {
        double v32 = 0.0;
      }
      else {
        double v32 = v32 + v56;
      }
    }
    else
    {
      double v32 = v32 - v56;
    }
LABEL_40:
    double v39 = -v32 / (v33 + v43);
    if (v40 != 0.0)
    {
      if (v39 > v40) {
        double v39 = v40;
      }
      if (v39 < v42) {
        double v39 = v42;
      }
    }
    goto LABEL_45;
  }
  return result;
}

void xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::FindSplit(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  memset(&v35, 0, sizeof(v35));
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&v35, *(const void **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  float v14 = *(float *)(*(void *)(a1 + 8) + 36);
  if (v14 != 1.0)
  {
    std::vector<unsigned int>::pointer begin = v35.__begin_;
    unint64_t v16 = (unint64_t)((char *)v35.__end_ - (char *)v35.__begin_) >> 2;
    uint64_t v17 = (v16 - 1);
    if (v35.__end_ != v35.__begin_ && v16 != 1)
    {
      do
      {
        unsigned int v19 = vcvtmd_u64_f64((double)rand() * 4.65661287e-10 * (double)v16);
        unsigned int v20 = begin[v17];
        begin[v17] = begin[v19];
        begin[v19] = v20;
        LODWORD(v16) = v16 - 1;
        --v17;
      }
      while (v17);
      float v14 = *(float *)(*(void *)(a1 + 8) + 36);
    }
    std::vector<unsigned int>::size_type v21 = (float)(v14
                              * (float)(unint64_t)((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2));
    xgboost_old::utils::Check(v21 != 0, "colsample_bylevel is too small that no feature can be included", v13);
    std::vector<int>::resize(&v35, v21);
  }
  uint64_t v22 = (*(uint64_t (**)(uint64_t, std::vector<unsigned int> *))(*(void *)a5 + 16))(a5, &v35);
  while ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 24))(v22))
  {
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 32))(v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 8))(a1, v23, a4, a5, a6);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, a3);
  uint64_t v25 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v26 = 0;
    do
    {
      uint64_t v27 = *(int *)(v25 + 4 * v26);
      uint64_t v28 = *(void *)(a1 + 96);
      if (*(float *)(v28 + 40 * (int)v27 + 24) <= 0.00001)
      {
        uint64_t v34 = *a7 + 20 * (int)v27;
        *(float *)(v34 + 16) = *(float *)(v28 + 40 * (int)v27 + 20) * **(float **)(a1 + 8);
        *(void *)(v34 + 4) = -1;
      }
      else
      {
        xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::AddChilds((uint64_t)a7, v27, v24);
        uint64_t v29 = v28 + 40 * (int)v27;
        int v30 = *(_DWORD *)(v29 + 32);
        uint64_t v31 = *a7 + 20 * v27;
        *(_DWORD *)(v31 + 12) = *(_DWORD *)(v29 + 28);
        *(_DWORD *)(v31 + 16) = v30;
        uint64_t v32 = *a7 + 20 * *(int *)(*a7 + 20 * v27 + 4);
        *(_DWORD *)(v32 + 16) = 0;
        *(void *)(v32 + 4) = 0xFFFFFFFFLL;
        uint64_t v33 = *a7 + 20 * *(int *)(*a7 + 20 * v27 + 8);
        *(_DWORD *)(v33 + 16) = 0;
        *(void *)(v33 + 4) = 0xFFFFFFFFLL;
      }
      ++v26;
      uint64_t v25 = *a3;
    }
    while (v26 < (a3[1] - *a3) >> 2);
  }
  if (v35.__begin_)
  {
    v35.__end_ = v35.__begin_;
    operator delete(v35.__begin_);
  }
}

void sub_224320DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::UpdateQueueExpand(int a1, void *a2, char *a3)
{
  std::vector<unsigned int> __p = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v5 = *(void *)a3;
  uint64_t v4 = *((void *)a3 + 1);
  if (v4 == *(void *)a3)
  {
    int v30 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      int v9 = *(_DWORD *)(v5 + 4 * v8);
      int v10 = *(_DWORD *)(*a2 + 20 * v9 + 4);
      if (v10 != -1)
      {
        int v11 = v33;
        if (v7 >= v33)
        {
          uint64_t v13 = (char *)__p;
          uint64_t v14 = (v7 - (unsigned char *)__p) >> 2;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v33 - (unsigned char *)__p;
          if ((v33 - (unsigned char *)__p) >> 1 > v15) {
            unint64_t v15 = v16 >> 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v33, v17);
            uint64_t v13 = (char *)__p;
            uint64_t v7 = v32;
          }
          else
          {
            unint64_t v18 = 0;
          }
          unsigned int v19 = &v18[4 * v14];
          *(_DWORD *)unsigned int v19 = v10;
          uint64_t v12 = v19 + 4;
          while (v7 != v13)
          {
            int v20 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          int v11 = &v18[4 * v17];
          std::vector<unsigned int> __p = v19;
          uint64_t v32 = v12;
          uint64_t v33 = v11;
          if (v13)
          {
            operator delete(v13);
            int v11 = v33;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v7 = v10;
          uint64_t v12 = v7 + 4;
        }
        uint64_t v32 = v12;
        int v21 = *(_DWORD *)(*a2 + 20 * v9 + 8);
        if (v12 >= v11)
        {
          uint64_t v22 = (char *)__p;
          uint64_t v23 = (v12 - (unsigned char *)__p) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v11 - (unsigned char *)__p;
          if (v25 >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v33, v26);
            uint64_t v22 = (char *)__p;
            uint64_t v12 = v32;
          }
          else
          {
            uint64_t v27 = 0;
          }
          uint64_t v28 = &v27[4 * v23];
          *(_DWORD *)uint64_t v28 = v21;
          uint64_t v7 = v28 + 4;
          while (v12 != v22)
          {
            int v29 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          std::vector<unsigned int> __p = v28;
          uint64_t v32 = v7;
          uint64_t v33 = &v27[4 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v12 = v21;
          uint64_t v7 = v12 + 4;
        }
        uint64_t v32 = v7;
        uint64_t v5 = *(void *)a3;
        uint64_t v4 = *((void *)a3 + 1);
      }
      ++v8;
    }
    while (v8 < (v4 - v5) >> 2);
    int v30 = (char *)__p;
  }
  if (&__p != (void **)a3)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a3, v30, (uint64_t)v7, (v7 - v30) >> 2);
    int v30 = (char *)__p;
  }
  if (v30)
  {
    uint64_t v32 = v30;
    operator delete(v30);
  }
}

void sub_224321074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      uint64_t v9 = a1[1];
      do
      {
        int v11 = *(void **)(v9 - 24);
        v9 -= 24;
        int v10 = v11;
        if (v11)
        {
          *(void *)(v4 - 16) = v10;
          operator delete(v10);
        }
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    BOOL v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(v3, a2);
    unint64_t v7 = &v6[v5];
    uint64_t v9 = &v6[56 * v8];
    int v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 56);
        long long v14 = *(_OWORD *)(v10 - 40);
        long long v15 = *(_OWORD *)(v10 - 24);
        *((_DWORD *)v12 - 2) = *((_DWORD *)v10 - 2);
        *(_OWORD *)(v12 - 24) = v15;
        *(_OWORD *)(v12 - 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v14;
        *(_OWORD *)(v12 - 56) = v13;
        v12 -= 56;
        v10 -= 56;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    BOOL v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>(v3, a2);
    unint64_t v7 = &v6[v5];
    uint64_t v9 = &v6[40 * v8];
    int v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 40);
        long long v14 = *(_OWORD *)(v10 - 24);
        *((_DWORD *)v12 - 2) = *((_DWORD *)v10 - 2);
        *(_OWORD *)(v12 - 24) = v14;
        *(_OWORD *)(v12 - 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v13;
        v12 -= 40;
        v10 -= 40;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    BOOL v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    unint64_t v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = (unsigned int *)&v6[4 * v8];
    std::vector<unsigned int>::pointer begin = this->__begin_;
    std::vector<unsigned int>::pointer end = this->__end_;
    uint64_t v12 = v7;
    if (end != this->__begin_)
    {
      uint64_t v12 = v7;
      do
      {
        unsigned int v13 = *--end;
        *--uint64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void *std::vector<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  __n128 result = a1 + 2;
  uint64_t v7 = v8;
  uint64_t v9 = (void *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      long long v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        void *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        __n128 result = std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__init_with_size[abi:ne180100]<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry*,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry*>(v9, *(const void **)a3, *(void *)(a3 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    int v21 = result;
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, v13);
    }
    else {
      long long v14 = 0;
    }
    unint64_t v17 = v14;
    unint64_t v18 = &v14[24 * v10];
    unsigned int v19 = v18;
    int v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::__construct_at_end(&v17, a2, a3);
    std::vector<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::__swap_out_circular_buffer(a1, &v17);
    return (void *)std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_22432152C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__split_buffer<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::__construct_at_end(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = (void *)result[2];
  if (a2)
  {
    BOOL v6 = &v4[3 * a2];
    uint64_t v7 = 24 * a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      __n128 result = std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__init_with_size[abi:ne180100]<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry*,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry*>(v4, *(const void **)a3, *(void *)(a3 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_2243215DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__init_with_size[abi:ne180100]<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry*,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8 - 4);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2243216BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::resize(uint64_t a1, unint64_t a2, long long *a3)
{
  unint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__append((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 56 * a2;
  }
}

void std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry>>::resize(uint64_t a1, unint64_t a2, long long *a3)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry>>::__append((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 40 * a2;
  }
}

turi::thread_pool *turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v19 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    long long v14 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v18, v14);
    double v15 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v16 = (unint64_t)((double)v5 + v15 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v16 = a2;
    }
    v17[2] = (unint64_t)((double)v5 + v15 * (double)0);
    v17[3] = v16;
    v17[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v17[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v18, v17);
  }
  if (a2 > v5)
  {
    do
    {
      uint64_t v10 = *(void *)(a3 + 8);
      uint64_t v11 = *(unsigned int *)(**(void **)a3 + 4 * v5);
      uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(result);
      unsigned int v12 = *(_DWORD *)(*(void *)(v10 + 48) + 4 * v11);
      if ((v12 & 0x80000000) == 0)
      {
        uint64_t v13 = *(void *)(*(void *)(v10 + 72) + 24 * *(int *)result);
        *(float64x2_t *)(v13 + 56 * v12) = vaddq_f64(*(float64x2_t *)(v13 + 56 * v12), vcvtq_f64_f32(*(float32x2_t *)(**(void **)(a3 + 16) + 8 * v11)));
      }
      ++v5;
    }
    while (a2 != v5);
  }
  return result;
}

void sub_224321A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__append(void **a1, unint64_t a2, long long *a3)
{
  long long v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  BOOL v9 = *(void **)(v6 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (unsigned char *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      double v15 = &v9[7 * a2];
      uint64_t v16 = 56 * a2;
      do
      {
        long long v17 = *a3;
        long long v18 = a3[1];
        long long v19 = a3[2];
        v9[6] = *((void *)a3 + 6);
        *((_OWORD *)v9 + 1) = v18;
        *((_OWORD *)v9 + 2) = v19;
        *(_OWORD *)BOOL v9 = v17;
        v9 += 7;
        v16 -= 56;
      }
      while (v16);
      BOOL v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (((char *)v9 - (unsigned char *)*a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0x492492492492492) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x249249249249249) {
      unint64_t v13 = 0x492492492492492;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(v6, v13);
    }
    else {
      long long v14 = 0;
    }
    int v20 = &v14[56 * v10];
    uint64_t v21 = 56 * a2;
    uint64_t v22 = &v20[56 * a2];
    uint64_t v23 = v20;
    do
    {
      long long v24 = *a3;
      long long v25 = a3[1];
      long long v26 = a3[2];
      *((void *)v23 + 6) = *((void *)a3 + 6);
      *((_OWORD *)v23 + 1) = v25;
      *((_OWORD *)v23 + 2) = v26;
      *(_OWORD *)uint64_t v23 = v24;
      v23 += 56;
      v21 -= 56;
    }
    while (v21);
    uint64_t v27 = &v14[56 * v13];
    int v29 = (char *)*a1;
    uint64_t v28 = (char *)a1[1];
    if (v28 != *a1)
    {
      do
      {
        long long v30 = *(_OWORD *)(v28 - 56);
        long long v31 = *(_OWORD *)(v28 - 40);
        long long v32 = *(_OWORD *)(v28 - 24);
        *((_DWORD *)v20 - 2) = *((_DWORD *)v28 - 2);
        *(_OWORD *)(v20 - 24) = v32;
        *(_OWORD *)(v20 - 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v31;
        *(_OWORD *)(v20 - 56) = v30;
        v20 -= 56;
        v28 -= 56;
      }
      while (v28 != v29);
      uint64_t v28 = (char *)*a1;
    }
    *a1 = v20;
    a1[1] = v22;
    a1[2] = v27;
    if (v28)
    {
      operator delete(v28);
    }
  }
}

void std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::NodeEntry>>::__append(void **a1, unint64_t a2, long long *a3)
{
  long long v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  BOOL v9 = *(void **)(v6 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (unsigned char *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      double v15 = &v9[5 * a2];
      uint64_t v16 = 40 * a2;
      do
      {
        long long v17 = *a3;
        long long v18 = a3[1];
        Bytef v9[4] = *((void *)a3 + 4);
        *(_OWORD *)BOOL v9 = v17;
        *((_OWORD *)v9 + 1) = v18;
        v9 += 5;
        v16 -= 40;
      }
      while (v16);
      BOOL v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v9 - (unsigned char *)*a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0x666666666666666) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>(v6, v13);
    }
    else {
      long long v14 = 0;
    }
    long long v19 = &v14[40 * v10];
    int v20 = &v19[40 * a2];
    uint64_t v21 = 40 * a2;
    uint64_t v22 = v19;
    do
    {
      long long v23 = *a3;
      long long v24 = a3[1];
      *((void *)v22 + 4) = *((void *)a3 + 4);
      *(_OWORD *)uint64_t v22 = v23;
      *((_OWORD *)v22 + 1) = v24;
      v22 += 40;
      v21 -= 40;
    }
    while (v21);
    long long v25 = &v14[40 * v13];
    uint64_t v27 = (char *)*a1;
    long long v26 = (char *)a1[1];
    if (v26 != *a1)
    {
      do
      {
        long long v28 = *(_OWORD *)(v26 - 40);
        long long v29 = *(_OWORD *)(v26 - 24);
        *((_DWORD *)v19 - 2) = *((_DWORD *)v26 - 2);
        *(_OWORD *)(v19 - 24) = v29;
        *(_OWORD *)(v19 - 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v28;
        v19 -= 40;
        v26 -= 40;
      }
      while (v26 != v27);
      long long v26 = (char *)*a1;
    }
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v25;
    if (v26)
    {
      operator delete(v26);
    }
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246EFD46 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246EFD46 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::InitNewNode(std::vector<int> const&,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(void *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    uint64_t v2 = result;
    do
    {
      uint64_t v3 = *v2;
      uint64_t v4 = *(void *)(*v2 + 8);
      uint64_t v5 = *(unsigned int *)(**(void **)*v2 + 4 * v1);
      uint64_t result = turi::thread::get_tls_data((turi::thread *)result);
      unsigned int v6 = *(_DWORD *)(*(void *)(v4 + 48) + 4 * v5);
      if ((v6 & 0x80000000) == 0)
      {
        uint64_t v7 = *(void *)(*(void *)(v4 + 72) + 24 * *(int *)result);
        *(float64x2_t *)(v7 + 56 * v6) = vaddq_f64(*(float64x2_t *)(v7 + 56 * v6), vcvtq_f64_f32(*(float32x2_t *)(**(void **)(v3 + 16) + 8 * v5)));
      }
      ++v1;
    }
    while (v1 < v2[2]);
  }
  return result;
}

void xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::AddChilds(uint64_t a1, int a2, const char *a3)
{
  int v5 = *(_DWORD *)(a1 + 104);
  if (!v5)
  {
    int v7 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 10CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v7 + 1;
    xgboost_old::utils::Check(v7 != 2147483646, "number of nodes in the tree exceed 2^31", a3);
    std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::resize(a1, *(int *)(a1 + 100));
    std::vector<xgboost_old::tree::RTreeNodeStat>::resize(a1 + 48, *(int *)(a1 + 100));
    std::vector<float>::resize(a1 + 72, *(int *)(a1 + 116) * (uint64_t)*(int *)(a1 + 100));
    int v8 = *(_DWORD *)(a1 + 104);
    if (v8) {
      goto LABEL_3;
    }
LABEL_5:
    int v10 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 10CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v10 + 1;
    xgboost_old::utils::Check(v10 != 2147483646, "number of nodes in the tree exceed 2^31", a3);
    std::vector<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node,std::allocator<xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::Node>>::resize(a1, *(int *)(a1 + 100));
    std::vector<xgboost_old::tree::RTreeNodeStat>::resize(a1 + 48, *(int *)(a1 + 100));
    std::vector<float>::resize(a1 + 72, *(int *)(a1 + 116) * (uint64_t)*(int *)(a1 + 100));
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(v6 - 4);
  *(void *)(a1 + 32) = v6 - 4;
  int v8 = v5 - 1;
  *(_DWORD *)(a1 + 104) = v8;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = *(_DWORD *)(v9 - 4);
  *(void *)(a1 + 32) = v9 - 4;
  *(_DWORD *)(a1 + 104) = v8 - 1;
LABEL_6:
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)a1 + 20 * a2;
  *(_DWORD *)(v12 + 4) = v7;
  *(_DWORD *)(v12 + 8) = v10;
  *(_DWORD *)(v11 + 20 * v7) = a2 | 0x80000000;
  *(_DWORD *)(v11 + 20 * v1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = a2;
}

void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  int v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = (unint64_t)v7 > 1;
  }
  if (v10)
  {
    int v20 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v24, v20);
    double v21 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v22 = (unint64_t)((double)v5 + v21 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v22 = a2;
    }
    v23[2] = (unint64_t)((double)v5 + v21 * (double)0);
    void v23[3] = v22;
    v23[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v23[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v24, v23);
  }
  if (a2 > v5)
  {
    while (1)
    {
      uint64_t v11 = *(void *)(a3 + 8);
      unint64_t v12 = *(unsigned int *)(**(void **)a3 + 4 * v5);
      uint64_t v13 = *(void *)(v11 + 48);
      if (v12 >= (*(void *)(v11 + 56) - v13) >> 2)
      {
        xgboost_old::utils::Printf((xgboost_old::utils *)"ridx exceed bound\n", v9);
        uint64_t v13 = *(void *)(v11 + 48);
      }
      int v14 = *(_DWORD *)(v13 + 4 * v12);
      uint64_t v15 = v14 ^ (v14 >> 31);
      uint64_t v16 = **(void **)(a3 + 16);
      int v17 = *(_DWORD *)(v16 + 20 * v15 + 4);
      if (v17 != -1) {
        break;
      }
      if (*(_DWORD *)(v16 + 20 * (int)v15 + 8) == -1)
      {
        int v19 = ~v15;
LABEL_14:
        *(_DWORD *)(v13 + 4 * v12) = v19;
      }
      if (a2 == ++v5) {
        return;
      }
    }
    int v18 = v14 >> 31;
    if ((*(_DWORD *)(v16 + 20 * (int)v15 + 12) & 0x80000000) != 0) {
      int v19 = v17 ^ v18;
    }
    else {
      int v19 = *(_DWORD *)(v16 + 20 * (int)v15 + 8) ^ v18;
    }
    goto LABEL_14;
  }
}

void sub_224322210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246EFE31 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246EFE31 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::ResetPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(void *a1, const char *a2)
{
  unint64_t v2 = a1[1];
  if (v2 < a1[2])
  {
    while (1)
    {
      uint64_t v4 = *a1;
      uint64_t v5 = *(void *)(*a1 + 8);
      unint64_t v6 = *(unsigned int *)(**(void **)*a1 + 4 * v2);
      uint64_t v7 = *(void *)(v5 + 48);
      if (v6 >= (*(void *)(v5 + 56) - v7) >> 2)
      {
        xgboost_old::utils::Printf((xgboost_old::utils *)"ridx exceed bound\n", a2);
        uint64_t v7 = *(void *)(v5 + 48);
      }
      int v8 = *(_DWORD *)(v7 + 4 * v6);
      uint64_t v9 = v8 ^ (v8 >> 31);
      uint64_t v10 = **(void **)(v4 + 16);
      int v11 = *(_DWORD *)(v10 + 20 * v9 + 4);
      if (v11 != -1) {
        break;
      }
      if (*(_DWORD *)(v10 + 20 * (int)v9 + 8) == -1)
      {
        int v13 = ~v9;
LABEL_10:
        *(_DWORD *)(v7 + 4 * v6) = v13;
      }
      if (++v2 >= a1[2]) {
        return;
      }
    }
    int v12 = v8 >> 31;
    if ((*(_DWORD *)(v10 + 20 * (int)v9 + 12) & 0x80000000) != 0) {
      int v13 = v11 ^ v12;
    }
    else {
      int v13 = *(_DWORD *)(v10 + 20 * (int)v9 + 8) ^ v12;
    }
    goto LABEL_10;
  }
}

uint64_t xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CQHistMaker(uint64_t a1)
{
  *(void *)(a1 + 8) = 1050253722;
  *(_DWORD *)(a1 + 16) = 6;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = _D0;
  *(void *)(a1 + 28) = 0;
  *(_OWORD *)(a1 + 36) = xmmword_2246EF110;
  *(void *)(a1 + 52) = 0x3DCCCCCD3F800000;
  *(_DWORD *)(a1 + 6CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0x40000000;
  *(_OWORD *)(a1 + 64) = xmmword_2246C5F80;
  *(_OWORD *)(a1 + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)a1 = &unk_26D778F80;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  uint64_t v7 = (turi::neural_net::float_scalar *)(a1 + 224);
  *(void *)(a1 + 216) = 0;
  rabit::engine::ReduceHandle::ReduceHandle((void *)(a1 + 224));
  turi::neural_net::float_scalar::~float_scalar(v7);
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)a1 = &unk_26D778ED0;
  *(_OWORD *)(a1 + 28CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 36CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 44CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  rabit::engine::ReduceHandle::ReduceHandle((void *)(a1 + 472));
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 52CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(a1 + 472));
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  return a1;
}

void sub_22432254C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 527) < 0) {
    operator delete(*v13);
  }
  turi::neural_net::float_scalar::~float_scalar(v11);
  a10 = v10 + 448;
  std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  uint64_t v15 = *(void **)(v10 + 424);
  if (v15)
  {
    *(void *)(v10 + 432) = v15;
    operator delete(v15);
  }
  a10 = v10 + 400;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v10 + 376;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v10 + 352;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  uint64_t v16 = *(void **)(v10 + 328);
  if (v16)
  {
    *(void *)(v10 + 336) = v16;
    operator delete(v16);
  }
  int v17 = *(void **)(v10 + 304);
  if (v17)
  {
    *(void *)(v10 + 312) = v17;
    operator delete(v17);
  }
  int v18 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 288) = v18;
    operator delete(v18);
  }
  xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::~HistMaker(v10);
  _Unwind_Resume(a1);
}

void xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::~HistMaker(uint64_t a1)
{
  *(void *)a1 = &unk_26D778F80;
  unint64_t v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(void *)(a1 + 264) = v2;
    operator delete(v2);
  }
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(a1 + 224));
  uint64_t v5 = (void **)(a1 + 200);
  std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = *(void **)(a1 + 176);
  if (v3)
  {
    *(void *)(a1 + 184) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 152);
  if (v4)
  {
    *(void *)(a1 + 16CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v4;
    operator delete(v4);
  }
  xgboost_old::tree::BaseMaker::~BaseMaker((xgboost_old::tree::BaseMaker *)a1);
}

uint64_t xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::Update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = (float *)result;
  float v6 = *(float *)(result + 8);
  uint64_t v7 = *a5;
  uint64_t v8 = a5[1] - *a5;
  *(float *)(result + 8) = v6 / (float)(unint64_t)(v8 >> 3);
  if (v8)
  {
    unint64_t v13 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(float *, uint64_t, uint64_t, uint64_t, void))(*(void *)v5 + 48))(v5, a2, a3, a4, *(void *)(v7 + 8 * v13++));
      uint64_t v7 = *a5;
    }
    while (v13 < (a5[1] - *a5) >> 3);
  }
  v5[2] = v6;
  return result;
}

void xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::~CQHistMaker(uint64_t a1)
{
  xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::~CQHistMaker(a1);
  JUMPOUT(0x22A614FA0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  *(void *)a1 = &unk_26D778ED0;
  float v6 = (void **)(a1 + 528);
  std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(a1 + 472));
  float v6 = (void **)(a1 + 448);
  std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v2 = *(void **)(a1 + 424);
  if (v2)
  {
    *(void *)(a1 + 432) = v2;
    operator delete(v2);
  }
  float v6 = (void **)(a1 + 400);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  float v6 = (void **)(a1 + 376);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  float v6 = (void **)(a1 + 352);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v3 = *(void **)(a1 + 328);
  if (v3)
  {
    *(void *)(a1 + 336) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 304);
  if (v4)
  {
    *(void *)(a1 + 312) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 280);
  if (v5)
  {
    *(void *)(a1 + 288) = v5;
    operator delete(v5);
  }
  xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::~HistMaker(a1);
}

void xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  memset(&__p, 0, sizeof(__p));
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    std::vector<unsigned int>::pointer end = 0;
    unint64_t v10 = 0;
    do
    {
      int v11 = *(_DWORD *)(v7 + 4 * v10);
      if (*(_DWORD *)(*a4 + 20 * v11 + 4) != -1)
      {
        int v12 = *(_DWORD *)(*a4 + 20 * v11 + 12) & 0x7FFFFFFF;
        if (end >= __p.__end_cap_.__value_)
        {
          std::vector<unsigned int>::pointer begin = __p.__begin_;
          uint64_t v15 = end - __p.__begin_;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          int64_t v17 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
          if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v18);
            uint64_t v20 = v19;
            std::vector<unsigned int>::pointer begin = __p.__begin_;
            std::vector<unsigned int>::pointer end = __p.__end_;
          }
          else
          {
            uint64_t v20 = 0;
          }
          double v21 = (unsigned int *)(v18 + 4 * v15);
          *double v21 = v12;
          unint64_t v13 = v21 + 1;
          while (end != begin)
          {
            unsigned int v22 = *--end;
            *--double v21 = v22;
          }
          __p.__begin_ = v21;
          __p.__end_ = v13;
          __p.__end_cap_.__value_ = (unsigned int *)(v18 + 4 * v20);
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *std::vector<unsigned int>::pointer end = v12;
          unint64_t v13 = end + 1;
        }
        __p.__end_ = v13;
        std::vector<unsigned int>::pointer end = v13;
        uint64_t v7 = *a2;
        uint64_t v6 = a2[1];
      }
      ++v10;
    }
    while (v10 < (v6 - v7) >> 2);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  long long v23 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::__equal_to &>((int *)__p.__begin_, (int *)__p.__end_);
  std::vector<int>::resize(&__p, ((char *)v23 - (char *)__p.__begin_) >> 2);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, std::vector<unsigned int> *))(*(void *)a3 + 16))(a3, &__p);
  while ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 24))(v24))
  {
    uint64_t v25 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 32))(v24);
    if (*v25)
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      do
      {
        unint64_t v28 = v25[1];
        long long v29 = (uint64_t *)(v25[2] + v26);
        uint64_t v31 = *v29;
        uint64_t v30 = v29[1];
        v35[0] = v31;
        v35[1] = v30;
        int v34 = 0;
        int v34 = *(_DWORD *)(v28 + 4 * v27);
        v33[0] = v35;
        v33[1] = a1;
        v33[2] = a4;
        v33[3] = &v34;
        turi::parallel_for<xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v30, (uint64_t)v33);
        ++v27;
        v26 += 16;
      }
      while (v27 < *v25);
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_224322A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::Update(void *a1, void *a2, const char *a3, uint64_t a4, uint64_t *a5)
{
  xgboost_old::tree::BaseMaker::InitData((uint64_t)a1, a2, a3, (uint64_t *)(a4 + 16), (uint64_t)a5);
  (*(void (**)(void *, const char *, uint64_t *, void *))(*a1 + 64))(a1, a3, a5, a1 + 32);
  if (*((int *)a1 + 4) <= 0)
  {
    uint64_t v11 = a1[10];
    uint64_t v12 = a1[11];
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      (*(void (**)(void *, void *, const char *, uint64_t, void *, uint64_t *))(*a1 + 56))(a1, a2, a3, a4, a1 + 32, a5);
      (*(void (**)(void *, void *, const char *, uint64_t, void *, uint64_t *))(*a1 + 80))(a1, a2, a3, a4, a1 + 32, a5);
      xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit((uint64_t)a1, v10, (uint64_t)a2, (uint64_t)a3, a4, a1 + 32, a5);
      (*(void (**)(void *, const char *, uint64_t *))(*a1 + 72))(a1, a3, a5);
      xgboost_old::tree::BaseMaker::UpdateQueueExpand((uint64_t)a1, (uint64_t)a5);
      uint64_t v11 = a1[10];
      uint64_t v12 = a1[11];
      if (v12 == v11) {
        break;
      }
      uint64_t v10 = (v10 + 1);
    }
    while ((int)v10 < *((_DWORD *)a1 + 4));
  }
  if (v12 != v11)
  {
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(int *)(v11 + 4 * v13);
      float v15 = *(float *)(a5[6] + 16 * v14 + 8) * *((float *)a1 + 2);
      uint64_t v16 = *a5 + 20 * (int)v14;
      *(float *)(v16 + 16) = v15;
      *(void *)(v16 + 4) = -1;
      ++v13;
      uint64_t v11 = a1[10];
    }
    while (v13 < (a1[11] - v11) >> 2);
  }
}

uint64_t xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t a6)
{
  v159[4] = *MEMORY[0x263EF8340];
  uint64_t v158 = a3;
  uint64_t v156 = (void *)(a1 + 304);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 304), *(int *)(a6 + 112));
  uint64_t v10 = *(void **)(a1 + 304);
  uint64_t v11 = *(void *)(a1 + 312) - (void)v10;
  if (v11 >= 1) {
    memset(v10, 255, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
  }
  *(void *)(a1 + 336) = *(void *)(a1 + 328);
  uint64_t v12 = *a5;
  if (a5[1] != *a5)
  {
    unint64_t v13 = 0;
    do
    {
      unsigned int v14 = 2 * *(_DWORD *)(v12 + 4 * v13);
      unint64_t v15 = v14 | 1;
      xgboost_old::utils::Assert(v15 < (uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 2, "FeatHelper fid exceed query bound ", v9);
      uint64_t v16 = *(void *)(a1 + 280);
      float v17 = *(float *)(v16 + 4 * v14);
      if (v17 == -3.4028e38 || *(float *)(v16 + 4 * v15) == (float)-v17)
      {
        uint64_t v12 = *a5;
        *(_DWORD *)(*v156 + 4 * *(unsigned int *)(*a5 + 4 * v13)) = -2;
      }
      else
      {
        uint64_t v19 = *(char **)(a1 + 328);
        uint64_t v20 = *(char **)(a1 + 336);
        uint64_t v21 = *a5;
        uint64_t v22 = (v20 - v19) >> 2;
        *(_DWORD *)(*(void *)(a1 + 304) + 4 * *(unsigned int *)(*a5 + 4 * v13)) = v22;
        unint64_t v23 = *(void *)(a1 + 344);
        if ((unint64_t)v20 >= v23)
        {
          unint64_t v25 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = v23 - (void)v19;
          if (v26 >> 1 > v25) {
            unint64_t v25 = v26 >> 1;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            unint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 344, v27);
            uint64_t v19 = *(char **)(a1 + 328);
            uint64_t v20 = *(char **)(a1 + 336);
          }
          else
          {
            unint64_t v28 = 0;
          }
          long long v29 = &v28[4 * v22];
          *(_DWORD *)long long v29 = *(_DWORD *)(v21 + 4 * v13);
          uint64_t v24 = v29 + 4;
          while (v20 != v19)
          {
            int v30 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v29 - 1) = v30;
            v29 -= 4;
          }
          *(void *)(a1 + 328) = v29;
          *(void *)(a1 + 336) = v24;
          *(void *)(a1 + 344) = &v28[4 * v27];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v20 = *(_DWORD *)(v21 + 4 * v13);
          uint64_t v24 = v20 + 4;
        }
        *(void *)(a1 + 336) = v24;
        uint64_t v12 = *a5;
      }
      ++v13;
    }
    while (v13 < (a5[1] - v12) >> 2);
  }
  xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>((turi::thread *)a1, a2, a3, a6, (uint64_t)a4, (uint64_t *)(a1 + 376), (void *)(a1 + 424));
  std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::resize((uint64_t *)(a1 + 528), ((uint64_t)(*(void *)(a1 + 336) - *(void *)(a1 + 328)) >> 2)* ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2));
  uint64_t v32 = *(void *)(a1 + 528);
  if (*(void *)(a1 + 536) == v32)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v33 = 0;
    do
    {
      unint64_t v34 = 0;
      double v35 = *(float *)(a1 + 56);
      do
        unint64_t v36 = vcvtpd_u64_f64((double)++v34 / v35) + 1;
      while (v36 << v34 < *a4);
      unint64_t v37 = (void *)(v32 + 136 * v33);
      v37[4] = v34;
      v37[5] = v36;
      xgboost_old::utils::Assert(v35 * (double)v36 >= (double)v34, "invalid init parameter", v31);
      std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)v37, 1uLL);
      void v37[3] = 0;
      v37[10] = v37[9];
      v37[7] = v37[6];
      ++v33;
      uint64_t v32 = *(void *)(a1 + 528);
      unint64_t v38 = 0xF0F0F0F0F0F0F0F1 * ((*(void *)(a1 + 536) - v32) >> 3);
    }
    while (v33 < v38);
  }
  double v39 = (uint64_t *)(a1 + 448);
  std::vector<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>>::resize((uint64_t *)(a1 + 448), v38);
  unint64_t v40 = (float)(*(float *)(a1 + 60) / *(float *)(a1 + 56));
  xgboost_old::utils::Check(v40 != 0, "sketch_ratio/sketch_eps must be bigger than 1", v41);
  int v157 = v40;
  uint64_t v43 = *(void *)(a1 + 536);
  uint64_t v44 = *(void *)(a1 + 528);
  if (v43 != v44)
  {
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    do
    {
      uint64_t v47 = *v39;
      uint64_t v48 = *v39 + v45;
      if (v40 > (uint64_t)(*(void *)(v48 + 24) - *(void *)(v48 + 16)) >> 4)
      {
        std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize(v48 + 16, v40);
        if (*(void *)(v48 + 24) == *(void *)(v48 + 16)) {
          uint64_t v49 = 0;
        }
        else {
          uint64_t v49 = *(void *)(v48 + 16);
        }
        *(void *)(v47 + v45) = v49;
        uint64_t v43 = *(void *)(a1 + 536);
        uint64_t v44 = *(void *)(a1 + 528);
      }
      ++v46;
      v45 += 40;
    }
    while (v46 < 0xF0F0F0F0F0F0F0F1 * ((v43 - v44) >> 3));
  }
  uint64_t v50 = *(void *)(a1 + 448);
  uint64_t v51 = *(void *)(a1 + 456) - v50;
  if (v51)
  {
    unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * (v51 >> 3);
    double v53 = operator new(0x30uLL);
    *double v53 = &unk_26D779168;
    v53[1] = a1;
    v53[2] = &v158;
    v53[3] = a2;
    v53[4] = a6;
    v53[5] = &v157;
    v159[3] = v53;
    rabit::SerializeReducer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>::Allreduce(a1 + 472, v50, (16 * v40) | 8, v52, (uint64_t)rabit::InvokeLambda_, (uint64_t)v159);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v159);
  }
  double v54 = *(_DWORD **)(a1 + 152);
  float v55 = (void **)(a1 + 176);
  *(void *)(a1 + 184) = *(void *)(a1 + 176);
  *(void *)(a1 + 16CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v54;
  BOOL v153 = (void **)(a1 + 152);
  unint64_t v56 = *(void *)(a1 + 168);
  if ((unint64_t)v54 >= v56)
  {
    uint64_t v58 = v56 - (void)v54;
    uint64_t v59 = v58 >> 1;
    if ((unint64_t)(v58 >> 1) <= 1) {
      uint64_t v59 = 1;
    }
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v60 = v59;
    }
    uint64_t v61 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 168, v60);
    int v62 = *(char **)(a1 + 152);
    BOOL v63 = *(char **)(a1 + 160);
    unint64_t v65 = &v61[v64];
    *uint64_t v61 = 0;
    float v57 = (char *)(v61 + 1);
    while (v63 != v62)
    {
      int v66 = *((_DWORD *)v63 - 1);
      v63 -= 4;
      *--uint64_t v61 = v66;
    }
    *(void *)(a1 + 152) = v61;
    *(void *)(a1 + 16CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v57;
    *(void *)(a1 + 168) = v65;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    *double v54 = 0;
    float v57 = (char *)(v54 + 1);
  }
  *(void *)(a1 + 16CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v57;
  uint64_t v67 = *(void *)(a1 + 88) - *(void *)(a1 + 80);
  if (v67)
  {
    uint64_t v151 = a1 + 168;
    uint64_t v155 = 0;
    double v68 = (void *)(a1 + 192);
    while (1)
    {
      uint64_t v69 = *a5;
      if (a5[1] != *a5) {
        break;
      }
LABEL_149:
      double v128 = *(char **)(a1 + 184);
      unint64_t v127 = *(void *)(a1 + 192);
      if ((unint64_t)v128 >= v127)
      {
        double v130 = (char *)*v55;
        uint64_t v131 = (v128 - (unsigned char *)*v55) >> 2;
        unint64_t v132 = v131 + 1;
        if ((unint64_t)(v131 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v133 = v127 - (void)v130;
        if (v133 >> 1 > v132) {
          unint64_t v132 = v133 >> 1;
        }
        if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v134 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v134 = v132;
        }
        if (v134)
        {
          double v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 192, v134);
          double v130 = *(char **)(a1 + 176);
          double v128 = *(char **)(a1 + 184);
        }
        else
        {
          double v135 = 0;
        }
        float v136 = &v135[4 * v131];
        *(_DWORD *)float v136 = 0;
        double v129 = v136 + 4;
        while (v128 != v130)
        {
          int v137 = *((_DWORD *)v128 - 1);
          v128 -= 4;
          *((_DWORD *)v136 - 1) = v137;
          v136 -= 4;
        }
        *(void *)(a1 + 176) = v136;
        *(void *)(a1 + 184) = v129;
        *(void *)(a1 + 192) = &v135[4 * v134];
        if (v130) {
          operator delete(v130);
        }
      }
      else
      {
        *(_DWORD *)double v128 = 0;
        double v129 = v128 + 4;
      }
      *(void *)(a1 + 184) = v129;
      unint64_t v138 = ((unint64_t)v129 - *(void *)(a1 + 176)) >> 2;
      double v140 = *(char **)(a1 + 160);
      unint64_t v139 = *(void *)(a1 + 168);
      if ((unint64_t)v140 >= v139)
      {
        double v141 = (char *)*v153;
        uint64_t v142 = (v140 - (unsigned char *)*v153) >> 2;
        unint64_t v143 = v142 + 1;
        if ((unint64_t)(v142 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v144 = v139 - (void)v141;
        if (v144 >> 1 > v143) {
          unint64_t v143 = v144 >> 1;
        }
        if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v145 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v145 = v143;
        }
        if (v145)
        {
          double v146 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v151, v145);
          double v141 = *(char **)(a1 + 152);
          double v140 = *(char **)(a1 + 160);
        }
        else
        {
          double v146 = 0;
        }
        double v147 = &v146[4 * v142];
        *(_DWORD *)double v147 = v138;
        float v57 = v147 + 4;
        while (v140 != v141)
        {
          int v148 = *((_DWORD *)v140 - 1);
          v140 -= 4;
          *((_DWORD *)v147 - 1) = v148;
          v147 -= 4;
        }
        *(void *)(a1 + 152) = v147;
        *(void *)(a1 + 16CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v57;
        *(void *)(a1 + 168) = &v146[4 * v145];
        if (v141) {
          operator delete(v141);
        }
      }
      else
      {
        *(_DWORD *)double v140 = v138;
        float v57 = v140 + 4;
      }
      *(void *)(a1 + 16CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v57;
      uint64_t v67 = *(void *)(a1 + 88) - *(void *)(a1 + 80);
      if (++v155 >= (unint64_t)(v67 >> 2)) {
        return xgboost_old::utils::Assert((v67 >> 2) + (v67 >> 2) * ((a5[1] - *a5) >> 2) + 1 == (v57 - (unsigned char *)*v153) >> 2, "cut space inconsistent", v42);
      }
    }
    unint64_t v70 = 0;
    while (1)
    {
      uint64_t v71 = *(unsigned int *)(*v156 + 4 * *(unsigned int *)(v69 + 4 * v70));
      if ((v71 & 0x80000000) != 0)
      {
        xgboost_old::utils::Assert(v71 == -2, "BUG in mark", v42);
        float v89 = *(float *)(*(void *)(a1 + 280) + 4 * ((2 * *(_DWORD *)(*a5 + 4 * v70)) | 1u));
        float v90 = (float)(v89 + fabsf(v89)) + 0.00001;
        double v92 = *(float **)(a1 + 184);
        unint64_t v91 = *(void *)(a1 + 192);
        if ((unint64_t)v92 >= v91)
        {
          double v100 = (float *)*v55;
          uint64_t v101 = ((char *)v92 - (unsigned char *)*v55) >> 2;
          unint64_t v102 = v101 + 1;
          if ((unint64_t)(v101 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v103 = v91 - (void)v100;
          if (v103 >> 1 > v102) {
            unint64_t v102 = v103 >> 1;
          }
          if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v104 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v104 = v102;
          }
          if (v104)
          {
            float v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 192, v104);
            double v100 = *(float **)(a1 + 176);
            double v92 = *(float **)(a1 + 184);
          }
          else
          {
            float v105 = 0;
          }
          double v120 = (float *)&v105[4 * v101];
          *double v120 = v90;
          double v93 = v120 + 1;
          while (v92 != v100)
          {
            int v121 = *((_DWORD *)v92-- - 1);
            *((_DWORD *)v120-- - 1) = v121;
          }
          *(void *)(a1 + 176) = v120;
          *(void *)(a1 + 184) = v93;
          *(void *)(a1 + 192) = &v105[4 * v104];
          if (v100) {
            operator delete(v100);
          }
        }
        else
        {
          *double v92 = v90;
          double v93 = v92 + 1;
        }
        *(void *)(a1 + 184) = v93;
        unint64_t v108 = ((unint64_t)v93 - *(void *)(a1 + 176)) >> 2;
        BOOL v110 = *(char **)(a1 + 160);
        unint64_t v122 = *(void *)(a1 + 168);
        if ((unint64_t)v110 >= v122)
        {
          BOOL v111 = (char *)*v153;
          uint64_t v123 = (v110 - (unsigned char *)*v153) >> 2;
          unint64_t v124 = v123 + 1;
          if ((unint64_t)(v123 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v125 = v122 - (void)v111;
          if (v125 >> 1 > v124) {
            unint64_t v124 = v125 >> 1;
          }
          if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v115 = v124;
          }
          if (v115)
          {
            double v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v151, v115);
            BOOL v111 = *(char **)(a1 + 152);
            BOOL v110 = *(char **)(a1 + 160);
          }
          else
          {
            double v116 = 0;
          }
          float v117 = &v116[4 * v123];
          *(_DWORD *)float v117 = v108;
          uint64_t v118 = v117 + 4;
          while (v110 != v111)
          {
            int v126 = *((_DWORD *)v110 - 1);
            v110 -= 4;
            *((_DWORD *)v117 - 1) = v126;
            v117 -= 4;
          }
          goto LABEL_146;
        }
      }
      else
      {
        double v72 = (void *)(*(void *)(a1 + 448)
                       + 40 * (v71 + ((uint64_t)(*(void *)(a1 + 336) - *(void *)(a1 + 328)) >> 2) * v155));
        unint64_t v73 = v72[1];
        double v74 = *(float **)(a1 + 184);
        if (v73 >= 2)
        {
          for (unint64_t i = 1; i < v73; ++i)
          {
            float v76 = *(float *)(*v72 + 16 * i + 12) + -0.00001;
            if (i == 1 || v76 > *(v74 - 1))
            {
              if ((unint64_t)v74 >= *v68)
              {
                double v78 = (float *)*v55;
                uint64_t v79 = ((char *)v74 - (unsigned char *)*v55) >> 2;
                unint64_t v80 = v79 + 1;
                if ((unint64_t)(v79 + 1) >> 62) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v81 = *v68 - (void)v78;
                if (v81 >> 1 > v80) {
                  unint64_t v80 = v81 >> 1;
                }
                if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v82 = v80;
                }
                if (v82)
                {
                  double v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 192, v82);
                  double v78 = *(float **)(a1 + 176);
                  double v74 = *(float **)(a1 + 184);
                }
                else
                {
                  double v83 = 0;
                }
                double v84 = (float *)&v83[4 * v79];
                float *v84 = v76;
                float v77 = v84 + 1;
                while (v74 != v78)
                {
                  int v85 = *((_DWORD *)v74-- - 1);
                  *((_DWORD *)v84-- - 1) = v85;
                }
                *(void *)(a1 + 176) = v84;
                *(void *)(a1 + 184) = v77;
                *(void *)(a1 + 192) = &v83[4 * v82];
                if (v78) {
                  operator delete(v78);
                }
              }
              else
              {
                *double v74 = v76;
                float v77 = v74 + 1;
              }
              *(void *)(a1 + 184) = v77;
              unint64_t v73 = v72[1];
              double v74 = v77;
            }
          }
        }
        if (v73)
        {
          float v86 = *(float *)(*v72 + 16 * v73 - 4);
          float v87 = (float)(v86 + fabsf(v86)) + 0.00001;
          if ((unint64_t)v74 >= *v68)
          {
            double v94 = (float *)*v55;
            uint64_t v95 = ((char *)v74 - (unsigned char *)*v55) >> 2;
            unint64_t v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v97 = *v68 - (void)v94;
            if (v97 >> 1 > v96) {
              unint64_t v96 = v97 >> 1;
            }
            if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v98 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v98 = v96;
            }
            if (v98)
            {
              double v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 192, v98);
              double v94 = *(float **)(a1 + 176);
              double v74 = *(float **)(a1 + 184);
            }
            else
            {
              double v99 = 0;
            }
            unsigned int v106 = (float *)&v99[4 * v95];
            *unsigned int v106 = v87;
            double v88 = v106 + 1;
            while (v74 != v94)
            {
              int v107 = *((_DWORD *)v74-- - 1);
              *((_DWORD *)v106-- - 1) = v107;
            }
            *(void *)(a1 + 176) = v106;
            *(void *)(a1 + 184) = v88;
            *(void *)(a1 + 192) = &v99[4 * v98];
            if (v94) {
              operator delete(v94);
            }
          }
          else
          {
            *double v74 = v87;
            double v88 = v74 + 1;
          }
          *(void *)(a1 + 184) = v88;
          double v74 = v88;
        }
        unint64_t v108 = ((unint64_t)v74 - *(void *)(a1 + 176)) >> 2;
        BOOL v110 = *(char **)(a1 + 160);
        unint64_t v109 = *(void *)(a1 + 168);
        if ((unint64_t)v110 >= v109)
        {
          BOOL v111 = (char *)*v153;
          uint64_t v112 = (v110 - (unsigned char *)*v153) >> 2;
          unint64_t v113 = v112 + 1;
          if ((unint64_t)(v112 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v114 = v109 - (void)v111;
          if (v114 >> 1 > v113) {
            unint64_t v113 = v114 >> 1;
          }
          if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v115 = v113;
          }
          if (v115)
          {
            double v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v151, v115);
            BOOL v111 = *(char **)(a1 + 152);
            BOOL v110 = *(char **)(a1 + 160);
          }
          else
          {
            double v116 = 0;
          }
          float v117 = &v116[4 * v112];
          *(_DWORD *)float v117 = v108;
          uint64_t v118 = v117 + 4;
          while (v110 != v111)
          {
            int v119 = *((_DWORD *)v110 - 1);
            v110 -= 4;
            *((_DWORD *)v117 - 1) = v119;
            v117 -= 4;
          }
LABEL_146:
          *(void *)(a1 + 152) = v117;
          *(void *)(a1 + 16CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v118;
          *(void *)(a1 + 168) = &v116[4 * v115];
          if (v111) {
            operator delete(v111);
          }
          goto LABEL_148;
        }
      }
      *(_DWORD *)BOOL v110 = v108;
      uint64_t v118 = v110 + 4;
LABEL_148:
      *(void *)(a1 + 16CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v118;
      ++v70;
      uint64_t v69 = *a5;
      if (v70 >= (a5[1] - *a5) >> 2) {
        goto LABEL_149;
      }
    }
  }
  return xgboost_old::utils::Assert((v67 >> 2) + (v67 >> 2) * ((a5[1] - *a5) >> 2) + 1 == (v57 - (unsigned char *)*v153) >> 2, "cut space inconsistent", v42);
}

void sub_2243237CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::InitWorkSet(uint64_t a1, uint64_t a2, uint64_t a3, std::vector<unsigned int> *a4)
{
  uint64_t v6 = (uint64_t *)(a1 + 280);
  xgboost_old::tree::BaseMaker::FMetaHelper::InitByCol(a1 + 280, a2, a3);
  float v8 = *(float *)(a1 + 48);
  xgboost_old::tree::BaseMaker::FMetaHelper::SampleCol(v6, a4, v7, v8);
}

turi::thread_pool *xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPositionAfterSplit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a1 + 80, a2, a3);
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  unint64_t v7 = ((v6[1] - *v6) >> 2);
  v9[0] = v6;
  v9[1] = a1;
  v9[2] = a3;
  return turi::parallel_for<xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v7, (uint64_t)v9);
}

void *xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  v36[4] = *MEMORY[0x263EF8340];
  uint64_t v34 = a3;
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 304), *(int *)(a6 + 112));
  uint64_t v11 = *(void *)(a1 + 304);
  uint64_t v12 = *(void *)(a1 + 312) - v11;
  if (v12 >= 1) {
    memset(*(void **)(a1 + 304), 255, 4 * (((unint64_t)v12 >> 2) - ((unint64_t)v12 > 3)) + 4);
  }
  uint64_t v13 = *a5;
  uint64_t v14 = a5[1];
  uint64_t v15 = v14 - *a5;
  if (v14 != *a5)
  {
    uint64_t v16 = 0;
    unint64_t v17 = v15 >> 2;
    if (v17 <= 1) {
      unint64_t v17 = 1;
    }
    do
    {
      *(_DWORD *)(v11 + 4 * *(unsigned int *)(v13 + 4 * v(*(void (**)(void))(**((void **)this + 16) + 16))(*((void *)this + 16)) = v16;
      ++v16;
    }
    while (v17 != v16);
  }
  uint64_t v18 = a1 + 200;
  std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::resize((uint64_t *)(a1 + 200), 1uLL);
  uint64_t v19 = *(void **)(a1 + 200);
  uint64_t v20 = (uint64_t)(v19 + 2);
  uint64_t v21 = v19[2];
  if (v19[3] != v21)
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    do
    {
      uint64_t v24 = (void *)(v21 + v22);
      *uint64_t v24 = 0;
      v24[1] = 0;
      ++v23;
      uint64_t v19 = *(void **)v18;
      uint64_t v21 = *(void *)(*(void *)v18 + 16);
      v22 += 16;
    }
    while (v23 < (*(void *)(*(void *)v18 + 24) - v21) >> 4);
    uint64_t v20 = (uint64_t)(v19 + 2);
  }
  if (*(void *)(a1 + 160) == *(void *)(a1 + 152)) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = *(void *)(a1 + 152);
  }
  void *v19 = v25;
  uint64_t v26 = *(void *)(a1 + 176);
  uint64_t v27 = *(void *)(a1 + 184) - v26;
  if (!v27) {
    uint64_t v26 = 0;
  }
  v19[1] = v26;
  long long v35 = 0uLL;
  std::vector<xgboost_old::tree::GradStats>::resize(v20, v27 >> 2, &v35);
  uint64_t v28 = *(void *)(*(void *)(a1 + 200) + 16);
  uint64_t v29 = *(void *)(*(void *)(a1 + 200) + 24);
  uint64_t v30 = v29 - v28;
  if (v29 == v28) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = *(void **)(*(void *)(a1 + 200) + 16);
  }
  uint64_t v32 = operator new(0x38uLL);
  void *v32 = &unk_26D779228;
  v32[1] = a1;
  v32[2] = &v34;
  v32[3] = a5;
  v32[4] = a2;
  v32[5] = a4;
  v32[6] = a6;
  v36[3] = v32;
  rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(a1 + 224), v31, 0x10uLL, v30 >> 4, (uint64_t (*)(void *, void *))rabit::InvokeLambda_, v36);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v36);
}

void sub_224323AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::ThreadWSpace::~ThreadWSpace(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 48);
  std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void xgboost_old::tree::BaseMaker::~BaseMaker(xgboost_old::tree::BaseMaker *this)
{
  *(void *)this = &unk_26D778FE8;
  unint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
}

void xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::InitWorkSet(int a1, int a2, uint64_t a3, std::vector<unsigned int> *this)
{
  std::vector<int>::resize(this, *(int *)(a3 + 112));
  std::vector<unsigned int>::pointer begin = this->__begin_;
  std::vector<unsigned int>::pointer end = this->__end_;
  uint64_t v7 = (char *)end - (char *)this->__begin_;
  if (end != this->__begin_)
  {
    uint64_t v8 = 0;
    unint64_t v9 = v7 >> 2;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    do
    {
      begin[v8] = v8;
      ++v8;
    }
    while (v9 != v8);
  }
}

void std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void rabit::SerializeReducerFunc_<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>(uint64_t a1, uint64_t a2, int a3, turi::style_transfer::ResNet16ModelTrainer *this)
{
  uint64_t v5 = turi::style_transfer::ResNet16ModelTrainer::SupportsLossComponents(this);
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v34 = 0;
  long long v32 = 0u;
  *(_OWORD *)std::vector<unsigned int> __p = 0u;
  if (a3 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (int)v5;
    uint64_t v9 = a3;
    do
    {
      uint64_t v10 = v5;
      uint64_t v28 = (uint64_t (**)(void **, void, uint64_t))&unk_26D779028;
      uint64_t v29 = a1 + v7;
      uint64_t v30 = v8;
      size_t v31 = 0;
      v26[0] = &unk_26D779028;
      v26[1] = a2 + v7;
      v26[2] = v8;
      uint64_t v27 = 0;
      xgboost_old::utils::Assert(v5 > 7, "read can not have position excceed buffer length", v6);
      size_t v12 = v31;
      if (v30 - v31 >= 8) {
        size_t v13 = 8;
      }
      else {
        size_t v13 = v30 - v31;
      }
      if (v13) {
        memcpy((char *)&v35 + 8, (const void *)(v29 + v31), v13);
      }
      size_t v31 = v13 + v12;
      xgboost_old::utils::Check(v13 != 0, "invalid SummaryArray 1", v11);
      uint64_t v14 = *((void *)&v35 + 1);
      if (*((void *)&v35 + 1) > (unint64_t)((uint64_t)(*((void *)&v36 + 1) - v36) >> 4))
      {
        std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)&v36, *((unint64_t *)&v35 + 1));
        uint64_t v14 = *((void *)&v35 + 1);
        if (*((void *)&v36 + 1) == (void)v36) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v36;
        }
        *(void *)&long long v35 = v15;
      }
      if (v14)
      {
        BOOL v16 = (*v28)((void **)&v28, v35, 16 * v14) != 0;
        xgboost_old::utils::Check(v16, "invalid SummaryArray 2", v17);
      }
      BOOL v18 = (*(uint64_t (**)(void *, char *, uint64_t))v26[0])(v26, (char *)&v32 + 8, 8) != 0;
      xgboost_old::utils::Check(v18, "invalid SummaryArray 1", v19);
      uint64_t v20 = *((void *)&v32 + 1);
      if (*((void *)&v32 + 1) > (unint64_t)(((char *)__p[1] - (char *)__p[0]) >> 4))
      {
        std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)__p, *((unint64_t *)&v32 + 1));
        uint64_t v20 = *((void *)&v32 + 1);
        if (__p[1] == __p[0]) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = __p[0];
        }
        *(void *)&long long v32 = v21;
      }
      if (v20)
      {
        BOOL v22 = (*(uint64_t (**)(void *, void, uint64_t))v26[0])(v26, v32, 16 * v20) != 0;
        xgboost_old::utils::Check(v22, "invalid SummaryArray 2", v23);
      }
      xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer::Reduce(&v32, (uint64_t)&v35, v8);
      uint64_t v27 = 0;
      (*(void (**)(void *, char *, uint64_t))(v26[0] + 8))(v26, (char *)&v32 + 8, 8);
      if (*((void *)&v32 + 1)) {
        (*(void (**)(void *, void, uint64_t))(v26[0] + 8))(v26, v32, 16 * *((void *)&v32 + 1));
      }
      v7 += v8;
      --v9;
      uint64_t v5 = v10;
    }
    while (v9);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  if ((void)v36)
  {
    *((void *)&v36 + 1) = v36;
    operator delete((void *)v36);
  }
}

void sub_224324010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v28 = *(void **)(v26 - 112);
  if (v28)
  {
    *(void *)(v26 - 104) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

void xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer::Reduce(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)(a3 - 8) >> 4;
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v6 = (uint64_t)(a1 + 2);
  if (v5 > (v8 - v7) >> 4)
  {
    std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize(v6, v5);
    if (a1[3] == a1[2]) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = a1[2];
    }
    *a1 = v9;
  }
  uint64_t v14 = 0;
  long long v12 = 0u;
  *(_OWORD *)std::vector<unsigned int> __p = 0u;
  unint64_t v10 = *(void *)(a2 + 8) + a1[1];
  if (v10)
  {
    std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)__p, v10);
    if (__p[1] == __p[0]) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = __p[0];
    }
    *(void *)&long long v12 = v11;
  }
  xgboost_old::utils::WQSummary<float,float>::SetCombine((void **)&v12, (uint64_t)a1, a2);
  xgboost_old::utils::WXQSummary<float,float>::SetPrune(a1, (const char *)&v12, (uint64_t)(a1[3] - a1[2]) >> 4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_224324104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t rabit::utils::MemoryFixSizeBuffer::Seek(uint64_t this, uint64_t a2)
{
  *(void *)(this + 24) = a2;
  return this;
}

size_t rabit::utils::MemoryFixSizeBuffer::Read(rabit::utils::MemoryFixSizeBuffer *this, void *a2, const char *a3)
{
  size_t v3 = (size_t)a3;
  xgboost_old::utils::Assert((unint64_t)&a3[*((void *)this + 3)] <= *((void *)this + 2), "read can not have position excceed buffer length", a3);
  uint64_t v6 = *((void *)this + 3);
  if (*((void *)this + 2) - v6 < v3) {
    size_t v3 = *((void *)this + 2) - v6;
  }
  if (v3)
  {
    memcpy(a2, (const void *)(*((void *)this + 1) + v6), v3);
    uint64_t v6 = *((void *)this + 3);
  }
  *((void *)this + 3) = v6 + v3;
  return v3;
}

void *rabit::utils::MemoryFixSizeBuffer::Write(void *this, const void *a2, size_t a3)
{
  if (a3)
  {
    uint64_t v5 = (uint64_t)this;
    xgboost_old::utils::Assert(this[3] + a3 <= this[2], "write position exceed fixed buffer size", (const char *)a3);
    this = memcpy((void *)(*(void *)(v5 + 8) + *(void *)(v5 + 24)), a2, a3);
    *(void *)(v5 + 24) += a3;
  }
  return this;
}

void rabit::utils::MemoryFixSizeBuffer::~MemoryFixSizeBuffer(rabit::utils::MemoryFixSizeBuffer *this)
{
}

BOOL rabit::utils::MemoryFixSizeBuffer::AtEnd(rabit::utils::MemoryFixSizeBuffer *this)
{
  return *((void *)this + 3) == *((void *)this + 2);
}

void std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[1];
  if (a2 <= (v5 - v6) >> 4)
  {
    a1[1] = &v6[16 * a2];
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v8 = v6 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - v7;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
      uint64_t v7 = *a1;
      uint64_t v6 = a1[1];
    }
    else
    {
      size_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    BOOL v16 = &v14[16 * a2];
    if (v6 != v7)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v7);
      uint64_t v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void *xgboost_old::utils::WQSummary<float,float>::SetCombine(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = *(void **)(a3 + 8);
  if (v5)
  {
    if (v6)
    {
      uint64_t v8 = 0;
      unint64_t v9 = *(float32x2_t **)a2;
      uint64_t v10 = *(void *)a2 + 16 * (void)v5;
      uint64_t v11 = *(float32x2_t **)a3;
      uint64_t v12 = *(void *)a3 + 16 * (void)v6;
      size_t v13 = (float32x2_t *)*a1;
      float v14 = 0.0;
      float v15 = 0.0;
      while (1)
      {
        float v16 = v9[1].f32[1];
        float v17 = v11[1].f32[1];
        if (v16 == v17)
        {
          float32_t v18 = v9[1].f32[0] + v11[1].f32[0];
          uint64_t v19 = &v13[v8];
          float32x2_t *v19 = vadd_f32(*v9, *v11);
          v19[1].f32[0] = v18;
          v19[1].f32[1] = v16;
          float v15 = v9->f32[0] + v9[1].f32[0];
          float v14 = v11->f32[0] + v11[1].f32[0];
          v9 += 2;
        }
        else
        {
          uint64_t v20 = (float *)&v13[v8];
          if (v16 < v17)
          {
            float v21 = v9->f32[1] + (float)(v11->f32[1] - v11[1].f32[0]);
            __int32 v22 = v9[1].i32[0];
            v13[v8].f32[0] = v14 + v9->f32[0];
            v20[1] = v21;
            *((_DWORD *)v20 + 2) = v22;
            void v20[3] = v16;
            float v15 = v9->f32[0] + v9[1].f32[0];
            v9 += 2;
            goto LABEL_10;
          }
          float v23 = v11->f32[1] + (float)(v9->f32[1] - v9[1].f32[0]);
          __int32 v24 = v11[1].i32[0];
          v13[v8].f32[0] = v15 + v11->f32[0];
          v20[1] = v23;
          *((_DWORD *)v20 + 2) = v24;
          void v20[3] = v17;
          float v14 = v11->f32[0] + v11[1].f32[0];
        }
        v11 += 2;
LABEL_10:
        v8 += 2;
        if (v9 == (float32x2_t *)v10 || v11 == (float32x2_t *)v12)
        {
          if (v9 == (float32x2_t *)v10)
          {
            size_t v31 = &v13[v8];
          }
          else
          {
            uint64_t v25 = 0;
            float v26 = *(float *)(v12 - 12);
            do
            {
              uint64_t v27 = &v9[v25];
              uint64_t v28 = &v13[v25 + v8];
              float32_t v29 = v26 + v9[v25].f32[1];
              float32x2_t v30 = v9[v25 + 1];
              v28->f32[0] = v14 + v9[v25].f32[0];
              v28->f32[1] = v29;
              v28[1] = v30;
              v25 += 2;
            }
            while (&v27[2] != (float32x2_t *)v10);
            size_t v31 = &v13[v8 + v25];
          }
          if (v11 != (float32x2_t *)v12)
          {
            float v36 = *(float *)(v10 - 12);
            do
            {
              float32_t v37 = v36 + v11->f32[1];
              float32x2_t v38 = v11[1];
              v31->f32[0] = v15 + v11->f32[0];
              v31->f32[1] = v37;
              v31[1] = v38;
              v31 += 2;
              v11 += 2;
            }
            while (v11 != (float32x2_t *)v12);
          }
          unint64_t v39 = ((char *)v31 - (char *)v13) >> 4;
          a1[1] = (void *)v39;
          if (v31 == v13)
          {
            float v41 = 0.0;
            float v43 = 0.0;
            float v44 = 0.0;
          }
          else
          {
            unint64_t v40 = (float *)v13 + 1;
            float v41 = 0.0;
            unint64_t v42 = v39;
            float v43 = 0.0;
            float v44 = 0.0;
            float v45 = 0.0;
            float v46 = 0.0;
            do
            {
              if (*(v40 - 1) >= v46)
              {
                float v46 = *(v40 - 1);
              }
              else
              {
                *(v40 - 1) = v46;
                if (v41 < (float)(v46 - v46)) {
                  float v41 = v46 - v46;
                }
              }
              if (*v40 >= v45)
              {
                float v45 = *v40;
              }
              else
              {
                *unint64_t v40 = v45;
                if (v43 < (float)(v45 - v45)) {
                  float v43 = v45 - v45;
                }
              }
              float v47 = v46 + v40[1];
              if (v45 < v47)
              {
                *unint64_t v40 = v47;
                if (v44 < (float)(v47 - v47)) {
                  float v44 = v47 - v47;
                }
                float v45 = v47;
              }
              v40 += 4;
              --v42;
            }
            while (v42);
          }
          if (v41 > 10.0 || v43 > 10.0 || v44 > 10.0)
          {
            xgboost_old::utils::Printf((xgboost_old::utils *)"INFO: mingap=%g, maxgap=%g, wgap=%g\n", (const char *)a2, v41, v43, v44);
            unint64_t v39 = (unint64_t)a1[1];
          }
          BOOL v50 = v39 <= *(void *)(a3 + 8) + *(void *)(a2 + 8);
          return (void *)xgboost_old::utils::Assert(v50, "bug in combine", (const char *)a3);
        }
      }
    }
    a1[1] = v5;
    long long v32 = *a1;
    unint64_t v33 = *(float32x2_t **)a2;
    size_t v34 = 16 * (void)v5;
  }
  else
  {
    a1[1] = v6;
    long long v32 = *a1;
    unint64_t v33 = *(float32x2_t **)a3;
    size_t v34 = 16 * (void)v6;
  }
  return memcpy(v32, v33, v34);
}

void *xgboost_old::utils::WXQSummary<float,float>::SetPrune(void *result, const char *a2, unint64_t a3)
{
  uint64_t v4 = result;
  unint64_t v5 = *((void *)a2 + 1);
  if (v5 <= a3)
  {
    result[1] = v5;
    unint64_t v9 = (_OWORD *)*result;
    uint64_t v10 = *(_OWORD **)a2;
    return memcpy(v9, v10, 16 * v5);
  }
  else
  {
    uint64_t v6 = *(_OWORD **)a2;
    float v7 = *(float *)(*(void *)a2 + 4);
    float v8 = *(float *)(*(void *)a2 + 16 * (v5 - 1)) - v7;
    if (v8 == 0.0)
    {
      *(_OWORD *)*uint64_t result = *v6;
      *(_OWORD *)(*result + 16) = *(_OWORD *)(*(void *)a2 + 16 * *((void *)a2 + 1) - 16);
      result[1] = 2;
    }
    else
    {
      unint64_t v12 = a3 - 1;
      if (v8 >= 0.001) {
        float v13 = *(float *)(*(void *)a2 + 16 * (v5 - 1)) - v7;
      }
      else {
        float v13 = 0.001;
      }
      float v14 = (float)(v13 + v13) / (float)v12;
      if (v5 < 2)
      {
        unint64_t v16 = 0;
        uint64_t v15 = 0;
        float v18 = 0.0;
      }
      else
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        float v17 = (float *)v6 + 6;
        float v18 = 0.0;
        for (uint64_t i = 1; i != v5; ++i)
        {
          float v20 = *(v17 - 1) - *v17;
          if ((float)(*(v17 - 2) + *v17) > (float)(v14 + v20))
          {
            if (i - 1 != v15) {
              float v18 = v18 + (float)(v20 - (float)(*(float *)&v6[v15] + *((float *)&v6[v15] + 2)));
            }
            ++v16;
            uint64_t v15 = i;
          }
          v17 += 4;
        }
      }
      if (v15 != v5 - 2) {
        float v18 = v18
      }
            + (float)((float)(*((float *)&v6[v5 - 1] + 1) - *((float *)&v6[v5 - 1] + 2))
                    - (float)(*(float *)&v6[v15] + *((float *)&v6[v15] + 2)));
      if (v16 >= a3 - 2)
      {
        xgboost_old::utils::Printf((xgboost_old::utils *)"LOG: check quantile stats, nbig=%lu, n=%lu\n", a2, v16, a3 - 1);
        xgboost_old::utils::Printf((xgboost_old::utils *)"LOG: srcsize=%lu, maxsize=%lu, range=%g, chunk=%g\n", v21, *((void *)a2 + 1), a3, v13, v14);
        if (*((void *)a2 + 1))
        {
          uint64_t v24 = 0;
          unint64_t v25 = 0;
          do
          {
            xgboost_old::utils::Printf((xgboost_old::utils *)"[%lu] rmin=%g, rmax=%g, wmin=%g, v=%g\n", v22, v25++, *(float *)(*(void *)a2 + v24), *(float *)(*(void *)a2 + v24 + 4), *(float *)(*(void *)a2 + v24 + 8), *(float *)(*(void *)a2 + v24 + 12));
            v24 += 16;
          }
          while (v25 < *((void *)a2 + 1));
        }
        uint64_t result = (void *)xgboost_old::utils::Assert(0, "quantile: too many large chunk", v23);
        uint64_t v6 = *(_OWORD **)a2;
      }
      *(_OWORD *)*uint64_t v4 = *v6;
      v4[1] = 1;
      unint64_t v26 = *((void *)a2 + 1);
      if (v26 >= 2)
      {
        unint64_t v27 = 0;
        unint64_t v28 = 0;
        unint64_t v29 = v12 - v16;
        uint64_t v30 = *(void *)a2;
        unint64_t v31 = 1;
        unint64_t v32 = 1;
        do
        {
          if (v31 == v26 - 1
            || (float)(*(float *)(v30 + 16 * v31) + *(float *)(v30 + 16 * v31 + 8)) > (float)(v14
                                                                                            + (float)(*(float *)(v30 + 16 * v31 + 4) - *(float *)(v30 + 16 * v31 + 8))))
          {
            if (v28 != v31 - 1 && v32 < v29)
            {
              float v33 = (float)(*(float *)(v30 + 16 * v31 + 4) - *(float *)(v30 + 16 * v31 + 8))
                  + (float)(*(float *)(v30 + 16 * v31 + 4) - *(float *)(v30 + 16 * v31 + 8));
              while (1)
              {
                float v34 = (float)(v7 + (float)((float)(v18 * (float)v32) / (float)(v12 - v16)))
                    + (float)(v7 + (float)((float)(v18 * (float)v32) / (float)(v12 - v16)));
                uint64_t v30 = *(void *)a2;
                if (v34 >= v33) {
                  break;
                }
                unint64_t v35 = v28 <= v31 ? v31 : v28;
                float v36 = (float *)(v30 + 16 * v28 + 20);
                while (v35 != v28)
                {
                  ++v28;
                  float v37 = *v36 + *(v36 - 1);
                  v36 += 4;
                  if (v34 < v37)
                  {
                    --v28;
                    goto LABEL_42;
                  }
                }
                unint64_t v28 = v35;
LABEL_42:
                if (v28 == v31) {
                  break;
                }
                uint64_t v38 = v30 + 16 * v28;
                uint64_t v39 = v30 + 16 * (v28 + 1);
                if (v34 >= (float)((float)(*(float *)v38 + *(float *)(v38 + 8))
                                  + (float)(*(float *)(v39 + 4) - *(float *)(v39 + 8))))
                {
                  if (v28 + 1 != v27)
                  {
                    unint64_t v42 = (_OWORD *)*v4;
                    uint64_t v43 = v4[1];
                    v4[1] = v43 + 1;
                    v42[v43] = *(_OWORD *)v39;
                    unint64_t v27 = v28 + 1;
                  }
                }
                else if (v28 != v27)
                {
                  unint64_t v40 = (_OWORD *)*v4;
                  uint64_t v41 = v4[1];
                  v4[1] = v41 + 1;
                  v40[v41] = *(_OWORD *)v38;
                  unint64_t v27 = v28;
                }
                if (++v32 >= v29)
                {
                  uint64_t v30 = *(void *)a2;
                  unint64_t v32 = v12 - v16;
                  break;
                }
              }
            }
            if (v27 != v31)
            {
              float v44 = (_OWORD *)*v4;
              uint64_t v45 = v4[1];
              v4[1] = v45 + 1;
              v44[v45] = *(_OWORD *)(v30 + 16 * v31);
              uint64_t v30 = *(void *)a2;
            }
            float v7 = v7
               + (float)((float)(*(float *)(v30 + 16 * v31) + *(float *)(v30 + 16 * v31 + 8))
                       - (float)(*(float *)(v30 + 16 * v31 + 4) - *(float *)(v30 + 16 * v31 + 8)));
            unint64_t v26 = *((void *)a2 + 1);
            unint64_t v28 = v31;
            unint64_t v27 = v31;
          }
          ++v31;
        }
        while (v31 < v26);
      }
    }
  }
  return result;
}

void std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void **)(a2 + 112);
  if (v3)
  {
    *(void *)(a2 + 12CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 72);
  if (v4)
  {
    *(void *)(a2 + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a2 + 48);
  if (v5)
  {
    *(void *)(a2 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v6;
    operator delete(v6);
  }
}

turi::thread_pool *turi::parallel_for<xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  float v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v19 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v23, v19);
    double v20 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    unint64_t v21 = (unint64_t)((double)(unint64_t)a1 + v20 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v21 = a2;
    }
    unint64_t v22[2] = (unint64_t)((double)(unint64_t)a1 + v20 * (double)0);
    uint64_t v22[3] = v21;
    v22[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v22[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v23, v22);
  }
  unint64_t v10 = a2 - (void)a1;
  if (a2 > (unint64_t)a1)
  {
    uint64_t v11 = *(void *)(*(void *)(a3 + 8) + 128);
    unint64_t v12 = *(_DWORD **)(a3 + 24);
    uint64_t v13 = **(void **)(a3 + 16);
    float v14 = (float *)(**(void **)a3 + 8 * (void)a1 + 4);
    do
    {
      uint64_t v15 = *((unsigned int *)v14 - 1);
      int v16 = *(_DWORD *)(v11 + 4 * v15);
      int v17 = v16 ^ (v16 >> 31);
      int v18 = *(_DWORD *)(v13 + 20 * v17 + 4);
      if (v18 != -1)
      {
        uint64_t result = (turi::thread_pool *)(*(_DWORD *)(v13 + 20 * v17 + 12) & 0x7FFFFFFF);
        if (result == *v12)
        {
          uint64_t result = (turi::thread_pool *)(v13 + 20 * v17);
          if (*v14 >= *((float *)result + 4)) {
            int v18 = *(_DWORD *)(v13 + 20 * v17 + 8);
          }
          *(_DWORD *)(v11 + 4 * v15) = v18 ^ (v16 >> 31);
        }
      }
      v14 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_224324EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246EFFAFLL & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246EFFAFLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

float *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::BaseMaker::SetNonDefaultPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(float *result)
{
  unint64_t v2 = *((void *)result + 1);
  unint64_t v1 = *((void *)result + 2);
  BOOL v3 = v1 > v2;
  unint64_t v4 = v1 - v2;
  if (v3)
  {
    uint64_t v5 = *(void *)result;
    uint64_t v6 = *(void *)(*(void *)(*(void *)result + 8) + 128);
    uint64_t v7 = **(void **)(*(void *)result + 16);
    float v8 = (float *)(***(void ***)result + 8 * v2 + 4);
    do
    {
      uint64_t v9 = *((unsigned int *)v8 - 1);
      int v10 = *(_DWORD *)(v6 + 4 * v9);
      int v11 = v10 ^ (v10 >> 31);
      int v12 = *(_DWORD *)(v7 + 20 * v11 + 4);
      if (v12 != -1)
      {
        uint64_t result = (float *)(*(_DWORD *)(v7 + 20 * v11 + 12) & 0x7FFFFFFF);
        if (result == **(_DWORD **)(v5 + 24))
        {
          uint64_t result = (float *)(v7 + 20 * v11);
          if (*v8 >= result[4]) {
            int v12 = *(_DWORD *)(v7 + 20 * v11 + 8);
          }
          *(_DWORD *)(v6 + 4 * v9) = v12 ^ (v10 >> 31);
        }
      }
      v8 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

void xgboost_old::tree::BaseMaker::InitData(uint64_t a1, void *a2, const char *a3, uint64_t *a4, uint64_t a5)
{
  xgboost_old::utils::Assert(*(_DWORD *)(a5 + 100) == *(_DWORD *)(a5 + 96), "TreeMaker: can only grow new tree", a3);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 128), (uint64_t)(a2[1] - *a2) >> 3);
  if (a4[1] == *a4)
  {
    int v10 = *(int **)(a1 + 128);
    uint64_t v13 = *(char **)(a1 + 136);
    uint64_t v14 = v13 - (char *)v10;
    if (v13 - (char *)v10 >= 1) {
      bzero(*(void **)(a1 + 128), 4 * (((unint64_t)v14 >> 2) - ((unint64_t)v14 > 3)) + 4);
    }
  }
  else
  {
    int v10 = *(int **)(a1 + 128);
    if (*(int **)(a1 + 136) == v10) {
      goto LABEL_24;
    }
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *a4;
      v10[v11] = *(_DWORD *)(*a4 + 4 * v11);
      xgboost_old::utils::Assert(*(_DWORD *)(v12 + 4 * v11++) < *(_DWORD *)(a5 + 96), "root index exceed setting", v9);
      int v10 = *(int **)(a1 + 128);
      uint64_t v13 = *(char **)(a1 + 136);
      uint64_t v14 = v13 - (char *)v10;
    }
    while (v11 < (v13 - (char *)v10) >> 2);
  }
  if (v13 != (char *)v10)
  {
    uint64_t v15 = v14 >> 2;
    if ((unint64_t)(v14 >> 2) <= 1) {
      uint64_t v15 = 1;
    }
    int v16 = (float *)(*a2 + 4);
    int v17 = v10;
    do
    {
      if (*v16 < 0.0) {
        *int v17 = ~*v17;
      }
      ++v17;
      v16 += 2;
      --v15;
    }
    while (v15);
  }
  if (*(float *)(a1 + 40) < 1.0 && v13 != (char *)v10)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 4;
    do
    {
      if (*(float *)(*a2 + v20) >= 0.0)
      {
        double v21 = *(float *)(a1 + 40);
        int v22 = rand();
        int v10 = *(int **)(a1 + 128);
        if ((double)v22 * 4.65661287e-10 >= v21) {
          v10[v19] = ~v10[v19];
        }
      }
      ++v19;
      v20 += 8;
    }
    while (v19 < (uint64_t)(*(void *)(a1 + 136) - (void)v10) >> 2);
  }
LABEL_24:
  float v23 = (void **)(a1 + 80);
  std::vector<int>::reserve((std::vector<unsigned int> *)(a1 + 80), 0x100uLL);
  uint64_t v24 = *(char **)(a1 + 80);
  *(void *)(a1 + 88) = v24;
  if (*(int *)(a5 + 96) >= 1)
  {
    int v25 = 0;
    unint64_t v26 = (void *)(a1 + 96);
    do
    {
      if ((unint64_t)v24 >= *v26)
      {
        unint64_t v28 = (char *)*v23;
        uint64_t v29 = (v24 - (unsigned char *)*v23) >> 2;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v31 = *v26 - (void)v28;
        if (v31 >> 1 > v30) {
          unint64_t v30 = v31 >> 1;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32)
        {
          float v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 96, v32);
          unint64_t v28 = *(char **)(a1 + 80);
          uint64_t v24 = *(char **)(a1 + 88);
        }
        else
        {
          float v33 = 0;
        }
        float v34 = &v33[4 * v29];
        *(_DWORD *)float v34 = v25;
        unint64_t v27 = v34 + 4;
        while (v24 != v28)
        {
          int v35 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        *(void *)(a1 + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v34;
        *(void *)(a1 + 88) = v27;
        *(void *)(a1 + 96) = &v33[4 * v32];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v24 = v25;
        unint64_t v27 = v24 + 4;
      }
      *(void *)(a1 + 88) = v27;
      ++v25;
      uint64_t v24 = v27;
    }
    while (v25 < *(_DWORD *)(a5 + 96));
  }
  float v36 = *(void **)(a1 + 104);
  uint64_t v37 = *(void *)(a1 + 112) - (void)v36;
  if (v37 >= 1) {
    memset(v36, 255, 4 * (((unint64_t)v37 >> 2) - ((unint64_t)v37 > 3)) + 4);
  }
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 104), *(int *)(a5 + 100));
  uint64_t v38 = *(void *)(a1 + 80);
  uint64_t v39 = *(void *)(a1 + 88);
  uint64_t v40 = v39 - v38;
  if (v39 != v38)
  {
    uint64_t v41 = 0;
    unint64_t v42 = v40 >> 2;
    uint64_t v43 = *(void *)(a1 + 104);
    if (v42 <= 1) {
      unint64_t v42 = 1;
    }
    do
    {
      *(_DWORD *)(v43 + 4 * *(int *)(v38 + 4 * v41)) = v41;
      ++v41;
    }
    while (v42 != v41);
  }
}

void xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t *a7)
{
  uint64_t v71 = (uint64_t)(a6[1] - *a6) >> 2;
  std::vector<xgboost_old::tree::SplitEntry>::vector(v70, (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2);
  std::vector<xgboost_old::tree::GradStats>::vector(__p, (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2);
  unint64_t v10 = *(void *)(a1 + 88) - *(void *)(a1 + 80);
  v68[0] = a1;
  v68[1] = (uint64_t)v70;
  void v68[2] = (uint64_t)&v71;
  v68[3] = (uint64_t)a6;
  v68[4] = (uint64_t)__p;
  unint64_t v67 = (v10 >> 2);
  turi::parallel_for<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(0, v67, v68);
  if ((v10 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = (double *)(*(void *)(*(void *)(a1 + 200) + 16)
                     + 16 * *(unsigned int *)(**(void **)(a1 + 200) + 4 * (v14 + v14 * v71 + v71)));
      double v16 = v15[1];
      double v17 = 0.0;
      if (v16 >= *(float *)(a1 + 20))
      {
        double v18 = *v15;
        float v19 = *(float *)(a1 + 28);
        double v20 = v19;
        double v21 = *v15 + v19;
        if (*v15 >= -v19) {
          double v21 = 0.0;
        }
        BOOL v22 = v18 <= v20;
        double v23 = v18 - v20;
        if (v22) {
          double v23 = v21;
        }
        if (v19 != 0.0) {
          double v18 = v23;
        }
        double v17 = -v18 / (v16 + *(float *)(a1 + 24));
        float v24 = *(float *)(a1 + 36);
        if (v24 != 0.0)
        {
          if (v17 > v24) {
            double v17 = v24;
          }
          double v25 = (float)-v24;
          if (v17 < v25) {
            double v17 = v25;
          }
        }
      }
      uint64_t v26 = *(int *)(*(void *)(a1 + 80) + 4 * v14);
      unint64_t v27 = (char *)v70[0];
      float v28 = v17;
      uint64_t v29 = (float *)(a7[6] + 16 * v26);
      float v30 = v16;
      v29[1] = v30;
      v29[2] = v28;
      float v31 = *(float *)&v27[v13];
      *uint64_t v29 = v31;
      if (v31 <= 0.00001)
      {
        uint64_t v66 = *a7 + 20 * (int)v26;
        *(float *)(v66 + 16) = *(float *)(a1 + 8) * v28;
        *(void *)(v66 + 4) = -1;
      }
      else
      {
        xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::AddChilds((uint64_t)a7, v26, v11);
        int v32 = *(_DWORD *)&v27[v13 + 8];
        uint64_t v33 = *a7 + 20 * v26;
        *(_DWORD *)(v33 + 12) = *(_DWORD *)&v27[v13 + 4];
        *(_DWORD *)(v33 + 16) = v32;
        uint64_t v34 = *a7 + 20 * *(int *)(*a7 + 20 * v26 + 4);
        *(_DWORD *)(v34 + 16) = 0;
        *(void *)(v34 + 4) = 0xFFFFFFFFLL;
        uint64_t v35 = *a7 + 20 * *(int *)(*a7 + 20 * v26 + 8);
        *(_DWORD *)(v35 + 16) = 0;
        *(void *)(v35 + 4) = 0xFFFFFFFFLL;
        double v36 = *(double *)((char *)__p[0] + v12);
        double v37 = *(double *)((char *)__p[0] + v12 + 8);
        double v38 = *(float *)(a1 + 20);
        double v39 = 0.0;
        double v40 = 0.0;
        if (v37 >= v38)
        {
          float v41 = *(float *)(a1 + 28);
          double v42 = v41;
          double v43 = v36 + v41;
          if (v36 >= -v41) {
            double v43 = 0.0;
          }
          BOOL v22 = v36 <= v42;
          double v44 = v36 - v42;
          if (v22) {
            double v44 = v43;
          }
          if (v41 == 0.0) {
            double v45 = *(double *)((char *)__p[0] + v12);
          }
          else {
            double v45 = v44;
          }
          double v40 = -v45 / (v37 + *(float *)(a1 + 24));
          float v46 = *(float *)(a1 + 36);
          if (v46 != 0.0)
          {
            if (v40 > v46) {
              double v40 = v46;
            }
            double v47 = (float)-v46;
            if (v40 < v47) {
              double v40 = v47;
            }
          }
        }
        double v48 = *v15;
        double v49 = v15[1] - v37;
        uint64_t v50 = *a7;
        float v51 = v40;
        uint64_t v52 = a7[6];
        uint64_t v53 = v52 + 16 * *(int *)(*a7 + 20 * v26 + 4);
        float v54 = v37;
        *(float *)(v53 + 4) = v54;
        *(float *)(v53 + 8) = v51;
        uint64_t v55 = *(int *)(v50 + 20 * (int)v26 + 8);
        if (v49 >= v38)
        {
          double v56 = v48 - v36;
          float v57 = *(float *)(a1 + 28);
          double v58 = v57;
          double v59 = v56 + v57;
          if (v56 >= -v57) {
            double v59 = 0.0;
          }
          BOOL v22 = v56 <= v58;
          double v60 = v56 - v58;
          if (v22) {
            double v60 = v59;
          }
          if (v57 != 0.0) {
            double v56 = v60;
          }
          double v39 = -v56 / (v49 + *(float *)(a1 + 24));
          float v61 = *(float *)(a1 + 36);
          if (v61 != 0.0)
          {
            if (v39 > v61) {
              double v39 = v61;
            }
            double v62 = (float)-v61;
            if (v39 < v62) {
              double v39 = v62;
            }
          }
        }
        float v63 = v39;
        uint64_t v64 = v52 + 16 * v55;
        float v65 = v49;
        *(float *)(v64 + 4) = v65;
        *(float *)(v64 + 8) = v63;
      }
      ++v14;
      v13 += 12;
      v12 += 16;
    }
    while (v67 != v14);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
}

void sub_22432572C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::BaseMaker::UpdateQueueExpand(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned int> __p = 0;
  double v39 = 0;
  double v40 = 0;
  uint64_t v4 = *(void *)(a1 + 80);
  double v37 = (char *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  if (v5 == v4)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      int v8 = *(_DWORD *)(v4 + 4 * v7);
      int v9 = *(_DWORD *)(*(void *)a2 + 20 * v8 + 4);
      if (v9 != -1)
      {
        unint64_t v10 = v40;
        if (v6 >= v40)
        {
          uint64_t v12 = (char *)__p;
          uint64_t v13 = (v6 - (unsigned char *)__p) >> 2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v40 - (unsigned char *)__p;
          if ((v40 - (unsigned char *)__p) >> 1 > v14) {
            unint64_t v14 = v15 >> 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            double v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v40, v16);
            uint64_t v12 = (char *)__p;
            uint64_t v6 = v39;
          }
          else
          {
            double v17 = 0;
          }
          double v18 = &v17[4 * v13];
          *(_DWORD *)double v18 = v9;
          unint64_t v11 = v18 + 4;
          while (v6 != v12)
          {
            int v19 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          unint64_t v10 = &v17[4 * v16];
          std::vector<unsigned int> __p = v18;
          double v39 = v11;
          double v40 = v10;
          if (v12)
          {
            operator delete(v12);
            unint64_t v10 = v40;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v6 = v9;
          unint64_t v11 = v6 + 4;
        }
        double v39 = v11;
        int v20 = *(_DWORD *)(*(void *)a2 + 20 * v8 + 8);
        if (v11 >= v10)
        {
          double v21 = (char *)__p;
          uint64_t v22 = (v11 - (unsigned char *)__p) >> 2;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = v10 - (unsigned char *)__p;
          if (v24 >> 1 > v23) {
            unint64_t v23 = v24 >> 1;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v40, v25);
            double v21 = (char *)__p;
            unint64_t v11 = v39;
          }
          else
          {
            uint64_t v26 = 0;
          }
          unint64_t v27 = &v26[4 * v22];
          *(_DWORD *)unint64_t v27 = v20;
          uint64_t v6 = v27 + 4;
          while (v11 != v21)
          {
            int v28 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v27 - 1) = v28;
            v27 -= 4;
          }
          std::vector<unsigned int> __p = v27;
          double v39 = v6;
          double v40 = &v26[4 * v25];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v11 = v20;
          uint64_t v6 = v11 + 4;
        }
        double v39 = v6;
        uint64_t v4 = *(void *)(a1 + 80);
        uint64_t v5 = *(void *)(a1 + 88);
      }
      ++v7;
    }
    while (v7 < (v5 - v4) >> 2);
  }
  if (v37 != (char *)&__p) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v37, (char *)__p, (uint64_t)v6, (v6 - (unsigned char *)__p) >> 2);
  }
  uint64_t v29 = *(void **)(a1 + 104);
  uint64_t v30 = *(void *)(a1 + 112) - (void)v29;
  if (v30 >= 1) {
    memset(v29, 255, 4 * (((unint64_t)v30 >> 2) - ((unint64_t)v30 > 3)) + 4);
  }
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 104), *(int *)(a2 + 100));
  uint64_t v31 = *(void *)(a1 + 80);
  uint64_t v32 = *(void *)(a1 + 88);
  uint64_t v33 = v32 - v31;
  if (v32 != v31)
  {
    uint64_t v34 = 0;
    unint64_t v35 = v33 >> 2;
    uint64_t v36 = *(void *)(a1 + 104);
    if (v35 <= 1) {
      unint64_t v35 = 1;
    }
    do
    {
      *(_DWORD *)(v36 + 4 * *(int *)(v31 + 4 * v34)) = v34;
      ++v34;
    }
    while (v35 != v34);
  }
  if (__p)
  {
    double v39 = (char *)__p;
    operator delete(__p);
  }
}

void sub_224325A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

turi::thread_pool *turi::parallel_for<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v16 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  unint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = (unint64_t)v7 > 1;
  }
  if (v10)
  {
    unint64_t v11 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v15, v11);
    double v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v13 = (unint64_t)((double)v5 + v12 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v13 = a2;
    }
    void v14[2] = (unint64_t)((double)v5 + v12 * (double)0);
    uint64_t v14[3] = v13;
    v14[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v14[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v15, v14);
  }
  if (a2 > v5)
  {
    do
      uint64_t result = (turi::thread_pool *)xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}::operator()(a3, v5++, v9);
    while (a2 != v5);
  }
  return result;
}

void sub_224325BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void *std::vector<xgboost_old::tree::SplitEntry>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost_old::tree::SplitEntry>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_224325C54(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost_old::tree::SplitEntry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::SplitEntry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::SplitEntry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a2);
}

void *std::vector<xgboost_old::tree::GradStats>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    a1[1] += 16 * a2;
  }
  return a1;
}

void sub_224325D54(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}::operator()(uint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t v5 = *a1;
  uint64_t result = xgboost_old::utils::Assert(*(_DWORD *)(*(void *)(*a1 + 104) + 4 * *(int *)(*(void *)(*a1 + 80) + 4 * a2)) == a2, "node2workindex inconsistent", a3);
  uint64_t v7 = *(void *)a1[3];
  if (*(void *)(a1[3] + 8) != v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = *(void *)a1[1] + 12 * a2;
    BOOL v10 = (float64x2_t *)(*(void *)(*(void *)(v5 + 200) + 16)
                        + 16
                        * *(unsigned int *)(**(void **)(v5 + 200) + 4
                                                                    * (a2 + a2 * *(void *)a1[2] + *(void *)a1[2])));
    do
    {
      unint64_t v11 = *(void **)(v5 + 200);
      uint64_t v12 = *v11 + 4 * a2 * (*(void *)a1[2] + 1);
      uint64_t v13 = *(unsigned int *)(v12 + 4 * v8);
      uint64_t v14 = v11[1] + 4 * v13;
      uint64_t v15 = v11[2] + 16 * v13;
      LODWORD(v12) = *(_DWORD *)(v12 + 4 * v8 + 4) - v13;
      v16[0] = v14;
      v16[1] = v15;
      int v17 = v12;
      uint64_t result = (uint64_t)xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::EnumerateSplit((float *)v5, (uint64_t)v16, v10, *(_DWORD *)(v7 + 4 * v8++), v9, (float64x2_t *)(*(void *)a1[4] + 16 * a2));
      uint64_t v7 = *(void *)a1[3];
    }
    while (v8 < (*(void *)(a1[3] + 8) - v7) >> 2);
  }
  return result;
}

float *xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::EnumerateSplit(float *result, uint64_t a2, float64x2_t *a3, unsigned int a4, uint64_t a5, float64x2_t *a6)
{
  int v6 = *(_DWORD *)(a2 + 16);
  if (v6)
  {
    double v7 = a3->f64[1];
    double v8 = result[5];
    double v9 = 0.0;
    if (v7 >= v8)
    {
      double v10 = a3->f64[0];
      float v11 = result[9];
      float v12 = result[7];
      if (v11 == 0.0)
      {
        if (v12 == 0.0)
        {
          double v13 = v10 * v10;
        }
        else
        {
          double v21 = v12;
          if (v10 <= v21)
          {
            double v22 = 0.0;
            if (v10 < -v21) {
              double v22 = v10 + v21;
            }
          }
          else
          {
            double v22 = v10 - v21;
          }
          double v13 = v22 * v22;
        }
        double v9 = v13 / (v7 + result[6]);
      }
      else
      {
        double v14 = v12;
        double v15 = a3->f64[0];
        if (v12 != 0.0)
        {
          double v15 = v10 + v14;
          if (v10 >= -v14) {
            double v15 = 0.0;
          }
          if (v10 > v14) {
            double v15 = v10 - v14;
          }
        }
        double v16 = v7 + result[6];
        double v17 = -v15 / v16;
        if (v17 > v11) {
          double v17 = v11;
        }
        double v18 = (float)-v11;
        if (v17 >= v18) {
          double v18 = v17;
        }
        double v19 = v16 * 0.5 * (v18 * v18) + v10 * v18;
        double v20 = v19 + v14 * fabs(v18);
        if (v12 != 0.0) {
          double v19 = v20;
        }
        double v9 = v19 * -2.0;
      }
    }
    uint64_t v24 = *(int **)a2;
    unint64_t v23 = *(float64x2_t **)(a2 + 8);
    float64x2_t v25 = 0uLL;
    uint64_t v26 = *(unsigned int *)(a2 + 16);
    unint64_t v27 = v23;
    do
    {
      float64x2_t v25 = vaddq_f64(v25, *v27);
      if (v25.f64[1] >= v8)
      {
        double v28 = a3->f64[1] - v25.f64[1];
        if (v28 >= v8)
        {
          double v29 = 0.0;
          double v30 = 0.0;
          if (v25.f64[1] >= v8)
          {
            float v31 = result[9];
            float v32 = result[7];
            if (v31 == 0.0)
            {
              if (v32 == 0.0)
              {
                double v30 = vmulq_f64(v25, v25).f64[0] / (v25.f64[1] + result[6]);
              }
              else
              {
                double v41 = v32;
                double v42 = v25.f64[0] + v41;
                if (v25.f64[0] >= -v41) {
                  double v42 = 0.0;
                }
                if (v25.f64[0] > v41) {
                  double v43 = v25.f64[0] - v41;
                }
                else {
                  double v43 = v42;
                }
                double v30 = v43 * v43 / (v25.f64[1] + result[6]);
              }
            }
            else
            {
              double v33 = v32;
              double v34 = v25.f64[0] + v32;
              if (v25.f64[0] >= -v32) {
                double v34 = 0.0;
              }
              if (v25.f64[0] > v33) {
                double v34 = v25.f64[0] - v33;
              }
              if (v32 == 0.0) {
                double v34 = v25.f64[0];
              }
              double v35 = v25.f64[1] + result[6];
              double v36 = -v34 / v35;
              if (v36 > v31) {
                double v36 = v31;
              }
              double v37 = (float)-v31;
              if (v36 >= v37) {
                double v37 = v36;
              }
              double v38 = v35 * 0.5 * (v37 * v37) + v25.f64[0] * v37;
              double v39 = v38 + v33 * fabs(v37);
              if (v32 == 0.0) {
                double v40 = v38;
              }
              else {
                double v40 = v39;
              }
              double v30 = v40 * -2.0;
            }
          }
          if (v28 >= v8)
          {
            double v44 = a3->f64[0] - v25.f64[0];
            float v45 = result[9];
            float v46 = result[7];
            if (v45 == 0.0)
            {
              if (v46 != 0.0)
              {
                double v47 = v46;
                double v48 = v44 + v47;
                if (v44 >= -v47) {
                  double v48 = 0.0;
                }
                if (v44 > v47) {
                  double v44 = v44 - v47;
                }
                else {
                  double v44 = v48;
                }
              }
              double v29 = v44 * v44 / (v28 + result[6]);
            }
            else
            {
              double v49 = v46;
              double v50 = v44 + v46;
              if (v44 >= -v46) {
                double v50 = 0.0;
              }
              if (v44 > v49) {
                double v50 = v44 - v49;
              }
              if (v46 == 0.0) {
                double v50 = a3->f64[0] - v25.f64[0];
              }
              double v51 = v28 + result[6];
              double v52 = -v50 / v51;
              if (v52 > v45) {
                double v52 = v45;
              }
              double v53 = (float)-v45;
              if (v52 >= v53) {
                double v53 = v52;
              }
              double v54 = v51 * 0.5 * (v53 * v53) + v44 * v53;
              double v55 = v54 + v49 * fabs(v53);
              if (v46 != 0.0) {
                double v54 = v55;
              }
              double v29 = v54 * -2.0;
            }
          }
          float v56 = v30 + v29 - v9;
          if ((*(_DWORD *)(a5 + 4) & 0x7FFFFFFFu) <= a4) {
            BOOL v57 = *(float *)a5 < v56;
          }
          else {
            BOOL v57 = *(float *)a5 <= v56;
          }
          if (v57)
          {
            int v58 = *v24;
            *(float *)a5 = v56;
            *(_DWORD *)(a5 + 4) = a4;
            *(_DWORD *)(a5 + 8) = v58;
            *a6 = v25;
          }
        }
      }
      ++v27;
      ++v24;
      --v26;
    }
    while (v26);
    uint64_t v59 = (v6 - 1);
    if (v6 != 1)
    {
      double v60 = *(int **)a2;
      int v61 = v6 - 2;
      float64x2_t v62 = 0uLL;
      do
      {
        float64x2_t v62 = vaddq_f64(v62, v23[v59]);
        if (v62.f64[1] >= v8)
        {
          float64x2_t v63 = vsubq_f64(*a3, v62);
          if (v63.f64[1] >= v8)
          {
            double v64 = 0.0;
            double v65 = 0.0;
            if (v62.f64[1] >= v8)
            {
              float v66 = result[9];
              float v67 = result[7];
              if (v66 == 0.0)
              {
                if (v67 == 0.0)
                {
                  double v65 = vmulq_f64(v62, v62).f64[0] / (v62.f64[1] + result[6]);
                }
                else
                {
                  double v76 = v67;
                  double v77 = v62.f64[0] + v76;
                  if (v62.f64[0] >= -v76) {
                    double v77 = 0.0;
                  }
                  if (v62.f64[0] > v76) {
                    double v78 = v62.f64[0] - v76;
                  }
                  else {
                    double v78 = v77;
                  }
                  double v65 = v78 * v78 / (v62.f64[1] + result[6]);
                }
              }
              else
              {
                double v68 = v67;
                double v69 = v62.f64[0] + v67;
                if (v62.f64[0] >= -v67) {
                  double v69 = 0.0;
                }
                if (v62.f64[0] > v68) {
                  double v69 = v62.f64[0] - v68;
                }
                if (v67 == 0.0) {
                  double v69 = v62.f64[0];
                }
                double v70 = v62.f64[1] + result[6];
                double v71 = -v69 / v70;
                if (v71 > v66) {
                  double v71 = v66;
                }
                double v72 = (float)-v66;
                if (v71 >= v72) {
                  double v72 = v71;
                }
                double v73 = v70 * 0.5 * (v72 * v72) + v62.f64[0] * v72;
                double v74 = v73 + v68 * fabs(v72);
                if (v67 == 0.0) {
                  double v75 = v73;
                }
                else {
                  double v75 = v74;
                }
                double v65 = v75 * -2.0;
              }
            }
            if (v63.f64[1] >= v8)
            {
              float v79 = result[9];
              float v80 = result[7];
              if (v79 == 0.0)
              {
                if (v80 == 0.0)
                {
                  double v64 = vmulq_f64(v63, v63).f64[0] / (v63.f64[1] + result[6]);
                }
                else
                {
                  double v88 = v80;
                  double v89 = v63.f64[0] + v88;
                  if (v63.f64[0] >= -v88) {
                    double v89 = 0.0;
                  }
                  if (v63.f64[0] > v88) {
                    double v90 = v63.f64[0] - v88;
                  }
                  else {
                    double v90 = v89;
                  }
                  double v64 = v90 * v90 / (v63.f64[1] + result[6]);
                }
              }
              else
              {
                double v81 = v80;
                double v82 = v63.f64[0] + v80;
                if (v63.f64[0] >= -v80) {
                  double v82 = 0.0;
                }
                if (v63.f64[0] > v81) {
                  double v82 = v63.f64[0] - v81;
                }
                if (v80 == 0.0) {
                  double v82 = v63.f64[0];
                }
                double v83 = v63.f64[1] + result[6];
                double v84 = -v82 / v83;
                if (v84 > v79) {
                  double v84 = v79;
                }
                double v85 = (float)-v79;
                if (v84 >= v85) {
                  double v85 = v84;
                }
                double v86 = v83 * 0.5 * (v85 * v85) + v63.f64[0] * v85;
                double v87 = v86 + v81 * fabs(v85);
                if (v80 != 0.0) {
                  double v86 = v87;
                }
                double v64 = v86 * -2.0;
              }
            }
            float v91 = v65 + v64 - v9;
            if ((*(_DWORD *)(a5 + 4) & 0x7FFFFFFFu) <= a4) {
              BOOL v92 = *(float *)a5 < v91;
            }
            else {
              BOOL v92 = *(float *)a5 <= v91;
            }
            if (v92)
            {
              int v93 = v60[v61];
              *(float *)a5 = v91;
              *(_DWORD *)(a5 + 4) = a4 | 0x80000000;
              *(_DWORD *)(a5 + 8) = v93;
              *a6 = v63;
            }
          }
        }
        --v61;
        --v59;
      }
      while (v59);
    }
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246F0058 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246F0058 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t result, uint64_t a2, const char *a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 < *(void *)(result + 16))
  {
    uint64_t v4 = result;
    do
      uint64_t result = xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}::operator()(*(uint64_t **)v4, v3++, a3);
    while (v3 < *(void *)(v4 + 16));
  }
  return result;
}

turi::thread_pool *xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(turi::thread *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, void *a7)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v14 = turi::thread::cpu_count(a1);
  std::vector<std::vector<xgboost_old::tree::GradStats>>::resize(a6, v14);
  std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)a7, *(int *)(a4 + 100));
  double v15 = operator new(0x20uLL);
  *double v15 = &unk_26D7790C8;
  v15[1] = a6;
  v15[2] = a4;
  void v15[3] = a1;
  double v29 = v15;
  turi::in_parallel((turi::thread_pool *)v28);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v28);
  double v16 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 64))(a3);
  unint64_t v17 = ((v16[1] - *v16) >> 2);
  v28[0] = v16;
  v28[1] = a1;
  v28[2] = a6;
  double v29 = a2;
  uint64_t v30 = a5;
  uint64_t result = turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long)#1}>(0, v17, (uint64_t)v28);
  uint64_t v19 = *((void *)a1 + 10);
  if (*((void *)a1 + 11) != v19)
  {
    unint64_t v20 = 0;
    do
    {
      uint64_t v21 = *(int *)(v19 + 4 * v20);
      double v22 = (float64x2_t *)(*a7 + 16 * v21);
      v22->f64[0] = 0.0;
      v22->f64[1] = 0.0;
      unint64_t v23 = (uint64_t *)*a6;
      uint64_t v24 = a6[1] - *a6;
      if (v24)
      {
        unint64_t v25 = v24 / 24;
        if (v25 <= 1) {
          unint64_t v25 = 1;
        }
        v26.f64[0] = 0.0;
        v26.f64[1] = v22->f64[1];
        do
        {
          uint64_t v27 = *v23;
          v23 += 3;
          float64x2_t v26 = vaddq_f64(*(float64x2_t *)(v27 + 16 * v21), v26);
          *double v22 = v26;
          --v25;
        }
        while (v25);
      }
      ++v20;
      uint64_t v19 = *((void *)a1 + 10);
    }
    while (v20 < (*((void *)a1 + 11) - v19) >> 2);
  }
  return result;
}

void sub_224326734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 136 * a2;
    while (v3 != v7)
    {
      v3 -= 136;
      std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void std::vector<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 40 * a2;
    while (v3 != v7)
    {
      double v8 = *(void **)(v3 - 24);
      if (v8)
      {
        *(void *)(v3 - 16) = v8;
        operator delete(v8);
      }
      v3 -= 40;
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<xgboost_old::tree::GradStats>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<xgboost_old::tree::GradStats>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        double v10 = *(void **)(v8 - 24);
        v8 -= 24;
        double v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

turi::thread_pool *turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v18 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    double v13 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v13);
    double v14 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v15 = (unint64_t)((double)v5 + v14 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v15 = a2;
    }
    void v16[2] = (unint64_t)((double)v5 + v14 * (double)0);
    void v16[3] = v15;
    v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::GradStats const&)::{lambda(void)#1}>(xgboost_old::tree::GradStats)::stored_vtable
           + 1;
    v16[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v17, v16);
  }
  if (a2 > v5)
  {
    do
    {
      uint64_t v10 = *(unsigned int *)(**(void **)a3 + 4 * v5);
      uint64_t v11 = *(unsigned int *)(*(void *)(*(void *)(a3 + 8) + 128) + 4 * v10);
      uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(result);
      if ((v11 & 0x80000000) == 0)
      {
        uint64_t v12 = *(void *)(**(void **)(a3 + 16) + 24 * *(int *)result);
        *(float64x2_t *)(v12 + 16 * v11) = vaddq_f64(*(float64x2_t *)(v12 + 16 * v11), vcvtq_f64_f32(*(float32x2_t *)(**(void **)(a3 + 24) + 8 * v10)));
      }
      ++v5;
    }
    while (a2 != v5);
  }
  return result;
}

void sub_224326AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<xgboost_old::tree::GradStats>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v15 = v12;
    double v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    unint64_t v17 = &v16[v14];
    std::vector<std::vector<xgboost_old::tree::GradStats>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_224326C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26D7790C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7790C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(a1 + 8, a2);
}

uint64_t std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = **(void **)a1 + 24 * *a2;
  unint64_t v7 = *(int *)(v4 + 100);
  long long v11 = 0uLL;
  std::vector<xgboost_old::tree::GradStats>::resize(v6, v7, &v11);
  uint64_t v8 = *(void *)(v5 + 80);
  if (*(void *)(v5 + 88) != v8)
  {
    unint64_t v9 = 0;
    do
    {
      unint64_t v10 = (void *)(*(void *)(**(void **)a1 + 24 * v3) + 16 * *(unsigned int *)(v8 + 4 * v9));
      void *v10 = 0;
      v10[1] = 0;
      ++v9;
      uint64_t v8 = *(void *)(v5 + 80);
    }
    while (v9 < (*(void *)(v5 + 88) - v8) >> 2);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::GradStats const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246F030ELL & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)(0x80000002246F030ELL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::GradStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::GradStats>> *,std::vector<xgboost_old::tree::GradStats>*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::GradStats const&)::{lambda(void)#1},void>::invoke(void *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    unint64_t v2 = result;
    do
    {
      uint64_t v3 = (void **)*v2;
      uint64_t v4 = *(unsigned int *)(**(void **)*v2 + 4 * v1);
      uint64_t v5 = *(unsigned int *)(*(void *)(*(void *)(*v2 + 8) + 128) + 4 * v4);
      __n128 result = turi::thread::get_tls_data((turi::thread *)result);
      if ((v5 & 0x80000000) == 0)
      {
        uint64_t v6 = *(void *)(*v3[2] + 24 * *(int *)result);
        *(float64x2_t *)(v6 + 16 * v5) = vaddq_f64(*(float64x2_t *)(v6 + 16 * v5), vcvtq_f64_f32(*(float32x2_t *)(*v3[3] + 8 * v4)));
      }
      ++v1;
    }
    while (v1 < v2[2]);
  }
  return result;
}

void std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xF0F0F0F0F0F0F0F1 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 136 * ((136 * a2 - 136) / 0x88) + 136;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1E1E1E1E1E1E1E1) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xF0F0F0F0F0F0F0) {
      unint64_t v11 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v15 = v12;
    double v16 = &v12[136 * v8];
    uint64_t v18 = &v12[136 * v11];
    size_t v14 = 136 * ((136 * a2 - 136) / 0x88) + 136;
    bzero(v16, v14);
    unint64_t v17 = &v16[v14];
    std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<xgboost_old::utils::WXQuantileSketch<float,float>>::~__split_buffer(&v15);
  }
}

void sub_22432708C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<xgboost_old::utils::WXQuantileSketch<float,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 136;
      xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::QuantileSketchTemplate(v7 - 136, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 136;
      *((void *)&v15 + 1) -= 136;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_2243271C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::QuantileSketchTemplate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<xgboost_old::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost_old::tree::GradStats*,xgboost_old::tree::GradStats*>((void *)(a1 + 48), *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 4);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<xgboost_old::tree::GradStats>::__init_with_size[abi:ne180100]<xgboost_old::tree::GradStats*,xgboost_old::tree::GradStats*>((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 4);
  xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer::SummaryContainer(a1 + 96, a2 + 96);
  return a1;
}

void sub_22432727C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer::SummaryContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (a1 == a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::__assign_with_size[abi:ne180100]<xgboost_old::utils::WQSummary<float,float>::Entry*,xgboost_old::utils::WQSummary<float,float>::Entry*>((char *)(a1 + 16), *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 4);
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 24);
  }
  if (v5 == v4) {
    uint64_t v4 = 0;
  }
  *(void *)a1 = v4;
  return a1;
}

void sub_224327344(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::__assign_with_size[abi:ne180100]<xgboost_old::utils::WQSummary<float,float>::Entry*,xgboost_old::utils::WQSummary<float,float>::Entry*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<turi::flexible_type>::__vallocate[abi:ne180100](v7, v11);
    char v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  double v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  char *v12 = &v9[v17];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>,std::reverse_iterator<xgboost_old::utils::WXQuantileSketch<float,float>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>::destroy[abi:ne180100](v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<xgboost_old::utils::WXQuantileSketch<float,float>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<xgboost_old::utils::WXQuantileSketch<float,float>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 136;
    std::allocator<xgboost_old::utils::WXQuantileSketch<float,float>>::destroy[abi:ne180100](v4, i - 136);
  }
}

void std::vector<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v15 = v12;
    double v16 = &v12[40 * v8];
    uint64_t v18 = &v12[40 * v11];
    size_t v14 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v16, v14);
    size_t v17 = &v16[v14];
    std::vector<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2243276C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 40;
      xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer::SummaryContainer(v7 - 40, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 40;
      *((void *)&v15 + 1) -= 40;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_2243277FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(void *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 40;
  }
}

uint64_t std::__split_buffer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 40;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
}

void rabit::SerializeReducer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>::Allreduce(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8 = a4;
  uint64_t v12 = (void *)(a1 + 32);
  std::string::resize((std::string *)(a1 + 32), a4 * a3, 0);
  v29[0] = a2;
  v29[1] = a3;
  v29[2] = v8;
  void v29[3] = a5;
  v29[4] = a6;
  v29[5] = v12;
  if (*(char *)(a1 + 55) < 0)
  {
    if (*(void *)(a1 + 40)) {
      char v13 = *(void **)(a1 + 32);
    }
    else {
      char v13 = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 55))
  {
    char v13 = v12;
  }
  else
  {
    char v13 = 0;
  }
  rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)a1, v13, a3, v8, (uint64_t (*)(void *, void *))rabit::SerializeReduceClosure<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>::Invoke, v29);
  if (v8)
  {
    uint64_t v15 = 0;
    double v16 = (uint64_t *)(a2 + 16);
    do
    {
      if (*(char *)(a1 + 55) < 0)
      {
        if (*(void *)(a1 + 40)) {
          size_t v17 = *(void **)(a1 + 32);
        }
        else {
          size_t v17 = 0;
        }
      }
      else if (*(unsigned char *)(a1 + 55))
      {
        size_t v17 = v12;
      }
      else
      {
        size_t v17 = 0;
      }
      uint64_t v26 = (uint64_t)v17 + v15;
      unint64_t v27 = a3;
      size_t v28 = 0;
      xgboost_old::utils::Assert(a3 > 7, "read can not have position excceed buffer length", v14, &unk_26D779028);
      size_t v19 = v28;
      if (v27 - v28 >= 8) {
        size_t v20 = 8;
      }
      else {
        size_t v20 = v27 - v28;
      }
      if (v20) {
        memcpy(v16 - 1, (const void *)(v26 + v28), v20);
      }
      size_t v28 = v20 + v19;
      xgboost_old::utils::Check(v20 != 0, "invalid SummaryArray 1", v18);
      unint64_t v21 = *(v16 - 1);
      if (v21 > (v16[1] - *v16) >> 4)
      {
        std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)v16, v21);
        if (v16[1] == *v16) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = *v16;
        }
        *(v16 - 2) = v22;
        unint64_t v21 = *(v16 - 1);
      }
      if (v21)
      {
        BOOL v23 = (*v25)(&v25, *(v16 - 2), 16 * v21) != 0;
        xgboost_old::utils::Check(v23, "invalid SummaryArray 2", v24);
      }
      v16 += 5;
      v15 += a3;
      --v8;
    }
    while (v8);
  }
}

uint64_t rabit::SerializeReduceClosure<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>::Invoke(uint64_t result, uint64_t a2, const char *a3)
{
  uint64_t v3 = (uint64_t *)result;
  uint64_t v4 = *(uint64_t (**)(void))(result + 24);
  if (v4) {
    uint64_t result = v4(*(void *)(result + 32));
  }
  if (v3[2])
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = (uint64_t **)v3[5];
      int v8 = *((char *)v7 + 23);
      if (v8 < 0)
      {
        uint64_t v7 = (uint64_t **)*v7;
        BOOL v9 = *(void *)(v3[5] + 8) == 0;
      }
      else
      {
        BOOL v9 = v8 == 0;
      }
      if (v9) {
        uint64_t v7 = 0;
      }
      uint64_t v11 = *v3;
      unint64_t v10 = v3[1];
      long long v14 = (uint64_t (**)(void **, void, uint64_t))&unk_26D779028;
      uint64_t v15 = (uint64_t)v7 + v10 * v6;
      unint64_t v16 = v10;
      uint64_t v17 = 0;
      uint64_t v12 = (void *)(v11 + v5);
      uint64_t result = xgboost_old::utils::Assert(v10 > 7, "write position exceed fixed buffer size", a3);
      *(void *)(v15 + v17) = v12[1];
      v17 += 8;
      uint64_t v13 = v12[1];
      if (v13) {
        uint64_t result = v14[1]((void **)&v14, *v12, 16 * v13);
      }
      ++v6;
      v5 += 40;
    }
    while (v6 < v3[2]);
  }
  return result;
}

void std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D779168;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D779168;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator()(a1 + 8);
}

uint64_t std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  long long v3 = (uint64_t *)(*(void *)a1 + 352);
  int v4 = turi::thread::cpu_count((turi::thread *)a1);
  std::vector<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>::resize(v3, v4);
  uint64_t v5 = (void *)(*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 64))(**(void **)(a1 + 8));
  uint64_t v19 = (uint64_t)(v5[1] - *v5) >> 2;
  uint64_t v6 = (*(uint64_t (**)(void, void *))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8), v2 + 41);
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 24))(v6))
  {
    do
    {
      int v8 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
      unint64_t v9 = *v8;
      *(void *)&long long v16 = v2;
      *((void *)&v16 + 1) = v8;
      *(_OWORD *)std::vector<unsigned int> __p = *(_OWORD *)(a1 + 16);
      uint64_t v18 = &v19;
      turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(0, v9, (uint64_t)&v16);
    }
    while (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6) & 1) != 0);
  }
  uint64_t v10 = v2[66];
  if (v2[67] == v10)
  {
    unint64_t v14 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      uint64_t v18 = 0;
      long long v16 = 0u;
      *(_OWORD *)std::vector<unsigned int> __p = 0u;
      xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::GetSummary((uint64_t *)(v10 + v12), (char *)&v16);
      xgboost_old::utils::WXQSummary<float,float>::SetPrune((void *)(v2[56] + v11), (const char *)&v16, **(unsigned int **)(a1 + 32));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v13;
      uint64_t v10 = v2[66];
      unint64_t v14 = 0xF0F0F0F0F0F0F0F1 * ((v2[67] - v10) >> 3);
      v12 += 136;
      v11 += 40;
    }
    while (v13 < v14);
  }
  return xgboost_old::utils::Assert(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v2[57] - v2[56]) >> 3) == v14, "shape mismatch", v7);
}

void sub_224327FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        unint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  v22[24] = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v18 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v22, v18);
    double v19 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v20 = (unint64_t)((double)v5 + v19 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v20 = a2;
    }
    v21[2] = (unint64_t)((double)v5 + v19 * (double)0);
    v21[3] = v20;
    v21[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v21[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v22, v21);
  }
  if (a2 > v5)
  {
    uint64_t v10 = 16 * v5;
    do
    {
      uint64_t v11 = *(void **)a3;
      unsigned int v12 = *(_DWORD *)(*(void *)(*(void *)a3 + 304)
                      + 4 * *(unsigned int *)(*(void *)(*(void *)(a3 + 8) + 8) + 4 * v5));
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(tls_data);
      if ((v12 & 0x80000000) == 0)
      {
        int v13 = *(_DWORD *)tls_data;
        unint64_t v14 = *(uint64_t **)(a3 + 16);
        uint64_t v15 = (uint64_t *)(*(void *)(*(void *)(a3 + 8) + 16) + v10);
        uint64_t v17 = *v15;
        uint64_t v16 = v15[1];
        v22[0] = v17;
        v22[1] = v16;
        xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::UpdateSketchCol((uint64_t)v11, v14, v22, *(void *)(a3 + 24), v11 + 53, v11 + 41, v12, **(void **)(a3 + 32) == v16, (uint64_t *)(v11[44] + 24 * v13));
      }
      ++v5;
      v10 += 16;
    }
    while (a2 != v5);
  }
}

void sub_224328230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void *xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::GetSummary(uint64_t *a1, char *a2)
{
  if (a1[7] == a1[6]) {
    unint64_t v4 = (a1[1] - *a1) >> 3;
  }
  else {
    unint64_t v4 = 2 * a1[5];
  }
  if (v4 > (uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 4)
  {
    std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)(a2 + 16), v4);
    if (*((void *)a2 + 3) == *((void *)a2 + 2)) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = *((void *)a2 + 2);
    }
    *(void *)a2 = v5;
  }
  unint64_t v6 = a1[3];
  unint64_t v7 = 126 - 2 * __clz(v6);
  if (v6) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,false>(*a1, (float *)(*a1 + 8 * v6), (uint64_t)&v33, v8, 1);
  *((void *)a2 + 1) = 0;
  unint64_t v9 = a1[3];
  if (v9)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = *a1;
    int v13 = *(char **)a2;
    uint64_t v14 = *a1 + 12;
    float v15 = 0.0;
    do
    {
      uint64_t v16 = (float *)(v12 + 8 * v11);
      unint64_t v17 = v11 + 1;
      float v19 = *v16;
      float v18 = v16[1];
      if (v11 + 1 < v9)
      {
        unint64_t v20 = (float *)(v14 + 8 * v11);
        while (*(v20 - 1) == v19)
        {
          float v21 = *v20;
          v20 += 2;
          float v18 = v18 + v21;
          if (v9 == ++v17)
          {
            unint64_t v17 = v9;
            break;
          }
        }
      }
      uint64_t v22 = (float *)&v13[16 * v10];
      *uint64_t v22 = v15;
      float v15 = v15 + v18;
      ++v10;
      v22[1] = v15;
      unint64_t v22[2] = v18;
      uint64_t v22[3] = v19;
      unint64_t v11 = v17;
    }
    while (v17 < v9);
    *((void *)a2 + 1) = v10;
  }
  else
  {
    unint64_t v10 = 0;
  }
  __n128 result = (void *)a1[6];
  unint64_t v24 = a1[5];
  if ((void *)a1[7] == result)
  {
    if (v10 <= v24) {
      return result;
    }
    uint64_t v25 = (uint64_t)(a1 + 12);
    if (v24 > (a1[15] - a1[14]) >> 4)
    {
      std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)(a1 + 14), a1[5]);
      if (a1[15] == a1[14]) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = a1[14];
      }
      a1[12] = v31;
      unint64_t v24 = a1[5];
    }
    xgboost_old::utils::WXQSummary<float,float>::SetPrune(a1 + 12, a2, v24);
    uint64_t v30 = a1 + 13;
  }
  else
  {
    xgboost_old::utils::WXQSummary<float,float>::SetPrune(result, a2, v24);
    uint64_t v25 = a1[6];
    if ((unint64_t)(a1[7] - v25) >= 0x11)
    {
      uint64_t v26 = 0;
      unint64_t v27 = 1;
      do
      {
        uint64_t v28 = *(void *)(v25 + v26 + 24);
        if (v28)
        {
          double v29 = (const void **)(v25 + v26 + 16);
          if (*(void *)(v25 + 8))
          {
            xgboost_old::utils::WQSummary<float,float>::SetCombine((void **)a2, v25, (uint64_t)v29);
            xgboost_old::utils::WXQSummary<float,float>::SetPrune((void *)a1[6], a2, a1[5]);
          }
          else
          {
            *(void *)(v25 + 8) = v28;
            memcpy(*(void **)v25, *v29, 16 * v28);
          }
        }
        ++v27;
        uint64_t v25 = a1[6];
        v26 += 16;
      }
      while (v27 < (a1[7] - v25) >> 4);
    }
    uint64_t v30 = (uint64_t *)(v25 + 8);
  }
  uint64_t v32 = *v30;
  *((void *)a2 + 1) = v32;
  return memcpy(*(void **)a2, *(const void **)v25, 16 * v32);
}

void std::vector<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    float v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    float v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    unint64_t v17 = &v16[v14];
    std::vector<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2243285F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>,std::reverse_iterator<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::UpdateSketchCol(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t *a5, void *a6, unsigned int a7, char a8, uint64_t *a9)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  if (!a3[2]) {
    return;
  }
  std::vector<xgboost_old::tree::BaseMaker::SketchEntry>::resize((uint64_t)a9, *(int *)(a4 + 100));
  unint64_t v17 = *(unsigned int **)(a1 + 80);
  float v18 = *(unsigned int **)(a1 + 88);
  if (v18 == v17)
  {
    if (a8) {
      goto LABEL_17;
    }
LABEL_12:
    uint64_t v33 = a3[2];
    if (v33)
    {
      double v34 = *(unsigned int **)a3;
      uint64_t v35 = *(void *)(a1 + 128);
      uint64_t v36 = *a2;
      do
      {
        unsigned int v38 = *v34;
        v34 += 2;
        uint64_t v37 = v38;
        unsigned int v39 = *(_DWORD *)(v35 + 4 * v38);
        if ((v39 & 0x80000000) == 0) {
          *(double *)(*a9 + 48 * v39) = *(double *)(*a9 + 48 * v39) + *(float *)(v36 + 8 * v37 + 4);
        }
        --v33;
      }
      while (v33);
    }
    goto LABEL_17;
  }
  unint64_t v19 = v18 - v17;
  uint64_t v20 = *(void *)(a1 + 104);
  uint64_t v21 = *a9;
  uint64_t v22 = (uint64_t)(a6[1] - *a6) >> 2;
  if (v19 <= 1) {
    unint64_t v19 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 528);
  unint64_t v24 = *(unsigned int **)(a1 + 80);
  unint64_t v25 = v19;
  do
  {
    unsigned int v26 = *v24++;
    uint64_t v27 = *(unsigned int *)(v20 + 4 * v26);
    uint64_t v16 = v21 + 48 * v26;
    *(void *)uint64_t v16 = 0;
    *(void *)(v16 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v23 + 136 * (a7 + v22 * v27);
    --v25;
  }
  while (v25);
  if ((a8 & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v28 = *a5;
  uint64_t v29 = *a9;
  uint64_t v30 = v17;
  do
  {
    unsigned int v31 = *v30++;
    float v32 = *(double *)(v28 + 16 * v31 + 8);
    *(double *)(v29 + 48 * v31) = v32;
    --v19;
  }
  while (v19);
LABEL_17:
  if (*(float *)(*(void *)a3 + 4) == *(float *)(*(void *)a3 + 8 * (a3[2] - 1) + 4))
  {
    if (v18 != v17)
    {
      unint64_t v40 = 0;
      do
      {
        uint64_t v41 = *a9 + 48 * (int)v17[v40];
        float v42 = *(double *)v41;
        xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::Push(*(uint64_t **)(v41 + 40), *(float *)(*(void *)a3 + 4), v42);
        ++v40;
        unint64_t v17 = *(unsigned int **)(a1 + 80);
      }
      while (v40 < (uint64_t)(*(void *)(a1 + 88) - (void)v17) >> 2);
    }
  }
  else
  {
    unint64_t v96 = a2;
    uint64_t v97 = (const char *)(float)(*(float *)(a1 + 60) / *(float *)(a1 + 56));
    xgboost_old::utils::Check(v97 != 0, "sketch_ratio/sketch_eps must be bigger than 1", (const char *)v16);
    uint64_t v44 = *(void *)(a1 + 80);
    if (*(void *)(a1 + 88) != v44)
    {
      unint64_t v45 = 0;
      unint64_t v46 = (v97 + 1);
      do
      {
        uint64_t v47 = *a9 + 48 * *(int *)(v44 + 4 * v45);
        double v50 = *(void **)(v47 + 40);
        double v49 = (void *)(v47 + 40);
        double v48 = v50;
        *(v49 - 1) = 0xBFF0000000000000;
        *(v49 - 4) = 0;
        *(v49 - 3) = 0;
        uint64_t v51 = (uint64_t)(v50 + 14);
        if (v46 > (uint64_t)(v50[15] - v50[14]) >> 4)
        {
          std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize(v51, v46);
          if (v48[15] == v48[14]) {
            uint64_t v52 = 0;
          }
          else {
            uint64_t v52 = v48[14];
          }
          v48[12] = v52;
          double v48 = (void *)*v49;
        }
        v48[13] = 0;
        ++v45;
        uint64_t v44 = *(void *)(a1 + 80);
      }
      while (v45 < (*(void *)(a1 + 88) - v44) >> 2);
    }
    unint64_t v53 = a3[2];
    if (*(_DWORD *)(a1 + 72))
    {
      unint64_t v54 = a3[2];
      unint64_t v55 = v53 & 0xFFFFFFE0;
      float v56 = v96;
      if ((v53 & 0xFFFFFFE0) != 0)
      {
        unint64_t v94 = a3[2];
        unint64_t v95 = v53 & 0xFFFFFFE0;
        uint64_t v57 = 0;
        unint64_t v58 = 0;
        do
        {
          uint64_t v59 = 0;
          uint64_t v60 = *(void *)(a1 + 128);
          uint64_t v61 = *v56;
          float64x2_t v62 = (unsigned int *)(*(void *)a3 + v57);
          do
          {
            unsigned int v63 = *v62;
            v62 += 2;
            *(_DWORD *)&v99[v59] = *(_DWORD *)(v60 + 4 * v63);
            *(_DWORD *)&v98[v59] = *(_DWORD *)(v61 + 8 * v63 + 4);
            v59 += 4;
          }
          while (v59 != 128);
          double v64 = (unsigned int *)v99;
          double v65 = (float *)v98;
          for (uint64_t i = 4; i != 260; i += 8)
          {
            unsigned int v68 = *v64++;
            unsigned int v67 = v68;
            if ((v68 & 0x80000000) == 0) {
              xgboost_old::tree::BaseMaker::SketchEntry::Push((xgboost_old::tree::BaseMaker::SketchEntry *)(*a9 + 48 * v67), *(float *)(*(void *)a3 + v57 + i), *v65, v97, v43);
            }
            ++v65;
          }
          v58 += 32;
          v57 += 256;
          unint64_t v55 = v95;
          float v56 = v96;
        }
        while (v58 < v95);
        unint64_t v54 = a3[2];
        unint64_t v53 = v94;
      }
      if (v55 < v54)
      {
        uint64_t v69 = (8 * v53) & 0x7FFFFFF00;
        do
        {
          uint64_t v70 = *(unsigned int *)(*(void *)a3 + v69);
          unsigned int v71 = *(_DWORD *)(*(void *)(a1 + 128) + 4 * v70);
          if ((v71 & 0x80000000) == 0)
          {
            xgboost_old::tree::BaseMaker::SketchEntry::Push((xgboost_old::tree::BaseMaker::SketchEntry *)(*a9 + 48 * v71), *(float *)(*(void *)a3 + v69 + 4), *(float *)(*v56 + 8 * v70 + 4), v97, v43);
            unint64_t v54 = a3[2];
          }
          ++v55;
          v69 += 8;
        }
        while (v55 < v54);
      }
    }
    else if (a3[2])
    {
      uint64_t v72 = 0;
      unint64_t v73 = 0;
      do
      {
        uint64_t v74 = *(unsigned int *)(*(void *)a3 + v72);
        unsigned int v75 = *(_DWORD *)(*(void *)(a1 + 128) + 4 * v74);
        if ((v75 & 0x80000000) == 0)
        {
          xgboost_old::tree::BaseMaker::SketchEntry::Push((xgboost_old::tree::BaseMaker::SketchEntry *)(*a9 + 48 * v75), *(float *)(*(void *)a3 + v72 + 4), *(float *)(*v96 + 8 * v74 + 4), v97, v43);
          unint64_t v53 = a3[2];
        }
        ++v73;
        v72 += 8;
      }
      while (v73 < v53);
    }
    uint64_t v76 = *(void *)(a1 + 80);
    if (*(void *)(a1 + 88) != v76)
    {
      unint64_t v77 = 0;
      do
      {
        int v78 = *(_DWORD *)(v76 + 4 * v77);
        uint64_t v79 = *a9;
        uint64_t v80 = *a9 + 48 * v78;
        double v82 = *(double *)(v80 + 8);
        uint64_t v81 = v80 + 8;
        double v83 = v82;
        uint64_t v85 = v81 + 32;
        double v84 = *(void **)(v81 + 32);
        unint64_t v86 = v84[13];
        if (!v86 || *(float *)(v79 + 48 * v78 + 24) > *(float *)(v84[12] + 16 * v86 - 4))
        {
          double v87 = v83 + *(double *)(v81 + 8);
          xgboost_old::utils::Assert(v86 <= (unint64_t)v97, "Finalize: invalid maximum size, max_size=%zu, stemp.size=%u", v43, v86, v97);
          float v88 = *(double *)v81;
          float v89 = v87;
          float v90 = *(double *)(v81 + 8);
          int v91 = *(_DWORD *)(v79 + 48 * v78 + 24);
          double v84 = *(void **)v85;
          uint64_t v92 = *(void *)(*(void *)v85 + 104);
          uint64_t v93 = *(void *)(*(void *)v85 + 96) + 16 * v92;
          *(float *)uint64_t v93 = v88;
          *(float *)(v93 + 4) = v89;
          *(float *)(v93 + 8) = v90;
          *(_DWORD *)(v93 + 12) = v91;
          v84[13] = v92 + 1;
        }
        xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::PushTemp(v84);
        ++v77;
        uint64_t v76 = *(void *)(a1 + 80);
      }
      while (v77 < (*(void *)(a1 + 88) - v76) >> 2);
    }
  }
}

void std::vector<xgboost_old::tree::BaseMaker::SketchEntry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<xgboost_old::tree::BaseMaker::SketchEntry>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 48 * a2;
  }
}

void xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::Push(uint64_t *a1, float a2, float a3)
{
  if (a3 != 0.0)
  {
    uint64_t v36 = v6;
    uint64_t v37 = v5;
    uint64_t v38 = v3;
    uint64_t v39 = v4;
    unint64_t v10 = a1[3];
    uint64_t v11 = *a1;
    uint64_t v13 = a1[1] - v11;
    if (v10 == v13 >> 3)
    {
      if (v13 == 8)
      {
        std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)a1, 2 * a1[5]);
      }
      else
      {
        unint64_t v14 = 2 * a1[5];
        if (v14 > (a1[15] - a1[14]) >> 4)
        {
          std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)(a1 + 14), v14);
          if (a1[15] == a1[14]) {
            uint64_t v15 = 0;
          }
          else {
            uint64_t v15 = a1[14];
          }
          a1[12] = v15;
          uint64_t v11 = *a1;
          unint64_t v10 = a1[3];
        }
        unint64_t v16 = 126 - 2 * __clz(v10);
        if (v10) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,false>(v11, (float *)(v11 + 8 * v10), (uint64_t)&v35, v17, 1);
        a1[13] = 0;
        unint64_t v18 = a1[3];
        if (v18)
        {
          uint64_t v19 = 0;
          unint64_t v20 = 0;
          uint64_t v21 = *a1;
          uint64_t v22 = a1[12];
          uint64_t v23 = *a1 + 12;
          float v24 = 0.0;
          do
          {
            unint64_t v25 = (float *)(v21 + 8 * v20);
            unint64_t v26 = v20 + 1;
            float v28 = *v25;
            float v27 = v25[1];
            if (v20 + 1 < v18)
            {
              uint64_t v29 = (float *)(v23 + 8 * v20);
              while (*(v29 - 1) == v28)
              {
                float v30 = *v29;
                v29 += 2;
                float v27 = v27 + v30;
                if (v18 == ++v26)
                {
                  unint64_t v26 = v18;
                  break;
                }
              }
            }
            unsigned int v31 = (float *)(v22 + 16 * v19);
            *unsigned int v31 = v24;
            float v24 = v24 + v27;
            ++v19;
            v31[1] = v24;
            void v31[2] = v27;
            void v31[3] = v28;
            unint64_t v20 = v26;
          }
          while (v26 < v18);
          a1[13] = v19;
        }
        a1[3] = 0;
        xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::PushTemp(a1);
      }
    }
    uint64_t v32 = a1[3];
    uint64_t v33 = *a1;
    if (v32 && *(float *)(v33 + 8 * (v32 - 1)) == a2)
    {
      *(float *)(v33 + 8 * (v32 - 1) + 4) = *(float *)(v33 + 8 * (v32 - 1) + 4) + a3;
    }
    else
    {
      a1[3] = v32 + 1;
      double v34 = (float *)(v33 + 8 * v32);
      *double v34 = a2;
      v34[1] = a3;
    }
  }
}

void xgboost_old::tree::BaseMaker::SketchEntry::Push(xgboost_old::tree::BaseMaker::SketchEntry *this, float a2, float a3, const char *a4, const char *a5)
{
  double v8 = *((double *)this + 4);
  if (v8 == -1.0)
  {
    *((void *)this + 4) = 0;
    *((float *)this + 6) = a2;
    double v9 = a3;
LABEL_3:
    *((double *)this + 2) = v9;
    return;
  }
  float v10 = *((float *)this + 6);
  if (v10 == a2)
  {
    double v9 = *((double *)this + 2) + a3;
    goto LABEL_3;
  }
  double v12 = *((double *)this + 1);
  double v11 = *((double *)this + 2);
  double v13 = v12 + v11;
  if (v12 + v11 >= v8)
  {
    unsigned int v14 = a4;
    uint64_t v15 = *((void *)this + 5);
    unint64_t v16 = *(void *)(v15 + 104);
    if (v16 == a4)
    {
      rabit::TrackerPrintf((rabit *)"INFO: rmax=%g, sum_total=%g, next_goal=%g, size=%lu\n", a4, v12 + v11, *(void *)this, *(void *)&v8, *(void *)(v15 + 104));
    }
    else
    {
      uint64_t v17 = *(void *)(v15 + 96);
      if (!v16 || v10 > *(float *)(v17 + 16 * v16 - 4))
      {
        float v18 = v12;
        float v19 = v13;
        float v20 = v11;
        uint64_t v21 = (float *)(v17 + 16 * v16);
        *uint64_t v21 = v18;
        v21[1] = v19;
        v21[2] = v20;
        v21[3] = v10;
        xgboost_old::utils::Assert(v16 < a4, "invalid maximum size max_size=%u, stemp.size=%lu\n", a5, a4, v16);
        uint64_t v22 = *((void *)this + 5);
        unint64_t v16 = *(void *)(v22 + 104) + 1;
        *(void *)(v22 + 104) = v16;
      }
      if (v16 == v14)
      {
        double v23 = *(double *)this * 2.0 + 0.00000999999975;
      }
      else
      {
        float v24 = *(double *)this * (double)v16 / (double)v14;
        double v23 = v24;
      }
      *((double *)this + 4) = v23;
    }
  }
  *((double *)this + 1) = v13;
  *((double *)this + 2) = a3;
  *((float *)this + 6) = a2;
}

void std::vector<xgboost_old::tree::BaseMaker::SketchEntry>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      double v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v4, v11);
    }
    else {
      double v12 = 0;
    }
    unsigned int v14 = &v12[48 * v8];
    uint64_t v15 = &v12[48 * v11];
    size_t v16 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    float v19 = (char *)*a1;
    float v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 3);
        long long v21 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 48;
        v18 -= 48;
      }
      while (v18 != v19);
      float v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::PushTemp(void *a1)
{
  uint64_t v3 = a1[14];
  uint64_t v2 = (uint64_t)(a1 + 14);
  uint64_t v4 = (char *)(v2 - 16);
  unint64_t v5 = 2 * *(void *)(v2 - 72);
  if (v5 > (*(void *)(v2 + 8) - v3) >> 4)
  {
    std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize(v2, v5);
    if (a1[15] == a1[14]) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = a1[14];
    }
    a1[12] = v6;
  }
  uint64_t v7 = (char *)a1[6];
  for (uint64_t i = 1; ; ++i)
  {
    if (i + 1 > (unint64_t)((uint64_t)(a1[7] - (void)v7) >> 4))
    {
      std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)(a1 + 9), a1[5] * (i + 1));
      long long v18 = 0uLL;
      std::vector<xgboost_old::tree::GradStats>::resize((uint64_t)(a1 + 6), i + 1, &v18);
      uint64_t v7 = (char *)a1[6];
      unint64_t v9 = (char *)a1[7];
      if (v9 == v7)
      {
        uint64_t v7 = (char *)a1[7];
      }
      else
      {
        unint64_t v10 = (v9 - v7) >> 4;
        if (a1[10] == a1[9]) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = a1[9];
        }
        if (v10 <= 1) {
          unint64_t v10 = 1;
        }
        uint64_t v12 = 16 * a1[5];
        size_t v13 = (void *)a1[6];
        do
        {
          void *v13 = v11;
          v13 += 2;
          v11 += v12;
          --v10;
        }
        while (v10);
      }
    }
    unint64_t v14 = a1[5];
    if (!*(void *)&v7[16 * i + 8]) {
      return xgboost_old::utils::WXQSummary<float,float>::SetPrune(&v7[16 * i], v4, v14);
    }
    xgboost_old::utils::WXQSummary<float,float>::SetPrune(v7, v4, v14);
    xgboost_old::utils::WQSummary<float,float>::SetCombine((void **)v4, a1[6], a1[6] + 16 * i);
    unint64_t v15 = a1[13];
    uint64_t v7 = (char *)a1[6];
    if (v15 <= a1[5]) {
      break;
    }
    *(void *)&v7[16 * i + 8] = 0;
  }
  uint64_t v17 = (void **)&v7[16 * i];
  v17[1] = (void *)v15;
  return memcpy(*v17, *(const void **)v4, 16 * v15);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,false>(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = ((uint64_t)a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if (*(a2 - 2) < *(float *)v11)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)uint64_t v11 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)v11, (float *)(v11 + 8), a2 - 2);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)v11, (float *)(v11 + 8), (float *)(v11 + 16), (void *)a2 - 1);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)v11, (float *)(v11 + 8), (float *)(v11 + 16), (uint64_t *)(v11 + 24), (uint64_t *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if ((float *)v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = (float *)(v11 + 8 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)v11, (float *)(v11 + 8 * (v15 >> 1)), a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)(v11 + 8), v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)(v11 + 16), (float *)(v11 + 8 + 8 * v16), a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(v17 - 2, v17, (float *)(v11 + 8 + 8 * v16));
      uint64_t v18 = *(void *)v11;
      *(void *)uint64_t v11 = *(void *)v17;
      *(void *)uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)(v11 + 8 * (v15 >> 1)), (float *)v11, a2 - 2);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(float *)(v11 - 8) >= *(float *)v11)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>((float *)v11, a2);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    float v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>((float *)v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(v11, (uint64_t)v19);
    uint64_t v11 = (uint64_t)(v19 + 2);
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((uint64_t)(v19 + 2), (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t)(v19 + 2);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(v11, (uint64_t)a2);
  }
  else if ((float *)v11 != a2)
  {
    double v23 = (float *)(v11 + 8);
    while (v23 != a2)
    {
      float v24 = v23;
      float v25 = *(float *)(v10 + 8);
      if (v25 < *(float *)v10)
      {
        int v26 = *(_DWORD *)(v10 + 12);
        float v27 = v24;
        do
        {
          float v28 = v27;
          uint64_t v29 = *((void *)v27 - 1);
          v27 -= 2;
          *(void *)float v28 = v29;
        }
        while (*(v28 - 4) > v25);
        *float v27 = v25;
        *((_DWORD *)v27 + 1) = v26;
      }
      double v23 = v24 + 2;
      uint64_t v10 = (uint64_t)v24;
    }
  }
  return result;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 8;
    if (result + 8 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        float v6 = *(float *)(v4 + 8);
        if (v6 < *(float *)v4)
        {
          int v7 = *(_DWORD *)(v4 + 12);
          uint64_t v8 = v3;
          while (1)
          {
            *(void *)(result + v8 + 8) = *(void *)(result + v8);
            if (!v8) {
              break;
            }
            float v9 = *(float *)(result + v8 - 8);
            v8 -= 8;
            if (v9 <= v6)
            {
              uint64_t v10 = result + v8 + 8;
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *(float *)uint64_t v10 = v6;
          *(_DWORD *)(v10 + 4) = v7;
        }
        uint64_t v2 = v5 + 8;
        v3 += 8;
        uint64_t v4 = v5;
      }
      while (v5 + 8 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a3;
  if (*a2 < *a1)
  {
    uint64_t v5 = *(void *)a1;
    if (v4 < v3)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v5;
      return 1;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v5;
    if (*a3 >= *(float *)&v5) {
      return 1;
    }
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v5;
    return 2;
  }
  if (v4 < v3)
  {
    uint64_t v6 = *(void *)a2;
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v6;
    if (*a2 >= *a1) {
      return 1;
    }
    uint64_t v7 = *(void *)a1;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v7;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>(float *a1, float *a2)
{
  uint64_t v2 = *(void *)a1;
  if (*(a2 - 2) <= COERCE_FLOAT(*(void *)a1))
  {
    uint64_t v5 = a1 + 2;
    do
    {
      float v3 = v5;
      if (v5 >= a2) {
        break;
      }
      v5 += 2;
    }
    while (*v3 <= *(float *)&v2);
  }
  else
  {
    float v3 = a1;
    do
    {
      float v4 = v3[2];
      v3 += 2;
    }
    while (v4 <= *(float *)&v2);
  }
  if (v3 < a2)
  {
    do
    {
      float v6 = *(a2 - 2);
      a2 -= 2;
    }
    while (v6 > *(float *)&v2);
  }
  while (v3 < a2)
  {
    uint64_t v7 = *(void *)v3;
    *(void *)float v3 = *(void *)a2;
    *(void *)a2 = v7;
    do
    {
      float v8 = v3[2];
      v3 += 2;
    }
    while (v8 <= *(float *)&v2);
    do
    {
      float v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 > *(float *)&v2);
  }
  if (v3 - 2 != a1) {
    *(void *)a1 = *((void *)v3 - 1);
  }
  *((void *)v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,std::__less<void,void> &>(float *a1, float *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)a1;
  do
  {
    float v4 = a1[v2 + 2];
    v2 += 2;
  }
  while (v4 < *(float *)&v3);
  uint64_t v5 = &a1[v2];
  float v6 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      float v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= *(float *)&v3);
  }
  else
  {
    do
    {
      float v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= *(float *)&v3);
  }
  if (v5 < a2)
  {
    float v9 = &a1[v2];
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = *(void *)v9;
      *(void *)float v9 = *(void *)v10;
      *(void *)uint64_t v10 = v11;
      do
      {
        float v12 = v9[2];
        v9 += 2;
      }
      while (v12 < *(float *)&v3);
      do
      {
        float v13 = *(v10 - 2);
        v10 -= 2;
      }
      while (v13 >= *(float *)&v3);
    }
    while (v9 < v10);
    float v6 = v9 - 2;
  }
  if (v6 != a1) {
    *(void *)a1 = *(void *)v6;
  }
  *(void *)float v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (void *)(a2 - 8));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 8));
      return 1;
    default:
      float v7 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v8 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    float v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      int v12 = *(_DWORD *)(v8 + 4);
      uint64_t v13 = v9;
      while (1)
      {
        *(void *)(a1 + v13 + 24) = *(void *)(a1 + v13 + 16);
        if (v13 == -16) {
          break;
        }
        float v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          uint64_t v15 = a1 + v13 + 24;
          goto LABEL_12;
        }
      }
      uint64_t v15 = a1;
LABEL_12:
      *(float *)uint64_t v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8) {
        return v8 + 8 == a2;
      }
    }
    float v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3, void *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(a1, a2, a3);
  if (*(float *)a4 < *a3)
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      uint64_t v10 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v10;
      if (*a2 < *a1)
      {
        uint64_t v11 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(a1, a2, a3, a4);
  if (*(float *)a5 < *(float *)a4)
  {
    uint64_t v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(float *)a4 < *a3)
    {
      uint64_t v12 = *(void *)a3;
      *(void *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        uint64_t v13 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v13;
        if (*a2 < *a1)
        {
          uint64_t v14 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v14;
        }
      }
    }
  }
  return result;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          uint64_t v15 = *(void *)v14;
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)a1;
        float v19 = a1;
        do
        {
          char v20 = v19;
          v19 += 2 * v17 + 2;
          uint64_t v21 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v16 && *v19 < v19[2])
          {
            v19 += 2;
            uint64_t v17 = v22;
          }
          *(void *)char v20 = *(void *)v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(void *)float v19 = v18;
        }
        else
        {
          *(void *)float v19 = *(void *)v6;
          *(void *)uint64_t v6 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 3);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (float *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[2])
      {
        v8 += 2;
        uint64_t v7 = v9;
      }
      float v10 = *a4;
      if (*v8 >= *a4)
      {
        int v11 = *((_DWORD *)a4 + 1);
        do
        {
          uint64_t v12 = a4;
          a4 = v8;
          *(void *)uint64_t v12 = *(void *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (float *)(result + 8 * v7);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *v8 < v8[2])
          {
            v8 += 2;
            uint64_t v7 = v14;
          }
        }
        while (*v8 >= v10);
        *a4 = v10;
        *((_DWORD *)a4 + 1) = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,xgboost_old::utils::WQSummary<float,float>::Queue::QEntry *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (void *)(result + 8 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 8);
    float v8 = *(float *)(a2 - 8);
    if (*(float *)v6 < v8)
    {
      int v9 = *(_DWORD *)(a2 - 4);
      do
      {
        float v10 = v7;
        uint64_t v7 = v6;
        void *v10 = *v6;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (void *)(result + 8 * v5);
      }
      while (*(float *)v6 < v8);
      *(float *)uint64_t v7 = v8;
      *((_DWORD *)v7 + 1) = v9;
    }
  }
  return result;
}

void rabit::TrackerPrintf(rabit *this, const char *a2, ...)
{
  va_start(va, a2);
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x408uLL);
  *(_OWORD *)&v6.__r_.__value_.__r.__words[1] = xmmword_2246EF120;
  bzero(v6.__r_.__value_.__l.__data_, 0x401uLL);
  vsnprintf(v6.__r_.__value_.__l.__data_, 0x400uLL, (const char *)this, va);
  size_t v3 = strlen(v6.__r_.__value_.__l.__data_);
  std::string::resize(&v6, v3, 0);
  Engine = rabit::engine::GetEngine(v4);
  (*(void (**)(uint64_t *, std::string *))(*Engine + 88))(Engine, &v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_22432A004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246F04FALL & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246F04FALL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::ResetPosAndPropose(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(turi::thread *tls_data)
{
  unint64_t v1 = *((void *)tls_data + 1);
  if (v1 < *((void *)tls_data + 2))
  {
    uint64_t v2 = tls_data;
    uint64_t v3 = 16 * v1;
    do
    {
      uint64_t v4 = *(void ***)v2;
      long long v5 = **(void ***)v2;
      unsigned int v6 = *(_DWORD *)(v5[38] + 4 * *(unsigned int *)(*(void *)(*(void *)(*(void *)v2 + 8) + 8) + 4 * v1));
      tls_data = (turi::thread *)turi::thread::get_tls_data(tls_data);
      if ((v6 & 0x80000000) == 0)
      {
        int v7 = *(_DWORD *)tls_data;
        float v8 = v4[2];
        int v9 = (uint64_t *)(v4[1][2] + v3);
        uint64_t v11 = *v9;
        uint64_t v10 = v9[1];
        v12[0] = v11;
        v12[1] = v10;
        xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::UpdateSketchCol((uint64_t)v5, v8, v12, (uint64_t)v4[3], v5 + 53, v5 + 41, v6, *v4[4] == v10, (uint64_t *)(v5[44] + 24 * v7));
      }
      ++v1;
      v3 += 16;
    }
    while (v1 < *((void *)v2 + 2));
  }
}

uint64_t xgboost_old::tree::BaseMaker::FMetaHelper::InitByCol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::vector<float>::resize(a1, 2 * *(int *)(a3 + 112));
  uint64_t v5 = *(void *)(a1 + 8) - *(void *)a1;
  if (v5 >= 1) {
    memset_pattern16(*(void **)a1, &unk_2246EF130, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  while ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 24))(v6))
  {
    int v7 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
    unint64_t v8 = *v7;
    if (*v7)
    {
      uint64_t v9 = 0;
      unint64_t v10 = v7[1];
      uint64_t v11 = v7[2] + 8;
      uint64_t v12 = (uint64_t *)v11;
      do
      {
        uint64_t v14 = *v12;
        v12 += 2;
        int v13 = v14;
        if (v14)
        {
          uint64_t v15 = *(void *)(v11 - 8);
          int v16 = *(_DWORD *)(v10 + 4 * v9);
          float v17 = -*(float *)(v15 + 4);
          unsigned int v18 = 2 * v16;
          float v19 = *(float **)a1;
          if (*(float *)(*(void *)a1 + 4 * (2 * v16)) > v17) {
            float v17 = *(float *)(*(void *)a1 + 4 * v18);
          }
          v19[v18] = v17;
          uint64_t v20 = v15 + 8 * (v13 - 1);
          unsigned int v21 = (2 * v16) | 1;
          float v22 = *(float *)(v20 + 4);
          if (v22 < v19[v21]) {
            float v22 = v19[v21];
          }
          v19[v21] = v22;
        }
        ++v9;
        uint64_t v11 = (uint64_t)v12;
      }
      while (v8 > v9);
    }
  }
  uint64_t v23 = *(void *)(a1 + 8) - *(void *)a1;
  if (v23) {
    float v24 = *(void **)a1;
  }
  else {
    float v24 = 0;
  }
  return rabit::engine::Allreduce_((uint64_t)v24, 4, v23 >> 2, (uint64_t)rabit::op::Reducer<rabit::op::Max,float>, 6, 0, 0, 0);
}

void xgboost_old::tree::BaseMaker::FMetaHelper::SampleCol(uint64_t *a1, std::vector<unsigned int> *a2, const char *a3, float a4)
{
  std::vector<unsigned int>::pointer begin = a2->__begin_;
  a2->__end_ = a2->__begin_;
  uint64_t v7 = a1[1] - *a1;
  if (v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = v7 >> 2;
    do
    {
      unint64_t v11 = v9 >> 1;
      xgboost_old::utils::Assert(v10 > ((2 * (v9 >> 1)) | 1), "FeatHelper fid exceed query bound ", a3);
      uint64_t v12 = *a1;
      if (*(float *)(*a1 + 8 * (v9 >> 1)) != -3.4028e38)
      {
        std::vector<unsigned int>::pointer end = a2->__end_;
        value = a2->__end_cap_.__value_;
        if (end >= value)
        {
          std::vector<unsigned int>::pointer v16 = a2->__begin_;
          uint64_t v17 = end - a2->__begin_;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = (char *)value - (char *)v16;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            unsigned int v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&a2->__end_cap_, v20);
            std::vector<unsigned int>::pointer v16 = a2->__begin_;
            std::vector<unsigned int>::pointer end = a2->__end_;
          }
          else
          {
            unsigned int v21 = 0;
          }
          float v22 = (unsigned int *)&v21[4 * v17];
          *float v22 = v11;
          uint64_t v15 = v22 + 1;
          while (end != v16)
          {
            unsigned int v23 = *--end;
            *--float v22 = v23;
          }
          a2->__begin_ = v22;
          a2->__end_ = v15;
          a2->__end_cap_.__value_ = (unsigned int *)&v21[4 * v20];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *std::vector<unsigned int>::pointer end = v11;
          uint64_t v15 = end + 1;
        }
        a2->__end_ = v15;
        uint64_t v12 = *a1;
      }
      v9 += 2;
      unint64_t v10 = (a1[1] - v12) >> 2;
    }
    while (v9 < v10);
    std::vector<unsigned int>::pointer begin = a2->__begin_;
    std::vector<unsigned int>::pointer v24 = a2->__end_;
  }
  else
  {
    std::vector<unsigned int>::pointer v24 = begin;
  }
  unint64_t v25 = (unint64_t)((char *)v24 - (char *)begin) >> 2;
  uint64_t v26 = (v25 - 1);
  uint64_t v27 = (char *)v24 - (char *)begin;
  unsigned int v28 = (float)((float)(unint64_t)(v27 >> 2) * a4);
  if (v27) {
    BOOL v29 = v25 == 1;
  }
  else {
    BOOL v29 = 1;
  }
  if (!v29)
  {
    do
    {
      unsigned int v30 = vcvtmd_u64_f64((double)rand() * 4.65661287e-10 * (double)v25);
      unsigned int v31 = begin[v26];
      begin[v26] = begin[v30];
      begin[v30] = v31;
      LODWORD(v25) = v25 - 1;
      --v26;
    }
    while (v26);
  }
  if (v28 <= 1) {
    std::vector<unsigned int>::size_type v32 = 1;
  }
  else {
    std::vector<unsigned int>::size_type v32 = v28;
  }
  std::vector<int>::resize(a2, v32);
  memset(&v46, 0, sizeof(v46));
  v45[0] = &unk_26D778A60;
  v45[1] = &v46;
  v45[2] = 0;
  Engine = rabit::engine::GetEngine(v33);
  char v35 = (rabit::engine *)(*(uint64_t (**)(uint64_t *))(*Engine + 56))(Engine);
  if (!v35)
  {
    std::string::size_type __n = a2->__end_ - a2->__begin_;
    char v35 = (rabit::engine *)(*(uint64_t (**)(void *, std::string::size_type *, uint64_t))(v45[0] + 8))(v45, &__n, 8);
    if (__n) {
      char v35 = (rabit::engine *)(*(uint64_t (**)(void *, std::vector<unsigned int>::pointer, int64_t))(v45[0] + 8))(v45, a2->__begin_, (char *)a2->__end_ - (char *)a2->__begin_);
    }
  }
  std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v46.__r_.__value_.__l.__size_;
  }
  std::string::size_type __n = size;
  uint64_t v37 = rabit::engine::GetEngine(v35);
  uint64_t v38 = (rabit::engine *)(*(uint64_t (**)(uint64_t *, std::string::size_type *, uint64_t, void))(*v37 + 8))(v37, &__n, 8, 0);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v39 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v39 = v46.__r_.__value_.__l.__size_;
  }
  if (v39 != __n)
  {
    std::string::resize(&v46, __n, 0);
    std::string::size_type v39 = __n;
  }
  if (v39)
  {
    int v40 = SHIBYTE(v46.__r_.__value_.__r.__words[2]);
    std::string::size_type v41 = v46.__r_.__value_.__r.__words[0];
    float v42 = rabit::engine::GetEngine(v38);
    if (v40 >= 0) {
      double v43 = &v46;
    }
    else {
      double v43 = (std::string *)v41;
    }
    (*(void (**)(uint64_t *, std::string *, std::string::size_type, void))(*v42 + 8))(v42, v43, v39, 0);
  }
  std::string::size_type __n = 0;
  if ((*(uint64_t (**)(void *, std::string::size_type *, uint64_t))v45[0])(v45, &__n, 8))
  {
    std::string::size_type v44 = __n;
    std::vector<int>::resize(a2, __n);
    if (__n) {
      (*(void (**)(void *, std::vector<unsigned int>::pointer, std::string::size_type))v45[0])(v45, a2->__begin_, 4 * v44);
    }
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
}

void sub_22432A7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float *rabit::op::Reducer<rabit::op::Max,float>(float *result, float *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      if (*a2 < *result) {
        *a2 = *result;
      }
      ++result;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

turi::thread_pool *turi::parallel_for<xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    unsigned int v21 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v25, v21);
    double v22 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    unint64_t v23 = (unint64_t)((double)(unint64_t)a1 + v22 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v23 = a2;
    }
    void v24[2] = (unint64_t)((double)(unint64_t)a1 + v22 * (double)0);
    v24[3] = v23;
    v24[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v24[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v25, v24);
  }
  unint64_t v10 = a2 - (void)a1;
  if (a2 > (unint64_t)a1)
  {
    uint64_t v11 = *(void *)(*(void *)(a3 + 8) + 128);
    uint64_t v12 = **(void **)(a3 + 16);
    int v13 = (unsigned int *)(**(void **)a3 + 4 * (void)a1);
    while (1)
    {
      unsigned int v15 = *v13++;
      uint64_t v14 = v15;
      int v16 = *(_DWORD *)(v11 + 4 * v15);
      uint64_t v17 = v16 ^ (v16 >> 31);
      int v18 = *(_DWORD *)(v12 + 20 * v17 + 4);
      if (v18 != -1) {
        break;
      }
      if (*(_DWORD *)(v12 + 20 * (int)v17 + 8) == -1)
      {
        int v20 = ~v17;
LABEL_13:
        *(_DWORD *)(v11 + 4 * v14) = v20;
      }
      if (!--v10) {
        return result;
      }
    }
    int v19 = v16 >> 31;
    if ((*(_DWORD *)(v12 + 20 * (int)v17 + 12) & 0x80000000) != 0) {
      int v20 = v18 ^ v19;
    }
    else {
      int v20 = *(_DWORD *)(v12 + 20 * (int)v17 + 8) ^ v19;
    }
    goto LABEL_13;
  }
  return result;
}

void sub_22432A9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246F06B9 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246F06B9 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(void *result)
{
  unint64_t v2 = result[1];
  unint64_t v1 = result[2];
  BOOL v3 = v1 > v2;
  unint64_t v4 = v1 - v2;
  if (v3)
  {
    uint64_t v5 = *(void *)(*(void *)(*result + 8) + 128);
    uint64_t v6 = **(void **)(*result + 16);
    uint64_t v7 = (unsigned int *)(**(void **)*result + 4 * v2);
    while (1)
    {
      unsigned int v9 = *v7++;
      uint64_t v8 = v9;
      int v10 = *(_DWORD *)(v5 + 4 * v9);
      uint64_t v11 = v10 ^ (v10 >> 31);
      int v12 = *(_DWORD *)(v6 + 20 * v11 + 4);
      if (v12 != -1) {
        break;
      }
      if (*(_DWORD *)(v6 + 20 * (int)v11 + 8) == -1)
      {
        int v14 = ~v11;
LABEL_10:
        *(_DWORD *)(v5 + 4 * v8) = v14;
      }
      if (!--v4) {
        return result;
      }
    }
    int v13 = v10 >> 31;
    if ((*(_DWORD *)(v6 + 20 * (int)v11 + 12) & 0x80000000) != 0) {
      int v14 = v12 ^ v13;
    }
    else {
      int v14 = *(_DWORD *)(v6 + 20 * (int)v11 + 8) ^ v13;
    }
    goto LABEL_10;
  }
  return result;
}

void std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 40 * a2;
    while (v3 != v7)
    {
      uint64_t v8 = *(void **)(v3 - 24);
      if (v8)
      {
        *(void *)(v3 - 16) = v8;
        operator delete(v8);
      }
      v3 -= 40;
    }
    a1[1] = v7;
  }
}

void std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>(v4, v11);
    }
    else {
      int v12 = 0;
    }
    unsigned int v15 = v12;
    int v16 = &v12[40 * v8];
    int v18 = &v12[40 * v11];
    size_t v14 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_22432AD10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v13 = a6;
  *((void *)&v13 + 1) = a7;
  long long v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    uint64_t v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v13 + 1) - 40;
      *((void *)&v13 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    uint64_t v8 = v13;
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>,std::reverse_iterator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>,std::reverse_iterator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v2 = &unk_26D779228;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = result;
  return result;
}

__n128 std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D779228;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  *(void *)&double result = xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator()(a1 + 8).n128_u64[0];
  return result;
}

uint64_t std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1},std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

__n128 xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator()(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  long long v3 = (uint64_t *)(*(void *)a1 + 400);
  int v4 = turi::thread::cpu_count((turi::thread *)a1);
  std::vector<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>::resize(v3, v4);
  uint64_t v5 = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8), *(void *)(a1 + 16));
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 24))(v5))
  {
    do
    {
      uint64_t v7 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
      unint64_t v8 = *v7;
      v15[0] = v2;
      v15[1] = v7;
      long long v16 = *(_OWORD *)(a1 + 24);
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = v9;
      turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(0, v8, (uint64_t)v15);
    }
    while (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5) & 1) != 0);
  }
  uint64_t v10 = v2[10];
  if (v2[11] != v10)
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(int *)(v10 + 4 * v11);
      uint64_t v13 = *(int *)(v2[13] + 4 * v12);
      uint64_t v14 = (uint64_t)(*(void *)(*(void *)(a1 + 16) + 8) - **(void **)(a1 + 16)) >> 2;
      __n128 result = *(__n128 *)(v2[53] + 16 * v12);
      *(__n128 *)(*(void *)(v2[25] + 16) + 16 * *(unsigned int *)(*(void *)v2[25] + 4 * (v13 + v13 * v14 + v14))) = result;
      ++v11;
      uint64_t v10 = v2[10];
    }
    while (v11 < (v2[11] - v10) >> 2);
  }
  return result;
}

void std::vector<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v19 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v14 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v18, v14);
    double v15 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v16 = (unint64_t)((double)v5 + v15 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v16 = a2;
    }
    v17[2] = (unint64_t)((double)v5 + v15 * (double)0);
    v17[3] = v16;
    v17[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v17[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v18, v17);
  }
  if (a2 > v5)
  {
    do
    {
      uint64_t v10 = *(void *)a3;
      unsigned int v11 = *(_DWORD *)(*(void *)(*(void *)a3 + 304)
                      + 4 * *(unsigned int *)(*(void *)(*(void *)(a3 + 8) + 8) + 4 * v5));
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(tls_data);
      if ((v11 & 0x80000000) == 0)
      {
        int v12 = *(_DWORD *)tls_data;
        uint64_t v13 = *(uint64_t **)(a3 + 16);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(*(void *)(*(void *)(a3 + 8) + 16) + 16 * v5);
        xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::UpdateHistCol(v10, v13, v18, *(void *)(a3 + 24), *(void *)(a3 + 32), *(void **)(a3 + 40), v11, (void *)(*(void *)(v10 + 400) + 24 * v12));
      }
      ++v5;
    }
    while (a2 != v5);
  }
}

void sub_22432B378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      int v12 = 0;
    }
    double v15 = v12;
    unint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_22432B4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>>,std::reverse_iterator<std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::UpdateHistCol(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, void *a6, unsigned int a7, void *a8)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)a3 + 2))
  {
    std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>::resize((uint64_t)a8, *(int *)(a5 + 100));
    uint64_t v14 = *(void *)(a1 + 80);
    if (*(void *)(a1 + 88) != v14)
    {
      unint64_t v15 = 0;
      do
      {
        uint64_t v16 = *(unsigned int *)(v14 + 4 * v15);
        uint64_t v17 = *(unsigned int *)(*(void *)(a1 + 104) + 4 * v16);
        uint64_t v18 = *a8 + 32 * v16;
        *(_DWORD *)(v18 + 24) = 0;
        uint64_t v19 = *(void **)(a1 + 200);
        int v20 = (unsigned int *)(*v19 + 4 * (v17 + v17 * ((a6[1] - *a6) >> 2) + a7));
        uint64_t v21 = *v20;
        uint64_t v22 = v19[1] + 4 * v21;
        uint64_t v23 = v19[2] + 16 * v21;
        LODWORD(v2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v20[1] - v21;
        *(void *)uint64_t v18 = v22;
        *(void *)(v18 + 8) = v23;
        *(_DWORD *)(v18 + 16) = v20;
        ++v15;
        uint64_t v14 = *(void *)(a1 + 80);
      }
      while (v15 < (*(void *)(a1 + 88) - v14) >> 2);
    }
    uint64_t v24 = *((unsigned int *)a3 + 2);
    if (*(_DWORD *)(a1 + 72))
    {
      unint64_t v25 = v24 & 0xFFFFFFE0;
      if ((v24 & 0xFFFFFFE0) != 0)
      {
        unint64_t v26 = 0;
        uint64_t v27 = *a3;
        uint64_t v28 = *(void *)(a1 + 128);
        uint64_t v29 = *a2;
        do
        {
          uint64_t v30 = 0;
          unsigned int v31 = v68;
          do
          {
            uint64_t v32 = *(unsigned int *)(v27 + v30 * 8);
            *v31++ = *(_DWORD *)(v28 + 4 * v32);
            v67[v30++] = *(float32x2_t *)(v29 + 8 * v32);
          }
          while (v30 != 32);
          uint64_t v33 = 0;
          uint64_t v34 = *a3;
          do
          {
            uint64_t v35 = v68[v33];
            if ((v35 & 0x80000000) == 0)
            {
              uint64_t v36 = *a8 + 32 * v35;
              uint64_t v37 = *(unsigned int *)(v36 + 24);
              unsigned int v38 = *(_DWORD *)(v36 + 16);
              if (v38 > *(_DWORD *)(v36 + 24))
              {
                float v39 = *(float *)(v34 + 8 * (v33 + v26) + 4);
                float32x2_t v40 = v67[v33];
                uint64_t v41 = *(void *)v36;
                int v42 = v38 - v37;
                while (*(float *)(v41 + 4 * v37) <= v39)
                {
                  *(_DWORD *)(v36 + 24) = ++v37;
                  if (!--v42) {
                    goto LABEL_18;
                  }
                }
                *(float64x2_t *)(*(void *)(v36 + 8) + 16 * v37) = vaddq_f64(*(float64x2_t *)(*(void *)(v36 + 8) + 16 * v37), vcvtq_f64_f32(v40));
              }
            }
LABEL_18:
            ++v33;
          }
          while (v33 != 32);
          v26 += 32;
          v27 += 256;
        }
        while (v26 < v25);
      }
      if (v25 < v24)
      {
        uint64_t v43 = *a3;
        uint64_t v44 = *(void *)(a1 + 128);
        unint64_t v25 = v25;
        uint64_t v45 = *a2;
        do
        {
          uint64_t v46 = *(unsigned int *)(v43 + 8 * v25);
          uint64_t v47 = *(unsigned int *)(v44 + 4 * v46);
          if ((v47 & 0x80000000) == 0)
          {
            uint64_t v48 = *a8 + 32 * v47;
            uint64_t v49 = *(unsigned int *)(v48 + 24);
            unsigned int v50 = *(_DWORD *)(v48 + 16);
            if (v50 > *(_DWORD *)(v48 + 24))
            {
              float v51 = *(float *)(v43 + 8 * v25 + 4);
              float32x2_t v52 = *(float32x2_t *)(v45 + 8 * v46);
              uint64_t v53 = *(void *)v48;
              int v54 = v50 - v49;
              while (*(float *)(v53 + 4 * v49) <= v51)
              {
                *(_DWORD *)(v48 + 24) = ++v49;
                if (!--v54) {
                  goto LABEL_29;
                }
              }
              *(float64x2_t *)(*(void *)(v48 + 8) + 16 * v49) = vaddq_f64(*(float64x2_t *)(*(void *)(v48 + 8) + 16 * v49), vcvtq_f64_f32(v52));
            }
          }
LABEL_29:
          ++v25;
        }
        while (v24 != v25);
      }
    }
    else if (v24)
    {
      uint64_t v55 = 0;
      uint64_t v56 = *a3;
      uint64_t v57 = *(void *)(a1 + 128);
      uint64_t v58 = *a2;
      do
      {
        uint64_t v59 = *(unsigned int *)(v56 + 8 * v55);
        uint64_t v60 = *(unsigned int *)(v57 + 4 * v59);
        if ((v60 & 0x80000000) == 0)
        {
          uint64_t v61 = *a8 + 32 * v60;
          uint64_t v62 = *(unsigned int *)(v61 + 24);
          unsigned int v63 = *(_DWORD *)(v61 + 16);
          if (v63 > *(_DWORD *)(v61 + 24))
          {
            float v64 = *(float *)(v56 + 8 * v55 + 4);
            uint64_t v65 = *(void *)v61;
            int v66 = v63 - v62;
            while (*(float *)(v65 + 4 * v62) <= v64)
            {
              *(_DWORD *)(v61 + 24) = ++v62;
              if (!--v66) {
                goto LABEL_40;
              }
            }
            *(float64x2_t *)(*(void *)(v61 + 8) + 16 * v62) = vaddq_f64(*(float64x2_t *)(*(void *)(v61 + 8)+ 16* v62), vcvtq_f64_f32(*(float32x2_t *)(v58 + 8 * v59)));
          }
        }
LABEL_40:
        ++v55;
      }
      while (v55 != v24);
    }
  }
}

void std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry,std::allocator<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::HistEntry>>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    uint64_t v14 = &v13[32 * v10];
    unint64_t v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    uint64_t v16 = &v14[32 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 2);
        *(_OWORD *)(v14 - 2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *(_OWORD *)(v17 - 20);
        *((_OWORD *)v14 - 2) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246F0840 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246F0840 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::CreateHist(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,std::vector<unsigned int> const&,xgboost_old::tree::RegTree const&)::{lambda(void)#1}::operator() const(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(turi::thread *tls_data)
{
  unint64_t v1 = *((void *)tls_data + 1);
  if (v1 < *((void *)tls_data + 2))
  {
    unint64_t v2 = (uint64_t **)tls_data;
    do
    {
      uint64_t v3 = *v2;
      uint64_t v4 = **v2;
      unsigned int v5 = *(_DWORD *)(*(void *)(v4 + 304) + 4 * *(unsigned int *)(*(void *)((*v2)[1] + 8) + 4 * v1));
      tls_data = (turi::thread *)turi::thread::get_tls_data(tls_data);
      if ((v5 & 0x80000000) == 0)
      {
        int v6 = *(_DWORD *)tls_data;
        uint64_t v7 = (uint64_t *)v3[2];
        long long v8 = *(_OWORD *)(*(void *)(v3[1] + 16) + 16 * v1);
        xgboost_old::tree::CQHistMaker<xgboost_old::tree::GradStats>::UpdateHistCol(v4, v7, (uint64_t *)&v8, v3[3], v3[4], (void *)v3[5], v5, (void *)(*(void *)(v4 + 400) + 24 * v6));
      }
      ++v1;
    }
    while (v1 < (unint64_t)v2[2]);
  }
}

xgboost_old::tree::SketchMaker *xgboost_old::tree::SketchMaker::SketchMaker(xgboost_old::tree::SketchMaker *this)
{
  *((void *)this + 1) = 1050253722;
  *((_DWORD *)this + 4) = 6;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)((char *)this + 2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = _D0;
  *(void *)((char *)this + 28) = 0;
  *(_OWORD *)((char *)this + 36) = xmmword_2246EF110;
  *(void *)((char *)this + 52) = 0x3DCCCCCD3F800000;
  *((_DWORD *)this + 15) = 0x40000000;
  *((_OWORD *)this + 4) = xmmword_2246C5F80;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 18) = 0;
  *(void *)this = &unk_26D7792C8;
  *(_OWORD *)((char *)this + 152) = 0u;
  uint64_t v7 = (xgboost_old::tree::SketchMaker *)((char *)this + 248);
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  rabit::engine::ReduceHandle::ReduceHandle((void *)this + 31);
  turi::neural_net::float_scalar::~float_scalar(v7);
  rabit::engine::ReduceHandle::ReduceHandle((void *)this + 35);
  *((void *)this + 39) = 0;
  *((void *)this + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  *((void *)this + 41) = 0;
  turi::neural_net::float_scalar::~float_scalar((xgboost_old::tree::SketchMaker *)((char *)this + 280));
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  return this;
}

void sub_22432BD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 335) < 0) {
    operator delete(*v13);
  }
  turi::neural_net::float_scalar::~float_scalar(v12);
  turi::neural_net::float_scalar::~float_scalar(v11);
  a10 = v10 + 224;
  std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  unint64_t v15 = *(void **)(v10 + 200);
  if (v15)
  {
    *(void *)(v10 + 208) = v15;
    operator delete(v15);
  }
  a10 = v10 + 176;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  xgboost_old::tree::BaseMaker::~BaseMaker((xgboost_old::tree::BaseMaker *)v10);
  _Unwind_Resume(a1);
}

void xgboost_old::tree::SketchMaker::Update(uint64_t a1, void *a2, const char *a3, void *a4, uint64_t *a5)
{
  float v6 = *(float *)(a1 + 8);
  uint64_t v7 = *a5;
  uint64_t v8 = a5[1] - *a5;
  *(float *)(a1 + 8) = v6 / (float)(unint64_t)(v8 >> 3);
  if (v8)
  {
    unint64_t v13 = 0;
    do
    {
      xgboost_old::tree::SketchMaker::Update(a1, a2, a3, a4, *(void *)(v7 + 8 * v13++));
      uint64_t v7 = *a5;
    }
    while (v13 < (a5[1] - *a5) >> 3);
  }
  *(float *)(a1 + 8) = v6;
}

void xgboost_old::tree::SketchMaker::~SketchMaker(void **this)
{
  xgboost_old::tree::SketchMaker::~SketchMaker(this);
  JUMPOUT(0x22A614FA0);
}

{
  void *v2;
  void **v3;

  *this = &unk_26D7792C8;
  uint64_t v3 = this + 42;
  std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(this + 35));
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(this + 31));
  uint64_t v3 = this + 28;
  std::vector<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet,std::allocator<xgboost_old::tree::HistMaker<xgboost_old::tree::GradStats>::HistSet>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v2 = this[25];
  if (v2)
  {
    this[26] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this + 22;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this + 19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  xgboost_old::tree::BaseMaker::~BaseMaker((xgboost_old::tree::BaseMaker *)this);
}

double rabit::ReducerSafe_<xgboost_old::tree::SketchMaker::SKStats,&xgboost_old::tree::SketchMaker::SKStats::Reduce>(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    uint64_t v4 = (double *)(a1 + 16);
    unsigned int v5 = (double *)(a2 + 16);
    do
    {
      double result = *v5 + *v4;
      *((float64x2_t *)v5 - 1) = vaddq_f64(*(float64x2_t *)(v5 - 2), *(float64x2_t *)(v4 - 2));
      *unsigned int v5 = result;
      v5 += 3;
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return result;
}

void xgboost_old::tree::SketchMaker::Update(uint64_t a1, void *a2, const char *a3, void *a4, uint64_t a5)
{
  xgboost_old::tree::BaseMaker::InitData(a1, a2, a3, a4 + 2, a5);
  if (*(int *)(a1 + 16) <= 0)
  {
    uint64_t v16 = *(void *)(a1 + 80);
    uint64_t v15 = *(void *)(a1 + 88);
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>((turi::thread *)a1, a2, (uint64_t)a3, a5, (uint64_t)a4, (uint64_t *)(a1 + 176), (uint64_t *)(a1 + 200));
      xgboost_old::tree::SketchMaker::BuildSketch(a1, (uint64_t)a2, (uint64_t)a3, a4, (int *)a5);
      xgboost_old::tree::SketchMaker::SyncNodeStats((xgboost_old::tree::SketchMaker *)a1, v11, v12);
      xgboost_old::tree::SketchMaker::FindSplit(a1, v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5);
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)a1 + 40))(a1, a1 + 80, a3, a5);
      unint64_t v13 = (void *)(*(uint64_t (**)(const char *))(*(void *)a3 + 64))(a3);
      unint64_t v14 = ((v13[1] - *v13) >> 2);
      v87[0] = v13;
      v87[1] = a1;
      v87[2] = a5;
      turi::parallel_for<xgboost_old::tree::BaseMaker::ResetPositionCol(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v14, (uint64_t)v87);
      xgboost_old::tree::BaseMaker::UpdateQueueExpand(a1, a5);
      uint64_t v16 = *(void *)(a1 + 80);
      uint64_t v15 = *(void *)(a1 + 88);
      if (v15 == v16) {
        break;
      }
      uint64_t v10 = (v10 + 1);
    }
    while ((int)v10 < *(_DWORD *)(a1 + 16));
  }
  if (v15 != v16)
  {
    xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>((turi::thread *)a1, a2, (uint64_t)a3, a5, (uint64_t)a4, (uint64_t *)(a1 + 176), (uint64_t *)(a1 + 200));
    xgboost_old::tree::SketchMaker::SyncNodeStats((xgboost_old::tree::SketchMaker *)a1, v17, v18);
  }
  uint64_t v19 = *(unsigned int *)(a5 + 100);
  if ((int)v19 >= 1)
  {
    uint64_t v20 = *(void *)(a1 + 200);
    double v21 = *(float *)(a1 + 20);
    uint64_t v22 = (int *)(*(void *)a5 + 8);
    uint64_t v23 = (double *)(v20 + 16);
    uint64_t v24 = (float *)(*(void *)(a5 + 48) + 4);
    do
    {
      double v25 = *(v23 - 2) - *(v23 - 1);
      double v26 = *v23;
      double v27 = 0.0;
      if (*v23 >= v21)
      {
        float v28 = *(float *)(a1 + 28);
        double v29 = *(v23 - 2) - *(v23 - 1);
        if (v28 != 0.0)
        {
          double v30 = v28;
          if (v25 <= v30)
          {
            double v29 = 0.0;
            if (v25 < -v30) {
              double v29 = v25 + v30;
            }
          }
          else
          {
            double v29 = v25 - v30;
          }
        }
        double v27 = -v29 / (v26 + *(float *)(a1 + 24));
        float v31 = *(float *)(a1 + 36);
        if (v31 != 0.0)
        {
          if (v27 > v31) {
            double v27 = v31;
          }
          double v32 = (float)-v31;
          if (v27 < v32) {
            double v27 = v32;
          }
        }
      }
      float v33 = v27;
      float v34 = v26;
      *uint64_t v24 = v34;
      v24[1] = v33;
      int v35 = *(v22 - 1);
      if (v35 != -1)
      {
        uint64_t v36 = (double *)(v20 + 24 * v35);
        double v37 = v36[2];
        double v38 = 0.0;
        double v39 = 0.0;
        if (v37 >= v21)
        {
          double v40 = *v36 - v36[1];
          float v41 = *(float *)(a1 + 36);
          float v42 = *(float *)(a1 + 28);
          if (v41 == 0.0)
          {
            if (v42 == 0.0)
            {
              double v43 = v40 * v40;
            }
            else
            {
              double v46 = v42;
              if (v40 <= v46)
              {
                double v47 = 0.0;
                if (v40 < -v46) {
                  double v47 = v40 + v46;
                }
              }
              else
              {
                double v47 = v40 - v46;
              }
              double v43 = v47 * v47;
            }
            double v39 = v43 / (v37 + *(float *)(a1 + 24));
          }
          else
          {
            double v44 = v42;
            double v45 = *v36 - v36[1];
            if (v42 != 0.0)
            {
              if (v40 <= v44)
              {
                double v45 = 0.0;
                if (v40 < -v44) {
                  double v45 = v40 + v44;
                }
              }
              else
              {
                double v45 = v40 - v44;
              }
            }
            double v48 = v37 + *(float *)(a1 + 24);
            double v49 = -v45 / v48;
            if (v49 > v41) {
              double v49 = v41;
            }
            double v50 = (float)-v41;
            if (v49 >= v50) {
              double v50 = v49;
            }
            double v51 = v48 * 0.5 * (v50 * v50) + v40 * v50;
            double v52 = v51 + v44 * fabs(v50);
            if (v42 != 0.0) {
              double v51 = v52;
            }
            double v39 = v51 * -2.0;
          }
        }
        uint64_t v53 = (double *)(v20 + 24 * *v22);
        double v54 = v53[2];
        if (v54 >= v21)
        {
          double v55 = *v53 - v53[1];
          float v56 = *(float *)(a1 + 36);
          float v57 = *(float *)(a1 + 28);
          if (v56 == 0.0)
          {
            if (v57 == 0.0)
            {
              double v58 = v55 * v55;
            }
            else
            {
              double v61 = v57;
              if (v55 <= v61)
              {
                double v62 = 0.0;
                if (v55 < -v61) {
                  double v62 = v55 + v61;
                }
              }
              else
              {
                double v62 = v55 - v61;
              }
              double v58 = v62 * v62;
            }
            double v38 = v58 / (v54 + *(float *)(a1 + 24));
          }
          else
          {
            double v59 = v57;
            double v60 = *v53 - v53[1];
            if (v57 != 0.0)
            {
              if (v55 <= v59)
              {
                double v60 = 0.0;
                if (v55 < -v59) {
                  double v60 = v55 + v59;
                }
              }
              else
              {
                double v60 = v55 - v59;
              }
            }
            double v63 = v54 + *(float *)(a1 + 24);
            double v64 = -v60 / v63;
            if (v64 > v56) {
              double v64 = v56;
            }
            double v65 = (float)-v56;
            if (v64 >= v65) {
              double v65 = v64;
            }
            double v66 = v63 * 0.5 * (v65 * v65) + v55 * v65;
            double v67 = v66 + v59 * fabs(v65);
            if (v57 != 0.0) {
              double v66 = v67;
            }
            double v38 = v66 * -2.0;
          }
        }
        double v68 = 0.0;
        if (v26 >= v21)
        {
          float v69 = *(float *)(a1 + 36);
          float v70 = *(float *)(a1 + 28);
          if (v69 == 0.0)
          {
            if (v70 == 0.0)
            {
              double v71 = v25 * v25;
            }
            else
            {
              double v74 = v70;
              if (v25 <= v74)
              {
                double v75 = 0.0;
                if (v25 < -v74) {
                  double v75 = v25 + v74;
                }
              }
              else
              {
                double v75 = v25 - v74;
              }
              double v71 = v75 * v75;
            }
            double v68 = v71 / (v26 + *(float *)(a1 + 24));
          }
          else
          {
            double v72 = v70;
            double v73 = v25;
            if (v70 != 0.0)
            {
              if (v25 <= v72)
              {
                double v73 = 0.0;
                if (v25 < -v72) {
                  double v73 = v25 + v72;
                }
              }
              else
              {
                double v73 = v25 - v72;
              }
            }
            double v76 = v26 + *(float *)(a1 + 24);
            double v77 = -v73 / v76;
            if (v77 > v69) {
              double v77 = v69;
            }
            double v78 = (float)-v69;
            if (v77 >= v78) {
              double v78 = v77;
            }
            double v79 = v76 * 0.5 * (v78 * v78) + v25 * v78;
            double v80 = v79 + v72 * fabs(v78);
            if (v70 != 0.0) {
              double v79 = v80;
            }
            double v68 = v79 * -2.0;
          }
        }
        float v81 = v39 + v38 - v68;
        *(v24 - 1) = v81;
      }
      v22 += 5;
      v23 += 3;
      v24 += 4;
      --v19;
    }
    while (v19);
  }
  uint64_t v82 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) != v82)
  {
    unint64_t v83 = 0;
    do
    {
      uint64_t v84 = *(int *)(v82 + 4 * v83);
      float v85 = *(float *)(*(void *)(a5 + 48) + 16 * v84 + 8) * *(float *)(a1 + 8);
      uint64_t v86 = *(void *)a5 + 20 * (int)v84;
      *(float *)(v86 + 16) = v85;
      *(void *)(v86 + 4) = -1;
      ++v83;
      uint64_t v82 = *(void *)(a1 + 80);
    }
    while (v83 < (*(void *)(a1 + 88) - v82) >> 2);
  }
}

turi::thread_pool *xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(turi::thread *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  int v14 = turi::thread::cpu_count(a1);
  std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>>::resize(a6, v14);
  std::vector<xgboost_old::tree::SketchMaker::SKStats>::resize((uint64_t)a7, *(int *)(a4 + 100));
  uint64_t v15 = operator new(0x20uLL);
  *uint64_t v15 = &unk_26D779320;
  v15[1] = a6;
  void v15[2] = a4;
  void v15[3] = a1;
  int v35 = v15;
  turi::in_parallel((turi::thread_pool *)v34);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v34);
  uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 64))(a3);
  unint64_t v17 = ((v16[1] - *v16) >> 2);
  v34[0] = v16;
  v34[1] = a1;
  v34[2] = a6;
  int v35 = a2;
  uint64_t v36 = a5;
  double result = turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long)#1}>(0, v17, (uint64_t)v34);
  uint64_t v19 = *((void *)a1 + 10);
  if (*((void *)a1 + 11) != v19)
  {
    unint64_t v20 = 0;
    do
    {
      int v21 = *(_DWORD *)(v19 + 4 * v20);
      uint64_t v22 = *a7;
      uint64_t v23 = (float64x2_t *)(*a7 + 24 * v21);
      v23->f64[0] = 0.0;
      v23->f64[1] = 0.0;
      v23[1].f64[0] = 0.0;
      uint64_t v24 = (uint64_t *)*a6;
      uint64_t v25 = a6[1] - *a6;
      if (v25)
      {
        unint64_t v26 = v25 / 24;
        uint64_t v27 = v22 + 24 * v21;
        double v29 = *(double *)(v27 + 16);
        float v28 = (double *)(v27 + 16);
        double v30 = v29;
        if (v26 <= 1) {
          unint64_t v26 = 1;
        }
        v31.f64[0] = 0.0;
        v31.f64[1] = *(v28 - 1);
        do
        {
          uint64_t v32 = *v24;
          v24 += 3;
          float v33 = (float64x2_t *)(v32 + 24 * v21);
          float64x2_t v31 = vaddq_f64(*v33, v31);
          *uint64_t v23 = v31;
          double v30 = v33[1].f64[0] + v30;
          *float v28 = v30;
          --v26;
        }
        while (v26);
      }
      ++v20;
      uint64_t v19 = *((void *)a1 + 10);
    }
    while (v20 < (*((void *)a1 + 11) - v19) >> 2);
  }
  return result;
}

void sub_22432C6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void xgboost_old::tree::SketchMaker::BuildSketch(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int *a5)
{
  std::vector<xgboost_old::utils::WXQuantileSketch<float,float>>::resize((uint64_t *)(a1 + 336), 3 * a5[28] * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2));
  uint64_t v12 = *(void *)(a1 + 336);
  if (*(void *)(a1 + 344) != v12)
  {
    unint64_t v13 = 0;
    do
    {
      unint64_t v14 = 0;
      double v15 = *(float *)(a1 + 56);
      do
        unint64_t v16 = vcvtpd_u64_f64((double)++v14 / v15) + 1;
      while (v16 << v14 < *a4);
      unint64_t v17 = (void *)(v12 + 136 * v13);
      uint64_t v17[4] = v14;
      v17[5] = v16;
      xgboost_old::utils::Assert(v15 * (double)v16 >= (double)v14, "invalid init parameter", v11);
      std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)v17, 1uLL);
      v17[3] = 0;
      v17[10] = v17[9];
      void v17[7] = v17[6];
      ++v13;
      uint64_t v12 = *(void *)(a1 + 336);
    }
    while (v13 < 0xF0F0F0F0F0F0F0F1 * ((*(void *)(a1 + 344) - v12) >> 3));
  }
  int v18 = turi::thread::cpu_count(v10);
  std::vector<std::vector<xgboost_old::tree::BaseMaker::SketchEntry>>::resize((uint64_t *)(a1 + 152), v18);
  uint64_t v19 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 64))(a3);
  uint64_t v38 = (uint64_t)(v19[1] - *v19) >> 2;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
  (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v20 + 24))(v20))
  {
    do
    {
      uint64_t v22 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 32))(v20);
      unint64_t v23 = *v22;
      *(void *)&long long v35 = a1;
      *((void *)&v35 + 1) = a2;
      __p[0] = v22;
      __p[1] = a5;
      uint64_t v37 = &v38;
      turi::parallel_for<xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v23, (uint64_t)&v35);
    }
    while (((*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20) & 1) != 0);
  }
  unint64_t v24 = (float)(*(float *)(a1 + 60) / *(float *)(a1 + 56));
  xgboost_old::utils::Check(v24 != 0, "sketch_ratio/sketch_eps must be bigger than 1", v21);
  uint64_t v25 = (uint64_t *)(a1 + 224);
  std::vector<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer,std::allocator<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>>::resize((uint64_t *)(a1 + 224), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 344) - *(void *)(a1 + 336)) >> 3));
  uint64_t v26 = *(void *)(a1 + 336);
  if (*(void *)(a1 + 344) != v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    unint64_t v29 = 0;
    do
    {
      uint64_t v37 = 0;
      long long v35 = 0u;
      *(_OWORD *)std::vector<unsigned int> __p = 0u;
      xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::GetSummary((uint64_t *)(v26 + v28), (char *)&v35);
      uint64_t v30 = *v25;
      float64x2_t v31 = (void *)(*v25 + v27);
      if (v24 > (uint64_t)(v31[3] - v31[2]) >> 4)
      {
        std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)(v31 + 2), v24);
        if (v31[3] == v31[2]) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v31[2];
        }
        *float64x2_t v31 = v32;
        uint64_t v30 = *v25;
      }
      xgboost_old::utils::WXQSummary<float,float>::SetPrune((void *)(v30 + v27), (const char *)&v35, v24);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v29;
      uint64_t v26 = *(void *)(a1 + 336);
      v28 += 136;
      v27 += 40;
    }
    while (v29 < 0xF0F0F0F0F0F0F0F1 * ((*(void *)(a1 + 344) - v26) >> 3));
  }
  uint64_t v33 = *(void *)(a1 + 232) - *(void *)(a1 + 224);
  if (v33) {
    uint64_t v34 = *(void *)(a1 + 224);
  }
  else {
    uint64_t v34 = 0;
  }
  rabit::SerializeReducer<xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::SummaryContainer>::Allreduce(a1 + 280, v34, (16 * v24) | 8, 0xCCCCCCCCCCCCCCCDLL * (v33 >> 3), 0, 0);
}

void sub_22432CA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::SketchMaker::SyncNodeStats(xgboost_old::tree::SketchMaker *this, uint64_t a2, const char *a3)
{
  xgboost_old::utils::Assert(*((void *)this + 11) != *((void *)this + 10), "qexpand must not be empty", a3);
  std::vector<xgboost_old::tree::SketchMaker::SKStats>::vector(&__p, (uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 2);
  uint64_t v4 = *((void *)this + 10);
  if (*((void *)this + 11) != v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *((void *)this + 25) + 24 * *(int *)(v4 + 4 * v6);
      uint64_t v8 = (char *)__p + v5;
      long long v9 = *(_OWORD *)v7;
      *((void *)v8 + 2) = *(void *)(v7 + 16);
      *(_OWORD *)uint64_t v8 = v9;
      ++v6;
      uint64_t v4 = *((void *)this + 10);
      v5 += 24;
    }
    while (v6 < (*((void *)this + 11) - v4) >> 2);
  }
  if (v17 == __p) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = __p;
  }
  rabit::engine::ReduceHandle::Allreduce((xgboost_old::tree::SketchMaker *)((char *)this + 248), v10, 0x18uLL, 0xAAAAAAAAAAAAAAABLL * ((v17 - (unsigned char *)__p) >> 3), 0, 0);
  uint64_t v11 = *((void *)this + 10);
  if (*((void *)this + 11) != v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = *((void *)this + 25) + 24 * *(int *)(v11 + 4 * v13);
      long long v15 = *(_OWORD *)((char *)__p + v12);
      *(void *)(v14 + 16) = *(void *)((char *)__p + v12 + 16);
      *(_OWORD *)uint64_t v14 = v15;
      ++v13;
      uint64_t v11 = *((void *)this + 10);
      v12 += 24;
    }
    while (v13 < (*((void *)this + 11) - v11) >> 2);
  }
  if (__p)
  {
    unint64_t v17 = __p;
    operator delete(__p);
  }
}

void sub_22432CBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::SketchMaker::FindSplit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v37 = (void *)a6;
  int v36 = *(_DWORD *)(a6 + 112);
  std::vector<xgboost_old::tree::SplitEntry>::vector(__p, (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2);
  unint64_t v7 = *(void *)(a1 + 88) - *(void *)(a1 + 80);
  unint64_t v8 = (v7 >> 2);
  v34[0] = a1;
  v34[1] = __p;
  v34[2] = &v36;
  void v34[3] = &v37;
  turi::parallel_for<xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(0, v8, (uint64_t)v34);
  if ((v7 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(int *)(*(void *)(a1 + 80) + 4 * v11);
      unint64_t v13 = (char *)__p[0];
      float v14 = *(float *)((char *)__p[0] + v10);
      long long v15 = v37;
      uint64_t v16 = v37[6];
      *(float *)(v16 + 16 * v12) = v14;
      unint64_t v17 = (double *)(*(void *)(a1 + 200) + 24 * (int)v12);
      double v18 = v17[2];
      double v19 = 0.0;
      if (v18 >= *(float *)(a1 + 20))
      {
        double v20 = *v17 - v17[1];
        float v21 = *(float *)(a1 + 28);
        if (v21 == 0.0)
        {
          double v22 = *v17 - v17[1];
        }
        else
        {
          double v23 = v21;
          if (v20 <= v21)
          {
            double v22 = 0.0;
            if (v20 < -v23) {
              double v22 = v20 + v23;
            }
          }
          else
          {
            double v22 = v20 - v23;
          }
        }
        double v19 = -v22 / (v18 + *(float *)(a1 + 24));
        float v24 = *(float *)(a1 + 36);
        if (v24 != 0.0)
        {
          if (v19 > v24) {
            double v19 = v24;
          }
          double v25 = (float)-v24;
          if (v19 < v25) {
            double v19 = v25;
          }
        }
      }
      float v26 = v19;
      uint64_t v27 = v16 + 16 * v12;
      float v28 = v18;
      *(float *)(v27 + 4) = v28;
      *(float *)(v27 + 8) = v26;
      if (v14 <= 0.00001)
      {
        uint64_t v33 = *v15 + 20 * (int)v12;
        *(float *)(v33 + 16) = *(float *)(a1 + 8) * v26;
        *(void *)(v33 + 4) = -1;
      }
      else
      {
        xgboost_old::tree::TreeModel<float,xgboost_old::tree::RTreeNodeStat>::AddChilds((uint64_t)v15, v12, v9);
        int v29 = *(_DWORD *)&v13[v10 + 8];
        uint64_t v30 = *v37 + 20 * v12;
        *(_DWORD *)(v30 + 12) = *(_DWORD *)&v13[v10 + 4];
        *(_DWORD *)(v30 + 16) = v29;
        uint64_t v31 = *v37 + 20 * *(int *)(*v37 + 20 * v12 + 4);
        *(_DWORD *)(v31 + 16) = 0;
        *(void *)(v31 + 4) = 0xFFFFFFFFLL;
        uint64_t v32 = *v37 + 20 * *(int *)(*v37 + 20 * v12 + 8);
        *(_DWORD *)(v32 + 16) = 0;
        *(void *)(v32 + 4) = 0xFFFFFFFFLL;
      }
      ++v11;
      v10 += 12;
    }
    while (v8 != v11);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22432CE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        long long v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<xgboost_old::tree::SketchMaker::SKStats>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<xgboost_old::tree::SketchMaker::SKStats>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

turi::thread_pool *turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v21 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  double result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v16 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v20, v16);
    double v17 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v18 = (unint64_t)((double)v5 + v17 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v18 = a2;
    }
    v19[2] = (unint64_t)((double)v5 + v17 * (double)0);
    void v19[3] = v18;
    v19[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::SKStats const&)::{lambda(void)#1}>(xgboost_old::tree::SketchMaker::SKStats)::stored_vtable
           + 1;
    v19[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v20, v19);
  }
  if (a2 > v5)
  {
    do
    {
      uint64_t v10 = *(unsigned int *)(**(void **)a3 + 4 * v5);
      unsigned int v11 = *(_DWORD *)(*(void *)(*(void *)(a3 + 8) + 128) + 4 * v10);
      double result = (turi::thread_pool *)turi::thread::get_tls_data(result);
      if ((v11 & 0x80000000) == 0)
      {
        uint64_t v12 = *(void *)(**(void **)(a3 + 16) + 24 * *(int *)result);
        uint64_t v13 = **(void **)(a3 + 24);
        float v14 = *(float *)(v13 + 8 * v10);
        double v15 = v14;
        if (v14 >= 0.0) {
          *(double *)(v12 + 24 * v11) = *(double *)(v12 + 24 * v11) + v15;
        }
        else {
          *(double *)(v12 + 24 * v11 + 8) = *(double *)(v12 + 24 * v11 + 8) - v15;
        }
        *(double *)(v12 + 24 * v11 + 16) = *(double *)(v12 + 24 * v11 + 16) + *(float *)(v13 + 8 * v10 + 4);
      }
      ++v5;
    }
    while (a2 != v5);
  }
  return result;
}

void sub_22432D110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    double v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    unint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    double v17 = &v16[v14];
    std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_22432D290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::SketchMaker::SKStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<xgboost_old::tree::SketchMaker::SKStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::SketchMaker::SKStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<xgboost_old::tree::SketchMaker::SKStats>>,std::reverse_iterator<std::vector<xgboost_old::tree::SketchMaker::SKStats>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<xgboost_old::tree::SketchMaker::SKStats>::__append(char **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) >= a2)
  {
    a1[1] = &v6[24 * (24 * a2 / 0x18)];
  }
  else
  {
    uint64_t v7 = *a1;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v7) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
      uint64_t v7 = *a1;
      uint64_t v6 = a1[1];
    }
    else
    {
      char v12 = 0;
    }
    long long v13 = &v12[24 * v8];
    long long v14 = &v12[24 * v11];
    double v15 = &v13[24 * (24 * a2 / 0x18)];
    if (v6 != v7)
    {
      do
      {
        long long v16 = *(_OWORD *)(v6 - 24);
        *((void *)v13 - 1) = *((void *)v6 - 1);
        *(_OWORD *)(v13 - 24) = v16;
        v13 -= 24;
        v6 -= 24;
      }
      while (v6 != v7);
      uint64_t v7 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v14;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

__n128 std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26D779320;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D779320;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(a1 + 8, a2);
}

uint64_t std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1},std::allocator<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = **(void **)a1 + 24 * *a2;
  unint64_t v7 = *(int *)(v4 + 100);
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  std::vector<xgboost_old::tree::SketchMaker::SKStats>::resize(v6, v7, &v11);
  uint64_t v8 = *(void *)(v5 + 80);
  if (*(void *)(v5 + 88) != v8)
  {
    unint64_t v9 = 0;
    do
    {
      unint64_t v10 = (void *)(*(void *)(**(void **)a1 + 24 * v3) + 24 * *(unsigned int *)(v8 + 4 * v9));
      void *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
      ++v9;
      uint64_t v8 = *(void *)(v5 + 80);
    }
    while (v9 < (*(void *)(v5 + 88) - v8) >> 2);
  }
}

void std::vector<xgboost_old::tree::SketchMaker::SKStats>::resize(uint64_t a1, unint64_t a2, long long *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<xgboost_old::tree::SketchMaker::SKStats>::__append((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void std::vector<xgboost_old::tree::SketchMaker::SKStats>::__append(void **a1, unint64_t a2, long long *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      double v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        long long v17 = *a3;
        v9[2] = *((void *)a3 + 2);
        *(_OWORD *)unint64_t v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      unint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (unsigned char *)*a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v6, v13);
    }
    else {
      long long v14 = 0;
    }
    unint64_t v18 = &v14[24 * v10];
    uint64_t v19 = &v18[24 * a2];
    uint64_t v20 = 24 * a2;
    uint64_t v21 = v18;
    do
    {
      long long v22 = *a3;
      *((void *)v21 + 2) = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    double v23 = &v14[24 * v13];
    double v25 = (char *)*a1;
    float v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        long long v26 = *(_OWORD *)(v24 - 24);
        *((void *)v18 - 1) = *((void *)v24 - 1);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      float v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
    {
      operator delete(v24);
    }
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::SKStats const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246F0BFDLL & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)(0x80000002246F0BFDLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void xgboost_old::tree::BaseMaker::GetNodeStats<xgboost_old::tree::SketchMaker::SKStats>(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix const&,xgboost_old::tree::RegTree const&,xgboost_old::BoosterInfo const&,std::vector<std::vector<xgboost_old::tree::SketchMaker::SKStats>> *,std::vector<xgboost_old::tree::SketchMaker::SKStats>*)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::SKStats const&)::{lambda(void)#1},void>::invoke(void *result)
{
  unint64_t v1 = result[1];
  if (v1 < result[2])
  {
    unint64_t v2 = result;
    do
    {
      unint64_t v3 = (void **)*v2;
      uint64_t v4 = *(unsigned int *)(**(void **)*v2 + 4 * v1);
      unsigned int v5 = *(_DWORD *)(*(void *)(*(void *)(*v2 + 8) + 128) + 4 * v4);
      __n128 result = turi::thread::get_tls_data((turi::thread *)result);
      if ((v5 & 0x80000000) == 0)
      {
        uint64_t v6 = *(void *)(*v3[2] + 24 * *(int *)result);
        uint64_t v7 = *v3[3];
        float v8 = *(float *)(v7 + 8 * v4);
        double v9 = v8;
        if (v8 >= 0.0) {
          *(double *)(v6 + 24 * v5) = *(double *)(v6 + 24 * v5) + v9;
        }
        else {
          *(double *)(v6 + 24 * v5 + 8) = *(double *)(v6 + 24 * v5 + 8) - v9;
        }
        *(double *)(v6 + 24 * v5 + 16) = *(double *)(v6 + 24 * v5 + 16) + *(float *)(v7 + 8 * v4 + 4);
      }
      ++v1;
    }
    while (v1 < v2[2]);
  }
  return result;
}

void turi::parallel_for<xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  v22[24] = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    unint64_t v18 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v22, v18);
    double v19 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v20 = (unint64_t)((double)v5 + v19 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v20 = a2;
    }
    v21[2] = (unint64_t)((double)v5 + v19 * (double)0);
    v21[3] = v20;
    v21[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v21[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v22, v21);
  }
  if (a2 > v5)
  {
    uint64_t v10 = 16 * v5;
    do
    {
      uint64_t v11 = *(void *)a3;
      int v12 = *(_DWORD *)turi::thread::get_tls_data(tls_data);
      unint64_t v13 = *(uint64_t **)(a3 + 8);
      uint64_t v14 = *(void *)(a3 + 16);
      double v15 = (uint64_t *)(*(void *)(v14 + 16) + v10);
      uint64_t v17 = *v15;
      uint64_t v16 = v15[1];
      v22[0] = v17;
      v22[1] = v16;
      xgboost_old::tree::SketchMaker::UpdateSketchCol(v11, v13, v22, *(void *)(a3 + 24), (uint64_t *)(v11 + 200), *(_DWORD *)(*(void *)(v14 + 8) + 4 * v5++), **(void **)(a3 + 32) == v16, (uint64_t *)(*(void *)(v11 + 152) + 24 * v12));
      v10 += 16;
    }
    while (a2 != v5);
  }
}

void sub_22432DBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void xgboost_old::tree::SketchMaker::UpdateSketchCol(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t *a5, int a6, char a7, uint64_t *a8)
{
  if (!a3[2]) {
    return;
  }
  std::vector<xgboost_old::tree::BaseMaker::SketchEntry>::resize((uint64_t)a8, 3 * *(int *)(a4 + 100));
  uint64_t v16 = *(unsigned int **)(a1 + 80);
  uint64_t v17 = *(unsigned int **)(a1 + 88);
  if (v17 == v16)
  {
    if (a7) {
      goto LABEL_22;
    }
LABEL_14:
    uint64_t v38 = a3[2];
    if (v38)
    {
      double v39 = *(unsigned int **)a3;
      uint64_t v40 = *(void *)(a1 + 128);
      uint64_t v41 = *a2;
      do
      {
        unsigned int v43 = *v39;
        v39 += 2;
        uint64_t v42 = v43;
        int v44 = *(_DWORD *)(v40 + 4 * v43);
        if ((v44 & 0x80000000) == 0)
        {
          float v45 = *(float *)(v41 + 8 * v42);
          double v46 = v45;
          int v47 = 3 * v44;
          uint64_t v48 = *a8;
          if (v45 >= 0.0)
          {
            uint64_t v49 = 48 * v47;
            double v50 = *(double *)(*a8 + v49) + v46;
          }
          else
          {
            uint64_t v49 = 48 * (v47 + 1);
            double v50 = *(double *)(*a8 + v49) - v46;
          }
          *(double *)(v48 + v49) = v50;
          *(double *)(v48 + 48 * (v47 + std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy((uint64_t)this + 8, *((void **)this + 2)) = *(double *)(v48 + 48 * (v47 + 2)) + *(float *)(v41 + 8 * v42 + 4);
        }
        --v38;
      }
      while (v38);
    }
    goto LABEL_22;
  }
  uint64_t v18 = 0;
  unint64_t v19 = v17 - v16;
  uint64_t v20 = *(void *)(a1 + 104);
  uint64_t v21 = *a8;
  uint64_t v22 = *(void *)(a1 + 336);
  if (v19 <= 1) {
    unint64_t v19 = 1;
  }
  int v23 = 3 * *(_DWORD *)(a4 + 112);
  do
  {
    uint64_t v24 = 0;
    uint64_t v25 = v16[v18];
    int v26 = *(_DWORD *)(v20 + 4 * v25);
    double v15 = (const char *)(3 * v25);
    int v27 = 3 * a6 + v23 * v26;
    do
    {
      float v28 = (void *)(v21 + 48 * (v15 + v24));
      *float v28 = 0;
      v28[5] = v22 + 136 * (v27 + v24++);
    }
    while (v24 != 3);
    ++v18;
  }
  while (v18 != v19);
  if ((a7 & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v29 = *a5;
  uint64_t v30 = *a8;
  uint64_t v31 = v16;
  do
  {
    unsigned int v32 = *v31++;
    uint64_t v33 = (double *)(v29 + 24 * v32);
    double v34 = v33[1];
    float v35 = *v33;
    *(double *)(v30 + 144 * v32) = v35;
    float v36 = v34;
    *(double *)(v30 + 48 * (3 * v32 + 1)) = v36;
    float v37 = v33[2];
    *(double *)(v30 + 48 * (3 * v32 + std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy((uint64_t)this + 8, *((void **)this + 2)) = v37;
    --v19;
  }
  while (v19);
LABEL_22:
  if (*(float *)(*(void *)a3 + 4) == *(float *)(*(void *)a3 + 8 * (a3[2] - 1) + 4))
  {
    if (v17 != v16)
    {
      unint64_t v51 = 0;
      do
      {
        uint64_t v52 = 0;
        uint64_t v53 = 144 * (int)v16[v51];
        do
        {
          uint64_t v54 = *a8 + v53 + v52;
          float v55 = *(double *)v54;
          xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::Push(*(uint64_t **)(v54 + 40), *(float *)(*(void *)a3 + 4), v55);
          v52 += 48;
        }
        while (v52 != 144);
        ++v51;
        uint64_t v16 = *(unsigned int **)(a1 + 80);
      }
      while (v51 < (uint64_t)(*(void *)(a1 + 88) - (void)v16) >> 2);
    }
  }
  else
  {
    float v56 = (const char *)(float)(*(float *)(a1 + 60) / *(float *)(a1 + 56));
    xgboost_old::utils::Check(v56 != 0, "sketch_ratio/sketch_eps must be bigger than 1", v15);
    uint64_t v58 = *(void *)(a1 + 88);
    uint64_t v93 = a1;
    if (v58 == *(void *)(a1 + 80))
    {
      uint64_t v65 = *(void *)(a1 + 88);
    }
    else
    {
      unint64_t v59 = 0;
      uint64_t v58 = *(void *)(a1 + 80);
      do
      {
        uint64_t v60 = 0;
        uint64_t v61 = 144 * *(int *)(v58 + 4 * v59);
        do
        {
          double v62 = (void *)(*a8 + v61 + v60);
          v62[4] = 0xBFF0000000000000;
          v62[1] = 0;
          v62[2] = 0;
          double v63 = (void *)v62[5];
          if ((v56 + 1) > (unint64_t)((uint64_t)(v63[15] - v63[14]) >> 4))
          {
            std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)(v63 + 14), (v56 + 1));
            if (v63[15] == v63[14]) {
              uint64_t v64 = 0;
            }
            else {
              uint64_t v64 = v63[14];
            }
            v63[12] = v64;
            double v63 = (void *)v62[5];
          }
          v63[13] = 0;
          v60 += 48;
        }
        while (v60 != 144);
        ++v59;
        a1 = v93;
        uint64_t v58 = *(void *)(v93 + 80);
        uint64_t v65 = *(void *)(v93 + 88);
      }
      while (v59 < (v65 - v58) >> 2);
    }
    unint64_t v66 = a3[2];
    if (v66)
    {
      uint64_t v67 = 0;
      for (unint64_t i = 0; i < v66; ++i)
      {
        uint64_t v69 = *(void *)a3;
        uint64_t v70 = *(unsigned int *)(*(void *)a3 + v67);
        int v71 = *(_DWORD *)(*(void *)(a1 + 128) + 4 * v70);
        if ((v71 & 0x80000000) == 0)
        {
          uint64_t v72 = *a2;
          float v73 = *(float *)(*a2 + 8 * v70);
          int v74 = 3 * v71;
          if (v73 >= 0.0)
          {
            double v75 = (xgboost_old::tree::BaseMaker::SketchEntry *)(*a8 + 48 * v74);
            float v76 = *(float *)(v69 + v67 + 4);
          }
          else
          {
            double v75 = (xgboost_old::tree::BaseMaker::SketchEntry *)(*a8 + 48 * (v74 + 1));
            float v76 = *(float *)(v69 + v67 + 4);
            float v73 = -v73;
          }
          xgboost_old::tree::BaseMaker::SketchEntry::Push(v75, v76, v73, v56, v57);
          xgboost_old::tree::BaseMaker::SketchEntry::Push((xgboost_old::tree::BaseMaker::SketchEntry *)(*a8 + 48 * (v74 + 2)), *(float *)(*(void *)a3 + v67 + 4), *(float *)(v72 + 8 * v70 + 4), v56, v77);
          unint64_t v66 = a3[2];
          a1 = v93;
        }
        v67 += 8;
      }
      uint64_t v58 = *(void *)(a1 + 80);
      uint64_t v65 = *(void *)(a1 + 88);
    }
    if (v65 != v58)
    {
      unint64_t v78 = 0;
      do
      {
        uint64_t v79 = 0;
        uint64_t v80 = 144 * *(int *)(v58 + 4 * v78);
        do
        {
          uint64_t v81 = *a8;
          uint64_t v82 = *a8 + v80 + v79;
          unint64_t v83 = *(void **)(v82 + 40);
          unint64_t v84 = v83[13];
          if (!v84 || *(float *)(v81 + v80 + v79 + 24) > *(float *)(v83[12] + 16 * v84 - 4))
          {
            double v85 = *(double *)(v82 + 8) + *(double *)(v82 + 16);
            xgboost_old::utils::Assert(v84 <= (unint64_t)v56, "Finalize: invalid maximum size, max_size=%zu, stemp.size=%u", v57, v84, v56);
            float v86 = *(double *)(v82 + 8);
            float v87 = v85;
            float v88 = *(double *)(v82 + 16);
            int v89 = *(_DWORD *)(v81 + v80 + v79 + 24);
            unint64_t v83 = *(void **)(v82 + 40);
            uint64_t v90 = v83[13];
            uint64_t v91 = v83[12] + 16 * v90;
            *(float *)uint64_t v91 = v86;
            *(float *)(v91 + 4) = v87;
            *(float *)(v91 + 8) = v88;
            *(_DWORD *)(v91 + 12) = v89;
            v83[13] = v90 + 1;
          }
          xgboost_old::utils::QuantileSketchTemplate<float,float,xgboost_old::utils::WXQSummary<float,float>>::PushTemp(v83);
          v79 += 48;
        }
        while (v79 != 144);
        ++v78;
        uint64_t v58 = *(void *)(a1 + 80);
      }
      while (v78 < (*(void *)(a1 + 88) - v58) >> 2);
    }
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246F0D06 & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)(0x80000002246F0D06 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::BuildSketch(std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 < (unint64_t)a1[2])
  {
    uint64_t v3 = 16 * v1;
    do
    {
      uint64_t v4 = *a1;
      uint64_t v5 = **a1;
      int v6 = *(_DWORD *)turi::thread::get_tls_data((turi::thread *)a1);
      uint64_t v7 = (uint64_t *)v4[1];
      uint64_t v8 = v4[2];
      BOOL v9 = (uint64_t *)(*(void *)(v8 + 16) + v3);
      uint64_t v11 = *v9;
      uint64_t v10 = v9[1];
      v12[0] = v11;
      v12[1] = v10;
      xgboost_old::tree::SketchMaker::UpdateSketchCol(v5, v7, v12, v4[3], (uint64_t *)(v5 + 200), *(_DWORD *)(*(void *)(v8 + 8) + 4 * v1++), *(void *)v4[4] == v10, (uint64_t *)(*(void *)(v5 + 152) + 24 * v6));
      v3 += 16;
    }
    while (v1 < (unint64_t)a1[2]);
  }
}

void *std::vector<xgboost_old::tree::SketchMaker::SKStats>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    a1[1] += 24 * (24 * a2 / 0x18);
  }
  return a1;
}

void sub_22432E2A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::parallel_for<xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v21 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = (unint64_t)v7 > 1;
  }
  if (v10)
  {
    uint64_t v16 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v20, v16);
    double v17 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v18 = (unint64_t)((double)v5 + v17 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v18 = a2;
    }
    v19[2] = (unint64_t)((double)v5 + v17 * (double)0);
    void v19[3] = v18;
    v19[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v19[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v20, v19);
  }
  if (a2 > v5)
  {
    do
    {
      uint64_t v11 = *(void *)a3;
      uint64_t v12 = *(int *)(*(void *)(*(void *)a3 + 80) + 4 * v5);
      xgboost_old::utils::Assert(*(_DWORD *)(*(void *)(*(void *)a3 + 104) + 4 * v12) == v5, "node2workindex inconsistent", v9);
      if (**(_DWORD **)(a3 + 16))
      {
        unsigned int v13 = 0;
        uint64_t v14 = **(void **)(a3 + 8) + 12 * v5;
        do
        {
          unsigned int v15 = 3 * (v13 + v5 * *(_DWORD *)(**(void **)(a3 + 24) + 112));
          xgboost_old::tree::SketchMaker::EnumerateSplit((float *)v11, (uint64_t *)(*(void *)(v11 + 224) + 40 * v15), (uint64_t *)(*(void *)(v11 + 224) + 40 * (v15 + 1)), (uint64_t *)(*(void *)(v11 + 224) + 40 * (v15 + 2)), (double *)(*(void *)(v11 + 200) + 24 * (int)v12), v13++, v14);
        }
        while (v13 < **(_DWORD **)(a3 + 16));
      }
      ++v5;
    }
    while (v5 != a2);
  }
}

void sub_22432E4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void xgboost_old::tree::SketchMaker::EnumerateSplit(float *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, double *a5, unsigned int a6, uint64_t a7)
{
  if (a4[1])
  {
    double v12 = a5[2];
    double v13 = 0.0;
    if (v12 >= a1[5])
    {
      double v14 = *a5 - a5[1];
      float v15 = a1[9];
      float v16 = a1[7];
      if (v15 == 0.0)
      {
        if (v16 == 0.0)
        {
          double v17 = v14 * v14;
        }
        else
        {
          double v20 = v16;
          if (v14 <= v20)
          {
            double v21 = 0.0;
            if (v14 < -v20) {
              double v21 = v14 + v20;
            }
          }
          else
          {
            double v21 = v14 - v20;
          }
          double v17 = v21 * v21;
        }
        double v13 = v17 / (v12 + a1[6]);
      }
      else
      {
        double v18 = v16;
        double v19 = *a5 - a5[1];
        if (v16 != 0.0)
        {
          if (v14 <= v18)
          {
            double v19 = 0.0;
            if (v14 < -v18) {
              double v19 = v14 + v18;
            }
          }
          else
          {
            double v19 = v14 - v18;
          }
        }
        double v22 = v12 + a1[6];
        double v23 = -v19 / v22;
        if (v23 > v15) {
          double v23 = v15;
        }
        double v24 = (float)-v15;
        if (v23 >= v24) {
          double v24 = v23;
        }
        double v25 = v22 * 0.5 * (v24 * v24) + v14 * v24;
        double v26 = v25 + v18 * fabs(v24);
        if (v16 != 0.0) {
          double v25 = v26;
        }
        double v13 = v25 * -2.0;
      }
    }
    std::vector<unsigned int> __p = 0;
    v213 = 0;
    v214 = 0;
    if (a2[1])
    {
      int v27 = 0;
      unint64_t v28 = 0;
      do
      {
        uint64_t v29 = (float *)(*a2 + 16 * v28 + 12);
        if (v27 >= (float *)v214)
        {
          uint64_t v31 = (float *)__p;
          uint64_t v32 = ((char *)v27 - (unsigned char *)__p) >> 2;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v34 = v214 - (unsigned char *)__p;
          if ((v214 - (unsigned char *)__p) >> 1 > v33) {
            unint64_t v33 = v34 >> 1;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            float v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v214, v35);
            uint64_t v31 = (float *)__p;
            int v27 = v213;
          }
          else
          {
            float v36 = 0;
          }
          float v37 = (float *)&v36[4 * v32];
          *float v37 = *v29;
          uint64_t v30 = v37 + 1;
          while (v27 != v31)
          {
            int v38 = *((_DWORD *)v27-- - 1);
            *((_DWORD *)v37-- - 1) = v38;
          }
          std::vector<unsigned int> __p = v37;
          v213 = v30;
          v214 = &v36[4 * v35];
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          *int v27 = *v29;
          uint64_t v30 = v27 + 1;
        }
        v213 = v30;
        ++v28;
        int v27 = v30;
      }
      while (v28 < a2[1]);
    }
    else
    {
      uint64_t v30 = 0;
    }
    if (a3[1])
    {
      unint64_t v39 = 0;
      do
      {
        uint64_t v40 = (float *)(*a3 + 16 * v39 + 12);
        if (v30 >= (float *)v214)
        {
          uint64_t v42 = (float *)__p;
          uint64_t v43 = ((char *)v30 - (unsigned char *)__p) >> 2;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v45 = v214 - (unsigned char *)__p;
          if ((v214 - (unsigned char *)__p) >> 1 > v44) {
            unint64_t v44 = v45 >> 1;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v46 = v44;
          }
          if (v46)
          {
            int v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v214, v46);
            uint64_t v42 = (float *)__p;
            uint64_t v30 = v213;
          }
          else
          {
            int v47 = 0;
          }
          uint64_t v48 = (float *)&v47[4 * v43];
          float *v48 = *v40;
          uint64_t v41 = v48 + 1;
          while (v30 != v42)
          {
            int v49 = *((_DWORD *)v30-- - 1);
            *((_DWORD *)v48-- - 1) = v49;
          }
          std::vector<unsigned int> __p = v48;
          v213 = v41;
          v214 = &v47[4 * v46];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          float *v30 = *v40;
          uint64_t v41 = v30 + 1;
        }
        v213 = v41;
        ++v39;
        uint64_t v30 = v41;
      }
      while (v39 < a3[1]);
    }
    else
    {
      uint64_t v41 = v30;
    }
    if (a4[1])
    {
      unint64_t v50 = 0;
      do
      {
        unint64_t v51 = (float *)(*a4 + 16 * v50 + 12);
        if (v41 >= (float *)v214)
        {
          uint64_t v53 = (float *)__p;
          uint64_t v54 = ((char *)v41 - (unsigned char *)__p) >> 2;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v56 = v214 - (unsigned char *)__p;
          if ((v214 - (unsigned char *)__p) >> 1 > v55) {
            unint64_t v55 = v56 >> 1;
          }
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v55;
          }
          if (v57)
          {
            uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v214, v57);
            uint64_t v53 = (float *)__p;
            uint64_t v41 = v213;
          }
          else
          {
            uint64_t v58 = 0;
          }
          unint64_t v59 = (float *)&v58[4 * v54];
          float *v59 = *v51;
          uint64_t v52 = v59 + 1;
          while (v41 != v53)
          {
            int v60 = *((_DWORD *)v41-- - 1);
            *((_DWORD *)v59-- - 1) = v60;
          }
          std::vector<unsigned int> __p = v59;
          v213 = v52;
          v214 = &v58[4 * v57];
          if (v53) {
            operator delete(v53);
          }
        }
        else
        {
          *uint64_t v41 = *v51;
          uint64_t v52 = v41 + 1;
        }
        v213 = v52;
        ++v50;
        uint64_t v41 = v52;
      }
      while (v50 < a4[1]);
    }
    std::__sort<std::__less<float,float> &,float *>();
    uint64_t v61 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__equal_to &>((float *)__p, v213);
    std::vector<float>::resize((uint64_t)&__p, ((char *)v61 - (unsigned char *)__p) >> 2);
    uint64_t v62 = *a2;
    unint64_t v63 = a2[1];
    float v64 = *(float *)(*a2 + 16 * v63 - 12);
    double v65 = v64;
    uint64_t v66 = *a3;
    unint64_t v67 = a3[1];
    float v68 = *(float *)(*a3 + 16 * v67 - 12);
    double v69 = v68;
    uint64_t v70 = *a4;
    unint64_t v71 = a4[1];
    float v72 = *(float *)(*a4 + 16 * v71 - 12);
    double v73 = v72;
    int v74 = (float *)__p;
    double v75 = v213;
    double v76 = *a5;
    double v77 = a5[1];
    double v78 = a5[2];
    float v79 = a1[5];
    double v80 = v79;
    if ((unint64_t)((char *)v213 - (unsigned char *)__p) >= 5)
    {
      unint64_t v81 = 0;
      unint64_t v82 = 0;
      unint64_t v83 = 0;
      unint64_t v84 = ((char *)v213 - (unsigned char *)__p) >> 2;
      if (v84 <= 2) {
        unint64_t v84 = 2;
      }
      for (uint64_t i = 1; i != v84; ++i)
      {
        float v86 = v74[i];
        if (v81 < v63)
        {
          float v87 = (float *)(v62 + 12 + 16 * v81);
          while (*v87 < v86)
          {
            ++v81;
            v87 += 4;
            if (v63 == v81)
            {
              float v88 = 0.0;
              unint64_t v81 = v63;
              goto LABEL_95;
            }
          }
        }
        float v88 = 0.0;
        if (v81 == v63)
        {
LABEL_95:
          float v89 = v64;
          float v90 = v64;
        }
        else
        {
          uint64_t v91 = (float *)(v62 + 16 * v81);
          if (v91[3] == v86)
          {
            float v90 = *v91;
            float v89 = v91[1];
            float v88 = v91[2];
          }
          else
          {
            float v88 = 0.0;
            if (v81)
            {
              uint64_t v92 = v62 + 16 * v81;
              float v90 = *(float *)(v92 - 16) + *(float *)(v92 - 8);
              float v89 = *(float *)(v92 + 4) - *(float *)(v92 + 8);
            }
            else
            {
              float v89 = 0.0;
              float v90 = 0.0;
            }
          }
        }
        if (v82 < v67)
        {
          uint64_t v93 = (float *)(v66 + 12 + 16 * v82);
          while (*v93 < v86)
          {
            ++v82;
            v93 += 4;
            if (v67 == v82)
            {
              float v94 = 0.0;
              unint64_t v82 = v67;
              goto LABEL_107;
            }
          }
        }
        float v94 = 0.0;
        if (v82 == v67)
        {
LABEL_107:
          float v95 = v68;
          float v96 = v68;
        }
        else
        {
          uint64_t v97 = (float *)(v66 + 16 * v82);
          if (v97[3] == v86)
          {
            float v96 = *v97;
            float v95 = v97[1];
            float v94 = v97[2];
          }
          else
          {
            float v94 = 0.0;
            if (v82)
            {
              uint64_t v98 = v66 + 16 * v82;
              float v96 = *(float *)(v98 - 16) + *(float *)(v98 - 8);
              float v95 = *(float *)(v98 + 4) - *(float *)(v98 + 8);
            }
            else
            {
              float v95 = 0.0;
              float v96 = 0.0;
            }
          }
        }
        if (v83 < v71)
        {
          double v99 = (float *)(v70 + 12 + 16 * v83);
          while (*v99 < v86)
          {
            ++v83;
            v99 += 4;
            if (v71 == v83)
            {
              float v100 = 0.0;
              unint64_t v83 = v71;
              goto LABEL_119;
            }
          }
        }
        float v100 = 0.0;
        if (v83 == v71)
        {
LABEL_119:
          float v101 = v72;
          float v102 = v72;
        }
        else
        {
          uint64_t v103 = (float *)(v70 + 16 * v83);
          if (v103[3] == v86)
          {
            float v102 = *v103;
            float v101 = v103[1];
            float v100 = v103[2];
          }
          else
          {
            float v100 = 0.0;
            if (v83)
            {
              uint64_t v104 = v70 + 16 * v83;
              float v102 = *(float *)(v104 - 16) + *(float *)(v104 - 8);
              float v101 = *(float *)(v104 + 4) - *(float *)(v104 + 8);
            }
            else
            {
              float v101 = 0.0;
              float v102 = 0.0;
            }
          }
        }
        double v105 = (float)((float)((float)(v89 + v90) - v88) * 0.5);
        double v106 = (float)((float)((float)(v95 + v96) - v94) * 0.5);
        float v107 = (float)((float)(v101 + v102) - v100) * 0.5;
        double v108 = v107;
        double v109 = v78 - v107;
        if (v107 >= v79 && v109 >= v80)
        {
          double v111 = 0.0;
          BOOL v112 = v107 < v79;
          double v113 = 0.0;
          if (!v112)
          {
            double v114 = v105 - v106;
            float v115 = a1[9];
            float v116 = a1[7];
            if (v115 == 0.0)
            {
              if (v116 == 0.0)
              {
                double v117 = v114 * v114;
              }
              else
              {
                double v120 = v116;
                if (v114 <= v120)
                {
                  double v121 = 0.0;
                  if (v114 < -v120) {
                    double v121 = v114 + v120;
                  }
                }
                else
                {
                  double v121 = v114 - v120;
                }
                double v117 = v121 * v121;
              }
              double v113 = v117 / (v108 + a1[6]);
            }
            else
            {
              double v118 = v116;
              double v119 = v105 - v106;
              if (v116 != 0.0)
              {
                if (v114 <= v118)
                {
                  double v119 = 0.0;
                  if (v114 < -v118) {
                    double v119 = v114 + v118;
                  }
                }
                else
                {
                  double v119 = v114 - v118;
                }
              }
              double v122 = v108 + a1[6];
              double v123 = -v119 / v122;
              if (v123 > v115) {
                double v123 = v115;
              }
              double v124 = (float)-v115;
              if (v123 >= v124) {
                double v124 = v123;
              }
              double v125 = v122 * 0.5 * (v124 * v124) + v114 * v124;
              double v126 = v125 + v118 * fabs(v124);
              if (v116 != 0.0) {
                double v125 = v126;
              }
              double v113 = v125 * -2.0;
            }
          }
          if (v109 >= v80)
          {
            double v127 = v76 - v105 - (v77 - v106);
            float v128 = a1[9];
            float v129 = a1[7];
            if (v128 == 0.0)
            {
              if (v129 == 0.0)
              {
                double v130 = v127 * v127;
              }
              else
              {
                double v133 = v129;
                if (v127 <= v133)
                {
                  double v134 = 0.0;
                  if (v127 < -v133) {
                    double v134 = v127 + v133;
                  }
                }
                else
                {
                  double v134 = v127 - v133;
                }
                double v130 = v134 * v134;
              }
              double v111 = v130 / (v109 + a1[6]);
            }
            else
            {
              double v131 = v129;
              double v132 = v76 - v105 - (v77 - v106);
              if (v129 != 0.0)
              {
                if (v127 <= v131)
                {
                  double v132 = 0.0;
                  if (v127 < -v131) {
                    double v132 = v127 + v131;
                  }
                }
                else
                {
                  double v132 = v127 - v131;
                }
              }
              double v135 = v109 + a1[6];
              double v136 = -v132 / v135;
              if (v136 > v128) {
                double v136 = v128;
              }
              double v137 = (float)-v128;
              if (v136 >= v137) {
                double v137 = v136;
              }
              double v138 = v135 * 0.5 * (v137 * v137) + v127 * v137;
              double v139 = v138 + v131 * fabs(v137);
              if (v129 != 0.0) {
                double v138 = v139;
              }
              double v111 = v138 * -2.0;
            }
          }
          float v140 = v113 + v111 - v13;
          if ((*(_DWORD *)(a7 + 4) & 0x7FFFFFFFu) <= a6) {
            BOOL v141 = *(float *)a7 < v140;
          }
          else {
            BOOL v141 = *(float *)a7 <= v140;
          }
          if (v141)
          {
            *(float *)a7 = v140;
            *(_DWORD *)(a7 + 4) = a6;
            *(float *)(a7 + 8) = v86;
          }
        }
        double v142 = v73 - v108;
        double v143 = v78 - (v73 - v108);
        if (v73 - v108 >= v80 && v143 >= v80)
        {
          double v145 = v65 - v105;
          double v146 = v69 - v106;
          double v147 = 0.0;
          double v148 = 0.0;
          if (v143 >= v80)
          {
            double v149 = v76 - v145 - (v77 - v146);
            float v150 = a1[9];
            float v151 = a1[7];
            if (v150 == 0.0)
            {
              if (v151 == 0.0)
              {
                double v152 = v149 * v149;
              }
              else
              {
                double v155 = v151;
                if (v149 <= v155)
                {
                  double v156 = 0.0;
                  if (v149 < -v155) {
                    double v156 = v149 + v155;
                  }
                }
                else
                {
                  double v156 = v149 - v155;
                }
                double v152 = v156 * v156;
              }
              double v148 = v152 / (v143 + a1[6]);
            }
            else
            {
              double v153 = v151;
              double v154 = v76 - v145 - (v77 - v146);
              if (v151 != 0.0)
              {
                if (v149 <= v153)
                {
                  double v154 = 0.0;
                  if (v149 < -v153) {
                    double v154 = v149 + v153;
                  }
                }
                else
                {
                  double v154 = v149 - v153;
                }
              }
              double v157 = v143 + a1[6];
              double v158 = -v154 / v157;
              if (v158 > v150) {
                double v158 = v150;
              }
              double v159 = (float)-v150;
              if (v158 >= v159) {
                double v159 = v158;
              }
              double v160 = v157 * 0.5 * (v159 * v159) + v149 * v159;
              double v161 = v160 + v153 * fabs(v159);
              if (v151 != 0.0) {
                double v160 = v161;
              }
              double v148 = v160 * -2.0;
            }
          }
          if (v142 >= v80)
          {
            double v162 = v145 - v146;
            float v163 = a1[9];
            float v164 = a1[7];
            if (v163 == 0.0)
            {
              if (v164 == 0.0)
              {
                double v165 = v162 * v162;
              }
              else
              {
                double v168 = v164;
                if (v162 <= v168)
                {
                  double v169 = 0.0;
                  if (v162 < -v168) {
                    double v169 = v162 + v168;
                  }
                }
                else
                {
                  double v169 = v162 - v168;
                }
                double v165 = v169 * v169;
              }
              double v147 = v165 / (v142 + a1[6]);
            }
            else
            {
              double v166 = v164;
              double v167 = v162;
              if (v164 != 0.0)
              {
                if (v162 <= v166)
                {
                  double v167 = 0.0;
                  if (v162 < -v166) {
                    double v167 = v162 + v166;
                  }
                }
                else
                {
                  double v167 = v162 - v166;
                }
              }
              double v170 = v142 + a1[6];
              double v171 = -v167 / v170;
              if (v171 > v163) {
                double v171 = v163;
              }
              double v172 = (float)-v163;
              if (v171 >= v172) {
                double v172 = v171;
              }
              double v173 = v170 * 0.5 * (v172 * v172) + v162 * v172;
              double v174 = v173 + v166 * fabs(v172);
              if (v164 != 0.0) {
                double v173 = v174;
              }
              double v147 = v173 * -2.0;
            }
          }
          float v175 = v148 + v147 - v13;
          if ((*(_DWORD *)(a7 + 4) & 0x7FFFFFFFu) <= a6) {
            BOOL v176 = *(float *)a7 < v175;
          }
          else {
            BOOL v176 = *(float *)a7 <= v175;
          }
          if (v176)
          {
            float v177 = v74[i];
            *(float *)a7 = v175;
            *(_DWORD *)(a7 + 4) = a6 | 0x80000000;
            *(float *)(a7 + 8) = v177;
          }
        }
      }
    }
    if (v72 >= v79)
    {
      double v178 = v78 - v73;
      if (v78 - v73 >= v80)
      {
        double v179 = 0.0;
        BOOL v112 = v72 < v79;
        double v180 = 0.0;
        if (!v112)
        {
          double v181 = v65 - v69;
          float v182 = a1[9];
          float v183 = a1[7];
          if (v182 == 0.0)
          {
            if (v183 == 0.0)
            {
              double v184 = v181 * v181;
            }
            else
            {
              double v192 = v183;
              if (v181 <= v192)
              {
                double v193 = 0.0;
                if (v181 < -v192) {
                  double v193 = v181 + v192;
                }
              }
              else
              {
                double v193 = v181 - v192;
              }
              double v184 = v193 * v193;
            }
            double v180 = v184 / (v73 + a1[6]);
          }
          else
          {
            double v185 = v183;
            double v186 = v65 - v69;
            if (v183 != 0.0)
            {
              double v186 = v181 + v185;
              if (v181 >= -v185) {
                double v186 = 0.0;
              }
              if (v181 > v185) {
                double v186 = v181 - v185;
              }
            }
            double v187 = v73 + a1[6];
            double v188 = -v186 / v187;
            if (v188 > v182) {
              double v188 = v182;
            }
            double v189 = (float)-v182;
            if (v188 >= v189) {
              double v189 = v188;
            }
            double v190 = v187 * 0.5 * (v189 * v189) + v181 * v189;
            double v191 = v190 + v185 * fabs(v189);
            if (v183 != 0.0) {
              double v190 = v191;
            }
            double v180 = v190 * -2.0;
          }
        }
        if (v178 >= v80)
        {
          double v194 = v76 - v65 - (v77 - v69);
          float v195 = a1[9];
          float v196 = a1[7];
          if (v195 == 0.0)
          {
            if (v196 == 0.0)
            {
              double v197 = v194 * v194;
            }
            else
            {
              double v200 = v196;
              if (v194 <= v200)
              {
                double v201 = 0.0;
                if (v194 < -v200) {
                  double v201 = v194 + v200;
                }
              }
              else
              {
                double v201 = v194 - v200;
              }
              double v197 = v201 * v201;
            }
            double v179 = v197 / (v178 + a1[6]);
          }
          else
          {
            double v198 = v196;
            double v199 = v194;
            if (v196 != 0.0)
            {
              if (v194 <= v198)
              {
                double v199 = 0.0;
                if (v194 < -v198) {
                  double v199 = v194 + v198;
                }
              }
              else
              {
                double v199 = v194 - v198;
              }
            }
            double v202 = v178 + a1[6];
            double v203 = -v199 / v202;
            if (v203 > v195) {
              double v203 = v195;
            }
            double v204 = (float)-v195;
            if (v203 >= v204) {
              double v204 = v203;
            }
            double v205 = v202 * 0.5 * (v204 * v204) + v194 * v204;
            double v206 = v205 + v198 * fabs(v204);
            if (v196 != 0.0) {
              double v205 = v206;
            }
            double v179 = v205 * -2.0;
          }
        }
        float v207 = v180 + v179 - v13;
        if ((*(_DWORD *)(a7 + 4) & 0x7FFFFFFFu) <= a6) {
          BOOL v208 = *(float *)a7 < v207;
        }
        else {
          BOOL v208 = *(float *)a7 <= v207;
        }
        if (v208)
        {
          float v209 = *(v75 - 1) + fabsf(*(v75 - 1));
          *(float *)a7 = v207;
          *(_DWORD *)(a7 + 4) = a6;
          *(float *)(a7 + 8) = v209 + 1.0;
        }
      }
    }
    if (v74)
    {
      v213 = v74;
      operator delete(v74);
    }
  }
}

void sub_22432F334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__equal_to &>(float *a1, float *a2)
{
  __n128 result = a2;
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 1;
    do
    {
      if (v4 == a2) {
        return a2;
      }
      float v5 = *(v4 - 1);
      float v6 = *v4++;
    }
    while (v5 != v6);
    uint64_t v7 = v4 - 2;
    while (v4 != a2)
    {
      float v8 = *v4;
      if (v5 != *v4)
      {
        v7[1] = v8;
        ++v7;
        float v5 = v8;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246F0DC9 & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)(0x80000002246F0DC9 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::SketchMaker::FindSplit(int,std::vector<xgboost_old::bst_gpair> const&,xgboost_old::IFMatrix *,xgboost_old::BoosterInfo const&,xgboost_old::tree::RegTree *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t **a1, uint64_t a2, const char *a3)
{
  for (unint64_t i = (unint64_t)a1[1]; i < (unint64_t)a1[2]; ++i)
  {
    long long v5 = *a1;
    uint64_t v6 = **a1;
    uint64_t v7 = *(int *)(*(void *)(v6 + 80) + 4 * i);
    xgboost_old::utils::Assert(*(_DWORD *)(*(void *)(v6 + 104) + 4 * v7) == i, "node2workindex inconsistent", a3);
    if (*(_DWORD *)v5[2])
    {
      unsigned int v8 = 0;
      uint64_t v9 = *(void *)v5[1] + 12 * i;
      do
      {
        unsigned int v10 = 3 * (v8 + i * *(_DWORD *)(*(void *)v5[3] + 112));
        xgboost_old::tree::SketchMaker::EnumerateSplit((float *)v6, (uint64_t *)(*(void *)(v6 + 224) + 40 * v10), (uint64_t *)(*(void *)(v6 + 224) + 40 * (v10 + 1)), (uint64_t *)(*(void *)(v6 + 224) + 40 * (v10 + 2)), (double *)(*(void *)(v6 + 200) + 24 * (int)v7), v8++, v9);
      }
      while (v8 < *(_DWORD *)v5[2]);
    }
  }
}

uint64_t xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::DistColMaker(uint64_t a1)
{
  *(void *)(a1 + 8) = 1050253722;
  *(_DWORD *)(a1 + 16) = 6;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = _D1;
  *(void *)(a1 + 28) = 0;
  *(_OWORD *)(a1 + 36) = xmmword_2246EF110;
  *(void *)(a1 + 52) = 0x3DCCCCCD3F800000;
  *(_DWORD *)(a1 + 6CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0x40000000;
  *(_OWORD *)(a1 + 64) = xmmword_2246C5F80;
  *(void *)a1 = &unk_26D779400;
  *(void *)(a1 + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = &unk_26D778A00;
  *(void *)(a1 + 88) = &unk_26D778E80;
  *(void *)(a1 + 10CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 1050253722;
  *(_DWORD *)(a1 + 108) = 6;
  *(void *)(a1 + 112) = _D1;
  *(void *)(a1 + 12CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_2246EF110;
  *(void *)(a1 + 144) = 0x3DCCCCCD3F800000;
  *(_DWORD *)(a1 + 152) = 0x40000000;
  *(_OWORD *)(a1 + 156) = xmmword_2246C5F80;
  *(void *)(a1 + 176) = 1050253722;
  *(_DWORD *)(a1 + 184) = 6;
  *(void *)(a1 + 188) = _D1;
  *(void *)(a1 + 196) = 0;
  *(_OWORD *)(a1 + 204) = xmmword_2246EF110;
  *(void *)(a1 + 22CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0x3DCCCCCD3F800000;
  *(_DWORD *)(a1 + 228) = 0x40000000;
  *(_OWORD *)(a1 + 232) = xmmword_2246C5F80;
  xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::Builder(a1 + 248, a1 + 176);
  return a1;
}

uint64_t xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::SetParam(uint64_t a1, const char *a2, const char *a3)
{
  xgboost_old::tree::TrainParam::SetParam((xgboost_old::tree::TrainParam *)(a1 + 176), a2, a3);
  return xgboost_old::tree::TreePruner::SetParam((xgboost_old::tree::TreePruner *)(a1 + 80), a2, a3);
}

turi::thread_pool *xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Update(uint64_t a1, uint64_t *a2, const char *a3, uint64_t a4, uint64_t **a5)
{
  xgboost_old::utils::Check((char *)a5[1] - (char *)*a5 == 8, "DistColMaker: only support one tree at a time", a3);
  xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::Update((uint64_t *)(a1 + 248), a2, a3, a4, **a5);
  xgboost_old::tree::TreePruner::Update(a1 + 80, (uint64_t)a2, a3, a4, (uint64_t *)a5);
  uint64_t v10 = **a5;
  uint64_t v11 = (void *)(*(uint64_t (**)(const char *))(*(void *)a3 + 64))(a3);
  unint64_t v12 = ((v11[1] - *v11) >> 2);
  v14[0] = v11;
  v14[1] = a1 + 248;
  void v14[2] = v10;
  return turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v12, (uint64_t)v14);
}

uint64_t xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::GetLeafPosition(uint64_t a1)
{
  if (*(void *)(a1 + 304) == *(void *)(a1 + 296)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 296);
  }
}

void *xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::~DistColMaker(void *a1)
{
  *a1 = &unk_26D779400;
  xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::~Builder((uint64_t)(a1 + 31));
  return a1;
}

void xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::~DistColMaker(void *a1)
{
  *a1 = &unk_26D779400;
  xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::~Builder((uint64_t)(a1 + 31));
  JUMPOUT(0x22A614FA0);
}

uint64_t xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::Builder(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *(void *)(a1 + 136) = 0;
  *(void *)a1 = &unk_26D779450;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v3 = (turi::neural_net::float_scalar *)(a1 + 192);
  *(_OWORD *)(a1 + 16CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  rabit::engine::ReduceHandle::ReduceHandle((void *)(a1 + 192));
  turi::neural_net::float_scalar::~float_scalar(v3);
  return a1;
}

void sub_22432F9F8(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  turi::neural_net::float_scalar::~float_scalar(v4);
  uint64_t v6 = (void *)v1[21];
  if (v6)
  {
    v1[22] = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    v1[19] = v7;
    operator delete(v7);
  }
  xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::Builder::~Builder((uint64_t)v1);
  _Unwind_Resume(a1);
}

void xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SyncBestSolution(uint64_t a1, uint64_t *a2)
{
  std::vector<unsigned int> __p = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v4 = *a2;
  if (a2[1] == *a2)
  {
    unint64_t v33 = 0;
    long long v5 = 0;
  }
  else
  {
    long long v5 = 0;
    unint64_t v6 = 0;
    do
    {
      int v7 = *(_DWORD *)(v4 + 4 * v6);
      uint64_t v8 = *(unsigned int *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 96);
      if ((int)v8 >= 1)
      {
        uint64_t v10 = v9 + 40 * v7;
        float v12 = *(float *)(v10 + 24);
        uint64_t v11 = v10 + 24;
        float v13 = v12;
        double v14 = *(uint64_t **)(a1 + 72);
        int v15 = *(_DWORD *)(v11 + 4);
        do
        {
          uint64_t v16 = *v14;
          uint64_t v17 = *v14 + 56 * v7;
          float v18 = *(float *)(v17 + 40);
          int v19 = *(_DWORD *)(v17 + 44);
          if ((v15 & 0x7FFFFFFFu) <= (v19 & 0x7FFFFFFFu)) {
            BOOL v20 = v13 < v18;
          }
          else {
            BOOL v20 = v13 <= v18;
          }
          if (v20)
          {
            *(float *)uint64_t v11 = v18;
            *(_DWORD *)(v11 + 4) = v19;
            *(_DWORD *)(v11 + 8) = *(_DWORD *)(v16 + 56 * v7 + 48);
            float v13 = v18;
            int v15 = v19;
          }
          v14 += 3;
          --v8;
        }
        while (v8);
      }
      uint64_t v21 = v9 + 40 * v7 + 24;
      if (v5 >= v42)
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v5 - __p) >> 2);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0x1555555555555555) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v42 - __p) >> 2) > v24) {
          unint64_t v24 = 0x5555555555555556 * ((v42 - __p) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v42 - __p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v25 = 0x1555555555555555;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25) {
          double v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::SplitEntry>>((uint64_t)&v42, v25);
        }
        else {
          double v26 = 0;
        }
        int v27 = &v26[12 * v23];
        uint64_t v28 = *(void *)v21;
        *((_DWORD *)v27 + 2) = *(_DWORD *)(v21 + 8);
        *(void *)int v27 = v28;
        uint64_t v29 = v41;
        uint64_t v30 = v27;
        if (v41 != __p)
        {
          do
          {
            uint64_t v31 = *(void *)(v29 - 12);
            v29 -= 12;
            int v32 = *((_DWORD *)v29 + 2);
            *(void *)(v30 - 12) = v31;
            v30 -= 12;
            *((_DWORD *)v30 + 2) = v32;
          }
          while (v29 != __p);
          uint64_t v29 = __p;
        }
        long long v5 = v27 + 12;
        std::vector<unsigned int> __p = v30;
        uint64_t v42 = &v26[12 * v25];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        uint64_t v22 = *(void *)v21;
        *((_DWORD *)v5 + 2) = *(_DWORD *)(v21 + 8);
        *(void *)long long v5 = v22;
        v5 += 12;
      }
      uint64_t v41 = v5;
      ++v6;
      uint64_t v4 = *a2;
    }
    while (v6 < (a2[1] - *a2) >> 2);
    unint64_t v33 = __p;
  }
  if (v5 == v33) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = v33;
  }
  rabit::engine::ReduceHandle::Allreduce((rabit::engine::ReduceHandle *)(a1 + 192), v34, 0xCuLL, 0xAAAAAAAAAAAAAAABLL * ((v5 - v33) >> 2), 0, 0);
  uint64_t v35 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    do
    {
      uint64_t v38 = *(void *)(a1 + 96) + 40 * *(int *)(v35 + 4 * v37);
      uint64_t v39 = *(void *)&__p[v36];
      *(_DWORD *)(v38 + 32) = *(_DWORD *)&__p[v36 + 8];
      *(void *)(v38 + 24) = v39;
      ++v37;
      uint64_t v35 = *a2;
      v36 += 12;
    }
    while (v37 < (a2[1] - *a2) >> 2);
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_22432FCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  memset(&__p, 0, sizeof(__p));
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7 != *a2)
  {
    std::vector<unsigned int>::pointer end = 0;
    unint64_t v11 = 0;
    do
    {
      int v12 = *(_DWORD *)(v8 + 4 * v11);
      if (*(_DWORD *)(*a4 + 20 * v12 + 4) != -1)
      {
        int v13 = *(_DWORD *)(*a4 + 20 * v12 + 12) & 0x7FFFFFFF;
        if (end >= __p.__end_cap_.__value_)
        {
          std::vector<unsigned int>::pointer begin = __p.__begin_;
          uint64_t v16 = end - __p.__begin_;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          int64_t v18 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
          if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v19);
            uint64_t v21 = v20;
            std::vector<unsigned int>::pointer begin = __p.__begin_;
            std::vector<unsigned int>::pointer end = __p.__end_;
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v22 = (unsigned int *)(v19 + 4 * v16);
          *uint64_t v22 = v13;
          double v14 = v22 + 1;
          while (end != begin)
          {
            unsigned int v23 = *--end;
            *--uint64_t v22 = v23;
          }
          __p.__begin_ = v22;
          __p.__end_ = v14;
          __p.__end_cap_.__value_ = (unsigned int *)(v19 + 4 * v21);
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *std::vector<unsigned int>::pointer end = v13;
          double v14 = end + 1;
        }
        __p.__end_ = v14;
        std::vector<unsigned int>::pointer end = v14;
        uint64_t v8 = *a2;
        uint64_t v7 = a2[1];
      }
      ++v11;
    }
    while (v11 < (v7 - v8) >> 2);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  unint64_t v24 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>,std::__equal_to &>((int *)__p.__begin_, (int *)__p.__end_);
  std::vector<int>::resize(&__p, ((char *)v24 - (char *)__p.__begin_) >> 2);
  std::vector<unsigned int>::pointer v26 = __p.__begin_;
  for (std::vector<unsigned int>::pointer i = __p.__end_; i != v26; std::vector<unsigned int>::pointer i = --__p.__end_)
  {
    unint64_t v27 = *(i - 1);
    if ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 40))(a3) > v27) {
      break;
    }
    std::vector<unsigned int>::pointer v26 = __p.__begin_;
  }
  std::vector<unsigned int>::size_type v28 = ((*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 168), v28);
  uint64_t v45 = (uint64_t *)a1;
  turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(0, v28, (uint64_t)&v45);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, std::vector<unsigned int> *))(*(void *)a3 + 16))(a3, &__p);
  while ((*(unsigned int (**)(uint64_t))(*(void *)v29 + 24))(v29))
  {
    uint64_t v30 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v29 + 32))(v29);
    if (*v30)
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      do
      {
        unint64_t v33 = v30[1];
        uint64_t v34 = (uint64_t *)(v30[2] + v31);
        uint64_t v36 = *v34;
        uint64_t v35 = v34[1];
        v50[0] = v36;
        v50[1] = v35;
        int v49 = 0;
        int v49 = *(_DWORD *)(v33 + 4 * v32);
        uint64_t v45 = v50;
        uint64_t v46 = a1;
        int v47 = a4;
        uint64_t v48 = &v49;
        turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2}>(0, v35, (uint64_t)&v45);
        ++v32;
        v31 += 16;
      }
      while (v32 < *v30);
    }
  }
  std::vector<unsigned int>::size_type v37 = (unint64_t)(((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 2) + 31) >> 5;
  LODWORD(v45) = 0;
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 144), v37, (std::vector<unsigned int>::const_reference)&v45);
  unint64_t v38 = ((*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 7);
  uint64_t v45 = (uint64_t *)(a1 + 168);
  uint64_t v46 = a1 + 144;
  turi::parallel_for<xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1}>(0, v38, &v45);
  uint64_t v39 = *(void *)(a1 + 168);
  unint64_t v40 = (*(void *)(a1 + 176) - v39) >> 2;
  if (v38 != v40) {
    *(_DWORD *)(*(void *)(a1 + 152) - 4) = 0;
  }
  if (v38 < v40)
  {
    do
    {
      if (*(_DWORD *)(v39 + 4 * v38)) {
        *(_DWORD *)(*(void *)(a1 + 144) + ((v38 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v38;
      }
      ++v38;
    }
    while (v40 != v38);
  }
  uint64_t v41 = *(void *)(a1 + 152) - *(void *)(a1 + 144);
  if (v41) {
    uint64_t v42 = *(void *)(a1 + 144);
  }
  else {
    uint64_t v42 = 0;
  }
  rabit::engine::Allreduce_(v42, 4, v41 >> 2, (uint64_t)rabit::op::Reducer<rabit::op::BitOR,unsigned int>, 3, 3, 0, 0);
  uint64_t v43 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 64))(a3);
  unint64_t v44 = ((unint64_t)(v43[1] - *v43) >> 2);
  uint64_t v45 = v43;
  uint64_t v46 = a1;
  int v47 = a4;
  turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3}>(0, v44, (uint64_t)&v45);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_224330160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::GetLeafPosition(uint64_t a1)
{
  if (*(void *)(a1 + 56) == *(void *)(a1 + 48)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 48);
  }
}

uint64_t rabit::ReducerSafe_<xgboost_old::tree::SplitEntry,&xgboost_old::tree::SplitEntry::Reduce>(uint64_t result, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    uint64_t v4 = (float *)(result + 8);
    long long v5 = (float *)(a2 + 8);
    do
    {
      float v6 = *(v5 - 2);
      int v7 = *((_DWORD *)v5 - 1);
      float v8 = *(v4 - 2);
      if ((v7 & 0x7FFFFFFFu) <= (*(_DWORD *)(v4 - 1) & 0x7FFFFFFFu)) {
        BOOL v9 = v6 < v8;
      }
      else {
        BOOL v9 = v6 <= v8;
      }
      BOOL v10 = !v9;
      if (v9) {
        unint64_t v11 = v4;
      }
      else {
        unint64_t v11 = v5;
      }
      int v12 = *(_DWORD *)v11;
      if (!v10)
      {
        int v7 = *((_DWORD *)v4 - 1);
        float v6 = *(v4 - 2);
      }
      *(v5 - 2) = v6;
      *((_DWORD *)v5 - 1) = v7;
      *(_DWORD *)long long v5 = v12;
      v5 += 3;
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return result;
}

void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  int v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)tls_data + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    unint64_t v11 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v15, v11);
    double v12 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    unint64_t v13 = (unint64_t)((double)(unint64_t)a1 + v12 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v13 = a2;
    }
    void v14[2] = (unint64_t)((double)(unint64_t)a1 + v12 * (double)0);
    void v14[3] = v13;
    v14[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v14[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v15, v14);
  }
  if (a2 > (unint64_t)a1)
  {
    BOOL v10 = (void *)(*(void *)(*(void *)a3 + 168) + 4 * (void)a1);
    bzero(v10, 4 * (a2 - (void)a1));
  }
}

void sub_2243303C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

unint64_t turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  int v7 = (turi::thread *)turi::thread_pool::size(instance);
  unint64_t result = (unint64_t)turi::thread::get_tls_data(v7);
  if (*(unsigned char *)(result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    unint64_t v19 = (turi::thread_pool *)turi::thread_pool::get_instance((turi::thread_pool *)result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v23, v19);
    double v20 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    unint64_t v21 = (unint64_t)((double)(unint64_t)a1 + v20 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v21 = a2;
    }
    unint64_t v22[2] = (unint64_t)((double)(unint64_t)a1 + v20 * (double)0);
    uint64_t v22[3] = v21;
    v22[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>(xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2})::stored_vtable
           + 1;
    v22[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v23, v22);
  }
  unint64_t v10 = a2 - (void)a1;
  if (a2 > (unint64_t)a1)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v12 = *(void *)(v11 + 48);
    unint64_t v13 = *(_DWORD **)(a3 + 24);
    uint64_t v14 = **(void **)(a3 + 16);
    for (std::vector<unsigned int>::pointer i = (float *)(**(void **)a3 + 8 * (void)a1 + 4); ; i += 2)
    {
      uint64_t v16 = *((unsigned int *)i - 1);
      int v17 = *(_DWORD *)(v12 + 4 * v16) ^ (*(int *)(v12 + 4 * v16) >> 31);
      unint64_t result = *(unsigned int *)(v14 + 20 * v17 + 4);
      if (result == -1) {
        goto LABEL_12;
      }
      unint64_t result = v17;
      int v18 = *(_DWORD *)(v14 + 20 * v17 + 12);
      if ((v18 & 0x7FFFFFFF) != *v13) {
        goto LABEL_12;
      }
      unint64_t result = v14 + 20 * (int)result;
      if (*i >= *(float *)(result + 16)) {
        break;
      }
      if ((v18 & 0x80000000) == 0) {
        goto LABEL_11;
      }
LABEL_12:
      if (!--v10) {
        return result;
      }
    }
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)(*(void *)(v11 + 168) + 4 * v16) = 1;
    goto LABEL_12;
  }
  return result;
}

void sub_2243305B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

turi::thread_pool *turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v24 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  int v7 = (turi::thread *)turi::thread_pool::size(instance);
  unint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = (unint64_t)v7 > 1;
  }
  if (v10)
  {
    unint64_t v19 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v23, v19);
    double v20 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v21 = (unint64_t)((double)v5 + v20 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v21 = a2;
    }
    unint64_t v22[2] = (unint64_t)((double)v5 + v20 * (double)0);
    uint64_t v22[3] = v21;
    v22[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>(xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3})::stored_vtable
           + 1;
    v22[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v23, v22);
  }
  if (a2 > v5)
  {
    do
    {
      uint64_t v11 = *(void *)(a3 + 8);
      unint64_t v12 = *(unsigned int *)(**(void **)a3 + 4 * v5);
      if ((*(_DWORD *)(*(void *)(v11 + 144) + ((v12 >> 3) & 0x1FFFFFFC)) >> v12))
      {
        int v13 = *(_DWORD *)(*(void *)(v11 + 48) + 4 * v12);
        int v14 = v13 ^ (v13 >> 31);
        unint64_t result = (turi::thread_pool *)xgboost_old::utils::Assert(*(_DWORD *)(**(void **)(a3 + 16) + 20 * v14 + 4) != -1, "inconsistent reduce information", v9);
        uint64_t v15 = **(void **)(a3 + 16) + 20 * v14;
        int v16 = *(_DWORD *)(v15 + 12);
        int v17 = (_DWORD *)(v15 + 8);
        int v18 = (_DWORD *)(v15 + 4);
        if (v16 < 0) {
          int v18 = v17;
        }
        *(_DWORD *)(*(void *)(v11 + 48) + 4 * v12) = *v18 ^ (*(int *)(*(void *)(v11 + 48) + 4 * v12) >> 31);
      }
      ++v5;
    }
    while (a2 != v5);
  }
  return result;
}

void sub_2243307C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246F0EF9 & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)(0x80000002246F0EF9 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(void *a1)
{
  unint64_t v1 = a1[1];
  unint64_t v2 = a1[2];
  BOOL v3 = v2 > v1;
  unint64_t v4 = v2 - v1;
  if (v3) {
    bzero((void *)(*(void *)(*(void *)*a1 + 168) + 4 * v1), 4 * v4);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246F0FBCLL & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)(0x80000002246F0FBCLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

unint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#2} const&)::{lambda(void)#1},void>::invoke(unint64_t result)
{
  unint64_t v2 = *(void *)(result + 8);
  unint64_t v1 = *(void *)(result + 16);
  BOOL v3 = v1 > v2;
  unint64_t v4 = v1 - v2;
  if (v3)
  {
    uint64_t v5 = *(void *)result;
    uint64_t v6 = *(void *)(*(void *)result + 8);
    uint64_t v7 = *(void *)(v6 + 48);
    uint64_t v8 = **(void **)(*(void *)result + 16);
    for (std::vector<unsigned int>::pointer i = (float *)(***(void ***)result + 8 * v2 + 4); ; i += 2)
    {
      uint64_t v10 = *((unsigned int *)i - 1);
      int v11 = *(_DWORD *)(v7 + 4 * v10) ^ (*(int *)(v7 + 4 * v10) >> 31);
      unint64_t result = *(unsigned int *)(v8 + 20 * v11 + 4);
      if (result == -1) {
        goto LABEL_9;
      }
      unint64_t result = v11;
      int v12 = *(_DWORD *)(v8 + 20 * v11 + 12);
      if ((v12 & 0x7FFFFFFF) != **(_DWORD **)(v5 + 24)) {
        goto LABEL_9;
      }
      unint64_t result = v8 + 20 * (int)result;
      if (*i >= *(float *)(result + 16)) {
        break;
      }
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_8;
      }
LABEL_9:
      if (!--v4) {
        return result;
      }
    }
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_8:
    *(_DWORD *)(*(void *)(v6 + 168) + 4 * v1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 1;
    goto LABEL_9;
  }
  return result;
}

turi::thread_pool *turi::parallel_for<xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v19 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  unint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    int v14 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v18, v14);
    double v15 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v16 = (unint64_t)((double)v5 + v15 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v16 = a2;
    }
    v17[2] = (unint64_t)((double)v5 + v15 * (double)0);
    v17[3] = v16;
    v17[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v17[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v18, v17);
  }
  if (a2 > v5)
  {
    uint64_t v10 = **a3;
    uint64_t v11 = *a3[1];
    do
    {
      uint64_t v12 = 0;
      int v13 = 0;
      do
      {
        v13 |= *(_DWORD *)(v10 + 4 * (v12 | (32 * v5))) << v12;
        ++v12;
      }
      while (v12 != 32);
      *(_DWORD *)(v11 + 4 * v5++) = v13;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_224330B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246F1080 & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)(0x80000002246F1080 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::utils::BitMap::InitFromBool(std::vector<int> const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t ***result)
{
  unint64_t v1 = (unint64_t)result[1];
  unint64_t v2 = (unint64_t)result[2];
  if (v1 < v2)
  {
    uint64_t v3 = ***result;
    uint64_t v4 = *(*result)[1];
    do
    {
      uint64_t v5 = 0;
      int v6 = 0;
      do
      {
        v6 |= *(_DWORD *)(v3 + 4 * (v5 | (32 * v1))) << v5;
        ++v5;
      }
      while (v5 != 32);
      *(_DWORD *)(v4 + 4 * v1++) = v6;
    }
    while (v1 != v2);
  }
  return result;
}

int *rabit::op::Reducer<rabit::op::BitOR,unsigned int>(int *result, _DWORD *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      int v4 = *result++;
      *a2++ |= v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246F10FDLL & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)(0x80000002246F10FDLL & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::SetNonDefaultPosition(std::vector<int> const&,xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#3} const&)::{lambda(void)#1},void>::invoke(uint64_t result, uint64_t a2, const char *a3)
{
  unint64_t v4 = *(void *)(result + 8);
  unint64_t v3 = *(void *)(result + 16);
  if (v4 < v3)
  {
    long long v5 = (void *)result;
    do
    {
      uint64_t v6 = *v5;
      uint64_t v7 = *(void *)(*v5 + 8);
      unint64_t v8 = *(unsigned int *)(**(void **)*v5 + 4 * v4);
      if ((*(_DWORD *)(*(void *)(v7 + 144) + ((v8 >> 3) & 0x1FFFFFFC)) >> v8))
      {
        int v9 = *(_DWORD *)(*(void *)(v7 + 48) + 4 * v8);
        int v10 = v9 ^ (v9 >> 31);
        unint64_t result = xgboost_old::utils::Assert(*(_DWORD *)(**(void **)(v6 + 16) + 20 * v10 + 4) != -1, "inconsistent reduce information", a3);
        uint64_t v11 = **(void **)(v6 + 16) + 20 * v10;
        int v12 = *(_DWORD *)(v11 + 12);
        int v13 = (_DWORD *)(v11 + 8);
        int v14 = (_DWORD *)(v11 + 4);
        if (v12 < 0) {
          int v14 = v13;
        }
        *(_DWORD *)(*(void *)(v7 + 48) + 4 * v8) = *v14 ^ (*(int *)(*(void *)(v7 + 48) + 4 * v8) >> 31);
        unint64_t v3 = v5[2];
      }
      ++v4;
    }
    while (v4 < v3);
  }
  return result;
}

turi::thread_pool *turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v21 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  uint64_t v7 = (turi::thread *)turi::thread_pool::size(instance);
  unint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    unint64_t v16 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v20, v16);
    double v17 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v18 = (unint64_t)((double)v5 + v17 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v18 = a2;
    }
    v19[2] = (unint64_t)((double)v5 + v17 * (double)0);
    void v19[3] = v18;
    v19[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v19[1] = a3;
    turi::parallel_task_queue::launch((uint64_t)v20, v19);
  }
  if (a2 > v5)
  {
    uint64_t v10 = **(void **)a3;
    uint64_t v11 = *(void *)(*(void *)(a3 + 8) + 48);
    uint64_t v12 = **(void **)(a3 + 16);
    do
    {
      uint64_t v13 = *(unsigned int *)(v10 + 4 * v5);
      int v14 = *(_DWORD *)(v11 + 4 * v13) ^ (*(int *)(v11 + 4 * v13) >> 31);
      LODWORD(v15) = v14;
      if (*(_DWORD *)(v12 + 20 * v14 + 12) == -1)
      {
        uint64_t v15 = v14;
        do
          LODWORD(v15) = *(_DWORD *)(v12 + 20 * v15) & 0x7FFFFFFF;
        while (*(_DWORD *)(v12 + 20 * v15 + 12) == -1);
      }
      *(_DWORD *)(v11 + 4 * v13) = v15;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_22433101C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      unint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246F11C1 & 0x7FFFFFFFFFFFFFFFLL)
        || (unint64_t result = strcmp((const char *)result, (const char *)(0x80000002246F11C1 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::UpdatePosition(xgboost_old::IFMatrix *,xgboost_old::tree::RegTree const&)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t ***result)
{
  unint64_t v1 = (unint64_t)result[1];
  unint64_t v2 = (unint64_t)result[2];
  if (v1 < v2)
  {
    uint64_t v3 = ***result;
    uint64_t v4 = (*result)[1][6];
    uint64_t v5 = *(*result)[2];
    do
    {
      uint64_t v6 = *(unsigned int *)(v3 + 4 * v1);
      int v7 = *(_DWORD *)(v4 + 4 * v6) ^ (*(int *)(v4 + 4 * v6) >> 31);
      LODWORD(v8) = v7;
      if (*(_DWORD *)(v5 + 20 * v7 + 12) == -1)
      {
        uint64_t v8 = v7;
        do
          LODWORD(v8) = *(_DWORD *)(v5 + 20 * v8) & 0x7FFFFFFF;
        while (*(_DWORD *)(v5 + 20 * v8 + 12) == -1);
      }
      *(_DWORD *)(v4 + 4 * v6) = v8;
      ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t xgboost_old::tree::DistColMaker<xgboost_old::tree::GradStats>::Builder::~Builder(uint64_t a1)
{
  *(void *)a1 = &unk_26D779450;
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)(a1 + 192));
  unint64_t v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(void *)(a1 + 152) = v3;
    operator delete(v3);
  }
  *(void *)a1 = &unk_26D778CA0;
  uint64_t v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(void *)(a1 + 128) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(void *)(a1 + 104) = v5;
    operator delete(v5);
  }
  BOOL v9 = (void **)(a1 + 72);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(void *)(a1 + 56) = v6;
    operator delete(v6);
  }
  int v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(void *)(a1 + 32) = v7;
    operator delete(v7);
  }
  return a1;
}

void CoreML::validate<(MLModelType)2004>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
  }
  else {
    uint64_t v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  if (*(_DWORD *)(a1 + 44) != 2004)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "Model not a gazetteer.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((SHIBYTE(__p) & 0x80000000) == 0) {
      return;
    }
    BOOL v9 = v18;
    goto LABEL_34;
  }
  CoreML::Result::Result((CoreML::Result *)&v18);
  uint64_t v5 = operator new(4uLL);
  uint64_t v12 = v5;
  *uint64_t v5 = 3;
  uint64_t v13 = v5 + 1;
  int v14 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 2), 1, (int **)&v12, (uint64_t)&v15);
  unint64_t v18 = v15;
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v16;
  uint64_t v20 = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v18)) {
    goto LABEL_31;
  }
  uint64_t v6 = operator new(4uLL);
  uint64_t v12 = v6;
  _DWORD *v6 = 3;
  uint64_t v13 = v6 + 1;
  int v14 = v6 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 5), 1, (int **)&v12, (uint64_t)&v15);
  unint64_t v18 = v15;
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v16;
  uint64_t v20 = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)&v18);
  if (!v7) {
    goto LABEL_31;
  }
  if (*(_DWORD *)(a1 + 44) == 2004) {
    uint64_t v8 = *(uint64_t **)(a1 + 32);
  }
  else {
    uint64_t v8 = CoreML::Specification::CoreMLModels::Gazetteer::default_instance((CoreML::Specification::CoreMLModels::Gazetteer *)v7);
  }
  if (*((_DWORD *)v8 + 8) <= 1u)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "Model revision number missing or invalid. Must be >= 2");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_27;
  }
  if (*((_DWORD *)v8 + 13) != 200 || *(int *)(v8[5] + 24) <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "Model output class label not set. Must have at least one class label");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_27;
  }
  uint64_t v10 = v8[3];
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  }
  if (!v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "Model parameter data not set");
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_27:
    if (SHIBYTE(v16) < 0) {
      operator delete(v15);
    }
    goto LABEL_32;
  }
LABEL_31:
  *(void *)a2 = v18;
  *(_OWORD *)(a2 + 8) = __p;
  *(void *)(a2 + 24) = v20;
  long long __p = 0uLL;
  uint64_t v20 = 0;
LABEL_32:
  if ((SHIBYTE(v20) & 0x80000000) == 0) {
    return;
  }
  BOOL v9 = (void *)__p;
LABEL_34:
  operator delete(v9);
}

void sub_2243314D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *rabit::engine::GetEngine(rabit::engine *this)
{
  return &rabit::engine::manager;
}

uint64_t rabit::engine::Allreduce_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t), uint64_t a8)
{
  if (a7) {
    return a7(a8);
  }
  return result;
}

void *rabit::engine::ReduceHandle::ReduceHandle(void *this)
{
  *this = 0;
  this[2] = 0;
  return this;
}

uint64_t rabit::engine::ReduceHandle::Allreduce(rabit::engine::ReduceHandle *this, void *a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(void *, void *), void *a6)
{
  if (a5) {
    return a5(a6, a2);
  }
  return result;
}

void rabit::engine::EmptyEngine::Allreduce(uint64_t a1, const char *a2)
{
}

void rabit::engine::EmptyEngine::InitAfterException(rabit::engine::EmptyEngine *this, const char *a2)
{
}

uint64_t rabit::engine::EmptyEngine::CheckPoint(uint64_t result)
{
  return result;
}

uint64_t rabit::engine::EmptyEngine::VersionNumber(rabit::engine::EmptyEngine *this)
{
  return *((unsigned int *)this + 2);
}

void rabit::engine::EmptyEngine::TrackerPrint(uint64_t a1, const char *a2)
{
  if (a2[23] >= 0) {
    unint64_t v2 = (uint64_t *)a2;
  }
  else {
    unint64_t v2 = *(uint64_t **)a2;
  }
  xgboost_old::utils::Printf((xgboost_old::utils *)"%s", a2, v2);
}

void rabit::utils::Error(rabit::utils *this, const char *a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = operator new(0x1008uLL);
  bzero(v3, 0x1001uLL);
  vsnprintf((char *)v3, 0x1000uLL, (const char *)this, va);
  fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", (const char *)v3);
  exit(-1);
}

void sub_22433166C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::RangeValue::value(CoreML::RangeValue *this)
{
  if (*(unsigned char *)this)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Attempting to access unbound size_t val from RangeVal.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return *((void *)this + 1);
}

void sub_2243316E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::RangeValue::isUnbound(CoreML::RangeValue *this)
{
  return *(unsigned __int8 *)this;
}

BOOL CoreML::RangeValue::operator+(unsigned char *a1)
{
  return *a1 != 0;
}

BOOL CoreML::RangeValue::operator+(unsigned char *a1, int a2)
{
  if ((a2 & 0x80000000) == 0) {
    return *a1 != 0;
  }
  return *a1 != 0;
}

BOOL CoreML::RangeValue::operator*(unsigned char *a1)
{
  return *a1 != 0;
}

void *operator<<(void *a1, CoreML::RangeValue *this)
{
  if (*(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "inf");
    if ((v7 & 0x80u) == 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    if ((v7 & 0x80u) == 0) {
      uint64_t v4 = v7;
    }
    else {
      uint64_t v4 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
    if ((char)v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    CoreML::RangeValue::value(this);
    std::ostream::operator<<();
  }
  return a1;
}

void sub_224331824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::RangeValue::operator-(unsigned char *a1)
{
  return *a1 != 0;
}

uint64_t CoreML::RangeValue::operator/(CoreML::RangeValue *a1, uint64_t a2)
{
  if (*(unsigned char *)a1) {
    return 1;
  }
  if (!a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Dividing range ", 15);
    uint64_t v5 = operator<<(v4, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" by 0.", 6);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return 0;
}

void sub_224331960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::ShapeRange(uint64_t this)
{
  *(unsigned char *)this = 0;
  *(void *)(this + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(this + 16) = 1;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::ShapeRange::ShapeRange(uint64_t this, uint64_t a2)
{
  *(unsigned char *)this = 0;
  *(void *)(this + ++*(_DWORD *)(result + 8) = a2;
  *(unsigned char *)(this + 16) = 1;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::ShapeRange::ShapeRange(uint64_t this, unint64_t a2, unint64_t a3)
{
  *(unsigned char *)this = 0;
  *(void *)(this + ++*(_DWORD *)(result + 8) = a2;
  *(unsigned char *)(this + 16) = 0;
  *(void *)(this + 24) = a3;
  if (a2 > a3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Constructing invalid ShapeRange with ", 37);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return this;
}

void sub_224331AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

CoreML::ShapeRange *CoreML::ShapeRange::ShapeRange(CoreML::ShapeRange *this, const CoreML::RangeValue *a2, const CoreML::RangeValue *a3)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *(_OWORD *)a3;
  if (*(unsigned char *)a2) {
    goto LABEL_6;
  }
  if (*(unsigned char *)a3) {
    return this;
  }
  unint64_t v6 = *((void *)a2 + 1);
  if (v6 > CoreML::RangeValue::value(a3))
  {
LABEL_6:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Constructing invalid ShapeRange with ", 37);
    BOOL v9 = operator<<(v8, a2);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
    operator<<(v10, a3);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (*(unsigned char *)a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Constructing invalid ShapeRange unbound minimum value.", 54);
    uint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v12, &v13);
    __cxa_throw(v12, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return this;
}

void sub_224331C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::maximum(CoreML::ShapeRange *this)
{
  return *((void *)this + 2);
}

uint64_t CoreML::ShapeRange::operator+@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
  uint64_t v6 = 1;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)(a3 + 24) = 0;
  if (*(unsigned char *)a1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 8) + a2;
  }
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v11);
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = *(void *)(a1 + 24) + a2;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v8;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v11);
}

uint64_t CoreML::ShapeRange::setLower(CoreML::ShapeRange *this, const CoreML::RangeValue *a2)
{
  uint64_t result = CoreML::ShapeRange::isValid(this, a2);
  if (!result)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Invalid setLower ", 17);
    uint64_t v7 = operator<<(v6, a2);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" for range: ", 12);
    uint64_t v9 = operator<<(v8, (long long *)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (*(unsigned char *)a2)
  {
    char v5 = 1;
  }
  else
  {
    uint64_t result = CoreML::RangeValue::value(a2);
    char v5 = 0;
    *((void *)this + 1) = result;
  }
  *(unsigned char *)this = v5;
  return result;
}

void sub_224331E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::setUpper(CoreML::ShapeRange *this, const CoreML::RangeValue *a2)
{
  uint64_t result = CoreML::ShapeRange::isValid(this, a2);
  if (!result)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Invalid setUpper ", 17);
    uint64_t v7 = operator<<(v6, a2);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" for range: ", 12);
    uint64_t v9 = operator<<(v8, (long long *)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (*(unsigned char *)a2)
  {
    char v5 = 1;
  }
  else
  {
    uint64_t result = CoreML::RangeValue::value(a2);
    char v5 = 0;
    *((void *)this + 3) = result;
  }
  *((unsigned char *)this + 16) = v5;
  return result;
}

void sub_224331FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::operator-@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
  uint64_t v6 = 1;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)(a3 + 24) = 0;
  if (*(unsigned char *)a1)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v8 = *(void *)(a1 + 8);
    BOOL v9 = v8 >= a2;
    unint64_t v7 = v8 - a2;
    if (!v9) {
      unint64_t v7 = 0;
    }
  }
  uint64_t v14 = v6;
  unint64_t v15 = v7;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v10 = 0;
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v12 = *(void *)(a1 + 24);
    BOOL v9 = v12 >= a2;
    unint64_t v10 = v12 - a2;
    if (!v9) {
      unint64_t v10 = 0;
    }
  }
  uint64_t v14 = v11;
  unint64_t v15 = v10;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator*@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
  uint64_t v6 = 1;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)(a3 + 24) = 0;
  if (*(unsigned char *)a1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 8) * a2;
  }
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v11);
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = *(void *)(a1 + 24) * a2;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v8;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v11);
}

uint64_t CoreML::ShapeRange::operator/@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)(a3 + 24) = 0;
  uint64_t v9 = CoreML::RangeValue::operator/((CoreML::RangeValue *)a1, a2);
  uint64_t v10 = v6;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v9);
  uint64_t v9 = CoreML::RangeValue::operator/((CoreML::RangeValue *)(a1 + 16), a2);
  uint64_t v10 = v7;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v9);
}

uint64_t CoreML::ShapeRange::divideAndRoundUp@<X0>(CoreML::ShapeRange *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = 0;
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
  uint64_t v7 = 1;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)(a3 + 24) = 0;
  if (a2)
  {
    if (!*(unsigned char *)this)
    {
      unint64_t v6 = *((void *)this + 1);
      uint64_t v7 = 0;
      if (v6) {
        unint64_t v6 = (v6 - 1) / a2 + 1;
      }
    }
  }
  uint64_t v11 = v7;
  unint64_t v12 = v6;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v11);
  unint64_t v8 = 0;
  uint64_t v9 = 1;
  if (a2)
  {
    if (!*((unsigned char *)this + 16))
    {
      unint64_t v8 = *((void *)this + 3);
      uint64_t v9 = 0;
      if (v8) {
        unint64_t v8 = (v8 - 1) / a2 + 1;
      }
    }
  }
  uint64_t v11 = v9;
  unint64_t v12 = v8;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v11);
}

uint64_t CoreML::ShapeRange::operator+@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
  uint64_t v6 = 1;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)(a3 + 24) = 0;
  long long v13 = *a2;
  if ((_BYTE)v13)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13);
    if (*(unsigned char *)a1)
    {
      uint64_t v7 = 0;
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)(a1 + 8) + v8;
    }
  }
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
  long long v13 = a2[1];
  if ((_BYTE)v13 || (uint64_t v9 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13), *(unsigned char *)(a1 + 16)))
  {
    uint64_t v10 = 0;
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = *(void *)(a1 + 24) + v9;
  }
  uint64_t v14 = v11;
  uint64_t v15 = v10;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator+@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)(a3 + 24) = 0;
  if ((a2 & 0x80000000) == 0)
  {
    if (!*(unsigned char *)a1)
    {
      uint64_t v6 = 0;
      unint64_t v7 = *(void *)(a1 + 8) + a2;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*(unsigned char *)a1)
  {
LABEL_5:
    unint64_t v7 = 0;
    uint64_t v6 = 1;
    goto LABEL_6;
  }
  uint64_t v6 = 0;
  unint64_t v11 = -a2;
  unint64_t v12 = *(void *)(a1 + 8);
  BOOL v13 = v12 >= v11;
  unint64_t v7 = v12 - v11;
  if (!v13) {
    unint64_t v7 = 0;
  }
LABEL_6:
  uint64_t v16 = v6;
  unint64_t v17 = v7;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v16);
  if ((a2 & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 16))
    {
      uint64_t v8 = 0;
      unint64_t v9 = *(void *)(a1 + 24) + a2;
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v9 = 0;
    uint64_t v8 = 1;
    goto LABEL_11;
  }
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_10;
  }
  uint64_t v8 = 0;
  unint64_t v14 = -a2;
  unint64_t v15 = *(void *)(a1 + 24);
  BOOL v13 = v15 >= v14;
  unint64_t v9 = v15 - v14;
  if (!v13) {
    unint64_t v9 = 0;
  }
LABEL_11:
  uint64_t v16 = v8;
  unint64_t v17 = v9;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v16);
}

uint64_t CoreML::ShapeRange::operator-@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
  uint64_t v6 = 1;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)(a3 + 24) = 0;
  if (*(unsigned char *)a1)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    if ((a2 & 0x80000000) != 0)
    {
      unint64_t v7 = *(void *)(a1 + 8) + -a2;
    }
    else
    {
      unint64_t v8 = *(void *)(a1 + 8);
      BOOL v9 = v8 >= a2;
      unint64_t v7 = v8 - a2;
      if (!v9) {
        unint64_t v7 = 0;
      }
    }
  }
  uint64_t v14 = v6;
  unint64_t v15 = v7;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v10 = 0;
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    if ((a2 & 0x80000000) != 0)
    {
      unint64_t v10 = *(void *)(a1 + 24) + -a2;
    }
    else
    {
      unint64_t v12 = *(void *)(a1 + 24);
      BOOL v9 = v12 >= a2;
      unint64_t v10 = v12 - a2;
      if (!v9) {
        unint64_t v10 = 0;
      }
    }
  }
  uint64_t v14 = v11;
  unint64_t v15 = v10;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator*@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
  uint64_t v6 = 1;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)(a3 + 24) = 0;
  long long v13 = *a2;
  if ((_BYTE)v13)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13);
    if (*(unsigned char *)a1)
    {
      uint64_t v7 = 0;
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)(a1 + 8) * v8;
    }
  }
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  CoreML::ShapeRange::setLower((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
  long long v13 = a2[1];
  if ((_BYTE)v13 || (uint64_t v9 = CoreML::RangeValue::value((CoreML::RangeValue *)&v13), *(unsigned char *)(a1 + 16)))
  {
    uint64_t v10 = 0;
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = *(void *)(a1 + 24) * v9;
  }
  uint64_t v14 = v11;
  uint64_t v15 = v10;
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v14);
}

uint64_t CoreML::ShapeRange::operator/@<X0>(long long *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 <= 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
    char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Dividing ShapeRange ", 20);
    uint64_t v6 = operator<<(v5, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" by negative or zero value ", 27);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v8);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return CoreML::ShapeRange::operator/((uint64_t)a1, a2, a3);
}

void sub_224332750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void *operator<<(void *a1, long long *a2)
{
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  long long v10 = *a2;
  char v5 = operator<<(v4, (CoreML::RangeValue *)&v10);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  long long v9 = a2[1];
  uint64_t v7 = operator<<(v6, (CoreML::RangeValue *)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"]", 1);
  return a1;
}

BOOL CoreML::ShapeRange::isValid(CoreML::ShapeRange *this, const CoreML::RangeValue *a2)
{
  if (!*(unsigned char *)a2)
  {
    if (*(unsigned char *)this) {
      return 0;
    }
    unint64_t v5 = *((void *)this + 1);
    if (v5 > CoreML::RangeValue::value(a2)) {
      return 0;
    }
  }
  if (*((unsigned char *)this + 16)) {
    return 1;
  }
  if (*(unsigned char *)a2) {
    return 0;
  }
  unint64_t v6 = *((void *)this + 3);
  return v6 >= CoreML::RangeValue::value(a2);
}

uint64_t CoreML::ShapeRange::setValue(uint64_t this, unint64_t a2)
{
  if (*(unsigned char *)this || *(void *)(this + 8) > a2 || !*(unsigned char *)(this + 16) && *(void *)(this + 24) < a2)
  {
    unint64_t v2 = (long long *)this;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Invalid setValue ", 17);
    uint64_t v3 = (void *)std::ostream::operator<<();
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" for range: ", 12);
    unint64_t v5 = operator<<(v4, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)(this + ++*(_DWORD *)(result + 8) = a2;
  *(unsigned char *)this = 0;
  *(void *)(this + 24) = a2;
  *(unsigned char *)(this + 16) = 0;
  return this;
}

void sub_2243329B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unint64_t CoreML::ShapeRange::intersect@<X0>(CoreML::ShapeRange *this@<X0>, const CoreML::ShapeRange *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)(a3 + 24) = 0;
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 1);
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  if ((_BYTE)v6) {
    goto LABEL_2;
  }
  if (!*(unsigned char *)this)
  {
    unint64_t v10 = *((void *)this + 1);
    if (v10 <= CoreML::RangeValue::value((CoreML::RangeValue *)&v24))
    {
      uint64_t v6 = *(void *)a2;
      uint64_t v7 = *((void *)a2 + 1);
LABEL_2:
      uint64_t v24 = v6;
      uint64_t v25 = v7;
      std::string v8 = (const CoreML::RangeValue *)&v24;
      long long v9 = (CoreML::ShapeRange *)a3;
      goto LABEL_6;
    }
  }
  long long v9 = (CoreML::ShapeRange *)a3;
  std::string v8 = this;
LABEL_6:
  CoreML::ShapeRange::setLower(v9, v8);
  int v11 = *((unsigned __int8 *)this + 16);
  uint64_t v12 = *((void *)a2 + 2);
  uint64_t v13 = *((void *)a2 + 3);
  uint64_t v24 = v12;
  uint64_t v25 = v13;
  if (!v11)
  {
    if ((_BYTE)v12 || (unint64_t v16 = *((void *)this + 3), v16 < CoreML::RangeValue::value((CoreML::RangeValue *)&v24)))
    {
      uint64_t v15 = (CoreML::ShapeRange *)a3;
      uint64_t v14 = (CoreML::ShapeRange *)((char *)this + 16);
      goto LABEL_11;
    }
    uint64_t v12 = *((void *)a2 + 2);
    uint64_t v13 = *((void *)a2 + 3);
  }
  uint64_t v24 = v12;
  uint64_t v25 = v13;
  uint64_t v14 = (const CoreML::RangeValue *)&v24;
  uint64_t v15 = (CoreML::ShapeRange *)a3;
LABEL_11:
  unint64_t result = CoreML::ShapeRange::setUpper(v15, v14);
  if (*(unsigned char *)this
    || !*((unsigned char *)this + 16)
    && ((unint64_t v18 = *((void *)this + 1),
         unint64_t result = CoreML::RangeValue::value((CoreML::ShapeRange *)((char *)this + 16)),
         v18 > result)
     || *(unsigned char *)this))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v24);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Invalid intersection between ", 29);
    uint64_t v20 = operator<<(v19, (long long *)this);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" and ", 5);
    operator<<(v21, (long long *)a2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v23);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_224332BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreML::ShapeRange::unify@<X0>(CoreML::ShapeRange *this@<X0>, const CoreML::ShapeRange *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)(a3 + 24) = 0;
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 1);
  uint64_t v17 = v6;
  uint64_t v18 = v7;
  if ((_BYTE)v6) {
    goto LABEL_2;
  }
  if (!*(unsigned char *)this)
  {
    unint64_t v10 = *((void *)this + 1);
    if (v10 <= CoreML::RangeValue::value((CoreML::RangeValue *)&v17))
    {
LABEL_2:
      std::string v8 = (CoreML::ShapeRange *)a3;
      long long v9 = this;
      goto LABEL_7;
    }
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
  }
  uint64_t v17 = v6;
  uint64_t v18 = v7;
  long long v9 = (const CoreML::RangeValue *)&v17;
  std::string v8 = (CoreML::ShapeRange *)a3;
LABEL_7:
  CoreML::ShapeRange::setLower(v8, v9);
  uint64_t v12 = (CoreML::ShapeRange *)((char *)this + 16);
  int v11 = *((unsigned __int8 *)this + 16);
  uint64_t v13 = *((void *)a2 + 2);
  uint64_t v14 = *((void *)a2 + 3);
  uint64_t v17 = v13;
  uint64_t v18 = v14;
  if (!v11)
  {
    if (!(_BYTE)v13)
    {
      unint64_t v16 = *((void *)this + 3);
      if (v16 >= CoreML::RangeValue::value((CoreML::RangeValue *)&v17)) {
        goto LABEL_8;
      }
      uint64_t v13 = *((void *)a2 + 2);
      uint64_t v14 = *((void *)a2 + 3);
    }
    uint64_t v17 = v13;
    uint64_t v18 = v14;
    return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, (const CoreML::RangeValue *)&v17);
  }
LABEL_8:
  return CoreML::ShapeRange::setUpper((CoreML::ShapeRange *)a3, v12);
}

BOOL CoreML::ShapeRange::isFixed(CoreML::ShapeRange *this)
{
  int v3 = *((unsigned __int8 *)this + 16);
  unint64_t v2 = (CoreML::ShapeRange *)((char *)this + 16);
  if (v3) {
    return 0;
  }
  uint64_t v5 = CoreML::RangeValue::value(v2);
  return v5 == CoreML::RangeValue::value(this);
}

double CoreML::ShapeConstraint::ShapeConstraint(CoreML::ShapeConstraint *this)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 4++*(_DWORD *)(result + 8) = 1;
  *((void *)this + 7) = 0;
  *((unsigned char *)this + 64) = 0;
  *((void *)this + 9) = 0;
  *((unsigned char *)this + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 1;
  *((void *)this + 11) = 0;
  *((unsigned char *)this + 96) = 0;
  *((void *)this + 13) = 0;
  *((unsigned char *)this + 112) = 1;
  *((void *)this + 15) = 0;
  *((unsigned char *)this + 12++*(_DWORD *)(result + 8) = 0;
  *((void *)this + 17) = 0;
  *((unsigned char *)this + 144) = 1;
  double result = 0.0;
  *(_OWORD *)((char *)this + 16++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return result;
}

void CoreML::ShapeConstraint::updateConstraint(CoreML::ShapeConstraint *this, const CoreML::Specification::FeatureType *a2)
{
  int v3 = this;
  int v4 = *((_DWORD *)a2 + 9);
  if (v4 == 5)
  {
    memset(&__p, 0, sizeof(__p));
    uint64_t v9 = *((void *)a2 + 3);
    int v10 = *(_DWORD *)(v9 + 60);
    if (v10 == 21)
    {
      uint64_t v44 = *(void *)(v9 + 40);
      uint64_t v45 = *(int *)(v44 + 24);
      uint64_t v46 = *(void *)(v44 + 32);
      if (v46) {
        int v47 = (uint64_t *)(v46 + 8);
      }
      else {
        int v47 = 0;
      }
      if (!v45) {
        goto LABEL_130;
      }
      LODWORD(v4++*(_DWORD *)(result + 8) = 0;
      uint64_t v49 = 8 * v45;
      do
      {
        uint64_t v50 = *v47++;
        int v51 = *(_DWORD *)(v50 + 16);
        if (v51 <= (int)v48) {
          uint64_t v48 = v48;
        }
        else {
          uint64_t v48 = v51;
        }
        v49 -= 8;
      }
      while (v49);
      if ((int)v48 >= 1)
      {
        for (uint64_t i = 0; i != v48; ++i)
        {
          uint64_t v53 = 0;
          unint64_t v54 = 0;
          unint64_t v55 = -1;
          while (1)
          {
            uint64_t v56 = *((_DWORD *)a2 + 9) == 5
                ? (uint64_t *)*((void *)a2 + 3)
                : CoreML::Specification::ArrayFeatureType::default_instance(this);
            unint64_t v57 = *((_DWORD *)v56 + 15) == 21
                ? (int *)v56[5]
                : (int *)CoreML::Specification::ArrayFeatureType_EnumeratedShapes::default_instance((CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)v56);
            if (v53 >= v57[6]) {
              break;
            }
            if (*((_DWORD *)a2 + 9) == 5) {
              uint64_t v58 = (uint64_t *)*((void *)a2 + 3);
            }
            else {
              uint64_t v58 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v57);
            }
            if (*((_DWORD *)v58 + 15) == 21) {
              this = (CoreML::ShapeConstraint *)v58[5];
            }
            else {
              this = (CoreML::ShapeConstraint *)CoreML::Specification::ArrayFeatureType_EnumeratedShapes::default_instance((CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)v58);
            }
            unint64_t v59 = *(void *)(*(void *)(*(void *)(*((void *)this + 4) + 8 * v53 + 8) + 24) + 8 * i + 8);
            if (v55 >= v59) {
              unint64_t v55 = *(void *)(*(void *)(*(void *)(*((void *)this + 4) + 8 * v53 + 8) + 24) + 8 * i + 8);
            }
            if (v54 <= v59) {
              unint64_t v54 = *(void *)(*(void *)(*(void *)(*((void *)this + 4) + 8 * v53 + 8) + 24) + 8 * i + 8);
            }
            ++v53;
          }
          this = (CoreML::ShapeConstraint *)CoreML::ShapeRange::ShapeRange((uint64_t)v104, v55, v54);
          std::string::size_type size = (CoreML::ShapeConstraint *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            this = (CoreML::ShapeConstraint *)__p.__r_.__value_.__r.__words[0];
            uint64_t v62 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5;
            unint64_t v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 59) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            int64_t v64 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 4 > v63) {
              unint64_t v63 = v64 >> 4;
            }
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v65 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v65 = v63;
            }
            if (v65)
            {
              uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v65);
              std::string::size_type size = (CoreML::ShapeConstraint *)__p.__r_.__value_.__l.__size_;
              this = (CoreML::ShapeConstraint *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              uint64_t v66 = 0;
            }
            long long v67 = *(_OWORD *)&v104[16];
            float v68 = &v66[32 * v62];
            *(_OWORD *)float v68 = *(_OWORD *)v104;
            *((_OWORD *)v68 + 1) = v67;
            if (size == this)
            {
              std::string::size_type v71 = (std::string::size_type)&v66[32 * v62];
            }
            else
            {
              double v69 = &v66[32 * v62];
              do
              {
                long long v70 = *((_OWORD *)size - 1);
                std::string::size_type v71 = (std::string::size_type)(v69 - 32);
                *((_OWORD *)v69 - 2) = *((_OWORD *)size - 2);
                *((_OWORD *)v69 - 1) = v70;
                std::string::size_type size = (CoreML::ShapeConstraint *)((char *)size - 32);
                v69 -= 32;
              }
              while (size != this);
            }
            std::string::size_type v11 = (std::string::size_type)(v68 + 32);
            __p.__r_.__value_.__r.__words[0] = v71;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v68 + 32);
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v66[32 * v65];
            if (this) {
              operator delete(this);
            }
          }
          else
          {
            long long v61 = *(_OWORD *)&v104[16];
            *(_OWORD *)__p.__r_.__value_.__l.__size_ = *(_OWORD *)v104;
            *((_OWORD *)size + 1) = v61;
            std::string::size_type v11 = (std::string::size_type)size + 32;
          }
          __p.__r_.__value_.__l.__size_ = v11;
        }
      }
      else
      {
LABEL_130:
        std::string::size_type v11 = 0;
      }
    }
    else
    {
      std::string::size_type v11 = 0;
      if (v10 == 31)
      {
        uint64_t v12 = 0;
        for (int j = 5; ; int j = *((_DWORD *)a2 + 9))
        {
          uint64_t v14 = j == 5
              ? (uint64_t *)*((void *)a2 + 3)
              : CoreML::Specification::ArrayFeatureType::default_instance(this);
          this = *((_DWORD *)v14 + 15) == 31
               ? (CoreML::ShapeConstraint *)v14[5]
               : (CoreML::ShapeConstraint *)CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v14);
          if (v12 >= *((int *)this + 6)) {
            break;
          }
          if (*((_DWORD *)a2 + 9) == 5) {
            uint64_t v15 = (uint64_t *)*((void *)a2 + 3);
          }
          else {
            uint64_t v15 = CoreML::Specification::ArrayFeatureType::default_instance(this);
          }
          if (*((_DWORD *)v15 + 15) == 31) {
            this = (CoreML::ShapeConstraint *)v15[5];
          }
          else {
            this = (CoreML::ShapeConstraint *)CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v15);
          }
          uint64_t v16 = *(void *)(*((void *)this + 4) + 8 * v12 + 8);
          uint64_t v17 = *(void *)(v16 + 16);
          uint64_t v18 = *(void *)(v16 + 24);
          uint64_t v19 = v18 & ~(v18 >> 63);
          std::string::size_type v20 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            uint64_t v22 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5;
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 59) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            int64_t v24 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 4 > v23) {
              unint64_t v23 = v24 >> 4;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v25 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v23;
            }
            if (v25) {
              this = (CoreML::ShapeConstraint *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v25);
            }
            else {
              this = 0;
            }
            std::vector<unsigned int>::pointer v26 = (char *)this + 32 * v22;
            *std::vector<unsigned int>::pointer v26 = 0;
            *((void *)v26 + 1) = v17;
            v26[16] = v18 < 0;
            *((void *)v26 + 3) = v19;
            unint64_t v27 = (char *)__p.__r_.__value_.__l.__size_;
            std::string::size_type v28 = __p.__r_.__value_.__r.__words[0];
            std::string::size_type v29 = (std::string::size_type)v26;
            if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
            {
              do
              {
                long long v30 = *((_OWORD *)v27 - 1);
                *(_OWORD *)(v29 - 32) = *((_OWORD *)v27 - 2);
                *(_OWORD *)(v29 - 16) = v30;
                v29 -= 32;
                v27 -= 32;
              }
              while (v27 != (char *)v28);
              unint64_t v27 = (char *)v28;
            }
            std::string::size_type v21 = (std::string::size_type)(v26 + 32);
            __p.__r_.__value_.__r.__words[0] = v29;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v26 + 32);
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)this + 32 * v25;
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *(unsigned char *)__p.__r_.__value_.__l.__size_ = 0;
            *(void *)(v20 + ++*(_DWORD *)(result + 8) = v17;
            *(unsigned char *)(v20 + 16) = v18 < 0;
            *(void *)(v20 + 24) = v19;
            std::string::size_type v21 = v20 + 32;
          }
          __p.__r_.__value_.__l.__size_ = v21;
          ++v12;
        }
        std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
      }
    }
    uint64_t v74 = (uint64_t)(v11 - __p.__r_.__value_.__r.__words[0]) >> 5;
    if (v74)
    {
      if (v74 == 3)
      {
        CoreML::ShapeConstraint::updateChannelRange(v3, (const CoreML::ShapeRange *)__p.__r_.__value_.__l.__data_);
        CoreML::ShapeConstraint::updateHeightRange(v3, (const CoreML::ShapeRange *)(__p.__r_.__value_.__r.__words[0] + 32));
        CoreML::ShapeConstraint::updateWidthRange(v3, (const CoreML::ShapeRange *)(__p.__r_.__value_.__r.__words[0] + 64));
      }
      else
      {
        if (v74 != 1)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          double v99 = std::string::append(&v101, "\" with an invalid array shape constraint.");
          long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
          *(void *)&v104[16] = *((void *)&v99->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v104 = v100;
          v99->__r_.__value_.__l.__size_ = 0;
          v99->__r_.__value_.__r.__words[2] = 0;
          v99->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)v104);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        CoreML::ShapeConstraint::updateChannelRange(v3, (const CoreML::ShapeRange *)__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (*((_DWORD *)a2 + 9) == 5) {
        double v75 = (uint64_t *)*((void *)a2 + 3);
      }
      else {
        double v75 = CoreML::Specification::ArrayFeatureType::default_instance(this);
      }
      double v76 = (CoreML::Specification::ArrayFeatureType *)CoreML::ShapeRange::setValue((uint64_t)v3 + 64, *(void *)(v75[3] + 8));
      if (*((_DWORD *)a2 + 9) == 5) {
        double v77 = (uint64_t *)*((void *)a2 + 3);
      }
      else {
        double v77 = CoreML::Specification::ArrayFeatureType::default_instance(v76);
      }
      if (*((_DWORD *)v77 + 4) == 3)
      {
        if (*((_DWORD *)a2 + 9) == 5) {
          double v78 = (uint64_t *)*((void *)a2 + 3);
        }
        else {
          double v78 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v77);
        }
        uint64_t v93 = (CoreML::Specification::ArrayFeatureType *)CoreML::ShapeRange::setValue((uint64_t)v3 + 96, *(void *)(v78[3] + 16));
        if (*((_DWORD *)a2 + 9) == 5) {
          float v94 = (uint64_t *)*((void *)a2 + 3);
        }
        else {
          float v94 = CoreML::Specification::ArrayFeatureType::default_instance(v93);
        }
        unint64_t v79 = *(void *)(v94[3] + 24);
      }
      else
      {
        unint64_t v79 = 1;
        CoreML::ShapeRange::setValue((uint64_t)v3 + 96, 1uLL);
      }
      CoreML::ShapeRange::setValue((uint64_t)v3 + 128, v79);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (v4 != 4)
    {
      float v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      float v96 = std::string::append(&__p, " with a type description which is not a multi array or image.");
      long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      *(void *)&v104[16] = *((void *)&v96->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v104 = v97;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      v96->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v95, (const std::string *)v104);
      __cxa_throw(v95, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v5 = (char *)this + 64;
    if (*(_DWORD *)(*((void *)a2 + 3) + 32) == 10) {
      unint64_t v6 = 1;
    }
    else {
      unint64_t v6 = 3;
    }
    uint64_t v7 = (CoreML::Specification::ImageFeatureType *)CoreML::ShapeRange::setValue((uint64_t)v5, v6);
    if (*((_DWORD *)a2 + 9) == 4) {
      std::string v8 = (uint64_t *)*((void *)a2 + 3);
    }
    else {
      std::string v8 = CoreML::Specification::ImageFeatureType::default_instance(v7);
    }
    int v31 = *((_DWORD *)v8 + 13);
    if (v31)
    {
      if (v31 == 31)
      {
        if (*((_DWORD *)a2 + 9) == 4) {
          float v72 = (uint64_t *)*((void *)a2 + 3);
        }
        else {
          float v72 = CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v8);
        }
        if (*((_DWORD *)v72 + 13) == 31) {
          double v80 = (uint64_t *)v72[5];
        }
        else {
          double v80 = CoreML::Specification::ImageFeatureType_ImageSizeRange::default_instance((CoreML::Specification::ImageFeatureType_ImageSizeRange *)v72);
        }
        unint64_t v81 = (uint64_t *)v80[2];
        if (!v81) {
          unint64_t v81 = &CoreML::Specification::_SizeRange_default_instance_;
        }
        v104[0] = 0;
        uint64_t v83 = v81[2];
        uint64_t v82 = v81[3];
        *(void *)&v104[8] = v83;
        v104[16] = v82 < 0;
        *(void *)&v104[24] = v82 & ~(v82 >> 63);
        CoreML::ShapeConstraint::updateWidthRange(v3, (const CoreML::ShapeRange *)v104);
        if (*((_DWORD *)a2 + 9) == 4) {
          double v85 = (uint64_t *)*((void *)a2 + 3);
        }
        else {
          double v85 = CoreML::Specification::ImageFeatureType::default_instance(v84);
        }
        if (*((_DWORD *)v85 + 13) == 31) {
          float v86 = (uint64_t *)v85[5];
        }
        else {
          float v86 = CoreML::Specification::ImageFeatureType_ImageSizeRange::default_instance((CoreML::Specification::ImageFeatureType_ImageSizeRange *)v85);
        }
        float v87 = (uint64_t *)v86[3];
        if (!v87) {
          float v87 = &CoreML::Specification::_SizeRange_default_instance_;
        }
        __p.__r_.__value_.__s.__data_[0] = 0;
        std::string::size_type v89 = v87[2];
        uint64_t v88 = v87[3];
        __p.__r_.__value_.__l.__size_ = v89;
        __p.__r_.__value_.__s.__data_[16] = v88 < 0;
        uint64_t v103 = v88 & ~(v88 >> 63);
        goto LABEL_161;
      }
      if (v31 == 21)
      {
        unint64_t v32 = 0;
        unint64_t v33 = 0;
        unint64_t v34 = -1;
        uint64_t v35 = 1;
        unint64_t v36 = -1;
        while (1)
        {
          std::vector<unsigned int>::size_type v37 = *((_DWORD *)a2 + 9) == 4
              ? (uint64_t *)*((void *)a2 + 3)
              : CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v8);
          unint64_t v38 = *((_DWORD *)v37 + 13) == 21
              ? (int *)v37[5]
              : (int *)CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::default_instance((CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)v37);
          if (v35 - 1 >= v38[6]) {
            break;
          }
          if (*((_DWORD *)a2 + 9) == 4) {
            uint64_t v39 = (uint64_t *)*((void *)a2 + 3);
          }
          else {
            uint64_t v39 = CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v38);
          }
          if (*((_DWORD *)v39 + 13) == 21) {
            unint64_t v40 = (uint64_t *)v39[5];
          }
          else {
            unint64_t v40 = CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::default_instance((CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)v39);
          }
          unint64_t v41 = *(void *)(*(void *)(v40[4] + 8 * v35) + 16);
          if (v41 > v33) {
            unint64_t v33 = *(void *)(*(void *)(v40[4] + 8 * v35) + 16);
          }
          if (v41 < v36) {
            unint64_t v36 = *(void *)(*(void *)(v40[4] + 8 * v35) + 16);
          }
          if (*((_DWORD *)a2 + 9) == 4) {
            uint64_t v42 = (uint64_t *)*((void *)a2 + 3);
          }
          else {
            uint64_t v42 = CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v40);
          }
          if (*((_DWORD *)v42 + 13) == 21) {
            std::string v8 = (uint64_t *)v42[5];
          }
          else {
            std::string v8 = CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::default_instance((CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)v42);
          }
          unint64_t v43 = *(void *)(*(void *)(v8[4] + 8 * v35) + 24);
          if (v43 > v32) {
            unint64_t v32 = *(void *)(*(void *)(v8[4] + 8 * v35) + 24);
          }
          if (v43 < v34) {
            unint64_t v34 = *(void *)(*(void *)(v8[4] + 8 * v35) + 24);
          }
          ++v35;
        }
        CoreML::ShapeRange::ShapeRange((uint64_t)v104, v36, v33);
        CoreML::ShapeConstraint::updateWidthRange(v3, (const CoreML::ShapeRange *)v104);
        CoreML::ShapeRange::ShapeRange((uint64_t)&__p, v34, v32);
LABEL_161:
        CoreML::ShapeConstraint::updateHeightRange(v3, (const CoreML::ShapeRange *)&__p);
      }
    }
    else
    {
      if (*((_DWORD *)a2 + 9) == 4) {
        double v73 = (uint64_t *)*((void *)a2 + 3);
      }
      else {
        double v73 = CoreML::Specification::ImageFeatureType::default_instance((CoreML::Specification::ImageFeatureType *)v8);
      }
      float v90 = (CoreML::Specification::ImageFeatureType *)CoreML::ShapeRange::setValue((uint64_t)v3 + 96, v73[3]);
      if (*((_DWORD *)a2 + 9) == 4) {
        uint64_t v91 = (uint64_t *)*((void *)a2 + 3);
      }
      else {
        uint64_t v91 = CoreML::Specification::ImageFeatureType::default_instance(v90);
      }
      unint64_t v92 = v91[2];
      CoreML::ShapeRange::setValue((uint64_t)v3 + 128, v92);
    }
  }
}

void sub_22433367C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
    {
LABEL_8:
      if (a16) {
        operator delete(a16);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

uint64_t CoreML::ShapeConstraint::setChannel(CoreML::ShapeConstraint *this, unint64_t a2)
{
  return CoreML::ShapeRange::setValue((uint64_t)this + 64, a2);
}

double CoreML::ShapeConstraint::updateWidthRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  unint64_t v2 = (_OWORD *)((char *)this + 128);
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 128), a2, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *unint64_t v2 = v5[0];
  v2[1] = v4;
  return result;
}

double CoreML::ShapeConstraint::updateHeightRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  unint64_t v2 = (_OWORD *)((char *)this + 96);
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 96), a2, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *unint64_t v2 = v5[0];
  v2[1] = v4;
  return result;
}

uint64_t CoreML::ShapeConstraint::setHeight(CoreML::ShapeConstraint *this, unint64_t a2)
{
  return CoreML::ShapeRange::setValue((uint64_t)this + 96, a2);
}

uint64_t CoreML::ShapeConstraint::setWidth(CoreML::ShapeConstraint *this, unint64_t a2)
{
  return CoreML::ShapeRange::setValue((uint64_t)this + 128, a2);
}

double CoreML::ShapeConstraint::updateChannelRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  unint64_t v2 = (_OWORD *)((char *)this + 64);
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 64), a2, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *unint64_t v2 = v5[0];
  v2[1] = v4;
  return result;
}

std::string *CoreML::ShapeConstraint::setName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 160), a2);
}

uint64_t CoreML::ShapeConstraint::batchRange(CoreML::ShapeConstraint *this)
{
  return (uint64_t)this + 32;
}

uint64_t CoreML::ShapeConstraint::channelRange(CoreML::ShapeConstraint *this)
{
  return (uint64_t)this + 64;
}

uint64_t CoreML::ShapeConstraint::heightRange(CoreML::ShapeConstraint *this)
{
  return (uint64_t)this + 96;
}

uint64_t CoreML::ShapeConstraint::widthRange(CoreML::ShapeConstraint *this)
{
  return (uint64_t)this + 128;
}

double CoreML::ShapeConstraint::updateSequenceRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  CoreML::ShapeRange::intersect(this, a2, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)this = v5[0];
  *((_OWORD *)this + 1) = v4;
  return result;
}

double CoreML::ShapeConstraint::updateBatchRange(CoreML::ShapeConstraint *this, const CoreML::ShapeRange *a2)
{
  unint64_t v2 = (_OWORD *)((char *)this + 32);
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 32), a2, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *unint64_t v2 = v5[0];
  v2[1] = v4;
  return result;
}

double CoreML::ShapeConstraint::copyFrom(CoreML::ShapeConstraint *this, const CoreML::ShapeConstraint *a2)
{
  CoreML::ShapeRange::intersect(this, a2, (uint64_t)&v10);
  long long v4 = v11;
  *(_OWORD *)this = v10;
  *((_OWORD *)this + 1) = v4;
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 32), (const CoreML::ShapeConstraint *)((char *)a2 + 32), (uint64_t)&v10);
  long long v5 = v11;
  *((_OWORD *)this + 2) = v10;
  *((_OWORD *)this + 3) = v5;
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 64), (const CoreML::ShapeConstraint *)((char *)a2 + 64), (uint64_t)&v10);
  long long v6 = v11;
  *((_OWORD *)this + 4) = v10;
  *((_OWORD *)this + 5) = v6;
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 96), (const CoreML::ShapeConstraint *)((char *)a2 + 96), (uint64_t)&v10);
  long long v7 = v11;
  *((_OWORD *)this + 6) = v10;
  *((_OWORD *)this + 7) = v7;
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 128), (const CoreML::ShapeConstraint *)((char *)a2 + 128), (uint64_t)&v10);
  double result = *(double *)&v10;
  long long v9 = v11;
  *((_OWORD *)this + ++*(_DWORD *)(result + 8) = v10;
  *((_OWORD *)this + 9) = v9;
  return result;
}

double CoreML::ShapeConstraint::upperBoundSequence(CoreML::ShapeConstraint *this, unint64_t a2)
{
  CoreML::ShapeRange::ShapeRange((uint64_t)v5, 0, a2);
  CoreML::ShapeRange::intersect(this, (const CoreML::ShapeRange *)v5, (uint64_t)v6);
  double result = *(double *)v6;
  long long v4 = v6[1];
  *(_OWORD *)this = v6[0];
  *((_OWORD *)this + 1) = v4;
  return result;
}

double CoreML::ShapeConstraint::upperBoundHeight(CoreML::ShapeConstraint *this, const CoreML::RangeValue *a2)
{
  if (!*(unsigned char *)a2)
  {
    int v3 = (CoreML::ShapeConstraint *)((char *)this + 96);
    v6[0] = 0;
    uint64_t v7 = 0;
    CoreML::ShapeRange::ShapeRange((CoreML::ShapeRange *)v8, (const CoreML::RangeValue *)v6, a2);
    CoreML::ShapeRange::intersect(v3, (const CoreML::ShapeRange *)v8, (uint64_t)v9);
    double result = *(double *)v9;
    long long v5 = v9[1];
    *((_OWORD *)this + 6) = v9[0];
    *((_OWORD *)this + 7) = v5;
  }
  return result;
}

double CoreML::ShapeConstraint::upperBoundWidth(CoreML::ShapeConstraint *this, const CoreML::RangeValue *a2)
{
  if (!*(unsigned char *)a2)
  {
    int v3 = (CoreML::ShapeConstraint *)((char *)this + 128);
    v6[0] = 0;
    uint64_t v7 = 0;
    CoreML::ShapeRange::ShapeRange((CoreML::ShapeRange *)v8, (const CoreML::RangeValue *)v6, a2);
    CoreML::ShapeRange::intersect(v3, (const CoreML::ShapeRange *)v8, (uint64_t)v9);
    double result = *(double *)v9;
    long long v5 = v9[1];
    *((_OWORD *)this + ++*(_DWORD *)(result + 8) = v9[0];
    *((_OWORD *)this + 9) = v5;
  }
  return result;
}

double CoreML::ShapeConstraint::lowerBoundChannel(CoreML::ShapeConstraint *this, uint64_t a2)
{
  v5[0] = 0;
  uint64_t v6 = a2;
  char v7 = 1;
  uint64_t v8 = 0;
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 64), (const CoreML::ShapeRange *)v5, (uint64_t)v9);
  double result = *(double *)v9;
  long long v4 = v9[1];
  *((_OWORD *)this + 4) = v9[0];
  *((_OWORD *)this + 5) = v4;
  return result;
}

double CoreML::ShapeConstraint::lowerBoundHeight(CoreML::ShapeConstraint *this, uint64_t a2)
{
  v5[0] = 0;
  uint64_t v6 = a2;
  char v7 = 1;
  uint64_t v8 = 0;
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 96), (const CoreML::ShapeRange *)v5, (uint64_t)v9);
  double result = *(double *)v9;
  long long v4 = v9[1];
  *((_OWORD *)this + 6) = v9[0];
  *((_OWORD *)this + 7) = v4;
  return result;
}

double CoreML::ShapeConstraint::lowerBoundWidth(CoreML::ShapeConstraint *this, uint64_t a2)
{
  v5[0] = 0;
  uint64_t v6 = a2;
  char v7 = 1;
  uint64_t v8 = 0;
  CoreML::ShapeRange::intersect((CoreML::ShapeConstraint *)((char *)this + 128), (const CoreML::ShapeRange *)v5, (uint64_t)v9);
  double result = *(double *)v9;
  long long v4 = v9[1];
  *((_OWORD *)this + ++*(_DWORD *)(result + 8) = v9[0];
  *((_OWORD *)this + 9) = v4;
  return result;
}

uint64_t CoreML::ShapeConstraint::setBatch(CoreML::ShapeConstraint *this, unint64_t a2)
{
  return CoreML::ShapeRange::setValue((uint64_t)this + 32, a2);
}

uint64_t CoreML::ShapeConstraint::minimumHeight(CoreML::ShapeConstraint *this)
{
  return CoreML::RangeValue::value((CoreML::ShapeConstraint *)((char *)this + 96));
}

uint64_t CoreML::ShapeConstraint::minimumWidth(CoreML::ShapeConstraint *this)
{
  return CoreML::RangeValue::value((CoreML::ShapeConstraint *)((char *)this + 128));
}

BOOL CoreML::ShapeConstraint::hasFixedCHW(CoreML::ShapeConstraint *this)
{
  if (!CoreML::ShapeRange::isFixed((CoreML::ShapeConstraint *)((char *)this + 64))
    || !CoreML::ShapeRange::isFixed((CoreML::ShapeConstraint *)((char *)this + 96)))
  {
    return 0;
  }
  return CoreML::ShapeRange::isFixed((CoreML::ShapeConstraint *)((char *)this + 128));
}

std::string *turi::ml_data_internal::column_indexer::column_indexer(std::string *this, long long *a2, int a3, std::string::value_type a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = 0u;
  LODWORD(this[1].__r_.__value_.__l.__data_) = a3;
  this[1].__r_.__value_.__s.__data_[4] = a4;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  int v8 = pthread_mutex_init((pthread_mutex_t *)&this[4].__r_.__value_.__r.__words[2], 0);
  assert_msg(v8 == 0, "Mutex create error %d", v8);
  return this;
}

void sub_2243343A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v11;
  a10 = v12;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::column_indexer::initialize(turi::ml_data_internal::column_indexer *this)
{
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
  std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::resize((void *)this + 4, 0x100uLL);
  unint64_t v3 = turi::thread::cpu_count(v2);
  std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::resize((uint64_t *)this + 7, v3);
  long long v5 = (uint64_t *)*((void *)this + 7);
  long long v4 = (uint64_t *)*((void *)this + 8);
  while (v5 != v4)
  {
    uint64_t v7 = *v5;
    for (uint64_t i = v5[1]; i != v7; uint64_t i = std::pair<unsigned long,turi::flexible_type>::~pair(i - 24))
      ;
    v5[1] = v7;
    v5 += 3;
  }
}

void std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::resize(void *a1, unint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (turi::simple_spinlock *)(*a1 + 72 * a2));
  }
}

void std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::resize(uint64_t *a1, unint64_t a2)
{
  BOOL v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      int v8 = v3;
      std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

uint64_t turi::ml_data_internal::column_indexer::finalize(turi::ml_data_internal::column_indexer *this)
{
  unint64_t v1 = this;
  unint64_t v2 = (void *)((char *)this + 80);
  std::vector<turi::flexible_type>::resize((uint64_t *)this + 10, *((void *)this + 13));
  BOOL v3 = (void **)*((void *)v1 + 7);
  std::vector<unsigned int>::pointer v26 = (void **)*((void *)v1 + 8);
  if (v3 != v26)
  {
    unint64_t v25 = v1;
    do
    {
      unint64_t v4 = *v3;
      BOOL v5 = v3[1];
      while (v4 != v5)
      {
        uint64_t v6 = *v2 + 16 * *v4;
        if (v4 + 1 != (void *)v6)
        {
          switch(*(unsigned char *)(v6 + 12))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)v6;
                if (!*(void *)v6) {
                  goto LABEL_38;
                }
                if (*((char *)v7 + 31) < 0) {
                  operator delete((void *)v7[1]);
                }
                atomic_ullong *volatile v8 = v7;
                uint64_t v9 = 0x1012C404EF22A49;
                goto LABEL_37;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)v6;
                if (!*(void *)v6) {
                  goto LABEL_38;
                }
                long long v11 = (void *)v10[1];
                if (v11)
                {
                  v10[2] = (atomic_ullong)v11;
                  operator delete(v11);
                }
                atomic_ullong *volatile v8 = v10;
                uint64_t v9 = 0x1080C409938AC02;
                goto LABEL_37;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v6;
                if (!*(void *)v6) {
                  goto LABEL_38;
                }
                unint64_t v27 = (void **)(v12 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
                goto LABEL_23;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v6;
                if (!*(void *)v6) {
                  goto LABEL_38;
                }
                unint64_t v27 = (void **)(v12 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_23:
                atomic_ullong *volatile v8 = v12;
                uint64_t v9 = 0x1020C405E66F15BLL;
                goto LABEL_37;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v6;
                if (!*(void *)v6) {
                  goto LABEL_38;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v13 + 2);
                atomic_ullong *volatile v8 = v13;
                unsigned int v14 = -235920773;
                goto LABEL_36;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v6;
                if (*(void *)v6)
                {
                  uint64_t v16 = (void *)v15[6];
                  if (v16)
                  {
                    v15[7] = (atomic_ullong)v16;
                    operator delete(v16);
                  }
                  uint64_t v17 = (void *)v15[3];
                  if (v17)
                  {
                    v15[4] = (atomic_ullong)v17;
                    operator delete(v17);
                  }
                  uint64_t v18 = (std::__shared_weak_count *)v15[2];
                  if (v18) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
                  }
                  atomic_ullong *volatile v8 = v15;
                  unsigned int v14 = 2071181815;
LABEL_36:
                  uint64_t v9 = v14 | 0x1030C4000000000;
LABEL_37:
                  MEMORY[0x22A614FA0](v8, v9);
                }
LABEL_38:
                *(void *)uint64_t v6 = 0;
              }
              break;
            default:
              break;
          }
          uint64_t v19 = v4[1];
          *(void *)(v6 + 5) = *(void *)((char *)v4 + 13);
          *(void *)uint64_t v6 = v19;
          LODWORD(v19) = *((unsigned __int8 *)v4 + 20);
          *(unsigned char *)(v6 + 12) = v19;
          BOOL v20 = v19 > 9;
          int v21 = (1 << v19) & 0x33C;
          if (!v20 && v21 != 0) {
            atomic_fetch_add(*(atomic_ullong *volatile *)v6, 1uLL);
          }
        }
        v4 += 3;
      }
      v3 += 3;
    }
    while (v3 != v26);
    unint64_t v1 = v25;
    BOOL v3 = (void **)*((void *)v25 + 7);
    unint64_t v23 = (void **)*((void *)v25 + 8);
    while (v23 != v3)
    {
      v23 -= 3;
      unint64_t v27 = v23;
      std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
    }
  }
  *((void *)v1 + ++*(_DWORD *)(result + 8) = v3;
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)v1 + 112));
}

unint64_t turi::ml_data_internal::column_indexer::insert_values_into_index(unint64_t result, unsigned __int8 **a2)
{
  unint64_t v2 = (turi::ml_data_internal::column_indexer *)result;
  int v3 = *(_DWORD *)(result + 24);
  switch(v3)
  {
    case 4:
      uint64_t v6 = *a2;
      atomic_ullong *volatile v7 = a2[1];
      while (v6 != v7)
      {
        int v8 = v6[12];
        if (v8 != 7)
        {
          if (v8 == 5)
          {
            uint64_t v9 = *(atomic_ullong ***)(*(void *)v6 + 8);
            atomic_ullong *volatile v10 = *(atomic_ullong ***)(*(void *)v6 + 16);
            while (v9 != v10)
            {
              double result = turi::ml_data_internal::column_indexer::map_value_to_index(v2, 0, v9);
              v9 += 4;
            }
          }
          else
          {
            double result = turi::ml_data_internal::column_indexer::map_value_to_index(v2, 0, (atomic_ullong **)v6);
          }
        }
        v6 += 16;
      }
      break;
    case 3:
      long long v11 = *a2;
      atomic_ullong *volatile v12 = a2[1];
      while (v11 != v12)
      {
        if (v11[12] != 7)
        {
          atomic_ullong *volatile v13 = *(atomic_ullong ***)(*(void *)v11 + 8);
          unsigned int v14 = *(atomic_ullong ***)(*(void *)v11 + 16);
          while (v13 != v14)
          {
            double result = turi::ml_data_internal::column_indexer::map_value_to_index(v2, 0, v13);
            v13 += 2;
          }
        }
        v11 += 16;
      }
      break;
    case 1:
      unint64_t v4 = (atomic_ullong **)*a2;
      BOOL v5 = (atomic_ullong **)a2[1];
      while (v4 != v5)
      {
        double result = turi::ml_data_internal::column_indexer::map_value_to_index(v2, 0, v4);
        v4 += 2;
      }
      break;
  }
  return result;
}

unint64_t turi::ml_data_internal::column_indexer::map_value_to_index(turi::ml_data_internal::column_indexer *this, const turi::flexible_type *a2, atomic_ullong **a3)
{
  void v57[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  unsigned int v5 = *((unsigned __int8 *)a3 + 12);
  if (v5 > 7 || ((1 << v5) & 0x85) == 0)
  {
    uint64_t v50 = (void **)this;
    int v51 = (const turi::flexible_type *)a3;
    turi::ml_data_internal::column_indexer::map_value_to_index(unsigned long,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()((uint64_t *)&v50);
  }
  memset(v57, 0, 13);
  if (v57 != a3)
  {
    *(atomic_ullong **)((char *)v57 + 5) = *(atomic_ullong **)((char *)a3 + 5);
    v57[0] = *a3;
    BYTE4(v57[1]) = v5;
    if (v5 - 2 <= 3) {
      atomic_fetch_add(v57[0], 1uLL);
    }
  }
  turi::hash128(v49, (turi *)v57, a2);
  switch(BYTE4(v57[1]))
  {
    case 2:
      if (atomic_fetch_add(v57[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v8 = v57[0];
        if (v57[0])
        {
          if (*((char *)v57[0] + 31) < 0) {
            operator delete(*((void **)v57[0] + 1));
          }
          uint64_t v9 = v8;
          uint64_t v10 = 0x1012C404EF22A49;
          goto LABEL_39;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v57[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v17 = v57[0];
        if (v57[0])
        {
          uint64_t v18 = (void *)v57[0][1];
          if (v18)
          {
            v57[0][2] = (atomic_ullong)v18;
            operator delete(v18);
          }
          uint64_t v9 = v17;
          uint64_t v10 = 0x1080C409938AC02;
          goto LABEL_39;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v57[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v11 = v57[0];
        if (v57[0])
        {
          uint64_t v50 = (void **)(v57[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
          goto LABEL_34;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v57[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v11 = v57[0];
        if (v57[0])
        {
          uint64_t v50 = (void **)(v57[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v50);
LABEL_34:
          uint64_t v9 = v11;
          uint64_t v10 = 0x1020C405E66F15BLL;
          goto LABEL_39;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v57[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = v57[0];
        if (v57[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v57[0] + 2);
          uint64_t v9 = v19;
          unsigned int v16 = -235920773;
          goto LABEL_38;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v57[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v12 = v57[0];
        if (v57[0])
        {
          atomic_ullong *volatile v13 = (void *)v57[0][6];
          if (v13)
          {
            v57[0][7] = (atomic_ullong)v13;
            operator delete(v13);
          }
          unsigned int v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = (atomic_ullong)v14;
            operator delete(v14);
          }
          atomic_ullong *volatile v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          uint64_t v9 = v12;
          unsigned int v16 = 2071181815;
LABEL_38:
          uint64_t v10 = v16 | 0x1030C4000000000;
LABEL_39:
          MEMORY[0x22A614FA0](v9, v10);
        }
      }
      break;
    default:
      break;
  }
  memset(v57, 0, 13);
  unint64_t v20 = ((0xDEB2A42E44AA4C17 * v49[1]) ^ (0x7E952A7B972F486FLL * v49[0])) >> 56;
  uint64_t v21 = *((void *)this + 4);
  uint64_t v22 = (atomic_uchar *)(v21 + 72 * v20);
  do
  {
    while (*v22 == 1)
      ;
  }
  while (atomic_exchange(v22, 1u));
  unint64_t v23 = (void *)(v21 + 72 * v20 + 8);
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::find((uint64_t)v23, v49, (uint64_t)v45);
  if ((void *)v45[0] != v23)
  {
    if (v48) {
      uint64_t v24 = v47;
    }
    else {
      uint64_t v24 = v46;
    }
    goto LABEL_54;
  }
  if (v48)
  {
    uint64_t v24 = v47;
    if (v47)
    {
LABEL_54:
      unint64_t add = *(void *)(v24 + 32);
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v24 = v46;
    if (v45[1] != *v23 || v46 != *(void *)(*v23 + 8)) {
      goto LABEL_54;
    }
  }
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)this + 13, 1uLL);
  uint64_t v28 = *((void *)this + 7);
  unint64_t v55 = add;
  memset(v56, 0, 13);
  if (v56 != a3)
  {
    *(atomic_ullong **)((char *)v56 + 5) = *(atomic_ullong **)((char *)a3 + 5);
    v56[0] = *a3;
    BYTE4(v56[1]) = *((unsigned char *)a3 + 12);
    if (BYTE4(v56[1]) <= 9u && ((1 << SBYTE4(v56[1])) & 0x33C) != 0) {
      atomic_fetch_add(v56[0], 1uLL);
    }
  }
  uint64_t v29 = v28 + 24 * (void)a2;
  unint64_t v32 = *(void *)(v29 + 8);
  int v31 = (uint64_t *)(v29 + 8);
  unint64_t v30 = v32;
  unint64_t v33 = v31[1];
  if (v32 >= v33)
  {
    unint64_t v36 = (uint64_t *)(v28 + 24 * (void)a2);
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *v36) >> 3);
    unint64_t v38 = v37 + 1;
    if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *v36) >> 3);
    if (2 * v39 > v38) {
      unint64_t v38 = 2 * v39;
    }
    if (v39 >= 0x555555555555555) {
      unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v40 = v38;
    }
    unint64_t v54 = v31 + 1;
    unint64_t v41 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(v31 + 1), v40);
    uint64_t v42 = &v41[3 * v37];
    uint64_t v50 = v41;
    int v51 = (const turi::flexible_type *)v42;
    uint64_t v53 = &v41[3 * v43];
    *uint64_t v42 = (void *)v55;
    v42[1] = 0;
    *((_DWORD *)v42 + 4) = 0;
    *((unsigned char *)v42 + 2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
    uint64_t v44 = v56[0];
    *(void **)((char *)v42 + 13) = *(atomic_ullong **)((char *)v56 + 5);
    v42[1] = v44;
    *((unsigned char *)v42 + 2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = BYTE4(v56[1]);
    BYTE4(v56[1]) = 0;
    uint64_t v52 = v42 + 3;
    std::vector<std::pair<unsigned long,turi::flexible_type>>::__swap_out_circular_buffer(v36, &v50);
    unint64_t v35 = *v31;
    std::__split_buffer<std::pair<unsigned long,turi::flexible_type>>::~__split_buffer((uint64_t)&v50);
  }
  else
  {
    *(void *)unint64_t v30 = v55;
    *(void *)(v30 + ++*(_DWORD *)(result + 8) = 0;
    *(_DWORD *)(v30 + 16) = 0;
    *(unsigned char *)(v30 + 2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
    unint64_t v34 = v56[0];
    *(atomic_ullong **)(v30 + 13) = *(atomic_ullong **)((char *)v56 + 5);
    *(void *)(v30 + ++*(_DWORD *)(result + 8) = v34;
    *(unsigned char *)(v30 + 2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = BYTE4(v56[1]);
    BYTE4(v56[1]) = 0;
    unint64_t v35 = v30 + 24;
  }
  *int v31 = v35;
  std::pair<unsigned long,turi::flexible_type>::~pair((uint64_t)&v55);
  *(void *)turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::operator[](v23, v49) = add;
LABEL_55:
  __dmb(0xBu);
  *uint64_t v22 = 0;
  return add;
}

void sub_224334E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  std::__split_buffer<std::pair<unsigned long,turi::flexible_type>>::~__split_buffer((uint64_t)va);
  std::pair<unsigned long,turi::flexible_type>::~pair((uint64_t)va1);
  __dmb(0xBu);
  unsigned char *v10 = 0;
  _Unwind_Resume(a1);
}

uint64_t turi::ml_data_internal::column_indexer::extract_key_types@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(this + 80);
  if (*(void *)(this + 88) == v3)
  {
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + ++*(_DWORD *)(result + 8) = 0;
    *(void *)a2 = a2 + 8;
  }
  else
  {
    uint64_t v4 = this;
    int v5 = *(unsigned __int8 *)(v3 + 12);
    char v9 = *(unsigned char *)(v3 + 12);
    this = std::set<turi::flex_type_enum>::set[abi:ne180100](a2, &v9, 1);
    uint64_t v7 = *(void *)(v4 + 80);
    uint64_t v6 = *(void *)(v4 + 88);
    while (v7 != v6)
    {
      if (*(unsigned __int8 *)(v7 + 12) != v5)
      {
        char v8 = *(unsigned char *)(v7 + 12);
        this = (uint64_t)std::__tree<turi::flex_type_enum>::__emplace_unique_key_args<turi::flex_type_enum,turi::flex_type_enum>((uint64_t **)a2, &v8, &v8);
      }
      v7 += 16;
    }
  }
  return this;
}

void sub_2243350C0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t turi::ml_data_internal::column_indexer::reset_and_return_values@<X0>(turi::ml_data_internal::column_indexer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (pthread_mutex_t *)((char *)this + 112);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
  std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 32, *((turi::simple_spinlock **)this + 4));
  int v5 = (void **)*((void *)this + 7);
  uint64_t v6 = (void **)*((void *)this + 8);
  while (v6 != v5)
  {
    v6 -= 3;
    char v8 = v6;
    std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
  *((void *)this + ++*(_DWORD *)(result + 8) = v5;
  char v8 = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)a2 = *((_OWORD *)this + 5);
  *(void *)(a2 + 16) = *((void *)this + 12);
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  return pthread_mutex_unlock(v4);
}

void turi::ml_data_internal::column_indexer::set_indices(uint64_t a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    uint64_t v7 = *(void *)(a1 + 80);
    for (uint64_t i = *(void *)(a1 + 88); i != v7; std::allocator<turi::flexible_type>::destroy[abi:ne180100](a1 + 96, i))
      i -= 16;
    *(void *)(a1 + 8++*(_DWORD *)(result + 8) = v7;
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 24);
    if ((v3 - 3) >= 2 && v3 != 1) {
      turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_0::operator()();
    }
    std::vector<turi::flexible_type>::__vdeallocate((void **)(a1 + 80));
    *(_OWORD *)(a1 + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *(_OWORD *)a2;
    *(void *)(a1 + 96) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + ++*(_DWORD *)(result + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a1 + 104) = (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 4;
    std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::resize((void *)(a1 + 32), 0x100uLL);
    v8[0] = &unk_26D7795D8;
    v8[1] = a1;
    Bytef v8[3] = v8;
    turi::in_parallel((turi::thread_pool *)v8);
    std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v8);
  }
}

void turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_indexer.cpp", 95);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"mode == ml_column_mode::CATEGORICAL || mode == ml_column_mode::CATEGORICAL_VECTOR || mode == ml_column_mode::DICTIONARY", 119);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_indexer.cpp", "operator()", 167, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2243353C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

char *turi::ml_data_internal::column_indexer::save_impl(turi::ml_data_internal::column_indexer *this, turi::oarchive *a2)
{
  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)a2, (const void **)this);
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 4 > v4)
    {
      size_t v11 = 2 * v4 + 8;
      *((void *)a2 + 5) = v11;
      uint64_t v12 = (char **)*((void *)a2 + 2);
      if (v12)
      {
        int v5 = *v12;
        size_t v13 = v12[1] - *v12;
        BOOL v14 = v11 >= v13;
        std::vector<char>::size_type v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v15);
          int v5 = (char *)**((void **)a2 + 2);
        }
        else if (!v14)
        {
          v12[1] = &v5[v11];
        }
      }
      else
      {
        int v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v11, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v5;
    }
    else
    {
      int v5 = (char *)*((void *)a2 + 3);
    }
    *(_DWORD *)&v5[*((void *)a2 + 4)] = *((_DWORD *)this + 6);
    *((void *)a2 + 4) += 4;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v6 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v6)
    {
      size_t v16 = 2 * v6 + 2;
      *((void *)a2 + 5) = v16;
      uint64_t v17 = (void *)*((void *)a2 + 2);
      if (v17)
      {
        char v7 = (unsigned char *)*v17;
        size_t v18 = v17[1] - *v17;
        BOOL v19 = v16 >= v18;
        std::vector<char>::size_type v20 = v16 - v18;
        if (v20 != 0 && v19)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v20);
          char v7 = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v19)
        {
          v17[1] = &v7[v16];
        }
      }
      else
      {
        char v7 = malloc_type_realloc(*((void **)a2 + 3), v16, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v7;
    }
    else
    {
      char v7 = (unsigned char *)*((void *)a2 + 3);
    }
    v7[(*((void *)a2 + 4))++] = *((unsigned char *)this + 28);
  }
  turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec((uint64_t)a2, (uint64_t *)this + 10);
  char v8 = (void *)((char *)this + 104);
  if (*(void *)a2)
  {
    return (char *)std::ostream::write();
  }
  else
  {
    unint64_t v10 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v10)
    {
      size_t v21 = 2 * v10 + 16;
      *((void *)a2 + 5) = v21;
      uint64_t v22 = (uint64_t *)*((void *)a2 + 2);
      if (v22)
      {
        double result = (char *)*v22;
        size_t v23 = v22[1] - *v22;
        BOOL v24 = v21 >= v23;
        std::vector<char>::size_type v25 = v21 - v23;
        if (v25 != 0 && v24)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v25);
          double result = (char *)**((void **)a2 + 2);
        }
        else if (!v24)
        {
          v22[1] = (uint64_t)&result[v21];
        }
      }
      else
      {
        double result = (char *)malloc_type_realloc(*((void **)a2 + 3), v21, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = result;
    }
    else
    {
      double result = (char *)*((void *)a2 + 3);
    }
    *(void *)&result[*((void *)a2 + 4)] = *v8;
    *((void *)a2 + 4) += 8;
  }
  return result;
}

void turi::ml_data_internal::column_indexer::load_version(std::string *this, turi::iarchive *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (a3 != 1)
  {
    if (a3 != 2) {
      turi::ml_data_internal::column_indexer::load_version(turi::iarchive &,unsigned long)::$_2::operator()();
    }
    memset(v33, 0, 24);
    turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, this);
    int v5 = this + 1;
    uint64_t v6 = *((void *)a2 + 2);
    if (v6)
    {
      LODWORD(v5->__r_.__value_.__l.__data_) = *(_DWORD *)(v6 + *((void *)a2 + 3));
      *((void *)a2 + 3) += 4;
    }
    else
    {
      std::istream::read();
    }
    uint64_t v9 = *((void *)a2 + 2);
    if (v9) {
      this[1].__r_.__value_.__s.__data_[4] = *(unsigned char *)(v9 + (*((void *)a2 + 3))++);
    }
    else {
      std::istream::read();
    }
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a2, (uint64_t *)v33);
    p_std::string::size_type size = &this[4].__r_.__value_.__l.__size_;
    uint64_t v11 = *((void *)a2 + 2);
    if (v11)
    {
      *p_std::string::size_type size = *(void *)(v11 + *((void *)a2 + 3));
      *((void *)a2 + 3) += 8;
    }
    else
    {
      std::istream::read();
    }
    if (LODWORD(v5->__r_.__value_.__l.__data_) <= 4 && ((1 << LODWORD(v5->__r_.__value_.__l.__data_)) & 0x1A) != 0)
    {
      v29.__r_.__value_.__r.__words[0] = *p_size;
      *(void *)&long long __p = (uint64_t)(v33[0].__r_.__value_.__l.__size_ - v33[0].__r_.__value_.__r.__words[0]) >> 4;
      unint64_t v30 = (std::string *)__p;
      if (v29.__r_.__value_.__r.__words[0] != (void)__p)
      {
        unint64_t v30 = &v29;
        v31[0] = (char *)&__p;
        turi::ml_data_internal::column_indexer::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
      }
      turi::ml_data_internal::column_indexer::set_indices((uint64_t)this, (uint64_t)v33);
    }
    unint64_t v30 = v33;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    return;
  }
  v31[0] = 0;
  v31[1] = 0;
  unint64_t v30 = (std::string *)v31;
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)&v30, a2);
  std::string::basic_string[abi:ne180100]<0>(v33, "indexer_type");
  char v7 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v30, (const void **)&v33[0].__r_.__value_.__l.__data_);
  turi::variant_converter<std::string,void>::get(v7, &v29);
  if (SHIBYTE(v33[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v29.__r_.__value_.__l.__size_ != 6) {
      goto LABEL_48;
    }
    char v8 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) != 6) {
      goto LABEL_48;
    }
    char v8 = &v29;
  }
  int data = (int)v8->__r_.__value_.__l.__data_;
  int v13 = WORD2(v8->__r_.__value_.__r.__words[0]);
  if (data != 1902734965 || v13 != 25973) {
LABEL_48:
  }
    turi::ml_data_internal::column_indexer::load_version(turi::iarchive &,unsigned long)::$_1::operator()();
  std::string::basic_string[abi:ne180100]<0>(&__p, "column_name");
  std::vector<char>::size_type v15 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v30, (const void **)&__p);
  turi::variant_converter<std::string,void>::get(v15, v33);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(this->__r_.__value_.__l.__data_);
  }
  *this = v33[0];
  *((unsigned char *)&v33[0].__r_.__value_.__s + 23) = 0;
  v33[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "mode");
  size_t v16 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v30, (const void **)&v33[0].__r_.__value_.__l.__data_);
  LODWORD(this[1].__r_.__value_.__l.__data_) = turi::variant_converter<turi::ml_column_mode,void>::get((uint64_t)&__p, v16);
  if (SHIBYTE(v33[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "original_column_type");
  uint64_t v17 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v30, (const void **)&v33[0].__r_.__value_.__l.__data_);
  this[1].__r_.__value_.__s.__data_[4] = turi::variant_converter<turi::flex_type_enum,void>::get((uint64_t)&__p, v17);
  if (SHIBYTE(v33[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33[0].__r_.__value_.__l.__data_);
  }
  v33[0].__r_.__value_.__l.__size_ = 0;
  LODWORD(v33[0].__r_.__value_.__r.__words[2]) = 0;
  v33[0].__r_.__value_.__s.__data_[20] = 0;
  LODWORD(v33[0].__r_.__value_.__l.__data_) = 0;
  turi::variant_deep_load((unsigned int *)v33, a2);
  *((void *)&__p + 1) = 0;
  uint64_t v28 = 0;
  *(void *)&long long __p = (char *)&__p + 8;
  turi::variant_converter<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get((uint64_t *)v33, (uint64_t *)&v25);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, *((char **)&__p + 1));
  size_t v18 = (char *)*((void *)&v25 + 1);
  long long __p = v25;
  uint64_t v28 = v26;
  if (v26)
  {
    *(void *)(*((void *)&v25 + 1) + 16) = (char *)&__p + 8;
    *(void *)&long long v25 = (char *)&v25 + 8;
    *((void *)&v25 + 1) = 0;
    uint64_t v26 = 0;
    size_t v18 = 0;
  }
  else
  {
    *(void *)&long long __p = (char *)&__p + 8;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v25, v18);
  long long v25 = 0uLL;
  uint64_t v26 = 0;
  std::string::basic_string[abi:ne180100]<0>(v21, "values_by_index_lookup");
  unint64_t v32 = v21;
  BOOL v19 = (int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, (const void **)v21, (uint64_t)&std::piecewise_construct, &v32);
  turi::variant_converter<std::vector<turi::flexible_type>,void>::get(v19 + 14, v23);
  std::vector<turi::flexible_type>::__vdeallocate((void **)&v25);
  long long v25 = *(_OWORD *)v23;
  uint64_t v26 = v24;
  v23[1] = 0;
  uint64_t v24 = 0;
  v23[0] = 0;
  unint64_t v32 = v23;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "column_size");
  v21[0] = v23;
  std::vector<char>::size_type v20 = (int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, (const void **)v23, (uint64_t)&std::piecewise_construct, (_OWORD **)v21);
  unint64_t v32 = (_OWORD *)turi::variant_converter<unsigned long,void>::get((uint64_t)v21, v20 + 14);
  this[4].__r_.__value_.__l.__size_ = (std::string::size_type)v32;
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  turi::ml_data_internal::column_indexer::set_indices((uint64_t)this, (uint64_t)&v25);
  v23[0] = &v25;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, *((char **)&__p + 1));
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v33);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v30, v31[0]);
}

void sub_224335C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char *a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char *a40)
{
  a16 = &a23;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a27, a28);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v40 - 136));
  if (a38 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a39, a40);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::column_indexer::load_version(turi::iarchive &,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_indexer.cpp", 95);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_column_size", 12);
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"values.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_indexer.cpp", "operator()", 260, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int v13 = v16;
  turi::ml_data_internal::column_indexer::load_version(turi::iarchive &,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224335EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::column_indexer::load_version(turi::iarchive &,unsigned long)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_indexer.cpp", 95);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"indexer_type == \"unique\"", 24);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_indexer.cpp", "operator()", 272, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::ml_data_internal::column_indexer::load_version(turi::iarchive &,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2243360C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t *turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::find@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  void v15[5] = *MEMORY[0x263EF8340];
  uint64_t v6 = a2[1];
  v15[0] = *a2;
  v15[1] = v6;
  void v15[2] = 0;
  char v7 = *(uint64_t **)a1;
  double result = turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::find(*(uint64_t **)a1, v15);
  uint64_t v10 = v9;
  if (v7 == *(uint64_t **)a1 && v9 == *(void *)(*(void *)a1 + 8))
  {
    double result = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::find_node((void *)(a1 + 8), a2);
    *(void *)a3 = a1;
    *(void *)(a3 + ++*(_DWORD *)(result + 8) = v7;
    *(void *)(a3 + 16) = v10;
    *(void *)(a3 + 24) = result;
    BOOL v14 = *(uint64_t **)a1 == v7 && *(void *)(*(void *)a1 + 8) == v10;
    *(unsigned char *)(a3 + 32) = v14;
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 24);
    if (v12) {
      uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8 * *(void *)(a1 + 16));
    }
    *(void *)a3 = a1;
    *(void *)(a3 + ++*(_DWORD *)(result + 8) = v7;
    *(void *)(a3 + 16) = v9;
    *(void *)(a3 + 24) = v12;
    *(unsigned char *)(a3 + 32) = 0;
  }
  return result;
}

uint64_t turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::operator[](void *a1, void *a2)
{
  v11[5] = *MEMORY[0x263EF8340];
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::find((uint64_t)a1, a2, (uint64_t)v9);
  uint64_t v4 = a2[1];
  v11[0] = *a2;
  v11[1] = v4;
  void v11[2] = 0;
  if (*(void **)v9 != a1) {
    goto LABEL_7;
  }
  if (v10)
  {
    if (*(void *)&v9[24]) {
      goto LABEL_7;
    }
  }
  else if (*(_OWORD *)&v9[8] != __PAIR128__(*(void *)(*a1 + 8), *a1))
  {
    goto LABEL_7;
  }
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::do_insert((uint64_t)a1, v11, (uint64_t)v7);
  *(_OWORD *)uint64_t v9 = v7[0];
  *(_OWORD *)&unsigned char v9[16] = v7[1];
  char v10 = v8;
LABEL_7:
  if (v10) {
    uint64_t v5 = *(void *)&v9[24] + 16;
  }
  else {
    uint64_t v5 = *(void *)&v9[16] + 16;
  }
  return v5 + 16;
}

uint64_t *turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::find(uint64_t *a1, void *a2)
{
  unint64_t v2 = 17 * ((4097 * *a2) ^ ((unint64_t)(4097 * *a2) >> 22));
  unint64_t v3 = 129 * ((1025 * (v2 ^ (v2 >> 9))) ^ ((1025 * (v2 ^ (v2 >> 9))) >> 2));
  return turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::find_impl(a1, a2, (v3 ^ (v3 >> 12)) & a1[5]);
}

uint64_t *turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::find_impl(uint64_t *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *result;
  unsigned int v4 = *(_DWORD *)(*result + 48 * a3);
  if (v4 >= 2)
  {
    unsigned int v5 = v4 >> 1;
    do
    {
      uint64_t v6 = __clz(__rbit32(v5));
      if (*(unsigned char *)(v3 + 48 * (v6 + a3)))
      {
        uint64_t v7 = v3 + 48 * (v6 + a3);
        if (a2[1] == *(void *)(v7 + 24) && *a2 == *(void *)(v7 + 16)) {
          break;
        }
      }
      v5 &= ~(1 << v6);
    }
    while (v5);
  }
  return result;
}

void *boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::find_node(void *a1, void *a2)
{
  unint64_t v2 = ~*a2 + (*a2 << 21);
  unint64_t v3 = 21 * ((265 * (v2 ^ (v2 >> 24))) ^ ((265 * (v2 ^ (v2 >> 24))) >> 14));
  return boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::find_node_impl<turi::hash_value,std::equal_to<turi::hash_value>>(a1, 2147483649u * (v3 ^ (v3 >> 28)), a2);
}

void *boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::find_node_impl<turi::hash_value,std::equal_to<turi::hash_value>>(void *a1, uint64_t a2, void *a3)
{
  if (!a1[2]) {
    return 0;
  }
  uint64_t v3 = (a1[1] - 1) & a2;
  unsigned int v4 = *(void **)(a1[5] + 8 * v3);
  if (!v4) {
    return 0;
  }
  double result = (void *)*v4;
  if (!*v4) {
    return result;
  }
LABEL_4:
  if (result[3] != a3[1] || result[2] != *a3)
  {
    if ((result[1] & 0x7FFFFFFFFFFFFFFFLL) == v3)
    {
      while (1)
      {
        double result = (void *)*result;
        if (!result) {
          return result;
        }
        if ((result[1] & 0x8000000000000000) == 0) {
          goto LABEL_4;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t *std::vector<std::pair<unsigned long,turi::flexible_type>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      *(void *)(v6 - 16) = 0;
      *(_DWORD *)(v6 - ++*(_DWORD *)(result + 8) = 0;
      *(unsigned char *)(v6 - 4) = 0;
      uint64_t v7 = *(void *)(v2 + v5 - 16);
      *(void *)(v6 - 11) = *(void *)(v2 + v5 - 11);
      *(void *)(v6 - 16) = v7;
      *(unsigned char *)(v6 - 4) = *(unsigned char *)(v2 + v5 - 4);
      *(unsigned char *)(v2 + v5 - 4) = 0;
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *double result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::do_insert@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  double result = turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::insert_impl(*(uint64_t **)a1, a2, 1);
  uint64_t v8 = result;
  uint64_t v9 = v7;
  if (*(void **)a1 == result && *(void *)(*(void *)a1 + 8) == v7)
  {
    if ((float)((float)(unint64_t)(*(void *)(a1 + 24) + result[4])
               / (float)(unint64_t)(*(void *)(a1 + 24) - 0x5555555555555555 * ((v7 - *result) >> 4))) > 0.8)
      turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::rehash_to_new_container();
    double result = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::emplace_unique<std::pair<turi::hash_value,unsigned long> const&>((void *)(a1 + 8), a2, a2);
    *(void *)a3 = a1;
    *(void *)(a3 + ++*(_DWORD *)(result + 8) = v8;
    *(void *)(a3 + 16) = v9;
    *(void *)(a3 + 24) = result;
    BOOL v13 = *(void **)a1 == v8 && *(void *)(*(void *)a1 + 8) == v9;
    *(unsigned char *)(a3 + 32) = v13;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 24);
    if (v11) {
      uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8 * *(void *)(a1 + 16));
    }
    *(void *)a3 = a1;
    *(void *)(a3 + ++*(_DWORD *)(result + 8) = result;
    *(void *)(a3 + 16) = v7;
    *(void *)(a3 + 24) = v11;
    *(unsigned char *)(a3 + 32) = 0;
  }
  return result;
}

void turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::rehash_to_new_container()
{
}

void sub_224336888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::insert_impl(uint64_t *a1, void *a2, int a3)
{
  uint64_t v4 = a1;
  unint64_t v5 = 17 * ((4097 * *a2) ^ ((unint64_t)(4097 * *a2) >> 22));
  unint64_t v6 = 129 * ((1025 * (v5 ^ (v5 >> 9))) ^ ((1025 * (v5 ^ (v5 >> 9))) >> 2));
  unint64_t v7 = (v6 ^ (v6 >> 12)) & a1[5];
  uint64_t v8 = turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::try_find_and_overwrite(a1, a2, v7, a3);
  if (v8 != v4 || v4[1] != v9) {
    return v8;
  }
  uint64_t v11 = *v4;
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *v4) >> 4);
  if (v7 + 620 < v12) {
    unint64_t v12 = v7 + 620;
  }
  BOOL v24 = v7 >= v12;
  unint64_t v13 = v7 - v12;
  if (!v24)
  {
    uint64_t v14 = 0;
    for (uint64_t i = 48 * v7; (*(unsigned char *)(v11 + i) & 1) != 0; i += 48)
    {
      if (v13 == --v14) {
        return v4;
      }
    }
    uint64_t v16 = -v14;
    uint64_t v17 = v7 - v14;
    if ((unint64_t)-v14 >= 0x1F)
    {
      do
      {
        uint64_t v18 = v17;
        uint64_t v19 = *v4;
        uint64_t v20 = 48 * v17 - 1440;
        unint64_t v21 = 30;
        while (1)
        {
          unsigned int v22 = *(_DWORD *)(v19 + v20);
          unint64_t v23 = __clz(__rbit32(v22 >> 1));
          BOOL v24 = v22 >= 2 && v21 >= v23;
          if (v24) {
            break;
          }
          v20 += 48;
          if (!--v21) {
            return v4;
          }
        }
        uint64_t v25 = v18 + v23;
        uint64_t v17 = v25 - v21;
        unint64_t v26 = v19 + 48 * (v25 - v21);
        uint64_t v27 = v19 + 48 * v18;
        *(_OWORD *)(v27 + 16) = *(_OWORD *)(v26 + 16);
        *(void *)(v27 + 32) = *(void *)(v26 + 32);
        *(_DWORD *)v27 |= 1u;
        *(_DWORD *)(*v4 + 48 * (v25 - v21)) &= ~1u;
        uint64_t v28 = *v4;
        std::string v29 = (void *)(*v4 + 48 * (v25 - v21));
        v29[2] = 0;
        void v29[3] = 0;
        v29[4] = 0;
        *(_DWORD *)(v28 + v2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *(_DWORD *)(v28 + v20) & 1 | (2
                                                             * ((*(_DWORD *)(v28 + v20) >> 1) & ~(1 << v23) | (1 << v21)));
      }
      while (v25 - v7 - v21 > 0x1E);
      uint64_t v11 = *v4;
      LOBYTE(v16) = v18 - v7 + v23 - v21;
    }
    uint64_t v30 = v11 + 48 * v17;
    *(_OWORD *)(v30 + 16) = *(_OWORD *)a2;
    *(void *)(v30 + 32) = a2[2];
    *(_DWORD *)(v11 + 48 * v7) |= 2 << v16;
    *(_DWORD *)(*v4 + 48 * v17) |= 1u;
    ++v4[4];
  }
  return v4;
}

uint64_t *turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::try_find_and_overwrite(uint64_t *a1, void *a2, uint64_t a3, int a4)
{
  turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::find_impl(a1, a2, a3);
  if (v7 != a1[1] && a4 != 0)
  {
    uint64_t v9 = *a1 + 16 * ((v7 - *a1) >> 4);
    *(_OWORD *)(v9 + 16) = *(_OWORD *)a2;
    *(void *)(v9 + 32) = a2[2];
  }
  return a1;
}

void turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::create_new_container()
{
}

void sub_224336BA0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1020C40CC2D9803);
  _Unwind_Resume(a1);
}

uint64_t turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::begin@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(unsigned char ***)result;
  uint64_t v3 = **(unsigned char ***)result;
  uint64_t v4 = *(unsigned char **)(*(void *)result + 8);
  if (v3 != v4)
  {
    while ((*v3 & 1) == 0)
    {
      v3 += 48;
      if (v3 == v4)
      {
        uint64_t v3 = *(unsigned char **)(*(void *)result + 8);
        break;
      }
    }
  }
  uint64_t v5 = *(void *)(result + 24);
  if (v5) {
    uint64_t v5 = *(void *)(*(void *)(result + 48) + 8 * *(void *)(result + 16));
  }
  *(void *)a2 = result;
  *(void *)(a2 + ++*(_DWORD *)(result + 8) = v2;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v5;
  *(unsigned char *)(a2 + 32) = v4 == v3;
  return result;
}

void std::swap[abi:ne180100]<boost::unordered::unordered_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>,std::allocator<std::pair<turi::hash_value const,unsigned long>>>>(uint64_t a1, uint64_t a2)
{
  LOBYTE(v5) = 0;
  long long v6 = *(_OWORD *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::move_assign<std::integral_constant<BOOL,true>>(a1, a2);
  if (&v5 != (uint64_t *)a2)
  {
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets((void *)a2);
    *(_DWORD *)(a2 + 24) = v7;
    *(_OWORD *)(a2 + ++*(_DWORD *)(result + 8) = v6;
    uint64_t v4 = v9;
    *(void *)(a2 + 32) = v8;
    *(void *)(a2 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v4;
    *((void *)&v6 + 1) = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(&v5);
}

void *turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::hopscotch_table(void *a1, uint64_t a2, char a3, char a4)
{
  unint64_t v6 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1) | (((a2 - 1) | ((unint64_t)(a2 - 1) >> 1)) >> 2);
  unint64_t v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  double result = std::vector<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element>>::vector(a1, (v7 | (v7 >> 16) | ((v7 | (v7 >> 16)) >> 32)) + 33);
  *((unsigned char *)result + 24) = a3;
  *((unsigned char *)result + 25) = a4;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 4) - 33;
  result[4] = 0;
  result[5] = v9;
  return result;
}

void *std::vector<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 48 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = 0;
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 16) = 0;
      v4 += 48;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_224336D88(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(_DWORD *)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::emplace_unique<std::pair<turi::hash_value,unsigned long> const&>(void *a1, void *a2, void *a3)
{
  unint64_t v5 = ~*a2 + (*a2 << 21);
  unint64_t v6 = 21 * ((265 * (v5 ^ (v5 >> 24))) ^ ((265 * (v5 ^ (v5 >> 24))) >> 14));
  uint64_t v7 = 2147483649u * (v6 ^ (v6 >> 28));
  uint64_t v8 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::find_node_impl<turi::hash_value,std::equal_to<turi::hash_value>>(a1, v7, a2);
  if (v8) {
    return v8;
  }
  unint64_t v9 = operator new(0x30uLL);
  _OWORD v9[2] = 0u;
  _OWORD *v9 = 0u;
  uint64_t v10 = a3[1];
  *((void *)v9 + 2) = *a3;
  *((void *)v9 + 3) = v10;
  *((void *)v9 + 4) = a3[2];
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::reserve_for_insert(a1, a1[2] + 1);
  uint64_t v11 = a1[1];
  uint64_t v12 = (v11 - 1) & v7;
  uint64_t v13 = a1[5];
  *((void *)v9 + 1) = v12 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v14 = *(void **)(v13 + 8 * v12);
  if (v14)
  {
    *(void *)unint64_t v9 = *v14;
    uint64_t v15 = *(void *)(v13 + 8 * v12);
  }
  else
  {
    uint64_t v15 = v13 + 8 * v11;
    if (*(void *)v15) {
      *(void *)(v13 + 8 * *(void *)(*(void *)v15 + 8)) = v9;
    }
    *(void *)(v13 + 8 * v12) = v15;
    *(void *)unint64_t v9 = *(void *)v15;
  }
  *(void *)uint64_t v15 = v9;
  ++a1[2];
  return v9;
}

void sub_224336EC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::reserve_for_insert(void *a1, unint64_t a2)
{
  if (a1[5])
  {
    if (a1[4] < a2)
    {
      if (a1[2] + (a1[2] >> 1) > a2) {
        a2 = a1[2] + (a1[2] >> 1);
      }
      unint64_t v3 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::min_buckets_for_size((uint64_t)a1, a2);
      if (v3 != a1[1])
      {
        boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::create_buckets((uint64_t)a1, v3);
        uint64_t v4 = a1[1];
        uint64_t v5 = a1[5];
        unint64_t v6 = (void *)(v5 + 8 * v4);
        uint64_t v7 = (void *)*v6;
        if (*v6)
        {
          uint64_t v8 = v4 - 1;
          do
          {
            unint64_t v9 = ~v7[2] + (v7[2] << 21);
            unint64_t v10 = 21 * ((265 * (v9 ^ (v9 >> 24))) ^ ((265 * (v9 ^ (v9 >> 24))) >> 14));
            uint64_t v11 = (2147483649u * (v10 ^ (v10 >> 28))) & v8;
            v7[1] = v11 & 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v12 = (void *)*v7;
            if (*v7 && (v12[1] & 0x8000000000000000) != 0)
            {
              do
              {
                uint64_t v7 = v12;
                v12[1] = v11 | 0x8000000000000000;
                uint64_t v12 = (void *)*v12;
              }
              while (v12 && (v12[1] & 0x8000000000000000) != 0);
            }
            uint64_t v13 = *(void **)(v5 + 8 * v11);
            if (v13)
            {
              void *v7 = *v13;
              **(void **)(v5 + 8 * v11) = *v6;
              void *v6 = v12;
            }
            else
            {
              *(void *)(v5 + 8 * v11) = v6;
              uint64_t v12 = (void *)*v7;
              unint64_t v6 = v7;
            }
            uint64_t v7 = v12;
          }
          while (v12);
        }
      }
    }
  }
  else
  {
    unint64_t v14 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::min_buckets_for_size((uint64_t)a1, a2);
    if (a1[1] <= v14) {
      unint64_t v15 = v14;
    }
    else {
      unint64_t v15 = a1[1];
    }
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::create_buckets((uint64_t)a1, v15);
  }
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::min_buckets_for_size(uint64_t a1, unint64_t a2)
{
  double v2 = floor((double)a2 / *(float *)(a1 + 24)) + 1.0;
  unint64_t v3 = (unint64_t)v2;
  if (v2 >= 1.84467441e19) {
    unint64_t v3 = -1;
  }
  if (v3 < 5) {
    return 4;
  }
  unint64_t v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  unint64_t v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  return (v6 | (v6 >> 16) | ((v6 | (v6 >> 16)) >> 32)) + 1;
}

void std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  double v2 = (turi::simple_spinlock **)*a1;
  if (*v2)
  {
    std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, turi::simple_spinlock *a2)
{
  uint64_t v4 = *(turi::simple_spinlock **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      unint64_t v5 = (turi::simple_spinlock *)((char *)v4 - 72);
      turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map((uint64_t *)v4 - 8);
      turi::simple_spinlock::~simple_spinlock(v5);
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = a2;
}

void std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__append(void *a1, unint64_t a2)
{
  uint64_t v5 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v4 = v5;
  unint64_t v6 = *(unsigned char **)(result - 8);
  if (0x8E38E38E38E38E39 * ((v5 - (uint64_t)v6) >> 3) < a2)
  {
    unint64_t v7 = 0x8E38E38E38E38E39 * ((uint64_t)&v6[-*a1] >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 <= 0x38E38E38E38E38ELL)
    {
      unint64_t v9 = 0x8E38E38E38E38E39 * ((v4 - *a1) >> 3);
      if (2 * v9 > v8) {
        unint64_t v8 = 2 * v9;
      }
      if (v9 >= 0x1C71C71C71C71C7) {
        unint64_t v10 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v10 = v8;
      }
      if (v10) {
        uint64_t v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>(result, v10);
      }
      else {
        uint64_t v11 = 0;
      }
      std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::pair[abi:ne180100]<true,0>(&v11[72 * v7]);
    }
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (a2) {
    std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::pair[abi:ne180100]<true,0>(v6);
  }
  a1[1] = v6;
  return result;
}

void sub_224337318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::pair[abi:ne180100]<true,0>(unsigned char *a1)
{
  *a1 = 0;
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hopscotch_map((uint64_t)(a1 + 8));
}

void sub_2243373E8(_Unwind_Exception *a1)
{
  turi::simple_spinlock::~simple_spinlock(v1);
  _Unwind_Resume(a1);
}

void turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hopscotch_map(uint64_t a1)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_2246BA0C0;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = 0;
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::create_new_container();
}

void sub_224337450(_Unwind_Exception *a1)
{
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v12 = a6;
  *((void *)&v12 + 1) = a7;
  long long v11 = v12;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  char v10 = 0;
  if (a3 != a5) {
    std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::pair[abi:ne180100]((unsigned char *)(a7 - 72), a3 - 72);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return a6;
}

void sub_224337510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::pair[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hopscotch_map((uint64_t)(a1 + 8), a2 + 8);
}

void sub_224337554(_Unwind_Exception *a1)
{
  turi::simple_spinlock::~simple_spinlock(v1);
  _Unwind_Resume(a1);
}

void turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hopscotch_map(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_2246BA0C0;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::create_new_container();
}

void sub_22433760C(_Unwind_Exception *a1)
{
  boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    std::vector<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element>>::__assign_with_size[abi:ne180100]<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element*,turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element*>((void *)a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

_DWORD *std::vector<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element,std::allocator<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element>>::__assign_with_size[abi:ne180100]<turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element*,turi::hopscotch_table<std::pair<turi::hash_value,unsigned long>,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::hash_redirect,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::key_equal_redirect>::element*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (_DWORD *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 4) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__vallocate[abi:ne180100](a1, v12);
    unint64_t v14 = (_DWORD *)a1[1];
    uint64_t v13 = (_DWORD **)(a1 + 1);
    uint64_t result = v14;
    unint64_t v15 = v14;
    if (v6 != a3)
    {
      unint64_t v15 = result;
      do
      {
        *unint64_t v15 = *(_DWORD *)v6;
        *((_OWORD *)v15 + 1) = *(_OWORD *)(v6 + 16);
        *((void *)v15 + 4) = *(void *)(v6 + 32);
        v15 += 12;
        v6 += 48;
      }
      while (v6 != a3);
    }
LABEL_25:
    int64_t v22 = (char *)v15 - (char *)result;
    goto LABEL_26;
  }
  uint64_t v17 = (_DWORD *)a1[1];
  uint64_t v13 = (_DWORD **)(a1 + 1);
  uint64_t v16 = v17;
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)result) >> 4);
  if (v18 >= a4)
  {
    unint64_t v15 = result;
    if (a2 != a3)
    {
      unint64_t v23 = result;
      do
      {
        *unint64_t v23 = *(_DWORD *)v6;
        *((_OWORD *)v23 + 1) = *(_OWORD *)(v6 + 16);
        *((void *)v23 + 4) = *(void *)(v6 + 32);
        v15 += 12;
        v6 += 48;
        v23 += 12;
      }
      while (v6 != a3);
    }
    goto LABEL_25;
  }
  uint64_t v19 = a2 + 48 * v18;
  if (v16 != result)
  {
    do
    {
      *uint64_t result = *(_DWORD *)v6;
      *((_OWORD *)result + 1) = *(_OWORD *)(v6 + 16);
      *((void *)result + 4) = *(void *)(v6 + 32);
      v6 += 48;
      result += 12;
    }
    while (v6 != v19);
    uint64_t result = *v13;
  }
  uint64_t v20 = (char *)result;
  if (v19 != a3)
  {
    uint64_t v20 = (char *)result;
    unint64_t v21 = result;
    do
    {
      *unint64_t v21 = *(_DWORD *)v19;
      *((_OWORD *)v21 + 1) = *(_OWORD *)(v19 + 16);
      *((void *)v21 + 4) = *(void *)(v19 + 32);
      v20 += 48;
      v19 += 48;
      v21 += 12;
    }
    while (v19 != a3);
  }
  int64_t v22 = v20 - (char *)result;
LABEL_26:
  void *v13 = (_DWORD *)((char *)result + v22);
  return result;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::assign<std::integral_constant<BOOL,true>>(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)a1 | 2;
  *(unsigned char *)a1 = v4;
  float v5 = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = v5;
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6)
  {
    double v7 = v5 * (double)*(unint64_t *)(a1 + 8);
    unint64_t v8 = vcvtpd_u64_f64(v7);
    if (ceil(v7) >= 1.84467441e19) {
      unint64_t v8 = -1;
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  *(void *)(a1 + 32) = v8;
  unint64_t v9 = *(void *)(a2 + 16);
  if (v9 <= v8)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v11 = *(void *)(a1 + 8);
      if (v11) {
        bzero(v6, 8 * v11);
      }
    }
  }
  else
  {
    unint64_t v10 = boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::min_buckets_for_size(a1, v9);
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>,unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>>::create_buckets(a1, v10);
    char v4 = *(unsigned char *)a1;
  }
  *(unsigned char *)a1 = v4 ^ 3;
  return boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::assign_buckets((void *)a1, (void *)a2);
}

void sub_224337948(void *a1)
{
  __cxa_begin_catch(a1);
  if ((*v1 & 2) != 0) {
    *v1 &= 1u;
  }
  __cxa_rethrow();
}

void sub_224337964(_Unwind_Exception *a1)
{
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<turi::hash_value const,unsigned long>>,turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>::assign_buckets(void *a1, void *a2)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = (char *)a1 + 3;
  if (a1[2])
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = a1[5];
    float v5 = *(_OWORD **)(v4 + 8 * v3);
    uint64_t v19 = v5;
    *(void *)(v4 + 8 * v3) = 0;
    a1[2] = 0;
  }
  else
  {
    float v5 = 0;
  }
  if (a2[2])
  {
    uint64_t v6 = *(void **)(a2[5] + 8 * a2[1]);
    if (v6)
    {
      uint64_t v7 = 1;
      do
      {
        uint64_t v8 = v6[2];
        if (v5)
        {
          unint64_t v9 = *(_OWORD **)v5;
          *(void *)float v5 = 0;
        }
        else
        {
          float v5 = operator new(0x30uLL);
          unint64_t v9 = 0;
          v5[1] = 0u;
          _OWORD v5[2] = 0u;
          *float v5 = 0u;
        }
        unint64_t v10 = 265 * ((~v8 + (v8 << 21)) ^ ((unint64_t)(~v8 + (v8 << 21)) >> 24));
        v5[1] = *((_OWORD *)v6 + 1);
        *((void *)v5 + 4) = v6[4];
        uint64_t v11 = a1[1];
        unint64_t v12 = (v11 - 1) & (2147483649u * ((21 * (v10 ^ (v10 >> 14))) ^ ((21 * (v10 ^ (v10 >> 14))) >> 28)));
        uint64_t v13 = a1[5];
        *((void *)v5 + 1) = v12 & 0x7FFFFFFFFFFFFFFFLL;
        unint64_t v14 = *(void **)(v13 + 8 * v12);
        if (v14)
        {
          *(void *)float v5 = *v14;
          uint64_t v15 = *(void *)(v13 + 8 * v12);
        }
        else
        {
          uint64_t v15 = v13 + 8 * v11;
          if (*(void *)v15) {
            *(void *)(v13 + 8 * *(void *)(*(void *)v15 + 8)) = v5;
          }
          *(void *)(v13 + 8 * v12) = v15;
          *(void *)float v5 = *(void *)v15;
        }
        *(void *)uint64_t v15 = v5;
        a1[2] = v7;
        uint64_t v6 = (void *)*v6;
        ++v7;
        float v5 = v9;
      }
      while (v6);
      uint64_t v18 = 0;
      uint64_t v19 = v9;
    }
  }
  return boost::unordered::detail::node_holder<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>::~node_holder((uint64_t)&v17);
}

void sub_224337AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  a12 = 0;
  boost::unordered::detail::node_holder<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const,std::vector<turi::groupby_aggregate_impl::groupby_element> *>>>>::~node_holder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>,std::reverse_iterator<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
  double v2 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map(v1 + 1);
    turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)v1);
    v1 += 9;
  }
}

uint64_t std::__split_buffer<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    float v5 = (turi::simple_spinlock *)(i - 72);
    *(void *)(a1 + 16) = i - 72;
    turi::hopscotch_map<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *,std::hash<unsigned long>,std::equal_to<unsigned long>>::~hopscotch_map((uint64_t *)(i - 64));
    turi::simple_spinlock::~simple_spinlock(v5);
  }
}

void std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::pair<unsigned long,turi::flexible_type>>>::~__split_buffer(&v15);
  }
}

void sub_224337D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<unsigned long,turi::flexible_type>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<unsigned long,turi::flexible_type>>>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<unsigned long,turi::flexible_type>>>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - ++*(_DWORD *)(result + 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned long,turi::flexible_type>>>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned long,turi::flexible_type>>>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned long,turi::flexible_type>>>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned long,turi::flexible_type>>>,std::reverse_iterator<std::vector<std::pair<unsigned long,turi::flexible_type>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  double v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::pair<unsigned long,turi::flexible_type>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::pair<unsigned long,turi::flexible_type>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::pair<unsigned long,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::__function::__func<turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_1,std::allocator<std::vector<turi::flexible_type> &&>,void ()(unsigned long,unsigned long)>::~__func()
{
}

void *std::__function::__func<turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_1,std::allocator<std::vector<turi::flexible_type> &&>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D7795D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_1,std::allocator<std::vector<turi::flexible_type> &&>,void ()(unsigned long,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D7795D8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_1,std::allocator<std::vector<turi::flexible_type> &&>,void ()(unsigned long,unsigned long)>::operator()(void *result, const turi::flexible_type *a2, void *a3)
{
  v32[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v3 = (void *)result[1];
  uint64_t v4 = (uint64_t)(v3[11] - v3[10]) >> 4;
  unint64_t v5 = v4 * *(void *)a2;
  unint64_t v6 = v5 / *a3;
  unint64_t v7 = (v5 + v4) / *a3;
  if (v6 < v7)
  {
    do
    {
      uint64_t v8 = v3[10];
      memset(v32, 0, 13);
      uint64_t v9 = v8 + 16 * v6;
      if ((atomic_ullong **)v9 != v32)
      {
        unint64_t v10 = *(atomic_ullong **)v9;
        *(atomic_ullong **)((char *)v32 + 5) = *(atomic_ullong **)(v9 + 5);
        v32[0] = v10;
        unsigned int v11 = *(unsigned __int8 *)(v9 + 12);
        BYTE4(v32[1]) = v11;
        BOOL v12 = v11 > 9;
        int v13 = (1 << v11) & 0x33C;
        if (!v12 && v13 != 0) {
          atomic_fetch_add(v32[0], 1uLL);
        }
      }
      turi::hash128(v30, (turi *)v32, a2);
      switch(BYTE4(v32[1]))
      {
        case 2:
          if (atomic_fetch_add(v32[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v15 = v32[0];
            if (v32[0])
            {
              if (*((char *)v32[0] + 31) < 0) {
                operator delete(*((void **)v32[0] + 1));
              }
              uint64_t v16 = v15;
              uint64_t v17 = 0x1012C404EF22A49;
              goto LABEL_39;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(v32[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v18 = v32[0];
            if (v32[0])
            {
              uint64_t v19 = (void *)v32[0][1];
              if (v19)
              {
                v32[0][2] = (atomic_ullong)v19;
                operator delete(v19);
              }
              uint64_t v16 = v18;
              uint64_t v17 = 0x1080C409938AC02;
              goto LABEL_39;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(v32[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v20 = v32[0];
            if (v32[0])
            {
              v31[0] = (void **)(v32[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v31);
              goto LABEL_25;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(v32[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v20 = v32[0];
            if (v32[0])
            {
              v31[0] = (void **)(v32[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v31);
LABEL_25:
              uint64_t v16 = v20;
              uint64_t v17 = 0x1020C405E66F15BLL;
              goto LABEL_39;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(v32[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v21 = v32[0];
            if (v32[0])
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v32[0] + 2);
              uint64_t v16 = v21;
              unsigned int v22 = -235920773;
              goto LABEL_38;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(v32[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v23 = v32[0];
            if (v32[0])
            {
              BOOL v24 = (void *)v32[0][6];
              if (v24)
              {
                v32[0][7] = (atomic_ullong)v24;
                operator delete(v24);
              }
              uint64_t v25 = (void *)v23[3];
              if (v25)
              {
                uint64_t v23[4] = (atomic_ullong)v25;
                operator delete(v25);
              }
              unint64_t v26 = (std::__shared_weak_count *)v23[2];
              if (v26) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v26);
              }
              uint64_t v16 = v23;
              unsigned int v22 = 2071181815;
LABEL_38:
              uint64_t v17 = v22 | 0x1030C4000000000;
LABEL_39:
              MEMORY[0x22A614FA0](v16, v17);
            }
          }
          break;
        default:
          break;
      }
      memset(v32, 0, 13);
      unint64_t v27 = ((0xDEB2A42E44AA4C17 * v30[1]) ^ (0x7E952A7B972F486FLL * v30[0])) >> 56;
      uint64_t v28 = v3[4];
      std::string v29 = (atomic_uchar *)(v28 + 72 * v27);
      do
      {
        while (*v29 == 1)
          ;
      }
      while (atomic_exchange(v29, 1u));
      uint64_t result = (void *)turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::operator[]((void *)(v28 + 72 * v27 + 8), v30);
      *uint64_t result = v6;
      __dmb(0xBu);
      *std::string v29 = 0;
      ++v6;
    }
    while (v6 != v7);
  }
  return result;
}

void sub_224338380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, char a16)
{
  __dmb(0xBu);
  *uint64_t v16 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_1,std::allocator<std::vector<turi::flexible_type> &&>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data_internal::column_indexer::set_indices(std::vector<turi::flexible_type> &&)::$_1,std::allocator<std::vector<turi::flexible_type> &&>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void sub_2243385A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_2243385CC(_Unwind_Exception *a1)
{
}

uint64_t turi::variant_converter<turi::ml_column_mode,void>::get(uint64_t a1, int *a2)
{
  unint64_t v22[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v22, 0, 13);
  uint64_t v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((atomic_ullong **)v2 != v22)
  {
    uint64_t v4 = *(atomic_ullong **)v2;
    *(atomic_ullong **)((char *)v22 + 5) = *(atomic_ullong **)(v2 + 5);
    v22[0] = v4;
    BYTE4(v22[1]) = *(unsigned char *)(v2 + 12);
    if (BYTE4(v22[1]) <= 9u && ((1 << SBYTE4(v22[1])) & 0x33C) != 0) {
      atomic_fetch_add(v22[0], 1uLL);
    }
  }
  v20[0] = 0;
  turi::flexible_type_internals::ft_converter<13>::get<turi::ml_column_mode>(v20, (turi::flexible_type_internals *)v22, v3);
  uint64_t v6 = v20[0];
  switch(BYTE4(v22[1]))
  {
    case 2:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v7 = v22[0];
        if (v22[0])
        {
          if (*((char *)v22[0] + 31) < 0) {
            operator delete(*((void **)v22[0] + 1));
          }
          uint64_t v8 = v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v16 = v22[0];
        if (v22[0])
        {
          uint64_t v17 = (void *)v22[0][1];
          if (v17)
          {
            v22[0][2] = (atomic_ullong)v17;
            operator delete(v17);
          }
          uint64_t v8 = v16;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v21);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v21);
LABEL_33:
          uint64_t v8 = v10;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v18 = v22[0];
        if (v22[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v22[0] + 2);
          uint64_t v8 = v18;
          unsigned int v15 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v11 = v22[0];
        if (v22[0])
        {
          BOOL v12 = (void *)v22[0][6];
          if (v12)
          {
            v22[0][7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          int v13 = (void *)v11[3];
          if (v13)
          {
            v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          long long v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          uint64_t v8 = v11;
          unsigned int v15 = 2071181815;
LABEL_37:
          uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_38:
          MEMORY[0x22A614FA0](v8, v9);
        }
      }
      break;
    default:
      return v6;
  }
  return v6;
}

void sub_224338870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 40);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      unint64_t v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v26 = *(void **)(v18 - 40);
      if (!v26) {
        goto LABEL_27;
      }
      unint64_t v27 = (void *)v26[1];
      if (v27)
      {
        v26[2] = v27;
        operator delete(v27);
      }
      unint64_t v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      unint64_t v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 40);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      unint64_t v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      BOOL v24 = *(void **)(v18 - 40);
      if (!v24) {
        goto LABEL_27;
      }
      unint64_t v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

_DWORD *turi::flexible_type_internals::ft_converter<13>::get<turi::ml_column_mode>(_DWORD *result, turi::flexible_type_internals *this, const char *a3)
{
  if (*((unsigned char *)this + 12)) {
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer / enum.", a3);
  }
  *uint64_t result = *(void *)this;
  return result;
}

void sub_224338B94()
{
}

void turi::flexible_type_internals::ft_converter<13>::get<turi::ml_column_mode>(turi::ml_column_mode &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 752, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<13>::get<turi::ml_column_mode>(turi::ml_column_mode &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224338C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::variant_converter<turi::flex_type_enum,void>::get(uint64_t a1, int *a2)
{
  unint64_t v22[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v22, 0, 13);
  uint64_t v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((atomic_ullong **)v2 != v22)
  {
    uint64_t v4 = *(atomic_ullong **)v2;
    *(atomic_ullong **)((char *)v22 + 5) = *(atomic_ullong **)(v2 + 5);
    v22[0] = v4;
    BYTE4(v22[1]) = *(unsigned char *)(v2 + 12);
    if (BYTE4(v22[1]) <= 9u && ((1 << SBYTE4(v22[1])) & 0x33C) != 0) {
      atomic_fetch_add(v22[0], 1uLL);
    }
  }
  v20[0] = 0;
  turi::flexible_type_internals::ft_converter<13>::get<turi::flex_type_enum>(v20, (turi::flexible_type_internals *)v22, v3);
  char v6 = v20[0];
  switch(BYTE4(v22[1]))
  {
    case 2:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        char v7 = v22[0];
        if (v22[0])
        {
          if (*((char *)v22[0] + 31) < 0) {
            operator delete(*((void **)v22[0] + 1));
          }
          uint64_t v8 = v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v16 = v22[0];
        if (v22[0])
        {
          uint64_t v17 = (void *)v22[0][1];
          if (v17)
          {
            v22[0][2] = (atomic_ullong)v17;
            operator delete(v17);
          }
          uint64_t v8 = v16;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v21);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v21);
LABEL_33:
          uint64_t v8 = v10;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v18 = v22[0];
        if (v22[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v22[0] + 2);
          uint64_t v8 = v18;
          unsigned int v15 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v11 = v22[0];
        if (v22[0])
        {
          BOOL v12 = (void *)v22[0][6];
          if (v12)
          {
            v22[0][7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          int v13 = (void *)v11[3];
          if (v13)
          {
            v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          long long v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          uint64_t v8 = v11;
          unsigned int v15 = 2071181815;
LABEL_37:
          uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_38:
          MEMORY[0x22A614FA0](v8, v9);
        }
      }
      break;
    default:
      return v6;
  }
  return v6;
}

void sub_22433902C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 40);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      unint64_t v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v26 = *(void **)(v18 - 40);
      if (!v26) {
        goto LABEL_27;
      }
      unint64_t v27 = (void *)v26[1];
      if (v27)
      {
        v26[2] = v27;
        operator delete(v27);
      }
      unint64_t v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      unint64_t v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 40);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      unint64_t v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      BOOL v24 = *(void **)(v18 - 40);
      if (!v24) {
        goto LABEL_27;
      }
      unint64_t v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

unsigned char *turi::flexible_type_internals::ft_converter<13>::get<turi::flex_type_enum>(unsigned char *result, turi::flexible_type_internals *this, const char *a3)
{
  if (*((unsigned char *)this + 12)) {
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer / enum.", a3);
  }
  *uint64_t result = *(void *)this;
  return result;
}

void sub_224339350()
{
}

void turi::variant_converter<std::vector<turi::flexible_type>,void>::get(int *a1@<X1>, void *a2@<X8>)
{
  void v20[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v20, 0, 13);
  uint64_t v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((atomic_ullong **)v3 != v20)
  {
    unint64_t v5 = *(atomic_ullong **)v3;
    *(atomic_ullong **)((char *)v20 + 5) = *(atomic_ullong **)(v3 + 5);
    v20[0] = v5;
    BYTE4(v20[1]) = *(unsigned char *)(v3 + 12);
    if (BYTE4(v20[1]) <= 9u && ((1 << SBYTE4(v20[1])) & 0x33C) != 0) {
      atomic_fetch_add(v20[0], 1uLL);
    }
  }
  turi::flexible_type_converter<std::vector<turi::flexible_type>>::get((turi::flexible_type_internals *)v20, v4, a2);
  switch(BYTE4(v20[1]))
  {
    case 2:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        char v7 = v20[0];
        if (v20[0])
        {
          if (*((char *)v20[0] + 31) < 0) {
            operator delete(*((void **)v20[0] + 1));
          }
          uint64_t v8 = v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v16 = v20[0];
        if (v20[0])
        {
          uint64_t v17 = (void *)v20[0][1];
          if (v17)
          {
            v20[0][2] = (atomic_ullong)v17;
            operator delete(v17);
          }
          uint64_t v8 = v16;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v10 = v20[0];
        if (v20[0])
        {
          v19[0] = (void **)(v20[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v19);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v10 = v20[0];
        if (v20[0])
        {
          v19[0] = (void **)(v20[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v19);
LABEL_33:
          uint64_t v8 = v10;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v18 = v20[0];
        if (v20[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v20[0] + 2);
          uint64_t v8 = v18;
          unsigned int v15 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v11 = v20[0];
        if (v20[0])
        {
          BOOL v12 = (void *)v20[0][6];
          if (v12)
          {
            v20[0][7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          int v13 = (void *)v11[3];
          if (v13)
          {
            v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          long long v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          uint64_t v8 = v11;
          unsigned int v15 = 2071181815;
LABEL_37:
          uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_38:
          MEMORY[0x22A614FA0](v8, v9);
        }
      }
      break;
    default:
      return;
  }
}

void sub_2243395E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 40);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      unint64_t v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v26 = *(void **)(v18 - 40);
      if (!v26) {
        goto LABEL_27;
      }
      unint64_t v27 = (void *)v26[1];
      if (v27)
      {
        v26[2] = v27;
        operator delete(v27);
      }
      unint64_t v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      unint64_t v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 40);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      unint64_t v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      BOOL v24 = *(void **)(v18 - 40);
      if (!v24) {
        goto LABEL_27;
      }
      unint64_t v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

void turi::flexible_type_converter<std::vector<turi::flexible_type>>::get(turi::flexible_type_internals *a1@<X1>, const char *a2@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  turi::flexible_type_internals::ft_converter<1>::get((uint64_t)a3, a1, a2);
}

void sub_224339900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_converter<1>::get(uint64_t a1, turi::flexible_type_internals *this, const char *a3)
{
  int v4 = *((unsigned __int8 *)this + 12);
  if (v4 == 3)
  {
    uint64_t v5 = *(void *)this;
    std::vector<turi::flexible_type>::vector(&v25, (uint64_t)(*(void *)(*(void *)this + 16) - *(void *)(*(void *)this + 8)) >> 3);
    uint64_t v6 = *(void *)(v5 + 8);
    if (*(void *)(v5 + 16) != v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = v25 + v7;
        switch(*(unsigned char *)(v25 + v7 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)v9;
              if (*(void *)v9)
              {
                if (*((char *)v10 + 31) < 0) {
                  operator delete((void *)v10[1]);
                }
                atomic_ullong *volatile v11 = v10;
                uint64_t v12 = 0x1012C404EF22A49;
                goto LABEL_35;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)v9;
              if (*(void *)v9)
              {
                uint64_t v20 = (void *)v19[1];
                if (v20)
                {
                  v19[2] = (atomic_ullong)v20;
                  operator delete(v20);
                }
                atomic_ullong *volatile v11 = v19;
                uint64_t v12 = 0x1080C409938AC02;
                goto LABEL_35;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v9;
              if (*(void *)v9)
              {
                unint64_t v27 = (void **)(v13 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
                goto LABEL_30;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v9;
              if (*(void *)v9)
              {
                unint64_t v27 = (void **)(v13 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v27);
LABEL_30:
                atomic_ullong *volatile v11 = v13;
                uint64_t v12 = 0x1020C405E66F15BLL;
                goto LABEL_35;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v9;
              if (*(void *)v9)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)v21 + 2);
                atomic_ullong *volatile v11 = v21;
                unsigned int v18 = -235920773;
                goto LABEL_34;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)v9;
              if (*(void *)v9)
              {
                unsigned int v15 = (void *)v14[6];
                if (v15)
                {
                  v14[7] = (atomic_ullong)v15;
                  operator delete(v15);
                }
                uint64_t v16 = (void *)v14[3];
                if (v16)
                {
                  uint64_t v14[4] = (atomic_ullong)v16;
                  operator delete(v16);
                }
                uint64_t v17 = (std::__shared_weak_count *)v14[2];
                if (v17) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
                }
                atomic_ullong *volatile v11 = v14;
                unsigned int v18 = 2071181815;
LABEL_34:
                uint64_t v12 = v18 | 0x1030C4000000000;
LABEL_35:
                MEMORY[0x22A614FA0](v11, v12);
              }
            }
            break;
          default:
            break;
        }
        *(void *)uint64_t v9 = 0;
        *(_DWORD *)(v9 + ++*(_DWORD *)(result + 8) = 0;
        *(unsigned char *)(v9 + 12) = 1;
        *(void *)uint64_t v9 = *(void *)(v6 + 8 * v8++);
        uint64_t v6 = *(void *)(v5 + 8);
        v7 += 16;
      }
      while (v8 < (*(void *)(v5 + 16) - v6) >> 3);
    }
    std::vector<turi::flexible_type>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = v25;
    *(void *)(a1 + 16) = v26;
    uint64_t v26 = 0;
    long long v25 = 0uLL;
    unint64_t v27 = (void **)&v25;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v27);
  }
  else
  {
    if (v4 != 4) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"vector of floats", a3);
    }
    uint64_t v22 = *(void *)this;
    if (*(void *)this + 8 != a1)
    {
      unint64_t v23 = *(uint64_t **)(v22 + 8);
      BOOL v24 = *(uint64_t **)(v22 + 16);
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1, v23, v24, ((char *)v24 - (char *)v23) >> 4);
    }
  }
}

void sub_224339C1C()
{
}

void turi::flexible_type_internals::ft_converter<1>::get(std::vector<turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 176, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_internals::ft_converter<1>::get(std::vector<turi::flexible_type> &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224339D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

std::string *turi::ml_data_internal::column_statistics::column_statistics(std::string *this, long long *a2, int a3, std::string::value_type a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = a3;
  this[1].__r_.__value_.__s.__data_[4] = a4;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0x100000;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = 0u;
  uint64_t v8 = 168;
  this[6].__r_.__value_.__r.__words[2] = 0;
  do
    this->__r_.__value_.__s.__data_[v8++] = 0;
  while (v8 != 232);
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[11].__r_.__value_.__l.__data_ = 0u;
  this[11].__r_.__value_.__r.__words[2] = 0;
  this[12].__r_.__value_.__r.__words[0] = 0;
  this[12].__r_.__value_.__l.__size_ = 850045863;
  *(_OWORD *)&this[12].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[13].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[14].__r_.__value_.__l.__data_ = 0u;
  this[14].__r_.__value_.__r.__words[2] = 0;
  return this;
}

void turi::ml_data_internal::column_statistics::initialize(turi::ml_data_internal::column_statistics *this)
{
  unint64_t v2 = turi::thread::cpu_count(this);
  *((void *)this + 1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  *((void *)this + ++*(_DWORD *)(result + 8) = *((void *)this + 7);
  std::vector<std::vector<unsigned long>>::resize((uint64_t *)this + 15, v2);
  uint64_t v3 = 0;
  std::vector<unsigned long>::assign((char **)this + 12, v2, &v3);
  std::vector<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>::resize((uint64_t *)this + 18, v2);
  *((void *)this + 11) = turi::ml_data_internal::ML_DATA_STATS_PARALLEL_ACCESS_THRESHOLD;
}

void std::vector<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        atomic_ullong *volatile v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void *turi::ml_data_internal::column_statistics::_finalize_threadlocal(turi::ml_data_internal::column_statistics *this, uint64_t a2, char a3, char a4)
{
  Bytef v10[4] = *MEMORY[0x263EF8340];
  uint64_t v9 = a2;
  char v8 = a3;
  char v7 = a4;
  BOOL v5 = operator new(0x28uLL);
  *BOOL v5 = &unk_26D779658;
  v5[1] = &v9;
  _OWORD v5[2] = &v8;
  v5[3] = this;
  Bytef v5[4] = &v7;
  void v10[3] = v5;
  turi::in_parallel((turi::thread_pool *)v10);
  return std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v10);
}

void sub_22433A0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *turi::ml_data_internal::column_statistics::_finalize_global(turi::ml_data_internal::column_statistics *this, unint64_t a2, char a3, char a4)
{
  Bytef v9[4] = *MEMORY[0x263EF8340];
  char v8 = a3;
  char v7 = a4;
  BOOL v5 = operator new(0x20uLL);
  *BOOL v5 = &unk_26D7796D8;
  v5[1] = &v8;
  _OWORD v5[2] = this;
  v5[3] = &v7;
  void v9[3] = v5;
  turi::in_parallel((turi::thread_pool *)v9);
  return std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v9);
}

void sub_22433A198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::column_statistics::finalize(turi::ml_data_internal::column_statistics *this)
{
  unsigned int v2 = *((_DWORD *)this + 6);
  BOOL v3 = v2 > 7;
  unsigned int v4 = (0x6Au >> v2) & 1;
  unsigned int v5 = (0x95u >> v2) & 1;
  unsigned int v6 = (0xE5u >> v2) & 1;
  unsigned int v7 = (0x1Au >> v2) & 1;
  if (v3) {
    char v8 = 1;
  }
  else {
    char v8 = v4;
  }
  if (v3) {
    char v9 = 0;
  }
  else {
    char v9 = v5;
  }
  if (v3) {
    char v10 = 1;
  }
  else {
    char v10 = v6;
  }
  if (v3) {
    char v11 = 0;
  }
  else {
    char v11 = v7;
  }
  atomic_ullong *volatile v13 = (char *)this + 96;
  uint64_t v12 = (uint64_t *)*((void *)this + 12);
  *((void *)this + 1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  atomic_ullong *volatile v14 = (uint64_t *)*((void *)this + 13);
  if (v12 != v14)
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = *v12++;
      v15 += v16;
      *((void *)this + 1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v15;
    }
    while (v12 != v14);
  }
  if (v10) {
    goto LABEL_17;
  }
  uint64_t v20 = *((void *)this + 29);
  uint64_t v21 = *((void *)this + 30);
  atomic_ullong *volatile v19 = (char *)this + 232;
  if (v20 == v21)
  {
    uint64_t v22 = (uint64_t *)*((void *)this + 15);
    unint64_t v23 = (uint64_t *)*((void *)this + 16);
    if (v22 == v23)
    {
LABEL_17:
      unint64_t v17 = 0;
      unint64_t v18 = 0;
      goto LABEL_27;
    }
    unint64_t v18 = 0;
    unint64_t v17 = 0;
    do
    {
      uint64_t v25 = *v22;
      uint64_t v24 = v22[1];
      v22 += 3;
      uint64_t v26 = v24 - v25;
      if (v18 <= v26 >> 3) {
        unint64_t v18 = v26 >> 3;
      }
      if (v17 <= v26 >> 3) {
        unint64_t v17 = v26 >> 3;
      }
    }
    while (v22 != v23);
  }
  else
  {
    std::vector<unsigned long>::resize((uint64_t)v19, *((void *)this + 35));
    unint64_t v17 = *((void *)this + 11);
    unint64_t v18 = v17 + ((uint64_t)(*((void *)this + 30) - *((void *)this + 29)) >> 3);
  }
LABEL_27:
  if ((v8 & 1) == 0)
  {
    if (*((void *)this + 32) == *((void *)this + 33))
    {
      uint64_t v34 = (uint64_t *)*((void *)this + 18);
      while (v34 != *((uint64_t **)this + 19))
      {
        uint64_t v36 = *v34;
        uint64_t v35 = v34[1];
        v34 += 3;
        uint64_t v37 = v35 - v36;
        if (v18 <= v37 >> 4) {
          unint64_t v18 = v37 >> 4;
        }
        if (v17 <= v37 >> 4) {
          unint64_t v17 = v37 >> 4;
        }
      }
    }
    else
    {
      std::vector<xgboost_old::tree::RTreeNodeStat>::resize((uint64_t)this + 256, *((void *)this + 35));
      unint64_t v17 = *((void *)this + 11);
      if (v18 <= v17 + ((uint64_t)(*((void *)this + 33) - *((void *)this + 32)) >> 4)) {
        unint64_t v18 = v17 + ((uint64_t)(*((void *)this + 33) - *((void *)this + 32)) >> 4);
      }
    }
  }
  if ((v10 & 1) == 0)
  {
    *(void *)&long long v38 = 0;
    std::vector<unsigned long>::assign((char **)this + 4, v18, &v38);
  }
  if ((v8 & 1) == 0)
  {
    *((void *)this + ++*(_DWORD *)(result + 8) = *((void *)this + 7);
    std::vector<xgboost_old::tree::RTreeNodeStat>::resize((uint64_t)this + 56, v18);
  }
  turi::ml_data_internal::column_statistics::_finalize_threadlocal(this, v17, v11, v9);
  if (*((void *)this + 32) != *((void *)this + 33) || *((void *)this + 29) != *((void *)this + 30)) {
    turi::ml_data_internal::column_statistics::_finalize_global(this, v27, v11, v9);
  }
  uint64_t v28 = (void **)((char *)this + 256);
  long long v29 = *((_OWORD *)this + 9);
  *((_OWORD *)this + 9) = 0u;
  long long v38 = v29;
  uint64_t v30 = *((void *)this + 20);
  *((void *)this + 2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  uint64_t v39 = v30;
  uint64_t v40 = (void **)&v38;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v40);
  int v31 = (void *)*((void *)this + 12);
  *((void *)v13 + 2) = 0;
  *(_OWORD *)atomic_ullong *volatile v13 = 0u;
  if (v31) {
    operator delete(v31);
  }
  unint64_t v32 = *v28;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *uint64_t v28 = 0;
  if (v32) {
    operator delete(v32);
  }
  unint64_t v33 = (void *)*((void *)this + 29);
  *((void *)this + 3CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 29) = 0;
  if (v33) {
    operator delete(v33);
  }
}

void *turi::ml_data_internal::column_statistics::save_impl(const void **this, turi::oarchive *a2)
{
  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)a2, this);
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 4 > v4)
    {
      size_t v11 = 2 * v4 + 8;
      *((void *)a2 + 5) = v11;
      uint64_t v12 = (char **)*((void *)a2 + 2);
      if (v12)
      {
        unsigned int v5 = *v12;
        size_t v13 = v12[1] - *v12;
        BOOL v14 = v11 >= v13;
        std::vector<char>::size_type v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v15);
          unsigned int v5 = (char *)**((void **)a2 + 2);
        }
        else if (!v14)
        {
          v12[1] = &v5[v11];
        }
      }
      else
      {
        unsigned int v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v11, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v5;
    }
    else
    {
      unsigned int v5 = (char *)*((void *)a2 + 3);
    }
    *(_DWORD *)&v5[*((void *)a2 + 4)] = *((_DWORD *)this + 6);
    *((void *)a2 + 4) += 4;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v6 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v6)
    {
      size_t v16 = 2 * v6 + 2;
      *((void *)a2 + 5) = v16;
      unint64_t v17 = (void *)*((void *)a2 + 2);
      if (v17)
      {
        unsigned int v7 = (unsigned char *)*v17;
        size_t v18 = v17[1] - *v17;
        BOOL v19 = v16 >= v18;
        std::vector<char>::size_type v20 = v16 - v18;
        if (v20 != 0 && v19)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v20);
          unsigned int v7 = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v19)
        {
          v17[1] = &v7[v16];
        }
      }
      else
      {
        unsigned int v7 = malloc_type_realloc(*((void **)a2 + 3), v16, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v7;
    }
    else
    {
      unsigned int v7 = (unsigned char *)*((void *)a2 + 3);
    }
    v7[(*((void *)a2 + 4))++] = *((unsigned char *)this + 28);
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v8 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v8)
    {
      size_t v21 = 2 * v8 + 16;
      *((void *)a2 + 5) = v21;
      uint64_t v22 = (char **)*((void *)a2 + 2);
      if (v22)
      {
        char v9 = *v22;
        size_t v23 = v22[1] - *v22;
        BOOL v24 = v21 >= v23;
        std::vector<char>::size_type v25 = v21 - v23;
        if (v25 != 0 && v24)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v25);
          char v9 = (char *)**((void **)a2 + 2);
        }
        else if (!v24)
        {
          v22[1] = &v9[v21];
        }
      }
      else
      {
        char v9 = (char *)malloc_type_realloc(*((void **)a2 + 3), v21, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v9;
    }
    else
    {
      char v9 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v9[*((void *)a2 + 4)] = this[10];
    *((void *)a2 + 4) += 8;
  }
  turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec((uint64_t)a2, this + 4);
  return turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::ml_data_internal::column_statistics::element_statistics,true>::exec((uint64_t)a2, this + 7);
}

void turi::ml_data_internal::column_statistics::load_version(std::string *this, turi::iarchive *a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (a3 != 2)
  {
    if (a3 != 3) {
      turi::ml_data_internal::column_statistics::load_version(turi::iarchive &,unsigned long)::$_1::operator()();
    }
    turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, this);
    uint64_t v5 = *((void *)a2 + 2);
    if (v5)
    {
      LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)(v5 + *((void *)a2 + 3));
      *((void *)a2 + 3) += 4;
    }
    else
    {
      std::istream::read();
    }
    uint64_t v8 = *((void *)a2 + 2);
    if (v8) {
      this[1].__r_.__value_.__s.__data_[4] = *(unsigned char *)(v8 + (*((void *)a2 + 3))++);
    }
    else {
      std::istream::read();
    }
    uint64_t v9 = *((void *)a2 + 2);
    if (v9)
    {
      this[3].__r_.__value_.__l.__size_ = *(void *)(v9 + *((void *)a2 + 3));
      *((void *)a2 + 3) += 8;
    }
    else
    {
      std::istream::read();
    }
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,unsigned long,true>::exec((uint64_t)a2, &this[1].__r_.__value_.__l.__size_);
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::ml_data_internal::column_statistics::element_statistics,true>::exec((uint64_t)a2, &this[2].__r_.__value_.__l.__size_);
    return;
  }
  v47[0] = 0;
  v47[1] = 0;
  uint64_t v46 = v47;
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)&v46, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "statistics_type");
  unint64_t v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v46, (const void **)&__p[0].__r_.__value_.__l.__data_);
  turi::variant_converter<std::string,void>::get(v6, &v45);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v45.__r_.__value_.__l.__size_ != 11) {
      goto LABEL_72;
    }
    unsigned int v7 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) != 11) {
      goto LABEL_72;
    }
    unsigned int v7 = &v45;
  }
  std::string::size_type v10 = v7->__r_.__value_.__r.__words[0];
  uint64_t v11 = *(std::string::size_type *)((char *)v7->__r_.__value_.__r.__words + 3);
  if (v10 != 0x65642D6369736162 || v11 != 0x65736E65642D6369) {
LABEL_72:
  }
    turi::ml_data_internal::column_statistics::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
  std::string::basic_string[abi:ne180100]<0>(__p, "version");
  size_t v13 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v46, (const void **)&__p[0].__r_.__value_.__l.__data_);
  unint64_t v14 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v42, v13);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v42, "column_name");
  std::vector<char>::size_type v15 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v46, (const void **)&v42);
  turi::variant_converter<std::string,void>::get(v15, __p);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(this->__r_.__value_.__l.__data_);
  }
  *this = __p[0];
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 0;
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v44) < 0) {
    operator delete(v42);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mode");
  size_t v16 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v46, (const void **)&__p[0].__r_.__value_.__l.__data_);
  LODWORD(this[1].__r_.__value_.__l.__data_) = turi::variant_converter<turi::ml_column_mode,void>::get((uint64_t)&v42, v16);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "original_column_type");
  unint64_t v17 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v46, (const void **)&__p[0].__r_.__value_.__l.__data_);
  this[1].__r_.__value_.__s.__data_[4] = turi::variant_converter<turi::flex_type_enum,void>::get((uint64_t)&v42, v17);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = &v43;
  turi::variant_deep_load<std::map<std::string,turi::flexible_type>>((uint64_t)&v42, a2);
  if (v14 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v40, "total_row_count");
    uint64_t v27 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v42, (const void **)v40);
    __p[0].__r_.__value_.__l.__size_ = 0;
    LODWORD(__p[0].__r_.__value_.__r.__words[2]) = 0;
    __p[0].__r_.__value_.__s.__data_[20] = 0;
    if (&__p[0].__r_.__value_.__r.__words[1] != (std::string::size_type *)v27)
    {
      std::string::size_type v28 = *(void *)v27;
      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 5) = *(void *)(v27 + 5);
      __p[0].__r_.__value_.__l.__size_ = v28;
      __p[0].__r_.__value_.__s.__data_[20] = *(unsigned char *)(v27 + 12);
      if (__p[0].__r_.__value_.__s.__data_[20] <= 9u
        && ((1 << __p[0].__r_.__value_.__s.__data_[20]) & 0x33C) != 0)
      {
        atomic_fetch_add((atomic_ullong *volatile)__p[0].__r_.__value_.__l.__size_, 1uLL);
      }
    }
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
    this[3].__r_.__value_.__l.__size_ = turi::variant_converter<unsigned long,void>::get((uint64_t)&v48, (int *)__p);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,unsigned long,true>::exec((uint64_t)a2, &this[1].__r_.__value_.__l.__size_);
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::ml_data_internal::column_statistics::element_statistics,true>::exec((uint64_t)a2, &this[2].__r_.__value_.__l.__size_);
    goto LABEL_69;
  }
  std::string::basic_string[abi:ne180100]<0>(v40, "total_row_count");
  uint64_t v18 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v42, (const void **)v40);
  __p[0].__r_.__value_.__l.__size_ = 0;
  LODWORD(__p[0].__r_.__value_.__r.__words[2]) = 0;
  __p[0].__r_.__value_.__s.__data_[20] = 0;
  if (&__p[0].__r_.__value_.__r.__words[1] != (std::string::size_type *)v18)
  {
    std::string::size_type v19 = *(void *)v18;
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 5) = *(void *)(v18 + 5);
    __p[0].__r_.__value_.__l.__size_ = v19;
    __p[0].__r_.__value_.__s.__data_[20] = *(unsigned char *)(v18 + 12);
    if (__p[0].__r_.__value_.__s.__data_[20] <= 9u
      && ((1 << __p[0].__r_.__value_.__s.__data_[20]) & 0x33C) != 0)
    {
      atomic_fetch_add((atomic_ullong *volatile)__p[0].__r_.__value_.__l.__size_, 1uLL);
    }
  }
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
  this[3].__r_.__value_.__l.__size_ = turi::variant_converter<unsigned long,void>::get((uint64_t)&v48, (int *)__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  __p[0].__r_.__value_.__r.__words[0] = 0;
  uint64_t v20 = *((void *)a2 + 2);
  if (!v20)
  {
    std::istream::read();
    std::string::size_type v22 = __p[0].__r_.__value_.__r.__words[0];
    if (__p[0].__r_.__value_.__r.__words[0]) {
      goto LABEL_46;
    }
LABEL_56:
    uint64_t v26 = 0;
    std::vector<char>::size_type v25 = 0;
    goto LABEL_57;
  }
  uint64_t v21 = *((void *)a2 + 3);
  std::string::size_type v22 = *(void *)(v20 + v21);
  __p[0].__r_.__value_.__r.__words[0] = v22;
  *((void *)a2 + 3) = v21 + 8;
  if (!v22) {
    goto LABEL_56;
  }
LABEL_46:
  if (v22 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v23 = 24 * v22;
  BOOL v24 = (char *)operator new(24 * v22);
  bzero(v24, 24 * ((v23 - 24) / 0x18uLL) + 24);
  std::vector<char>::size_type v25 = &v24[24 * ((v23 - 24) / 0x18uLL) + 24];
  uint64_t v26 = v24;
LABEL_57:
  uint64_t v29 = v25 - v26;
  uint64_t v30 = *((void *)a2 + 2);
  if (v30)
  {
    uint64_t v31 = *((void *)a2 + 3);
    memcpy(v26, (const void *)(v30 + v31), v25 - v26);
    *((void *)a2 + 3) = v31 + v29;
  }
  else
  {
    std::istream::read();
  }
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 3);
  p_std::string::size_type size = &this[1].__r_.__value_.__l.__size_;
  std::vector<unsigned long>::resize((uint64_t)&this[1].__r_.__value_.__l.__size_, v32);
  uint64_t v34 = &this[2].__r_.__value_.__l.__size_;
  std::vector<xgboost_old::tree::RTreeNodeStat>::resize((uint64_t)v34, v32);
  if (v25 != v26)
  {
    uint64_t v35 = (void *)*p_size;
    uint64_t v36 = (_OWORD *)*v34;
    if (v32 <= 1) {
      uint64_t v37 = 1;
    }
    else {
      uint64_t v37 = v32;
    }
    long long v38 = v26 + 8;
    do
    {
      *v35++ = *((void *)v38 - 1);
      long long v39 = *v38;
      long long v38 = (_OWORD *)((char *)v38 + 24);
      *v36++ = v39;
      --v37;
    }
    while (v37);
    goto LABEL_68;
  }
  if (v26) {
LABEL_68:
  }
    operator delete(v26);
LABEL_69:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v42, v43);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v46, v47[0]);
}

void sub_22433ACE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,char *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a15, a16);
  if (a26 < 0) {
    operator delete(a21);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a27, a28);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::column_statistics::load_version(turi::iarchive &,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_statistics.cpp", 98);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unsigned int v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"statistics_type == \"basic-dense\"", 32);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/column_statistics.cpp", "operator()", 602, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::ml_data_internal::column_statistics::load_version(turi::iarchive &,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22433AEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::variant_deep_load<std::map<std::string,turi::flexible_type>>(uint64_t a1, turi::iarchive *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  {
    turi::variant_deep_load<std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> &,turi::iarchive &)::type_check_hash = 0xB2AED596F5A8ECDALL;
  }
  uint64_t v18 = 0;
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 3);
    uint64_t v6 = *(void *)(v4 + v5);
    uint64_t v18 = v6;
    *((void *)a2 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
    uint64_t v6 = v18;
  }
  uint64_t v7 = turi::variant_deep_load<std::map<std::string,turi::flexible_type>>(std::map<std::string,turi::flexible_type> &,turi::iarchive &)::type_check_hash;
  std::string::basic_string[abi:ne180100]<0>(&v16, "Deserialization of type ");
  uint64_t v8 = std::string::append(&v16, (const std::string::value_type *)(0x80000002246F1535 & 0x7FFFFFFFFFFFFFFFLL));
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v10 = std::string::append(&v17, " failed, likely due to corruption earlier in the stream. ");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t v20 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = __p;
  if (v20 < 0) {
    uint64_t v12 = (void **)__p[0];
  }
  assert_msg(v7 == v6, "%s", (const char *)v12);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  __p[1] = 0;
  LODWORD(v2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  BYTE4(v2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  LODWORD(__p[0]) = 0;
  turi::variant_deep_load((unsigned int *)__p, a2);
  turi::variant_converter<std::map<std::string,turi::flexible_type>,void>::get((int *)__p, (uint64_t)&v17);
  uint64_t v13 = a1 + 8;
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1, *(void **)(a1 + 8));
  std::string::size_type size = (void *)v17.__r_.__value_.__l.__size_;
  *(void *)a1 = v17.__r_.__value_.__r.__words[0];
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = size;
  std::string::size_type v15 = v17.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v17.__r_.__value_.__l + 2);
  if (v15)
  {
    size[2] = v13;
    v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17.__r_.__value_.__l.__size_;
    *(_OWORD *)&v17.__r_.__value_.__r.__words[1] = 0uLL;
    std::string::size_type size = 0;
  }
  else
  {
    *(void *)a1 = v13;
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v17, size);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
}

void sub_22433B204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void std::vector<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    std::string::size_type v15 = v12;
    std::string v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    std::string v17 = &v16[v14];
    std::vector<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_22433B3C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - ++*(_DWORD *)(result + 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>,std::reverse_iterator<std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x28uLL);
  *(void *)unsigned int v2 = &unk_26D779658;
  *(_OWORD *)(v2 + ++*(_DWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D779658;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + ++*(_DWORD *)(result + 8) = result;
  return result;
}

unint64_t std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::operator()(unint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(unsigned char **)(result + 16);
  uint64_t v3 = *(void *)(result + 24);
  uint64_t v5 = **(void **)(result + 8);
  unint64_t v6 = v5 * *a2;
  unint64_t v7 = v6 / *a3;
  unint64_t v8 = v5 + v6;
  int v9 = *v4;
  unint64_t v10 = v8 / *a3;
  if (*v4)
  {
    unint64_t v11 = *(uint64_t **)(v3 + 120);
    char v12 = *(uint64_t **)(v3 + 128);
    while (v11 != v12)
    {
      uint64_t v13 = *v11;
      uint64_t v14 = v11[1] - *v11;
      if (v10 >= v14 >> 3) {
        unint64_t v15 = v14 >> 3;
      }
      else {
        unint64_t v15 = v10;
      }
      if (v7 < v15)
      {
        uint64_t v16 = *(void *)(v3 + 32);
        unint64_t v17 = v7;
        do
        {
          *(void *)(v16 + 8 * v17) += *(void *)(v13 + 8 * v17);
          ++v17;
        }
        while (v17 != v15);
      }
      v11 += 3;
    }
  }
  if (**(unsigned char **)(result + 32))
  {
    uint64_t v18 = *(void *)(v3 + 144);
    uint64_t v19 = *(void *)(v3 + 152);
    unint64_t v20 = (v19 - v18) / 24;
    if (v19 != v18)
    {
      unint64_t v21 = 0;
      if (v20 <= 1) {
        uint64_t v22 = 1;
      }
      else {
        uint64_t v22 = (v19 - v18) / 24;
      }
      __n128 result = 24;
      do
      {
        uint64_t v23 = *(void *)(v18 + 24 * v21);
        uint64_t v24 = *(void *)(v18 + 24 * v21 + 8) - v23;
        if (v10 >= v24 >> 4) {
          unint64_t v25 = v24 >> 4;
        }
        else {
          unint64_t v25 = v10;
        }
        if (v7 < v25)
        {
          uint64_t v26 = *(void *)(v3 + 56);
          unint64_t v27 = v7;
          do
          {
            std::string::size_type v28 = (void *)(v3 + 96);
            unint64_t v29 = v21;
            if (v9)
            {
              std::string::size_type v28 = (void *)(*(void *)(v3 + 120) + 24 * v21);
              unint64_t v29 = v27;
            }
            *(double *)(v26 + 16 * v27) = *(double *)(v26 + 16 * v27)
                                        + *(double *)(v23 + 16 * v27) * (double)*(unint64_t *)(*v28 + 8 * v29);
            ++v27;
          }
          while (v27 != v25);
        }
        ++v21;
      }
      while (v21 != v22);
    }
    if (v7 < v10)
    {
      uint64_t v30 = *(void *)(v3 + 56);
      unint64_t v31 = v7;
      do
      {
        unint64_t v32 = (unint64_t *)(v3 + 80);
        if (v9) {
          unint64_t v32 = (unint64_t *)(*(void *)(v3 + 32) + 8 * v31);
        }
        unint64_t v33 = *v32;
        if (v33 <= 1) {
          unint64_t v33 = 1;
        }
        double v34 = (double)v33;
        __n128 result = 16 * v31;
        *(double *)(v30 + 16 * v31) = *(double *)(v30 + 16 * v31) / v34;
        ++v31;
      }
      while (v31 != v10);
    }
    if (v19 != v18)
    {
      unint64_t v35 = 0;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      do
      {
        uint64_t v36 = *(void *)(v18 + 24 * v35);
        uint64_t v37 = *(void *)(v18 + 24 * v35 + 8) - v36;
        if (v10 >= v37 >> 4) {
          __n128 result = v37 >> 4;
        }
        else {
          __n128 result = v10;
        }
        if (v7 < result)
        {
          uint64_t v38 = *(void *)(v3 + 56);
          unint64_t v39 = v7;
          do
          {
            uint64_t v40 = (void *)(v3 + 96);
            unint64_t v41 = v35;
            if (v9)
            {
              uint64_t v40 = (void *)(*(void *)(v3 + 120) + 24 * v35);
              unint64_t v41 = v39;
            }
            uint64_t v42 = (double *)(v38 + 16 * v39);
            v42[1] = v42[1]
                   + *(double *)(v36 + 16 * v39 + 8)
                   + (double)*(unint64_t *)(*v40 + 8 * v41)
                   * ((*(double *)(v36 + 16 * v39) - *v42)
                    * (*(double *)(v36 + 16 * v39) - *v42));
            ++v39;
          }
          while (v39 != result);
        }
        ++v35;
      }
      while (v35 != v20);
    }
  }
  switch(*(_DWORD *)(v3 + 24))
  {
    case 0:
    case 2:
    case 7:
      unint64_t v43 = *(void *)(v3 + 80);
      if (v43 >= 2 && v7 < v10)
      {
        uint64_t v44 = *(void *)(v3 + 56);
        do
        {
          *(double *)(v44 + 16 * v7 + ++*(_DWORD *)(result + 8) = sqrt(*(double *)(v44 + 16 * v7 + 8) / (double)(v43 - 1));
          ++v7;
        }
        while (v7 != v10);
      }
      break;
    case 4:
      unint64_t v45 = *(void *)(v3 + 80);
      if (v45 >= 2 && v7 < v10)
      {
        uint64_t v46 = *(void *)(v3 + 56);
        uint64_t v47 = *(void *)(v3 + 32);
        double v48 = (double)v45;
        double v49 = (double)(v45 - 1);
        do
        {
          uint64_t v50 = (double *)(v46 + 16 * v7);
          double v51 = (double)*(unint64_t *)(v47 + 8 * v7);
          double v52 = *v50 * (v51 / v48);
          double v53 = sqrt((v50[1] + *v50 * *v50 * v51 * (1.0 - v51 / v48)) / v49);
          *uint64_t v50 = v52;
          v50[1] = v53;
          ++v7;
        }
        while (v7 != v10);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_threadlocal(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v2 = &unk_26D7796D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + ++*(_DWORD *)(result + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7796D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + ++*(_DWORD *)(result + 8) = result;
  return result;
}

void *std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::operator()(void *result, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  unint64_t v5 = *a3;
  unint64_t v6 = (void *)result[2];
  if (*(unsigned char *)result[1])
  {
    uint64_t v7 = v6[29];
    uint64_t v8 = v6[30] - v7;
    unint64_t v9 = (v8 >> 3) * v4;
    unint64_t v10 = (v9 + (v8 >> 3)) / v5;
    if (v10 != v9 / v5) {
      __n128 result = memmove((void *)(v6[4] + 8 * (v9 / v5) + 8 * v6[11]), (const void *)(v7 + 8 * (v9 / v5)), 8 * v10 - 8 * (v9 / v5));
    }
  }
  if (*(unsigned char *)v3[3])
  {
    uint64_t v11 = v6[32];
    uint64_t v12 = v6[33] - v11;
    unint64_t v13 = (v12 >> 4) * v4;
    unint64_t v14 = v13 / v5;
    unint64_t v15 = (v13 + (v12 >> 4)) / v5;
    if (v13 / v5 < v15)
    {
      uint64_t v16 = v6[7];
      int v17 = *(unsigned __int8 *)v3[1];
      unint64_t v19 = v6[10];
      uint64_t v18 = v6[11];
      do
      {
        uint64_t v20 = v14 + v18;
        if (v17)
        {
          unint64_t v21 = (double *)(v11 + 16 * v14);
          __n128 result = (void *)v6[4];
          double v22 = (double)(unint64_t)result[v20];
          double v23 = v22 / (double)(unint64_t)v6[10];
          double v24 = *v21;
          double v25 = v21[1];
          *(double *)(v16 + 16 * v2CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *v21 * v23;
          v21[1] = v25 + v24 * v24 * v22 * (1.0 - v23);
        }
        double v26 = 0.0;
        if (v19 >= 2) {
          double v26 = sqrt(*(double *)(v11 + 16 * v14 + 8) / (double)(v19 - 1));
        }
        *(double *)(v16 + 16 * v20 + ++*(_DWORD *)(result + 8) = v26;
        ++v14;
      }
      while (v14 != v15);
    }
  }
  return result;
}

uint64_t std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0,std::allocator<turi::ml_data_internal::column_statistics::_finalize_global(unsigned long,BOOL,BOOL)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void *turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::ml_data_internal::column_statistics::element_statistics,true>::exec(uint64_t a1, const void **a2)
{
  uint64_t v4 = ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 4;
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v5)
    {
      size_t v12 = 2 * v5 + 16;
      *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v12;
      unint64_t v13 = *(char ***)(a1 + 16);
      if (v13)
      {
        unint64_t v6 = *v13;
        size_t v14 = v13[1] - *v13;
        BOOL v15 = v12 >= v14;
        std::vector<char>::size_type v16 = v12 - v14;
        if (v16 != 0 && v15)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v16);
          unint64_t v6 = **(char ***)(a1 + 16);
        }
        else if (!v15)
        {
          v13[1] = &v6[v12];
        }
      }
      else
      {
        unint64_t v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v12, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v6;
    }
    else
    {
      unint64_t v6 = *(char **)(a1 + 24);
    }
    *(void *)&v6[*(void *)(a1 + 32)] = v4;
    *(void *)(a1 + 32) += 8;
  }
  uint64_t v7 = *a2;
  size_t v8 = (unsigned char *)a2[1] - (unsigned char *)*a2;
  if (*(void *)a1) {
    return (void *)std::ostream::write();
  }
  size_t v10 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) + v8 > v10)
  {
    size_t v17 = 2 * (v10 + v8);
    *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v17;
    uint64_t v18 = *(char ***)(a1 + 16);
    if (v18)
    {
      uint64_t v11 = *v18;
      size_t v19 = v18[1] - *v18;
      BOOL v20 = v17 >= v19;
      std::vector<char>::size_type v21 = v17 - v19;
      if (v21 != 0 && v20)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v21);
        uint64_t v11 = **(char ***)(a1 + 16);
      }
      else if (!v20)
      {
        v18[1] = &v11[v17];
      }
    }
    else
    {
      uint64_t v11 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v17, 0xF6EA6B1uLL);
    }
    *(void *)(a1 + 24) = v11;
  }
  else
  {
    uint64_t v11 = *(char **)(a1 + 24);
  }
  __n128 result = memcpy(&v11[*(void *)(a1 + 32)], v7, v8);
  *(void *)(a1 + 32) += v8;
  return result;
}

void *turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::ml_data_internal::column_statistics::element_statistics,true>::exec(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unint64_t v6 = *(void *)(v4 + v5);
    *(void *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    unint64_t v6 = 0;
  }
  a2[1] = *a2;
  std::vector<xgboost_old::tree::RTreeNodeStat>::resize((uint64_t)a2, v6);
  uint64_t v7 = (void *)*a2;
  size_t v8 = a2[1] - *a2;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    return (void *)std::istream::read();
  }
  __n128 result = memcpy(v7, (const void *)(v9 + *(void *)(a1 + 24)), v8);
  *(void *)(a1 + 24) += v8;
  return result;
}

turi::neural_net::_anonymous_namespace_ *turi::neural_net::compute_context::create_tf@<X0>(turi::neural_net::compute_context *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  uint64_t v4 = *(void **)result;
  do
  {
    if (v4 == (void *)((char *)result + 8)) {
      break;
    }
    __n128 result = *(turi::neural_net::_anonymous_namespace_ **)(v4[5] + 64);
    if (result)
    {
      __n128 result = (turi::neural_net::_anonymous_namespace_ *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)result + 48))(&v9);
      uint64_t v5 = v9;
    }
    else
    {
      uint64_t v5 = 0;
    }
    *a2 = v5;
    unint64_t v6 = (void *)v4[1];
    if (v6)
    {
      do
      {
        uint64_t v7 = v6;
        unint64_t v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v7 = (void *)v4[2];
        BOOL v8 = *v7 == (void)v4;
        uint64_t v4 = v7;
      }
      while (!v8);
    }
    uint64_t v4 = v7;
  }
  while (!v5);
  return result;
}

void sub_22433BE90(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  _Unwind_Resume(a1);
}

turi::neural_net::_anonymous_namespace_ *turi::neural_net::compute_context::create@<X0>(turi::neural_net::compute_context *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  uint64_t v4 = *(void **)result;
  do
  {
    if (v4 == (void *)((char *)result + 8)) {
      break;
    }
    uint64_t v5 = *(void *)(v4[5] + 32);
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    __n128 result = (turi::neural_net::_anonymous_namespace_ *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v5 + 48))(&v10);
    uint64_t v6 = v10;
    *a2 = v10;
    uint64_t v7 = (void *)v4[1];
    if (v7)
    {
      do
      {
        BOOL v8 = v7;
        uint64_t v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        BOOL v8 = (void *)v4[2];
        BOOL v9 = *v8 == (void)v4;
        uint64_t v4 = v8;
      }
      while (!v9);
    }
    uint64_t v4 = v8;
  }
  while (!v6);
  return result;
}

void sub_22433BF5C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  _Unwind_Resume(a1);
}

CoreML::Model *CoreML::Model::Model(CoreML::Model *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26D779768;
  _ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification5ModelENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v5);
  long long v2 = v5;
  long long v5 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + ++*(_DWORD *)(result + 8) = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (*((void *)&v5 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
    }
  }
  *(_DWORD *)(*((void *)this + 1) + 24) = 6;
  return this;
}

void sub_22433BFF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

CoreML::Model *CoreML::Model::Model(CoreML::Model *this, const CoreML::Specification::Model *a2)
{
  *(void *)this = &unk_26D779768;
  *((void *)this + 1) = 0;
  uint64_t v3 = (uint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  std::allocate_shared[abi:ne180100]<CoreML::Specification::Model,std::allocator<CoreML::Specification::Model>,CoreML::Specification::Model const&,void>(a2, &v8);
  long long v5 = v8;
  long long v8 = 0uLL;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  *(_OWORD *)((char *)this + ++*(_DWORD *)(result + 8) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*((void *)&v8 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  CoreML::downgradeSpecificationVersion(*v3, v4);
  return this;
}

void sub_22433C09C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

CoreML::Model *CoreML::Model::Model(CoreML::Model *a1, const std::string *a2)
{
  uint64_t v4 = *(void *)(*((void *)CoreML::Model::Model(a1) + 1) + 16);
  if (!v4) {
    operator new();
  }
  uint64_t v5 = *(void *)(v4 + 104);
  if (!v5) {
    operator new();
  }
  uint64_t v6 = *(std::string **)(v5 + 48);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v6, a2);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;

  uint64_t v4 = *(void *)(*((void *)CoreML::Model::Model(a1) + 1) + 16);
  if (!v4) {
    operator new();
  }
  uint64_t v5 = *(void *)(v4 + 104);
  if (!v5) {
    operator new();
  }
  uint64_t v6 = *(std::string **)(v5 + 48);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v6, a2);
  return a1;
}

void sub_22433C178(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x10A1C4012F24C1ELL);
  *uint64_t v1 = &unk_26D779768;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void CoreML::Model::~Model(CoreML::Model *this)
{
  *(void *)this = &unk_26D779768;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_26D779768;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26D779768;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x22A614FA0);
}

void sub_22433C2E8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x10A1C4012F24C1ELL);
  *uint64_t v1 = &unk_26D779768;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void *CoreML::Model::Model(void *this, const CoreML::Model *a2)
{
  uint64_t v3 = *((void *)a2 + 1);
  uint64_t v2 = *((void *)a2 + 2);
  *this = &unk_26D779768;
  this[1] = v3;
  this[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void CoreML::Model::validateGeneric(CoreML::Model *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (const CoreML::Specification::ModelDescription *)*((unsigned int *)this + 6);
  if (!v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "Model specification version field missing or corrupt.");
    CoreML::Result::Result((_DWORD *)a2, 6);
    if ((SHIBYTE(v20[1]) & 0x80000000) == 0) {
      return;
    }
    BOOL v9 = v19;
LABEL_30:
    operator delete(v9);
    return;
  }
  if ((int)v4 < 7)
  {
    if (*((void *)this + 2)) {
      uint64_t v10 = (CoreML *)*((void *)this + 2);
    }
    else {
      uint64_t v10 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
    }
    CoreML::validateModelDescription(v10, v4, (CoreML::Result *)&v19);
    if (!CoreML::Result::good((CoreML::Result *)&v19)) {
      goto LABEL_27;
    }
    if (*((unsigned char *)this + 28))
    {
      if (*((int *)this + 6) <= 3)
      {
        std::to_string(&v17, 4);
        uint64_t v11 = std::string::insert(&v17, 0, "Model specification version for an updatable model must be '");
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v18.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        unint64_t v13 = std::string::append(&v18, "' or above.");
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        *(void *)&__p[16] = *((void *)&v13->__r_.__value_.__l + 2);
        *(_OWORD *)long long __p = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
        CoreML::Result::Result((_DWORD *)a2, 6);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        goto LABEL_28;
      }
      CoreML::validateCanModelBeUpdatable(this, (uint64_t)__p);
      size_t v19 = *(void **)__p;
      if (SHIBYTE(v21) < 0) {
        operator delete(v20[0]);
      }
      *(_OWORD *)BOOL v20 = *(_OWORD *)&__p[8];
      uint64_t v21 = v16;
    }
    if (CoreML::Result::good((CoreML::Result *)&v19))
    {
      CoreML::validateOptional(this, a2);
    }
    else
    {
LABEL_27:
      *(void *)a2 = v19;
      *(_OWORD *)(a2 + ++*(_DWORD *)(result + 8) = *(_OWORD *)v20;
      *(void *)(a2 + 24) = v21;
      v20[0] = 0;
      v20[1] = 0;
      uint64_t v21 = 0;
    }
LABEL_28:
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      return;
    }
    BOOL v9 = v20[0];
    goto LABEL_30;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20[1], (uint64_t)"The .mlmodel supplied is of version ", 36);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", intended for a newer version of Xcode. This version of Xcode supports model version ", 86);
  uint64_t v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" or earlier.", 12);
  std::stringbuf::str();
  CoreML::Result::Result((_DWORD *)a2, 7);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  size_t v19 = (void *)*MEMORY[0x263F8C2B8];
  long long v8 = *(void **)(MEMORY[0x263F8C2B8] + 72);
  *(void **)((char *)&v20[-1] + *((void *)v19 - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
  v20[1] = v8;
  uint64_t v21 = MEMORY[0x263F8C318] + 16;
  if (v23 < 0) {
    operator delete(v22);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22A614E30](&v24);
}

void sub_22433C7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,int a31,__int16 a32,char a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::Model::validate(CoreML::Model *this@<X0>, uint64_t a2@<X8>)
{
  CoreML::Model::validateGeneric(this, (uint64_t)&v8);
  if (!CoreML::Result::good((CoreML::Result *)&v8))
  {
    *(void *)a2 = v8;
    *(_OWORD *)(a2 + ++*(_DWORD *)(result + 8) = *(_OWORD *)__p;
    *(void *)(a2 + 24) = v10;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  int v5 = *((_DWORD *)this + 11);
  if (v5 > 599)
  {
    if (v5 > 899)
    {
      switch(v5)
      {
        case 2000:
          CoreML::validate<(MLModelType)2000>((uint64_t)this, a2);
          break;
        case 2001:
          CoreML::validate<(MLModelType)2001>((uint64_t)this, (_DWORD *)a2);
          break;
        case 2002:
          CoreML::validate<(MLModelType)2002>((uint64_t)this, a2);
          break;
        case 2003:
          CoreML::validate<(MLModelType)2003>((uint64_t)this, a2);
          break;
        case 2004:
          CoreML::validate<(MLModelType)2004>((uint64_t)this, a2);
          break;
        case 2005:
          CoreML::validate<(MLModelType)2005>((uint64_t)this, a2);
          break;
        case 2006:
          CoreML::validate<(MLModelType)2006>((uint64_t)this, a2);
          break;
        default:
          if (v5 != 900)
          {
            if (v5 != 3000) {
              goto LABEL_60;
            }
            goto LABEL_30;
          }
          CoreML::validate<(MLModelType)900>((CoreML::Result *)a2);
          break;
      }
    }
    else
    {
      switch(v5)
      {
        case 600:
          CoreML::validate<(MLModelType)600>((uint64_t)this, a2);
          break;
        case 601:
          CoreML::validate<(MLModelType)601>((uint64_t)this, a2);
          break;
        case 602:
          CoreML::validate<(MLModelType)602>((uint64_t)this, a2);
          break;
        case 603:
          CoreML::validate<(MLModelType)603>((uint64_t)this, a2);
          break;
        case 604:
          CoreML::validate<(MLModelType)604>((uint64_t)this, a2);
          break;
        case 606:
          CoreML::validate<(MLModelType)606>((uint64_t)this, a2);
          break;
        case 607:
          CoreML::validate<(MLModelType)607>((uint64_t)this, a2);
          break;
        case 609:
          CoreML::validate<(MLModelType)609>((uint64_t)this, a2);
          break;
        case 610:
          CoreML::validate<(MLModelType)610>((uint64_t)this, a2);
          break;
        default:
          goto LABEL_60;
      }
    }
  }
  else
  {
    if (v5 > 399)
    {
      if (v5 <= 499)
      {
        switch(v5)
        {
          case 400:
            CoreML::validate<(MLModelType)400>((uint64_t)this, a2);
            break;
          case 401:
            CoreML::validate<(MLModelType)401>((uint64_t)this, a2);
            break;
          case 402:
            CoreML::validate<(MLModelType)402>(this, (CoreML::Result *)a2);
            break;
          case 403:
            CoreML::validate<(MLModelType)403>((uint64_t)this, a2);
            break;
          case 404:
            CoreML::validate<(MLModelType)404>((uint64_t)this, a2);
            break;
          default:
            goto LABEL_60;
        }
        goto LABEL_8;
      }
      if (v5 <= 501)
      {
        if (v5 == 500) {
          CoreML::validate<(MLModelType)500>((uint64_t)this, a2);
        }
        else {
          CoreML::validate<(MLModelType)501>((uint64_t)this, a2);
        }
        goto LABEL_8;
      }
      switch(v5)
      {
        case 502:
LABEL_30:
          CoreML::Result::Result((CoreML::Result *)a2);
          goto LABEL_8;
        case 555:
          CoreML::validate<(MLModelType)555>((uint64_t)this, a2);
          goto LABEL_8;
        case 556:
          CoreML::validate<(MLModelType)556>((uint64_t)this, a2);
          goto LABEL_8;
      }
LABEL_60:
      std::string::basic_string[abi:ne180100]<0>(&v6, "Model did not specify a valid model-parameter type.");
      CoreML::Result::Result((_DWORD *)a2, 12);
      if (v7 < 0) {
        operator delete(v6);
      }
      goto LABEL_8;
    }
    if (v5 <= 299)
    {
      switch(v5)
      {
        case 200:
          CoreML::validate<(MLModelType)200>((uint64_t)this, a2);
          goto LABEL_8;
        case 201:
          CoreML::validate<(MLModelType)201>(this, a2);
          goto LABEL_8;
        case 202:
          CoreML::validate<(MLModelType)202>(this, a2);
          goto LABEL_8;
      }
      goto LABEL_60;
    }
    switch(v5)
    {
      case 300:
        CoreML::validate<(MLModelType)300>((uint64_t)this, a2);
        break;
      case 301:
        CoreML::validate<(MLModelType)301>((uint64_t)this, a2);
        break;
      case 302:
        CoreML::validate<(MLModelType)302>(this, (CoreML::Result *)a2);
        break;
      case 303:
        CoreML::validate<(MLModelType)303>((uint64_t)this, a2);
        break;
      case 304:
        CoreML::validate<(MLModelType)304>((uint64_t)this, a2);
        break;
      default:
        goto LABEL_60;
    }
  }
LABEL_8:
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_22433CC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::Model::save(uint64_t a1@<X0>, CoreML::Specification::Model *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)((char *)a2 + *(void *)(*(void *)a2 - 24) + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "unable to open file for write");
    CoreML::Result::Result((_DWORD *)a3, 3);
    if ((v14 & 0x80000000) == 0) {
      return;
    }
    uint64_t v4 = (void *)v13[0];
    goto LABEL_12;
  }
  CoreML::downgradeSpecificationVersion(*(void *)(a1 + 8), a2);
  CoreML::Model::validate(*(CoreML::Model **)(a1 + 8), (uint64_t)&v8);
  if (!CoreML::Result::good((CoreML::Result *)&v8))
  {
    *(void *)a3 = v8;
    *(_OWORD *)(a3 + ++*(_DWORD *)(result + 8) = *(_OWORD *)v9;
    *(void *)(a3 + 24) = v10;
    return;
  }
  char v7 = *(_tc_google::protobuf::MessageLite **)(a1 + 8);
  _tc_google::protobuf::io::OstreamOutputStream::OstreamOutputStream(v13, a2, 0xFFFFFFFFLL);
  if (_tc_google::protobuf::MessageLite::SerializeToZeroCopyStream(v7, (_tc_google::protobuf::io::ZeroCopyOutputStream *)v13))
  {
    CoreML::Result::Result((CoreML::Result *)a3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "unable to serialize object");
    CoreML::Result::Result((_DWORD *)a3, 4);
    if (v12 < 0) {
      operator delete(__p);
    }
  }
  _tc_google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((_tc_google::protobuf::io::OstreamOutputStream *)v13);
  if (SHIBYTE(v10) < 0)
  {
    uint64_t v4 = v9[0];
LABEL_12:
    operator delete(v4);
  }
}

void sub_22433CE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _tc_google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((_tc_google::protobuf::io::OstreamOutputStream *)&a22);
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t CoreML::Model::save@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v7[19] = *MEMORY[0x263EF8340];
  std::ofstream::basic_ofstream(&v5);
  CoreML::Model::save(a1, (CoreML::Specification::Model *)&v5, a2);
  uint64_t v5 = *MEMORY[0x263F8C2B0];
  *(uint64_t *)((char *)&v5 + *(void *)(v5 - 24)) = *(void *)(MEMORY[0x263F8C2B0] + 24);
  MEMORY[0x22A614850](&v6);
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](v7);
}

void sub_22433CFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CoreML::Model::addInput(uint64_t a1, const std::string *a2, CoreML::FeatureType *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 16);
  if (!v5) {
    operator new();
  }
  uint64_t v6 = (std::string *)*((void *)_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v5 + 16)
                      + 2);
  if (v6 != (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v6, a2);
    CoreML::FeatureType::allocateCopy(a3);
  }
  _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
}

void sub_22433D0E0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

void CoreML::Model::addOutput(uint64_t a1, const std::string *a2, CoreML::FeatureType *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 16);
  if (!v5) {
    operator new();
  }
  uint64_t v6 = (std::string *)*((void *)_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v5 + 40)
                      + 2);
  if (v6 != (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v6, a2);
    CoreML::FeatureType::allocateCopy(a3);
  }
  _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
}

void sub_22433D1F8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::Model::enforceTypeInvariant@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v6 = (uint64_t *)*a1;
  char v7 = (uint64_t *)a1[1];
  while (v6 != v7)
  {
    if (CoreML::FeatureType::operator==(a2, v6))
    {
      return CoreML::Result::Result(a3);
    }
    v6 += 2;
  }
  return (CoreML::Result *)CoreML::Result::featureTypeInvariantError(a1, (CoreML::FeatureType *)a2, (uint64_t)a3);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6CoreML13Specification5ModelENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x48uLL);
  __n128 result = _ZNSt3__120__shared_ptr_emplaceIN6CoreML13Specification5ModelENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_22433D2F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6CoreML13Specification5ModelENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D7594F8;
  CoreML::Specification::Model::Model((CoreML::Specification::Model *)(a1 + 3));
  return a1;
}

void sub_22433D350(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::column_metadata::setup(uint64_t a1, int a2, std::string *__str, uint64_t *a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  std::string::operator=((std::string *)a1, __str);
  unsigned int type = turi::sarray<turi::flexible_type>::get_type(*a4);
  *(unsigned char *)(a1 + 2++*(_DWORD *)(result + 8) = type;
  *(_DWORD *)(a1 + 24) = turi::ml_data_internal::choose_column_mode((uint64_t)__str, type, a5);
  operator new();
}

void sub_22433DA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (*(char *)(v23 - 57) < 0) {
    operator delete(*(void **)(v23 - 80));
  }
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::ml_data_internal::column_indexer>::reset[abi:ne180100]<turi::ml_data_internal::column_indexer,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::ml_data_internal::column_indexer>::shared_ptr[abi:ne180100]<turi::ml_data_internal::column_indexer,void>(&v2, a2);
}

void std::shared_ptr<turi::ml_data_internal::column_statistics>::reset[abi:ne180100]<turi::ml_data_internal::column_statistics,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::ml_data_internal::column_statistics>::shared_ptr[abi:ne180100]<turi::ml_data_internal::column_statistics,void>(&v2, a2);
}

uint64_t turi::ml_data_internal::column_metadata::set_training_index_size(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 24);
  BOOL v2 = v1 > 6;
  int v3 = (1 << v1) & 0x5A;
  if (v2 || v3 == 0) {
    uint64_t v5 = *(void *)(this + 72);
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(this + 32) + 104);
  }
  *(void *)(this + 64) = v5;
  return this;
}

uint64_t turi::ml_data_internal::column_metadata::set_training_index_offset(uint64_t this, uint64_t a2)
{
  *(void *)(this + 104) = a2;
  return this;
}

void turi::ml_data_internal::column_metadata::save(turi::ml_data_internal::column_metadata *this, turi::oarchive *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = 3;
  turi::flexible_type_converter<unsigned long>::set((atomic_ullong **)&v2, (uint64_t)v4);
  *(void *)&v6[5] = *(void *)&v4[5];
  *(void *)uint64_t v6 = *(void *)v4;
  v6[12] = v4[12];
  int v5 = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)v7, "version", &v5);
  turi::flexible_type_converter<std::string>::set((uint64_t)&v3);
}

void sub_22433DFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned int a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,unsigned int a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,unsigned int a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  for (uint64_t i = 728; i != -104; i -= 104)
    std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~pair(v64 + i);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a14);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a24);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a34);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a44);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a54);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a64);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&STACK[0x208]);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::column_metadata::load(turi::ml_data_internal::column_metadata *this, turi::iarchive *a2)
{
  v20[0] = 0;
  v20[1] = 0;
  size_t v19 = v20;
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)&v19, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "version");
  uint64_t v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v19, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v5 = v4;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v4) {
      goto LABEL_3;
    }
LABEL_6:
    unint64_t v7 = 1;
    goto LABEL_7;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v5) {
    goto LABEL_6;
  }
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(&__p, "version");
  uint64_t v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)&__p.__r_.__value_.__l.__data_);
  unint64_t v7 = turi::variant_converter<unsigned long,void>::get((uint64_t)v16, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(v16, "name");
  uint64_t v8 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)v16);
  turi::variant_converter<std::string,void>::get(v8, &__p);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
  *(std::string *)this = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "mode");
  BOOL v9 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)&__p.__r_.__value_.__l.__data_);
  *((_DWORD *)this + 6) = turi::variant_converter<turi::ml_column_mode,void>::get((uint64_t)v16, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "original_column_type");
  uint64_t v10 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)&__p.__r_.__value_.__l.__data_);
  *((unsigned char *)this + 2++*(_DWORD *)(result + 8) = turi::variant_converter<turi::flex_type_enum,void>::get((uint64_t)v16, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "index_size_at_train_time");
  uint64_t v11 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)&__p.__r_.__value_.__l.__data_);
  *((void *)this + ++*(_DWORD *)(result + 8) = turi::variant_converter<unsigned long,void>::get((uint64_t)v16, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "column_data_size_if_fixed");
  char v12 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)&__p.__r_.__value_.__l.__data_);
  *((void *)this + 9) = turi::variant_converter<unsigned long,void>::get((uint64_t)v16, v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7 < 2)
  {
    *((void *)this + 13) = -1;
LABEL_28:
    *((void *)this + 11) = *((void *)this + 10);
    goto LABEL_29;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "global_index_offset_at_train_time");
  unint64_t v13 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)&__p.__r_.__value_.__l.__data_);
  *((void *)this + 13) = turi::variant_converter<unsigned long,void>::get((uint64_t)v16, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7 < 3) {
    goto LABEL_28;
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "nd_array_size");
  char v14 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v19, (const void **)v16);
  turi::variant_converter<std::vector<unsigned long>,void>::get(v14, &__p);
  BOOL v15 = (void *)*((void *)this + 10);
  if (v15)
  {
    *((void *)this + 11) = v15;
    operator delete(v15);
    *((void *)this + 1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
    *((void *)this + 11) = 0;
    *((void *)this + 12) = 0;
  }
  *(std::string *)((char *)this + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = __p;
  memset(&__p, 0, sizeof(__p));
  if (v17 < 0) {
    operator delete(v16[0]);
  }
LABEL_29:
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_indexer>,false,void>::exec((uint64_t)a2, (void *)this + 4);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_statistics>,false,void>::exec((uint64_t)a2, (void *)this + 6);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v19, v20[0]);
}

void sub_22433E40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,char *a24)
{
}

void turi::ml_data_internal::row_metadata::setup(unsigned __int8 *a1, uint64_t **a2, unsigned int a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 == v5)
  {
    *a1 = 0;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100]((uint64_t *)a1 + 7);
    *(_WORD *)(a1 + 1) = 256;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 5) = 0;
    *((void *)a1 + 6) = 0;
  }
  else
  {
    *a1 = a3;
    uint64_t v8 = (uint64_t)(a1 + 56);
    if (a1 + 56 != (unsigned __int8 *)a2)
    {
      std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*>(v8, v5, v6, ((char *)v6 - (char *)v5) >> 4);
      a3 = *a1;
    }
    uint64_t v9 = *((void *)a1 + 7);
    uint64_t v10 = *((void *)a1 + 8);
    unint64_t v11 = (v10 - v9) >> 4;
    *((void *)a1 + 5) = v11 - a3;
    *((void *)a1 + 6) = v11;
    if (a3 && (unsigned int v12 = *(_DWORD *)(*(void *)(v10 - 16) + 24), v12 <= 6)) {
      unsigned int v13 = (0x5Au >> v12) & 1;
    }
    else {
      LOBYTE(v13) = 0;
    }
    a1[1] = v13;
    *((void *)a1 + 1) = 0;
    a1[2] = 1;
    if (v10 != v9)
    {
      uint64_t v14 = 0;
      if (v11 <= 1) {
        unint64_t v11 = 1;
      }
      while (1)
      {
        uint64_t v15 = *(void *)(*(void *)v9 + 72);
        if (v15 == -1) {
          break;
        }
        v14 += v15;
        *((void *)a1 + 1) = v14;
        v9 += 16;
        if (!--v11) {
          return;
        }
      }
      a1[2] = 0;
      *((void *)a1 + 1) = 0;
    }
  }
}

void std::shared_ptr<turi::ml_data_internal::column_indexer>::shared_ptr[abi:ne180100]<turi::ml_data_internal::column_indexer,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22433E604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<turi::ml_data_internal::column_indexer>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::ml_data_internal::column_indexer *,std::shared_ptr<turi::ml_data_internal::column_indexer>::__shared_ptr_default_delete<turi::ml_data_internal::column_indexer,turi::ml_data_internal::column_indexer>,std::allocator<turi::ml_data_internal::column_indexer>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<turi::ml_data_internal::column_indexer>::operator()[abi:ne180100](a1 + 24, *(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::ml_data_internal::column_indexer *,std::shared_ptr<turi::ml_data_internal::column_indexer>::__shared_ptr_default_delete<turi::ml_data_internal::column_indexer,turi::ml_data_internal::column_indexer>,std::allocator<turi::ml_data_internal::column_indexer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<turi::ml_data_internal::column_indexer>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    turi::mutex::~mutex((pthread_mutex_t *)(a2 + 112));
    uint64_t v4 = (void **)(a2 + 80);
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(a2 + 56);
    std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(a2 + 32);
    std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    return MEMORY[0x22A614FA0](a2, 0x1032C406B2B9BBDLL);
  }
  return result;
}

void std::shared_ptr<turi::ml_data_internal::column_statistics>::shared_ptr[abi:ne180100]<turi::ml_data_internal::column_statistics,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22433E774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<turi::ml_data_internal::column_statistics>::reset[abi:ne180100]((turi::ml_data_internal::column_statistics **)va, 0);
  _Unwind_Resume(a1);
}

turi::ml_data_internal::column_statistics *std::__shared_ptr_pointer<turi::ml_data_internal::column_statistics *,std::shared_ptr<turi::ml_data_internal::column_statistics>::__shared_ptr_default_delete<turi::ml_data_internal::column_statistics,turi::ml_data_internal::column_statistics>,std::allocator<turi::ml_data_internal::column_statistics>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(turi::ml_data_internal::column_statistics **)(a1 + 24);
  if (result)
  {
    turi::ml_data_internal::column_statistics::~column_statistics(result);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::ml_data_internal::column_statistics *,std::shared_ptr<turi::ml_data_internal::column_statistics>::__shared_ptr_default_delete<turi::ml_data_internal::column_statistics,turi::ml_data_internal::column_statistics>,std::allocator<turi::ml_data_internal::column_statistics>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void turi::ml_data_internal::column_statistics::~column_statistics(turi::ml_data_internal::column_statistics *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 296));
  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {
    *((void *)this + 33) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 29);
  if (v3)
  {
    *((void *)this + 3CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v3;
    operator delete(v3);
  }
  for (uint64_t i = 231; i != 167; --i)
    turi::simple_spinlock::~simple_spinlock((turi::ml_data_internal::column_statistics *)((char *)this + i));
  uint64_t v8 = (void **)((char *)this + 144);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)((char *)this + 120);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v5 = (void *)*((void *)this + 12);
  if (v5)
  {
    *((void *)this + 13) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    *((void *)this + ++*(_DWORD *)(result + 8) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    *((void *)this + 5) = v7;
    operator delete(v7);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

turi::ml_data_internal::column_statistics *std::unique_ptr<turi::ml_data_internal::column_statistics>::reset[abi:ne180100](turi::ml_data_internal::column_statistics **a1, turi::ml_data_internal::column_statistics *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::ml_data_internal::column_statistics::~column_statistics(result);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

uint64_t turi::flexible_type_converter<turi::ml_column_mode>::set@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  return turi::flexible_type_internals::ft_converter<13>::set<turi::ml_column_mode>(a2, a1);
}

void sub_22433E968(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t turi::flexible_type_internals::ft_converter<13>::set<turi::ml_column_mode>(uint64_t result, int *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  switch(*(unsigned char *)(result + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          uint64_t v8 = (void *)v7[1];
          if (v8)
          {
            _OWORD v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          uint64_t v16 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v16);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          uint64_t v16 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v16);
LABEL_18:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          unsigned int v13 = (void *)v12[6];
          if (v13)
          {
            v12[7] = (atomic_ullong)v13;
            operator delete(v13);
          }
          uint64_t v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = (atomic_ullong)v14;
            operator delete(v14);
          }
          uint64_t v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          atomic_ullong *volatile v5 = v12;
          unsigned int v11 = 2071181815;
LABEL_31:
          uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_32:
          uint64_t result = MEMORY[0x22A614FA0](v5, v6);
        }
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v2 + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(v2 + 12) = 0;
  *(void *)uint64_t v2 = v3;
  return result;
}

uint64_t turi::flexible_type_converter<turi::flex_type_enum>::set@<X0>(char *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  return turi::flexible_type_internals::ft_converter<13>::set<turi::flex_type_enum>(a2, a1);
}

void sub_22433EC84(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t turi::flexible_type_internals::ft_converter<13>::set<turi::flex_type_enum>(uint64_t result, char *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  switch(*(unsigned char *)(result + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          uint64_t v8 = (void *)v7[1];
          if (v8)
          {
            _OWORD v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          uint64_t v16 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v16);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          uint64_t v16 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v16);
LABEL_18:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)result, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)result;
        if (*(void *)result)
        {
          unsigned int v13 = (void *)v12[6];
          if (v13)
          {
            v12[7] = (atomic_ullong)v13;
            operator delete(v13);
          }
          uint64_t v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = (atomic_ullong)v14;
            operator delete(v14);
          }
          uint64_t v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          atomic_ullong *volatile v5 = v12;
          unsigned int v11 = 2071181815;
LABEL_31:
          uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_32:
          uint64_t result = MEMORY[0x22A614FA0](v5, v6);
        }
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v2 + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(v2 + 12) = 0;
  *(void *)uint64_t v2 = v3;
  return result;
}

void turi::flexible_type_converter<std::vector<unsigned long>>::set(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_converter<12>::set<std::vector<unsigned long>>(a2, a1);
}

void sub_22433EFA0(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + ++*(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<12>::set<std::vector<unsigned long>>(uint64_t a1, uint64_t *a2)
{
  v49[2] = *(void ***)MEMORY[0x263EF8340];
  std::vector<turi::flexible_type>::vector(&v46, (a2[1] - *a2) >> 3);
  if (v47 != v46)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = *a2;
    do
    {
      unint64_t v45 = 0;
      unint64_t v45 = *(atomic_ullong **)(v6 + 8 * v5);
      memset(v49, 0, 13);
      turi::flexible_type_internals::ft_resolver<3>::set<unsigned long>((uint64_t)v49, &v45);
      uint64_t v7 = v46 + v4;
      if ((void ***)(v46 + v4) == v49)
      {
        switch(BYTE4(v49[1]))
        {
          case 2:
            if (atomic_fetch_add((atomic_ullong *volatile)v49[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            uint64_t v21 = v49[0];
            if (!v49[0]) {
              break;
            }
            if (*((char *)v49[0] + 31) < 0) {
              operator delete(v49[0][1]);
            }
            double v22 = v21;
            uint64_t v23 = 0x1012C404EF22A49;
            goto LABEL_71;
          case 3:
            if (atomic_fetch_add((atomic_ullong *volatile)v49[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            uint64_t v24 = v49[0];
            if (!v49[0]) {
              break;
            }
            double v25 = v49[0][1];
            if (v25)
            {
              v49[0][2] = v25;
              operator delete(v25);
            }
            double v22 = v24;
            uint64_t v23 = 0x1080C409938AC02;
            goto LABEL_71;
          case 4:
            if (atomic_fetch_add((atomic_ullong *volatile)v49[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            double v26 = v49[0];
            if (!v49[0]) {
              break;
            }
            double v48 = v49[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v48);
            goto LABEL_57;
          case 5:
            if (atomic_fetch_add((atomic_ullong *volatile)v49[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            double v26 = v49[0];
            if (!v49[0]) {
              break;
            }
            double v48 = v49[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v48);
LABEL_57:
            double v22 = v26;
            uint64_t v23 = 0x1020C405E66F15BLL;
            goto LABEL_71;
          case 8:
            if (atomic_fetch_add((atomic_ullong *volatile)v49[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            unint64_t v27 = v49[0];
            if (!v49[0]) {
              break;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v49[0] + 2);
            double v22 = v27;
            unsigned int v28 = -235920773;
            goto LABEL_70;
          case 9:
            if (atomic_fetch_add((atomic_ullong *volatile)v49[0], 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            unint64_t v29 = v49[0];
            if (!v49[0]) {
              break;
            }
            uint64_t v30 = v49[0][6];
            if (v30)
            {
              v49[0][7] = v30;
              operator delete(v30);
            }
            unint64_t v31 = v29[3];
            if (v31)
            {
              v29[4] = v31;
              operator delete(v31);
            }
            unint64_t v32 = (std::__shared_weak_count *)v29[2];
            if (v32) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v32);
            }
            double v22 = v29;
            unsigned int v28 = 2071181815;
LABEL_70:
            uint64_t v23 = v28 | 0x1030C4000000000;
LABEL_71:
            MEMORY[0x22A614FA0](v22, v23);
            break;
          default:
            break;
        }
      }
      else
      {
        switch(*(unsigned char *)(v7 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_37;
            }
            atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)v7;
            if (!*(void *)v7) {
              goto LABEL_36;
            }
            if (*((char *)v8 + 31) < 0) {
              operator delete((void *)v8[1]);
            }
            atomic_ullong *volatile v9 = v8;
            uint64_t v10 = 0x1012C404EF22A49;
            goto LABEL_35;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_37;
            }
            atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)v7;
            if (!*(void *)v7) {
              goto LABEL_36;
            }
            std::string v18 = (void *)v17[1];
            if (v18)
            {
              v17[2] = (atomic_ullong)v18;
              operator delete(v18);
            }
            atomic_ullong *volatile v9 = v17;
            uint64_t v10 = 0x1080C409938AC02;
            goto LABEL_35;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_37;
            }
            atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)v7;
            if (!*(void *)v7) {
              goto LABEL_36;
            }
            double v48 = (void **)(v11 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v48);
            goto LABEL_30;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_37;
            }
            atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)v7;
            if (!*(void *)v7) {
              goto LABEL_36;
            }
            double v48 = (void **)(v11 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v48);
LABEL_30:
            atomic_ullong *volatile v9 = v11;
            uint64_t v10 = 0x1020C405E66F15BLL;
            goto LABEL_35;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_37;
            }
            atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)v7;
            if (!*(void *)v7) {
              goto LABEL_36;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v19 + 2);
            atomic_ullong *volatile v9 = v19;
            unsigned int v16 = -235920773;
            goto LABEL_34;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v7, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_37;
            }
            atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v7;
            if (!*(void *)v7) {
              goto LABEL_36;
            }
            unsigned int v13 = (void *)v12[6];
            if (v13)
            {
              v12[7] = (atomic_ullong)v13;
              operator delete(v13);
            }
            uint64_t v14 = (void *)v12[3];
            if (v14)
            {
              v12[4] = (atomic_ullong)v14;
              operator delete(v14);
            }
            uint64_t v15 = (std::__shared_weak_count *)v12[2];
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            atomic_ullong *volatile v9 = v12;
            unsigned int v16 = 2071181815;
LABEL_34:
            uint64_t v10 = v16 | 0x1030C4000000000;
LABEL_35:
            MEMORY[0x22A614FA0](v9, v10);
LABEL_36:
            *(void *)uint64_t v7 = 0;
LABEL_37:
            BOOL v20 = v49[0];
            *(void ***)(v7 + 5) = *(void ***)((char *)v49 + 5);
            *(void *)uint64_t v7 = v20;
            *(unsigned char *)(v7 + 12) = BYTE4(v49[1]);
            break;
          default:
            goto LABEL_37;
        }
      }
      ++v5;
      v4 += 16;
    }
    while (v5 < (v47 - v46) >> 4);
  }
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_105;
      }
      atomic_ullong *volatile v33 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_104;
      }
      if (*((char *)v33 + 31) < 0) {
        operator delete((void *)v33[1]);
      }
      atomic_ullong *volatile v34 = v33;
      uint64_t v35 = 0x1012C404EF22A49;
      goto LABEL_103;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_105;
      }
      atomic_ullong *volatile v42 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_104;
      }
      unint64_t v43 = (void *)v42[1];
      if (v43)
      {
        v42[2] = (atomic_ullong)v43;
        operator delete(v43);
      }
      atomic_ullong *volatile v34 = v42;
      uint64_t v35 = 0x1080C409938AC02;
      goto LABEL_103;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_105;
      }
      atomic_ullong *volatile v36 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_104;
      }
      v49[0] = (void **)(v36 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v49);
      goto LABEL_98;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_105;
      }
      atomic_ullong *volatile v36 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_104;
      }
      v49[0] = (void **)(v36 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v49);
LABEL_98:
      atomic_ullong *volatile v34 = v36;
      uint64_t v35 = 0x1020C405E66F15BLL;
      goto LABEL_103;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_105;
      }
      atomic_ullong *volatile v44 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_104;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v44 + 2);
      atomic_ullong *volatile v34 = v44;
      unsigned int v41 = -235920773;
      goto LABEL_102;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_105;
      }
      atomic_ullong *volatile v37 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_104;
      }
      uint64_t v38 = (void *)v37[6];
      if (v38)
      {
        v37[7] = (atomic_ullong)v38;
        operator delete(v38);
      }
      unint64_t v39 = (void *)v37[3];
      if (v39)
      {
        v37[4] = (atomic_ullong)v39;
        operator delete(v39);
      }
      uint64_t v40 = (std::__shared_weak_count *)v37[2];
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      atomic_ullong *volatile v34 = v37;
      unsigned int v41 = 2071181815;
LABEL_102:
      uint64_t v35 = v41 | 0x1030C4000000000;
LABEL_103:
      MEMORY[0x22A614FA0](v34, v35);
LABEL_104:
      *(void *)a1 = 0;
LABEL_105:
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + ++*(_DWORD *)(result + 8) = 0;
      *(unsigned char *)(a1 + 12) = 4;
      operator new();
    default:
      goto LABEL_105;
  }
}

void sub_22433FA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  MEMORY[0x22A614FA0](v16, 0x1012C404EF22A49);
  a16 = (void **)&a11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_resolver<3>::set<unsigned long>(uint64_t a1, atomic_ullong **a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  char v17 = 0;
  int v16 = 0;
  uint64_t v15 = *a2;
  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>(a1, &v15);
  switch(v17)
  {
    case 2:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = v15;
        if (v15)
        {
          if (*((char *)v15 + 31) < 0) {
            operator delete((void *)v15[1]);
          }
          uint64_t v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v5 = v15;
        if (v15)
        {
          uint64_t v6 = (void *)v15[1];
          if (v6)
          {
            void v15[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = v15;
        if (v15)
        {
          uint64_t v14 = (void **)(v15 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = v15;
        if (v15)
        {
          uint64_t v14 = (void **)(v15 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          uint64_t v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v13 = v15;
        if (v15)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v15 + 2);
          uint64_t v3 = v13;
          unsigned int v12 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = v15;
        if (v15)
        {
          atomic_ullong *volatile v9 = (void *)v15[6];
          if (v9)
          {
            v15[7] = (atomic_ullong)v9;
            operator delete(v9);
          }
          uint64_t v10 = (void *)v8[3];
          if (v10)
          {
            v8[4] = (atomic_ullong)v10;
            operator delete(v10);
          }
          atomic_ullong *volatile v11 = (std::__shared_weak_count *)v8[2];
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          uint64_t v3 = v8;
          unsigned int v12 = 2071181815;
LABEL_31:
          uint64_t v4 = v12 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      return;
  }
}

void sub_22433FE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *volatile a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      turi::gl_sarray::clip(&a10);
      break;
    case 3:
      turi::gl_sarray::clip(&a10);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 8:
      turi::gl_sarray::clip(&a10);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

char *turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_data_internal::column_indexer>,false,void>::exec(uint64_t a1, turi::ml_data_internal::column_indexer **a2)
{
  if (*a2)
  {
    if (*(void *)a1)
    {
      std::ostream::write();
    }
    else
    {
      unint64_t v5 = *(void *)(a1 + 40);
      if (*(void *)(a1 + 32) + 1 > v5)
      {
        size_t v11 = 2 * v5 + 2;
        *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v11;
        unsigned int v12 = *(void **)(a1 + 16);
        if (v12)
        {
          uint64_t v6 = (unsigned char *)*v12;
          size_t v13 = v12[1] - *v12;
          BOOL v14 = v11 >= v13;
          std::vector<char>::size_type v15 = v11 - v13;
          if (v15 != 0 && v14)
          {
            std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v15);
            uint64_t v6 = **(unsigned char ***)(a1 + 16);
          }
          else if (!v14)
          {
            v12[1] = &v6[v11];
          }
        }
        else
        {
          uint64_t v6 = malloc_type_realloc(*(void **)(a1 + 24), v11, 0xF6EA6B1uLL);
        }
        *(void *)(a1 + 24) = v6;
      }
      else
      {
        uint64_t v6 = *(unsigned char **)(a1 + 24);
      }
      v6[(*(void *)(a1 + 32))++] = 1;
    }
    uint64_t v7 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::type();
    if (*(void *)a1)
    {
      std::ostream::write();
    }
    else
    {
      unint64_t v8 = *(void *)(a1 + 40);
      if (*(void *)(a1 + 32) + 8 > v8)
      {
        uint64_t v26 = v7;
        size_t v16 = 2 * v8 + 16;
        *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v16;
        char v17 = *(char ***)(a1 + 16);
        if (v17)
        {
          atomic_ullong *volatile v9 = *v17;
          size_t v18 = v17[1] - *v17;
          BOOL v19 = v16 >= v18;
          std::vector<char>::size_type v20 = v16 - v18;
          if (v20 != 0 && v19)
          {
            std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v20);
            atomic_ullong *volatile v9 = **(char ***)(a1 + 16);
          }
          else if (!v19)
          {
            v17[1] = &v9[v16];
          }
        }
        else
        {
          atomic_ullong *volatile v9 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v16, 0xF6EA6B1uLL);
        }
        *(void *)(a1 + 24) = v9;
        uint64_t v7 = v26;
      }
      else
      {
        atomic_ullong *volatile v9 = *(char **)(a1 + 24);
      }
      *(void *)&v9[*(void *)(a1 + 32)] = v7;
      *(void *)(a1 + 32) += 8;
    }
    return turi::ml_data_internal::column_indexer::save_impl(*a2, (turi::oarchive *)a1);
  }
  else if (*(void *)a1)
  {
    return (char *)std::ostream::write();
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 1 > v10)
    {
      size_t v21 = 2 * v10 + 2;
      *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v21;
      double v22 = *(char ***)(a1 + 16);
      if (v22)
      {
        uint64_t result = *v22;
        size_t v23 = v22[1] - *v22;
        BOOL v24 = v21 >= v23;
        std::vector<char>::size_type v25 = v21 - v23;
        if (v25 != 0 && v24)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v25);
          uint64_t result = **(char ***)(a1 + 16);
        }
        else if (!v24)
        {
          v22[1] = &result[v21];
        }
      }
      else
      {
        uint64_t result = (char *)malloc_type_realloc(*(void **)(a1 + 24), v21, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(char **)(a1 + 24);
    }
    result[(*(void *)(a1 + 32))++] = 0;
  }
  return result;
}

unsigned char *turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_data_internal::column_statistics>,false,void>::exec(uint64_t a1, const void ***a2)
{
  if (*a2)
  {
    if (*(void *)a1)
    {
      std::ostream::write();
    }
    else
    {
      unint64_t v5 = *(void *)(a1 + 40);
      if (*(void *)(a1 + 32) + 1 > v5)
      {
        size_t v10 = 2 * v5 + 2;
        *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v10;
        size_t v11 = *(void **)(a1 + 16);
        if (v11)
        {
          uint64_t v6 = (unsigned char *)*v11;
          size_t v12 = v11[1] - *v11;
          BOOL v13 = v10 >= v12;
          std::vector<char>::size_type v14 = v10 - v12;
          if (v14 != 0 && v13)
          {
            std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
            uint64_t v6 = **(unsigned char ***)(a1 + 16);
          }
          else if (!v13)
          {
            v11[1] = &v6[v10];
          }
        }
        else
        {
          uint64_t v6 = malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
        }
        *(void *)(a1 + 24) = v6;
      }
      else
      {
        uint64_t v6 = *(unsigned char **)(a1 + 24);
      }
      v6[(*(void *)(a1 + 32))++] = 1;
    }
    if (*(void *)a1)
    {
      std::ostream::write();
    }
    else
    {
      unint64_t v7 = *(void *)(a1 + 40);
      if (*(void *)(a1 + 32) + 8 > v7)
      {
        size_t v15 = 2 * v7 + 16;
        *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v15;
        size_t v16 = *(char ***)(a1 + 16);
        if (v16)
        {
          unint64_t v8 = *v16;
          size_t v17 = v16[1] - *v16;
          BOOL v18 = v15 >= v17;
          std::vector<char>::size_type v19 = v15 - v17;
          if (v19 != 0 && v18)
          {
            std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v19);
            unint64_t v8 = **(char ***)(a1 + 16);
          }
          else if (!v18)
          {
            v16[1] = &v8[v15];
          }
        }
        else
        {
          unint64_t v8 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v15, 0xF6EA6B1uLL);
        }
        *(void *)(a1 + 24) = v8;
      }
      else
      {
        unint64_t v8 = *(char **)(a1 + 24);
      }
      *(void *)&v8[*(void *)(a1 + 32)] = 3;
      *(void *)(a1 + 32) += 8;
    }
    return turi::ml_data_internal::column_statistics::save_impl(*a2, (turi::oarchive *)a1);
  }
  else if (*(void *)a1)
  {
    return (unsigned char *)std::ostream::write();
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 1 > v9)
    {
      size_t v20 = 2 * v9 + 2;
      *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v20;
      size_t v21 = *(void **)(a1 + 16);
      if (v21)
      {
        uint64_t result = (unsigned char *)*v21;
        size_t v22 = v21[1] - *v21;
        BOOL v23 = v20 >= v22;
        std::vector<char>::size_type v24 = v20 - v22;
        if (v24 != 0 && v23)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v24);
          uint64_t result = **(unsigned char ***)(a1 + 16);
        }
        else if (!v23)
        {
          v21[1] = &result[v20];
        }
      }
      else
      {
        uint64_t result = malloc_type_realloc(*(void **)(a1 + 24), v20, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(unsigned char **)(a1 + 24);
    }
    result[(*(void *)(a1 + 32))++] = 0;
  }
  return result;
}

void sub_224340450(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_224340474(_Unwind_Exception *a1)
{
}

void turi::variant_converter<std::vector<unsigned long>,void>::get(int *a1@<X1>, void *a2@<X8>)
{
  void v20[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v20, 0, 13);
  uint64_t v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((atomic_ullong **)v3 != v20)
  {
    unint64_t v5 = *(atomic_ullong **)v3;
    *(atomic_ullong **)((char *)v20 + 5) = *(atomic_ullong **)(v3 + 5);
    v20[0] = v5;
    BYTE4(v20[1]) = *(unsigned char *)(v3 + 12);
    if (BYTE4(v20[1]) <= 9u && ((1 << SBYTE4(v20[1])) & 0x33C) != 0) {
      atomic_fetch_add(v20[0], 1uLL);
    }
  }
  turi::flexible_type_converter<std::vector<unsigned long>>::get((turi::flexible_type_internals *)v20, v4, a2);
  switch(BYTE4(v20[1]))
  {
    case 2:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v7 = v20[0];
        if (v20[0])
        {
          if (*((char *)v20[0] + 31) < 0) {
            operator delete(*((void **)v20[0] + 1));
          }
          unint64_t v8 = v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        size_t v16 = v20[0];
        if (v20[0])
        {
          size_t v17 = (void *)v20[0][1];
          if (v17)
          {
            v20[0][2] = (atomic_ullong)v17;
            operator delete(v17);
          }
          unint64_t v8 = v16;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        size_t v10 = v20[0];
        if (v20[0])
        {
          v19[0] = (void **)(v20[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v19);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        size_t v10 = v20[0];
        if (v20[0])
        {
          v19[0] = (void **)(v20[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v19);
LABEL_33:
          unint64_t v8 = v10;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        BOOL v18 = v20[0];
        if (v20[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v20[0] + 2);
          unint64_t v8 = v18;
          unsigned int v15 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v20[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        size_t v11 = v20[0];
        if (v20[0])
        {
          size_t v12 = (void *)v20[0][6];
          if (v12)
          {
            v20[0][7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          BOOL v13 = (void *)v11[3];
          if (v13)
          {
            v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          std::vector<char>::size_type v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          unint64_t v8 = v11;
          unsigned int v15 = 2071181815;
LABEL_37:
          uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_38:
          MEMORY[0x22A614FA0](v8, v9);
        }
      }
      break;
    default:
      return;
  }
}

void sub_224340714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 40);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      size_t v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v26 = *(void **)(v18 - 40);
      if (!v26) {
        goto LABEL_27;
      }
      unint64_t v27 = (void *)v26[1];
      if (v27)
      {
        v26[2] = v27;
        operator delete(v27);
      }
      size_t v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      BOOL v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      BOOL v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      size_t v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 40);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      size_t v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      std::vector<char>::size_type v24 = *(void **)(v18 - 40);
      if (!v24) {
        goto LABEL_27;
      }
      size_t v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

void turi::flexible_type_converter<std::vector<unsigned long>>::get(turi::flexible_type_internals *a1@<X1>, const char *a2@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  turi::flexible_type_internals::ft_converter<12>::get<std::vector<unsigned long>>(a3, a1, a2);
}

void sub_224340A28(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(_DWORD *)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<12>::get<std::vector<unsigned long>>(void *a1, turi::flexible_type_internals *this, const char *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  int v4 = *((unsigned __int8 *)this + 12);
  if (v4 == 3)
  {
    uint64_t v11 = *(void *)this;
    std::vector<unsigned long>::resize((uint64_t)a1, (uint64_t)(*(void *)(*(void *)this + 16) - *(void *)(*(void *)this + 8)) >> 3);
    uint64_t v12 = *(void *)(v11 + 8);
    if (*(void *)(v11 + 16) != v12)
    {
      unint64_t v13 = 0;
      std::vector<char>::size_type v14 = (void *)*a1;
      do
      {
        unint64_t v28 = 0;
        turi::flexible_type::flexible_type<double>((uint64_t)&v30, (void *)(v12 + 8 * v13));
        turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(&v28, (turi::flexible_type_internals *)&v30, v15);
        switch(v31)
        {
          case 2:
            if (atomic_fetch_add(v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              size_t v16 = v30;
              if (v30)
              {
                if (*((char *)v30 + 31) < 0) {
                  operator delete((void *)v30[1]);
                }
                size_t v17 = v16;
                uint64_t v18 = 0x1012C404EF22A49;
                goto LABEL_40;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unsigned int v25 = v30;
              if (v30)
              {
                uint64_t v26 = (void *)v30[1];
                if (v26)
                {
                  uint64_t v30[2] = (atomic_ullong)v26;
                  operator delete(v26);
                }
                size_t v17 = v25;
                uint64_t v18 = 0x1080C409938AC02;
                goto LABEL_40;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::vector<char>::size_type v19 = v30;
              if (v30)
              {
                unint64_t v29 = (void **)(v30 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v29);
                goto LABEL_35;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::vector<char>::size_type v19 = v30;
              if (v30)
              {
                unint64_t v29 = (void **)(v30 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v29);
LABEL_35:
                size_t v17 = v19;
                uint64_t v18 = 0x1020C405E66F15BLL;
                goto LABEL_40;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v27 = v30;
              if (v30)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)v30 + 2);
                size_t v17 = v27;
                unsigned int v24 = -235920773;
                goto LABEL_39;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v20 = v30;
              if (v30)
              {
                size_t v21 = (void *)v30[6];
                if (v21)
                {
                  v30[7] = (atomic_ullong)v21;
                  operator delete(v21);
                }
                uint64_t v22 = (void *)v20[3];
                if (v22)
                {
                  uint64_t v20[4] = (atomic_ullong)v22;
                  operator delete(v22);
                }
                BOOL v23 = (std::__shared_weak_count *)v20[2];
                if (v23) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
                }
                size_t v17 = v20;
                unsigned int v24 = 2071181815;
LABEL_39:
                uint64_t v18 = v24 | 0x1030C4000000000;
LABEL_40:
                MEMORY[0x22A614FA0](v17, v18);
              }
            }
            break;
          default:
            break;
        }
        *v14++ = v28;
        ++v13;
        uint64_t v12 = *(void *)(v11 + 8);
      }
      while (v13 < (*(void *)(v11 + 16) - v12) >> 3);
    }
  }
  else
  {
    if (v4 != 4) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"flex_list", a3);
    }
    uint64_t v5 = *(void *)this;
    std::vector<unsigned long>::resize((uint64_t)a1, (uint64_t)(*(void *)(*(void *)this + 16) - *(void *)(*(void *)this + 8)) >> 4);
    uint64_t v7 = *(void *)(v5 + 8);
    if (*(void *)(v5 + 16) != v7)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      size_t v10 = (void *)*a1;
      do
      {
        uint64_t v30 = 0;
        turi::flexible_type_internals::ft_converter<3>::get<unsigned long>((unint64_t *)&v30, (turi::flexible_type_internals *)(v7 + v8), v6);
        v10[v9++] = v30;
        uint64_t v7 = *(void *)(v5 + 8);
        v8 += 16;
      }
      while (v9 < (*(void *)(v5 + 16) - v7) >> 4);
    }
  }
}

void sub_224340D4C()
{
}

void sub_224340D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_ullong *volatile a12, int a13, char a14)
{
  switch(a14)
  {
    case 2:
      turi::gl_sarray::clip(&a12);
      break;
    case 3:
      turi::gl_sarray::clip(&a12);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>(&a12);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>(&a12);
      break;
    case 8:
      turi::gl_sarray::clip(&a12);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a12);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_converter<12>::get<std::vector<unsigned long>>(std::vector<unsigned long> &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 700, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<12>::get<std::vector<unsigned long>>(std::vector<unsigned long> &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224340F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_indexer>,false,void>::exec(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    int v5 = *(unsigned __int8 *)(v3 + v4);
    *(void *)(a1 + 24) = v4 + 1;
    if (v5) {
      operator new();
    }
  }
  else
  {
    std::istream::read();
  }
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_224341114(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1032C406B2B9BBDLL);
  _Unwind_Resume(a1);
}

turi::ml_data_internal::column_indexer *turi::ml_data_internal::column_indexer::column_indexer(turi::ml_data_internal::column_indexer *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  int v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 112), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  return this;
}

void sub_2243411C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v12;
  std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_statistics>,false,void>::exec(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    int v5 = *(unsigned __int8 *)(v3 + v4);
    *(void *)(a1 + 24) = v4 + 1;
    if (v5) {
      operator new();
    }
  }
  else
  {
    std::istream::read();
  }
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100]((void *)a1, v12);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::ml_data_internal::column_metadata>>,std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    unsigned int v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *>((uint64_t)&v20, a2, v15, v9);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::ml_data_internal::column_metadata>>,std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      std::vector<char>::size_type v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = v17;
}

void sub_2243414A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(_DWORD *)(result + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2243414AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(_DWORD *)(result + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::ml_data_internal::column_metadata>>,std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _OWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::ml_data_internal::column_metadata>>,std::shared_ptr<turi::ml_data_internal::column_metadata>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::ml_data_internal::column_metadata>>,std::shared_ptr<turi::ml_data_internal::column_metadata>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::shared_ptr<turi::fileio::file_ownership_handle>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (a2[1] - *a2) >> 4;
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v6)
    {
      size_t v10 = 2 * v6 + 16;
      *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v10;
      uint64_t v11 = *(uint64_t **)(a1 + 16);
      if (v11)
      {
        uint64_t result = *v11;
        size_t v12 = v11[1] - *v11;
        BOOL v13 = v10 >= v12;
        std::vector<char>::size_type v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = result + v10;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 3std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy((uint64_t)this + 8, *((void **)this + 2)) = v4;
    *(void *)(a1 + 32) += 8;
  }
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (uint64_t)turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false,void>::exec(a1, (turi::ml_data_internal::column_metadata **)(v7 + v8));
      ++v9;
      uint64_t v7 = *a2;
      v8 += 16;
    }
    while (v9 < (a2[1] - *a2) >> 4);
  }
  return result;
}

unsigned char *turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false,void>::exec(uint64_t a1, turi::ml_data_internal::column_metadata **a2)
{
  if (*a2)
  {
    if (*(void *)a1)
    {
      std::ostream::write();
    }
    else
    {
      unint64_t v5 = *(void *)(a1 + 40);
      if (*(void *)(a1 + 32) + 1 > v5)
      {
        size_t v8 = 2 * v5 + 2;
        *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v8;
        unint64_t v9 = *(void **)(a1 + 16);
        if (v9)
        {
          unint64_t v6 = (unsigned char *)*v9;
          size_t v10 = v9[1] - *v9;
          BOOL v11 = v8 >= v10;
          std::vector<char>::size_type v12 = v8 - v10;
          if (v12 != 0 && v11)
          {
            std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v12);
            unint64_t v6 = **(unsigned char ***)(a1 + 16);
          }
          else if (!v11)
          {
            v9[1] = &v6[v8];
          }
        }
        else
        {
          unint64_t v6 = malloc_type_realloc(*(void **)(a1 + 24), v8, 0xF6EA6B1uLL);
        }
        *(void *)(a1 + 24) = v6;
      }
      else
      {
        unint64_t v6 = *(unsigned char **)(a1 + 24);
      }
      v6[(*(void *)(a1 + 32))++] = 1;
    }
    turi::ml_data_internal::column_metadata::save(*a2, (turi::oarchive *)a1);
  }
  if (*(void *)a1) {
    return (unsigned char *)std::ostream::write();
  }
  unint64_t v7 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) + 1 > v7)
  {
    size_t v13 = 2 * v7 + 2;
    *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v13;
    std::vector<char>::size_type v14 = *(void **)(a1 + 16);
    if (v14)
    {
      uint64_t result = (unsigned char *)*v14;
      size_t v15 = v14[1] - *v14;
      BOOL v16 = v13 >= v15;
      std::vector<char>::size_type v17 = v13 - v15;
      if (v17 != 0 && v16)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v17);
        uint64_t result = **(unsigned char ***)(a1 + 16);
      }
      else if (!v16)
      {
        v14[1] = &result[v13];
      }
    }
    else
    {
      uint64_t result = malloc_type_realloc(*(void **)(a1 + 24), v13, 0xF6EA6B1uLL);
    }
    *(void *)(a1 + 24) = result;
  }
  else
  {
    uint64_t result = *(unsigned char **)(a1 + 24);
  }
  result[(*(void *)(a1 + 32))++] = 0;
  return result;
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false>::exec(uint64_t a1, uint64_t *a2)
{
  unint64_t v8 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unint64_t v8 = *(void *)(v4 + v5);
    *(void *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100](a2);
  std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::resize(a2, v8);
  if (v8)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v8; ++i)
    {
      turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false,void>::exec(a1, (void *)(*a2 + v6));
      v6 += 16;
    }
  }
}

void std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        unint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__append(a1, v5);
  }
}

void std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
    }
    else {
      size_t v13 = 0;
    }
    std::vector<char>::size_type v14 = v13;
    size_t v15 = &v13[16 * v10];
    std::vector<char>::size_type v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    BOOL v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(&v14);
  }
}

void sub_224341A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::ml_data_internal::column_metadata>>,std::reverse_iterator<std::shared_ptr<turi::ml_data_internal::column_metadata>*>,std::reverse_iterator<std::shared_ptr<turi::ml_data_internal::column_metadata>*>,std::reverse_iterator<std::shared_ptr<turi::ml_data_internal::column_metadata>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::ml_data_internal::column_metadata>>,std::reverse_iterator<std::shared_ptr<turi::ml_data_internal::column_metadata>*>,std::reverse_iterator<std::shared_ptr<turi::ml_data_internal::column_metadata>*>,std::reverse_iterator<std::shared_ptr<turi::ml_data_internal::column_metadata>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::ml_data_internal::column_metadata>>,std::reverse_iterator<std::shared_ptr<turi::ml_data_internal::column_metadata>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::ml_data_internal::column_metadata>>,std::reverse_iterator<std::shared_ptr<turi::ml_data_internal::column_metadata>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false,void>::exec(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    int v5 = *(unsigned __int8 *)(v3 + v4);
    *(void *)(a1 + 24) = v4 + 1;
    if (v5) {
      operator new();
    }
  }
  else
  {
    std::istream::read();
  }
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_224341C9C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1032C400C578614);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::ml_data_internal::column_metadata>::reset[abi:ne180100]<turi::ml_data_internal::column_metadata,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::ml_data_internal::column_metadata>::shared_ptr[abi:ne180100]<turi::ml_data_internal::column_metadata,void>(&v2, a2);
}

void std::shared_ptr<turi::ml_data_internal::column_metadata>::shared_ptr[abi:ne180100]<turi::ml_data_internal::column_metadata,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_224341D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<turi::ml_data_internal::column_metadata>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<turi::ml_data_internal::column_metadata *,std::shared_ptr<turi::ml_data_internal::column_metadata>::__shared_ptr_default_delete<turi::ml_data_internal::column_metadata,turi::ml_data_internal::column_metadata>,std::allocator<turi::ml_data_internal::column_metadata>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<turi::ml_data_internal::column_metadata *,std::shared_ptr<turi::ml_data_internal::column_metadata>::__shared_ptr_default_delete<turi::ml_data_internal::column_metadata,turi::ml_data_internal::column_metadata>,std::allocator<turi::ml_data_internal::column_metadata>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<turi::ml_data_internal::column_metadata>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 80);
    if (v3)
    {
      *(void *)(a2 + 8++*(_DWORD *)(result + 8) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 56);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    int v5 = *(std::__shared_weak_count **)(a2 + 40);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x22A614FA0);
  }
}

void turi::ml_data_internal::ml_data_block_manager::ml_data_block_manager(uint64_t a1, void *a2, long long *a3, uint64_t a4, uint64_t *a5)
{
  *(void *)a1 = *a2;
  uint64_t v9 = a2[1];
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  long long v10 = *a3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  *(void *)(a1 + 4++*(_DWORD *)(result + 8) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 32), *((const void **)a3 + 2), *((void *)a3 + 3), (uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 3);
  long long v11 = *(long long *)((char *)a3 + 40);
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = v11;
  *(void *)(a1 + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = 0;
  std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*>((void *)(a1 + 72), *((void **)a3 + 7), *((void **)a3 + 8), (uint64_t)(*((void *)a3 + 8) - *((void *)a3 + 7)) >> 4);
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 96) = a4;
  *(_OWORD *)(a1 + 12CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *(void *)(a1 + 136) = 0;
  int v12 = pthread_mutex_init((pthread_mutex_t *)(a1 + 144), 0);
  assert_msg(v12 == 0, "Mutex create error %d", v12);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = a1 + 224;
  *(void *)(a1 + 20++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 232) = 0;
  turi::sarray<turi::ml_data_internal::row_data_block>::get_reader(*a5);
}

void sub_224342064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::destroy(v5, *v6);
  turi::mutex::~mutex(v4);
  uint64_t v8 = (turi::ml_data_internal::row_metadata *)(v3 - 16);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 112);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  turi::ml_data_internal::row_metadata::~row_metadata(v8);
  long long v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(a1);
}

void turi::sarray<turi::ml_data_internal::row_data_block>::get_reader(uint64_t a1)
{
  assert_msg(*(unsigned char *)(a1 + 249) == 0, "Cannot open an SArraying which is still writing.");
  operator new();
}

void sub_2243421BC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::sarray_reader<turi::ml_data_internal::row_data_block>>::operator=[abi:ne180100]<turi::sarray_reader<turi::ml_data_internal::row_data_block>,std::default_delete<turi::sarray_reader<turi::ml_data_internal::row_data_block>>,void>()
{
}

void std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::__append(a1, v5);
  }
}

void turi::ml_data_internal::row_metadata::~row_metadata(turi::ml_data_internal::row_metadata *this)
{
  uint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

uint64_t turi::ml_data_internal::ml_data_block_manager::get_block@<X0>(turi::ml_data_internal::ml_data_block_manager *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v30 = (char *)this + 144;
  char v31 = 1;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 144));
  uint64_t v6 = *((void *)this + 26) + 1;
  *((void *)this + 26) = v6;
  if (!(_BYTE)v6)
  {
    uint64_t v7 = (uint64_t *)*((void *)this + 27);
    if (v7 != (uint64_t *)((char *)this + 224))
    {
      do
      {
        uint64_t v8 = v7[6];
        if (!v8 || *(void *)(v8 + 8) == -1)
        {
          long long v10 = (turi::ml_data_internal::ml_data_block_manager *)std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::erase((uint64_t **)this + 27, v7);
        }
        else
        {
          uint64_t v9 = (turi::ml_data_internal::ml_data_block_manager *)v7[1];
          if (v9)
          {
            do
            {
              long long v10 = v9;
              uint64_t v9 = *(turi::ml_data_internal::ml_data_block_manager **)v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              long long v10 = (turi::ml_data_internal::ml_data_block_manager *)v7[2];
              BOOL v11 = *(void *)v10 == (void)v7;
              uint64_t v7 = (uint64_t *)v10;
            }
            while (!v11);
          }
        }
        uint64_t v7 = (uint64_t *)v10;
      }
      while (v10 != (turi::ml_data_internal::ml_data_block_manager *)((char *)this + 224));
    }
  }
  int v12 = (void *)*((void *)this + 28);
  if (!v12) {
    goto LABEL_24;
  }
  char v13 = (uint64_t *)((char *)this + 224);
  do
  {
    unint64_t v14 = v12[4];
    BOOL v15 = v14 >= a2;
    if (v14 >= a2) {
      BOOL v16 = v12;
    }
    else {
      BOOL v16 = v12 + 1;
    }
    if (v15) {
      char v13 = v12;
    }
    int v12 = (void *)*v16;
  }
  while (*v16);
  if (v13 == (uint64_t *)((char *)this + 224) || v13[4] > a2)
  {
LABEL_24:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_25;
  }
  *a3 = 0;
  a3[1] = 0;
  unsigned int v24 = (std::__shared_weak_count *)v13[6];
  if (v24 && (unsigned int v24 = std::__shared_weak_count::lock(v24)) != 0) {
    uint64_t v25 = v13[5];
  }
  else {
    uint64_t v25 = 0;
  }
  unint64_t v27 = (std::__shared_weak_count *)a3[1];
  *a3 = v25;
  a3[1] = (uint64_t)v24;
  if (v27)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    uint64_t v25 = *a3;
  }
  if (!v25)
  {
    std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::erase((uint64_t **)this + 27, v13);
    if (!*a3)
    {
LABEL_25:
      std::unique_lock<turi::mutex>::unlock((uint64_t)&v30);
      memset(v29, 0, sizeof(v29));
      (*(void (**)(void, unint64_t, unint64_t, void *))(**((void **)this + 13) + 48))(*((void *)this + 13), a2, a2 + 1, v29);
      std::vector<std::vector<turi::flexible_type>>::vector(v28, (uint64_t)(*((void *)this + 16) - *((void *)this + 15)) >> 4);
      if (v28[0] != v28[1])
      {
        uint64_t v17 = *((void *)this + 15);
        if (*((void *)this + 16) != v17)
        {
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          unint64_t v20 = 0;
          uint64_t v21 = *((void *)this + 12);
          unint64_t v22 = v21 * a2;
          uint64_t v23 = v21 * (a2 + 1);
          do
          {
            (*(void (**)(void, unint64_t, uint64_t, uint64_t))(**(void **)(v17 + v19) + 48))(*(void *)(v17 + v19), v22, v23, v28[0] + v18);
            ++v20;
            uint64_t v17 = *((void *)this + 15);
            v19 += 16;
            v18 += 24;
          }
          while (v20 < (*((void *)this + 16) - v17) >> 4);
        }
      }
      operator new();
    }
  }
  return std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v30);
}

void sub_2243427C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **a10, uint64_t a11, std::__shared_weak_count *a12, char *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  a10 = &a13;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a13 = &a16;
  std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  unint64_t v22 = *(std::__shared_weak_count **)(v19 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::ml_data_internal::ml_data_block>::reset[abi:ne180100]<turi::ml_data_internal::ml_data_block,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::ml_data_internal::ml_data_block>::shared_ptr[abi:ne180100]<turi::ml_data_internal::ml_data_block,void>(&v2, a2);
}

void *std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::ml_data_internal::column_metadata>>,std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_224342958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + ++*(_DWORD *)(result + 8) = v10;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void turi::sarray_reader<turi::ml_data_internal::row_data_block>::init(uint64_t a1, uint64_t a2)
{
  assert_msg(*(void *)(a1 + 8) == 0, "Reader already inited");
  turi::sarray_reader<turi::ml_data_internal::row_data_block>::open_format_reader(a1, a2);
}

void sub_224342CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  unint64_t v14 = *(void **)(v12 - 120);
  if (v14)
  {
    *(void *)(v12 - 112) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray_reader<turi::ml_data_internal::row_data_block>::sarray_reader(uint64_t a1)
{
  *(void *)a1 = &unk_26D779910;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
  int v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 16), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  *(void *)(a1 + 8++*(_DWORD *)(result + 8) = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *(void *)(a1 + 176) = 0;
  return a1;
}

void turi::sarray_reader<turi::ml_data_internal::row_data_block>::~sarray_reader(uint64_t a1)
{
  turi::sarray_reader<turi::ml_data_internal::row_data_block>::~sarray_reader(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::sarray_reader<turi::ml_data_internal::row_data_block>::begin@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v11 = a2;
  uint64_t v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  for (unint64_t i = *(void **)(a1 + 96); i; unint64_t i = (void *)*i)
  {
    unint64_t v8 = i[4];
    if (v8 <= a2)
    {
      if (v8 >= a2) {
        turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#1}::operator()();
      }
      ++i;
    }
  }
  std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)(a1 + 88), &v11, (uint64_t *)&v11);
  if (!*(void *)(a1 + 8)) {
    turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#2}::operator()();
  }
  unint64_t v9 = v11;
  if (v9 >= (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#3}::operator()();
  }
  turi::sarray_iterator<turi::ml_data_internal::row_data_block>::sarray_iterator(a3, (uint64_t *)(*(void *)(a1 + 160) + 96 * v11), v11, 1);
  return pthread_mutex_unlock(v6);
}

void sub_224342ECC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

double turi::sarray_reader<turi::ml_data_internal::row_data_block>::end@<D0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = a1[1];
  if (!v9[0])
  {
    unint64_t v11 = v9;
    turi::sarray_reader<turi::flexible_type>::end(unsigned long)const::{lambda(void)#1}::operator()();
  }
  unint64_t v11 = (void *)a2;
  unint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  if (v10 <= a2)
  {
    v9[0] = &v11;
    v9[1] = &v10;
    turi::sarray_reader<turi::flexible_type>::end(unsigned long)const::{lambda(void)#2}::operator()();
  }
  uint64_t v6 = a1[20] + 96 * a2;
  *(void *)a3 = v6;
  *(void *)(a3 + ++*(_DWORD *)(result + 8) = a2;
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 4++*(_DWORD *)(result + 8) = 0u;
  uint64_t v8 = *(void *)(v6 + 72) - *(void *)(v6 + 56);
  *(void *)(a3 + 64) = v8;
  *(void *)(a3 + 72) = v8;
  return result;
}

uint64_t turi::sarray_reader<turi::ml_data_internal::row_data_block>::read_rows(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

uint64_t turi::sarray_reader<turi::ml_data_internal::row_data_block>::reset_iterators(uint64_t a1)
{
  uint64_t v1 = (void *)a1;
  int v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  uint64_t v3 = (void *)v1[12];
  v1 += 12;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)(v1 - 1), v3);
  *(v1 - 1) = v1;
  *uint64_t v1 = 0;
  v1[1] = 0;
  unint64_t v4 = (uint64_t *)v1[8];
  unint64_t v5 = (uint64_t *)v1[9];
  while (v4 != v5)
  {
    turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>::clear(v4);
    v4 += 12;
  }
  return pthread_mutex_unlock(v2);
}

uint64_t turi::sarray_reader<turi::ml_data_internal::row_data_block>::~sarray_reader(uint64_t a1)
{
  *(void *)a1 = &unk_26D779910;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v5 = (void **)(a1 + 160);
  std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)(a1 + 136);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(void *)(a1 + 12CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 88, *(void **)(a1 + 96));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 16));
  return a1;
}

void std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (void **)a2;
  std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v4);
}

uint64_t turi::sarray_iterator<turi::ml_data_internal::row_data_block>::sarray_iterator(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4++*(_DWORD *)(result + 8) = 0u;
  *(void *)(a1 + 64) = 0;
  uint64_t v6 = a2[9] - a2[7];
  *(void *)(a1 + 72) = v6;
  if (a4 && v6)
  {
    uint64_t v7 = turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>::next(a2);
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(v5, (__n128 *)v7);
    std::vector<turi::flexible_type>::__vdeallocate((void **)(a1 + 40));
    uint64_t v6 = 0;
    *(_OWORD *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *(_OWORD *)(v7 + 24);
    *(void *)(a1 + 56) = *(void *)(v7 + 40);
    *(void *)(v7 + 24) = 0;
    *(void *)(v7 + 32) = 0;
    *(void *)(v7 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  }
  *(void *)(a1 + 64) = v6;
  return a1;
}

void sub_224343284(_Unwind_Exception *a1)
{
  turi::ml_data_internal::row_data_block::~row_data_block(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>::next(uint64_t *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = *a1;
  if (v2 == 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4))
  {
    uint64_t v4 = a1[8];
    if (a1[10] >= (unint64_t)(a1[9] - v4)) {
      uint64_t v5 = a1[9] - v4;
    }
    else {
      uint64_t v5 = a1[10];
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1[5] + 48))(a1[5], v4, v5 + v4, a1);
    uint64_t v2 = 0;
    a1[8] += v5;
    uint64_t v3 = *a1;
  }
  ++a1[11];
  a1[6] = v2 + 1;
  return v3 + 48 * v2;
}

void turi::ml_data_internal::row_data_block::~row_data_block(turi::ml_data_internal::row_data_block *this)
{
  uint64_t v3 = (void **)((char *)this + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>::clear(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    do
    {
      v2 -= 48;
      std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v2);
    }
    while (v2 != v3);
  }
  a1[1] = v3;
  uint64_t v4 = a1[7];
  a1[8] = v4;
  a1[11] = v4;
  a1[6] = 0;
}

void std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + ++*(_DWORD *)(result + 8) = v3;
    operator delete(v3);
  }
}

void turi::sarray_reader<turi::ml_data_internal::row_data_block>::open_format_reader(uint64_t a1, uint64_t a2)
{
  turi::index_file_information::index_file_information(&v4, (const turi::index_file_information *)(a2 + 8));
  uint64_t v3 = v5;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v11, v11[1]);
  uint64_t v12 = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  if (__p)
  {
    unint64_t v9 = __p;
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v3 == 2) {
    operator new();
  }
  if (v3 != 1)
  {
    if (!v3) {
      turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#1}::operator()();
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 8) = 0;
    turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#3}::operator()();
  }
  turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#2}::operator()();
}

void sub_2243435C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  turi::index_file_information::~index_file_information((turi::index_file_information *)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_reader<turi::ml_data_internal::row_data_block>::size(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    turi::sarray_reader<turi::flexible_type>::size(void)const::{lambda(void)#1}::operator()();
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 72))(v1);
  uint64_t v3 = *(uint64_t **)(v2 + 72);
  uint64_t v4 = *(void *)(v2 + 80);
  uint64_t result = 0;
  uint64_t v6 = v4 - (void)v3;
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    do
    {
      uint64_t v8 = *v3++;
      result += v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

void turi::sarray_reader<turi::ml_data_internal::row_data_block>::create_segment_read_buffers(void *a1, void *a2)
{
  unint64_t v4 = (uint64_t)(a2[1] - *a2) >> 4;
  a1[10] = v4;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 14), v4);
  std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::resize(a1 + 20, a1[10]);
  uint64_t v5 = a1[14];
  if (a1[15] != v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *a2 + v7;
      *(void *)(v5 + 8 * v++*(_DWORD *)(result + 8) = *(void *)(v9 + 8) - *(void *)v9;
      turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>::init((uint64_t *)(a1[20] + v6), (uint64_t)a1, *(void *)v9, *(void *)(v9 + 8), 1024);
      ++v8;
      uint64_t v5 = a1[14];
      v7 += 16;
      v6 += 96;
    }
    while (v8 < (a1[15] - v5) >> 3);
  }
}

uint64_t turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::sarray_format_reader_v2(uint64_t a1)
{
  *(void *)a1 = &unk_26D779988;
  uint64_t instance = turi::v2_block_impl::block_manager::get_instance((turi::v2_block_impl::block_manager *)a1);
  *(_OWORD *)(a1 + 16++*(_DWORD *)(result + 8) = 0u;
  *(void *)(a1 + ++*(_DWORD *)(result + 8) = instance;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = -1;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 4++*(_DWORD *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 12++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 232) = 0;
  int v3 = pthread_mutex_init((pthread_mutex_t *)(a1 + 240), 0);
  assert_msg(v3 == 0, "Mutex create error %d", v3);
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 32CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  *(void *)(a1 + 32++*(_DWORD *)(result + 8) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  return a1;
}

void sub_224343834(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void **)(v1 + 216);
  if (v6)
  {
    *(void *)(v1 + 224) = v6;
    operator delete(v6);
  }
  turi::sarray_format_reader_v2<turi::flexible_type>::sarray_format_reader_v2(v4, v3, v1);
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::~sarray_format_reader_v2(uint64_t a1)
{
  turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::~sarray_format_reader_v2(a1);
  JUMPOUT(0x22A614FA0);
}

void turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::open(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 56) = v4;
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 48));
  if (a1 + 16 != a2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 88), *(char **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 112), *(std::string **)(a2 + 96), *(long long **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 136), *(long long **)(a2 + 120), (long long *)(a2 + 128));
  }
  *(void *)(a1 + 176) = *(void *)(a1 + 168);
  float v86 = (void **)(a1 + 192);
  float v87 = (char **)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 216);
  uint64_t v83 = (char **)(a1 + 216);
  *(void *)(a1 + 20CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *(void *)(a1 + 192);
  *(void *)(a1 + 224) = v5;
  *(void *)(a1 + 16CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
  uint64_t v6 = *(void *)(a2 + 96);
  if (*(void *)(a2 + 104) == v6)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v84 = a2;
    do
    {
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = (long long *)(v6 + 24 * v7);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v11 = *v10;
        v88.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v11;
      }
      unint64_t v12 = turi::v2_block_impl::block_manager::open_column(v9, (uint64_t)&v88);
      unint64_t v14 = v13;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      BOOL v16 = *(unint64_t **)(a1 + 224);
      unint64_t v15 = *(void *)(a1 + 232);
      uint64_t v85 = v7;
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v18 = ((char *)v16 - *v83) >> 4;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v15 - (void)*v83;
        if (v20 >> 3 > v19) {
          unint64_t v19 = v20 >> 3;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21) {
          unint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(a1 + 232, v21);
        }
        else {
          unint64_t v22 = 0;
        }
        uint64_t v23 = (unint64_t *)&v22[16 * v18];
        *uint64_t v23 = v12;
        v23[1] = v14;
        uint64_t v25 = *(char **)(a1 + 216);
        unsigned int v24 = *(char **)(a1 + 224);
        uint64_t v26 = v23;
        if (v24 != v25)
        {
          do
          {
            *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
            v26 -= 2;
            v24 -= 16;
          }
          while (v24 != v25);
          unsigned int v24 = *v83;
        }
        uint64_t v17 = v23 + 2;
        *(void *)(a1 + 216) = v26;
        *(void *)(a1 + 224) = v23 + 2;
        *(void *)(a1 + 232) = &v22[16 * v21];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *BOOL v16 = v12;
        v16[1] = v14;
        uint64_t v17 = v16 + 2;
      }
      *(void *)(a1 + 224) = v17;
      unint64_t v27 = turi::v2_block_impl::block_manager::num_blocks_in_column(*(turi::v2_block_impl::block_manager **)(a1 + 8), v12, v14);
      uint64_t all_block_info = turi::v2_block_impl::block_manager::get_all_block_info(*(turi::v2_block_impl::block_manager **)(a1 + 8), v12);
      if (v27)
      {
        unint64_t v29 = (void *)all_block_info;
        for (unint64_t i = 0; i != v27; ++i)
        {
          uint64_t v32 = *(char **)(a1 + 200);
          unint64_t v31 = *(void *)(a1 + 208);
          if ((unint64_t)v32 >= v31)
          {
            atomic_ullong *volatile v34 = (char *)*v86;
            uint64_t v35 = (v32 - (unsigned char *)*v86) >> 3;
            unint64_t v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v37 = v31 - (void)v34;
            if (v37 >> 2 > v36) {
              unint64_t v36 = v37 >> 2;
            }
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v38 = v36;
            }
            if (v38)
            {
              unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 208, v38);
              atomic_ullong *volatile v34 = *(char **)(a1 + 192);
              uint64_t v32 = *(char **)(a1 + 200);
            }
            else
            {
              unint64_t v39 = 0;
            }
            uint64_t v40 = &v39[8 * v35];
            *(void *)uint64_t v40 = v8;
            atomic_ullong *volatile v33 = v40 + 8;
            while (v32 != v34)
            {
              uint64_t v41 = *((void *)v32 - 1);
              v32 -= 8;
              *((void *)v40 - 1) = v41;
              v40 -= 8;
            }
            *(void *)(a1 + 192) = v40;
            *(void *)(a1 + 20CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v33;
            *(void *)(a1 + 20++*(_DWORD *)(result + 8) = &v39[8 * v38];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *(void *)uint64_t v32 = v8;
            atomic_ullong *volatile v33 = v32 + 8;
          }
          *(void *)(a1 + 20CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v33;
          uint64_t v42 = *(void *)(*(void *)(*v29 + 24 * v14) + 48 * i + 24);
          atomic_ullong *volatile v44 = *(unint64_t **)(a1 + 176);
          unint64_t v43 = *(void *)(a1 + 184);
          if ((unint64_t)v44 >= v43)
          {
            unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - *v87) >> 3);
            unint64_t v47 = v46 + 1;
            if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (void)*v87) >> 3);
            if (2 * v48 > v47) {
              unint64_t v47 = 2 * v48;
            }
            if (v48 >= 0x555555555555555) {
              unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v49 = v47;
            }
            if (v49) {
              uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 184, v49);
            }
            else {
              uint64_t v50 = 0;
            }
            double v51 = (unint64_t *)&v50[24 * v46];
            *double v51 = v12;
            v51[1] = v14;
            v51[2] = i;
            double v53 = *(char **)(a1 + 168);
            double v52 = *(char **)(a1 + 176);
            unint64_t v54 = v51;
            if (v52 != v53)
            {
              do
              {
                long long v55 = *(_OWORD *)(v52 - 24);
                *(v54 - 1) = *((void *)v52 - 1);
                *(_OWORD *)(v54 - 3) = v55;
                v54 -= 3;
                v52 -= 24;
              }
              while (v52 != v53);
              double v52 = *v87;
            }
            unint64_t v45 = v51 + 3;
            *(void *)(a1 + 16++*(_DWORD *)(result + 8) = v54;
            *(void *)(a1 + 176) = v51 + 3;
            *(void *)(a1 + 184) = &v50[24 * v49];
            if (v52) {
              operator delete(v52);
            }
          }
          else
          {
            *atomic_ullong *volatile v44 = v12;
            v44[1] = v14;
            unint64_t v45 = v44 + 3;
            v44[2] = i;
          }
          v8 += v42;
          *(void *)(a1 + 176) = v45;
        }
      }
      uint64_t v7 = v85 + 1;
      uint64_t v6 = *(void *)(v84 + 96);
    }
    while (v85 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v84 + 104) - v6) >> 3));
  }
  uint64_t v56 = *(uint64_t **)(a1 + 88);
  unint64_t v57 = *(uint64_t **)(a1 + 96);
  if (v56 != v57)
  {
    uint64_t v58 = *(void *)(a1 + 160);
    do
    {
      uint64_t v59 = *v56++;
      v58 += v59;
      *(void *)(a1 + 16CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v58;
    }
    while (v56 != v57);
  }
  int v60 = *(void **)(a1 + 336);
  for (int j = *(void **)(a1 + 344);
        j != v60;
        std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100](a1 + 352, j))
  {
    j -= 23;
  }
  *(void *)(a1 + 344) = v60;
  std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::resize((uint64_t *)(a1 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 3));
  unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 3);
  unint64_t v63 = *(void *)(a1 + 320);
  unint64_t v64 = v62 >> 6;
  if ((v62 & 0x3F) != 0) {
    ++v64;
  }
  *(void *)(a1 + 312) = v62;
  *(void *)(a1 + 32CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v64;
  unint64_t v65 = (char *)malloc_type_realloc(*(void **)(a1 + 304), 8 * v64, 0x100004000313F17uLL);
  uint64_t v66 = v65;
  *(void *)(a1 + 304) = v65;
  uint64_t v67 = *(void *)(a1 + 312) & 0x3FLL;
  if (v67) {
    *(void *)&v65[8 * *(void *)(a1 + 320) - 8] &= ~(-1 << v67);
  }
  uint64_t v68 = *(void *)(a1 + 320);
  if (v68 > v63)
  {
    double v69 = &v65[8 * v63];
    uint64_t v70 = 8 * v68 - 8 * v63;
    if (v70 >= 1)
    {
      bzero(v69, 8 * (((unint64_t)v70 >> 3) - ((unint64_t)v70 > 7)) + 8);
      uint64_t v68 = *(void *)(a1 + 320);
    }
  }
  if (v68 >= 1) {
    bzero(v66, 8 * (v68 - ((v68 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
  }
  unint64_t v71 = *(void *)(a1 + 208);
  float v72 = *(char **)(a1 + 200);
  if ((unint64_t)v72 >= v71)
  {
    uint64_t v74 = (char *)*v86;
    uint64_t v75 = (v72 - (unsigned char *)*v86) >> 3;
    unint64_t v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v77 = v71 - (void)v74;
    if (v77 >> 2 > v76) {
      unint64_t v76 = v77 >> 2;
    }
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v78 = v76;
    }
    if (v78)
    {
      unint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 208, v78);
      uint64_t v74 = *(char **)(a1 + 192);
      float v72 = *(char **)(a1 + 200);
    }
    else
    {
      unint64_t v79 = 0;
    }
    double v80 = &v79[8 * v75];
    unint64_t v81 = &v79[8 * v78];
    *(void *)double v80 = *(void *)(a1 + 160);
    double v73 = v80 + 8;
    while (v72 != v74)
    {
      uint64_t v82 = *((void *)v72 - 1);
      v72 -= 8;
      *((void *)v80 - 1) = v82;
      v80 -= 8;
    }
    *(void *)(a1 + 192) = v80;
    *(void *)(a1 + 20CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v73;
    *(void *)(a1 + 20++*(_DWORD *)(result + 8) = v81;
    if (v74) {
      operator delete(v74);
    }
  }
  else
  {
    *(void *)float v72 = *(void *)(a1 + 160);
    double v73 = v72 + 8;
  }
  *(void *)(a1 + 20CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v73;
  if (*(void *)(a1 + 160) != v8) {
    turi::sarray_format_reader_v2<turi::flexible_type>::open(turi::index_file_information)::{lambda(void)#1}::operator()();
  }
}

{
  std::string v2;

  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    uint64_t v2 = *(std::string *)a2;
  }
  turi::read_index_file((uint64_t)&v2);
}

void sub_224343F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_224344074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::read_rows(atomic_ullong *a1, unint64_t a2, void *a3, uint64_t *a4)
{
  if (a1[20] >= (unint64_t)a3) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = (void *)a1[20];
  }
  BOOL v7 = (unint64_t)v6 >= a2;
  unint64_t v8 = (unint64_t)v6 - a2;
  if (v8 != 0 && v7)
  {
    std::vector<turi::ml_data_internal::row_data_block>::resize(a4, v8);
    turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::fetch_rows_from_cache(a1, a2, v6, a4);
    if (cppipc::must_cancel(v10))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "Cancelled by user.");
    }
    return 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4);
  }
  else
  {
    uint64_t v13 = *a4;
    uint64_t v12 = a4[1];
    if (v12 != *a4)
    {
      do
      {
        v12 -= 48;
        std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100]((uint64_t)(a4 + 2), v12);
      }
      while (v12 != v13);
    }
    unint64_t result = 0;
    a4[1] = v13;
  }
  return result;
}

void sub_22434418C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::~sarray_format_reader_v2(uint64_t a1)
{
  *(void *)a1 = &unk_26D779988;
  turi::sarray_format_reader_v2<turi::flexible_type>::close((uint64_t *)a1);
  BOOL v7 = (void **)(a1 + 336);
  std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::__destroy_vector::operator()[abi:ne180100](&v7);
  free(*(void **)(a1 + 304));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 240));
  uint64_t v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(void *)(a1 + 224) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(void *)(a1 + 20CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(void *)(a1 + 176) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 136, *(void **)(a1 + 144));
  BOOL v7 = (void **)(a1 + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5)
  {
    *(void *)(a1 + 96) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::resize(uint64_t *a1, unint64_t a2)
{
  int v3 = (void *)a1[1];
  unint64_t v4 = 0xD37A6F4DE9BD37A7 * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 184 * a2;
    while (v3 != (void *)v7)
    {
      v3 -= 23;
      std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void **std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xD37A6F4DE9BD37A7 * ((v6 - v7) >> 3) >= a2)
  {
    return (void **)std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::__construct_at_end((uint64_t)a1, a2);
  }
  else
  {
    unint64_t v8 = 0xD37A6F4DE9BD37A7 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1642C8590B21642) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xD37A6F4DE9BD37A7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xB21642C8590B21) {
      unint64_t v11 = 0x1642C8590B21642;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v20 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v14 = &v12[184 * v8];
    v17[0] = v12;
    v17[1] = v14;
    uint64_t v18 = v14;
    unint64_t v19 = &v12[184 * v11];
    uint64_t v15 = 184 * a2;
    BOOL v16 = &v14[184 * a2];
    do
    {
      *((void *)v14 + 22) = 0;
      *((_OWORD *)v14 + 9) = 0u;
      *((_OWORD *)v14 + 1CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
      *((_OWORD *)v14 + 7) = 0u;
      *((_OWORD *)v14 + ++*(_DWORD *)(result + 8) = 0u;
      *((_OWORD *)v14 + 5) = 0u;
      *((_OWORD *)v14 + 6) = 0u;
      *((_OWORD *)v14 + 3) = 0u;
      *((_OWORD *)v14 + 4) = 0u;
      *((_OWORD *)v14 + 1) = 0u;
      *((_OWORD *)v14 + 2) = 0u;
      *(_OWORD *)unint64_t v14 = 0u;
      turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry((uint64_t)v14);
      v14 += 184;
      v15 -= 184;
    }
    while (v15);
    uint64_t v18 = v16;
    std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer(v17);
  }
}

void sub_2243444A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v4 = v3 + 184 * a2;
    uint64_t v5 = 184 * a2;
    do
    {
      *(void *)(v3 + 176) = 0;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 16CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 12++*(_DWORD *)(result + 8) = 0u;
      *(_OWORD *)(v3 + 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 4++*(_DWORD *)(result + 8) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)uint64_t v3 = 0u;
      unint64_t result = turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(v3);
      v3 += 184;
      v5 -= 184;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *(void *)(v2 + ++*(_DWORD *)(result + 8) = v3;
  return result;
}

void sub_224344540(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(_DWORD *)(result + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 184;
      turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(v7 - 184, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 184;
      *((void *)&v15 + 1) -= 184;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_224344668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::vector<turi::ml_data_internal::row_data_block>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::ml_data_internal::row_data_block>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 48 * a2;
    while (v3 != v7)
    {
      v3 -= 48;
      std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::fetch_rows_from_cache(atomic_ullong *a1, unint64_t a2, void *a3, void *a4)
{
  unint64_t v6 = a1;
  unint64_t v7 = turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(a1, a2);
  uint64_t v42 = a3;
  unint64_t v40 = turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(v6, (unint64_t)a3 - 1);
  if (v7 < v40 + 1)
  {
    uint64_t v8 = 0;
    unint64_t v43 = v6;
    do
    {
      atomic_ullong v9 = v6[24];
      unint64_t v10 = *(void *)(v9 + 8 * v7);
      unint64_t v11 = v7 + 1;
      uint64_t v12 = *(void **)(v9 + 8 * (v7 + 1));
      atomic_ullong v13 = v6[42];
      long long v14 = (atomic_uchar *)(v13 + 184 * v7);
      do
      {
        while (*v14 == 1)
          ;
      }
      while (atomic_exchange(v14, 1u));
      if (v10 <= a2) {
        unint64_t v15 = a2;
      }
      else {
        unint64_t v15 = v10;
      }
      unint64_t v16 = v13 + 184 * v7;
      uint64_t v19 = *(void *)(v16 + 24);
      uint64_t v18 = (uint64_t **)(v16 + 24);
      uint64_t v17 = v19;
      if (v12 >= v42) {
        uint64_t v20 = v42;
      }
      else {
        uint64_t v20 = v12;
      }
      unint64_t v21 = (unint64_t)*(v18 - 2);
      if (v17) {
        BOOL v22 = v21 > v15;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::fetch_cache_from_file(v6, v7, (uint64_t)v14);
        unint64_t v21 = (unint64_t)*(v18 - 2);
      }
      atomic_ullong v23 = v6[24];
      uint64_t v24 = *(void *)(v23 + 8 * v7);
      unint64_t v44 = v7;
      unint64_t v45 = v7 + 1;
      if (v21 == v15)
      {
        uint64_t v25 = (char *)v20 - v15;
        if ((unint64_t)v20 > v15)
        {
          uint64_t v26 = a4;
          uint64_t v27 = 0;
          uint64_t v28 = -48 * v24 + 48 * v15;
          uint64_t v29 = 48 * (void)v8;
          unint64_t v39 = v20;
          uint64_t v8 = (char *)v20 + (void)v8 - v15;
          do
          {
            uint64_t v30 = **v18 + v28 + v27;
            uint64_t v31 = *v26 + v29 + v27;
            _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(v31, (__n128 *)v30);
            std::vector<turi::flexible_type>::__vdeallocate((void **)(v31 + 24));
            *(_OWORD *)(v31 + 24) = *(_OWORD *)(v30 + 24);
            *(void *)(v31 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *(void *)(v30 + 40);
            *(void *)(v30 + 24) = 0;
            *(void *)(v30 + 32) = 0;
            *(void *)(v30 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
            v27 += 48;
            --v25;
          }
          while (v25);
          unint64_t v6 = v43;
          atomic_ullong v23 = v43[24];
          a4 = v26;
          unint64_t v7 = v44;
          unint64_t v11 = v45;
          uint64_t v20 = v39;
        }
        *(v18 - 2) = v20;
        if (v20 == *(void **)(v23 + 8 * v11)) {
          turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::release_cache(v6, v7);
        }
      }
      else
      {
        uint64_t v32 = (char *)v20 - v15;
        if ((unint64_t)v20 > v15)
        {
          uint64_t v33 = 0;
          uint64_t v34 = -48 * v24 + 48 * v15;
          uint64_t v35 = 48 * (void)v8;
          do
          {
            uint64_t v36 = **v18;
            uint64_t v37 = a4;
            uint64_t v38 = *a4;
            if (v38 + v35 != v36 + v34)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v38 + v35 + v33), *(char **)(v36 + v34 + v33), *(void *)(v36 + v34 + v33 + 8), (uint64_t)(*(void *)(v36 + v34 + v33 + 8) - *(void *)(v36 + v34 + v33)) >> 3);
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v38 + v35 + v33 + 24, *(uint64_t **)(v36 + v34 + v33 + 24), *(uint64_t **)(v36 + v34 + v33 + 32), (uint64_t)(*(void *)(v36 + v34 + v33 + 32) - *(void *)(v36 + v34 + v33 + 24)) >> 4);
            }
            ++v8;
            v33 += 48;
            --v32;
            a4 = v37;
          }
          while (v32);
        }
      }
      __dmb(0xBu);
      atomic_uchar *v14 = 0;
      unint64_t v6 = v43;
      unint64_t v7 = v45;
    }
    while (v44 != v40);
  }
}

void sub_2243449E8(_Unwind_Exception *a1)
{
  __dmb(0xBu);
  *uint64_t v1 = 0;
  _Unwind_Resume(a1);
}

void std::vector<turi::ml_data_internal::row_data_block>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v15 = v12;
    unint64_t v16 = &v12[48 * v8];
    uint64_t v18 = &v12[48 * v11];
    size_t v14 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<turi::ml_data_internal::row_data_block>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer(&v15);
  }
}

void sub_224344B50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::ml_data_internal::row_data_block>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::ml_data_internal::row_data_block>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::ml_data_internal::row_data_block>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 4++*(_DWORD *)(result + 8) = 0;
      *(void *)(v7 - 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
      *(void *)(v7 - 32) = 0;
      long long v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 4++*(_DWORD *)(result + 8) = v8;
      *(void *)(v7 - 32) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - ++*(_DWORD *)(result + 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - ++*(_DWORD *)(result + 8) = *(void *)(a3 + 40);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,std::reverse_iterator<turi::ml_data_internal::row_data_block*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::ml_data_internal::row_data_block>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100](v4, i - 48);
  }
}

void turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::fetch_cache_from_file(atomic_ullong *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a3 + 24);
  if (!v6)
  {
    turi::buffer_pool<std::vector<turi::ml_data_internal::row_data_block>>::get_new_buffer(&turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::m_buffer_pool, (uint64_t)&v18);
    long long v7 = v18;
    long long v18 = 0uLL;
    long long v8 = *(std::__shared_weak_count **)(a3 + 32);
    *(_OWORD *)(a3 + 24) = v7;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      if (*((void *)&v18 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
      }
    }
    uint64_t v6 = *(uint64_t **)(a3 + 24);
  }
  uint64_t v9 = a1[21] + 24 * a2;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(v9 + 16);
  long long v16 = *(_OWORD *)v9;
  uint64_t v17 = v11;
  if (!turi::v2_block_impl::block_manager::read_block<turi::ml_data_internal::row_data_block>(v10, &v16, v6, 0)) {
    turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::fetch_cache_from_file(unsigned long,turi::sarray_format_reader_v2<std::pair<std::vector<turi::flexible_type>,std::string>>::cache_entry &)::{lambda(void)#1}::operator()();
  }
  *(void *)(a3 + ++*(_DWORD *)(result + 8) = *(void *)(a1[24] + 8 * a2);
  *(_WORD *)(a3 + 16) = 256;
  atomic_ullong v12 = a1[38];
  if ((*(void *)(v12 + 8 * (a2 >> 6)) & (1 << a2)) == 0)
  {
    atomic_fetch_add(a1 + 41, 1uLL);
    atomic_ullong v12 = a1[38];
  }
  atomic_fetch_or((atomic_ullong *volatile)(v12 + 8 * (a2 >> 6)), 1 << a2);
  atomic_ullong v13 = a1[41];
  if (v13 != turi::SFRAME_MAX_BLOCKS_IN_CACHE)
  {
    uint64_t v14 = turi::SFRAME_MAX_BLOCKS_IN_CACHE - v13;
    do
    {
      if (a1[41] <= (unint64_t)turi::SFRAME_MAX_BLOCKS_IN_CACHE) {
        break;
      }
      turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::try_evict_something_from_cache((turi::random *)a1);
    }
    while (!__CFADD__(v14++, 1));
  }
}

void turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::release_cache(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[42];
  if (*(unsigned char *)(v2 + 184 * a2 + 17))
  {
    uint64_t v5 = 184 * a2;
    turi::buffer_pool<std::vector<turi::ml_data_internal::row_data_block>>::release_buffer((uint64_t)&turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::m_buffer_pool, (__n128 *)(v2 + 184 * a2 + 24));
    uint64_t v6 = a1[42] + v5;
    long long v7 = *(std::__shared_weak_count **)(v6 + 32);
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    turi::v2_block_impl::encoded_block::release((turi::v2_block_impl::encoded_block *)(a1[42] + 184 * a2 + 40));
    turi::v2_block_impl::encoded_block_range::release((turi::v2_block_impl::typed_decode_stream **)(a1[42]
                                                                                                  + 184 * a2
                                                                                                  + 112));
    *(unsigned char *)(a1[42] + 184 * a2 + 17) = 0;
    atomic_fetch_and((atomic_ullong *volatile)(a1[38] + 8 * (a2 >> 6)), ~(1 << a2));
    atomic_fetch_add(a1 + 41, 0xFFFFFFFFFFFFFFFFLL);
  }
}

uint64_t turi::buffer_pool<std::vector<turi::ml_data_internal::row_data_block>>::get_new_buffer@<X0>(pthread_mutex_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = &a1[1].__opaque[24];
  if (!*(void *)a1[2].__opaque)
  {
    pthread_mutex_lock(a1);
    uint64_t v6 = *(void *)a1[1].__opaque;
    uint64_t v5 = *(void *)&a1[1].__opaque[8];
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = *(void *)(v6 + v7 + 8);
        if (v9 && !*(void *)(v9 + 8))
        {
          std::deque<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::push_back(v4, (long long *)(v6 + v7));
          uint64_t v6 = *(void *)a1[1].__opaque;
          uint64_t v5 = *(void *)&a1[1].__opaque[8];
        }
        ++v8;
        v7 += 16;
      }
      while (v8 < (v5 - v6) >> 4);
    }
    pthread_mutex_unlock(a1);
    if (!*(void *)a1[2].__opaque) {
      goto LABEL_14;
    }
  }
  pthread_mutex_lock(a1);
  uint64_t v10 = *(void *)a1[2].__opaque;
  if (v10)
  {
    long long v11 = *(_OWORD *)(*(void *)(*(void *)&a1[1].__opaque[32]
                                + (((unint64_t)(v10 + a1[2].__sig - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v10 + LOBYTE(a1[2].__sig) - 1));
    *(_OWORD *)a2 = v11;
    if (*((void *)&v11 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::pop_back(v4);
  }
  uint64_t result = pthread_mutex_unlock(a1);
  if (!v10)
  {
LABEL_14:
    atomic_ullong v13 = operator new(0x30uLL);
    v13[1] = 0;
    void v13[2] = 0;
    void v13[3] = 0;
    void *v13 = &unk_26D779A28;
    uint64_t v13[4] = 0;
    v13[5] = 0;
    *(void *)a2 = v13 + 3;
    *(void *)(a2 + ++*(_DWORD *)(result + 8) = v13;
    pthread_mutex_lock(a1);
    if (a1[1].__sig > (unint64_t)((uint64_t)(*(void *)&a1[1].__opaque[8] - *(void *)a1[1].__opaque) >> 4)) {
      std::vector<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::push_back[abi:ne180100]((uint64_t *)a1[1].__opaque, (long long *)a2);
    }
    return pthread_mutex_unlock(a1);
  }
  return result;
}

void sub_224345114(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  if (*(void *)(v2 + 8)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v2 + 8));
  }
  _Unwind_Resume(a1);
}

BOOL turi::v2_block_impl::block_manager::read_block<turi::ml_data_internal::row_data_block>(uint64_t a1, long long *a2, uint64_t *a3, void *a4)
{
  long long v11 = *a2;
  uint64_t v12 = *((void *)a2 + 2);
  turi::v2_block_impl::block_manager::read_block(a1, (unint64_t *)&v11, a4, &v13);
  unint64_t v6 = v13.n128_u64[0];
  if (v13.n128_u64[0])
  {
    uint64_t v7 = *(void *)v13.n128_u64[0];
    uint64_t v8 = *(void *)(v13.n128_u64[0] + 8) - *(void *)v13.n128_u64[0];
    v10[0] = 0;
    v10[1] = 0;
    v10[2] = v7;
    void v10[3] = 0;
    Bytef v10[4] = v8;
    turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::ml_data_internal::row_data_block,false>::exec((turi::iarchive *)v10, a3);
  }
  turi::buffer_pool<std::vector<char>>::release_buffer((pthread_mutex_t *)(a1 + 232), &v13);
  if (v13.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13.n128_u64[1]);
  }
  return v6 != 0;
}

void sub_224345220(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::try_evict_something_from_cache(turi::random *a1)
{
  uint64_t v2 = (uint64_t)(*((void *)a1 + 43) - *((void *)a1 + 42)) >> 3;
  unint64_t v3 = 0xD37A6F4DE9BD37A7 * v2 - 1;
  if (0xD37A6F4DE9BD37A7 * v2 != 1)
  {
    source = (char *)turi::random::get_source(a1);
    pthread_mutex_lock((pthread_mutex_t *)(source + 6288));
    unint64_t v3 = boost::random::detail::generate_uniform_int<boost::random::rand48,unsigned long>((uint64_t *)source + 785, 0, v3);
    pthread_mutex_unlock((pthread_mutex_t *)(source + 6288));
  }
  unint64_t v5 = v3 >> 6;
  unint64_t v6 = (void *)*((void *)a1 + 38);
  unint64_t v7 = v6[v3 >> 6];
  if ((v7 >> v3)) {
    goto LABEL_4;
  }
  unint64_t v9 = v7 & ~(0xFFFFFFFFFFFFFFFFLL >> (v3 & 0x3F ^ 0x3F));
  if (v9)
  {
    unint64_t v3 = __clz(__rbit64(v9)) | v3 & 0xFFFFFFFFFFFFFFC0;
LABEL_15:
    if (v3 < *((void *)a1 + 39)) {
      goto LABEL_4;
    }
  }
  else
  {
    unint64_t v10 = v5 << 6;
    unint64_t v11 = v5 + 1;
    while (v11 < *((void *)a1 + 40))
    {
      unint64_t v12 = v6[v11];
      v10 += 64;
      ++v11;
      if (v12)
      {
        unint64_t v3 = __clz(__rbit64(v12)) + v10;
        goto LABEL_15;
      }
    }
  }
  if ((*v6 & 1) == 0)
  {
    unint64_t v13 = *v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v13)
    {
      unint64_t v3 = __clz(__rbit64(v13));
      goto LABEL_4;
    }
    unint64_t v14 = *((void *)a1 + 40);
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    unint64_t v15 = v14 - 1;
    long long v16 = v6 + 1;
    while (v15)
    {
      unint64_t v18 = *v16++;
      unint64_t v17 = v18;
      --v15;
      v13 -= 64;
      if (v18)
      {
        unint64_t v3 = __clz(__rbit64(v17)) - v13;
        goto LABEL_4;
      }
    }
  }
  unint64_t v3 = 0;
LABEL_4:
  uint64_t v19 = *((void *)a1 + 42) + 184 * v3;
  char v20 = 0;
  if (std::unique_lock<turi::simple_spinlock>::try_lock((uint64_t)&v19)) {
    turi::sarray_format_reader_v2<turi::ml_data_internal::row_data_block>::release_cache(a1, v3);
  }
  if (v20)
  {
    uint64_t v8 = (unsigned char *)v19;
    __dmb(0xBu);
    *uint64_t v8 = 0;
  }
}

void sub_2243453E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9, char a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    void v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18[2] = v15 + 16;
    std::vector<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::__swap_out_circular_buffer(a1, v18);
    unint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_224345504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v++*(_DWORD *)(result + 8) = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void std::deque<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_224345884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<turi::ml_data_internal::row_data_block>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D779A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<turi::ml_data_internal::row_data_block>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D779A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<std::vector<turi::ml_data_internal::row_data_block>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::vector<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>,std::reverse_iterator<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>*>,std::reverse_iterator<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>*>,std::reverse_iterator<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>,std::reverse_iterator<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>*>,std::reverse_iterator<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>*>,std::reverse_iterator<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>,std::reverse_iterator<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>,std::reverse_iterator<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::ml_data_internal::row_data_block,false>::exec(turi::iarchive *a1, uint64_t *a2)
{
  unint64_t v10 = 0;
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a1 + 3);
    unint64_t v10 = *(void *)(v4 + v5);
    *((void *)a1 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 48;
      std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100]((uint64_t)(a2 + 2), v6);
    }
    while (v6 != v7);
  }
  a2[1] = v7;
  std::vector<turi::ml_data_internal::row_data_block>::resize(a2, v10);
  if (v10)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < v10; ++i)
    {
      turi::ml_data_internal::row_data_block::load((turi::ml_data_internal::row_data_block *)(*a2 + v8), a1);
      v8 += 48;
    }
  }
}

void turi::buffer_pool<std::vector<turi::ml_data_internal::row_data_block>>::release_buffer(uint64_t a1, __n128 *a2)
{
  unint64_t v2 = (uint64_t *)a2->n128_u64[0];
  if (a2->n128_u64[0])
  {
    uint64_t v6 = *v2;
    uint64_t v5 = v2[1];
    if (v5 == *v2)
    {
      unint64_t v7 = a2->n128_u64[0];
    }
    else
    {
      do
      {
        v5 -= 48;
        std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100]((uint64_t)(v2 + 2), v5);
      }
      while (v5 != v6);
      unint64_t v7 = a2->n128_u64[0];
      uint64_t v5 = *(void *)a2->n128_u64[0];
    }
    v2[1] = v6;
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v7 + 16) - v5) >> 4) >= 0x100000) {
      std::vector<turi::ml_data_internal::row_data_block>::shrink_to_fit((void **)v7);
    }
    if ((unint64_t)(*(void *)(a1 + 136) + ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4)) < *(void *)(a1 + 64))
    {
      pthread_mutex_lock((pthread_mutex_t *)a1);
      std::deque<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::push_back((void *)(a1 + 96), a2);
      pthread_mutex_unlock((pthread_mutex_t *)a1);
    }
    uint64_t v8 = (std::__shared_weak_count *)a2->n128_u64[1];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_224345CA0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void **std::vector<turi::ml_data_internal::row_data_block>::shrink_to_fit(void **result)
{
  unint64_t v1 = (unint64_t)*result;
  int64x2_t v2 = *(int64x2_t *)(result + 1);
  int64x2_t v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64((unint64_t)*result)), 4uLL);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  unint64_t v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    uint64_t v6 = (uint64_t *)result;
    uint64_t v7 = (uint64_t)(result + 2);
    uint64_t v14 = v7;
    if (v2.i64[0] == v1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v4);
    }
    unint64_t v10 = v8;
    uint64_t v11 = &v8[48 * v5];
    uint64_t v12 = v11;
    char v13 = &v8[48 * v9];
    std::vector<turi::ml_data_internal::row_data_block>::__swap_out_circular_buffer(v6, &v10);
    return std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer(&v10);
  }
  return result;
}

void sub_224345D70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

__n128 std::deque<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::shared_ptr<std::vector<turi::ml_data_internal::row_data_block>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 5);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 96 * a2;
    while (v3 != v7)
    {
      v3 -= 96;
      std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>::init(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  a1[5] = a2;
  a1[6] = 0;
  a1[11] = a3;
  a1[7] = a3;
  a1[8] = a3;
  unint64_t v8 = turi::sarray_reader<turi::ml_data_internal::row_data_block>::size(a2);
  if (v8 >= a4) {
    unint64_t v9 = a4;
  }
  else {
    unint64_t v9 = v8;
  }
  a1[9] = v9;
  a1[10] = a5;
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  if (v10 != *a1)
  {
    do
    {
      v10 -= 48;
      std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v10);
    }
    while (v10 != v11);
  }
  a1[1] = v11;
}

void std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      size_t v13 = 96 * ((96 * a2 - 96) / 0x60) + 96;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x2AAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x155555555555555) {
      unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    long long v15 = v12;
    uint64_t v16 = &v12[96 * v8];
    uint64_t v18 = &v12[96 * v11];
    size_t v14 = 96 * ((96 * a2 - 96) / 0x60) + 96;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::~__split_buffer(&v15);
  }
}

void sub_22434609C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 96) = 0;
      *(void *)(v7 - 8++*(_DWORD *)(result + 8) = 0;
      *(void *)(v7 - 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = 0;
      long long v8 = *(_OWORD *)(a3 - 96);
      a3 -= 96;
      *(_OWORD *)(v7 - 96) = v8;
      *(void *)(v7 - 8CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 + 24);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      long long v9 = *(_OWORD *)(a3 + 56);
      long long v10 = *(_OWORD *)(a3 + 72);
      uint64_t v11 = *(void *)(a3 + 88);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 + 40);
      *(void *)(v7 - ++*(_DWORD *)(result + 8) = v11;
      *(_OWORD *)(v7 - 24) = v10;
      *(_OWORD *)(v7 - 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v9;
      uint64_t v7 = *((void *)&v17 + 1) - 96;
      *((void *)&v17 + 1) -= 96;
    }
    while (a3 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::destroy[abi:ne180100](v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<turi::sarray_reader_buffer<turi::ml_data_internal::row_data_block>>::destroy[abi:ne180100](v4, i - 96);
  }
}

uint64_t std::__shared_ptr_pointer<turi::sarray_reader<turi::ml_data_internal::row_data_block> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::sarray_reader<turi::ml_data_internal::row_data_block> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
    }
    else {
      size_t v13 = 0;
    }
    size_t v14 = v13;
    char v15 = &v13[16 * v10];
    long long v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    long long v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(&v14);
  }
}

void sub_224346464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::shared_ptr<turi::ml_data_internal::ml_data_block>::shared_ptr[abi:ne180100]<turi::ml_data_internal::ml_data_block,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_224346580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<turi::ml_data_internal::ml_data_block>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<turi::ml_data_internal::ml_data_block *,std::shared_ptr<turi::ml_data_internal::ml_data_block>::__shared_ptr_default_delete<turi::ml_data_internal::ml_data_block,turi::ml_data_internal::ml_data_block>,std::allocator<turi::ml_data_internal::ml_data_block>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<turi::ml_data_internal::ml_data_block *,std::shared_ptr<turi::ml_data_internal::ml_data_block>::__shared_ptr_default_delete<turi::ml_data_internal::ml_data_block,turi::ml_data_internal::ml_data_block>,std::allocator<turi::ml_data_internal::ml_data_block>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<turi::ml_data_internal::ml_data_block>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v6 = (void **)(a2 + 144);
    std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = (void **)(a2 + 120);
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v3 = *(void **)(a2 + 96);
    if (v3)
    {
      *(void *)(a2 + 104) = v3;
      operator delete(v3);
    }
    uint64_t v6 = (void **)(a2 + 72);
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v4 = *(void **)(a2 + 32);
    if (v4)
    {
      *(void *)(a2 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    MEMORY[0x22A614FA0](a2, 0x1030C40EF01F384);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned long,std::weak_ptr<turi::ml_data_internal::ml_data_block>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::weak_ptr<turi::ml_data_internal::ml_data_block>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::weak_ptr<turi::ml_data_internal::ml_data_block>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::weak_ptr<turi::ml_data_internal::ml_data_block>>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (char *)operator new(0x38uLL);
    *((void *)v10 + 4) = *(void *)a3;
    *(_OWORD *)(v10 + 4CoreML::Specification::BayesianProbitRegressor::New(this, 0) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + ++*(_DWORD *)(result + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void turi::ml_data_internal::row_data_block::load(turi::ml_data_internal::row_data_block *this, turi::iarchive *a2)
{
  unint64_t v63 = 0;
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 3);
    uint64_t v6 = *(void **)(v4 + v5);
    unint64_t v63 = v6;
    *((void *)a2 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
    uint64_t v6 = v63;
  }
  v57[0] = v6;
  if (v6 != (void *)1)
  {
    v56[0] = v57;
    turi::ml_data_internal::row_data_block::load(turi::iarchive &)::$_0::operator()();
  }
  char v62 = 0;
  uint64_t v7 = *((void *)a2 + 2);
  if (v7)
  {
    uint64_t v8 = *((void *)a2 + 3);
    char v62 = *(unsigned char *)(v7 + v8);
    *((void *)a2 + 3) = v8 + 1;
    unint64_t v61 = 0;
LABEL_8:
    uint64_t v9 = *((void *)a2 + 3);
    unint64_t v10 = *(void *)(v7 + v9);
    unint64_t v61 = v10;
    *((void *)a2 + 3) = v9 + 8;
    goto LABEL_9;
  }
  std::istream::read();
  uint64_t v7 = *((void *)a2 + 2);
  unint64_t v61 = 0;
  if (v7) {
    goto LABEL_8;
  }
  std::istream::read();
  unint64_t v10 = v61;
LABEL_9:
  std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)this, v10);
  if (v62)
  {
    unint64_t v11 = v61;
    if (v61)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      do
      {
        unint64_t v15 = v11 + v12;
        if (v15 >= 0x80) {
          uint64_t v16 = 128;
        }
        else {
          uint64_t v16 = v15;
        }
        turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(a2, v16, (void *)(*(void *)this + v13));
        v14 += 128;
        unint64_t v11 = v61;
        v13 += 1024;
        v12 -= 128;
      }
      while (v14 < v61);
    }
    goto LABEL_56;
  }
  unint64_t v60 = 0;
  uint64_t v17 = *((void *)a2 + 2);
  if (v17)
  {
    uint64_t v18 = *((void *)a2 + 3);
    unint64_t v60 = *(void *)(v17 + v18);
    *((void *)a2 + 3) = v18 + 8;
    unint64_t v59 = 0;
LABEL_21:
    uint64_t v19 = *((void *)a2 + 3);
    unint64_t v20 = *(void *)(v17 + v19);
    unint64_t v58 = 0;
    unint64_t v59 = v20;
    *((void *)a2 + 3) = v19 + 8;
    goto LABEL_22;
  }
  std::istream::read();
  uint64_t v17 = *((void *)a2 + 2);
  unint64_t v59 = 0;
  if (v17) {
    goto LABEL_21;
  }
  std::istream::read();
  uint64_t v17 = *((void *)a2 + 2);
  unint64_t v58 = 0;
  if (!v17)
  {
    std::istream::read();
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v21 = *((void *)a2 + 3);
  unint64_t v58 = *(void *)(v17 + v21);
  *((void *)a2 + 3) = v21 + 8;
LABEL_23:
  memset(v57, 0, sizeof(v57));
  memset(v56, 0, sizeof(v56));
  turi::dense_bitset::load((turi::dense_bitset *)v57, a2);
  turi::dense_bitset::load((turi::dense_bitset *)v56, a2);
  __dst = 0;
  long long v54 = 0;
  uint64_t v55 = 0;
  if (v59 >= v58)
  {
    std::vector<unsigned long>::resize((uint64_t)&__dst, v58);
    uint64_t v23 = (unint64_t *)__dst;
    unint64_t v24 = v59;
    unint64_t v22 = (uint64_t *)(*(void *)this + 8 * (v61 - v59));
  }
  else
  {
    std::vector<unsigned long>::resize((uint64_t)&__dst, v59);
    unint64_t v22 = (uint64_t *)__dst;
    uint64_t v23 = (unint64_t *)(*(void *)this + 8 * (v61 - v58));
    unint64_t v24 = v59;
  }
  size_t v25 = 8 * v24;
  uint64_t v26 = *((void *)a2 + 2);
  if (v26)
  {
    memcpy(v22, (const void *)(v26 + *((void *)a2 + 3)), v25);
    *((void *)a2 + 3) += v25;
  }
  else
  {
    std::istream::read();
  }
  unint64_t v27 = v58;
  if (v58)
  {
    uint64_t v28 = 0;
    unint64_t v29 = 0;
    long long v30 = v23;
    do
    {
      unint64_t v31 = v27 + v28;
      if (v31 >= 0x80) {
        uint64_t v32 = 128;
      }
      else {
        uint64_t v32 = v31;
      }
      turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(a2, v32, v30);
      v29 += 128;
      unint64_t v27 = v58;
      v30 += 128;
      v28 -= 128;
    }
    while (v29 < v58);
  }
  std::string __p = 0;
  double v51 = 0;
  uint64_t v52 = 0;
  std::vector<unsigned long>::resize((uint64_t)&__p, v60);
  unint64_t v33 = v60;
  if (v60)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    do
    {
      unint64_t v37 = v33 + v34;
      if (v37 >= 0x80) {
        uint64_t v38 = 128;
      }
      else {
        uint64_t v38 = v37;
      }
      turi::integer_pack::frame_of_reference_decode_128<turi::iarchive>(a2, v38, (char *)__p + v35);
      v36 += 128;
      unint64_t v33 = v60;
      v35 += 1024;
      v34 -= 128;
    }
    while (v36 < v60);
  }
  uint64_t v39 = (uint64_t *)__p;
  unint64_t v40 = v61;
  if (v61)
  {
    unint64_t v41 = 0;
    unint64_t v42 = 0;
    unint64_t v43 = *(double **)this;
    do
    {
      if ((*(void *)((char *)v57[0] + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v42))
      {
        uint64_t v44 = *v39++;
        *(void *)unint64_t v43 = v44;
      }
      else
      {
        if ((*(void *)((char *)v56[0] + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v41))
        {
          unint64_t v45 = *v23++;
          *unint64_t v43 = (double)v45;
          unint64_t v40 = v61;
        }
        else
        {
          uint64_t v46 = *v22++;
          *(void *)unint64_t v43 = v46;
        }
        ++v41;
      }
      ++v42;
      ++v43;
    }
    while (v42 < v40);
    uint64_t v39 = (uint64_t *)__p;
  }
  if (v39)
  {
    double v51 = v39;
    operator delete(v39);
  }
  if (__dst)
  {
    long long v54 = __dst;
    operator delete(__dst);
  }
  free(v56[0]);
  free(v57[0]);
LABEL_56:
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a2, (uint64_t *)this + 3);
  v57[0] = 0;
  uint64_t v47 = *((void *)a2 + 2);
  if (v47)
  {
    uint64_t v48 = *((void *)a2 + 3);
    uint64_t v49 = *(void **)(v47 + v48);
    v57[0] = v49;
    *((void *)a2 + 3) = v48 + 8;
  }
  else
  {
    std::istream::read();
    uint64_t v49 = v57[0];
  }
  v56[0] = v49;
  if (v49 != (void *)0x259E2E6D7A32C5C0)
  {
    __dst = v56;
    turi::ml_data_internal::row_data_block::load(turi::iarchive &)::$_1::operator()();
  }
}

void turi::ml_data_internal::row_data_block::load(turi::iarchive &)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"version", 7);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", "operator()", 26, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::ml_data_internal::row_data_block::load(turi::iarchive &)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224346DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::row_data_block::load(turi::iarchive &)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"read_check", 10);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ROW_READ_CHECKSUM", 17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", "operator()", 141, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::ml_data_internal::row_data_block::load(turi::iarchive &)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224347070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::row_data_block::save(turi::ml_data_internal::row_data_block *this, turi::oarchive *a2)
{
  v129[1] = 1;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v4)
    {
      size_t v72 = 2 * v4 + 16;
      *((void *)a2 + 5) = v72;
      double v73 = (char **)*((void *)a2 + 2);
      if (v73)
      {
        uint64_t v5 = *v73;
        size_t v74 = v73[1] - *v73;
        BOOL v75 = v72 >= v74;
        std::vector<char>::size_type v76 = v72 - v74;
        if (v76 != 0 && v75)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v76);
          uint64_t v5 = (char *)**((void **)a2 + 2);
        }
        else if (!v75)
        {
          v73[1] = &v5[v72];
        }
      }
      else
      {
        uint64_t v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v72, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v5;
    }
    else
    {
      uint64_t v5 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v5[*((void *)a2 + 4)] = 1;
    *((void *)a2 + 4) += 8;
  }
  double v127 = 0;
  float v128 = 0;
  v129[0] = 0;
  std::string __p = 0;
  double v125 = 0;
  double v126 = 0;
  std::vector<unsigned long>::reserve((void **)&v127, (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  std::vector<double>::reserve(&__p, (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  turi::dense_bitset::dense_bitset((turi::dense_bitset *)v122, (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  if (v123 >= 1) {
    bzero(v122[0], 8 * (v123 - ((v123 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
  }
  uint64_t v6 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = *(void *)(v6 + 8 * v7);
      if (HIDWORD(v8))
      {
        uint64_t v9 = v125;
        if (v125 >= v126)
        {
          uint64_t v13 = (char *)__p;
          uint64_t v14 = (v125 - (unsigned char *)__p) >> 3;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v126 - (unsigned char *)__p;
          if ((v126 - (unsigned char *)__p) >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v126, v17);
            uint64_t v13 = (char *)__p;
            uint64_t v9 = v125;
          }
          else
          {
            uint64_t v18 = 0;
          }
          size_t v25 = &v18[8 * v14];
          *(void *)size_t v25 = *(void *)(v6 + 8 * v7);
          unint64_t v10 = v25 + 8;
          while (v9 != v13)
          {
            uint64_t v26 = *((void *)v9 - 1);
            v9 -= 8;
            *((void *)v25 - 1) = v26;
            v25 -= 8;
          }
          std::string __p = v25;
          double v125 = v10;
          double v126 = &v18[8 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *(void *)double v125 = v8;
          unint64_t v10 = v9 + 8;
        }
        double v125 = v10;
      }
      else
      {
        unint64_t v11 = v128;
        if ((unint64_t)v128 >= v129[0])
        {
          uint64_t v19 = v127;
          uint64_t v20 = (v128 - v127) >> 3;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v129[0] - (void)v127;
          if ((uint64_t)(v129[0] - (void)v127) >> 2 > v21) {
            unint64_t v21 = v22 >> 2;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v129, v23);
            uint64_t v19 = v127;
            unint64_t v11 = v128;
          }
          else
          {
            unint64_t v24 = 0;
          }
          unint64_t v27 = &v24[8 * v20];
          *(void *)unint64_t v27 = v8;
          uint64_t v12 = v27 + 8;
          while (v11 != v19)
          {
            uint64_t v28 = *((void *)v11 - 1);
            v11 -= 8;
            *((void *)v27 - 1) = v28;
            v27 -= 8;
          }
          double v127 = v27;
          float v128 = v12;
          v129[0] = &v24[8 * v23];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(void *)float v128 = v8;
          uint64_t v12 = v11 + 8;
        }
        float v128 = v12;
        *(void *)((char *)v122[0] + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
      }
      ++v7;
      uint64_t v6 = *(void *)this;
    }
    while (v7 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  }
  double v119 = 0;
  double v120 = 0;
  double v121 = 0;
  std::vector<unsigned long>::reserve(&v119, (v125 - (unsigned char *)__p) >> 3);
  turi::dense_bitset::dense_bitset((turi::dense_bitset *)v117, (v125 - (unsigned char *)__p) >> 3);
  if (v118 >= 1) {
    bzero(v117[0], 8 * (v118 - ((v118 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
  }
  long long v30 = (double *)__p;
  unint64_t v29 = v125;
  if (v125 == __p)
  {
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v31 = 0;
    unint64_t v32 = 0;
    do
    {
      double v33 = v30[v31];
      if (v33 == (double)(unint64_t)v33)
      {
        unint64_t v34 = (unint64_t)v33;
        uint64_t v35 = v120;
        if (v120 >= v121)
        {
          unint64_t v37 = (unint64_t *)v119;
          uint64_t v38 = ((char *)v120 - (unsigned char *)v119) >> 3;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v40 = (char *)v121 - (unsigned char *)v119;
          if (((char *)v121 - (unsigned char *)v119) >> 2 > v39) {
            unint64_t v39 = v40 >> 2;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v121, v41);
            unint64_t v37 = (unint64_t *)v119;
            uint64_t v35 = v120;
          }
          else
          {
            unint64_t v42 = 0;
          }
          unint64_t v43 = (unint64_t *)&v42[8 * v38];
          *unint64_t v43 = v34;
          unint64_t v36 = v43 + 1;
          while (v35 != v37)
          {
            unint64_t v44 = *--v35;
            *--unint64_t v43 = v44;
          }
          double v119 = v43;
          double v120 = v36;
          double v121 = (unint64_t *)&v42[8 * v41];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *double v120 = v34;
          unint64_t v36 = v35 + 1;
        }
        double v120 = v36;
        *(void *)((char *)v117[0] + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
        unint64_t v29 = v125;
      }
      else
      {
        v30[v32++] = v33;
      }
      ++v31;
      long long v30 = (double *)__p;
    }
    while (v31 < (v29 - (unsigned char *)__p) >> 3);
  }
  std::vector<double>::resize((uint64_t)&__p, v32);
  BOOL v46 = v125 == __p && v120 == v119;
  BOOL v116 = v46;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v47 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v47)
    {
      size_t v77 = 2 * v47 + 2;
      *((void *)a2 + 5) = v77;
      unint64_t v78 = (void *)*((void *)a2 + 2);
      if (v78)
      {
        uint64_t v48 = (unsigned char *)*v78;
        size_t v79 = v78[1] - *v78;
        BOOL v80 = v77 >= v79;
        std::vector<char>::size_type v81 = v77 - v79;
        if (v81 != 0 && v80)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v81);
          uint64_t v48 = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v80)
        {
          v78[1] = &v48[v77];
        }
      }
      else
      {
        uint64_t v48 = malloc_type_realloc(*((void **)a2 + 3), v77, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v48;
    }
    else
    {
      uint64_t v48 = (unsigned char *)*((void *)a2 + 3);
    }
    v48[(*((void *)a2 + 4))++] = v116;
  }
  unint64_t v115 = (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v49 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v49)
    {
      size_t v82 = 2 * v49 + 16;
      *((void *)a2 + 5) = v82;
      uint64_t v83 = (char **)*((void *)a2 + 2);
      if (v83)
      {
        uint64_t v50 = *v83;
        size_t v84 = v83[1] - *v83;
        BOOL v85 = v82 >= v84;
        std::vector<char>::size_type v86 = v82 - v84;
        if (v86 != 0 && v85)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v86);
          uint64_t v50 = (char *)**((void **)a2 + 2);
        }
        else if (!v85)
        {
          v83[1] = &v50[v82];
        }
      }
      else
      {
        uint64_t v50 = (char *)malloc_type_realloc(*((void **)a2 + 3), v82, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v50;
    }
    else
    {
      uint64_t v50 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v50[*((void *)a2 + 4)] = v115;
    *((void *)a2 + 4) += 8;
  }
  if (v116)
  {
    if (v115)
    {
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      for (unint64_t i = 0; i < v115; i += 128)
      {
        turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>();
        v52 += 1024;
        v51 -= 128;
      }
    }
  }
  else
  {
    unint64_t v114 = (v128 - v127) >> 3;
    if (*(void *)a2)
    {
      std::ostream::write();
    }
    else
    {
      unint64_t v54 = *((void *)a2 + 5);
      if (*((void *)a2 + 4) + 8 > v54)
      {
        size_t v92 = 2 * v54 + 16;
        *((void *)a2 + 5) = v92;
        uint64_t v93 = (char **)*((void *)a2 + 2);
        if (v93)
        {
          uint64_t v55 = *v93;
          size_t v94 = v93[1] - *v93;
          BOOL v95 = v92 >= v94;
          std::vector<char>::size_type v96 = v92 - v94;
          if (v96 != 0 && v95)
          {
            std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v96);
            uint64_t v55 = (char *)**((void **)a2 + 2);
          }
          else if (!v95)
          {
            v93[1] = &v55[v92];
          }
        }
        else
        {
          uint64_t v55 = (char *)malloc_type_realloc(*((void **)a2 + 3), v92, 0xF6EA6B1uLL);
        }
        *((void *)a2 + 3) = v55;
      }
      else
      {
        uint64_t v55 = (char *)*((void *)a2 + 3);
      }
      *(void *)&v55[*((void *)a2 + 4)] = v114;
      *((void *)a2 + 4) += 8;
    }
    uint64_t v113 = (v125 - (unsigned char *)__p) >> 3;
    if (*(void *)a2)
    {
      std::ostream::write();
    }
    else
    {
      unint64_t v56 = *((void *)a2 + 5);
      if (*((void *)a2 + 4) + 8 > v56)
      {
        size_t v97 = 2 * v56 + 16;
        *((void *)a2 + 5) = v97;
        uint64_t v98 = (char **)*((void *)a2 + 2);
        if (v98)
        {
          unint64_t v57 = *v98;
          size_t v99 = v98[1] - *v98;
          BOOL v100 = v97 >= v99;
          std::vector<char>::size_type v101 = v97 - v99;
          if (v101 != 0 && v100)
          {
            std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v101);
            unint64_t v57 = (char *)**((void **)a2 + 2);
          }
          else if (!v100)
          {
            v98[1] = &v57[v97];
          }
        }
        else
        {
          unint64_t v57 = (char *)malloc_type_realloc(*((void **)a2 + 3), v97, 0xF6EA6B1uLL);
        }
        *((void *)a2 + 3) = v57;
      }
      else
      {
        unint64_t v57 = (char *)*((void *)a2 + 3);
      }
      *(void *)&v57[*((void *)a2 + 4)] = v113;
      *((void *)a2 + 4) += 8;
    }
    unint64_t v112 = ((char *)v120 - (unsigned char *)v119) >> 3;
    if (*(void *)a2)
    {
      std::ostream::write();
    }
    else
    {
      unint64_t v58 = *((void *)a2 + 5);
      if (*((void *)a2 + 4) + 8 > v58)
      {
        size_t v102 = 2 * v58 + 16;
        *((void *)a2 + 5) = v102;
        uint64_t v103 = (char **)*((void *)a2 + 2);
        if (v103)
        {
          unint64_t v59 = *v103;
          size_t v104 = v103[1] - *v103;
          BOOL v105 = v102 >= v104;
          std::vector<char>::size_type v106 = v102 - v104;
          if (v106 != 0 && v105)
          {
            std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v106);
            unint64_t v59 = (char *)**((void **)a2 + 2);
          }
          else if (!v105)
          {
            v103[1] = &v59[v102];
          }
        }
        else
        {
          unint64_t v59 = (char *)malloc_type_realloc(*((void **)a2 + 3), v102, 0xF6EA6B1uLL);
        }
        *((void *)a2 + 3) = v59;
      }
      else
      {
        unint64_t v59 = (char *)*((void *)a2 + 3);
      }
      *(void *)&v59[*((void *)a2 + 4)] = v112;
      *((void *)a2 + 4) += 8;
    }
    turi::dense_bitset::save((const void **)v122, a2);
    turi::dense_bitset::save((const void **)v117, a2);
    unint64_t v60 = __p;
    size_t v61 = 8 * v113;
    if (*(void *)a2)
    {
      std::ostream::write();
    }
    else
    {
      size_t v62 = *((void *)a2 + 5);
      if (*((void *)a2 + 4) + v61 > v62)
      {
        size_t v107 = 2 * (v62 + v61);
        *((void *)a2 + 5) = v107;
        double v108 = (char **)*((void *)a2 + 2);
        if (v108)
        {
          unint64_t v63 = *v108;
          size_t v109 = v108[1] - *v108;
          BOOL v110 = v107 >= v109;
          std::vector<char>::size_type v111 = v107 - v109;
          if (v111 != 0 && v110)
          {
            std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v111);
            unint64_t v63 = (char *)**((void **)a2 + 2);
          }
          else if (!v110)
          {
            v108[1] = &v63[v107];
          }
        }
        else
        {
          unint64_t v63 = (char *)malloc_type_realloc(*((void **)a2 + 3), v107, 0xF6EA6B1uLL);
        }
        *((void *)a2 + 3) = v63;
      }
      else
      {
        unint64_t v63 = (char *)*((void *)a2 + 3);
      }
      memcpy(&v63[*((void *)a2 + 4)], v60, v61);
      *((void *)a2 + 4) += v61;
    }
    if (v112)
    {
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      for (unint64_t j = 0; j < v112; j += 128)
      {
        turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>();
        v65 += 1024;
        v64 -= 128;
      }
    }
    if (v114)
    {
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      for (unint64_t k = 0; k < v114; k += 128)
      {
        turi::integer_pack::frame_of_reference_encode_128<turi::oarchive>();
        v68 += 1024;
        v67 -= 128;
      }
    }
  }
  turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec((uint64_t)a2, (uint64_t *)this + 3);
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v70 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v70)
    {
      size_t v87 = 2 * v70 + 16;
      *((void *)a2 + 5) = v87;
      std::string v88 = (char **)*((void *)a2 + 2);
      if (v88)
      {
        unint64_t v71 = *v88;
        size_t v89 = v88[1] - *v88;
        BOOL v90 = v87 >= v89;
        std::vector<char>::size_type v91 = v87 - v89;
        if (v91 != 0 && v90)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v91);
          unint64_t v71 = (char *)**((void **)a2 + 2);
        }
        else if (!v90)
        {
          v88[1] = &v71[v87];
        }
      }
      else
      {
        unint64_t v71 = (char *)malloc_type_realloc(*((void **)a2 + 3), v87, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v71;
    }
    else
    {
      unint64_t v71 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v71[*((void *)a2 + 4)] = 0x259E2E6D7A32C5C0;
    *((void *)a2 + 4) += 8;
  }
  free(v117[0]);
  if (v119)
  {
    double v120 = (unint64_t *)v119;
    operator delete(v119);
  }
  free(v122[0]);
  if (__p)
  {
    double v125 = (char *)__p;
    operator delete(__p);
  }
  if (v127)
  {
    float v128 = v127;
    operator delete(v127);
  }
}

void sub_224347CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  free(a16);
  if (__p) {
    operator delete(__p);
  }
  free(a22);
  if (a25) {
    operator delete(a25);
  }
  uint64_t v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(void *)(v26 - 112) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::ml_data_internal::fill_row_buffer_from_column_buffer(uint64_t a1, char **a2, uint64_t a3, void *a4, const turi::flexible_type *a5, int a6, char a7, int a8)
{
  v418[20] = *MEMORY[0x263EF8340];
  uint64_t v8 = a4[1] - *a4;
  if (!v8) {
    return 0;
  }
  uint64_t v11 = a3;
  uint64_t v13 = (void *)a1;
  unint64_t v14 = v8 / 24;
  uint64_t v15 = *(void *)(a3 + 56);
  if (v14 <= 1) {
    unint64_t v14 = 1;
  }
  uint64_t v16 = (uint64_t *)(*a4 + 8);
  while (*(_DWORD *)(*(void *)v15 + 24) == 5)
  {
    v16 += 3;
    v15 += 16;
    if (!--v14) {
      return 0;
    }
  }
  uint64_t v18 = *(v16 - 1);
  uint64_t v17 = *v16;
  uint64_t v19 = *v16 - v18;
  if (v19 == -16) {
    return 0;
  }
  unint64_t v22 = v19 >> 4;
  std::vector<unsigned long>::resize(a1, v19 >> 4);
  v407 = 0;
  v408 = 0;
  uint64_t v409 = 0;
  v404 = 0;
  v405 = 0;
  uint64_t v406 = 0;
  memset(&v403, 0, sizeof(v403));
  std::string __p = 0;
  v401 = 0;
  v402 = 0;
  a2[1] = *a2;
  if (*(unsigned char *)(v11 + 2)) {
    std::vector<turi::ml_data_internal::entry_value>::reserve((void **)a2, *(void *)(v11 + 8) * v22);
  }
  if (v17 == v18)
  {
    unint64_t v20 = 0;
LABEL_555:
    if (__p)
    {
      v401 = (char *)__p;
      operator delete(__p);
    }
    if (v403.__begin_)
    {
      v403.__end_ = v403.__begin_;
      operator delete(v403.__begin_);
    }
    if (v404)
    {
      v405 = v404;
      operator delete(v404);
    }
    if (v407)
    {
      v408 = v407;
      operator delete(v407);
    }
    return v20;
  }
  int v383 = a8;
  int v384 = a6;
  unint64_t v20 = 0;
  unint64_t v23 = a2 + 2;
  std::string::size_type v376 = *(void *)(MEMORY[0x263F8C2C8] + 24);
  std::string::size_type v377 = *MEMORY[0x263F8C2C8];
  if (v22 <= 1) {
    uint64_t v24 = 1;
  }
  else {
    uint64_t v24 = v22;
  }
  uint64_t v378 = v24;
  uint64_t v25 = 0;
  uint64_t v385 = v11;
  v379 = v13;
  while (1)
  {
    unint64_t v27 = *a2;
    uint64_t v26 = a2[1];
    uint64_t v28 = (v26 - *a2) >> 3;
    *(void *)(*v13 + 8 * v25) = v28;
    if (*(unsigned char *)(v11 + 2))
    {
      uint64_t v28 = -1;
    }
    else
    {
      if ((unint64_t)v26 >= *v23)
      {
        if ((unint64_t)(v28 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v30 = *v23 - (void)v27;
        uint64_t v31 = v30 >> 2;
        if (v30 >> 2 <= (unint64_t)(v28 + 1)) {
          uint64_t v31 = v28 + 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v31;
        }
        if (v32)
        {
          double v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v32);
          uint64_t v26 = a2[1];
        }
        else
        {
          double v33 = 0;
        }
        unint64_t v34 = &v33[8 * v28];
        uint64_t v35 = *a2;
        unint64_t v36 = v34;
        if (v26 != *a2)
        {
          do
          {
            uint64_t v37 = *((void *)v26 - 1);
            v26 -= 8;
            *((void *)v36 - 1) = v37;
            v36 -= 8;
          }
          while (v26 != v35);
          uint64_t v26 = *a2;
        }
        unint64_t v29 = v34 + 8;
        *a2 = v36;
        a2[1] = v34 + 8;
        a2[2] = &v33[8 * v32];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        unint64_t v29 = v26 + 8;
      }
      a2[1] = v29;
    }
    uint64_t v381 = v28;
    unint64_t v382 = v20;
    if (*(void *)(v11 + 48)) {
      break;
    }
    unint64_t v387 = 0;
LABEL_547:
    if (!*(unsigned char *)(v11 + 2)) {
      *(void *)&(*a2)[8 * v381] = ((a2[1] - *a2) >> 3) - v381;
    }
    unint64_t v20 = v382;
    if (v382 <= v387) {
      unint64_t v20 = v387;
    }
    ++v25;
    uint64_t v13 = v379;
    if (v25 == v378) {
      goto LABEL_555;
    }
  }
  unint64_t v38 = 0;
  uint64_t v386 = v25;
  unint64_t v387 = 0;
  while (2)
  {
    std::string::size_type v39 = *(void *)(v11 + 56) + 16 * v38;
    std::string::size_type v391 = *(void *)v39;
    int v40 = *(_DWORD *)(*(void *)v39 + 24);
    unint64_t v41 = (int *)(*(void *)(*a4 + 24 * v38) + 16 * v25);
    switch(v40)
    {
      case 0:
        if (*((unsigned char *)v41 + 12) != 7)
        {
          switch(*((unsigned char *)v41 + 12))
          {
            case 0:
              double v61 = (double)*(uint64_t *)v41;
              goto LABEL_442;
            case 1:
              double v61 = *(double *)v41;
              goto LABEL_442;
            case 2:
              uint64_t v199 = *(void *)v41;
              double v200 = (char **)(*(void *)v41 + 8);
              size_t __idx = 0;
              double v201 = (char *)v200;
              if (*(char *)(v199 + 31) < 0) {
                double v201 = *v200;
              }
              std::string::basic_string[abi:ne180100]<0>(&__str, v201);
              double v202 = std::stod(&__str, &__idx);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (*(char *)(v199 + 31) < 0) {
                uint64_t v203 = *(void *)(v199 + 16);
              }
              else {
                uint64_t v203 = *(unsigned __int8 *)(v199 + 31);
              }
              if (__idx != v203)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v366 = std::string::append(&v410, " cannot be interpreted as a float");
                long long v367 = *(_OWORD *)&v366->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v366->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v367;
                v366->__r_.__value_.__l.__size_ = 0;
                v366->__r_.__value_.__r.__words[2] = 0;
                v366->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, &__str);
                __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              float v303 = v202;
              double v61 = v303;
              goto LABEL_442;
            case 3:
              uint64_t v208 = *(void *)v41;
              memset(&__str, 0, sizeof(__str));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v208 + 8), *(void *)(v208 + 16), (uint64_t)(*(void *)(v208 + 16) - *(void *)(v208 + 8)) >> 3);
              turi::flexible_type_fail(0);
              double v61 = 0.0;
              if (__str.__r_.__value_.__r.__words[0])
              {
                __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              goto LABEL_442;
            case 4:
              uint64_t v197 = *(void *)v41;
              memset(&__str, 0, sizeof(__str));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v197 + 8), *(uint64_t **)(v197 + 16), (uint64_t)(*(void *)(v197 + 16) - *(void *)(v197 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v410.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v410);
              goto LABEL_293;
            case 5:
              uint64_t v198 = *(void *)v41;
              memset(&__str, 0, sizeof(__str));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v198 + 8), *(uint64_t **)(v198 + 16), (uint64_t)(*(void *)(v198 + 16) - *(void *)(v198 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v410.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v410);
              goto LABEL_293;
            case 6:
              double v61 = (double)v41[2] / 1000000.0 + (double)((uint64_t)(*(void *)v41 << 8) >> 8);
              goto LABEL_442;
            case 8:
              uint64_t v204 = *(void *)v41;
              double v205 = *(atomic_uint **)(*(void *)v41 + 16);
              uint64_t v395 = *(void *)(*(void *)v41 + 8);
              v396 = (std::__shared_weak_count *)v205;
              if (v205) {
                atomic_fetch_add_explicit(v205 + 2, 1u, memory_order_relaxed);
              }
              long long v206 = *(_OWORD *)(v204 + 24);
              long long v207 = *(_OWORD *)(v204 + 56);
              long long v398 = *(_OWORD *)(v204 + 40);
              long long v399 = v207;
              long long v397 = v206;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((atomic_uint **)&v396);
LABEL_293:
              double v61 = 0.0;
              goto LABEL_442;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(void *)v41 + 8);
              turi::flexible_type_fail(0);
              if (v414)
              {
                v415 = v414;
                operator delete(v414);
              }
              if (__str.__r_.__value_.__r.__words[2])
              {
                std::string::size_type v413 = __str.__r_.__value_.__r.__words[2];
                operator delete((void *)__str.__r_.__value_.__r.__words[2]);
              }
              double v61 = 0.0;
              if (__str.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
              }
LABEL_442:
              if (v384)
              {
                *(double *)&__str.__r_.__value_.__l.__data_ = v61;
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v404, (char *)&__str, (uint64_t)&__str.__r_.__value_.__l.__size_, 1uLL);
                turi::ml_data_internal::column_statistics::update_numeric_statistics(*(void *)(v391 + 48), (uint64_t)a5, (uint64_t)&v404);
              }
              goto LABEL_444;
            default:
              uint64_t result = turi::flexible_type_fail(0);
              goto LABEL_601;
          }
        }
        if (v383)
        {
          if (v383 != 2)
          {
            if (v383 == 1)
            {
              __str.__r_.__value_.__r.__words[0] = *(void *)(v11 + 56) + 16 * v38;
              turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_4::operator() const(void)::{lambda(void)#1}::operator()();
            }
            turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_5::operator() const(unsigned long)::{lambda(void)#1}::operator()();
          }
          double v61 = NAN;
        }
        else
        {
          double v61 = turi::ml_data_internal::column_statistics::mean(*(turi::ml_data_internal::column_statistics **)(v391 + 48), 0);
        }
LABEL_444:
        v305 = (double *)a2[1];
        unint64_t v304 = (unint64_t)a2[2];
        if ((unint64_t)v305 >= v304)
        {
          uint64_t v306 = ((char *)v305 - *a2) >> 3;
          if ((unint64_t)(v306 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v307 = v304 - (void)*a2;
          uint64_t v308 = v307 >> 2;
          if (v307 >> 2 <= (unint64_t)(v306 + 1)) {
            uint64_t v308 = v306 + 1;
          }
          if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v309 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v309 = v308;
          }
          if (v309) {
            v310 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v309);
          }
          else {
            v310 = 0;
          }
          v311 = (double *)&v310[8 * v306];
          double *v311 = v61;
          unint64_t v60 = v311 + 1;
          v313 = *a2;
          v312 = a2[1];
          if (v312 != *a2)
          {
            do
            {
              uint64_t v314 = *((void *)v312 - 1);
              v312 -= 8;
              *((void *)v311-- - 1) = v314;
            }
            while (v312 != v313);
            v312 = *a2;
          }
          *a2 = (char *)v311;
          a2[1] = (char *)v60;
          a2[2] = &v310[8 * v309];
          if (v312) {
            operator delete(v312);
          }
        }
        else
        {
          double *v305 = v61;
          unint64_t v60 = v305 + 1;
        }
        ++v387;
        goto LABEL_461;
      case 1:
        size_t v62 = *(void ***)(v391 + 32);
        if (a7) {
          unint64_t v63 = turi::ml_data_internal::column_indexer::immutable_map_value_to_index(v62, (atomic_ullong **)v41);
        }
        else {
          unint64_t v63 = turi::ml_data_internal::column_indexer::map_value_to_index((turi::ml_data_internal::column_indexer *)v62, a5, (atomic_ullong **)v41);
        }
        std::string::size_type v109 = v63;
        std::vector<char>::size_type v111 = (unint64_t *)a2[1];
        unint64_t v110 = (unint64_t)a2[2];
        if ((unint64_t)v111 >= v110)
        {
          uint64_t v113 = ((char *)v111 - *a2) >> 3;
          if ((unint64_t)(v113 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v114 = v110 - (void)*a2;
          uint64_t v115 = v114 >> 2;
          if (v114 >> 2 <= (unint64_t)(v113 + 1)) {
            uint64_t v115 = v113 + 1;
          }
          if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v116 = v115;
          }
          if (v116) {
            double v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v116);
          }
          else {
            double v117 = 0;
          }
          double v167 = (std::string::size_type *)&v117[8 * v113];
          std::string::size_type *v167 = v109;
          unint64_t v112 = (char *)(v167 + 1);
          double v169 = *a2;
          double v168 = a2[1];
          if (v168 != *a2)
          {
            do
            {
              std::string::size_type v170 = *((void *)v168 - 1);
              v168 -= 8;
              *--double v167 = v170;
            }
            while (v168 != v169);
            double v168 = *a2;
          }
          *a2 = (char *)v167;
          a2[1] = v112;
          a2[2] = &v117[8 * v116];
          if (v168) {
            operator delete(v168);
          }
        }
        else
        {
          *std::vector<char>::size_type v111 = v63;
          unint64_t v112 = (char *)(v111 + 1);
        }
        ++v387;
        a2[1] = v112;
        if (v384)
        {
          __str.__r_.__value_.__r.__words[0] = v109;
          std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v407, (char *)&__str, (uint64_t)&__str.__r_.__value_.__l.__size_, 1uLL);
          turi::ml_data_internal::column_statistics::update_categorical_statistics(*(void **)(v391 + 48), (uint64_t)a5, (unint64_t **)&v407);
        }
        goto LABEL_462;
      case 2:
      case 7:
        int v42 = *((unsigned __int8 *)v41 + 12);
        if (v42 != 3)
        {
          if (v42 != 9)
          {
            if (v42 != 7) {
              turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_7::operator()();
            }
            uint64_t v43 = *(void *)(v391 + 72);
            if (v43)
            {
              if (v383 && v383 != 2)
              {
                if (v383 == 1)
                {
                  __str.__r_.__value_.__r.__words[0] = *(void *)(v11 + 56) + 16 * v38;
                  turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_4::operator() const(void)::{lambda(void)#1}::operator()();
                }
                turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_5::operator() const(unsigned long)::{lambda(void)#1}::operator()();
              }
              unint64_t v44 = 0;
              v387 += v43;
              do
              {
                if (v383 == 2) {
                  double v45 = NAN;
                }
                else {
                  double v45 = turi::ml_data_internal::column_statistics::mean(*(turi::ml_data_internal::column_statistics **)(v391 + 48), v44);
                }
                unint64_t v47 = (double *)a2[1];
                unint64_t v46 = (unint64_t)a2[2];
                if ((unint64_t)v47 >= v46)
                {
                  uint64_t v49 = ((char *)v47 - *a2) >> 3;
                  if ((unint64_t)(v49 + 1) >> 61) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v50 = v46 - (void)*a2;
                  uint64_t v51 = v50 >> 2;
                  if (v50 >> 2 <= (unint64_t)(v49 + 1)) {
                    uint64_t v51 = v49 + 1;
                  }
                  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v52 = v51;
                  }
                  if (v52) {
                    double v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v52);
                  }
                  else {
                    double v53 = 0;
                  }
                  unint64_t v54 = (double *)&v53[8 * v49];
                  *unint64_t v54 = v45;
                  uint64_t v48 = (char *)(v54 + 1);
                  unint64_t v56 = *a2;
                  uint64_t v55 = a2[1];
                  if (v55 != *a2)
                  {
                    do
                    {
                      uint64_t v57 = *((void *)v55 - 1);
                      v55 -= 8;
                      *((void *)v54-- - 1) = v57;
                    }
                    while (v55 != v56);
                    uint64_t v55 = *a2;
                  }
                  *a2 = (char *)v54;
                  a2[1] = v48;
                  a2[2] = &v53[8 * v52];
                  if (v55) {
                    operator delete(v55);
                  }
                }
                else
                {
                  *unint64_t v47 = v45;
                  uint64_t v48 = (char *)(v47 + 1);
                }
                a2[1] = v48;
                ++v44;
              }
              while (v44 != v43);
            }
            goto LABEL_462;
          }
          uint64_t v118 = *(atomic_ullong **)v41;
          memset(&__str, 0, sizeof(__str));
          memset(&v410, 0, sizeof(v410));
          size_t __idx = 0;
          size_t v393 = 0;
          uint64_t v394 = 0;
          turi::flexible_type_impl::ndarray<double>::ndarray(&v395, (uint64_t)&__str, (uint64_t)&v410, (uint64_t)&__idx, 0);
          if (__idx)
          {
            size_t v393 = __idx;
            operator delete((void *)__idx);
          }
          if (v410.__r_.__value_.__r.__words[0])
          {
            v410.__r_.__value_.__l.__size_ = v410.__r_.__value_.__r.__words[0];
            operator delete(v410.__r_.__value_.__l.__data_);
          }
          if (__str.__r_.__value_.__r.__words[0])
          {
            __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          double v119 = v118 + 1;
          if (!turi::flexible_type_impl::ndarray<double>::is_full(v118 + 1)
            || !turi::flexible_type_impl::ndarray<double>::has_canonical_stride((uint64_t)(v118 + 1)))
          {
            turi::flexible_type_impl::ndarray<double>::canonicalize((uint64_t **)v118 + 1, (uint64_t **)&__str);
            double v119 = (uint64_t *)turi::flexible_type_impl::ndarray<double>::operator=((uint64_t)&v395, (long long *)&__str);
            if (v414)
            {
              v415 = v414;
              operator delete(v414);
            }
            if (__str.__r_.__value_.__r.__words[2])
            {
              std::string::size_type v413 = __str.__r_.__value_.__r.__words[2];
              operator delete((void *)__str.__r_.__value_.__r.__words[2]);
            }
            if (__str.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
            }
          }
          double v121 = (uint64_t *)v119[2];
          double v120 = (uint64_t *)v119[3];
          if (v120 != v121)
          {
            if (*v119)
            {
              uint64_t v122 = 1;
              do
              {
                uint64_t v123 = *v121++;
                v122 *= v123;
              }
              while (v121 != v120);
              if (v122)
              {
                uint64_t v124 = 0;
                v387 += v122;
                double v125 = a2[1];
                do
                {
                  uint64_t v126 = *(void *)(*(void *)*v119 + 8 * (v119[8] + v124));
                  if ((unint64_t)v125 >= *v23)
                  {
                    uint64_t v127 = (v125 - *a2) >> 3;
                    if ((unint64_t)(v127 + 1) >> 61) {
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v128 = *v23 - (void)*a2;
                    uint64_t v129 = v128 >> 2;
                    if (v128 >> 2 <= (unint64_t)(v127 + 1)) {
                      uint64_t v129 = v127 + 1;
                    }
                    if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v130 = v129;
                    }
                    if (v130) {
                      double v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v130);
                    }
                    else {
                      double v131 = 0;
                    }
                    double v132 = &v131[8 * v127];
                    *(void *)double v132 = v126;
                    double v125 = v132 + 8;
                    double v134 = *a2;
                    double v133 = a2[1];
                    if (v133 != *a2)
                    {
                      do
                      {
                        uint64_t v135 = *((void *)v133 - 1);
                        v133 -= 8;
                        *((void *)v132 - 1) = v135;
                        v132 -= 8;
                      }
                      while (v133 != v134);
                      double v133 = *a2;
                    }
                    *a2 = v132;
                    a2[1] = v125;
                    a2[2] = &v131[8 * v130];
                    if (v133) {
                      operator delete(v133);
                    }
                  }
                  else
                  {
                    *(void *)double v125 = v126;
                    v125 += 8;
                  }
                  a2[1] = v125;
                  ++v124;
                }
                while (v124 != v122);
              }
            }
          }
          std::string::size_type v136 = *(void *)v39;
          int v137 = *(_DWORD *)(*(void *)v39 + 24);
          if (v137 == 7)
          {
            int v187 = *((unsigned __int8 *)v41 + 12);
            if (v187 == 9)
            {
              v258 = *(atomic_ullong **)v41;
              v259 = (uint64_t *)v258[3];
              v260 = (uint64_t *)v258[4];
              int64_t v261 = (char *)v260 - (char *)v259;
              unint64_t v262 = *(void *)(v136 + 88) - *(void *)(v136 + 80);
              if ((char *)v260 - (char *)v259 == v262)
              {
                if (v261) {
                  goto LABEL_371;
                }
              }
              else
              {
                if (v261 == 8 && v262 <= 0xF)
                {
LABEL_597:
                  uint64_t v140 = *v259;
LABEL_598:
                  v410.__r_.__value_.__r.__words[0] = v140;
                  __str.__r_.__value_.__r.__words[0] = v136;
                  __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v410;
                  turi::ml_data_internal::column_metadata::check_fixed_column_size(turi::flexible_type const&)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(void)#1}::operator()((uint64_t *)&__str);
                }
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
                v336 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Dataset mismatch. Numeric feature '", 35);
                int v337 = *(char *)(v136 + 23);
                if (v337 >= 0) {
                  uint64_t v338 = v136;
                }
                else {
                  uint64_t v338 = *(void *)v136;
                }
                if (v337 >= 0) {
                  uint64_t v339 = *(unsigned __int8 *)(v136 + 23);
                }
                else {
                  uint64_t v339 = *(void *)(v136 + 8);
                }
                v340 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v336, v338, v339);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v340, (uint64_t)"' must contain lists of consistent size. (Found lists/arrays of sizes ", 70);
                if (*(void *)(v136 + 80) == *(void *)(v136 + 88))
                {
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                  p_str = (void *)std::ostream::operator<<();
                  v351 = ",)";
                  uint64_t v352 = 2;
                }
                else
                {
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                  uint64_t v341 = *(void *)(v136 + 80);
                  uint64_t v342 = *(void *)(v136 + 88);
                  while (v341 != v342)
                  {
                    v343 = (void *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v343, (uint64_t)",", 1);
                    v341 += 8;
                  }
                  p_str = &__str;
                  v351 = ")";
                  uint64_t v352 = 1;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(p_str, (uint64_t)v351, v352);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)" and (", 6);
                atomic_ullong v356 = v258[3];
                atomic_ullong v357 = v258[4];
                while (v356 != v357)
                {
                  v358 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v358, (uint64_t)",", 1);
                  v356 += 8;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)").", 2);
                std::ostringstream::~ostringstream((uint64_t)&__str);
                v259 = (uint64_t *)v258[3];
                v260 = (uint64_t *)v258[4];
                int64_t v261 = (char *)v260 - (char *)v259;
                if (v260 != v259)
                {
LABEL_371:
                  unint64_t v263 = 0;
                  while (1)
                  {
                    uint64_t v264 = *(void *)(v136 + 80);
                    if (v259[v263] != *(void *)(v264 + 8 * v263))
                    {
                      if (v261 == 8 && (unint64_t)(*(void *)(v136 + 88) - v264) <= 0xF) {
                        goto LABEL_597;
                      }
                      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
                      v265 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Dataset mismatch. Numeric feature '", 35);
                      int v266 = *(char *)(v136 + 23);
                      if (v266 >= 0) {
                        uint64_t v267 = v136;
                      }
                      else {
                        uint64_t v267 = *(void *)v136;
                      }
                      if (v266 >= 0) {
                        uint64_t v268 = *(unsigned __int8 *)(v136 + 23);
                      }
                      else {
                        uint64_t v268 = *(void *)(v136 + 8);
                      }
                      v269 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v265, v267, v268);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v269, (uint64_t)"' must contain lists of consistent size. (Found lists/arrays of sizes ", 70);
                      if (*(void *)(v136 + 80) == *(void *)(v136 + 88))
                      {
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                        v273 = (void *)std::ostream::operator<<();
                        v274 = ",)";
                        uint64_t v275 = 2;
                      }
                      else
                      {
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                        uint64_t v270 = *(void *)(v136 + 80);
                        uint64_t v271 = *(void *)(v136 + 88);
                        while (v270 != v271)
                        {
                          v272 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v272, (uint64_t)",", 1);
                          v270 += 8;
                        }
                        v273 = &__str;
                        v274 = ")";
                        uint64_t v275 = 1;
                      }
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v273, (uint64_t)v274, v275);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)" and (", 6);
                      atomic_ullong v276 = v258[3];
                      atomic_ullong v277 = v258[4];
                      while (v276 != v277)
                      {
                        v278 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v278, (uint64_t)",", 1);
                        v276 += 8;
                      }
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)").", 2);
                      __str.__r_.__value_.__r.__words[0] = v377;
                      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + *(void *)(v377 - 24)) = v376;
                      __str.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
                      if (v417 < 0) {
                        operator delete(v416);
                      }
                      std::streambuf::~streambuf();
                      std::ostream::~ostream();
                      MEMORY[0x22A614E30](v418);
                      v259 = (uint64_t *)v258[3];
                      v260 = (uint64_t *)v258[4];
                    }
                    ++v263;
                    int64_t v261 = (char *)v260 - (char *)v259;
                    if (v263 >= v260 - v259) {
                      goto LABEL_523;
                    }
                  }
                }
              }
              goto LABEL_523;
            }
            if (v187 != 3)
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
              v359 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Check failed (", 14);
              v360 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v359, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/internal_metadata.hpp", 111);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v360, (uint64_t)":", 1);
              v361 = (void *)std::ostream::operator<<();
              v362 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v361, (uint64_t)"): ", 3);
              v363 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v362, (uint64_t)"false", 5);
              std::endl[abi:ne180100]<char,std::char_traits<char>>(v363);
              if (*((int *)global_logger() + 169) <= 6)
              {
                v364 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/internal_metadata.hpp", "operator()", 325, 1);
                std::stringbuf::str();
                file_logger::operator<<<std::string>((uint64_t)v364, (uint64_t)&v410);
                if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v410.__r_.__value_.__l.__data_);
                }
              }
              __print_back_trace();
              size_t __idx = (size_t)&__str;
              turi::ml_data_internal::column_metadata::check_fixed_column_size(turi::flexible_type const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
            }
            double v188 = *(atomic_ullong **)v41;
            if (*(void *)(v136 + 88) - *(void *)(v136 + 80) != 8)
            {
              uint64_t v411 = (v188[2] - v188[1]) >> 3;
              std::vector<unsigned long>::vector[abi:ne180100](&v410, &v411, 1uLL);
              if (v410.__r_.__value_.__l.__size_ - v410.__r_.__value_.__r.__words[0] == 8
                && *(void *)(v136 + 88) - *(void *)(v136 + 80) <= 0xFuLL)
              {
                size_t __idx = *(void *)v410.__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[0] = v136;
                __str.__r_.__value_.__l.__size_ = (std::string::size_type)&__idx;
                turi::ml_data_internal::column_metadata::check_fixed_column_size(turi::flexible_type const&)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(void)#1}::operator()((uint64_t *)&__str);
              }
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
              double v189 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Dataset mismatch. Numeric feature '", 35);
              int v190 = *(char *)(v136 + 23);
              if (v190 >= 0) {
                uint64_t v191 = v136;
              }
              else {
                uint64_t v191 = *(void *)v136;
              }
              if (v190 >= 0) {
                uint64_t v192 = *(unsigned __int8 *)(v136 + 23);
              }
              else {
                uint64_t v192 = *(void *)(v136 + 8);
              }
              double v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, v191, v192);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)"' must contain lists of consistent size. (Found lists/arrays of sizes ", 70);
              if (*(void *)(v136 + 80) == *(void *)(v136 + 88))
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                v347 = (void *)std::ostream::operator<<();
                v348 = ",)";
                uint64_t v349 = 2;
              }
              else
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                uint64_t v194 = *(void *)(v136 + 80);
                uint64_t v195 = *(void *)(v136 + 88);
                while (v194 != v195)
                {
                  float v196 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)",", 1);
                  v194 += 8;
                }
                v347 = &__str;
                v348 = ")";
                uint64_t v349 = 1;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v347, (uint64_t)v348, v349);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)" and (", 6);
              std::string::size_type size = v410.__r_.__value_.__l.__size_;
              for (std::string::size_type i = v410.__r_.__value_.__r.__words[0]; i != size; i += 8)
              {
                v355 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v355, (uint64_t)",", 1);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)").", 2);
              std::ostringstream::~ostringstream((uint64_t)&__str);
              if (v410.__r_.__value_.__r.__words[0])
              {
                v410.__r_.__value_.__l.__size_ = v410.__r_.__value_.__r.__words[0];
                operator delete(v410.__r_.__value_.__l.__data_);
              }
            }
            uint64_t v139 = v188[2] - v188[1];
            goto LABEL_188;
          }
          if (v137 == 2)
          {
            int v138 = *((unsigned __int8 *)v41 + 12);
            if (v138 != 9)
            {
              if (v138 != 3)
              {
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
                v368 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Check failed (", 14);
                v369 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v368, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/internal_metadata.hpp", 111);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v369, (uint64_t)":", 1);
                v370 = (void *)std::ostream::operator<<();
                v371 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v370, (uint64_t)"): ", 3);
                v372 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v371, (uint64_t)"false", 5);
                std::endl[abi:ne180100]<char,std::char_traits<char>>(v372);
                if (*((int *)global_logger() + 169) <= 6)
                {
                  v373 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/internal_metadata.hpp", "operator()", 291, 1);
                  std::stringbuf::str();
                  file_logger::operator<<<std::string>((uint64_t)v373, (uint64_t)&v410);
                  if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v410.__r_.__value_.__l.__data_);
                  }
                }
                __print_back_trace();
                size_t __idx = (size_t)&__str;
                turi::ml_data_internal::column_metadata::check_fixed_column_size(turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
              }
              uint64_t v139 = *(void *)(*(void *)v41 + 16) - *(void *)(*(void *)v41 + 8);
LABEL_188:
              uint64_t v140 = v139 >> 3;
              if (v140 != *(void *)(v136 + 72)) {
                goto LABEL_598;
              }
              goto LABEL_523;
            }
            v248 = *(atomic_ullong **)v41;
            v249 = *(uint64_t **)(*(void *)v41 + 24);
            if (*(void *)(*(void *)v41 + 32) - (void)v249 != 8) {
              goto LABEL_359;
            }
            uint64_t v140 = *v249;
            if (v140 != *(void *)(v136 + 72))
            {
              if (*(void *)(v136 + 88) - *(void *)(v136 + 80) <= 0xFuLL) {
                goto LABEL_598;
              }
LABEL_359:
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
              v250 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Dataset mismatch. Numeric feature '", 35);
              int v251 = *(char *)(v136 + 23);
              if (v251 >= 0) {
                uint64_t v252 = v136;
              }
              else {
                uint64_t v252 = *(void *)v136;
              }
              if (v251 >= 0) {
                uint64_t v253 = *(unsigned __int8 *)(v136 + 23);
              }
              else {
                uint64_t v253 = *(void *)(v136 + 8);
              }
              v254 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v250, v252, v253);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v254, (uint64_t)"' must contain lists of consistent size. (Found lists/arrays of sizes ", 70);
              if (*(void *)(v136 + 80) == *(void *)(v136 + 88))
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                v332 = (void *)std::ostream::operator<<();
                v333 = ",)";
                uint64_t v334 = 2;
              }
              else
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
                uint64_t v256 = *(void *)(v136 + 80);
                uint64_t v255 = *(void *)(v136 + 88);
                while (v256 != v255)
                {
                  v257 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v257, (uint64_t)",", 1);
                  v256 += 8;
                }
                v332 = &__str;
                v333 = ")";
                uint64_t v334 = 1;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v332, (uint64_t)v333, v334);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)" and (", 6);
              atomic_ullong v344 = v248[3];
              atomic_ullong v345 = v248[4];
              while (v344 != v345)
              {
                v346 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v346, (uint64_t)",", 1);
                v344 += 8;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)").", 2);
              std::ostringstream::~ostringstream((uint64_t)&__str);
            }
          }
LABEL_523:
          if (v384) {
            turi::ml_data_internal::column_statistics::update_numeric_statistics(*(void *)(v391 + 48), (uint64_t)a5, *v119);
          }
          if (*((void *)&v398 + 1))
          {
            *(void *)&long long v399 = *((void *)&v398 + 1);
            operator delete(*((void **)&v398 + 1));
          }
          if ((void)v397)
          {
            *((void *)&v397 + 1) = v397;
            operator delete((void *)v397);
          }
          if (v396) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v396);
          }
          goto LABEL_462;
        }
        double v73 = *(atomic_ullong **)v41;
        if (v40 == 2) {
          goto LABEL_411;
        }
        if (v40 == 7)
        {
          if (*(void *)(v391 + 88) - *(void *)(v391 + 80) != 8)
          {
            atomic_ullong v75 = v73[1];
            atomic_ullong v74 = v73[2];
            std::vector<char>::size_type v76 = operator new(8uLL);
            *std::vector<char>::size_type v76 = (v74 - v75) >> 3;
            if (*(void *)(v391 + 88) - *(void *)(v391 + 80) <= 0xFuLL)
            {
              uint64_t v395 = (v74 - v75) >> 3;
              __str.__r_.__value_.__r.__words[0] = v391;
              __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v395;
              turi::ml_data_internal::column_metadata::check_fixed_column_size(turi::flexible_type const&)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(void)#1}::operator()((uint64_t *)&__str);
            }
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
            size_t v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Dataset mismatch. Numeric feature '", 35);
            int v78 = *(char *)(v391 + 23);
            if (v78 >= 0) {
              uint64_t v79 = v391;
            }
            else {
              uint64_t v79 = *(void *)v391;
            }
            if (v78 >= 0) {
              uint64_t v80 = *(unsigned __int8 *)(v391 + 23);
            }
            else {
              uint64_t v80 = *(void *)(v391 + 8);
            }
            std::vector<char>::size_type v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"' must contain lists of consistent size. (Found lists/arrays of sizes ", 70);
            if (*(void *)(v391 + 80) == *(void *)(v391 + 88))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
              float v209 = (void *)std::ostream::operator<<();
              v210 = ",)";
              uint64_t v211 = 2;
            }
            else
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"(", 1);
              uint64_t v82 = *(void *)(v391 + 80);
              uint64_t v83 = *(void *)(v391 + 88);
              while (v82 != v83)
              {
                size_t v84 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)",", 1);
                v82 += 8;
              }
              float v209 = &__str;
              v210 = ")";
              uint64_t v211 = 1;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, (uint64_t)v210, v211);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)" and (", 6);
            v288 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v288, (uint64_t)",", 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)").", 2);
            __str.__r_.__value_.__r.__words[0] = v377;
            *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + *(void *)(v377 - 24)) = v376;
            __str.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
            if (v417 < 0) {
              operator delete(v416);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x22A614E30](v418);
            operator delete(v76);
          }
LABEL_411:
          atomic_ullong v150 = v73[1];
          atomic_ullong v149 = v73[2];
          unint64_t v151 = (v149 - v150) >> 3;
          if (v151 != *(void *)(v391 + 72))
          {
            uint64_t v395 = (v149 - v150) >> 3;
            __str.__r_.__value_.__r.__words[0] = v391;
            __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v395;
            turi::ml_data_internal::column_metadata::check_fixed_column_size(turi::flexible_type const&)::{lambda(unsigned long)#1}::operator() const(unsigned long)::{lambda(void)#1}::operator()((uint64_t *)&__str);
          }
        }
        else
        {
          atomic_ullong v150 = v73[1];
          atomic_ullong v149 = v73[2];
          unint64_t v151 = (v149 - v150) >> 3;
        }
        v289 = v73 + 1;
        if (v149 != v150)
        {
          uint64_t v290 = 0;
          if (v151 <= 1) {
            uint64_t v291 = 1;
          }
          else {
            uint64_t v291 = v151;
          }
          v387 += v291;
          v292 = a2[1];
          do
          {
            uint64_t v293 = *(void *)(*v289 + 8 * v290);
            if ((unint64_t)v292 >= *v23)
            {
              uint64_t v294 = (v292 - *a2) >> 3;
              if ((unint64_t)(v294 + 1) >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v295 = *v23 - (void)*a2;
              uint64_t v296 = v295 >> 2;
              if (v295 >> 2 <= (unint64_t)(v294 + 1)) {
                uint64_t v296 = v294 + 1;
              }
              if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v297 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v297 = v296;
              }
              if (v297) {
                v298 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v297);
              }
              else {
                v298 = 0;
              }
              v299 = &v298[8 * v294];
              *(void *)v299 = v293;
              v292 = v299 + 8;
              v301 = *a2;
              v300 = a2[1];
              if (v300 != *a2)
              {
                do
                {
                  uint64_t v302 = *((void *)v300 - 1);
                  v300 -= 8;
                  *((void *)v299 - 1) = v302;
                  v299 -= 8;
                }
                while (v300 != v301);
                v300 = *a2;
              }
              *a2 = v299;
              a2[1] = v292;
              a2[2] = &v298[8 * v297];
              if (v300) {
                operator delete(v300);
              }
            }
            else
            {
              *(void *)v292 = v293;
              v292 += 8;
            }
            a2[1] = v292;
            ++v290;
          }
          while (v290 != v291);
        }
        if (v384) {
          turi::ml_data_internal::column_statistics::update_numeric_statistics(*(void *)(v391 + 48), (uint64_t)a5, (uint64_t)v289);
        }
        goto LABEL_462;
      case 3:
        if (*((unsigned char *)v41 + 12) != 7)
        {
          uint64_t v64 = *(atomic_ullong **)v41;
          uint64_t v66 = *(void *)(*(void *)v41 + 8);
          uint64_t v65 = *(void *)(*(void *)v41 + 16);
          unint64_t v67 = (v65 - v66) >> 4;
          std::vector<unsigned long>::resize((uint64_t)&v407, v67);
          if (v65 != v66)
          {
            uint64_t v68 = 0;
            uint64_t v69 = 0;
            if (v67 <= 1) {
              uint64_t v70 = 1;
            }
            else {
              uint64_t v70 = (v65 - v66) >> 4;
            }
            do
            {
              unint64_t v71 = *(void ***)(v391 + 32);
              if (a7) {
                unint64_t v72 = turi::ml_data_internal::column_indexer::immutable_map_value_to_index(v71, (atomic_ullong **)(v64[1] + v68));
              }
              else {
                unint64_t v72 = turi::ml_data_internal::column_indexer::map_value_to_index((turi::ml_data_internal::column_indexer *)v71, a5, (atomic_ullong **)(v64[1] + v68));
              }
              *((void *)v407 + v69++) = v72;
              v68 += 16;
            }
            while (v70 != v69);
          }
          std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
          double v142 = (unint64_t *)a2[1];
          unint64_t v141 = (unint64_t)a2[2];
          if ((unint64_t)v142 >= v141)
          {
            uint64_t v144 = ((char *)v142 - *a2) >> 3;
            if ((unint64_t)(v144 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v145 = v141 - (void)*a2;
            uint64_t v146 = v145 >> 2;
            if (v145 >> 2 <= (unint64_t)(v144 + 1)) {
              uint64_t v146 = v144 + 1;
            }
            if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v147 = v146;
            }
            if (v147) {
              double v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v147);
            }
            else {
              double v148 = 0;
            }
            double v171 = (unint64_t *)&v148[8 * v144];
            unint64_t *v171 = v67;
            double v143 = (char *)(v171 + 1);
            double v173 = *a2;
            double v172 = a2[1];
            if (v172 != *a2)
            {
              do
              {
                unint64_t v174 = *((void *)v172 - 1);
                v172 -= 8;
                *--double v171 = v174;
              }
              while (v172 != v173);
              double v172 = *a2;
            }
            *a2 = (char *)v171;
            a2[1] = v143;
            a2[2] = &v148[8 * v147];
            if (v172) {
              operator delete(v172);
            }
          }
          else
          {
            *double v142 = v67;
            double v143 = (char *)(v142 + 1);
          }
          a2[1] = v143;
          if (v65 != v66)
          {
            uint64_t v175 = 0;
            if (v67 <= 1) {
              uint64_t v176 = 1;
            }
            else {
              uint64_t v176 = v67;
            }
            v387 += v176;
            do
            {
              uint64_t v177 = *((void *)v407 + v175);
              if ((unint64_t)v143 >= *v23)
              {
                uint64_t v178 = (v143 - *a2) >> 3;
                if ((unint64_t)(v178 + 1) >> 61) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v179 = *v23 - (void)*a2;
                uint64_t v180 = v179 >> 2;
                if (v179 >> 2 <= (unint64_t)(v178 + 1)) {
                  uint64_t v180 = v178 + 1;
                }
                if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v181 = v180;
                }
                if (v181) {
                  float v182 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v181);
                }
                else {
                  float v182 = 0;
                }
                float v183 = &v182[8 * v178];
                *(void *)float v183 = v177;
                double v143 = v183 + 8;
                double v185 = *a2;
                double v184 = a2[1];
                if (v184 != *a2)
                {
                  do
                  {
                    uint64_t v186 = *((void *)v184 - 1);
                    v184 -= 8;
                    *((void *)v183 - 1) = v186;
                    v183 -= 8;
                  }
                  while (v184 != v185);
                  double v184 = *a2;
                }
                *a2 = v183;
                a2[1] = v143;
                a2[2] = &v182[8 * v181];
                if (v184) {
                  operator delete(v184);
                }
              }
              else
              {
                *(void *)double v143 = v177;
                v143 += 8;
              }
              a2[1] = v143;
              ++v175;
            }
            while (v175 != v176);
          }
          if (v384) {
            turi::ml_data_internal::column_statistics::update_categorical_statistics(*(void **)(v391 + 48), (uint64_t)a5, (unint64_t **)&v407);
          }
          goto LABEL_462;
        }
        if (v383 == 1)
        {
LABEL_577:
          __str.__r_.__value_.__r.__words[0] = *(void *)(v11 + 56) + 16 * v38;
          turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_4::operator() const(void)::{lambda(void)#1}::operator()();
        }
        unint64_t v59 = a2[1];
        unint64_t v326 = (unint64_t)a2[2];
        if ((unint64_t)v59 < v326) {
          goto LABEL_71;
        }
        uint64_t v327 = (v59 - *a2) >> 3;
        if ((unint64_t)(v327 + 1) >> 61) {
LABEL_581:
        }
          std::vector<float>::__throw_length_error[abi:ne180100]();
        uint64_t v328 = v326 - (void)*a2;
        uint64_t v329 = v328 >> 2;
        if (v328 >> 2 <= (unint64_t)(v327 + 1)) {
          uint64_t v329 = v327 + 1;
        }
        if ((unint64_t)v328 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v155 = v329;
        }
        if (v155) {
          double v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v155);
        }
        else {
          double v156 = 0;
        }
        v212 = &v156[8 * v327];
        *(void *)v212 = 0;
        unint64_t v60 = (double *)(v212 + 8);
        v330 = *a2;
        v213 = a2[1];
        if (v213 != *a2)
        {
          do
          {
            uint64_t v331 = *((void *)v213 - 1);
            v213 -= 8;
            *((void *)v212 - 1) = v331;
            v212 -= 8;
          }
          while (v213 != v330);
          goto LABEL_302;
        }
        goto LABEL_303;
      case 4:
        if (*((unsigned char *)v41 + 12) == 7)
        {
          if (v383 == 1) {
            goto LABEL_577;
          }
          unint64_t v59 = a2[1];
          unint64_t v58 = (unint64_t)a2[2];
          if ((unint64_t)v59 >= v58)
          {
            uint64_t v152 = (v59 - *a2) >> 3;
            if ((unint64_t)(v152 + 1) >> 61) {
              goto LABEL_581;
            }
            uint64_t v153 = v58 - (void)*a2;
            uint64_t v154 = v153 >> 2;
            if (v153 >> 2 <= (unint64_t)(v152 + 1)) {
              uint64_t v154 = v152 + 1;
            }
            if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v155 = v154;
            }
            if (v155) {
              double v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v155);
            }
            else {
              double v156 = 0;
            }
            v212 = &v156[8 * v152];
            *(void *)v212 = 0;
            unint64_t v60 = (double *)(v212 + 8);
            v214 = *a2;
            v213 = a2[1];
            if (v213 != *a2)
            {
              do
              {
                uint64_t v215 = *((void *)v213 - 1);
                v213 -= 8;
                *((void *)v212 - 1) = v215;
                v212 -= 8;
              }
              while (v213 != v214);
LABEL_302:
              v213 = *a2;
            }
LABEL_303:
            *a2 = v212;
            a2[1] = (char *)v60;
            a2[2] = &v156[8 * v155];
            if (v213) {
              operator delete(v213);
            }
          }
          else
          {
LABEL_71:
            *(void *)unint64_t v59 = 0;
            unint64_t v60 = (double *)(v59 + 8);
          }
LABEL_461:
          a2[1] = (char *)v60;
          goto LABEL_462;
        }
        BOOL v85 = *(atomic_ullong **)v41;
        uint64_t v86 = *(void *)(*(void *)v41 + 16);
        uint64_t v380 = *(void *)(*(void *)v41 + 8);
        std::vector<std::pair<unsigned long, const char *>>::size_type v87 = (v86 - v380) >> 5;
        std::vector<std::pair<unsigned long,char const*>>::resize(&v403, v87);
        if (v86 == v380)
        {
          std::vector<unsigned int>::pointer begin = v403.__begin_;
LABEL_210:
          unint64_t v157 = 126 - 2 * __clz(v403.__end_ - begin);
          if (v403.__end_ == begin) {
            uint64_t v158 = 0;
          }
          else {
            uint64_t v158 = v157;
          }
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *,false>(&begin->first, (double *)&v403.__end_->first, (uint64_t)&__str, v158, 1);
          double v160 = (std::vector<std::pair<unsigned long, const char *>>::size_type *)a2[1];
          unint64_t v159 = (unint64_t)a2[2];
          if ((unint64_t)v160 >= v159)
          {
            uint64_t v162 = ((char *)v160 - *a2) >> 3;
            if ((unint64_t)(v162 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v163 = v159 - (void)*a2;
            uint64_t v164 = v163 >> 2;
            if (v163 >> 2 <= (unint64_t)(v162 + 1)) {
              uint64_t v164 = v162 + 1;
            }
            if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v165 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v165 = v164;
            }
            if (v165) {
              double v166 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v165);
            }
            else {
              double v166 = 0;
            }
            v216 = (std::vector<std::pair<unsigned long, const char *>>::size_type *)&v166[8 * v162];
            std::vector<std::pair<unsigned long, const char *>>::size_type *v216 = v87;
            double v161 = v216 + 1;
            v218 = *a2;
            v217 = a2[1];
            if (v217 != *a2)
            {
              do
              {
                std::vector<std::pair<unsigned long, const char *>>::size_type v219 = *((void *)v217 - 1);
                v217 -= 8;
                *--v216 = v219;
              }
              while (v217 != v218);
              v217 = *a2;
            }
            *a2 = (char *)v216;
            a2[1] = (char *)v161;
            a2[2] = &v166[8 * v165];
            if (v217) {
              operator delete(v217);
            }
          }
          else
          {
            *double v160 = v87;
            double v161 = v160 + 1;
          }
          a2[1] = (char *)v161;
          if (v86 != v380)
          {
            uint64_t v220 = 0;
            if (v87 <= 1) {
              std::vector<std::pair<unsigned long, const char *>>::size_type v87 = 1;
            }
            v387 += v87;
            do
            {
              v221 = &v403.__begin_[v220];
              unint64_t first = v221->first;
              second = v221->second;
              if ((unint64_t)v161 >= *v23)
              {
                uint64_t v225 = ((char *)v161 - *a2) >> 3;
                if ((unint64_t)(v225 + 1) >> 61) {
                  goto LABEL_568;
                }
                uint64_t v226 = *v23 - (void)*a2;
                uint64_t v227 = v226 >> 2;
                if (v226 >> 2 <= (unint64_t)(v225 + 1)) {
                  uint64_t v227 = v225 + 1;
                }
                if ((unint64_t)v226 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v228 = v227;
                }
                if (v228) {
                  v229 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v228);
                }
                else {
                  v229 = 0;
                }
                v230 = (unint64_t *)&v229[8 * v225];
                unint64_t *v230 = first;
                v224 = (const char **)(v230 + 1);
                v232 = *a2;
                v231 = a2[1];
                if (v231 != *a2)
                {
                  do
                  {
                    unint64_t v233 = *((void *)v231 - 1);
                    v231 -= 8;
                    *--v230 = v233;
                  }
                  while (v231 != v232);
                  v231 = *a2;
                }
                *a2 = (char *)v230;
                a2[1] = (char *)v224;
                a2[2] = &v229[8 * v228];
                if (v231) {
                  operator delete(v231);
                }
              }
              else
              {
                unint64_t *v161 = first;
                v224 = (const char **)(v161 + 1);
              }
              a2[1] = (char *)v224;
              unint64_t v234 = (unint64_t)a2[2];
              if ((unint64_t)v224 >= v234)
              {
                uint64_t v235 = ((char *)v224 - *a2) >> 3;
                if ((unint64_t)(v235 + 1) >> 61) {
LABEL_568:
                }
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                uint64_t v236 = v234 - (void)*a2;
                uint64_t v237 = v236 >> 2;
                if (v236 >> 2 <= (unint64_t)(v235 + 1)) {
                  uint64_t v237 = v235 + 1;
                }
                if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v238 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v238 = v237;
                }
                if (v238) {
                  v239 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a2 + 2), v238);
                }
                else {
                  v239 = 0;
                }
                v240 = (const char **)&v239[8 * v235];
                *v240 = second;
                double v161 = (unint64_t *)(v240 + 1);
                v242 = *a2;
                v241 = a2[1];
                if (v241 != *a2)
                {
                  do
                  {
                    v243 = (const char *)*((void *)v241 - 1);
                    v241 -= 8;
                    *--v240 = v243;
                  }
                  while (v241 != v242);
                  v241 = *a2;
                }
                *a2 = (char *)v240;
                a2[1] = (char *)v161;
                a2[2] = &v239[8 * v238];
                if (v241) {
                  operator delete(v241);
                }
              }
              else
              {
                *v224 = second;
                double v161 = (unint64_t *)(v224 + 1);
              }
              a2[1] = (char *)v161;
              ++v220;
            }
            while (v220 != v87);
          }
          if ((v384 & 1) == 0) {
            goto LABEL_462;
          }
          if (__p != v401)
          {
            if (v401 - (unsigned char *)__p == 8)
            {
              std::vector<std::pair<unsigned long, const char *>>::pointer v244 = v403.__begin_;
              std::vector<std::pair<unsigned long, const char *>>::pointer end = v403.__end_;
              if (v403.__begin_ != v403.__end_)
              {
                uint64_t v246 = *(void *)__p;
                std::vector<std::pair<unsigned long, const char *>>::pointer v247 = v403.__begin_;
                while (v247->first != v246)
                {
                  if (++v247 == v403.__end_) {
                    goto LABEL_437;
                  }
                }
                if (v247 != v403.__end_)
                {
                  for (unint64_t j = &v247[1].first; j != (void *)end; j += 2)
                  {
                    if (*j != v246)
                    {
                      v247->unint64_t first = *j;
                      v247->second = (const char *)j[1];
                      ++v247;
                    }
                  }
                }
                goto LABEL_406;
              }
LABEL_436:
              std::vector<std::pair<unsigned long, const char *>>::pointer end = v244;
            }
            else
            {
              std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
              std::vector<std::pair<unsigned long, const char *>>::pointer v244 = v403.__begin_;
              std::vector<std::pair<unsigned long, const char *>>::pointer v247 = v403.__end_;
              if (v403.__begin_ == v403.__end_) {
                goto LABEL_436;
              }
              v279 = (char *)__p;
              v280 = v401;
              uint64_t v281 = (v401 - (unsigned char *)__p) >> 3;
              std::vector<std::pair<unsigned long, const char *>>::pointer end = v403.__begin_;
              while (1)
              {
                v282 = (char *)__p;
                if (v401 != __p)
                {
                  v282 = (char *)__p;
                  unint64_t v283 = (v401 - (unsigned char *)__p) >> 3;
                  do
                  {
                    unint64_t v284 = v283 >> 1;
                    v285 = (unint64_t *)&v282[8 * (v283 >> 1)];
                    unint64_t v287 = *v285;
                    v286 = (char *)(v285 + 1);
                    v283 += ~(v283 >> 1);
                    if (v287 < end->first) {
                      v282 = v286;
                    }
                    else {
                      unint64_t v283 = v284;
                    }
                  }
                  while (v283);
                }
                if (v282 != v401 && *(void *)v282 == end->first) {
                  break;
                }
                if (++end == v403.__end_) {
                  goto LABEL_406;
                }
              }
              if (end == v403.__end_)
              {
LABEL_406:
                std::vector<std::pair<unsigned long, const char *>>::pointer end = v247;
              }
              else
              {
                std::vector<std::pair<unsigned long, const char *>>::pointer v316 = end + 1;
                if (&end[1] != v403.__end_)
                {
                  v317 = end;
                  do
                  {
                    v318 = v316;
                    unint64_t v319 = end[1].first;
                    v320 = v279;
                    if (v280 != v279)
                    {
                      v320 = v279;
                      unint64_t v321 = v281;
                      do
                      {
                        unint64_t v322 = v321 >> 1;
                        v323 = (unint64_t *)&v320[8 * (v321 >> 1)];
                        unint64_t v325 = *v323;
                        v324 = (char *)(v323 + 1);
                        v321 += ~(v321 >> 1);
                        if (v325 < v319) {
                          v320 = v324;
                        }
                        else {
                          unint64_t v321 = v322;
                        }
                      }
                      while (v321);
                    }
                    if (v320 == v280 || *(void *)v320 != v319)
                    {
                      v317->unint64_t first = v319;
                      v317->second = end[1].second;
                      ++v317;
                    }
                    std::vector<std::pair<unsigned long, const char *>>::pointer v316 = v318 + 1;
                    std::vector<std::pair<unsigned long, const char *>>::pointer end = v318;
                  }
                  while (&v318[1] != v247);
                  std::vector<std::pair<unsigned long, const char *>>::pointer end = v317;
                }
              }
            }
LABEL_437:
            std::vector<std::pair<unsigned long,char const*>>::resize(&v403, end - v244);
            v401 = (char *)__p;
          }
          turi::ml_data_internal::column_statistics::update_dict_statistics(*(void **)(v391 + 48), (uint64_t)a5, (unint64_t **)&v403);
LABEL_462:
          ++v38;
          uint64_t v11 = v385;
          uint64_t v25 = v386;
          if (v38 >= *(void *)(v385 + 48)) {
            goto LABEL_547;
          }
          continue;
        }
        uint64_t v374 = v86;
        uint64_t v375 = (v86 - v380) >> 5;
        uint64_t v88 = 0;
        if (v87 <= 1) {
          std::vector<std::pair<unsigned long, const char *>>::size_type v87 = 1;
        }
        while (1)
        {
          atomic_ullong v89 = v85[1];
          BOOL v90 = *(void ***)(v391 + 32);
          if (a7) {
            unint64_t v91 = turi::ml_data_internal::column_indexer::immutable_map_value_to_index(v90, (atomic_ullong **)(v89 + 32 * v88));
          }
          else {
            unint64_t v91 = turi::ml_data_internal::column_indexer::map_value_to_index((turi::ml_data_internal::column_indexer *)v90, a5, (atomic_ullong **)(v89 + 32 * v88));
          }
          unint64_t v92 = v91;
          atomic_ullong v93 = v89 + 32 * v88;
          int v94 = *(unsigned __int8 *)(v93 + 28);
          if (v94 == 7)
          {
            if (v383)
            {
              if (v383 != 2)
              {
                if (v383 == 1)
                {
                  __str.__r_.__value_.__r.__words[0] = v39;
                  turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_4::operator() const(void)::{lambda(void)#1}::operator()();
                }
                turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_5::operator() const(unsigned long)::{lambda(void)#1}::operator()();
              }
              double v96 = NAN;
            }
            else
            {
              double v96 = turi::ml_data_internal::column_statistics::mean(*(turi::ml_data_internal::column_statistics **)(v391 + 48), v91);
            }
            size_t v97 = v401;
            if (v401 >= v402)
            {
              size_t v99 = (char *)__p;
              uint64_t v100 = (v401 - (unsigned char *)__p) >> 3;
              unint64_t v101 = v100 + 1;
              if ((unint64_t)(v100 + 1) >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v102 = v402 - (unsigned char *)__p;
              if ((v402 - (unsigned char *)__p) >> 2 > v101) {
                unint64_t v101 = v102 >> 2;
              }
              if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v103 = v101;
              }
              if (v103)
              {
                size_t v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v402, v103);
                size_t v99 = (char *)__p;
                size_t v97 = v401;
              }
              else
              {
                size_t v104 = 0;
              }
              BOOL v105 = (unint64_t *)&v104[8 * v100];
              unint64_t *v105 = v92;
              uint64_t v98 = (char *)(v105 + 1);
              while (v97 != v99)
              {
                unint64_t v106 = *((void *)v97 - 1);
                v97 -= 8;
                *--BOOL v105 = v106;
              }
              std::string __p = v105;
              v401 = v98;
              v402 = &v104[8 * v103];
              if (v99) {
                operator delete(v99);
              }
            }
            else
            {
              *(void *)v401 = v92;
              uint64_t v98 = v97 + 8;
            }
            v401 = v98;
            goto LABEL_133;
          }
          BOOL v95 = (double *)(v93 + 16);
          if (v94 == 1)
          {
            double v96 = *v95;
            goto LABEL_133;
          }
          if (v94) {
            break;
          }
          double v96 = (double)*(uint64_t *)v95;
LABEL_133:
          std::vector<unsigned int>::pointer begin = v403.__begin_;
          double v108 = &v403.__begin_[v88];
          v108->unint64_t first = v92;
          *(double *)&v108->second = v96;
          if (++v88 == v87)
          {
            uint64_t v86 = v374;
            std::vector<std::pair<unsigned long, const char *>>::size_type v87 = v375;
            goto LABEL_210;
          }
        }
        __str.__r_.__value_.__r.__words[0] = v89 + 32 * v88;
        __str.__r_.__value_.__l.__size_ = v39;
        uint64_t result = turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_8::operator() const(void)::{lambda(void)#1}::operator()((turi::flexible_type_impl **)&__str);
LABEL_601:
        __break(1u);
        return result;
      default:
        goto LABEL_462;
    }
  }
}

void sub_22434A0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a62);
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a34);
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

void std::vector<turi::ml_data_internal::entry_value>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void turi::ml_data_internal::column_statistics::update_numeric_statistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(double **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  if (*(void *)a3 != v4)
  {
    uint64_t v6 = *(void *)(a1 + 96);
    unint64_t v7 = (void *)(*(void *)(a1 + 144) + 24 * a2);
    unint64_t v8 = (v4 - (uint64_t)v3) >> 3;
    if (*v7 == v7[1])
    {
      std::vector<xgboost_old::tree::RTreeNodeStat>::resize((uint64_t)v7, v8);
      uint64_t v17 = *(double **)a3;
      uint64_t v18 = *(void *)(a3 + 8) - *(void *)a3;
      if (v18)
      {
        unint64_t v19 = v18 >> 3;
        if (v19 <= 1) {
          unint64_t v19 = 1;
        }
        unint64_t v20 = (void *)(*v7 + 8);
        do
        {
          uint64_t v21 = *(void *)v17++;
          *(v20 - 1) = v21;
          *unint64_t v20 = 0;
          v20 += 2;
          --v19;
        }
        while (v19);
      }
    }
    else
    {
      double v9 = (double)(unint64_t)(*(void *)(v6 + 8 * a2) + 1);
      if (v8 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = (v4 - (uint64_t)v3) >> 3;
      }
      uint64_t v11 = (double *)(*v7 + 8);
      do
      {
        double v12 = *(v11 - 1);
        double v13 = *v3++;
        double v14 = v13 - v12;
        double v15 = v12 + (v13 - v12) / v9;
        *(v11 - 1) = v15;
        double *v11 = *v11 + v14 * (v13 - v15);
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    ++*(void *)(v6 + 8 * a2);
  }
}

void turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_7::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", "operator()", 626, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_7::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22434A658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::ml_data_internal::column_indexer::immutable_map_value_to_index(void **this, atomic_ullong **a2)
{
  v27[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  unsigned int v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 > 7 || ((1 << v3) & 0x85) == 0)
  {
    uint64_t v21 = this;
    unint64_t v22 = (const turi::flexible_type *)a2;
    turi::ml_data_internal::column_indexer::immutable_map_value_to_index(turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()((uint64_t *)&v21);
  }
  memset(v27, 0, 13);
  if (v27 != a2)
  {
    *(atomic_ullong **)((char *)v27 + 5) = *(atomic_ullong **)((char *)a2 + 5);
    v27[0] = *a2;
    BYTE4(v27[1]) = v3;
    if (v3 - 2 <= 3) {
      atomic_fetch_add(v27[0], 1uLL);
    }
  }
  turi::hash128(v26, (turi *)v27, (const turi::flexible_type *)a2);
  switch(BYTE4(v27[1]))
  {
    case 2:
      if (atomic_fetch_add(v27[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int64_t v5 = v27[0];
        if (v27[0])
        {
          if (*((char *)v27[0] + 31) < 0) {
            operator delete(*((void **)v27[0] + 1));
          }
          uint64_t v6 = v5;
          uint64_t v7 = 0x1012C404EF22A49;
          goto LABEL_39;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v27[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v14 = v27[0];
        if (v27[0])
        {
          double v15 = (void *)v27[0][1];
          if (v15)
          {
            v27[0][2] = (atomic_ullong)v15;
            operator delete(v15);
          }
          uint64_t v6 = v14;
          uint64_t v7 = 0x1080C409938AC02;
          goto LABEL_39;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v27[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v8 = v27[0];
        if (v27[0])
        {
          uint64_t v21 = (void **)(v27[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v21);
          goto LABEL_34;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v27[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v8 = v27[0];
        if (v27[0])
        {
          uint64_t v21 = (void **)(v27[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v21);
LABEL_34:
          uint64_t v6 = v8;
          uint64_t v7 = 0x1020C405E66F15BLL;
          goto LABEL_39;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v27[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v16 = v27[0];
        if (v27[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v27[0] + 2);
          uint64_t v6 = v16;
          unsigned int v13 = -235920773;
          goto LABEL_38;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v27[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v9 = v27[0];
        if (v27[0])
        {
          uint64_t v10 = (void *)v27[0][6];
          if (v10)
          {
            v27[0][7] = (atomic_ullong)v10;
            operator delete(v10);
          }
          uint64_t v11 = (void *)v9[3];
          if (v11)
          {
            Bytef v9[4] = (atomic_ullong)v11;
            operator delete(v11);
          }
          double v12 = (std::__shared_weak_count *)v9[2];
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
          uint64_t v6 = v9;
          unsigned int v13 = 2071181815;
LABEL_38:
          uint64_t v7 = v13 | 0x1030C4000000000;
LABEL_39:
          MEMORY[0x22A614FA0](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  memset(v27, 0, 13);
  uint64_t v17 = (void **)((char *)this[4] + 72 * (((0xDEB2A42E44AA4C17 * v26[1]) ^ (0x7E952A7B972F486FLL * v26[0])) >> 56) + 8);
  turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>::find((uint64_t)v17, v26, (uint64_t)&v21);
  if (v21 != v17)
  {
    if (v25) {
      uint64_t v18 = v24;
    }
    else {
      uint64_t v18 = v23;
    }
    return *(void *)(v18 + 32);
  }
  if (v25)
  {
    uint64_t v18 = v24;
    if (v24) {
      return *(void *)(v18 + 32);
    }
  }
  else
  {
    uint64_t v18 = v23;
    if (v22 != *v17 || v23 != *((void *)*v17 + 1)) {
      return *(void *)(v18 + 32);
    }
  }
  return -1;
}

void sub_22434AAB4(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 - 28))
  {
    case 2:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)(v1 - 40));
      break;
    case 3:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)(v1 - 40));
      break;
    case 4:
      turi::gl_sframe::pack_columns((atomic_ullong *volatile *)(v1 - 40));
      break;
    case 5:
      turi::gl_sframe::pack_columns((atomic_ullong *volatile *)(v1 - 40));
      break;
    case 8:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)(v1 - 40));
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)(v1 - 40));
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void turi::ml_data_internal::column_statistics::update_categorical_statistics(void *a1, uint64_t a2, unint64_t **a3)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  uint64_t v8 = v7 - *a3;
  if (v7 == *a3)
  {
    unint64_t v13 = 0;
    uint64_t v6 = a3[1];
  }
  else
  {
    unint64_t v9 = *v6;
    unint64_t v10 = a1[11];
    if (*v6 >= v10)
    {
      unint64_t v13 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = a1[15] + 24 * a2;
      do
      {
        if (v9 >= (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 3)
        {
          if (v9 >= (uint64_t)(*(void *)(v12 + 16) - *(void *)v12) >> 3)
          {
            unint64_t v14 = (3 * (v9 + 1)) >> 1;
            if (v14 >= v10) {
              unint64_t v14 = v10;
            }
            if (v14 <= v10 >> 1) {
              unint64_t v15 = v14;
            }
            else {
              unint64_t v15 = v10;
            }
            std::vector<unsigned long>::reserve((void **)v12, v15);
          }
          std::vector<unsigned long>::resize(v12, v9 + 1);
          uint64_t v6 = *a3;
        }
        if (!v11 || v9 != v6[v11 - 1]) {
          ++*(void *)(*(void *)v12 + 8 * v9);
        }
        unint64_t v13 = v11 + 1;
        uint64_t v7 = a3[1];
        if (v11 + 1 >= (unint64_t)(v7 - v6)) {
          break;
        }
        unint64_t v9 = v6[v11 + 1];
        unint64_t v10 = a1[11];
        ++v11;
      }
      while (v9 < v10);
      uint64_t v8 = v7 - v6;
    }
  }
  if (v13 != v8 && v13 < v7 - v6)
  {
    uint64_t v16 = a1 + 21;
    do
    {
      unint64_t v17 = v6[v13] - a1[11];
      if (a1[35] <= v17)
      {
        unint64_t v19 = v17 + 1;
        unint64_t v20 = a1[35];
        if (v20 < v17 + 1)
        {
          unint64_t v21 = a1[35];
          do
          {
            atomic_compare_exchange_strong(a1 + 35, &v21, v19);
            BOOL v22 = v21 == v20 || v21 >= v19;
            unint64_t v20 = v21;
          }
          while (!v22);
        }
      }
      if (a1[36] <= v17)
      {
        turi::ml_data_internal::column_statistics::resize_global_arrays<std::vector<unsigned long>>((uint64_t)a1, v17, (uint64_t)(a1 + 29));
        if (!v13)
        {
LABEL_29:
          unint64_t v18 = v17 & 0x3F;
          do
          {
            while (*((unsigned char *)v16 + v18) == 1)
              ;
          }
          while (atomic_exchange((atomic_uchar *volatile)v16 + v18, 1u));
          ++*(void *)(a1[29] + 8 * v17);
          __dmb(0xBu);
          *((unsigned char *)v16 + v1++*(_DWORD *)(result + 8) = 0;
          uint64_t v6 = *a3;
          goto LABEL_33;
        }
      }
      else if (!v13)
      {
        goto LABEL_29;
      }
      uint64_t v6 = *a3;
      if (v17 != (*a3)[v13 - 1]) {
        goto LABEL_29;
      }
LABEL_33:
      ++v13;
    }
    while (v13 < a3[1] - v6);
  }
  ++*(void *)(a1[12] + 8 * a2);
}

void turi::ml_data_internal::column_statistics::update_dict_statistics(void *a1, uint64_t a2, unint64_t **a3)
{
  int64_t v5 = *a3;
  uint64_t v6 = a3[1];
  unint64_t v7 = ((char *)v6 - (char *)*a3) >> 4;
  uint64_t v46 = a1[12];
  if (v6 == *a3)
  {
    unint64_t v14 = 0;
    int64_t v5 = a3[1];
  }
  else
  {
    unint64_t v8 = *v5;
    unint64_t v9 = a1[11];
    if (*v5 >= v9)
    {
      unint64_t v14 = 0;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = a1[15] + 24 * a2;
      uint64_t v12 = a1[18] + 24 * a2;
      uint64_t v13 = 1;
      do
      {
        unint64_t v14 = v13;
        double v15 = *(double *)&v5[v10 + 1];
        if (v8 >= (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 3)
        {
          if (v8 >= (uint64_t)(*(void *)(v11 + 16) - *(void *)v11) >> 3)
          {
            unint64_t v24 = (3 * (v8 + 1)) >> 1;
            if (v24 >= v9) {
              unint64_t v24 = v9;
            }
            if (v24 <= v9 >> 1) {
              unint64_t v25 = v24;
            }
            else {
              unint64_t v25 = v9;
            }
            std::vector<unsigned long>::reserve((void **)v11, v25);
          }
          std::vector<unsigned long>::resize(v11, v8 + 1);
        }
        uint64_t v16 = *(char **)v12;
        if (v8 >= (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 4)
        {
          if (v8 >= (uint64_t)(*(void *)(v12 + 16) - (void)v16) >> 4)
          {
            unint64_t v26 = (3 * (v8 + 1)) >> 1;
            unint64_t v27 = a1[11];
            if (v26 >= v27) {
              unint64_t v26 = a1[11];
            }
            if (v26 <= v27 >> 1) {
              unint64_t v28 = v26;
            }
            else {
              unint64_t v28 = a1[11];
            }
            std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>::reserve((void **)v12, v28);
          }
          std::vector<xgboost_old::tree::RTreeNodeStat>::resize(v12, v8 + 1);
          uint64_t v16 = *(char **)v12;
        }
        unint64_t v17 = *(void **)v11;
        unint64_t v18 = (double *)&v16[16 * v8];
        unint64_t v19 = v18 + 1;
        uint64_t v20 = *(void *)(*(void *)v11 + 8 * v8);
        if (v20)
        {
          unint64_t v21 = v20 + 1;
          double v22 = v15 - *v18;
          double v23 = *v19 + v22 * (v15 - (*v18 + v22 / (double)v21));
          double v15 = *v18 + v22 / (double)v21;
        }
        else
        {
          double v23 = 0.0;
          unint64_t v21 = 1;
        }
        *unint64_t v18 = v15;
        v17[v8] = v21;
        double *v19 = v23;
        int64_t v5 = *a3;
        uint64_t v6 = a3[1];
        unint64_t v7 = ((char *)v6 - (char *)*a3) >> 4;
        if (v14 >= v7) {
          break;
        }
        unint64_t v8 = v5[v10 + 2];
        unint64_t v9 = a1[11];
        v10 += 2;
        uint64_t v13 = v14 + 1;
      }
      while (v8 < v9);
    }
  }
  if (v14 != v7 && v14 < ((char *)v6 - (char *)v5) >> 4)
  {
    unint64_t v29 = a1 + 29;
    uint64_t v30 = a1 + 21;
    do
    {
      uint64_t v31 = (double *)&v5[2 * v14];
      unint64_t v32 = *(void *)v31 - a1[11];
      double v33 = v31[1];
      if (a1[35] <= v32)
      {
        unint64_t v42 = v32 + 1;
        unint64_t v43 = a1[35];
        if (v43 < v32 + 1)
        {
          unint64_t v44 = a1[35];
          do
          {
            atomic_compare_exchange_strong(a1 + 35, &v44, v42);
            BOOL v45 = v44 == v43 || v44 >= v42;
            unint64_t v43 = v44;
          }
          while (!v45);
        }
      }
      if (a1[36] <= v32) {
        turi::ml_data_internal::column_statistics::resize_global_arrays<std::vector<unsigned long>,std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>((uint64_t)a1, v32, (uint64_t)(a1 + 29), (uint64_t)(a1 + 32));
      }
      unint64_t v34 = v32 & 0x3F;
      do
      {
        while (*((unsigned char *)v30 + v34) == 1)
          ;
      }
      while (atomic_exchange((atomic_uchar *volatile)v30 + v34, 1u));
      uint64_t v35 = *v29;
      unint64_t v36 = (double *)(a1[32] + 16 * v32);
      uint64_t v37 = v36 + 1;
      uint64_t v38 = *(void *)(*v29 + 8 * v32);
      if (v38)
      {
        unint64_t v39 = v38 + 1;
        double v40 = v33 - *v36;
        double v41 = *v37 + v40 * (v33 - (*v36 + v40 / (double)v39));
        double v33 = *v36 + v40 / (double)v39;
      }
      else
      {
        double v41 = 0.0;
        unint64_t v39 = 1;
      }
      *unint64_t v36 = v33;
      *(void *)(v35 + 8 * v32) = v39;
      *uint64_t v37 = v41;
      __dmb(0xBu);
      *((unsigned char *)v30 + v34) = 0;
      ++v14;
      int64_t v5 = *a3;
    }
    while (v14 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  ++*(void *)(v46 + 8 * a2);
}

void turi::ml_data_internal::estimate_num_data_entries(std::shared_ptr<turi::ml_data_internal::column_metadata> const&,turi::flexible_type const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unsigned int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", "operator()", 995, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::ml_data_internal::estimate_num_data_entries(std::shared_ptr<turi::ml_data_internal::column_metadata> const&,turi::flexible_type const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22434B2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

double turi::ml_data_internal::column_statistics::mean(turi::ml_data_internal::column_statistics *this, unint64_t a2)
{
  if ((*((_DWORD *)this + 6) | 2) == 3)
  {
    uint64_t v2 = *((void *)this + 4);
    double v3 = 0.0;
    if (a2 < (*((void *)this + 5) - v2) >> 3) {
      double v3 = (double)*(unint64_t *)(v2 + 8 * a2);
    }
    return v3 / fmax((double)*((unint64_t *)this + 10), 1.0);
  }
  else
  {
    uint64_t v5 = *((void *)this + 7);
    double result = 0.0;
    if (a2 < (*((void *)this + 8) - v5) >> 4) {
      return *(double *)(v5 + 16 * a2);
    }
  }
  return result;
}

void turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_5::operator() const(unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/data_storage/ml_data_row_format.cpp", "operator()", 538, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::ml_data_internal::fill_row_buffer_from_column_buffer(std::vector<unsigned long> &,turi::ml_data_internal::row_data_block &,turi::ml_data_internal::row_metadata const&,std::vector<std::vector<turi::flexible_type>> const&,unsigned long,BOOL,BOOL,turi::ml_missing_value_action)::$_5::operator() const(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22434B53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void sub_22434B6A8(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(_DWORD *)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::ml_data_internal::column_statistics::resize_global_arrays<std::vector<unsigned long>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 88);
  char v7 = (std::mutex *)(a1 + 296);
  std::mutex::lock((std::mutex *)(a1 + 296));
  if (*(void *)(a1 + 288) <= a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 2 * (v6 + a2) + 2;
    do
    {
      uint64_t v10 = &v17[v8];
      *(void *)uint64_t v10 = 0;
      v10[8] = 0;
      v8 += 16;
    }
    while (v8 != 1024);
    uint64_t v11 = 0;
    uint64_t v12 = a1 + 168;
    do
    {
      uint64_t v13 = &v17[v11];
      if (v17[v11 + 8])
      {
        unint64_t v14 = *(unsigned char **)v13;
        __dmb(0xBu);
        unsigned char *v14 = 0;
      }
      *(void *)&v17[v11] = v12;
      v13[8] = 0;
      v11 += 16;
      ++v12;
    }
    while (v11 != 1024);
    boost::detail::lock_impl<std::unique_lock<turi::simple_spinlock> *>(v17, (uint64_t)&v18);
    std::vector<unsigned long>::resize(a3, v9);
    *(void *)(a1 + 28++*(_DWORD *)(result + 8) = v9;
    uint64_t v15 = 1024;
    do
    {
      if (v17[v15 - 8])
      {
        uint64_t v16 = *(unsigned char **)&v17[v15 - 16];
        __dmb(0xBu);
        *uint64_t v16 = 0;
      }
      v15 -= 16;
    }
    while (v15);
  }
  std::mutex::unlock(v7);
}

void sub_22434B7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = 1024;
  while (1)
  {
    if (*((unsigned char *)&a9 + v11 - 8))
    {
      uint64_t v12 = *(unsigned char **)((char *)&a9 + v11 - 16);
      __dmb(0xBu);
      unsigned char *v12 = 0;
    }
    v11 -= 16;
    if (!v11)
    {
      std::mutex::unlock(v9);
      _Unwind_Resume(a1);
    }
  }
}

unsigned char *boost::detail::lock_impl<std::unique_lock<turi::simple_spinlock> *>(unsigned char *result, uint64_t a2)
{
  if (result == (unsigned char *)a2) {
    return result;
  }
  double v3 = result;
  uint64_t v4 = (uint64_t)(result + 16);
  char v5 = 1;
  for (uint64_t i = (uint64_t)(result + 16); ; uint64_t i = v7)
  {
    uint64_t v11 = v3;
    char v12 = 0;
    if ((v5 & 1) == 0) {
      break;
    }
    boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::lock((uint64_t)&v11);
    uint64_t v7 = boost::detail::try_lock_impl<std::unique_lock<turi::simple_spinlock> *>(i, a2);
    if (v7 == a2)
    {
      uint64_t v11 = 0;
      char v12 = 0;
      return boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::~unique_lock(&v11);
    }
    char v5 = 0;
LABEL_9:
    boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::~unique_lock(&v11);
  }
  uint64_t v9 = i;
  uint64_t v10 = a2;
  boost::detail::lock_impl<std::unique_lock<turi::simple_spinlock> *>(i, a2);
  int v8 = boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::try_lock((uint64_t)&v11);
  uint64_t v7 = v4;
  if (!v8 || (uint64_t v7 = boost::detail::try_lock_impl<std::unique_lock<turi::simple_spinlock> *>(v4, i), v7 != i))
  {
    char v5 = v8 ^ 1;
    boost::detail::range_lock_guard<std::unique_lock<turi::simple_spinlock> *>::~range_lock_guard(&v9);
    goto LABEL_9;
  }
  uint64_t v11 = 0;
  char v12 = 0;
  uint64_t v9 = v10;
  boost::detail::range_lock_guard<std::unique_lock<turi::simple_spinlock> *>::~range_lock_guard(&v9);
  return boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::~unique_lock(&v11);
}

void sub_22434B920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::lock(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if (!v2)
  {
    boost::lock_error::lock_error((boost::lock_error *)v4, 1u, "boost unique_lock has no mutex");
    boost::throw_exception<boost::lock_error>((uint64_t)v4);
  }
  if (*(unsigned char *)(a1 + 8))
  {
    boost::lock_error::lock_error((boost::lock_error *)v4, 0xBu, "boost unique_lock owns already the mutex");
    boost::throw_exception<boost::lock_error>((uint64_t)v4);
  }
  uint64_t result = std::unique_lock<turi::simple_spinlock>::lock(v2);
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 8) = 1;
  return result;
}

void sub_22434B9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
}

uint64_t boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::try_lock(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if (!v2)
  {
    boost::lock_error::lock_error((boost::lock_error *)v4, 1u, "boost unique_lock has no mutex");
    boost::throw_exception<boost::lock_error>((uint64_t)v4);
  }
  if (*(unsigned char *)(a1 + 8))
  {
    boost::lock_error::lock_error((boost::lock_error *)v4, 0xBu, "boost unique_lock owns already the mutex");
    boost::throw_exception<boost::lock_error>((uint64_t)v4);
  }
  uint64_t result = std::unique_lock<turi::simple_spinlock>::try_lock(v2);
  *(unsigned char *)(a1 + ++*(_DWORD *)(result + 8) = result;
  return result;
}